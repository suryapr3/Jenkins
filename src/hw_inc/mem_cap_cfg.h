#ifndef _MEM_CAP_CFG_H_
#define _MEM_CAP_CFG_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define MEM_CAP0_CFG_BASE     ( 0x041f0400 )
#define MEM_CAP1_CFG_BASE     ( 0x043f0400 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define MEM_CAP_CFG_BFNE_CFG0_OFFSET ( 0x00000000U )
#define MEM_CAP_CFG_BFNE_CFG1_OFFSET ( 0x00000004U )
#define MEM_CAP_CFG_BFNE_CFG2_OFFSET ( 0x00000008U )
#define MEM_CAP_CFG_BFNE_CFG3_OFFSET ( 0x0000000cU )
#define MEM_CAP_CFG_BFNE_CFG4_OFFSET ( 0x00000010U )
#define MEM_CAP_CFG_BFNE_CFG5_OFFSET ( 0x00000014U )
#define MEM_CAP_CFG_BFNE_CFG6_OFFSET ( 0x00000018U )
#define MEM_CAP_CFG_BFNE_CFG7_OFFSET ( 0x0000001cU )
#define MEM_CAP_CFG_BFNE_CFG8_OFFSET ( 0x00000020U )
#define MEM_CAP_CFG_BFNE_CFG9_OFFSET ( 0x00000024U )
#define MEM_CAP_CFG_BFNE_CFG10_OFFSET ( 0x00000028U )
#define MEM_CAP_CFG_BFNE_CFG11_OFFSET ( 0x0000002cU )
#define MEM_CAP_CFG_BFNE_CFG12_OFFSET ( 0x00000030U )
#define MEM_CAP_CFG_BFNE_CFG13_OFFSET ( 0x00000034U )
#define MEM_CAP_CFG_BFNE_CFG14_OFFSET ( 0x00000038U )
#define MEM_CAP_CFG_BFNE_CFG15_OFFSET ( 0x0000003cU )
#define MEM_CAP_CFG_BFNE_CFG16_OFFSET ( 0x00000040U )
#define MEM_CAP_CFG_BFNE_INCR0_OFFSET ( 0x00000080U )
#define MEM_CAP_CFG_BFNE_INCR1_OFFSET ( 0x00000084U )
#define MEM_CAP_CFG_BFNE_INCR2_OFFSET ( 0x00000088U )
#define MEM_CAP_CFG_BFNE_INCR3_OFFSET ( 0x0000008cU )
#define MEM_CAP_CFG_BFNE_INCR4_OFFSET ( 0x00000090U )
#define MEM_CAP_CFG_BFNE_INCR5_OFFSET ( 0x00000094U )
#define MEM_CAP_CFG_BFNE_INCR6_OFFSET ( 0x00000098U )
#define MEM_CAP_CFG_BFNE_INCR7_OFFSET ( 0x0000009cU )
#define MEM_CAP_CFG_BFNE_INCR8_OFFSET ( 0x000000a0U )
#define MEM_CAP_CFG_BFNE_INCR9_OFFSET ( 0x000000a4U )
#define MEM_CAP_CFG_BFNE_INCR10_OFFSET ( 0x000000a8U )
#define MEM_CAP_CFG_BFNE_INCR11_OFFSET ( 0x000000acU )
#define MEM_CAP_CFG_BFNE_INCR12_OFFSET ( 0x000000b0U )
#define MEM_CAP_CFG_BFNE_INCR13_OFFSET ( 0x000000b4U )
#define MEM_CAP_CFG_BFNE_INCR14_OFFSET ( 0x000000b8U )
#define MEM_CAP_CFG_BFNE_INCR15_OFFSET ( 0x000000bcU )
#define MEM_CAP_CFG_BFNE_INCR16_OFFSET ( 0x000000c0U )
#define MEM_CAP_CFG_BFNE_START0_OFFSET ( 0x00000100U )
#define MEM_CAP_CFG_BFNE_START1_OFFSET ( 0x00000104U )
#define MEM_CAP_CFG_BFNE_START2_OFFSET ( 0x00000108U )
#define MEM_CAP_CFG_BFNE_START3_OFFSET ( 0x0000010cU )
#define MEM_CAP_CFG_BFNE_START4_OFFSET ( 0x00000110U )
#define MEM_CAP_CFG_BFNE_START5_OFFSET ( 0x00000114U )
#define MEM_CAP_CFG_BFNE_START6_OFFSET ( 0x00000118U )
#define MEM_CAP_CFG_BFNE_START7_OFFSET ( 0x0000011cU )
#define MEM_CAP_CFG_BFNE_START8_OFFSET ( 0x00000120U )
#define MEM_CAP_CFG_BFNE_START9_OFFSET ( 0x00000124U )
#define MEM_CAP_CFG_BFNE_START10_OFFSET ( 0x00000128U )
#define MEM_CAP_CFG_BFNE_START11_OFFSET ( 0x0000012cU )
#define MEM_CAP_CFG_BFNE_START12_OFFSET ( 0x00000130U )
#define MEM_CAP_CFG_BFNE_START13_OFFSET ( 0x00000134U )
#define MEM_CAP_CFG_BFNE_START14_OFFSET ( 0x00000138U )
#define MEM_CAP_CFG_BFNE_START15_OFFSET ( 0x0000013cU )
#define MEM_CAP_CFG_BFNE_START16_OFFSET ( 0x00000140U )
#define MEM_CAP_CFG_BFNE_STAT0_OFFSET ( 0x00000180U )
#define MEM_CAP_CFG_BFNE_STAT1_OFFSET ( 0x00000184U )
#define MEM_CAP_CFG_BFNE_STAT2_OFFSET ( 0x00000188U )
#define MEM_CAP_CFG_BFNE_STAT3_OFFSET ( 0x0000018cU )
#define MEM_CAP_CFG_BFNE_STAT4_OFFSET ( 0x00000190U )
#define MEM_CAP_CFG_BFNE_STAT5_OFFSET ( 0x00000194U )
#define MEM_CAP_CFG_BFNE_STAT6_OFFSET ( 0x00000198U )
#define MEM_CAP_CFG_BFNE_STAT7_OFFSET ( 0x0000019cU )
#define MEM_CAP_CFG_BFNE_STAT8_OFFSET ( 0x000001a0U )
#define MEM_CAP_CFG_BFNE_STAT9_OFFSET ( 0x000001a4U )
#define MEM_CAP_CFG_BFNE_STAT10_OFFSET ( 0x000001a8U )
#define MEM_CAP_CFG_BFNE_STAT11_OFFSET ( 0x000001acU )
#define MEM_CAP_CFG_BFNE_STAT12_OFFSET ( 0x000001b0U )
#define MEM_CAP_CFG_BFNE_STAT13_OFFSET ( 0x000001b4U )
#define MEM_CAP_CFG_BFNE_STAT14_OFFSET ( 0x000001b8U )
#define MEM_CAP_CFG_BFNE_STAT15_OFFSET ( 0x000001bcU )
#define MEM_CAP_CFG_BFNE_STAT16_OFFSET ( 0x000001c0U )
#define MEM_CAP_CFG_TX_FIFO_START_DELAY_CFG0_OFFSET ( 0x00000200U )
#define MEM_CAP_CFG_TX_FIFO_START_DELAY_CFG1_OFFSET ( 0x00000204U )
#define MEM_CAP_CFG_RX_FIFO_START_DELAY_CFG0_OFFSET ( 0x00000208U )
#define MEM_CAP_CFG_RX_FIFO_START_DELAY_CFG1_OFFSET ( 0x0000020cU )
#define MEM_CAP_CFG_RXFB_FIFO_START_DELAY_CFG0_OFFSET ( 0x00000210U )
#define MEM_CAP_CFG_RXFB_FIFO_START_DELAY_CFG1_OFFSET ( 0x00000214U )
#define MEM_CAP_CFG_BFN_CAP_TX_JESD_IN0_OFFSET ( 0x00000220U )
#define MEM_CAP_CFG_BFN_CAP_TX_JESD_IN1_OFFSET ( 0x00000224U )
#define MEM_CAP_CFG_BFN_CAP_TX_OUT0_OFFSET ( 0x00000228U )
#define MEM_CAP_CFG_BFN_CAP_TX_OUT1_OFFSET ( 0x0000022cU )
#define MEM_CAP_CFG_BFN_CAP_RX_OUT0_OFFSET ( 0x00000230U )
#define MEM_CAP_CFG_BFN_CAP_RX_OUT1_OFFSET ( 0x00000234U )
#define MEM_CAP_CFG_BFN_CAP_RXFB_OUT0_OFFSET ( 0x00000238U )
#define MEM_CAP_CFG_BFN_CAP_RXFB_OUT1_OFFSET ( 0x0000023cU )
#define MEM_CAP_CFG_ISYNC_CTRL_OFFSET ( 0x00000300U )
#define MEM_CAP_CFG_ISYNC_LCNT_INC_OFFSET ( 0x00000304U )
#define MEM_CAP_CFG_ISYNC_TEN_MS_CNT_OFFSET ( 0x00000308U )
#define MEM_CAP_CFG_ISYNC_INC_PRE_OFFSET ( 0x0000030cU )
#define MEM_CAP_CFG_ISYNC_CNT_ADJ_OFFSET ( 0x00000310U )
#define MEM_CAP_CFG_ISYNC_BFN_CNT_SYNC_OFFSET ( 0x00000314U )
#define MEM_CAP_CFG_ISYNC_BFN_CNT_OFFSET ( 0x00000318U )
#define MEM_CAP_CFG_TX_RATE_OFFSET ( 0x00000340U )
#define MEM_CAP_CFG_RX_RATE_OFFSET ( 0x00000350U )
#define MEM_CAP_CFG_PLL_CTL_OFFSET ( 0x00000360U )
#define MEM_CAP_CFG_AC_NCO_CFG_OFFSET ( 0x00000368U )
#define MEM_CAP_CFG_DP_INIT_OFFSET ( 0x0000036cU )
#define MEM_CAP_CFG_SMON_R0_OFFSET ( 0x00000380U )
#define MEM_CAP_CFG_SMON_R1_OFFSET ( 0x00000384U )
#define MEM_CAP_CFG_SMON_R2_OFFSET ( 0x00000388U )
#define MEM_CAP_CFG_SMON_R3_OFFSET ( 0x0000038cU )
#define MEM_CAP_CFG_SMON_R4_OFFSET ( 0x00000390U )
#define MEM_CAP_CFG_SMON_R5_OFFSET ( 0x00000394U )
#define MEM_CAP_CFG_SMON_R6_OFFSET ( 0x00000398U )
#define MEM_CAP_CFG_SMON_R7_OFFSET ( 0x0000039cU )
#define MEM_CAP_CFG_APB_BRDG_STAT_OFFSET ( 0x000003fcU )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define MEM_CAP_CFG_BFNE_CFG0_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_CFG0_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_CFG1_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_CFG1_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_CFG2_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_CFG2_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_CFG3_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_CFG3_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_CFG4_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_CFG4_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_CFG5_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_CFG5_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_CFG6_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_CFG6_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_CFG7_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_CFG7_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_CFG8_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_CFG8_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_CFG9_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_CFG9_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_CFG10_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_CFG10_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_CFG11_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_CFG11_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_CFG12_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_CFG12_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_CFG13_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_CFG13_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_CFG14_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_CFG14_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_CFG15_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_CFG15_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_CFG16_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_CFG16_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_INCR0_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_INCR0_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_INCR1_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_INCR1_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_INCR2_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_INCR2_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_INCR3_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_INCR3_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_INCR4_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_INCR4_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_INCR5_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_INCR5_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_INCR6_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_INCR6_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_INCR7_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_INCR7_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_INCR8_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_INCR8_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_INCR9_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_INCR9_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_INCR10_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_INCR10_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_INCR11_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_INCR11_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_INCR12_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_INCR12_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_INCR13_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_INCR13_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_INCR14_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_INCR14_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_INCR15_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_INCR15_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_INCR16_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_INCR16_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_START0_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_START0_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_START1_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_START1_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_START2_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_START2_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_START3_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_START3_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_START4_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_START4_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_START5_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_START5_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_START6_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_START6_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_START7_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_START7_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_START8_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_START8_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_START9_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_START9_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_START10_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_START10_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_START11_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_START11_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_START12_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_START12_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_START13_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_START13_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_START14_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_START14_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_START15_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_START15_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_START16_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_START16_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_STAT0_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_STAT0_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_STAT1_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_STAT1_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_STAT2_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_STAT2_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_STAT3_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_STAT3_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_STAT4_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_STAT4_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_STAT5_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_STAT5_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_STAT6_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_STAT6_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_STAT7_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_STAT7_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_STAT8_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_STAT8_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_STAT9_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_STAT9_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_STAT10_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_STAT10_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_STAT11_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_STAT11_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_STAT12_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_STAT12_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_STAT13_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_STAT13_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_STAT14_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_STAT14_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_STAT15_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_STAT15_OFFSET ) ))
#define MEM_CAP_CFG_BFNE_STAT16_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFNE_STAT16_OFFSET ) ))
#define MEM_CAP_CFG_TX_FIFO_START_DELAY_CFG0_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_TX_FIFO_START_DELAY_CFG0_OFFSET ) ))
#define MEM_CAP_CFG_TX_FIFO_START_DELAY_CFG1_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_TX_FIFO_START_DELAY_CFG1_OFFSET ) ))
#define MEM_CAP_CFG_RX_FIFO_START_DELAY_CFG0_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_RX_FIFO_START_DELAY_CFG0_OFFSET ) ))
#define MEM_CAP_CFG_RX_FIFO_START_DELAY_CFG1_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_RX_FIFO_START_DELAY_CFG1_OFFSET ) ))
#define MEM_CAP_CFG_RXFB_FIFO_START_DELAY_CFG0_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_RXFB_FIFO_START_DELAY_CFG0_OFFSET ) ))
#define MEM_CAP_CFG_RXFB_FIFO_START_DELAY_CFG1_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_RXFB_FIFO_START_DELAY_CFG1_OFFSET ) ))
#define MEM_CAP_CFG_BFN_CAP_TX_JESD_IN0_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFN_CAP_TX_JESD_IN0_OFFSET ) ))
#define MEM_CAP_CFG_BFN_CAP_TX_JESD_IN1_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFN_CAP_TX_JESD_IN1_OFFSET ) ))
#define MEM_CAP_CFG_BFN_CAP_TX_OUT0_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFN_CAP_TX_OUT0_OFFSET ) ))
#define MEM_CAP_CFG_BFN_CAP_TX_OUT1_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFN_CAP_TX_OUT1_OFFSET ) ))
#define MEM_CAP_CFG_BFN_CAP_RX_OUT0_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFN_CAP_RX_OUT0_OFFSET ) ))
#define MEM_CAP_CFG_BFN_CAP_RX_OUT1_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFN_CAP_RX_OUT1_OFFSET ) ))
#define MEM_CAP_CFG_BFN_CAP_RXFB_OUT0_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFN_CAP_RXFB_OUT0_OFFSET ) ))
#define MEM_CAP_CFG_BFN_CAP_RXFB_OUT1_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_BFN_CAP_RXFB_OUT1_OFFSET ) ))
#define MEM_CAP_CFG_ISYNC_CTRL_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_ISYNC_CTRL_OFFSET ) ))
#define MEM_CAP_CFG_ISYNC_LCNT_INC_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_ISYNC_LCNT_INC_OFFSET ) ))
#define MEM_CAP_CFG_ISYNC_TEN_MS_CNT_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_ISYNC_TEN_MS_CNT_OFFSET ) ))
#define MEM_CAP_CFG_ISYNC_INC_PRE_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_ISYNC_INC_PRE_OFFSET ) ))
#define MEM_CAP_CFG_ISYNC_CNT_ADJ_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_ISYNC_CNT_ADJ_OFFSET ) ))
#define MEM_CAP_CFG_ISYNC_BFN_CNT_SYNC_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_ISYNC_BFN_CNT_SYNC_OFFSET ) ))
#define MEM_CAP_CFG_ISYNC_BFN_CNT_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_ISYNC_BFN_CNT_OFFSET ) ))
#define MEM_CAP_CFG_TX_RATE_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_TX_RATE_OFFSET ) ))
#define MEM_CAP_CFG_RX_RATE_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_RX_RATE_OFFSET ) ))
#define MEM_CAP_CFG_PLL_CTL_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_PLL_CTL_OFFSET ) ))
#define MEM_CAP_CFG_AC_NCO_CFG_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_AC_NCO_CFG_OFFSET ) ))
#define MEM_CAP_CFG_DP_INIT_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_DP_INIT_OFFSET ) ))
#define MEM_CAP_CFG_SMON_R0_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_SMON_R0_OFFSET ) ))
#define MEM_CAP_CFG_SMON_R1_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_SMON_R1_OFFSET ) ))
#define MEM_CAP_CFG_SMON_R2_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_SMON_R2_OFFSET ) ))
#define MEM_CAP_CFG_SMON_R3_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_SMON_R3_OFFSET ) ))
#define MEM_CAP_CFG_SMON_R4_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_SMON_R4_OFFSET ) ))
#define MEM_CAP_CFG_SMON_R5_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_SMON_R5_OFFSET ) ))
#define MEM_CAP_CFG_SMON_R6_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_SMON_R6_OFFSET ) ))
#define MEM_CAP_CFG_SMON_R7_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_SMON_R7_OFFSET ) ))
#define MEM_CAP_CFG_APB_BRDG_STAT_ADR(_BASE) (( ( _BASE ) + ( MEM_CAP_CFG_APB_BRDG_STAT_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief MEM_CAP_CFG_MAP_MEM_MEM_CAP_CFG_MAP_ABC_BFN_EVENTS_BFNE_CONFIG[17] register description at address offset 0x0
  *
  * Register default value:        0x00000000
  * Register full path in IP: mem_cap_cfg_map_MEM/mem_cap_cfg_map/ABC_BFN_EVENTS/BFNE_CONFIG
  * BFN Event Config Register
  */

typedef union {
  struct {
    uint32_t ENABLE : 1;
    ///< Set to 1 to enable the operation of the bfn_event module. When running
    ///< in repeat mode, set this back to zero to immediately halt the operation.
    ///< NOte that this must be set to 1 for the force mechanism (See BFN_START
    ///< register) to work.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t MODE : 2;
    ///< Selects the mode of operation. Note that the force mechanism can be
    ///< triggered (see BFNE_START) regardless of which mode is selected here.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t OUTPUT_MODE : 1;
    ///< Selects whether the BFN_EVENT output toggles at each event, or produces
    ///< a single cycle pulse.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t DEBUG_MODE : 2;
    ///< Controls what appears in BFN_EVENT_STAT DEBUG field, which is 28 bits.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} mem_cap_cfg_bfne_cfg_reg_t;

#define MEM_CAP_CFG_BFNE_CFG_DEFAULT (0x00000000U)
#define MEM_CAP_CFG_BFNE_CFG_RD_MASK (0x0000003fU)
#define MEM_CAP_CFG_BFNE_CFG_WR_MASK (0x0000003fU)


///< Set to 1 to enable the operation of the bfn_event module. When running
///< in repeat mode, set this back to zero to immediately halt the operation.
///< NOte that this must be set to 1 for the force mechanism (See BFN_START
///< register) to work.
#define MEM_CAP_CFG_BFNE_CFG_EN_BF_OFF ( 0)
#define MEM_CAP_CFG_BFNE_CFG_EN_BF_WID ( 1)
#define MEM_CAP_CFG_BFNE_CFG_EN_BF_MSK (0x00000001)
#define MEM_CAP_CFG_BFNE_CFG_EN_BF_DEF (0x00000000)

///< Selects the mode of operation. Note that the force mechanism can be
///< triggered (see BFNE_START) regardless of which mode is selected here.
#define MEM_CAP_CFG_BFNE_CFG_MODE_BF_OFF ( 1)
#define MEM_CAP_CFG_BFNE_CFG_MODE_BF_WID ( 2)
#define MEM_CAP_CFG_BFNE_CFG_MODE_BF_MSK (0x00000006)
#define MEM_CAP_CFG_BFNE_CFG_MODE_BF_DEF (0x00000000)

///< Selects whether the BFN_EVENT output toggles at each event, or produces
///< a single cycle pulse.
#define MEM_CAP_CFG_BFNE_CFG_OUTPUT_MODE_BF_OFF ( 3)
#define MEM_CAP_CFG_BFNE_CFG_OUTPUT_MODE_BF_WID ( 1)
#define MEM_CAP_CFG_BFNE_CFG_OUTPUT_MODE_BF_MSK (0x00000008)
#define MEM_CAP_CFG_BFNE_CFG_OUTPUT_MODE_BF_DEF (0x00000000)

///< Controls what appears in BFN_EVENT_STAT DEBUG field, which is 28 bits.
#define MEM_CAP_CFG_BFNE_CFG_DBG_MODE_BF_OFF ( 4)
#define MEM_CAP_CFG_BFNE_CFG_DBG_MODE_BF_WID ( 2)
#define MEM_CAP_CFG_BFNE_CFG_DBG_MODE_BF_MSK (0x00000030)
#define MEM_CAP_CFG_BFNE_CFG_DBG_MODE_BF_DEF (0x00000000)
#define MEM_CAP_CFG_BFNE_CFG_ARR_SZ0 (17)
#define MEM_CAP_CFG_BFNE_CFG_ARRAY_STRIDE0 (0x0004)


/** @brief MEM_CAP_CFG_MAP_MEM_MEM_CAP_CFG_MAP_ABC_BFN_EVENTS_BFNE_INCR[17] register description at address offset 0x80
  *
  * Register default value:        0x00000000
  * Register full path in IP: mem_cap_cfg_map_MEM/mem_cap_cfg_map/ABC_BFN_EVENTS/BFNE_INCR
  * BFN Event Increment
  */

typedef union {
  struct {
    uint32_t OFFSET : 24;
    ///< Offset from nearest 10ms frame, in clock cycles.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FRAME : 8;
    ///< Count of 10ms frames.
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} mem_cap_cfg_bfne_incr_reg_t;

#define MEM_CAP_CFG_BFNE_INCR_DEFAULT (0x00000000U)
#define MEM_CAP_CFG_BFNE_INCR_RD_MASK (0xffffffffU)
#define MEM_CAP_CFG_BFNE_INCR_WR_MASK (0xffffffffU)


///< Offset from nearest 10ms frame, in clock cycles.
#define MEM_CAP_CFG_BFNE_INCR_OFFSET_BF_OFF ( 0)
#define MEM_CAP_CFG_BFNE_INCR_OFFSET_BF_WID (24)
#define MEM_CAP_CFG_BFNE_INCR_OFFSET_BF_MSK (0x00FFFFFF)
#define MEM_CAP_CFG_BFNE_INCR_OFFSET_BF_DEF (0x00000000)

///< Count of 10ms frames.
#define MEM_CAP_CFG_BFNE_INCR_FRAME_BF_OFF (24)
#define MEM_CAP_CFG_BFNE_INCR_FRAME_BF_WID ( 8)
#define MEM_CAP_CFG_BFNE_INCR_FRAME_BF_MSK (0xFF000000)
#define MEM_CAP_CFG_BFNE_INCR_FRAME_BF_DEF (0x00000000)
#define MEM_CAP_CFG_BFNE_INCR_ARR_SZ0 (17)
#define MEM_CAP_CFG_BFNE_INCR_ARRAY_STRIDE0 (0x0004)


/** @brief MEM_CAP_CFG_MAP_MEM_MEM_CAP_CFG_MAP_ABC_BFN_EVENTS_BFNE_START[17] register description at address offset 0x100
  *
  * Register default value:        0x00000000
  * Register full path in IP: mem_cap_cfg_map_MEM/mem_cap_cfg_map/ABC_BFN_EVENTS/BFNE_START
  * BFN Event Start
  */

typedef union {
  struct {
    uint32_t OFFSET : 24;
    ///< Offset from nearest 10ms frame, in clock cycles.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FRAME : 8;
    ///< Count of 10ms frames.
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} mem_cap_cfg_bfne_start_reg_t;

#define MEM_CAP_CFG_BFNE_START_DEFAULT (0x00000000U)
#define MEM_CAP_CFG_BFNE_START_RD_MASK (0xffffffffU)
#define MEM_CAP_CFG_BFNE_START_WR_MASK (0xffffffffU)


///< Offset from nearest 10ms frame, in clock cycles.
#define MEM_CAP_CFG_BFNE_START_OFFSET_BF_OFF ( 0)
#define MEM_CAP_CFG_BFNE_START_OFFSET_BF_WID (24)
#define MEM_CAP_CFG_BFNE_START_OFFSET_BF_MSK (0x00FFFFFF)
#define MEM_CAP_CFG_BFNE_START_OFFSET_BF_DEF (0x00000000)

///< Count of 10ms frames.
#define MEM_CAP_CFG_BFNE_START_FRAME_BF_OFF (24)
#define MEM_CAP_CFG_BFNE_START_FRAME_BF_WID ( 8)
#define MEM_CAP_CFG_BFNE_START_FRAME_BF_MSK (0xFF000000)
#define MEM_CAP_CFG_BFNE_START_FRAME_BF_DEF (0x00000000)
#define MEM_CAP_CFG_BFNE_START_ARR_SZ0 (17)
#define MEM_CAP_CFG_BFNE_START_ARRAY_STRIDE0 (0x0004)


/** @brief MEM_CAP_CFG_MAP_MEM_MEM_CAP_CFG_MAP_ABC_BFN_EVENTS_BFNE_STAT[17] register description at address offset 0x180
  *
  * Register default value:        0x00000000
  * Register full path in IP: mem_cap_cfg_map_MEM/mem_cap_cfg_map/ABC_BFN_EVENTS/BFNE_STAT
  * BFN Event Status Register
  */

typedef union {
  struct {
    uint32_t CURRENT_VALUE : 1;
    ///< This bit shows the current output value of the bfn_event module
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t WAITING : 1;
    ///< This bit indicates when the bfn_event module is waiting for the programmed
    ///< bfn_start time. In Repeat mode, this will only toggle low during the
    ///< single cycle of each event, so is not useful.
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t DONE : 1;
    ///< This bit indicates that the bfn_module has reached its programmed
    ///< bfn time. In Repeate mode, this will only toggle high during the single
    ///< cycle of each event, so is not usefule.
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t DEBUG : 29;
    ///< This field is different based on the DEBUG_MODE setting in the BFNE_CONFIG
    ///< register.
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
  } ;
  uint32_t value;
} mem_cap_cfg_bfne_stat_reg_t;

#define MEM_CAP_CFG_BFNE_STAT_DEFAULT (0x00000000U)
#define MEM_CAP_CFG_BFNE_STAT_RD_MASK (0xffffffffU)
#define MEM_CAP_CFG_BFNE_STAT_WR_MASK (0x00000000U)


///< This bit shows the current output value of the bfn_event module
#define MEM_CAP_CFG_BFNE_STAT_CURRENT_VAL_BF_OFF ( 0)
#define MEM_CAP_CFG_BFNE_STAT_CURRENT_VAL_BF_WID ( 1)
#define MEM_CAP_CFG_BFNE_STAT_CURRENT_VAL_BF_MSK (0x00000001)
#define MEM_CAP_CFG_BFNE_STAT_CURRENT_VAL_BF_DEF (0x00000000)

///< This bit indicates when the bfn_event module is waiting for the programmed
///< bfn_start time. In Repeat mode, this will only toggle low during the
///< single cycle of each event, so is not useful.
#define MEM_CAP_CFG_BFNE_STAT_WAITING_BF_OFF ( 1)
#define MEM_CAP_CFG_BFNE_STAT_WAITING_BF_WID ( 1)
#define MEM_CAP_CFG_BFNE_STAT_WAITING_BF_MSK (0x00000002)
#define MEM_CAP_CFG_BFNE_STAT_WAITING_BF_DEF (0x00000000)

///< This bit indicates that the bfn_module has reached its programmed
///< bfn time. In Repeate mode, this will only toggle high during the single
///< cycle of each event, so is not usefule.
#define MEM_CAP_CFG_BFNE_STAT_DONE_BF_OFF ( 2)
#define MEM_CAP_CFG_BFNE_STAT_DONE_BF_WID ( 1)
#define MEM_CAP_CFG_BFNE_STAT_DONE_BF_MSK (0x00000004)
#define MEM_CAP_CFG_BFNE_STAT_DONE_BF_DEF (0x00000000)

///< This field is different based on the DEBUG_MODE setting in the BFNE_CONFIG
///< register.
#define MEM_CAP_CFG_BFNE_STAT_DBG_BF_OFF ( 3)
#define MEM_CAP_CFG_BFNE_STAT_DBG_BF_WID (29)
#define MEM_CAP_CFG_BFNE_STAT_DBG_BF_MSK (0xFFFFFFF8)
#define MEM_CAP_CFG_BFNE_STAT_DBG_BF_DEF (0x00000000)
#define MEM_CAP_CFG_BFNE_STAT_ARR_SZ0 (17)
#define MEM_CAP_CFG_BFNE_STAT_ARRAY_STRIDE0 (0x0004)


/** @brief MEM_CAP_CFG_MAP_MEM_MEM_CAP_CFG_MAP_TX_FIFO_START_DELAY_CFG[2] register description at address offset 0x200
  *
  * Register default value:        0x00F00000
  * Register full path in IP: mem_cap_cfg_map_MEM/mem_cap_cfg_map/TX_FIFO_START_DELAY_CFG
  * Tx Fifo_Start Delay Configuration Register
  */

typedef union {
  struct {
    uint32_t FIFO_START_SOURCE : 2;
    ///< When operating in the TX direction, 0: JesdRXStartQN,         1: TRXANT
    ///< valids [3:0],        2: BFN Timed Event, and        3: Not Used.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t JESD_FIFO_START_DELAY : 18;
    ///< When FIFO_START_SOURCE = 0, the  programmed value plus 5  indicates
    ///< the delay from when JesdRxStartedQN is asserted to when the output
    ///< Di_PLLFifoStart_TXN is asserted. The minimum programmed value = 2.
    ///< The maximum programmed value = 262137.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t TRXANT_MERGE_CFG : 4;
    ///< 4 bit configuration signal for the VALID EVENT GENERATION MODULE.
    ///< The merged valid signal is generated by AND-ing all the valids whose
    ///< corresponding  bit i  of the field is asserted. E.g. if TRXANT_MERGE_CFG
    ///< = 0x9 (or 4b1001), then the merged valid = 1 if TRXANT valid[0] and
    ///< TRXANT valid[3] are both asserted. If this field is set to 4'h0, then
    ///< the merged valid is force to 0.
    ///< AccessType="RW" BitOffset="20" ResetValue="0xF"
    uint32_t TRXANT_FIFO_START_DELAY : 5;
    ///< When FIFO_START_SOURCE = 2, the  programmed value + 5  indicates the
    ///< delay from when all the selected TRXANT valids are asserted to when
    ///< the output Di_PLLFifoStart_TXN is asserted. The minimum allowed programmed
    ///< value = 2. The maximum programmed value = 25.
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} mem_cap_cfg_tx_fifo_start_delay_cfg_reg_t;

#define MEM_CAP_CFG_TX_FIFO_START_DELAY_CFG_DEFAULT (0x00f00000U)
#define MEM_CAP_CFG_TX_FIFO_START_DELAY_CFG_RD_MASK (0x1fffffffU)
#define MEM_CAP_CFG_TX_FIFO_START_DELAY_CFG_WR_MASK (0x1fffffffU)


///< When operating in the TX direction, 0: JesdRXStartQN,         1: TRXANT
///< valids [3:0],        2: BFN Timed Event, and        3: Not Used.
#define MEM_CAP_CFG_TX_FIFO_START_DELAY_CFG_FIFO_START_SOURCE_BF_OFF ( 0)
#define MEM_CAP_CFG_TX_FIFO_START_DELAY_CFG_FIFO_START_SOURCE_BF_WID ( 2)
#define MEM_CAP_CFG_TX_FIFO_START_DELAY_CFG_FIFO_START_SOURCE_BF_MSK (0x00000003)
#define MEM_CAP_CFG_TX_FIFO_START_DELAY_CFG_FIFO_START_SOURCE_BF_DEF (0x00000000)

///< When FIFO_START_SOURCE = 0, the  programmed value plus 5  indicates
///< the delay from when JesdRxStartedQN is asserted to when the output
///< Di_PLLFifoStart_TXN is asserted. The minimum programmed value = 2.
///< The maximum programmed value = 262137.
#define MEM_CAP_CFG_TX_FIFO_START_DELAY_CFG_JESD_FIFO_START_DELAY_BF_OFF ( 2)
#define MEM_CAP_CFG_TX_FIFO_START_DELAY_CFG_JESD_FIFO_START_DELAY_BF_WID (18)
#define MEM_CAP_CFG_TX_FIFO_START_DELAY_CFG_JESD_FIFO_START_DELAY_BF_MSK (0x000FFFFC)
#define MEM_CAP_CFG_TX_FIFO_START_DELAY_CFG_JESD_FIFO_START_DELAY_BF_DEF (0x00000000)

///< 4 bit configuration signal for the VALID EVENT GENERATION MODULE.
///< The merged valid signal is generated by AND-ing all the valids whose
///< corresponding  bit i  of the field is asserted. E.g. if TRXANT_MERGE_CFG
///< = 0x9 (or 4b1001), then the merged valid = 1 if TRXANT valid[0] and
///< TRXANT valid[3] are both asserted. If this field is set to 4'h0, then
///< the merged valid is force to 0.
#define MEM_CAP_CFG_TX_FIFO_START_DELAY_CFG_TRXANT_MERGE_CFG_BF_OFF (20)
#define MEM_CAP_CFG_TX_FIFO_START_DELAY_CFG_TRXANT_MERGE_CFG_BF_WID ( 4)
#define MEM_CAP_CFG_TX_FIFO_START_DELAY_CFG_TRXANT_MERGE_CFG_BF_MSK (0x00F00000)
#define MEM_CAP_CFG_TX_FIFO_START_DELAY_CFG_TRXANT_MERGE_CFG_BF_DEF (0x00F00000)

///< When FIFO_START_SOURCE = 2, the  programmed value + 5  indicates the
///< delay from when all the selected TRXANT valids are asserted to when
///< the output Di_PLLFifoStart_TXN is asserted. The minimum allowed programmed
///< value = 2. The maximum programmed value = 25.
#define MEM_CAP_CFG_TX_FIFO_START_DELAY_CFG_TRXANT_FIFO_START_DELAY_BF_OFF (24)
#define MEM_CAP_CFG_TX_FIFO_START_DELAY_CFG_TRXANT_FIFO_START_DELAY_BF_WID ( 5)
#define MEM_CAP_CFG_TX_FIFO_START_DELAY_CFG_TRXANT_FIFO_START_DELAY_BF_MSK (0x1F000000)
#define MEM_CAP_CFG_TX_FIFO_START_DELAY_CFG_TRXANT_FIFO_START_DELAY_BF_DEF (0x00000000)
#define MEM_CAP_CFG_TX_FIFO_START_DELAY_CFG_ARR_SZ0 (2)
#define MEM_CAP_CFG_TX_FIFO_START_DELAY_CFG_ARRAY_STRIDE0 (0x0004)


/** @brief MEM_CAP_CFG_MAP_MEM_MEM_CAP_CFG_MAP_RX_FIFO_START_DELAY_CFG[2] register description at address offset 0x208
  *
  * Register default value:        0x00000000
  * Register full path in IP: mem_cap_cfg_map_MEM/mem_cap_cfg_map/RX_FIFO_START_DELAY_CFG
  * Rx Fifo_Start Delay Configuration Register
  */

typedef union {
  struct {
    uint32_t FIFO_START_SOURCE : 2;
    ///< When operating in the RX direction, 0: BFN Timed Event, 1: Sync from
    ///< TX Quad N,  2: Not Used, and  3: Not Used.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_SYNC_FIFO_START_DELAY : 18;
    ///< When FIFO_START_SOURCE = 0, indicates the delay from when the TX_SYNC
    ///< from Quad N is asserted to when the output Di_PLLFifoStart_RXN is
    ///< asserted (or Di_PLLFifoStart_RXFBN .
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} mem_cap_cfg_rx_fifo_start_delay_cfg_reg_t;

#define MEM_CAP_CFG_RX_FIFO_START_DELAY_CFG_DEFAULT (0x00000000U)
#define MEM_CAP_CFG_RX_FIFO_START_DELAY_CFG_RD_MASK (0x000fffffU)
#define MEM_CAP_CFG_RX_FIFO_START_DELAY_CFG_WR_MASK (0x000fffffU)


///< When operating in the RX direction, 0: BFN Timed Event, 1: Sync from
///< TX Quad N,  2: Not Used, and  3: Not Used.
#define MEM_CAP_CFG_RX_FIFO_START_DELAY_CFG_FIFO_START_SOURCE_BF_OFF ( 0)
#define MEM_CAP_CFG_RX_FIFO_START_DELAY_CFG_FIFO_START_SOURCE_BF_WID ( 2)
#define MEM_CAP_CFG_RX_FIFO_START_DELAY_CFG_FIFO_START_SOURCE_BF_MSK (0x00000003)
#define MEM_CAP_CFG_RX_FIFO_START_DELAY_CFG_FIFO_START_SOURCE_BF_DEF (0x00000000)

///< When FIFO_START_SOURCE = 0, indicates the delay from when the TX_SYNC
///< from Quad N is asserted to when the output Di_PLLFifoStart_RXN is
///< asserted (or Di_PLLFifoStart_RXFBN .
#define MEM_CAP_CFG_RX_FIFO_START_DELAY_CFG_RX_SYNC_FIFO_START_DELAY_BF_OFF ( 2)
#define MEM_CAP_CFG_RX_FIFO_START_DELAY_CFG_RX_SYNC_FIFO_START_DELAY_BF_WID (18)
#define MEM_CAP_CFG_RX_FIFO_START_DELAY_CFG_RX_SYNC_FIFO_START_DELAY_BF_MSK (0x000FFFFC)
#define MEM_CAP_CFG_RX_FIFO_START_DELAY_CFG_RX_SYNC_FIFO_START_DELAY_BF_DEF (0x00000000)
#define MEM_CAP_CFG_RX_FIFO_START_DELAY_CFG_ARR_SZ0 (2)
#define MEM_CAP_CFG_RX_FIFO_START_DELAY_CFG_ARRAY_STRIDE0 (0x0004)


/** @brief MEM_CAP_CFG_MAP_MEM_MEM_CAP_CFG_MAP_RXFB_FIFO_START_DELAY_CFG[2] register description at address offset 0x210
  *
  * Register default value:        0x00000000
  * Register full path in IP: mem_cap_cfg_map_MEM/mem_cap_cfg_map/RXFB_FIFO_START_DELAY_CFG
  * Rx Fifo_Start Delay Configuration Register
  */

typedef union {
  struct {
    uint32_t FIFO_START_SOURCE : 2;
    ///< When operating in the RX direction, 0: BFN Timed Event, 1: Sync from
    ///< TX Quad N,  2: Not Used, and  3: Not Used.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_SYNC_FIFO_START_DELAY : 18;
    ///< When FIFO_START_SOURCE = 0, indicates the delay from when the TX_SYNC
    ///< from Quad N is asserted to when the output Di_PLLFifoStart_RXN is
    ///< asserted (or Di_PLLFifoStart_RXFBN .
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} mem_cap_cfg_rxfb_fifo_start_delay_cfg_reg_t;

#define MEM_CAP_CFG_RXFB_FIFO_START_DELAY_CFG_DEFAULT (0x00000000U)
#define MEM_CAP_CFG_RXFB_FIFO_START_DELAY_CFG_RD_MASK (0x000fffffU)
#define MEM_CAP_CFG_RXFB_FIFO_START_DELAY_CFG_WR_MASK (0x000fffffU)


///< When operating in the RX direction, 0: BFN Timed Event, 1: Sync from
///< TX Quad N,  2: Not Used, and  3: Not Used.
#define MEM_CAP_CFG_RXFB_FIFO_START_DELAY_CFG_FIFO_START_SOURCE_BF_OFF ( 0)
#define MEM_CAP_CFG_RXFB_FIFO_START_DELAY_CFG_FIFO_START_SOURCE_BF_WID ( 2)
#define MEM_CAP_CFG_RXFB_FIFO_START_DELAY_CFG_FIFO_START_SOURCE_BF_MSK (0x00000003)
#define MEM_CAP_CFG_RXFB_FIFO_START_DELAY_CFG_FIFO_START_SOURCE_BF_DEF (0x00000000)

///< When FIFO_START_SOURCE = 0, indicates the delay from when the TX_SYNC
///< from Quad N is asserted to when the output Di_PLLFifoStart_RXN is
///< asserted (or Di_PLLFifoStart_RXFBN .
#define MEM_CAP_CFG_RXFB_FIFO_START_DELAY_CFG_RX_SYNC_FIFO_START_DELAY_BF_OFF ( 2)
#define MEM_CAP_CFG_RXFB_FIFO_START_DELAY_CFG_RX_SYNC_FIFO_START_DELAY_BF_WID (18)
#define MEM_CAP_CFG_RXFB_FIFO_START_DELAY_CFG_RX_SYNC_FIFO_START_DELAY_BF_MSK (0x000FFFFC)
#define MEM_CAP_CFG_RXFB_FIFO_START_DELAY_CFG_RX_SYNC_FIFO_START_DELAY_BF_DEF (0x00000000)
#define MEM_CAP_CFG_RXFB_FIFO_START_DELAY_CFG_ARR_SZ0 (2)
#define MEM_CAP_CFG_RXFB_FIFO_START_DELAY_CFG_ARRAY_STRIDE0 (0x0004)


/** @brief MEM_CAP_CFG_MAP_MEM_MEM_CAP_CFG_MAP_BFN_CAPTURE_REG_TX_JESD_IN[2] register description at address offset 0x220
  *
  * Register default value:        0x00000000
  * Register full path in IP: mem_cap_cfg_map_MEM/mem_cap_cfg_map/BFN_CAPTURE_REG_TX_JESD_IN
  * BFN Capture Register
  */

typedef union {
  struct {
    uint32_t BFN_EVENT_TIME_OFFSET : 24;
    ///< The lower 24 bits (offset) of a 32-bit BFN event time captured for
    ///< the specific event.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t BFN_EVENT_TIME_FRAME : 8;
    ///< The upper 8 bits (frame) of a 32-bit BFN event time captured for the
    ///< specific event.
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} mem_cap_cfg_bfn_cap_tx_jesd_in_reg_t;

#define MEM_CAP_CFG_BFN_CAP_TX_JESD_IN_DEFAULT (0x00000000U)
#define MEM_CAP_CFG_BFN_CAP_TX_JESD_IN_RD_MASK (0xffffffffU)
#define MEM_CAP_CFG_BFN_CAP_TX_JESD_IN_WR_MASK (0x00000000U)


///< The lower 24 bits (offset) of a 32-bit BFN event time captured for
///< the specific event.
#define MEM_CAP_CFG_BFN_CAP_TX_JESD_IN_BFN_EVENT_TIME_OFFSET_BF_OFF ( 0)
#define MEM_CAP_CFG_BFN_CAP_TX_JESD_IN_BFN_EVENT_TIME_OFFSET_BF_WID (24)
#define MEM_CAP_CFG_BFN_CAP_TX_JESD_IN_BFN_EVENT_TIME_OFFSET_BF_MSK (0x00FFFFFF)
#define MEM_CAP_CFG_BFN_CAP_TX_JESD_IN_BFN_EVENT_TIME_OFFSET_BF_DEF (0x00000000)

///< The upper 8 bits (frame) of a 32-bit BFN event time captured for the
///< specific event.
#define MEM_CAP_CFG_BFN_CAP_TX_JESD_IN_BFN_EVENT_TIME_FRAME_BF_OFF (24)
#define MEM_CAP_CFG_BFN_CAP_TX_JESD_IN_BFN_EVENT_TIME_FRAME_BF_WID ( 8)
#define MEM_CAP_CFG_BFN_CAP_TX_JESD_IN_BFN_EVENT_TIME_FRAME_BF_MSK (0xFF000000)
#define MEM_CAP_CFG_BFN_CAP_TX_JESD_IN_BFN_EVENT_TIME_FRAME_BF_DEF (0x00000000)
#define MEM_CAP_CFG_BFN_CAP_TX_JESD_IN_ARR_SZ0 (2)
#define MEM_CAP_CFG_BFN_CAP_TX_JESD_IN_ARRAY_STRIDE0 (0x0004)


/** @brief MEM_CAP_CFG_MAP_MEM_MEM_CAP_CFG_MAP_BFN_CAPTURE_REG_TX_OUT[2] register description at address offset 0x228
  *
  * Register default value:        0x00000000
  * Register full path in IP: mem_cap_cfg_map_MEM/mem_cap_cfg_map/BFN_CAPTURE_REG_TX_OUT
  * BFN Capture Register
  */

typedef union {
  struct {
    uint32_t BFN_EVENT_TIME_OFFSET : 24;
    ///< The lower 24 bits (offset) of a 32-bit BFN event time captured for
    ///< the specific event.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t BFN_EVENT_TIME_FRAME : 8;
    ///< The upper 8 bits (frame) of a 32-bit BFN event time captured for the
    ///< specific event.
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} mem_cap_cfg_bfn_cap_tx_out_reg_t;

#define MEM_CAP_CFG_BFN_CAP_TX_OUT_DEFAULT (0x00000000U)
#define MEM_CAP_CFG_BFN_CAP_TX_OUT_RD_MASK (0xffffffffU)
#define MEM_CAP_CFG_BFN_CAP_TX_OUT_WR_MASK (0x00000000U)


///< The lower 24 bits (offset) of a 32-bit BFN event time captured for
///< the specific event.
#define MEM_CAP_CFG_BFN_CAP_TX_OUT_BFN_EVENT_TIME_OFFSET_BF_OFF ( 0)
#define MEM_CAP_CFG_BFN_CAP_TX_OUT_BFN_EVENT_TIME_OFFSET_BF_WID (24)
#define MEM_CAP_CFG_BFN_CAP_TX_OUT_BFN_EVENT_TIME_OFFSET_BF_MSK (0x00FFFFFF)
#define MEM_CAP_CFG_BFN_CAP_TX_OUT_BFN_EVENT_TIME_OFFSET_BF_DEF (0x00000000)

///< The upper 8 bits (frame) of a 32-bit BFN event time captured for the
///< specific event.
#define MEM_CAP_CFG_BFN_CAP_TX_OUT_BFN_EVENT_TIME_FRAME_BF_OFF (24)
#define MEM_CAP_CFG_BFN_CAP_TX_OUT_BFN_EVENT_TIME_FRAME_BF_WID ( 8)
#define MEM_CAP_CFG_BFN_CAP_TX_OUT_BFN_EVENT_TIME_FRAME_BF_MSK (0xFF000000)
#define MEM_CAP_CFG_BFN_CAP_TX_OUT_BFN_EVENT_TIME_FRAME_BF_DEF (0x00000000)
#define MEM_CAP_CFG_BFN_CAP_TX_OUT_ARR_SZ0 (2)
#define MEM_CAP_CFG_BFN_CAP_TX_OUT_ARRAY_STRIDE0 (0x0004)


/** @brief MEM_CAP_CFG_MAP_MEM_MEM_CAP_CFG_MAP_BFN_CAPTURE_REG_RX_OUT[2] register description at address offset 0x230
  *
  * Register default value:        0x00000000
  * Register full path in IP: mem_cap_cfg_map_MEM/mem_cap_cfg_map/BFN_CAPTURE_REG_RX_OUT
  * BFN Capture Register
  */

typedef union {
  struct {
    uint32_t BFN_EVENT_TIME_OFFSET : 24;
    ///< The lower 24 bits (offset) of a 32-bit BFN event time captured for
    ///< the specific event.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t BFN_EVENT_TIME_FRAME : 8;
    ///< The upper 8 bits (frame) of a 32-bit BFN event time captured for the
    ///< specific event.
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} mem_cap_cfg_bfn_cap_rx_out_reg_t;

#define MEM_CAP_CFG_BFN_CAP_RX_OUT_DEFAULT (0x00000000U)
#define MEM_CAP_CFG_BFN_CAP_RX_OUT_RD_MASK (0xffffffffU)
#define MEM_CAP_CFG_BFN_CAP_RX_OUT_WR_MASK (0x00000000U)


///< The lower 24 bits (offset) of a 32-bit BFN event time captured for
///< the specific event.
#define MEM_CAP_CFG_BFN_CAP_RX_OUT_BFN_EVENT_TIME_OFFSET_BF_OFF ( 0)
#define MEM_CAP_CFG_BFN_CAP_RX_OUT_BFN_EVENT_TIME_OFFSET_BF_WID (24)
#define MEM_CAP_CFG_BFN_CAP_RX_OUT_BFN_EVENT_TIME_OFFSET_BF_MSK (0x00FFFFFF)
#define MEM_CAP_CFG_BFN_CAP_RX_OUT_BFN_EVENT_TIME_OFFSET_BF_DEF (0x00000000)

///< The upper 8 bits (frame) of a 32-bit BFN event time captured for the
///< specific event.
#define MEM_CAP_CFG_BFN_CAP_RX_OUT_BFN_EVENT_TIME_FRAME_BF_OFF (24)
#define MEM_CAP_CFG_BFN_CAP_RX_OUT_BFN_EVENT_TIME_FRAME_BF_WID ( 8)
#define MEM_CAP_CFG_BFN_CAP_RX_OUT_BFN_EVENT_TIME_FRAME_BF_MSK (0xFF000000)
#define MEM_CAP_CFG_BFN_CAP_RX_OUT_BFN_EVENT_TIME_FRAME_BF_DEF (0x00000000)
#define MEM_CAP_CFG_BFN_CAP_RX_OUT_ARR_SZ0 (2)
#define MEM_CAP_CFG_BFN_CAP_RX_OUT_ARRAY_STRIDE0 (0x0004)


/** @brief MEM_CAP_CFG_MAP_MEM_MEM_CAP_CFG_MAP_BFN_CAPTURE_REG_RXFB_OUT[2] register description at address offset 0x238
  *
  * Register default value:        0x00000000
  * Register full path in IP: mem_cap_cfg_map_MEM/mem_cap_cfg_map/BFN_CAPTURE_REG_RXFB_OUT
  * BFN Capture Register
  */

typedef union {
  struct {
    uint32_t BFN_EVENT_TIME_OFFSET : 24;
    ///< The lower 24 bits (offset) of a 32-bit BFN event time captured for
    ///< the specific event.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t BFN_EVENT_TIME_FRAME : 8;
    ///< The upper 8 bits (frame) of a 32-bit BFN event time captured for the
    ///< specific event.
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} mem_cap_cfg_bfn_cap_rxfb_out_reg_t;

#define MEM_CAP_CFG_BFN_CAP_RXFB_OUT_DEFAULT (0x00000000U)
#define MEM_CAP_CFG_BFN_CAP_RXFB_OUT_RD_MASK (0xffffffffU)
#define MEM_CAP_CFG_BFN_CAP_RXFB_OUT_WR_MASK (0x00000000U)


///< The lower 24 bits (offset) of a 32-bit BFN event time captured for
///< the specific event.
#define MEM_CAP_CFG_BFN_CAP_RXFB_OUT_BFN_EVENT_TIME_OFFSET_BF_OFF ( 0)
#define MEM_CAP_CFG_BFN_CAP_RXFB_OUT_BFN_EVENT_TIME_OFFSET_BF_WID (24)
#define MEM_CAP_CFG_BFN_CAP_RXFB_OUT_BFN_EVENT_TIME_OFFSET_BF_MSK (0x00FFFFFF)
#define MEM_CAP_CFG_BFN_CAP_RXFB_OUT_BFN_EVENT_TIME_OFFSET_BF_DEF (0x00000000)

///< The upper 8 bits (frame) of a 32-bit BFN event time captured for the
///< specific event.
#define MEM_CAP_CFG_BFN_CAP_RXFB_OUT_BFN_EVENT_TIME_FRAME_BF_OFF (24)
#define MEM_CAP_CFG_BFN_CAP_RXFB_OUT_BFN_EVENT_TIME_FRAME_BF_WID ( 8)
#define MEM_CAP_CFG_BFN_CAP_RXFB_OUT_BFN_EVENT_TIME_FRAME_BF_MSK (0xFF000000)
#define MEM_CAP_CFG_BFN_CAP_RXFB_OUT_BFN_EVENT_TIME_FRAME_BF_DEF (0x00000000)
#define MEM_CAP_CFG_BFN_CAP_RXFB_OUT_ARR_SZ0 (2)
#define MEM_CAP_CFG_BFN_CAP_RXFB_OUT_ARRAY_STRIDE0 (0x0004)


/** @brief MEM_CAP_CFG_MAP_MEM_MEM_CAP_CFG_MAP_ISYNC_MAP_ISYNC_CTRL register description at address offset 0x300
  *
  * Register default value:        0x00000000
  * Register full path in IP: mem_cap_cfg_map_MEM/mem_cap_cfg_map/ISYNC_MAP/ISYNC_CTRL
  * ISYNC Control Register
  */

typedef union {
  struct {
    uint32_t TIMER_CMD : 3;
    ///< When i_isync value is 11, the command programmed in this register
    ///< is executed.  3'b000, 3'b100, 3'b110 -> bfn_lower_cnt is incremented
    ///< with the value in BFN_LOWER_CNT_INC. If the  lower count value equals
    ///< the TEN_MS_CNT value the bfn_upper_cnt value is incremented by 1.
    ///< 3'b001 -> bfn_lower_cnt and bfn_upper_cnt are preset to the value
    ///< in the TIMER_INC_PRE register.  3'b010 -> The internal registers corresponding
    ///< to BFN_LOWER_CNT_INC., TIMER_INC_PRE, TIMER_INC_ADJ  TEN_MS_CNT are
    ///< all initialized to their corresponding input values.  If the current
    ///< bfn_lower_cnt value is equal to the TEN_MS_CNT value, the bfn_upper_cnt
    ///< is incremented by 1. If not, bfn_lower_cnt is incremented by the value
    ///< in BFN_LOWER_CNT_INC.  register.  3'b011 -> Increment the bfn_lower_cnt
    ///< value with the value in the TIMER_INC_PRE register.  3'b101 -> If
    ///< bfn_lower_cnt value equals the TEN_MS_CNT value, reset the bfn_lower_cnt
    ///< to zero and  increment the bfn_upper_cnt by 1. If not, increment bfn_lower_cnt
    ///< by a value  in the BFN_LOWER_CNT_INC. register. A sync_adj_pulse is
    ///< also generated so that when the  bfn_lower_cnt value is equal to the
    ///< TEN_MS_CNT and the bfn_upper_cnt equals timer_cnt_adj  the bfn_lower_cnt
    ///< is preset to the value in TIMER_INC_PRE and the bfn_upper_cnt is
    ///< incremented by the value in TIMER_INC_PRE register.  3'b111 -> The
    ///< current value in the bfn_lower_cnt and bfn_upper_cnt is captured and
    ///< made available  in a register for the application to read.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t LOAD_READ : 1;
    ///< When 1, load BFN count into the manager counter at the first timesync
    ///< pulse, when 0, read BFN count from the Manager BFN counter at every
    ///< timesync pulse.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t BFN_CNT_SAMPLE : 1;
    ///< Write to 1 (regardless of the current value) causes the circuit to
    ///< sample the BFN_CNT and synchronize it into the register clock domain.
    ///< After waiting 3-4 BFN clock cycles plus 3-4 register clock cycles,
    ///< the sample is available to read in the ISYNC_BFN_CNT register
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t  : 9;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t SOFT_RESET : 1;
    ///< Soft Reset for the entire AW_isync. Active high.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} mem_cap_cfg_isync_ctrl_reg_t;

#define MEM_CAP_CFG_ISYNC_CTRL_DEFAULT (0x00000000U)
#define MEM_CAP_CFG_ISYNC_CTRL_RD_MASK (0x00008037U)
#define MEM_CAP_CFG_ISYNC_CTRL_WR_MASK (0x00008037U)


///< When i_isync value is 11, the command programmed in this register
///< is executed.  3'b000, 3'b100, 3'b110 -> bfn_lower_cnt is incremented
///< with the value in BFN_LOWER_CNT_INC. If the  lower count value equals
///< the TEN_MS_CNT value the bfn_upper_cnt value is incremented by 1.
///< 3'b001 -> bfn_lower_cnt and bfn_upper_cnt are preset to the value
///< in the TIMER_INC_PRE register.  3'b010 -> The internal registers corresponding
///< to BFN_LOWER_CNT_INC., TIMER_INC_PRE, TIMER_INC_ADJ  TEN_MS_CNT are
///< all initialized to their corresponding input values.  If the current
///< bfn_lower_cnt value is equal to the TEN_MS_CNT value, the bfn_upper_cnt
///< is incremented by 1. If not, bfn_lower_cnt is incremented by the value
///< in BFN_LOWER_CNT_INC.  register.  3'b011 -> Increment the bfn_lower_cnt
///< value with the value in the TIMER_INC_PRE register.  3'b101 -> If
///< bfn_lower_cnt value equals the TEN_MS_CNT value, reset the bfn_lower_cnt
///< to zero and  increment the bfn_upper_cnt by 1. If not, increment bfn_lower_cnt
///< by a value  in the BFN_LOWER_CNT_INC. register. A sync_adj_pulse is
///< also generated so that when the  bfn_lower_cnt value is equal to the
///< TEN_MS_CNT and the bfn_upper_cnt equals timer_cnt_adj  the bfn_lower_cnt
///< is preset to the value in TIMER_INC_PRE and the bfn_upper_cnt is
///< incremented by the value in TIMER_INC_PRE register.  3'b111 -> The
///< current value in the bfn_lower_cnt and bfn_upper_cnt is captured and
///< made available  in a register for the application to read.
#define MEM_CAP_CFG_ISYNC_CTRL_TIMER_CMD_BF_OFF ( 0)
#define MEM_CAP_CFG_ISYNC_CTRL_TIMER_CMD_BF_WID ( 3)
#define MEM_CAP_CFG_ISYNC_CTRL_TIMER_CMD_BF_MSK (0x00000007)
#define MEM_CAP_CFG_ISYNC_CTRL_TIMER_CMD_BF_DEF (0x00000000)

///< When 1, load BFN count into the manager counter at the first timesync
///< pulse, when 0, read BFN count from the Manager BFN counter at every
///< timesync pulse.
#define MEM_CAP_CFG_ISYNC_CTRL_LOAD_READ_BF_OFF ( 4)
#define MEM_CAP_CFG_ISYNC_CTRL_LOAD_READ_BF_WID ( 1)
#define MEM_CAP_CFG_ISYNC_CTRL_LOAD_READ_BF_MSK (0x00000010)
#define MEM_CAP_CFG_ISYNC_CTRL_LOAD_READ_BF_DEF (0x00000000)

///< Write to 1 (regardless of the current value) causes the circuit to
///< sample the BFN_CNT and synchronize it into the register clock domain.
///< After waiting 3-4 BFN clock cycles plus 3-4 register clock cycles,
///< the sample is available to read in the ISYNC_BFN_CNT register
#define MEM_CAP_CFG_ISYNC_CTRL_BFN_CNT_SAMPLE_BF_OFF ( 5)
#define MEM_CAP_CFG_ISYNC_CTRL_BFN_CNT_SAMPLE_BF_WID ( 1)
#define MEM_CAP_CFG_ISYNC_CTRL_BFN_CNT_SAMPLE_BF_MSK (0x00000020)
#define MEM_CAP_CFG_ISYNC_CTRL_BFN_CNT_SAMPLE_BF_DEF (0x00000000)

///< Soft Reset for the entire AW_isync. Active high.
#define MEM_CAP_CFG_ISYNC_CTRL_SOFT_RST_BF_OFF (15)
#define MEM_CAP_CFG_ISYNC_CTRL_SOFT_RST_BF_WID ( 1)
#define MEM_CAP_CFG_ISYNC_CTRL_SOFT_RST_BF_MSK (0x00008000)
#define MEM_CAP_CFG_ISYNC_CTRL_SOFT_RST_BF_DEF (0x00000000)


/** @brief MEM_CAP_CFG_MAP_MEM_MEM_CAP_CFG_MAP_ISYNC_MAP_ISYNC_LCNT_INC register description at address offset 0x304
  *
  * Register default value:        0x00000001
  * Register full path in IP: mem_cap_cfg_map_MEM/mem_cap_cfg_map/ISYNC_MAP/ISYNC_LCNT_INC
  * Isync Lower Count Increment Register
  */

typedef union {
  struct {
    uint32_t BFN_LOWER_CNT_INC : 24;
    ///< Increment for the Offset Counter.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} mem_cap_cfg_isync_lcnt_inc_reg_t;

#define MEM_CAP_CFG_ISYNC_LCNT_INC_DEFAULT (0x00000001U)
#define MEM_CAP_CFG_ISYNC_LCNT_INC_RD_MASK (0x00ffffffU)
#define MEM_CAP_CFG_ISYNC_LCNT_INC_WR_MASK (0x00ffffffU)


///< Increment for the Offset Counter.
#define MEM_CAP_CFG_ISYNC_LCNT_INC_BFN_LOWER_CNT_INC_BF_OFF ( 0)
#define MEM_CAP_CFG_ISYNC_LCNT_INC_BFN_LOWER_CNT_INC_BF_WID (24)
#define MEM_CAP_CFG_ISYNC_LCNT_INC_BFN_LOWER_CNT_INC_BF_MSK (0x00FFFFFF)
#define MEM_CAP_CFG_ISYNC_LCNT_INC_BFN_LOWER_CNT_INC_BF_DEF (0x00000001)


/** @brief MEM_CAP_CFG_MAP_MEM_MEM_CAP_CFG_MAP_ISYNC_MAP_ISYNC_TEN_MS_CNT register description at address offset 0x308
  *
  * Register default value:        0x0095FFFF
  * Register full path in IP: mem_cap_cfg_map_MEM/mem_cap_cfg_map/ISYNC_MAP/ISYNC_TEN_MS_CNT
  * Isync 10ms Counter Register
  */

typedef union {
  struct {
    uint32_t TEN_MS_CNT : 24;
    ///< Number of clock cycles in 10ms (minus 1).
    ///< AccessType="RW" BitOffset="0" ResetValue="0x95FFFF"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} mem_cap_cfg_isync_ten_ms_cnt_reg_t;

#define MEM_CAP_CFG_ISYNC_TEN_MS_CNT_DEFAULT (0x0095ffffU)
#define MEM_CAP_CFG_ISYNC_TEN_MS_CNT_RD_MASK (0x00ffffffU)
#define MEM_CAP_CFG_ISYNC_TEN_MS_CNT_WR_MASK (0x00ffffffU)


///< Number of clock cycles in 10ms (minus 1).
#define MEM_CAP_CFG_ISYNC_TEN_MS_CNT_TEN_MS_CNT_BF_OFF ( 0)
#define MEM_CAP_CFG_ISYNC_TEN_MS_CNT_TEN_MS_CNT_BF_WID (24)
#define MEM_CAP_CFG_ISYNC_TEN_MS_CNT_TEN_MS_CNT_BF_MSK (0x00FFFFFF)
#define MEM_CAP_CFG_ISYNC_TEN_MS_CNT_TEN_MS_CNT_BF_DEF (0x0095FFFF)


/** @brief MEM_CAP_CFG_MAP_MEM_MEM_CAP_CFG_MAP_ISYNC_MAP_ISYNC_INC_PRE register description at address offset 0x30c
  *
  * Register default value:        0x00000000
  * Register full path in IP: mem_cap_cfg_map_MEM/mem_cap_cfg_map/ISYNC_MAP/ISYNC_INC_PRE
  * Isync Timer Increment/Preset Register
  */

typedef union {
  struct {
    uint32_t OFFSET_INCR : 24;
    ///< Offset from nearest 10ms frame, in clock cycles.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FRAME_INCR : 8;
    ///< Bits [7:0] of the 10ms frame counter.
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} mem_cap_cfg_isync_inc_pre_reg_t;

#define MEM_CAP_CFG_ISYNC_INC_PRE_DEFAULT (0x00000000U)
#define MEM_CAP_CFG_ISYNC_INC_PRE_RD_MASK (0xffffffffU)
#define MEM_CAP_CFG_ISYNC_INC_PRE_WR_MASK (0xffffffffU)


///< Offset from nearest 10ms frame, in clock cycles.
#define MEM_CAP_CFG_ISYNC_INC_PRE_OFFSET_INCR_BF_OFF ( 0)
#define MEM_CAP_CFG_ISYNC_INC_PRE_OFFSET_INCR_BF_WID (24)
#define MEM_CAP_CFG_ISYNC_INC_PRE_OFFSET_INCR_BF_MSK (0x00FFFFFF)
#define MEM_CAP_CFG_ISYNC_INC_PRE_OFFSET_INCR_BF_DEF (0x00000000)

///< Bits [7:0] of the 10ms frame counter.
#define MEM_CAP_CFG_ISYNC_INC_PRE_FRAME_INCR_BF_OFF (24)
#define MEM_CAP_CFG_ISYNC_INC_PRE_FRAME_INCR_BF_WID ( 8)
#define MEM_CAP_CFG_ISYNC_INC_PRE_FRAME_INCR_BF_MSK (0xFF000000)
#define MEM_CAP_CFG_ISYNC_INC_PRE_FRAME_INCR_BF_DEF (0x00000000)


/** @brief MEM_CAP_CFG_MAP_MEM_MEM_CAP_CFG_MAP_ISYNC_MAP_ISYNC_CNT_ADJ register description at address offset 0x310
  *
  * Register default value:        0x00000000
  * Register full path in IP: mem_cap_cfg_map_MEM/mem_cap_cfg_map/ISYNC_MAP/ISYNC_CNT_ADJ
  * Isync Timer Count Adjustment Register
  */

typedef union {
  struct {
    uint32_t FRAME_ADJ : 8;
    ///< Bits [7:0] of the 10ms frame counter.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} mem_cap_cfg_isync_cnt_adj_reg_t;

#define MEM_CAP_CFG_ISYNC_CNT_ADJ_DEFAULT (0x00000000U)
#define MEM_CAP_CFG_ISYNC_CNT_ADJ_RD_MASK (0x000000ffU)
#define MEM_CAP_CFG_ISYNC_CNT_ADJ_WR_MASK (0x000000ffU)


///< Bits [7:0] of the 10ms frame counter.
#define MEM_CAP_CFG_ISYNC_CNT_ADJ_FRAME_ADJ_BF_OFF ( 0)
#define MEM_CAP_CFG_ISYNC_CNT_ADJ_FRAME_ADJ_BF_WID ( 8)
#define MEM_CAP_CFG_ISYNC_CNT_ADJ_FRAME_ADJ_BF_MSK (0x000000FF)
#define MEM_CAP_CFG_ISYNC_CNT_ADJ_FRAME_ADJ_BF_DEF (0x00000000)


/** @brief MEM_CAP_CFG_MAP_MEM_MEM_CAP_CFG_MAP_ISYNC_MAP_ISYNC_BFN_CNT_SYNC register description at address offset 0x314
  *
  * Register default value:        0x00000000
  * Register full path in IP: mem_cap_cfg_map_MEM/mem_cap_cfg_map/ISYNC_MAP/ISYNC_BFN_CNT_SYNC
  * BFN Count Sync
  */

typedef union {
  struct {
    uint32_t OFFSET : 24;
    ///< Offset from nearest 10ms frame, in clock cycles.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t FRAME : 8;
    ///< Bits [7:0] fo the count of 10ms frames.
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} mem_cap_cfg_isync_bfn_cnt_sync_reg_t;

#define MEM_CAP_CFG_ISYNC_BFN_CNT_SYNC_DEFAULT (0x00000000U)
#define MEM_CAP_CFG_ISYNC_BFN_CNT_SYNC_RD_MASK (0xffffffffU)
#define MEM_CAP_CFG_ISYNC_BFN_CNT_SYNC_WR_MASK (0x00000000U)


///< Offset from nearest 10ms frame, in clock cycles.
#define MEM_CAP_CFG_ISYNC_BFN_CNT_SYNC_OFFSET_BF_OFF ( 0)
#define MEM_CAP_CFG_ISYNC_BFN_CNT_SYNC_OFFSET_BF_WID (24)
#define MEM_CAP_CFG_ISYNC_BFN_CNT_SYNC_OFFSET_BF_MSK (0x00FFFFFF)
#define MEM_CAP_CFG_ISYNC_BFN_CNT_SYNC_OFFSET_BF_DEF (0x00000000)

///< Bits [7:0] fo the count of 10ms frames.
#define MEM_CAP_CFG_ISYNC_BFN_CNT_SYNC_FRAME_BF_OFF (24)
#define MEM_CAP_CFG_ISYNC_BFN_CNT_SYNC_FRAME_BF_WID ( 8)
#define MEM_CAP_CFG_ISYNC_BFN_CNT_SYNC_FRAME_BF_MSK (0xFF000000)
#define MEM_CAP_CFG_ISYNC_BFN_CNT_SYNC_FRAME_BF_DEF (0x00000000)


/** @brief MEM_CAP_CFG_MAP_MEM_MEM_CAP_CFG_MAP_ISYNC_MAP_ISYNC_BFN_CNT register description at address offset 0x318
  *
  * Register default value:        0x00000000
  * Register full path in IP: mem_cap_cfg_map_MEM/mem_cap_cfg_map/ISYNC_MAP/ISYNC_BFN_CNT
  * BFN Count
  */

typedef union {
  struct {
    uint32_t OFFSET : 24;
    ///< Offset from nearest 10ms frame, in clock cycles.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t FRAME : 8;
    ///< LSB's of Count of 10ms frames.
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} mem_cap_cfg_isync_bfn_cnt_reg_t;

#define MEM_CAP_CFG_ISYNC_BFN_CNT_DEFAULT (0x00000000U)
#define MEM_CAP_CFG_ISYNC_BFN_CNT_RD_MASK (0xffffffffU)
#define MEM_CAP_CFG_ISYNC_BFN_CNT_WR_MASK (0x00000000U)


///< Offset from nearest 10ms frame, in clock cycles.
#define MEM_CAP_CFG_ISYNC_BFN_CNT_OFFSET_BF_OFF ( 0)
#define MEM_CAP_CFG_ISYNC_BFN_CNT_OFFSET_BF_WID (24)
#define MEM_CAP_CFG_ISYNC_BFN_CNT_OFFSET_BF_MSK (0x00FFFFFF)
#define MEM_CAP_CFG_ISYNC_BFN_CNT_OFFSET_BF_DEF (0x00000000)

///< LSB's of Count of 10ms frames.
#define MEM_CAP_CFG_ISYNC_BFN_CNT_FRAME_BF_OFF (24)
#define MEM_CAP_CFG_ISYNC_BFN_CNT_FRAME_BF_WID ( 8)
#define MEM_CAP_CFG_ISYNC_BFN_CNT_FRAME_BF_MSK (0xFF000000)
#define MEM_CAP_CFG_ISYNC_BFN_CNT_FRAME_BF_DEF (0x00000000)


/** @brief MEM_CAP_CFG_MAP_MEM_MEM_CAP_CFG_MAP_TX_RATE register description at address offset 0x340
  *
  * Register default value:        0x00000000
  * Register full path in IP: mem_cap_cfg_map_MEM/mem_cap_cfg_map/TX_RATE
  * TX System and Antenna Rate Select
  */

typedef union {
  struct {
    uint32_t SYSTEM_RATE : 5;
    ///< TX System Rate. When antenna operates at 1 GHz, the following System
    ///< Rates Apply: 0 :  8  I+Q  every        32  clocks ( 0.25 samples per
    ///< clock) 1 :  8  I+Q  every  21,21,22  clocks ( 0.375 samples per clock)
    ///< 2 :  8  I+Q  every        16  clocks ( 0.5 samples per clock) 3 :
    ///< 8  I+Q  every  10,11,11  clocks ( 0.75 samples per clock) 4 :  8
    ///< I+Q  every         8  clocks ( 1 sample per clock) 5 :  8  I+Q  every
    ///< 5, 5, 6  clocks ( 1.5 sample per clock) 6 :  8  I+Q  every
    ///< 4  clocks ( 2 samples per clock) 7 :  8  I+Q  every   2, 3, 3  clocks
    ///< ( 3 samples per clock) 8 :  8  I+Q  every         2  clocks ( 4 samples
    ///< per clock) 9 :  8  I+Q  every   1, 1, 2  clocks ( 6 samples per clock)
    ///< 10:  8  I+Q  every         1  clock  ( 8 samples per clock) 21: 16
    ///< R    every   5, 5, 6  clocks ( 3 samples per clock) 22: 16  R    every
    ///< 4  clocks ( 8 samples per clock) 23: 16  R    every   2, 3, 3  clocks
    ///< ( 6 samples per clock) 24: 16  R    every         2  clocks ( 8 samples
    ///< per clock) 25: 16  R    every   1, 1, 2  clocks (12 samples per clock)
    ///< 26: 16  R    every         1  clock  (16 samples per clock)  When
    ///< antenna operates at 1.5 GHz, the following System Rates Apply: 0 :
    ///< 8  I+Q  every        48  clocks ( 0.25 samples per clock) 1 :  8
    ///< I+Q  every        32  clocks ( 0.375 samples per clock) 2 :  8  I+Q
    ///< every        24  clocks ( 0.5 samples per clock) 3 :  8  I+Q  every
    ///< 16  clocks ( 0.75 samples per clock) 4 :  8  I+Q  every        12
    ///< clocks ( 1 sample per clock) 5 :  8  I+Q  every         8  clocks
    ///< ( 1.5 sample per clock) 6 :  8  I+Q  every         6  clocks ( 2 samples
    ///< per clock) 7 :  8  I+Q  every         4  clocks ( 3 samples per clock)
    ///< 8 :  8  I+Q  every         3  clocks ( 4 samples per clock) 9 :  8
    ///< I+Q  every         2  clocks ( 6 samples per clock) 10:  8  I+Q  every
    ///< 1,2  clock  ( 8 samples per clock) 11:  8  I+Q  every         1  clock
    ///< (12 samples per clock) 23: 16  R    every         4  clocks ( 6 samples
    ///< per clock) 25: 16  R    every         2  clocks (12 samples per clock)
    ///< 27: 16  R    every   1, 1, 2  clocks (18 samples per clock) 28: 16
    ///< R    every         1  clock  (24 samples per clock)
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
    uint32_t ANTENNA_RATE : 3;
    ///< TX Antenna Rate.   0,  //  3 samples per clock   1,  //  4 samples
    ///< per clock   2,  //  6 samples per clock   3,  //  8 samples per clock
    ///< 4,  // 12 samples per clock   5,  // 16 samples per clock
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t DRF_1P5G : 1;
    ///< 0: Indicates that the TX system is operating at 1.0 GHz clock rate
    ///< 1: Indicates that the TX system is operating at 1.5 GHz clock rate
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} mem_cap_cfg_tx_rate_reg_t;

#define MEM_CAP_CFG_TX_RATE_DEFAULT (0x00000000U)
#define MEM_CAP_CFG_TX_RATE_RD_MASK (0x00000f1fU)
#define MEM_CAP_CFG_TX_RATE_WR_MASK (0x00000f1fU)


///< TX System Rate. When antenna operates at 1 GHz, the following System
///< Rates Apply: 0 :  8  I+Q  every        32  clocks ( 0.25 samples per
///< clock) 1 :  8  I+Q  every  21,21,22  clocks ( 0.375 samples per clock)
///< 2 :  8  I+Q  every        16  clocks ( 0.5 samples per clock) 3 :
///< 8  I+Q  every  10,11,11  clocks ( 0.75 samples per clock) 4 :  8
///< I+Q  every         8  clocks ( 1 sample per clock) 5 :  8  I+Q  every
///< 5, 5, 6  clocks ( 1.5 sample per clock) 6 :  8  I+Q  every
///< 4  clocks ( 2 samples per clock) 7 :  8  I+Q  every   2, 3, 3  clocks
///< ( 3 samples per clock) 8 :  8  I+Q  every         2  clocks ( 4 samples
///< per clock) 9 :  8  I+Q  every   1, 1, 2  clocks ( 6 samples per clock)
///< 10:  8  I+Q  every         1  clock  ( 8 samples per clock) 21: 16
///< R    every   5, 5, 6  clocks ( 3 samples per clock) 22: 16  R    every
///< 4  clocks ( 8 samples per clock) 23: 16  R    every   2, 3, 3  clocks
///< ( 6 samples per clock) 24: 16  R    every         2  clocks ( 8 samples
///< per clock) 25: 16  R    every   1, 1, 2  clocks (12 samples per clock)
///< 26: 16  R    every         1  clock  (16 samples per clock)  When
///< antenna operates at 1.5 GHz, the following System Rates Apply: 0 :
///< 8  I+Q  every        48  clocks ( 0.25 samples per clock) 1 :  8
///< I+Q  every        32  clocks ( 0.375 samples per clock) 2 :  8  I+Q
///< every        24  clocks ( 0.5 samples per clock) 3 :  8  I+Q  every
///< 16  clocks ( 0.75 samples per clock) 4 :  8  I+Q  every        12
///< clocks ( 1 sample per clock) 5 :  8  I+Q  every         8  clocks
///< ( 1.5 sample per clock) 6 :  8  I+Q  every         6  clocks ( 2 samples
///< per clock) 7 :  8  I+Q  every         4  clocks ( 3 samples per clock)
///< 8 :  8  I+Q  every         3  clocks ( 4 samples per clock) 9 :  8
///< I+Q  every         2  clocks ( 6 samples per clock) 10:  8  I+Q  every
///< 1,2  clock  ( 8 samples per clock) 11:  8  I+Q  every         1  clock
///< (12 samples per clock) 23: 16  R    every         4  clocks ( 6 samples
///< per clock) 25: 16  R    every         2  clocks (12 samples per clock)
///< 27: 16  R    every   1, 1, 2  clocks (18 samples per clock) 28: 16
///< R    every         1  clock  (24 samples per clock)
#define MEM_CAP_CFG_TX_RATE_SYS_RATE_BF_OFF ( 0)
#define MEM_CAP_CFG_TX_RATE_SYS_RATE_BF_WID ( 5)
#define MEM_CAP_CFG_TX_RATE_SYS_RATE_BF_MSK (0x0000001F)
#define MEM_CAP_CFG_TX_RATE_SYS_RATE_BF_DEF (0x00000000)

///< TX Antenna Rate.   0,  //  3 samples per clock   1,  //  4 samples
///< per clock   2,  //  6 samples per clock   3,  //  8 samples per clock
///< 4,  // 12 samples per clock   5,  // 16 samples per clock
#define MEM_CAP_CFG_TX_RATE_ANTENNA_RATE_BF_OFF ( 8)
#define MEM_CAP_CFG_TX_RATE_ANTENNA_RATE_BF_WID ( 3)
#define MEM_CAP_CFG_TX_RATE_ANTENNA_RATE_BF_MSK (0x00000700)
#define MEM_CAP_CFG_TX_RATE_ANTENNA_RATE_BF_DEF (0x00000000)

///< 0: Indicates that the TX system is operating at 1.0 GHz clock rate
///< 1: Indicates that the TX system is operating at 1.5 GHz clock rate
#define MEM_CAP_CFG_TX_RATE_DRF_1P5G_BF_OFF (11)
#define MEM_CAP_CFG_TX_RATE_DRF_1P5G_BF_WID ( 1)
#define MEM_CAP_CFG_TX_RATE_DRF_1P5G_BF_MSK (0x00000800)
#define MEM_CAP_CFG_TX_RATE_DRF_1P5G_BF_DEF (0x00000000)


/** @brief MEM_CAP_CFG_MAP_MEM_MEM_CAP_CFG_MAP_RX_RATE register description at address offset 0x350
  *
  * Register default value:        0x00000000
  * Register full path in IP: mem_cap_cfg_map_MEM/mem_cap_cfg_map/RX_RATE
  * RX System and Antenna Rate Select
  */

typedef union {
  struct {
    uint32_t SYSTEM_RATE : 5;
    ///< RX System Rate. When antenna operates at 1 GHz, the following System
    ///< Rates Apply: 0 :  8  I+Q  every        32  clocks ( 0.25 samples per
    ///< clock) 1 :  8  I+Q  every  21,21,22  clocks ( 0.375 samples per clock)
    ///< 2 :  8  I+Q  every        16  clocks ( 0.5 samples per clock) 3 :
    ///< 8  I+Q  every  10,11,11  clocks ( 0.75 samples per clock) 4 :  8
    ///< I+Q  every         8  clocks ( 1 sample per clock) 5 :  8  I+Q  every
    ///< 5, 5, 6  clocks ( 1.5 sample per clock) 6 :  8  I+Q  every
    ///< 4  clocks ( 2 samples per clock) 7 :  8  I+Q  every   2, 3, 3  clocks
    ///< ( 3 samples per clock) 8 :  8  I+Q  every         2  clocks ( 4 samples
    ///< per clock) 9 :  8  I+Q  every   1, 1, 2  clocks ( 6 samples per clock)
    ///< 10:  8  I+Q  every         1  clock  ( 8 samples per clock) 21: 16
    ///< R    every   5, 5, 6  clocks ( 3 samples per clock) 22: 16  R    every
    ///< 4  clocks ( 8 samples per clock) 23: 16  R    every   2, 3, 3  clocks
    ///< ( 6 samples per clock) 24: 16  R    every         2  clocks ( 8 samples
    ///< per clock) 25: 16  R    every   1, 1, 2  clocks (12 samples per clock)
    ///< 26: 16  R    every         1  clock  (16 samples per clock)  When
    ///< antenna operates at 1.5 GHz, the following System Rates Apply: 0 :
    ///< 8  I+Q  every        48  clocks ( 0.25 samples per clock) 1 :  8
    ///< I+Q  every        32  clocks ( 0.375 samples per clock) 2 :  8  I+Q
    ///< every        24  clocks ( 0.5 samples per clock) 3 :  8  I+Q  every
    ///< 16  clocks ( 0.75 samples per clock) 4 :  8  I+Q  every        12
    ///< clocks ( 1 sample per clock) 5 :  8  I+Q  every         8  clocks
    ///< ( 1.5 sample per clock) 6 :  8  I+Q  every         6  clocks ( 2 samples
    ///< per clock) 7 :  8  I+Q  every         4  clocks ( 3 samples per clock)
    ///< 8 :  8  I+Q  every         3  clocks ( 4 samples per clock) 9 :  8
    ///< I+Q  every         2  clocks ( 6 samples per clock) 10:  8  I+Q  every
    ///< 1,2  clock  ( 8 samples per clock) 11:  8  I+Q  every         1  clock
    ///< (12 samples per clock) 23: 16  R    every         4  clocks ( 6 samples
    ///< per clock) 25: 16  R    every         2  clocks (12 samples per clock)
    ///< 27: 16  R    every   1, 1, 2  clocks (18 samples per clock) 28: 16
    ///< R    every         1  clock  (24 samples per clock)
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
    uint32_t ANTENNA_RATE : 3;
    ///< RX Antenna Rate.   0,  //  3 samples per clock   1,  //  4 samples
    ///< per clock   2,  //  6 samples per clock   3,  //  8 samples per clock
    ///< 4,  // 12 samples per clock   5,  // 16 samples per clock
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t DRF_1P5G : 1;
    ///< 0: Indicates that the TX system is operating at 1.0 GHz clock rate
    ///< 1: Indicates that the TX system is operating at 1.5 GHz clock rate
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} mem_cap_cfg_rx_rate_reg_t;

#define MEM_CAP_CFG_RX_RATE_DEFAULT (0x00000000U)
#define MEM_CAP_CFG_RX_RATE_RD_MASK (0x00000f1fU)
#define MEM_CAP_CFG_RX_RATE_WR_MASK (0x00000f1fU)


///< RX System Rate. When antenna operates at 1 GHz, the following System
///< Rates Apply: 0 :  8  I+Q  every        32  clocks ( 0.25 samples per
///< clock) 1 :  8  I+Q  every  21,21,22  clocks ( 0.375 samples per clock)
///< 2 :  8  I+Q  every        16  clocks ( 0.5 samples per clock) 3 :
///< 8  I+Q  every  10,11,11  clocks ( 0.75 samples per clock) 4 :  8
///< I+Q  every         8  clocks ( 1 sample per clock) 5 :  8  I+Q  every
///< 5, 5, 6  clocks ( 1.5 sample per clock) 6 :  8  I+Q  every
///< 4  clocks ( 2 samples per clock) 7 :  8  I+Q  every   2, 3, 3  clocks
///< ( 3 samples per clock) 8 :  8  I+Q  every         2  clocks ( 4 samples
///< per clock) 9 :  8  I+Q  every   1, 1, 2  clocks ( 6 samples per clock)
///< 10:  8  I+Q  every         1  clock  ( 8 samples per clock) 21: 16
///< R    every   5, 5, 6  clocks ( 3 samples per clock) 22: 16  R    every
///< 4  clocks ( 8 samples per clock) 23: 16  R    every   2, 3, 3  clocks
///< ( 6 samples per clock) 24: 16  R    every         2  clocks ( 8 samples
///< per clock) 25: 16  R    every   1, 1, 2  clocks (12 samples per clock)
///< 26: 16  R    every         1  clock  (16 samples per clock)  When
///< antenna operates at 1.5 GHz, the following System Rates Apply: 0 :
///< 8  I+Q  every        48  clocks ( 0.25 samples per clock) 1 :  8
///< I+Q  every        32  clocks ( 0.375 samples per clock) 2 :  8  I+Q
///< every        24  clocks ( 0.5 samples per clock) 3 :  8  I+Q  every
///< 16  clocks ( 0.75 samples per clock) 4 :  8  I+Q  every        12
///< clocks ( 1 sample per clock) 5 :  8  I+Q  every         8  clocks
///< ( 1.5 sample per clock) 6 :  8  I+Q  every         6  clocks ( 2 samples
///< per clock) 7 :  8  I+Q  every         4  clocks ( 3 samples per clock)
///< 8 :  8  I+Q  every         3  clocks ( 4 samples per clock) 9 :  8
///< I+Q  every         2  clocks ( 6 samples per clock) 10:  8  I+Q  every
///< 1,2  clock  ( 8 samples per clock) 11:  8  I+Q  every         1  clock
///< (12 samples per clock) 23: 16  R    every         4  clocks ( 6 samples
///< per clock) 25: 16  R    every         2  clocks (12 samples per clock)
///< 27: 16  R    every   1, 1, 2  clocks (18 samples per clock) 28: 16
///< R    every         1  clock  (24 samples per clock)
#define MEM_CAP_CFG_RX_RATE_SYS_RATE_BF_OFF ( 0)
#define MEM_CAP_CFG_RX_RATE_SYS_RATE_BF_WID ( 5)
#define MEM_CAP_CFG_RX_RATE_SYS_RATE_BF_MSK (0x0000001F)
#define MEM_CAP_CFG_RX_RATE_SYS_RATE_BF_DEF (0x00000000)

///< RX Antenna Rate.   0,  //  3 samples per clock   1,  //  4 samples
///< per clock   2,  //  6 samples per clock   3,  //  8 samples per clock
///< 4,  // 12 samples per clock   5,  // 16 samples per clock
#define MEM_CAP_CFG_RX_RATE_ANTENNA_RATE_BF_OFF ( 8)
#define MEM_CAP_CFG_RX_RATE_ANTENNA_RATE_BF_WID ( 3)
#define MEM_CAP_CFG_RX_RATE_ANTENNA_RATE_BF_MSK (0x00000700)
#define MEM_CAP_CFG_RX_RATE_ANTENNA_RATE_BF_DEF (0x00000000)

///< 0: Indicates that the TX system is operating at 1.0 GHz clock rate
///< 1: Indicates that the TX system is operating at 1.5 GHz clock rate
#define MEM_CAP_CFG_RX_RATE_DRF_1P5G_BF_OFF (11)
#define MEM_CAP_CFG_RX_RATE_DRF_1P5G_BF_WID ( 1)
#define MEM_CAP_CFG_RX_RATE_DRF_1P5G_BF_MSK (0x00000800)
#define MEM_CAP_CFG_RX_RATE_DRF_1P5G_BF_DEF (0x00000000)


/** @brief MEM_CAP_CFG_MAP_MEM_MEM_CAP_CFG_MAP_PLL_CTL register description at address offset 0x360
  *
  * Register default value:        0x00000000
  * Register full path in IP: mem_cap_cfg_map_MEM/mem_cap_cfg_map/PLL_CTL
  * PLL control
  */

typedef union {
  struct {
    uint32_t PLL_DBG : 1;
    ///< 0: Unselect PLL data                    1: Select PLL data
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t PLL_CLK_DIS : 1;
    ///< 0: PLL APB clock enabled                           1: PLL APB clock
    ///< disabled
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t PLL_SOFT_RESET : 1;
    ///< 0: PLL APB interface is not in reset                           1:
    ///< PLL APB interface is in reset
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} mem_cap_cfg_pll_ctl_reg_t;

#define MEM_CAP_CFG_PLL_CTL_DEFAULT (0x00000000U)
#define MEM_CAP_CFG_PLL_CTL_RD_MASK (0x00000007U)
#define MEM_CAP_CFG_PLL_CTL_WR_MASK (0x00000007U)


///< 0: Unselect PLL data                    1: Select PLL data
#define MEM_CAP_CFG_PLL_CTL_PLL_DBG_BF_OFF ( 0)
#define MEM_CAP_CFG_PLL_CTL_PLL_DBG_BF_WID ( 1)
#define MEM_CAP_CFG_PLL_CTL_PLL_DBG_BF_MSK (0x00000001)
#define MEM_CAP_CFG_PLL_CTL_PLL_DBG_BF_DEF (0x00000000)

///< 0: PLL APB clock enabled                           1: PLL APB clock
///< disabled
#define MEM_CAP_CFG_PLL_CTL_PLL_CLK_DIS_BF_OFF ( 1)
#define MEM_CAP_CFG_PLL_CTL_PLL_CLK_DIS_BF_WID ( 1)
#define MEM_CAP_CFG_PLL_CTL_PLL_CLK_DIS_BF_MSK (0x00000002)
#define MEM_CAP_CFG_PLL_CTL_PLL_CLK_DIS_BF_DEF (0x00000000)

///< 0: PLL APB interface is not in reset                           1:
///< PLL APB interface is in reset
#define MEM_CAP_CFG_PLL_CTL_PLL_SOFT_RST_BF_OFF ( 2)
#define MEM_CAP_CFG_PLL_CTL_PLL_SOFT_RST_BF_WID ( 1)
#define MEM_CAP_CFG_PLL_CTL_PLL_SOFT_RST_BF_MSK (0x00000004)
#define MEM_CAP_CFG_PLL_CTL_PLL_SOFT_RST_BF_DEF (0x00000000)


/** @brief MEM_CAP_CFG_MAP_MEM_MEM_CAP_CFG_MAP_AC_NCO_CFG register description at address offset 0x368
  *
  * Register default value:        0x0000018C
  * Register full path in IP: mem_cap_cfg_map_MEM/mem_cap_cfg_map/AC_NCO_CFG
  * AC NCO config
  */

typedef union {
  struct {
    uint32_t AC_DELAY_TX : 5;
    ///< Sets the differential delay between when the SWG is enabled by the
    ///< incoming antenna calibration trigger and when the corresponding outgoing
    ///< trigger is asserted. The maximum allowable delay is 31 clock cycles.
    ///< The minimum delay is 4 clock cycles.  When the value is set to 12,
    ///< the outgoing trigger is lined up with the first outgoing valid pulse
    ///< of the NCO data destined to the TRX_SYS.
    ///< AccessType="RW" BitOffset="0" ResetValue="0xC"
    uint32_t AC_DELAY_RX : 5;
    ///< Sets the differential delay between when the SWG is enabled by the
    ///< incoming antenna calibration trigger and when the corresponding outgoing
    ///< trigger is asserted. The maximum allowable delay is 31 clock cycles.
    ///< The minimum delay is 4 clock cycles.  The minimum delay is 4 clock
    ///< cycles.  When the value is set to 12, the outgoing trigger is lined
    ///< up with the first outgoing valid pulse of the NCO data destined to
    ///< the TRX_SYS.
    ///< AccessType="RW" BitOffset="5" ResetValue="0xC"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} mem_cap_cfg_ac_nco_cfg_reg_t;

#define MEM_CAP_CFG_AC_NCO_CFG_DEFAULT (0x0000018cU)
#define MEM_CAP_CFG_AC_NCO_CFG_RD_MASK (0x000003ffU)
#define MEM_CAP_CFG_AC_NCO_CFG_WR_MASK (0x000003ffU)


///< Sets the differential delay between when the SWG is enabled by the
///< incoming antenna calibration trigger and when the corresponding outgoing
///< trigger is asserted. The maximum allowable delay is 31 clock cycles.
///< The minimum delay is 4 clock cycles.  When the value is set to 12,
///< the outgoing trigger is lined up with the first outgoing valid pulse
///< of the NCO data destined to the TRX_SYS.
#define MEM_CAP_CFG_AC_NCO_CFG_AC_DELAY_TX_BF_OFF ( 0)
#define MEM_CAP_CFG_AC_NCO_CFG_AC_DELAY_TX_BF_WID ( 5)
#define MEM_CAP_CFG_AC_NCO_CFG_AC_DELAY_TX_BF_MSK (0x0000001F)
#define MEM_CAP_CFG_AC_NCO_CFG_AC_DELAY_TX_BF_DEF (0x0000000C)

///< Sets the differential delay between when the SWG is enabled by the
///< incoming antenna calibration trigger and when the corresponding outgoing
///< trigger is asserted. The maximum allowable delay is 31 clock cycles.
///< The minimum delay is 4 clock cycles.  The minimum delay is 4 clock
///< cycles.  When the value is set to 12, the outgoing trigger is lined
///< up with the first outgoing valid pulse of the NCO data destined to
///< the TRX_SYS.
#define MEM_CAP_CFG_AC_NCO_CFG_AC_DELAY_RX_BF_OFF ( 5)
#define MEM_CAP_CFG_AC_NCO_CFG_AC_DELAY_RX_BF_WID ( 5)
#define MEM_CAP_CFG_AC_NCO_CFG_AC_DELAY_RX_BF_MSK (0x000003E0)
#define MEM_CAP_CFG_AC_NCO_CFG_AC_DELAY_RX_BF_DEF (0x00000180)


/** @brief MEM_CAP_CFG_MAP_MEM_MEM_CAP_CFG_MAP_DP_INIT register description at address offset 0x36c
  *
  * Register default value:        0x00000000
  * Register full path in IP: mem_cap_cfg_map_MEM/mem_cap_cfg_map/DP_INIT
  * DP INIT Control Register
  */

typedef union {
  struct {
    uint32_t DP_INIT_0 : 1;
    ///< Datapath Initialization Control Function for Quad 0 BFN events.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t DP_INIT_1 : 1;
    ///< Datapath Initialization Control Function for Quad 1 BFN events.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t DP_INIT_DONE : 1;
    ///< Indicates that the DP_INIT function completed in MEM_CAP.
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} mem_cap_cfg_dp_init_reg_t;

#define MEM_CAP_CFG_DP_INIT_DEFAULT (0x00000000U)
#define MEM_CAP_CFG_DP_INIT_RD_MASK (0x00000007U)
#define MEM_CAP_CFG_DP_INIT_WR_MASK (0x00000003U)


///< Datapath Initialization Control Function for Quad 0 BFN events.
#define MEM_CAP_CFG_DP_INIT_DP_INIT_0_BF_OFF ( 0)
#define MEM_CAP_CFG_DP_INIT_DP_INIT_0_BF_WID ( 1)
#define MEM_CAP_CFG_DP_INIT_DP_INIT_0_BF_MSK (0x00000001)
#define MEM_CAP_CFG_DP_INIT_DP_INIT_0_BF_DEF (0x00000000)

///< Datapath Initialization Control Function for Quad 1 BFN events.
#define MEM_CAP_CFG_DP_INIT_DP_INIT_1_BF_OFF ( 1)
#define MEM_CAP_CFG_DP_INIT_DP_INIT_1_BF_WID ( 1)
#define MEM_CAP_CFG_DP_INIT_DP_INIT_1_BF_MSK (0x00000002)
#define MEM_CAP_CFG_DP_INIT_DP_INIT_1_BF_DEF (0x00000000)

///< Indicates that the DP_INIT function completed in MEM_CAP.
#define MEM_CAP_CFG_DP_INIT_DP_INIT_DONE_BF_OFF ( 2)
#define MEM_CAP_CFG_DP_INIT_DP_INIT_DONE_BF_WID ( 1)
#define MEM_CAP_CFG_DP_INIT_DP_INIT_DONE_BF_MSK (0x00000004)
#define MEM_CAP_CFG_DP_INIT_DP_INIT_DONE_BF_DEF (0x00000000)


/** @brief MEM_CAP_CFG_MAP_MEM_MEM_CAP_CFG_MAP_SMON_CSR_SMON_R0 register description at address offset 0x380
  *
  * Register default value:        0x40000000
  * Register full path in IP: mem_cap_cfg_map_MEM/mem_cap_cfg_map/SMON_CSR/SMON_r0
  * AW_smon CONTROL0 register
  */

typedef union {
  struct {
    uint32_t SMON_ENABLE : 1;
    ///< enable the SMON counters
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t RSVD0 : 3;
    ///< reserved
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t SMON0_FUNCTION : 3;
    ///< SMON0 function    3'h0 = free running function. Trigger to accumulate
    ///< the value into the engine SMON_COUNT when an event is valid.    3'h1
    ///< = free running function. Trigger to accumulate a fixed value of 1
    ///< into the engine SMON_COUNT when an event is valid.    3'h2 = max function.
    ///< Trigger to update max value when an event is valid and larger than
    ///< the current value stored in the engine SMON_COUNT.    3'h3 = Timestamp
    ///< First Mode. Capture the timer value on the first occurance of an event.
    ///< Need to write CONTROL01 to reset.    3'h4 = Timestamp Mode. Capture
    ///< the timer value on every occurance of an event.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t SMON0_FUNCTION_COMPARE : 1;
    ///< SMON0 function_compare    1'h0 = compare mode disabled    1'h1 = compare
    ///< mode enabled
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t SMON1_FUNCTION : 3;
    ///< SMON1 function    3'h0 = free running function. Trigger to accumulate
    ///< the value into the engine SMON_COUNT when an event is valid.    3'h1
    ///< = free running function. Trigger to accumulate a fixed value of 1
    ///< into the engine SMON_COUNT when an event is valid.    3'h2 = max function.
    ///< Trigger to update max value when an event is valid and larger than
    ///< the current value stored in the engine SMON_COUNT.    3'h3 = Timestamp
    ///< First Mode. Capture the timer value on the first occurance of an event.
    ///< Need to write CONTROL01 to reset.    3'h4 = Timestamp Mode. Capture
    ///< the timer value on every occurance of an event.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t SMON1_FUNCTION_COMPARE : 1;
    ///< SMON1 function_compare    1'h0 = compare mode disabled    1'h1 = compare
    ///< mode enabled
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t SMON_MODE : 4;
    ///< SMON mode     4'h0 = Independant Mode. SMON0_COUNT & SMON1_COUNT operate
    ///< independantly as their function is configured.       4'h1 = Average
    ///< Latency Mode. SMON0 trigger starts timer & SMON1 trigger stops timer.
    ///< SMON0_COUNT accumulates occurances and SMON1_COUNT accumulates timer
    ///< values. For multiple stop for a single start, accumulate  start_to_stop1,
    ///< start_to_stop1stop2 ...    4'h2 = MinMax Latency Mode,. SMON0 trigger
    ///< starts timer & SMON1 trigger stops timer. SMON0_COUNT maintains the
    ///< minimum timer value and SMON1_COUNT maintains the maximum timer value.
    ///< 4'h3 = Average Mode.   SMON0 trigger increments SMON0_COUNT and the
    ///< value is accumulated in SMON1_COUNT. SMON1 events are disabled.
    ///< 4'h4 = Average Lantecy Mode 2. same as mode01, but only accumulate
    ///< the first start_to_stop1 if there are multiple stop for each start.
    ///< 4'h5 = Average Latency Mode 3. same as mode01, but accumualte the
    ///< incremental start_to_stop1, stop1_to_stop2... if there are multiple
    ///< stop for each start.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t STOPCOUNTEROVFL : 1;
    ///< configure to stop on counter0 or counter1 overflow
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t INTCOUNTEROVFL : 1;
    ///< configure to interupt on counter0 or counter1 overflow
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t STATCOUNTER0OVFL : 1;
    ///< status for counter0 overflow. A value of '1' signifies counter0 overflow.
    ///< AccessType="RW/V" BitOffset="18" ResetValue="0x0"
    uint32_t STATCOUNTER1OVFL : 1;
    ///< status for counter1 overflow. A value of '1' signifies counter1 overflow.
    ///< AccessType="RW/V" BitOffset="19" ResetValue="0x0"
    uint32_t STOPTIMEROVFL : 1;
    ///< configure to stop on timer overflow or timer>maxvalue
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t INTTIMEROVFL : 1;
    ///< configure to interrupt on timer overflow or timer>maxvalue
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t STATTIMEROVFL : 1;
    ///< status of timer overflow. A value of '1' signifies timer overflow,
    ///< or timer>maxvalue.
    ///< AccessType="RW/V" BitOffset="22" ResetValue="0x0"
    uint32_t RSVD1 : 1;
    ///< reserved
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t TIMER_PRESCALE : 5;
    ///< timer prescale    5'h00 = mode00, increment timer every      1 clock
    ///< 5'h01 = mode01, increment timer every      2 clocks    5'h02 = mode02,
    ///< increment timer every      4 clocks    5'h03 = mode03, increment timer
    ///< every      8 clocks    5'h04 = mode04, increment timer every     16
    ///< clocks    5'h05 = mode05, increment timer every     32 clocks    5'h06
    ///< = mode06, increment timer every     64 clocks    5'h07 = mode07, increment
    ///< timer every    128 clocks    5'h08 = mode08, increment timer every
    ///< 256 clocks    5'h09 = mode09, increment timer every    512 clocks
    ///< 5'h0a = mode10, increment timer every   1024 clocks    5'h0b = mode11,
    ///< increment timer every   2048 clocks    5'h0c = mode12, increment timer
    ///< every   4096 clocks    5'h0d = mode13, increment timer every   8192
    ///< clocks    5'h0e = mode14, increment timer every  16384 clocks    5'h0f
    ///< = mode15, increment timer every  32768 clocks    5'h10 = mode16, increment
    ///< timer every  65536 clocks    5'h11 = mode17, increment timer every
    ///< 131072 clocks    5'h12 = mode18, increment timer every 262144 clocks
    ///< 5'h13 = mode19, increment timer every 524288 clocks
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t RSVD2 : 1;
    ///< reserved
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
    uint32_t VERSION : 2;
    ///< version
    ///< AccessType="RO" BitOffset="30" ResetValue="0x1"
  } ;
  uint32_t value;
} mem_cap_cfg_smon_r0_reg_t;

#define MEM_CAP_CFG_SMON_R0_DEFAULT (0x40000000U)
#define MEM_CAP_CFG_SMON_R0_RD_MASK (0xffffffffU)
#define MEM_CAP_CFG_SMON_R0_WR_MASK (0x3fffffffU)


///< enable the SMON counters
#define MEM_CAP_CFG_SMON_R0_SMON_EN_BF_OFF ( 0)
#define MEM_CAP_CFG_SMON_R0_SMON_EN_BF_WID ( 1)
#define MEM_CAP_CFG_SMON_R0_SMON_EN_BF_MSK (0x00000001)
#define MEM_CAP_CFG_SMON_R0_SMON_EN_BF_DEF (0x00000000)

///< reserved
#define MEM_CAP_CFG_SMON_R0_RSVD0_BF_OFF ( 1)
#define MEM_CAP_CFG_SMON_R0_RSVD0_BF_WID ( 3)
#define MEM_CAP_CFG_SMON_R0_RSVD0_BF_MSK (0x0000000E)
#define MEM_CAP_CFG_SMON_R0_RSVD0_BF_DEF (0x00000000)

///< SMON0 function    3'h0 = free running function. Trigger to accumulate
///< the value into the engine SMON_COUNT when an event is valid.    3'h1
///< = free running function. Trigger to accumulate a fixed value of 1
///< into the engine SMON_COUNT when an event is valid.    3'h2 = max function.
///< Trigger to update max value when an event is valid and larger than
///< the current value stored in the engine SMON_COUNT.    3'h3 = Timestamp
///< First Mode. Capture the timer value on the first occurance of an event.
///< Need to write CONTROL01 to reset.    3'h4 = Timestamp Mode. Capture
///< the timer value on every occurance of an event.
#define MEM_CAP_CFG_SMON_R0_SMON0_FUNCTION_BF_OFF ( 4)
#define MEM_CAP_CFG_SMON_R0_SMON0_FUNCTION_BF_WID ( 3)
#define MEM_CAP_CFG_SMON_R0_SMON0_FUNCTION_BF_MSK (0x00000070)
#define MEM_CAP_CFG_SMON_R0_SMON0_FUNCTION_BF_DEF (0x00000000)

///< SMON0 function_compare    1'h0 = compare mode disabled    1'h1 = compare
///< mode enabled
#define MEM_CAP_CFG_SMON_R0_SMON0_FUNCTION_CMP_BF_OFF ( 7)
#define MEM_CAP_CFG_SMON_R0_SMON0_FUNCTION_CMP_BF_WID ( 1)
#define MEM_CAP_CFG_SMON_R0_SMON0_FUNCTION_CMP_BF_MSK (0x00000080)
#define MEM_CAP_CFG_SMON_R0_SMON0_FUNCTION_CMP_BF_DEF (0x00000000)

///< SMON1 function    3'h0 = free running function. Trigger to accumulate
///< the value into the engine SMON_COUNT when an event is valid.    3'h1
///< = free running function. Trigger to accumulate a fixed value of 1
///< into the engine SMON_COUNT when an event is valid.    3'h2 = max function.
///< Trigger to update max value when an event is valid and larger than
///< the current value stored in the engine SMON_COUNT.    3'h3 = Timestamp
///< First Mode. Capture the timer value on the first occurance of an event.
///< Need to write CONTROL01 to reset.    3'h4 = Timestamp Mode. Capture
///< the timer value on every occurance of an event.
#define MEM_CAP_CFG_SMON_R0_SMON1_FUNCTION_BF_OFF ( 8)
#define MEM_CAP_CFG_SMON_R0_SMON1_FUNCTION_BF_WID ( 3)
#define MEM_CAP_CFG_SMON_R0_SMON1_FUNCTION_BF_MSK (0x00000700)
#define MEM_CAP_CFG_SMON_R0_SMON1_FUNCTION_BF_DEF (0x00000000)

///< SMON1 function_compare    1'h0 = compare mode disabled    1'h1 = compare
///< mode enabled
#define MEM_CAP_CFG_SMON_R0_SMON1_FUNCTION_CMP_BF_OFF (11)
#define MEM_CAP_CFG_SMON_R0_SMON1_FUNCTION_CMP_BF_WID ( 1)
#define MEM_CAP_CFG_SMON_R0_SMON1_FUNCTION_CMP_BF_MSK (0x00000800)
#define MEM_CAP_CFG_SMON_R0_SMON1_FUNCTION_CMP_BF_DEF (0x00000000)

///< SMON mode     4'h0 = Independant Mode. SMON0_COUNT & SMON1_COUNT operate
///< independantly as their function is configured.       4'h1 = Average
///< Latency Mode. SMON0 trigger starts timer & SMON1 trigger stops timer.
///< SMON0_COUNT accumulates occurances and SMON1_COUNT accumulates timer
///< values. For multiple stop for a single start, accumulate  start_to_stop1,
///< start_to_stop1stop2 ...    4'h2 = MinMax Latency Mode,. SMON0 trigger
///< starts timer & SMON1 trigger stops timer. SMON0_COUNT maintains the
///< minimum timer value and SMON1_COUNT maintains the maximum timer value.
///< 4'h3 = Average Mode.   SMON0 trigger increments SMON0_COUNT and the
///< value is accumulated in SMON1_COUNT. SMON1 events are disabled.
///< 4'h4 = Average Lantecy Mode 2. same as mode01, but only accumulate
///< the first start_to_stop1 if there are multiple stop for each start.
///< 4'h5 = Average Latency Mode 3. same as mode01, but accumualte the
///< incremental start_to_stop1, stop1_to_stop2... if there are multiple
///< stop for each start.
#define MEM_CAP_CFG_SMON_R0_SMON_MODE_BF_OFF (12)
#define MEM_CAP_CFG_SMON_R0_SMON_MODE_BF_WID ( 4)
#define MEM_CAP_CFG_SMON_R0_SMON_MODE_BF_MSK (0x0000F000)
#define MEM_CAP_CFG_SMON_R0_SMON_MODE_BF_DEF (0x00000000)

///< configure to stop on counter0 or counter1 overflow
#define MEM_CAP_CFG_SMON_R0_STOPCNTEROVFL_BF_OFF (16)
#define MEM_CAP_CFG_SMON_R0_STOPCNTEROVFL_BF_WID ( 1)
#define MEM_CAP_CFG_SMON_R0_STOPCNTEROVFL_BF_MSK (0x00010000)
#define MEM_CAP_CFG_SMON_R0_STOPCNTEROVFL_BF_DEF (0x00000000)

///< configure to interupt on counter0 or counter1 overflow
#define MEM_CAP_CFG_SMON_R0_INTCNTEROVFL_BF_OFF (17)
#define MEM_CAP_CFG_SMON_R0_INTCNTEROVFL_BF_WID ( 1)
#define MEM_CAP_CFG_SMON_R0_INTCNTEROVFL_BF_MSK (0x00020000)
#define MEM_CAP_CFG_SMON_R0_INTCNTEROVFL_BF_DEF (0x00000000)

///< status for counter0 overflow. A value of '1' signifies counter0 overflow.
#define MEM_CAP_CFG_SMON_R0_STATCNTER0OVFL_BF_OFF (18)
#define MEM_CAP_CFG_SMON_R0_STATCNTER0OVFL_BF_WID ( 1)
#define MEM_CAP_CFG_SMON_R0_STATCNTER0OVFL_BF_MSK (0x00040000)
#define MEM_CAP_CFG_SMON_R0_STATCNTER0OVFL_BF_DEF (0x00000000)

///< status for counter1 overflow. A value of '1' signifies counter1 overflow.
#define MEM_CAP_CFG_SMON_R0_STATCNTER1OVFL_BF_OFF (19)
#define MEM_CAP_CFG_SMON_R0_STATCNTER1OVFL_BF_WID ( 1)
#define MEM_CAP_CFG_SMON_R0_STATCNTER1OVFL_BF_MSK (0x00080000)
#define MEM_CAP_CFG_SMON_R0_STATCNTER1OVFL_BF_DEF (0x00000000)

///< configure to stop on timer overflow or timer>maxvalue
#define MEM_CAP_CFG_SMON_R0_STOPTIMEROVFL_BF_OFF (20)
#define MEM_CAP_CFG_SMON_R0_STOPTIMEROVFL_BF_WID ( 1)
#define MEM_CAP_CFG_SMON_R0_STOPTIMEROVFL_BF_MSK (0x00100000)
#define MEM_CAP_CFG_SMON_R0_STOPTIMEROVFL_BF_DEF (0x00000000)

///< configure to interrupt on timer overflow or timer>maxvalue
#define MEM_CAP_CFG_SMON_R0_INTTIMEROVFL_BF_OFF (21)
#define MEM_CAP_CFG_SMON_R0_INTTIMEROVFL_BF_WID ( 1)
#define MEM_CAP_CFG_SMON_R0_INTTIMEROVFL_BF_MSK (0x00200000)
#define MEM_CAP_CFG_SMON_R0_INTTIMEROVFL_BF_DEF (0x00000000)

///< status of timer overflow. A value of '1' signifies timer overflow,
///< or timer>maxvalue.
#define MEM_CAP_CFG_SMON_R0_STATTIMEROVFL_BF_OFF (22)
#define MEM_CAP_CFG_SMON_R0_STATTIMEROVFL_BF_WID ( 1)
#define MEM_CAP_CFG_SMON_R0_STATTIMEROVFL_BF_MSK (0x00400000)
#define MEM_CAP_CFG_SMON_R0_STATTIMEROVFL_BF_DEF (0x00000000)

///< reserved
#define MEM_CAP_CFG_SMON_R0_RSVD1_BF_OFF (23)
#define MEM_CAP_CFG_SMON_R0_RSVD1_BF_WID ( 1)
#define MEM_CAP_CFG_SMON_R0_RSVD1_BF_MSK (0x00800000)
#define MEM_CAP_CFG_SMON_R0_RSVD1_BF_DEF (0x00000000)

///< timer prescale    5'h00 = mode00, increment timer every      1 clock
///< 5'h01 = mode01, increment timer every      2 clocks    5'h02 = mode02,
///< increment timer every      4 clocks    5'h03 = mode03, increment timer
///< every      8 clocks    5'h04 = mode04, increment timer every     16
///< clocks    5'h05 = mode05, increment timer every     32 clocks    5'h06
///< = mode06, increment timer every     64 clocks    5'h07 = mode07, increment
///< timer every    128 clocks    5'h08 = mode08, increment timer every
///< 256 clocks    5'h09 = mode09, increment timer every    512 clocks
///< 5'h0a = mode10, increment timer every   1024 clocks    5'h0b = mode11,
///< increment timer every   2048 clocks    5'h0c = mode12, increment timer
///< every   4096 clocks    5'h0d = mode13, increment timer every   8192
///< clocks    5'h0e = mode14, increment timer every  16384 clocks    5'h0f
///< = mode15, increment timer every  32768 clocks    5'h10 = mode16, increment
///< timer every  65536 clocks    5'h11 = mode17, increment timer every
///< 131072 clocks    5'h12 = mode18, increment timer every 262144 clocks
///< 5'h13 = mode19, increment timer every 524288 clocks
#define MEM_CAP_CFG_SMON_R0_TIMER_PRESCALE_BF_OFF (24)
#define MEM_CAP_CFG_SMON_R0_TIMER_PRESCALE_BF_WID ( 5)
#define MEM_CAP_CFG_SMON_R0_TIMER_PRESCALE_BF_MSK (0x1F000000)
#define MEM_CAP_CFG_SMON_R0_TIMER_PRESCALE_BF_DEF (0x00000000)

///< reserved
#define MEM_CAP_CFG_SMON_R0_RSVD2_BF_OFF (29)
#define MEM_CAP_CFG_SMON_R0_RSVD2_BF_WID ( 1)
#define MEM_CAP_CFG_SMON_R0_RSVD2_BF_MSK (0x20000000)
#define MEM_CAP_CFG_SMON_R0_RSVD2_BF_DEF (0x00000000)

///< version
#define MEM_CAP_CFG_SMON_R0_VER_BF_OFF (30)
#define MEM_CAP_CFG_SMON_R0_VER_BF_WID ( 2)
#define MEM_CAP_CFG_SMON_R0_VER_BF_MSK (0xC0000000)
#define MEM_CAP_CFG_SMON_R0_VER_BF_DEF (0x40000000)


/** @brief MEM_CAP_CFG_MAP_MEM_MEM_CAP_CFG_MAP_SMON_CSR_SMON_R1 register description at address offset 0x384
  *
  * Register default value:        0x00000000
  * Register full path in IP: mem_cap_cfg_map_MEM/mem_cap_cfg_map/SMON_CSR/SMON_r1
  * AW_smon CONTROL1 register
  */

typedef union {
  struct {
    uint32_t MODE0 : 8;
    ///< select input signal for SMON0 engine. <br/> You should add descriptions
    ///< of input selections here by overriding the parameter.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t MODE1 : 8;
    ///< select input signal for SMON1 engine. <br/> You should add descriptions
    ///< of input selections here by overriding the parameter.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RSVD : 16;
    ///< reserved
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} mem_cap_cfg_smon_r1_reg_t;

#define MEM_CAP_CFG_SMON_R1_DEFAULT (0x00000000U)
#define MEM_CAP_CFG_SMON_R1_RD_MASK (0xffffffffU)
#define MEM_CAP_CFG_SMON_R1_WR_MASK (0xffffffffU)


///< select input signal for SMON0 engine. <br/> You should add descriptions
///< of input selections here by overriding the parameter.
#define MEM_CAP_CFG_SMON_R1_MODE0_BF_OFF ( 0)
#define MEM_CAP_CFG_SMON_R1_MODE0_BF_WID ( 8)
#define MEM_CAP_CFG_SMON_R1_MODE0_BF_MSK (0x000000FF)
#define MEM_CAP_CFG_SMON_R1_MODE0_BF_DEF (0x00000000)

///< select input signal for SMON1 engine. <br/> You should add descriptions
///< of input selections here by overriding the parameter.
#define MEM_CAP_CFG_SMON_R1_MODE1_BF_OFF ( 8)
#define MEM_CAP_CFG_SMON_R1_MODE1_BF_WID ( 8)
#define MEM_CAP_CFG_SMON_R1_MODE1_BF_MSK (0x0000FF00)
#define MEM_CAP_CFG_SMON_R1_MODE1_BF_DEF (0x00000000)

///< reserved
#define MEM_CAP_CFG_SMON_R1_RSVD_BF_OFF (16)
#define MEM_CAP_CFG_SMON_R1_RSVD_BF_WID (16)
#define MEM_CAP_CFG_SMON_R1_RSVD_BF_MSK (0xFFFF0000)
#define MEM_CAP_CFG_SMON_R1_RSVD_BF_DEF (0x00000000)


/** @brief MEM_CAP_CFG_MAP_MEM_MEM_CAP_CFG_MAP_SMON_CSR_SMON_R2 register description at address offset 0x388
  *
  * Register default value:        0x00000000
  * Register full path in IP: mem_cap_cfg_map_MEM/mem_cap_cfg_map/SMON_CSR/SMON_r2
  * AW_smon SMON0_COMPARE register
  */

typedef union {
  struct {
    uint32_t COMPARE0 : 32;
    ///< Comparison value.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} mem_cap_cfg_smon_r2_reg_t;

#define MEM_CAP_CFG_SMON_R2_DEFAULT (0x00000000U)
#define MEM_CAP_CFG_SMON_R2_RD_MASK (0xffffffffU)
#define MEM_CAP_CFG_SMON_R2_WR_MASK (0xffffffffU)


///< Comparison value.
#define MEM_CAP_CFG_SMON_R2_CMP0_BF_OFF ( 0)
#define MEM_CAP_CFG_SMON_R2_CMP0_BF_WID (32)
#define MEM_CAP_CFG_SMON_R2_CMP0_BF_MSK (0xFFFFFFFF)
#define MEM_CAP_CFG_SMON_R2_CMP0_BF_DEF (0x00000000)


/** @brief MEM_CAP_CFG_MAP_MEM_MEM_CAP_CFG_MAP_SMON_CSR_SMON_R3 register description at address offset 0x38c
  *
  * Register default value:        0x00000000
  * Register full path in IP: mem_cap_cfg_map_MEM/mem_cap_cfg_map/SMON_CSR/SMON_r3
  * AW_smon SMON1_COMPARE register
  */

typedef union {
  struct {
    uint32_t COMPARE1 : 32;
    ///< Comparison value.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} mem_cap_cfg_smon_r3_reg_t;

#define MEM_CAP_CFG_SMON_R3_DEFAULT (0x00000000U)
#define MEM_CAP_CFG_SMON_R3_RD_MASK (0xffffffffU)
#define MEM_CAP_CFG_SMON_R3_WR_MASK (0xffffffffU)


///< Comparison value.
#define MEM_CAP_CFG_SMON_R3_CMP1_BF_OFF ( 0)
#define MEM_CAP_CFG_SMON_R3_CMP1_BF_WID (32)
#define MEM_CAP_CFG_SMON_R3_CMP1_BF_MSK (0xFFFFFFFF)
#define MEM_CAP_CFG_SMON_R3_CMP1_BF_DEF (0x00000000)


/** @brief MEM_CAP_CFG_MAP_MEM_MEM_CAP_CFG_MAP_SMON_CSR_SMON_R4 register description at address offset 0x390
  *
  * Register default value:        0x00000000
  * Register full path in IP: mem_cap_cfg_map_MEM/mem_cap_cfg_map/SMON_CSR/SMON_r4
  * AW_smon SMON0_COUNT register
  */

typedef union {
  struct {
    uint32_t COUNTER0 : 32;
    ///< counter0
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} mem_cap_cfg_smon_r4_reg_t;

#define MEM_CAP_CFG_SMON_R4_DEFAULT (0x00000000U)
#define MEM_CAP_CFG_SMON_R4_RD_MASK (0xffffffffU)
#define MEM_CAP_CFG_SMON_R4_WR_MASK (0xffffffffU)


///< counter0
#define MEM_CAP_CFG_SMON_R4_CNTER0_BF_OFF ( 0)
#define MEM_CAP_CFG_SMON_R4_CNTER0_BF_WID (32)
#define MEM_CAP_CFG_SMON_R4_CNTER0_BF_MSK (0xFFFFFFFF)
#define MEM_CAP_CFG_SMON_R4_CNTER0_BF_DEF (0x00000000)


/** @brief MEM_CAP_CFG_MAP_MEM_MEM_CAP_CFG_MAP_SMON_CSR_SMON_R5 register description at address offset 0x394
  *
  * Register default value:        0x00000000
  * Register full path in IP: mem_cap_cfg_map_MEM/mem_cap_cfg_map/SMON_CSR/SMON_r5
  * AW_smon SMON1_COUNT register
  */

typedef union {
  struct {
    uint32_t COUNTER1 : 32;
    ///< counter1
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} mem_cap_cfg_smon_r5_reg_t;

#define MEM_CAP_CFG_SMON_R5_DEFAULT (0x00000000U)
#define MEM_CAP_CFG_SMON_R5_RD_MASK (0xffffffffU)
#define MEM_CAP_CFG_SMON_R5_WR_MASK (0xffffffffU)


///< counter1
#define MEM_CAP_CFG_SMON_R5_CNTER1_BF_OFF ( 0)
#define MEM_CAP_CFG_SMON_R5_CNTER1_BF_WID (32)
#define MEM_CAP_CFG_SMON_R5_CNTER1_BF_MSK (0xFFFFFFFF)
#define MEM_CAP_CFG_SMON_R5_CNTER1_BF_DEF (0x00000000)


/** @brief MEM_CAP_CFG_MAP_MEM_MEM_CAP_CFG_MAP_SMON_CSR_SMON_R6 register description at address offset 0x398
  *
  * Register default value:        0x00000000
  * Register full path in IP: mem_cap_cfg_map_MEM/mem_cap_cfg_map/SMON_CSR/SMON_r6
  * AW_smon TIMER register
  */

typedef union {
  struct {
    uint32_t TIMER : 32;
    ///< timer
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} mem_cap_cfg_smon_r6_reg_t;

#define MEM_CAP_CFG_SMON_R6_DEFAULT (0x00000000U)
#define MEM_CAP_CFG_SMON_R6_RD_MASK (0xffffffffU)
#define MEM_CAP_CFG_SMON_R6_WR_MASK (0xffffffffU)


///< timer
#define MEM_CAP_CFG_SMON_R6_TIMER_BF_OFF ( 0)
#define MEM_CAP_CFG_SMON_R6_TIMER_BF_WID (32)
#define MEM_CAP_CFG_SMON_R6_TIMER_BF_MSK (0xFFFFFFFF)
#define MEM_CAP_CFG_SMON_R6_TIMER_BF_DEF (0x00000000)


/** @brief MEM_CAP_CFG_MAP_MEM_MEM_CAP_CFG_MAP_SMON_CSR_SMON_R7 register description at address offset 0x39c
  *
  * Register default value:        0x00000000
  * Register full path in IP: mem_cap_cfg_map_MEM/mem_cap_cfg_map/SMON_CSR/SMON_r7
  * AW_smon TIMERMAXVAL register
  */

typedef union {
  struct {
    uint32_t MAXVALUE : 32;
    ///< maxvalue
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} mem_cap_cfg_smon_r7_reg_t;

#define MEM_CAP_CFG_SMON_R7_DEFAULT (0x00000000U)
#define MEM_CAP_CFG_SMON_R7_RD_MASK (0xffffffffU)
#define MEM_CAP_CFG_SMON_R7_WR_MASK (0xffffffffU)


///< maxvalue
#define MEM_CAP_CFG_SMON_R7_MAXVAL_BF_OFF ( 0)
#define MEM_CAP_CFG_SMON_R7_MAXVAL_BF_WID (32)
#define MEM_CAP_CFG_SMON_R7_MAXVAL_BF_MSK (0xFFFFFFFF)
#define MEM_CAP_CFG_SMON_R7_MAXVAL_BF_DEF (0x00000000)


/** @brief MEM_CAP_CFG_MAP_MEM_MEM_CAP_CFG_MAP_APB_BRIDGE_STATUS register description at address offset 0x3fc
  *
  * Register default value:        0x00010000
  * Register full path in IP: mem_cap_cfg_map_MEM/mem_cap_cfg_map/APB_BRIDGE_STATUS
  * APB Bridge Status Register
  */

typedef union {
  struct {
    uint32_t TIMEOUT_VALUE : 20;
    ///< Number of core clocks to wait before timing out an APB request
    ///< AccessType="RW" BitOffset="0" ResetValue="0x10000"
    uint32_t REVISION : 8;
    ///< Module Revision Number
    ///< AccessType="RO/V" BitOffset="20" ResetValue="0x0"
    uint32_t SW_LOCK_CTRL : 1;
    ///< Block software writes to timeout_value if set
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t UNSOL_ACK : 1;
    ///< An unsolicited acknowledge was received
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
    uint32_t ACK_ERROR : 1;
    ///< Acknowledgement had error bit set
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t TIMEOUT : 1;
    ///< An APB request has timed out
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} mem_cap_cfg_apb_brdg_stat_reg_t;

#define MEM_CAP_CFG_APB_BRDG_STAT_DEFAULT (0x00010000U)
#define MEM_CAP_CFG_APB_BRDG_STAT_RD_MASK (0xffffffffU)
#define MEM_CAP_CFG_APB_BRDG_STAT_WR_MASK (0xf00fffffU)


///< Number of core clocks to wait before timing out an APB request
#define MEM_CAP_CFG_APB_BRDG_STAT_TIMEOUT_VAL_BF_OFF ( 0)
#define MEM_CAP_CFG_APB_BRDG_STAT_TIMEOUT_VAL_BF_WID (20)
#define MEM_CAP_CFG_APB_BRDG_STAT_TIMEOUT_VAL_BF_MSK (0x000FFFFF)
#define MEM_CAP_CFG_APB_BRDG_STAT_TIMEOUT_VAL_BF_DEF (0x00010000)

///< Module Revision Number
#define MEM_CAP_CFG_APB_BRDG_STAT_REVISION_BF_OFF (20)
#define MEM_CAP_CFG_APB_BRDG_STAT_REVISION_BF_WID ( 8)
#define MEM_CAP_CFG_APB_BRDG_STAT_REVISION_BF_MSK (0x0FF00000)
#define MEM_CAP_CFG_APB_BRDG_STAT_REVISION_BF_DEF (0x00000000)

///< Block software writes to timeout_value if set
#define MEM_CAP_CFG_APB_BRDG_STAT_SW_LOCK_CTRL_BF_OFF (28)
#define MEM_CAP_CFG_APB_BRDG_STAT_SW_LOCK_CTRL_BF_WID ( 1)
#define MEM_CAP_CFG_APB_BRDG_STAT_SW_LOCK_CTRL_BF_MSK (0x10000000)
#define MEM_CAP_CFG_APB_BRDG_STAT_SW_LOCK_CTRL_BF_DEF (0x00000000)

///< An unsolicited acknowledge was received
#define MEM_CAP_CFG_APB_BRDG_STAT_UNSOL_ACK_BF_OFF (29)
#define MEM_CAP_CFG_APB_BRDG_STAT_UNSOL_ACK_BF_WID ( 1)
#define MEM_CAP_CFG_APB_BRDG_STAT_UNSOL_ACK_BF_MSK (0x20000000)
#define MEM_CAP_CFG_APB_BRDG_STAT_UNSOL_ACK_BF_DEF (0x00000000)

///< Acknowledgement had error bit set
#define MEM_CAP_CFG_APB_BRDG_STAT_ACK_ERR_BF_OFF (30)
#define MEM_CAP_CFG_APB_BRDG_STAT_ACK_ERR_BF_WID ( 1)
#define MEM_CAP_CFG_APB_BRDG_STAT_ACK_ERR_BF_MSK (0x40000000)
#define MEM_CAP_CFG_APB_BRDG_STAT_ACK_ERR_BF_DEF (0x00000000)

///< An APB request has timed out
#define MEM_CAP_CFG_APB_BRDG_STAT_TIMEOUT_BF_OFF (31)
#define MEM_CAP_CFG_APB_BRDG_STAT_TIMEOUT_BF_WID ( 1)
#define MEM_CAP_CFG_APB_BRDG_STAT_TIMEOUT_BF_MSK (0x80000000)
#define MEM_CAP_CFG_APB_BRDG_STAT_TIMEOUT_BF_DEF (0x00000000)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define MEM_CAP_CFG_BFNE_CFG0_REG(_BASE) ((mem_cap_cfg_bfne_cfg_reg_t*) MEM_CAP_CFG_BFNE_CFG0_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_CFG1_REG(_BASE) ((mem_cap_cfg_bfne_cfg_reg_t*) MEM_CAP_CFG_BFNE_CFG1_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_CFG2_REG(_BASE) ((mem_cap_cfg_bfne_cfg_reg_t*) MEM_CAP_CFG_BFNE_CFG2_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_CFG3_REG(_BASE) ((mem_cap_cfg_bfne_cfg_reg_t*) MEM_CAP_CFG_BFNE_CFG3_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_CFG4_REG(_BASE) ((mem_cap_cfg_bfne_cfg_reg_t*) MEM_CAP_CFG_BFNE_CFG4_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_CFG5_REG(_BASE) ((mem_cap_cfg_bfne_cfg_reg_t*) MEM_CAP_CFG_BFNE_CFG5_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_CFG6_REG(_BASE) ((mem_cap_cfg_bfne_cfg_reg_t*) MEM_CAP_CFG_BFNE_CFG6_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_CFG7_REG(_BASE) ((mem_cap_cfg_bfne_cfg_reg_t*) MEM_CAP_CFG_BFNE_CFG7_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_CFG8_REG(_BASE) ((mem_cap_cfg_bfne_cfg_reg_t*) MEM_CAP_CFG_BFNE_CFG8_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_CFG9_REG(_BASE) ((mem_cap_cfg_bfne_cfg_reg_t*) MEM_CAP_CFG_BFNE_CFG9_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_CFG10_REG(_BASE) ((mem_cap_cfg_bfne_cfg_reg_t*) MEM_CAP_CFG_BFNE_CFG10_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_CFG11_REG(_BASE) ((mem_cap_cfg_bfne_cfg_reg_t*) MEM_CAP_CFG_BFNE_CFG11_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_CFG12_REG(_BASE) ((mem_cap_cfg_bfne_cfg_reg_t*) MEM_CAP_CFG_BFNE_CFG12_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_CFG13_REG(_BASE) ((mem_cap_cfg_bfne_cfg_reg_t*) MEM_CAP_CFG_BFNE_CFG13_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_CFG14_REG(_BASE) ((mem_cap_cfg_bfne_cfg_reg_t*) MEM_CAP_CFG_BFNE_CFG14_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_CFG15_REG(_BASE) ((mem_cap_cfg_bfne_cfg_reg_t*) MEM_CAP_CFG_BFNE_CFG15_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_CFG16_REG(_BASE) ((mem_cap_cfg_bfne_cfg_reg_t*) MEM_CAP_CFG_BFNE_CFG16_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_INCR0_REG(_BASE) ((mem_cap_cfg_bfne_incr_reg_t*) MEM_CAP_CFG_BFNE_INCR0_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_INCR1_REG(_BASE) ((mem_cap_cfg_bfne_incr_reg_t*) MEM_CAP_CFG_BFNE_INCR1_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_INCR2_REG(_BASE) ((mem_cap_cfg_bfne_incr_reg_t*) MEM_CAP_CFG_BFNE_INCR2_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_INCR3_REG(_BASE) ((mem_cap_cfg_bfne_incr_reg_t*) MEM_CAP_CFG_BFNE_INCR3_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_INCR4_REG(_BASE) ((mem_cap_cfg_bfne_incr_reg_t*) MEM_CAP_CFG_BFNE_INCR4_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_INCR5_REG(_BASE) ((mem_cap_cfg_bfne_incr_reg_t*) MEM_CAP_CFG_BFNE_INCR5_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_INCR6_REG(_BASE) ((mem_cap_cfg_bfne_incr_reg_t*) MEM_CAP_CFG_BFNE_INCR6_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_INCR7_REG(_BASE) ((mem_cap_cfg_bfne_incr_reg_t*) MEM_CAP_CFG_BFNE_INCR7_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_INCR8_REG(_BASE) ((mem_cap_cfg_bfne_incr_reg_t*) MEM_CAP_CFG_BFNE_INCR8_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_INCR9_REG(_BASE) ((mem_cap_cfg_bfne_incr_reg_t*) MEM_CAP_CFG_BFNE_INCR9_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_INCR10_REG(_BASE) ((mem_cap_cfg_bfne_incr_reg_t*) MEM_CAP_CFG_BFNE_INCR10_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_INCR11_REG(_BASE) ((mem_cap_cfg_bfne_incr_reg_t*) MEM_CAP_CFG_BFNE_INCR11_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_INCR12_REG(_BASE) ((mem_cap_cfg_bfne_incr_reg_t*) MEM_CAP_CFG_BFNE_INCR12_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_INCR13_REG(_BASE) ((mem_cap_cfg_bfne_incr_reg_t*) MEM_CAP_CFG_BFNE_INCR13_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_INCR14_REG(_BASE) ((mem_cap_cfg_bfne_incr_reg_t*) MEM_CAP_CFG_BFNE_INCR14_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_INCR15_REG(_BASE) ((mem_cap_cfg_bfne_incr_reg_t*) MEM_CAP_CFG_BFNE_INCR15_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_INCR16_REG(_BASE) ((mem_cap_cfg_bfne_incr_reg_t*) MEM_CAP_CFG_BFNE_INCR16_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_START0_REG(_BASE) ((mem_cap_cfg_bfne_start_reg_t*) MEM_CAP_CFG_BFNE_START0_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_START1_REG(_BASE) ((mem_cap_cfg_bfne_start_reg_t*) MEM_CAP_CFG_BFNE_START1_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_START2_REG(_BASE) ((mem_cap_cfg_bfne_start_reg_t*) MEM_CAP_CFG_BFNE_START2_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_START3_REG(_BASE) ((mem_cap_cfg_bfne_start_reg_t*) MEM_CAP_CFG_BFNE_START3_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_START4_REG(_BASE) ((mem_cap_cfg_bfne_start_reg_t*) MEM_CAP_CFG_BFNE_START4_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_START5_REG(_BASE) ((mem_cap_cfg_bfne_start_reg_t*) MEM_CAP_CFG_BFNE_START5_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_START6_REG(_BASE) ((mem_cap_cfg_bfne_start_reg_t*) MEM_CAP_CFG_BFNE_START6_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_START7_REG(_BASE) ((mem_cap_cfg_bfne_start_reg_t*) MEM_CAP_CFG_BFNE_START7_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_START8_REG(_BASE) ((mem_cap_cfg_bfne_start_reg_t*) MEM_CAP_CFG_BFNE_START8_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_START9_REG(_BASE) ((mem_cap_cfg_bfne_start_reg_t*) MEM_CAP_CFG_BFNE_START9_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_START10_REG(_BASE) ((mem_cap_cfg_bfne_start_reg_t*) MEM_CAP_CFG_BFNE_START10_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_START11_REG(_BASE) ((mem_cap_cfg_bfne_start_reg_t*) MEM_CAP_CFG_BFNE_START11_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_START12_REG(_BASE) ((mem_cap_cfg_bfne_start_reg_t*) MEM_CAP_CFG_BFNE_START12_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_START13_REG(_BASE) ((mem_cap_cfg_bfne_start_reg_t*) MEM_CAP_CFG_BFNE_START13_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_START14_REG(_BASE) ((mem_cap_cfg_bfne_start_reg_t*) MEM_CAP_CFG_BFNE_START14_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_START15_REG(_BASE) ((mem_cap_cfg_bfne_start_reg_t*) MEM_CAP_CFG_BFNE_START15_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_START16_REG(_BASE) ((mem_cap_cfg_bfne_start_reg_t*) MEM_CAP_CFG_BFNE_START16_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_STAT0_REG(_BASE) ((mem_cap_cfg_bfne_stat_reg_t*) MEM_CAP_CFG_BFNE_STAT0_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_STAT1_REG(_BASE) ((mem_cap_cfg_bfne_stat_reg_t*) MEM_CAP_CFG_BFNE_STAT1_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_STAT2_REG(_BASE) ((mem_cap_cfg_bfne_stat_reg_t*) MEM_CAP_CFG_BFNE_STAT2_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_STAT3_REG(_BASE) ((mem_cap_cfg_bfne_stat_reg_t*) MEM_CAP_CFG_BFNE_STAT3_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_STAT4_REG(_BASE) ((mem_cap_cfg_bfne_stat_reg_t*) MEM_CAP_CFG_BFNE_STAT4_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_STAT5_REG(_BASE) ((mem_cap_cfg_bfne_stat_reg_t*) MEM_CAP_CFG_BFNE_STAT5_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_STAT6_REG(_BASE) ((mem_cap_cfg_bfne_stat_reg_t*) MEM_CAP_CFG_BFNE_STAT6_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_STAT7_REG(_BASE) ((mem_cap_cfg_bfne_stat_reg_t*) MEM_CAP_CFG_BFNE_STAT7_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_STAT8_REG(_BASE) ((mem_cap_cfg_bfne_stat_reg_t*) MEM_CAP_CFG_BFNE_STAT8_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_STAT9_REG(_BASE) ((mem_cap_cfg_bfne_stat_reg_t*) MEM_CAP_CFG_BFNE_STAT9_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_STAT10_REG(_BASE) ((mem_cap_cfg_bfne_stat_reg_t*) MEM_CAP_CFG_BFNE_STAT10_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_STAT11_REG(_BASE) ((mem_cap_cfg_bfne_stat_reg_t*) MEM_CAP_CFG_BFNE_STAT11_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_STAT12_REG(_BASE) ((mem_cap_cfg_bfne_stat_reg_t*) MEM_CAP_CFG_BFNE_STAT12_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_STAT13_REG(_BASE) ((mem_cap_cfg_bfne_stat_reg_t*) MEM_CAP_CFG_BFNE_STAT13_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_STAT14_REG(_BASE) ((mem_cap_cfg_bfne_stat_reg_t*) MEM_CAP_CFG_BFNE_STAT14_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_STAT15_REG(_BASE) ((mem_cap_cfg_bfne_stat_reg_t*) MEM_CAP_CFG_BFNE_STAT15_ADR(_BASE))
#define MEM_CAP_CFG_BFNE_STAT16_REG(_BASE) ((mem_cap_cfg_bfne_stat_reg_t*) MEM_CAP_CFG_BFNE_STAT16_ADR(_BASE))
#define MEM_CAP_CFG_TX_FIFO_START_DELAY_CFG0_REG(_BASE) ((mem_cap_cfg_tx_fifo_start_delay_cfg_reg_t*) MEM_CAP_CFG_TX_FIFO_START_DELAY_CFG0_ADR(_BASE))
#define MEM_CAP_CFG_TX_FIFO_START_DELAY_CFG1_REG(_BASE) ((mem_cap_cfg_tx_fifo_start_delay_cfg_reg_t*) MEM_CAP_CFG_TX_FIFO_START_DELAY_CFG1_ADR(_BASE))
#define MEM_CAP_CFG_RX_FIFO_START_DELAY_CFG0_REG(_BASE) ((mem_cap_cfg_rx_fifo_start_delay_cfg_reg_t*) MEM_CAP_CFG_RX_FIFO_START_DELAY_CFG0_ADR(_BASE))
#define MEM_CAP_CFG_RX_FIFO_START_DELAY_CFG1_REG(_BASE) ((mem_cap_cfg_rx_fifo_start_delay_cfg_reg_t*) MEM_CAP_CFG_RX_FIFO_START_DELAY_CFG1_ADR(_BASE))
#define MEM_CAP_CFG_RXFB_FIFO_START_DELAY_CFG0_REG(_BASE) ((mem_cap_cfg_rxfb_fifo_start_delay_cfg_reg_t*) MEM_CAP_CFG_RXFB_FIFO_START_DELAY_CFG0_ADR(_BASE))
#define MEM_CAP_CFG_RXFB_FIFO_START_DELAY_CFG1_REG(_BASE) ((mem_cap_cfg_rxfb_fifo_start_delay_cfg_reg_t*) MEM_CAP_CFG_RXFB_FIFO_START_DELAY_CFG1_ADR(_BASE))
#define MEM_CAP_CFG_BFN_CAP_TX_JESD_IN0_REG(_BASE) ((mem_cap_cfg_bfn_cap_tx_jesd_in_reg_t*) MEM_CAP_CFG_BFN_CAP_TX_JESD_IN0_ADR(_BASE))
#define MEM_CAP_CFG_BFN_CAP_TX_JESD_IN1_REG(_BASE) ((mem_cap_cfg_bfn_cap_tx_jesd_in_reg_t*) MEM_CAP_CFG_BFN_CAP_TX_JESD_IN1_ADR(_BASE))
#define MEM_CAP_CFG_BFN_CAP_TX_OUT0_REG(_BASE) ((mem_cap_cfg_bfn_cap_tx_out_reg_t*) MEM_CAP_CFG_BFN_CAP_TX_OUT0_ADR(_BASE))
#define MEM_CAP_CFG_BFN_CAP_TX_OUT1_REG(_BASE) ((mem_cap_cfg_bfn_cap_tx_out_reg_t*) MEM_CAP_CFG_BFN_CAP_TX_OUT1_ADR(_BASE))
#define MEM_CAP_CFG_BFN_CAP_RX_OUT0_REG(_BASE) ((mem_cap_cfg_bfn_cap_rx_out_reg_t*) MEM_CAP_CFG_BFN_CAP_RX_OUT0_ADR(_BASE))
#define MEM_CAP_CFG_BFN_CAP_RX_OUT1_REG(_BASE) ((mem_cap_cfg_bfn_cap_rx_out_reg_t*) MEM_CAP_CFG_BFN_CAP_RX_OUT1_ADR(_BASE))
#define MEM_CAP_CFG_BFN_CAP_RXFB_OUT0_REG(_BASE) ((mem_cap_cfg_bfn_cap_rxfb_out_reg_t*) MEM_CAP_CFG_BFN_CAP_RXFB_OUT0_ADR(_BASE))
#define MEM_CAP_CFG_BFN_CAP_RXFB_OUT1_REG(_BASE) ((mem_cap_cfg_bfn_cap_rxfb_out_reg_t*) MEM_CAP_CFG_BFN_CAP_RXFB_OUT1_ADR(_BASE))
#define MEM_CAP_CFG_ISYNC_CTRL_REG(_BASE) ((mem_cap_cfg_isync_ctrl_reg_t*) MEM_CAP_CFG_ISYNC_CTRL_ADR(_BASE))
#define MEM_CAP_CFG_ISYNC_LCNT_INC_REG(_BASE) ((mem_cap_cfg_isync_lcnt_inc_reg_t*) MEM_CAP_CFG_ISYNC_LCNT_INC_ADR(_BASE))
#define MEM_CAP_CFG_ISYNC_TEN_MS_CNT_REG(_BASE) ((mem_cap_cfg_isync_ten_ms_cnt_reg_t*) MEM_CAP_CFG_ISYNC_TEN_MS_CNT_ADR(_BASE))
#define MEM_CAP_CFG_ISYNC_INC_PRE_REG(_BASE) ((mem_cap_cfg_isync_inc_pre_reg_t*) MEM_CAP_CFG_ISYNC_INC_PRE_ADR(_BASE))
#define MEM_CAP_CFG_ISYNC_CNT_ADJ_REG(_BASE) ((mem_cap_cfg_isync_cnt_adj_reg_t*) MEM_CAP_CFG_ISYNC_CNT_ADJ_ADR(_BASE))
#define MEM_CAP_CFG_ISYNC_BFN_CNT_SYNC_REG(_BASE) ((mem_cap_cfg_isync_bfn_cnt_sync_reg_t*) MEM_CAP_CFG_ISYNC_BFN_CNT_SYNC_ADR(_BASE))
#define MEM_CAP_CFG_ISYNC_BFN_CNT_REG(_BASE) ((mem_cap_cfg_isync_bfn_cnt_reg_t*) MEM_CAP_CFG_ISYNC_BFN_CNT_ADR(_BASE))
#define MEM_CAP_CFG_TX_RATE_REG(_BASE) ((mem_cap_cfg_tx_rate_reg_t*) MEM_CAP_CFG_TX_RATE_ADR(_BASE))
#define MEM_CAP_CFG_RX_RATE_REG(_BASE) ((mem_cap_cfg_rx_rate_reg_t*) MEM_CAP_CFG_RX_RATE_ADR(_BASE))
#define MEM_CAP_CFG_PLL_CTL_REG(_BASE) ((mem_cap_cfg_pll_ctl_reg_t*) MEM_CAP_CFG_PLL_CTL_ADR(_BASE))
#define MEM_CAP_CFG_AC_NCO_CFG_REG(_BASE) ((mem_cap_cfg_ac_nco_cfg_reg_t*) MEM_CAP_CFG_AC_NCO_CFG_ADR(_BASE))
#define MEM_CAP_CFG_DP_INIT_REG(_BASE) ((mem_cap_cfg_dp_init_reg_t*) MEM_CAP_CFG_DP_INIT_ADR(_BASE))
#define MEM_CAP_CFG_SMON_R0_REG(_BASE) ((mem_cap_cfg_smon_r0_reg_t*) MEM_CAP_CFG_SMON_R0_ADR(_BASE))
#define MEM_CAP_CFG_SMON_R1_REG(_BASE) ((mem_cap_cfg_smon_r1_reg_t*) MEM_CAP_CFG_SMON_R1_ADR(_BASE))
#define MEM_CAP_CFG_SMON_R2_REG(_BASE) ((mem_cap_cfg_smon_r2_reg_t*) MEM_CAP_CFG_SMON_R2_ADR(_BASE))
#define MEM_CAP_CFG_SMON_R3_REG(_BASE) ((mem_cap_cfg_smon_r3_reg_t*) MEM_CAP_CFG_SMON_R3_ADR(_BASE))
#define MEM_CAP_CFG_SMON_R4_REG(_BASE) ((mem_cap_cfg_smon_r4_reg_t*) MEM_CAP_CFG_SMON_R4_ADR(_BASE))
#define MEM_CAP_CFG_SMON_R5_REG(_BASE) ((mem_cap_cfg_smon_r5_reg_t*) MEM_CAP_CFG_SMON_R5_ADR(_BASE))
#define MEM_CAP_CFG_SMON_R6_REG(_BASE) ((mem_cap_cfg_smon_r6_reg_t*) MEM_CAP_CFG_SMON_R6_ADR(_BASE))
#define MEM_CAP_CFG_SMON_R7_REG(_BASE) ((mem_cap_cfg_smon_r7_reg_t*) MEM_CAP_CFG_SMON_R7_ADR(_BASE))
#define MEM_CAP_CFG_APB_BRDG_STAT_REG(_BASE) ((mem_cap_cfg_apb_brdg_stat_reg_t*) MEM_CAP_CFG_APB_BRDG_STAT_ADR(_BASE))

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    mem_cap_cfg_bfne_cfg_reg_t BFNE_CFG[17]; /*< Address offset = 0x0 */
    const uint8_t        reservedArea0 [60];  /*< Address offset = 0x44 */
    mem_cap_cfg_bfne_incr_reg_t BFNE_INCR[17]; /*< Address offset = 0x80 */
    const uint8_t        reservedArea1 [60];  /*< Address offset = 0xc4 */
    mem_cap_cfg_bfne_start_reg_t BFNE_START[17]; /*< Address offset = 0x100 */
    const uint8_t        reservedArea2 [60];  /*< Address offset = 0x144 */
    mem_cap_cfg_bfne_stat_reg_t BFNE_STAT[17]; /*< Address offset = 0x180 */
    const uint8_t        reservedArea3 [60];  /*< Address offset = 0x1c4 */
    mem_cap_cfg_tx_fifo_start_delay_cfg_reg_t TX_FIFO_START_DELAY_CFG[2]; /*< Address offset = 0x200 */
    mem_cap_cfg_rx_fifo_start_delay_cfg_reg_t RX_FIFO_START_DELAY_CFG[2]; /*< Address offset = 0x208 */
    mem_cap_cfg_rxfb_fifo_start_delay_cfg_reg_t RXFB_FIFO_START_DELAY_CFG[2]; /*< Address offset = 0x210 */
    const uint8_t        reservedArea4 [8];   /*< Address offset = 0x218 */
    mem_cap_cfg_bfn_cap_tx_jesd_in_reg_t BFN_CAP_TX_JESD_IN[2]; /*< Address offset = 0x220 */
    mem_cap_cfg_bfn_cap_tx_out_reg_t BFN_CAP_TX_OUT[2]; /*< Address offset = 0x228 */
    mem_cap_cfg_bfn_cap_rx_out_reg_t BFN_CAP_RX_OUT[2]; /*< Address offset = 0x230 */
    mem_cap_cfg_bfn_cap_rxfb_out_reg_t BFN_CAP_RXFB_OUT[2]; /*< Address offset = 0x238 */
    const uint8_t        reservedArea5 [192]; /*< Address offset = 0x240 */
    mem_cap_cfg_isync_ctrl_reg_t ISYNC_CTRL; /*< Address offset = 0x300 */
    mem_cap_cfg_isync_lcnt_inc_reg_t ISYNC_LCNT_INC; /*< Address offset = 0x304 */
    mem_cap_cfg_isync_ten_ms_cnt_reg_t ISYNC_TEN_MS_CNT; /*< Address offset = 0x308 */
    mem_cap_cfg_isync_inc_pre_reg_t ISYNC_INC_PRE; /*< Address offset = 0x30c */
    mem_cap_cfg_isync_cnt_adj_reg_t ISYNC_CNT_ADJ; /*< Address offset = 0x310 */
    mem_cap_cfg_isync_bfn_cnt_sync_reg_t ISYNC_BFN_CNT_SYNC; /*< Address offset = 0x314 */
    mem_cap_cfg_isync_bfn_cnt_reg_t ISYNC_BFN_CNT; /*< Address offset = 0x318 */
    const uint8_t        reservedArea6 [36];  /*< Address offset = 0x31c */
    mem_cap_cfg_tx_rate_reg_t TX_RATE; /*< Address offset = 0x340 */
    const uint8_t        reservedArea7 [12];  /*< Address offset = 0x344 */
    mem_cap_cfg_rx_rate_reg_t RX_RATE; /*< Address offset = 0x350 */
    const uint8_t        reservedArea8 [12];  /*< Address offset = 0x354 */
    mem_cap_cfg_pll_ctl_reg_t PLL_CTL; /*< Address offset = 0x360 */
    const uint8_t        reservedArea9 [4];   /*< Address offset = 0x364 */
    mem_cap_cfg_ac_nco_cfg_reg_t AC_NCO_CFG; /*< Address offset = 0x368 */
    mem_cap_cfg_dp_init_reg_t DP_INIT; /*< Address offset = 0x36c */
    const uint8_t        reservedArea10 [16]; /*< Address offset = 0x370 */
    mem_cap_cfg_smon_r0_reg_t SMON_R0; /*< Address offset = 0x380 */
    mem_cap_cfg_smon_r1_reg_t SMON_R1; /*< Address offset = 0x384 */
    mem_cap_cfg_smon_r2_reg_t SMON_R2; /*< Address offset = 0x388 */
    mem_cap_cfg_smon_r3_reg_t SMON_R3; /*< Address offset = 0x38c */
    mem_cap_cfg_smon_r4_reg_t SMON_R4; /*< Address offset = 0x390 */
    mem_cap_cfg_smon_r5_reg_t SMON_R5; /*< Address offset = 0x394 */
    mem_cap_cfg_smon_r6_reg_t SMON_R6; /*< Address offset = 0x398 */
    mem_cap_cfg_smon_r7_reg_t SMON_R7; /*< Address offset = 0x39c */
    const uint8_t        reservedArea11 [92]; /*< Address offset = 0x3a0 */
    mem_cap_cfg_apb_brdg_stat_reg_t APB_BRDG_STAT; /*< Address offset = 0x3fc */
} mem_cap_cfg_t;     // size: 0x0080

// AddressSpace struct pointer
//
#define MEM_CAP0_CFG     ((mem_cap_cfg_t*) MEM_CAP0_CFG_BASE)
#define MEM_CAP1_CFG     ((mem_cap_cfg_t*) MEM_CAP1_CFG_BASE)

// ******************************************* /Address Space

#endif      // _MEM_CAP_CFG_H_

