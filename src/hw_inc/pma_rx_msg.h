#ifndef _PMA_RX_MSG_H_
#define _PMA_RX_MSG_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define DLNK_JESD0_PHY_PMA0_RX_GLOBAL_BASE  ( 0x06027000 )
#define DLNK_JESD0_PHY_PMA0_RX_Q0_BASE      ( 0x0602b000 )
#define DLNK_JESD0_PHY_PMA0_RX_Q1_BASE      ( 0x0602f000 )
#define DLNK_JESD0_PHY_PMA0_RX_Q2_BASE      ( 0x06033000 )
#define DLNK_JESD0_PHY_PMA0_RX_Q3_BASE      ( 0x06037000 )
#define DLNK_JESD1_PHY_PMA0_RX_GLOBAL_BASE  ( 0x06827000 )
#define DLNK_JESD1_PHY_PMA0_RX_Q0_BASE      ( 0x0682b000 )
#define DLNK_JESD1_PHY_PMA0_RX_Q1_BASE      ( 0x0682f000 )
#define DLNK_JESD1_PHY_PMA0_RX_Q2_BASE      ( 0x06833000 )
#define DLNK_JESD1_PHY_PMA0_RX_Q3_BASE      ( 0x06837000 )
#define DLNK_JESD2_PHY_PMA0_RX_GLOBAL_BASE  ( 0x07027000 )
#define DLNK_JESD2_PHY_PMA0_RX_Q0_BASE      ( 0x0702b000 )
#define DLNK_JESD2_PHY_PMA0_RX_Q1_BASE      ( 0x0702f000 )
#define DLNK_JESD2_PHY_PMA0_RX_Q2_BASE      ( 0x07033000 )
#define DLNK_JESD2_PHY_PMA0_RX_Q3_BASE      ( 0x07037000 )
#define DLNK_JESD3_PHY_PMA0_RX_GLOBAL_BASE  ( 0x07827000 )
#define DLNK_JESD3_PHY_PMA0_RX_Q0_BASE      ( 0x0782b000 )
#define DLNK_JESD3_PHY_PMA0_RX_Q1_BASE      ( 0x0782f000 )
#define DLNK_JESD3_PHY_PMA0_RX_Q2_BASE      ( 0x07833000 )
#define DLNK_JESD3_PHY_PMA0_RX_Q3_BASE      ( 0x07837000 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define PMA_RX_MGS_CAR_CFG_OFFSET ( 0x00000000U )
#define PMA_RX_MGS_CAR_CFG_RO_OFFSET ( 0x00000004U )
#define PMA_RX_MGS_SCRATCH_PAD_0_OFFSET ( 0x00000008U )
#define PMA_RX_MGS_SCRATCH_PAD_1_OFFSET ( 0x0000000cU )
#define PMA_RX_MGS_SCRATCH_PAD_2_OFFSET ( 0x00000010U )
#define PMA_RX_MGS_SCRATCH_PAD_3_OFFSET ( 0x00000014U )
#define PMA_RX_MGS_SCRATCH_PAD_4_OFFSET ( 0x00000018U )
#define PMA_RX_MGS_SCRATCH_PAD_5_OFFSET ( 0x0000001cU )
#define PMA_RX_MGS_SCRATCH_PAD_6_OFFSET ( 0x00000020U )
#define PMA_RX_MGS_SCRATCH_PAD_7_OFFSET ( 0x00000024U )
#define PMA_RX_MGS_CTRL_0_OFFSET ( 0x00000028U )
#define PMA_RX_MGS_CTRL_1_OFFSET ( 0x0000002cU )
#define PMA_RX_MGS_CTRL_RO_OFFSET ( 0x00000030U )
#define PMA_RX_MSG_FSM_CFG_OFFSET ( 0x00000034U )
#define PMA_RX_MGS_MEM_CTRL_OFFSET ( 0x00000038U )
#define PMA_RX_MGS_MEM_REQ_CTRL_OFFSET ( 0x0000003cU )
#define PMA_RX_MGS_PLL_SEL_CFG_OFFSET ( 0x00000040U )
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_0_OFFSET ( 0x00000044U )
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_1_OFFSET ( 0x00000048U )
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_2_OFFSET ( 0x0000004cU )
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_3_OFFSET ( 0x00000050U )
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_4_OFFSET ( 0x00000054U )
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_5_OFFSET ( 0x00000058U )
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_6_OFFSET ( 0x0000005cU )
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_OFFSET ( 0x00000060U )
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_8_OFFSET ( 0x00000064U )
#define PMA_RX_MGS_PWR_MNG_CTRL_OFFSET ( 0x00000068U )
#define PMA_RX_MGS_PWR_MNG_STAT_OFFSET ( 0x0000006cU )
#define PMA_RX_MGS_CALDUTY_CTRL_0_OFFSET ( 0x00000070U )
#define PMA_RX_MGS_CALDUTY_CTRL_1_OFFSET ( 0x00000074U )
#define PMA_RX_MGS_CALFSM_CTRL_OFFSET ( 0x00000078U )
#define PMA_RX_MGS_STAT_0_OFFSET ( 0x0000007cU )
#define PMA_RX_MGS_STAT_1_OFFSET ( 0x00000080U )
#define PMA_RX_MGS_STAT_2_OFFSET ( 0x00000084U )
#define PMA_RX_MSG_PCS_PCIE_CTRL_OFFSET ( 0x00000088U )
#define PMA_RX_MSG_PCS_PCIE_CTRL_RO_OFFSET ( 0x0000008cU )
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_0_OFFSET ( 0x00000090U )
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_1_OFFSET ( 0x00000094U )
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_2_OFFSET ( 0x00000098U )
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_3_OFFSET ( 0x0000009cU )
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_4_OFFSET ( 0x000000a0U )
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_5_OFFSET ( 0x000000a4U )
#define PMA_RX_MSG_FSM_CALMASTER_PSTATE_CFG_OFFSET ( 0x000000a8U )
#define PMA_RX_MSG_FSM_CALMASTER_QUAD_CFG_OFFSET ( 0x000000acU )
#define PMA_RX_MGS_CALAVG_CTRL_0_OFFSET ( 0x000000b0U )
#define PMA_RX_MGS_CALAVG_CTRL_1_OFFSET ( 0x000000b4U )
#define PMA_RX_MGS_CALAVG_CTRL_2_OFFSET ( 0x000000b8U )
#define PMA_RX_MGS_CAL_STAT_OFFSET ( 0x000000bcU )
#define PMA_RX_MGS_CALAVG_STAT_OFFSET ( 0x000000c0U )
#define PMA_RX_MSG_RPU_CTRL_OFFSET ( 0x000000c4U )
#define PMA_RX_MSG_RPU_LUT_CFG_0_OFFSET ( 0x000000c8U )
#define PMA_RX_MSG_RPU_LUT_CFG_1_OFFSET ( 0x000000ccU )
#define PMA_RX_MSG_RPU_LUT_CFG_2_OFFSET ( 0x000000d0U )
#define PMA_RX_MSG_RPU_LUT_CFG_3_OFFSET ( 0x000000d4U )
#define PMA_RX_MSG_RPU_LUT_CFG_4_OFFSET ( 0x000000d8U )
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_0_OFFSET ( 0x000000dcU )
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_1_OFFSET ( 0x000000e0U )
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_2_OFFSET ( 0x000000e4U )
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_3_OFFSET ( 0x000000e8U )
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_4_OFFSET ( 0x000000ecU )
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_5_OFFSET ( 0x000000f0U )
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_6_OFFSET ( 0x000000f4U )
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_OFFSET ( 0x000000f8U )
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_OFFSET ( 0x000000fcU )
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_OFFSET ( 0x00000100U )
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_OFFSET ( 0x00000104U )
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_4_OFFSET ( 0x00000108U )
#define PMA_RX_MGS_RPU_EVENT_CFG_0_OFFSET ( 0x0000010cU )
#define PMA_RX_MGS_RPU_EVENT_CFG_1_OFFSET ( 0x00000110U )
#define PMA_RX_MGS_RPU_EVENT_CFG_2_OFFSET ( 0x00000114U )
#define PMA_RX_MGS_RPU_EVENT_CFG_3_OFFSET ( 0x00000118U )
#define PMA_RX_MGS_RPU_EVENT_CFG_4_OFFSET ( 0x0000011cU )
#define PMA_RX_MGS_RPU_EVENT_CFG_5_OFFSET ( 0x00000120U )
#define PMA_RX_MGS_RPU_EVENT_CFG_6_OFFSET ( 0x00000124U )
#define PMA_RX_MGS_RPU_EVENT_CFG_7_OFFSET ( 0x00000128U )
#define PMA_RX_MGS_RPU_EVENT_CFG_8_OFFSET ( 0x0000012cU )
#define PMA_RX_MGS_RPU_EVENT_CFG_9_OFFSET ( 0x00000130U )
#define PMA_RX_MGS_RPU_EVENT_CFG_10_OFFSET ( 0x00000134U )
#define PMA_RX_MGS_RPU_EVENT_CFG_11_OFFSET ( 0x00000138U )
#define PMA_RX_MGS_RPU_EVENT_CFG_12_OFFSET ( 0x0000013cU )
#define PMA_RX_MGS_RPU_EVENT_CFG_13_OFFSET ( 0x00000140U )
#define PMA_RX_MGS_RPU_EVENT_CFG_14_OFFSET ( 0x00000144U )
#define PMA_RX_MGS_RPU_EVENT_CFG_15_OFFSET ( 0x00000148U )
#define PMA_RX_MGS_RPU_EVENT_CFG_16_OFFSET ( 0x0000014cU )
#define PMA_RX_MGS_RPU_EVENT_CFG_17_OFFSET ( 0x00000150U )
#define PMA_RX_MGS_RPU_EVENT_CFG_18_OFFSET ( 0x00000154U )
#define PMA_RX_MGS_RPU_EVENT_CFG_19_OFFSET ( 0x00000158U )
#define PMA_RX_MSG_SIGDET_CTRL_0_OFFSET ( 0x0000015cU )
#define PMA_RX_MSG_SIGDET_CTRL_1_OFFSET ( 0x00000160U )
#define PMA_RX_MSG_SIGDET_CTRL_2_OFFSET ( 0x00000164U )
#define PMA_RX_MSG_SIGDET_CTRL_3_OFFSET ( 0x00000168U )
#define PMA_RX_MSG_SIGDET_CTRL_4_OFFSET ( 0x0000016cU )
#define PMA_RX_MSG_SIGDET_CTRL_5_OFFSET ( 0x00000170U )
#define PMA_RX_MSG_SIGDET_CTRL_6_OFFSET ( 0x00000174U )
#define PMA_RX_MSG_SIGDET_CTRL_7_OFFSET ( 0x00000178U )
#define PMA_RX_MSG_SIGDET_CTRL_RO_OFFSET ( 0x0000017cU )
#define PMA_RX_MSG_SIGDET_STAT_OFFSET ( 0x00000180U )
#define PMA_RX_MGS_LFPS_DET_CTRL_0_OFFSET ( 0x00000184U )
#define PMA_RX_MGS_LFPS_DET_CTRL_1_OFFSET ( 0x00000188U )
#define PMA_RX_MGS_SQLCH_CTRL_0_OFFSET ( 0x0000018cU )
#define PMA_RX_MGS_SQLCH_CTRL_1_OFFSET ( 0x00000190U )
#define PMA_RX_MGS_SQLCH_CTRL_2_OFFSET ( 0x00000194U )
#define PMA_RX_MGS_SQLCH_CTRL_3_OFFSET ( 0x00000198U )
#define PMA_RX_MGS_SQLCH_CTRL_4_OFFSET ( 0x0000019cU )
#define PMA_RX_MGS_SQLCH_STAT_OFFSET ( 0x000001a0U )
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_0_OFFSET ( 0x000001a4U )
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_1_OFFSET ( 0x000001a8U )
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_2_OFFSET ( 0x000001acU )
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_3_OFFSET ( 0x000001b0U )
#define PMA_RX_MGS_SQLCH_CALFSM_CTRL_OFFSET ( 0x000001b4U )
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_0_OFFSET ( 0x000001b8U )
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_1_OFFSET ( 0x000001bcU )
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_2_OFFSET ( 0x000001c0U )
#define PMA_RX_MGS_CTRL_OVRD_OFFSET ( 0x000001c4U )
#define PMA_RX_MGS_CTRL_OVRD_RO_OFFSET ( 0x000001c8U )
#define PMA_RX_MGS_CTRL_OUT_OFFSET ( 0x000001ccU )
#define PMA_RX_MGS_MARGIN_CTRL_0_OFFSET ( 0x000001d0U )
#define PMA_RX_MGS_MARGIN_CTRL_1_OFFSET ( 0x000001d4U )
#define PMA_RX_MGS_MARGIN_CTRL_2_OFFSET ( 0x000001d8U )
#define PMA_RX_MGS_MARGIN_STAT_OFFSET ( 0x000001dcU )
#define PMA_RX_MGS_INPUT_PIN_OVRD_OFFSET ( 0x000001e0U )
#define PMA_RX_MGS_INPUT_PIN_PREOVRD_OFFSET ( 0x000001e4U )
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_OFFSET ( 0x000001e8U )
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_1_OFFSET ( 0x000001ecU )
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_0_OFFSET ( 0x000001f0U )
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_1_OFFSET ( 0x000001f4U )
#define PMA_RX_MGS_BRKPT_CTRL_OFFSET ( 0x000001f8U )
#define PMA_RX_MGS_BRKPT_STAT_OFFSET ( 0x000001fcU )
#define PMA_RX_MGS_BRKPT_CLR_OFFSET ( 0x00000200U )
#define PMA_RX_MSG_DCO_STAT_OFFSET ( 0x00000204U )
#define PMA_RX_MSG_DCO_CTRL_ANA_OFFSET ( 0x00000208U )
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_OFFSET ( 0x0000020cU )
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_OFFSET ( 0x00000210U )
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_OFFSET ( 0x00000214U )
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_OFFSET ( 0x00000218U )
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_OFFSET ( 0x0000021cU )
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD0_OFFSET ( 0x00000220U )
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD1_OFFSET ( 0x00000224U )
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD2_OFFSET ( 0x00000228U )
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD3_OFFSET ( 0x0000022cU )
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD4_OFFSET ( 0x00000230U )
#define PMA_RX_MGS_CDR_PKSEN_STAT_OFFSET ( 0x00000234U )
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD0_OFFSET ( 0x00000238U )
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD1_OFFSET ( 0x0000023cU )
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD2_OFFSET ( 0x00000240U )
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD3_OFFSET ( 0x00000244U )
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD4_OFFSET ( 0x00000248U )
#define PMA_RX_MSG_DCO_BANGBANG_PD_CTRL_0_OFFSET ( 0x0000024cU )
#define PMA_RX_MSG_DCO_BANGBANG_PD_CTRL_1_OFFSET ( 0x00000250U )
#define PMA_RX_MSG_DCO_BAUD_PD_CTRL_0_OFFSET ( 0x00000254U )
#define PMA_RX_MSG_DCO_BAUD_PD_CTRL_1_OFFSET ( 0x00000258U )
#define PMA_RX_MSG_DCO_BAUD_PD_CTRL_2_OFFSET ( 0x0000025cU )
#define PMA_RX_MSG_DCO_LOCK_TFER_CTRL_OFFSET ( 0x00000260U )
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_OFFSET ( 0x00000264U )
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_STAT_OFFSET ( 0x00000268U )
#define PMA_RX_MSG_DCO_ETH_PMD_STAT_0_OFFSET ( 0x0000026cU )
#define PMA_RX_MSG_DCO_ETH_PMD_STAT_1_OFFSET ( 0x00000270U )
#define PMA_RX_MSG_DCO_ETH_PMD_STAT_2_OFFSET ( 0x00000274U )
#define PMA_RX_MSG_DCO_ETH_PMD_STAT_3_OFFSET ( 0x00000278U )
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_OFFSET ( 0x0000027cU )
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_OFFSET ( 0x00000280U )
#define PMA_RX_MSG_DCO_OVRD_CTRL_2_OFFSET ( 0x00000284U )
#define PMA_RX_MSG_DCO_OVRD_CTRL_3_OFFSET ( 0x00000288U )
#define PMA_RX_MSG_DCO_OVRD_CTRL_4_OFFSET ( 0x0000028cU )
#define PMA_RX_MSG_PHDT_OVRD_CTRL_0_OFFSET ( 0x00000290U )
#define PMA_RX_MSG_DCO_OVRD_STAT_0_OFFSET ( 0x00000294U )
#define PMA_RX_MSG_DCO_OVRD_STAT_1_OFFSET ( 0x00000298U )
#define PMA_RX_MSG_DCO_OVRD_STAT_2_OFFSET ( 0x0000029cU )
#define PMA_RX_MSG_DCO_OVRD_STAT_3_OFFSET ( 0x000002a0U )
#define PMA_RX_MSG_DCO_OVRD_STAT_4_OFFSET ( 0x000002a4U )
#define PMA_RX_MSG_PHDT_OVRD_STAT_0_OFFSET ( 0x000002a8U )
#define PMA_RX_MGS_ADC_SPARE_OFFSET ( 0x000002acU )
#define PMA_RX_MGS_CKM_CTRL_0_OFFSET ( 0x000002b0U )
#define PMA_RX_MGS_CKM_CTRL_1_OFFSET ( 0x000002b4U )
#define PMA_RX_MGS_CKM_CTRL_2_OFFSET ( 0x000002b8U )
#define PMA_RX_MGS_CKM_STAT_OFFSET ( 0x000002bcU )
#define PMA_RX_MSG_BIST_CFG_0_OFFSET ( 0x000002c0U )
#define PMA_RX_MSG_BIST_CFG_1_OFFSET ( 0x000002c4U )
#define PMA_RX_MSG_BIST_SEED_OFFSET ( 0x000002c8U )
#define PMA_RX_MSG_BIST_UDP_VF00_OFFSET ( 0x000002ccU )
#define PMA_RX_MSG_BIST_UDP_VF01_OFFSET ( 0x000002d0U )
#define PMA_RX_MSG_BIST_UDP_VF02_OFFSET ( 0x000002d4U )
#define PMA_RX_MSG_BIST_UDP_VF03_OFFSET ( 0x000002d8U )
#define PMA_RX_MSG_BIST_UDP_VF04_OFFSET ( 0x000002dcU )
#define PMA_RX_MSG_BIST_UDP_VF05_OFFSET ( 0x000002e0U )
#define PMA_RX_MSG_BIST_UDP_VF06_OFFSET ( 0x000002e4U )
#define PMA_RX_MSG_BIST_UDP_VF07_OFFSET ( 0x000002e8U )
#define PMA_RX_MSG_BIST_UDP_VF08_OFFSET ( 0x000002ecU )
#define PMA_RX_MSG_BIST_UDP_VF09_OFFSET ( 0x000002f0U )
#define PMA_RX_MSG_BIST_ERRCNT_STAT_0_OFFSET ( 0x000002f4U )
#define PMA_RX_MSG_BIST_ERRCNT_STAT_1_OFFSET ( 0x000002f8U )
#define PMA_RX_MSG_BIST_ERRCNT_STAT_2_OFFSET ( 0x000002fcU )
#define PMA_RX_MSG_BIST_ERRCNT_STAT_3_OFFSET ( 0x00000300U )
#define PMA_RX_MSG_BIST_STAT_DATACHKCNT_OFFSET ( 0x00000304U )
#define PMA_RX_MSG_BIST_DATA_STAT_0_OFFSET ( 0x00000308U )
#define PMA_RX_MSG_BIST_DATA_STAT_1_OFFSET ( 0x0000030cU )
#define PMA_RX_MSG_BIST_DATA_STAT_2_OFFSET ( 0x00000310U )
#define PMA_RX_MSG_BIST_DATA_STAT_3_OFFSET ( 0x00000314U )
#define PMA_RX_MSG_BIST_DATA_STAT_4_OFFSET ( 0x00000318U )
#define PMA_RX_MSG_BIST_DATA_STAT_5_OFFSET ( 0x0000031cU )
#define PMA_RX_MSG_BIST_DATA_STAT_6_OFFSET ( 0x00000320U )
#define PMA_RX_MSG_BIST_DATA_STAT_7_OFFSET ( 0x00000324U )
#define PMA_RX_MSG_BIST_DATA_STAT_8_OFFSET ( 0x00000328U )
#define PMA_RX_MSG_BIST_DATA_STAT_9_OFFSET ( 0x0000032cU )
#define PMA_RX_MSG_BIST_DATA_STAT_10_OFFSET ( 0x00000330U )
#define PMA_RX_MSG_BIST_DATA_STAT_11_OFFSET ( 0x00000334U )
#define PMA_RX_MSG_BIST_DATA_STAT_12_OFFSET ( 0x00000338U )
#define PMA_RX_MSG_BIST_DATA_STAT_13_OFFSET ( 0x0000033cU )
#define PMA_RX_MSG_BIST_DATA_STAT_14_OFFSET ( 0x00000340U )
#define PMA_RX_MSG_BIST_DATA_STAT_15_OFFSET ( 0x00000344U )
#define PMA_RX_MGS_AFFE_COEFF_SET_STAT_0_OFFSET ( 0x00000348U )
#define PMA_RX_MGS_AFFE_COEFF_SET_STAT_1_OFFSET ( 0x0000034cU )
#define PMA_RX_MGS_AFFE_COEFF_SET_OVRD_0_OFFSET ( 0x00000350U )
#define PMA_RX_MGS_AFFE_COEFF_SET_OVRD_1_OFFSET ( 0x00000354U )
#define PMA_RX_MGS_OPS_IF_STAT_0_OFFSET ( 0x00000358U )
#define PMA_RX_MGS_OPS_IF_STAT_1_OFFSET ( 0x0000035cU )
#define PMA_RX_MGS_OPS_IF_STAT_2_OFFSET ( 0x00000360U )
#define PMA_RX_MGS_OPS_IF_OVRD_0_OFFSET ( 0x00000364U )
#define PMA_RX_MGS_OPS_IF_OVRD_1_OFFSET ( 0x00000368U )
#define PMA_RX_MGS_OPS_IF_OVRD_2_OFFSET ( 0x0000036cU )
#define PMA_RX_MGS_SCRATCHY_0_OFFSET ( 0x00000370U )
#define PMA_RX_MGS_SCRATCHY_1_OFFSET ( 0x00000374U )
#define PMA_RX_MGS_CDR_GENERAL_CTRL_OFFSET ( 0x00000400U )
#define PMA_RX_MGS_CDR_DIV0_MUXD0_OFFSET ( 0x00000404U )
#define PMA_RX_MGS_CDR_DIV0_MUXD1_OFFSET ( 0x00000408U )
#define PMA_RX_MGS_CDR_DIV0_MUXD2_OFFSET ( 0x0000040cU )
#define PMA_RX_MGS_CDR_DIV0_MUXD3_OFFSET ( 0x00000410U )
#define PMA_RX_MGS_CDR_DIV0_MUXD4_OFFSET ( 0x00000414U )
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD0_OFFSET ( 0x00000418U )
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD1_OFFSET ( 0x0000041cU )
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD2_OFFSET ( 0x00000420U )
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD3_OFFSET ( 0x00000424U )
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD4_OFFSET ( 0x00000428U )
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD0_OFFSET ( 0x0000042cU )
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD1_OFFSET ( 0x00000430U )
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD2_OFFSET ( 0x00000434U )
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD3_OFFSET ( 0x00000438U )
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD4_OFFSET ( 0x0000043cU )
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_OFFSET ( 0x00000440U )
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_OFFSET ( 0x00000444U )
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_OFFSET ( 0x00000448U )
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_OFFSET ( 0x0000044cU )
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_OFFSET ( 0x00000450U )
#define PMA_RX_MGS_CDR_LOCKFSM_STAT_OFFSET ( 0x00000454U )
#define PMA_RX_MGS_CDR_TAP_OVRD_OFFSET ( 0x00000458U )
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD0_OFFSET ( 0x0000045cU )
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD1_OFFSET ( 0x00000460U )
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD2_OFFSET ( 0x00000464U )
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD3_OFFSET ( 0x00000468U )
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD4_OFFSET ( 0x0000046cU )
#define PMA_RX_MGS_CDR_DIV1_OFFSET ( 0x00000470U )
#define PMA_RX_MGS_CDR_DIV1_MUXD0_OFFSET ( 0x00000474U )
#define PMA_RX_MGS_CDR_DIV1_MUXD1_OFFSET ( 0x00000478U )
#define PMA_RX_MGS_CDR_DIV1_MUXD2_OFFSET ( 0x0000047cU )
#define PMA_RX_MGS_CDR_DIV1_MUXD3_OFFSET ( 0x00000480U )
#define PMA_RX_MGS_CDR_DIV1_MUXD4_OFFSET ( 0x00000484U )
#define PMA_RX_MGS_CDR_CNTR_BIST_SETTINGS_OFFSET ( 0x00000488U )
#define PMA_RX_MGS_CDR_CALIB0_MUXD0_OFFSET ( 0x0000048cU )
#define PMA_RX_MGS_CDR_CALIB0_MUXD1_OFFSET ( 0x00000490U )
#define PMA_RX_MGS_CDR_CALIB0_MUXD2_OFFSET ( 0x00000494U )
#define PMA_RX_MGS_CDR_CALIB0_MUXD3_OFFSET ( 0x00000498U )
#define PMA_RX_MGS_CDR_CALIB0_MUXD4_OFFSET ( 0x0000049cU )
#define PMA_RX_MGS_CDR_CALIB1_MUXD0_OFFSET ( 0x000004a0U )
#define PMA_RX_MGS_CDR_CALIB1_MUXD1_OFFSET ( 0x000004a4U )
#define PMA_RX_MGS_CDR_CALIB1_MUXD2_OFFSET ( 0x000004a8U )
#define PMA_RX_MGS_CDR_CALIB1_MUXD3_OFFSET ( 0x000004acU )
#define PMA_RX_MGS_CDR_CALIB1_MUXD4_OFFSET ( 0x000004b0U )
#define PMA_RX_MGS_CDR_CALIB2_MUXD0_OFFSET ( 0x000004b4U )
#define PMA_RX_MGS_CDR_CALIB2_MUXD1_OFFSET ( 0x000004b8U )
#define PMA_RX_MGS_CDR_CALIB2_MUXD2_OFFSET ( 0x000004bcU )
#define PMA_RX_MGS_CDR_CALIB2_MUXD3_OFFSET ( 0x000004c0U )
#define PMA_RX_MGS_CDR_CALIB2_MUXD4_OFFSET ( 0x000004c4U )
#define PMA_RX_MGS_CDR_CALIB3_MUXD0_OFFSET ( 0x000004c8U )
#define PMA_RX_MGS_CDR_CALIB3_MUXD1_OFFSET ( 0x000004ccU )
#define PMA_RX_MGS_CDR_CALIB3_MUXD2_OFFSET ( 0x000004d0U )
#define PMA_RX_MGS_CDR_CALIB3_MUXD3_OFFSET ( 0x000004d4U )
#define PMA_RX_MGS_CDR_CALIB3_MUXD4_OFFSET ( 0x000004d8U )
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD0_OFFSET ( 0x000004dcU )
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD1_OFFSET ( 0x000004e0U )
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD2_OFFSET ( 0x000004e4U )
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD3_OFFSET ( 0x000004e8U )
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD4_OFFSET ( 0x000004ecU )
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_OFFSET ( 0x000004f0U )
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_OFFSET ( 0x000004f4U )
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_OFFSET ( 0x000004f8U )
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_OFFSET ( 0x000004fcU )
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_OFFSET ( 0x00000500U )
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_OFFSET ( 0x00000504U )
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_OFFSET ( 0x00000508U )
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_OFFSET ( 0x0000050cU )
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_OFFSET ( 0x00000510U )
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_OFFSET ( 0x00000514U )
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_OFFSET ( 0x00000518U )
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_OFFSET ( 0x0000051cU )
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_OFFSET ( 0x00000520U )
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_OFFSET ( 0x00000524U )
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_OFFSET ( 0x00000528U )
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD0_OFFSET ( 0x0000052cU )
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD1_OFFSET ( 0x00000530U )
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD2_OFFSET ( 0x00000534U )
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD3_OFFSET ( 0x00000538U )
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD4_OFFSET ( 0x0000053cU )
#define PMA_RX_MGS_CDR_DFX0_MUXD0_OFFSET ( 0x00000540U )
#define PMA_RX_MGS_CDR_DFX0_MUXD1_OFFSET ( 0x00000544U )
#define PMA_RX_MGS_CDR_DFX0_MUXD2_OFFSET ( 0x00000548U )
#define PMA_RX_MGS_CDR_DFX0_MUXD3_OFFSET ( 0x0000054cU )
#define PMA_RX_MGS_CDR_DFX0_MUXD4_OFFSET ( 0x00000550U )
#define PMA_RX_MGS_CDR_DFX1_OFFSET ( 0x00000554U )
#define PMA_RX_MGS_CDR_LDO0_MUXD0_OFFSET ( 0x00000558U )
#define PMA_RX_MGS_CDR_LDO0_MUXD1_OFFSET ( 0x0000055cU )
#define PMA_RX_MGS_CDR_LDO0_MUXD2_OFFSET ( 0x00000560U )
#define PMA_RX_MGS_CDR_LDO0_MUXD3_OFFSET ( 0x00000564U )
#define PMA_RX_MGS_CDR_LDO0_MUXD4_OFFSET ( 0x00000568U )
#define PMA_RX_MGS_CDR_LDO1_MUXD0_OFFSET ( 0x0000056cU )
#define PMA_RX_MGS_CDR_LDO1_MUXD1_OFFSET ( 0x00000570U )
#define PMA_RX_MGS_CDR_LDO1_MUXD2_OFFSET ( 0x00000574U )
#define PMA_RX_MGS_CDR_LDO1_MUXD3_OFFSET ( 0x00000578U )
#define PMA_RX_MGS_CDR_LDO1_MUXD4_OFFSET ( 0x0000057cU )
#define PMA_RX_MGS_CDR_LDO2_MUXD0_OFFSET ( 0x00000580U )
#define PMA_RX_MGS_CDR_LDO2_MUXD1_OFFSET ( 0x00000584U )
#define PMA_RX_MGS_CDR_LDO2_MUXD2_OFFSET ( 0x00000588U )
#define PMA_RX_MGS_CDR_LDO2_MUXD3_OFFSET ( 0x0000058cU )
#define PMA_RX_MGS_CDR_LDO2_MUXD4_OFFSET ( 0x00000590U )
#define PMA_RX_MGS_CDR_LDO_STAT_OFFSET ( 0x00000594U )
#define PMA_RX_MGS_CDR_ADL0_OFFSET ( 0x00000598U )
#define PMA_RX_MGS_CDR_ADL1_OFFSET ( 0x0000059cU )
#define PMA_RX_MGS_CDR_KVCC0_MUXD0_OFFSET ( 0x000005a0U )
#define PMA_RX_MGS_CDR_KVCC0_MUXD1_OFFSET ( 0x000005a4U )
#define PMA_RX_MGS_CDR_KVCC0_MUXD2_OFFSET ( 0x000005a8U )
#define PMA_RX_MGS_CDR_KVCC0_MUXD3_OFFSET ( 0x000005acU )
#define PMA_RX_MGS_CDR_KVCC0_MUXD4_OFFSET ( 0x000005b0U )
#define PMA_RX_MGS_CDR_KVCC1_MUXD0_OFFSET ( 0x000005b4U )
#define PMA_RX_MGS_CDR_KVCC1_MUXD1_OFFSET ( 0x000005b8U )
#define PMA_RX_MGS_CDR_KVCC1_MUXD2_OFFSET ( 0x000005bcU )
#define PMA_RX_MGS_CDR_KVCC1_MUXD3_OFFSET ( 0x000005c0U )
#define PMA_RX_MGS_CDR_KVCC1_MUXD4_OFFSET ( 0x000005c4U )
#define PMA_RX_MGS_CDR_KVCC2_MUXD0_OFFSET ( 0x000005c8U )
#define PMA_RX_MGS_CDR_KVCC2_MUXD1_OFFSET ( 0x000005ccU )
#define PMA_RX_MGS_CDR_KVCC2_MUXD2_OFFSET ( 0x000005d0U )
#define PMA_RX_MGS_CDR_KVCC2_MUXD3_OFFSET ( 0x000005d4U )
#define PMA_RX_MGS_CDR_KVCC2_MUXD4_OFFSET ( 0x000005d8U )
#define PMA_RX_MGS_CDR_UXPPM_CTRL0_OFFSET ( 0x000005dcU )
#define PMA_RX_MGS_CDR_UXPPM_CTRL1_OFFSET ( 0x000005e0U )
#define PMA_RX_MGS_CDR_UXPPM_WATCHDOG_OFFSET ( 0x000005e4U )
#define PMA_RX_MGS_CDR_BRKPPM_CTRL0_OFFSET ( 0x000005e8U )
#define PMA_RX_MGS_CDR_BRKPPM_CTRL1_OFFSET ( 0x000005ecU )
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL0_OFFSET ( 0x000005f0U )
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL1_OFFSET ( 0x000005f4U )
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL2_OFFSET ( 0x000005f8U )
#define PMA_RX_MGS_CDR_FINE_PROP_HI_GAIN_CTRL0_OFFSET ( 0x000005fcU )
#define PMA_RX_MGS_CDR_FINE_PROP_HI_GAIN_CTRL1_OFFSET ( 0x00000600U )
#define PMA_RX_MGS_CDR_FINE_PROP_LO_GAIN_CTRL0_OFFSET ( 0x00000604U )
#define PMA_RX_MGS_CDR_FINE_PROP_LO_GAIN_CTRL1_OFFSET ( 0x00000608U )
#define PMA_RX_MGS_CDR_QPD_ACCUM_MASK_HI_OFFSET ( 0x0000060cU )
#define PMA_RX_MGS_CDR_QPD_ACCUM_MASK_LO_OFFSET ( 0x00000610U )
#define PMA_RX_MGS_CDR_QPD_ACCUM_CTRL_OFFSET ( 0x00000614U )
#define PMA_RX_MGS_CDR_BBPD_ACCUM_MASK_OFFSET ( 0x00000618U )
#define PMA_RX_MGS_CDR_BBPD_ACCUM_CTRL_OFFSET ( 0x0000061cU )
#define PMA_RX_MGS_CDR_RW_SPARE0_OFFSET ( 0x00000620U )
#define PMA_RX_MGS_CDR_FINE_STAT_OFFSET ( 0x00000624U )
#define PMA_RX_MGS_CDR_BRKPPM_STAT0_OFFSET ( 0x00000628U )
#define PMA_RX_MGS_CDR_BRKPPM_STAT1_OFFSET ( 0x0000062cU )
#define PMA_RX_MGS_CDR_BRKPPM_STAT2_OFFSET ( 0x00000630U )
#define PMA_RX_MGS_CDR_UXPPM_STAT_OFFSET ( 0x00000634U )
#define PMA_RX_MGS_CDR_UXPPM_TEST_0_OFFSET ( 0x00000638U )
#define PMA_RX_MGS_CDR_UXPPM_TEST_1_OFFSET ( 0x0000063cU )
#define PMA_RX_MGS_CDR_CALIB_STAT_OFFSET ( 0x00000640U )
#define PMA_RX_MGS_CDR_MEAS_STAT_OFFSET ( 0x00000644U )
#define PMA_RX_MGS_CDR_TIME2LOCK_STAT_OFFSET ( 0x00000648U )
#define PMA_RX_MGS_CDR_FRACDIV_STAT_OFFSET ( 0x0000064cU )
#define PMA_RX_MGS_CDR_MISC0_STAT_OFFSET ( 0x00000650U )
#define PMA_RX_MGS_CDR_MISC1_STAT_OFFSET ( 0x00000654U )
#define PMA_RX_MGS_CDR_CSELFINE_STAT_OFFSET ( 0x00000658U )
#define PMA_RX_MGS_CDR_REFGEN_STAT_OFFSET ( 0x0000065cU )
#define PMA_RX_MGS_CDR_MISC3_STAT_OFFSET ( 0x00000660U )
#define PMA_RX_MGS_CDR_KVCC_STAT_0_OFFSET ( 0x00000664U )
#define PMA_RX_MGS_CDR_KVCC_STAT_1_OFFSET ( 0x00000668U )
#define PMA_RX_MGS_CDR_FEEDFWRDGAIN_STAT_OFFSET ( 0x0000066cU )
#define PMA_RX_MGS_CDR_CAP_CTRL_OFFSET ( 0x00000670U )
#define PMA_RX_MGS_CDR_VOTE_STAT_OFFSET ( 0x00000674U )
#define PMA_RX_MGS_CDR_CODE_STAT_OFFSET ( 0x00000678U )
#define PMA_RX_MGS_CDR_RO_SPARE_ANA2DIG_OFFSET ( 0x0000067cU )
#define PMA_RX_MGS_CDR_L2R_LOCKTIME_OFFSET ( 0x00000680U )
#define PMA_RX_MGS_CDR_L2D_LOCKTIME_OFFSET ( 0x00000684U )
#define PMA_RX_MGS_CDR_QPD_ACCUM_STAT_OFFSET ( 0x00000688U )
#define PMA_RX_MGS_CDR_BBPD_ACCUM_STAT_OFFSET ( 0x0000068cU )
#define PMA_RX_MGS_CDR_RO_SPARE_OFFSET ( 0x00000690U )
#define PMA_RX_MGS_MODE_SEL_CFG0_OFFSET ( 0x00000694U )
#define PMA_RX_MGS_MODE_SEL_CFG1_OFFSET ( 0x00000698U )
#define PMA_RX_MGS_MODE_SEL_CFG2_OFFSET ( 0x0000069cU )
#define PMA_RX_MGS_MODE_SEL_CFG3_OFFSET ( 0x000006a0U )
#define PMA_RX_MGS_MODE_SEL_CFG4_OFFSET ( 0x000006a4U )
#define PMA_RX_MGS_MODE_SEL_STAT0_OFFSET ( 0x000006a8U )
#define PMA_RX_MGS_MODE_SEL_STAT1_OFFSET ( 0x000006acU )
#define PMA_RX_MGS_MODE_SEL_STAT2_OFFSET ( 0x000006b0U )
#define PMA_RX_MGS_ADCSKEWDET_CALASSIST_CTRL_OFFSET ( 0x000006b4U )
#define PMA_RX_MGS_ADCSKEWDET_CALASSIST_STAT_OFFSET ( 0x000006b8U )
#define PMA_RX_MSG_LANE_CHARGEPUMP_CALASSIST_CTRL_OFFSET ( 0x000006bcU )
#define PMA_RX_MSG_LANE_CHARGEPUMP_CALASSIST_STAT_OFFSET ( 0x000006c0U )
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL0_OFFSET ( 0x000006c4U )
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL1_OFFSET ( 0x000006c8U )
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL2_OFFSET ( 0x000006ccU )
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL3_OFFSET ( 0x000006d0U )
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL4_OFFSET ( 0x000006d4U )
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL5_OFFSET ( 0x000006d8U )
#define PMA_RX_MGS_CMPOUT_CALASSIST_STAT_OFFSET ( 0x000006dcU )
#define PMA_RX_MGS_RW_SPARE_0_OFFSET ( 0x000007dcU )
#define PMA_RX_MGS_RW_SPARE_1_OFFSET ( 0x000007e0U )
#define PMA_RX_MGS_RW_SPARE_2_OFFSET ( 0x000007e4U )
#define PMA_RX_MGS_RW_SPARE_3_OFFSET ( 0x000007e8U )
#define PMA_RX_MGS_RO_SPARE_0_OFFSET ( 0x000007ecU )
#define PMA_RX_MGS_RO_SPARE_1_OFFSET ( 0x000007f0U )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define PMA_RX_MGS_CAR_CFG_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CAR_CFG_OFFSET ) ))
#define PMA_RX_MGS_CAR_CFG_RO_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CAR_CFG_RO_OFFSET ) ))
#define PMA_RX_MGS_SCRATCH_PAD_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_SCRATCH_PAD_0_OFFSET ) ))
#define PMA_RX_MGS_SCRATCH_PAD_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_SCRATCH_PAD_1_OFFSET ) ))
#define PMA_RX_MGS_SCRATCH_PAD_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_SCRATCH_PAD_2_OFFSET ) ))
#define PMA_RX_MGS_SCRATCH_PAD_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_SCRATCH_PAD_3_OFFSET ) ))
#define PMA_RX_MGS_SCRATCH_PAD_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_SCRATCH_PAD_4_OFFSET ) ))
#define PMA_RX_MGS_SCRATCH_PAD_5_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_SCRATCH_PAD_5_OFFSET ) ))
#define PMA_RX_MGS_SCRATCH_PAD_6_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_SCRATCH_PAD_6_OFFSET ) ))
#define PMA_RX_MGS_SCRATCH_PAD_7_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_SCRATCH_PAD_7_OFFSET ) ))
#define PMA_RX_MGS_CTRL_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CTRL_0_OFFSET ) ))
#define PMA_RX_MGS_CTRL_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CTRL_1_OFFSET ) ))
#define PMA_RX_MGS_CTRL_RO_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CTRL_RO_OFFSET ) ))
#define PMA_RX_MSG_FSM_CFG_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_FSM_CFG_OFFSET ) ))
#define PMA_RX_MGS_MEM_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_MEM_CTRL_OFFSET ) ))
#define PMA_RX_MGS_MEM_REQ_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_MEM_REQ_CTRL_OFFSET ) ))
#define PMA_RX_MGS_PLL_SEL_CFG_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_PLL_SEL_CFG_OFFSET ) ))
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_0_OFFSET ) ))
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_1_OFFSET ) ))
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_2_OFFSET ) ))
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_3_OFFSET ) ))
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_4_OFFSET ) ))
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_5_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_5_OFFSET ) ))
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_6_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_6_OFFSET ) ))
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_OFFSET ) ))
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_8_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_8_OFFSET ) ))
#define PMA_RX_MGS_PWR_MNG_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_PWR_MNG_CTRL_OFFSET ) ))
#define PMA_RX_MGS_PWR_MNG_STAT_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_PWR_MNG_STAT_OFFSET ) ))
#define PMA_RX_MGS_CALDUTY_CTRL_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CALDUTY_CTRL_0_OFFSET ) ))
#define PMA_RX_MGS_CALDUTY_CTRL_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CALDUTY_CTRL_1_OFFSET ) ))
#define PMA_RX_MGS_CALFSM_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CALFSM_CTRL_OFFSET ) ))
#define PMA_RX_MGS_STAT_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_STAT_0_OFFSET ) ))
#define PMA_RX_MGS_STAT_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_STAT_1_OFFSET ) ))
#define PMA_RX_MGS_STAT_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_STAT_2_OFFSET ) ))
#define PMA_RX_MSG_PCS_PCIE_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_PCS_PCIE_CTRL_OFFSET ) ))
#define PMA_RX_MSG_PCS_PCIE_CTRL_RO_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_PCS_PCIE_CTRL_RO_OFFSET ) ))
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_FSM_RATEWIDTH_CFG_0_OFFSET ) ))
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_FSM_RATEWIDTH_CFG_1_OFFSET ) ))
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_FSM_RATEWIDTH_CFG_2_OFFSET ) ))
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_FSM_RATEWIDTH_CFG_3_OFFSET ) ))
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_FSM_RATEWIDTH_CFG_4_OFFSET ) ))
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_5_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_FSM_RATEWIDTH_CFG_5_OFFSET ) ))
#define PMA_RX_MSG_FSM_CALMASTER_PSTATE_CFG_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_FSM_CALMASTER_PSTATE_CFG_OFFSET ) ))
#define PMA_RX_MSG_FSM_CALMASTER_QUAD_CFG_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_FSM_CALMASTER_QUAD_CFG_OFFSET ) ))
#define PMA_RX_MGS_CALAVG_CTRL_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CALAVG_CTRL_0_OFFSET ) ))
#define PMA_RX_MGS_CALAVG_CTRL_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CALAVG_CTRL_1_OFFSET ) ))
#define PMA_RX_MGS_CALAVG_CTRL_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CALAVG_CTRL_2_OFFSET ) ))
#define PMA_RX_MGS_CAL_STAT_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CAL_STAT_OFFSET ) ))
#define PMA_RX_MGS_CALAVG_STAT_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CALAVG_STAT_OFFSET ) ))
#define PMA_RX_MSG_RPU_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_RPU_CTRL_OFFSET ) ))
#define PMA_RX_MSG_RPU_LUT_CFG_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_RPU_LUT_CFG_0_OFFSET ) ))
#define PMA_RX_MSG_RPU_LUT_CFG_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_RPU_LUT_CFG_1_OFFSET ) ))
#define PMA_RX_MSG_RPU_LUT_CFG_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_RPU_LUT_CFG_2_OFFSET ) ))
#define PMA_RX_MSG_RPU_LUT_CFG_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_RPU_LUT_CFG_3_OFFSET ) ))
#define PMA_RX_MSG_RPU_LUT_CFG_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_RPU_LUT_CFG_4_OFFSET ) ))
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_RPU_EVUP_DELAY_CFG_0_OFFSET ) ))
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_RPU_EVUP_DELAY_CFG_1_OFFSET ) ))
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_RPU_EVUP_DELAY_CFG_2_OFFSET ) ))
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_RPU_EVUP_DELAY_CFG_3_OFFSET ) ))
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_RPU_EVUP_DELAY_CFG_4_OFFSET ) ))
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_5_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_RPU_EVUP_DELAY_CFG_5_OFFSET ) ))
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_6_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_RPU_EVUP_DELAY_CFG_6_OFFSET ) ))
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_OFFSET ) ))
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_OFFSET ) ))
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_OFFSET ) ))
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_OFFSET ) ))
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_RPU_EVDN_DELAY_CFG_4_OFFSET ) ))
#define PMA_RX_MGS_RPU_EVENT_CFG_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_RPU_EVENT_CFG_0_OFFSET ) ))
#define PMA_RX_MGS_RPU_EVENT_CFG_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_RPU_EVENT_CFG_1_OFFSET ) ))
#define PMA_RX_MGS_RPU_EVENT_CFG_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_RPU_EVENT_CFG_2_OFFSET ) ))
#define PMA_RX_MGS_RPU_EVENT_CFG_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_RPU_EVENT_CFG_3_OFFSET ) ))
#define PMA_RX_MGS_RPU_EVENT_CFG_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_RPU_EVENT_CFG_4_OFFSET ) ))
#define PMA_RX_MGS_RPU_EVENT_CFG_5_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_RPU_EVENT_CFG_5_OFFSET ) ))
#define PMA_RX_MGS_RPU_EVENT_CFG_6_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_RPU_EVENT_CFG_6_OFFSET ) ))
#define PMA_RX_MGS_RPU_EVENT_CFG_7_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_RPU_EVENT_CFG_7_OFFSET ) ))
#define PMA_RX_MGS_RPU_EVENT_CFG_8_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_RPU_EVENT_CFG_8_OFFSET ) ))
#define PMA_RX_MGS_RPU_EVENT_CFG_9_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_RPU_EVENT_CFG_9_OFFSET ) ))
#define PMA_RX_MGS_RPU_EVENT_CFG_10_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_RPU_EVENT_CFG_10_OFFSET ) ))
#define PMA_RX_MGS_RPU_EVENT_CFG_11_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_RPU_EVENT_CFG_11_OFFSET ) ))
#define PMA_RX_MGS_RPU_EVENT_CFG_12_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_RPU_EVENT_CFG_12_OFFSET ) ))
#define PMA_RX_MGS_RPU_EVENT_CFG_13_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_RPU_EVENT_CFG_13_OFFSET ) ))
#define PMA_RX_MGS_RPU_EVENT_CFG_14_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_RPU_EVENT_CFG_14_OFFSET ) ))
#define PMA_RX_MGS_RPU_EVENT_CFG_15_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_RPU_EVENT_CFG_15_OFFSET ) ))
#define PMA_RX_MGS_RPU_EVENT_CFG_16_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_RPU_EVENT_CFG_16_OFFSET ) ))
#define PMA_RX_MGS_RPU_EVENT_CFG_17_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_RPU_EVENT_CFG_17_OFFSET ) ))
#define PMA_RX_MGS_RPU_EVENT_CFG_18_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_RPU_EVENT_CFG_18_OFFSET ) ))
#define PMA_RX_MGS_RPU_EVENT_CFG_19_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_RPU_EVENT_CFG_19_OFFSET ) ))
#define PMA_RX_MSG_SIGDET_CTRL_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_SIGDET_CTRL_0_OFFSET ) ))
#define PMA_RX_MSG_SIGDET_CTRL_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_SIGDET_CTRL_1_OFFSET ) ))
#define PMA_RX_MSG_SIGDET_CTRL_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_SIGDET_CTRL_2_OFFSET ) ))
#define PMA_RX_MSG_SIGDET_CTRL_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_SIGDET_CTRL_3_OFFSET ) ))
#define PMA_RX_MSG_SIGDET_CTRL_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_SIGDET_CTRL_4_OFFSET ) ))
#define PMA_RX_MSG_SIGDET_CTRL_5_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_SIGDET_CTRL_5_OFFSET ) ))
#define PMA_RX_MSG_SIGDET_CTRL_6_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_SIGDET_CTRL_6_OFFSET ) ))
#define PMA_RX_MSG_SIGDET_CTRL_7_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_SIGDET_CTRL_7_OFFSET ) ))
#define PMA_RX_MSG_SIGDET_CTRL_RO_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_SIGDET_CTRL_RO_OFFSET ) ))
#define PMA_RX_MSG_SIGDET_STAT_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_SIGDET_STAT_OFFSET ) ))
#define PMA_RX_MGS_LFPS_DET_CTRL_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_LFPS_DET_CTRL_0_OFFSET ) ))
#define PMA_RX_MGS_LFPS_DET_CTRL_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_LFPS_DET_CTRL_1_OFFSET ) ))
#define PMA_RX_MGS_SQLCH_CTRL_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_SQLCH_CTRL_0_OFFSET ) ))
#define PMA_RX_MGS_SQLCH_CTRL_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_SQLCH_CTRL_1_OFFSET ) ))
#define PMA_RX_MGS_SQLCH_CTRL_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_SQLCH_CTRL_2_OFFSET ) ))
#define PMA_RX_MGS_SQLCH_CTRL_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_SQLCH_CTRL_3_OFFSET ) ))
#define PMA_RX_MGS_SQLCH_CTRL_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_SQLCH_CTRL_4_OFFSET ) ))
#define PMA_RX_MGS_SQLCH_STAT_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_SQLCH_STAT_OFFSET ) ))
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_SQLCHOSCMEAS_CTRL_0_OFFSET ) ))
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_SQLCHOSCMEAS_CTRL_1_OFFSET ) ))
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_SQLCHOSCMEAS_CTRL_2_OFFSET ) ))
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_SQLCHOSCMEAS_CTRL_3_OFFSET ) ))
#define PMA_RX_MGS_SQLCH_CALFSM_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_SQLCH_CALFSM_CTRL_OFFSET ) ))
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_SQLCH_CALFSM_STAT_0_OFFSET ) ))
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_SQLCH_CALFSM_STAT_1_OFFSET ) ))
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_SQLCH_CALFSM_STAT_2_OFFSET ) ))
#define PMA_RX_MGS_CTRL_OVRD_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CTRL_OVRD_OFFSET ) ))
#define PMA_RX_MGS_CTRL_OVRD_RO_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CTRL_OVRD_RO_OFFSET ) ))
#define PMA_RX_MGS_CTRL_OUT_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CTRL_OUT_OFFSET ) ))
#define PMA_RX_MGS_MARGIN_CTRL_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_MARGIN_CTRL_0_OFFSET ) ))
#define PMA_RX_MGS_MARGIN_CTRL_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_MARGIN_CTRL_1_OFFSET ) ))
#define PMA_RX_MGS_MARGIN_CTRL_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_MARGIN_CTRL_2_OFFSET ) ))
#define PMA_RX_MGS_MARGIN_STAT_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_MARGIN_STAT_OFFSET ) ))
#define PMA_RX_MGS_INPUT_PIN_OVRD_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_INPUT_PIN_OVRD_OFFSET ) ))
#define PMA_RX_MGS_INPUT_PIN_PREOVRD_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_INPUT_PIN_PREOVRD_OFFSET ) ))
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_OUTPUT_PIN_OVRD_0_OFFSET ) ))
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_OUTPUT_PIN_OVRD_1_OFFSET ) ))
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_OUTPUT_PIN_PREOVRD_0_OFFSET ) ))
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_OUTPUT_PIN_PREOVRD_1_OFFSET ) ))
#define PMA_RX_MGS_BRKPT_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_BRKPT_CTRL_OFFSET ) ))
#define PMA_RX_MGS_BRKPT_STAT_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_BRKPT_STAT_OFFSET ) ))
#define PMA_RX_MGS_BRKPT_CLR_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_BRKPT_CLR_OFFSET ) ))
#define PMA_RX_MSG_DCO_STAT_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_DCO_STAT_OFFSET ) ))
#define PMA_RX_MSG_DCO_CTRL_ANA_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_DCO_CTRL_ANA_OFFSET ) ))
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_OFFSET ) ))
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_OFFSET ) ))
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_OFFSET ) ))
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_OFFSET ) ))
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_OFFSET ) ))
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD0_OFFSET ) ))
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD1_OFFSET ) ))
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD2_OFFSET ) ))
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD3_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD3_OFFSET ) ))
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD4_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD4_OFFSET ) ))
#define PMA_RX_MGS_CDR_PKSEN_STAT_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_PKSEN_STAT_OFFSET ) ))
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_DCO_SWING_CTRL_MUXD0_OFFSET ) ))
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_DCO_SWING_CTRL_MUXD1_OFFSET ) ))
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_DCO_SWING_CTRL_MUXD2_OFFSET ) ))
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD3_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_DCO_SWING_CTRL_MUXD3_OFFSET ) ))
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD4_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_DCO_SWING_CTRL_MUXD4_OFFSET ) ))
#define PMA_RX_MSG_DCO_BANGBANG_PD_CTRL_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_DCO_BANGBANG_PD_CTRL_0_OFFSET ) ))
#define PMA_RX_MSG_DCO_BANGBANG_PD_CTRL_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_DCO_BANGBANG_PD_CTRL_1_OFFSET ) ))
#define PMA_RX_MSG_DCO_BAUD_PD_CTRL_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_DCO_BAUD_PD_CTRL_0_OFFSET ) ))
#define PMA_RX_MSG_DCO_BAUD_PD_CTRL_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_DCO_BAUD_PD_CTRL_1_OFFSET ) ))
#define PMA_RX_MSG_DCO_BAUD_PD_CTRL_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_DCO_BAUD_PD_CTRL_2_OFFSET ) ))
#define PMA_RX_MSG_DCO_LOCK_TFER_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_DCO_LOCK_TFER_CTRL_OFFSET ) ))
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_OFFSET ) ))
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_STAT_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_DCO_OPTCLFASTLOCK_STAT_OFFSET ) ))
#define PMA_RX_MSG_DCO_ETH_PMD_STAT_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_DCO_ETH_PMD_STAT_0_OFFSET ) ))
#define PMA_RX_MSG_DCO_ETH_PMD_STAT_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_DCO_ETH_PMD_STAT_1_OFFSET ) ))
#define PMA_RX_MSG_DCO_ETH_PMD_STAT_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_DCO_ETH_PMD_STAT_2_OFFSET ) ))
#define PMA_RX_MSG_DCO_ETH_PMD_STAT_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_DCO_ETH_PMD_STAT_3_OFFSET ) ))
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_DCO_OVRD_CTRL_0_OFFSET ) ))
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_DCO_OVRD_CTRL_1_OFFSET ) ))
#define PMA_RX_MSG_DCO_OVRD_CTRL_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_DCO_OVRD_CTRL_2_OFFSET ) ))
#define PMA_RX_MSG_DCO_OVRD_CTRL_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_DCO_OVRD_CTRL_3_OFFSET ) ))
#define PMA_RX_MSG_DCO_OVRD_CTRL_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_DCO_OVRD_CTRL_4_OFFSET ) ))
#define PMA_RX_MSG_PHDT_OVRD_CTRL_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_PHDT_OVRD_CTRL_0_OFFSET ) ))
#define PMA_RX_MSG_DCO_OVRD_STAT_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_DCO_OVRD_STAT_0_OFFSET ) ))
#define PMA_RX_MSG_DCO_OVRD_STAT_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_DCO_OVRD_STAT_1_OFFSET ) ))
#define PMA_RX_MSG_DCO_OVRD_STAT_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_DCO_OVRD_STAT_2_OFFSET ) ))
#define PMA_RX_MSG_DCO_OVRD_STAT_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_DCO_OVRD_STAT_3_OFFSET ) ))
#define PMA_RX_MSG_DCO_OVRD_STAT_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_DCO_OVRD_STAT_4_OFFSET ) ))
#define PMA_RX_MSG_PHDT_OVRD_STAT_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_PHDT_OVRD_STAT_0_OFFSET ) ))
#define PMA_RX_MGS_ADC_SPARE_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_ADC_SPARE_OFFSET ) ))
#define PMA_RX_MGS_CKM_CTRL_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CKM_CTRL_0_OFFSET ) ))
#define PMA_RX_MGS_CKM_CTRL_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CKM_CTRL_1_OFFSET ) ))
#define PMA_RX_MGS_CKM_CTRL_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CKM_CTRL_2_OFFSET ) ))
#define PMA_RX_MGS_CKM_STAT_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CKM_STAT_OFFSET ) ))
#define PMA_RX_MSG_BIST_CFG_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_BIST_CFG_0_OFFSET ) ))
#define PMA_RX_MSG_BIST_CFG_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_BIST_CFG_1_OFFSET ) ))
#define PMA_RX_MSG_BIST_SEED_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_BIST_SEED_OFFSET ) ))
#define PMA_RX_MSG_BIST_UDP_VF00_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_BIST_UDP_VF00_OFFSET ) ))
#define PMA_RX_MSG_BIST_UDP_VF01_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_BIST_UDP_VF01_OFFSET ) ))
#define PMA_RX_MSG_BIST_UDP_VF02_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_BIST_UDP_VF02_OFFSET ) ))
#define PMA_RX_MSG_BIST_UDP_VF03_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_BIST_UDP_VF03_OFFSET ) ))
#define PMA_RX_MSG_BIST_UDP_VF04_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_BIST_UDP_VF04_OFFSET ) ))
#define PMA_RX_MSG_BIST_UDP_VF05_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_BIST_UDP_VF05_OFFSET ) ))
#define PMA_RX_MSG_BIST_UDP_VF06_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_BIST_UDP_VF06_OFFSET ) ))
#define PMA_RX_MSG_BIST_UDP_VF07_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_BIST_UDP_VF07_OFFSET ) ))
#define PMA_RX_MSG_BIST_UDP_VF08_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_BIST_UDP_VF08_OFFSET ) ))
#define PMA_RX_MSG_BIST_UDP_VF09_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_BIST_UDP_VF09_OFFSET ) ))
#define PMA_RX_MSG_BIST_ERRCNT_STAT_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_BIST_ERRCNT_STAT_0_OFFSET ) ))
#define PMA_RX_MSG_BIST_ERRCNT_STAT_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_BIST_ERRCNT_STAT_1_OFFSET ) ))
#define PMA_RX_MSG_BIST_ERRCNT_STAT_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_BIST_ERRCNT_STAT_2_OFFSET ) ))
#define PMA_RX_MSG_BIST_ERRCNT_STAT_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_BIST_ERRCNT_STAT_3_OFFSET ) ))
#define PMA_RX_MSG_BIST_STAT_DATACHKCNT_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_BIST_STAT_DATACHKCNT_OFFSET ) ))
#define PMA_RX_MSG_BIST_DATA_STAT_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_BIST_DATA_STAT_0_OFFSET ) ))
#define PMA_RX_MSG_BIST_DATA_STAT_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_BIST_DATA_STAT_1_OFFSET ) ))
#define PMA_RX_MSG_BIST_DATA_STAT_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_BIST_DATA_STAT_2_OFFSET ) ))
#define PMA_RX_MSG_BIST_DATA_STAT_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_BIST_DATA_STAT_3_OFFSET ) ))
#define PMA_RX_MSG_BIST_DATA_STAT_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_BIST_DATA_STAT_4_OFFSET ) ))
#define PMA_RX_MSG_BIST_DATA_STAT_5_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_BIST_DATA_STAT_5_OFFSET ) ))
#define PMA_RX_MSG_BIST_DATA_STAT_6_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_BIST_DATA_STAT_6_OFFSET ) ))
#define PMA_RX_MSG_BIST_DATA_STAT_7_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_BIST_DATA_STAT_7_OFFSET ) ))
#define PMA_RX_MSG_BIST_DATA_STAT_8_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_BIST_DATA_STAT_8_OFFSET ) ))
#define PMA_RX_MSG_BIST_DATA_STAT_9_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_BIST_DATA_STAT_9_OFFSET ) ))
#define PMA_RX_MSG_BIST_DATA_STAT_10_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_BIST_DATA_STAT_10_OFFSET ) ))
#define PMA_RX_MSG_BIST_DATA_STAT_11_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_BIST_DATA_STAT_11_OFFSET ) ))
#define PMA_RX_MSG_BIST_DATA_STAT_12_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_BIST_DATA_STAT_12_OFFSET ) ))
#define PMA_RX_MSG_BIST_DATA_STAT_13_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_BIST_DATA_STAT_13_OFFSET ) ))
#define PMA_RX_MSG_BIST_DATA_STAT_14_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_BIST_DATA_STAT_14_OFFSET ) ))
#define PMA_RX_MSG_BIST_DATA_STAT_15_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_BIST_DATA_STAT_15_OFFSET ) ))
#define PMA_RX_MGS_AFFE_COEFF_SET_STAT_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_AFFE_COEFF_SET_STAT_0_OFFSET ) ))
#define PMA_RX_MGS_AFFE_COEFF_SET_STAT_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_AFFE_COEFF_SET_STAT_1_OFFSET ) ))
#define PMA_RX_MGS_AFFE_COEFF_SET_OVRD_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_AFFE_COEFF_SET_OVRD_0_OFFSET ) ))
#define PMA_RX_MGS_AFFE_COEFF_SET_OVRD_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_AFFE_COEFF_SET_OVRD_1_OFFSET ) ))
#define PMA_RX_MGS_OPS_IF_STAT_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_OPS_IF_STAT_0_OFFSET ) ))
#define PMA_RX_MGS_OPS_IF_STAT_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_OPS_IF_STAT_1_OFFSET ) ))
#define PMA_RX_MGS_OPS_IF_STAT_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_OPS_IF_STAT_2_OFFSET ) ))
#define PMA_RX_MGS_OPS_IF_OVRD_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_OPS_IF_OVRD_0_OFFSET ) ))
#define PMA_RX_MGS_OPS_IF_OVRD_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_OPS_IF_OVRD_1_OFFSET ) ))
#define PMA_RX_MGS_OPS_IF_OVRD_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_OPS_IF_OVRD_2_OFFSET ) ))
#define PMA_RX_MGS_SCRATCHY_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_SCRATCHY_0_OFFSET ) ))
#define PMA_RX_MGS_SCRATCHY_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_SCRATCHY_1_OFFSET ) ))
#define PMA_RX_MGS_CDR_GENERAL_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_GENERAL_CTRL_OFFSET ) ))
#define PMA_RX_MGS_CDR_DIV0_MUXD0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_DIV0_MUXD0_OFFSET ) ))
#define PMA_RX_MGS_CDR_DIV0_MUXD1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_DIV0_MUXD1_OFFSET ) ))
#define PMA_RX_MGS_CDR_DIV0_MUXD2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_DIV0_MUXD2_OFFSET ) ))
#define PMA_RX_MGS_CDR_DIV0_MUXD3_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_DIV0_MUXD3_OFFSET ) ))
#define PMA_RX_MGS_CDR_DIV0_MUXD4_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_DIV0_MUXD4_OFFSET ) ))
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD0_OFFSET ) ))
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD1_OFFSET ) ))
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD2_OFFSET ) ))
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD3_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD3_OFFSET ) ))
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD4_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD4_OFFSET ) ))
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD0_OFFSET ) ))
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD1_OFFSET ) ))
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD2_OFFSET ) ))
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD3_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD3_OFFSET ) ))
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD4_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD4_OFFSET ) ))
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_OFFSET ) ))
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_OFFSET ) ))
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_OFFSET ) ))
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_OFFSET ) ))
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_OFFSET ) ))
#define PMA_RX_MGS_CDR_LOCKFSM_STAT_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_LOCKFSM_STAT_OFFSET ) ))
#define PMA_RX_MGS_CDR_TAP_OVRD_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_TAP_OVRD_OFFSET ) ))
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_DFX_DCO_MUXD0_OFFSET ) ))
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_DFX_DCO_MUXD1_OFFSET ) ))
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_DFX_DCO_MUXD2_OFFSET ) ))
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD3_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_DFX_DCO_MUXD3_OFFSET ) ))
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD4_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_DFX_DCO_MUXD4_OFFSET ) ))
#define PMA_RX_MGS_CDR_DIV1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_DIV1_OFFSET ) ))
#define PMA_RX_MGS_CDR_DIV1_MUXD0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_DIV1_MUXD0_OFFSET ) ))
#define PMA_RX_MGS_CDR_DIV1_MUXD1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_DIV1_MUXD1_OFFSET ) ))
#define PMA_RX_MGS_CDR_DIV1_MUXD2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_DIV1_MUXD2_OFFSET ) ))
#define PMA_RX_MGS_CDR_DIV1_MUXD3_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_DIV1_MUXD3_OFFSET ) ))
#define PMA_RX_MGS_CDR_DIV1_MUXD4_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_DIV1_MUXD4_OFFSET ) ))
#define PMA_RX_MGS_CDR_CNTR_BIST_SETTINGS_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_CNTR_BIST_SETTINGS_OFFSET ) ))
#define PMA_RX_MGS_CDR_CALIB0_MUXD0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_CALIB0_MUXD0_OFFSET ) ))
#define PMA_RX_MGS_CDR_CALIB0_MUXD1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_CALIB0_MUXD1_OFFSET ) ))
#define PMA_RX_MGS_CDR_CALIB0_MUXD2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_CALIB0_MUXD2_OFFSET ) ))
#define PMA_RX_MGS_CDR_CALIB0_MUXD3_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_CALIB0_MUXD3_OFFSET ) ))
#define PMA_RX_MGS_CDR_CALIB0_MUXD4_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_CALIB0_MUXD4_OFFSET ) ))
#define PMA_RX_MGS_CDR_CALIB1_MUXD0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_CALIB1_MUXD0_OFFSET ) ))
#define PMA_RX_MGS_CDR_CALIB1_MUXD1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_CALIB1_MUXD1_OFFSET ) ))
#define PMA_RX_MGS_CDR_CALIB1_MUXD2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_CALIB1_MUXD2_OFFSET ) ))
#define PMA_RX_MGS_CDR_CALIB1_MUXD3_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_CALIB1_MUXD3_OFFSET ) ))
#define PMA_RX_MGS_CDR_CALIB1_MUXD4_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_CALIB1_MUXD4_OFFSET ) ))
#define PMA_RX_MGS_CDR_CALIB2_MUXD0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_CALIB2_MUXD0_OFFSET ) ))
#define PMA_RX_MGS_CDR_CALIB2_MUXD1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_CALIB2_MUXD1_OFFSET ) ))
#define PMA_RX_MGS_CDR_CALIB2_MUXD2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_CALIB2_MUXD2_OFFSET ) ))
#define PMA_RX_MGS_CDR_CALIB2_MUXD3_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_CALIB2_MUXD3_OFFSET ) ))
#define PMA_RX_MGS_CDR_CALIB2_MUXD4_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_CALIB2_MUXD4_OFFSET ) ))
#define PMA_RX_MGS_CDR_CALIB3_MUXD0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_CALIB3_MUXD0_OFFSET ) ))
#define PMA_RX_MGS_CDR_CALIB3_MUXD1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_CALIB3_MUXD1_OFFSET ) ))
#define PMA_RX_MGS_CDR_CALIB3_MUXD2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_CALIB3_MUXD2_OFFSET ) ))
#define PMA_RX_MGS_CDR_CALIB3_MUXD3_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_CALIB3_MUXD3_OFFSET ) ))
#define PMA_RX_MGS_CDR_CALIB3_MUXD4_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_CALIB3_MUXD4_OFFSET ) ))
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD0_OFFSET ) ))
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD1_OFFSET ) ))
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD2_OFFSET ) ))
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD3_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD3_OFFSET ) ))
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD4_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD4_OFFSET ) ))
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_OFFSET ) ))
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_OFFSET ) ))
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_OFFSET ) ))
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_OFFSET ) ))
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_OFFSET ) ))
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_OFFSET ) ))
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_OFFSET ) ))
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_OFFSET ) ))
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_OFFSET ) ))
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_OFFSET ) ))
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_OFFSET ) ))
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_OFFSET ) ))
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_OFFSET ) ))
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_OFFSET ) ))
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_OFFSET ) ))
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_ANA_CTRL3_MUXD0_OFFSET ) ))
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_ANA_CTRL3_MUXD1_OFFSET ) ))
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_ANA_CTRL3_MUXD2_OFFSET ) ))
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD3_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_ANA_CTRL3_MUXD3_OFFSET ) ))
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD4_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_ANA_CTRL3_MUXD4_OFFSET ) ))
#define PMA_RX_MGS_CDR_DFX0_MUXD0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_DFX0_MUXD0_OFFSET ) ))
#define PMA_RX_MGS_CDR_DFX0_MUXD1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_DFX0_MUXD1_OFFSET ) ))
#define PMA_RX_MGS_CDR_DFX0_MUXD2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_DFX0_MUXD2_OFFSET ) ))
#define PMA_RX_MGS_CDR_DFX0_MUXD3_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_DFX0_MUXD3_OFFSET ) ))
#define PMA_RX_MGS_CDR_DFX0_MUXD4_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_DFX0_MUXD4_OFFSET ) ))
#define PMA_RX_MGS_CDR_DFX1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_DFX1_OFFSET ) ))
#define PMA_RX_MGS_CDR_LDO0_MUXD0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_LDO0_MUXD0_OFFSET ) ))
#define PMA_RX_MGS_CDR_LDO0_MUXD1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_LDO0_MUXD1_OFFSET ) ))
#define PMA_RX_MGS_CDR_LDO0_MUXD2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_LDO0_MUXD2_OFFSET ) ))
#define PMA_RX_MGS_CDR_LDO0_MUXD3_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_LDO0_MUXD3_OFFSET ) ))
#define PMA_RX_MGS_CDR_LDO0_MUXD4_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_LDO0_MUXD4_OFFSET ) ))
#define PMA_RX_MGS_CDR_LDO1_MUXD0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_LDO1_MUXD0_OFFSET ) ))
#define PMA_RX_MGS_CDR_LDO1_MUXD1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_LDO1_MUXD1_OFFSET ) ))
#define PMA_RX_MGS_CDR_LDO1_MUXD2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_LDO1_MUXD2_OFFSET ) ))
#define PMA_RX_MGS_CDR_LDO1_MUXD3_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_LDO1_MUXD3_OFFSET ) ))
#define PMA_RX_MGS_CDR_LDO1_MUXD4_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_LDO1_MUXD4_OFFSET ) ))
#define PMA_RX_MGS_CDR_LDO2_MUXD0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_LDO2_MUXD0_OFFSET ) ))
#define PMA_RX_MGS_CDR_LDO2_MUXD1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_LDO2_MUXD1_OFFSET ) ))
#define PMA_RX_MGS_CDR_LDO2_MUXD2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_LDO2_MUXD2_OFFSET ) ))
#define PMA_RX_MGS_CDR_LDO2_MUXD3_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_LDO2_MUXD3_OFFSET ) ))
#define PMA_RX_MGS_CDR_LDO2_MUXD4_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_LDO2_MUXD4_OFFSET ) ))
#define PMA_RX_MGS_CDR_LDO_STAT_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_LDO_STAT_OFFSET ) ))
#define PMA_RX_MGS_CDR_ADL0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_ADL0_OFFSET ) ))
#define PMA_RX_MGS_CDR_ADL1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_ADL1_OFFSET ) ))
#define PMA_RX_MGS_CDR_KVCC0_MUXD0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_KVCC0_MUXD0_OFFSET ) ))
#define PMA_RX_MGS_CDR_KVCC0_MUXD1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_KVCC0_MUXD1_OFFSET ) ))
#define PMA_RX_MGS_CDR_KVCC0_MUXD2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_KVCC0_MUXD2_OFFSET ) ))
#define PMA_RX_MGS_CDR_KVCC0_MUXD3_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_KVCC0_MUXD3_OFFSET ) ))
#define PMA_RX_MGS_CDR_KVCC0_MUXD4_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_KVCC0_MUXD4_OFFSET ) ))
#define PMA_RX_MGS_CDR_KVCC1_MUXD0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_KVCC1_MUXD0_OFFSET ) ))
#define PMA_RX_MGS_CDR_KVCC1_MUXD1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_KVCC1_MUXD1_OFFSET ) ))
#define PMA_RX_MGS_CDR_KVCC1_MUXD2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_KVCC1_MUXD2_OFFSET ) ))
#define PMA_RX_MGS_CDR_KVCC1_MUXD3_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_KVCC1_MUXD3_OFFSET ) ))
#define PMA_RX_MGS_CDR_KVCC1_MUXD4_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_KVCC1_MUXD4_OFFSET ) ))
#define PMA_RX_MGS_CDR_KVCC2_MUXD0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_KVCC2_MUXD0_OFFSET ) ))
#define PMA_RX_MGS_CDR_KVCC2_MUXD1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_KVCC2_MUXD1_OFFSET ) ))
#define PMA_RX_MGS_CDR_KVCC2_MUXD2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_KVCC2_MUXD2_OFFSET ) ))
#define PMA_RX_MGS_CDR_KVCC2_MUXD3_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_KVCC2_MUXD3_OFFSET ) ))
#define PMA_RX_MGS_CDR_KVCC2_MUXD4_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_KVCC2_MUXD4_OFFSET ) ))
#define PMA_RX_MGS_CDR_UXPPM_CTRL0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_UXPPM_CTRL0_OFFSET ) ))
#define PMA_RX_MGS_CDR_UXPPM_CTRL1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_UXPPM_CTRL1_OFFSET ) ))
#define PMA_RX_MGS_CDR_UXPPM_WATCHDOG_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_UXPPM_WATCHDOG_OFFSET ) ))
#define PMA_RX_MGS_CDR_BRKPPM_CTRL0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_BRKPPM_CTRL0_OFFSET ) ))
#define PMA_RX_MGS_CDR_BRKPPM_CTRL1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_BRKPPM_CTRL1_OFFSET ) ))
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_FINE_PROP_CTRL0_OFFSET ) ))
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_FINE_PROP_CTRL1_OFFSET ) ))
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_FINE_PROP_CTRL2_OFFSET ) ))
#define PMA_RX_MGS_CDR_FINE_PROP_HI_GAIN_CTRL0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_FINE_PROP_HI_GAIN_CTRL0_OFFSET ) ))
#define PMA_RX_MGS_CDR_FINE_PROP_HI_GAIN_CTRL1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_FINE_PROP_HI_GAIN_CTRL1_OFFSET ) ))
#define PMA_RX_MGS_CDR_FINE_PROP_LO_GAIN_CTRL0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_FINE_PROP_LO_GAIN_CTRL0_OFFSET ) ))
#define PMA_RX_MGS_CDR_FINE_PROP_LO_GAIN_CTRL1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_FINE_PROP_LO_GAIN_CTRL1_OFFSET ) ))
#define PMA_RX_MGS_CDR_QPD_ACCUM_MASK_HI_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_QPD_ACCUM_MASK_HI_OFFSET ) ))
#define PMA_RX_MGS_CDR_QPD_ACCUM_MASK_LO_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_QPD_ACCUM_MASK_LO_OFFSET ) ))
#define PMA_RX_MGS_CDR_QPD_ACCUM_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_QPD_ACCUM_CTRL_OFFSET ) ))
#define PMA_RX_MGS_CDR_BBPD_ACCUM_MASK_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_BBPD_ACCUM_MASK_OFFSET ) ))
#define PMA_RX_MGS_CDR_BBPD_ACCUM_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_BBPD_ACCUM_CTRL_OFFSET ) ))
#define PMA_RX_MGS_CDR_RW_SPARE0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_RW_SPARE0_OFFSET ) ))
#define PMA_RX_MGS_CDR_FINE_STAT_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_FINE_STAT_OFFSET ) ))
#define PMA_RX_MGS_CDR_BRKPPM_STAT0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_BRKPPM_STAT0_OFFSET ) ))
#define PMA_RX_MGS_CDR_BRKPPM_STAT1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_BRKPPM_STAT1_OFFSET ) ))
#define PMA_RX_MGS_CDR_BRKPPM_STAT2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_BRKPPM_STAT2_OFFSET ) ))
#define PMA_RX_MGS_CDR_UXPPM_STAT_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_UXPPM_STAT_OFFSET ) ))
#define PMA_RX_MGS_CDR_UXPPM_TEST_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_UXPPM_TEST_0_OFFSET ) ))
#define PMA_RX_MGS_CDR_UXPPM_TEST_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_UXPPM_TEST_1_OFFSET ) ))
#define PMA_RX_MGS_CDR_CALIB_STAT_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_CALIB_STAT_OFFSET ) ))
#define PMA_RX_MGS_CDR_MEAS_STAT_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_MEAS_STAT_OFFSET ) ))
#define PMA_RX_MGS_CDR_TIME2LOCK_STAT_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_TIME2LOCK_STAT_OFFSET ) ))
#define PMA_RX_MGS_CDR_FRACDIV_STAT_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_FRACDIV_STAT_OFFSET ) ))
#define PMA_RX_MGS_CDR_MISC0_STAT_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_MISC0_STAT_OFFSET ) ))
#define PMA_RX_MGS_CDR_MISC1_STAT_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_MISC1_STAT_OFFSET ) ))
#define PMA_RX_MGS_CDR_CSELFINE_STAT_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_CSELFINE_STAT_OFFSET ) ))
#define PMA_RX_MGS_CDR_REFGEN_STAT_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_REFGEN_STAT_OFFSET ) ))
#define PMA_RX_MGS_CDR_MISC3_STAT_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_MISC3_STAT_OFFSET ) ))
#define PMA_RX_MGS_CDR_KVCC_STAT_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_KVCC_STAT_0_OFFSET ) ))
#define PMA_RX_MGS_CDR_KVCC_STAT_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_KVCC_STAT_1_OFFSET ) ))
#define PMA_RX_MGS_CDR_FEEDFWRDGAIN_STAT_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_FEEDFWRDGAIN_STAT_OFFSET ) ))
#define PMA_RX_MGS_CDR_CAP_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_CAP_CTRL_OFFSET ) ))
#define PMA_RX_MGS_CDR_VOTE_STAT_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_VOTE_STAT_OFFSET ) ))
#define PMA_RX_MGS_CDR_CODE_STAT_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_CODE_STAT_OFFSET ) ))
#define PMA_RX_MGS_CDR_RO_SPARE_ANA2DIG_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_RO_SPARE_ANA2DIG_OFFSET ) ))
#define PMA_RX_MGS_CDR_L2R_LOCKTIME_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_L2R_LOCKTIME_OFFSET ) ))
#define PMA_RX_MGS_CDR_L2D_LOCKTIME_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_L2D_LOCKTIME_OFFSET ) ))
#define PMA_RX_MGS_CDR_QPD_ACCUM_STAT_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_QPD_ACCUM_STAT_OFFSET ) ))
#define PMA_RX_MGS_CDR_BBPD_ACCUM_STAT_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_BBPD_ACCUM_STAT_OFFSET ) ))
#define PMA_RX_MGS_CDR_RO_SPARE_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CDR_RO_SPARE_OFFSET ) ))
#define PMA_RX_MGS_MODE_SEL_CFG0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_MODE_SEL_CFG0_OFFSET ) ))
#define PMA_RX_MGS_MODE_SEL_CFG1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_MODE_SEL_CFG1_OFFSET ) ))
#define PMA_RX_MGS_MODE_SEL_CFG2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_MODE_SEL_CFG2_OFFSET ) ))
#define PMA_RX_MGS_MODE_SEL_CFG3_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_MODE_SEL_CFG3_OFFSET ) ))
#define PMA_RX_MGS_MODE_SEL_CFG4_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_MODE_SEL_CFG4_OFFSET ) ))
#define PMA_RX_MGS_MODE_SEL_STAT0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_MODE_SEL_STAT0_OFFSET ) ))
#define PMA_RX_MGS_MODE_SEL_STAT1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_MODE_SEL_STAT1_OFFSET ) ))
#define PMA_RX_MGS_MODE_SEL_STAT2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_MODE_SEL_STAT2_OFFSET ) ))
#define PMA_RX_MGS_ADCSKEWDET_CALASSIST_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_ADCSKEWDET_CALASSIST_CTRL_OFFSET ) ))
#define PMA_RX_MGS_ADCSKEWDET_CALASSIST_STAT_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_ADCSKEWDET_CALASSIST_STAT_OFFSET ) ))
#define PMA_RX_MSG_LANE_CHARGEPUMP_CALASSIST_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_LANE_CHARGEPUMP_CALASSIST_CTRL_OFFSET ) ))
#define PMA_RX_MSG_LANE_CHARGEPUMP_CALASSIST_STAT_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MSG_LANE_CHARGEPUMP_CALASSIST_STAT_OFFSET ) ))
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CMPOUT_CALASSIST_CTRL0_OFFSET ) ))
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CMPOUT_CALASSIST_CTRL1_OFFSET ) ))
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CMPOUT_CALASSIST_CTRL2_OFFSET ) ))
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL3_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CMPOUT_CALASSIST_CTRL3_OFFSET ) ))
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL4_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CMPOUT_CALASSIST_CTRL4_OFFSET ) ))
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL5_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CMPOUT_CALASSIST_CTRL5_OFFSET ) ))
#define PMA_RX_MGS_CMPOUT_CALASSIST_STAT_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_CMPOUT_CALASSIST_STAT_OFFSET ) ))
#define PMA_RX_MGS_RW_SPARE_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_RW_SPARE_0_OFFSET ) ))
#define PMA_RX_MGS_RW_SPARE_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_RW_SPARE_1_OFFSET ) ))
#define PMA_RX_MGS_RW_SPARE_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_RW_SPARE_2_OFFSET ) ))
#define PMA_RX_MGS_RW_SPARE_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_RW_SPARE_3_OFFSET ) ))
#define PMA_RX_MGS_RO_SPARE_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_RO_SPARE_0_OFFSET ) ))
#define PMA_RX_MGS_RO_SPARE_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RX_MGS_RO_SPARE_1_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CAR_CFG register description at address offset 0x0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_car_cfg
  * Rx clock and reset config
  */

typedef union {
  struct {
    uint32_t RXFSM_CKEN_OVREN : 1;
    ///< FSM clock enable override enable.  When this is set, the FSM main
    ///< clock can be disable/enable by cmn_fsm_cken_ovr.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXFSM_CKEN_OVR : 1;
    ///< FSM clock enable override value
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RXCLKS2P_LOCOVREN : 1;
    ///< Rx S2P clock keepalive clock select ovrride enable.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t RXCLKWORD_LOCOVREN : 1;
    ///< Rx Word clock keepalive clock select ovrride enable.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RXCLKPOSTDIV_LOCOVREN : 1;
    ///< Rx PostDiv clock keepalive clock select ovrride enable.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RXCLKAUTONEG_LOCOVREN : 1;
    ///< Rx AutoNeg clock keepalive clock select ovrride enable.
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t RXCLKS2P_KEEPALIVE_EN_B_LOCOVR : 1;
    ///< Rx S2P Clock - keepalive clock enable override.  When this is set
    ///< to '0' the Rx S2P clock will be forced to run in keepalive clock
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t RXCLKWORD_KEEPALIVE_EN_B_LOCOVR : 1;
    ///< Rx Word Clock - keepalive clock enable override.  When this is set
    ///< to '0' the Rx Word clock will be forced to run in keepalive clock
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t RXCLKPOSTDIV_KEEPALIVE_EN_B_LOCOVR : 1;
    ///< Rx PostDiv Clock - keepalive clock enable override.  When this is
    ///< set to '0' the Rx Word clock will be forced to run in keepalive clock
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RXCLKAUTONEG_KEEPALIVE_EN_B_LOCOVR : 1;
    ///< Rx Autoneg Clock - keepalive clock enable override.  When this is
    ///< set to '0' the Rx Word clock will be forced to run in keepalive clock
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t PMA2PCSRXWORD_KEEPALIVE_FAST_SEL : 1;
    ///< Select keepalive clock source for pma2pcs rxword clock. 0 - keepalive
    ///< slow; 1 - keepalive fast
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RXPOSTDIV_KEEPALIVE_FAST_SEL : 1;
    ///< Select keepalive clock source for Rx Postdiv clock. 0 - keepalive
    ///< slow; 1 - keepalive fast
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t RXPOSTDIV_WAIT_FOR_LOCK_DISABLE : 1;
    ///< Disable waiting for Rx CDR clock for Rx Postdiv clock switch to PostDiv
    ///< clock
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t RXAUTONEG_WAIT_FOR_LOCK_DISABLE : 1;
    ///< Disable waiting for Rx CDR clock for Rx AutoNeg clock switch to PostDiv
    ///< clock
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t RXCLKGATER_LOCOVREN : 1;
    ///< Rx Word clock keepalive clock gater ovrride enable.
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t RXCLKGATER_KEEPALIVE_EN_B_LOCOVR : 1;
    ///< Rx Word Clock - keepalive clock gater override value.  When this is
    ///< set to '0' the Rx Word clock will gate the o_ck_s2pword_clkgen_gated/o_ck_rx2tx_s2pword/o_ck_rxword/o_ck_rxdat_word_copy
    ///< clocks.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RXCOMP_CLKDIV_RATIO : 2;
    ///< Rx calibration comparator sample clock divider.  It steps down the
    ///< main clock to be used for calibration comparator in APMA
    ///< 0: div1; 1: div2; 2 div 4; 3; div 8
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t RXCLKXING_LOCOVREN : 1;
    ///< RX Clock Crossing S2P to RxWORD overrie enable
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t RXCLKXING_S2P_TO_RXWORD_EN_LOCOVR : 1;
    ///< Set reset value to rst_adcsar_clgc_b_nt. When this is set to '1' the
    ///< irst_adcsar_clgc_b_nt be forced to 1
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t RXADCSAR_LOCOVREN : 1;
    ///< Rx ADC SAR CLGC Reset Override Enable
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t RXADCSAR_CLGC_RST_B_LOCOVR : 1;
    ///< Rx ADC SAR CLGC Reset Override
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t CDR_FBDIV_TO_DPMA_KEEPALIVE_SLOW_EN_B : 1;
    ///< CDR Feedback Div Clock. 0: keepalive clock, 1: CDR Feedback Div clock
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t REFCKMUX_RX_TO_DPMA_KEEPALIVE_SLOW_EN_B : 1;
    ///< RefCk Mux Rx Clock. 0: keepalive clock, 1: RefCk Mux Rx clock
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t RXDCO_DITHER_KEEPALIVE_SLOW_EN_B : 1;
    ///< DCO Dither Clock. 0: keepalive clock, 1: DCO Dither clock
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t RXDCO_PFD_UPDNSMPL_KEEPALIVE_SLOW_EN_B : 1;
    ///< DCO PFD UpDn Sample Clock. 0: keepalive clock, 1: DCO PFD UpDn Sample
    ///< clock
    ///< AccessType="RW" BitOffset="25" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="26" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_car_cfg_reg_t;

#define PMA_RX_MGS_CAR_CFG_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CAR_CFG_RD_MASK (0x03ffffffU)
#define PMA_RX_MGS_CAR_CFG_WR_MASK (0x03ffffffU)


///< FSM clock enable override enable.  When this is set, the FSM main
///< clock can be disable/enable by cmn_fsm_cken_ovr.
#define PMA_RX_MGS_CAR_CFG_RXFSM_CKEN_OVREN_BF_OFF ( 0)
#define PMA_RX_MGS_CAR_CFG_RXFSM_CKEN_OVREN_BF_WID ( 1)
#define PMA_RX_MGS_CAR_CFG_RXFSM_CKEN_OVREN_BF_MSK (0x00000001)
#define PMA_RX_MGS_CAR_CFG_RXFSM_CKEN_OVREN_BF_DEF (0x00000000)

///< FSM clock enable override value
#define PMA_RX_MGS_CAR_CFG_RXFSM_CKEN_OVR_BF_OFF ( 1)
#define PMA_RX_MGS_CAR_CFG_RXFSM_CKEN_OVR_BF_WID ( 1)
#define PMA_RX_MGS_CAR_CFG_RXFSM_CKEN_OVR_BF_MSK (0x00000002)
#define PMA_RX_MGS_CAR_CFG_RXFSM_CKEN_OVR_BF_DEF (0x00000000)

///< Rx S2P clock keepalive clock select ovrride enable.
#define PMA_RX_MGS_CAR_CFG_RXCLKS2P_LOCOVREN_BF_OFF ( 2)
#define PMA_RX_MGS_CAR_CFG_RXCLKS2P_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_CAR_CFG_RXCLKS2P_LOCOVREN_BF_MSK (0x00000004)
#define PMA_RX_MGS_CAR_CFG_RXCLKS2P_LOCOVREN_BF_DEF (0x00000000)

///< Rx Word clock keepalive clock select ovrride enable.
#define PMA_RX_MGS_CAR_CFG_RXCLKWORD_LOCOVREN_BF_OFF ( 3)
#define PMA_RX_MGS_CAR_CFG_RXCLKWORD_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_CAR_CFG_RXCLKWORD_LOCOVREN_BF_MSK (0x00000008)
#define PMA_RX_MGS_CAR_CFG_RXCLKWORD_LOCOVREN_BF_DEF (0x00000000)

///< Rx PostDiv clock keepalive clock select ovrride enable.
#define PMA_RX_MGS_CAR_CFG_RXCLKPOSTDIV_LOCOVREN_BF_OFF ( 4)
#define PMA_RX_MGS_CAR_CFG_RXCLKPOSTDIV_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_CAR_CFG_RXCLKPOSTDIV_LOCOVREN_BF_MSK (0x00000010)
#define PMA_RX_MGS_CAR_CFG_RXCLKPOSTDIV_LOCOVREN_BF_DEF (0x00000000)

///< Rx AutoNeg clock keepalive clock select ovrride enable.
#define PMA_RX_MGS_CAR_CFG_RXCLKAUTONEG_LOCOVREN_BF_OFF ( 5)
#define PMA_RX_MGS_CAR_CFG_RXCLKAUTONEG_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_CAR_CFG_RXCLKAUTONEG_LOCOVREN_BF_MSK (0x00000020)
#define PMA_RX_MGS_CAR_CFG_RXCLKAUTONEG_LOCOVREN_BF_DEF (0x00000000)

///< Rx S2P Clock - keepalive clock enable override.  When this is set
///< to '0' the Rx S2P clock will be forced to run in keepalive clock
#define PMA_RX_MGS_CAR_CFG_RXCLKS2P_KEEPALIVE_EN_B_LOCOVR_BF_OFF ( 6)
#define PMA_RX_MGS_CAR_CFG_RXCLKS2P_KEEPALIVE_EN_B_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_CAR_CFG_RXCLKS2P_KEEPALIVE_EN_B_LOCOVR_BF_MSK (0x00000040)
#define PMA_RX_MGS_CAR_CFG_RXCLKS2P_KEEPALIVE_EN_B_LOCOVR_BF_DEF (0x00000000)

///< Rx Word Clock - keepalive clock enable override.  When this is set
///< to '0' the Rx Word clock will be forced to run in keepalive clock
#define PMA_RX_MGS_CAR_CFG_RXCLKWORD_KEEPALIVE_EN_B_LOCOVR_BF_OFF ( 7)
#define PMA_RX_MGS_CAR_CFG_RXCLKWORD_KEEPALIVE_EN_B_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_CAR_CFG_RXCLKWORD_KEEPALIVE_EN_B_LOCOVR_BF_MSK (0x00000080)
#define PMA_RX_MGS_CAR_CFG_RXCLKWORD_KEEPALIVE_EN_B_LOCOVR_BF_DEF (0x00000000)

///< Rx PostDiv Clock - keepalive clock enable override.  When this is
///< set to '0' the Rx Word clock will be forced to run in keepalive clock
#define PMA_RX_MGS_CAR_CFG_RXCLKPOSTDIV_KEEPALIVE_EN_B_LOCOVR_BF_OFF ( 8)
#define PMA_RX_MGS_CAR_CFG_RXCLKPOSTDIV_KEEPALIVE_EN_B_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_CAR_CFG_RXCLKPOSTDIV_KEEPALIVE_EN_B_LOCOVR_BF_MSK (0x00000100)
#define PMA_RX_MGS_CAR_CFG_RXCLKPOSTDIV_KEEPALIVE_EN_B_LOCOVR_BF_DEF (0x00000000)

///< Rx Autoneg Clock - keepalive clock enable override.  When this is
///< set to '0' the Rx Word clock will be forced to run in keepalive clock
#define PMA_RX_MGS_CAR_CFG_RXCLKAUTONEG_KEEPALIVE_EN_B_LOCOVR_BF_OFF ( 9)
#define PMA_RX_MGS_CAR_CFG_RXCLKAUTONEG_KEEPALIVE_EN_B_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_CAR_CFG_RXCLKAUTONEG_KEEPALIVE_EN_B_LOCOVR_BF_MSK (0x00000200)
#define PMA_RX_MGS_CAR_CFG_RXCLKAUTONEG_KEEPALIVE_EN_B_LOCOVR_BF_DEF (0x00000000)

///< Select keepalive clock source for pma2pcs rxword clock. 0 - keepalive
///< slow; 1 - keepalive fast
#define PMA_RX_MGS_CAR_CFG_PMA2PCSRXWORD_KEEPALIVE_FAST_SEL_BF_OFF (10)
#define PMA_RX_MGS_CAR_CFG_PMA2PCSRXWORD_KEEPALIVE_FAST_SEL_BF_WID ( 1)
#define PMA_RX_MGS_CAR_CFG_PMA2PCSRXWORD_KEEPALIVE_FAST_SEL_BF_MSK (0x00000400)
#define PMA_RX_MGS_CAR_CFG_PMA2PCSRXWORD_KEEPALIVE_FAST_SEL_BF_DEF (0x00000000)

///< Select keepalive clock source for Rx Postdiv clock. 0 - keepalive
///< slow; 1 - keepalive fast
#define PMA_RX_MGS_CAR_CFG_RXPOSTDIV_KEEPALIVE_FAST_SEL_BF_OFF (11)
#define PMA_RX_MGS_CAR_CFG_RXPOSTDIV_KEEPALIVE_FAST_SEL_BF_WID ( 1)
#define PMA_RX_MGS_CAR_CFG_RXPOSTDIV_KEEPALIVE_FAST_SEL_BF_MSK (0x00000800)
#define PMA_RX_MGS_CAR_CFG_RXPOSTDIV_KEEPALIVE_FAST_SEL_BF_DEF (0x00000000)

///< Disable waiting for Rx CDR clock for Rx Postdiv clock switch to PostDiv
///< clock
#define PMA_RX_MGS_CAR_CFG_RXPOSTDIV_WAIT_FOR_LOCK_DIS_BF_OFF (12)
#define PMA_RX_MGS_CAR_CFG_RXPOSTDIV_WAIT_FOR_LOCK_DIS_BF_WID ( 1)
#define PMA_RX_MGS_CAR_CFG_RXPOSTDIV_WAIT_FOR_LOCK_DIS_BF_MSK (0x00001000)
#define PMA_RX_MGS_CAR_CFG_RXPOSTDIV_WAIT_FOR_LOCK_DIS_BF_DEF (0x00000000)

///< Disable waiting for Rx CDR clock for Rx AutoNeg clock switch to PostDiv
///< clock
#define PMA_RX_MGS_CAR_CFG_RXAUTONEG_WAIT_FOR_LOCK_DIS_BF_OFF (13)
#define PMA_RX_MGS_CAR_CFG_RXAUTONEG_WAIT_FOR_LOCK_DIS_BF_WID ( 1)
#define PMA_RX_MGS_CAR_CFG_RXAUTONEG_WAIT_FOR_LOCK_DIS_BF_MSK (0x00002000)
#define PMA_RX_MGS_CAR_CFG_RXAUTONEG_WAIT_FOR_LOCK_DIS_BF_DEF (0x00000000)

///< Rx Word clock keepalive clock gater ovrride enable.
#define PMA_RX_MGS_CAR_CFG_RXCLKGATER_LOCOVREN_BF_OFF (14)
#define PMA_RX_MGS_CAR_CFG_RXCLKGATER_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_CAR_CFG_RXCLKGATER_LOCOVREN_BF_MSK (0x00004000)
#define PMA_RX_MGS_CAR_CFG_RXCLKGATER_LOCOVREN_BF_DEF (0x00000000)

///< Rx Word Clock - keepalive clock gater override value.  When this is
///< set to '0' the Rx Word clock will gate the o_ck_s2pword_clkgen_gated/o_ck_rx2tx_s2pword/o_ck_rxword/o_ck_rxdat_word_copy
///< clocks.
#define PMA_RX_MGS_CAR_CFG_RXCLKGATER_KEEPALIVE_EN_B_LOCOVR_BF_OFF (15)
#define PMA_RX_MGS_CAR_CFG_RXCLKGATER_KEEPALIVE_EN_B_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_CAR_CFG_RXCLKGATER_KEEPALIVE_EN_B_LOCOVR_BF_MSK (0x00008000)
#define PMA_RX_MGS_CAR_CFG_RXCLKGATER_KEEPALIVE_EN_B_LOCOVR_BF_DEF (0x00000000)

///< Rx calibration comparator sample clock divider.  It steps down the
///< main clock to be used for calibration comparator in APMA
///< 0: div1; 1: div2; 2 div 4; 3; div 8
#define PMA_RX_MGS_CAR_CFG_RXCOMP_CLKDIV_RATIO_BF_OFF (16)
#define PMA_RX_MGS_CAR_CFG_RXCOMP_CLKDIV_RATIO_BF_WID ( 2)
#define PMA_RX_MGS_CAR_CFG_RXCOMP_CLKDIV_RATIO_BF_MSK (0x00030000)
#define PMA_RX_MGS_CAR_CFG_RXCOMP_CLKDIV_RATIO_BF_DEF (0x00000000)

///< RX Clock Crossing S2P to RxWORD overrie enable
#define PMA_RX_MGS_CAR_CFG_RXCLKXING_LOCOVREN_BF_OFF (18)
#define PMA_RX_MGS_CAR_CFG_RXCLKXING_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_CAR_CFG_RXCLKXING_LOCOVREN_BF_MSK (0x00040000)
#define PMA_RX_MGS_CAR_CFG_RXCLKXING_LOCOVREN_BF_DEF (0x00000000)

///< Set reset value to rst_adcsar_clgc_b_nt. When this is set to '1' the
///< irst_adcsar_clgc_b_nt be forced to 1
#define PMA_RX_MGS_CAR_CFG_RXCLKXING_S2P_TO_RXWORD_EN_LOCOVR_BF_OFF (19)
#define PMA_RX_MGS_CAR_CFG_RXCLKXING_S2P_TO_RXWORD_EN_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_CAR_CFG_RXCLKXING_S2P_TO_RXWORD_EN_LOCOVR_BF_MSK (0x00080000)
#define PMA_RX_MGS_CAR_CFG_RXCLKXING_S2P_TO_RXWORD_EN_LOCOVR_BF_DEF (0x00000000)

///< Rx ADC SAR CLGC Reset Override Enable
#define PMA_RX_MGS_CAR_CFG_RXADCSAR_LOCOVREN_BF_OFF (20)
#define PMA_RX_MGS_CAR_CFG_RXADCSAR_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_CAR_CFG_RXADCSAR_LOCOVREN_BF_MSK (0x00100000)
#define PMA_RX_MGS_CAR_CFG_RXADCSAR_LOCOVREN_BF_DEF (0x00000000)

///< Rx ADC SAR CLGC Reset Override
#define PMA_RX_MGS_CAR_CFG_RXADCSAR_CLGC_RST_B_LOCOVR_BF_OFF (21)
#define PMA_RX_MGS_CAR_CFG_RXADCSAR_CLGC_RST_B_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_CAR_CFG_RXADCSAR_CLGC_RST_B_LOCOVR_BF_MSK (0x00200000)
#define PMA_RX_MGS_CAR_CFG_RXADCSAR_CLGC_RST_B_LOCOVR_BF_DEF (0x00000000)

///< CDR Feedback Div Clock. 0: keepalive clock, 1: CDR Feedback Div clock
#define PMA_RX_MGS_CAR_CFG_CDR_FBDIV_TO_DPMA_KEEPALIVE_SLOW_EN_B_BF_OFF (22)
#define PMA_RX_MGS_CAR_CFG_CDR_FBDIV_TO_DPMA_KEEPALIVE_SLOW_EN_B_BF_WID ( 1)
#define PMA_RX_MGS_CAR_CFG_CDR_FBDIV_TO_DPMA_KEEPALIVE_SLOW_EN_B_BF_MSK (0x00400000)
#define PMA_RX_MGS_CAR_CFG_CDR_FBDIV_TO_DPMA_KEEPALIVE_SLOW_EN_B_BF_DEF (0x00000000)

///< RefCk Mux Rx Clock. 0: keepalive clock, 1: RefCk Mux Rx clock
#define PMA_RX_MGS_CAR_CFG_REFCKMUX_RX_TO_DPMA_KEEPALIVE_SLOW_EN_B_BF_OFF (23)
#define PMA_RX_MGS_CAR_CFG_REFCKMUX_RX_TO_DPMA_KEEPALIVE_SLOW_EN_B_BF_WID ( 1)
#define PMA_RX_MGS_CAR_CFG_REFCKMUX_RX_TO_DPMA_KEEPALIVE_SLOW_EN_B_BF_MSK (0x00800000)
#define PMA_RX_MGS_CAR_CFG_REFCKMUX_RX_TO_DPMA_KEEPALIVE_SLOW_EN_B_BF_DEF (0x00000000)

///< DCO Dither Clock. 0: keepalive clock, 1: DCO Dither clock
#define PMA_RX_MGS_CAR_CFG_RXDCO_DITHER_KEEPALIVE_SLOW_EN_B_BF_OFF (24)
#define PMA_RX_MGS_CAR_CFG_RXDCO_DITHER_KEEPALIVE_SLOW_EN_B_BF_WID ( 1)
#define PMA_RX_MGS_CAR_CFG_RXDCO_DITHER_KEEPALIVE_SLOW_EN_B_BF_MSK (0x01000000)
#define PMA_RX_MGS_CAR_CFG_RXDCO_DITHER_KEEPALIVE_SLOW_EN_B_BF_DEF (0x00000000)

///< DCO PFD UpDn Sample Clock. 0: keepalive clock, 1: DCO PFD UpDn Sample
///< clock
#define PMA_RX_MGS_CAR_CFG_RXDCO_PFD_UPDNSMPL_KEEPALIVE_SLOW_EN_B_BF_OFF (25)
#define PMA_RX_MGS_CAR_CFG_RXDCO_PFD_UPDNSMPL_KEEPALIVE_SLOW_EN_B_BF_WID ( 1)
#define PMA_RX_MGS_CAR_CFG_RXDCO_PFD_UPDNSMPL_KEEPALIVE_SLOW_EN_B_BF_MSK (0x02000000)
#define PMA_RX_MGS_CAR_CFG_RXDCO_PFD_UPDNSMPL_KEEPALIVE_SLOW_EN_B_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CAR_CFG_RO register description at address offset 0x4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_car_cfg_ro
  * Rx clock and reset config readback
  */

typedef union {
  struct {
    uint32_t RXCLK_RXWORD_STAT : 2;
    ///< RX Clock state.  2'b01: keepalive clock, 2'b10: Rx Word clock
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RXCLK_S2PWORD_STAT : 2;
    ///< S2P Clock state.  2'b01: keepalive clock, 2'b10: S2P Word clock
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t RXCLKS2P_KEEPALIVE_EN_B_LOC : 1;
    ///< Rx S2P Clock - keepalive clock enable.
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t RXCLKWORD_KEEPALIVE_EN_B_LOC : 1;
    ///< Rx Word Clock - keepalive clock enable.
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t RXCLKPOSTDIV_KEEPALIVE_EN_B_LOC : 1;
    ///< Rx PostDiv Clock - keepalive clock enable.
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t RXCLKAUTONEG_KEEPALIVE_EN_B_LOC : 1;
    ///< Rx AutoNeg Clock - keepalive clock enable.
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t RXCLKGATER_KEEPALIVE_EN_B_LOC : 1;
    ///< Rx Word Clock - keepalive clock gater enable.
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t RXCLK_PMA2PCSRXWORD_KEEPALIVE_STAT : 2;
    ///< Selected keepalive clock source for pma2pcs rxword clock. 2'b01 -
    ///< keepalive slow; 2'b10 - keepalive fast
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t RXPOSTDIV_KEEPALIVE_STAT : 2;
    ///< Selected keepalive clock source for Rx Postdiv clock. 0 - keepalive
    ///< slow; 1 - keepalive fast
    ///< AccessType="RO/V" BitOffset="11" ResetValue="0x0"
    uint32_t RXCLK_POSTDIV_STAT : 2;
    ///< Rx Postdiv Clock state - 2'b01: keepalive clock, 2'b10, Rx Post Div
    ///< clock
    ///< AccessType="RO/V" BitOffset="13" ResetValue="0x0"
    uint32_t RXCLK_AUTONEG_STAT : 2;
    ///< Rx AutoNeg Clock state - 2'b01: keepalive clock, 2'b10, Rx AutoNeg
    ///< clock
    ///< AccessType="RO/V" BitOffset="15" ResetValue="0x0"
    uint32_t RXADCSAR_CLGC_RST_B_LOC : 1;
    ///< Rx ADC SAR CLGC Reset
    ///< AccessType="RO/V" BitOffset="17" ResetValue="0x0"
    uint32_t RXCLKXING_S2P_TO_RXWORD_EN_LOC : 1;
    ///< Set reset value to rst_adcsar_clgc_b_nt
    ///< AccessType="RO/V" BitOffset="18" ResetValue="0x0"
    uint32_t CDR_FBDIV_TO_DPMA_KEEPALIVE_SLOW_STAT : 2;
    ///< CDR Feedback Div Clock state. 2'b01: keepalive clock, 2'b10: CDR Feedback
    ///< Div clock
    ///< AccessType="RO/V" BitOffset="19" ResetValue="0x0"
    uint32_t REFCKMUX_RX_TO_DPMA_KEEPALIVE_SLOW_STAT : 2;
    ///< RefCk Mux Rx Clock state. 2'b01: keepalive clock, 2'b10: RefCk Mux
    ///< Rx clock
    ///< AccessType="RO/V" BitOffset="21" ResetValue="0x0"
    uint32_t RXDCO_DITHER_KEEPALIVE_SLOW_STAT : 2;
    ///< DCO Dither Clock state. 2'b01: keepalive clock, 2'b10: DCO Dither
    ///< clock
    ///< AccessType="RO/V" BitOffset="23" ResetValue="0x0"
    uint32_t RXDCO_PFD_UPDNSMPL_KEEPALIVE_SLOW_STAT : 2;
    ///< DCO PFD UpDn Sample Clock state. 2'b01: keepalive clock, 2'b10: DCO
    ///< PFD UpDn Sample clock
    ///< AccessType="RO/V" BitOffset="25" ResetValue="0x0"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="27" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_car_cfg_ro_reg_t;

#define PMA_RX_MGS_CAR_CFG_RO_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CAR_CFG_RO_RD_MASK (0x07ffffffU)
#define PMA_RX_MGS_CAR_CFG_RO_WR_MASK (0x00000000U)


///< RX Clock state.  2'b01: keepalive clock, 2'b10: Rx Word clock
#define PMA_RX_MGS_CAR_CFG_RO_RXCLK_RXWORD_STAT_BF_OFF ( 0)
#define PMA_RX_MGS_CAR_CFG_RO_RXCLK_RXWORD_STAT_BF_WID ( 2)
#define PMA_RX_MGS_CAR_CFG_RO_RXCLK_RXWORD_STAT_BF_MSK (0x00000003)
#define PMA_RX_MGS_CAR_CFG_RO_RXCLK_RXWORD_STAT_BF_DEF (0x00000000)

///< S2P Clock state.  2'b01: keepalive clock, 2'b10: S2P Word clock
#define PMA_RX_MGS_CAR_CFG_RO_RXCLK_S2PWORD_STAT_BF_OFF ( 2)
#define PMA_RX_MGS_CAR_CFG_RO_RXCLK_S2PWORD_STAT_BF_WID ( 2)
#define PMA_RX_MGS_CAR_CFG_RO_RXCLK_S2PWORD_STAT_BF_MSK (0x0000000C)
#define PMA_RX_MGS_CAR_CFG_RO_RXCLK_S2PWORD_STAT_BF_DEF (0x00000000)

///< Rx S2P Clock - keepalive clock enable.
#define PMA_RX_MGS_CAR_CFG_RO_RXCLKS2P_KEEPALIVE_EN_B_LOC_BF_OFF ( 4)
#define PMA_RX_MGS_CAR_CFG_RO_RXCLKS2P_KEEPALIVE_EN_B_LOC_BF_WID ( 1)
#define PMA_RX_MGS_CAR_CFG_RO_RXCLKS2P_KEEPALIVE_EN_B_LOC_BF_MSK (0x00000010)
#define PMA_RX_MGS_CAR_CFG_RO_RXCLKS2P_KEEPALIVE_EN_B_LOC_BF_DEF (0x00000000)

///< Rx Word Clock - keepalive clock enable.
#define PMA_RX_MGS_CAR_CFG_RO_RXCLKWORD_KEEPALIVE_EN_B_LOC_BF_OFF ( 5)
#define PMA_RX_MGS_CAR_CFG_RO_RXCLKWORD_KEEPALIVE_EN_B_LOC_BF_WID ( 1)
#define PMA_RX_MGS_CAR_CFG_RO_RXCLKWORD_KEEPALIVE_EN_B_LOC_BF_MSK (0x00000020)
#define PMA_RX_MGS_CAR_CFG_RO_RXCLKWORD_KEEPALIVE_EN_B_LOC_BF_DEF (0x00000000)

///< Rx PostDiv Clock - keepalive clock enable.
#define PMA_RX_MGS_CAR_CFG_RO_RXCLKPOSTDIV_KEEPALIVE_EN_B_LOC_BF_OFF ( 6)
#define PMA_RX_MGS_CAR_CFG_RO_RXCLKPOSTDIV_KEEPALIVE_EN_B_LOC_BF_WID ( 1)
#define PMA_RX_MGS_CAR_CFG_RO_RXCLKPOSTDIV_KEEPALIVE_EN_B_LOC_BF_MSK (0x00000040)
#define PMA_RX_MGS_CAR_CFG_RO_RXCLKPOSTDIV_KEEPALIVE_EN_B_LOC_BF_DEF (0x00000000)

///< Rx AutoNeg Clock - keepalive clock enable.
#define PMA_RX_MGS_CAR_CFG_RO_RXCLKAUTONEG_KEEPALIVE_EN_B_LOC_BF_OFF ( 7)
#define PMA_RX_MGS_CAR_CFG_RO_RXCLKAUTONEG_KEEPALIVE_EN_B_LOC_BF_WID ( 1)
#define PMA_RX_MGS_CAR_CFG_RO_RXCLKAUTONEG_KEEPALIVE_EN_B_LOC_BF_MSK (0x00000080)
#define PMA_RX_MGS_CAR_CFG_RO_RXCLKAUTONEG_KEEPALIVE_EN_B_LOC_BF_DEF (0x00000000)

///< Rx Word Clock - keepalive clock gater enable.
#define PMA_RX_MGS_CAR_CFG_RO_RXCLKGATER_KEEPALIVE_EN_B_LOC_BF_OFF ( 8)
#define PMA_RX_MGS_CAR_CFG_RO_RXCLKGATER_KEEPALIVE_EN_B_LOC_BF_WID ( 1)
#define PMA_RX_MGS_CAR_CFG_RO_RXCLKGATER_KEEPALIVE_EN_B_LOC_BF_MSK (0x00000100)
#define PMA_RX_MGS_CAR_CFG_RO_RXCLKGATER_KEEPALIVE_EN_B_LOC_BF_DEF (0x00000000)

///< Selected keepalive clock source for pma2pcs rxword clock. 2'b01 -
///< keepalive slow; 2'b10 - keepalive fast
#define PMA_RX_MGS_CAR_CFG_RO_RXCLK_PMA2PCSRXWORD_KEEPALIVE_STAT_BF_OFF ( 9)
#define PMA_RX_MGS_CAR_CFG_RO_RXCLK_PMA2PCSRXWORD_KEEPALIVE_STAT_BF_WID ( 2)
#define PMA_RX_MGS_CAR_CFG_RO_RXCLK_PMA2PCSRXWORD_KEEPALIVE_STAT_BF_MSK (0x00000600)
#define PMA_RX_MGS_CAR_CFG_RO_RXCLK_PMA2PCSRXWORD_KEEPALIVE_STAT_BF_DEF (0x00000000)

///< Selected keepalive clock source for Rx Postdiv clock. 0 - keepalive
///< slow; 1 - keepalive fast
#define PMA_RX_MGS_CAR_CFG_RO_RXPOSTDIV_KEEPALIVE_STAT_BF_OFF (11)
#define PMA_RX_MGS_CAR_CFG_RO_RXPOSTDIV_KEEPALIVE_STAT_BF_WID ( 2)
#define PMA_RX_MGS_CAR_CFG_RO_RXPOSTDIV_KEEPALIVE_STAT_BF_MSK (0x00001800)
#define PMA_RX_MGS_CAR_CFG_RO_RXPOSTDIV_KEEPALIVE_STAT_BF_DEF (0x00000000)

///< Rx Postdiv Clock state - 2'b01: keepalive clock, 2'b10, Rx Post Div
///< clock
#define PMA_RX_MGS_CAR_CFG_RO_RXCLK_POSTDIV_STAT_BF_OFF (13)
#define PMA_RX_MGS_CAR_CFG_RO_RXCLK_POSTDIV_STAT_BF_WID ( 2)
#define PMA_RX_MGS_CAR_CFG_RO_RXCLK_POSTDIV_STAT_BF_MSK (0x00006000)
#define PMA_RX_MGS_CAR_CFG_RO_RXCLK_POSTDIV_STAT_BF_DEF (0x00000000)

///< Rx AutoNeg Clock state - 2'b01: keepalive clock, 2'b10, Rx AutoNeg
///< clock
#define PMA_RX_MGS_CAR_CFG_RO_RXCLK_AUTONEG_STAT_BF_OFF (15)
#define PMA_RX_MGS_CAR_CFG_RO_RXCLK_AUTONEG_STAT_BF_WID ( 2)
#define PMA_RX_MGS_CAR_CFG_RO_RXCLK_AUTONEG_STAT_BF_MSK (0x00018000)
#define PMA_RX_MGS_CAR_CFG_RO_RXCLK_AUTONEG_STAT_BF_DEF (0x00000000)

///< Rx ADC SAR CLGC Reset
#define PMA_RX_MGS_CAR_CFG_RO_RXADCSAR_CLGC_RST_B_LOC_BF_OFF (17)
#define PMA_RX_MGS_CAR_CFG_RO_RXADCSAR_CLGC_RST_B_LOC_BF_WID ( 1)
#define PMA_RX_MGS_CAR_CFG_RO_RXADCSAR_CLGC_RST_B_LOC_BF_MSK (0x00020000)
#define PMA_RX_MGS_CAR_CFG_RO_RXADCSAR_CLGC_RST_B_LOC_BF_DEF (0x00000000)

///< Set reset value to rst_adcsar_clgc_b_nt
#define PMA_RX_MGS_CAR_CFG_RO_RXCLKXING_S2P_TO_RXWORD_EN_LOC_BF_OFF (18)
#define PMA_RX_MGS_CAR_CFG_RO_RXCLKXING_S2P_TO_RXWORD_EN_LOC_BF_WID ( 1)
#define PMA_RX_MGS_CAR_CFG_RO_RXCLKXING_S2P_TO_RXWORD_EN_LOC_BF_MSK (0x00040000)
#define PMA_RX_MGS_CAR_CFG_RO_RXCLKXING_S2P_TO_RXWORD_EN_LOC_BF_DEF (0x00000000)

///< CDR Feedback Div Clock state. 2'b01: keepalive clock, 2'b10: CDR Feedback
///< Div clock
#define PMA_RX_MGS_CAR_CFG_RO_CDR_FBDIV_TO_DPMA_KEEPALIVE_SLOW_STAT_BF_OFF (19)
#define PMA_RX_MGS_CAR_CFG_RO_CDR_FBDIV_TO_DPMA_KEEPALIVE_SLOW_STAT_BF_WID ( 2)
#define PMA_RX_MGS_CAR_CFG_RO_CDR_FBDIV_TO_DPMA_KEEPALIVE_SLOW_STAT_BF_MSK (0x00180000)
#define PMA_RX_MGS_CAR_CFG_RO_CDR_FBDIV_TO_DPMA_KEEPALIVE_SLOW_STAT_BF_DEF (0x00000000)

///< RefCk Mux Rx Clock state. 2'b01: keepalive clock, 2'b10: RefCk Mux
///< Rx clock
#define PMA_RX_MGS_CAR_CFG_RO_REFCKMUX_RX_TO_DPMA_KEEPALIVE_SLOW_STAT_BF_OFF (21)
#define PMA_RX_MGS_CAR_CFG_RO_REFCKMUX_RX_TO_DPMA_KEEPALIVE_SLOW_STAT_BF_WID ( 2)
#define PMA_RX_MGS_CAR_CFG_RO_REFCKMUX_RX_TO_DPMA_KEEPALIVE_SLOW_STAT_BF_MSK (0x00600000)
#define PMA_RX_MGS_CAR_CFG_RO_REFCKMUX_RX_TO_DPMA_KEEPALIVE_SLOW_STAT_BF_DEF (0x00000000)

///< DCO Dither Clock state. 2'b01: keepalive clock, 2'b10: DCO Dither
///< clock
#define PMA_RX_MGS_CAR_CFG_RO_RXDCO_DITHER_KEEPALIVE_SLOW_STAT_BF_OFF (23)
#define PMA_RX_MGS_CAR_CFG_RO_RXDCO_DITHER_KEEPALIVE_SLOW_STAT_BF_WID ( 2)
#define PMA_RX_MGS_CAR_CFG_RO_RXDCO_DITHER_KEEPALIVE_SLOW_STAT_BF_MSK (0x01800000)
#define PMA_RX_MGS_CAR_CFG_RO_RXDCO_DITHER_KEEPALIVE_SLOW_STAT_BF_DEF (0x00000000)

///< DCO PFD UpDn Sample Clock state. 2'b01: keepalive clock, 2'b10: DCO
///< PFD UpDn Sample clock
#define PMA_RX_MGS_CAR_CFG_RO_RXDCO_PFD_UPDNSMPL_KEEPALIVE_SLOW_STAT_BF_OFF (25)
#define PMA_RX_MGS_CAR_CFG_RO_RXDCO_PFD_UPDNSMPL_KEEPALIVE_SLOW_STAT_BF_WID ( 2)
#define PMA_RX_MGS_CAR_CFG_RO_RXDCO_PFD_UPDNSMPL_KEEPALIVE_SLOW_STAT_BF_MSK (0x06000000)
#define PMA_RX_MGS_CAR_CFG_RO_RXDCO_PFD_UPDNSMPL_KEEPALIVE_SLOW_STAT_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_SCRATCH_PAD_0 register description at address offset 0x8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_scratch_pad_0
  * Scratch pad
  */

typedef union {
  struct {
    uint32_t RX_SCRATCH_PAD_0 : 32;
    ///< Scratch pad 0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_mgs_scratch_pad_0_reg_t;

#define PMA_RX_MGS_SCRATCH_PAD_0_DEFAULT (0x00000000U)
#define PMA_RX_MGS_SCRATCH_PAD_0_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_SCRATCH_PAD_0_WR_MASK (0xffffffffU)


///< Scratch pad 0
#define PMA_RX_MGS_SCRATCH_PAD_0_RX_SCRATCH_PAD_0_BF_OFF ( 0)
#define PMA_RX_MGS_SCRATCH_PAD_0_RX_SCRATCH_PAD_0_BF_WID (32)
#define PMA_RX_MGS_SCRATCH_PAD_0_RX_SCRATCH_PAD_0_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MGS_SCRATCH_PAD_0_RX_SCRATCH_PAD_0_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_SCRATCH_PAD_1 register description at address offset 0xc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_scratch_pad_1
  * Scratch pad
  */

typedef union {
  struct {
    uint32_t RX_SCRATCH_PAD_1 : 32;
    ///< Scratch pad 1
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_mgs_scratch_pad_1_reg_t;

#define PMA_RX_MGS_SCRATCH_PAD_1_DEFAULT (0x00000000U)
#define PMA_RX_MGS_SCRATCH_PAD_1_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_SCRATCH_PAD_1_WR_MASK (0xffffffffU)


///< Scratch pad 1
#define PMA_RX_MGS_SCRATCH_PAD_1_RX_SCRATCH_PAD_1_BF_OFF ( 0)
#define PMA_RX_MGS_SCRATCH_PAD_1_RX_SCRATCH_PAD_1_BF_WID (32)
#define PMA_RX_MGS_SCRATCH_PAD_1_RX_SCRATCH_PAD_1_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MGS_SCRATCH_PAD_1_RX_SCRATCH_PAD_1_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_SCRATCH_PAD_2 register description at address offset 0x10
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_scratch_pad_2
  * Scratch pad
  */

typedef union {
  struct {
    uint32_t RX_SCRATCH_PAD_2 : 32;
    ///< Scratch pad 2
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_mgs_scratch_pad_2_reg_t;

#define PMA_RX_MGS_SCRATCH_PAD_2_DEFAULT (0x00000000U)
#define PMA_RX_MGS_SCRATCH_PAD_2_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_SCRATCH_PAD_2_WR_MASK (0xffffffffU)


///< Scratch pad 2
#define PMA_RX_MGS_SCRATCH_PAD_2_RX_SCRATCH_PAD_2_BF_OFF ( 0)
#define PMA_RX_MGS_SCRATCH_PAD_2_RX_SCRATCH_PAD_2_BF_WID (32)
#define PMA_RX_MGS_SCRATCH_PAD_2_RX_SCRATCH_PAD_2_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MGS_SCRATCH_PAD_2_RX_SCRATCH_PAD_2_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_SCRATCH_PAD_3 register description at address offset 0x14
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_scratch_pad_3
  * Scratch pad
  */

typedef union {
  struct {
    uint32_t RX_SCRATCH_PAD_3 : 32;
    ///< Scratch pad 3
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_mgs_scratch_pad_3_reg_t;

#define PMA_RX_MGS_SCRATCH_PAD_3_DEFAULT (0x00000000U)
#define PMA_RX_MGS_SCRATCH_PAD_3_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_SCRATCH_PAD_3_WR_MASK (0xffffffffU)


///< Scratch pad 3
#define PMA_RX_MGS_SCRATCH_PAD_3_RX_SCRATCH_PAD_3_BF_OFF ( 0)
#define PMA_RX_MGS_SCRATCH_PAD_3_RX_SCRATCH_PAD_3_BF_WID (32)
#define PMA_RX_MGS_SCRATCH_PAD_3_RX_SCRATCH_PAD_3_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MGS_SCRATCH_PAD_3_RX_SCRATCH_PAD_3_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_SCRATCH_PAD_4 register description at address offset 0x18
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_scratch_pad_4
  * Scratch pad
  */

typedef union {
  struct {
    uint32_t RX_SCRATCH_PAD_4 : 32;
    ///< Scratch pad 4
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_mgs_scratch_pad_4_reg_t;

#define PMA_RX_MGS_SCRATCH_PAD_4_DEFAULT (0x00000000U)
#define PMA_RX_MGS_SCRATCH_PAD_4_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_SCRATCH_PAD_4_WR_MASK (0xffffffffU)


///< Scratch pad 4
#define PMA_RX_MGS_SCRATCH_PAD_4_RX_SCRATCH_PAD_4_BF_OFF ( 0)
#define PMA_RX_MGS_SCRATCH_PAD_4_RX_SCRATCH_PAD_4_BF_WID (32)
#define PMA_RX_MGS_SCRATCH_PAD_4_RX_SCRATCH_PAD_4_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MGS_SCRATCH_PAD_4_RX_SCRATCH_PAD_4_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_SCRATCH_PAD_5 register description at address offset 0x1c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_scratch_pad_5
  * Scratch pad
  */

typedef union {
  struct {
    uint32_t RX_SCRATCH_PAD_5 : 32;
    ///< Scratch pad 5
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_mgs_scratch_pad_5_reg_t;

#define PMA_RX_MGS_SCRATCH_PAD_5_DEFAULT (0x00000000U)
#define PMA_RX_MGS_SCRATCH_PAD_5_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_SCRATCH_PAD_5_WR_MASK (0xffffffffU)


///< Scratch pad 5
#define PMA_RX_MGS_SCRATCH_PAD_5_RX_SCRATCH_PAD_5_BF_OFF ( 0)
#define PMA_RX_MGS_SCRATCH_PAD_5_RX_SCRATCH_PAD_5_BF_WID (32)
#define PMA_RX_MGS_SCRATCH_PAD_5_RX_SCRATCH_PAD_5_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MGS_SCRATCH_PAD_5_RX_SCRATCH_PAD_5_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_SCRATCH_PAD_6 register description at address offset 0x20
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_scratch_pad_6
  * Scratch pad
  */

typedef union {
  struct {
    uint32_t RX_SCRATCH_PAD_6 : 32;
    ///< Scratch pad 6
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_mgs_scratch_pad_6_reg_t;

#define PMA_RX_MGS_SCRATCH_PAD_6_DEFAULT (0x00000000U)
#define PMA_RX_MGS_SCRATCH_PAD_6_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_SCRATCH_PAD_6_WR_MASK (0xffffffffU)


///< Scratch pad 6
#define PMA_RX_MGS_SCRATCH_PAD_6_RX_SCRATCH_PAD_6_BF_OFF ( 0)
#define PMA_RX_MGS_SCRATCH_PAD_6_RX_SCRATCH_PAD_6_BF_WID (32)
#define PMA_RX_MGS_SCRATCH_PAD_6_RX_SCRATCH_PAD_6_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MGS_SCRATCH_PAD_6_RX_SCRATCH_PAD_6_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_SCRATCH_PAD_7 register description at address offset 0x24
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_scratch_pad_7
  * Scratch pad
  */

typedef union {
  struct {
    uint32_t RX_SCRATCH_PAD_7 : 32;
    ///< Scratch pad 7
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_mgs_scratch_pad_7_reg_t;

#define PMA_RX_MGS_SCRATCH_PAD_7_DEFAULT (0x00000000U)
#define PMA_RX_MGS_SCRATCH_PAD_7_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_SCRATCH_PAD_7_WR_MASK (0xffffffffU)


///< Scratch pad 7
#define PMA_RX_MGS_SCRATCH_PAD_7_RX_SCRATCH_PAD_7_BF_OFF ( 0)
#define PMA_RX_MGS_SCRATCH_PAD_7_RX_SCRATCH_PAD_7_BF_WID (32)
#define PMA_RX_MGS_SCRATCH_PAD_7_RX_SCRATCH_PAD_7_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MGS_SCRATCH_PAD_7_RX_SCRATCH_PAD_7_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CTRL_0 register description at address offset 0x28
  *
  * Register default value:        0x00000001
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_ctrl_0
  * Rx Control
  */

typedef union {
  struct {
    uint32_t RX_PAM_BITORDER : 3;
    ///< Rx PAM encoding bit order. Bit 0  - Flips Gray coded bits, Bit 1 -
    ///< Flips precoded bits, Bit 2 - Flips inverted data (polarity) bits
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t RX_POLARITY : 1;
    ///< Rx data polarity. Rx data will be inverted when this bit is set to
    ///< 1
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RXOVERSAMPLE_LOCOVREN : 1;
    ///< Rx oversample enable override enable
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RXOVERSAMPLE_EN_LOCOVR : 1;
    ///< Rx oversample enable override value.  To override the pin i_rx_oversample_en_l[x]_a
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t TX2RXLB_EN : 1;
    ///< Enable for Tx-to-Rx parallel loopback inside DPMA
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t RXLOCK2DATATMR : 8;
    ///< Rx lock-to-data timer
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t RXLOCK2DATATMR_SHORT : 8;
    ///< Rx lock-to-data timer (short vesion)
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RXDAT_LOCOVREN : 1;
    ///< Rx decoded data enable override enable
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t RXDAT_EN_LOCOVR : 1;
    ///< Rx decoded data enable override
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t RXSIG_MODULATION_SCHEME_LOCOVREN : 1;
    ///< Rx signal modulation schcme override enable
    ///< AccessType="RW" BitOffset="25" ResetValue="0x0"
    uint32_t RXSIG_MODULATION_SCHEME_LOCOVR : 2;
    ///< Rx signal modulation schcme override value.  0 - NRZ; 1 - PAM4; 2/3
    ///< - Not used
    ///< AccessType="RW" BitOffset="26" ResetValue="0x0"
    uint32_t TX2RXLB_BUFTIMEDEN : 1;
    ///< Tx-to-Rx  buffer loopback enable override enable
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t RXADC_MORE_PREBUF : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_ctrl_0_reg_t;

#define PMA_RX_MGS_CTRL_0_DEFAULT (0x00000001U)
#define PMA_RX_MGS_CTRL_0_RD_MASK (0x3fffffffU)
#define PMA_RX_MGS_CTRL_0_WR_MASK (0x3fffffffU)


///< Rx PAM encoding bit order. Bit 0  - Flips Gray coded bits, Bit 1 -
///< Flips precoded bits, Bit 2 - Flips inverted data (polarity) bits
#define PMA_RX_MGS_CTRL_0_RX_PAM_BITORDER_BF_OFF ( 0)
#define PMA_RX_MGS_CTRL_0_RX_PAM_BITORDER_BF_WID ( 3)
#define PMA_RX_MGS_CTRL_0_RX_PAM_BITORDER_BF_MSK (0x00000007)
#define PMA_RX_MGS_CTRL_0_RX_PAM_BITORDER_BF_DEF (0x00000001)

///< Rx data polarity. Rx data will be inverted when this bit is set to
///< 1
#define PMA_RX_MGS_CTRL_0_RX_POLARITY_BF_OFF ( 3)
#define PMA_RX_MGS_CTRL_0_RX_POLARITY_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_0_RX_POLARITY_BF_MSK (0x00000008)
#define PMA_RX_MGS_CTRL_0_RX_POLARITY_BF_DEF (0x00000000)

///< Rx oversample enable override enable
#define PMA_RX_MGS_CTRL_0_RXOVERSAMPLE_LOCOVREN_BF_OFF ( 4)
#define PMA_RX_MGS_CTRL_0_RXOVERSAMPLE_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_0_RXOVERSAMPLE_LOCOVREN_BF_MSK (0x00000010)
#define PMA_RX_MGS_CTRL_0_RXOVERSAMPLE_LOCOVREN_BF_DEF (0x00000000)

///< Rx oversample enable override value.  To override the pin i_rx_oversample_en_l[x]_a
#define PMA_RX_MGS_CTRL_0_RXOVERSAMPLE_EN_LOCOVR_BF_OFF ( 5)
#define PMA_RX_MGS_CTRL_0_RXOVERSAMPLE_EN_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_0_RXOVERSAMPLE_EN_LOCOVR_BF_MSK (0x00000020)
#define PMA_RX_MGS_CTRL_0_RXOVERSAMPLE_EN_LOCOVR_BF_DEF (0x00000000)

///< Enable for Tx-to-Rx parallel loopback inside DPMA
#define PMA_RX_MGS_CTRL_0_TX2RXLB_EN_BF_OFF ( 6)
#define PMA_RX_MGS_CTRL_0_TX2RXLB_EN_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_0_TX2RXLB_EN_BF_MSK (0x00000040)
#define PMA_RX_MGS_CTRL_0_TX2RXLB_EN_BF_DEF (0x00000000)

///< Rx lock-to-data timer
#define PMA_RX_MGS_CTRL_0_RXLOCK2DATATMR_BF_OFF ( 7)
#define PMA_RX_MGS_CTRL_0_RXLOCK2DATATMR_BF_WID ( 8)
#define PMA_RX_MGS_CTRL_0_RXLOCK2DATATMR_BF_MSK (0x00007F80)
#define PMA_RX_MGS_CTRL_0_RXLOCK2DATATMR_BF_DEF (0x00000000)

///< Rx lock-to-data timer (short vesion)
#define PMA_RX_MGS_CTRL_0_RXLOCK2DATATMR_SHORT_BF_OFF (15)
#define PMA_RX_MGS_CTRL_0_RXLOCK2DATATMR_SHORT_BF_WID ( 8)
#define PMA_RX_MGS_CTRL_0_RXLOCK2DATATMR_SHORT_BF_MSK (0x007F8000)
#define PMA_RX_MGS_CTRL_0_RXLOCK2DATATMR_SHORT_BF_DEF (0x00000000)

///< Rx decoded data enable override enable
#define PMA_RX_MGS_CTRL_0_RXDAT_LOCOVREN_BF_OFF (23)
#define PMA_RX_MGS_CTRL_0_RXDAT_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_0_RXDAT_LOCOVREN_BF_MSK (0x00800000)
#define PMA_RX_MGS_CTRL_0_RXDAT_LOCOVREN_BF_DEF (0x00000000)

///< Rx decoded data enable override
#define PMA_RX_MGS_CTRL_0_RXDAT_EN_LOCOVR_BF_OFF (24)
#define PMA_RX_MGS_CTRL_0_RXDAT_EN_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_0_RXDAT_EN_LOCOVR_BF_MSK (0x01000000)
#define PMA_RX_MGS_CTRL_0_RXDAT_EN_LOCOVR_BF_DEF (0x00000000)

///< Rx signal modulation schcme override enable
#define PMA_RX_MGS_CTRL_0_RXSIG_MOD_SCHEME_LOCOVREN_BF_OFF (25)
#define PMA_RX_MGS_CTRL_0_RXSIG_MOD_SCHEME_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_0_RXSIG_MOD_SCHEME_LOCOVREN_BF_MSK (0x02000000)
#define PMA_RX_MGS_CTRL_0_RXSIG_MOD_SCHEME_LOCOVREN_BF_DEF (0x00000000)

///< Rx signal modulation schcme override value.  0 - NRZ; 1 - PAM4; 2/3
///< - Not used
#define PMA_RX_MGS_CTRL_0_RXSIG_MOD_SCHEME_LOCOVR_BF_OFF (26)
#define PMA_RX_MGS_CTRL_0_RXSIG_MOD_SCHEME_LOCOVR_BF_WID ( 2)
#define PMA_RX_MGS_CTRL_0_RXSIG_MOD_SCHEME_LOCOVR_BF_MSK (0x0C000000)
#define PMA_RX_MGS_CTRL_0_RXSIG_MOD_SCHEME_LOCOVR_BF_DEF (0x00000000)

///< Tx-to-Rx  buffer loopback enable override enable
#define PMA_RX_MGS_CTRL_0_TX2RXLB_BUFTIMEDEN_BF_OFF (28)
#define PMA_RX_MGS_CTRL_0_TX2RXLB_BUFTIMEDEN_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_0_TX2RXLB_BUFTIMEDEN_BF_MSK (0x10000000)
#define PMA_RX_MGS_CTRL_0_TX2RXLB_BUFTIMEDEN_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_CTRL_0_RXADC_MORE_PREBUF_BF_OFF (29)
#define PMA_RX_MGS_CTRL_0_RXADC_MORE_PREBUF_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_0_RXADC_MORE_PREBUF_BF_MSK (0x20000000)
#define PMA_RX_MGS_CTRL_0_RXADC_MORE_PREBUF_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CTRL_1 register description at address offset 0x2c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_ctrl_1
  * Rx Control
  */

typedef union {
  struct {
    uint32_t RX_FRAC_MODE : 5;
    ///< Rx fractional mode.  Set this bit to 1 when Rx CDRtoRefclock ration
    ///< is not even interger.  Bit[n] = Mode [n]
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_PAM_GRAY_EN_LOCOVREN : 1;
    ///< Rx Gray Enable override enable.  When this is set to '1'. Rx Gray
    ///< Enable will be controlled by Rx_pam_gray_en_locovr
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t RX_PAM_GRAY_EN_LOCOVR : 1;
    ///< Rx  Gray enable override value.
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t RX_PAM_PRECODE_EN_LOCOVREN : 1;
    ///< Rx  Precode enable override enable.  When this is set to '1'. Rx enable
    ///< will be controlled by Rx_pam_precode_en_locovr
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t RX_PAM_PRECODE_EN_LOCOVR : 1;
    ///< Rx Precode enable override value.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_ctrl_1_reg_t;

#define PMA_RX_MGS_CTRL_1_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CTRL_1_RD_MASK (0x000001ffU)
#define PMA_RX_MGS_CTRL_1_WR_MASK (0x000001ffU)


///< Rx fractional mode.  Set this bit to 1 when Rx CDRtoRefclock ration
///< is not even interger.  Bit[n] = Mode [n]
#define PMA_RX_MGS_CTRL_1_RX_FRAC_MODE_BF_OFF ( 0)
#define PMA_RX_MGS_CTRL_1_RX_FRAC_MODE_BF_WID ( 5)
#define PMA_RX_MGS_CTRL_1_RX_FRAC_MODE_BF_MSK (0x0000001F)
#define PMA_RX_MGS_CTRL_1_RX_FRAC_MODE_BF_DEF (0x00000000)

///< Rx Gray Enable override enable.  When this is set to '1'. Rx Gray
///< Enable will be controlled by Rx_pam_gray_en_locovr
#define PMA_RX_MGS_CTRL_1_RX_PAM_GRAY_EN_LOCOVREN_BF_OFF ( 5)
#define PMA_RX_MGS_CTRL_1_RX_PAM_GRAY_EN_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_1_RX_PAM_GRAY_EN_LOCOVREN_BF_MSK (0x00000020)
#define PMA_RX_MGS_CTRL_1_RX_PAM_GRAY_EN_LOCOVREN_BF_DEF (0x00000000)

///< Rx  Gray enable override value.
#define PMA_RX_MGS_CTRL_1_RX_PAM_GRAY_EN_LOCOVR_BF_OFF ( 6)
#define PMA_RX_MGS_CTRL_1_RX_PAM_GRAY_EN_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_1_RX_PAM_GRAY_EN_LOCOVR_BF_MSK (0x00000040)
#define PMA_RX_MGS_CTRL_1_RX_PAM_GRAY_EN_LOCOVR_BF_DEF (0x00000000)

///< Rx  Precode enable override enable.  When this is set to '1'. Rx enable
///< will be controlled by Rx_pam_precode_en_locovr
#define PMA_RX_MGS_CTRL_1_RX_PAM_PRECODE_EN_LOCOVREN_BF_OFF ( 7)
#define PMA_RX_MGS_CTRL_1_RX_PAM_PRECODE_EN_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_1_RX_PAM_PRECODE_EN_LOCOVREN_BF_MSK (0x00000080)
#define PMA_RX_MGS_CTRL_1_RX_PAM_PRECODE_EN_LOCOVREN_BF_DEF (0x00000000)

///< Rx Precode enable override value.
#define PMA_RX_MGS_CTRL_1_RX_PAM_PRECODE_EN_LOCOVR_BF_OFF ( 8)
#define PMA_RX_MGS_CTRL_1_RX_PAM_PRECODE_EN_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_1_RX_PAM_PRECODE_EN_LOCOVR_BF_MSK (0x00000100)
#define PMA_RX_MGS_CTRL_1_RX_PAM_PRECODE_EN_LOCOVR_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CTRL_RO register description at address offset 0x30
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_ctrl_ro
  * Rx Control readback
  */

typedef union {
  struct {
    uint32_t RXOVERSAMPLE_EN_LOC : 1;
    ///< Rx oversample enable pre-override value.  It can be used for DME-encoded
    ///< AN frame or very slow data rates
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RXDAT_EN_LOC : 1;
    ///< Rx decoded data enable pre-override
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t RXSIG_MODULATION_SCHEME_LOC : 2;
    ///< Rx signal modulation schcme pre-override value
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t RX_PAM_GRAY_EN_LOC : 1;
    ///< Rx Gray enable pre-override value.  This is from the pin, i_Rx_pam_gray_en_l[x]
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t RX_PAM_PRECODE_EN_LOC : 1;
    ///< Rx Precode enable pre-override value.  This is from the pin, i_Rx_pam_precode_en_l[x]
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_ctrl_ro_reg_t;

#define PMA_RX_MGS_CTRL_RO_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CTRL_RO_RD_MASK (0x0000003fU)
#define PMA_RX_MGS_CTRL_RO_WR_MASK (0x00000000U)


///< Rx oversample enable pre-override value.  It can be used for DME-encoded
///< AN frame or very slow data rates
#define PMA_RX_MGS_CTRL_RO_RXOVERSAMPLE_EN_LOC_BF_OFF ( 0)
#define PMA_RX_MGS_CTRL_RO_RXOVERSAMPLE_EN_LOC_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_RO_RXOVERSAMPLE_EN_LOC_BF_MSK (0x00000001)
#define PMA_RX_MGS_CTRL_RO_RXOVERSAMPLE_EN_LOC_BF_DEF (0x00000000)

///< Rx decoded data enable pre-override
#define PMA_RX_MGS_CTRL_RO_RXDAT_EN_LOC_BF_OFF ( 1)
#define PMA_RX_MGS_CTRL_RO_RXDAT_EN_LOC_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_RO_RXDAT_EN_LOC_BF_MSK (0x00000002)
#define PMA_RX_MGS_CTRL_RO_RXDAT_EN_LOC_BF_DEF (0x00000000)

///< Rx signal modulation schcme pre-override value
#define PMA_RX_MGS_CTRL_RO_RXSIG_MOD_SCHEME_LOC_BF_OFF ( 2)
#define PMA_RX_MGS_CTRL_RO_RXSIG_MOD_SCHEME_LOC_BF_WID ( 2)
#define PMA_RX_MGS_CTRL_RO_RXSIG_MOD_SCHEME_LOC_BF_MSK (0x0000000C)
#define PMA_RX_MGS_CTRL_RO_RXSIG_MOD_SCHEME_LOC_BF_DEF (0x00000000)

///< Rx Gray enable pre-override value.  This is from the pin, i_Rx_pam_gray_en_l[x]
#define PMA_RX_MGS_CTRL_RO_RX_PAM_GRAY_EN_LOC_BF_OFF ( 4)
#define PMA_RX_MGS_CTRL_RO_RX_PAM_GRAY_EN_LOC_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_RO_RX_PAM_GRAY_EN_LOC_BF_MSK (0x00000010)
#define PMA_RX_MGS_CTRL_RO_RX_PAM_GRAY_EN_LOC_BF_DEF (0x00000000)

///< Rx Precode enable pre-override value.  This is from the pin, i_Rx_pam_precode_en_l[x]
#define PMA_RX_MGS_CTRL_RO_RX_PAM_PRECODE_EN_LOC_BF_OFF ( 5)
#define PMA_RX_MGS_CTRL_RO_RX_PAM_PRECODE_EN_LOC_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_RO_RX_PAM_PRECODE_EN_LOC_BF_MSK (0x00000020)
#define PMA_RX_MGS_CTRL_RO_RX_PAM_PRECODE_EN_LOC_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXFSM_CFG register description at address offset 0x34
  *
  * Register default value:        0x00143410
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxfsm_cfg
  * Rx FSM control
  */

typedef union {
  struct {
    uint32_t RX_PG_DISABLE : 1;
    ///< Main FSM power gated disable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXFSM_SHUTDOWN_TIMEOUT_EN : 1;
    ///< Main FSM shutdown timeout enable
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
    uint32_t RX_CMN_ON_STATE : 3;
    ///< Main FSM CMN ON State
    ///< AccessType="RW" BitOffset="4" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t RX_ON_STATE : 3;
    ///< Main FSM READY State
    ///< AccessType="RW" BitOffset="8" ResetValue="0x4"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
    uint32_t RX_SYNTH_ON_STATE : 3;
    ///< Main FSM CMN PLL ON State
    ///< AccessType="RW" BitOffset="12" ResetValue="0x3"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t RXDATAPATH_ON_STATE : 3;
    ///< Main FSM Datapath State
    ///< AccessType="RW" BitOffset="16" ResetValue="0x4"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
    uint32_t RXFSM_CALABORT_PULSE_WIDTH : 3;
    ///< Main FSM calibration abort pulse width
    ///< AccessType="RW" BitOffset="20" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
    uint32_t RXFSM_SHUTDOWN_TIMEOUT_POW2 : 4;
    ///< Main FSM shutdown timeout interval.  Value in power of 2
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_fsm_cfg_reg_t;

#define PMA_RX_MSG_FSM_CFG_DEFAULT (0x00143410U)
#define PMA_RX_MSG_FSM_CFG_RD_MASK (0x0f777773U)
#define PMA_RX_MSG_FSM_CFG_WR_MASK (0x0f777773U)


///< Main FSM power gated disable
#define PMA_RX_MSG_FSM_CFG_RX_PG_DIS_BF_OFF ( 0)
#define PMA_RX_MSG_FSM_CFG_RX_PG_DIS_BF_WID ( 1)
#define PMA_RX_MSG_FSM_CFG_RX_PG_DIS_BF_MSK (0x00000001)
#define PMA_RX_MSG_FSM_CFG_RX_PG_DIS_BF_DEF (0x00000000)

///< Main FSM shutdown timeout enable
#define PMA_RX_MSG_FSM_CFG_RXFSM_SHUTDOWN_TIMEOUT_EN_BF_OFF ( 1)
#define PMA_RX_MSG_FSM_CFG_RXFSM_SHUTDOWN_TIMEOUT_EN_BF_WID ( 1)
#define PMA_RX_MSG_FSM_CFG_RXFSM_SHUTDOWN_TIMEOUT_EN_BF_MSK (0x00000002)
#define PMA_RX_MSG_FSM_CFG_RXFSM_SHUTDOWN_TIMEOUT_EN_BF_DEF (0x00000000)

///< Main FSM CMN ON State
#define PMA_RX_MSG_FSM_CFG_RX_CMN_ON_STATE_BF_OFF ( 4)
#define PMA_RX_MSG_FSM_CFG_RX_CMN_ON_STATE_BF_WID ( 3)
#define PMA_RX_MSG_FSM_CFG_RX_CMN_ON_STATE_BF_MSK (0x00000070)
#define PMA_RX_MSG_FSM_CFG_RX_CMN_ON_STATE_BF_DEF (0x00000010)

///< Main FSM READY State
#define PMA_RX_MSG_FSM_CFG_RX_ON_STATE_BF_OFF ( 8)
#define PMA_RX_MSG_FSM_CFG_RX_ON_STATE_BF_WID ( 3)
#define PMA_RX_MSG_FSM_CFG_RX_ON_STATE_BF_MSK (0x00000700)
#define PMA_RX_MSG_FSM_CFG_RX_ON_STATE_BF_DEF (0x00000400)

///< Main FSM CMN PLL ON State
#define PMA_RX_MSG_FSM_CFG_RX_SYNTH_ON_STATE_BF_OFF (12)
#define PMA_RX_MSG_FSM_CFG_RX_SYNTH_ON_STATE_BF_WID ( 3)
#define PMA_RX_MSG_FSM_CFG_RX_SYNTH_ON_STATE_BF_MSK (0x00007000)
#define PMA_RX_MSG_FSM_CFG_RX_SYNTH_ON_STATE_BF_DEF (0x00003000)

///< Main FSM Datapath State
#define PMA_RX_MSG_FSM_CFG_RXDATAPATH_ON_STATE_BF_OFF (16)
#define PMA_RX_MSG_FSM_CFG_RXDATAPATH_ON_STATE_BF_WID ( 3)
#define PMA_RX_MSG_FSM_CFG_RXDATAPATH_ON_STATE_BF_MSK (0x00070000)
#define PMA_RX_MSG_FSM_CFG_RXDATAPATH_ON_STATE_BF_DEF (0x00040000)

///< Main FSM calibration abort pulse width
#define PMA_RX_MSG_FSM_CFG_RXFSM_CALABORT_PULSE_WIDTH_BF_OFF (20)
#define PMA_RX_MSG_FSM_CFG_RXFSM_CALABORT_PULSE_WIDTH_BF_WID ( 3)
#define PMA_RX_MSG_FSM_CFG_RXFSM_CALABORT_PULSE_WIDTH_BF_MSK (0x00700000)
#define PMA_RX_MSG_FSM_CFG_RXFSM_CALABORT_PULSE_WIDTH_BF_DEF (0x00100000)

///< Main FSM shutdown timeout interval.  Value in power of 2
#define PMA_RX_MSG_FSM_CFG_RXFSM_SHUTDOWN_TIMEOUT_POW2_BF_OFF (24)
#define PMA_RX_MSG_FSM_CFG_RXFSM_SHUTDOWN_TIMEOUT_POW2_BF_WID ( 4)
#define PMA_RX_MSG_FSM_CFG_RXFSM_SHUTDOWN_TIMEOUT_POW2_BF_MSK (0x0F000000)
#define PMA_RX_MSG_FSM_CFG_RXFSM_SHUTDOWN_TIMEOUT_POW2_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_MEM_CTRL register description at address offset 0x38
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_mem_ctrl
  * Rx soft control
  */

typedef union {
  struct {
    uint32_t RXMEM_EN : 1;
    ///< Soft control enable.  To allow using register to power up/down OR
    ///< Rx Lane reset
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 7;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
    uint32_t RXMEM_RST_B : 1;
    ///< Soft Rx Lane reset
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
    uint32_t RXMEM_PSTATE : 3;
    ///< Soft Rx Lane Pstate
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t RXMEM_RATE_FREQ : 3;
    ///< Soft Rx Lane rate freq (Mode)
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
    uint32_t RXMEM_RATE_DIV : 4;
    ///< Soft Rx Lane rate div rate
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t RXMEM_WIDTH : 5;
    ///< Soft Rx Lane data width
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_mem_ctrl_reg_t;

#define PMA_RX_MGS_MEM_CTRL_DEFAULT (0x00000000U)
#define PMA_RX_MGS_MEM_CTRL_RD_MASK (0x1ff77101U)
#define PMA_RX_MGS_MEM_CTRL_WR_MASK (0x1ff77101U)


///< Soft control enable.  To allow using register to power up/down OR
///< Rx Lane reset
#define PMA_RX_MGS_MEM_CTRL_RXMEM_EN_BF_OFF ( 0)
#define PMA_RX_MGS_MEM_CTRL_RXMEM_EN_BF_WID ( 1)
#define PMA_RX_MGS_MEM_CTRL_RXMEM_EN_BF_MSK (0x00000001)
#define PMA_RX_MGS_MEM_CTRL_RXMEM_EN_BF_DEF (0x00000000)

///< Soft Rx Lane reset
#define PMA_RX_MGS_MEM_CTRL_RXMEM_RST_B_BF_OFF ( 8)
#define PMA_RX_MGS_MEM_CTRL_RXMEM_RST_B_BF_WID ( 1)
#define PMA_RX_MGS_MEM_CTRL_RXMEM_RST_B_BF_MSK (0x00000100)
#define PMA_RX_MGS_MEM_CTRL_RXMEM_RST_B_BF_DEF (0x00000000)

///< Soft Rx Lane Pstate
#define PMA_RX_MGS_MEM_CTRL_RXMEM_PSTATE_BF_OFF (12)
#define PMA_RX_MGS_MEM_CTRL_RXMEM_PSTATE_BF_WID ( 3)
#define PMA_RX_MGS_MEM_CTRL_RXMEM_PSTATE_BF_MSK (0x00007000)
#define PMA_RX_MGS_MEM_CTRL_RXMEM_PSTATE_BF_DEF (0x00000000)

///< Soft Rx Lane rate freq (Mode)
#define PMA_RX_MGS_MEM_CTRL_RXMEM_RATE_FREQ_BF_OFF (16)
#define PMA_RX_MGS_MEM_CTRL_RXMEM_RATE_FREQ_BF_WID ( 3)
#define PMA_RX_MGS_MEM_CTRL_RXMEM_RATE_FREQ_BF_MSK (0x00070000)
#define PMA_RX_MGS_MEM_CTRL_RXMEM_RATE_FREQ_BF_DEF (0x00000000)

///< Soft Rx Lane rate div rate
#define PMA_RX_MGS_MEM_CTRL_RXMEM_RATE_DIV_BF_OFF (20)
#define PMA_RX_MGS_MEM_CTRL_RXMEM_RATE_DIV_BF_WID ( 4)
#define PMA_RX_MGS_MEM_CTRL_RXMEM_RATE_DIV_BF_MSK (0x00F00000)
#define PMA_RX_MGS_MEM_CTRL_RXMEM_RATE_DIV_BF_DEF (0x00000000)

///< Soft Rx Lane data width
#define PMA_RX_MGS_MEM_CTRL_RXMEM_WIDTH_BF_OFF (24)
#define PMA_RX_MGS_MEM_CTRL_RXMEM_WIDTH_BF_WID ( 5)
#define PMA_RX_MGS_MEM_CTRL_RXMEM_WIDTH_BF_MSK (0x1F000000)
#define PMA_RX_MGS_MEM_CTRL_RXMEM_WIDTH_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_MEM_REQ_CTRL register description at address offset 0x3c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_mem_req_ctrl
  * Rx soft control clear
  */

typedef union {
  struct {
    uint32_t RXMEM_REQ : 1;
    ///< Soft control request to initiate the power up/down OR Rx Lane reset
    ///< by register.  A return value of 0 when the request has completed
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_mem_req_ctrl_reg_t;

#define PMA_RX_MGS_MEM_REQ_CTRL_DEFAULT (0x00000000U)
#define PMA_RX_MGS_MEM_REQ_CTRL_RD_MASK (0x00000001U)
#define PMA_RX_MGS_MEM_REQ_CTRL_WR_MASK (0x00000001U)


///< Soft control request to initiate the power up/down OR Rx Lane reset
///< by register.  A return value of 0 when the request has completed
#define PMA_RX_MGS_MEM_REQ_CTRL_RXMEM_REQ_BF_OFF ( 0)
#define PMA_RX_MGS_MEM_REQ_CTRL_RXMEM_REQ_BF_WID ( 1)
#define PMA_RX_MGS_MEM_REQ_CTRL_RXMEM_REQ_BF_MSK (0x00000001)
#define PMA_RX_MGS_MEM_REQ_CTRL_RXMEM_REQ_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_PLL_SEL_CFG register description at address offset 0x40
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_pll_sel_cfg
  * Rx Rate Freq Remap to Clean up PLL
  */

typedef union {
  struct {
    uint32_t RX_PLL_SEL_AMODE : 2;
    ///< Mode A - Rx Interface Selection between PLLs. 0 = CMNPLLA, 1 = CMNPLLB,
    ///< 2 = TXPLL
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_PLL_SEL_BMODE : 2;
    ///< Mode B - Rx Interface Selection between PLLs. 0 = CMNPLLA, 1 = CMNPLLB,
    ///< 2 = TXPLL
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t RX_PLL_SEL_CMODE : 2;
    ///< Mode C - Rx Interface Selection between PLLs. 0 = CMNPLLA, 1 = CMNPLLB,
    ///< 2 = TXPLL
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RX_PLL_SEL_DMODE : 2;
    ///< Mode D - Rx Interface Selection between PLLs. 0 = CMNPLLA, 1 = CMNPLLB,
    ///< 2 = TXPLL
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t RX_PLL_SEL_EMODE : 2;
    ///< Mode E - Rx Interface Selection between PLLs. 0 = CMNPLLA, 1 = CMNPLLB,
    ///< 2 = TXPLL
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
    uint32_t RX_PLLMODE_REMAP_AMODE : 3;
    ///< Mode A - Remap mode to CMNPLL Mode A/B or TXPLL Mode A/B/C/D/E
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t RX_PLLMODE_REMAP_BMODE : 3;
    ///< Mode B - Remap mode to CMNPLL Mode A/B  or TXPLL Mode A/B/C/D/E
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t RX_PLLMODE_REMAP_CMODE : 3;
    ///< Mode C - Remap mode to CMNPLL Mode A/B  or TXPLL Mode A/B/C/D/E
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t RX_PLLMODE_REMAP_DMODE : 3;
    ///< Mode D - Remap mode to CMNPLL Mode A/B  or TXPLL Mode A/B/C/D/E
    ///< AccessType="RW" BitOffset="25" ResetValue="0x0"
    uint32_t RX_PLLMODE_REMAP_EMODE : 3;
    ///< Mode E - Remap mode to CMNPLL Mode A/B  or TXPLL Mode A/B/C/D/E
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_pll_sel_cfg_reg_t;

#define PMA_RX_MGS_PLL_SEL_CFG_DEFAULT (0x00000000U)
#define PMA_RX_MGS_PLL_SEL_CFG_RD_MASK (0x7fff03ffU)
#define PMA_RX_MGS_PLL_SEL_CFG_WR_MASK (0x7fff03ffU)


///< Mode A - Rx Interface Selection between PLLs. 0 = CMNPLLA, 1 = CMNPLLB,
///< 2 = TXPLL
#define PMA_RX_MGS_PLL_SEL_CFG_RX_PLL_SEL_AMODE_BF_OFF ( 0)
#define PMA_RX_MGS_PLL_SEL_CFG_RX_PLL_SEL_AMODE_BF_WID ( 2)
#define PMA_RX_MGS_PLL_SEL_CFG_RX_PLL_SEL_AMODE_BF_MSK (0x00000003)
#define PMA_RX_MGS_PLL_SEL_CFG_RX_PLL_SEL_AMODE_BF_DEF (0x00000000)

///< Mode B - Rx Interface Selection between PLLs. 0 = CMNPLLA, 1 = CMNPLLB,
///< 2 = TXPLL
#define PMA_RX_MGS_PLL_SEL_CFG_RX_PLL_SEL_BMODE_BF_OFF ( 2)
#define PMA_RX_MGS_PLL_SEL_CFG_RX_PLL_SEL_BMODE_BF_WID ( 2)
#define PMA_RX_MGS_PLL_SEL_CFG_RX_PLL_SEL_BMODE_BF_MSK (0x0000000C)
#define PMA_RX_MGS_PLL_SEL_CFG_RX_PLL_SEL_BMODE_BF_DEF (0x00000000)

///< Mode C - Rx Interface Selection between PLLs. 0 = CMNPLLA, 1 = CMNPLLB,
///< 2 = TXPLL
#define PMA_RX_MGS_PLL_SEL_CFG_RX_PLL_SEL_CMODE_BF_OFF ( 4)
#define PMA_RX_MGS_PLL_SEL_CFG_RX_PLL_SEL_CMODE_BF_WID ( 2)
#define PMA_RX_MGS_PLL_SEL_CFG_RX_PLL_SEL_CMODE_BF_MSK (0x00000030)
#define PMA_RX_MGS_PLL_SEL_CFG_RX_PLL_SEL_CMODE_BF_DEF (0x00000000)

///< Mode D - Rx Interface Selection between PLLs. 0 = CMNPLLA, 1 = CMNPLLB,
///< 2 = TXPLL
#define PMA_RX_MGS_PLL_SEL_CFG_RX_PLL_SEL_DMODE_BF_OFF ( 6)
#define PMA_RX_MGS_PLL_SEL_CFG_RX_PLL_SEL_DMODE_BF_WID ( 2)
#define PMA_RX_MGS_PLL_SEL_CFG_RX_PLL_SEL_DMODE_BF_MSK (0x000000C0)
#define PMA_RX_MGS_PLL_SEL_CFG_RX_PLL_SEL_DMODE_BF_DEF (0x00000000)

///< Mode E - Rx Interface Selection between PLLs. 0 = CMNPLLA, 1 = CMNPLLB,
///< 2 = TXPLL
#define PMA_RX_MGS_PLL_SEL_CFG_RX_PLL_SEL_EMODE_BF_OFF ( 8)
#define PMA_RX_MGS_PLL_SEL_CFG_RX_PLL_SEL_EMODE_BF_WID ( 2)
#define PMA_RX_MGS_PLL_SEL_CFG_RX_PLL_SEL_EMODE_BF_MSK (0x00000300)
#define PMA_RX_MGS_PLL_SEL_CFG_RX_PLL_SEL_EMODE_BF_DEF (0x00000000)

///< Mode A - Remap mode to CMNPLL Mode A/B or TXPLL Mode A/B/C/D/E
#define PMA_RX_MGS_PLL_SEL_CFG_RX_PLLMODE_REMAP_AMODE_BF_OFF (16)
#define PMA_RX_MGS_PLL_SEL_CFG_RX_PLLMODE_REMAP_AMODE_BF_WID ( 3)
#define PMA_RX_MGS_PLL_SEL_CFG_RX_PLLMODE_REMAP_AMODE_BF_MSK (0x00070000)
#define PMA_RX_MGS_PLL_SEL_CFG_RX_PLLMODE_REMAP_AMODE_BF_DEF (0x00000000)

///< Mode B - Remap mode to CMNPLL Mode A/B  or TXPLL Mode A/B/C/D/E
#define PMA_RX_MGS_PLL_SEL_CFG_RX_PLLMODE_REMAP_BMODE_BF_OFF (19)
#define PMA_RX_MGS_PLL_SEL_CFG_RX_PLLMODE_REMAP_BMODE_BF_WID ( 3)
#define PMA_RX_MGS_PLL_SEL_CFG_RX_PLLMODE_REMAP_BMODE_BF_MSK (0x00380000)
#define PMA_RX_MGS_PLL_SEL_CFG_RX_PLLMODE_REMAP_BMODE_BF_DEF (0x00000000)

///< Mode C - Remap mode to CMNPLL Mode A/B  or TXPLL Mode A/B/C/D/E
#define PMA_RX_MGS_PLL_SEL_CFG_RX_PLLMODE_REMAP_CMODE_BF_OFF (22)
#define PMA_RX_MGS_PLL_SEL_CFG_RX_PLLMODE_REMAP_CMODE_BF_WID ( 3)
#define PMA_RX_MGS_PLL_SEL_CFG_RX_PLLMODE_REMAP_CMODE_BF_MSK (0x01C00000)
#define PMA_RX_MGS_PLL_SEL_CFG_RX_PLLMODE_REMAP_CMODE_BF_DEF (0x00000000)

///< Mode D - Remap mode to CMNPLL Mode A/B  or TXPLL Mode A/B/C/D/E
#define PMA_RX_MGS_PLL_SEL_CFG_RX_PLLMODE_REMAP_DMODE_BF_OFF (25)
#define PMA_RX_MGS_PLL_SEL_CFG_RX_PLLMODE_REMAP_DMODE_BF_WID ( 3)
#define PMA_RX_MGS_PLL_SEL_CFG_RX_PLLMODE_REMAP_DMODE_BF_MSK (0x0E000000)
#define PMA_RX_MGS_PLL_SEL_CFG_RX_PLLMODE_REMAP_DMODE_BF_DEF (0x00000000)

///< Mode E - Remap mode to CMNPLL Mode A/B  or TXPLL Mode A/B/C/D/E
#define PMA_RX_MGS_PLL_SEL_CFG_RX_PLLMODE_REMAP_EMODE_BF_OFF (28)
#define PMA_RX_MGS_PLL_SEL_CFG_RX_PLLMODE_REMAP_EMODE_BF_WID ( 3)
#define PMA_RX_MGS_PLL_SEL_CFG_RX_PLLMODE_REMAP_EMODE_BF_MSK (0x70000000)
#define PMA_RX_MGS_PLL_SEL_CFG_RX_PLLMODE_REMAP_EMODE_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXDCO_POSTDIVCLK_CTRL_0 register description at address offset 0x44
  *
  * Register default value:        0x0028140A
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxdco_postdivclk_ctrl_0
  * Rx Postdiv clock config
  */

typedef union {
  struct {
    uint32_t RXDCO_DIVRATE_SOC_MUXD0 : 9;
    ///< RXDCO  Postdiv ratio (Integer) for SoC in Mode A
    ///< AccessType="RW" BitOffset="0" ResetValue="0xA"
    uint32_t RXDCO_DIVRATE_SOC_MUXD1 : 9;
    ///< RXDCO Postdiv ratio (Integer) for SoC in Mode B
    ///< AccessType="RW" BitOffset="9" ResetValue="0xA"
    uint32_t RXDCO_DIVRATE_SOC_MUXD2 : 9;
    ///< RXDCO Postdiv ratio (Integer) for SoC in Mode C
    ///< AccessType="RW" BitOffset="18" ResetValue="0xA"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="27" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_dco_postdivclk_ctrl_0_reg_t;

#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_0_DEFAULT (0x0028140aU)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_0_RD_MASK (0x07ffffffU)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_0_WR_MASK (0x07ffffffU)


///< RXDCO  Postdiv ratio (Integer) for SoC in Mode A
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_0_RXDCO_DIVRATE_SOC_MUXD0_BF_OFF ( 0)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_0_RXDCO_DIVRATE_SOC_MUXD0_BF_WID ( 9)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_0_RXDCO_DIVRATE_SOC_MUXD0_BF_MSK (0x000001FF)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_0_RXDCO_DIVRATE_SOC_MUXD0_BF_DEF (0x0000000A)

///< RXDCO Postdiv ratio (Integer) for SoC in Mode B
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_0_RXDCO_DIVRATE_SOC_MUXD1_BF_OFF ( 9)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_0_RXDCO_DIVRATE_SOC_MUXD1_BF_WID ( 9)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_0_RXDCO_DIVRATE_SOC_MUXD1_BF_MSK (0x0003FE00)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_0_RXDCO_DIVRATE_SOC_MUXD1_BF_DEF (0x00001400)

///< RXDCO Postdiv ratio (Integer) for SoC in Mode C
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_0_RXDCO_DIVRATE_SOC_MUXD2_BF_OFF (18)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_0_RXDCO_DIVRATE_SOC_MUXD2_BF_WID ( 9)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_0_RXDCO_DIVRATE_SOC_MUXD2_BF_MSK (0x07FC0000)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_0_RXDCO_DIVRATE_SOC_MUXD2_BF_DEF (0x00280000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXDCO_POSTDIVCLK_CTRL_1 register description at address offset 0x48
  *
  * Register default value:        0x0028140A
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxdco_postdivclk_ctrl_1
  * Rx Postdiv clock config
  */

typedef union {
  struct {
    uint32_t RXDCO_DIVRATE_SOC_MUXD3 : 9;
    ///< RXDCO  Postdiv ratio (Integer) for SoC in Mode D
    ///< AccessType="RW" BitOffset="0" ResetValue="0xA"
    uint32_t RXDCO_DIVRATE_SOC_MUXD4 : 9;
    ///< RXDCO  Postdiv ratio (Integer) for SoC in Mode E
    ///< AccessType="RW" BitOffset="9" ResetValue="0xA"
    uint32_t RXDCO_DIVRATE_AUTONEG_MUXD0 : 9;
    ///< RXDCO autoneg divratio (Integer) in Mode A
    ///< AccessType="RW" BitOffset="18" ResetValue="0xA"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="27" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_dco_postdivclk_ctrl_1_reg_t;

#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_1_DEFAULT (0x0028140aU)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_1_RD_MASK (0x07ffffffU)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_1_WR_MASK (0x07ffffffU)


///< RXDCO  Postdiv ratio (Integer) for SoC in Mode D
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_1_RXDCO_DIVRATE_SOC_MUXD3_BF_OFF ( 0)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_1_RXDCO_DIVRATE_SOC_MUXD3_BF_WID ( 9)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_1_RXDCO_DIVRATE_SOC_MUXD3_BF_MSK (0x000001FF)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_1_RXDCO_DIVRATE_SOC_MUXD3_BF_DEF (0x0000000A)

///< RXDCO  Postdiv ratio (Integer) for SoC in Mode E
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_1_RXDCO_DIVRATE_SOC_MUXD4_BF_OFF ( 9)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_1_RXDCO_DIVRATE_SOC_MUXD4_BF_WID ( 9)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_1_RXDCO_DIVRATE_SOC_MUXD4_BF_MSK (0x0003FE00)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_1_RXDCO_DIVRATE_SOC_MUXD4_BF_DEF (0x00001400)

///< RXDCO autoneg divratio (Integer) in Mode A
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_1_RXDCO_DIVRATE_AUTONEG_MUXD0_BF_OFF (18)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_1_RXDCO_DIVRATE_AUTONEG_MUXD0_BF_WID ( 9)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_1_RXDCO_DIVRATE_AUTONEG_MUXD0_BF_MSK (0x07FC0000)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_1_RXDCO_DIVRATE_AUTONEG_MUXD0_BF_DEF (0x00280000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXDCO_POSTDIVCLK_CTRL_2 register description at address offset 0x4c
  *
  * Register default value:        0x0028140A
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxdco_postdivclk_ctrl_2
  * Rx Postdiv clock config
  */

typedef union {
  struct {
    uint32_t RXDCO_DIVRATE_AUTONEG_MUXD1 : 9;
    ///< RXDCO autoneg divratio (Integer) in Mode B
    ///< AccessType="RW" BitOffset="0" ResetValue="0xA"
    uint32_t RXDCO_DIVRATE_AUTONEG_MUXD2 : 9;
    ///< RXDCO autoneg divratio (Integer) in Mode C
    ///< AccessType="RW" BitOffset="9" ResetValue="0xA"
    uint32_t RXDCO_DIVRATE_AUTONEG_MUXD3 : 9;
    ///< RXDCO autoneg divratio (Integer) in Mode D
    ///< AccessType="RW" BitOffset="18" ResetValue="0xA"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="27" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_dco_postdivclk_ctrl_2_reg_t;

#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_2_DEFAULT (0x0028140aU)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_2_RD_MASK (0x07ffffffU)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_2_WR_MASK (0x07ffffffU)


///< RXDCO autoneg divratio (Integer) in Mode B
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_2_RXDCO_DIVRATE_AUTONEG_MUXD1_BF_OFF ( 0)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_2_RXDCO_DIVRATE_AUTONEG_MUXD1_BF_WID ( 9)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_2_RXDCO_DIVRATE_AUTONEG_MUXD1_BF_MSK (0x000001FF)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_2_RXDCO_DIVRATE_AUTONEG_MUXD1_BF_DEF (0x0000000A)

///< RXDCO autoneg divratio (Integer) in Mode C
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_2_RXDCO_DIVRATE_AUTONEG_MUXD2_BF_OFF ( 9)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_2_RXDCO_DIVRATE_AUTONEG_MUXD2_BF_WID ( 9)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_2_RXDCO_DIVRATE_AUTONEG_MUXD2_BF_MSK (0x0003FE00)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_2_RXDCO_DIVRATE_AUTONEG_MUXD2_BF_DEF (0x00001400)

///< RXDCO autoneg divratio (Integer) in Mode D
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_2_RXDCO_DIVRATE_AUTONEG_MUXD3_BF_OFF (18)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_2_RXDCO_DIVRATE_AUTONEG_MUXD3_BF_WID ( 9)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_2_RXDCO_DIVRATE_AUTONEG_MUXD3_BF_MSK (0x07FC0000)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_2_RXDCO_DIVRATE_AUTONEG_MUXD3_BF_DEF (0x00280000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXDCO_POSTDIVCLK_CTRL_3 register description at address offset 0x50
  *
  * Register default value:        0x0140A00A
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxdco_postdivclk_ctrl_3
  * Rx Postdiv clock config
  */

typedef union {
  struct {
    uint32_t RXDCO_DIVRATE_AUTONEG_MUXD4 : 9;
    ///< RXDCO autoneg divratio (Integer) in Mode E
    ///< AccessType="RW" BitOffset="0" ResetValue="0xA"
    uint32_t RXDCO_DIVRATE_FBDIV_MUXD0 : 9;
    ///< RXDCO feedback divratio (Integer) in Mode A
    ///< AccessType="RW" BitOffset="9" ResetValue="0x50"
    uint32_t RXDCO_DIVRATE_FBDIV_MUXD1 : 9;
    ///< RXDCO feedback divratio (Integer) in Mode B
    ///< AccessType="RW" BitOffset="18" ResetValue="0x50"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="27" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_dco_postdivclk_ctrl_3_reg_t;

#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_3_DEFAULT (0x0140a00aU)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_3_RD_MASK (0x07ffffffU)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_3_WR_MASK (0x07ffffffU)


///< RXDCO autoneg divratio (Integer) in Mode E
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_3_RXDCO_DIVRATE_AUTONEG_MUXD4_BF_OFF ( 0)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_3_RXDCO_DIVRATE_AUTONEG_MUXD4_BF_WID ( 9)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_3_RXDCO_DIVRATE_AUTONEG_MUXD4_BF_MSK (0x000001FF)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_3_RXDCO_DIVRATE_AUTONEG_MUXD4_BF_DEF (0x0000000A)

///< RXDCO feedback divratio (Integer) in Mode A
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_3_RXDCO_DIVRATE_FBDIV_MUXD0_BF_OFF ( 9)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_3_RXDCO_DIVRATE_FBDIV_MUXD0_BF_WID ( 9)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_3_RXDCO_DIVRATE_FBDIV_MUXD0_BF_MSK (0x0003FE00)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_3_RXDCO_DIVRATE_FBDIV_MUXD0_BF_DEF (0x0000A000)

///< RXDCO feedback divratio (Integer) in Mode B
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_3_RXDCO_DIVRATE_FBDIV_MUXD1_BF_OFF (18)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_3_RXDCO_DIVRATE_FBDIV_MUXD1_BF_WID ( 9)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_3_RXDCO_DIVRATE_FBDIV_MUXD1_BF_MSK (0x07FC0000)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_3_RXDCO_DIVRATE_FBDIV_MUXD1_BF_DEF (0x01400000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXDCO_POSTDIVCLK_CTRL_4 register description at address offset 0x54
  *
  * Register default value:        0x0140A050
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxdco_postdivclk_ctrl_4
  * Rx Postdiv clock config
  */

typedef union {
  struct {
    uint32_t RXDCO_DIVRATE_FBDIV_MUXD2 : 9;
    ///< RXDCO feedback divratio (Integer) in Mode C
    ///< AccessType="RW" BitOffset="0" ResetValue="0x50"
    uint32_t RXDCO_DIVRATE_FBDIV_MUXD3 : 9;
    ///< RXDCO feedback divratio (Integer) in Mode D
    ///< AccessType="RW" BitOffset="9" ResetValue="0x50"
    uint32_t RXDCO_DIVRATE_FBDIV_MUXD4 : 9;
    ///< RXDCO feedback divratio (Integer) in Mode E
    ///< AccessType="RW" BitOffset="18" ResetValue="0x50"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="27" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_dco_postdivclk_ctrl_4_reg_t;

#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_4_DEFAULT (0x0140a050U)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_4_RD_MASK (0x07ffffffU)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_4_WR_MASK (0x07ffffffU)


///< RXDCO feedback divratio (Integer) in Mode C
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_4_RXDCO_DIVRATE_FBDIV_MUXD2_BF_OFF ( 0)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_4_RXDCO_DIVRATE_FBDIV_MUXD2_BF_WID ( 9)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_4_RXDCO_DIVRATE_FBDIV_MUXD2_BF_MSK (0x000001FF)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_4_RXDCO_DIVRATE_FBDIV_MUXD2_BF_DEF (0x00000050)

///< RXDCO feedback divratio (Integer) in Mode D
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_4_RXDCO_DIVRATE_FBDIV_MUXD3_BF_OFF ( 9)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_4_RXDCO_DIVRATE_FBDIV_MUXD3_BF_WID ( 9)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_4_RXDCO_DIVRATE_FBDIV_MUXD3_BF_MSK (0x0003FE00)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_4_RXDCO_DIVRATE_FBDIV_MUXD3_BF_DEF (0x0000A000)

///< RXDCO feedback divratio (Integer) in Mode E
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_4_RXDCO_DIVRATE_FBDIV_MUXD4_BF_OFF (18)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_4_RXDCO_DIVRATE_FBDIV_MUXD4_BF_WID ( 9)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_4_RXDCO_DIVRATE_FBDIV_MUXD4_BF_MSK (0x07FC0000)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_4_RXDCO_DIVRATE_FBDIV_MUXD4_BF_DEF (0x01400000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXDCO_POSTDIVCLK_CTRL_5 register description at address offset 0x58
  *
  * Register default value:        0x0028140A
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxdco_postdivclk_ctrl_5
  * Rx Postdiv clock config
  */

typedef union {
  struct {
    uint32_t RXDCO_DIVRATE_DITHER_MUXD0 : 9;
    ///< RXDCO dither divratio (Integer) in Mode A
    ///< AccessType="RW" BitOffset="0" ResetValue="0xA"
    uint32_t RXDCO_DIVRATE_DITHER_MUXD1 : 9;
    ///< RXDCO dither divratio (Integer) in Mode B
    ///< AccessType="RW" BitOffset="9" ResetValue="0xA"
    uint32_t RXDCO_DIVRATE_DITHER_MUXD2 : 9;
    ///< RXDCO dither divratio (Integer) in Mode C
    ///< AccessType="RW" BitOffset="18" ResetValue="0xA"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="27" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_dco_postdivclk_ctrl_5_reg_t;

#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_5_DEFAULT (0x0028140aU)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_5_RD_MASK (0x07ffffffU)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_5_WR_MASK (0x07ffffffU)


///< RXDCO dither divratio (Integer) in Mode A
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_5_RXDCO_DIVRATE_DITHER_MUXD0_BF_OFF ( 0)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_5_RXDCO_DIVRATE_DITHER_MUXD0_BF_WID ( 9)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_5_RXDCO_DIVRATE_DITHER_MUXD0_BF_MSK (0x000001FF)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_5_RXDCO_DIVRATE_DITHER_MUXD0_BF_DEF (0x0000000A)

///< RXDCO dither divratio (Integer) in Mode B
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_5_RXDCO_DIVRATE_DITHER_MUXD1_BF_OFF ( 9)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_5_RXDCO_DIVRATE_DITHER_MUXD1_BF_WID ( 9)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_5_RXDCO_DIVRATE_DITHER_MUXD1_BF_MSK (0x0003FE00)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_5_RXDCO_DIVRATE_DITHER_MUXD1_BF_DEF (0x00001400)

///< RXDCO dither divratio (Integer) in Mode C
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_5_RXDCO_DIVRATE_DITHER_MUXD2_BF_OFF (18)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_5_RXDCO_DIVRATE_DITHER_MUXD2_BF_WID ( 9)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_5_RXDCO_DIVRATE_DITHER_MUXD2_BF_MSK (0x07FC0000)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_5_RXDCO_DIVRATE_DITHER_MUXD2_BF_DEF (0x00280000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXDCO_POSTDIVCLK_CTRL_6 register description at address offset 0x5c
  *
  * Register default value:        0x0000140A
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxdco_postdivclk_ctrl_6
  * Rx Postdiv clock config
  */

typedef union {
  struct {
    uint32_t RXDCO_DIVRATE_DITHER_MUXD3 : 9;
    ///< RXDCO dither divratio (Integer) in Mode D
    ///< AccessType="RW" BitOffset="0" ResetValue="0xA"
    uint32_t RXDCO_DIVRATE_DITHER_MUXD4 : 9;
    ///< RXDCO dither divratio (Integer) in Mode E
    ///< AccessType="RW" BitOffset="9" ResetValue="0xA"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_dco_postdivclk_ctrl_6_reg_t;

#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_6_DEFAULT (0x0000140aU)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_6_RD_MASK (0x0003ffffU)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_6_WR_MASK (0x0003ffffU)


///< RXDCO dither divratio (Integer) in Mode D
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_6_RXDCO_DIVRATE_DITHER_MUXD3_BF_OFF ( 0)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_6_RXDCO_DIVRATE_DITHER_MUXD3_BF_WID ( 9)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_6_RXDCO_DIVRATE_DITHER_MUXD3_BF_MSK (0x000001FF)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_6_RXDCO_DIVRATE_DITHER_MUXD3_BF_DEF (0x0000000A)

///< RXDCO dither divratio (Integer) in Mode E
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_6_RXDCO_DIVRATE_DITHER_MUXD4_BF_OFF ( 9)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_6_RXDCO_DIVRATE_DITHER_MUXD4_BF_WID ( 9)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_6_RXDCO_DIVRATE_DITHER_MUXD4_BF_MSK (0x0003FE00)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_6_RXDCO_DIVRATE_DITHER_MUXD4_BF_DEF (0x00001400)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXDCO_POSTDIVCLK_CTRL_7 register description at address offset 0x60
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxdco_postdivclk_ctrl_7
  * Rx Postdiv clock config
  */

typedef union {
  struct {
    uint32_t RXDCO_DIVRATE_P5_SOC_MUXD0 : 1;
    ///< RXDCO div rate 0.5 (fraction) for SoC in Mode A
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXDCO_DIVRATE_P5_SOC_MUXD1 : 1;
    ///< RXDCO div rate 0.5 (fraction) for SoC in Mode B
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RXDCO_DIVRATE_P5_SOC_MUXD2 : 1;
    ///< RXDCO div rate 0.5 (fraction) for SoC in Mode C
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t RXDCO_DIVRATE_P5_SOC_MUXD3 : 1;
    ///< RXDCO div rate 0.5 (fraction) for SoC in Mode D
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RXDCO_DIVRATE_P5_SOC_MUXD4 : 1;
    ///< RXDCO div rate 0.5 (fraction) for SoC in Mode E
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RXDCO_DIVRATE_P5_AUTONEG_MUXD0 : 1;
    ///< RXDCO autoneg divratio 0.5 (fraction) in Mode A
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t RXDCO_DIVRATE_P5_AUTONEG_MUXD1 : 1;
    ///< RXDCO autoneg divratio 0.5 (fraction) in Mode B
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t RXDCO_DIVRATE_P5_AUTONEG_MUXD2 : 1;
    ///< RXDCO autoneg divratio 0.5 (fraction) in Mode C
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t RXDCO_DIVRATE_P5_AUTONEG_MUXD3 : 1;
    ///< RXDCO autoneg divratio 0.5 (fraction) in Mode D
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RXDCO_DIVRATE_P5_AUTONEG_MUXD4 : 1;
    ///< RXDCO autoneg divratio 0.5 (fraction) in Mode E
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t RXDCO_DIVRATE_P5_FBDIV_MUXD0 : 1;
    ///< RXDCO fbdiv divratio 0.5 (fraction) in Mode A
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RXDCO_DIVRATE_P5_FBDIV_MUXD1 : 1;
    ///< RXDCO fbdiv divratio 0.5 (fraction) in Mode B
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t RXDCO_DIVRATE_P5_FBDIV_MUXD2 : 1;
    ///< RXDCO fbdiv divratio 0.5 (fraction) in Mode C
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t RXDCO_DIVRATE_P5_FBDIV_MUXD3 : 1;
    ///< RXDCO fbdiv divratio 0.5 (fraction) in Mode D
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t RXDCO_DIVRATE_P5_FBDIV_MUXD4 : 1;
    ///< RXDCO fbdiv divratio 0.5 (fraction) in Mode E
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t RXDCO_DIVRATE_P5_DITHER_MUXD0 : 1;
    ///< RXDCO dither divratio 0.5 (fraction) in Mode A
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RXDCO_DIVRATE_P5_DITHER_MUXD1 : 1;
    ///< RXDCO dither divratio 0.5 (fraction) in Mode B
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t RXDCO_DIVRATE_P5_DITHER_MUXD2 : 1;
    ///< RXDCO dither divratio 0.5 (fraction) in Mode C
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t RXDCO_DIVRATE_P5_DITHER_MUXD3 : 1;
    ///< RXDCO dither divratio 0.5 (fraction) in Mode D
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t RXDCO_DIVRATE_P5_DITHER_MUXD4 : 1;
    ///< RXDCO dither divratio 0.5 (fraction) in Mode E
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_dco_postdivclk_ctrl_7_reg_t;

#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_DEFAULT (0x00000000U)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RD_MASK (0x000fffffU)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_WR_MASK (0x000fffffU)


///< RXDCO div rate 0.5 (fraction) for SoC in Mode A
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_SOC_MUXD0_BF_OFF ( 0)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_SOC_MUXD0_BF_WID ( 1)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_SOC_MUXD0_BF_MSK (0x00000001)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_SOC_MUXD0_BF_DEF (0x00000000)

///< RXDCO div rate 0.5 (fraction) for SoC in Mode B
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_SOC_MUXD1_BF_OFF ( 1)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_SOC_MUXD1_BF_WID ( 1)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_SOC_MUXD1_BF_MSK (0x00000002)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_SOC_MUXD1_BF_DEF (0x00000000)

///< RXDCO div rate 0.5 (fraction) for SoC in Mode C
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_SOC_MUXD2_BF_OFF ( 2)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_SOC_MUXD2_BF_WID ( 1)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_SOC_MUXD2_BF_MSK (0x00000004)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_SOC_MUXD2_BF_DEF (0x00000000)

///< RXDCO div rate 0.5 (fraction) for SoC in Mode D
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_SOC_MUXD3_BF_OFF ( 3)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_SOC_MUXD3_BF_WID ( 1)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_SOC_MUXD3_BF_MSK (0x00000008)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_SOC_MUXD3_BF_DEF (0x00000000)

///< RXDCO div rate 0.5 (fraction) for SoC in Mode E
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_SOC_MUXD4_BF_OFF ( 4)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_SOC_MUXD4_BF_WID ( 1)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_SOC_MUXD4_BF_MSK (0x00000010)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_SOC_MUXD4_BF_DEF (0x00000000)

///< RXDCO autoneg divratio 0.5 (fraction) in Mode A
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_AUTONEG_MUXD0_BF_OFF ( 5)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_AUTONEG_MUXD0_BF_WID ( 1)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_AUTONEG_MUXD0_BF_MSK (0x00000020)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_AUTONEG_MUXD0_BF_DEF (0x00000000)

///< RXDCO autoneg divratio 0.5 (fraction) in Mode B
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_AUTONEG_MUXD1_BF_OFF ( 6)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_AUTONEG_MUXD1_BF_WID ( 1)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_AUTONEG_MUXD1_BF_MSK (0x00000040)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_AUTONEG_MUXD1_BF_DEF (0x00000000)

///< RXDCO autoneg divratio 0.5 (fraction) in Mode C
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_AUTONEG_MUXD2_BF_OFF ( 7)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_AUTONEG_MUXD2_BF_WID ( 1)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_AUTONEG_MUXD2_BF_MSK (0x00000080)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_AUTONEG_MUXD2_BF_DEF (0x00000000)

///< RXDCO autoneg divratio 0.5 (fraction) in Mode D
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_AUTONEG_MUXD3_BF_OFF ( 8)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_AUTONEG_MUXD3_BF_WID ( 1)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_AUTONEG_MUXD3_BF_MSK (0x00000100)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_AUTONEG_MUXD3_BF_DEF (0x00000000)

///< RXDCO autoneg divratio 0.5 (fraction) in Mode E
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_AUTONEG_MUXD4_BF_OFF ( 9)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_AUTONEG_MUXD4_BF_WID ( 1)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_AUTONEG_MUXD4_BF_MSK (0x00000200)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_AUTONEG_MUXD4_BF_DEF (0x00000000)

///< RXDCO fbdiv divratio 0.5 (fraction) in Mode A
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_FBDIV_MUXD0_BF_OFF (10)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_FBDIV_MUXD0_BF_WID ( 1)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_FBDIV_MUXD0_BF_MSK (0x00000400)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_FBDIV_MUXD0_BF_DEF (0x00000000)

///< RXDCO fbdiv divratio 0.5 (fraction) in Mode B
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_FBDIV_MUXD1_BF_OFF (11)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_FBDIV_MUXD1_BF_WID ( 1)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_FBDIV_MUXD1_BF_MSK (0x00000800)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_FBDIV_MUXD1_BF_DEF (0x00000000)

///< RXDCO fbdiv divratio 0.5 (fraction) in Mode C
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_FBDIV_MUXD2_BF_OFF (12)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_FBDIV_MUXD2_BF_WID ( 1)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_FBDIV_MUXD2_BF_MSK (0x00001000)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_FBDIV_MUXD2_BF_DEF (0x00000000)

///< RXDCO fbdiv divratio 0.5 (fraction) in Mode D
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_FBDIV_MUXD3_BF_OFF (13)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_FBDIV_MUXD3_BF_WID ( 1)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_FBDIV_MUXD3_BF_MSK (0x00002000)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_FBDIV_MUXD3_BF_DEF (0x00000000)

///< RXDCO fbdiv divratio 0.5 (fraction) in Mode E
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_FBDIV_MUXD4_BF_OFF (14)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_FBDIV_MUXD4_BF_WID ( 1)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_FBDIV_MUXD4_BF_MSK (0x00004000)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_FBDIV_MUXD4_BF_DEF (0x00000000)

///< RXDCO dither divratio 0.5 (fraction) in Mode A
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_DITHER_MUXD0_BF_OFF (15)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_DITHER_MUXD0_BF_WID ( 1)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_DITHER_MUXD0_BF_MSK (0x00008000)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_DITHER_MUXD0_BF_DEF (0x00000000)

///< RXDCO dither divratio 0.5 (fraction) in Mode B
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_DITHER_MUXD1_BF_OFF (16)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_DITHER_MUXD1_BF_WID ( 1)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_DITHER_MUXD1_BF_MSK (0x00010000)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_DITHER_MUXD1_BF_DEF (0x00000000)

///< RXDCO dither divratio 0.5 (fraction) in Mode C
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_DITHER_MUXD2_BF_OFF (17)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_DITHER_MUXD2_BF_WID ( 1)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_DITHER_MUXD2_BF_MSK (0x00020000)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_DITHER_MUXD2_BF_DEF (0x00000000)

///< RXDCO dither divratio 0.5 (fraction) in Mode D
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_DITHER_MUXD3_BF_OFF (18)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_DITHER_MUXD3_BF_WID ( 1)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_DITHER_MUXD3_BF_MSK (0x00040000)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_DITHER_MUXD3_BF_DEF (0x00000000)

///< RXDCO dither divratio 0.5 (fraction) in Mode E
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_DITHER_MUXD4_BF_OFF (19)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_DITHER_MUXD4_BF_WID ( 1)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_DITHER_MUXD4_BF_MSK (0x00080000)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_RXDCO_DIVRATE_P5_DITHER_MUXD4_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXDCO_POSTDIVCLK_CTRL_8 register description at address offset 0x64
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxdco_postdivclk_ctrl_8
  * Rx Postdiv clock config
  */

typedef union {
  struct {
    uint32_t RX_POSTDIVCLKEN_MUXD0 : 1;
    ///< Rx PostDiv clock enable in Mode A
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_POSTDIVCLKEN_MUXD1 : 1;
    ///< Rx PostDiv clock enable in Mode B
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RX_POSTDIVCLKEN_MUXD2 : 1;
    ///< Rx PostDiv clock enable in Mode C
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t RX_POSTDIVCLKEN_MUXD3 : 1;
    ///< Rx PostDiv clock enable in Mode D
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RX_POSTDIVCLKEN_MUXD4 : 1;
    ///< Rx PostDiv clock enable in Mode E
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RX_AUTONEGCLKEN_MUXD0 : 1;
    ///< Rx AutoNeg clock enable in Mode A
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t RX_AUTONEGCLKEN_MUXD1 : 1;
    ///< Rx AutoNeg clock enable in Mode B
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t RX_AUTONEGCLKEN_MUXD2 : 1;
    ///< Rx AutoNeg clock enable in Mode C
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t RX_AUTONEGCLKEN_MUXD3 : 1;
    ///< Rx AutoNeg clock enable in Mode D
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RX_AUTONEGCLKEN_MUXD4 : 1;
    ///< Rx AutoNeg clock enable in Mode E
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_dco_postdivclk_ctrl_8_reg_t;

#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_8_DEFAULT (0x00000000U)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_8_RD_MASK (0x000003ffU)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_8_WR_MASK (0x000003ffU)


///< Rx PostDiv clock enable in Mode A
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_8_RX_POSTDIVCLKEN_MUXD0_BF_OFF ( 0)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_8_RX_POSTDIVCLKEN_MUXD0_BF_WID ( 1)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_8_RX_POSTDIVCLKEN_MUXD0_BF_MSK (0x00000001)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_8_RX_POSTDIVCLKEN_MUXD0_BF_DEF (0x00000000)

///< Rx PostDiv clock enable in Mode B
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_8_RX_POSTDIVCLKEN_MUXD1_BF_OFF ( 1)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_8_RX_POSTDIVCLKEN_MUXD1_BF_WID ( 1)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_8_RX_POSTDIVCLKEN_MUXD1_BF_MSK (0x00000002)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_8_RX_POSTDIVCLKEN_MUXD1_BF_DEF (0x00000000)

///< Rx PostDiv clock enable in Mode C
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_8_RX_POSTDIVCLKEN_MUXD2_BF_OFF ( 2)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_8_RX_POSTDIVCLKEN_MUXD2_BF_WID ( 1)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_8_RX_POSTDIVCLKEN_MUXD2_BF_MSK (0x00000004)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_8_RX_POSTDIVCLKEN_MUXD2_BF_DEF (0x00000000)

///< Rx PostDiv clock enable in Mode D
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_8_RX_POSTDIVCLKEN_MUXD3_BF_OFF ( 3)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_8_RX_POSTDIVCLKEN_MUXD3_BF_WID ( 1)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_8_RX_POSTDIVCLKEN_MUXD3_BF_MSK (0x00000008)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_8_RX_POSTDIVCLKEN_MUXD3_BF_DEF (0x00000000)

///< Rx PostDiv clock enable in Mode E
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_8_RX_POSTDIVCLKEN_MUXD4_BF_OFF ( 4)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_8_RX_POSTDIVCLKEN_MUXD4_BF_WID ( 1)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_8_RX_POSTDIVCLKEN_MUXD4_BF_MSK (0x00000010)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_8_RX_POSTDIVCLKEN_MUXD4_BF_DEF (0x00000000)

///< Rx AutoNeg clock enable in Mode A
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_8_RX_AUTONEGCLKEN_MUXD0_BF_OFF ( 5)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_8_RX_AUTONEGCLKEN_MUXD0_BF_WID ( 1)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_8_RX_AUTONEGCLKEN_MUXD0_BF_MSK (0x00000020)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_8_RX_AUTONEGCLKEN_MUXD0_BF_DEF (0x00000000)

///< Rx AutoNeg clock enable in Mode B
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_8_RX_AUTONEGCLKEN_MUXD1_BF_OFF ( 6)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_8_RX_AUTONEGCLKEN_MUXD1_BF_WID ( 1)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_8_RX_AUTONEGCLKEN_MUXD1_BF_MSK (0x00000040)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_8_RX_AUTONEGCLKEN_MUXD1_BF_DEF (0x00000000)

///< Rx AutoNeg clock enable in Mode C
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_8_RX_AUTONEGCLKEN_MUXD2_BF_OFF ( 7)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_8_RX_AUTONEGCLKEN_MUXD2_BF_WID ( 1)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_8_RX_AUTONEGCLKEN_MUXD2_BF_MSK (0x00000080)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_8_RX_AUTONEGCLKEN_MUXD2_BF_DEF (0x00000000)

///< Rx AutoNeg clock enable in Mode D
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_8_RX_AUTONEGCLKEN_MUXD3_BF_OFF ( 8)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_8_RX_AUTONEGCLKEN_MUXD3_BF_WID ( 1)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_8_RX_AUTONEGCLKEN_MUXD3_BF_MSK (0x00000100)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_8_RX_AUTONEGCLKEN_MUXD3_BF_DEF (0x00000000)

///< Rx AutoNeg clock enable in Mode E
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_8_RX_AUTONEGCLKEN_MUXD4_BF_OFF ( 9)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_8_RX_AUTONEGCLKEN_MUXD4_BF_WID ( 1)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_8_RX_AUTONEGCLKEN_MUXD4_BF_MSK (0x00000200)
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_8_RX_AUTONEGCLKEN_MUXD4_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_POWER_MNG_CTRL register description at address offset 0x68
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_power_mng_ctrl
  * Rx power management control
  */

typedef union {
  struct {
    uint32_t RXPMU_H8_OFF_DELAY : 4;
    ///< PMU hibrate off delay
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXPMU_H8_RST_ON_DELAY : 4;
    ///< PMU hibrate rest on delay
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RXPMU_ISO_OFF_DELAY : 4;
    ///< PMU islolation off delay
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RXPMU_RESTORE_ISO_ON_DELAY : 4;
    ///< PMU restore isolation on delay
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t RXPMU_RESTORE_OFF_DELAY : 4;
    ///< PMU restore isolation off delay
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t RXPMU_RST_OFF_DELAY : 4;
    ///< PMU reset off delay
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t RXFSM_PMU_REQ_EN : 1;
    ///< PMU request override enable
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t RXFSM_PMU_REQ : 1;
    ///< PMU request override
    ///< AccessType="RW" BitOffset="25" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="26" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_pwr_mng_ctrl_reg_t;

#define PMA_RX_MGS_PWR_MNG_CTRL_DEFAULT (0x00000000U)
#define PMA_RX_MGS_PWR_MNG_CTRL_RD_MASK (0x03ffffffU)
#define PMA_RX_MGS_PWR_MNG_CTRL_WR_MASK (0x03ffffffU)


///< PMU hibrate off delay
#define PMA_RX_MGS_PWR_MNG_CTRL_RXPMU_H8_OFF_DELAY_BF_OFF ( 0)
#define PMA_RX_MGS_PWR_MNG_CTRL_RXPMU_H8_OFF_DELAY_BF_WID ( 4)
#define PMA_RX_MGS_PWR_MNG_CTRL_RXPMU_H8_OFF_DELAY_BF_MSK (0x0000000F)
#define PMA_RX_MGS_PWR_MNG_CTRL_RXPMU_H8_OFF_DELAY_BF_DEF (0x00000000)

///< PMU hibrate rest on delay
#define PMA_RX_MGS_PWR_MNG_CTRL_RXPMU_H8_RST_ON_DELAY_BF_OFF ( 4)
#define PMA_RX_MGS_PWR_MNG_CTRL_RXPMU_H8_RST_ON_DELAY_BF_WID ( 4)
#define PMA_RX_MGS_PWR_MNG_CTRL_RXPMU_H8_RST_ON_DELAY_BF_MSK (0x000000F0)
#define PMA_RX_MGS_PWR_MNG_CTRL_RXPMU_H8_RST_ON_DELAY_BF_DEF (0x00000000)

///< PMU islolation off delay
#define PMA_RX_MGS_PWR_MNG_CTRL_RXPMU_ISO_OFF_DELAY_BF_OFF ( 8)
#define PMA_RX_MGS_PWR_MNG_CTRL_RXPMU_ISO_OFF_DELAY_BF_WID ( 4)
#define PMA_RX_MGS_PWR_MNG_CTRL_RXPMU_ISO_OFF_DELAY_BF_MSK (0x00000F00)
#define PMA_RX_MGS_PWR_MNG_CTRL_RXPMU_ISO_OFF_DELAY_BF_DEF (0x00000000)

///< PMU restore isolation on delay
#define PMA_RX_MGS_PWR_MNG_CTRL_RXPMU_RESTORE_ISO_ON_DELAY_BF_OFF (12)
#define PMA_RX_MGS_PWR_MNG_CTRL_RXPMU_RESTORE_ISO_ON_DELAY_BF_WID ( 4)
#define PMA_RX_MGS_PWR_MNG_CTRL_RXPMU_RESTORE_ISO_ON_DELAY_BF_MSK (0x0000F000)
#define PMA_RX_MGS_PWR_MNG_CTRL_RXPMU_RESTORE_ISO_ON_DELAY_BF_DEF (0x00000000)

///< PMU restore isolation off delay
#define PMA_RX_MGS_PWR_MNG_CTRL_RXPMU_RESTORE_OFF_DELAY_BF_OFF (16)
#define PMA_RX_MGS_PWR_MNG_CTRL_RXPMU_RESTORE_OFF_DELAY_BF_WID ( 4)
#define PMA_RX_MGS_PWR_MNG_CTRL_RXPMU_RESTORE_OFF_DELAY_BF_MSK (0x000F0000)
#define PMA_RX_MGS_PWR_MNG_CTRL_RXPMU_RESTORE_OFF_DELAY_BF_DEF (0x00000000)

///< PMU reset off delay
#define PMA_RX_MGS_PWR_MNG_CTRL_RXPMU_RST_OFF_DELAY_BF_OFF (20)
#define PMA_RX_MGS_PWR_MNG_CTRL_RXPMU_RST_OFF_DELAY_BF_WID ( 4)
#define PMA_RX_MGS_PWR_MNG_CTRL_RXPMU_RST_OFF_DELAY_BF_MSK (0x00F00000)
#define PMA_RX_MGS_PWR_MNG_CTRL_RXPMU_RST_OFF_DELAY_BF_DEF (0x00000000)

///< PMU request override enable
#define PMA_RX_MGS_PWR_MNG_CTRL_RXFSM_PMU_REQ_EN_BF_OFF (24)
#define PMA_RX_MGS_PWR_MNG_CTRL_RXFSM_PMU_REQ_EN_BF_WID ( 1)
#define PMA_RX_MGS_PWR_MNG_CTRL_RXFSM_PMU_REQ_EN_BF_MSK (0x01000000)
#define PMA_RX_MGS_PWR_MNG_CTRL_RXFSM_PMU_REQ_EN_BF_DEF (0x00000000)

///< PMU request override
#define PMA_RX_MGS_PWR_MNG_CTRL_RXFSM_PMU_REQ_BF_OFF (25)
#define PMA_RX_MGS_PWR_MNG_CTRL_RXFSM_PMU_REQ_BF_WID ( 1)
#define PMA_RX_MGS_PWR_MNG_CTRL_RXFSM_PMU_REQ_BF_MSK (0x02000000)
#define PMA_RX_MGS_PWR_MNG_CTRL_RXFSM_PMU_REQ_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_POWER_MNG_STATUS register description at address offset 0x6c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_power_mng_status
  * Rx power management status
  */

typedef union {
  struct {
    uint32_t RXFSM_PMU_ACK : 1;
    ///< PMU ack
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RXFSM_PMU_PSTATE : 1;
    ///< PMU current Pstate
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t RXFSM_PMU_STAT : 1;
    ///< PMU status.  0 - Idle; 1 - Isolation On
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t RXFSM_PMU_STATE : 4;
    ///< PMU FSM state
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t RXFSM_PMUIF_STATE : 3;
    ///< Rx PMU i/f FSM state
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 21;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_pwr_mng_stat_reg_t;

#define PMA_RX_MGS_PWR_MNG_STAT_DEFAULT (0x00000000U)
#define PMA_RX_MGS_PWR_MNG_STAT_RD_MASK (0x000007f7U)
#define PMA_RX_MGS_PWR_MNG_STAT_WR_MASK (0x00000000U)


///< PMU ack
#define PMA_RX_MGS_PWR_MNG_STAT_RXFSM_PMU_ACK_BF_OFF ( 0)
#define PMA_RX_MGS_PWR_MNG_STAT_RXFSM_PMU_ACK_BF_WID ( 1)
#define PMA_RX_MGS_PWR_MNG_STAT_RXFSM_PMU_ACK_BF_MSK (0x00000001)
#define PMA_RX_MGS_PWR_MNG_STAT_RXFSM_PMU_ACK_BF_DEF (0x00000000)

///< PMU current Pstate
#define PMA_RX_MGS_PWR_MNG_STAT_RXFSM_PMU_PSTATE_BF_OFF ( 1)
#define PMA_RX_MGS_PWR_MNG_STAT_RXFSM_PMU_PSTATE_BF_WID ( 1)
#define PMA_RX_MGS_PWR_MNG_STAT_RXFSM_PMU_PSTATE_BF_MSK (0x00000002)
#define PMA_RX_MGS_PWR_MNG_STAT_RXFSM_PMU_PSTATE_BF_DEF (0x00000000)

///< PMU status.  0 - Idle; 1 - Isolation On
#define PMA_RX_MGS_PWR_MNG_STAT_RXFSM_PMU_STAT_BF_OFF ( 2)
#define PMA_RX_MGS_PWR_MNG_STAT_RXFSM_PMU_STAT_BF_WID ( 1)
#define PMA_RX_MGS_PWR_MNG_STAT_RXFSM_PMU_STAT_BF_MSK (0x00000004)
#define PMA_RX_MGS_PWR_MNG_STAT_RXFSM_PMU_STAT_BF_DEF (0x00000000)

///< PMU FSM state
#define PMA_RX_MGS_PWR_MNG_STAT_RXFSM_PMU_STATE_BF_OFF ( 4)
#define PMA_RX_MGS_PWR_MNG_STAT_RXFSM_PMU_STATE_BF_WID ( 4)
#define PMA_RX_MGS_PWR_MNG_STAT_RXFSM_PMU_STATE_BF_MSK (0x000000F0)
#define PMA_RX_MGS_PWR_MNG_STAT_RXFSM_PMU_STATE_BF_DEF (0x00000000)

///< Rx PMU i/f FSM state
#define PMA_RX_MGS_PWR_MNG_STAT_RXFSM_PMUIF_STATE_BF_OFF ( 8)
#define PMA_RX_MGS_PWR_MNG_STAT_RXFSM_PMUIF_STATE_BF_WID ( 3)
#define PMA_RX_MGS_PWR_MNG_STAT_RXFSM_PMUIF_STATE_BF_MSK (0x00000700)
#define PMA_RX_MGS_PWR_MNG_STAT_RXFSM_PMUIF_STATE_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CALDUTY_CTRL_0 register description at address offset 0x70
  *
  * Register default value:        0x04104002
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_calduty_ctrl_0
  * Rx duty cycle calibration control
  */

typedef union {
  struct {
    uint32_t RXCALDUTYCTRL_DISABLE : 1;
    ///< Rx duty cycle calibration disable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXCALDUTYSTAT_DONE : 1;
    ///< RxCalDutyCtrl Done
    ///< AccessType="RW" BitOffset="1" ResetValue="0x1"
    uint32_t RXCALDUTYCTRL_CALRUN_DUTY : 1;
    ///< Rx duty cycle calibration run
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t RXCALDUTYCTRL_I_DIV1_BIN : 6;
    ///< RxCalDutyCtrl I DIV1 bin
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RXCALDUTYCTRL_I_DIV2_BIN : 6;
    ///< RxCalDutyCtrl I DIV2 bin
    ///< AccessType="RW" BitOffset="9" ResetValue="0x20"
    uint32_t RXCALDUTYCTRL_I_DIV4_BIN : 6;
    ///< RxCalDutyCtrl I DIV4 bin
    ///< AccessType="RW" BitOffset="15" ResetValue="0x20"
    uint32_t RXCALDUTYCTRL_I_DIV8_BIN : 6;
    ///< RxCalDutyCtrl I DIV8 bin
    ///< AccessType="RW" BitOffset="21" ResetValue="0x20"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="27" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_calduty_ctrl_0_reg_t;

#define PMA_RX_MGS_CALDUTY_CTRL_0_DEFAULT (0x04104002U)
#define PMA_RX_MGS_CALDUTY_CTRL_0_RD_MASK (0x07ffffffU)
#define PMA_RX_MGS_CALDUTY_CTRL_0_WR_MASK (0x07ffffffU)


///< Rx duty cycle calibration disable
#define PMA_RX_MGS_CALDUTY_CTRL_0_RXCALDUTYCTRL_DIS_BF_OFF ( 0)
#define PMA_RX_MGS_CALDUTY_CTRL_0_RXCALDUTYCTRL_DIS_BF_WID ( 1)
#define PMA_RX_MGS_CALDUTY_CTRL_0_RXCALDUTYCTRL_DIS_BF_MSK (0x00000001)
#define PMA_RX_MGS_CALDUTY_CTRL_0_RXCALDUTYCTRL_DIS_BF_DEF (0x00000000)

///< RxCalDutyCtrl Done
#define PMA_RX_MGS_CALDUTY_CTRL_0_RXCALDUTYSTAT_DONE_BF_OFF ( 1)
#define PMA_RX_MGS_CALDUTY_CTRL_0_RXCALDUTYSTAT_DONE_BF_WID ( 1)
#define PMA_RX_MGS_CALDUTY_CTRL_0_RXCALDUTYSTAT_DONE_BF_MSK (0x00000002)
#define PMA_RX_MGS_CALDUTY_CTRL_0_RXCALDUTYSTAT_DONE_BF_DEF (0x00000002)

///< Rx duty cycle calibration run
#define PMA_RX_MGS_CALDUTY_CTRL_0_RXCALDUTYCTRL_CALRUN_DUTY_BF_OFF ( 2)
#define PMA_RX_MGS_CALDUTY_CTRL_0_RXCALDUTYCTRL_CALRUN_DUTY_BF_WID ( 1)
#define PMA_RX_MGS_CALDUTY_CTRL_0_RXCALDUTYCTRL_CALRUN_DUTY_BF_MSK (0x00000004)
#define PMA_RX_MGS_CALDUTY_CTRL_0_RXCALDUTYCTRL_CALRUN_DUTY_BF_DEF (0x00000000)

///< RxCalDutyCtrl I DIV1 bin
#define PMA_RX_MGS_CALDUTY_CTRL_0_RXCALDUTYCTRL_I_DIV1_BIN_BF_OFF ( 3)
#define PMA_RX_MGS_CALDUTY_CTRL_0_RXCALDUTYCTRL_I_DIV1_BIN_BF_WID ( 6)
#define PMA_RX_MGS_CALDUTY_CTRL_0_RXCALDUTYCTRL_I_DIV1_BIN_BF_MSK (0x000001F8)
#define PMA_RX_MGS_CALDUTY_CTRL_0_RXCALDUTYCTRL_I_DIV1_BIN_BF_DEF (0x00000000)

///< RxCalDutyCtrl I DIV2 bin
#define PMA_RX_MGS_CALDUTY_CTRL_0_RXCALDUTYCTRL_I_DIV2_BIN_BF_OFF ( 9)
#define PMA_RX_MGS_CALDUTY_CTRL_0_RXCALDUTYCTRL_I_DIV2_BIN_BF_WID ( 6)
#define PMA_RX_MGS_CALDUTY_CTRL_0_RXCALDUTYCTRL_I_DIV2_BIN_BF_MSK (0x00007E00)
#define PMA_RX_MGS_CALDUTY_CTRL_0_RXCALDUTYCTRL_I_DIV2_BIN_BF_DEF (0x00004000)

///< RxCalDutyCtrl I DIV4 bin
#define PMA_RX_MGS_CALDUTY_CTRL_0_RXCALDUTYCTRL_I_DIV4_BIN_BF_OFF (15)
#define PMA_RX_MGS_CALDUTY_CTRL_0_RXCALDUTYCTRL_I_DIV4_BIN_BF_WID ( 6)
#define PMA_RX_MGS_CALDUTY_CTRL_0_RXCALDUTYCTRL_I_DIV4_BIN_BF_MSK (0x001F8000)
#define PMA_RX_MGS_CALDUTY_CTRL_0_RXCALDUTYCTRL_I_DIV4_BIN_BF_DEF (0x00100000)

///< RxCalDutyCtrl I DIV8 bin
#define PMA_RX_MGS_CALDUTY_CTRL_0_RXCALDUTYCTRL_I_DIV8_BIN_BF_OFF (21)
#define PMA_RX_MGS_CALDUTY_CTRL_0_RXCALDUTYCTRL_I_DIV8_BIN_BF_WID ( 6)
#define PMA_RX_MGS_CALDUTY_CTRL_0_RXCALDUTYCTRL_I_DIV8_BIN_BF_MSK (0x07E00000)
#define PMA_RX_MGS_CALDUTY_CTRL_0_RXCALDUTYCTRL_I_DIV8_BIN_BF_DEF (0x04000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CALDUTY_CTRL_1 register description at address offset 0x74
  *
  * Register default value:        0x00820800
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_calduty_ctrl_1
  * Rx duty cycle calibration control
  */

typedef union {
  struct {
    uint32_t RXCALDUTYCTRL_Q_DIV1_BIN : 6;
    ///< RxCalDutyCtrl Q DIV1 bin
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXCALDUTYCTRL_Q_DIV2_BIN : 6;
    ///< RxCalDutyCtrl Q DIV2 bin
    ///< AccessType="RW" BitOffset="6" ResetValue="0x20"
    uint32_t RXCALDUTYCTRL_Q_DIV4_BIN : 6;
    ///< RxCalDutyCtrl Q DIV4 bin
    ///< AccessType="RW" BitOffset="12" ResetValue="0x20"
    uint32_t RXCALDUTYCTRL_Q_DIV8_BIN : 6;
    ///< RxCalDutyCtrl Q DIV8 bin
    ///< AccessType="RW" BitOffset="18" ResetValue="0x20"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_calduty_ctrl_1_reg_t;

#define PMA_RX_MGS_CALDUTY_CTRL_1_DEFAULT (0x00820800U)
#define PMA_RX_MGS_CALDUTY_CTRL_1_RD_MASK (0x00ffffffU)
#define PMA_RX_MGS_CALDUTY_CTRL_1_WR_MASK (0x00ffffffU)


///< RxCalDutyCtrl Q DIV1 bin
#define PMA_RX_MGS_CALDUTY_CTRL_1_RXCALDUTYCTRL_Q_DIV1_BIN_BF_OFF ( 0)
#define PMA_RX_MGS_CALDUTY_CTRL_1_RXCALDUTYCTRL_Q_DIV1_BIN_BF_WID ( 6)
#define PMA_RX_MGS_CALDUTY_CTRL_1_RXCALDUTYCTRL_Q_DIV1_BIN_BF_MSK (0x0000003F)
#define PMA_RX_MGS_CALDUTY_CTRL_1_RXCALDUTYCTRL_Q_DIV1_BIN_BF_DEF (0x00000000)

///< RxCalDutyCtrl Q DIV2 bin
#define PMA_RX_MGS_CALDUTY_CTRL_1_RXCALDUTYCTRL_Q_DIV2_BIN_BF_OFF ( 6)
#define PMA_RX_MGS_CALDUTY_CTRL_1_RXCALDUTYCTRL_Q_DIV2_BIN_BF_WID ( 6)
#define PMA_RX_MGS_CALDUTY_CTRL_1_RXCALDUTYCTRL_Q_DIV2_BIN_BF_MSK (0x00000FC0)
#define PMA_RX_MGS_CALDUTY_CTRL_1_RXCALDUTYCTRL_Q_DIV2_BIN_BF_DEF (0x00000800)

///< RxCalDutyCtrl Q DIV4 bin
#define PMA_RX_MGS_CALDUTY_CTRL_1_RXCALDUTYCTRL_Q_DIV4_BIN_BF_OFF (12)
#define PMA_RX_MGS_CALDUTY_CTRL_1_RXCALDUTYCTRL_Q_DIV4_BIN_BF_WID ( 6)
#define PMA_RX_MGS_CALDUTY_CTRL_1_RXCALDUTYCTRL_Q_DIV4_BIN_BF_MSK (0x0003F000)
#define PMA_RX_MGS_CALDUTY_CTRL_1_RXCALDUTYCTRL_Q_DIV4_BIN_BF_DEF (0x00020000)

///< RxCalDutyCtrl Q DIV8 bin
#define PMA_RX_MGS_CALDUTY_CTRL_1_RXCALDUTYCTRL_Q_DIV8_BIN_BF_OFF (18)
#define PMA_RX_MGS_CALDUTY_CTRL_1_RXCALDUTYCTRL_Q_DIV8_BIN_BF_WID ( 6)
#define PMA_RX_MGS_CALDUTY_CTRL_1_RXCALDUTYCTRL_Q_DIV8_BIN_BF_MSK (0x00FC0000)
#define PMA_RX_MGS_CALDUTY_CTRL_1_RXCALDUTYCTRL_Q_DIV8_BIN_BF_DEF (0x00800000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CALFSM_CTRL register description at address offset 0x78
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_calfsm_ctrl
  * Rx Calibration Control
  */

typedef union {
  struct {
    uint32_t RXCALIDLEOFFSETFSMOUT_POS_EN : 1;
    ///< Rx Sqlch calibration request enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXCALIDLEOFFSETFSMOUT_NEG_EN : 1;
    ///< Rx Sqlch calibration request enable
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_calfsm_ctrl_reg_t;

#define PMA_RX_MGS_CALFSM_CTRL_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CALFSM_CTRL_RD_MASK (0x00000003U)
#define PMA_RX_MGS_CALFSM_CTRL_WR_MASK (0x00000003U)


///< Rx Sqlch calibration request enable
#define PMA_RX_MGS_CALFSM_CTRL_RXCALIDLEOFFSETFSMOUT_POS_EN_BF_OFF ( 0)
#define PMA_RX_MGS_CALFSM_CTRL_RXCALIDLEOFFSETFSMOUT_POS_EN_BF_WID ( 1)
#define PMA_RX_MGS_CALFSM_CTRL_RXCALIDLEOFFSETFSMOUT_POS_EN_BF_MSK (0x00000001)
#define PMA_RX_MGS_CALFSM_CTRL_RXCALIDLEOFFSETFSMOUT_POS_EN_BF_DEF (0x00000000)

///< Rx Sqlch calibration request enable
#define PMA_RX_MGS_CALFSM_CTRL_RXCALIDLEOFFSETFSMOUT_NEG_EN_BF_OFF ( 1)
#define PMA_RX_MGS_CALFSM_CTRL_RXCALIDLEOFFSETFSMOUT_NEG_EN_BF_WID ( 1)
#define PMA_RX_MGS_CALFSM_CTRL_RXCALIDLEOFFSETFSMOUT_NEG_EN_BF_MSK (0x00000002)
#define PMA_RX_MGS_CALFSM_CTRL_RXCALIDLEOFFSETFSMOUT_NEG_EN_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_STATUS_0 register description at address offset 0x7c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_status_0
  * Rx status
  */

typedef union {
  struct {
    uint32_t RXFSM_MAIN_CKEN_STAT : 1;
    ///< Rx main clock stat
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RXFSM_MAIN_IFCMN_STATE : 2;
    ///< Rx Main-to-CMN I/F state
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t RXFSM_MAIN_STATE : 4;
    ///< Rx Main FSM state
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t RXFSM_MAIN_CUR_PSTATE : 3;
    ///< Rx Main FSM current Pstate
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
    uint32_t RXFSM_MAIN_CUR_RATE_FREQ : 3;
    ///< Rx Main FSM current Rate Frequency (Mode)
    ///< AccessType="RO/V" BitOffset="11" ResetValue="0x0"
    uint32_t RXFSM_MAIN_CUR_RATE_DIV : 4;
    ///< Rx Main FSM current Rate Div
    ///< AccessType="RO/V" BitOffset="14" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
    uint32_t RXFSM_MAIN_CUR_WIDTH : 5;
    ///< Rx Main FSM current Rate Width
    ///< AccessType="RO/V" BitOffset="19" ResetValue="0x0"
    uint32_t RXFSM_MAIN_TARG_PSTATE : 3;
    ///< Rx Main FSM target Pstate
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t RXFSM_MAIN_TARG_RATE_FREQ : 3;
    ///< Rx Main FSM target Rate Frequency (Mode)
    ///< AccessType="RO/V" BitOffset="27" ResetValue="0x0"
    uint32_t RXFSM_MAIN_STATUS : 1;
    ///< Main FSM status.  This bit be set to 1 if FSM is in IDLE/PG/RST/PG_EXIT
    ///< state.
    ///< AccessType="RO/V" BitOffset="30" ResetValue="0x0"
    uint32_t RXFSM_MAIN_READY : 1;
    ///< Main FSM ready
    ///< AccessType="RO/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_mgs_stat_0_reg_t;

#define PMA_RX_MGS_STAT_0_DEFAULT (0x00000000U)
#define PMA_RX_MGS_STAT_0_RD_MASK (0xfffbfbffU)
#define PMA_RX_MGS_STAT_0_WR_MASK (0x00000000U)


///< Rx main clock stat
#define PMA_RX_MGS_STAT_0_RXFSM_MAIN_CKEN_STAT_BF_OFF ( 0)
#define PMA_RX_MGS_STAT_0_RXFSM_MAIN_CKEN_STAT_BF_WID ( 1)
#define PMA_RX_MGS_STAT_0_RXFSM_MAIN_CKEN_STAT_BF_MSK (0x00000001)
#define PMA_RX_MGS_STAT_0_RXFSM_MAIN_CKEN_STAT_BF_DEF (0x00000000)

///< Rx Main-to-CMN I/F state
#define PMA_RX_MGS_STAT_0_RXFSM_MAIN_IFCMN_STATE_BF_OFF ( 1)
#define PMA_RX_MGS_STAT_0_RXFSM_MAIN_IFCMN_STATE_BF_WID ( 2)
#define PMA_RX_MGS_STAT_0_RXFSM_MAIN_IFCMN_STATE_BF_MSK (0x00000006)
#define PMA_RX_MGS_STAT_0_RXFSM_MAIN_IFCMN_STATE_BF_DEF (0x00000000)

///< Rx Main FSM state
#define PMA_RX_MGS_STAT_0_RXFSM_MAIN_STATE_BF_OFF ( 3)
#define PMA_RX_MGS_STAT_0_RXFSM_MAIN_STATE_BF_WID ( 4)
#define PMA_RX_MGS_STAT_0_RXFSM_MAIN_STATE_BF_MSK (0x00000078)
#define PMA_RX_MGS_STAT_0_RXFSM_MAIN_STATE_BF_DEF (0x00000000)

///< Rx Main FSM current Pstate
#define PMA_RX_MGS_STAT_0_RXFSM_MAIN_CUR_PSTATE_BF_OFF ( 7)
#define PMA_RX_MGS_STAT_0_RXFSM_MAIN_CUR_PSTATE_BF_WID ( 3)
#define PMA_RX_MGS_STAT_0_RXFSM_MAIN_CUR_PSTATE_BF_MSK (0x00000380)
#define PMA_RX_MGS_STAT_0_RXFSM_MAIN_CUR_PSTATE_BF_DEF (0x00000000)

///< Rx Main FSM current Rate Frequency (Mode)
#define PMA_RX_MGS_STAT_0_RXFSM_MAIN_CUR_RATE_FREQ_BF_OFF (11)
#define PMA_RX_MGS_STAT_0_RXFSM_MAIN_CUR_RATE_FREQ_BF_WID ( 3)
#define PMA_RX_MGS_STAT_0_RXFSM_MAIN_CUR_RATE_FREQ_BF_MSK (0x00003800)
#define PMA_RX_MGS_STAT_0_RXFSM_MAIN_CUR_RATE_FREQ_BF_DEF (0x00000000)

///< Rx Main FSM current Rate Div
#define PMA_RX_MGS_STAT_0_RXFSM_MAIN_CUR_RATE_DIV_BF_OFF (14)
#define PMA_RX_MGS_STAT_0_RXFSM_MAIN_CUR_RATE_DIV_BF_WID ( 4)
#define PMA_RX_MGS_STAT_0_RXFSM_MAIN_CUR_RATE_DIV_BF_MSK (0x0003C000)
#define PMA_RX_MGS_STAT_0_RXFSM_MAIN_CUR_RATE_DIV_BF_DEF (0x00000000)

///< Rx Main FSM current Rate Width
#define PMA_RX_MGS_STAT_0_RXFSM_MAIN_CUR_WIDTH_BF_OFF (19)
#define PMA_RX_MGS_STAT_0_RXFSM_MAIN_CUR_WIDTH_BF_WID ( 5)
#define PMA_RX_MGS_STAT_0_RXFSM_MAIN_CUR_WIDTH_BF_MSK (0x00F80000)
#define PMA_RX_MGS_STAT_0_RXFSM_MAIN_CUR_WIDTH_BF_DEF (0x00000000)

///< Rx Main FSM target Pstate
#define PMA_RX_MGS_STAT_0_RXFSM_MAIN_TARG_PSTATE_BF_OFF (24)
#define PMA_RX_MGS_STAT_0_RXFSM_MAIN_TARG_PSTATE_BF_WID ( 3)
#define PMA_RX_MGS_STAT_0_RXFSM_MAIN_TARG_PSTATE_BF_MSK (0x07000000)
#define PMA_RX_MGS_STAT_0_RXFSM_MAIN_TARG_PSTATE_BF_DEF (0x00000000)

///< Rx Main FSM target Rate Frequency (Mode)
#define PMA_RX_MGS_STAT_0_RXFSM_MAIN_TARG_RATE_FREQ_BF_OFF (27)
#define PMA_RX_MGS_STAT_0_RXFSM_MAIN_TARG_RATE_FREQ_BF_WID ( 3)
#define PMA_RX_MGS_STAT_0_RXFSM_MAIN_TARG_RATE_FREQ_BF_MSK (0x38000000)
#define PMA_RX_MGS_STAT_0_RXFSM_MAIN_TARG_RATE_FREQ_BF_DEF (0x00000000)

///< Main FSM status.  This bit be set to 1 if FSM is in IDLE/PG/RST/PG_EXIT
///< state.
#define PMA_RX_MGS_STAT_0_RXFSM_MAIN_STAT_BF_OFF (30)
#define PMA_RX_MGS_STAT_0_RXFSM_MAIN_STAT_BF_WID ( 1)
#define PMA_RX_MGS_STAT_0_RXFSM_MAIN_STAT_BF_MSK (0x40000000)
#define PMA_RX_MGS_STAT_0_RXFSM_MAIN_STAT_BF_DEF (0x00000000)

///< Main FSM ready
#define PMA_RX_MGS_STAT_0_RXFSM_MAIN_READY_BF_OFF (31)
#define PMA_RX_MGS_STAT_0_RXFSM_MAIN_READY_BF_WID ( 1)
#define PMA_RX_MGS_STAT_0_RXFSM_MAIN_READY_BF_MSK (0x80000000)
#define PMA_RX_MGS_STAT_0_RXFSM_MAIN_READY_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_STATUS_1 register description at address offset 0x80
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_status_1
  * Rx status
  */

typedef union {
  struct {
    uint32_t RXFSM_MAIN_TARG_RATE_DIV : 4;
    ///< Rx Main FSM target Rate Div
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RXFSM_MAIN_TARG_WIDTH : 5;
    ///< Rx Main FSM target Rate Width
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t RXFSM_CAL_CUR_PSTATE : 3;
    ///< Rx CalMaster current Pstate
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
    uint32_t RXFSM_CAL_CUR_QUAD : 4;
    ///< Rx CalMaster current Qaud
    ///< AccessType="RO/V" BitOffset="13" ResetValue="0x0"
    uint32_t RXFSM_CAL_STATE : 4;
    ///< Rx CalMaster FSM state
    ///< AccessType="RO/V" BitOffset="17" ResetValue="0x0"
    uint32_t RXFSM_RPU_STATE : 3;
    ///< Rx RPU FSM State
    ///< AccessType="RO/V" BitOffset="21" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
    uint32_t RXRATEWIDTH_WIDTH : 5;
    ///< Rx Ratwidth width
    ///< AccessType="RO/V" BitOffset="25" ResetValue="0x0"
    uint32_t RXFSM_CAL_IS_RATEWIDTHFSM_REQ : 1;
    ///< CalMaster FSM request source.  This shows which FSM requests for CalMaster
    ///< to start calibration/rpu sequence.  0 - From MainFSM; 1 - from Ratewidth
    ///< FSM
    ///< AccessType="RO/V" BitOffset="30" ResetValue="0x0"
    uint32_t RXDAT_SIGNALDETECT : 1;
    ///< Rx signal delect
    ///< AccessType="RO/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_mgs_stat_1_reg_t;

#define PMA_RX_MGS_STAT_1_DEFAULT (0x00000000U)
#define PMA_RX_MGS_STAT_1_RD_MASK (0xfeffefffU)
#define PMA_RX_MGS_STAT_1_WR_MASK (0x00000000U)


///< Rx Main FSM target Rate Div
#define PMA_RX_MGS_STAT_1_RXFSM_MAIN_TARG_RATE_DIV_BF_OFF ( 0)
#define PMA_RX_MGS_STAT_1_RXFSM_MAIN_TARG_RATE_DIV_BF_WID ( 4)
#define PMA_RX_MGS_STAT_1_RXFSM_MAIN_TARG_RATE_DIV_BF_MSK (0x0000000F)
#define PMA_RX_MGS_STAT_1_RXFSM_MAIN_TARG_RATE_DIV_BF_DEF (0x00000000)

///< Rx Main FSM target Rate Width
#define PMA_RX_MGS_STAT_1_RXFSM_MAIN_TARG_WIDTH_BF_OFF ( 4)
#define PMA_RX_MGS_STAT_1_RXFSM_MAIN_TARG_WIDTH_BF_WID ( 5)
#define PMA_RX_MGS_STAT_1_RXFSM_MAIN_TARG_WIDTH_BF_MSK (0x000001F0)
#define PMA_RX_MGS_STAT_1_RXFSM_MAIN_TARG_WIDTH_BF_DEF (0x00000000)

///< Rx CalMaster current Pstate
#define PMA_RX_MGS_STAT_1_RXFSM_CAL_CUR_PSTATE_BF_OFF ( 9)
#define PMA_RX_MGS_STAT_1_RXFSM_CAL_CUR_PSTATE_BF_WID ( 3)
#define PMA_RX_MGS_STAT_1_RXFSM_CAL_CUR_PSTATE_BF_MSK (0x00000E00)
#define PMA_RX_MGS_STAT_1_RXFSM_CAL_CUR_PSTATE_BF_DEF (0x00000000)

///< Rx CalMaster current Qaud
#define PMA_RX_MGS_STAT_1_RXFSM_CAL_CUR_QUAD_BF_OFF (13)
#define PMA_RX_MGS_STAT_1_RXFSM_CAL_CUR_QUAD_BF_WID ( 4)
#define PMA_RX_MGS_STAT_1_RXFSM_CAL_CUR_QUAD_BF_MSK (0x0001E000)
#define PMA_RX_MGS_STAT_1_RXFSM_CAL_CUR_QUAD_BF_DEF (0x00000000)

///< Rx CalMaster FSM state
#define PMA_RX_MGS_STAT_1_RXFSM_CAL_STATE_BF_OFF (17)
#define PMA_RX_MGS_STAT_1_RXFSM_CAL_STATE_BF_WID ( 4)
#define PMA_RX_MGS_STAT_1_RXFSM_CAL_STATE_BF_MSK (0x001E0000)
#define PMA_RX_MGS_STAT_1_RXFSM_CAL_STATE_BF_DEF (0x00000000)

///< Rx RPU FSM State
#define PMA_RX_MGS_STAT_1_RXFSM_RPU_STATE_BF_OFF (21)
#define PMA_RX_MGS_STAT_1_RXFSM_RPU_STATE_BF_WID ( 3)
#define PMA_RX_MGS_STAT_1_RXFSM_RPU_STATE_BF_MSK (0x00E00000)
#define PMA_RX_MGS_STAT_1_RXFSM_RPU_STATE_BF_DEF (0x00000000)

///< Rx Ratwidth width
#define PMA_RX_MGS_STAT_1_RXRATEWIDTH_WIDTH_BF_OFF (25)
#define PMA_RX_MGS_STAT_1_RXRATEWIDTH_WIDTH_BF_WID ( 5)
#define PMA_RX_MGS_STAT_1_RXRATEWIDTH_WIDTH_BF_MSK (0x3E000000)
#define PMA_RX_MGS_STAT_1_RXRATEWIDTH_WIDTH_BF_DEF (0x00000000)

///< CalMaster FSM request source.  This shows which FSM requests for CalMaster
///< to start calibration/rpu sequence.  0 - From MainFSM; 1 - from Ratewidth
///< FSM
#define PMA_RX_MGS_STAT_1_RXFSM_CAL_IS_RATEWIDTHFSM_REQ_BF_OFF (30)
#define PMA_RX_MGS_STAT_1_RXFSM_CAL_IS_RATEWIDTHFSM_REQ_BF_WID ( 1)
#define PMA_RX_MGS_STAT_1_RXFSM_CAL_IS_RATEWIDTHFSM_REQ_BF_MSK (0x40000000)
#define PMA_RX_MGS_STAT_1_RXFSM_CAL_IS_RATEWIDTHFSM_REQ_BF_DEF (0x00000000)

///< Rx signal delect
#define PMA_RX_MGS_STAT_1_RXDAT_SIGNALDETECT_BF_OFF (31)
#define PMA_RX_MGS_STAT_1_RXDAT_SIGNALDETECT_BF_WID ( 1)
#define PMA_RX_MGS_STAT_1_RXDAT_SIGNALDETECT_BF_MSK (0x80000000)
#define PMA_RX_MGS_STAT_1_RXDAT_SIGNALDETECT_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_STATUS_2 register description at address offset 0x84
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_status_2
  * Rx status
  */

typedef union {
  struct {
    uint32_t RXFSM_RATEWIDTH_STATE : 6;
    ///< Rx Ratwidth FSM state
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RXRPU_STATE_PSTATE : 3;
    ///< RPU curent Pstate
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t RXRPU_STATE_QUAD : 4;
    ///< RPU curent Quad
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t RXRPU_STEPDIR : 1;
    ///< RPU power up/down status.  0 - power down ; 1 - power up
    ///< AccessType="RO/V" BitOffset="13" ResetValue="0x0"
    uint32_t RXRATEWIDTH_IS_RATEWIDTH : 1;
    ///< Ratewidth FSM ratewidth change status.  This bit will be set to '1'
    ///< when ratewidth fsm detect a change in rate_div, rate_freq or width
    ///< AccessType="RO/V" BitOffset="14" ResetValue="0x0"
    uint32_t RXRATEWIDTH_IS_WIDTH_ONLY : 1;
    ///< Ratewidth FSM width change status.  This bit will be set to '1' when
    ///< ratewidth fsm detect a change in width only
    ///< AccessType="RO/V" BitOffset="15" ResetValue="0x0"
    uint32_t RXRATEWIDTH_IS_RATEFREQ : 1;
    ///< Ratewidth FSM rate freq change status.  This bit will be set to '1'
    ///< when ratewidth fsm detect a change in rate_freq only
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t RXCALDUTYBG_ABORT : 1;
    ///< Rx duty cycle background calibration abort
    ///< AccessType="RO/V" BitOffset="17" ResetValue="0x0"
    uint32_t RXCALDUTYBG_READY : 1;
    ///< Rx duty cycle background calibration ready
    ///< AccessType="RO/V" BitOffset="18" ResetValue="0x0"
    uint32_t RXFSM_MAIN_IFSYNTH_STATE : 2;
    ///< Rx Main-to-CMN PLL I/F state
    ///< AccessType="RO/V" BitOffset="19" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_stat_2_reg_t;

#define PMA_RX_MGS_STAT_2_DEFAULT (0x00000000U)
#define PMA_RX_MGS_STAT_2_RD_MASK (0x001fffffU)
#define PMA_RX_MGS_STAT_2_WR_MASK (0x00000000U)


///< Rx Ratwidth FSM state
#define PMA_RX_MGS_STAT_2_RXFSM_RATEWIDTH_STATE_BF_OFF ( 0)
#define PMA_RX_MGS_STAT_2_RXFSM_RATEWIDTH_STATE_BF_WID ( 6)
#define PMA_RX_MGS_STAT_2_RXFSM_RATEWIDTH_STATE_BF_MSK (0x0000003F)
#define PMA_RX_MGS_STAT_2_RXFSM_RATEWIDTH_STATE_BF_DEF (0x00000000)

///< RPU curent Pstate
#define PMA_RX_MGS_STAT_2_RXRPU_STATE_PSTATE_BF_OFF ( 6)
#define PMA_RX_MGS_STAT_2_RXRPU_STATE_PSTATE_BF_WID ( 3)
#define PMA_RX_MGS_STAT_2_RXRPU_STATE_PSTATE_BF_MSK (0x000001C0)
#define PMA_RX_MGS_STAT_2_RXRPU_STATE_PSTATE_BF_DEF (0x00000000)

///< RPU curent Quad
#define PMA_RX_MGS_STAT_2_RXRPU_STATE_QUAD_BF_OFF ( 9)
#define PMA_RX_MGS_STAT_2_RXRPU_STATE_QUAD_BF_WID ( 4)
#define PMA_RX_MGS_STAT_2_RXRPU_STATE_QUAD_BF_MSK (0x00001E00)
#define PMA_RX_MGS_STAT_2_RXRPU_STATE_QUAD_BF_DEF (0x00000000)

///< RPU power up/down status.  0 - power down ; 1 - power up
#define PMA_RX_MGS_STAT_2_RXRPU_STEPDIR_BF_OFF (13)
#define PMA_RX_MGS_STAT_2_RXRPU_STEPDIR_BF_WID ( 1)
#define PMA_RX_MGS_STAT_2_RXRPU_STEPDIR_BF_MSK (0x00002000)
#define PMA_RX_MGS_STAT_2_RXRPU_STEPDIR_BF_DEF (0x00000000)

///< Ratewidth FSM ratewidth change status.  This bit will be set to '1'
///< when ratewidth fsm detect a change in rate_div, rate_freq or width
#define PMA_RX_MGS_STAT_2_RXRATEWIDTH_IS_RATEWIDTH_BF_OFF (14)
#define PMA_RX_MGS_STAT_2_RXRATEWIDTH_IS_RATEWIDTH_BF_WID ( 1)
#define PMA_RX_MGS_STAT_2_RXRATEWIDTH_IS_RATEWIDTH_BF_MSK (0x00004000)
#define PMA_RX_MGS_STAT_2_RXRATEWIDTH_IS_RATEWIDTH_BF_DEF (0x00000000)

///< Ratewidth FSM width change status.  This bit will be set to '1' when
///< ratewidth fsm detect a change in width only
#define PMA_RX_MGS_STAT_2_RXRATEWIDTH_IS_WIDTH_ONLY_BF_OFF (15)
#define PMA_RX_MGS_STAT_2_RXRATEWIDTH_IS_WIDTH_ONLY_BF_WID ( 1)
#define PMA_RX_MGS_STAT_2_RXRATEWIDTH_IS_WIDTH_ONLY_BF_MSK (0x00008000)
#define PMA_RX_MGS_STAT_2_RXRATEWIDTH_IS_WIDTH_ONLY_BF_DEF (0x00000000)

///< Ratewidth FSM rate freq change status.  This bit will be set to '1'
///< when ratewidth fsm detect a change in rate_freq only
#define PMA_RX_MGS_STAT_2_RXRATEWIDTH_IS_RATEFREQ_BF_OFF (16)
#define PMA_RX_MGS_STAT_2_RXRATEWIDTH_IS_RATEFREQ_BF_WID ( 1)
#define PMA_RX_MGS_STAT_2_RXRATEWIDTH_IS_RATEFREQ_BF_MSK (0x00010000)
#define PMA_RX_MGS_STAT_2_RXRATEWIDTH_IS_RATEFREQ_BF_DEF (0x00000000)

///< Rx duty cycle background calibration abort
#define PMA_RX_MGS_STAT_2_RXCALDUTYBG_ABORT_BF_OFF (17)
#define PMA_RX_MGS_STAT_2_RXCALDUTYBG_ABORT_BF_WID ( 1)
#define PMA_RX_MGS_STAT_2_RXCALDUTYBG_ABORT_BF_MSK (0x00020000)
#define PMA_RX_MGS_STAT_2_RXCALDUTYBG_ABORT_BF_DEF (0x00000000)

///< Rx duty cycle background calibration ready
#define PMA_RX_MGS_STAT_2_RXCALDUTYBG_READY_BF_OFF (18)
#define PMA_RX_MGS_STAT_2_RXCALDUTYBG_READY_BF_WID ( 1)
#define PMA_RX_MGS_STAT_2_RXCALDUTYBG_READY_BF_MSK (0x00040000)
#define PMA_RX_MGS_STAT_2_RXCALDUTYBG_READY_BF_DEF (0x00000000)

///< Rx Main-to-CMN PLL I/F state
#define PMA_RX_MGS_STAT_2_RXFSM_MAIN_IFSYNTH_STATE_BF_OFF (19)
#define PMA_RX_MGS_STAT_2_RXFSM_MAIN_IFSYNTH_STATE_BF_WID ( 2)
#define PMA_RX_MGS_STAT_2_RXFSM_MAIN_IFSYNTH_STATE_BF_MSK (0x00180000)
#define PMA_RX_MGS_STAT_2_RXFSM_MAIN_IFSYNTH_STATE_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXPCS_PCIE_CTRL register description at address offset 0x88
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxpcs_pcie_ctrl
  * PCIE Rx control
  */

typedef union {
  struct {
    uint32_t PIPEPCS_L1SS_RXDET_EN_OVREN : 1;
    ///< PCIE control Rx Detect Enable override enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t PIPEPCS_L1SS_RXDET_EN_OVR : 1;
    ///< PCIE control Rx Detect Enable override enable
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_pcs_pcie_ctrl_reg_t;

#define PMA_RX_MSG_PCS_PCIE_CTRL_DEFAULT (0x00000000U)
#define PMA_RX_MSG_PCS_PCIE_CTRL_RD_MASK (0x00000003U)
#define PMA_RX_MSG_PCS_PCIE_CTRL_WR_MASK (0x00000003U)


///< PCIE control Rx Detect Enable override enable
#define PMA_RX_MSG_PCS_PCIE_CTRL_PIPEPCS_L1SS_RXDET_EN_OVREN_BF_OFF ( 0)
#define PMA_RX_MSG_PCS_PCIE_CTRL_PIPEPCS_L1SS_RXDET_EN_OVREN_BF_WID ( 1)
#define PMA_RX_MSG_PCS_PCIE_CTRL_PIPEPCS_L1SS_RXDET_EN_OVREN_BF_MSK (0x00000001)
#define PMA_RX_MSG_PCS_PCIE_CTRL_PIPEPCS_L1SS_RXDET_EN_OVREN_BF_DEF (0x00000000)

///< PCIE control Rx Detect Enable override enable
#define PMA_RX_MSG_PCS_PCIE_CTRL_PIPEPCS_L1SS_RXDET_EN_OVR_BF_OFF ( 1)
#define PMA_RX_MSG_PCS_PCIE_CTRL_PIPEPCS_L1SS_RXDET_EN_OVR_BF_WID ( 1)
#define PMA_RX_MSG_PCS_PCIE_CTRL_PIPEPCS_L1SS_RXDET_EN_OVR_BF_MSK (0x00000002)
#define PMA_RX_MSG_PCS_PCIE_CTRL_PIPEPCS_L1SS_RXDET_EN_OVR_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXPCS_PCIE_CTRL_RO register description at address offset 0x8c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxpcs_pcie_ctrl_ro
  * PCIE Rx control readback
  */

typedef union {
  struct {
    uint32_t PIPEPCS_L1SS_RXDET_EN : 1;
    ///< PCIE control Rx Detect Enable
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_pcs_pcie_ctrl_ro_reg_t;

#define PMA_RX_MSG_PCS_PCIE_CTRL_RO_DEFAULT (0x00000000U)
#define PMA_RX_MSG_PCS_PCIE_CTRL_RO_RD_MASK (0x00000001U)
#define PMA_RX_MSG_PCS_PCIE_CTRL_RO_WR_MASK (0x00000000U)


///< PCIE control Rx Detect Enable
#define PMA_RX_MSG_PCS_PCIE_CTRL_RO_PIPEPCS_L1SS_RXDET_EN_BF_OFF ( 0)
#define PMA_RX_MSG_PCS_PCIE_CTRL_RO_PIPEPCS_L1SS_RXDET_EN_BF_WID ( 1)
#define PMA_RX_MSG_PCS_PCIE_CTRL_RO_PIPEPCS_L1SS_RXDET_EN_BF_MSK (0x00000001)
#define PMA_RX_MSG_PCS_PCIE_CTRL_RO_PIPEPCS_L1SS_RXDET_EN_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXFSM_RATEWIDTH_CFG_0 register description at address offset 0x90
  *
  * Register default value:        0x00020102
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxfsm_ratewidth_cfg_0
  * Rx Ratewidth Config
  */

typedef union {
  struct {
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="0" ResetValue="None"
    uint32_t RX_RATEWIDTH_CLK_CHK_DISABLE : 1;
    ///< Disable clock check in Ratewidth FSM
    ///< AccessType="RW" BitOffset="1" ResetValue="0x1"
    uint32_t RX_RATEWIDTH_FASTREGPWRUP_EN : 1;
    ///< Ratewidth FSM fast power acc
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t RX_RATEWIDTH_CLK_DELAY : 12;
    ///< Ratewidth FSM clock delay interval
    ///< AccessType="RW" BitOffset="4" ResetValue="0x10"
    uint32_t RX_RATEWIDTH_DELAY : 12;
    ///< Ratewidth FSM delay
    ///< AccessType="RW" BitOffset="16" ResetValue="0x2"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_fsm_ratewidth_cfg_0_reg_t;

#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_0_DEFAULT (0x00020102U)
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_0_RD_MASK (0x0ffffff6U)
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_0_WR_MASK (0x0ffffff6U)


///< Disable clock check in Ratewidth FSM
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_0_RX_RATEWIDTH_CLK_CHK_DIS_BF_OFF ( 1)
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_0_RX_RATEWIDTH_CLK_CHK_DIS_BF_WID ( 1)
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_0_RX_RATEWIDTH_CLK_CHK_DIS_BF_MSK (0x00000002)
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_0_RX_RATEWIDTH_CLK_CHK_DIS_BF_DEF (0x00000002)

///< Ratewidth FSM fast power acc
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_0_RX_RATEWIDTH_FASTREGPWRUP_EN_BF_OFF ( 2)
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_0_RX_RATEWIDTH_FASTREGPWRUP_EN_BF_WID ( 1)
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_0_RX_RATEWIDTH_FASTREGPWRUP_EN_BF_MSK (0x00000004)
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_0_RX_RATEWIDTH_FASTREGPWRUP_EN_BF_DEF (0x00000000)

///< Ratewidth FSM clock delay interval
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_0_RX_RATEWIDTH_CLK_DELAY_BF_OFF ( 4)
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_0_RX_RATEWIDTH_CLK_DELAY_BF_WID (12)
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_0_RX_RATEWIDTH_CLK_DELAY_BF_MSK (0x0000FFF0)
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_0_RX_RATEWIDTH_CLK_DELAY_BF_DEF (0x00000100)

///< Ratewidth FSM delay
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_0_RX_RATEWIDTH_DELAY_BF_OFF (16)
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_0_RX_RATEWIDTH_DELAY_BF_WID (12)
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_0_RX_RATEWIDTH_DELAY_BF_MSK (0x0FFF0000)
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_0_RX_RATEWIDTH_DELAY_BF_DEF (0x00020000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXFSM_RATEWIDTH_CFG_1 register description at address offset 0x94
  *
  * Register default value:        0x0000F005
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxfsm_ratewidth_cfg_1
  * Rx Ratewidth Config
  */

typedef union {
  struct {
    uint32_t RX_RATEWIDTH_ETR_OFF_DELAY : 12;
    ///< Ratewidth FSM ETR off delay
    ///< AccessType="RW" BitOffset="0" ResetValue="0x5"
    uint32_t RX_RATEWIDTH_ETR_ON_DELAY : 12;
    ///< Ratewidth FSM ETR on delay
    ///< AccessType="RW" BitOffset="12" ResetValue="0xF"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_fsm_ratewidth_cfg_1_reg_t;

#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_1_DEFAULT (0x0000f005U)
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_1_RD_MASK (0x00ffffffU)
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_1_WR_MASK (0x00ffffffU)


///< Ratewidth FSM ETR off delay
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_1_RX_RATEWIDTH_ETR_OFF_DELAY_BF_OFF ( 0)
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_1_RX_RATEWIDTH_ETR_OFF_DELAY_BF_WID (12)
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_1_RX_RATEWIDTH_ETR_OFF_DELAY_BF_MSK (0x00000FFF)
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_1_RX_RATEWIDTH_ETR_OFF_DELAY_BF_DEF (0x00000005)

///< Ratewidth FSM ETR on delay
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_1_RX_RATEWIDTH_ETR_ON_DELAY_BF_OFF (12)
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_1_RX_RATEWIDTH_ETR_ON_DELAY_BF_WID (12)
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_1_RX_RATEWIDTH_ETR_ON_DELAY_BF_MSK (0x00FFF000)
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_1_RX_RATEWIDTH_ETR_ON_DELAY_BF_DEF (0x0000F000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXFSM_RATEWIDTH_CFG_2 register description at address offset 0x98
  *
  * Register default value:        0x00005005
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxfsm_ratewidth_cfg_2
  * Rx Ratewidth Config
  */

typedef union {
  struct {
    uint32_t RX_RATEWIDTH_PD_ON_DELAY : 12;
    ///< Ratewidth FSM power down on delay
    ///< AccessType="RW" BitOffset="0" ResetValue="0x5"
    uint32_t RX_RATEWIDTH_PD_OFF_DELAY : 12;
    ///< Ratewidth FSM power down off delay
    ///< AccessType="RW" BitOffset="12" ResetValue="0x5"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_fsm_ratewidth_cfg_2_reg_t;

#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_2_DEFAULT (0x00005005U)
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_2_RD_MASK (0x00ffffffU)
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_2_WR_MASK (0x00ffffffU)


///< Ratewidth FSM power down on delay
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_2_RX_RATEWIDTH_PD_ON_DELAY_BF_OFF ( 0)
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_2_RX_RATEWIDTH_PD_ON_DELAY_BF_WID (12)
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_2_RX_RATEWIDTH_PD_ON_DELAY_BF_MSK (0x00000FFF)
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_2_RX_RATEWIDTH_PD_ON_DELAY_BF_DEF (0x00000005)

///< Ratewidth FSM power down off delay
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_2_RX_RATEWIDTH_PD_OFF_DELAY_BF_OFF (12)
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_2_RX_RATEWIDTH_PD_OFF_DELAY_BF_WID (12)
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_2_RX_RATEWIDTH_PD_OFF_DELAY_BF_MSK (0x00FFF000)
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_2_RX_RATEWIDTH_PD_OFF_DELAY_BF_DEF (0x00005000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXFSM_RATEWIDTH_CFG_3 register description at address offset 0x9c
  *
  * Register default value:        0x00005005
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxfsm_ratewidth_cfg_3
  * Rx Ratewidth Config
  */

typedef union {
  struct {
    uint32_t RX_RATEWIDTH_RST_A_OFF_DELAY : 12;
    ///< Ratewidth FSM reset group-A off delay
    ///< AccessType="RW" BitOffset="0" ResetValue="0x5"
    uint32_t RX_RATEWIDTH_RST_B0_OFF_DELAY : 12;
    ///< Ratewidth FSM reset group-B0 off delay
    ///< AccessType="RW" BitOffset="12" ResetValue="0x5"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_fsm_ratewidth_cfg_3_reg_t;

#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_3_DEFAULT (0x00005005U)
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_3_RD_MASK (0x00ffffffU)
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_3_WR_MASK (0x00ffffffU)


///< Ratewidth FSM reset group-A off delay
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_3_RX_RATEWIDTH_RST_A_OFF_DELAY_BF_OFF ( 0)
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_3_RX_RATEWIDTH_RST_A_OFF_DELAY_BF_WID (12)
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_3_RX_RATEWIDTH_RST_A_OFF_DELAY_BF_MSK (0x00000FFF)
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_3_RX_RATEWIDTH_RST_A_OFF_DELAY_BF_DEF (0x00000005)

///< Ratewidth FSM reset group-B0 off delay
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_3_RX_RATEWIDTH_RST_B0_OFF_DELAY_BF_OFF (12)
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_3_RX_RATEWIDTH_RST_B0_OFF_DELAY_BF_WID (12)
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_3_RX_RATEWIDTH_RST_B0_OFF_DELAY_BF_MSK (0x00FFF000)
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_3_RX_RATEWIDTH_RST_B0_OFF_DELAY_BF_DEF (0x00005000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXFSM_RATEWIDTH_CFG_4 register description at address offset 0xa0
  *
  * Register default value:        0x00005005
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxfsm_ratewidth_cfg_4
  * Rx Ratewidth Config
  */

typedef union {
  struct {
    uint32_t RX_RATEWIDTH_RST_B1_OFF_DELAY : 12;
    ///< Ratewidth FSM reset group-B1 off delay
    ///< AccessType="RW" BitOffset="0" ResetValue="0x5"
    uint32_t RX_RATEWIDTH_RST_B2_OFF_DELAY : 12;
    ///< Ratewidth FSM reset group-B2 off delay
    ///< AccessType="RW" BitOffset="12" ResetValue="0x5"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_fsm_ratewidth_cfg_4_reg_t;

#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_4_DEFAULT (0x00005005U)
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_4_RD_MASK (0x00ffffffU)
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_4_WR_MASK (0x00ffffffU)


///< Ratewidth FSM reset group-B1 off delay
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_4_RX_RATEWIDTH_RST_B1_OFF_DELAY_BF_OFF ( 0)
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_4_RX_RATEWIDTH_RST_B1_OFF_DELAY_BF_WID (12)
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_4_RX_RATEWIDTH_RST_B1_OFF_DELAY_BF_MSK (0x00000FFF)
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_4_RX_RATEWIDTH_RST_B1_OFF_DELAY_BF_DEF (0x00000005)

///< Ratewidth FSM reset group-B2 off delay
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_4_RX_RATEWIDTH_RST_B2_OFF_DELAY_BF_OFF (12)
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_4_RX_RATEWIDTH_RST_B2_OFF_DELAY_BF_WID (12)
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_4_RX_RATEWIDTH_RST_B2_OFF_DELAY_BF_MSK (0x00FFF000)
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_4_RX_RATEWIDTH_RST_B2_OFF_DELAY_BF_DEF (0x00005000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXFSM_RATEWIDTH_CFG_5 register description at address offset 0xa4
  *
  * Register default value:        0x00000002
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxfsm_ratewidth_cfg_5
  * Rx Ratewidth Config
  */

typedef union {
  struct {
    uint32_t RX_RATEWIDTH_CAL_CLEAR_DELAY : 12;
    ///< Ratewidth calibration clear delay
    ///< AccessType="RW" BitOffset="0" ResetValue="0x2"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_fsm_ratewidth_cfg_5_reg_t;

#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_5_DEFAULT (0x00000002U)
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_5_RD_MASK (0x00000fffU)
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_5_WR_MASK (0x00000fffU)


///< Ratewidth calibration clear delay
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_5_RX_RATEWIDTH_CAL_CLR_DELAY_BF_OFF ( 0)
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_5_RX_RATEWIDTH_CAL_CLR_DELAY_BF_WID (12)
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_5_RX_RATEWIDTH_CAL_CLR_DELAY_BF_MSK (0x00000FFF)
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_5_RX_RATEWIDTH_CAL_CLR_DELAY_BF_DEF (0x00000002)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXFSM_CALMASTER_PSTATE_CFG register description at address offset 0xa8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxfsm_calmaster_pstate_cfg
  * Rx Calibration Master config
  */

typedef union {
  struct {
    uint32_t RXCALPTR_PSTATE_CALMASTERBRKPT_EVENT0 : 3;
    ///< CalMaster break point 0 Pstate.  Define the Pstate to start the interrupt
    ///< event during the power up sequence
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXCALPTR_PSTATE_CALMASTERBRKPT_EVENT1 : 3;
    ///< CalMaster break point 1 Pstate.  Define the Pstate to start the interrupt
    ///< event during the power up sequence
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RXCALPTR_PSTATE_CALMASTERBRKPT_EVENT2 : 3;
    ///< CalMaster break point 2 Pstate.  Define the Pstate to start the interrupt
    ///< event during the power up sequence
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t RXCALPTR_PSTATE_CALMASTERBRKPT_EVENT3 : 3;
    ///< CalMaster break point 3 Pstate.  Define the Pstate to start the interrupt
    ///< event during the power up sequence
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t RXCALPTR_PSTATE_CALMASTERBRKPT_EVENT4 : 3;
    ///< CalMaster break point 4 Pstate.  Define the Pstate to start the interrupt
    ///< event during the power up sequence
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t RXCALPTR_PSTATE_SQLCH : 3;
    ///< Squelch calibration. Define the Pstate to start the calibration during
    ///< the power up sequence
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RXCALPTR_PSTATE_SQLCHOSC : 3;
    ///< Squelch OSC calibration. Define the Pstate to start the calibration
    ///< during the power up sequence
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_fsm_calmaster_pstate_cfg_reg_t;

#define PMA_RX_MSG_FSM_CALMASTER_PSTATE_CFG_DEFAULT (0x00000000U)
#define PMA_RX_MSG_FSM_CALMASTER_PSTATE_CFG_RD_MASK (0x001fffffU)
#define PMA_RX_MSG_FSM_CALMASTER_PSTATE_CFG_WR_MASK (0x001fffffU)


///< CalMaster break point 0 Pstate.  Define the Pstate to start the interrupt
///< event during the power up sequence
#define PMA_RX_MSG_FSM_CALMASTER_PSTATE_CFG_RXCALPTR_PSTATE_CALMASTERBRKPT_EVENT0_BF_OFF ( 0)
#define PMA_RX_MSG_FSM_CALMASTER_PSTATE_CFG_RXCALPTR_PSTATE_CALMASTERBRKPT_EVENT0_BF_WID ( 3)
#define PMA_RX_MSG_FSM_CALMASTER_PSTATE_CFG_RXCALPTR_PSTATE_CALMASTERBRKPT_EVENT0_BF_MSK (0x00000007)
#define PMA_RX_MSG_FSM_CALMASTER_PSTATE_CFG_RXCALPTR_PSTATE_CALMASTERBRKPT_EVENT0_BF_DEF (0x00000000)

///< CalMaster break point 1 Pstate.  Define the Pstate to start the interrupt
///< event during the power up sequence
#define PMA_RX_MSG_FSM_CALMASTER_PSTATE_CFG_RXCALPTR_PSTATE_CALMASTERBRKPT_EVENT1_BF_OFF ( 3)
#define PMA_RX_MSG_FSM_CALMASTER_PSTATE_CFG_RXCALPTR_PSTATE_CALMASTERBRKPT_EVENT1_BF_WID ( 3)
#define PMA_RX_MSG_FSM_CALMASTER_PSTATE_CFG_RXCALPTR_PSTATE_CALMASTERBRKPT_EVENT1_BF_MSK (0x00000038)
#define PMA_RX_MSG_FSM_CALMASTER_PSTATE_CFG_RXCALPTR_PSTATE_CALMASTERBRKPT_EVENT1_BF_DEF (0x00000000)

///< CalMaster break point 2 Pstate.  Define the Pstate to start the interrupt
///< event during the power up sequence
#define PMA_RX_MSG_FSM_CALMASTER_PSTATE_CFG_RXCALPTR_PSTATE_CALMASTERBRKPT_EVENT2_BF_OFF ( 6)
#define PMA_RX_MSG_FSM_CALMASTER_PSTATE_CFG_RXCALPTR_PSTATE_CALMASTERBRKPT_EVENT2_BF_WID ( 3)
#define PMA_RX_MSG_FSM_CALMASTER_PSTATE_CFG_RXCALPTR_PSTATE_CALMASTERBRKPT_EVENT2_BF_MSK (0x000001C0)
#define PMA_RX_MSG_FSM_CALMASTER_PSTATE_CFG_RXCALPTR_PSTATE_CALMASTERBRKPT_EVENT2_BF_DEF (0x00000000)

///< CalMaster break point 3 Pstate.  Define the Pstate to start the interrupt
///< event during the power up sequence
#define PMA_RX_MSG_FSM_CALMASTER_PSTATE_CFG_RXCALPTR_PSTATE_CALMASTERBRKPT_EVENT3_BF_OFF ( 9)
#define PMA_RX_MSG_FSM_CALMASTER_PSTATE_CFG_RXCALPTR_PSTATE_CALMASTERBRKPT_EVENT3_BF_WID ( 3)
#define PMA_RX_MSG_FSM_CALMASTER_PSTATE_CFG_RXCALPTR_PSTATE_CALMASTERBRKPT_EVENT3_BF_MSK (0x00000E00)
#define PMA_RX_MSG_FSM_CALMASTER_PSTATE_CFG_RXCALPTR_PSTATE_CALMASTERBRKPT_EVENT3_BF_DEF (0x00000000)

///< CalMaster break point 4 Pstate.  Define the Pstate to start the interrupt
///< event during the power up sequence
#define PMA_RX_MSG_FSM_CALMASTER_PSTATE_CFG_RXCALPTR_PSTATE_CALMASTERBRKPT_EVENT4_BF_OFF (12)
#define PMA_RX_MSG_FSM_CALMASTER_PSTATE_CFG_RXCALPTR_PSTATE_CALMASTERBRKPT_EVENT4_BF_WID ( 3)
#define PMA_RX_MSG_FSM_CALMASTER_PSTATE_CFG_RXCALPTR_PSTATE_CALMASTERBRKPT_EVENT4_BF_MSK (0x00007000)
#define PMA_RX_MSG_FSM_CALMASTER_PSTATE_CFG_RXCALPTR_PSTATE_CALMASTERBRKPT_EVENT4_BF_DEF (0x00000000)

///< Squelch calibration. Define the Pstate to start the calibration during
///< the power up sequence
#define PMA_RX_MSG_FSM_CALMASTER_PSTATE_CFG_RXCALPTR_PSTATE_SQLCH_BF_OFF (15)
#define PMA_RX_MSG_FSM_CALMASTER_PSTATE_CFG_RXCALPTR_PSTATE_SQLCH_BF_WID ( 3)
#define PMA_RX_MSG_FSM_CALMASTER_PSTATE_CFG_RXCALPTR_PSTATE_SQLCH_BF_MSK (0x00038000)
#define PMA_RX_MSG_FSM_CALMASTER_PSTATE_CFG_RXCALPTR_PSTATE_SQLCH_BF_DEF (0x00000000)

///< Squelch OSC calibration. Define the Pstate to start the calibration
///< during the power up sequence
#define PMA_RX_MSG_FSM_CALMASTER_PSTATE_CFG_RXCALPTR_PSTATE_SQLCHOSC_BF_OFF (18)
#define PMA_RX_MSG_FSM_CALMASTER_PSTATE_CFG_RXCALPTR_PSTATE_SQLCHOSC_BF_WID ( 3)
#define PMA_RX_MSG_FSM_CALMASTER_PSTATE_CFG_RXCALPTR_PSTATE_SQLCHOSC_BF_MSK (0x001C0000)
#define PMA_RX_MSG_FSM_CALMASTER_PSTATE_CFG_RXCALPTR_PSTATE_SQLCHOSC_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXFSM_CALMASTER_QUAD_CFG register description at address offset 0xac
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxfsm_calmaster_quad_cfg
  * Rx Calibration Master config
  */

typedef union {
  struct {
    uint32_t RXCALPTR_QUAD_CALMASTERBRKPT_EVENT0 : 4;
    ///< CalMaster break point 0 Quad.  Define the Quad to start the calibration
    ///< during the power up sequence
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXCALPTR_QUAD_CALMASTERBRKPT_EVENT1 : 4;
    ///< CalMaster break point 1 Quad.  Define the Quad to start the calibration
    ///< during the power up sequence
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RXCALPTR_QUAD_CALMASTERBRKPT_EVENT2 : 4;
    ///< CalMaster break point 2 Quad.  Define the Quad to start the calibration
    ///< during the power up sequence
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RXCALPTR_QUAD_CALMASTERBRKPT_EVENT3 : 4;
    ///< CalMaster break point 3 Quad.  Define the Quad to start the calibration
    ///< during the power up sequence
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t RXCALPTR_QUAD_CALMASTERBRKPT_EVENT4 : 4;
    ///< CalMaster break point 4 Quad.  Define the Quad to start the calibration
    ///< during the power up sequence
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t RXCALPTR_QUAD_SQLCH : 4;
    ///< Squelch calibration. Define the Quad to start the calibration during
    ///< the power up sequence
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t RXCALPTR_QUAD_SQLCHOSC : 4;
    ///< Squelch OSC calibration. Define the Quad to start the calibration
    ///< during the power up sequence
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_fsm_calmaster_quad_cfg_reg_t;

#define PMA_RX_MSG_FSM_CALMASTER_QUAD_CFG_DEFAULT (0x00000000U)
#define PMA_RX_MSG_FSM_CALMASTER_QUAD_CFG_RD_MASK (0x0fffffffU)
#define PMA_RX_MSG_FSM_CALMASTER_QUAD_CFG_WR_MASK (0x0fffffffU)


///< CalMaster break point 0 Quad.  Define the Quad to start the calibration
///< during the power up sequence
#define PMA_RX_MSG_FSM_CALMASTER_QUAD_CFG_RXCALPTR_QUAD_CALMASTERBRKPT_EVENT0_BF_OFF ( 0)
#define PMA_RX_MSG_FSM_CALMASTER_QUAD_CFG_RXCALPTR_QUAD_CALMASTERBRKPT_EVENT0_BF_WID ( 4)
#define PMA_RX_MSG_FSM_CALMASTER_QUAD_CFG_RXCALPTR_QUAD_CALMASTERBRKPT_EVENT0_BF_MSK (0x0000000F)
#define PMA_RX_MSG_FSM_CALMASTER_QUAD_CFG_RXCALPTR_QUAD_CALMASTERBRKPT_EVENT0_BF_DEF (0x00000000)

///< CalMaster break point 1 Quad.  Define the Quad to start the calibration
///< during the power up sequence
#define PMA_RX_MSG_FSM_CALMASTER_QUAD_CFG_RXCALPTR_QUAD_CALMASTERBRKPT_EVENT1_BF_OFF ( 4)
#define PMA_RX_MSG_FSM_CALMASTER_QUAD_CFG_RXCALPTR_QUAD_CALMASTERBRKPT_EVENT1_BF_WID ( 4)
#define PMA_RX_MSG_FSM_CALMASTER_QUAD_CFG_RXCALPTR_QUAD_CALMASTERBRKPT_EVENT1_BF_MSK (0x000000F0)
#define PMA_RX_MSG_FSM_CALMASTER_QUAD_CFG_RXCALPTR_QUAD_CALMASTERBRKPT_EVENT1_BF_DEF (0x00000000)

///< CalMaster break point 2 Quad.  Define the Quad to start the calibration
///< during the power up sequence
#define PMA_RX_MSG_FSM_CALMASTER_QUAD_CFG_RXCALPTR_QUAD_CALMASTERBRKPT_EVENT2_BF_OFF ( 8)
#define PMA_RX_MSG_FSM_CALMASTER_QUAD_CFG_RXCALPTR_QUAD_CALMASTERBRKPT_EVENT2_BF_WID ( 4)
#define PMA_RX_MSG_FSM_CALMASTER_QUAD_CFG_RXCALPTR_QUAD_CALMASTERBRKPT_EVENT2_BF_MSK (0x00000F00)
#define PMA_RX_MSG_FSM_CALMASTER_QUAD_CFG_RXCALPTR_QUAD_CALMASTERBRKPT_EVENT2_BF_DEF (0x00000000)

///< CalMaster break point 3 Quad.  Define the Quad to start the calibration
///< during the power up sequence
#define PMA_RX_MSG_FSM_CALMASTER_QUAD_CFG_RXCALPTR_QUAD_CALMASTERBRKPT_EVENT3_BF_OFF (12)
#define PMA_RX_MSG_FSM_CALMASTER_QUAD_CFG_RXCALPTR_QUAD_CALMASTERBRKPT_EVENT3_BF_WID ( 4)
#define PMA_RX_MSG_FSM_CALMASTER_QUAD_CFG_RXCALPTR_QUAD_CALMASTERBRKPT_EVENT3_BF_MSK (0x0000F000)
#define PMA_RX_MSG_FSM_CALMASTER_QUAD_CFG_RXCALPTR_QUAD_CALMASTERBRKPT_EVENT3_BF_DEF (0x00000000)

///< CalMaster break point 4 Quad.  Define the Quad to start the calibration
///< during the power up sequence
#define PMA_RX_MSG_FSM_CALMASTER_QUAD_CFG_RXCALPTR_QUAD_CALMASTERBRKPT_EVENT4_BF_OFF (16)
#define PMA_RX_MSG_FSM_CALMASTER_QUAD_CFG_RXCALPTR_QUAD_CALMASTERBRKPT_EVENT4_BF_WID ( 4)
#define PMA_RX_MSG_FSM_CALMASTER_QUAD_CFG_RXCALPTR_QUAD_CALMASTERBRKPT_EVENT4_BF_MSK (0x000F0000)
#define PMA_RX_MSG_FSM_CALMASTER_QUAD_CFG_RXCALPTR_QUAD_CALMASTERBRKPT_EVENT4_BF_DEF (0x00000000)

///< Squelch calibration. Define the Quad to start the calibration during
///< the power up sequence
#define PMA_RX_MSG_FSM_CALMASTER_QUAD_CFG_RXCALPTR_QUAD_SQLCH_BF_OFF (20)
#define PMA_RX_MSG_FSM_CALMASTER_QUAD_CFG_RXCALPTR_QUAD_SQLCH_BF_WID ( 4)
#define PMA_RX_MSG_FSM_CALMASTER_QUAD_CFG_RXCALPTR_QUAD_SQLCH_BF_MSK (0x00F00000)
#define PMA_RX_MSG_FSM_CALMASTER_QUAD_CFG_RXCALPTR_QUAD_SQLCH_BF_DEF (0x00000000)

///< Squelch OSC calibration. Define the Quad to start the calibration
///< during the power up sequence
#define PMA_RX_MSG_FSM_CALMASTER_QUAD_CFG_RXCALPTR_QUAD_SQLCHOSC_BF_OFF (24)
#define PMA_RX_MSG_FSM_CALMASTER_QUAD_CFG_RXCALPTR_QUAD_SQLCHOSC_BF_WID ( 4)
#define PMA_RX_MSG_FSM_CALMASTER_QUAD_CFG_RXCALPTR_QUAD_SQLCHOSC_BF_MSK (0x0F000000)
#define PMA_RX_MSG_FSM_CALMASTER_QUAD_CFG_RXCALPTR_QUAD_SQLCHOSC_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CALAVG_CTRL_0 register description at address offset 0xb0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_calavg_ctrl_0
  * CMN Calibration Average Control
  */

typedef union {
  struct {
    uint32_t RXCALAVG_ENG_BIT_IN_SEL : 2;
    ///< Calibraiton source.  0x0: apma.cmn_comp_out; all others reseved for
    ///< future used
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXCALAVG_ENG_COUNT_MODE : 2;
    ///< Calibration counter stepping size when the source is asserted. 0x0:
    ///< +1; all others: +0
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t RXCALAVG_ENG_PROBE_BIT_SEL : 5;
    ///< Not used.  Reserved for future used
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RXCALAVG_ENG_START : 1;
    ///< Calibration start.  Trigger event to start the calibration when it
    ///< is set to '1'
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t RXCALAVG_LOCOVREN : 1;
    ///< Calibration local override enable
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RXCALAVG_CMPOUT_LOCOVR : 1;
    ///< Calibration comprator output override.  To override the CMPOUT from
    ///< APMA
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_calavg_ctrl_0_reg_t;

#define PMA_RX_MGS_CALAVG_CTRL_0_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CALAVG_CTRL_0_RD_MASK (0x00000fffU)
#define PMA_RX_MGS_CALAVG_CTRL_0_WR_MASK (0x00000fffU)


///< Calibraiton source.  0x0: apma.cmn_comp_out; all others reseved for
///< future used
#define PMA_RX_MGS_CALAVG_CTRL_0_RXCALAVG_ENG_BIT_IN_SEL_BF_OFF ( 0)
#define PMA_RX_MGS_CALAVG_CTRL_0_RXCALAVG_ENG_BIT_IN_SEL_BF_WID ( 2)
#define PMA_RX_MGS_CALAVG_CTRL_0_RXCALAVG_ENG_BIT_IN_SEL_BF_MSK (0x00000003)
#define PMA_RX_MGS_CALAVG_CTRL_0_RXCALAVG_ENG_BIT_IN_SEL_BF_DEF (0x00000000)

///< Calibration counter stepping size when the source is asserted. 0x0:
///< +1; all others: +0
#define PMA_RX_MGS_CALAVG_CTRL_0_RXCALAVG_ENG_CNT_MODE_BF_OFF ( 2)
#define PMA_RX_MGS_CALAVG_CTRL_0_RXCALAVG_ENG_CNT_MODE_BF_WID ( 2)
#define PMA_RX_MGS_CALAVG_CTRL_0_RXCALAVG_ENG_CNT_MODE_BF_MSK (0x0000000C)
#define PMA_RX_MGS_CALAVG_CTRL_0_RXCALAVG_ENG_CNT_MODE_BF_DEF (0x00000000)

///< Not used.  Reserved for future used
#define PMA_RX_MGS_CALAVG_CTRL_0_RXCALAVG_ENG_PROBE_BIT_SEL_BF_OFF ( 4)
#define PMA_RX_MGS_CALAVG_CTRL_0_RXCALAVG_ENG_PROBE_BIT_SEL_BF_WID ( 5)
#define PMA_RX_MGS_CALAVG_CTRL_0_RXCALAVG_ENG_PROBE_BIT_SEL_BF_MSK (0x000001F0)
#define PMA_RX_MGS_CALAVG_CTRL_0_RXCALAVG_ENG_PROBE_BIT_SEL_BF_DEF (0x00000000)

///< Calibration start.  Trigger event to start the calibration when it
///< is set to '1'
#define PMA_RX_MGS_CALAVG_CTRL_0_RXCALAVG_ENG_START_BF_OFF ( 9)
#define PMA_RX_MGS_CALAVG_CTRL_0_RXCALAVG_ENG_START_BF_WID ( 1)
#define PMA_RX_MGS_CALAVG_CTRL_0_RXCALAVG_ENG_START_BF_MSK (0x00000200)
#define PMA_RX_MGS_CALAVG_CTRL_0_RXCALAVG_ENG_START_BF_DEF (0x00000000)

///< Calibration local override enable
#define PMA_RX_MGS_CALAVG_CTRL_0_RXCALAVG_LOCOVREN_BF_OFF (10)
#define PMA_RX_MGS_CALAVG_CTRL_0_RXCALAVG_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_CALAVG_CTRL_0_RXCALAVG_LOCOVREN_BF_MSK (0x00000400)
#define PMA_RX_MGS_CALAVG_CTRL_0_RXCALAVG_LOCOVREN_BF_DEF (0x00000000)

///< Calibration comprator output override.  To override the CMPOUT from
///< APMA
#define PMA_RX_MGS_CALAVG_CTRL_0_RXCALAVG_CMPOUT_LOCOVR_BF_OFF (11)
#define PMA_RX_MGS_CALAVG_CTRL_0_RXCALAVG_CMPOUT_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_CALAVG_CTRL_0_RXCALAVG_CMPOUT_LOCOVR_BF_MSK (0x00000800)
#define PMA_RX_MGS_CALAVG_CTRL_0_RXCALAVG_CMPOUT_LOCOVR_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CALAVG_CTRL_1 register description at address offset 0xb4
  *
  * Register default value:        0x00000100
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_calavg_ctrl_1
  * CMN Calibration Average Control
  */

typedef union {
  struct {
    uint32_t RXCALAVG_ENG_LIMIT : 32;
    ///< Calibration window size.  Define the length of the window for calibration
    ///< AccessType="RW" BitOffset="0" ResetValue="0x100"
  } ;
  uint32_t value;
} pma_rx_mgs_calavg_ctrl_1_reg_t;

#define PMA_RX_MGS_CALAVG_CTRL_1_DEFAULT (0x00000100U)
#define PMA_RX_MGS_CALAVG_CTRL_1_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_CALAVG_CTRL_1_WR_MASK (0xffffffffU)


///< Calibration window size.  Define the length of the window for calibration
#define PMA_RX_MGS_CALAVG_CTRL_1_RXCALAVG_ENG_LIMIT_BF_OFF ( 0)
#define PMA_RX_MGS_CALAVG_CTRL_1_RXCALAVG_ENG_LIMIT_BF_WID (32)
#define PMA_RX_MGS_CALAVG_CTRL_1_RXCALAVG_ENG_LIMIT_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MGS_CALAVG_CTRL_1_RXCALAVG_ENG_LIMIT_BF_DEF (0x00000100)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CALAVG_CTRL_2 register description at address offset 0xb8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_calavg_ctrl_2
  * CMN Calibration Average Control
  */

typedef union {
  struct {
    uint32_t RXCALAVG_ENG_CNT : 32;
    ///< Calibration average engine counter.  This indicates how many '1' has
    ///< been detected within the calibration window
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_mgs_calavg_ctrl_2_reg_t;

#define PMA_RX_MGS_CALAVG_CTRL_2_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CALAVG_CTRL_2_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_CALAVG_CTRL_2_WR_MASK (0x00000000U)


///< Calibration average engine counter.  This indicates how many '1' has
///< been detected within the calibration window
#define PMA_RX_MGS_CALAVG_CTRL_2_RXCALAVG_ENG_CNT_BF_OFF ( 0)
#define PMA_RX_MGS_CALAVG_CTRL_2_RXCALAVG_ENG_CNT_BF_WID (32)
#define PMA_RX_MGS_CALAVG_CTRL_2_RXCALAVG_ENG_CNT_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MGS_CALAVG_CTRL_2_RXCALAVG_ENG_CNT_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CAL_STATUS register description at address offset 0xbc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cal_status
  * Rx Calibration Status
  */

typedef union {
  struct {
    uint32_t CAL_FREQ_SMPL_CNTR_MEASURED : 10;
    ///< Calibration Sample Counter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cal_stat_reg_t;

#define PMA_RX_MGS_CAL_STAT_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CAL_STAT_RD_MASK (0x000003ffU)
#define PMA_RX_MGS_CAL_STAT_WR_MASK (0x00000000U)


///< Calibration Sample Counter
#define PMA_RX_MGS_CAL_STAT_CAL_FREQ_SMPL_CNTR_MEASD_BF_OFF ( 0)
#define PMA_RX_MGS_CAL_STAT_CAL_FREQ_SMPL_CNTR_MEASD_BF_WID (10)
#define PMA_RX_MGS_CAL_STAT_CAL_FREQ_SMPL_CNTR_MEASD_BF_MSK (0x000003FF)
#define PMA_RX_MGS_CAL_STAT_CAL_FREQ_SMPL_CNTR_MEASD_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CALAVG_STATUS register description at address offset 0xc0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_calavg_status
  * CMN Calibration Average Status
  */

typedef union {
  struct {
    uint32_t RXCALAVG_CMPOUT : 1;
    ///< Rx calibration compare (feedback) signal
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RXCALAVG_ENG_DONE : 1;
    ///< Rx calibration done
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t RXCALAVG_ENG_RESULT : 1;
    ///< Rx calibration result.  Reports 1 when the number of '1' has been
    ///< detected is more than half of rx_avg_eng_limit value
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t RXCALAVG_CMPOUT_LOC : 1;
    ///< Calibration comprator output pre-override.  The raw output of CMPOUT
    ///< from APMA
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_calavg_stat_reg_t;

#define PMA_RX_MGS_CALAVG_STAT_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CALAVG_STAT_RD_MASK (0x0000000fU)
#define PMA_RX_MGS_CALAVG_STAT_WR_MASK (0x00000000U)


///< Rx calibration compare (feedback) signal
#define PMA_RX_MGS_CALAVG_STAT_RXCALAVG_CMPOUT_BF_OFF ( 0)
#define PMA_RX_MGS_CALAVG_STAT_RXCALAVG_CMPOUT_BF_WID ( 1)
#define PMA_RX_MGS_CALAVG_STAT_RXCALAVG_CMPOUT_BF_MSK (0x00000001)
#define PMA_RX_MGS_CALAVG_STAT_RXCALAVG_CMPOUT_BF_DEF (0x00000000)

///< Rx calibration done
#define PMA_RX_MGS_CALAVG_STAT_RXCALAVG_ENG_DONE_BF_OFF ( 1)
#define PMA_RX_MGS_CALAVG_STAT_RXCALAVG_ENG_DONE_BF_WID ( 1)
#define PMA_RX_MGS_CALAVG_STAT_RXCALAVG_ENG_DONE_BF_MSK (0x00000002)
#define PMA_RX_MGS_CALAVG_STAT_RXCALAVG_ENG_DONE_BF_DEF (0x00000000)

///< Rx calibration result.  Reports 1 when the number of '1' has been
///< detected is more than half of rx_avg_eng_limit value
#define PMA_RX_MGS_CALAVG_STAT_RXCALAVG_ENG_RSLT_BF_OFF ( 2)
#define PMA_RX_MGS_CALAVG_STAT_RXCALAVG_ENG_RSLT_BF_WID ( 1)
#define PMA_RX_MGS_CALAVG_STAT_RXCALAVG_ENG_RSLT_BF_MSK (0x00000004)
#define PMA_RX_MGS_CALAVG_STAT_RXCALAVG_ENG_RSLT_BF_DEF (0x00000000)

///< Calibration comprator output pre-override.  The raw output of CMPOUT
///< from APMA
#define PMA_RX_MGS_CALAVG_STAT_RXCALAVG_CMPOUT_LOC_BF_OFF ( 3)
#define PMA_RX_MGS_CALAVG_STAT_RXCALAVG_CMPOUT_LOC_BF_WID ( 1)
#define PMA_RX_MGS_CALAVG_STAT_RXCALAVG_CMPOUT_LOC_BF_MSK (0x00000008)
#define PMA_RX_MGS_CALAVG_STAT_RXCALAVG_CMPOUT_LOC_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXRPU_CTRL register description at address offset 0xc4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxrpu_ctrl
  * Rx RPU control
  */

typedef union {
  struct {
    uint32_t RXRPU_EN_B : 1;
    ///< RPU enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_rpu_ctrl_reg_t;

#define PMA_RX_MSG_RPU_CTRL_DEFAULT (0x00000000U)
#define PMA_RX_MSG_RPU_CTRL_RD_MASK (0x00000001U)
#define PMA_RX_MSG_RPU_CTRL_WR_MASK (0x00000001U)


///< RPU enable
#define PMA_RX_MSG_RPU_CTRL_RXRPU_EN_B_BF_OFF ( 0)
#define PMA_RX_MSG_RPU_CTRL_RXRPU_EN_B_BF_WID ( 1)
#define PMA_RX_MSG_RPU_CTRL_RXRPU_EN_B_BF_MSK (0x00000001)
#define PMA_RX_MSG_RPU_CTRL_RXRPU_EN_B_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXRPU_LUT_CFG_0 register description at address offset 0xc8
  *
  * Register default value:        0x00100010
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxrpu_lut_cfg_0
  * Rx RPU LUT
  */

typedef union {
  struct {
    uint32_t RXRPU_EVUP_DELAY_LUT_ENTRY1 : 13;
    ///< RPU power up timer LUT - entry 1.  Define the duration in number of
    ///< main clock
    ///< AccessType="RW" BitOffset="0" ResetValue="0x10"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
    uint32_t RXRPU_EVUP_DELAY_LUT_ENTRY2 : 13;
    ///< RPU power up timer LUT - entry 2.  Define the duration in number of
    ///< main clock
    ///< AccessType="RW" BitOffset="16" ResetValue="0x10"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_rpu_lut_cfg_0_reg_t;

#define PMA_RX_MSG_RPU_LUT_CFG_0_DEFAULT (0x00100010U)
#define PMA_RX_MSG_RPU_LUT_CFG_0_RD_MASK (0x1fff1fffU)
#define PMA_RX_MSG_RPU_LUT_CFG_0_WR_MASK (0x1fff1fffU)


///< RPU power up timer LUT - entry 1.  Define the duration in number of
///< main clock
#define PMA_RX_MSG_RPU_LUT_CFG_0_RXRPU_EVUP_DELAY_LUT_ENTRY1_BF_OFF ( 0)
#define PMA_RX_MSG_RPU_LUT_CFG_0_RXRPU_EVUP_DELAY_LUT_ENTRY1_BF_WID (13)
#define PMA_RX_MSG_RPU_LUT_CFG_0_RXRPU_EVUP_DELAY_LUT_ENTRY1_BF_MSK (0x00001FFF)
#define PMA_RX_MSG_RPU_LUT_CFG_0_RXRPU_EVUP_DELAY_LUT_ENTRY1_BF_DEF (0x00000010)

///< RPU power up timer LUT - entry 2.  Define the duration in number of
///< main clock
#define PMA_RX_MSG_RPU_LUT_CFG_0_RXRPU_EVUP_DELAY_LUT_ENTRY2_BF_OFF (16)
#define PMA_RX_MSG_RPU_LUT_CFG_0_RXRPU_EVUP_DELAY_LUT_ENTRY2_BF_WID (13)
#define PMA_RX_MSG_RPU_LUT_CFG_0_RXRPU_EVUP_DELAY_LUT_ENTRY2_BF_MSK (0x1FFF0000)
#define PMA_RX_MSG_RPU_LUT_CFG_0_RXRPU_EVUP_DELAY_LUT_ENTRY2_BF_DEF (0x00100000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXRPU_LUT_CFG_1 register description at address offset 0xcc
  *
  * Register default value:        0x00100010
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxrpu_lut_cfg_1
  * Rx RPU LUT
  */

typedef union {
  struct {
    uint32_t RXRPU_EVUP_DELAY_LUT_ENTRY3 : 13;
    ///< RPU power up timer LUT - entry 3.  Define the duration in number of
    ///< main clock
    ///< AccessType="RW" BitOffset="0" ResetValue="0x10"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
    uint32_t RXRPU_EVUP_DELAY_LUT_ENTRY4 : 13;
    ///< RPU power up timer LUT - entry 4.  Define the duration in number of
    ///< main clock
    ///< AccessType="RW" BitOffset="16" ResetValue="0x10"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_rpu_lut_cfg_1_reg_t;

#define PMA_RX_MSG_RPU_LUT_CFG_1_DEFAULT (0x00100010U)
#define PMA_RX_MSG_RPU_LUT_CFG_1_RD_MASK (0x1fff1fffU)
#define PMA_RX_MSG_RPU_LUT_CFG_1_WR_MASK (0x1fff1fffU)


///< RPU power up timer LUT - entry 3.  Define the duration in number of
///< main clock
#define PMA_RX_MSG_RPU_LUT_CFG_1_RXRPU_EVUP_DELAY_LUT_ENTRY3_BF_OFF ( 0)
#define PMA_RX_MSG_RPU_LUT_CFG_1_RXRPU_EVUP_DELAY_LUT_ENTRY3_BF_WID (13)
#define PMA_RX_MSG_RPU_LUT_CFG_1_RXRPU_EVUP_DELAY_LUT_ENTRY3_BF_MSK (0x00001FFF)
#define PMA_RX_MSG_RPU_LUT_CFG_1_RXRPU_EVUP_DELAY_LUT_ENTRY3_BF_DEF (0x00000010)

///< RPU power up timer LUT - entry 4.  Define the duration in number of
///< main clock
#define PMA_RX_MSG_RPU_LUT_CFG_1_RXRPU_EVUP_DELAY_LUT_ENTRY4_BF_OFF (16)
#define PMA_RX_MSG_RPU_LUT_CFG_1_RXRPU_EVUP_DELAY_LUT_ENTRY4_BF_WID (13)
#define PMA_RX_MSG_RPU_LUT_CFG_1_RXRPU_EVUP_DELAY_LUT_ENTRY4_BF_MSK (0x1FFF0000)
#define PMA_RX_MSG_RPU_LUT_CFG_1_RXRPU_EVUP_DELAY_LUT_ENTRY4_BF_DEF (0x00100000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXRPU_LUT_CFG_2 register description at address offset 0xd0
  *
  * Register default value:        0x00100010
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxrpu_lut_cfg_2
  * Rx RPU LUT
  */

typedef union {
  struct {
    uint32_t RXRPU_EVUP_DELAY_LUT_ENTRY5 : 13;
    ///< RPU power up timer LUT - entry 5.  Define the duration in number of
    ///< main clock
    ///< AccessType="RW" BitOffset="0" ResetValue="0x10"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
    uint32_t RXRPU_EVUP_DELAY_LUT_ENTRY6 : 13;
    ///< RPU power up timer LUT - entry 6.  Define the duration in number of
    ///< main clock
    ///< AccessType="RW" BitOffset="16" ResetValue="0x10"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_rpu_lut_cfg_2_reg_t;

#define PMA_RX_MSG_RPU_LUT_CFG_2_DEFAULT (0x00100010U)
#define PMA_RX_MSG_RPU_LUT_CFG_2_RD_MASK (0x1fff1fffU)
#define PMA_RX_MSG_RPU_LUT_CFG_2_WR_MASK (0x1fff1fffU)


///< RPU power up timer LUT - entry 5.  Define the duration in number of
///< main clock
#define PMA_RX_MSG_RPU_LUT_CFG_2_RXRPU_EVUP_DELAY_LUT_ENTRY5_BF_OFF ( 0)
#define PMA_RX_MSG_RPU_LUT_CFG_2_RXRPU_EVUP_DELAY_LUT_ENTRY5_BF_WID (13)
#define PMA_RX_MSG_RPU_LUT_CFG_2_RXRPU_EVUP_DELAY_LUT_ENTRY5_BF_MSK (0x00001FFF)
#define PMA_RX_MSG_RPU_LUT_CFG_2_RXRPU_EVUP_DELAY_LUT_ENTRY5_BF_DEF (0x00000010)

///< RPU power up timer LUT - entry 6.  Define the duration in number of
///< main clock
#define PMA_RX_MSG_RPU_LUT_CFG_2_RXRPU_EVUP_DELAY_LUT_ENTRY6_BF_OFF (16)
#define PMA_RX_MSG_RPU_LUT_CFG_2_RXRPU_EVUP_DELAY_LUT_ENTRY6_BF_WID (13)
#define PMA_RX_MSG_RPU_LUT_CFG_2_RXRPU_EVUP_DELAY_LUT_ENTRY6_BF_MSK (0x1FFF0000)
#define PMA_RX_MSG_RPU_LUT_CFG_2_RXRPU_EVUP_DELAY_LUT_ENTRY6_BF_DEF (0x00100000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXRPU_LUT_CFG_3 register description at address offset 0xd4
  *
  * Register default value:        0x00100010
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxrpu_lut_cfg_3
  * Rx RPU LUT
  */

typedef union {
  struct {
    uint32_t RXRPU_EVUP_DELAY_LUT_ENTRY7 : 13;
    ///< RPU power up timer LUT - entry 7.  Define the duration in number of
    ///< main clock
    ///< AccessType="RW" BitOffset="0" ResetValue="0x10"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
    uint32_t RXRPU_EVDN_DELAY_LUT_ENTRY1 : 13;
    ///< RPU power down timer LUT - entry 1.  Define the duration in number
    ///< of main clock
    ///< AccessType="RW" BitOffset="16" ResetValue="0x10"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_rpu_lut_cfg_3_reg_t;

#define PMA_RX_MSG_RPU_LUT_CFG_3_DEFAULT (0x00100010U)
#define PMA_RX_MSG_RPU_LUT_CFG_3_RD_MASK (0x1fff1fffU)
#define PMA_RX_MSG_RPU_LUT_CFG_3_WR_MASK (0x1fff1fffU)


///< RPU power up timer LUT - entry 7.  Define the duration in number of
///< main clock
#define PMA_RX_MSG_RPU_LUT_CFG_3_RXRPU_EVUP_DELAY_LUT_ENTRY7_BF_OFF ( 0)
#define PMA_RX_MSG_RPU_LUT_CFG_3_RXRPU_EVUP_DELAY_LUT_ENTRY7_BF_WID (13)
#define PMA_RX_MSG_RPU_LUT_CFG_3_RXRPU_EVUP_DELAY_LUT_ENTRY7_BF_MSK (0x00001FFF)
#define PMA_RX_MSG_RPU_LUT_CFG_3_RXRPU_EVUP_DELAY_LUT_ENTRY7_BF_DEF (0x00000010)

///< RPU power down timer LUT - entry 1.  Define the duration in number
///< of main clock
#define PMA_RX_MSG_RPU_LUT_CFG_3_RXRPU_EVDN_DELAY_LUT_ENTRY1_BF_OFF (16)
#define PMA_RX_MSG_RPU_LUT_CFG_3_RXRPU_EVDN_DELAY_LUT_ENTRY1_BF_WID (13)
#define PMA_RX_MSG_RPU_LUT_CFG_3_RXRPU_EVDN_DELAY_LUT_ENTRY1_BF_MSK (0x1FFF0000)
#define PMA_RX_MSG_RPU_LUT_CFG_3_RXRPU_EVDN_DELAY_LUT_ENTRY1_BF_DEF (0x00100000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXRPU_LUT_CFG_4 register description at address offset 0xd8
  *
  * Register default value:        0x00100010
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxrpu_lut_cfg_4
  * Rx RPU LUT
  */

typedef union {
  struct {
    uint32_t RXRPU_EVDN_DELAY_LUT_ENTRY2 : 13;
    ///< RPU power down timer LUT - entry 2.  Define the duration in number
    ///< of main clock
    ///< AccessType="RW" BitOffset="0" ResetValue="0x10"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
    uint32_t RXRPU_EVDN_DELAY_LUT_ENTRY3 : 13;
    ///< RPU power down timer LUT - entry 3.  Define the duration in number
    ///< of main clock
    ///< AccessType="RW" BitOffset="16" ResetValue="0x10"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_rpu_lut_cfg_4_reg_t;

#define PMA_RX_MSG_RPU_LUT_CFG_4_DEFAULT (0x00100010U)
#define PMA_RX_MSG_RPU_LUT_CFG_4_RD_MASK (0x1fff1fffU)
#define PMA_RX_MSG_RPU_LUT_CFG_4_WR_MASK (0x1fff1fffU)


///< RPU power down timer LUT - entry 2.  Define the duration in number
///< of main clock
#define PMA_RX_MSG_RPU_LUT_CFG_4_RXRPU_EVDN_DELAY_LUT_ENTRY2_BF_OFF ( 0)
#define PMA_RX_MSG_RPU_LUT_CFG_4_RXRPU_EVDN_DELAY_LUT_ENTRY2_BF_WID (13)
#define PMA_RX_MSG_RPU_LUT_CFG_4_RXRPU_EVDN_DELAY_LUT_ENTRY2_BF_MSK (0x00001FFF)
#define PMA_RX_MSG_RPU_LUT_CFG_4_RXRPU_EVDN_DELAY_LUT_ENTRY2_BF_DEF (0x00000010)

///< RPU power down timer LUT - entry 3.  Define the duration in number
///< of main clock
#define PMA_RX_MSG_RPU_LUT_CFG_4_RXRPU_EVDN_DELAY_LUT_ENTRY3_BF_OFF (16)
#define PMA_RX_MSG_RPU_LUT_CFG_4_RXRPU_EVDN_DELAY_LUT_ENTRY3_BF_WID (13)
#define PMA_RX_MSG_RPU_LUT_CFG_4_RXRPU_EVDN_DELAY_LUT_ENTRY3_BF_MSK (0x1FFF0000)
#define PMA_RX_MSG_RPU_LUT_CFG_4_RXRPU_EVDN_DELAY_LUT_ENTRY3_BF_DEF (0x00100000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXRPU_EVUP_DELAY_CFG_0 register description at address offset 0xdc
  *
  * Register default value:        0x09249249
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxrpu_evup_delay_cfg_0
  * Rx power up event config
  */

typedef union {
  struct {
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S0Q0 : 3;
    ///< RPU power up event S0Q0 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S0Q1 : 3;
    ///< RPU power up event S0Q1 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="3" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S0Q2 : 3;
    ///< RPU power up event S0Q2 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S0Q3 : 3;
    ///< RPU power up event S0Q3 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="9" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S0Q4 : 3;
    ///< RPU power up event S0Q4 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="12" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S0Q5 : 3;
    ///< RPU power up event S0Q5 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="15" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S0Q6 : 3;
    ///< RPU power up event S0Q6 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="18" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S0Q7 : 3;
    ///< RPU power up event S0Q7 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="21" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S0Q8 : 3;
    ///< RPU power up event S0Q8 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="24" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S0Q9 : 3;
    ///< RPU power up event S0Q9 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="27" ResetValue="0x1"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_rpu_evup_delay_cfg_0_reg_t;

#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_0_DEFAULT (0x09249249U)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_0_RD_MASK (0x3fffffffU)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_0_WR_MASK (0x3fffffffU)


///< RPU power up event S0Q0 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_0_RXRPU_EVUP_DELAY_LUT_SEL_S0Q0_BF_OFF ( 0)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_0_RXRPU_EVUP_DELAY_LUT_SEL_S0Q0_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_0_RXRPU_EVUP_DELAY_LUT_SEL_S0Q0_BF_MSK (0x00000007)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_0_RXRPU_EVUP_DELAY_LUT_SEL_S0Q0_BF_DEF (0x00000001)

///< RPU power up event S0Q1 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_0_RXRPU_EVUP_DELAY_LUT_SEL_S0Q1_BF_OFF ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_0_RXRPU_EVUP_DELAY_LUT_SEL_S0Q1_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_0_RXRPU_EVUP_DELAY_LUT_SEL_S0Q1_BF_MSK (0x00000038)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_0_RXRPU_EVUP_DELAY_LUT_SEL_S0Q1_BF_DEF (0x00000008)

///< RPU power up event S0Q2 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_0_RXRPU_EVUP_DELAY_LUT_SEL_S0Q2_BF_OFF ( 6)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_0_RXRPU_EVUP_DELAY_LUT_SEL_S0Q2_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_0_RXRPU_EVUP_DELAY_LUT_SEL_S0Q2_BF_MSK (0x000001C0)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_0_RXRPU_EVUP_DELAY_LUT_SEL_S0Q2_BF_DEF (0x00000040)

///< RPU power up event S0Q3 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_0_RXRPU_EVUP_DELAY_LUT_SEL_S0Q3_BF_OFF ( 9)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_0_RXRPU_EVUP_DELAY_LUT_SEL_S0Q3_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_0_RXRPU_EVUP_DELAY_LUT_SEL_S0Q3_BF_MSK (0x00000E00)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_0_RXRPU_EVUP_DELAY_LUT_SEL_S0Q3_BF_DEF (0x00000200)

///< RPU power up event S0Q4 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_0_RXRPU_EVUP_DELAY_LUT_SEL_S0Q4_BF_OFF (12)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_0_RXRPU_EVUP_DELAY_LUT_SEL_S0Q4_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_0_RXRPU_EVUP_DELAY_LUT_SEL_S0Q4_BF_MSK (0x00007000)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_0_RXRPU_EVUP_DELAY_LUT_SEL_S0Q4_BF_DEF (0x00001000)

///< RPU power up event S0Q5 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_0_RXRPU_EVUP_DELAY_LUT_SEL_S0Q5_BF_OFF (15)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_0_RXRPU_EVUP_DELAY_LUT_SEL_S0Q5_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_0_RXRPU_EVUP_DELAY_LUT_SEL_S0Q5_BF_MSK (0x00038000)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_0_RXRPU_EVUP_DELAY_LUT_SEL_S0Q5_BF_DEF (0x00008000)

///< RPU power up event S0Q6 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_0_RXRPU_EVUP_DELAY_LUT_SEL_S0Q6_BF_OFF (18)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_0_RXRPU_EVUP_DELAY_LUT_SEL_S0Q6_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_0_RXRPU_EVUP_DELAY_LUT_SEL_S0Q6_BF_MSK (0x001C0000)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_0_RXRPU_EVUP_DELAY_LUT_SEL_S0Q6_BF_DEF (0x00040000)

///< RPU power up event S0Q7 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_0_RXRPU_EVUP_DELAY_LUT_SEL_S0Q7_BF_OFF (21)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_0_RXRPU_EVUP_DELAY_LUT_SEL_S0Q7_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_0_RXRPU_EVUP_DELAY_LUT_SEL_S0Q7_BF_MSK (0x00E00000)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_0_RXRPU_EVUP_DELAY_LUT_SEL_S0Q7_BF_DEF (0x00200000)

///< RPU power up event S0Q8 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_0_RXRPU_EVUP_DELAY_LUT_SEL_S0Q8_BF_OFF (24)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_0_RXRPU_EVUP_DELAY_LUT_SEL_S0Q8_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_0_RXRPU_EVUP_DELAY_LUT_SEL_S0Q8_BF_MSK (0x07000000)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_0_RXRPU_EVUP_DELAY_LUT_SEL_S0Q8_BF_DEF (0x01000000)

///< RPU power up event S0Q9 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_0_RXRPU_EVUP_DELAY_LUT_SEL_S0Q9_BF_OFF (27)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_0_RXRPU_EVUP_DELAY_LUT_SEL_S0Q9_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_0_RXRPU_EVUP_DELAY_LUT_SEL_S0Q9_BF_MSK (0x38000000)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_0_RXRPU_EVUP_DELAY_LUT_SEL_S0Q9_BF_DEF (0x08000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXRPU_EVUP_DELAY_CFG_1 register description at address offset 0xe0
  *
  * Register default value:        0x09249249
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxrpu_evup_delay_cfg_1
  * Rx power up event config
  */

typedef union {
  struct {
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S0Q10 : 3;
    ///< RPU power up event S0Q10 time index.  Select the entry index from
    ///< the RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S0Q11 : 3;
    ///< RPU power up event S0Q11 time index.  Select the entry index from
    ///< the RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="3" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S0Q12 : 3;
    ///< RPU power up event S0Q12 time index.  Select the entry index from
    ///< the RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S0Q13 : 3;
    ///< RPU power up event S0Q13 time index.  Select the entry index from
    ///< the RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="9" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S0Q14 : 3;
    ///< RPU power up event S0Q14 time index.  Select the entry index from
    ///< the RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="12" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S0Q15 : 3;
    ///< RPU power up event S0Q15 time index.  Select the entry index from
    ///< the RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="15" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S1Q0 : 3;
    ///< RPU power up event S1Q0 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="18" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S1Q1 : 3;
    ///< RPU power up event S1Q1 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="21" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S1Q2 : 3;
    ///< RPU power up event S1Q2 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="24" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S1Q3 : 3;
    ///< RPU power up event S1Q3 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="27" ResetValue="0x1"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_rpu_evup_delay_cfg_1_reg_t;

#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_1_DEFAULT (0x09249249U)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_1_RD_MASK (0x3fffffffU)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_1_WR_MASK (0x3fffffffU)


///< RPU power up event S0Q10 time index.  Select the entry index from
///< the RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_1_RXRPU_EVUP_DELAY_LUT_SEL_S0Q10_BF_OFF ( 0)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_1_RXRPU_EVUP_DELAY_LUT_SEL_S0Q10_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_1_RXRPU_EVUP_DELAY_LUT_SEL_S0Q10_BF_MSK (0x00000007)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_1_RXRPU_EVUP_DELAY_LUT_SEL_S0Q10_BF_DEF (0x00000001)

///< RPU power up event S0Q11 time index.  Select the entry index from
///< the RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_1_RXRPU_EVUP_DELAY_LUT_SEL_S0Q11_BF_OFF ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_1_RXRPU_EVUP_DELAY_LUT_SEL_S0Q11_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_1_RXRPU_EVUP_DELAY_LUT_SEL_S0Q11_BF_MSK (0x00000038)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_1_RXRPU_EVUP_DELAY_LUT_SEL_S0Q11_BF_DEF (0x00000008)

///< RPU power up event S0Q12 time index.  Select the entry index from
///< the RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_1_RXRPU_EVUP_DELAY_LUT_SEL_S0Q12_BF_OFF ( 6)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_1_RXRPU_EVUP_DELAY_LUT_SEL_S0Q12_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_1_RXRPU_EVUP_DELAY_LUT_SEL_S0Q12_BF_MSK (0x000001C0)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_1_RXRPU_EVUP_DELAY_LUT_SEL_S0Q12_BF_DEF (0x00000040)

///< RPU power up event S0Q13 time index.  Select the entry index from
///< the RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_1_RXRPU_EVUP_DELAY_LUT_SEL_S0Q13_BF_OFF ( 9)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_1_RXRPU_EVUP_DELAY_LUT_SEL_S0Q13_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_1_RXRPU_EVUP_DELAY_LUT_SEL_S0Q13_BF_MSK (0x00000E00)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_1_RXRPU_EVUP_DELAY_LUT_SEL_S0Q13_BF_DEF (0x00000200)

///< RPU power up event S0Q14 time index.  Select the entry index from
///< the RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_1_RXRPU_EVUP_DELAY_LUT_SEL_S0Q14_BF_OFF (12)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_1_RXRPU_EVUP_DELAY_LUT_SEL_S0Q14_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_1_RXRPU_EVUP_DELAY_LUT_SEL_S0Q14_BF_MSK (0x00007000)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_1_RXRPU_EVUP_DELAY_LUT_SEL_S0Q14_BF_DEF (0x00001000)

///< RPU power up event S0Q15 time index.  Select the entry index from
///< the RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_1_RXRPU_EVUP_DELAY_LUT_SEL_S0Q15_BF_OFF (15)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_1_RXRPU_EVUP_DELAY_LUT_SEL_S0Q15_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_1_RXRPU_EVUP_DELAY_LUT_SEL_S0Q15_BF_MSK (0x00038000)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_1_RXRPU_EVUP_DELAY_LUT_SEL_S0Q15_BF_DEF (0x00008000)

///< RPU power up event S1Q0 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_1_RXRPU_EVUP_DELAY_LUT_SEL_S1Q0_BF_OFF (18)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_1_RXRPU_EVUP_DELAY_LUT_SEL_S1Q0_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_1_RXRPU_EVUP_DELAY_LUT_SEL_S1Q0_BF_MSK (0x001C0000)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_1_RXRPU_EVUP_DELAY_LUT_SEL_S1Q0_BF_DEF (0x00040000)

///< RPU power up event S1Q1 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_1_RXRPU_EVUP_DELAY_LUT_SEL_S1Q1_BF_OFF (21)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_1_RXRPU_EVUP_DELAY_LUT_SEL_S1Q1_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_1_RXRPU_EVUP_DELAY_LUT_SEL_S1Q1_BF_MSK (0x00E00000)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_1_RXRPU_EVUP_DELAY_LUT_SEL_S1Q1_BF_DEF (0x00200000)

///< RPU power up event S1Q2 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_1_RXRPU_EVUP_DELAY_LUT_SEL_S1Q2_BF_OFF (24)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_1_RXRPU_EVUP_DELAY_LUT_SEL_S1Q2_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_1_RXRPU_EVUP_DELAY_LUT_SEL_S1Q2_BF_MSK (0x07000000)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_1_RXRPU_EVUP_DELAY_LUT_SEL_S1Q2_BF_DEF (0x01000000)

///< RPU power up event S1Q3 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_1_RXRPU_EVUP_DELAY_LUT_SEL_S1Q3_BF_OFF (27)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_1_RXRPU_EVUP_DELAY_LUT_SEL_S1Q3_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_1_RXRPU_EVUP_DELAY_LUT_SEL_S1Q3_BF_MSK (0x38000000)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_1_RXRPU_EVUP_DELAY_LUT_SEL_S1Q3_BF_DEF (0x08000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXRPU_EVUP_DELAY_CFG_2 register description at address offset 0xe4
  *
  * Register default value:        0x09249249
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxrpu_evup_delay_cfg_2
  * Rx power up event config
  */

typedef union {
  struct {
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S1Q4 : 3;
    ///< RPU power up event S1Q4 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S1Q5 : 3;
    ///< RPU power up event S1Q5 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="3" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S1Q6 : 3;
    ///< RPU power up event S1Q6 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S1Q7 : 3;
    ///< RPU power up event S1Q7 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="9" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S1Q8 : 3;
    ///< RPU power up event S1Q8 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="12" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S1Q9 : 3;
    ///< RPU power up event S1Q9 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="15" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S1Q10 : 3;
    ///< RPU power up event S1Q10 time index.  Select the entry index from
    ///< the RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="18" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S1Q11 : 3;
    ///< RPU power up event S1Q11 time index.  Select the entry index from
    ///< the RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="21" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S1Q12 : 3;
    ///< RPU power up event S1Q12 time index.  Select the entry index from
    ///< the RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="24" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S1Q13 : 3;
    ///< RPU power up event S1Q13 time index.  Select the entry index from
    ///< the RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="27" ResetValue="0x1"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_rpu_evup_delay_cfg_2_reg_t;

#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_2_DEFAULT (0x09249249U)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_2_RD_MASK (0x3fffffffU)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_2_WR_MASK (0x3fffffffU)


///< RPU power up event S1Q4 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_2_RXRPU_EVUP_DELAY_LUT_SEL_S1Q4_BF_OFF ( 0)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_2_RXRPU_EVUP_DELAY_LUT_SEL_S1Q4_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_2_RXRPU_EVUP_DELAY_LUT_SEL_S1Q4_BF_MSK (0x00000007)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_2_RXRPU_EVUP_DELAY_LUT_SEL_S1Q4_BF_DEF (0x00000001)

///< RPU power up event S1Q5 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_2_RXRPU_EVUP_DELAY_LUT_SEL_S1Q5_BF_OFF ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_2_RXRPU_EVUP_DELAY_LUT_SEL_S1Q5_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_2_RXRPU_EVUP_DELAY_LUT_SEL_S1Q5_BF_MSK (0x00000038)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_2_RXRPU_EVUP_DELAY_LUT_SEL_S1Q5_BF_DEF (0x00000008)

///< RPU power up event S1Q6 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_2_RXRPU_EVUP_DELAY_LUT_SEL_S1Q6_BF_OFF ( 6)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_2_RXRPU_EVUP_DELAY_LUT_SEL_S1Q6_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_2_RXRPU_EVUP_DELAY_LUT_SEL_S1Q6_BF_MSK (0x000001C0)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_2_RXRPU_EVUP_DELAY_LUT_SEL_S1Q6_BF_DEF (0x00000040)

///< RPU power up event S1Q7 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_2_RXRPU_EVUP_DELAY_LUT_SEL_S1Q7_BF_OFF ( 9)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_2_RXRPU_EVUP_DELAY_LUT_SEL_S1Q7_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_2_RXRPU_EVUP_DELAY_LUT_SEL_S1Q7_BF_MSK (0x00000E00)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_2_RXRPU_EVUP_DELAY_LUT_SEL_S1Q7_BF_DEF (0x00000200)

///< RPU power up event S1Q8 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_2_RXRPU_EVUP_DELAY_LUT_SEL_S1Q8_BF_OFF (12)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_2_RXRPU_EVUP_DELAY_LUT_SEL_S1Q8_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_2_RXRPU_EVUP_DELAY_LUT_SEL_S1Q8_BF_MSK (0x00007000)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_2_RXRPU_EVUP_DELAY_LUT_SEL_S1Q8_BF_DEF (0x00001000)

///< RPU power up event S1Q9 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_2_RXRPU_EVUP_DELAY_LUT_SEL_S1Q9_BF_OFF (15)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_2_RXRPU_EVUP_DELAY_LUT_SEL_S1Q9_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_2_RXRPU_EVUP_DELAY_LUT_SEL_S1Q9_BF_MSK (0x00038000)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_2_RXRPU_EVUP_DELAY_LUT_SEL_S1Q9_BF_DEF (0x00008000)

///< RPU power up event S1Q10 time index.  Select the entry index from
///< the RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_2_RXRPU_EVUP_DELAY_LUT_SEL_S1Q10_BF_OFF (18)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_2_RXRPU_EVUP_DELAY_LUT_SEL_S1Q10_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_2_RXRPU_EVUP_DELAY_LUT_SEL_S1Q10_BF_MSK (0x001C0000)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_2_RXRPU_EVUP_DELAY_LUT_SEL_S1Q10_BF_DEF (0x00040000)

///< RPU power up event S1Q11 time index.  Select the entry index from
///< the RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_2_RXRPU_EVUP_DELAY_LUT_SEL_S1Q11_BF_OFF (21)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_2_RXRPU_EVUP_DELAY_LUT_SEL_S1Q11_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_2_RXRPU_EVUP_DELAY_LUT_SEL_S1Q11_BF_MSK (0x00E00000)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_2_RXRPU_EVUP_DELAY_LUT_SEL_S1Q11_BF_DEF (0x00200000)

///< RPU power up event S1Q12 time index.  Select the entry index from
///< the RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_2_RXRPU_EVUP_DELAY_LUT_SEL_S1Q12_BF_OFF (24)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_2_RXRPU_EVUP_DELAY_LUT_SEL_S1Q12_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_2_RXRPU_EVUP_DELAY_LUT_SEL_S1Q12_BF_MSK (0x07000000)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_2_RXRPU_EVUP_DELAY_LUT_SEL_S1Q12_BF_DEF (0x01000000)

///< RPU power up event S1Q13 time index.  Select the entry index from
///< the RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_2_RXRPU_EVUP_DELAY_LUT_SEL_S1Q13_BF_OFF (27)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_2_RXRPU_EVUP_DELAY_LUT_SEL_S1Q13_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_2_RXRPU_EVUP_DELAY_LUT_SEL_S1Q13_BF_MSK (0x38000000)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_2_RXRPU_EVUP_DELAY_LUT_SEL_S1Q13_BF_DEF (0x08000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXRPU_EVUP_DELAY_CFG_3 register description at address offset 0xe8
  *
  * Register default value:        0x09249249
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxrpu_evup_delay_cfg_3
  * Rx power up event config
  */

typedef union {
  struct {
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S1Q14 : 3;
    ///< RPU power up event S1Q14 time index.  Select the entry index from
    ///< the RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S1Q15 : 3;
    ///< RPU power up event S1Q15 time index.  Select the entry index from
    ///< the RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="3" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S2Q0 : 3;
    ///< RPU power up event S2Q0 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S2Q1 : 3;
    ///< RPU power up event S2Q1 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="9" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S2Q2 : 3;
    ///< RPU power up event S2Q2 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="12" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S2Q3 : 3;
    ///< RPU power up event S2Q3 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="15" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S2Q4 : 3;
    ///< RPU power up event S2Q4 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="18" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S2Q5 : 3;
    ///< RPU power up event S2Q5 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="21" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S2Q6 : 3;
    ///< RPU power up event S2Q6 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="24" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S2Q7 : 3;
    ///< RPU power up event S2Q7 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="27" ResetValue="0x1"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_rpu_evup_delay_cfg_3_reg_t;

#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_3_DEFAULT (0x09249249U)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_3_RD_MASK (0x3fffffffU)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_3_WR_MASK (0x3fffffffU)


///< RPU power up event S1Q14 time index.  Select the entry index from
///< the RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_3_RXRPU_EVUP_DELAY_LUT_SEL_S1Q14_BF_OFF ( 0)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_3_RXRPU_EVUP_DELAY_LUT_SEL_S1Q14_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_3_RXRPU_EVUP_DELAY_LUT_SEL_S1Q14_BF_MSK (0x00000007)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_3_RXRPU_EVUP_DELAY_LUT_SEL_S1Q14_BF_DEF (0x00000001)

///< RPU power up event S1Q15 time index.  Select the entry index from
///< the RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_3_RXRPU_EVUP_DELAY_LUT_SEL_S1Q15_BF_OFF ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_3_RXRPU_EVUP_DELAY_LUT_SEL_S1Q15_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_3_RXRPU_EVUP_DELAY_LUT_SEL_S1Q15_BF_MSK (0x00000038)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_3_RXRPU_EVUP_DELAY_LUT_SEL_S1Q15_BF_DEF (0x00000008)

///< RPU power up event S2Q0 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_3_RXRPU_EVUP_DELAY_LUT_SEL_S2Q0_BF_OFF ( 6)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_3_RXRPU_EVUP_DELAY_LUT_SEL_S2Q0_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_3_RXRPU_EVUP_DELAY_LUT_SEL_S2Q0_BF_MSK (0x000001C0)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_3_RXRPU_EVUP_DELAY_LUT_SEL_S2Q0_BF_DEF (0x00000040)

///< RPU power up event S2Q1 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_3_RXRPU_EVUP_DELAY_LUT_SEL_S2Q1_BF_OFF ( 9)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_3_RXRPU_EVUP_DELAY_LUT_SEL_S2Q1_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_3_RXRPU_EVUP_DELAY_LUT_SEL_S2Q1_BF_MSK (0x00000E00)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_3_RXRPU_EVUP_DELAY_LUT_SEL_S2Q1_BF_DEF (0x00000200)

///< RPU power up event S2Q2 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_3_RXRPU_EVUP_DELAY_LUT_SEL_S2Q2_BF_OFF (12)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_3_RXRPU_EVUP_DELAY_LUT_SEL_S2Q2_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_3_RXRPU_EVUP_DELAY_LUT_SEL_S2Q2_BF_MSK (0x00007000)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_3_RXRPU_EVUP_DELAY_LUT_SEL_S2Q2_BF_DEF (0x00001000)

///< RPU power up event S2Q3 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_3_RXRPU_EVUP_DELAY_LUT_SEL_S2Q3_BF_OFF (15)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_3_RXRPU_EVUP_DELAY_LUT_SEL_S2Q3_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_3_RXRPU_EVUP_DELAY_LUT_SEL_S2Q3_BF_MSK (0x00038000)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_3_RXRPU_EVUP_DELAY_LUT_SEL_S2Q3_BF_DEF (0x00008000)

///< RPU power up event S2Q4 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_3_RXRPU_EVUP_DELAY_LUT_SEL_S2Q4_BF_OFF (18)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_3_RXRPU_EVUP_DELAY_LUT_SEL_S2Q4_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_3_RXRPU_EVUP_DELAY_LUT_SEL_S2Q4_BF_MSK (0x001C0000)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_3_RXRPU_EVUP_DELAY_LUT_SEL_S2Q4_BF_DEF (0x00040000)

///< RPU power up event S2Q5 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_3_RXRPU_EVUP_DELAY_LUT_SEL_S2Q5_BF_OFF (21)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_3_RXRPU_EVUP_DELAY_LUT_SEL_S2Q5_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_3_RXRPU_EVUP_DELAY_LUT_SEL_S2Q5_BF_MSK (0x00E00000)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_3_RXRPU_EVUP_DELAY_LUT_SEL_S2Q5_BF_DEF (0x00200000)

///< RPU power up event S2Q6 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_3_RXRPU_EVUP_DELAY_LUT_SEL_S2Q6_BF_OFF (24)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_3_RXRPU_EVUP_DELAY_LUT_SEL_S2Q6_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_3_RXRPU_EVUP_DELAY_LUT_SEL_S2Q6_BF_MSK (0x07000000)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_3_RXRPU_EVUP_DELAY_LUT_SEL_S2Q6_BF_DEF (0x01000000)

///< RPU power up event S2Q7 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_3_RXRPU_EVUP_DELAY_LUT_SEL_S2Q7_BF_OFF (27)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_3_RXRPU_EVUP_DELAY_LUT_SEL_S2Q7_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_3_RXRPU_EVUP_DELAY_LUT_SEL_S2Q7_BF_MSK (0x38000000)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_3_RXRPU_EVUP_DELAY_LUT_SEL_S2Q7_BF_DEF (0x08000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXRPU_EVUP_DELAY_CFG_4 register description at address offset 0xec
  *
  * Register default value:        0x09249249
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxrpu_evup_delay_cfg_4
  * Rx power up event config
  */

typedef union {
  struct {
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S2Q8 : 3;
    ///< RPU power up event S2Q8 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S2Q9 : 3;
    ///< RPU power up event S2Q9 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="3" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S2Q10 : 3;
    ///< RPU power up event S2Q10 time index.  Select the entry index from
    ///< the RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S2Q11 : 3;
    ///< RPU power up event S2Q11 time index.  Select the entry index from
    ///< the RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="9" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S2Q12 : 3;
    ///< RPU power up event S2Q12 time index.  Select the entry index from
    ///< the RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="12" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S2Q13 : 3;
    ///< RPU power up event S2Q13 time index.  Select the entry index from
    ///< the RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="15" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S2Q14 : 3;
    ///< RPU power up event S2Q14 time index.  Select the entry index from
    ///< the RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="18" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S2Q15 : 3;
    ///< RPU power up event S2Q15 time index.  Select the entry index from
    ///< the RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="21" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S3Q0 : 3;
    ///< RPU power up event S3Q0 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="24" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S3Q1 : 3;
    ///< RPU power up event S3Q1 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="27" ResetValue="0x1"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_rpu_evup_delay_cfg_4_reg_t;

#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_4_DEFAULT (0x09249249U)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_4_RD_MASK (0x3fffffffU)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_4_WR_MASK (0x3fffffffU)


///< RPU power up event S2Q8 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_4_RXRPU_EVUP_DELAY_LUT_SEL_S2Q8_BF_OFF ( 0)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_4_RXRPU_EVUP_DELAY_LUT_SEL_S2Q8_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_4_RXRPU_EVUP_DELAY_LUT_SEL_S2Q8_BF_MSK (0x00000007)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_4_RXRPU_EVUP_DELAY_LUT_SEL_S2Q8_BF_DEF (0x00000001)

///< RPU power up event S2Q9 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_4_RXRPU_EVUP_DELAY_LUT_SEL_S2Q9_BF_OFF ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_4_RXRPU_EVUP_DELAY_LUT_SEL_S2Q9_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_4_RXRPU_EVUP_DELAY_LUT_SEL_S2Q9_BF_MSK (0x00000038)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_4_RXRPU_EVUP_DELAY_LUT_SEL_S2Q9_BF_DEF (0x00000008)

///< RPU power up event S2Q10 time index.  Select the entry index from
///< the RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_4_RXRPU_EVUP_DELAY_LUT_SEL_S2Q10_BF_OFF ( 6)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_4_RXRPU_EVUP_DELAY_LUT_SEL_S2Q10_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_4_RXRPU_EVUP_DELAY_LUT_SEL_S2Q10_BF_MSK (0x000001C0)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_4_RXRPU_EVUP_DELAY_LUT_SEL_S2Q10_BF_DEF (0x00000040)

///< RPU power up event S2Q11 time index.  Select the entry index from
///< the RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_4_RXRPU_EVUP_DELAY_LUT_SEL_S2Q11_BF_OFF ( 9)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_4_RXRPU_EVUP_DELAY_LUT_SEL_S2Q11_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_4_RXRPU_EVUP_DELAY_LUT_SEL_S2Q11_BF_MSK (0x00000E00)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_4_RXRPU_EVUP_DELAY_LUT_SEL_S2Q11_BF_DEF (0x00000200)

///< RPU power up event S2Q12 time index.  Select the entry index from
///< the RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_4_RXRPU_EVUP_DELAY_LUT_SEL_S2Q12_BF_OFF (12)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_4_RXRPU_EVUP_DELAY_LUT_SEL_S2Q12_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_4_RXRPU_EVUP_DELAY_LUT_SEL_S2Q12_BF_MSK (0x00007000)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_4_RXRPU_EVUP_DELAY_LUT_SEL_S2Q12_BF_DEF (0x00001000)

///< RPU power up event S2Q13 time index.  Select the entry index from
///< the RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_4_RXRPU_EVUP_DELAY_LUT_SEL_S2Q13_BF_OFF (15)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_4_RXRPU_EVUP_DELAY_LUT_SEL_S2Q13_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_4_RXRPU_EVUP_DELAY_LUT_SEL_S2Q13_BF_MSK (0x00038000)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_4_RXRPU_EVUP_DELAY_LUT_SEL_S2Q13_BF_DEF (0x00008000)

///< RPU power up event S2Q14 time index.  Select the entry index from
///< the RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_4_RXRPU_EVUP_DELAY_LUT_SEL_S2Q14_BF_OFF (18)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_4_RXRPU_EVUP_DELAY_LUT_SEL_S2Q14_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_4_RXRPU_EVUP_DELAY_LUT_SEL_S2Q14_BF_MSK (0x001C0000)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_4_RXRPU_EVUP_DELAY_LUT_SEL_S2Q14_BF_DEF (0x00040000)

///< RPU power up event S2Q15 time index.  Select the entry index from
///< the RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_4_RXRPU_EVUP_DELAY_LUT_SEL_S2Q15_BF_OFF (21)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_4_RXRPU_EVUP_DELAY_LUT_SEL_S2Q15_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_4_RXRPU_EVUP_DELAY_LUT_SEL_S2Q15_BF_MSK (0x00E00000)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_4_RXRPU_EVUP_DELAY_LUT_SEL_S2Q15_BF_DEF (0x00200000)

///< RPU power up event S3Q0 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_4_RXRPU_EVUP_DELAY_LUT_SEL_S3Q0_BF_OFF (24)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_4_RXRPU_EVUP_DELAY_LUT_SEL_S3Q0_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_4_RXRPU_EVUP_DELAY_LUT_SEL_S3Q0_BF_MSK (0x07000000)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_4_RXRPU_EVUP_DELAY_LUT_SEL_S3Q0_BF_DEF (0x01000000)

///< RPU power up event S3Q1 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_4_RXRPU_EVUP_DELAY_LUT_SEL_S3Q1_BF_OFF (27)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_4_RXRPU_EVUP_DELAY_LUT_SEL_S3Q1_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_4_RXRPU_EVUP_DELAY_LUT_SEL_S3Q1_BF_MSK (0x38000000)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_4_RXRPU_EVUP_DELAY_LUT_SEL_S3Q1_BF_DEF (0x08000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXRPU_EVUP_DELAY_CFG_5 register description at address offset 0xf0
  *
  * Register default value:        0x09249249
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxrpu_evup_delay_cfg_5
  * Rx power up event config
  */

typedef union {
  struct {
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S3Q2 : 3;
    ///< RPU power up event S3Q2 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S3Q3 : 3;
    ///< RPU power up event S3Q3 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="3" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S3Q4 : 3;
    ///< RPU power up event S3Q4 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S3Q5 : 3;
    ///< RPU power up event S3Q5 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="9" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S3Q6 : 3;
    ///< RPU power up event S3Q6 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="12" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S3Q7 : 3;
    ///< RPU power up event S3Q7 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="15" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S3Q8 : 3;
    ///< RPU power up event S3Q8 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="18" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S3Q9 : 3;
    ///< RPU power up event S3Q9 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="21" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S3Q10 : 3;
    ///< RPU power up event S3Q10 time index.  Select the entry index from
    ///< the RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="24" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S3Q11 : 3;
    ///< RPU power up event S3Q11 time index.  Select the entry index from
    ///< the RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="27" ResetValue="0x1"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_rpu_evup_delay_cfg_5_reg_t;

#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_5_DEFAULT (0x09249249U)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_5_RD_MASK (0x3fffffffU)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_5_WR_MASK (0x3fffffffU)


///< RPU power up event S3Q2 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_5_RXRPU_EVUP_DELAY_LUT_SEL_S3Q2_BF_OFF ( 0)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_5_RXRPU_EVUP_DELAY_LUT_SEL_S3Q2_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_5_RXRPU_EVUP_DELAY_LUT_SEL_S3Q2_BF_MSK (0x00000007)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_5_RXRPU_EVUP_DELAY_LUT_SEL_S3Q2_BF_DEF (0x00000001)

///< RPU power up event S3Q3 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_5_RXRPU_EVUP_DELAY_LUT_SEL_S3Q3_BF_OFF ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_5_RXRPU_EVUP_DELAY_LUT_SEL_S3Q3_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_5_RXRPU_EVUP_DELAY_LUT_SEL_S3Q3_BF_MSK (0x00000038)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_5_RXRPU_EVUP_DELAY_LUT_SEL_S3Q3_BF_DEF (0x00000008)

///< RPU power up event S3Q4 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_5_RXRPU_EVUP_DELAY_LUT_SEL_S3Q4_BF_OFF ( 6)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_5_RXRPU_EVUP_DELAY_LUT_SEL_S3Q4_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_5_RXRPU_EVUP_DELAY_LUT_SEL_S3Q4_BF_MSK (0x000001C0)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_5_RXRPU_EVUP_DELAY_LUT_SEL_S3Q4_BF_DEF (0x00000040)

///< RPU power up event S3Q5 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_5_RXRPU_EVUP_DELAY_LUT_SEL_S3Q5_BF_OFF ( 9)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_5_RXRPU_EVUP_DELAY_LUT_SEL_S3Q5_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_5_RXRPU_EVUP_DELAY_LUT_SEL_S3Q5_BF_MSK (0x00000E00)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_5_RXRPU_EVUP_DELAY_LUT_SEL_S3Q5_BF_DEF (0x00000200)

///< RPU power up event S3Q6 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_5_RXRPU_EVUP_DELAY_LUT_SEL_S3Q6_BF_OFF (12)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_5_RXRPU_EVUP_DELAY_LUT_SEL_S3Q6_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_5_RXRPU_EVUP_DELAY_LUT_SEL_S3Q6_BF_MSK (0x00007000)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_5_RXRPU_EVUP_DELAY_LUT_SEL_S3Q6_BF_DEF (0x00001000)

///< RPU power up event S3Q7 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_5_RXRPU_EVUP_DELAY_LUT_SEL_S3Q7_BF_OFF (15)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_5_RXRPU_EVUP_DELAY_LUT_SEL_S3Q7_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_5_RXRPU_EVUP_DELAY_LUT_SEL_S3Q7_BF_MSK (0x00038000)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_5_RXRPU_EVUP_DELAY_LUT_SEL_S3Q7_BF_DEF (0x00008000)

///< RPU power up event S3Q8 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_5_RXRPU_EVUP_DELAY_LUT_SEL_S3Q8_BF_OFF (18)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_5_RXRPU_EVUP_DELAY_LUT_SEL_S3Q8_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_5_RXRPU_EVUP_DELAY_LUT_SEL_S3Q8_BF_MSK (0x001C0000)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_5_RXRPU_EVUP_DELAY_LUT_SEL_S3Q8_BF_DEF (0x00040000)

///< RPU power up event S3Q9 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_5_RXRPU_EVUP_DELAY_LUT_SEL_S3Q9_BF_OFF (21)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_5_RXRPU_EVUP_DELAY_LUT_SEL_S3Q9_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_5_RXRPU_EVUP_DELAY_LUT_SEL_S3Q9_BF_MSK (0x00E00000)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_5_RXRPU_EVUP_DELAY_LUT_SEL_S3Q9_BF_DEF (0x00200000)

///< RPU power up event S3Q10 time index.  Select the entry index from
///< the RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_5_RXRPU_EVUP_DELAY_LUT_SEL_S3Q10_BF_OFF (24)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_5_RXRPU_EVUP_DELAY_LUT_SEL_S3Q10_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_5_RXRPU_EVUP_DELAY_LUT_SEL_S3Q10_BF_MSK (0x07000000)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_5_RXRPU_EVUP_DELAY_LUT_SEL_S3Q10_BF_DEF (0x01000000)

///< RPU power up event S3Q11 time index.  Select the entry index from
///< the RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_5_RXRPU_EVUP_DELAY_LUT_SEL_S3Q11_BF_OFF (27)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_5_RXRPU_EVUP_DELAY_LUT_SEL_S3Q11_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_5_RXRPU_EVUP_DELAY_LUT_SEL_S3Q11_BF_MSK (0x38000000)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_5_RXRPU_EVUP_DELAY_LUT_SEL_S3Q11_BF_DEF (0x08000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXRPU_EVUP_DELAY_CFG_6 register description at address offset 0xf4
  *
  * Register default value:        0x00049249
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxrpu_evup_delay_cfg_6
  * Rx power up event config
  */

typedef union {
  struct {
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S3Q12 : 3;
    ///< RPU power up event S3Q12 time index.  Select the entry index from
    ///< the RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S3Q13 : 3;
    ///< RPU power up event S3Q13 time index.  Select the entry index from
    ///< the RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="3" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S3Q14 : 3;
    ///< RPU power up event S3Q14 time index.  Select the entry index from
    ///< the RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S3Q15 : 3;
    ///< RPU power up event S3Q15 time index.  Select the entry index from
    ///< the RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="9" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S4Q0 : 3;
    ///< RPU power up event S4Q0 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="12" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S4Q1 : 3;
    ///< RPU power up event S4Q1 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="15" ResetValue="0x1"
    uint32_t RXRPU_EVUP_DELAY_LUT_SEL_S5Q0 : 3;
    ///< RPU power up event S5Q0 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="18" ResetValue="0x1"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_rpu_evup_delay_cfg_6_reg_t;

#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_6_DEFAULT (0x00049249U)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_6_RD_MASK (0x001fffffU)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_6_WR_MASK (0x001fffffU)


///< RPU power up event S3Q12 time index.  Select the entry index from
///< the RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_6_RXRPU_EVUP_DELAY_LUT_SEL_S3Q12_BF_OFF ( 0)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_6_RXRPU_EVUP_DELAY_LUT_SEL_S3Q12_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_6_RXRPU_EVUP_DELAY_LUT_SEL_S3Q12_BF_MSK (0x00000007)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_6_RXRPU_EVUP_DELAY_LUT_SEL_S3Q12_BF_DEF (0x00000001)

///< RPU power up event S3Q13 time index.  Select the entry index from
///< the RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_6_RXRPU_EVUP_DELAY_LUT_SEL_S3Q13_BF_OFF ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_6_RXRPU_EVUP_DELAY_LUT_SEL_S3Q13_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_6_RXRPU_EVUP_DELAY_LUT_SEL_S3Q13_BF_MSK (0x00000038)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_6_RXRPU_EVUP_DELAY_LUT_SEL_S3Q13_BF_DEF (0x00000008)

///< RPU power up event S3Q14 time index.  Select the entry index from
///< the RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_6_RXRPU_EVUP_DELAY_LUT_SEL_S3Q14_BF_OFF ( 6)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_6_RXRPU_EVUP_DELAY_LUT_SEL_S3Q14_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_6_RXRPU_EVUP_DELAY_LUT_SEL_S3Q14_BF_MSK (0x000001C0)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_6_RXRPU_EVUP_DELAY_LUT_SEL_S3Q14_BF_DEF (0x00000040)

///< RPU power up event S3Q15 time index.  Select the entry index from
///< the RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_6_RXRPU_EVUP_DELAY_LUT_SEL_S3Q15_BF_OFF ( 9)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_6_RXRPU_EVUP_DELAY_LUT_SEL_S3Q15_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_6_RXRPU_EVUP_DELAY_LUT_SEL_S3Q15_BF_MSK (0x00000E00)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_6_RXRPU_EVUP_DELAY_LUT_SEL_S3Q15_BF_DEF (0x00000200)

///< RPU power up event S4Q0 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_6_RXRPU_EVUP_DELAY_LUT_SEL_S4Q0_BF_OFF (12)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_6_RXRPU_EVUP_DELAY_LUT_SEL_S4Q0_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_6_RXRPU_EVUP_DELAY_LUT_SEL_S4Q0_BF_MSK (0x00007000)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_6_RXRPU_EVUP_DELAY_LUT_SEL_S4Q0_BF_DEF (0x00001000)

///< RPU power up event S4Q1 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_6_RXRPU_EVUP_DELAY_LUT_SEL_S4Q1_BF_OFF (15)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_6_RXRPU_EVUP_DELAY_LUT_SEL_S4Q1_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_6_RXRPU_EVUP_DELAY_LUT_SEL_S4Q1_BF_MSK (0x00038000)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_6_RXRPU_EVUP_DELAY_LUT_SEL_S4Q1_BF_DEF (0x00008000)

///< RPU power up event S5Q0 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_6_RXRPU_EVUP_DELAY_LUT_SEL_S5Q0_BF_OFF (18)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_6_RXRPU_EVUP_DELAY_LUT_SEL_S5Q0_BF_WID ( 3)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_6_RXRPU_EVUP_DELAY_LUT_SEL_S5Q0_BF_MSK (0x001C0000)
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_6_RXRPU_EVUP_DELAY_LUT_SEL_S5Q0_BF_DEF (0x00040000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXRPU_EVDN_DELAY_CFG_0 register description at address offset 0xf8
  *
  * Register default value:        0x55555555
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxrpu_evdn_delay_cfg_0
  * Rx power down event config
  */

typedef union {
  struct {
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S0Q0 : 2;
    ///< RPU power down event S0Q0 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S0Q1 : 2;
    ///< RPU power down event S0Q1 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="2" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S0Q2 : 2;
    ///< RPU power down event S0Q2 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="4" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S0Q3 : 2;
    ///< RPU power down event S0Q3 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S0Q4 : 2;
    ///< RPU power down event S0Q4 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S0Q5 : 2;
    ///< RPU power down event S0Q5 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="10" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S0Q6 : 2;
    ///< RPU power down event S0Q6 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="12" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S0Q7 : 2;
    ///< RPU power down event S0Q7 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="14" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S0Q8 : 2;
    ///< RPU power down event S0Q8 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="16" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S0Q9 : 2;
    ///< RPU power down event S0Q9 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="18" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S0Q10 : 2;
    ///< RPU power down event S0Q10 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="20" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S0Q11 : 2;
    ///< RPU power down event S0Q11 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="22" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S0Q12 : 2;
    ///< RPU power down event S0Q12 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="24" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S0Q13 : 2;
    ///< RPU power down event S0Q13 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="26" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S0Q14 : 2;
    ///< RPU power down event S0Q14 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="28" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S0Q15 : 2;
    ///< RPU power down event S0Q15 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="30" ResetValue="0x1"
  } ;
  uint32_t value;
} pma_rx_msg_rpu_evdn_delay_cfg_0_reg_t;

#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_DEFAULT (0x55555555U)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RD_MASK (0xffffffffU)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_WR_MASK (0xffffffffU)


///< RPU power down event S0Q0 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q0_BF_OFF ( 0)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q0_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q0_BF_MSK (0x00000003)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q0_BF_DEF (0x00000001)

///< RPU power down event S0Q1 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q1_BF_OFF ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q1_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q1_BF_MSK (0x0000000C)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q1_BF_DEF (0x00000004)

///< RPU power down event S0Q2 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q2_BF_OFF ( 4)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q2_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q2_BF_MSK (0x00000030)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q2_BF_DEF (0x00000010)

///< RPU power down event S0Q3 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q3_BF_OFF ( 6)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q3_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q3_BF_MSK (0x000000C0)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q3_BF_DEF (0x00000040)

///< RPU power down event S0Q4 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q4_BF_OFF ( 8)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q4_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q4_BF_MSK (0x00000300)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q4_BF_DEF (0x00000100)

///< RPU power down event S0Q5 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q5_BF_OFF (10)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q5_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q5_BF_MSK (0x00000C00)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q5_BF_DEF (0x00000400)

///< RPU power down event S0Q6 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q6_BF_OFF (12)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q6_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q6_BF_MSK (0x00003000)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q6_BF_DEF (0x00001000)

///< RPU power down event S0Q7 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q7_BF_OFF (14)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q7_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q7_BF_MSK (0x0000C000)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q7_BF_DEF (0x00004000)

///< RPU power down event S0Q8 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q8_BF_OFF (16)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q8_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q8_BF_MSK (0x00030000)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q8_BF_DEF (0x00010000)

///< RPU power down event S0Q9 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q9_BF_OFF (18)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q9_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q9_BF_MSK (0x000C0000)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q9_BF_DEF (0x00040000)

///< RPU power down event S0Q10 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q10_BF_OFF (20)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q10_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q10_BF_MSK (0x00300000)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q10_BF_DEF (0x00100000)

///< RPU power down event S0Q11 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q11_BF_OFF (22)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q11_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q11_BF_MSK (0x00C00000)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q11_BF_DEF (0x00400000)

///< RPU power down event S0Q12 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q12_BF_OFF (24)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q12_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q12_BF_MSK (0x03000000)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q12_BF_DEF (0x01000000)

///< RPU power down event S0Q13 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q13_BF_OFF (26)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q13_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q13_BF_MSK (0x0C000000)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q13_BF_DEF (0x04000000)

///< RPU power down event S0Q14 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q14_BF_OFF (28)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q14_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q14_BF_MSK (0x30000000)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q14_BF_DEF (0x10000000)

///< RPU power down event S0Q15 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q15_BF_OFF (30)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q15_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q15_BF_MSK (0xC0000000)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_RXRPU_EVDN_DELAY_LUT_SEL_S0Q15_BF_DEF (0x40000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXRPU_EVDN_DELAY_CFG_1 register description at address offset 0xfc
  *
  * Register default value:        0x55555555
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxrpu_evdn_delay_cfg_1
  * Rx power down event config
  */

typedef union {
  struct {
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S1Q0 : 2;
    ///< RPU power down event S1Q0 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S1Q1 : 2;
    ///< RPU power down event S1Q1 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="2" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S1Q2 : 2;
    ///< RPU power down event S1Q2 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="4" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S1Q3 : 2;
    ///< RPU power down event S1Q3 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S1Q4 : 2;
    ///< RPU power down event S1Q4 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S1Q5 : 2;
    ///< RPU power down event S1Q5 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="10" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S1Q6 : 2;
    ///< RPU power down event S1Q6 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="12" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S1Q7 : 2;
    ///< RPU power down event S1Q7 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="14" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S1Q8 : 2;
    ///< RPU power down event S1Q8 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="16" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S1Q9 : 2;
    ///< RPU power down event S1Q9 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="18" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S1Q10 : 2;
    ///< RPU power down event S1Q10 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="20" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S1Q11 : 2;
    ///< RPU power down event S1Q11 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="22" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S1Q12 : 2;
    ///< RPU power down event S1Q12 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="24" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S1Q13 : 2;
    ///< RPU power down event S1Q13 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="26" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S1Q14 : 2;
    ///< RPU power down event S1Q14 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="28" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S1Q15 : 2;
    ///< RPU power down event S1Q15 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="30" ResetValue="0x1"
  } ;
  uint32_t value;
} pma_rx_msg_rpu_evdn_delay_cfg_1_reg_t;

#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_DEFAULT (0x55555555U)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RD_MASK (0xffffffffU)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_WR_MASK (0xffffffffU)


///< RPU power down event S1Q0 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q0_BF_OFF ( 0)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q0_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q0_BF_MSK (0x00000003)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q0_BF_DEF (0x00000001)

///< RPU power down event S1Q1 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q1_BF_OFF ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q1_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q1_BF_MSK (0x0000000C)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q1_BF_DEF (0x00000004)

///< RPU power down event S1Q2 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q2_BF_OFF ( 4)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q2_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q2_BF_MSK (0x00000030)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q2_BF_DEF (0x00000010)

///< RPU power down event S1Q3 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q3_BF_OFF ( 6)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q3_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q3_BF_MSK (0x000000C0)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q3_BF_DEF (0x00000040)

///< RPU power down event S1Q4 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q4_BF_OFF ( 8)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q4_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q4_BF_MSK (0x00000300)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q4_BF_DEF (0x00000100)

///< RPU power down event S1Q5 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q5_BF_OFF (10)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q5_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q5_BF_MSK (0x00000C00)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q5_BF_DEF (0x00000400)

///< RPU power down event S1Q6 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q6_BF_OFF (12)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q6_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q6_BF_MSK (0x00003000)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q6_BF_DEF (0x00001000)

///< RPU power down event S1Q7 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q7_BF_OFF (14)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q7_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q7_BF_MSK (0x0000C000)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q7_BF_DEF (0x00004000)

///< RPU power down event S1Q8 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q8_BF_OFF (16)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q8_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q8_BF_MSK (0x00030000)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q8_BF_DEF (0x00010000)

///< RPU power down event S1Q9 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q9_BF_OFF (18)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q9_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q9_BF_MSK (0x000C0000)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q9_BF_DEF (0x00040000)

///< RPU power down event S1Q10 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q10_BF_OFF (20)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q10_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q10_BF_MSK (0x00300000)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q10_BF_DEF (0x00100000)

///< RPU power down event S1Q11 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q11_BF_OFF (22)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q11_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q11_BF_MSK (0x00C00000)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q11_BF_DEF (0x00400000)

///< RPU power down event S1Q12 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q12_BF_OFF (24)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q12_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q12_BF_MSK (0x03000000)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q12_BF_DEF (0x01000000)

///< RPU power down event S1Q13 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q13_BF_OFF (26)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q13_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q13_BF_MSK (0x0C000000)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q13_BF_DEF (0x04000000)

///< RPU power down event S1Q14 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q14_BF_OFF (28)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q14_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q14_BF_MSK (0x30000000)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q14_BF_DEF (0x10000000)

///< RPU power down event S1Q15 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q15_BF_OFF (30)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q15_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q15_BF_MSK (0xC0000000)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_RXRPU_EVDN_DELAY_LUT_SEL_S1Q15_BF_DEF (0x40000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXRPU_EVDN_DELAY_CFG_2 register description at address offset 0x100
  *
  * Register default value:        0x55555555
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxrpu_evdn_delay_cfg_2
  * Rx power down event config
  */

typedef union {
  struct {
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S2Q0 : 2;
    ///< RPU power down event S2Q0 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S2Q1 : 2;
    ///< RPU power down event S2Q1 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="2" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S2Q2 : 2;
    ///< RPU power down event S2Q2 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="4" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S2Q3 : 2;
    ///< RPU power down event S2Q3 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S2Q4 : 2;
    ///< RPU power down event S2Q4 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S2Q5 : 2;
    ///< RPU power down event S2Q5 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="10" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S2Q6 : 2;
    ///< RPU power down event S2Q6 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="12" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S2Q7 : 2;
    ///< RPU power down event S2Q7 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="14" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S2Q8 : 2;
    ///< RPU power down event S2Q8 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="16" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S2Q9 : 2;
    ///< RPU power down event S2Q9 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="18" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S2Q10 : 2;
    ///< RPU power down event S2Q10 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="20" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S2Q11 : 2;
    ///< RPU power down event S2Q11 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="22" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S2Q12 : 2;
    ///< RPU power down event S2Q12 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="24" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S2Q13 : 2;
    ///< RPU power down event S2Q13 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="26" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S2Q14 : 2;
    ///< RPU power down event S2Q14 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="28" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S2Q15 : 2;
    ///< RPU power down event S2Q15 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="30" ResetValue="0x1"
  } ;
  uint32_t value;
} pma_rx_msg_rpu_evdn_delay_cfg_2_reg_t;

#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_DEFAULT (0x55555555U)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RD_MASK (0xffffffffU)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_WR_MASK (0xffffffffU)


///< RPU power down event S2Q0 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q0_BF_OFF ( 0)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q0_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q0_BF_MSK (0x00000003)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q0_BF_DEF (0x00000001)

///< RPU power down event S2Q1 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q1_BF_OFF ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q1_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q1_BF_MSK (0x0000000C)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q1_BF_DEF (0x00000004)

///< RPU power down event S2Q2 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q2_BF_OFF ( 4)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q2_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q2_BF_MSK (0x00000030)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q2_BF_DEF (0x00000010)

///< RPU power down event S2Q3 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q3_BF_OFF ( 6)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q3_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q3_BF_MSK (0x000000C0)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q3_BF_DEF (0x00000040)

///< RPU power down event S2Q4 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q4_BF_OFF ( 8)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q4_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q4_BF_MSK (0x00000300)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q4_BF_DEF (0x00000100)

///< RPU power down event S2Q5 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q5_BF_OFF (10)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q5_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q5_BF_MSK (0x00000C00)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q5_BF_DEF (0x00000400)

///< RPU power down event S2Q6 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q6_BF_OFF (12)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q6_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q6_BF_MSK (0x00003000)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q6_BF_DEF (0x00001000)

///< RPU power down event S2Q7 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q7_BF_OFF (14)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q7_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q7_BF_MSK (0x0000C000)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q7_BF_DEF (0x00004000)

///< RPU power down event S2Q8 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q8_BF_OFF (16)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q8_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q8_BF_MSK (0x00030000)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q8_BF_DEF (0x00010000)

///< RPU power down event S2Q9 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q9_BF_OFF (18)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q9_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q9_BF_MSK (0x000C0000)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q9_BF_DEF (0x00040000)

///< RPU power down event S2Q10 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q10_BF_OFF (20)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q10_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q10_BF_MSK (0x00300000)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q10_BF_DEF (0x00100000)

///< RPU power down event S2Q11 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q11_BF_OFF (22)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q11_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q11_BF_MSK (0x00C00000)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q11_BF_DEF (0x00400000)

///< RPU power down event S2Q12 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q12_BF_OFF (24)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q12_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q12_BF_MSK (0x03000000)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q12_BF_DEF (0x01000000)

///< RPU power down event S2Q13 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q13_BF_OFF (26)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q13_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q13_BF_MSK (0x0C000000)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q13_BF_DEF (0x04000000)

///< RPU power down event S2Q14 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q14_BF_OFF (28)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q14_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q14_BF_MSK (0x30000000)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q14_BF_DEF (0x10000000)

///< RPU power down event S2Q15 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q15_BF_OFF (30)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q15_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q15_BF_MSK (0xC0000000)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_RXRPU_EVDN_DELAY_LUT_SEL_S2Q15_BF_DEF (0x40000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXRPU_EVDN_DELAY_CFG_3 register description at address offset 0x104
  *
  * Register default value:        0x55555555
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxrpu_evdn_delay_cfg_3
  * Rx power down event config
  */

typedef union {
  struct {
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S3Q0 : 2;
    ///< RPU power down event S3Q0 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S3Q1 : 2;
    ///< RPU power down event S3Q1 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="2" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S3Q2 : 2;
    ///< RPU power down event S3Q2 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="4" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S3Q3 : 2;
    ///< RPU power down event S3Q3 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S3Q4 : 2;
    ///< RPU power down event S3Q4 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S3Q5 : 2;
    ///< RPU power down event S3Q5 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="10" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S3Q6 : 2;
    ///< RPU power down event S3Q6 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="12" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S3Q7 : 2;
    ///< RPU power down event S3Q7 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="14" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S3Q8 : 2;
    ///< RPU power down event S3Q8 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="16" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S3Q9 : 2;
    ///< RPU power down event S3Q9 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="18" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S3Q10 : 2;
    ///< RPU power down event S3Q10 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="20" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S3Q11 : 2;
    ///< RPU power down event S3Q11 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="22" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S3Q12 : 2;
    ///< RPU power down event S3Q12 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="24" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S3Q13 : 2;
    ///< RPU power down event S3Q13 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="26" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S3Q14 : 2;
    ///< RPU power down event S3Q14 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="28" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S3Q15 : 2;
    ///< RPU power down event S3Q15 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="30" ResetValue="0x1"
  } ;
  uint32_t value;
} pma_rx_msg_rpu_evdn_delay_cfg_3_reg_t;

#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_DEFAULT (0x55555555U)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RD_MASK (0xffffffffU)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_WR_MASK (0xffffffffU)


///< RPU power down event S3Q0 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q0_BF_OFF ( 0)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q0_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q0_BF_MSK (0x00000003)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q0_BF_DEF (0x00000001)

///< RPU power down event S3Q1 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q1_BF_OFF ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q1_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q1_BF_MSK (0x0000000C)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q1_BF_DEF (0x00000004)

///< RPU power down event S3Q2 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q2_BF_OFF ( 4)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q2_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q2_BF_MSK (0x00000030)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q2_BF_DEF (0x00000010)

///< RPU power down event S3Q3 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q3_BF_OFF ( 6)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q3_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q3_BF_MSK (0x000000C0)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q3_BF_DEF (0x00000040)

///< RPU power down event S3Q4 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q4_BF_OFF ( 8)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q4_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q4_BF_MSK (0x00000300)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q4_BF_DEF (0x00000100)

///< RPU power down event S3Q5 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q5_BF_OFF (10)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q5_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q5_BF_MSK (0x00000C00)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q5_BF_DEF (0x00000400)

///< RPU power down event S3Q6 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q6_BF_OFF (12)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q6_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q6_BF_MSK (0x00003000)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q6_BF_DEF (0x00001000)

///< RPU power down event S3Q7 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q7_BF_OFF (14)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q7_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q7_BF_MSK (0x0000C000)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q7_BF_DEF (0x00004000)

///< RPU power down event S3Q8 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q8_BF_OFF (16)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q8_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q8_BF_MSK (0x00030000)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q8_BF_DEF (0x00010000)

///< RPU power down event S3Q9 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q9_BF_OFF (18)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q9_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q9_BF_MSK (0x000C0000)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q9_BF_DEF (0x00040000)

///< RPU power down event S3Q10 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q10_BF_OFF (20)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q10_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q10_BF_MSK (0x00300000)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q10_BF_DEF (0x00100000)

///< RPU power down event S3Q11 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q11_BF_OFF (22)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q11_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q11_BF_MSK (0x00C00000)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q11_BF_DEF (0x00400000)

///< RPU power down event S3Q12 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q12_BF_OFF (24)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q12_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q12_BF_MSK (0x03000000)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q12_BF_DEF (0x01000000)

///< RPU power down event S3Q13 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q13_BF_OFF (26)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q13_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q13_BF_MSK (0x0C000000)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q13_BF_DEF (0x04000000)

///< RPU power down event S3Q14 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q14_BF_OFF (28)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q14_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q14_BF_MSK (0x30000000)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q14_BF_DEF (0x10000000)

///< RPU power down event S3Q15 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q15_BF_OFF (30)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q15_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q15_BF_MSK (0xC0000000)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_RXRPU_EVDN_DELAY_LUT_SEL_S3Q15_BF_DEF (0x40000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXRPU_EVDN_DELAY_CFG_4 register description at address offset 0x108
  *
  * Register default value:        0x00000015
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxrpu_evdn_delay_cfg_4
  * Rx power down event config
  */

typedef union {
  struct {
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S4Q0 : 2;
    ///< RPU power down event S4q0 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S4Q1 : 2;
    ///< RPU power down event S4q1 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="2" ResetValue="0x1"
    uint32_t RXRPU_EVDN_DELAY_LUT_SEL_S5Q0 : 2;
    ///< RPU power down event S5Q0 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="4" ResetValue="0x1"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_rpu_evdn_delay_cfg_4_reg_t;

#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_4_DEFAULT (0x00000015U)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_4_RD_MASK (0x0000003fU)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_4_WR_MASK (0x0000003fU)


///< RPU power down event S4q0 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_4_RXRPU_EVDN_DELAY_LUT_SEL_S4Q0_BF_OFF ( 0)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_4_RXRPU_EVDN_DELAY_LUT_SEL_S4Q0_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_4_RXRPU_EVDN_DELAY_LUT_SEL_S4Q0_BF_MSK (0x00000003)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_4_RXRPU_EVDN_DELAY_LUT_SEL_S4Q0_BF_DEF (0x00000001)

///< RPU power down event S4q1 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_4_RXRPU_EVDN_DELAY_LUT_SEL_S4Q1_BF_OFF ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_4_RXRPU_EVDN_DELAY_LUT_SEL_S4Q1_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_4_RXRPU_EVDN_DELAY_LUT_SEL_S4Q1_BF_MSK (0x0000000C)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_4_RXRPU_EVDN_DELAY_LUT_SEL_S4Q1_BF_DEF (0x00000004)

///< RPU power down event S5Q0 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_4_RXRPU_EVDN_DELAY_LUT_SEL_S5Q0_BF_OFF ( 4)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_4_RXRPU_EVDN_DELAY_LUT_SEL_S5Q0_BF_WID ( 2)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_4_RXRPU_EVDN_DELAY_LUT_SEL_S5Q0_BF_MSK (0x00000030)
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_4_RXRPU_EVDN_DELAY_LUT_SEL_S5Q0_BF_DEF (0x00000010)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_RPU_EVENT_CFG_0 register description at address offset 0x10c
  *
  * Register default value:        0x0003FFFF
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_rpu_event_cfg_0
  * Rx  event config
  */

typedef union {
  struct {
    uint32_t RXRPUBRKPT_EVENT0_DN_CFG : 2;
    ///< RPU break point 0 in power down config
    ///< AccessType="RW" BitOffset="0" ResetValue="0x3"
    uint32_t RXRPUBRKPT_EVENT0_DN_PTR_Q : 4;
    ///< RPU break point 0 in power down pointer q state
    ///< AccessType="RW" BitOffset="2" ResetValue="0xF"
    uint32_t RXRPUBRKPT_EVENT0_DN_PTR_S : 3;
    ///< RPU break point 0 in power down pointer s state
    ///< AccessType="RW" BitOffset="6" ResetValue="0x7"
    uint32_t RXRPUBRKPT_EVENT0_UP_CFG : 2;
    ///< RPU break point 0 in power upconfig
    ///< AccessType="RW" BitOffset="9" ResetValue="0x3"
    uint32_t RXRPUBRKPT_EVENT0_UP_PTR_Q : 4;
    ///< RPU break point 0 in power up pointer q state
    ///< AccessType="RW" BitOffset="11" ResetValue="0xF"
    uint32_t RXRPUBRKPT_EVENT0_UP_PTR_S : 3;
    ///< RPU break point 0 in power up pointer s state
    ///< AccessType="RW" BitOffset="15" ResetValue="0x7"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_rpu_event_cfg_0_reg_t;

#define PMA_RX_MGS_RPU_EVENT_CFG_0_DEFAULT (0x0003ffffU)
#define PMA_RX_MGS_RPU_EVENT_CFG_0_RD_MASK (0x0003ffffU)
#define PMA_RX_MGS_RPU_EVENT_CFG_0_WR_MASK (0x0003ffffU)


///< RPU break point 0 in power down config
#define PMA_RX_MGS_RPU_EVENT_CFG_0_RXRPUBRKPT_EVENT0_DN_CFG_BF_OFF ( 0)
#define PMA_RX_MGS_RPU_EVENT_CFG_0_RXRPUBRKPT_EVENT0_DN_CFG_BF_WID ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_0_RXRPUBRKPT_EVENT0_DN_CFG_BF_MSK (0x00000003)
#define PMA_RX_MGS_RPU_EVENT_CFG_0_RXRPUBRKPT_EVENT0_DN_CFG_BF_DEF (0x00000003)

///< RPU break point 0 in power down pointer q state
#define PMA_RX_MGS_RPU_EVENT_CFG_0_RXRPUBRKPT_EVENT0_DN_PTR_Q_BF_OFF ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_0_RXRPUBRKPT_EVENT0_DN_PTR_Q_BF_WID ( 4)
#define PMA_RX_MGS_RPU_EVENT_CFG_0_RXRPUBRKPT_EVENT0_DN_PTR_Q_BF_MSK (0x0000003C)
#define PMA_RX_MGS_RPU_EVENT_CFG_0_RXRPUBRKPT_EVENT0_DN_PTR_Q_BF_DEF (0x0000003C)

///< RPU break point 0 in power down pointer s state
#define PMA_RX_MGS_RPU_EVENT_CFG_0_RXRPUBRKPT_EVENT0_DN_PTR_S_BF_OFF ( 6)
#define PMA_RX_MGS_RPU_EVENT_CFG_0_RXRPUBRKPT_EVENT0_DN_PTR_S_BF_WID ( 3)
#define PMA_RX_MGS_RPU_EVENT_CFG_0_RXRPUBRKPT_EVENT0_DN_PTR_S_BF_MSK (0x000001C0)
#define PMA_RX_MGS_RPU_EVENT_CFG_0_RXRPUBRKPT_EVENT0_DN_PTR_S_BF_DEF (0x000001C0)

///< RPU break point 0 in power upconfig
#define PMA_RX_MGS_RPU_EVENT_CFG_0_RXRPUBRKPT_EVENT0_UP_CFG_BF_OFF ( 9)
#define PMA_RX_MGS_RPU_EVENT_CFG_0_RXRPUBRKPT_EVENT0_UP_CFG_BF_WID ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_0_RXRPUBRKPT_EVENT0_UP_CFG_BF_MSK (0x00000600)
#define PMA_RX_MGS_RPU_EVENT_CFG_0_RXRPUBRKPT_EVENT0_UP_CFG_BF_DEF (0x00000600)

///< RPU break point 0 in power up pointer q state
#define PMA_RX_MGS_RPU_EVENT_CFG_0_RXRPUBRKPT_EVENT0_UP_PTR_Q_BF_OFF (11)
#define PMA_RX_MGS_RPU_EVENT_CFG_0_RXRPUBRKPT_EVENT0_UP_PTR_Q_BF_WID ( 4)
#define PMA_RX_MGS_RPU_EVENT_CFG_0_RXRPUBRKPT_EVENT0_UP_PTR_Q_BF_MSK (0x00007800)
#define PMA_RX_MGS_RPU_EVENT_CFG_0_RXRPUBRKPT_EVENT0_UP_PTR_Q_BF_DEF (0x00007800)

///< RPU break point 0 in power up pointer s state
#define PMA_RX_MGS_RPU_EVENT_CFG_0_RXRPUBRKPT_EVENT0_UP_PTR_S_BF_OFF (15)
#define PMA_RX_MGS_RPU_EVENT_CFG_0_RXRPUBRKPT_EVENT0_UP_PTR_S_BF_WID ( 3)
#define PMA_RX_MGS_RPU_EVENT_CFG_0_RXRPUBRKPT_EVENT0_UP_PTR_S_BF_MSK (0x00038000)
#define PMA_RX_MGS_RPU_EVENT_CFG_0_RXRPUBRKPT_EVENT0_UP_PTR_S_BF_DEF (0x00038000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_RPU_EVENT_CFG_1 register description at address offset 0x110
  *
  * Register default value:        0x0003FFFF
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_rpu_event_cfg_1
  * Rx  event config
  */

typedef union {
  struct {
    uint32_t RXRPUBRKPT_EVENT1_DN_CFG : 2;
    ///< RPU break point 1 in power down config
    ///< AccessType="RW" BitOffset="0" ResetValue="0x3"
    uint32_t RXRPUBRKPT_EVENT1_DN_PTR_Q : 4;
    ///< RPU break point 1 in power down pointer q state
    ///< AccessType="RW" BitOffset="2" ResetValue="0xF"
    uint32_t RXRPUBRKPT_EVENT1_DN_PTR_S : 3;
    ///< RPU break point 1 in power down pointer s state
    ///< AccessType="RW" BitOffset="6" ResetValue="0x7"
    uint32_t RXRPUBRKPT_EVENT1_UP_CFG : 2;
    ///< RPU break point 1 in power upconfig
    ///< AccessType="RW" BitOffset="9" ResetValue="0x3"
    uint32_t RXRPUBRKPT_EVENT1_UP_PTR_Q : 4;
    ///< RPU break point 1 in power up pointer q state
    ///< AccessType="RW" BitOffset="11" ResetValue="0xF"
    uint32_t RXRPUBRKPT_EVENT1_UP_PTR_S : 3;
    ///< RPU break point 1 in power up pointer s state
    ///< AccessType="RW" BitOffset="15" ResetValue="0x7"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_rpu_event_cfg_1_reg_t;

#define PMA_RX_MGS_RPU_EVENT_CFG_1_DEFAULT (0x0003ffffU)
#define PMA_RX_MGS_RPU_EVENT_CFG_1_RD_MASK (0x0003ffffU)
#define PMA_RX_MGS_RPU_EVENT_CFG_1_WR_MASK (0x0003ffffU)


///< RPU break point 1 in power down config
#define PMA_RX_MGS_RPU_EVENT_CFG_1_RXRPUBRKPT_EVENT1_DN_CFG_BF_OFF ( 0)
#define PMA_RX_MGS_RPU_EVENT_CFG_1_RXRPUBRKPT_EVENT1_DN_CFG_BF_WID ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_1_RXRPUBRKPT_EVENT1_DN_CFG_BF_MSK (0x00000003)
#define PMA_RX_MGS_RPU_EVENT_CFG_1_RXRPUBRKPT_EVENT1_DN_CFG_BF_DEF (0x00000003)

///< RPU break point 1 in power down pointer q state
#define PMA_RX_MGS_RPU_EVENT_CFG_1_RXRPUBRKPT_EVENT1_DN_PTR_Q_BF_OFF ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_1_RXRPUBRKPT_EVENT1_DN_PTR_Q_BF_WID ( 4)
#define PMA_RX_MGS_RPU_EVENT_CFG_1_RXRPUBRKPT_EVENT1_DN_PTR_Q_BF_MSK (0x0000003C)
#define PMA_RX_MGS_RPU_EVENT_CFG_1_RXRPUBRKPT_EVENT1_DN_PTR_Q_BF_DEF (0x0000003C)

///< RPU break point 1 in power down pointer s state
#define PMA_RX_MGS_RPU_EVENT_CFG_1_RXRPUBRKPT_EVENT1_DN_PTR_S_BF_OFF ( 6)
#define PMA_RX_MGS_RPU_EVENT_CFG_1_RXRPUBRKPT_EVENT1_DN_PTR_S_BF_WID ( 3)
#define PMA_RX_MGS_RPU_EVENT_CFG_1_RXRPUBRKPT_EVENT1_DN_PTR_S_BF_MSK (0x000001C0)
#define PMA_RX_MGS_RPU_EVENT_CFG_1_RXRPUBRKPT_EVENT1_DN_PTR_S_BF_DEF (0x000001C0)

///< RPU break point 1 in power upconfig
#define PMA_RX_MGS_RPU_EVENT_CFG_1_RXRPUBRKPT_EVENT1_UP_CFG_BF_OFF ( 9)
#define PMA_RX_MGS_RPU_EVENT_CFG_1_RXRPUBRKPT_EVENT1_UP_CFG_BF_WID ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_1_RXRPUBRKPT_EVENT1_UP_CFG_BF_MSK (0x00000600)
#define PMA_RX_MGS_RPU_EVENT_CFG_1_RXRPUBRKPT_EVENT1_UP_CFG_BF_DEF (0x00000600)

///< RPU break point 1 in power up pointer q state
#define PMA_RX_MGS_RPU_EVENT_CFG_1_RXRPUBRKPT_EVENT1_UP_PTR_Q_BF_OFF (11)
#define PMA_RX_MGS_RPU_EVENT_CFG_1_RXRPUBRKPT_EVENT1_UP_PTR_Q_BF_WID ( 4)
#define PMA_RX_MGS_RPU_EVENT_CFG_1_RXRPUBRKPT_EVENT1_UP_PTR_Q_BF_MSK (0x00007800)
#define PMA_RX_MGS_RPU_EVENT_CFG_1_RXRPUBRKPT_EVENT1_UP_PTR_Q_BF_DEF (0x00007800)

///< RPU break point 1 in power up pointer s state
#define PMA_RX_MGS_RPU_EVENT_CFG_1_RXRPUBRKPT_EVENT1_UP_PTR_S_BF_OFF (15)
#define PMA_RX_MGS_RPU_EVENT_CFG_1_RXRPUBRKPT_EVENT1_UP_PTR_S_BF_WID ( 3)
#define PMA_RX_MGS_RPU_EVENT_CFG_1_RXRPUBRKPT_EVENT1_UP_PTR_S_BF_MSK (0x00038000)
#define PMA_RX_MGS_RPU_EVENT_CFG_1_RXRPUBRKPT_EVENT1_UP_PTR_S_BF_DEF (0x00038000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_RPU_EVENT_CFG_2 register description at address offset 0x114
  *
  * Register default value:        0x0003FFFF
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_rpu_event_cfg_2
  * Rx  event config
  */

typedef union {
  struct {
    uint32_t RXRPUBRKPT_EVENT2_DN_CFG : 2;
    ///< RPU break point 2 in power down config
    ///< AccessType="RW" BitOffset="0" ResetValue="0x3"
    uint32_t RXRPUBRKPT_EVENT2_DN_PTR_Q : 4;
    ///< RPU break point 2 in power down pointer q state
    ///< AccessType="RW" BitOffset="2" ResetValue="0xF"
    uint32_t RXRPUBRKPT_EVENT2_DN_PTR_S : 3;
    ///< RPU break point 2 in power down pointer s state
    ///< AccessType="RW" BitOffset="6" ResetValue="0x7"
    uint32_t RXRPUBRKPT_EVENT2_UP_CFG : 2;
    ///< RPU break point 2 in power upconfig
    ///< AccessType="RW" BitOffset="9" ResetValue="0x3"
    uint32_t RXRPUBRKPT_EVENT2_UP_PTR_Q : 4;
    ///< RPU break point 2 in power up pointer q state
    ///< AccessType="RW" BitOffset="11" ResetValue="0xF"
    uint32_t RXRPUBRKPT_EVENT2_UP_PTR_S : 3;
    ///< RPU break point 2 in power up pointer s state
    ///< AccessType="RW" BitOffset="15" ResetValue="0x7"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_rpu_event_cfg_2_reg_t;

#define PMA_RX_MGS_RPU_EVENT_CFG_2_DEFAULT (0x0003ffffU)
#define PMA_RX_MGS_RPU_EVENT_CFG_2_RD_MASK (0x0003ffffU)
#define PMA_RX_MGS_RPU_EVENT_CFG_2_WR_MASK (0x0003ffffU)


///< RPU break point 2 in power down config
#define PMA_RX_MGS_RPU_EVENT_CFG_2_RXRPUBRKPT_EVENT2_DN_CFG_BF_OFF ( 0)
#define PMA_RX_MGS_RPU_EVENT_CFG_2_RXRPUBRKPT_EVENT2_DN_CFG_BF_WID ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_2_RXRPUBRKPT_EVENT2_DN_CFG_BF_MSK (0x00000003)
#define PMA_RX_MGS_RPU_EVENT_CFG_2_RXRPUBRKPT_EVENT2_DN_CFG_BF_DEF (0x00000003)

///< RPU break point 2 in power down pointer q state
#define PMA_RX_MGS_RPU_EVENT_CFG_2_RXRPUBRKPT_EVENT2_DN_PTR_Q_BF_OFF ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_2_RXRPUBRKPT_EVENT2_DN_PTR_Q_BF_WID ( 4)
#define PMA_RX_MGS_RPU_EVENT_CFG_2_RXRPUBRKPT_EVENT2_DN_PTR_Q_BF_MSK (0x0000003C)
#define PMA_RX_MGS_RPU_EVENT_CFG_2_RXRPUBRKPT_EVENT2_DN_PTR_Q_BF_DEF (0x0000003C)

///< RPU break point 2 in power down pointer s state
#define PMA_RX_MGS_RPU_EVENT_CFG_2_RXRPUBRKPT_EVENT2_DN_PTR_S_BF_OFF ( 6)
#define PMA_RX_MGS_RPU_EVENT_CFG_2_RXRPUBRKPT_EVENT2_DN_PTR_S_BF_WID ( 3)
#define PMA_RX_MGS_RPU_EVENT_CFG_2_RXRPUBRKPT_EVENT2_DN_PTR_S_BF_MSK (0x000001C0)
#define PMA_RX_MGS_RPU_EVENT_CFG_2_RXRPUBRKPT_EVENT2_DN_PTR_S_BF_DEF (0x000001C0)

///< RPU break point 2 in power upconfig
#define PMA_RX_MGS_RPU_EVENT_CFG_2_RXRPUBRKPT_EVENT2_UP_CFG_BF_OFF ( 9)
#define PMA_RX_MGS_RPU_EVENT_CFG_2_RXRPUBRKPT_EVENT2_UP_CFG_BF_WID ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_2_RXRPUBRKPT_EVENT2_UP_CFG_BF_MSK (0x00000600)
#define PMA_RX_MGS_RPU_EVENT_CFG_2_RXRPUBRKPT_EVENT2_UP_CFG_BF_DEF (0x00000600)

///< RPU break point 2 in power up pointer q state
#define PMA_RX_MGS_RPU_EVENT_CFG_2_RXRPUBRKPT_EVENT2_UP_PTR_Q_BF_OFF (11)
#define PMA_RX_MGS_RPU_EVENT_CFG_2_RXRPUBRKPT_EVENT2_UP_PTR_Q_BF_WID ( 4)
#define PMA_RX_MGS_RPU_EVENT_CFG_2_RXRPUBRKPT_EVENT2_UP_PTR_Q_BF_MSK (0x00007800)
#define PMA_RX_MGS_RPU_EVENT_CFG_2_RXRPUBRKPT_EVENT2_UP_PTR_Q_BF_DEF (0x00007800)

///< RPU break point 2 in power up pointer s state
#define PMA_RX_MGS_RPU_EVENT_CFG_2_RXRPUBRKPT_EVENT2_UP_PTR_S_BF_OFF (15)
#define PMA_RX_MGS_RPU_EVENT_CFG_2_RXRPUBRKPT_EVENT2_UP_PTR_S_BF_WID ( 3)
#define PMA_RX_MGS_RPU_EVENT_CFG_2_RXRPUBRKPT_EVENT2_UP_PTR_S_BF_MSK (0x00038000)
#define PMA_RX_MGS_RPU_EVENT_CFG_2_RXRPUBRKPT_EVENT2_UP_PTR_S_BF_DEF (0x00038000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_RPU_EVENT_CFG_3 register description at address offset 0x118
  *
  * Register default value:        0x0003FFFF
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_rpu_event_cfg_3
  * Rx  event config
  */

typedef union {
  struct {
    uint32_t RXRPUBRKPT_EVENT3_DN_CFG : 2;
    ///< RPU break point 3 in power down config
    ///< AccessType="RW" BitOffset="0" ResetValue="0x3"
    uint32_t RXRPUBRKPT_EVENT3_DN_PTR_Q : 4;
    ///< RPU break point 3 in power down pointer q state
    ///< AccessType="RW" BitOffset="2" ResetValue="0xF"
    uint32_t RXRPUBRKPT_EVENT3_DN_PTR_S : 3;
    ///< RPU break point 3 in power down pointer s state
    ///< AccessType="RW" BitOffset="6" ResetValue="0x7"
    uint32_t RXRPUBRKPT_EVENT3_UP_CFG : 2;
    ///< RPU break point 3 in power upconfig
    ///< AccessType="RW" BitOffset="9" ResetValue="0x3"
    uint32_t RXRPUBRKPT_EVENT3_UP_PTR_Q : 4;
    ///< RPU break point 3 in power up pointer q state
    ///< AccessType="RW" BitOffset="11" ResetValue="0xF"
    uint32_t RXRPUBRKPT_EVENT3_UP_PTR_S : 3;
    ///< RPU break point 3 in power up pointer s state
    ///< AccessType="RW" BitOffset="15" ResetValue="0x7"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_rpu_event_cfg_3_reg_t;

#define PMA_RX_MGS_RPU_EVENT_CFG_3_DEFAULT (0x0003ffffU)
#define PMA_RX_MGS_RPU_EVENT_CFG_3_RD_MASK (0x0003ffffU)
#define PMA_RX_MGS_RPU_EVENT_CFG_3_WR_MASK (0x0003ffffU)


///< RPU break point 3 in power down config
#define PMA_RX_MGS_RPU_EVENT_CFG_3_RXRPUBRKPT_EVENT3_DN_CFG_BF_OFF ( 0)
#define PMA_RX_MGS_RPU_EVENT_CFG_3_RXRPUBRKPT_EVENT3_DN_CFG_BF_WID ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_3_RXRPUBRKPT_EVENT3_DN_CFG_BF_MSK (0x00000003)
#define PMA_RX_MGS_RPU_EVENT_CFG_3_RXRPUBRKPT_EVENT3_DN_CFG_BF_DEF (0x00000003)

///< RPU break point 3 in power down pointer q state
#define PMA_RX_MGS_RPU_EVENT_CFG_3_RXRPUBRKPT_EVENT3_DN_PTR_Q_BF_OFF ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_3_RXRPUBRKPT_EVENT3_DN_PTR_Q_BF_WID ( 4)
#define PMA_RX_MGS_RPU_EVENT_CFG_3_RXRPUBRKPT_EVENT3_DN_PTR_Q_BF_MSK (0x0000003C)
#define PMA_RX_MGS_RPU_EVENT_CFG_3_RXRPUBRKPT_EVENT3_DN_PTR_Q_BF_DEF (0x0000003C)

///< RPU break point 3 in power down pointer s state
#define PMA_RX_MGS_RPU_EVENT_CFG_3_RXRPUBRKPT_EVENT3_DN_PTR_S_BF_OFF ( 6)
#define PMA_RX_MGS_RPU_EVENT_CFG_3_RXRPUBRKPT_EVENT3_DN_PTR_S_BF_WID ( 3)
#define PMA_RX_MGS_RPU_EVENT_CFG_3_RXRPUBRKPT_EVENT3_DN_PTR_S_BF_MSK (0x000001C0)
#define PMA_RX_MGS_RPU_EVENT_CFG_3_RXRPUBRKPT_EVENT3_DN_PTR_S_BF_DEF (0x000001C0)

///< RPU break point 3 in power upconfig
#define PMA_RX_MGS_RPU_EVENT_CFG_3_RXRPUBRKPT_EVENT3_UP_CFG_BF_OFF ( 9)
#define PMA_RX_MGS_RPU_EVENT_CFG_3_RXRPUBRKPT_EVENT3_UP_CFG_BF_WID ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_3_RXRPUBRKPT_EVENT3_UP_CFG_BF_MSK (0x00000600)
#define PMA_RX_MGS_RPU_EVENT_CFG_3_RXRPUBRKPT_EVENT3_UP_CFG_BF_DEF (0x00000600)

///< RPU break point 3 in power up pointer q state
#define PMA_RX_MGS_RPU_EVENT_CFG_3_RXRPUBRKPT_EVENT3_UP_PTR_Q_BF_OFF (11)
#define PMA_RX_MGS_RPU_EVENT_CFG_3_RXRPUBRKPT_EVENT3_UP_PTR_Q_BF_WID ( 4)
#define PMA_RX_MGS_RPU_EVENT_CFG_3_RXRPUBRKPT_EVENT3_UP_PTR_Q_BF_MSK (0x00007800)
#define PMA_RX_MGS_RPU_EVENT_CFG_3_RXRPUBRKPT_EVENT3_UP_PTR_Q_BF_DEF (0x00007800)

///< RPU break point 3 in power up pointer s state
#define PMA_RX_MGS_RPU_EVENT_CFG_3_RXRPUBRKPT_EVENT3_UP_PTR_S_BF_OFF (15)
#define PMA_RX_MGS_RPU_EVENT_CFG_3_RXRPUBRKPT_EVENT3_UP_PTR_S_BF_WID ( 3)
#define PMA_RX_MGS_RPU_EVENT_CFG_3_RXRPUBRKPT_EVENT3_UP_PTR_S_BF_MSK (0x00038000)
#define PMA_RX_MGS_RPU_EVENT_CFG_3_RXRPUBRKPT_EVENT3_UP_PTR_S_BF_DEF (0x00038000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_RPU_EVENT_CFG_4 register description at address offset 0x11c
  *
  * Register default value:        0x0003FFFF
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_rpu_event_cfg_4
  * Rx  event config
  */

typedef union {
  struct {
    uint32_t RXRPUBRKPT_EVENT4_DN_CFG : 2;
    ///< RPU break point 4 in power down config
    ///< AccessType="RW" BitOffset="0" ResetValue="0x3"
    uint32_t RXRPUBRKPT_EVENT4_DN_PTR_Q : 4;
    ///< RPU break point 4 in power down pointer q state
    ///< AccessType="RW" BitOffset="2" ResetValue="0xF"
    uint32_t RXRPUBRKPT_EVENT4_DN_PTR_S : 3;
    ///< RPU break point 4 in power down pointer s state
    ///< AccessType="RW" BitOffset="6" ResetValue="0x7"
    uint32_t RXRPUBRKPT_EVENT4_UP_CFG : 2;
    ///< RPU break point 4 in power upconfig
    ///< AccessType="RW" BitOffset="9" ResetValue="0x3"
    uint32_t RXRPUBRKPT_EVENT4_UP_PTR_Q : 4;
    ///< RPU break point 4 in power up pointer q state
    ///< AccessType="RW" BitOffset="11" ResetValue="0xF"
    uint32_t RXRPUBRKPT_EVENT4_UP_PTR_S : 3;
    ///< RPU break point 4 in power up pointer s state
    ///< AccessType="RW" BitOffset="15" ResetValue="0x7"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_rpu_event_cfg_4_reg_t;

#define PMA_RX_MGS_RPU_EVENT_CFG_4_DEFAULT (0x0003ffffU)
#define PMA_RX_MGS_RPU_EVENT_CFG_4_RD_MASK (0x0003ffffU)
#define PMA_RX_MGS_RPU_EVENT_CFG_4_WR_MASK (0x0003ffffU)


///< RPU break point 4 in power down config
#define PMA_RX_MGS_RPU_EVENT_CFG_4_RXRPUBRKPT_EVENT4_DN_CFG_BF_OFF ( 0)
#define PMA_RX_MGS_RPU_EVENT_CFG_4_RXRPUBRKPT_EVENT4_DN_CFG_BF_WID ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_4_RXRPUBRKPT_EVENT4_DN_CFG_BF_MSK (0x00000003)
#define PMA_RX_MGS_RPU_EVENT_CFG_4_RXRPUBRKPT_EVENT4_DN_CFG_BF_DEF (0x00000003)

///< RPU break point 4 in power down pointer q state
#define PMA_RX_MGS_RPU_EVENT_CFG_4_RXRPUBRKPT_EVENT4_DN_PTR_Q_BF_OFF ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_4_RXRPUBRKPT_EVENT4_DN_PTR_Q_BF_WID ( 4)
#define PMA_RX_MGS_RPU_EVENT_CFG_4_RXRPUBRKPT_EVENT4_DN_PTR_Q_BF_MSK (0x0000003C)
#define PMA_RX_MGS_RPU_EVENT_CFG_4_RXRPUBRKPT_EVENT4_DN_PTR_Q_BF_DEF (0x0000003C)

///< RPU break point 4 in power down pointer s state
#define PMA_RX_MGS_RPU_EVENT_CFG_4_RXRPUBRKPT_EVENT4_DN_PTR_S_BF_OFF ( 6)
#define PMA_RX_MGS_RPU_EVENT_CFG_4_RXRPUBRKPT_EVENT4_DN_PTR_S_BF_WID ( 3)
#define PMA_RX_MGS_RPU_EVENT_CFG_4_RXRPUBRKPT_EVENT4_DN_PTR_S_BF_MSK (0x000001C0)
#define PMA_RX_MGS_RPU_EVENT_CFG_4_RXRPUBRKPT_EVENT4_DN_PTR_S_BF_DEF (0x000001C0)

///< RPU break point 4 in power upconfig
#define PMA_RX_MGS_RPU_EVENT_CFG_4_RXRPUBRKPT_EVENT4_UP_CFG_BF_OFF ( 9)
#define PMA_RX_MGS_RPU_EVENT_CFG_4_RXRPUBRKPT_EVENT4_UP_CFG_BF_WID ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_4_RXRPUBRKPT_EVENT4_UP_CFG_BF_MSK (0x00000600)
#define PMA_RX_MGS_RPU_EVENT_CFG_4_RXRPUBRKPT_EVENT4_UP_CFG_BF_DEF (0x00000600)

///< RPU break point 4 in power up pointer q state
#define PMA_RX_MGS_RPU_EVENT_CFG_4_RXRPUBRKPT_EVENT4_UP_PTR_Q_BF_OFF (11)
#define PMA_RX_MGS_RPU_EVENT_CFG_4_RXRPUBRKPT_EVENT4_UP_PTR_Q_BF_WID ( 4)
#define PMA_RX_MGS_RPU_EVENT_CFG_4_RXRPUBRKPT_EVENT4_UP_PTR_Q_BF_MSK (0x00007800)
#define PMA_RX_MGS_RPU_EVENT_CFG_4_RXRPUBRKPT_EVENT4_UP_PTR_Q_BF_DEF (0x00007800)

///< RPU break point 4 in power up pointer s state
#define PMA_RX_MGS_RPU_EVENT_CFG_4_RXRPUBRKPT_EVENT4_UP_PTR_S_BF_OFF (15)
#define PMA_RX_MGS_RPU_EVENT_CFG_4_RXRPUBRKPT_EVENT4_UP_PTR_S_BF_WID ( 3)
#define PMA_RX_MGS_RPU_EVENT_CFG_4_RXRPUBRKPT_EVENT4_UP_PTR_S_BF_MSK (0x00038000)
#define PMA_RX_MGS_RPU_EVENT_CFG_4_RXRPUBRKPT_EVENT4_UP_PTR_S_BF_DEF (0x00038000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_RPU_EVENT_CFG_5 register description at address offset 0x120
  *
  * Register default value:        0x0001BEE3
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_rpu_event_cfg_5
  * Rx RPU event config
  */

typedef union {
  struct {
    uint32_t RXRPUCTL_CLKGATER_KEEPALIVE_DN_CFG : 2;
    ///< RPU timer for clkgater keepalive clock select in power down config
    ///< AccessType="RW" BitOffset="0" ResetValue="0x3"
    uint32_t RXRPUCTL_CLKGATER_KEEPALIVE_DN_PTR0_Q : 4;
    ///< RPU timer for clkgater keepalive clock select in power down pointer
    ///< 0 q state
    ///< AccessType="RW" BitOffset="2" ResetValue="0x8"
    uint32_t RXRPUCTL_CLKGATER_KEEPALIVE_DN_PTR0_S : 3;
    ///< RPU timer for clkgater keepalive clock select in power down pointer
    ///< 0 s state
    ///< AccessType="RW" BitOffset="6" ResetValue="0x3"
    uint32_t RXRPUCTL_CLKGATER_KEEPALIVE_UP_CFG : 2;
    ///< RPU timer for clkgater keepalive clock select in power upconfig
    ///< AccessType="RW" BitOffset="9" ResetValue="0x3"
    uint32_t RXRPUCTL_CLKGATER_KEEPALIVE_UP_PTR0_Q : 4;
    ///< RPU timer for clkgater keepalive clock select in power up pointer
    ///< 0 q state
    ///< AccessType="RW" BitOffset="11" ResetValue="0x7"
    uint32_t RXRPUCTL_CLKGATER_KEEPALIVE_UP_PTR0_S : 3;
    ///< RPU timer for clkgater keepalive clock select in power up pointer
    ///< 0 s state
    ///< AccessType="RW" BitOffset="15" ResetValue="0x3"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_rpu_event_cfg_5_reg_t;

#define PMA_RX_MGS_RPU_EVENT_CFG_5_DEFAULT (0x0001bee3U)
#define PMA_RX_MGS_RPU_EVENT_CFG_5_RD_MASK (0x0003ffffU)
#define PMA_RX_MGS_RPU_EVENT_CFG_5_WR_MASK (0x0003ffffU)


///< RPU timer for clkgater keepalive clock select in power down config
#define PMA_RX_MGS_RPU_EVENT_CFG_5_RXRPUCTL_CLKGATER_KEEPALIVE_DN_CFG_BF_OFF ( 0)
#define PMA_RX_MGS_RPU_EVENT_CFG_5_RXRPUCTL_CLKGATER_KEEPALIVE_DN_CFG_BF_WID ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_5_RXRPUCTL_CLKGATER_KEEPALIVE_DN_CFG_BF_MSK (0x00000003)
#define PMA_RX_MGS_RPU_EVENT_CFG_5_RXRPUCTL_CLKGATER_KEEPALIVE_DN_CFG_BF_DEF (0x00000003)

///< RPU timer for clkgater keepalive clock select in power down pointer
///< 0 q state
#define PMA_RX_MGS_RPU_EVENT_CFG_5_RXRPUCTL_CLKGATER_KEEPALIVE_DN_PTR0_Q_BF_OFF ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_5_RXRPUCTL_CLKGATER_KEEPALIVE_DN_PTR0_Q_BF_WID ( 4)
#define PMA_RX_MGS_RPU_EVENT_CFG_5_RXRPUCTL_CLKGATER_KEEPALIVE_DN_PTR0_Q_BF_MSK (0x0000003C)
#define PMA_RX_MGS_RPU_EVENT_CFG_5_RXRPUCTL_CLKGATER_KEEPALIVE_DN_PTR0_Q_BF_DEF (0x00000020)

///< RPU timer for clkgater keepalive clock select in power down pointer
///< 0 s state
#define PMA_RX_MGS_RPU_EVENT_CFG_5_RXRPUCTL_CLKGATER_KEEPALIVE_DN_PTR0_S_BF_OFF ( 6)
#define PMA_RX_MGS_RPU_EVENT_CFG_5_RXRPUCTL_CLKGATER_KEEPALIVE_DN_PTR0_S_BF_WID ( 3)
#define PMA_RX_MGS_RPU_EVENT_CFG_5_RXRPUCTL_CLKGATER_KEEPALIVE_DN_PTR0_S_BF_MSK (0x000001C0)
#define PMA_RX_MGS_RPU_EVENT_CFG_5_RXRPUCTL_CLKGATER_KEEPALIVE_DN_PTR0_S_BF_DEF (0x000000C0)

///< RPU timer for clkgater keepalive clock select in power upconfig
#define PMA_RX_MGS_RPU_EVENT_CFG_5_RXRPUCTL_CLKGATER_KEEPALIVE_UP_CFG_BF_OFF ( 9)
#define PMA_RX_MGS_RPU_EVENT_CFG_5_RXRPUCTL_CLKGATER_KEEPALIVE_UP_CFG_BF_WID ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_5_RXRPUCTL_CLKGATER_KEEPALIVE_UP_CFG_BF_MSK (0x00000600)
#define PMA_RX_MGS_RPU_EVENT_CFG_5_RXRPUCTL_CLKGATER_KEEPALIVE_UP_CFG_BF_DEF (0x00000600)

///< RPU timer for clkgater keepalive clock select in power up pointer
///< 0 q state
#define PMA_RX_MGS_RPU_EVENT_CFG_5_RXRPUCTL_CLKGATER_KEEPALIVE_UP_PTR0_Q_BF_OFF (11)
#define PMA_RX_MGS_RPU_EVENT_CFG_5_RXRPUCTL_CLKGATER_KEEPALIVE_UP_PTR0_Q_BF_WID ( 4)
#define PMA_RX_MGS_RPU_EVENT_CFG_5_RXRPUCTL_CLKGATER_KEEPALIVE_UP_PTR0_Q_BF_MSK (0x00007800)
#define PMA_RX_MGS_RPU_EVENT_CFG_5_RXRPUCTL_CLKGATER_KEEPALIVE_UP_PTR0_Q_BF_DEF (0x00003800)

///< RPU timer for clkgater keepalive clock select in power up pointer
///< 0 s state
#define PMA_RX_MGS_RPU_EVENT_CFG_5_RXRPUCTL_CLKGATER_KEEPALIVE_UP_PTR0_S_BF_OFF (15)
#define PMA_RX_MGS_RPU_EVENT_CFG_5_RXRPUCTL_CLKGATER_KEEPALIVE_UP_PTR0_S_BF_WID ( 3)
#define PMA_RX_MGS_RPU_EVENT_CFG_5_RXRPUCTL_CLKGATER_KEEPALIVE_UP_PTR0_S_BF_MSK (0x00038000)
#define PMA_RX_MGS_RPU_EVENT_CFG_5_RXRPUCTL_CLKGATER_KEEPALIVE_UP_PTR0_S_BF_DEF (0x00018000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_RPU_EVENT_CFG_6 register description at address offset 0x124
  *
  * Register default value:        0x0001BEE3
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_rpu_event_cfg_6
  * Rx RPU event config
  */

typedef union {
  struct {
    uint32_t RXRPUCTL_S2P_KEEPALIVE_DN_CFG : 2;
    ///< RPU timer for s2p keepalive clock select in power down config
    ///< AccessType="RW" BitOffset="0" ResetValue="0x3"
    uint32_t RXRPUCTL_S2P_KEEPALIVE_DN_PTR0_Q : 4;
    ///< RPU timer for s2p keepalive clock select in power down pointer 0 q
    ///< state
    ///< AccessType="RW" BitOffset="2" ResetValue="0x8"
    uint32_t RXRPUCTL_S2P_KEEPALIVE_DN_PTR0_S : 3;
    ///< RPU timer for s2p keepalive clock select in power down pointer 0 s
    ///< state
    ///< AccessType="RW" BitOffset="6" ResetValue="0x3"
    uint32_t RXRPUCTL_S2P_KEEPALIVE_UP_CFG : 2;
    ///< RPU timer for s2p keepalive clock select in power upconfig
    ///< AccessType="RW" BitOffset="9" ResetValue="0x3"
    uint32_t RXRPUCTL_S2P_KEEPALIVE_UP_PTR0_Q : 4;
    ///< RPU timer for s2p keepalive clock select in power up pointer 0 q state
    ///< AccessType="RW" BitOffset="11" ResetValue="0x7"
    uint32_t RXRPUCTL_S2P_KEEPALIVE_UP_PTR0_S : 3;
    ///< RPU timer for s2p keepalive clock select in power up pointer 0 s state
    ///< AccessType="RW" BitOffset="15" ResetValue="0x3"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_rpu_event_cfg_6_reg_t;

#define PMA_RX_MGS_RPU_EVENT_CFG_6_DEFAULT (0x0001bee3U)
#define PMA_RX_MGS_RPU_EVENT_CFG_6_RD_MASK (0x0003ffffU)
#define PMA_RX_MGS_RPU_EVENT_CFG_6_WR_MASK (0x0003ffffU)


///< RPU timer for s2p keepalive clock select in power down config
#define PMA_RX_MGS_RPU_EVENT_CFG_6_RXRPUCTL_S2P_KEEPALIVE_DN_CFG_BF_OFF ( 0)
#define PMA_RX_MGS_RPU_EVENT_CFG_6_RXRPUCTL_S2P_KEEPALIVE_DN_CFG_BF_WID ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_6_RXRPUCTL_S2P_KEEPALIVE_DN_CFG_BF_MSK (0x00000003)
#define PMA_RX_MGS_RPU_EVENT_CFG_6_RXRPUCTL_S2P_KEEPALIVE_DN_CFG_BF_DEF (0x00000003)

///< RPU timer for s2p keepalive clock select in power down pointer 0 q
///< state
#define PMA_RX_MGS_RPU_EVENT_CFG_6_RXRPUCTL_S2P_KEEPALIVE_DN_PTR0_Q_BF_OFF ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_6_RXRPUCTL_S2P_KEEPALIVE_DN_PTR0_Q_BF_WID ( 4)
#define PMA_RX_MGS_RPU_EVENT_CFG_6_RXRPUCTL_S2P_KEEPALIVE_DN_PTR0_Q_BF_MSK (0x0000003C)
#define PMA_RX_MGS_RPU_EVENT_CFG_6_RXRPUCTL_S2P_KEEPALIVE_DN_PTR0_Q_BF_DEF (0x00000020)

///< RPU timer for s2p keepalive clock select in power down pointer 0 s
///< state
#define PMA_RX_MGS_RPU_EVENT_CFG_6_RXRPUCTL_S2P_KEEPALIVE_DN_PTR0_S_BF_OFF ( 6)
#define PMA_RX_MGS_RPU_EVENT_CFG_6_RXRPUCTL_S2P_KEEPALIVE_DN_PTR0_S_BF_WID ( 3)
#define PMA_RX_MGS_RPU_EVENT_CFG_6_RXRPUCTL_S2P_KEEPALIVE_DN_PTR0_S_BF_MSK (0x000001C0)
#define PMA_RX_MGS_RPU_EVENT_CFG_6_RXRPUCTL_S2P_KEEPALIVE_DN_PTR0_S_BF_DEF (0x000000C0)

///< RPU timer for s2p keepalive clock select in power upconfig
#define PMA_RX_MGS_RPU_EVENT_CFG_6_RXRPUCTL_S2P_KEEPALIVE_UP_CFG_BF_OFF ( 9)
#define PMA_RX_MGS_RPU_EVENT_CFG_6_RXRPUCTL_S2P_KEEPALIVE_UP_CFG_BF_WID ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_6_RXRPUCTL_S2P_KEEPALIVE_UP_CFG_BF_MSK (0x00000600)
#define PMA_RX_MGS_RPU_EVENT_CFG_6_RXRPUCTL_S2P_KEEPALIVE_UP_CFG_BF_DEF (0x00000600)

///< RPU timer for s2p keepalive clock select in power up pointer 0 q state
#define PMA_RX_MGS_RPU_EVENT_CFG_6_RXRPUCTL_S2P_KEEPALIVE_UP_PTR0_Q_BF_OFF (11)
#define PMA_RX_MGS_RPU_EVENT_CFG_6_RXRPUCTL_S2P_KEEPALIVE_UP_PTR0_Q_BF_WID ( 4)
#define PMA_RX_MGS_RPU_EVENT_CFG_6_RXRPUCTL_S2P_KEEPALIVE_UP_PTR0_Q_BF_MSK (0x00007800)
#define PMA_RX_MGS_RPU_EVENT_CFG_6_RXRPUCTL_S2P_KEEPALIVE_UP_PTR0_Q_BF_DEF (0x00003800)

///< RPU timer for s2p keepalive clock select in power up pointer 0 s state
#define PMA_RX_MGS_RPU_EVENT_CFG_6_RXRPUCTL_S2P_KEEPALIVE_UP_PTR0_S_BF_OFF (15)
#define PMA_RX_MGS_RPU_EVENT_CFG_6_RXRPUCTL_S2P_KEEPALIVE_UP_PTR0_S_BF_WID ( 3)
#define PMA_RX_MGS_RPU_EVENT_CFG_6_RXRPUCTL_S2P_KEEPALIVE_UP_PTR0_S_BF_MSK (0x00038000)
#define PMA_RX_MGS_RPU_EVENT_CFG_6_RXRPUCTL_S2P_KEEPALIVE_UP_PTR0_S_BF_DEF (0x00018000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_RPU_EVENT_CFG_7 register description at address offset 0x128
  *
  * Register default value:        0x0001BEE3
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_rpu_event_cfg_7
  * Rx RPU event config
  */

typedef union {
  struct {
    uint32_t RXRPUCTL_WORD_KEEPALIVE_DN_CFG : 2;
    ///< RPU timer for word keepalive clock select in power down config
    ///< AccessType="RW" BitOffset="0" ResetValue="0x3"
    uint32_t RXRPUCTL_WORD_KEEPALIVE_DN_PTR0_Q : 4;
    ///< RPU timer for word keepalive clock select in power down pointer 0
    ///< q state
    ///< AccessType="RW" BitOffset="2" ResetValue="0x8"
    uint32_t RXRPUCTL_WORD_KEEPALIVE_DN_PTR0_S : 3;
    ///< RPU timer for word keepalive clock select in power down pointer 0
    ///< s state
    ///< AccessType="RW" BitOffset="6" ResetValue="0x3"
    uint32_t RXRPUCTL_WORD_KEEPALIVE_UP_CFG : 2;
    ///< RPU timer for word keepalive clock select in power upconfig
    ///< AccessType="RW" BitOffset="9" ResetValue="0x3"
    uint32_t RXRPUCTL_WORD_KEEPALIVE_UP_PTR0_Q : 4;
    ///< RPU timer for word keepalive clock select in power up pointer 0 q
    ///< state
    ///< AccessType="RW" BitOffset="11" ResetValue="0x7"
    uint32_t RXRPUCTL_WORD_KEEPALIVE_UP_PTR0_S : 3;
    ///< RPU timer for word keepalive clock select in power up pointer 0 s
    ///< state
    ///< AccessType="RW" BitOffset="15" ResetValue="0x3"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_rpu_event_cfg_7_reg_t;

#define PMA_RX_MGS_RPU_EVENT_CFG_7_DEFAULT (0x0001bee3U)
#define PMA_RX_MGS_RPU_EVENT_CFG_7_RD_MASK (0x0003ffffU)
#define PMA_RX_MGS_RPU_EVENT_CFG_7_WR_MASK (0x0003ffffU)


///< RPU timer for word keepalive clock select in power down config
#define PMA_RX_MGS_RPU_EVENT_CFG_7_RXRPUCTL_WORD_KEEPALIVE_DN_CFG_BF_OFF ( 0)
#define PMA_RX_MGS_RPU_EVENT_CFG_7_RXRPUCTL_WORD_KEEPALIVE_DN_CFG_BF_WID ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_7_RXRPUCTL_WORD_KEEPALIVE_DN_CFG_BF_MSK (0x00000003)
#define PMA_RX_MGS_RPU_EVENT_CFG_7_RXRPUCTL_WORD_KEEPALIVE_DN_CFG_BF_DEF (0x00000003)

///< RPU timer for word keepalive clock select in power down pointer 0
///< q state
#define PMA_RX_MGS_RPU_EVENT_CFG_7_RXRPUCTL_WORD_KEEPALIVE_DN_PTR0_Q_BF_OFF ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_7_RXRPUCTL_WORD_KEEPALIVE_DN_PTR0_Q_BF_WID ( 4)
#define PMA_RX_MGS_RPU_EVENT_CFG_7_RXRPUCTL_WORD_KEEPALIVE_DN_PTR0_Q_BF_MSK (0x0000003C)
#define PMA_RX_MGS_RPU_EVENT_CFG_7_RXRPUCTL_WORD_KEEPALIVE_DN_PTR0_Q_BF_DEF (0x00000020)

///< RPU timer for word keepalive clock select in power down pointer 0
///< s state
#define PMA_RX_MGS_RPU_EVENT_CFG_7_RXRPUCTL_WORD_KEEPALIVE_DN_PTR0_S_BF_OFF ( 6)
#define PMA_RX_MGS_RPU_EVENT_CFG_7_RXRPUCTL_WORD_KEEPALIVE_DN_PTR0_S_BF_WID ( 3)
#define PMA_RX_MGS_RPU_EVENT_CFG_7_RXRPUCTL_WORD_KEEPALIVE_DN_PTR0_S_BF_MSK (0x000001C0)
#define PMA_RX_MGS_RPU_EVENT_CFG_7_RXRPUCTL_WORD_KEEPALIVE_DN_PTR0_S_BF_DEF (0x000000C0)

///< RPU timer for word keepalive clock select in power upconfig
#define PMA_RX_MGS_RPU_EVENT_CFG_7_RXRPUCTL_WORD_KEEPALIVE_UP_CFG_BF_OFF ( 9)
#define PMA_RX_MGS_RPU_EVENT_CFG_7_RXRPUCTL_WORD_KEEPALIVE_UP_CFG_BF_WID ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_7_RXRPUCTL_WORD_KEEPALIVE_UP_CFG_BF_MSK (0x00000600)
#define PMA_RX_MGS_RPU_EVENT_CFG_7_RXRPUCTL_WORD_KEEPALIVE_UP_CFG_BF_DEF (0x00000600)

///< RPU timer for word keepalive clock select in power up pointer 0 q
///< state
#define PMA_RX_MGS_RPU_EVENT_CFG_7_RXRPUCTL_WORD_KEEPALIVE_UP_PTR0_Q_BF_OFF (11)
#define PMA_RX_MGS_RPU_EVENT_CFG_7_RXRPUCTL_WORD_KEEPALIVE_UP_PTR0_Q_BF_WID ( 4)
#define PMA_RX_MGS_RPU_EVENT_CFG_7_RXRPUCTL_WORD_KEEPALIVE_UP_PTR0_Q_BF_MSK (0x00007800)
#define PMA_RX_MGS_RPU_EVENT_CFG_7_RXRPUCTL_WORD_KEEPALIVE_UP_PTR0_Q_BF_DEF (0x00003800)

///< RPU timer for word keepalive clock select in power up pointer 0 s
///< state
#define PMA_RX_MGS_RPU_EVENT_CFG_7_RXRPUCTL_WORD_KEEPALIVE_UP_PTR0_S_BF_OFF (15)
#define PMA_RX_MGS_RPU_EVENT_CFG_7_RXRPUCTL_WORD_KEEPALIVE_UP_PTR0_S_BF_WID ( 3)
#define PMA_RX_MGS_RPU_EVENT_CFG_7_RXRPUCTL_WORD_KEEPALIVE_UP_PTR0_S_BF_MSK (0x00038000)
#define PMA_RX_MGS_RPU_EVENT_CFG_7_RXRPUCTL_WORD_KEEPALIVE_UP_PTR0_S_BF_DEF (0x00018000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_RPU_EVENT_CFG_8 register description at address offset 0x12c
  *
  * Register default value:        0x0001BEE3
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_rpu_event_cfg_8
  * Rx RPU event config
  */

typedef union {
  struct {
    uint32_t RXRPUCTL_XING_S2P_TO_WORD_EN_DN_CFG : 2;
    ///< RPU timer for Xing between s2p to word enable clock select in power
    ///< down config
    ///< AccessType="RW" BitOffset="0" ResetValue="0x3"
    uint32_t RXRPUCTL_XING_S2P_TO_WORD_EN_DN_PTR0_Q : 4;
    ///< RPU timer for Xing between s2p to word enable clock select in power
    ///< down pointer 0 q state
    ///< AccessType="RW" BitOffset="2" ResetValue="0x8"
    uint32_t RXRPUCTL_XING_S2P_TO_WORD_EN_DN_PTR0_S : 3;
    ///< RPU timer for Xing between s2p to word enable clock select in power
    ///< down pointer 0 s state
    ///< AccessType="RW" BitOffset="6" ResetValue="0x3"
    uint32_t RXRPUCTL_XING_S2P_TO_WORD_EN_UP_CFG : 2;
    ///< RPU timer for Xing between s2p to word enable clock select in power
    ///< upconfig
    ///< AccessType="RW" BitOffset="9" ResetValue="0x3"
    uint32_t RXRPUCTL_XING_S2P_TO_WORD_EN_UP_PTR0_Q : 4;
    ///< RPU timer for Xing between s2p to word enable clock select in power
    ///< up pointer 0 q state
    ///< AccessType="RW" BitOffset="11" ResetValue="0x7"
    uint32_t RXRPUCTL_XING_S2P_TO_WORD_EN_UP_PTR0_S : 3;
    ///< RPU timer for Xing between s2p to word enable clock select in power
    ///< up pointer 0 s state
    ///< AccessType="RW" BitOffset="15" ResetValue="0x3"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_rpu_event_cfg_8_reg_t;

#define PMA_RX_MGS_RPU_EVENT_CFG_8_DEFAULT (0x0001bee3U)
#define PMA_RX_MGS_RPU_EVENT_CFG_8_RD_MASK (0x0003ffffU)
#define PMA_RX_MGS_RPU_EVENT_CFG_8_WR_MASK (0x0003ffffU)


///< RPU timer for Xing between s2p to word enable clock select in power
///< down config
#define PMA_RX_MGS_RPU_EVENT_CFG_8_RXRPUCTL_XING_S2P_TO_WORD_EN_DN_CFG_BF_OFF ( 0)
#define PMA_RX_MGS_RPU_EVENT_CFG_8_RXRPUCTL_XING_S2P_TO_WORD_EN_DN_CFG_BF_WID ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_8_RXRPUCTL_XING_S2P_TO_WORD_EN_DN_CFG_BF_MSK (0x00000003)
#define PMA_RX_MGS_RPU_EVENT_CFG_8_RXRPUCTL_XING_S2P_TO_WORD_EN_DN_CFG_BF_DEF (0x00000003)

///< RPU timer for Xing between s2p to word enable clock select in power
///< down pointer 0 q state
#define PMA_RX_MGS_RPU_EVENT_CFG_8_RXRPUCTL_XING_S2P_TO_WORD_EN_DN_PTR0_Q_BF_OFF ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_8_RXRPUCTL_XING_S2P_TO_WORD_EN_DN_PTR0_Q_BF_WID ( 4)
#define PMA_RX_MGS_RPU_EVENT_CFG_8_RXRPUCTL_XING_S2P_TO_WORD_EN_DN_PTR0_Q_BF_MSK (0x0000003C)
#define PMA_RX_MGS_RPU_EVENT_CFG_8_RXRPUCTL_XING_S2P_TO_WORD_EN_DN_PTR0_Q_BF_DEF (0x00000020)

///< RPU timer for Xing between s2p to word enable clock select in power
///< down pointer 0 s state
#define PMA_RX_MGS_RPU_EVENT_CFG_8_RXRPUCTL_XING_S2P_TO_WORD_EN_DN_PTR0_S_BF_OFF ( 6)
#define PMA_RX_MGS_RPU_EVENT_CFG_8_RXRPUCTL_XING_S2P_TO_WORD_EN_DN_PTR0_S_BF_WID ( 3)
#define PMA_RX_MGS_RPU_EVENT_CFG_8_RXRPUCTL_XING_S2P_TO_WORD_EN_DN_PTR0_S_BF_MSK (0x000001C0)
#define PMA_RX_MGS_RPU_EVENT_CFG_8_RXRPUCTL_XING_S2P_TO_WORD_EN_DN_PTR0_S_BF_DEF (0x000000C0)

///< RPU timer for Xing between s2p to word enable clock select in power
///< upconfig
#define PMA_RX_MGS_RPU_EVENT_CFG_8_RXRPUCTL_XING_S2P_TO_WORD_EN_UP_CFG_BF_OFF ( 9)
#define PMA_RX_MGS_RPU_EVENT_CFG_8_RXRPUCTL_XING_S2P_TO_WORD_EN_UP_CFG_BF_WID ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_8_RXRPUCTL_XING_S2P_TO_WORD_EN_UP_CFG_BF_MSK (0x00000600)
#define PMA_RX_MGS_RPU_EVENT_CFG_8_RXRPUCTL_XING_S2P_TO_WORD_EN_UP_CFG_BF_DEF (0x00000600)

///< RPU timer for Xing between s2p to word enable clock select in power
///< up pointer 0 q state
#define PMA_RX_MGS_RPU_EVENT_CFG_8_RXRPUCTL_XING_S2P_TO_WORD_EN_UP_PTR0_Q_BF_OFF (11)
#define PMA_RX_MGS_RPU_EVENT_CFG_8_RXRPUCTL_XING_S2P_TO_WORD_EN_UP_PTR0_Q_BF_WID ( 4)
#define PMA_RX_MGS_RPU_EVENT_CFG_8_RXRPUCTL_XING_S2P_TO_WORD_EN_UP_PTR0_Q_BF_MSK (0x00007800)
#define PMA_RX_MGS_RPU_EVENT_CFG_8_RXRPUCTL_XING_S2P_TO_WORD_EN_UP_PTR0_Q_BF_DEF (0x00003800)

///< RPU timer for Xing between s2p to word enable clock select in power
///< up pointer 0 s state
#define PMA_RX_MGS_RPU_EVENT_CFG_8_RXRPUCTL_XING_S2P_TO_WORD_EN_UP_PTR0_S_BF_OFF (15)
#define PMA_RX_MGS_RPU_EVENT_CFG_8_RXRPUCTL_XING_S2P_TO_WORD_EN_UP_PTR0_S_BF_WID ( 3)
#define PMA_RX_MGS_RPU_EVENT_CFG_8_RXRPUCTL_XING_S2P_TO_WORD_EN_UP_PTR0_S_BF_MSK (0x00038000)
#define PMA_RX_MGS_RPU_EVENT_CFG_8_RXRPUCTL_XING_S2P_TO_WORD_EN_UP_PTR0_S_BF_DEF (0x00018000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_RPU_EVENT_CFG_9 register description at address offset 0x130
  *
  * Register default value:        0x0001C6E3
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_rpu_event_cfg_9
  * Rx RPU event config
  */

typedef union {
  struct {
    uint32_t RXRPUCTL_POSTDIV_KEEPALIVE_DN_CFG : 2;
    ///< RPU timer for keepalive clock select in power down config
    ///< AccessType="RW" BitOffset="0" ResetValue="0x3"
    uint32_t RXRPUCTL_POSTDIV_KEEPALIVE_DN_PTR0_Q : 4;
    ///< RPU timer for keepalive clock select in power down pointer 0 q state
    ///< AccessType="RW" BitOffset="2" ResetValue="0x8"
    uint32_t RXRPUCTL_POSTDIV_KEEPALIVE_DN_PTR0_S : 3;
    ///< RPU timer for keepalive clock select in power down pointer 0 s state
    ///< AccessType="RW" BitOffset="6" ResetValue="0x3"
    uint32_t RXRPUCTL_POSTDIV_KEEPALIVE_UP_CFG : 2;
    ///< RPU timer for keepalive clock select in power upconfig
    ///< AccessType="RW" BitOffset="9" ResetValue="0x3"
    uint32_t RXRPUCTL_POSTDIV_KEEPALIVE_UP_PTR0_Q : 4;
    ///< RPU timer for keepalive clock select in power up pointer 0 q state
    ///< AccessType="RW" BitOffset="11" ResetValue="0x8"
    uint32_t RXRPUCTL_POSTDIV_KEEPALIVE_UP_PTR0_S : 3;
    ///< RPU timer for keepalive clock select in power up pointer 0 s state
    ///< AccessType="RW" BitOffset="15" ResetValue="0x3"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_rpu_event_cfg_9_reg_t;

#define PMA_RX_MGS_RPU_EVENT_CFG_9_DEFAULT (0x0001c6e3U)
#define PMA_RX_MGS_RPU_EVENT_CFG_9_RD_MASK (0x0003ffffU)
#define PMA_RX_MGS_RPU_EVENT_CFG_9_WR_MASK (0x0003ffffU)


///< RPU timer for keepalive clock select in power down config
#define PMA_RX_MGS_RPU_EVENT_CFG_9_RXRPUCTL_POSTDIV_KEEPALIVE_DN_CFG_BF_OFF ( 0)
#define PMA_RX_MGS_RPU_EVENT_CFG_9_RXRPUCTL_POSTDIV_KEEPALIVE_DN_CFG_BF_WID ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_9_RXRPUCTL_POSTDIV_KEEPALIVE_DN_CFG_BF_MSK (0x00000003)
#define PMA_RX_MGS_RPU_EVENT_CFG_9_RXRPUCTL_POSTDIV_KEEPALIVE_DN_CFG_BF_DEF (0x00000003)

///< RPU timer for keepalive clock select in power down pointer 0 q state
#define PMA_RX_MGS_RPU_EVENT_CFG_9_RXRPUCTL_POSTDIV_KEEPALIVE_DN_PTR0_Q_BF_OFF ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_9_RXRPUCTL_POSTDIV_KEEPALIVE_DN_PTR0_Q_BF_WID ( 4)
#define PMA_RX_MGS_RPU_EVENT_CFG_9_RXRPUCTL_POSTDIV_KEEPALIVE_DN_PTR0_Q_BF_MSK (0x0000003C)
#define PMA_RX_MGS_RPU_EVENT_CFG_9_RXRPUCTL_POSTDIV_KEEPALIVE_DN_PTR0_Q_BF_DEF (0x00000020)

///< RPU timer for keepalive clock select in power down pointer 0 s state
#define PMA_RX_MGS_RPU_EVENT_CFG_9_RXRPUCTL_POSTDIV_KEEPALIVE_DN_PTR0_S_BF_OFF ( 6)
#define PMA_RX_MGS_RPU_EVENT_CFG_9_RXRPUCTL_POSTDIV_KEEPALIVE_DN_PTR0_S_BF_WID ( 3)
#define PMA_RX_MGS_RPU_EVENT_CFG_9_RXRPUCTL_POSTDIV_KEEPALIVE_DN_PTR0_S_BF_MSK (0x000001C0)
#define PMA_RX_MGS_RPU_EVENT_CFG_9_RXRPUCTL_POSTDIV_KEEPALIVE_DN_PTR0_S_BF_DEF (0x000000C0)

///< RPU timer for keepalive clock select in power upconfig
#define PMA_RX_MGS_RPU_EVENT_CFG_9_RXRPUCTL_POSTDIV_KEEPALIVE_UP_CFG_BF_OFF ( 9)
#define PMA_RX_MGS_RPU_EVENT_CFG_9_RXRPUCTL_POSTDIV_KEEPALIVE_UP_CFG_BF_WID ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_9_RXRPUCTL_POSTDIV_KEEPALIVE_UP_CFG_BF_MSK (0x00000600)
#define PMA_RX_MGS_RPU_EVENT_CFG_9_RXRPUCTL_POSTDIV_KEEPALIVE_UP_CFG_BF_DEF (0x00000600)

///< RPU timer for keepalive clock select in power up pointer 0 q state
#define PMA_RX_MGS_RPU_EVENT_CFG_9_RXRPUCTL_POSTDIV_KEEPALIVE_UP_PTR0_Q_BF_OFF (11)
#define PMA_RX_MGS_RPU_EVENT_CFG_9_RXRPUCTL_POSTDIV_KEEPALIVE_UP_PTR0_Q_BF_WID ( 4)
#define PMA_RX_MGS_RPU_EVENT_CFG_9_RXRPUCTL_POSTDIV_KEEPALIVE_UP_PTR0_Q_BF_MSK (0x00007800)
#define PMA_RX_MGS_RPU_EVENT_CFG_9_RXRPUCTL_POSTDIV_KEEPALIVE_UP_PTR0_Q_BF_DEF (0x00004000)

///< RPU timer for keepalive clock select in power up pointer 0 s state
#define PMA_RX_MGS_RPU_EVENT_CFG_9_RXRPUCTL_POSTDIV_KEEPALIVE_UP_PTR0_S_BF_OFF (15)
#define PMA_RX_MGS_RPU_EVENT_CFG_9_RXRPUCTL_POSTDIV_KEEPALIVE_UP_PTR0_S_BF_WID ( 3)
#define PMA_RX_MGS_RPU_EVENT_CFG_9_RXRPUCTL_POSTDIV_KEEPALIVE_UP_PTR0_S_BF_MSK (0x00038000)
#define PMA_RX_MGS_RPU_EVENT_CFG_9_RXRPUCTL_POSTDIV_KEEPALIVE_UP_PTR0_S_BF_DEF (0x00018000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_RPU_EVENT_CFG_10 register description at address offset 0x134
  *
  * Register default value:        0x0001C6E3
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_rpu_event_cfg_10
  * Rx RPU event config
  */

typedef union {
  struct {
    uint32_t RXRPUCTL_AUTONEG_KEEPALIVE_DN_CFG : 2;
    ///< RPU timer for keepalive clock select in power down config
    ///< AccessType="RW" BitOffset="0" ResetValue="0x3"
    uint32_t RXRPUCTL_AUTONEG_KEEPALIVE_DN_PTR0_Q : 4;
    ///< RPU timer for keepalive clock select in power down pointer 0 q state
    ///< AccessType="RW" BitOffset="2" ResetValue="0x8"
    uint32_t RXRPUCTL_AUTONEG_KEEPALIVE_DN_PTR0_S : 3;
    ///< RPU timer for keepalive clock select in power down pointer 0 s state
    ///< AccessType="RW" BitOffset="6" ResetValue="0x3"
    uint32_t RXRPUCTL_AUTONEG_KEEPALIVE_UP_CFG : 2;
    ///< RPU timer for keepalive clock select in power upconfig
    ///< AccessType="RW" BitOffset="9" ResetValue="0x3"
    uint32_t RXRPUCTL_AUTONEG_KEEPALIVE_UP_PTR0_Q : 4;
    ///< RPU timer for keepalive clock select in power up pointer 0 q state
    ///< AccessType="RW" BitOffset="11" ResetValue="0x8"
    uint32_t RXRPUCTL_AUTONEG_KEEPALIVE_UP_PTR0_S : 3;
    ///< RPU timer for keepalive clock select in power up pointer 0 s state
    ///< AccessType="RW" BitOffset="15" ResetValue="0x3"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_rpu_event_cfg_10_reg_t;

#define PMA_RX_MGS_RPU_EVENT_CFG_10_DEFAULT (0x0001c6e3U)
#define PMA_RX_MGS_RPU_EVENT_CFG_10_RD_MASK (0x0003ffffU)
#define PMA_RX_MGS_RPU_EVENT_CFG_10_WR_MASK (0x0003ffffU)


///< RPU timer for keepalive clock select in power down config
#define PMA_RX_MGS_RPU_EVENT_CFG_10_RXRPUCTL_AUTONEG_KEEPALIVE_DN_CFG_BF_OFF ( 0)
#define PMA_RX_MGS_RPU_EVENT_CFG_10_RXRPUCTL_AUTONEG_KEEPALIVE_DN_CFG_BF_WID ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_10_RXRPUCTL_AUTONEG_KEEPALIVE_DN_CFG_BF_MSK (0x00000003)
#define PMA_RX_MGS_RPU_EVENT_CFG_10_RXRPUCTL_AUTONEG_KEEPALIVE_DN_CFG_BF_DEF (0x00000003)

///< RPU timer for keepalive clock select in power down pointer 0 q state
#define PMA_RX_MGS_RPU_EVENT_CFG_10_RXRPUCTL_AUTONEG_KEEPALIVE_DN_PTR0_Q_BF_OFF ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_10_RXRPUCTL_AUTONEG_KEEPALIVE_DN_PTR0_Q_BF_WID ( 4)
#define PMA_RX_MGS_RPU_EVENT_CFG_10_RXRPUCTL_AUTONEG_KEEPALIVE_DN_PTR0_Q_BF_MSK (0x0000003C)
#define PMA_RX_MGS_RPU_EVENT_CFG_10_RXRPUCTL_AUTONEG_KEEPALIVE_DN_PTR0_Q_BF_DEF (0x00000020)

///< RPU timer for keepalive clock select in power down pointer 0 s state
#define PMA_RX_MGS_RPU_EVENT_CFG_10_RXRPUCTL_AUTONEG_KEEPALIVE_DN_PTR0_S_BF_OFF ( 6)
#define PMA_RX_MGS_RPU_EVENT_CFG_10_RXRPUCTL_AUTONEG_KEEPALIVE_DN_PTR0_S_BF_WID ( 3)
#define PMA_RX_MGS_RPU_EVENT_CFG_10_RXRPUCTL_AUTONEG_KEEPALIVE_DN_PTR0_S_BF_MSK (0x000001C0)
#define PMA_RX_MGS_RPU_EVENT_CFG_10_RXRPUCTL_AUTONEG_KEEPALIVE_DN_PTR0_S_BF_DEF (0x000000C0)

///< RPU timer for keepalive clock select in power upconfig
#define PMA_RX_MGS_RPU_EVENT_CFG_10_RXRPUCTL_AUTONEG_KEEPALIVE_UP_CFG_BF_OFF ( 9)
#define PMA_RX_MGS_RPU_EVENT_CFG_10_RXRPUCTL_AUTONEG_KEEPALIVE_UP_CFG_BF_WID ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_10_RXRPUCTL_AUTONEG_KEEPALIVE_UP_CFG_BF_MSK (0x00000600)
#define PMA_RX_MGS_RPU_EVENT_CFG_10_RXRPUCTL_AUTONEG_KEEPALIVE_UP_CFG_BF_DEF (0x00000600)

///< RPU timer for keepalive clock select in power up pointer 0 q state
#define PMA_RX_MGS_RPU_EVENT_CFG_10_RXRPUCTL_AUTONEG_KEEPALIVE_UP_PTR0_Q_BF_OFF (11)
#define PMA_RX_MGS_RPU_EVENT_CFG_10_RXRPUCTL_AUTONEG_KEEPALIVE_UP_PTR0_Q_BF_WID ( 4)
#define PMA_RX_MGS_RPU_EVENT_CFG_10_RXRPUCTL_AUTONEG_KEEPALIVE_UP_PTR0_Q_BF_MSK (0x00007800)
#define PMA_RX_MGS_RPU_EVENT_CFG_10_RXRPUCTL_AUTONEG_KEEPALIVE_UP_PTR0_Q_BF_DEF (0x00004000)

///< RPU timer for keepalive clock select in power up pointer 0 s state
#define PMA_RX_MGS_RPU_EVENT_CFG_10_RXRPUCTL_AUTONEG_KEEPALIVE_UP_PTR0_S_BF_OFF (15)
#define PMA_RX_MGS_RPU_EVENT_CFG_10_RXRPUCTL_AUTONEG_KEEPALIVE_UP_PTR0_S_BF_WID ( 3)
#define PMA_RX_MGS_RPU_EVENT_CFG_10_RXRPUCTL_AUTONEG_KEEPALIVE_UP_PTR0_S_BF_MSK (0x00038000)
#define PMA_RX_MGS_RPU_EVENT_CFG_10_RXRPUCTL_AUTONEG_KEEPALIVE_UP_PTR0_S_BF_DEF (0x00018000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_RPU_EVENT_CFG_11 register description at address offset 0x138
  *
  * Register default value:        0x0001BEE3
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_rpu_event_cfg_11
  * Rx RPU event config
  */

typedef union {
  struct {
    uint32_t RXRPUCTL_RX_TERMHIZ_EN_DN_CFG : 2;
    ///< RPU timer for rx termination enable in power down config
    ///< AccessType="RW" BitOffset="0" ResetValue="0x3"
    uint32_t RXRPUCTL_RX_TERMHIZ_EN_DN_PTR0_Q : 4;
    ///< RPU timer for rx termination enable in power down pointer 0 q state
    ///< AccessType="RW" BitOffset="2" ResetValue="0x8"
    uint32_t RXRPUCTL_RX_TERMHIZ_EN_DN_PTR0_S : 3;
    ///< RPU timer for rx termination enable in power down pointer 0 s state
    ///< AccessType="RW" BitOffset="6" ResetValue="0x3"
    uint32_t RXRPUCTL_RX_TERMHIZ_EN_UP_CFG : 2;
    ///< RPU timer for rx termination enable in power upconfig
    ///< AccessType="RW" BitOffset="9" ResetValue="0x3"
    uint32_t RXRPUCTL_RX_TERMHIZ_EN_UP_PTR0_Q : 4;
    ///< RPU timer for rx termination enable in power up pointer 0 q state
    ///< AccessType="RW" BitOffset="11" ResetValue="0x7"
    uint32_t RXRPUCTL_RX_TERMHIZ_EN_UP_PTR0_S : 3;
    ///< RPU timer for rx termination enable in power up pointer 0 s state
    ///< AccessType="RW" BitOffset="15" ResetValue="0x3"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_rpu_event_cfg_11_reg_t;

#define PMA_RX_MGS_RPU_EVENT_CFG_11_DEFAULT (0x0001bee3U)
#define PMA_RX_MGS_RPU_EVENT_CFG_11_RD_MASK (0x0003ffffU)
#define PMA_RX_MGS_RPU_EVENT_CFG_11_WR_MASK (0x0003ffffU)


///< RPU timer for rx termination enable in power down config
#define PMA_RX_MGS_RPU_EVENT_CFG_11_RXRPUCTL_RX_TERMHIZ_EN_DN_CFG_BF_OFF ( 0)
#define PMA_RX_MGS_RPU_EVENT_CFG_11_RXRPUCTL_RX_TERMHIZ_EN_DN_CFG_BF_WID ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_11_RXRPUCTL_RX_TERMHIZ_EN_DN_CFG_BF_MSK (0x00000003)
#define PMA_RX_MGS_RPU_EVENT_CFG_11_RXRPUCTL_RX_TERMHIZ_EN_DN_CFG_BF_DEF (0x00000003)

///< RPU timer for rx termination enable in power down pointer 0 q state
#define PMA_RX_MGS_RPU_EVENT_CFG_11_RXRPUCTL_RX_TERMHIZ_EN_DN_PTR0_Q_BF_OFF ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_11_RXRPUCTL_RX_TERMHIZ_EN_DN_PTR0_Q_BF_WID ( 4)
#define PMA_RX_MGS_RPU_EVENT_CFG_11_RXRPUCTL_RX_TERMHIZ_EN_DN_PTR0_Q_BF_MSK (0x0000003C)
#define PMA_RX_MGS_RPU_EVENT_CFG_11_RXRPUCTL_RX_TERMHIZ_EN_DN_PTR0_Q_BF_DEF (0x00000020)

///< RPU timer for rx termination enable in power down pointer 0 s state
#define PMA_RX_MGS_RPU_EVENT_CFG_11_RXRPUCTL_RX_TERMHIZ_EN_DN_PTR0_S_BF_OFF ( 6)
#define PMA_RX_MGS_RPU_EVENT_CFG_11_RXRPUCTL_RX_TERMHIZ_EN_DN_PTR0_S_BF_WID ( 3)
#define PMA_RX_MGS_RPU_EVENT_CFG_11_RXRPUCTL_RX_TERMHIZ_EN_DN_PTR0_S_BF_MSK (0x000001C0)
#define PMA_RX_MGS_RPU_EVENT_CFG_11_RXRPUCTL_RX_TERMHIZ_EN_DN_PTR0_S_BF_DEF (0x000000C0)

///< RPU timer for rx termination enable in power upconfig
#define PMA_RX_MGS_RPU_EVENT_CFG_11_RXRPUCTL_RX_TERMHIZ_EN_UP_CFG_BF_OFF ( 9)
#define PMA_RX_MGS_RPU_EVENT_CFG_11_RXRPUCTL_RX_TERMHIZ_EN_UP_CFG_BF_WID ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_11_RXRPUCTL_RX_TERMHIZ_EN_UP_CFG_BF_MSK (0x00000600)
#define PMA_RX_MGS_RPU_EVENT_CFG_11_RXRPUCTL_RX_TERMHIZ_EN_UP_CFG_BF_DEF (0x00000600)

///< RPU timer for rx termination enable in power up pointer 0 q state
#define PMA_RX_MGS_RPU_EVENT_CFG_11_RXRPUCTL_RX_TERMHIZ_EN_UP_PTR0_Q_BF_OFF (11)
#define PMA_RX_MGS_RPU_EVENT_CFG_11_RXRPUCTL_RX_TERMHIZ_EN_UP_PTR0_Q_BF_WID ( 4)
#define PMA_RX_MGS_RPU_EVENT_CFG_11_RXRPUCTL_RX_TERMHIZ_EN_UP_PTR0_Q_BF_MSK (0x00007800)
#define PMA_RX_MGS_RPU_EVENT_CFG_11_RXRPUCTL_RX_TERMHIZ_EN_UP_PTR0_Q_BF_DEF (0x00003800)

///< RPU timer for rx termination enable in power up pointer 0 s state
#define PMA_RX_MGS_RPU_EVENT_CFG_11_RXRPUCTL_RX_TERMHIZ_EN_UP_PTR0_S_BF_OFF (15)
#define PMA_RX_MGS_RPU_EVENT_CFG_11_RXRPUCTL_RX_TERMHIZ_EN_UP_PTR0_S_BF_WID ( 3)
#define PMA_RX_MGS_RPU_EVENT_CFG_11_RXRPUCTL_RX_TERMHIZ_EN_UP_PTR0_S_BF_MSK (0x00038000)
#define PMA_RX_MGS_RPU_EVENT_CFG_11_RXRPUCTL_RX_TERMHIZ_EN_UP_PTR0_S_BF_DEF (0x00018000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_RPU_EVENT_CFG_12 register description at address offset 0x13c
  *
  * Register default value:        0x0001BEE3
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_rpu_event_cfg_12
  * Rx RPU event config
  */

typedef union {
  struct {
    uint32_t RXRPUCTL_CAL_CLEAR_DN_CFG : 2;
    ///< RPU timer for calibration clear in power down config
    ///< AccessType="RW" BitOffset="0" ResetValue="0x3"
    uint32_t RXRPUCTL_CAL_CLEAR_DN_PTR0_Q : 4;
    ///< RPU timer for calibration clear in power down pointer 0 q state
    ///< AccessType="RW" BitOffset="2" ResetValue="0x8"
    uint32_t RXRPUCTL_CAL_CLEAR_DN_PTR0_S : 3;
    ///< RPU timer for calibration clear in power down pointer 0 s state
    ///< AccessType="RW" BitOffset="6" ResetValue="0x3"
    uint32_t RXRPUCTL_CAL_CLEAR_UP_CFG : 2;
    ///< RPU timer for calibration clear in power upconfig
    ///< AccessType="RW" BitOffset="9" ResetValue="0x3"
    uint32_t RXRPUCTL_CAL_CLEAR_UP_PTR0_Q : 4;
    ///< RPU timer for calibration clear in power up pointer 0 q state
    ///< AccessType="RW" BitOffset="11" ResetValue="0x7"
    uint32_t RXRPUCTL_CAL_CLEAR_UP_PTR0_S : 3;
    ///< RPU timer for calibration clear in power up pointer 0 s state
    ///< AccessType="RW" BitOffset="15" ResetValue="0x3"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_rpu_event_cfg_12_reg_t;

#define PMA_RX_MGS_RPU_EVENT_CFG_12_DEFAULT (0x0001bee3U)
#define PMA_RX_MGS_RPU_EVENT_CFG_12_RD_MASK (0x0003ffffU)
#define PMA_RX_MGS_RPU_EVENT_CFG_12_WR_MASK (0x0003ffffU)


///< RPU timer for calibration clear in power down config
#define PMA_RX_MGS_RPU_EVENT_CFG_12_RXRPUCTL_CAL_CLR_DN_CFG_BF_OFF ( 0)
#define PMA_RX_MGS_RPU_EVENT_CFG_12_RXRPUCTL_CAL_CLR_DN_CFG_BF_WID ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_12_RXRPUCTL_CAL_CLR_DN_CFG_BF_MSK (0x00000003)
#define PMA_RX_MGS_RPU_EVENT_CFG_12_RXRPUCTL_CAL_CLR_DN_CFG_BF_DEF (0x00000003)

///< RPU timer for calibration clear in power down pointer 0 q state
#define PMA_RX_MGS_RPU_EVENT_CFG_12_RXRPUCTL_CAL_CLR_DN_PTR0_Q_BF_OFF ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_12_RXRPUCTL_CAL_CLR_DN_PTR0_Q_BF_WID ( 4)
#define PMA_RX_MGS_RPU_EVENT_CFG_12_RXRPUCTL_CAL_CLR_DN_PTR0_Q_BF_MSK (0x0000003C)
#define PMA_RX_MGS_RPU_EVENT_CFG_12_RXRPUCTL_CAL_CLR_DN_PTR0_Q_BF_DEF (0x00000020)

///< RPU timer for calibration clear in power down pointer 0 s state
#define PMA_RX_MGS_RPU_EVENT_CFG_12_RXRPUCTL_CAL_CLR_DN_PTR0_S_BF_OFF ( 6)
#define PMA_RX_MGS_RPU_EVENT_CFG_12_RXRPUCTL_CAL_CLR_DN_PTR0_S_BF_WID ( 3)
#define PMA_RX_MGS_RPU_EVENT_CFG_12_RXRPUCTL_CAL_CLR_DN_PTR0_S_BF_MSK (0x000001C0)
#define PMA_RX_MGS_RPU_EVENT_CFG_12_RXRPUCTL_CAL_CLR_DN_PTR0_S_BF_DEF (0x000000C0)

///< RPU timer for calibration clear in power upconfig
#define PMA_RX_MGS_RPU_EVENT_CFG_12_RXRPUCTL_CAL_CLR_UP_CFG_BF_OFF ( 9)
#define PMA_RX_MGS_RPU_EVENT_CFG_12_RXRPUCTL_CAL_CLR_UP_CFG_BF_WID ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_12_RXRPUCTL_CAL_CLR_UP_CFG_BF_MSK (0x00000600)
#define PMA_RX_MGS_RPU_EVENT_CFG_12_RXRPUCTL_CAL_CLR_UP_CFG_BF_DEF (0x00000600)

///< RPU timer for calibration clear in power up pointer 0 q state
#define PMA_RX_MGS_RPU_EVENT_CFG_12_RXRPUCTL_CAL_CLR_UP_PTR0_Q_BF_OFF (11)
#define PMA_RX_MGS_RPU_EVENT_CFG_12_RXRPUCTL_CAL_CLR_UP_PTR0_Q_BF_WID ( 4)
#define PMA_RX_MGS_RPU_EVENT_CFG_12_RXRPUCTL_CAL_CLR_UP_PTR0_Q_BF_MSK (0x00007800)
#define PMA_RX_MGS_RPU_EVENT_CFG_12_RXRPUCTL_CAL_CLR_UP_PTR0_Q_BF_DEF (0x00003800)

///< RPU timer for calibration clear in power up pointer 0 s state
#define PMA_RX_MGS_RPU_EVENT_CFG_12_RXRPUCTL_CAL_CLR_UP_PTR0_S_BF_OFF (15)
#define PMA_RX_MGS_RPU_EVENT_CFG_12_RXRPUCTL_CAL_CLR_UP_PTR0_S_BF_WID ( 3)
#define PMA_RX_MGS_RPU_EVENT_CFG_12_RXRPUCTL_CAL_CLR_UP_PTR0_S_BF_MSK (0x00038000)
#define PMA_RX_MGS_RPU_EVENT_CFG_12_RXRPUCTL_CAL_CLR_UP_PTR0_S_BF_DEF (0x00018000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_RPU_EVENT_CFG_13 register description at address offset 0x140
  *
  * Register default value:        0x6EDF70E3
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_rpu_event_cfg_13
  * Rx RPU event config
  */

typedef union {
  struct {
    uint32_t RXRPUCTL_CAL_SQLCH_INIT_DN_CFG : 2;
    ///< RPU timer for squelch calibration initiation in power down config
    ///< AccessType="RW" BitOffset="0" ResetValue="0x3"
    uint32_t RXRPUCTL_CAL_SQLCH_INIT_DN_PTR0_Q : 4;
    ///< RPU timer for squelch calibration initiation in power down pointer
    ///< 0 q state
    ///< AccessType="RW" BitOffset="2" ResetValue="0x8"
    uint32_t RXRPUCTL_CAL_SQLCH_INIT_DN_PTR0_S : 3;
    ///< RPU timer for squelch calibration initiation in power down pointer
    ///< 0 s state
    ///< AccessType="RW" BitOffset="6" ResetValue="0x3"
    uint32_t RXRPUCTL_CAL_SQLCH_INIT_DN_PTR1_Q : 4;
    ///< RPU timer for squelch calibration initiation in power down pointer
    ///< 1 q state
    ///< AccessType="RW" BitOffset="9" ResetValue="0x8"
    uint32_t RXRPUCTL_CAL_SQLCH_INIT_DN_PTR1_S : 3;
    ///< RPU timer for squelch calibration initiation in power down pointer
    ///< 1 s state
    ///< AccessType="RW" BitOffset="13" ResetValue="0x3"
    uint32_t RXRPUCTL_CAL_SQLCH_INIT_UP_CFG : 2;
    ///< RPU timer for squelch calibration initiation in power upconfig
    ///< AccessType="RW" BitOffset="16" ResetValue="0x3"
    uint32_t RXRPUCTL_CAL_SQLCH_INIT_UP_PTR0_Q : 4;
    ///< RPU timer for squelch calibration initiation in power up pointer 0
    ///< q state
    ///< AccessType="RW" BitOffset="18" ResetValue="0x7"
    uint32_t RXRPUCTL_CAL_SQLCH_INIT_UP_PTR0_S : 3;
    ///< RPU timer for squelch calibration initiation in power up pointer 0
    ///< s state
    ///< AccessType="RW" BitOffset="22" ResetValue="0x3"
    uint32_t RXRPUCTL_CAL_SQLCH_INIT_UP_PTR1_Q : 4;
    ///< RPU timer for squelch calibration initiation in power up pointer 1
    ///< q state
    ///< AccessType="RW" BitOffset="25" ResetValue="0x7"
    uint32_t RXRPUCTL_CAL_SQLCH_INIT_UP_PTR1_S : 3;
    ///< RPU timer for squelch calibration initiation in power up pointer 1
    ///< s state
    ///< AccessType="RW" BitOffset="29" ResetValue="0x3"
  } ;
  uint32_t value;
} pma_rx_mgs_rpu_event_cfg_13_reg_t;

#define PMA_RX_MGS_RPU_EVENT_CFG_13_DEFAULT (0x6edf70e3U)
#define PMA_RX_MGS_RPU_EVENT_CFG_13_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_RPU_EVENT_CFG_13_WR_MASK (0xffffffffU)


///< RPU timer for squelch calibration initiation in power down config
#define PMA_RX_MGS_RPU_EVENT_CFG_13_RXRPUCTL_CAL_SQLCH_INIT_DN_CFG_BF_OFF ( 0)
#define PMA_RX_MGS_RPU_EVENT_CFG_13_RXRPUCTL_CAL_SQLCH_INIT_DN_CFG_BF_WID ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_13_RXRPUCTL_CAL_SQLCH_INIT_DN_CFG_BF_MSK (0x00000003)
#define PMA_RX_MGS_RPU_EVENT_CFG_13_RXRPUCTL_CAL_SQLCH_INIT_DN_CFG_BF_DEF (0x00000003)

///< RPU timer for squelch calibration initiation in power down pointer
///< 0 q state
#define PMA_RX_MGS_RPU_EVENT_CFG_13_RXRPUCTL_CAL_SQLCH_INIT_DN_PTR0_Q_BF_OFF ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_13_RXRPUCTL_CAL_SQLCH_INIT_DN_PTR0_Q_BF_WID ( 4)
#define PMA_RX_MGS_RPU_EVENT_CFG_13_RXRPUCTL_CAL_SQLCH_INIT_DN_PTR0_Q_BF_MSK (0x0000003C)
#define PMA_RX_MGS_RPU_EVENT_CFG_13_RXRPUCTL_CAL_SQLCH_INIT_DN_PTR0_Q_BF_DEF (0x00000020)

///< RPU timer for squelch calibration initiation in power down pointer
///< 0 s state
#define PMA_RX_MGS_RPU_EVENT_CFG_13_RXRPUCTL_CAL_SQLCH_INIT_DN_PTR0_S_BF_OFF ( 6)
#define PMA_RX_MGS_RPU_EVENT_CFG_13_RXRPUCTL_CAL_SQLCH_INIT_DN_PTR0_S_BF_WID ( 3)
#define PMA_RX_MGS_RPU_EVENT_CFG_13_RXRPUCTL_CAL_SQLCH_INIT_DN_PTR0_S_BF_MSK (0x000001C0)
#define PMA_RX_MGS_RPU_EVENT_CFG_13_RXRPUCTL_CAL_SQLCH_INIT_DN_PTR0_S_BF_DEF (0x000000C0)

///< RPU timer for squelch calibration initiation in power down pointer
///< 1 q state
#define PMA_RX_MGS_RPU_EVENT_CFG_13_RXRPUCTL_CAL_SQLCH_INIT_DN_PTR1_Q_BF_OFF ( 9)
#define PMA_RX_MGS_RPU_EVENT_CFG_13_RXRPUCTL_CAL_SQLCH_INIT_DN_PTR1_Q_BF_WID ( 4)
#define PMA_RX_MGS_RPU_EVENT_CFG_13_RXRPUCTL_CAL_SQLCH_INIT_DN_PTR1_Q_BF_MSK (0x00001E00)
#define PMA_RX_MGS_RPU_EVENT_CFG_13_RXRPUCTL_CAL_SQLCH_INIT_DN_PTR1_Q_BF_DEF (0x00001000)

///< RPU timer for squelch calibration initiation in power down pointer
///< 1 s state
#define PMA_RX_MGS_RPU_EVENT_CFG_13_RXRPUCTL_CAL_SQLCH_INIT_DN_PTR1_S_BF_OFF (13)
#define PMA_RX_MGS_RPU_EVENT_CFG_13_RXRPUCTL_CAL_SQLCH_INIT_DN_PTR1_S_BF_WID ( 3)
#define PMA_RX_MGS_RPU_EVENT_CFG_13_RXRPUCTL_CAL_SQLCH_INIT_DN_PTR1_S_BF_MSK (0x0000E000)
#define PMA_RX_MGS_RPU_EVENT_CFG_13_RXRPUCTL_CAL_SQLCH_INIT_DN_PTR1_S_BF_DEF (0x00006000)

///< RPU timer for squelch calibration initiation in power upconfig
#define PMA_RX_MGS_RPU_EVENT_CFG_13_RXRPUCTL_CAL_SQLCH_INIT_UP_CFG_BF_OFF (16)
#define PMA_RX_MGS_RPU_EVENT_CFG_13_RXRPUCTL_CAL_SQLCH_INIT_UP_CFG_BF_WID ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_13_RXRPUCTL_CAL_SQLCH_INIT_UP_CFG_BF_MSK (0x00030000)
#define PMA_RX_MGS_RPU_EVENT_CFG_13_RXRPUCTL_CAL_SQLCH_INIT_UP_CFG_BF_DEF (0x00030000)

///< RPU timer for squelch calibration initiation in power up pointer 0
///< q state
#define PMA_RX_MGS_RPU_EVENT_CFG_13_RXRPUCTL_CAL_SQLCH_INIT_UP_PTR0_Q_BF_OFF (18)
#define PMA_RX_MGS_RPU_EVENT_CFG_13_RXRPUCTL_CAL_SQLCH_INIT_UP_PTR0_Q_BF_WID ( 4)
#define PMA_RX_MGS_RPU_EVENT_CFG_13_RXRPUCTL_CAL_SQLCH_INIT_UP_PTR0_Q_BF_MSK (0x003C0000)
#define PMA_RX_MGS_RPU_EVENT_CFG_13_RXRPUCTL_CAL_SQLCH_INIT_UP_PTR0_Q_BF_DEF (0x001C0000)

///< RPU timer for squelch calibration initiation in power up pointer 0
///< s state
#define PMA_RX_MGS_RPU_EVENT_CFG_13_RXRPUCTL_CAL_SQLCH_INIT_UP_PTR0_S_BF_OFF (22)
#define PMA_RX_MGS_RPU_EVENT_CFG_13_RXRPUCTL_CAL_SQLCH_INIT_UP_PTR0_S_BF_WID ( 3)
#define PMA_RX_MGS_RPU_EVENT_CFG_13_RXRPUCTL_CAL_SQLCH_INIT_UP_PTR0_S_BF_MSK (0x01C00000)
#define PMA_RX_MGS_RPU_EVENT_CFG_13_RXRPUCTL_CAL_SQLCH_INIT_UP_PTR0_S_BF_DEF (0x00C00000)

///< RPU timer for squelch calibration initiation in power up pointer 1
///< q state
#define PMA_RX_MGS_RPU_EVENT_CFG_13_RXRPUCTL_CAL_SQLCH_INIT_UP_PTR1_Q_BF_OFF (25)
#define PMA_RX_MGS_RPU_EVENT_CFG_13_RXRPUCTL_CAL_SQLCH_INIT_UP_PTR1_Q_BF_WID ( 4)
#define PMA_RX_MGS_RPU_EVENT_CFG_13_RXRPUCTL_CAL_SQLCH_INIT_UP_PTR1_Q_BF_MSK (0x1E000000)
#define PMA_RX_MGS_RPU_EVENT_CFG_13_RXRPUCTL_CAL_SQLCH_INIT_UP_PTR1_Q_BF_DEF (0x0E000000)

///< RPU timer for squelch calibration initiation in power up pointer 1
///< s state
#define PMA_RX_MGS_RPU_EVENT_CFG_13_RXRPUCTL_CAL_SQLCH_INIT_UP_PTR1_S_BF_OFF (29)
#define PMA_RX_MGS_RPU_EVENT_CFG_13_RXRPUCTL_CAL_SQLCH_INIT_UP_PTR1_S_BF_WID ( 3)
#define PMA_RX_MGS_RPU_EVENT_CFG_13_RXRPUCTL_CAL_SQLCH_INIT_UP_PTR1_S_BF_MSK (0xE0000000)
#define PMA_RX_MGS_RPU_EVENT_CFG_13_RXRPUCTL_CAL_SQLCH_INIT_UP_PTR1_S_BF_DEF (0x60000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_RPU_EVENT_CFG_14 register description at address offset 0x144
  *
  * Register default value:        0x0001BEE3
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_rpu_event_cfg_14
  * Rx RPU event config
  */

typedef union {
  struct {
    uint32_t RXRPUPD_SQLCH_DN_CFG : 2;
    ///< RPU timer for squelch calibration start in power down config
    ///< AccessType="RW" BitOffset="0" ResetValue="0x3"
    uint32_t RXRPUPD_SQLCH_DN_PTR0_Q : 4;
    ///< RPU timer for squelch calibration start in power down pointer 0 q
    ///< state
    ///< AccessType="RW" BitOffset="2" ResetValue="0x8"
    uint32_t RXRPUPD_SQLCH_DN_PTR0_S : 3;
    ///< RPU timer for squelch calibration start in power down pointer 0 s
    ///< state
    ///< AccessType="RW" BitOffset="6" ResetValue="0x3"
    uint32_t RXRPUPD_SQLCH_UP_CFG : 2;
    ///< RPU timer for squelch calibration start in power upconfig
    ///< AccessType="RW" BitOffset="9" ResetValue="0x3"
    uint32_t RXRPUPD_SQLCH_UP_PTR0_Q : 4;
    ///< RPU timer for squelch calibration start in power up pointer 0 q state
    ///< AccessType="RW" BitOffset="11" ResetValue="0x7"
    uint32_t RXRPUPD_SQLCH_UP_PTR0_S : 3;
    ///< RPU timer for squelch calibration start in power up pointer 0 s state
    ///< AccessType="RW" BitOffset="15" ResetValue="0x3"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_rpu_event_cfg_14_reg_t;

#define PMA_RX_MGS_RPU_EVENT_CFG_14_DEFAULT (0x0001bee3U)
#define PMA_RX_MGS_RPU_EVENT_CFG_14_RD_MASK (0x0003ffffU)
#define PMA_RX_MGS_RPU_EVENT_CFG_14_WR_MASK (0x0003ffffU)


///< RPU timer for squelch calibration start in power down config
#define PMA_RX_MGS_RPU_EVENT_CFG_14_RXRPUPD_SQLCH_DN_CFG_BF_OFF ( 0)
#define PMA_RX_MGS_RPU_EVENT_CFG_14_RXRPUPD_SQLCH_DN_CFG_BF_WID ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_14_RXRPUPD_SQLCH_DN_CFG_BF_MSK (0x00000003)
#define PMA_RX_MGS_RPU_EVENT_CFG_14_RXRPUPD_SQLCH_DN_CFG_BF_DEF (0x00000003)

///< RPU timer for squelch calibration start in power down pointer 0 q
///< state
#define PMA_RX_MGS_RPU_EVENT_CFG_14_RXRPUPD_SQLCH_DN_PTR0_Q_BF_OFF ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_14_RXRPUPD_SQLCH_DN_PTR0_Q_BF_WID ( 4)
#define PMA_RX_MGS_RPU_EVENT_CFG_14_RXRPUPD_SQLCH_DN_PTR0_Q_BF_MSK (0x0000003C)
#define PMA_RX_MGS_RPU_EVENT_CFG_14_RXRPUPD_SQLCH_DN_PTR0_Q_BF_DEF (0x00000020)

///< RPU timer for squelch calibration start in power down pointer 0 s
///< state
#define PMA_RX_MGS_RPU_EVENT_CFG_14_RXRPUPD_SQLCH_DN_PTR0_S_BF_OFF ( 6)
#define PMA_RX_MGS_RPU_EVENT_CFG_14_RXRPUPD_SQLCH_DN_PTR0_S_BF_WID ( 3)
#define PMA_RX_MGS_RPU_EVENT_CFG_14_RXRPUPD_SQLCH_DN_PTR0_S_BF_MSK (0x000001C0)
#define PMA_RX_MGS_RPU_EVENT_CFG_14_RXRPUPD_SQLCH_DN_PTR0_S_BF_DEF (0x000000C0)

///< RPU timer for squelch calibration start in power upconfig
#define PMA_RX_MGS_RPU_EVENT_CFG_14_RXRPUPD_SQLCH_UP_CFG_BF_OFF ( 9)
#define PMA_RX_MGS_RPU_EVENT_CFG_14_RXRPUPD_SQLCH_UP_CFG_BF_WID ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_14_RXRPUPD_SQLCH_UP_CFG_BF_MSK (0x00000600)
#define PMA_RX_MGS_RPU_EVENT_CFG_14_RXRPUPD_SQLCH_UP_CFG_BF_DEF (0x00000600)

///< RPU timer for squelch calibration start in power up pointer 0 q state
#define PMA_RX_MGS_RPU_EVENT_CFG_14_RXRPUPD_SQLCH_UP_PTR0_Q_BF_OFF (11)
#define PMA_RX_MGS_RPU_EVENT_CFG_14_RXRPUPD_SQLCH_UP_PTR0_Q_BF_WID ( 4)
#define PMA_RX_MGS_RPU_EVENT_CFG_14_RXRPUPD_SQLCH_UP_PTR0_Q_BF_MSK (0x00007800)
#define PMA_RX_MGS_RPU_EVENT_CFG_14_RXRPUPD_SQLCH_UP_PTR0_Q_BF_DEF (0x00003800)

///< RPU timer for squelch calibration start in power up pointer 0 s state
#define PMA_RX_MGS_RPU_EVENT_CFG_14_RXRPUPD_SQLCH_UP_PTR0_S_BF_OFF (15)
#define PMA_RX_MGS_RPU_EVENT_CFG_14_RXRPUPD_SQLCH_UP_PTR0_S_BF_WID ( 3)
#define PMA_RX_MGS_RPU_EVENT_CFG_14_RXRPUPD_SQLCH_UP_PTR0_S_BF_MSK (0x00038000)
#define PMA_RX_MGS_RPU_EVENT_CFG_14_RXRPUPD_SQLCH_UP_PTR0_S_BF_DEF (0x00018000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_RPU_EVENT_CFG_15 register description at address offset 0x148
  *
  * Register default value:        0x00019ECF
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_rpu_event_cfg_15
  * Rx RPU event config
  */

typedef union {
  struct {
    uint32_t RXRPUCTL_CDR_FBDIV_TO_DPMA_DN_CFG : 2;
    ///< RPU timer for cdr fbdiv to dpma clock select in power down config
    ///< AccessType="RW" BitOffset="0" ResetValue="0x3"
    uint32_t RXRPUCTL_CDR_FBDIV_TO_DPMA_DN_PTR0_Q : 4;
    ///< RPU timer for cdr fbdiv to dpma clock select in power down pointer
    ///< 0 q state
    ///< AccessType="RW" BitOffset="2" ResetValue="0x3"
    uint32_t RXRPUCTL_CDR_FBDIV_TO_DPMA_DN_PTR0_S : 3;
    ///< RPU timer for cdr fbdiv to dpma clock select in power down pointer
    ///< 0 s state
    ///< AccessType="RW" BitOffset="6" ResetValue="0x3"
    uint32_t RXRPUCTL_CDR_FBDIV_TO_DPMA_UP_CFG : 2;
    ///< RPU timer for cdr fbdiv to dpma clock select in power upconfig
    ///< AccessType="RW" BitOffset="9" ResetValue="0x3"
    uint32_t RXRPUCTL_CDR_FBDIV_TO_DPMA_UP_PTR0_Q : 4;
    ///< RPU timer for cdr fbdiv to dpma clock select in power up pointer 0
    ///< q state
    ///< AccessType="RW" BitOffset="11" ResetValue="0x3"
    uint32_t RXRPUCTL_CDR_FBDIV_TO_DPMA_UP_PTR0_S : 3;
    ///< RPU timer for cdr fbdiv to dpma clock select in power up pointer 0
    ///< s state
    ///< AccessType="RW" BitOffset="15" ResetValue="0x3"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_rpu_event_cfg_15_reg_t;

#define PMA_RX_MGS_RPU_EVENT_CFG_15_DEFAULT (0x00019ecfU)
#define PMA_RX_MGS_RPU_EVENT_CFG_15_RD_MASK (0x0003ffffU)
#define PMA_RX_MGS_RPU_EVENT_CFG_15_WR_MASK (0x0003ffffU)


///< RPU timer for cdr fbdiv to dpma clock select in power down config
#define PMA_RX_MGS_RPU_EVENT_CFG_15_RXRPUCTL_CDR_FBDIV_TO_DPMA_DN_CFG_BF_OFF ( 0)
#define PMA_RX_MGS_RPU_EVENT_CFG_15_RXRPUCTL_CDR_FBDIV_TO_DPMA_DN_CFG_BF_WID ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_15_RXRPUCTL_CDR_FBDIV_TO_DPMA_DN_CFG_BF_MSK (0x00000003)
#define PMA_RX_MGS_RPU_EVENT_CFG_15_RXRPUCTL_CDR_FBDIV_TO_DPMA_DN_CFG_BF_DEF (0x00000003)

///< RPU timer for cdr fbdiv to dpma clock select in power down pointer
///< 0 q state
#define PMA_RX_MGS_RPU_EVENT_CFG_15_RXRPUCTL_CDR_FBDIV_TO_DPMA_DN_PTR0_Q_BF_OFF ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_15_RXRPUCTL_CDR_FBDIV_TO_DPMA_DN_PTR0_Q_BF_WID ( 4)
#define PMA_RX_MGS_RPU_EVENT_CFG_15_RXRPUCTL_CDR_FBDIV_TO_DPMA_DN_PTR0_Q_BF_MSK (0x0000003C)
#define PMA_RX_MGS_RPU_EVENT_CFG_15_RXRPUCTL_CDR_FBDIV_TO_DPMA_DN_PTR0_Q_BF_DEF (0x0000000C)

///< RPU timer for cdr fbdiv to dpma clock select in power down pointer
///< 0 s state
#define PMA_RX_MGS_RPU_EVENT_CFG_15_RXRPUCTL_CDR_FBDIV_TO_DPMA_DN_PTR0_S_BF_OFF ( 6)
#define PMA_RX_MGS_RPU_EVENT_CFG_15_RXRPUCTL_CDR_FBDIV_TO_DPMA_DN_PTR0_S_BF_WID ( 3)
#define PMA_RX_MGS_RPU_EVENT_CFG_15_RXRPUCTL_CDR_FBDIV_TO_DPMA_DN_PTR0_S_BF_MSK (0x000001C0)
#define PMA_RX_MGS_RPU_EVENT_CFG_15_RXRPUCTL_CDR_FBDIV_TO_DPMA_DN_PTR0_S_BF_DEF (0x000000C0)

///< RPU timer for cdr fbdiv to dpma clock select in power upconfig
#define PMA_RX_MGS_RPU_EVENT_CFG_15_RXRPUCTL_CDR_FBDIV_TO_DPMA_UP_CFG_BF_OFF ( 9)
#define PMA_RX_MGS_RPU_EVENT_CFG_15_RXRPUCTL_CDR_FBDIV_TO_DPMA_UP_CFG_BF_WID ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_15_RXRPUCTL_CDR_FBDIV_TO_DPMA_UP_CFG_BF_MSK (0x00000600)
#define PMA_RX_MGS_RPU_EVENT_CFG_15_RXRPUCTL_CDR_FBDIV_TO_DPMA_UP_CFG_BF_DEF (0x00000600)

///< RPU timer for cdr fbdiv to dpma clock select in power up pointer 0
///< q state
#define PMA_RX_MGS_RPU_EVENT_CFG_15_RXRPUCTL_CDR_FBDIV_TO_DPMA_UP_PTR0_Q_BF_OFF (11)
#define PMA_RX_MGS_RPU_EVENT_CFG_15_RXRPUCTL_CDR_FBDIV_TO_DPMA_UP_PTR0_Q_BF_WID ( 4)
#define PMA_RX_MGS_RPU_EVENT_CFG_15_RXRPUCTL_CDR_FBDIV_TO_DPMA_UP_PTR0_Q_BF_MSK (0x00007800)
#define PMA_RX_MGS_RPU_EVENT_CFG_15_RXRPUCTL_CDR_FBDIV_TO_DPMA_UP_PTR0_Q_BF_DEF (0x00001800)

///< RPU timer for cdr fbdiv to dpma clock select in power up pointer 0
///< s state
#define PMA_RX_MGS_RPU_EVENT_CFG_15_RXRPUCTL_CDR_FBDIV_TO_DPMA_UP_PTR0_S_BF_OFF (15)
#define PMA_RX_MGS_RPU_EVENT_CFG_15_RXRPUCTL_CDR_FBDIV_TO_DPMA_UP_PTR0_S_BF_WID ( 3)
#define PMA_RX_MGS_RPU_EVENT_CFG_15_RXRPUCTL_CDR_FBDIV_TO_DPMA_UP_PTR0_S_BF_MSK (0x00038000)
#define PMA_RX_MGS_RPU_EVENT_CFG_15_RXRPUCTL_CDR_FBDIV_TO_DPMA_UP_PTR0_S_BF_DEF (0x00018000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_RPU_EVENT_CFG_16 register description at address offset 0x14c
  *
  * Register default value:        0x00019ECF
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_rpu_event_cfg_16
  * Rx RPU event config
  */

typedef union {
  struct {
    uint32_t RXRPUCTL_RXDCO_DITHER_DN_CFG : 2;
    ///< RPU timer for rxdco dither clock select in power down config
    ///< AccessType="RW" BitOffset="0" ResetValue="0x3"
    uint32_t RXRPUCTL_RXDCO_DITHER_DN_PTR0_Q : 4;
    ///< RPU timer for rxdco dither clock select in power down pointer 0 q
    ///< state
    ///< AccessType="RW" BitOffset="2" ResetValue="0x3"
    uint32_t RXRPUCTL_RXDCO_DITHER_DN_PTR0_S : 3;
    ///< RPU timer for rxdco dither clock select in power down pointer 0 s
    ///< state
    ///< AccessType="RW" BitOffset="6" ResetValue="0x3"
    uint32_t RXRPUCTL_RXDCO_DITHER_UP_CFG : 2;
    ///< RPU timer for rxdco dither clock select in power upconfig
    ///< AccessType="RW" BitOffset="9" ResetValue="0x3"
    uint32_t RXRPUCTL_RXDCO_DITHER_UP_PTR0_Q : 4;
    ///< RPU timer for rxdco dither clock select in power up pointer 0 q state
    ///< AccessType="RW" BitOffset="11" ResetValue="0x3"
    uint32_t RXRPUCTL_RXDCO_DITHER_UP_PTR0_S : 3;
    ///< RPU timer for rxdco dither clock select in power up pointer 0 s state
    ///< AccessType="RW" BitOffset="15" ResetValue="0x3"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_rpu_event_cfg_16_reg_t;

#define PMA_RX_MGS_RPU_EVENT_CFG_16_DEFAULT (0x00019ecfU)
#define PMA_RX_MGS_RPU_EVENT_CFG_16_RD_MASK (0x0003ffffU)
#define PMA_RX_MGS_RPU_EVENT_CFG_16_WR_MASK (0x0003ffffU)


///< RPU timer for rxdco dither clock select in power down config
#define PMA_RX_MGS_RPU_EVENT_CFG_16_RXRPUCTL_RXDCO_DITHER_DN_CFG_BF_OFF ( 0)
#define PMA_RX_MGS_RPU_EVENT_CFG_16_RXRPUCTL_RXDCO_DITHER_DN_CFG_BF_WID ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_16_RXRPUCTL_RXDCO_DITHER_DN_CFG_BF_MSK (0x00000003)
#define PMA_RX_MGS_RPU_EVENT_CFG_16_RXRPUCTL_RXDCO_DITHER_DN_CFG_BF_DEF (0x00000003)

///< RPU timer for rxdco dither clock select in power down pointer 0 q
///< state
#define PMA_RX_MGS_RPU_EVENT_CFG_16_RXRPUCTL_RXDCO_DITHER_DN_PTR0_Q_BF_OFF ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_16_RXRPUCTL_RXDCO_DITHER_DN_PTR0_Q_BF_WID ( 4)
#define PMA_RX_MGS_RPU_EVENT_CFG_16_RXRPUCTL_RXDCO_DITHER_DN_PTR0_Q_BF_MSK (0x0000003C)
#define PMA_RX_MGS_RPU_EVENT_CFG_16_RXRPUCTL_RXDCO_DITHER_DN_PTR0_Q_BF_DEF (0x0000000C)

///< RPU timer for rxdco dither clock select in power down pointer 0 s
///< state
#define PMA_RX_MGS_RPU_EVENT_CFG_16_RXRPUCTL_RXDCO_DITHER_DN_PTR0_S_BF_OFF ( 6)
#define PMA_RX_MGS_RPU_EVENT_CFG_16_RXRPUCTL_RXDCO_DITHER_DN_PTR0_S_BF_WID ( 3)
#define PMA_RX_MGS_RPU_EVENT_CFG_16_RXRPUCTL_RXDCO_DITHER_DN_PTR0_S_BF_MSK (0x000001C0)
#define PMA_RX_MGS_RPU_EVENT_CFG_16_RXRPUCTL_RXDCO_DITHER_DN_PTR0_S_BF_DEF (0x000000C0)

///< RPU timer for rxdco dither clock select in power upconfig
#define PMA_RX_MGS_RPU_EVENT_CFG_16_RXRPUCTL_RXDCO_DITHER_UP_CFG_BF_OFF ( 9)
#define PMA_RX_MGS_RPU_EVENT_CFG_16_RXRPUCTL_RXDCO_DITHER_UP_CFG_BF_WID ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_16_RXRPUCTL_RXDCO_DITHER_UP_CFG_BF_MSK (0x00000600)
#define PMA_RX_MGS_RPU_EVENT_CFG_16_RXRPUCTL_RXDCO_DITHER_UP_CFG_BF_DEF (0x00000600)

///< RPU timer for rxdco dither clock select in power up pointer 0 q state
#define PMA_RX_MGS_RPU_EVENT_CFG_16_RXRPUCTL_RXDCO_DITHER_UP_PTR0_Q_BF_OFF (11)
#define PMA_RX_MGS_RPU_EVENT_CFG_16_RXRPUCTL_RXDCO_DITHER_UP_PTR0_Q_BF_WID ( 4)
#define PMA_RX_MGS_RPU_EVENT_CFG_16_RXRPUCTL_RXDCO_DITHER_UP_PTR0_Q_BF_MSK (0x00007800)
#define PMA_RX_MGS_RPU_EVENT_CFG_16_RXRPUCTL_RXDCO_DITHER_UP_PTR0_Q_BF_DEF (0x00001800)

///< RPU timer for rxdco dither clock select in power up pointer 0 s state
#define PMA_RX_MGS_RPU_EVENT_CFG_16_RXRPUCTL_RXDCO_DITHER_UP_PTR0_S_BF_OFF (15)
#define PMA_RX_MGS_RPU_EVENT_CFG_16_RXRPUCTL_RXDCO_DITHER_UP_PTR0_S_BF_WID ( 3)
#define PMA_RX_MGS_RPU_EVENT_CFG_16_RXRPUCTL_RXDCO_DITHER_UP_PTR0_S_BF_MSK (0x00038000)
#define PMA_RX_MGS_RPU_EVENT_CFG_16_RXRPUCTL_RXDCO_DITHER_UP_PTR0_S_BF_DEF (0x00018000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_RPU_EVENT_CFG_17 register description at address offset 0x150
  *
  * Register default value:        0x00019ECF
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_rpu_event_cfg_17
  * Rx RPU event config
  */

typedef union {
  struct {
    uint32_t RXRPUCTL_RXDCO_PFD_UPDNSAMPL_DN_CFG : 2;
    ///< RPU timer for rxdco pfd updnsampl clock select in power down config
    ///< AccessType="RW" BitOffset="0" ResetValue="0x3"
    uint32_t RXRPUCTL_RXDCO_PFD_UPDNSAMPL_DN_PTR0_Q : 4;
    ///< RPU timer for rxdco pfd updnsampl clock select in power down pointer
    ///< 0 q state
    ///< AccessType="RW" BitOffset="2" ResetValue="0x3"
    uint32_t RXRPUCTL_RXDCO_PFD_UPDNSAMPL_DN_PTR0_S : 3;
    ///< RPU timer for rxdco pfd updnsampl clock select in power down pointer
    ///< 0 s state
    ///< AccessType="RW" BitOffset="6" ResetValue="0x3"
    uint32_t RXRPUCTL_RXDCO_PFD_UPDNSAMPL_UP_CFG : 2;
    ///< RPU timer for rxdco pfd updnsampl clock select in power upconfig
    ///< AccessType="RW" BitOffset="9" ResetValue="0x3"
    uint32_t RXRPUCTL_RXDCO_PFD_UPDNSAMPL_UP_PTR0_Q : 4;
    ///< RPU timer for rxdco pfd updnsampl clock select in power up pointer
    ///< 0 q state
    ///< AccessType="RW" BitOffset="11" ResetValue="0x3"
    uint32_t RXRPUCTL_RXDCO_PFD_UPDNSAMPL_UP_PTR0_S : 3;
    ///< RPU timer for rxdco pfd updnsampl clock select in power up pointer
    ///< 0 s state
    ///< AccessType="RW" BitOffset="15" ResetValue="0x3"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_rpu_event_cfg_17_reg_t;

#define PMA_RX_MGS_RPU_EVENT_CFG_17_DEFAULT (0x00019ecfU)
#define PMA_RX_MGS_RPU_EVENT_CFG_17_RD_MASK (0x0003ffffU)
#define PMA_RX_MGS_RPU_EVENT_CFG_17_WR_MASK (0x0003ffffU)


///< RPU timer for rxdco pfd updnsampl clock select in power down config
#define PMA_RX_MGS_RPU_EVENT_CFG_17_RXRPUCTL_RXDCO_PFD_UPDNSAMPL_DN_CFG_BF_OFF ( 0)
#define PMA_RX_MGS_RPU_EVENT_CFG_17_RXRPUCTL_RXDCO_PFD_UPDNSAMPL_DN_CFG_BF_WID ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_17_RXRPUCTL_RXDCO_PFD_UPDNSAMPL_DN_CFG_BF_MSK (0x00000003)
#define PMA_RX_MGS_RPU_EVENT_CFG_17_RXRPUCTL_RXDCO_PFD_UPDNSAMPL_DN_CFG_BF_DEF (0x00000003)

///< RPU timer for rxdco pfd updnsampl clock select in power down pointer
///< 0 q state
#define PMA_RX_MGS_RPU_EVENT_CFG_17_RXRPUCTL_RXDCO_PFD_UPDNSAMPL_DN_PTR0_Q_BF_OFF ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_17_RXRPUCTL_RXDCO_PFD_UPDNSAMPL_DN_PTR0_Q_BF_WID ( 4)
#define PMA_RX_MGS_RPU_EVENT_CFG_17_RXRPUCTL_RXDCO_PFD_UPDNSAMPL_DN_PTR0_Q_BF_MSK (0x0000003C)
#define PMA_RX_MGS_RPU_EVENT_CFG_17_RXRPUCTL_RXDCO_PFD_UPDNSAMPL_DN_PTR0_Q_BF_DEF (0x0000000C)

///< RPU timer for rxdco pfd updnsampl clock select in power down pointer
///< 0 s state
#define PMA_RX_MGS_RPU_EVENT_CFG_17_RXRPUCTL_RXDCO_PFD_UPDNSAMPL_DN_PTR0_S_BF_OFF ( 6)
#define PMA_RX_MGS_RPU_EVENT_CFG_17_RXRPUCTL_RXDCO_PFD_UPDNSAMPL_DN_PTR0_S_BF_WID ( 3)
#define PMA_RX_MGS_RPU_EVENT_CFG_17_RXRPUCTL_RXDCO_PFD_UPDNSAMPL_DN_PTR0_S_BF_MSK (0x000001C0)
#define PMA_RX_MGS_RPU_EVENT_CFG_17_RXRPUCTL_RXDCO_PFD_UPDNSAMPL_DN_PTR0_S_BF_DEF (0x000000C0)

///< RPU timer for rxdco pfd updnsampl clock select in power upconfig
#define PMA_RX_MGS_RPU_EVENT_CFG_17_RXRPUCTL_RXDCO_PFD_UPDNSAMPL_UP_CFG_BF_OFF ( 9)
#define PMA_RX_MGS_RPU_EVENT_CFG_17_RXRPUCTL_RXDCO_PFD_UPDNSAMPL_UP_CFG_BF_WID ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_17_RXRPUCTL_RXDCO_PFD_UPDNSAMPL_UP_CFG_BF_MSK (0x00000600)
#define PMA_RX_MGS_RPU_EVENT_CFG_17_RXRPUCTL_RXDCO_PFD_UPDNSAMPL_UP_CFG_BF_DEF (0x00000600)

///< RPU timer for rxdco pfd updnsampl clock select in power up pointer
///< 0 q state
#define PMA_RX_MGS_RPU_EVENT_CFG_17_RXRPUCTL_RXDCO_PFD_UPDNSAMPL_UP_PTR0_Q_BF_OFF (11)
#define PMA_RX_MGS_RPU_EVENT_CFG_17_RXRPUCTL_RXDCO_PFD_UPDNSAMPL_UP_PTR0_Q_BF_WID ( 4)
#define PMA_RX_MGS_RPU_EVENT_CFG_17_RXRPUCTL_RXDCO_PFD_UPDNSAMPL_UP_PTR0_Q_BF_MSK (0x00007800)
#define PMA_RX_MGS_RPU_EVENT_CFG_17_RXRPUCTL_RXDCO_PFD_UPDNSAMPL_UP_PTR0_Q_BF_DEF (0x00001800)

///< RPU timer for rxdco pfd updnsampl clock select in power up pointer
///< 0 s state
#define PMA_RX_MGS_RPU_EVENT_CFG_17_RXRPUCTL_RXDCO_PFD_UPDNSAMPL_UP_PTR0_S_BF_OFF (15)
#define PMA_RX_MGS_RPU_EVENT_CFG_17_RXRPUCTL_RXDCO_PFD_UPDNSAMPL_UP_PTR0_S_BF_WID ( 3)
#define PMA_RX_MGS_RPU_EVENT_CFG_17_RXRPUCTL_RXDCO_PFD_UPDNSAMPL_UP_PTR0_S_BF_MSK (0x00038000)
#define PMA_RX_MGS_RPU_EVENT_CFG_17_RXRPUCTL_RXDCO_PFD_UPDNSAMPL_UP_PTR0_S_BF_DEF (0x00018000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_RPU_EVENT_CFG_18 register description at address offset 0x154
  *
  * Register default value:        0x00019ECF
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_rpu_event_cfg_18
  * Rx RPU event config
  */

typedef union {
  struct {
    uint32_t RXRPUCTL_REFCKMUX_RX_TO_DPMA_DN_CFG : 2;
    ///< RPU timer for refckmux rx to dpma clock select in power down config
    ///< AccessType="RW" BitOffset="0" ResetValue="0x3"
    uint32_t RXRPUCTL_REFCKMUX_RX_TO_DPMA_DN_PTR0_Q : 4;
    ///< RPU timer for refckmux rx to dpma clock select in power down pointer
    ///< 0 q state
    ///< AccessType="RW" BitOffset="2" ResetValue="0x3"
    uint32_t RXRPUCTL_REFCKMUX_RX_TO_DPMA_DN_PTR0_S : 3;
    ///< RPU timer for refckmux rx to dpma clock select in power down pointer
    ///< 0 s state
    ///< AccessType="RW" BitOffset="6" ResetValue="0x3"
    uint32_t RXRPUCTL_REFCKMUX_RX_TO_DPMA_UP_CFG : 2;
    ///< RPU timer for refckmux rx to dpma clock select in power upconfig
    ///< AccessType="RW" BitOffset="9" ResetValue="0x3"
    uint32_t RXRPUCTL_REFCKMUX_RX_TO_DPMA_UP_PTR0_Q : 4;
    ///< RPU timer for refckmux rx to dpma clock select in power up pointer
    ///< 0 q state
    ///< AccessType="RW" BitOffset="11" ResetValue="0x3"
    uint32_t RXRPUCTL_REFCKMUX_RX_TO_DPMA_UP_PTR0_S : 3;
    ///< RPU timer for refckmux rx to dpma clock select in power up pointer
    ///< 0 s state
    ///< AccessType="RW" BitOffset="15" ResetValue="0x3"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_rpu_event_cfg_18_reg_t;

#define PMA_RX_MGS_RPU_EVENT_CFG_18_DEFAULT (0x00019ecfU)
#define PMA_RX_MGS_RPU_EVENT_CFG_18_RD_MASK (0x0003ffffU)
#define PMA_RX_MGS_RPU_EVENT_CFG_18_WR_MASK (0x0003ffffU)


///< RPU timer for refckmux rx to dpma clock select in power down config
#define PMA_RX_MGS_RPU_EVENT_CFG_18_RXRPUCTL_REFCKMUX_RX_TO_DPMA_DN_CFG_BF_OFF ( 0)
#define PMA_RX_MGS_RPU_EVENT_CFG_18_RXRPUCTL_REFCKMUX_RX_TO_DPMA_DN_CFG_BF_WID ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_18_RXRPUCTL_REFCKMUX_RX_TO_DPMA_DN_CFG_BF_MSK (0x00000003)
#define PMA_RX_MGS_RPU_EVENT_CFG_18_RXRPUCTL_REFCKMUX_RX_TO_DPMA_DN_CFG_BF_DEF (0x00000003)

///< RPU timer for refckmux rx to dpma clock select in power down pointer
///< 0 q state
#define PMA_RX_MGS_RPU_EVENT_CFG_18_RXRPUCTL_REFCKMUX_RX_TO_DPMA_DN_PTR0_Q_BF_OFF ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_18_RXRPUCTL_REFCKMUX_RX_TO_DPMA_DN_PTR0_Q_BF_WID ( 4)
#define PMA_RX_MGS_RPU_EVENT_CFG_18_RXRPUCTL_REFCKMUX_RX_TO_DPMA_DN_PTR0_Q_BF_MSK (0x0000003C)
#define PMA_RX_MGS_RPU_EVENT_CFG_18_RXRPUCTL_REFCKMUX_RX_TO_DPMA_DN_PTR0_Q_BF_DEF (0x0000000C)

///< RPU timer for refckmux rx to dpma clock select in power down pointer
///< 0 s state
#define PMA_RX_MGS_RPU_EVENT_CFG_18_RXRPUCTL_REFCKMUX_RX_TO_DPMA_DN_PTR0_S_BF_OFF ( 6)
#define PMA_RX_MGS_RPU_EVENT_CFG_18_RXRPUCTL_REFCKMUX_RX_TO_DPMA_DN_PTR0_S_BF_WID ( 3)
#define PMA_RX_MGS_RPU_EVENT_CFG_18_RXRPUCTL_REFCKMUX_RX_TO_DPMA_DN_PTR0_S_BF_MSK (0x000001C0)
#define PMA_RX_MGS_RPU_EVENT_CFG_18_RXRPUCTL_REFCKMUX_RX_TO_DPMA_DN_PTR0_S_BF_DEF (0x000000C0)

///< RPU timer for refckmux rx to dpma clock select in power upconfig
#define PMA_RX_MGS_RPU_EVENT_CFG_18_RXRPUCTL_REFCKMUX_RX_TO_DPMA_UP_CFG_BF_OFF ( 9)
#define PMA_RX_MGS_RPU_EVENT_CFG_18_RXRPUCTL_REFCKMUX_RX_TO_DPMA_UP_CFG_BF_WID ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_18_RXRPUCTL_REFCKMUX_RX_TO_DPMA_UP_CFG_BF_MSK (0x00000600)
#define PMA_RX_MGS_RPU_EVENT_CFG_18_RXRPUCTL_REFCKMUX_RX_TO_DPMA_UP_CFG_BF_DEF (0x00000600)

///< RPU timer for refckmux rx to dpma clock select in power up pointer
///< 0 q state
#define PMA_RX_MGS_RPU_EVENT_CFG_18_RXRPUCTL_REFCKMUX_RX_TO_DPMA_UP_PTR0_Q_BF_OFF (11)
#define PMA_RX_MGS_RPU_EVENT_CFG_18_RXRPUCTL_REFCKMUX_RX_TO_DPMA_UP_PTR0_Q_BF_WID ( 4)
#define PMA_RX_MGS_RPU_EVENT_CFG_18_RXRPUCTL_REFCKMUX_RX_TO_DPMA_UP_PTR0_Q_BF_MSK (0x00007800)
#define PMA_RX_MGS_RPU_EVENT_CFG_18_RXRPUCTL_REFCKMUX_RX_TO_DPMA_UP_PTR0_Q_BF_DEF (0x00001800)

///< RPU timer for refckmux rx to dpma clock select in power up pointer
///< 0 s state
#define PMA_RX_MGS_RPU_EVENT_CFG_18_RXRPUCTL_REFCKMUX_RX_TO_DPMA_UP_PTR0_S_BF_OFF (15)
#define PMA_RX_MGS_RPU_EVENT_CFG_18_RXRPUCTL_REFCKMUX_RX_TO_DPMA_UP_PTR0_S_BF_WID ( 3)
#define PMA_RX_MGS_RPU_EVENT_CFG_18_RXRPUCTL_REFCKMUX_RX_TO_DPMA_UP_PTR0_S_BF_MSK (0x00038000)
#define PMA_RX_MGS_RPU_EVENT_CFG_18_RXRPUCTL_REFCKMUX_RX_TO_DPMA_UP_PTR0_S_BF_DEF (0x00018000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_RPU_EVENT_CFG_19 register description at address offset 0x158
  *
  * Register default value:        0x00019ECF
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_rpu_event_cfg_19
  * Rx RPU event config
  */

typedef union {
  struct {
    uint32_t RXRPUCTL_CDR_EN_DN_CFG : 2;
    ///< RPU timer for cdr en clock select in power down config
    ///< AccessType="RW" BitOffset="0" ResetValue="0x3"
    uint32_t RXRPUCTL_CDR_EN_DN_PTR0_Q : 4;
    ///< RPU timer for cdr en clock select in power down pointer 0 q state
    ///< AccessType="RW" BitOffset="2" ResetValue="0x3"
    uint32_t RXRPUCTL_CDR_EN_DN_PTR0_S : 3;
    ///< RPU timer for cdr en clock select in power down pointer 0 s state
    ///< AccessType="RW" BitOffset="6" ResetValue="0x3"
    uint32_t RXRPUCTL_CDR_EN_UP_CFG : 2;
    ///< RPU timer for cdr en clock select in power upconfig
    ///< AccessType="RW" BitOffset="9" ResetValue="0x3"
    uint32_t RXRPUCTL_CDR_EN_UP_PTR0_Q : 4;
    ///< RPU timer for cdr en clock select in power up pointer 0 q state
    ///< AccessType="RW" BitOffset="11" ResetValue="0x3"
    uint32_t RXRPUCTL_CDR_EN_UP_PTR0_S : 3;
    ///< RPU timer for cdr en clock select in power up pointer 0 s state
    ///< AccessType="RW" BitOffset="15" ResetValue="0x3"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_rpu_event_cfg_19_reg_t;

#define PMA_RX_MGS_RPU_EVENT_CFG_19_DEFAULT (0x00019ecfU)
#define PMA_RX_MGS_RPU_EVENT_CFG_19_RD_MASK (0x0003ffffU)
#define PMA_RX_MGS_RPU_EVENT_CFG_19_WR_MASK (0x0003ffffU)


///< RPU timer for cdr en clock select in power down config
#define PMA_RX_MGS_RPU_EVENT_CFG_19_RXRPUCTL_CDR_EN_DN_CFG_BF_OFF ( 0)
#define PMA_RX_MGS_RPU_EVENT_CFG_19_RXRPUCTL_CDR_EN_DN_CFG_BF_WID ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_19_RXRPUCTL_CDR_EN_DN_CFG_BF_MSK (0x00000003)
#define PMA_RX_MGS_RPU_EVENT_CFG_19_RXRPUCTL_CDR_EN_DN_CFG_BF_DEF (0x00000003)

///< RPU timer for cdr en clock select in power down pointer 0 q state
#define PMA_RX_MGS_RPU_EVENT_CFG_19_RXRPUCTL_CDR_EN_DN_PTR0_Q_BF_OFF ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_19_RXRPUCTL_CDR_EN_DN_PTR0_Q_BF_WID ( 4)
#define PMA_RX_MGS_RPU_EVENT_CFG_19_RXRPUCTL_CDR_EN_DN_PTR0_Q_BF_MSK (0x0000003C)
#define PMA_RX_MGS_RPU_EVENT_CFG_19_RXRPUCTL_CDR_EN_DN_PTR0_Q_BF_DEF (0x0000000C)

///< RPU timer for cdr en clock select in power down pointer 0 s state
#define PMA_RX_MGS_RPU_EVENT_CFG_19_RXRPUCTL_CDR_EN_DN_PTR0_S_BF_OFF ( 6)
#define PMA_RX_MGS_RPU_EVENT_CFG_19_RXRPUCTL_CDR_EN_DN_PTR0_S_BF_WID ( 3)
#define PMA_RX_MGS_RPU_EVENT_CFG_19_RXRPUCTL_CDR_EN_DN_PTR0_S_BF_MSK (0x000001C0)
#define PMA_RX_MGS_RPU_EVENT_CFG_19_RXRPUCTL_CDR_EN_DN_PTR0_S_BF_DEF (0x000000C0)

///< RPU timer for cdr en clock select in power upconfig
#define PMA_RX_MGS_RPU_EVENT_CFG_19_RXRPUCTL_CDR_EN_UP_CFG_BF_OFF ( 9)
#define PMA_RX_MGS_RPU_EVENT_CFG_19_RXRPUCTL_CDR_EN_UP_CFG_BF_WID ( 2)
#define PMA_RX_MGS_RPU_EVENT_CFG_19_RXRPUCTL_CDR_EN_UP_CFG_BF_MSK (0x00000600)
#define PMA_RX_MGS_RPU_EVENT_CFG_19_RXRPUCTL_CDR_EN_UP_CFG_BF_DEF (0x00000600)

///< RPU timer for cdr en clock select in power up pointer 0 q state
#define PMA_RX_MGS_RPU_EVENT_CFG_19_RXRPUCTL_CDR_EN_UP_PTR0_Q_BF_OFF (11)
#define PMA_RX_MGS_RPU_EVENT_CFG_19_RXRPUCTL_CDR_EN_UP_PTR0_Q_BF_WID ( 4)
#define PMA_RX_MGS_RPU_EVENT_CFG_19_RXRPUCTL_CDR_EN_UP_PTR0_Q_BF_MSK (0x00007800)
#define PMA_RX_MGS_RPU_EVENT_CFG_19_RXRPUCTL_CDR_EN_UP_PTR0_Q_BF_DEF (0x00001800)

///< RPU timer for cdr en clock select in power up pointer 0 s state
#define PMA_RX_MGS_RPU_EVENT_CFG_19_RXRPUCTL_CDR_EN_UP_PTR0_S_BF_OFF (15)
#define PMA_RX_MGS_RPU_EVENT_CFG_19_RXRPUCTL_CDR_EN_UP_PTR0_S_BF_WID ( 3)
#define PMA_RX_MGS_RPU_EVENT_CFG_19_RXRPUCTL_CDR_EN_UP_PTR0_S_BF_MSK (0x00038000)
#define PMA_RX_MGS_RPU_EVENT_CFG_19_RXRPUCTL_CDR_EN_UP_PTR0_S_BF_DEF (0x00018000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXSIGDET_CTRL_0 register description at address offset 0x15c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxsigdet_ctrl_0
  * Rx Signal Detect Control
  */

typedef union {
  struct {
    uint32_t RXSIGDET_FASTLOCK_WINSIZE : 4;
    ///< CDR VCO initial gain window enable size.  Once data locked, a window
    ///< is generated to tell the Vco to use a higher gain for a fixed programmable(4
    ///< bits) window size.  This would allow for faster convergence.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXSIGDET_LFPSEXIT_DELAY : 5;
    ///< LFPS exti delay
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RXSIGDET_RXLEVELDET_DEBOUNCE_DNCOUNT : 3;
    ///< Rx Transition deglitch cycle down count
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t RXSIGDET_RXLEVELDET_DEBOUNCE_UPCOUNT : 3;
    ///< Rx Transition deglitch cycle up count
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t RXSIGDET_RXLEVELDET_DEBOUNCE_FLUSH_EN : 1;
    ///< Clears out the debouncer on lock2data to lock2ref transition when
    ///< enabled
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RXSIGDET_TOGGLE_COUNT_EN : 1;
    ///< Initialize the toggle counter
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t RXSIGDET_TOGGLE_COUNT_PAUSE : 1;
    ///< Pause the toggle counter
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t RXSIGDET_TOGGLE_MONITOR_SEL : 3;
    ///< Signal detect source.  0: rxeq_sqlch; 1: cdrlock2data; 2:leveldet;
    ///< 3: ppmlockstat; 4: eiosdetstat; 5: trasncntout; 6: lfpsddet; 7: leveldet_stat
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t RXSIGDET_RXEQEN : 2;
    ///< RxEq enable
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t RXSIGDET_RXEQEN_TYPE : 2;
    ///< RxEQ detect type: bit 0: 0: rxeq_sqlch; 1: rxeq_pedge. Bit 1: 0: NOT
    ///< rxeq_sqlch; 1: rxeq_nedge
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t RXSIGDET_DIGTRANCNTEN_TYPE : 2;
    ///< Transition counter (digital) enable for entry.  bit 0: Enable Mode
    ///< when cdr NOT locked to data. Bit 1: Enable Mode when cdr locked to
    ///< data
    ///< AccessType="RW" BitOffset="25" ResetValue="0x0"
    uint32_t RXSIGDET_EIOSDETEN_TYPE : 2;
    ///< EIOS detect type. Bit 0: 0 - NOT eiosdetsate; 1 - eiosdet_negedge.
    ///< Bit 1: 0 - eiosdetsate; 1 - eiosdet_posedge
    ///< AccessType="RW" BitOffset="27" ResetValue="0x0"
    uint32_t RXEQSIGDET_PAUSE : 1;
    ///< Rx signal detection pause
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
    uint32_t RXSIGDET_SIGDET_DEBOUNCE : 1;
    ///< Rx signal detect debounce ctrl. 0 - Not deboucded (use raw signal);
    ///< 1 - Debounced versions of leveldet and trandet is used
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_sigdet_ctrl_0_reg_t;

#define PMA_RX_MSG_SIGDET_CTRL_0_DEFAULT (0x00000000U)
#define PMA_RX_MSG_SIGDET_CTRL_0_RD_MASK (0x7fffffffU)
#define PMA_RX_MSG_SIGDET_CTRL_0_WR_MASK (0x7fffffffU)


///< CDR VCO initial gain window enable size.  Once data locked, a window
///< is generated to tell the Vco to use a higher gain for a fixed programmable(4
///< bits) window size.  This would allow for faster convergence.
#define PMA_RX_MSG_SIGDET_CTRL_0_RXSIGDET_FASTLOCK_WINSIZE_BF_OFF ( 0)
#define PMA_RX_MSG_SIGDET_CTRL_0_RXSIGDET_FASTLOCK_WINSIZE_BF_WID ( 4)
#define PMA_RX_MSG_SIGDET_CTRL_0_RXSIGDET_FASTLOCK_WINSIZE_BF_MSK (0x0000000F)
#define PMA_RX_MSG_SIGDET_CTRL_0_RXSIGDET_FASTLOCK_WINSIZE_BF_DEF (0x00000000)

///< LFPS exti delay
#define PMA_RX_MSG_SIGDET_CTRL_0_RXSIGDET_LFPSEXIT_DELAY_BF_OFF ( 4)
#define PMA_RX_MSG_SIGDET_CTRL_0_RXSIGDET_LFPSEXIT_DELAY_BF_WID ( 5)
#define PMA_RX_MSG_SIGDET_CTRL_0_RXSIGDET_LFPSEXIT_DELAY_BF_MSK (0x000001F0)
#define PMA_RX_MSG_SIGDET_CTRL_0_RXSIGDET_LFPSEXIT_DELAY_BF_DEF (0x00000000)

///< Rx Transition deglitch cycle down count
#define PMA_RX_MSG_SIGDET_CTRL_0_RXSIGDET_RXLVLDET_DEBOUNCE_DNCNT_BF_OFF ( 9)
#define PMA_RX_MSG_SIGDET_CTRL_0_RXSIGDET_RXLVLDET_DEBOUNCE_DNCNT_BF_WID ( 3)
#define PMA_RX_MSG_SIGDET_CTRL_0_RXSIGDET_RXLVLDET_DEBOUNCE_DNCNT_BF_MSK (0x00000E00)
#define PMA_RX_MSG_SIGDET_CTRL_0_RXSIGDET_RXLVLDET_DEBOUNCE_DNCNT_BF_DEF (0x00000000)

///< Rx Transition deglitch cycle up count
#define PMA_RX_MSG_SIGDET_CTRL_0_RXSIGDET_RXLVLDET_DEBOUNCE_UPCNT_BF_OFF (12)
#define PMA_RX_MSG_SIGDET_CTRL_0_RXSIGDET_RXLVLDET_DEBOUNCE_UPCNT_BF_WID ( 3)
#define PMA_RX_MSG_SIGDET_CTRL_0_RXSIGDET_RXLVLDET_DEBOUNCE_UPCNT_BF_MSK (0x00007000)
#define PMA_RX_MSG_SIGDET_CTRL_0_RXSIGDET_RXLVLDET_DEBOUNCE_UPCNT_BF_DEF (0x00000000)

///< Clears out the debouncer on lock2data to lock2ref transition when
///< enabled
#define PMA_RX_MSG_SIGDET_CTRL_0_RXSIGDET_RXLVLDET_DEBOUNCE_FLUSH_EN_BF_OFF (15)
#define PMA_RX_MSG_SIGDET_CTRL_0_RXSIGDET_RXLVLDET_DEBOUNCE_FLUSH_EN_BF_WID ( 1)
#define PMA_RX_MSG_SIGDET_CTRL_0_RXSIGDET_RXLVLDET_DEBOUNCE_FLUSH_EN_BF_MSK (0x00008000)
#define PMA_RX_MSG_SIGDET_CTRL_0_RXSIGDET_RXLVLDET_DEBOUNCE_FLUSH_EN_BF_DEF (0x00000000)

///< Initialize the toggle counter
#define PMA_RX_MSG_SIGDET_CTRL_0_RXSIGDET_TOGGLE_CNT_EN_BF_OFF (16)
#define PMA_RX_MSG_SIGDET_CTRL_0_RXSIGDET_TOGGLE_CNT_EN_BF_WID ( 1)
#define PMA_RX_MSG_SIGDET_CTRL_0_RXSIGDET_TOGGLE_CNT_EN_BF_MSK (0x00010000)
#define PMA_RX_MSG_SIGDET_CTRL_0_RXSIGDET_TOGGLE_CNT_EN_BF_DEF (0x00000000)

///< Pause the toggle counter
#define PMA_RX_MSG_SIGDET_CTRL_0_RXSIGDET_TOGGLE_CNT_PAUSE_BF_OFF (17)
#define PMA_RX_MSG_SIGDET_CTRL_0_RXSIGDET_TOGGLE_CNT_PAUSE_BF_WID ( 1)
#define PMA_RX_MSG_SIGDET_CTRL_0_RXSIGDET_TOGGLE_CNT_PAUSE_BF_MSK (0x00020000)
#define PMA_RX_MSG_SIGDET_CTRL_0_RXSIGDET_TOGGLE_CNT_PAUSE_BF_DEF (0x00000000)

///< Signal detect source.  0: rxeq_sqlch; 1: cdrlock2data; 2:leveldet;
///< 3: ppmlockstat; 4: eiosdetstat; 5: trasncntout; 6: lfpsddet; 7: leveldet_stat
#define PMA_RX_MSG_SIGDET_CTRL_0_RXSIGDET_TOGGLE_MON_SEL_BF_OFF (18)
#define PMA_RX_MSG_SIGDET_CTRL_0_RXSIGDET_TOGGLE_MON_SEL_BF_WID ( 3)
#define PMA_RX_MSG_SIGDET_CTRL_0_RXSIGDET_TOGGLE_MON_SEL_BF_MSK (0x001C0000)
#define PMA_RX_MSG_SIGDET_CTRL_0_RXSIGDET_TOGGLE_MON_SEL_BF_DEF (0x00000000)

///< RxEq enable
#define PMA_RX_MSG_SIGDET_CTRL_0_RXSIGDET_RXEQEN_BF_OFF (21)
#define PMA_RX_MSG_SIGDET_CTRL_0_RXSIGDET_RXEQEN_BF_WID ( 2)
#define PMA_RX_MSG_SIGDET_CTRL_0_RXSIGDET_RXEQEN_BF_MSK (0x00600000)
#define PMA_RX_MSG_SIGDET_CTRL_0_RXSIGDET_RXEQEN_BF_DEF (0x00000000)

///< RxEQ detect type: bit 0: 0: rxeq_sqlch; 1: rxeq_pedge. Bit 1: 0: NOT
///< rxeq_sqlch; 1: rxeq_nedge
#define PMA_RX_MSG_SIGDET_CTRL_0_RXSIGDET_RXEQEN_TYPE_BF_OFF (23)
#define PMA_RX_MSG_SIGDET_CTRL_0_RXSIGDET_RXEQEN_TYPE_BF_WID ( 2)
#define PMA_RX_MSG_SIGDET_CTRL_0_RXSIGDET_RXEQEN_TYPE_BF_MSK (0x01800000)
#define PMA_RX_MSG_SIGDET_CTRL_0_RXSIGDET_RXEQEN_TYPE_BF_DEF (0x00000000)

///< Transition counter (digital) enable for entry.  bit 0: Enable Mode
///< when cdr NOT locked to data. Bit 1: Enable Mode when cdr locked to
///< data
#define PMA_RX_MSG_SIGDET_CTRL_0_RXSIGDET_DIGTRANCNTEN_TYPE_BF_OFF (25)
#define PMA_RX_MSG_SIGDET_CTRL_0_RXSIGDET_DIGTRANCNTEN_TYPE_BF_WID ( 2)
#define PMA_RX_MSG_SIGDET_CTRL_0_RXSIGDET_DIGTRANCNTEN_TYPE_BF_MSK (0x06000000)
#define PMA_RX_MSG_SIGDET_CTRL_0_RXSIGDET_DIGTRANCNTEN_TYPE_BF_DEF (0x00000000)

///< EIOS detect type. Bit 0: 0 - NOT eiosdetsate; 1 - eiosdet_negedge.
///< Bit 1: 0 - eiosdetsate; 1 - eiosdet_posedge
#define PMA_RX_MSG_SIGDET_CTRL_0_RXSIGDET_EIOSDETEN_TYPE_BF_OFF (27)
#define PMA_RX_MSG_SIGDET_CTRL_0_RXSIGDET_EIOSDETEN_TYPE_BF_WID ( 2)
#define PMA_RX_MSG_SIGDET_CTRL_0_RXSIGDET_EIOSDETEN_TYPE_BF_MSK (0x18000000)
#define PMA_RX_MSG_SIGDET_CTRL_0_RXSIGDET_EIOSDETEN_TYPE_BF_DEF (0x00000000)

///< Rx signal detection pause
#define PMA_RX_MSG_SIGDET_CTRL_0_RXEQSIGDET_PAUSE_BF_OFF (29)
#define PMA_RX_MSG_SIGDET_CTRL_0_RXEQSIGDET_PAUSE_BF_WID ( 1)
#define PMA_RX_MSG_SIGDET_CTRL_0_RXEQSIGDET_PAUSE_BF_MSK (0x20000000)
#define PMA_RX_MSG_SIGDET_CTRL_0_RXEQSIGDET_PAUSE_BF_DEF (0x00000000)

///< Rx signal detect debounce ctrl. 0 - Not deboucded (use raw signal);
///< 1 - Debounced versions of leveldet and trandet is used
#define PMA_RX_MSG_SIGDET_CTRL_0_RXSIGDET_SIGDET_DEBOUNCE_BF_OFF (30)
#define PMA_RX_MSG_SIGDET_CTRL_0_RXSIGDET_SIGDET_DEBOUNCE_BF_WID ( 1)
#define PMA_RX_MSG_SIGDET_CTRL_0_RXSIGDET_SIGDET_DEBOUNCE_BF_MSK (0x40000000)
#define PMA_RX_MSG_SIGDET_CTRL_0_RXSIGDET_SIGDET_DEBOUNCE_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXSIGDET_CTRL_1 register description at address offset 0x160
  *
  * Register default value:        0x24110000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxsigdet_ctrl_1
  * Rx Signal Detect Control
  */

typedef union {
  struct {
    uint32_t RXSIGDET_LEVELDETEN_TYPE : 2;
    ///< Level detect type.  Bit 0: 0 - leveldet_stat; 1 - leveldet_pedge.
    ///< Bit 1: NOT  leveldet_stat; 1 - leveldet_nedge
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXSIGDET_PPMDETEN_TYPE : 2;
    ///< PPM detect type.  Bit 0: 0 - ppmlockstat_stat; 1 - ppmlock_pedge.
    ///< Bit 1: NOT ppmlockstat_stat; 1 - ppmlock_nedge
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t RXSIGDET_RXEQ_CTRL : 2;
    ///< RxEQ signal detect cotnrol.  0 - Raw signal data, 1 - Debounced signal,
    ///< 2 - RxSigDet_CDRlock2data
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RXSIGDET_TMR_CLKSEL : 1;
    ///< Number of cycles ictl_oregrxsigdet_cdrlock2data_a must be high before
    ///< rxsigdet_cdrlock2data is asserted
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t RXSIGDET_TX2RXLB_EIOSDETECT_GATER_EN : 1;
    ///< Enabble this bit in Tx-to-Rx loopback to prevent  de-assert rxstandby
    ///< on the PCS side
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t RXOPTCLFASTLOCK_RXDATA_EN : 1;
    ///< Rx Signal Detect - fast lock data enable
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RXCDRVCO_REFPROPGAIN_NOM : 4;
    ///< Rx Signal Detect - ref prop gain nomial
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t RXOPTCLFASTLOCK_PIN_SEL : 1;
    ///< Rx Signal Detect Pin select. 0 - ictl_oversample; 1 - ictl_ovrencdrlock2data
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t LFPS_OUT_EN : 1;
    ///< Enable LFPS detect flag to o_pipepcs_signaldetect_lfps_l[x]_a
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t RXSIGDET_L2D_TFER_DONE_MASK : 1;
    ///< 0 will mask off the l2d_tfer_done (L2D_LO state) into Rx Signal Detect
    ///< Out. 1 will enable l2d_tfer_done into Rx Signal Detect Out.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t SQLCHDEB_DEB_CNT : 4;
    ///< Sqlch debouncer - Number of positive edge of octl_sqlch_exit_good
    ///< is sampled within a 4k UI window before asserting octl_sqlch_exit_good_debounced
    ///< AccessType="RW" BitOffset="16" ResetValue="0x1"
    uint32_t SQLCHDEB_DEB_STATUS_CNT : 4;
    ///< Sqlch debouncer - Number of positive edge of octl_sqlch_exit_good_debounced
    ///< is sampled before asserting octl_sqlch_exit_good_debounced_status
    ///< AccessType="RW" BitOffset="20" ResetValue="0x1"
    uint32_t SQLCHDEB_IGN_CNT : 4;
    ///< Sqlch debouncer - Number of cycles to wait between sampling the squelch
    ///< signal
    ///< AccessType="RW" BitOffset="24" ResetValue="0x4"
    uint32_t SQLCHDEB_THRESH_CNT : 4;
    ///< Sqlch debouncer - Number of consecutive times squelch is sampled to
    ///< be de-asserted before pulsing octl_sqlch_exit_good
    ///< AccessType="RW" BitOffset="28" ResetValue="0x2"
  } ;
  uint32_t value;
} pma_rx_msg_sigdet_ctrl_1_reg_t;

#define PMA_RX_MSG_SIGDET_CTRL_1_DEFAULT (0x24110000U)
#define PMA_RX_MSG_SIGDET_CTRL_1_RD_MASK (0xffffffffU)
#define PMA_RX_MSG_SIGDET_CTRL_1_WR_MASK (0xffffffffU)


///< Level detect type.  Bit 0: 0 - leveldet_stat; 1 - leveldet_pedge.
///< Bit 1: NOT  leveldet_stat; 1 - leveldet_nedge
#define PMA_RX_MSG_SIGDET_CTRL_1_RXSIGDET_LVLDETEN_TYPE_BF_OFF ( 0)
#define PMA_RX_MSG_SIGDET_CTRL_1_RXSIGDET_LVLDETEN_TYPE_BF_WID ( 2)
#define PMA_RX_MSG_SIGDET_CTRL_1_RXSIGDET_LVLDETEN_TYPE_BF_MSK (0x00000003)
#define PMA_RX_MSG_SIGDET_CTRL_1_RXSIGDET_LVLDETEN_TYPE_BF_DEF (0x00000000)

///< PPM detect type.  Bit 0: 0 - ppmlockstat_stat; 1 - ppmlock_pedge.
///< Bit 1: NOT ppmlockstat_stat; 1 - ppmlock_nedge
#define PMA_RX_MSG_SIGDET_CTRL_1_RXSIGDET_PPMDETEN_TYPE_BF_OFF ( 2)
#define PMA_RX_MSG_SIGDET_CTRL_1_RXSIGDET_PPMDETEN_TYPE_BF_WID ( 2)
#define PMA_RX_MSG_SIGDET_CTRL_1_RXSIGDET_PPMDETEN_TYPE_BF_MSK (0x0000000C)
#define PMA_RX_MSG_SIGDET_CTRL_1_RXSIGDET_PPMDETEN_TYPE_BF_DEF (0x00000000)

///< RxEQ signal detect cotnrol.  0 - Raw signal data, 1 - Debounced signal,
///< 2 - RxSigDet_CDRlock2data
#define PMA_RX_MSG_SIGDET_CTRL_1_RXSIGDET_RXEQ_CTRL_BF_OFF ( 4)
#define PMA_RX_MSG_SIGDET_CTRL_1_RXSIGDET_RXEQ_CTRL_BF_WID ( 2)
#define PMA_RX_MSG_SIGDET_CTRL_1_RXSIGDET_RXEQ_CTRL_BF_MSK (0x00000030)
#define PMA_RX_MSG_SIGDET_CTRL_1_RXSIGDET_RXEQ_CTRL_BF_DEF (0x00000000)

///< Number of cycles ictl_oregrxsigdet_cdrlock2data_a must be high before
///< rxsigdet_cdrlock2data is asserted
#define PMA_RX_MSG_SIGDET_CTRL_1_RXSIGDET_TMR_CLKSEL_BF_OFF ( 6)
#define PMA_RX_MSG_SIGDET_CTRL_1_RXSIGDET_TMR_CLKSEL_BF_WID ( 1)
#define PMA_RX_MSG_SIGDET_CTRL_1_RXSIGDET_TMR_CLKSEL_BF_MSK (0x00000040)
#define PMA_RX_MSG_SIGDET_CTRL_1_RXSIGDET_TMR_CLKSEL_BF_DEF (0x00000000)

///< Enabble this bit in Tx-to-Rx loopback to prevent  de-assert rxstandby
///< on the PCS side
#define PMA_RX_MSG_SIGDET_CTRL_1_RXSIGDET_TX2RXLB_EIOSDETECT_GATER_EN_BF_OFF ( 7)
#define PMA_RX_MSG_SIGDET_CTRL_1_RXSIGDET_TX2RXLB_EIOSDETECT_GATER_EN_BF_WID ( 1)
#define PMA_RX_MSG_SIGDET_CTRL_1_RXSIGDET_TX2RXLB_EIOSDETECT_GATER_EN_BF_MSK (0x00000080)
#define PMA_RX_MSG_SIGDET_CTRL_1_RXSIGDET_TX2RXLB_EIOSDETECT_GATER_EN_BF_DEF (0x00000000)

///< Rx Signal Detect - fast lock data enable
#define PMA_RX_MSG_SIGDET_CTRL_1_RXOPTCLFASTLOCK_RXDATA_EN_BF_OFF ( 8)
#define PMA_RX_MSG_SIGDET_CTRL_1_RXOPTCLFASTLOCK_RXDATA_EN_BF_WID ( 1)
#define PMA_RX_MSG_SIGDET_CTRL_1_RXOPTCLFASTLOCK_RXDATA_EN_BF_MSK (0x00000100)
#define PMA_RX_MSG_SIGDET_CTRL_1_RXOPTCLFASTLOCK_RXDATA_EN_BF_DEF (0x00000000)

///< Rx Signal Detect - ref prop gain nomial
#define PMA_RX_MSG_SIGDET_CTRL_1_RXCDRVCO_REFPROPGAIN_NOM_BF_OFF ( 9)
#define PMA_RX_MSG_SIGDET_CTRL_1_RXCDRVCO_REFPROPGAIN_NOM_BF_WID ( 4)
#define PMA_RX_MSG_SIGDET_CTRL_1_RXCDRVCO_REFPROPGAIN_NOM_BF_MSK (0x00001E00)
#define PMA_RX_MSG_SIGDET_CTRL_1_RXCDRVCO_REFPROPGAIN_NOM_BF_DEF (0x00000000)

///< Rx Signal Detect Pin select. 0 - ictl_oversample; 1 - ictl_ovrencdrlock2data
#define PMA_RX_MSG_SIGDET_CTRL_1_RXOPTCLFASTLOCK_PIN_SEL_BF_OFF (13)
#define PMA_RX_MSG_SIGDET_CTRL_1_RXOPTCLFASTLOCK_PIN_SEL_BF_WID ( 1)
#define PMA_RX_MSG_SIGDET_CTRL_1_RXOPTCLFASTLOCK_PIN_SEL_BF_MSK (0x00002000)
#define PMA_RX_MSG_SIGDET_CTRL_1_RXOPTCLFASTLOCK_PIN_SEL_BF_DEF (0x00000000)

///< Enable LFPS detect flag to o_pipepcs_signaldetect_lfps_l[x]_a
#define PMA_RX_MSG_SIGDET_CTRL_1_LFPS_OUT_EN_BF_OFF (14)
#define PMA_RX_MSG_SIGDET_CTRL_1_LFPS_OUT_EN_BF_WID ( 1)
#define PMA_RX_MSG_SIGDET_CTRL_1_LFPS_OUT_EN_BF_MSK (0x00004000)
#define PMA_RX_MSG_SIGDET_CTRL_1_LFPS_OUT_EN_BF_DEF (0x00000000)

///< 0 will mask off the l2d_tfer_done (L2D_LO state) into Rx Signal Detect
///< Out. 1 will enable l2d_tfer_done into Rx Signal Detect Out.
#define PMA_RX_MSG_SIGDET_CTRL_1_RXSIGDET_L2D_TFER_DONE_MASK_BF_OFF (15)
#define PMA_RX_MSG_SIGDET_CTRL_1_RXSIGDET_L2D_TFER_DONE_MASK_BF_WID ( 1)
#define PMA_RX_MSG_SIGDET_CTRL_1_RXSIGDET_L2D_TFER_DONE_MASK_BF_MSK (0x00008000)
#define PMA_RX_MSG_SIGDET_CTRL_1_RXSIGDET_L2D_TFER_DONE_MASK_BF_DEF (0x00000000)

///< Sqlch debouncer - Number of positive edge of octl_sqlch_exit_good
///< is sampled within a 4k UI window before asserting octl_sqlch_exit_good_debounced
#define PMA_RX_MSG_SIGDET_CTRL_1_SQLCHDEB_DEB_CNT_BF_OFF (16)
#define PMA_RX_MSG_SIGDET_CTRL_1_SQLCHDEB_DEB_CNT_BF_WID ( 4)
#define PMA_RX_MSG_SIGDET_CTRL_1_SQLCHDEB_DEB_CNT_BF_MSK (0x000F0000)
#define PMA_RX_MSG_SIGDET_CTRL_1_SQLCHDEB_DEB_CNT_BF_DEF (0x00010000)

///< Sqlch debouncer - Number of positive edge of octl_sqlch_exit_good_debounced
///< is sampled before asserting octl_sqlch_exit_good_debounced_status
#define PMA_RX_MSG_SIGDET_CTRL_1_SQLCHDEB_DEB_STAT_CNT_BF_OFF (20)
#define PMA_RX_MSG_SIGDET_CTRL_1_SQLCHDEB_DEB_STAT_CNT_BF_WID ( 4)
#define PMA_RX_MSG_SIGDET_CTRL_1_SQLCHDEB_DEB_STAT_CNT_BF_MSK (0x00F00000)
#define PMA_RX_MSG_SIGDET_CTRL_1_SQLCHDEB_DEB_STAT_CNT_BF_DEF (0x00100000)

///< Sqlch debouncer - Number of cycles to wait between sampling the squelch
///< signal
#define PMA_RX_MSG_SIGDET_CTRL_1_SQLCHDEB_IGN_CNT_BF_OFF (24)
#define PMA_RX_MSG_SIGDET_CTRL_1_SQLCHDEB_IGN_CNT_BF_WID ( 4)
#define PMA_RX_MSG_SIGDET_CTRL_1_SQLCHDEB_IGN_CNT_BF_MSK (0x0F000000)
#define PMA_RX_MSG_SIGDET_CTRL_1_SQLCHDEB_IGN_CNT_BF_DEF (0x04000000)

///< Sqlch debouncer - Number of consecutive times squelch is sampled to
///< be de-asserted before pulsing octl_sqlch_exit_good
#define PMA_RX_MSG_SIGDET_CTRL_1_SQLCHDEB_THRESH_CNT_BF_OFF (28)
#define PMA_RX_MSG_SIGDET_CTRL_1_SQLCHDEB_THRESH_CNT_BF_WID ( 4)
#define PMA_RX_MSG_SIGDET_CTRL_1_SQLCHDEB_THRESH_CNT_BF_MSK (0xF0000000)
#define PMA_RX_MSG_SIGDET_CTRL_1_SQLCHDEB_THRESH_CNT_BF_DEF (0x20000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXSIGDET_CTRL_2 register description at address offset 0x164
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxsigdet_ctrl_2
  * Rx Signal Detect Control
  */

typedef union {
  struct {
    uint32_t RXSIGDET_DIGLFPSDETEN_MUXD0 : 2;
    ///< LFPS detection (digital) enable for entry and exit of cdr clock to
    ///< data for Mode A.  Bit [0] = Enable Mode when cdr NOT locked to data;
    ///< Bit [1] = Enable Mode when cdr locked to data
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXSIGDET_DIGLFPSDETEN_MUXD1 : 2;
    ///< LFPS detection (digital) enable for entry and exit of cdr clock to
    ///< data for Mode B.  Bit [0] = Enable Mode when cdr NOT locked to data;
    ///< Bit [1] = Enable Mode when cdr locked to data
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t RXSIGDET_DIGLFPSDETEN_MUXD2 : 2;
    ///< LFPS detection (digital) enable for entry and exit of cdr clock to
    ///< data for Mode C.  Bit [0] = Enable Mode when cdr NOT locked to data;
    ///< Bit [1] = Enable Mode when cdr locked to data
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RXSIGDET_DIGLFPSDETEN_MUXD3 : 2;
    ///< LFPS detection (digital) enable for entry and exit of cdr clock to
    ///< data for Mode D.  Bit [0] = Enable Mode when cdr NOT locked to data;
    ///< Bit [1] = Enable Mode when cdr locked to data
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t RXSIGDET_DIGLFPSDETEN_MUXD4 : 2;
    ///< LFPS detection (digital) enable for entry and exit of cdr clock to
    ///< data for Mode E.  Bit [0] = Enable Mode when cdr NOT locked to data;
    ///< Bit [1] = Enable Mode when cdr locked to data
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RXSIGDET_DIGTRANCNTEN_MUXD0 : 2;
    ///< Transition counter (digital) enable for entry and exit of cdr lock
    ///< to data for Mode A. Bit [0] = Enable Mode when cdr NOT locked to data;
    ///< Bit [1] = Enable Mode when cdr locked to data
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RXSIGDET_DIGTRANCNTEN_MUXD1 : 2;
    ///< Transition counter (digital) enable for entry and exit of cdr lock
    ///< to data for Mode B. Bit [0] = Enable Mode when cdr NOT locked to data;
    ///< Bit [1] = Enable Mode when cdr locked to data
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t RXSIGDET_DIGTRANCNTEN_MUXD2 : 2;
    ///< Transition counter (digital) enable for entry and exit of cdr lock
    ///< to data for Mode C. Bit [0] = Enable Mode when cdr NOT locked to data;
    ///< Bit [1] = Enable Mode when cdr locked to data
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t RXSIGDET_DIGTRANCNTEN_MUXD3 : 2;
    ///< Transition counter (digital) enable for entry and exit of cdr lock
    ///< to data for Mode D. Bit [0] = Enable Mode when cdr NOT locked to data;
    ///< Bit [1] = Enable Mode when cdr locked to data
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t RXSIGDET_DIGTRANCNTEN_MUXD4 : 2;
    ///< Transition counter (digital) enable for entry and exit of cdr lock
    ///< to data for Mode E. Bit [0] = Enable Mode when cdr NOT locked to data;
    ///< Bit [1] = Enable Mode when cdr locked to data
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_sigdet_ctrl_2_reg_t;

#define PMA_RX_MSG_SIGDET_CTRL_2_DEFAULT (0x00000000U)
#define PMA_RX_MSG_SIGDET_CTRL_2_RD_MASK (0x000fffffU)
#define PMA_RX_MSG_SIGDET_CTRL_2_WR_MASK (0x000fffffU)


///< LFPS detection (digital) enable for entry and exit of cdr clock to
///< data for Mode A.  Bit [0] = Enable Mode when cdr NOT locked to data;
///< Bit [1] = Enable Mode when cdr locked to data
#define PMA_RX_MSG_SIGDET_CTRL_2_RXSIGDET_DIGLFPSDETEN_MUXD0_BF_OFF ( 0)
#define PMA_RX_MSG_SIGDET_CTRL_2_RXSIGDET_DIGLFPSDETEN_MUXD0_BF_WID ( 2)
#define PMA_RX_MSG_SIGDET_CTRL_2_RXSIGDET_DIGLFPSDETEN_MUXD0_BF_MSK (0x00000003)
#define PMA_RX_MSG_SIGDET_CTRL_2_RXSIGDET_DIGLFPSDETEN_MUXD0_BF_DEF (0x00000000)

///< LFPS detection (digital) enable for entry and exit of cdr clock to
///< data for Mode B.  Bit [0] = Enable Mode when cdr NOT locked to data;
///< Bit [1] = Enable Mode when cdr locked to data
#define PMA_RX_MSG_SIGDET_CTRL_2_RXSIGDET_DIGLFPSDETEN_MUXD1_BF_OFF ( 2)
#define PMA_RX_MSG_SIGDET_CTRL_2_RXSIGDET_DIGLFPSDETEN_MUXD1_BF_WID ( 2)
#define PMA_RX_MSG_SIGDET_CTRL_2_RXSIGDET_DIGLFPSDETEN_MUXD1_BF_MSK (0x0000000C)
#define PMA_RX_MSG_SIGDET_CTRL_2_RXSIGDET_DIGLFPSDETEN_MUXD1_BF_DEF (0x00000000)

///< LFPS detection (digital) enable for entry and exit of cdr clock to
///< data for Mode C.  Bit [0] = Enable Mode when cdr NOT locked to data;
///< Bit [1] = Enable Mode when cdr locked to data
#define PMA_RX_MSG_SIGDET_CTRL_2_RXSIGDET_DIGLFPSDETEN_MUXD2_BF_OFF ( 4)
#define PMA_RX_MSG_SIGDET_CTRL_2_RXSIGDET_DIGLFPSDETEN_MUXD2_BF_WID ( 2)
#define PMA_RX_MSG_SIGDET_CTRL_2_RXSIGDET_DIGLFPSDETEN_MUXD2_BF_MSK (0x00000030)
#define PMA_RX_MSG_SIGDET_CTRL_2_RXSIGDET_DIGLFPSDETEN_MUXD2_BF_DEF (0x00000000)

///< LFPS detection (digital) enable for entry and exit of cdr clock to
///< data for Mode D.  Bit [0] = Enable Mode when cdr NOT locked to data;
///< Bit [1] = Enable Mode when cdr locked to data
#define PMA_RX_MSG_SIGDET_CTRL_2_RXSIGDET_DIGLFPSDETEN_MUXD3_BF_OFF ( 6)
#define PMA_RX_MSG_SIGDET_CTRL_2_RXSIGDET_DIGLFPSDETEN_MUXD3_BF_WID ( 2)
#define PMA_RX_MSG_SIGDET_CTRL_2_RXSIGDET_DIGLFPSDETEN_MUXD3_BF_MSK (0x000000C0)
#define PMA_RX_MSG_SIGDET_CTRL_2_RXSIGDET_DIGLFPSDETEN_MUXD3_BF_DEF (0x00000000)

///< LFPS detection (digital) enable for entry and exit of cdr clock to
///< data for Mode E.  Bit [0] = Enable Mode when cdr NOT locked to data;
///< Bit [1] = Enable Mode when cdr locked to data
#define PMA_RX_MSG_SIGDET_CTRL_2_RXSIGDET_DIGLFPSDETEN_MUXD4_BF_OFF ( 8)
#define PMA_RX_MSG_SIGDET_CTRL_2_RXSIGDET_DIGLFPSDETEN_MUXD4_BF_WID ( 2)
#define PMA_RX_MSG_SIGDET_CTRL_2_RXSIGDET_DIGLFPSDETEN_MUXD4_BF_MSK (0x00000300)
#define PMA_RX_MSG_SIGDET_CTRL_2_RXSIGDET_DIGLFPSDETEN_MUXD4_BF_DEF (0x00000000)

///< Transition counter (digital) enable for entry and exit of cdr lock
///< to data for Mode A. Bit [0] = Enable Mode when cdr NOT locked to data;
///< Bit [1] = Enable Mode when cdr locked to data
#define PMA_RX_MSG_SIGDET_CTRL_2_RXSIGDET_DIGTRANCNTEN_MUXD0_BF_OFF (10)
#define PMA_RX_MSG_SIGDET_CTRL_2_RXSIGDET_DIGTRANCNTEN_MUXD0_BF_WID ( 2)
#define PMA_RX_MSG_SIGDET_CTRL_2_RXSIGDET_DIGTRANCNTEN_MUXD0_BF_MSK (0x00000C00)
#define PMA_RX_MSG_SIGDET_CTRL_2_RXSIGDET_DIGTRANCNTEN_MUXD0_BF_DEF (0x00000000)

///< Transition counter (digital) enable for entry and exit of cdr lock
///< to data for Mode B. Bit [0] = Enable Mode when cdr NOT locked to data;
///< Bit [1] = Enable Mode when cdr locked to data
#define PMA_RX_MSG_SIGDET_CTRL_2_RXSIGDET_DIGTRANCNTEN_MUXD1_BF_OFF (12)
#define PMA_RX_MSG_SIGDET_CTRL_2_RXSIGDET_DIGTRANCNTEN_MUXD1_BF_WID ( 2)
#define PMA_RX_MSG_SIGDET_CTRL_2_RXSIGDET_DIGTRANCNTEN_MUXD1_BF_MSK (0x00003000)
#define PMA_RX_MSG_SIGDET_CTRL_2_RXSIGDET_DIGTRANCNTEN_MUXD1_BF_DEF (0x00000000)

///< Transition counter (digital) enable for entry and exit of cdr lock
///< to data for Mode C. Bit [0] = Enable Mode when cdr NOT locked to data;
///< Bit [1] = Enable Mode when cdr locked to data
#define PMA_RX_MSG_SIGDET_CTRL_2_RXSIGDET_DIGTRANCNTEN_MUXD2_BF_OFF (14)
#define PMA_RX_MSG_SIGDET_CTRL_2_RXSIGDET_DIGTRANCNTEN_MUXD2_BF_WID ( 2)
#define PMA_RX_MSG_SIGDET_CTRL_2_RXSIGDET_DIGTRANCNTEN_MUXD2_BF_MSK (0x0000C000)
#define PMA_RX_MSG_SIGDET_CTRL_2_RXSIGDET_DIGTRANCNTEN_MUXD2_BF_DEF (0x00000000)

///< Transition counter (digital) enable for entry and exit of cdr lock
///< to data for Mode D. Bit [0] = Enable Mode when cdr NOT locked to data;
///< Bit [1] = Enable Mode when cdr locked to data
#define PMA_RX_MSG_SIGDET_CTRL_2_RXSIGDET_DIGTRANCNTEN_MUXD3_BF_OFF (16)
#define PMA_RX_MSG_SIGDET_CTRL_2_RXSIGDET_DIGTRANCNTEN_MUXD3_BF_WID ( 2)
#define PMA_RX_MSG_SIGDET_CTRL_2_RXSIGDET_DIGTRANCNTEN_MUXD3_BF_MSK (0x00030000)
#define PMA_RX_MSG_SIGDET_CTRL_2_RXSIGDET_DIGTRANCNTEN_MUXD3_BF_DEF (0x00000000)

///< Transition counter (digital) enable for entry and exit of cdr lock
///< to data for Mode E. Bit [0] = Enable Mode when cdr NOT locked to data;
///< Bit [1] = Enable Mode when cdr locked to data
#define PMA_RX_MSG_SIGDET_CTRL_2_RXSIGDET_DIGTRANCNTEN_MUXD4_BF_OFF (18)
#define PMA_RX_MSG_SIGDET_CTRL_2_RXSIGDET_DIGTRANCNTEN_MUXD4_BF_WID ( 2)
#define PMA_RX_MSG_SIGDET_CTRL_2_RXSIGDET_DIGTRANCNTEN_MUXD4_BF_MSK (0x000C0000)
#define PMA_RX_MSG_SIGDET_CTRL_2_RXSIGDET_DIGTRANCNTEN_MUXD4_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXSIGDET_CTRL_3 register description at address offset 0x168
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxsigdet_ctrl_3
  * Rx Signal Detect Control
  */

typedef union {
  struct {
    uint32_t RXSIGDET_EIOSDETEN_MUXD0 : 2;
    ///< EIOS detection (digital) enable for entry and exit of cdr lock to
    ///< data for Mode A. Bit [0] = Enable Mode when cdr NOT locked to data;
    ///< Bit [1] = Enable Mode when cdr locked to data
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXSIGDET_EIOSDETEN_MUXD1 : 2;
    ///< EIOS detection (digital) enable for entry and exit of cdr lock to
    ///< data for Mode B. Bit [0] = Enable Mode when cdr NOT locked to data;
    ///< Bit [1] = Enable Mode when cdr locked to data
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t RXSIGDET_EIOSDETEN_MUXD2 : 2;
    ///< EIOS detection (digital) enable for entry and exit of cdr lock to
    ///< data for Mode C. Bit [0] = Enable Mode when cdr NOT locked to data;
    ///< Bit [1] = Enable Mode when cdr locked to data
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RXSIGDET_EIOSDETEN_MUXD3 : 2;
    ///< EIOS detection (digital) enable for entry and exit of cdr lock to
    ///< data for Mode D. Bit [0] = Enable Mode when cdr NOT locked to data;
    ///< Bit [1] = Enable Mode when cdr locked to data
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t RXSIGDET_EIOSDETEN_MUXD4 : 2;
    ///< EIOS detection (digital) enable for entry and exit of cdr lock to
    ///< data for Mode E. Bit [0] = Enable Mode when cdr NOT locked to data;
    ///< Bit [1] = Enable Mode when cdr locked to data
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RXSIGDET_LEVELDETEN_MUXD0 : 2;
    ///< Level detection (digital) enable for entry and exit of cdr lock to
    ///< data for Mode A. Bit [0] = Enable Mode when cdr NOT locked to data;
    ///< Bit [1] = Enable Mode when cdr locked to data
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RXSIGDET_LEVELDETEN_MUXD1 : 2;
    ///< Level detection (digital) enable for entry and exit of cdr lock to
    ///< data for Mode B. Bit [0] = Enable Mode when cdr NOT locked to data;
    ///< Bit [1] = Enable Mode when cdr locked to data
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t RXSIGDET_LEVELDETEN_MUXD2 : 2;
    ///< Level detection (digital) enable for entry and exit of cdr lock to
    ///< data for Mode C. Bit [0] = Enable Mode when cdr NOT locked to data;
    ///< Bit [1] = Enable Mode when cdr locked to data
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t RXSIGDET_LEVELDETEN_MUXD3 : 2;
    ///< Level detection (digital) enable for entry and exit of cdr lock to
    ///< data for Mode D. Bit [0] = Enable Mode when cdr NOT locked to data;
    ///< Bit [1] = Enable Mode when cdr locked to data
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t RXSIGDET_LEVELDETEN_MUXD4 : 2;
    ///< Level detection (digital) enable for entry and exit of cdr lock to
    ///< data for Mode E. Bit [0] = Enable Mode when cdr NOT locked to data;
    ///< Bit [1] = Enable Mode when cdr locked to data
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t RXSIGDET_PPMDETEN_MUXD0 : 2;
    ///< PPM detection (digital) enable for entry and exit of cdr lock to data
    ///< for Mode A. Bit [0] = Enable Mode when cdr NOT locked to data; Bit
    ///< [1] = Enable Mode when cdr locked to data
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t RXSIGDET_PPMDETEN_MUXD1 : 2;
    ///< PPM detection (digital) enable for entry and exit of cdr lock to data
    ///< for Mode B. Bit [0] = Enable Mode when cdr NOT locked to data; Bit
    ///< [1] = Enable Mode when cdr locked to data
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t RXSIGDET_PPMDETEN_MUXD2 : 2;
    ///< PPM detection (digital) enable for entry and exit of cdr lock to data
    ///< for Mode C. Bit [0] = Enable Mode when cdr NOT locked to data; Bit
    ///< [1] = Enable Mode when cdr locked to data
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t RXSIGDET_PPMDETEN_MUXD3 : 2;
    ///< PPM detection (digital) enable for entry and exit of cdr lock to data
    ///< for Mode D. Bit [0] = Enable Mode when cdr NOT locked to data; Bit
    ///< [1] = Enable Mode when cdr locked to data
    ///< AccessType="RW" BitOffset="26" ResetValue="0x0"
    uint32_t RXSIGDET_PPMDETEN_MUXD4 : 2;
    ///< PPM detection (digital) enable for entry and exit of cdr lock to data
    ///< for Mode E. Bit [0] = Enable Mode when cdr NOT locked to data; Bit
    ///< [1] = Enable Mode when cdr locked to data
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_sigdet_ctrl_3_reg_t;

#define PMA_RX_MSG_SIGDET_CTRL_3_DEFAULT (0x00000000U)
#define PMA_RX_MSG_SIGDET_CTRL_3_RD_MASK (0x3fffffffU)
#define PMA_RX_MSG_SIGDET_CTRL_3_WR_MASK (0x3fffffffU)


///< EIOS detection (digital) enable for entry and exit of cdr lock to
///< data for Mode A. Bit [0] = Enable Mode when cdr NOT locked to data;
///< Bit [1] = Enable Mode when cdr locked to data
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_EIOSDETEN_MUXD0_BF_OFF ( 0)
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_EIOSDETEN_MUXD0_BF_WID ( 2)
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_EIOSDETEN_MUXD0_BF_MSK (0x00000003)
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_EIOSDETEN_MUXD0_BF_DEF (0x00000000)

///< EIOS detection (digital) enable for entry and exit of cdr lock to
///< data for Mode B. Bit [0] = Enable Mode when cdr NOT locked to data;
///< Bit [1] = Enable Mode when cdr locked to data
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_EIOSDETEN_MUXD1_BF_OFF ( 2)
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_EIOSDETEN_MUXD1_BF_WID ( 2)
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_EIOSDETEN_MUXD1_BF_MSK (0x0000000C)
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_EIOSDETEN_MUXD1_BF_DEF (0x00000000)

///< EIOS detection (digital) enable for entry and exit of cdr lock to
///< data for Mode C. Bit [0] = Enable Mode when cdr NOT locked to data;
///< Bit [1] = Enable Mode when cdr locked to data
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_EIOSDETEN_MUXD2_BF_OFF ( 4)
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_EIOSDETEN_MUXD2_BF_WID ( 2)
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_EIOSDETEN_MUXD2_BF_MSK (0x00000030)
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_EIOSDETEN_MUXD2_BF_DEF (0x00000000)

///< EIOS detection (digital) enable for entry and exit of cdr lock to
///< data for Mode D. Bit [0] = Enable Mode when cdr NOT locked to data;
///< Bit [1] = Enable Mode when cdr locked to data
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_EIOSDETEN_MUXD3_BF_OFF ( 6)
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_EIOSDETEN_MUXD3_BF_WID ( 2)
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_EIOSDETEN_MUXD3_BF_MSK (0x000000C0)
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_EIOSDETEN_MUXD3_BF_DEF (0x00000000)

///< EIOS detection (digital) enable for entry and exit of cdr lock to
///< data for Mode E. Bit [0] = Enable Mode when cdr NOT locked to data;
///< Bit [1] = Enable Mode when cdr locked to data
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_EIOSDETEN_MUXD4_BF_OFF ( 8)
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_EIOSDETEN_MUXD4_BF_WID ( 2)
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_EIOSDETEN_MUXD4_BF_MSK (0x00000300)
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_EIOSDETEN_MUXD4_BF_DEF (0x00000000)

///< Level detection (digital) enable for entry and exit of cdr lock to
///< data for Mode A. Bit [0] = Enable Mode when cdr NOT locked to data;
///< Bit [1] = Enable Mode when cdr locked to data
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_LVLDETEN_MUXD0_BF_OFF (10)
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_LVLDETEN_MUXD0_BF_WID ( 2)
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_LVLDETEN_MUXD0_BF_MSK (0x00000C00)
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_LVLDETEN_MUXD0_BF_DEF (0x00000000)

///< Level detection (digital) enable for entry and exit of cdr lock to
///< data for Mode B. Bit [0] = Enable Mode when cdr NOT locked to data;
///< Bit [1] = Enable Mode when cdr locked to data
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_LVLDETEN_MUXD1_BF_OFF (12)
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_LVLDETEN_MUXD1_BF_WID ( 2)
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_LVLDETEN_MUXD1_BF_MSK (0x00003000)
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_LVLDETEN_MUXD1_BF_DEF (0x00000000)

///< Level detection (digital) enable for entry and exit of cdr lock to
///< data for Mode C. Bit [0] = Enable Mode when cdr NOT locked to data;
///< Bit [1] = Enable Mode when cdr locked to data
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_LVLDETEN_MUXD2_BF_OFF (14)
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_LVLDETEN_MUXD2_BF_WID ( 2)
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_LVLDETEN_MUXD2_BF_MSK (0x0000C000)
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_LVLDETEN_MUXD2_BF_DEF (0x00000000)

///< Level detection (digital) enable for entry and exit of cdr lock to
///< data for Mode D. Bit [0] = Enable Mode when cdr NOT locked to data;
///< Bit [1] = Enable Mode when cdr locked to data
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_LVLDETEN_MUXD3_BF_OFF (16)
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_LVLDETEN_MUXD3_BF_WID ( 2)
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_LVLDETEN_MUXD3_BF_MSK (0x00030000)
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_LVLDETEN_MUXD3_BF_DEF (0x00000000)

///< Level detection (digital) enable for entry and exit of cdr lock to
///< data for Mode E. Bit [0] = Enable Mode when cdr NOT locked to data;
///< Bit [1] = Enable Mode when cdr locked to data
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_LVLDETEN_MUXD4_BF_OFF (18)
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_LVLDETEN_MUXD4_BF_WID ( 2)
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_LVLDETEN_MUXD4_BF_MSK (0x000C0000)
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_LVLDETEN_MUXD4_BF_DEF (0x00000000)

///< PPM detection (digital) enable for entry and exit of cdr lock to data
///< for Mode A. Bit [0] = Enable Mode when cdr NOT locked to data; Bit
///< [1] = Enable Mode when cdr locked to data
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_PPMDETEN_MUXD0_BF_OFF (20)
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_PPMDETEN_MUXD0_BF_WID ( 2)
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_PPMDETEN_MUXD0_BF_MSK (0x00300000)
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_PPMDETEN_MUXD0_BF_DEF (0x00000000)

///< PPM detection (digital) enable for entry and exit of cdr lock to data
///< for Mode B. Bit [0] = Enable Mode when cdr NOT locked to data; Bit
///< [1] = Enable Mode when cdr locked to data
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_PPMDETEN_MUXD1_BF_OFF (22)
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_PPMDETEN_MUXD1_BF_WID ( 2)
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_PPMDETEN_MUXD1_BF_MSK (0x00C00000)
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_PPMDETEN_MUXD1_BF_DEF (0x00000000)

///< PPM detection (digital) enable for entry and exit of cdr lock to data
///< for Mode C. Bit [0] = Enable Mode when cdr NOT locked to data; Bit
///< [1] = Enable Mode when cdr locked to data
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_PPMDETEN_MUXD2_BF_OFF (24)
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_PPMDETEN_MUXD2_BF_WID ( 2)
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_PPMDETEN_MUXD2_BF_MSK (0x03000000)
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_PPMDETEN_MUXD2_BF_DEF (0x00000000)

///< PPM detection (digital) enable for entry and exit of cdr lock to data
///< for Mode D. Bit [0] = Enable Mode when cdr NOT locked to data; Bit
///< [1] = Enable Mode when cdr locked to data
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_PPMDETEN_MUXD3_BF_OFF (26)
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_PPMDETEN_MUXD3_BF_WID ( 2)
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_PPMDETEN_MUXD3_BF_MSK (0x0C000000)
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_PPMDETEN_MUXD3_BF_DEF (0x00000000)

///< PPM detection (digital) enable for entry and exit of cdr lock to data
///< for Mode E. Bit [0] = Enable Mode when cdr NOT locked to data; Bit
///< [1] = Enable Mode when cdr locked to data
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_PPMDETEN_MUXD4_BF_OFF (28)
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_PPMDETEN_MUXD4_BF_WID ( 2)
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_PPMDETEN_MUXD4_BF_MSK (0x30000000)
#define PMA_RX_MSG_SIGDET_CTRL_3_RXSIGDET_PPMDETEN_MUXD4_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXSIGDET_CTRL_4 register description at address offset 0x16c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxsigdet_ctrl_4
  * Rx Signal Detect Control
  */

typedef union {
  struct {
    uint32_t RXCDRVCO_DATAPROPGAIN_HIGH_MUXD0 : 5;
    ///< Rx signal detection  data prop gain upper boundary in Mode A
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXCDRVCO_DATAPROPGAIN_HIGH_MUXD1 : 5;
    ///< Rx signal detection  data prop gain upper boundary in Mode B
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t RXCDRVCO_DATAPROPGAIN_HIGH_MUXD2 : 5;
    ///< Rx signal detection  data prop gain upper boundary in Mode C
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RXCDRVCO_DATAPROPGAIN_HIGH_MUXD3 : 5;
    ///< Rx signal detection  data prop gain upper boundary in Mode D
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RXCDRVCO_DATAPROPGAIN_HIGH_MUXD4 : 5;
    ///< Rx signal detection  data prop gain upper boundary in Mode E
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t  : 7;
    ///< Reserved
    ///< AccessType="RO" BitOffset="25" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_sigdet_ctrl_4_reg_t;

#define PMA_RX_MSG_SIGDET_CTRL_4_DEFAULT (0x00000000U)
#define PMA_RX_MSG_SIGDET_CTRL_4_RD_MASK (0x01ffffffU)
#define PMA_RX_MSG_SIGDET_CTRL_4_WR_MASK (0x01ffffffU)


///< Rx signal detection  data prop gain upper boundary in Mode A
#define PMA_RX_MSG_SIGDET_CTRL_4_RXCDRVCO_DATAPROPGAIN_HIGH_MUXD0_BF_OFF ( 0)
#define PMA_RX_MSG_SIGDET_CTRL_4_RXCDRVCO_DATAPROPGAIN_HIGH_MUXD0_BF_WID ( 5)
#define PMA_RX_MSG_SIGDET_CTRL_4_RXCDRVCO_DATAPROPGAIN_HIGH_MUXD0_BF_MSK (0x0000001F)
#define PMA_RX_MSG_SIGDET_CTRL_4_RXCDRVCO_DATAPROPGAIN_HIGH_MUXD0_BF_DEF (0x00000000)

///< Rx signal detection  data prop gain upper boundary in Mode B
#define PMA_RX_MSG_SIGDET_CTRL_4_RXCDRVCO_DATAPROPGAIN_HIGH_MUXD1_BF_OFF ( 5)
#define PMA_RX_MSG_SIGDET_CTRL_4_RXCDRVCO_DATAPROPGAIN_HIGH_MUXD1_BF_WID ( 5)
#define PMA_RX_MSG_SIGDET_CTRL_4_RXCDRVCO_DATAPROPGAIN_HIGH_MUXD1_BF_MSK (0x000003E0)
#define PMA_RX_MSG_SIGDET_CTRL_4_RXCDRVCO_DATAPROPGAIN_HIGH_MUXD1_BF_DEF (0x00000000)

///< Rx signal detection  data prop gain upper boundary in Mode C
#define PMA_RX_MSG_SIGDET_CTRL_4_RXCDRVCO_DATAPROPGAIN_HIGH_MUXD2_BF_OFF (10)
#define PMA_RX_MSG_SIGDET_CTRL_4_RXCDRVCO_DATAPROPGAIN_HIGH_MUXD2_BF_WID ( 5)
#define PMA_RX_MSG_SIGDET_CTRL_4_RXCDRVCO_DATAPROPGAIN_HIGH_MUXD2_BF_MSK (0x00007C00)
#define PMA_RX_MSG_SIGDET_CTRL_4_RXCDRVCO_DATAPROPGAIN_HIGH_MUXD2_BF_DEF (0x00000000)

///< Rx signal detection  data prop gain upper boundary in Mode D
#define PMA_RX_MSG_SIGDET_CTRL_4_RXCDRVCO_DATAPROPGAIN_HIGH_MUXD3_BF_OFF (15)
#define PMA_RX_MSG_SIGDET_CTRL_4_RXCDRVCO_DATAPROPGAIN_HIGH_MUXD3_BF_WID ( 5)
#define PMA_RX_MSG_SIGDET_CTRL_4_RXCDRVCO_DATAPROPGAIN_HIGH_MUXD3_BF_MSK (0x000F8000)
#define PMA_RX_MSG_SIGDET_CTRL_4_RXCDRVCO_DATAPROPGAIN_HIGH_MUXD3_BF_DEF (0x00000000)

///< Rx signal detection  data prop gain upper boundary in Mode E
#define PMA_RX_MSG_SIGDET_CTRL_4_RXCDRVCO_DATAPROPGAIN_HIGH_MUXD4_BF_OFF (20)
#define PMA_RX_MSG_SIGDET_CTRL_4_RXCDRVCO_DATAPROPGAIN_HIGH_MUXD4_BF_WID ( 5)
#define PMA_RX_MSG_SIGDET_CTRL_4_RXCDRVCO_DATAPROPGAIN_HIGH_MUXD4_BF_MSK (0x01F00000)
#define PMA_RX_MSG_SIGDET_CTRL_4_RXCDRVCO_DATAPROPGAIN_HIGH_MUXD4_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXSIGDET_CTRL_5 register description at address offset 0x170
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxsigdet_ctrl_5
  * Rx Signal Detect Control
  */

typedef union {
  struct {
    uint32_t RXCDRVCO_DATAPROPGAIN_LOW_MUXD0 : 5;
    ///< Rx signal detection  data prop gain lower boundary in Mode A
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXCDRVCO_DATAPROPGAIN_LOW_MUXD1 : 5;
    ///< Rx signal detection  data prop gain lower boundary in Mode B
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t RXCDRVCO_DATAPROPGAIN_LOW_MUXD2 : 5;
    ///< Rx signal detection  data prop gain lower boundary in Mode C
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RXCDRVCO_DATAPROPGAIN_LOW_MUXD3 : 5;
    ///< Rx signal detection  data prop gain lower boundary in Mode D
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RXCDRVCO_DATAPROPGAIN_LOW_MUXD4 : 5;
    ///< Rx signal detection  data prop gain lower boundary in Mode E
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t  : 7;
    ///< Reserved
    ///< AccessType="RO" BitOffset="25" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_sigdet_ctrl_5_reg_t;

#define PMA_RX_MSG_SIGDET_CTRL_5_DEFAULT (0x00000000U)
#define PMA_RX_MSG_SIGDET_CTRL_5_RD_MASK (0x01ffffffU)
#define PMA_RX_MSG_SIGDET_CTRL_5_WR_MASK (0x01ffffffU)


///< Rx signal detection  data prop gain lower boundary in Mode A
#define PMA_RX_MSG_SIGDET_CTRL_5_RXCDRVCO_DATAPROPGAIN_LOW_MUXD0_BF_OFF ( 0)
#define PMA_RX_MSG_SIGDET_CTRL_5_RXCDRVCO_DATAPROPGAIN_LOW_MUXD0_BF_WID ( 5)
#define PMA_RX_MSG_SIGDET_CTRL_5_RXCDRVCO_DATAPROPGAIN_LOW_MUXD0_BF_MSK (0x0000001F)
#define PMA_RX_MSG_SIGDET_CTRL_5_RXCDRVCO_DATAPROPGAIN_LOW_MUXD0_BF_DEF (0x00000000)

///< Rx signal detection  data prop gain lower boundary in Mode B
#define PMA_RX_MSG_SIGDET_CTRL_5_RXCDRVCO_DATAPROPGAIN_LOW_MUXD1_BF_OFF ( 5)
#define PMA_RX_MSG_SIGDET_CTRL_5_RXCDRVCO_DATAPROPGAIN_LOW_MUXD1_BF_WID ( 5)
#define PMA_RX_MSG_SIGDET_CTRL_5_RXCDRVCO_DATAPROPGAIN_LOW_MUXD1_BF_MSK (0x000003E0)
#define PMA_RX_MSG_SIGDET_CTRL_5_RXCDRVCO_DATAPROPGAIN_LOW_MUXD1_BF_DEF (0x00000000)

///< Rx signal detection  data prop gain lower boundary in Mode C
#define PMA_RX_MSG_SIGDET_CTRL_5_RXCDRVCO_DATAPROPGAIN_LOW_MUXD2_BF_OFF (10)
#define PMA_RX_MSG_SIGDET_CTRL_5_RXCDRVCO_DATAPROPGAIN_LOW_MUXD2_BF_WID ( 5)
#define PMA_RX_MSG_SIGDET_CTRL_5_RXCDRVCO_DATAPROPGAIN_LOW_MUXD2_BF_MSK (0x00007C00)
#define PMA_RX_MSG_SIGDET_CTRL_5_RXCDRVCO_DATAPROPGAIN_LOW_MUXD2_BF_DEF (0x00000000)

///< Rx signal detection  data prop gain lower boundary in Mode D
#define PMA_RX_MSG_SIGDET_CTRL_5_RXCDRVCO_DATAPROPGAIN_LOW_MUXD3_BF_OFF (15)
#define PMA_RX_MSG_SIGDET_CTRL_5_RXCDRVCO_DATAPROPGAIN_LOW_MUXD3_BF_WID ( 5)
#define PMA_RX_MSG_SIGDET_CTRL_5_RXCDRVCO_DATAPROPGAIN_LOW_MUXD3_BF_MSK (0x000F8000)
#define PMA_RX_MSG_SIGDET_CTRL_5_RXCDRVCO_DATAPROPGAIN_LOW_MUXD3_BF_DEF (0x00000000)

///< Rx signal detection  data prop gain lower boundary in Mode E
#define PMA_RX_MSG_SIGDET_CTRL_5_RXCDRVCO_DATAPROPGAIN_LOW_MUXD4_BF_OFF (20)
#define PMA_RX_MSG_SIGDET_CTRL_5_RXCDRVCO_DATAPROPGAIN_LOW_MUXD4_BF_WID ( 5)
#define PMA_RX_MSG_SIGDET_CTRL_5_RXCDRVCO_DATAPROPGAIN_LOW_MUXD4_BF_MSK (0x01F00000)
#define PMA_RX_MSG_SIGDET_CTRL_5_RXCDRVCO_DATAPROPGAIN_LOW_MUXD4_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXSIGDET_CTRL_6 register description at address offset 0x174
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxsigdet_ctrl_6
  * Rx Signal Detect Control
  */

typedef union {
  struct {
    uint32_t SQLCHDEBOUT_LOCOVREN : 1;
    ///< Sqlch debounce override enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TRANCNTOUT_LOCOVREN : 1;
    ///< Tran Count detect override enable
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RXSIGDETIN_LOCOVREN : 1;
    ///< Signal detect override enable
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t RXSIGDET_LOCOVREN : 1;
    ///< Signal detect over CDR lock-to-data override enable
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RXSIGDETOUT_LOCOVREN : 1;
    ///< Signal detect lock-to-data No force lock-to-reference override enable
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RXSQLCHDEB_LOCOVREN : 1;
    ///< Signal detect debouce signal detect override enable
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t SQLCHDEBOUT_EXIT_GOOD_LOCOVR : 1;
    ///< Sqlch debounce exit good override value
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t SQLCHDEBOUT_EXIT_GOOD_DEBOUNCED_LOCOVR : 1;
    ///< Sqlch debounce exit good debounced override value
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t SQLCHDEBOUT_EXIT_GOOD_DEBOUNCED_STATUS_LOCOVR : 1;
    ///< Sqlch debounce exit good debounced status override value
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t TRANCNTOUT_DET_LOCOVR : 1;
    ///< Tran Count detect override value
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t RXSIGDETIN_EIOSDETECTSTAT_LOCOVR : 1;
    ///< Signal detect EIOS detect status override value
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RXSIGDETIN_OVRCDRLOCK2DATA_LOCOVR : 1;
    ///< Signal detect over CDR lock-to-data overrice enable
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t RXSIGDETIN_OVRENCDRLOCK2DATA_LOCOVR : 1;
    ///< Signal detect over CDR lock-to-data enable override value
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t RXSIGDET_CDRLOCK2DATA_LOCOVR : 1;
    ///< Signal detect over CDR lock-to-data override value
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t RXSIGDETOUT_LOCK2DATA_NOFORCE_LTR_LOCOVR : 1;
    ///< Signal detect lock-to-data No force lock-to-reference override value
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t RXSQLCHDEB_SIGDET_LOCOVR : 1;
    ///< Signal detect debouce signal detect override value
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RXSIGDET_FWDETEN_TYPE : 2;
    ///< FW  detect type. Bit 0: 0 - fwdetsate (from reg); 1 - fwdet_negedge.
    ///< Bit 1: 0 - NOT fwdetsate from Reg; 1 - fwdet_posedge
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t RXSIGDET_FWDETECTSTAT : 1;
    ///< FW Detected rx signal (from vref/vga/hist results)
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t RXSIGDET_FWDETEN : 2;
    ///< FW detection (digital) enable for entry and exit of cdr clock to data
    ///< for Mode A.  Bit [0] = Enable Mode when cdr NOT locked to data; Bit
    ///< [1] = Enable Mode when cdr locked to data
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t RXSIGDET_VOLTENVDETEN_TYPE : 2;
    ///< Volt Envelope  detect type. Bit 0: 0 - fwdetsate (from reg); 1 - fwdet_negedge.
    ///< Bit 1: 0 - NOT fwdetsate from Reg; 1 - fwdet_posedge
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t RXSIGDET_VOLTENVDETEN : 2;
    ///< Volt Envelope detection (digital) enable for entry and exit of cdr
    ///< clock to data for Mode A.  Bit [0] = Enable Mode when cdr NOT locked
    ///< to data; Bit [1] = Enable Mode when cdr locked to data
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t RXSIGDET_UPDET_CLEAR : 1;
    ///< Clear sigdet RO FSM updet sticky bit
    ///< AccessType="RW" BitOffset="25" ResetValue="0x0"
    uint32_t RXSIGDET_DNDET_CLEAR : 1;
    ///< Clear sigdet RO FSM dndet sticky bit
    ///< AccessType="RW" BitOffset="26" ResetValue="0x0"
    uint32_t RXCDRLOCK2DATA_TO_CDR_LOCOVREN : 1;
    ///< CDR Lock 2 Data Override - This override is isolated to CDR only.
    ///< AccessType="RW" BitOffset="27" ResetValue="0x0"
    uint32_t RXCDRLOCK2DATA_TO_CDR_LOCOVR : 1;
    ///< CDR Lock 2 Data Override Value - This override is isolated to CDR
    ///< only.
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t RX_PD_VARACTOR_PRESET_B_LOCOVREN : 1;
    ///< Varactor reset Override Enable
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
    uint32_t RX_PD_VARACTOR_PRESET_B_LOCOVR : 1;
    ///< Varactor reset Override Value
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_sigdet_ctrl_6_reg_t;

#define PMA_RX_MSG_SIGDET_CTRL_6_DEFAULT (0x00000000U)
#define PMA_RX_MSG_SIGDET_CTRL_6_RD_MASK (0x7fffffffU)
#define PMA_RX_MSG_SIGDET_CTRL_6_WR_MASK (0x7fffffffU)


///< Sqlch debounce override enable
#define PMA_RX_MSG_SIGDET_CTRL_6_SQLCHDEBOUT_LOCOVREN_BF_OFF ( 0)
#define PMA_RX_MSG_SIGDET_CTRL_6_SQLCHDEBOUT_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MSG_SIGDET_CTRL_6_SQLCHDEBOUT_LOCOVREN_BF_MSK (0x00000001)
#define PMA_RX_MSG_SIGDET_CTRL_6_SQLCHDEBOUT_LOCOVREN_BF_DEF (0x00000000)

///< Tran Count detect override enable
#define PMA_RX_MSG_SIGDET_CTRL_6_TRANCNTOUT_LOCOVREN_BF_OFF ( 1)
#define PMA_RX_MSG_SIGDET_CTRL_6_TRANCNTOUT_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MSG_SIGDET_CTRL_6_TRANCNTOUT_LOCOVREN_BF_MSK (0x00000002)
#define PMA_RX_MSG_SIGDET_CTRL_6_TRANCNTOUT_LOCOVREN_BF_DEF (0x00000000)

///< Signal detect override enable
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDETIN_LOCOVREN_BF_OFF ( 2)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDETIN_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDETIN_LOCOVREN_BF_MSK (0x00000004)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDETIN_LOCOVREN_BF_DEF (0x00000000)

///< Signal detect over CDR lock-to-data override enable
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDET_LOCOVREN_BF_OFF ( 3)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDET_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDET_LOCOVREN_BF_MSK (0x00000008)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDET_LOCOVREN_BF_DEF (0x00000000)

///< Signal detect lock-to-data No force lock-to-reference override enable
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDETOUT_LOCOVREN_BF_OFF ( 4)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDETOUT_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDETOUT_LOCOVREN_BF_MSK (0x00000010)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDETOUT_LOCOVREN_BF_DEF (0x00000000)

///< Signal detect debouce signal detect override enable
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSQLCHDEB_LOCOVREN_BF_OFF ( 5)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSQLCHDEB_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSQLCHDEB_LOCOVREN_BF_MSK (0x00000020)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSQLCHDEB_LOCOVREN_BF_DEF (0x00000000)

///< Sqlch debounce exit good override value
#define PMA_RX_MSG_SIGDET_CTRL_6_SQLCHDEBOUT_EXIT_GOOD_LOCOVR_BF_OFF ( 6)
#define PMA_RX_MSG_SIGDET_CTRL_6_SQLCHDEBOUT_EXIT_GOOD_LOCOVR_BF_WID ( 1)
#define PMA_RX_MSG_SIGDET_CTRL_6_SQLCHDEBOUT_EXIT_GOOD_LOCOVR_BF_MSK (0x00000040)
#define PMA_RX_MSG_SIGDET_CTRL_6_SQLCHDEBOUT_EXIT_GOOD_LOCOVR_BF_DEF (0x00000000)

///< Sqlch debounce exit good debounced override value
#define PMA_RX_MSG_SIGDET_CTRL_6_SQLCHDEBOUT_EXIT_GOOD_DEBOUNCED_LOCOVR_BF_OFF ( 7)
#define PMA_RX_MSG_SIGDET_CTRL_6_SQLCHDEBOUT_EXIT_GOOD_DEBOUNCED_LOCOVR_BF_WID ( 1)
#define PMA_RX_MSG_SIGDET_CTRL_6_SQLCHDEBOUT_EXIT_GOOD_DEBOUNCED_LOCOVR_BF_MSK (0x00000080)
#define PMA_RX_MSG_SIGDET_CTRL_6_SQLCHDEBOUT_EXIT_GOOD_DEBOUNCED_LOCOVR_BF_DEF (0x00000000)

///< Sqlch debounce exit good debounced status override value
#define PMA_RX_MSG_SIGDET_CTRL_6_SQLCHDEBOUT_EXIT_GOOD_DEBOUNCED_STAT_LOCOVR_BF_OFF ( 8)
#define PMA_RX_MSG_SIGDET_CTRL_6_SQLCHDEBOUT_EXIT_GOOD_DEBOUNCED_STAT_LOCOVR_BF_WID ( 1)
#define PMA_RX_MSG_SIGDET_CTRL_6_SQLCHDEBOUT_EXIT_GOOD_DEBOUNCED_STAT_LOCOVR_BF_MSK (0x00000100)
#define PMA_RX_MSG_SIGDET_CTRL_6_SQLCHDEBOUT_EXIT_GOOD_DEBOUNCED_STAT_LOCOVR_BF_DEF (0x00000000)

///< Tran Count detect override value
#define PMA_RX_MSG_SIGDET_CTRL_6_TRANCNTOUT_DET_LOCOVR_BF_OFF ( 9)
#define PMA_RX_MSG_SIGDET_CTRL_6_TRANCNTOUT_DET_LOCOVR_BF_WID ( 1)
#define PMA_RX_MSG_SIGDET_CTRL_6_TRANCNTOUT_DET_LOCOVR_BF_MSK (0x00000200)
#define PMA_RX_MSG_SIGDET_CTRL_6_TRANCNTOUT_DET_LOCOVR_BF_DEF (0x00000000)

///< Signal detect EIOS detect status override value
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDETIN_EIOSDETECTSTAT_LOCOVR_BF_OFF (10)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDETIN_EIOSDETECTSTAT_LOCOVR_BF_WID ( 1)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDETIN_EIOSDETECTSTAT_LOCOVR_BF_MSK (0x00000400)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDETIN_EIOSDETECTSTAT_LOCOVR_BF_DEF (0x00000000)

///< Signal detect over CDR lock-to-data overrice enable
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDETIN_OVRCDRLOCK2DATA_LOCOVR_BF_OFF (11)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDETIN_OVRCDRLOCK2DATA_LOCOVR_BF_WID ( 1)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDETIN_OVRCDRLOCK2DATA_LOCOVR_BF_MSK (0x00000800)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDETIN_OVRCDRLOCK2DATA_LOCOVR_BF_DEF (0x00000000)

///< Signal detect over CDR lock-to-data enable override value
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDETIN_OVRENCDRLOCK2DATA_LOCOVR_BF_OFF (12)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDETIN_OVRENCDRLOCK2DATA_LOCOVR_BF_WID ( 1)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDETIN_OVRENCDRLOCK2DATA_LOCOVR_BF_MSK (0x00001000)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDETIN_OVRENCDRLOCK2DATA_LOCOVR_BF_DEF (0x00000000)

///< Signal detect over CDR lock-to-data override value
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDET_CDRLOCK2DATA_LOCOVR_BF_OFF (13)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDET_CDRLOCK2DATA_LOCOVR_BF_WID ( 1)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDET_CDRLOCK2DATA_LOCOVR_BF_MSK (0x00002000)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDET_CDRLOCK2DATA_LOCOVR_BF_DEF (0x00000000)

///< Signal detect lock-to-data No force lock-to-reference override value
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDETOUT_LOCK2DATA_NOFORCE_LTR_LOCOVR_BF_OFF (14)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDETOUT_LOCK2DATA_NOFORCE_LTR_LOCOVR_BF_WID ( 1)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDETOUT_LOCK2DATA_NOFORCE_LTR_LOCOVR_BF_MSK (0x00004000)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDETOUT_LOCK2DATA_NOFORCE_LTR_LOCOVR_BF_DEF (0x00000000)

///< Signal detect debouce signal detect override value
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSQLCHDEB_SIGDET_LOCOVR_BF_OFF (15)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSQLCHDEB_SIGDET_LOCOVR_BF_WID ( 1)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSQLCHDEB_SIGDET_LOCOVR_BF_MSK (0x00008000)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSQLCHDEB_SIGDET_LOCOVR_BF_DEF (0x00000000)

///< FW  detect type. Bit 0: 0 - fwdetsate (from reg); 1 - fwdet_negedge.
///< Bit 1: 0 - NOT fwdetsate from Reg; 1 - fwdet_posedge
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDET_FWDETEN_TYPE_BF_OFF (16)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDET_FWDETEN_TYPE_BF_WID ( 2)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDET_FWDETEN_TYPE_BF_MSK (0x00030000)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDET_FWDETEN_TYPE_BF_DEF (0x00000000)

///< FW Detected rx signal (from vref/vga/hist results)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDET_FWDETECTSTAT_BF_OFF (18)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDET_FWDETECTSTAT_BF_WID ( 1)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDET_FWDETECTSTAT_BF_MSK (0x00040000)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDET_FWDETECTSTAT_BF_DEF (0x00000000)

///< FW detection (digital) enable for entry and exit of cdr clock to data
///< for Mode A.  Bit [0] = Enable Mode when cdr NOT locked to data; Bit
///< [1] = Enable Mode when cdr locked to data
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDET_FWDETEN_BF_OFF (19)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDET_FWDETEN_BF_WID ( 2)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDET_FWDETEN_BF_MSK (0x00180000)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDET_FWDETEN_BF_DEF (0x00000000)

///< Volt Envelope  detect type. Bit 0: 0 - fwdetsate (from reg); 1 - fwdet_negedge.
///< Bit 1: 0 - NOT fwdetsate from Reg; 1 - fwdet_posedge
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDET_VOLTENVDETEN_TYPE_BF_OFF (21)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDET_VOLTENVDETEN_TYPE_BF_WID ( 2)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDET_VOLTENVDETEN_TYPE_BF_MSK (0x00600000)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDET_VOLTENVDETEN_TYPE_BF_DEF (0x00000000)

///< Volt Envelope detection (digital) enable for entry and exit of cdr
///< clock to data for Mode A.  Bit [0] = Enable Mode when cdr NOT locked
///< to data; Bit [1] = Enable Mode when cdr locked to data
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDET_VOLTENVDETEN_BF_OFF (23)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDET_VOLTENVDETEN_BF_WID ( 2)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDET_VOLTENVDETEN_BF_MSK (0x01800000)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDET_VOLTENVDETEN_BF_DEF (0x00000000)

///< Clear sigdet RO FSM updet sticky bit
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDET_UPDET_CLR_BF_OFF (25)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDET_UPDET_CLR_BF_WID ( 1)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDET_UPDET_CLR_BF_MSK (0x02000000)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDET_UPDET_CLR_BF_DEF (0x00000000)

///< Clear sigdet RO FSM dndet sticky bit
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDET_DNDET_CLR_BF_OFF (26)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDET_DNDET_CLR_BF_WID ( 1)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDET_DNDET_CLR_BF_MSK (0x04000000)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXSIGDET_DNDET_CLR_BF_DEF (0x00000000)

///< CDR Lock 2 Data Override - This override is isolated to CDR only.
#define PMA_RX_MSG_SIGDET_CTRL_6_RXCDRLOCK2DATA_TO_CDR_LOCOVREN_BF_OFF (27)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXCDRLOCK2DATA_TO_CDR_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXCDRLOCK2DATA_TO_CDR_LOCOVREN_BF_MSK (0x08000000)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXCDRLOCK2DATA_TO_CDR_LOCOVREN_BF_DEF (0x00000000)

///< CDR Lock 2 Data Override Value - This override is isolated to CDR
///< only.
#define PMA_RX_MSG_SIGDET_CTRL_6_RXCDRLOCK2DATA_TO_CDR_LOCOVR_BF_OFF (28)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXCDRLOCK2DATA_TO_CDR_LOCOVR_BF_WID ( 1)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXCDRLOCK2DATA_TO_CDR_LOCOVR_BF_MSK (0x10000000)
#define PMA_RX_MSG_SIGDET_CTRL_6_RXCDRLOCK2DATA_TO_CDR_LOCOVR_BF_DEF (0x00000000)

///< Varactor reset Override Enable
#define PMA_RX_MSG_SIGDET_CTRL_6_RX_PD_VARACTOR_PRST_B_LOCOVREN_BF_OFF (29)
#define PMA_RX_MSG_SIGDET_CTRL_6_RX_PD_VARACTOR_PRST_B_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MSG_SIGDET_CTRL_6_RX_PD_VARACTOR_PRST_B_LOCOVREN_BF_MSK (0x20000000)
#define PMA_RX_MSG_SIGDET_CTRL_6_RX_PD_VARACTOR_PRST_B_LOCOVREN_BF_DEF (0x00000000)

///< Varactor reset Override Value
#define PMA_RX_MSG_SIGDET_CTRL_6_RX_PD_VARACTOR_PRST_B_LOCOVR_BF_OFF (30)
#define PMA_RX_MSG_SIGDET_CTRL_6_RX_PD_VARACTOR_PRST_B_LOCOVR_BF_WID ( 1)
#define PMA_RX_MSG_SIGDET_CTRL_6_RX_PD_VARACTOR_PRST_B_LOCOVR_BF_MSK (0x40000000)
#define PMA_RX_MSG_SIGDET_CTRL_6_RX_PD_VARACTOR_PRST_B_LOCOVR_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXSIGDET_CTRL_7 register description at address offset 0x178
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxsigdet_ctrl_7
  * Rx Signal Detect Control
  */

typedef union {
  struct {
    uint32_t TRANCNT_OFF : 10;
    ///< ignal transition detect - off
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TRANCNT_ON : 10;
    ///< ignal transition detect - on
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_sigdet_ctrl_7_reg_t;

#define PMA_RX_MSG_SIGDET_CTRL_7_DEFAULT (0x00000000U)
#define PMA_RX_MSG_SIGDET_CTRL_7_RD_MASK (0x000fffffU)
#define PMA_RX_MSG_SIGDET_CTRL_7_WR_MASK (0x000fffffU)


///< ignal transition detect - off
#define PMA_RX_MSG_SIGDET_CTRL_7_TRANCNT_OFF_BF_OFF ( 0)
#define PMA_RX_MSG_SIGDET_CTRL_7_TRANCNT_OFF_BF_WID (10)
#define PMA_RX_MSG_SIGDET_CTRL_7_TRANCNT_OFF_BF_MSK (0x000003FF)
#define PMA_RX_MSG_SIGDET_CTRL_7_TRANCNT_OFF_BF_DEF (0x00000000)

///< ignal transition detect - on
#define PMA_RX_MSG_SIGDET_CTRL_7_TRANCNT_ON_BF_OFF (10)
#define PMA_RX_MSG_SIGDET_CTRL_7_TRANCNT_ON_BF_WID (10)
#define PMA_RX_MSG_SIGDET_CTRL_7_TRANCNT_ON_BF_MSK (0x000FFC00)
#define PMA_RX_MSG_SIGDET_CTRL_7_TRANCNT_ON_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXSIGDET_CTRL_RO register description at address offset 0x17c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxsigdet_ctrl_ro
  * Rx Signal Detect Control readback
  */

typedef union {
  struct {
    uint32_t SQLCHDEBOUT_EXIT_GOOD_LOC : 1;
    ///< Sqlch debounce exit good pre-override value
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t SQLCHDEBOUT_EXIT_GOOD_DEBOUNCED_LOC : 1;
    ///< Sqlch debounce exit good debounced pre-override value
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t SQLCHDEBOUT_EXIT_GOOD_DEBOUNCED_STATUS_LOC : 1;
    ///< Sqlch debounce exit good debounced status pre-override value
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t TRANCNTOUT_DET_LOC : 1;
    ///< Tran Count detect pre-override value
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t RXSIGDETIN_EIOSDETECTSTAT_LOC : 1;
    ///< Signal detect EIOS detect status pre-override value
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t RXSIGDETIN_OVRCDRLOCK2DATA_LOC : 1;
    ///< Signal detect over CDR lock-to-data overrice enable
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t RXSIGDETIN_OVRENCDRLOCK2DATA_LOC : 1;
    ///< Signal detect over CDR lock-to-data enable pre-override value
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t RXSIGDET_CDRLOCK2DATA_LOC : 1;
    ///< Signal detect over CDR lock-to-data pre-override value to lock2data
    ///< timer.
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t RXSIGDET_CDRLOCK2DATA_TO_CDR_LOC : 1;
    ///< Signal detect over CDR lock-to-data pre-override value to CDR.
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t RXSIGDETOUT_LOCK2DATA_NOFORCE_LTR_LOC : 1;
    ///< Signal detect lock-to-data No force lock-to-reference pre-override
    ///< value
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t RXSQLCHDEB_SIGDET_LOC : 1;
    ///< Signal detect debouce signal detect pre-override value
    ///< AccessType="RO/V" BitOffset="10" ResetValue="0x0"
    uint32_t RX_PD_VARACTOR_PRESET_B_LOC : 1;
    ///< Varactor reset pre-override value - Base value is rxsigdet_cdrlock2data.
    ///< AccessType="RO/V" BitOffset="11" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_sigdet_ctrl_ro_reg_t;

#define PMA_RX_MSG_SIGDET_CTRL_RO_DEFAULT (0x00000000U)
#define PMA_RX_MSG_SIGDET_CTRL_RO_RD_MASK (0x00000fffU)
#define PMA_RX_MSG_SIGDET_CTRL_RO_WR_MASK (0x00000000U)


///< Sqlch debounce exit good pre-override value
#define PMA_RX_MSG_SIGDET_CTRL_RO_SQLCHDEBOUT_EXIT_GOOD_LOC_BF_OFF ( 0)
#define PMA_RX_MSG_SIGDET_CTRL_RO_SQLCHDEBOUT_EXIT_GOOD_LOC_BF_WID ( 1)
#define PMA_RX_MSG_SIGDET_CTRL_RO_SQLCHDEBOUT_EXIT_GOOD_LOC_BF_MSK (0x00000001)
#define PMA_RX_MSG_SIGDET_CTRL_RO_SQLCHDEBOUT_EXIT_GOOD_LOC_BF_DEF (0x00000000)

///< Sqlch debounce exit good debounced pre-override value
#define PMA_RX_MSG_SIGDET_CTRL_RO_SQLCHDEBOUT_EXIT_GOOD_DEBOUNCED_LOC_BF_OFF ( 1)
#define PMA_RX_MSG_SIGDET_CTRL_RO_SQLCHDEBOUT_EXIT_GOOD_DEBOUNCED_LOC_BF_WID ( 1)
#define PMA_RX_MSG_SIGDET_CTRL_RO_SQLCHDEBOUT_EXIT_GOOD_DEBOUNCED_LOC_BF_MSK (0x00000002)
#define PMA_RX_MSG_SIGDET_CTRL_RO_SQLCHDEBOUT_EXIT_GOOD_DEBOUNCED_LOC_BF_DEF (0x00000000)

///< Sqlch debounce exit good debounced status pre-override value
#define PMA_RX_MSG_SIGDET_CTRL_RO_SQLCHDEBOUT_EXIT_GOOD_DEBOUNCED_STAT_LOC_BF_OFF ( 2)
#define PMA_RX_MSG_SIGDET_CTRL_RO_SQLCHDEBOUT_EXIT_GOOD_DEBOUNCED_STAT_LOC_BF_WID ( 1)
#define PMA_RX_MSG_SIGDET_CTRL_RO_SQLCHDEBOUT_EXIT_GOOD_DEBOUNCED_STAT_LOC_BF_MSK (0x00000004)
#define PMA_RX_MSG_SIGDET_CTRL_RO_SQLCHDEBOUT_EXIT_GOOD_DEBOUNCED_STAT_LOC_BF_DEF (0x00000000)

///< Tran Count detect pre-override value
#define PMA_RX_MSG_SIGDET_CTRL_RO_TRANCNTOUT_DET_LOC_BF_OFF ( 3)
#define PMA_RX_MSG_SIGDET_CTRL_RO_TRANCNTOUT_DET_LOC_BF_WID ( 1)
#define PMA_RX_MSG_SIGDET_CTRL_RO_TRANCNTOUT_DET_LOC_BF_MSK (0x00000008)
#define PMA_RX_MSG_SIGDET_CTRL_RO_TRANCNTOUT_DET_LOC_BF_DEF (0x00000000)

///< Signal detect EIOS detect status pre-override value
#define PMA_RX_MSG_SIGDET_CTRL_RO_RXSIGDETIN_EIOSDETECTSTAT_LOC_BF_OFF ( 4)
#define PMA_RX_MSG_SIGDET_CTRL_RO_RXSIGDETIN_EIOSDETECTSTAT_LOC_BF_WID ( 1)
#define PMA_RX_MSG_SIGDET_CTRL_RO_RXSIGDETIN_EIOSDETECTSTAT_LOC_BF_MSK (0x00000010)
#define PMA_RX_MSG_SIGDET_CTRL_RO_RXSIGDETIN_EIOSDETECTSTAT_LOC_BF_DEF (0x00000000)

///< Signal detect over CDR lock-to-data overrice enable
#define PMA_RX_MSG_SIGDET_CTRL_RO_RXSIGDETIN_OVRCDRLOCK2DATA_LOC_BF_OFF ( 5)
#define PMA_RX_MSG_SIGDET_CTRL_RO_RXSIGDETIN_OVRCDRLOCK2DATA_LOC_BF_WID ( 1)
#define PMA_RX_MSG_SIGDET_CTRL_RO_RXSIGDETIN_OVRCDRLOCK2DATA_LOC_BF_MSK (0x00000020)
#define PMA_RX_MSG_SIGDET_CTRL_RO_RXSIGDETIN_OVRCDRLOCK2DATA_LOC_BF_DEF (0x00000000)

///< Signal detect over CDR lock-to-data enable pre-override value
#define PMA_RX_MSG_SIGDET_CTRL_RO_RXSIGDETIN_OVRENCDRLOCK2DATA_LOC_BF_OFF ( 6)
#define PMA_RX_MSG_SIGDET_CTRL_RO_RXSIGDETIN_OVRENCDRLOCK2DATA_LOC_BF_WID ( 1)
#define PMA_RX_MSG_SIGDET_CTRL_RO_RXSIGDETIN_OVRENCDRLOCK2DATA_LOC_BF_MSK (0x00000040)
#define PMA_RX_MSG_SIGDET_CTRL_RO_RXSIGDETIN_OVRENCDRLOCK2DATA_LOC_BF_DEF (0x00000000)

///< Signal detect over CDR lock-to-data pre-override value to lock2data
///< timer.
#define PMA_RX_MSG_SIGDET_CTRL_RO_RXSIGDET_CDRLOCK2DATA_LOC_BF_OFF ( 7)
#define PMA_RX_MSG_SIGDET_CTRL_RO_RXSIGDET_CDRLOCK2DATA_LOC_BF_WID ( 1)
#define PMA_RX_MSG_SIGDET_CTRL_RO_RXSIGDET_CDRLOCK2DATA_LOC_BF_MSK (0x00000080)
#define PMA_RX_MSG_SIGDET_CTRL_RO_RXSIGDET_CDRLOCK2DATA_LOC_BF_DEF (0x00000000)

///< Signal detect over CDR lock-to-data pre-override value to CDR.
#define PMA_RX_MSG_SIGDET_CTRL_RO_RXSIGDET_CDRLOCK2DATA_TO_CDR_LOC_BF_OFF ( 8)
#define PMA_RX_MSG_SIGDET_CTRL_RO_RXSIGDET_CDRLOCK2DATA_TO_CDR_LOC_BF_WID ( 1)
#define PMA_RX_MSG_SIGDET_CTRL_RO_RXSIGDET_CDRLOCK2DATA_TO_CDR_LOC_BF_MSK (0x00000100)
#define PMA_RX_MSG_SIGDET_CTRL_RO_RXSIGDET_CDRLOCK2DATA_TO_CDR_LOC_BF_DEF (0x00000000)

///< Signal detect lock-to-data No force lock-to-reference pre-override
///< value
#define PMA_RX_MSG_SIGDET_CTRL_RO_RXSIGDETOUT_LOCK2DATA_NOFORCE_LTR_LOC_BF_OFF ( 9)
#define PMA_RX_MSG_SIGDET_CTRL_RO_RXSIGDETOUT_LOCK2DATA_NOFORCE_LTR_LOC_BF_WID ( 1)
#define PMA_RX_MSG_SIGDET_CTRL_RO_RXSIGDETOUT_LOCK2DATA_NOFORCE_LTR_LOC_BF_MSK (0x00000200)
#define PMA_RX_MSG_SIGDET_CTRL_RO_RXSIGDETOUT_LOCK2DATA_NOFORCE_LTR_LOC_BF_DEF (0x00000000)

///< Signal detect debouce signal detect pre-override value
#define PMA_RX_MSG_SIGDET_CTRL_RO_RXSQLCHDEB_SIGDET_LOC_BF_OFF (10)
#define PMA_RX_MSG_SIGDET_CTRL_RO_RXSQLCHDEB_SIGDET_LOC_BF_WID ( 1)
#define PMA_RX_MSG_SIGDET_CTRL_RO_RXSQLCHDEB_SIGDET_LOC_BF_MSK (0x00000400)
#define PMA_RX_MSG_SIGDET_CTRL_RO_RXSQLCHDEB_SIGDET_LOC_BF_DEF (0x00000000)

///< Varactor reset pre-override value - Base value is rxsigdet_cdrlock2data.
#define PMA_RX_MSG_SIGDET_CTRL_RO_RX_PD_VARACTOR_PRST_B_LOC_BF_OFF (11)
#define PMA_RX_MSG_SIGDET_CTRL_RO_RX_PD_VARACTOR_PRST_B_LOC_BF_WID ( 1)
#define PMA_RX_MSG_SIGDET_CTRL_RO_RX_PD_VARACTOR_PRST_B_LOC_BF_MSK (0x00000800)
#define PMA_RX_MSG_SIGDET_CTRL_RO_RX_PD_VARACTOR_PRST_B_LOC_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXSIGDET_STATUS register description at address offset 0x180
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxsigdet_status
  * Rx Signal Detect Status
  */

typedef union {
  struct {
    uint32_t RXSIGDET_TOGGLE_COUNT_PEDGE : 6;
    ///< Rx Signal Detection - positive edge counter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RXSIGDET_TOGGLE_COUNT_PEDGE_OVERFLOW : 1;
    ///< Rx Signal Detection - positive edge counter overflow
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t RXSIGDET_TOGGLE_COUNT_NEDGE : 6;
    ///< Rx Signal Detection - negative edge counter
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t RXSIGDET_TOGGLE_COUNT_NEDGE_OVERFLOW : 1;
    ///< Rx Signal Detection - negative edge counter overflow
    ///< AccessType="RO/V" BitOffset="13" ResetValue="0x0"
    uint32_t RXSIGDETOUT_DEBOUNCED_LEVELDET : 1;
    ///< Rx Signal Detection - debounce level detect
    ///< AccessType="RO/V" BitOffset="14" ResetValue="0x0"
    uint32_t RXSQLCHLFPS_FSM_STATE : 3;
    ///< Rx LFPS Detect FSM state
    ///< AccessType="RO/V" BitOffset="15" ResetValue="0x0"
    uint32_t RXCDRVCO_DATAPROPGAIN : 5;
    ///< Rx CDR VCO data prop gain
    ///< AccessType="RO/V" BitOffset="18" ResetValue="0x0"
    uint32_t RXCDRVCO_REFPROPGAIN : 4;
    ///< Rx CDR VCO ref prop gain
    ///< AccessType="RO/V" BitOffset="23" ResetValue="0x0"
    uint32_t RXSIGDET_UPDET_STICKY : 1;
    ///< Indication from sig Det FSM that Down happened ( clear with clear
    ///< reg bit)
    ///< AccessType="RO/V" BitOffset="27" ResetValue="0x0"
    uint32_t RXSIGDET_DNDET_STICKY : 1;
    ///< Indication from sig Det FSM that Down happened ( clear with clear
    ///< reg bit)
    ///< AccessType="RO/V" BitOffset="28" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_sigdet_stat_reg_t;

#define PMA_RX_MSG_SIGDET_STAT_DEFAULT (0x00000000U)
#define PMA_RX_MSG_SIGDET_STAT_RD_MASK (0x1fffffffU)
#define PMA_RX_MSG_SIGDET_STAT_WR_MASK (0x00000000U)


///< Rx Signal Detection - positive edge counter
#define PMA_RX_MSG_SIGDET_STAT_RXSIGDET_TOGGLE_CNT_PEDGE_BF_OFF ( 0)
#define PMA_RX_MSG_SIGDET_STAT_RXSIGDET_TOGGLE_CNT_PEDGE_BF_WID ( 6)
#define PMA_RX_MSG_SIGDET_STAT_RXSIGDET_TOGGLE_CNT_PEDGE_BF_MSK (0x0000003F)
#define PMA_RX_MSG_SIGDET_STAT_RXSIGDET_TOGGLE_CNT_PEDGE_BF_DEF (0x00000000)

///< Rx Signal Detection - positive edge counter overflow
#define PMA_RX_MSG_SIGDET_STAT_RXSIGDET_TOGGLE_CNT_PEDGE_OVERFLOW_BF_OFF ( 6)
#define PMA_RX_MSG_SIGDET_STAT_RXSIGDET_TOGGLE_CNT_PEDGE_OVERFLOW_BF_WID ( 1)
#define PMA_RX_MSG_SIGDET_STAT_RXSIGDET_TOGGLE_CNT_PEDGE_OVERFLOW_BF_MSK (0x00000040)
#define PMA_RX_MSG_SIGDET_STAT_RXSIGDET_TOGGLE_CNT_PEDGE_OVERFLOW_BF_DEF (0x00000000)

///< Rx Signal Detection - negative edge counter
#define PMA_RX_MSG_SIGDET_STAT_RXSIGDET_TOGGLE_CNT_NEDGE_BF_OFF ( 7)
#define PMA_RX_MSG_SIGDET_STAT_RXSIGDET_TOGGLE_CNT_NEDGE_BF_WID ( 6)
#define PMA_RX_MSG_SIGDET_STAT_RXSIGDET_TOGGLE_CNT_NEDGE_BF_MSK (0x00001F80)
#define PMA_RX_MSG_SIGDET_STAT_RXSIGDET_TOGGLE_CNT_NEDGE_BF_DEF (0x00000000)

///< Rx Signal Detection - negative edge counter overflow
#define PMA_RX_MSG_SIGDET_STAT_RXSIGDET_TOGGLE_CNT_NEDGE_OVERFLOW_BF_OFF (13)
#define PMA_RX_MSG_SIGDET_STAT_RXSIGDET_TOGGLE_CNT_NEDGE_OVERFLOW_BF_WID ( 1)
#define PMA_RX_MSG_SIGDET_STAT_RXSIGDET_TOGGLE_CNT_NEDGE_OVERFLOW_BF_MSK (0x00002000)
#define PMA_RX_MSG_SIGDET_STAT_RXSIGDET_TOGGLE_CNT_NEDGE_OVERFLOW_BF_DEF (0x00000000)

///< Rx Signal Detection - debounce level detect
#define PMA_RX_MSG_SIGDET_STAT_RXSIGDETOUT_DEBOUNCED_LVLDET_BF_OFF (14)
#define PMA_RX_MSG_SIGDET_STAT_RXSIGDETOUT_DEBOUNCED_LVLDET_BF_WID ( 1)
#define PMA_RX_MSG_SIGDET_STAT_RXSIGDETOUT_DEBOUNCED_LVLDET_BF_MSK (0x00004000)
#define PMA_RX_MSG_SIGDET_STAT_RXSIGDETOUT_DEBOUNCED_LVLDET_BF_DEF (0x00000000)

///< Rx LFPS Detect FSM state
#define PMA_RX_MSG_SIGDET_STAT_RXSQLCHLFPS_FSM_STATE_BF_OFF (15)
#define PMA_RX_MSG_SIGDET_STAT_RXSQLCHLFPS_FSM_STATE_BF_WID ( 3)
#define PMA_RX_MSG_SIGDET_STAT_RXSQLCHLFPS_FSM_STATE_BF_MSK (0x00038000)
#define PMA_RX_MSG_SIGDET_STAT_RXSQLCHLFPS_FSM_STATE_BF_DEF (0x00000000)

///< Rx CDR VCO data prop gain
#define PMA_RX_MSG_SIGDET_STAT_RXCDRVCO_DATAPROPGAIN_BF_OFF (18)
#define PMA_RX_MSG_SIGDET_STAT_RXCDRVCO_DATAPROPGAIN_BF_WID ( 5)
#define PMA_RX_MSG_SIGDET_STAT_RXCDRVCO_DATAPROPGAIN_BF_MSK (0x007C0000)
#define PMA_RX_MSG_SIGDET_STAT_RXCDRVCO_DATAPROPGAIN_BF_DEF (0x00000000)

///< Rx CDR VCO ref prop gain
#define PMA_RX_MSG_SIGDET_STAT_RXCDRVCO_REFPROPGAIN_BF_OFF (23)
#define PMA_RX_MSG_SIGDET_STAT_RXCDRVCO_REFPROPGAIN_BF_WID ( 4)
#define PMA_RX_MSG_SIGDET_STAT_RXCDRVCO_REFPROPGAIN_BF_MSK (0x07800000)
#define PMA_RX_MSG_SIGDET_STAT_RXCDRVCO_REFPROPGAIN_BF_DEF (0x00000000)

///< Indication from sig Det FSM that Down happened ( clear with clear
///< reg bit)
#define PMA_RX_MSG_SIGDET_STAT_RXSIGDET_UPDET_STICKY_BF_OFF (27)
#define PMA_RX_MSG_SIGDET_STAT_RXSIGDET_UPDET_STICKY_BF_WID ( 1)
#define PMA_RX_MSG_SIGDET_STAT_RXSIGDET_UPDET_STICKY_BF_MSK (0x08000000)
#define PMA_RX_MSG_SIGDET_STAT_RXSIGDET_UPDET_STICKY_BF_DEF (0x00000000)

///< Indication from sig Det FSM that Down happened ( clear with clear
///< reg bit)
#define PMA_RX_MSG_SIGDET_STAT_RXSIGDET_DNDET_STICKY_BF_OFF (28)
#define PMA_RX_MSG_SIGDET_STAT_RXSIGDET_DNDET_STICKY_BF_WID ( 1)
#define PMA_RX_MSG_SIGDET_STAT_RXSIGDET_DNDET_STICKY_BF_MSK (0x10000000)
#define PMA_RX_MSG_SIGDET_STAT_RXSIGDET_DNDET_STICKY_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_LFPS_DET_CTRL_0 register description at address offset 0x184
  *
  * Register default value:        0x00000012
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_lfps_det_ctrl_0
  * Rx LFPS Detect Control
  */

typedef union {
  struct {
    uint32_t RXSQLCHLFPS_CONSEC_ONE_THRESH : 3;
    ///< Debouncer threshold for for detecting 1. Need to detect this many
    ///< consecutive ones before setting the debouncer output to 1
    ///< AccessType="RW" BitOffset="0" ResetValue="0x2"
    uint32_t RXSQLCHLFPS_CONSEC_ZERO_THRESH : 3;
    ///< Debouncer threshold for detecting 0. Need to detect this many consecutive
    ///< zeroes before setting the debouncer output to 1
    ///< AccessType="RW" BitOffset="3" ResetValue="0x2"
    uint32_t RXSQLCHLFPS_CYCLE_THRESH : 5;
    ///< Controls the debounce threshold of the lfps detection routine. When
    ///< debounce_type = 0, this controls the number of full lfps cycles to
    ///< complete before asserting lfps_detected; when debounce_type = 1, this
    ///< controls the number of cycles of the internal lfps_detected being
    ///< before asseting the output version
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t RXSQLCHLFPS_DAT_BITORDER : 1;
    ///< Swaps the bit-order of the lfps data. This block requires msb to be
    ///< the most recent bit. 0 - lsb is oldest bit; 1 - lsb is most recent
    ///< bit
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t RXSQLCHLFPS_DEBOUNCE_TYPE : 1;
    ///< Dontrols type of debounce on the output of the lfps detection fsm
    ///< routine to filter out glitches. 0 - need to complete lfps_cycle_thresh
    ///< number of full lfps cycles before asserting lfps_detected; More robust
    ///< but takes longer before octl_lfps_detected is asserted; 1 - need to
    ///< complete lfps_cycle_thresh number of internal lfps_detected being
    ///< 1, before asserting the output version of lfps_detected. Less robust
    ///< but needs less time before octl_lfps_detected is asserted
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t  : 19;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_lfps_det_ctrl_0_reg_t;

#define PMA_RX_MGS_LFPS_DET_CTRL_0_DEFAULT (0x00000012U)
#define PMA_RX_MGS_LFPS_DET_CTRL_0_RD_MASK (0x00001fffU)
#define PMA_RX_MGS_LFPS_DET_CTRL_0_WR_MASK (0x00001fffU)


///< Debouncer threshold for for detecting 1. Need to detect this many
///< consecutive ones before setting the debouncer output to 1
#define PMA_RX_MGS_LFPS_DET_CTRL_0_RXSQLCHLFPS_CONSEC_ONE_THRESH_BF_OFF ( 0)
#define PMA_RX_MGS_LFPS_DET_CTRL_0_RXSQLCHLFPS_CONSEC_ONE_THRESH_BF_WID ( 3)
#define PMA_RX_MGS_LFPS_DET_CTRL_0_RXSQLCHLFPS_CONSEC_ONE_THRESH_BF_MSK (0x00000007)
#define PMA_RX_MGS_LFPS_DET_CTRL_0_RXSQLCHLFPS_CONSEC_ONE_THRESH_BF_DEF (0x00000002)

///< Debouncer threshold for detecting 0. Need to detect this many consecutive
///< zeroes before setting the debouncer output to 1
#define PMA_RX_MGS_LFPS_DET_CTRL_0_RXSQLCHLFPS_CONSEC_ZERO_THRESH_BF_OFF ( 3)
#define PMA_RX_MGS_LFPS_DET_CTRL_0_RXSQLCHLFPS_CONSEC_ZERO_THRESH_BF_WID ( 3)
#define PMA_RX_MGS_LFPS_DET_CTRL_0_RXSQLCHLFPS_CONSEC_ZERO_THRESH_BF_MSK (0x00000038)
#define PMA_RX_MGS_LFPS_DET_CTRL_0_RXSQLCHLFPS_CONSEC_ZERO_THRESH_BF_DEF (0x00000010)

///< Controls the debounce threshold of the lfps detection routine. When
///< debounce_type = 0, this controls the number of full lfps cycles to
///< complete before asserting lfps_detected; when debounce_type = 1, this
///< controls the number of cycles of the internal lfps_detected being
///< before asseting the output version
#define PMA_RX_MGS_LFPS_DET_CTRL_0_RXSQLCHLFPS_CYCLE_THRESH_BF_OFF ( 6)
#define PMA_RX_MGS_LFPS_DET_CTRL_0_RXSQLCHLFPS_CYCLE_THRESH_BF_WID ( 5)
#define PMA_RX_MGS_LFPS_DET_CTRL_0_RXSQLCHLFPS_CYCLE_THRESH_BF_MSK (0x000007C0)
#define PMA_RX_MGS_LFPS_DET_CTRL_0_RXSQLCHLFPS_CYCLE_THRESH_BF_DEF (0x00000000)

///< Swaps the bit-order of the lfps data. This block requires msb to be
///< the most recent bit. 0 - lsb is oldest bit; 1 - lsb is most recent
///< bit
#define PMA_RX_MGS_LFPS_DET_CTRL_0_RXSQLCHLFPS_DAT_BITORDER_BF_OFF (11)
#define PMA_RX_MGS_LFPS_DET_CTRL_0_RXSQLCHLFPS_DAT_BITORDER_BF_WID ( 1)
#define PMA_RX_MGS_LFPS_DET_CTRL_0_RXSQLCHLFPS_DAT_BITORDER_BF_MSK (0x00000800)
#define PMA_RX_MGS_LFPS_DET_CTRL_0_RXSQLCHLFPS_DAT_BITORDER_BF_DEF (0x00000000)

///< Dontrols type of debounce on the output of the lfps detection fsm
///< routine to filter out glitches. 0 - need to complete lfps_cycle_thresh
///< number of full lfps cycles before asserting lfps_detected; More robust
///< but takes longer before octl_lfps_detected is asserted; 1 - need to
///< complete lfps_cycle_thresh number of internal lfps_detected being
///< 1, before asserting the output version of lfps_detected. Less robust
///< but needs less time before octl_lfps_detected is asserted
#define PMA_RX_MGS_LFPS_DET_CTRL_0_RXSQLCHLFPS_DEBOUNCE_TYPE_BF_OFF (12)
#define PMA_RX_MGS_LFPS_DET_CTRL_0_RXSQLCHLFPS_DEBOUNCE_TYPE_BF_WID ( 1)
#define PMA_RX_MGS_LFPS_DET_CTRL_0_RXSQLCHLFPS_DEBOUNCE_TYPE_BF_MSK (0x00001000)
#define PMA_RX_MGS_LFPS_DET_CTRL_0_RXSQLCHLFPS_DEBOUNCE_TYPE_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_LFPS_DET_CTRL_1 register description at address offset 0x188
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_lfps_det_ctrl_1
  * Rx LFPS Detect Control
  */

typedef union {
  struct {
    uint32_t RXSQLCHLFPS_ONE_RUN_LENGTH_THRESH : 8;
    ///< Detect this many consecutive debounced 1s before confirming that it
    ///< has been detected the high pulse of the lfps
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXSQLCHLFPS_ONE_RUN_LENGTH_TIMEOUT : 8;
    ///< Timer before the number of consecutive debounced 1 is exceed the timeout
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RXSQLCHLFPS_ZERO_RUN_LENGTH_THRESH : 8;
    ///< Detect this many consecutive debounced 0s before confirming that it
    ///< has been detected the high pulse of the lfps
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t RXSQLCHLFPS_ZERO_RUN_LENGTH_TIMEOUT : 8;
    ///< Timer before the number of consecutive debounced 0 is exceed the timeout
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_mgs_lfps_det_ctrl_1_reg_t;

#define PMA_RX_MGS_LFPS_DET_CTRL_1_DEFAULT (0x00000000U)
#define PMA_RX_MGS_LFPS_DET_CTRL_1_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_LFPS_DET_CTRL_1_WR_MASK (0xffffffffU)


///< Detect this many consecutive debounced 1s before confirming that it
///< has been detected the high pulse of the lfps
#define PMA_RX_MGS_LFPS_DET_CTRL_1_RXSQLCHLFPS_ONE_RUN_LENGTH_THRESH_BF_OFF ( 0)
#define PMA_RX_MGS_LFPS_DET_CTRL_1_RXSQLCHLFPS_ONE_RUN_LENGTH_THRESH_BF_WID ( 8)
#define PMA_RX_MGS_LFPS_DET_CTRL_1_RXSQLCHLFPS_ONE_RUN_LENGTH_THRESH_BF_MSK (0x000000FF)
#define PMA_RX_MGS_LFPS_DET_CTRL_1_RXSQLCHLFPS_ONE_RUN_LENGTH_THRESH_BF_DEF (0x00000000)

///< Timer before the number of consecutive debounced 1 is exceed the timeout
#define PMA_RX_MGS_LFPS_DET_CTRL_1_RXSQLCHLFPS_ONE_RUN_LENGTH_TIMEOUT_BF_OFF ( 8)
#define PMA_RX_MGS_LFPS_DET_CTRL_1_RXSQLCHLFPS_ONE_RUN_LENGTH_TIMEOUT_BF_WID ( 8)
#define PMA_RX_MGS_LFPS_DET_CTRL_1_RXSQLCHLFPS_ONE_RUN_LENGTH_TIMEOUT_BF_MSK (0x0000FF00)
#define PMA_RX_MGS_LFPS_DET_CTRL_1_RXSQLCHLFPS_ONE_RUN_LENGTH_TIMEOUT_BF_DEF (0x00000000)

///< Detect this many consecutive debounced 0s before confirming that it
///< has been detected the high pulse of the lfps
#define PMA_RX_MGS_LFPS_DET_CTRL_1_RXSQLCHLFPS_ZERO_RUN_LENGTH_THRESH_BF_OFF (16)
#define PMA_RX_MGS_LFPS_DET_CTRL_1_RXSQLCHLFPS_ZERO_RUN_LENGTH_THRESH_BF_WID ( 8)
#define PMA_RX_MGS_LFPS_DET_CTRL_1_RXSQLCHLFPS_ZERO_RUN_LENGTH_THRESH_BF_MSK (0x00FF0000)
#define PMA_RX_MGS_LFPS_DET_CTRL_1_RXSQLCHLFPS_ZERO_RUN_LENGTH_THRESH_BF_DEF (0x00000000)

///< Timer before the number of consecutive debounced 0 is exceed the timeout
#define PMA_RX_MGS_LFPS_DET_CTRL_1_RXSQLCHLFPS_ZERO_RUN_LENGTH_TIMEOUT_BF_OFF (24)
#define PMA_RX_MGS_LFPS_DET_CTRL_1_RXSQLCHLFPS_ZERO_RUN_LENGTH_TIMEOUT_BF_WID ( 8)
#define PMA_RX_MGS_LFPS_DET_CTRL_1_RXSQLCHLFPS_ZERO_RUN_LENGTH_TIMEOUT_BF_MSK (0xFF000000)
#define PMA_RX_MGS_LFPS_DET_CTRL_1_RXSQLCHLFPS_ZERO_RUN_LENGTH_TIMEOUT_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_SQLCH_CTRL_0 register description at address offset 0x18c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_sqlch_ctrl_0
  * Sqlch Control
  */

typedef union {
  struct {
    uint32_t SQLCHDEB_CTRL : 2;
    ///< Controls which controls the squelch enable signal.  0 - static register
    ///< (sqlchdeb_en); 1 - digital transition detector; 2 - ppm detector;
    ///< 3 - eios detect
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t SQLCHDEB_EN : 1;
    ///< Sqlch debounce enable
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t SQLCHDEB_SIGDET_CTRL : 2;
    ///< Controls what output from the squelch_debouncer block is fed to the
    ///< dpma_rx_sigdet. 0 - exit_good_debounced; 1 - exit_good; 2 - exit_good_debounced_status
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RXSQLCH_HIZ_GATES_CMNSHIFT_EN : 1;
    ///< Squelch common shift enable gating
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t RXSQLCH_CMNSHIFT_EN : 1;
    ///< Squelch common shift enable
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t RXAFESQCMSHIFT_LOCOVREN : 1;
    ///< Squelch common shift override enable
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t RXAFESQCMSHIFT_LOCOVR : 1;
    ///< Squelch common shift override
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RXSQLCH_RDACEN : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t RXSQLCH_LFPS_EN : 1;
    ///< Squelch LFPS enable
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t  : 21;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_sqlch_ctrl_0_reg_t;

#define PMA_RX_MGS_SQLCH_CTRL_0_DEFAULT (0x00000000U)
#define PMA_RX_MGS_SQLCH_CTRL_0_RD_MASK (0x000007ffU)
#define PMA_RX_MGS_SQLCH_CTRL_0_WR_MASK (0x000007ffU)


///< Controls which controls the squelch enable signal.  0 - static register
///< (sqlchdeb_en); 1 - digital transition detector; 2 - ppm detector;
///< 3 - eios detect
#define PMA_RX_MGS_SQLCH_CTRL_0_SQLCHDEB_CTRL_BF_OFF ( 0)
#define PMA_RX_MGS_SQLCH_CTRL_0_SQLCHDEB_CTRL_BF_WID ( 2)
#define PMA_RX_MGS_SQLCH_CTRL_0_SQLCHDEB_CTRL_BF_MSK (0x00000003)
#define PMA_RX_MGS_SQLCH_CTRL_0_SQLCHDEB_CTRL_BF_DEF (0x00000000)

///< Sqlch debounce enable
#define PMA_RX_MGS_SQLCH_CTRL_0_SQLCHDEB_EN_BF_OFF ( 2)
#define PMA_RX_MGS_SQLCH_CTRL_0_SQLCHDEB_EN_BF_WID ( 1)
#define PMA_RX_MGS_SQLCH_CTRL_0_SQLCHDEB_EN_BF_MSK (0x00000004)
#define PMA_RX_MGS_SQLCH_CTRL_0_SQLCHDEB_EN_BF_DEF (0x00000000)

///< Controls what output from the squelch_debouncer block is fed to the
///< dpma_rx_sigdet. 0 - exit_good_debounced; 1 - exit_good; 2 - exit_good_debounced_status
#define PMA_RX_MGS_SQLCH_CTRL_0_SQLCHDEB_SIGDET_CTRL_BF_OFF ( 3)
#define PMA_RX_MGS_SQLCH_CTRL_0_SQLCHDEB_SIGDET_CTRL_BF_WID ( 2)
#define PMA_RX_MGS_SQLCH_CTRL_0_SQLCHDEB_SIGDET_CTRL_BF_MSK (0x00000018)
#define PMA_RX_MGS_SQLCH_CTRL_0_SQLCHDEB_SIGDET_CTRL_BF_DEF (0x00000000)

///< Squelch common shift enable gating
#define PMA_RX_MGS_SQLCH_CTRL_0_RXSQLCH_HIZ_GATES_CMNSHIFT_EN_BF_OFF ( 5)
#define PMA_RX_MGS_SQLCH_CTRL_0_RXSQLCH_HIZ_GATES_CMNSHIFT_EN_BF_WID ( 1)
#define PMA_RX_MGS_SQLCH_CTRL_0_RXSQLCH_HIZ_GATES_CMNSHIFT_EN_BF_MSK (0x00000020)
#define PMA_RX_MGS_SQLCH_CTRL_0_RXSQLCH_HIZ_GATES_CMNSHIFT_EN_BF_DEF (0x00000000)

///< Squelch common shift enable
#define PMA_RX_MGS_SQLCH_CTRL_0_RXSQLCH_CMNSHIFT_EN_BF_OFF ( 6)
#define PMA_RX_MGS_SQLCH_CTRL_0_RXSQLCH_CMNSHIFT_EN_BF_WID ( 1)
#define PMA_RX_MGS_SQLCH_CTRL_0_RXSQLCH_CMNSHIFT_EN_BF_MSK (0x00000040)
#define PMA_RX_MGS_SQLCH_CTRL_0_RXSQLCH_CMNSHIFT_EN_BF_DEF (0x00000000)

///< Squelch common shift override enable
#define PMA_RX_MGS_SQLCH_CTRL_0_RXAFESQCMSHIFT_LOCOVREN_BF_OFF ( 7)
#define PMA_RX_MGS_SQLCH_CTRL_0_RXAFESQCMSHIFT_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_SQLCH_CTRL_0_RXAFESQCMSHIFT_LOCOVREN_BF_MSK (0x00000080)
#define PMA_RX_MGS_SQLCH_CTRL_0_RXAFESQCMSHIFT_LOCOVREN_BF_DEF (0x00000000)

///< Squelch common shift override
#define PMA_RX_MGS_SQLCH_CTRL_0_RXAFESQCMSHIFT_LOCOVR_BF_OFF ( 8)
#define PMA_RX_MGS_SQLCH_CTRL_0_RXAFESQCMSHIFT_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_SQLCH_CTRL_0_RXAFESQCMSHIFT_LOCOVR_BF_MSK (0x00000100)
#define PMA_RX_MGS_SQLCH_CTRL_0_RXAFESQCMSHIFT_LOCOVR_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_CTRL_0_RXSQLCH_RDACEN_BF_OFF ( 9)
#define PMA_RX_MGS_SQLCH_CTRL_0_RXSQLCH_RDACEN_BF_WID ( 1)
#define PMA_RX_MGS_SQLCH_CTRL_0_RXSQLCH_RDACEN_BF_MSK (0x00000200)
#define PMA_RX_MGS_SQLCH_CTRL_0_RXSQLCH_RDACEN_BF_DEF (0x00000000)

///< Squelch LFPS enable
#define PMA_RX_MGS_SQLCH_CTRL_0_RXSQLCH_LFPS_EN_BF_OFF (10)
#define PMA_RX_MGS_SQLCH_CTRL_0_RXSQLCH_LFPS_EN_BF_WID ( 1)
#define PMA_RX_MGS_SQLCH_CTRL_0_RXSQLCH_LFPS_EN_BF_MSK (0x00000400)
#define PMA_RX_MGS_SQLCH_CTRL_0_RXSQLCH_LFPS_EN_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_SQLCH_CTRL_1 register description at address offset 0x190
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_sqlch_ctrl_1
  * Sqlch Control
  */

typedef union {
  struct {
    uint32_t RXSQLCH_ACQGAIN : 4;
    ///< TBD
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXSQLCH_CALCTRL : 2;
    ///< TBD
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RXSQLCH_ACQTIME : 13;
    ///< TBD
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t RXSQLCH_CONT_CLR_ERRLOG : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t RXSQLCH_CONT_PAUSE : 6;
    ///< TBD
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t RXSQLCH_CONT_POSTCAL_TIME : 2;
    ///< TBD
    ///< AccessType="RW" BitOffset="26" ResetValue="0x0"
    uint32_t RXSQLCH_CONT_PRECAL_TIME : 2;
    ///< TBD
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t RXSQLCH_CONT_CONTROLLER_MODE : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t RXSQLCH_CONT_DIS : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_mgs_sqlch_ctrl_1_reg_t;

#define PMA_RX_MGS_SQLCH_CTRL_1_DEFAULT (0x00000000U)
#define PMA_RX_MGS_SQLCH_CTRL_1_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_SQLCH_CTRL_1_WR_MASK (0xffffffffU)


///< TBD
#define PMA_RX_MGS_SQLCH_CTRL_1_RXSQLCH_ACQGAIN_BF_OFF ( 0)
#define PMA_RX_MGS_SQLCH_CTRL_1_RXSQLCH_ACQGAIN_BF_WID ( 4)
#define PMA_RX_MGS_SQLCH_CTRL_1_RXSQLCH_ACQGAIN_BF_MSK (0x0000000F)
#define PMA_RX_MGS_SQLCH_CTRL_1_RXSQLCH_ACQGAIN_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_CTRL_1_RXSQLCH_CALCTRL_BF_OFF ( 4)
#define PMA_RX_MGS_SQLCH_CTRL_1_RXSQLCH_CALCTRL_BF_WID ( 2)
#define PMA_RX_MGS_SQLCH_CTRL_1_RXSQLCH_CALCTRL_BF_MSK (0x00000030)
#define PMA_RX_MGS_SQLCH_CTRL_1_RXSQLCH_CALCTRL_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_CTRL_1_RXSQLCH_ACQTIME_BF_OFF ( 6)
#define PMA_RX_MGS_SQLCH_CTRL_1_RXSQLCH_ACQTIME_BF_WID (13)
#define PMA_RX_MGS_SQLCH_CTRL_1_RXSQLCH_ACQTIME_BF_MSK (0x0007FFC0)
#define PMA_RX_MGS_SQLCH_CTRL_1_RXSQLCH_ACQTIME_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_CTRL_1_RXSQLCH_CONT_CLR_ERRLOG_BF_OFF (19)
#define PMA_RX_MGS_SQLCH_CTRL_1_RXSQLCH_CONT_CLR_ERRLOG_BF_WID ( 1)
#define PMA_RX_MGS_SQLCH_CTRL_1_RXSQLCH_CONT_CLR_ERRLOG_BF_MSK (0x00080000)
#define PMA_RX_MGS_SQLCH_CTRL_1_RXSQLCH_CONT_CLR_ERRLOG_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_CTRL_1_RXSQLCH_CONT_PAUSE_BF_OFF (20)
#define PMA_RX_MGS_SQLCH_CTRL_1_RXSQLCH_CONT_PAUSE_BF_WID ( 6)
#define PMA_RX_MGS_SQLCH_CTRL_1_RXSQLCH_CONT_PAUSE_BF_MSK (0x03F00000)
#define PMA_RX_MGS_SQLCH_CTRL_1_RXSQLCH_CONT_PAUSE_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_CTRL_1_RXSQLCH_CONT_POSTCAL_TIME_BF_OFF (26)
#define PMA_RX_MGS_SQLCH_CTRL_1_RXSQLCH_CONT_POSTCAL_TIME_BF_WID ( 2)
#define PMA_RX_MGS_SQLCH_CTRL_1_RXSQLCH_CONT_POSTCAL_TIME_BF_MSK (0x0C000000)
#define PMA_RX_MGS_SQLCH_CTRL_1_RXSQLCH_CONT_POSTCAL_TIME_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_CTRL_1_RXSQLCH_CONT_PRECAL_TIME_BF_OFF (28)
#define PMA_RX_MGS_SQLCH_CTRL_1_RXSQLCH_CONT_PRECAL_TIME_BF_WID ( 2)
#define PMA_RX_MGS_SQLCH_CTRL_1_RXSQLCH_CONT_PRECAL_TIME_BF_MSK (0x30000000)
#define PMA_RX_MGS_SQLCH_CTRL_1_RXSQLCH_CONT_PRECAL_TIME_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_CTRL_1_RXSQLCH_CONT_CTRLLER_MODE_BF_OFF (30)
#define PMA_RX_MGS_SQLCH_CTRL_1_RXSQLCH_CONT_CTRLLER_MODE_BF_WID ( 1)
#define PMA_RX_MGS_SQLCH_CTRL_1_RXSQLCH_CONT_CTRLLER_MODE_BF_MSK (0x40000000)
#define PMA_RX_MGS_SQLCH_CTRL_1_RXSQLCH_CONT_CTRLLER_MODE_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_CTRL_1_RXSQLCH_CONT_DIS_BF_OFF (31)
#define PMA_RX_MGS_SQLCH_CTRL_1_RXSQLCH_CONT_DIS_BF_WID ( 1)
#define PMA_RX_MGS_SQLCH_CTRL_1_RXSQLCH_CONT_DIS_BF_MSK (0x80000000)
#define PMA_RX_MGS_SQLCH_CTRL_1_RXSQLCH_CONT_DIS_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_SQLCH_CTRL_2 register description at address offset 0x194
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_sqlch_ctrl_2
  * Sqlch Control
  */

typedef union {
  struct {
    uint32_t RXSQLCH_CALTIMER : 16;
    ///< TBD
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXSQLCH_CONT_ACQ_GAIN : 4;
    ///< TBD
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t RXSQLCH_CONT_ACQ_PCT : 2;
    ///< TBD
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t RXSQLCH_CONT_CAL_TIME : 2;
    ///< TBD
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t RXSQLCH_CONT_QUIET_TIME : 2;
    ///< TBD
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t RXSQLCH_POLARITY : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="26" ResetValue="0x0"
    uint32_t RXSQLCH_VREFSEL_OVR_EN : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="27" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_sqlch_ctrl_2_reg_t;

#define PMA_RX_MGS_SQLCH_CTRL_2_DEFAULT (0x00000000U)
#define PMA_RX_MGS_SQLCH_CTRL_2_RD_MASK (0x0fffffffU)
#define PMA_RX_MGS_SQLCH_CTRL_2_WR_MASK (0x0fffffffU)


///< TBD
#define PMA_RX_MGS_SQLCH_CTRL_2_RXSQLCH_CALTIMER_BF_OFF ( 0)
#define PMA_RX_MGS_SQLCH_CTRL_2_RXSQLCH_CALTIMER_BF_WID (16)
#define PMA_RX_MGS_SQLCH_CTRL_2_RXSQLCH_CALTIMER_BF_MSK (0x0000FFFF)
#define PMA_RX_MGS_SQLCH_CTRL_2_RXSQLCH_CALTIMER_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_CTRL_2_RXSQLCH_CONT_ACQ_GAIN_BF_OFF (16)
#define PMA_RX_MGS_SQLCH_CTRL_2_RXSQLCH_CONT_ACQ_GAIN_BF_WID ( 4)
#define PMA_RX_MGS_SQLCH_CTRL_2_RXSQLCH_CONT_ACQ_GAIN_BF_MSK (0x000F0000)
#define PMA_RX_MGS_SQLCH_CTRL_2_RXSQLCH_CONT_ACQ_GAIN_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_CTRL_2_RXSQLCH_CONT_ACQ_PCT_BF_OFF (20)
#define PMA_RX_MGS_SQLCH_CTRL_2_RXSQLCH_CONT_ACQ_PCT_BF_WID ( 2)
#define PMA_RX_MGS_SQLCH_CTRL_2_RXSQLCH_CONT_ACQ_PCT_BF_MSK (0x00300000)
#define PMA_RX_MGS_SQLCH_CTRL_2_RXSQLCH_CONT_ACQ_PCT_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_CTRL_2_RXSQLCH_CONT_CAL_TIME_BF_OFF (22)
#define PMA_RX_MGS_SQLCH_CTRL_2_RXSQLCH_CONT_CAL_TIME_BF_WID ( 2)
#define PMA_RX_MGS_SQLCH_CTRL_2_RXSQLCH_CONT_CAL_TIME_BF_MSK (0x00C00000)
#define PMA_RX_MGS_SQLCH_CTRL_2_RXSQLCH_CONT_CAL_TIME_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_CTRL_2_RXSQLCH_CONT_QUIET_TIME_BF_OFF (24)
#define PMA_RX_MGS_SQLCH_CTRL_2_RXSQLCH_CONT_QUIET_TIME_BF_WID ( 2)
#define PMA_RX_MGS_SQLCH_CTRL_2_RXSQLCH_CONT_QUIET_TIME_BF_MSK (0x03000000)
#define PMA_RX_MGS_SQLCH_CTRL_2_RXSQLCH_CONT_QUIET_TIME_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_CTRL_2_RXSQLCH_POLARITY_BF_OFF (26)
#define PMA_RX_MGS_SQLCH_CTRL_2_RXSQLCH_POLARITY_BF_WID ( 1)
#define PMA_RX_MGS_SQLCH_CTRL_2_RXSQLCH_POLARITY_BF_MSK (0x04000000)
#define PMA_RX_MGS_SQLCH_CTRL_2_RXSQLCH_POLARITY_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_CTRL_2_RXSQLCH_VREFSEL_OVR_EN_BF_OFF (27)
#define PMA_RX_MGS_SQLCH_CTRL_2_RXSQLCH_VREFSEL_OVR_EN_BF_WID ( 1)
#define PMA_RX_MGS_SQLCH_CTRL_2_RXSQLCH_VREFSEL_OVR_EN_BF_MSK (0x08000000)
#define PMA_RX_MGS_SQLCH_CTRL_2_RXSQLCH_VREFSEL_OVR_EN_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_SQLCH_CTRL_3 register description at address offset 0x198
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_sqlch_ctrl_3
  * Sqlch Control
  */

typedef union {
  struct {
    uint32_t RXSQLCH_OVRD_VAL : 11;
    ///< TBD
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXSQLCH_TIME_OUT : 16;
    ///< TBD
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="27" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_sqlch_ctrl_3_reg_t;

#define PMA_RX_MGS_SQLCH_CTRL_3_DEFAULT (0x00000000U)
#define PMA_RX_MGS_SQLCH_CTRL_3_RD_MASK (0x07ffffffU)
#define PMA_RX_MGS_SQLCH_CTRL_3_WR_MASK (0x07ffffffU)


///< TBD
#define PMA_RX_MGS_SQLCH_CTRL_3_RXSQLCH_OVRD_VAL_BF_OFF ( 0)
#define PMA_RX_MGS_SQLCH_CTRL_3_RXSQLCH_OVRD_VAL_BF_WID (11)
#define PMA_RX_MGS_SQLCH_CTRL_3_RXSQLCH_OVRD_VAL_BF_MSK (0x000007FF)
#define PMA_RX_MGS_SQLCH_CTRL_3_RXSQLCH_OVRD_VAL_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_CTRL_3_RXSQLCH_TIME_OUT_BF_OFF (11)
#define PMA_RX_MGS_SQLCH_CTRL_3_RXSQLCH_TIME_OUT_BF_WID (16)
#define PMA_RX_MGS_SQLCH_CTRL_3_RXSQLCH_TIME_OUT_BF_MSK (0x07FFF800)
#define PMA_RX_MGS_SQLCH_CTRL_3_RXSQLCH_TIME_OUT_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_SQLCH_CTRL_4 register description at address offset 0x19c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_sqlch_ctrl_4
  * Sqlch Control
  */

typedef union {
  struct {
    uint32_t RXSQLCH_LOCOVREN : 1;
    ///< Rx Squelch override enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXSQLCH_CALEN_LOCOVR : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RXSQLCH_CAL_SEL_LOCOVR : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t RXSQLCH_CAL_QUIET_LOCOVR : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RXSQLCH_VREFSEL0_LOCOVR : 8;
    ///< TBD
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RXSQLCH_VREFSEL1_LOCOVR : 8;
    ///< TBD
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t RXSQLCH_CLKGATE_LOCOVR : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_sqlch_ctrl_4_reg_t;

#define PMA_RX_MGS_SQLCH_CTRL_4_DEFAULT (0x00000000U)
#define PMA_RX_MGS_SQLCH_CTRL_4_RD_MASK (0x001fffffU)
#define PMA_RX_MGS_SQLCH_CTRL_4_WR_MASK (0x001fffffU)


///< Rx Squelch override enable
#define PMA_RX_MGS_SQLCH_CTRL_4_RXSQLCH_LOCOVREN_BF_OFF ( 0)
#define PMA_RX_MGS_SQLCH_CTRL_4_RXSQLCH_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_SQLCH_CTRL_4_RXSQLCH_LOCOVREN_BF_MSK (0x00000001)
#define PMA_RX_MGS_SQLCH_CTRL_4_RXSQLCH_LOCOVREN_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_CTRL_4_RXSQLCH_CALEN_LOCOVR_BF_OFF ( 1)
#define PMA_RX_MGS_SQLCH_CTRL_4_RXSQLCH_CALEN_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_SQLCH_CTRL_4_RXSQLCH_CALEN_LOCOVR_BF_MSK (0x00000002)
#define PMA_RX_MGS_SQLCH_CTRL_4_RXSQLCH_CALEN_LOCOVR_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_CTRL_4_RXSQLCH_CAL_SEL_LOCOVR_BF_OFF ( 2)
#define PMA_RX_MGS_SQLCH_CTRL_4_RXSQLCH_CAL_SEL_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_SQLCH_CTRL_4_RXSQLCH_CAL_SEL_LOCOVR_BF_MSK (0x00000004)
#define PMA_RX_MGS_SQLCH_CTRL_4_RXSQLCH_CAL_SEL_LOCOVR_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_CTRL_4_RXSQLCH_CAL_QUIET_LOCOVR_BF_OFF ( 3)
#define PMA_RX_MGS_SQLCH_CTRL_4_RXSQLCH_CAL_QUIET_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_SQLCH_CTRL_4_RXSQLCH_CAL_QUIET_LOCOVR_BF_MSK (0x00000008)
#define PMA_RX_MGS_SQLCH_CTRL_4_RXSQLCH_CAL_QUIET_LOCOVR_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_CTRL_4_RXSQLCH_VREFSEL0_LOCOVR_BF_OFF ( 4)
#define PMA_RX_MGS_SQLCH_CTRL_4_RXSQLCH_VREFSEL0_LOCOVR_BF_WID ( 8)
#define PMA_RX_MGS_SQLCH_CTRL_4_RXSQLCH_VREFSEL0_LOCOVR_BF_MSK (0x00000FF0)
#define PMA_RX_MGS_SQLCH_CTRL_4_RXSQLCH_VREFSEL0_LOCOVR_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_CTRL_4_RXSQLCH_VREFSEL1_LOCOVR_BF_OFF (12)
#define PMA_RX_MGS_SQLCH_CTRL_4_RXSQLCH_VREFSEL1_LOCOVR_BF_WID ( 8)
#define PMA_RX_MGS_SQLCH_CTRL_4_RXSQLCH_VREFSEL1_LOCOVR_BF_MSK (0x000FF000)
#define PMA_RX_MGS_SQLCH_CTRL_4_RXSQLCH_VREFSEL1_LOCOVR_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_CTRL_4_RXSQLCH_CLKGATE_LOCOVR_BF_OFF (20)
#define PMA_RX_MGS_SQLCH_CTRL_4_RXSQLCH_CLKGATE_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_SQLCH_CTRL_4_RXSQLCH_CLKGATE_LOCOVR_BF_MSK (0x00100000)
#define PMA_RX_MGS_SQLCH_CTRL_4_RXSQLCH_CLKGATE_LOCOVR_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_SQLCH_STATUS register description at address offset 0x1a0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_sqlch_status
  * Sqlch Status
  */

typedef union {
  struct {
    uint32_t RXAFESQCMSHIFT_LOC : 1;
    ///< Squelch common shift pre-override
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RXSQLCH_CAL_FAULT0 : 1;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t RXSQLCH_CAL_FAULT1 : 1;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t RXSQLCH_CONT_CAL_SEQ_ACTIVE : 1;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t RXSQLCH_CONT_ERRLOG : 2;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t RXSQLCH_LGCY_CAL_CMPLT : 1;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t RXSQLCH_CALEN_LOC : 1;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t RXSQLCH_CAL_SEL_LOC : 1;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t RXSQLCH_CAL_QUIET_LOC : 1;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t RXSQLCH_VREFSEL0_LOC : 8;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="10" ResetValue="0x0"
    uint32_t RXSQLCH_VREFSEL1_LOC : 8;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="18" ResetValue="0x0"
    uint32_t RXSQLCH_CLKGATE_LOC : 1;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="26" ResetValue="0x0"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="27" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_sqlch_stat_reg_t;

#define PMA_RX_MGS_SQLCH_STAT_DEFAULT (0x00000000U)
#define PMA_RX_MGS_SQLCH_STAT_RD_MASK (0x07ffffffU)
#define PMA_RX_MGS_SQLCH_STAT_WR_MASK (0x00000000U)


///< Squelch common shift pre-override
#define PMA_RX_MGS_SQLCH_STAT_RXAFESQCMSHIFT_LOC_BF_OFF ( 0)
#define PMA_RX_MGS_SQLCH_STAT_RXAFESQCMSHIFT_LOC_BF_WID ( 1)
#define PMA_RX_MGS_SQLCH_STAT_RXAFESQCMSHIFT_LOC_BF_MSK (0x00000001)
#define PMA_RX_MGS_SQLCH_STAT_RXAFESQCMSHIFT_LOC_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_STAT_RXSQLCH_CAL_FAULT0_BF_OFF ( 1)
#define PMA_RX_MGS_SQLCH_STAT_RXSQLCH_CAL_FAULT0_BF_WID ( 1)
#define PMA_RX_MGS_SQLCH_STAT_RXSQLCH_CAL_FAULT0_BF_MSK (0x00000002)
#define PMA_RX_MGS_SQLCH_STAT_RXSQLCH_CAL_FAULT0_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_STAT_RXSQLCH_CAL_FAULT1_BF_OFF ( 2)
#define PMA_RX_MGS_SQLCH_STAT_RXSQLCH_CAL_FAULT1_BF_WID ( 1)
#define PMA_RX_MGS_SQLCH_STAT_RXSQLCH_CAL_FAULT1_BF_MSK (0x00000004)
#define PMA_RX_MGS_SQLCH_STAT_RXSQLCH_CAL_FAULT1_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_STAT_RXSQLCH_CONT_CAL_SEQ_ACTIVE_BF_OFF ( 3)
#define PMA_RX_MGS_SQLCH_STAT_RXSQLCH_CONT_CAL_SEQ_ACTIVE_BF_WID ( 1)
#define PMA_RX_MGS_SQLCH_STAT_RXSQLCH_CONT_CAL_SEQ_ACTIVE_BF_MSK (0x00000008)
#define PMA_RX_MGS_SQLCH_STAT_RXSQLCH_CONT_CAL_SEQ_ACTIVE_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_STAT_RXSQLCH_CONT_ERRLOG_BF_OFF ( 4)
#define PMA_RX_MGS_SQLCH_STAT_RXSQLCH_CONT_ERRLOG_BF_WID ( 2)
#define PMA_RX_MGS_SQLCH_STAT_RXSQLCH_CONT_ERRLOG_BF_MSK (0x00000030)
#define PMA_RX_MGS_SQLCH_STAT_RXSQLCH_CONT_ERRLOG_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_STAT_RXSQLCH_LGCY_CAL_CMPLT_BF_OFF ( 6)
#define PMA_RX_MGS_SQLCH_STAT_RXSQLCH_LGCY_CAL_CMPLT_BF_WID ( 1)
#define PMA_RX_MGS_SQLCH_STAT_RXSQLCH_LGCY_CAL_CMPLT_BF_MSK (0x00000040)
#define PMA_RX_MGS_SQLCH_STAT_RXSQLCH_LGCY_CAL_CMPLT_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_STAT_RXSQLCH_CALEN_LOC_BF_OFF ( 7)
#define PMA_RX_MGS_SQLCH_STAT_RXSQLCH_CALEN_LOC_BF_WID ( 1)
#define PMA_RX_MGS_SQLCH_STAT_RXSQLCH_CALEN_LOC_BF_MSK (0x00000080)
#define PMA_RX_MGS_SQLCH_STAT_RXSQLCH_CALEN_LOC_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_STAT_RXSQLCH_CAL_SEL_LOC_BF_OFF ( 8)
#define PMA_RX_MGS_SQLCH_STAT_RXSQLCH_CAL_SEL_LOC_BF_WID ( 1)
#define PMA_RX_MGS_SQLCH_STAT_RXSQLCH_CAL_SEL_LOC_BF_MSK (0x00000100)
#define PMA_RX_MGS_SQLCH_STAT_RXSQLCH_CAL_SEL_LOC_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_STAT_RXSQLCH_CAL_QUIET_LOC_BF_OFF ( 9)
#define PMA_RX_MGS_SQLCH_STAT_RXSQLCH_CAL_QUIET_LOC_BF_WID ( 1)
#define PMA_RX_MGS_SQLCH_STAT_RXSQLCH_CAL_QUIET_LOC_BF_MSK (0x00000200)
#define PMA_RX_MGS_SQLCH_STAT_RXSQLCH_CAL_QUIET_LOC_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_STAT_RXSQLCH_VREFSEL0_LOC_BF_OFF (10)
#define PMA_RX_MGS_SQLCH_STAT_RXSQLCH_VREFSEL0_LOC_BF_WID ( 8)
#define PMA_RX_MGS_SQLCH_STAT_RXSQLCH_VREFSEL0_LOC_BF_MSK (0x0003FC00)
#define PMA_RX_MGS_SQLCH_STAT_RXSQLCH_VREFSEL0_LOC_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_STAT_RXSQLCH_VREFSEL1_LOC_BF_OFF (18)
#define PMA_RX_MGS_SQLCH_STAT_RXSQLCH_VREFSEL1_LOC_BF_WID ( 8)
#define PMA_RX_MGS_SQLCH_STAT_RXSQLCH_VREFSEL1_LOC_BF_MSK (0x03FC0000)
#define PMA_RX_MGS_SQLCH_STAT_RXSQLCH_VREFSEL1_LOC_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_STAT_RXSQLCH_CLKGATE_LOC_BF_OFF (26)
#define PMA_RX_MGS_SQLCH_STAT_RXSQLCH_CLKGATE_LOC_BF_WID ( 1)
#define PMA_RX_MGS_SQLCH_STAT_RXSQLCH_CLKGATE_LOC_BF_MSK (0x04000000)
#define PMA_RX_MGS_SQLCH_STAT_RXSQLCH_CLKGATE_LOC_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_SQLCHOSCMEAS_CTRL_0 register description at address offset 0x1a4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_sqlchoscmeas_ctrl_0
  * Squelch OSC measurment control
  */

typedef union {
  struct {
    uint32_t RXCALSQLCHOSCMEAS_REF_CNT : 10;
    ///< TBD
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXCALSQLCHOSCMEAS_SMPL_CNT : 10;
    ///< TBD
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RXCALSQLCHOSCFSM_ROUND : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t RXCALSQLCHOSCFSM_FINISH_SIDE : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t RXCALSQLCHOSCFSM_LPFAXCOARSE : 4;
    ///< TBD
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t RXCALSQLCHOSCFSM_LPFAXFINE : 4;
    ///< TBD
    ///< AccessType="RW" BitOffset="26" ResetValue="0x0"
    uint32_t RXCALSQLCHOSCFSM_RUNCOUNT : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t RXCALSQLCHOSCFSM_INVERT : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_mgs_sqlchoscmeas_ctrl_0_reg_t;

#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_0_DEFAULT (0x00000000U)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_0_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_0_WR_MASK (0xffffffffU)


///< TBD
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_0_RXCALSQLCHOSCMEAS_REF_CNT_BF_OFF ( 0)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_0_RXCALSQLCHOSCMEAS_REF_CNT_BF_WID (10)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_0_RXCALSQLCHOSCMEAS_REF_CNT_BF_MSK (0x000003FF)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_0_RXCALSQLCHOSCMEAS_REF_CNT_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_0_RXCALSQLCHOSCMEAS_SMPL_CNT_BF_OFF (10)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_0_RXCALSQLCHOSCMEAS_SMPL_CNT_BF_WID (10)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_0_RXCALSQLCHOSCMEAS_SMPL_CNT_BF_MSK (0x000FFC00)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_0_RXCALSQLCHOSCMEAS_SMPL_CNT_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_0_RXCALSQLCHOSCFSM_ROUND_BF_OFF (20)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_0_RXCALSQLCHOSCFSM_ROUND_BF_WID ( 1)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_0_RXCALSQLCHOSCFSM_ROUND_BF_MSK (0x00100000)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_0_RXCALSQLCHOSCFSM_ROUND_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_0_RXCALSQLCHOSCFSM_FINISH_SIDE_BF_OFF (21)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_0_RXCALSQLCHOSCFSM_FINISH_SIDE_BF_WID ( 1)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_0_RXCALSQLCHOSCFSM_FINISH_SIDE_BF_MSK (0x00200000)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_0_RXCALSQLCHOSCFSM_FINISH_SIDE_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_0_RXCALSQLCHOSCFSM_LPFAXCOARSE_BF_OFF (22)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_0_RXCALSQLCHOSCFSM_LPFAXCOARSE_BF_WID ( 4)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_0_RXCALSQLCHOSCFSM_LPFAXCOARSE_BF_MSK (0x03C00000)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_0_RXCALSQLCHOSCFSM_LPFAXCOARSE_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_0_RXCALSQLCHOSCFSM_LPFAXFINE_BF_OFF (26)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_0_RXCALSQLCHOSCFSM_LPFAXFINE_BF_WID ( 4)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_0_RXCALSQLCHOSCFSM_LPFAXFINE_BF_MSK (0x3C000000)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_0_RXCALSQLCHOSCFSM_LPFAXFINE_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_0_RXCALSQLCHOSCFSM_RUNCNT_BF_OFF (30)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_0_RXCALSQLCHOSCFSM_RUNCNT_BF_WID ( 1)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_0_RXCALSQLCHOSCFSM_RUNCNT_BF_MSK (0x40000000)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_0_RXCALSQLCHOSCFSM_RUNCNT_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_0_RXCALSQLCHOSCFSM_INVERT_BF_OFF (31)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_0_RXCALSQLCHOSCFSM_INVERT_BF_WID ( 1)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_0_RXCALSQLCHOSCFSM_INVERT_BF_MSK (0x80000000)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_0_RXCALSQLCHOSCFSM_INVERT_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_SQLCHOSCMEAS_CTRL_1 register description at address offset 0x1a8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_sqlchoscmeas_ctrl_1
  * Squelch OSC measurment control
  */

typedef union {
  struct {
    uint32_t RXCALSQLCHOSCFSM_LPFLOCKDET_COUNT : 16;
    ///< TBD
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXCALSQLCHOSCFSM_LPFLOCKDET_TOLERANCE : 16;
    ///< TBD
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_mgs_sqlchoscmeas_ctrl_1_reg_t;

#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_1_DEFAULT (0x00000000U)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_1_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_1_WR_MASK (0xffffffffU)


///< TBD
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_1_RXCALSQLCHOSCFSM_LPFLOCKDET_CNT_BF_OFF ( 0)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_1_RXCALSQLCHOSCFSM_LPFLOCKDET_CNT_BF_WID (16)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_1_RXCALSQLCHOSCFSM_LPFLOCKDET_CNT_BF_MSK (0x0000FFFF)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_1_RXCALSQLCHOSCFSM_LPFLOCKDET_CNT_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_1_RXCALSQLCHOSCFSM_LPFLOCKDET_TOLERANCE_BF_OFF (16)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_1_RXCALSQLCHOSCFSM_LPFLOCKDET_TOLERANCE_BF_WID (16)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_1_RXCALSQLCHOSCFSM_LPFLOCKDET_TOLERANCE_BF_MSK (0xFFFF0000)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_1_RXCALSQLCHOSCFSM_LPFLOCKDET_TOLERANCE_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_SQLCHOSCMEAS_CTRL_2 register description at address offset 0x1ac
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_sqlchoscmeas_ctrl_2
  * Squelch OSC measurment control
  */

typedef union {
  struct {
    uint32_t RXCALSQLCHOSCFSM_PRECALFSMSTART_DELAY : 16;
    ///< TBD
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXCALSQLCHOSCFSM_RESTORE_DELAY : 16;
    ///< TBD
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_mgs_sqlchoscmeas_ctrl_2_reg_t;

#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_2_DEFAULT (0x00000000U)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_2_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_2_WR_MASK (0xffffffffU)


///< TBD
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_2_RXCALSQLCHOSCFSM_PRECALFSMSTART_DELAY_BF_OFF ( 0)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_2_RXCALSQLCHOSCFSM_PRECALFSMSTART_DELAY_BF_WID (16)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_2_RXCALSQLCHOSCFSM_PRECALFSMSTART_DELAY_BF_MSK (0x0000FFFF)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_2_RXCALSQLCHOSCFSM_PRECALFSMSTART_DELAY_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_2_RXCALSQLCHOSCFSM_RESTORE_DELAY_BF_OFF (16)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_2_RXCALSQLCHOSCFSM_RESTORE_DELAY_BF_WID (16)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_2_RXCALSQLCHOSCFSM_RESTORE_DELAY_BF_MSK (0xFFFF0000)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_2_RXCALSQLCHOSCFSM_RESTORE_DELAY_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_SQLCHOSCMEAS_CTRL_3 register description at address offset 0x1b0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_sqlchoscmeas_ctrl_3
  * Squelch OSC measurment control
  */

typedef union {
  struct {
    uint32_t RXCALSQLCHOSCMEAS_SETTLE_CNT : 3;
    ///< TBD
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXCALSQLCHOSCMEAS_LOCOVREN : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RXCALSQLCHOSCMEAS_REQ_LOCOVR : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RXCALSQLCHOSCFSM_LOCOVREN : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t RXCALSQLCHOSCFSM_CLEAR_LOCOVR : 5;
    ///< TBD
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t RXCALSQLCHOSCFSM_INIT_LOCOVR : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t RXCALSQLCHOSCFSM_REQ_LOCOVR : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t  : 19;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_sqlchoscmeas_ctrl_3_reg_t;

#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_3_DEFAULT (0x00000000U)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_3_RD_MASK (0x00001fffU)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_3_WR_MASK (0x00001fffU)


///< TBD
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_3_RXCALSQLCHOSCMEAS_SETTLE_CNT_BF_OFF ( 0)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_3_RXCALSQLCHOSCMEAS_SETTLE_CNT_BF_WID ( 3)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_3_RXCALSQLCHOSCMEAS_SETTLE_CNT_BF_MSK (0x00000007)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_3_RXCALSQLCHOSCMEAS_SETTLE_CNT_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_3_RXCALSQLCHOSCMEAS_LOCOVREN_BF_OFF ( 3)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_3_RXCALSQLCHOSCMEAS_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_3_RXCALSQLCHOSCMEAS_LOCOVREN_BF_MSK (0x00000008)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_3_RXCALSQLCHOSCMEAS_LOCOVREN_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_3_RXCALSQLCHOSCMEAS_REQ_LOCOVR_BF_OFF ( 4)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_3_RXCALSQLCHOSCMEAS_REQ_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_3_RXCALSQLCHOSCMEAS_REQ_LOCOVR_BF_MSK (0x00000010)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_3_RXCALSQLCHOSCMEAS_REQ_LOCOVR_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_3_RXCALSQLCHOSCFSM_LOCOVREN_BF_OFF ( 5)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_3_RXCALSQLCHOSCFSM_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_3_RXCALSQLCHOSCFSM_LOCOVREN_BF_MSK (0x00000020)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_3_RXCALSQLCHOSCFSM_LOCOVREN_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_3_RXCALSQLCHOSCFSM_CLR_LOCOVR_BF_OFF ( 6)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_3_RXCALSQLCHOSCFSM_CLR_LOCOVR_BF_WID ( 5)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_3_RXCALSQLCHOSCFSM_CLR_LOCOVR_BF_MSK (0x000007C0)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_3_RXCALSQLCHOSCFSM_CLR_LOCOVR_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_3_RXCALSQLCHOSCFSM_INIT_LOCOVR_BF_OFF (11)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_3_RXCALSQLCHOSCFSM_INIT_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_3_RXCALSQLCHOSCFSM_INIT_LOCOVR_BF_MSK (0x00000800)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_3_RXCALSQLCHOSCFSM_INIT_LOCOVR_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_3_RXCALSQLCHOSCFSM_REQ_LOCOVR_BF_OFF (12)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_3_RXCALSQLCHOSCFSM_REQ_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_3_RXCALSQLCHOSCFSM_REQ_LOCOVR_BF_MSK (0x00001000)
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_3_RXCALSQLCHOSCFSM_REQ_LOCOVR_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_SQLCH_CALFSM_CTRL register description at address offset 0x1b4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_sqlch_calfsm_ctrl
  * Sqlch Calibration FSM Control
  */

typedef union {
  struct {
    uint32_t RXCALSQLCHOSCFSM_CODEOFFSET : 5;
    ///< TBD
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXCALSQLCHOSCFSM_INITVAL : 4;
    ///< TBD
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t RXCALSQLCHOSCFSM_RECAL : 5;
    ///< TBD
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t RXCALSQLCHFSM_LOCOVREN : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t RXCALSQLCHFSM_CLEAR_LOCOVR : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RXCALSQLCHFSM_REQ_LOCOVR : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t RXCALSQLCHFSMOUT_LOCOVREN : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t RXCALSQLCHFSMOUT_CALDONE_LOCOVR : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t RXCALSQLCHOSC_LOCOVREN : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t RXCALSQLCHOSC_TRIMCODE_LOCOVR : 4;
    ///< TBD
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_sqlch_calfsm_ctrl_reg_t;

#define PMA_RX_MGS_SQLCH_CALFSM_CTRL_DEFAULT (0x00000000U)
#define PMA_RX_MGS_SQLCH_CALFSM_CTRL_RD_MASK (0x00ffffffU)
#define PMA_RX_MGS_SQLCH_CALFSM_CTRL_WR_MASK (0x00ffffffU)


///< TBD
#define PMA_RX_MGS_SQLCH_CALFSM_CTRL_RXCALSQLCHOSCFSM_CODEOFFSET_BF_OFF ( 0)
#define PMA_RX_MGS_SQLCH_CALFSM_CTRL_RXCALSQLCHOSCFSM_CODEOFFSET_BF_WID ( 5)
#define PMA_RX_MGS_SQLCH_CALFSM_CTRL_RXCALSQLCHOSCFSM_CODEOFFSET_BF_MSK (0x0000001F)
#define PMA_RX_MGS_SQLCH_CALFSM_CTRL_RXCALSQLCHOSCFSM_CODEOFFSET_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_CALFSM_CTRL_RXCALSQLCHOSCFSM_INITVAL_BF_OFF ( 5)
#define PMA_RX_MGS_SQLCH_CALFSM_CTRL_RXCALSQLCHOSCFSM_INITVAL_BF_WID ( 4)
#define PMA_RX_MGS_SQLCH_CALFSM_CTRL_RXCALSQLCHOSCFSM_INITVAL_BF_MSK (0x000001E0)
#define PMA_RX_MGS_SQLCH_CALFSM_CTRL_RXCALSQLCHOSCFSM_INITVAL_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_CALFSM_CTRL_RXCALSQLCHOSCFSM_RECAL_BF_OFF ( 9)
#define PMA_RX_MGS_SQLCH_CALFSM_CTRL_RXCALSQLCHOSCFSM_RECAL_BF_WID ( 5)
#define PMA_RX_MGS_SQLCH_CALFSM_CTRL_RXCALSQLCHOSCFSM_RECAL_BF_MSK (0x00003E00)
#define PMA_RX_MGS_SQLCH_CALFSM_CTRL_RXCALSQLCHOSCFSM_RECAL_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_CALFSM_CTRL_RXCALSQLCHFSM_LOCOVREN_BF_OFF (14)
#define PMA_RX_MGS_SQLCH_CALFSM_CTRL_RXCALSQLCHFSM_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_SQLCH_CALFSM_CTRL_RXCALSQLCHFSM_LOCOVREN_BF_MSK (0x00004000)
#define PMA_RX_MGS_SQLCH_CALFSM_CTRL_RXCALSQLCHFSM_LOCOVREN_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_CALFSM_CTRL_RXCALSQLCHFSM_CLR_LOCOVR_BF_OFF (15)
#define PMA_RX_MGS_SQLCH_CALFSM_CTRL_RXCALSQLCHFSM_CLR_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_SQLCH_CALFSM_CTRL_RXCALSQLCHFSM_CLR_LOCOVR_BF_MSK (0x00008000)
#define PMA_RX_MGS_SQLCH_CALFSM_CTRL_RXCALSQLCHFSM_CLR_LOCOVR_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_CALFSM_CTRL_RXCALSQLCHFSM_REQ_LOCOVR_BF_OFF (16)
#define PMA_RX_MGS_SQLCH_CALFSM_CTRL_RXCALSQLCHFSM_REQ_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_SQLCH_CALFSM_CTRL_RXCALSQLCHFSM_REQ_LOCOVR_BF_MSK (0x00010000)
#define PMA_RX_MGS_SQLCH_CALFSM_CTRL_RXCALSQLCHFSM_REQ_LOCOVR_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_CALFSM_CTRL_RXCALSQLCHFSMOUT_LOCOVREN_BF_OFF (17)
#define PMA_RX_MGS_SQLCH_CALFSM_CTRL_RXCALSQLCHFSMOUT_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_SQLCH_CALFSM_CTRL_RXCALSQLCHFSMOUT_LOCOVREN_BF_MSK (0x00020000)
#define PMA_RX_MGS_SQLCH_CALFSM_CTRL_RXCALSQLCHFSMOUT_LOCOVREN_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_CALFSM_CTRL_RXCALSQLCHFSMOUT_CALDONE_LOCOVR_BF_OFF (18)
#define PMA_RX_MGS_SQLCH_CALFSM_CTRL_RXCALSQLCHFSMOUT_CALDONE_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_SQLCH_CALFSM_CTRL_RXCALSQLCHFSMOUT_CALDONE_LOCOVR_BF_MSK (0x00040000)
#define PMA_RX_MGS_SQLCH_CALFSM_CTRL_RXCALSQLCHFSMOUT_CALDONE_LOCOVR_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_CALFSM_CTRL_RXCALSQLCHOSC_LOCOVREN_BF_OFF (19)
#define PMA_RX_MGS_SQLCH_CALFSM_CTRL_RXCALSQLCHOSC_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_SQLCH_CALFSM_CTRL_RXCALSQLCHOSC_LOCOVREN_BF_MSK (0x00080000)
#define PMA_RX_MGS_SQLCH_CALFSM_CTRL_RXCALSQLCHOSC_LOCOVREN_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_CALFSM_CTRL_RXCALSQLCHOSC_TRIMCODE_LOCOVR_BF_OFF (20)
#define PMA_RX_MGS_SQLCH_CALFSM_CTRL_RXCALSQLCHOSC_TRIMCODE_LOCOVR_BF_WID ( 4)
#define PMA_RX_MGS_SQLCH_CALFSM_CTRL_RXCALSQLCHOSC_TRIMCODE_LOCOVR_BF_MSK (0x00F00000)
#define PMA_RX_MGS_SQLCH_CALFSM_CTRL_RXCALSQLCHOSC_TRIMCODE_LOCOVR_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_SQLCH_CALFSM_STATUS_0 register description at address offset 0x1b8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_sqlch_calfsm_status_0
  * Sqlch Calibration FSM Status
  */

typedef union {
  struct {
    uint32_t RXCALSQLCHFSM_ACK : 1;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RXCALSQLCHOSCFSM_RESTORE_AVAIL : 1;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t RXCALSQLCHOSCMEAS_ACK : 1;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t RXCALSQLCHOSCMEAS_OVR : 1;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t RXCALSQLCHOSCFSM_R0_CALCODE : 4;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t RXCALSQLCHOSCFSM_R1_CALCODE : 4;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t RXCALSQLCHOSCFSM_FSMSTATE : 4;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t RXCALSQLCHOSCFSM_ITER : 16;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_mgs_sqlch_calfsm_stat_0_reg_t;

#define PMA_RX_MGS_SQLCH_CALFSM_STAT_0_DEFAULT (0x00000000U)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_0_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_0_WR_MASK (0x00000000U)


///< TBD
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_0_RXCALSQLCHFSM_ACK_BF_OFF ( 0)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_0_RXCALSQLCHFSM_ACK_BF_WID ( 1)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_0_RXCALSQLCHFSM_ACK_BF_MSK (0x00000001)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_0_RXCALSQLCHFSM_ACK_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_0_RXCALSQLCHOSCFSM_RESTORE_AVAIL_BF_OFF ( 1)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_0_RXCALSQLCHOSCFSM_RESTORE_AVAIL_BF_WID ( 1)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_0_RXCALSQLCHOSCFSM_RESTORE_AVAIL_BF_MSK (0x00000002)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_0_RXCALSQLCHOSCFSM_RESTORE_AVAIL_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_0_RXCALSQLCHOSCMEAS_ACK_BF_OFF ( 2)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_0_RXCALSQLCHOSCMEAS_ACK_BF_WID ( 1)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_0_RXCALSQLCHOSCMEAS_ACK_BF_MSK (0x00000004)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_0_RXCALSQLCHOSCMEAS_ACK_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_0_RXCALSQLCHOSCMEAS_OVR_BF_OFF ( 3)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_0_RXCALSQLCHOSCMEAS_OVR_BF_WID ( 1)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_0_RXCALSQLCHOSCMEAS_OVR_BF_MSK (0x00000008)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_0_RXCALSQLCHOSCMEAS_OVR_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_0_RXCALSQLCHOSCFSM_R0_CALCODE_BF_OFF ( 4)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_0_RXCALSQLCHOSCFSM_R0_CALCODE_BF_WID ( 4)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_0_RXCALSQLCHOSCFSM_R0_CALCODE_BF_MSK (0x000000F0)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_0_RXCALSQLCHOSCFSM_R0_CALCODE_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_0_RXCALSQLCHOSCFSM_R1_CALCODE_BF_OFF ( 8)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_0_RXCALSQLCHOSCFSM_R1_CALCODE_BF_WID ( 4)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_0_RXCALSQLCHOSCFSM_R1_CALCODE_BF_MSK (0x00000F00)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_0_RXCALSQLCHOSCFSM_R1_CALCODE_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_0_RXCALSQLCHOSCFSM_FSMSTATE_BF_OFF (12)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_0_RXCALSQLCHOSCFSM_FSMSTATE_BF_WID ( 4)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_0_RXCALSQLCHOSCFSM_FSMSTATE_BF_MSK (0x0000F000)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_0_RXCALSQLCHOSCFSM_FSMSTATE_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_0_RXCALSQLCHOSCFSM_ITER_BF_OFF (16)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_0_RXCALSQLCHOSCFSM_ITER_BF_WID (16)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_0_RXCALSQLCHOSCFSM_ITER_BF_MSK (0xFFFF0000)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_0_RXCALSQLCHOSCFSM_ITER_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_SQLCH_CALFSM_STATUS_1 register description at address offset 0x1bc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_sqlch_calfsm_status_1
  * Sqlch Calibration FSM Status
  */

typedef union {
  struct {
    uint32_t RXCALSQLCHOSCFSM_LPFLOCKDET : 16;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RXCALSQLCHOSCFSM_LPFLOCKDETCOUNT : 16;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_mgs_sqlch_calfsm_stat_1_reg_t;

#define PMA_RX_MGS_SQLCH_CALFSM_STAT_1_DEFAULT (0x00000000U)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_1_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_1_WR_MASK (0x00000000U)


///< TBD
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_1_RXCALSQLCHOSCFSM_LPFLOCKDET_BF_OFF ( 0)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_1_RXCALSQLCHOSCFSM_LPFLOCKDET_BF_WID (16)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_1_RXCALSQLCHOSCFSM_LPFLOCKDET_BF_MSK (0x0000FFFF)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_1_RXCALSQLCHOSCFSM_LPFLOCKDET_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_1_RXCALSQLCHOSCFSM_LPFLOCKDETCNT_BF_OFF (16)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_1_RXCALSQLCHOSCFSM_LPFLOCKDETCNT_BF_WID (16)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_1_RXCALSQLCHOSCFSM_LPFLOCKDETCNT_BF_MSK (0xFFFF0000)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_1_RXCALSQLCHOSCFSM_LPFLOCKDETCNT_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_SQLCH_CALFSM_STATUS_2 register description at address offset 0x1c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_sqlch_calfsm_status_2
  * Sqlch Calibration FSM Status
  */

typedef union {
  struct {
    uint32_t RXCALSQLCHOSCFSM_LPFAVG : 6;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RXCALSQLCHOSCFSM_ACK : 1;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t RXCAL_SQLCHERR_RX : 1;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t RXCALSQLCHOSCMEAS_REQ_LOC : 1;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t RXCALSQLCHFSM_CLEAR_LOC : 1;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t RXCALSQLCHFSM_REQ_LOC : 1;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="10" ResetValue="0x0"
    uint32_t RXCALSQLCHFSMOUT_CALDONE_LOC : 1;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="11" ResetValue="0x0"
    uint32_t RXCALSQLCHOSCFSM_CLEAR_LOC : 5;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t RXCALSQLCHOSCFSM_INIT_LOC : 1;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="17" ResetValue="0x0"
    uint32_t RXCALSQLCHOSCFSM_REQ_LOC : 1;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="18" ResetValue="0x0"
    uint32_t RXCALSQLCHOSC_TRIMCODE_LOC : 4;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="19" ResetValue="0x0"
    uint32_t  : 9;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_sqlch_calfsm_stat_2_reg_t;

#define PMA_RX_MGS_SQLCH_CALFSM_STAT_2_DEFAULT (0x00000000U)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_2_RD_MASK (0x007fffffU)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_2_WR_MASK (0x00000000U)


///< TBD
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_2_RXCALSQLCHOSCFSM_LPFAVG_BF_OFF ( 0)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_2_RXCALSQLCHOSCFSM_LPFAVG_BF_WID ( 6)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_2_RXCALSQLCHOSCFSM_LPFAVG_BF_MSK (0x0000003F)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_2_RXCALSQLCHOSCFSM_LPFAVG_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_2_RXCALSQLCHOSCFSM_ACK_BF_OFF ( 6)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_2_RXCALSQLCHOSCFSM_ACK_BF_WID ( 1)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_2_RXCALSQLCHOSCFSM_ACK_BF_MSK (0x00000040)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_2_RXCALSQLCHOSCFSM_ACK_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_2_RXCAL_SQLCHERR_RX_BF_OFF ( 7)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_2_RXCAL_SQLCHERR_RX_BF_WID ( 1)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_2_RXCAL_SQLCHERR_RX_BF_MSK (0x00000080)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_2_RXCAL_SQLCHERR_RX_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_2_RXCALSQLCHOSCMEAS_REQ_LOC_BF_OFF ( 8)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_2_RXCALSQLCHOSCMEAS_REQ_LOC_BF_WID ( 1)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_2_RXCALSQLCHOSCMEAS_REQ_LOC_BF_MSK (0x00000100)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_2_RXCALSQLCHOSCMEAS_REQ_LOC_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_2_RXCALSQLCHFSM_CLR_LOC_BF_OFF ( 9)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_2_RXCALSQLCHFSM_CLR_LOC_BF_WID ( 1)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_2_RXCALSQLCHFSM_CLR_LOC_BF_MSK (0x00000200)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_2_RXCALSQLCHFSM_CLR_LOC_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_2_RXCALSQLCHFSM_REQ_LOC_BF_OFF (10)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_2_RXCALSQLCHFSM_REQ_LOC_BF_WID ( 1)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_2_RXCALSQLCHFSM_REQ_LOC_BF_MSK (0x00000400)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_2_RXCALSQLCHFSM_REQ_LOC_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_2_RXCALSQLCHFSMOUT_CALDONE_LOC_BF_OFF (11)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_2_RXCALSQLCHFSMOUT_CALDONE_LOC_BF_WID ( 1)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_2_RXCALSQLCHFSMOUT_CALDONE_LOC_BF_MSK (0x00000800)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_2_RXCALSQLCHFSMOUT_CALDONE_LOC_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_2_RXCALSQLCHOSCFSM_CLR_LOC_BF_OFF (12)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_2_RXCALSQLCHOSCFSM_CLR_LOC_BF_WID ( 5)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_2_RXCALSQLCHOSCFSM_CLR_LOC_BF_MSK (0x0001F000)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_2_RXCALSQLCHOSCFSM_CLR_LOC_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_2_RXCALSQLCHOSCFSM_INIT_LOC_BF_OFF (17)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_2_RXCALSQLCHOSCFSM_INIT_LOC_BF_WID ( 1)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_2_RXCALSQLCHOSCFSM_INIT_LOC_BF_MSK (0x00020000)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_2_RXCALSQLCHOSCFSM_INIT_LOC_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_2_RXCALSQLCHOSCFSM_REQ_LOC_BF_OFF (18)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_2_RXCALSQLCHOSCFSM_REQ_LOC_BF_WID ( 1)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_2_RXCALSQLCHOSCFSM_REQ_LOC_BF_MSK (0x00040000)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_2_RXCALSQLCHOSCFSM_REQ_LOC_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_2_RXCALSQLCHOSC_TRIMCODE_LOC_BF_OFF (19)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_2_RXCALSQLCHOSC_TRIMCODE_LOC_BF_WID ( 4)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_2_RXCALSQLCHOSC_TRIMCODE_LOC_BF_MSK (0x00780000)
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_2_RXCALSQLCHOSC_TRIMCODE_LOC_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CONTROL_OVERRIDE register description at address offset 0x1c4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_control_override
  * Rx Control Override
  */

typedef union {
  struct {
    uint32_t RXRATEWIDTH_LOCOVREN : 1;
    ///< Rx ratewidth override enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXDATAPATH_LOCOVREN : 1;
    ///< Rx datapath override enable
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RXPPMLOCKSTATUS_LOCOVREN : 1;
    ///< Rx PPM sticky lock status override enable
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t RXPPM_LOCOVREN : 1;
    ///< Rx PPM lock status override enable
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t CDRLOCK2DATA_LOCOVREN : 1;
    ///< CDR lock-to-data gater override enable
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t LFPS_LOCOVREN : 1;
    ///< LFPS detect override enable
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t RXEQCDR_LOCOVREN : 1;
    ///< RxEQ CDR force lock-to-reference override enable
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t RXFLXGATE_LOCOVREN : 1;
    ///< Gate off Rx data valid to rxbist override enable
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t ANARX_LOCOVREN : 1;
    ///< APMA rx override enable
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RXTERMHIZ_EN_LOCOVREN : 1;
    ///< Rx termination override enable
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t RXRATEWIDTH_MODE_LOCOVR : 3;
    ///< Rx ratewidth mode override value.
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RXDATAPATH_READY_LOCOVR : 1;
    ///< Rx datapath ready override value.
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t RXPPMLOCKSTATUS_STICKY_LOCOVR : 1;
    ///< Rx PPM sticky lock status override value
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t RXPPM_LOCKSTATUS_LOCOVR : 1;
    ///< Rx PPM lock status override value
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t CDRLOCK2DATA_OPTCL_GATER_LOCOVR : 1;
    ///< CDR lock-to-data gater override value
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t LFPS_DET_LOCOVR : 1;
    ///< LFPS detect override value
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t RXEQCDR_FORCE_LTR_LOCOVR : 1;
    ///< RxEQ CDR force lock-to-reference override value
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t RXFLXGATE_FORCE_RXEQ_GATE_LOCOVR : 1;
    ///< Gate off Rx data valid to rxbist override value
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t ANARX_DIVRATE_LOCOVR : 4;
    ///< APMA rx divrate override value
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t RXTERMHIZ_EN_LOCOVR : 1;
    ///< Rx termination override value
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t ADP_PAM4_EN_OVREN : 1;
    ///< PAM4 Enable Override - Dedicated override for rx_eq
    ///< AccessType="RW" BitOffset="25" ResetValue="0x0"
    uint32_t ADP_PAM4_EN_OVR : 1;
    ///< PAM4 Enable Override Value - Dedicated override for rx_eq
    ///< AccessType="RW" BitOffset="26" ResetValue="0x0"
    uint32_t RXDAT_MODULATION_SCHEME_OVREN : 1;
    ///< Rx DataPath modulation scheme override enable
    ///< AccessType="RW" BitOffset="27" ResetValue="0x0"
    uint32_t RXDAT_MODULATION_SCHEME_OVR : 2;
    ///< Rx DataPath modulation scheme override.  0: NRZ; 1: PAM4; 2/3: Reserved
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_ctrl_ovrd_reg_t;

#define PMA_RX_MGS_CTRL_OVRD_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CTRL_OVRD_RD_MASK (0x3fffffffU)
#define PMA_RX_MGS_CTRL_OVRD_WR_MASK (0x3fffffffU)


///< Rx ratewidth override enable
#define PMA_RX_MGS_CTRL_OVRD_RXRATEWIDTH_LOCOVREN_BF_OFF ( 0)
#define PMA_RX_MGS_CTRL_OVRD_RXRATEWIDTH_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_OVRD_RXRATEWIDTH_LOCOVREN_BF_MSK (0x00000001)
#define PMA_RX_MGS_CTRL_OVRD_RXRATEWIDTH_LOCOVREN_BF_DEF (0x00000000)

///< Rx datapath override enable
#define PMA_RX_MGS_CTRL_OVRD_RXDATAPATH_LOCOVREN_BF_OFF ( 1)
#define PMA_RX_MGS_CTRL_OVRD_RXDATAPATH_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_OVRD_RXDATAPATH_LOCOVREN_BF_MSK (0x00000002)
#define PMA_RX_MGS_CTRL_OVRD_RXDATAPATH_LOCOVREN_BF_DEF (0x00000000)

///< Rx PPM sticky lock status override enable
#define PMA_RX_MGS_CTRL_OVRD_RXPPMLOCKSTAT_LOCOVREN_BF_OFF ( 2)
#define PMA_RX_MGS_CTRL_OVRD_RXPPMLOCKSTAT_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_OVRD_RXPPMLOCKSTAT_LOCOVREN_BF_MSK (0x00000004)
#define PMA_RX_MGS_CTRL_OVRD_RXPPMLOCKSTAT_LOCOVREN_BF_DEF (0x00000000)

///< Rx PPM lock status override enable
#define PMA_RX_MGS_CTRL_OVRD_RXPPM_LOCOVREN_BF_OFF ( 3)
#define PMA_RX_MGS_CTRL_OVRD_RXPPM_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_OVRD_RXPPM_LOCOVREN_BF_MSK (0x00000008)
#define PMA_RX_MGS_CTRL_OVRD_RXPPM_LOCOVREN_BF_DEF (0x00000000)

///< CDR lock-to-data gater override enable
#define PMA_RX_MGS_CTRL_OVRD_CDRLOCK2DATA_LOCOVREN_BF_OFF ( 4)
#define PMA_RX_MGS_CTRL_OVRD_CDRLOCK2DATA_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_OVRD_CDRLOCK2DATA_LOCOVREN_BF_MSK (0x00000010)
#define PMA_RX_MGS_CTRL_OVRD_CDRLOCK2DATA_LOCOVREN_BF_DEF (0x00000000)

///< LFPS detect override enable
#define PMA_RX_MGS_CTRL_OVRD_LFPS_LOCOVREN_BF_OFF ( 5)
#define PMA_RX_MGS_CTRL_OVRD_LFPS_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_OVRD_LFPS_LOCOVREN_BF_MSK (0x00000020)
#define PMA_RX_MGS_CTRL_OVRD_LFPS_LOCOVREN_BF_DEF (0x00000000)

///< RxEQ CDR force lock-to-reference override enable
#define PMA_RX_MGS_CTRL_OVRD_RXEQCDR_LOCOVREN_BF_OFF ( 6)
#define PMA_RX_MGS_CTRL_OVRD_RXEQCDR_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_OVRD_RXEQCDR_LOCOVREN_BF_MSK (0x00000040)
#define PMA_RX_MGS_CTRL_OVRD_RXEQCDR_LOCOVREN_BF_DEF (0x00000000)

///< Gate off Rx data valid to rxbist override enable
#define PMA_RX_MGS_CTRL_OVRD_RXFLXGATE_LOCOVREN_BF_OFF ( 7)
#define PMA_RX_MGS_CTRL_OVRD_RXFLXGATE_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_OVRD_RXFLXGATE_LOCOVREN_BF_MSK (0x00000080)
#define PMA_RX_MGS_CTRL_OVRD_RXFLXGATE_LOCOVREN_BF_DEF (0x00000000)

///< APMA rx override enable
#define PMA_RX_MGS_CTRL_OVRD_ANARX_LOCOVREN_BF_OFF ( 8)
#define PMA_RX_MGS_CTRL_OVRD_ANARX_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_OVRD_ANARX_LOCOVREN_BF_MSK (0x00000100)
#define PMA_RX_MGS_CTRL_OVRD_ANARX_LOCOVREN_BF_DEF (0x00000000)

///< Rx termination override enable
#define PMA_RX_MGS_CTRL_OVRD_RXTERMHIZ_EN_LOCOVREN_BF_OFF ( 9)
#define PMA_RX_MGS_CTRL_OVRD_RXTERMHIZ_EN_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_OVRD_RXTERMHIZ_EN_LOCOVREN_BF_MSK (0x00000200)
#define PMA_RX_MGS_CTRL_OVRD_RXTERMHIZ_EN_LOCOVREN_BF_DEF (0x00000000)

///< Rx ratewidth mode override value.
#define PMA_RX_MGS_CTRL_OVRD_RXRATEWIDTH_MODE_LOCOVR_BF_OFF (10)
#define PMA_RX_MGS_CTRL_OVRD_RXRATEWIDTH_MODE_LOCOVR_BF_WID ( 3)
#define PMA_RX_MGS_CTRL_OVRD_RXRATEWIDTH_MODE_LOCOVR_BF_MSK (0x00001C00)
#define PMA_RX_MGS_CTRL_OVRD_RXRATEWIDTH_MODE_LOCOVR_BF_DEF (0x00000000)

///< Rx datapath ready override value.
#define PMA_RX_MGS_CTRL_OVRD_RXDATAPATH_READY_LOCOVR_BF_OFF (13)
#define PMA_RX_MGS_CTRL_OVRD_RXDATAPATH_READY_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_OVRD_RXDATAPATH_READY_LOCOVR_BF_MSK (0x00002000)
#define PMA_RX_MGS_CTRL_OVRD_RXDATAPATH_READY_LOCOVR_BF_DEF (0x00000000)

///< Rx PPM sticky lock status override value
#define PMA_RX_MGS_CTRL_OVRD_RXPPMLOCKSTAT_STICKY_LOCOVR_BF_OFF (14)
#define PMA_RX_MGS_CTRL_OVRD_RXPPMLOCKSTAT_STICKY_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_OVRD_RXPPMLOCKSTAT_STICKY_LOCOVR_BF_MSK (0x00004000)
#define PMA_RX_MGS_CTRL_OVRD_RXPPMLOCKSTAT_STICKY_LOCOVR_BF_DEF (0x00000000)

///< Rx PPM lock status override value
#define PMA_RX_MGS_CTRL_OVRD_RXPPM_LOCKSTAT_LOCOVR_BF_OFF (15)
#define PMA_RX_MGS_CTRL_OVRD_RXPPM_LOCKSTAT_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_OVRD_RXPPM_LOCKSTAT_LOCOVR_BF_MSK (0x00008000)
#define PMA_RX_MGS_CTRL_OVRD_RXPPM_LOCKSTAT_LOCOVR_BF_DEF (0x00000000)

///< CDR lock-to-data gater override value
#define PMA_RX_MGS_CTRL_OVRD_CDRLOCK2DATA_OPTCL_GATER_LOCOVR_BF_OFF (16)
#define PMA_RX_MGS_CTRL_OVRD_CDRLOCK2DATA_OPTCL_GATER_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_OVRD_CDRLOCK2DATA_OPTCL_GATER_LOCOVR_BF_MSK (0x00010000)
#define PMA_RX_MGS_CTRL_OVRD_CDRLOCK2DATA_OPTCL_GATER_LOCOVR_BF_DEF (0x00000000)

///< LFPS detect override value
#define PMA_RX_MGS_CTRL_OVRD_LFPS_DET_LOCOVR_BF_OFF (17)
#define PMA_RX_MGS_CTRL_OVRD_LFPS_DET_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_OVRD_LFPS_DET_LOCOVR_BF_MSK (0x00020000)
#define PMA_RX_MGS_CTRL_OVRD_LFPS_DET_LOCOVR_BF_DEF (0x00000000)

///< RxEQ CDR force lock-to-reference override value
#define PMA_RX_MGS_CTRL_OVRD_RXEQCDR_FORCE_LTR_LOCOVR_BF_OFF (18)
#define PMA_RX_MGS_CTRL_OVRD_RXEQCDR_FORCE_LTR_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_OVRD_RXEQCDR_FORCE_LTR_LOCOVR_BF_MSK (0x00040000)
#define PMA_RX_MGS_CTRL_OVRD_RXEQCDR_FORCE_LTR_LOCOVR_BF_DEF (0x00000000)

///< Gate off Rx data valid to rxbist override value
#define PMA_RX_MGS_CTRL_OVRD_RXFLXGATE_FORCE_RXEQ_GATE_LOCOVR_BF_OFF (19)
#define PMA_RX_MGS_CTRL_OVRD_RXFLXGATE_FORCE_RXEQ_GATE_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_OVRD_RXFLXGATE_FORCE_RXEQ_GATE_LOCOVR_BF_MSK (0x00080000)
#define PMA_RX_MGS_CTRL_OVRD_RXFLXGATE_FORCE_RXEQ_GATE_LOCOVR_BF_DEF (0x00000000)

///< APMA rx divrate override value
#define PMA_RX_MGS_CTRL_OVRD_ANARX_DIVRATE_LOCOVR_BF_OFF (20)
#define PMA_RX_MGS_CTRL_OVRD_ANARX_DIVRATE_LOCOVR_BF_WID ( 4)
#define PMA_RX_MGS_CTRL_OVRD_ANARX_DIVRATE_LOCOVR_BF_MSK (0x00F00000)
#define PMA_RX_MGS_CTRL_OVRD_ANARX_DIVRATE_LOCOVR_BF_DEF (0x00000000)

///< Rx termination override value
#define PMA_RX_MGS_CTRL_OVRD_RXTERMHIZ_EN_LOCOVR_BF_OFF (24)
#define PMA_RX_MGS_CTRL_OVRD_RXTERMHIZ_EN_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_OVRD_RXTERMHIZ_EN_LOCOVR_BF_MSK (0x01000000)
#define PMA_RX_MGS_CTRL_OVRD_RXTERMHIZ_EN_LOCOVR_BF_DEF (0x00000000)

///< PAM4 Enable Override - Dedicated override for rx_eq
#define PMA_RX_MGS_CTRL_OVRD_ADP_PAM4_EN_OVREN_BF_OFF (25)
#define PMA_RX_MGS_CTRL_OVRD_ADP_PAM4_EN_OVREN_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_OVRD_ADP_PAM4_EN_OVREN_BF_MSK (0x02000000)
#define PMA_RX_MGS_CTRL_OVRD_ADP_PAM4_EN_OVREN_BF_DEF (0x00000000)

///< PAM4 Enable Override Value - Dedicated override for rx_eq
#define PMA_RX_MGS_CTRL_OVRD_ADP_PAM4_EN_OVR_BF_OFF (26)
#define PMA_RX_MGS_CTRL_OVRD_ADP_PAM4_EN_OVR_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_OVRD_ADP_PAM4_EN_OVR_BF_MSK (0x04000000)
#define PMA_RX_MGS_CTRL_OVRD_ADP_PAM4_EN_OVR_BF_DEF (0x00000000)

///< Rx DataPath modulation scheme override enable
#define PMA_RX_MGS_CTRL_OVRD_RXDAT_MOD_SCHEME_OVREN_BF_OFF (27)
#define PMA_RX_MGS_CTRL_OVRD_RXDAT_MOD_SCHEME_OVREN_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_OVRD_RXDAT_MOD_SCHEME_OVREN_BF_MSK (0x08000000)
#define PMA_RX_MGS_CTRL_OVRD_RXDAT_MOD_SCHEME_OVREN_BF_DEF (0x00000000)

///< Rx DataPath modulation scheme override.  0: NRZ; 1: PAM4; 2/3: Reserved
#define PMA_RX_MGS_CTRL_OVRD_RXDAT_MOD_SCHEME_OVR_BF_OFF (28)
#define PMA_RX_MGS_CTRL_OVRD_RXDAT_MOD_SCHEME_OVR_BF_WID ( 2)
#define PMA_RX_MGS_CTRL_OVRD_RXDAT_MOD_SCHEME_OVR_BF_MSK (0x30000000)
#define PMA_RX_MGS_CTRL_OVRD_RXDAT_MOD_SCHEME_OVR_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CONTROL_OVERRIDE_RO register description at address offset 0x1c8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_control_override_ro
  * Rx Control Override readback
  */

typedef union {
  struct {
    uint32_t RXRATEWIDTH_MODE_LOC : 3;
    ///< Rx ratewidth mode.  Pre-override value.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RXDATAPATH_READY_LOC : 1;
    ///< Rx datapath ready.  Pre-override value.
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t RXPPMLOCKSTATUS_STICKY_LOC : 1;
    ///< Rx PPM sticky lock status.  Pre-override value
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t RXPPM_LOCKSTATUS_LOC : 1;
    ///< Rx PPM lock status.  Pre-override value
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t CDRLOCK2DATA_OPTCL_GATER_LOC : 1;
    ///< CDR lock-to-data gater.  Pre-override value
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t LFPS_DET_LOC : 1;
    ///< LFPS detect.  Pre-override value
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t RXEQCDR_FORCE_LTR_LOC : 1;
    ///< RxEQ CDR force lock-to-reference. Pre-override value
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t RXFLXGATE_FORCE_RXEQ_GATE_LOC : 1;
    ///< Gate off Rx data valid to rxbist pre-override value
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t ANARX_DIVRATE_LOC : 4;
    ///< APMA rx divrate pre-override value
    ///< AccessType="RO/V" BitOffset="10" ResetValue="0x0"
    uint32_t RXTERMHIZ_EN_LOC : 1;
    ///< Rx termination pre-override value
    ///< AccessType="RO/V" BitOffset="14" ResetValue="0x0"
    uint32_t  : 17;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_ctrl_ovrd_ro_reg_t;

#define PMA_RX_MGS_CTRL_OVRD_RO_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CTRL_OVRD_RO_RD_MASK (0x00007fffU)
#define PMA_RX_MGS_CTRL_OVRD_RO_WR_MASK (0x00000000U)


///< Rx ratewidth mode.  Pre-override value.
#define PMA_RX_MGS_CTRL_OVRD_RO_RXRATEWIDTH_MODE_LOC_BF_OFF ( 0)
#define PMA_RX_MGS_CTRL_OVRD_RO_RXRATEWIDTH_MODE_LOC_BF_WID ( 3)
#define PMA_RX_MGS_CTRL_OVRD_RO_RXRATEWIDTH_MODE_LOC_BF_MSK (0x00000007)
#define PMA_RX_MGS_CTRL_OVRD_RO_RXRATEWIDTH_MODE_LOC_BF_DEF (0x00000000)

///< Rx datapath ready.  Pre-override value.
#define PMA_RX_MGS_CTRL_OVRD_RO_RXDATAPATH_READY_LOC_BF_OFF ( 3)
#define PMA_RX_MGS_CTRL_OVRD_RO_RXDATAPATH_READY_LOC_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_OVRD_RO_RXDATAPATH_READY_LOC_BF_MSK (0x00000008)
#define PMA_RX_MGS_CTRL_OVRD_RO_RXDATAPATH_READY_LOC_BF_DEF (0x00000000)

///< Rx PPM sticky lock status.  Pre-override value
#define PMA_RX_MGS_CTRL_OVRD_RO_RXPPMLOCKSTAT_STICKY_LOC_BF_OFF ( 4)
#define PMA_RX_MGS_CTRL_OVRD_RO_RXPPMLOCKSTAT_STICKY_LOC_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_OVRD_RO_RXPPMLOCKSTAT_STICKY_LOC_BF_MSK (0x00000010)
#define PMA_RX_MGS_CTRL_OVRD_RO_RXPPMLOCKSTAT_STICKY_LOC_BF_DEF (0x00000000)

///< Rx PPM lock status.  Pre-override value
#define PMA_RX_MGS_CTRL_OVRD_RO_RXPPM_LOCKSTAT_LOC_BF_OFF ( 5)
#define PMA_RX_MGS_CTRL_OVRD_RO_RXPPM_LOCKSTAT_LOC_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_OVRD_RO_RXPPM_LOCKSTAT_LOC_BF_MSK (0x00000020)
#define PMA_RX_MGS_CTRL_OVRD_RO_RXPPM_LOCKSTAT_LOC_BF_DEF (0x00000000)

///< CDR lock-to-data gater.  Pre-override value
#define PMA_RX_MGS_CTRL_OVRD_RO_CDRLOCK2DATA_OPTCL_GATER_LOC_BF_OFF ( 6)
#define PMA_RX_MGS_CTRL_OVRD_RO_CDRLOCK2DATA_OPTCL_GATER_LOC_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_OVRD_RO_CDRLOCK2DATA_OPTCL_GATER_LOC_BF_MSK (0x00000040)
#define PMA_RX_MGS_CTRL_OVRD_RO_CDRLOCK2DATA_OPTCL_GATER_LOC_BF_DEF (0x00000000)

///< LFPS detect.  Pre-override value
#define PMA_RX_MGS_CTRL_OVRD_RO_LFPS_DET_LOC_BF_OFF ( 7)
#define PMA_RX_MGS_CTRL_OVRD_RO_LFPS_DET_LOC_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_OVRD_RO_LFPS_DET_LOC_BF_MSK (0x00000080)
#define PMA_RX_MGS_CTRL_OVRD_RO_LFPS_DET_LOC_BF_DEF (0x00000000)

///< RxEQ CDR force lock-to-reference. Pre-override value
#define PMA_RX_MGS_CTRL_OVRD_RO_RXEQCDR_FORCE_LTR_LOC_BF_OFF ( 8)
#define PMA_RX_MGS_CTRL_OVRD_RO_RXEQCDR_FORCE_LTR_LOC_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_OVRD_RO_RXEQCDR_FORCE_LTR_LOC_BF_MSK (0x00000100)
#define PMA_RX_MGS_CTRL_OVRD_RO_RXEQCDR_FORCE_LTR_LOC_BF_DEF (0x00000000)

///< Gate off Rx data valid to rxbist pre-override value
#define PMA_RX_MGS_CTRL_OVRD_RO_RXFLXGATE_FORCE_RXEQ_GATE_LOC_BF_OFF ( 9)
#define PMA_RX_MGS_CTRL_OVRD_RO_RXFLXGATE_FORCE_RXEQ_GATE_LOC_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_OVRD_RO_RXFLXGATE_FORCE_RXEQ_GATE_LOC_BF_MSK (0x00000200)
#define PMA_RX_MGS_CTRL_OVRD_RO_RXFLXGATE_FORCE_RXEQ_GATE_LOC_BF_DEF (0x00000000)

///< APMA rx divrate pre-override value
#define PMA_RX_MGS_CTRL_OVRD_RO_ANARX_DIVRATE_LOC_BF_OFF (10)
#define PMA_RX_MGS_CTRL_OVRD_RO_ANARX_DIVRATE_LOC_BF_WID ( 4)
#define PMA_RX_MGS_CTRL_OVRD_RO_ANARX_DIVRATE_LOC_BF_MSK (0x00003C00)
#define PMA_RX_MGS_CTRL_OVRD_RO_ANARX_DIVRATE_LOC_BF_DEF (0x00000000)

///< Rx termination pre-override value
#define PMA_RX_MGS_CTRL_OVRD_RO_RXTERMHIZ_EN_LOC_BF_OFF (14)
#define PMA_RX_MGS_CTRL_OVRD_RO_RXTERMHIZ_EN_LOC_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_OVRD_RO_RXTERMHIZ_EN_LOC_BF_MSK (0x00004000)
#define PMA_RX_MGS_CTRL_OVRD_RO_RXTERMHIZ_EN_LOC_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CTRL_OUT register description at address offset 0x1cc
  *
  * Register default value:        0x00001F00
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_ctrl_out
  * Rx Control Output
  */

typedef union {
  struct {
    uint32_t RXRSTPDOVR_APDRX_SQLCH_OVREN : 1;
    ///< Rx squelch power down override enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXRSTPDOVR_APDRX_SQLCH_OVR_B : 1;
    ///< Rx squelch power down override
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RXSIGDET_LOCK2DATA_IF_PIN_SRC_SEL : 1;
    ///< Rx lock2data pin source select
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t RXSIGDET_SIGDET_IF_PIN_SRC_SEL : 1;
    ///< Rx signal detect pin source select
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RXSUSSIGDETOUT_OVR_EN : 1;
    ///< Rx signal detect out override enable
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RXSUSSIGDETOUT_OVR : 1;
    ///< Rx signal detect out override
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t RXSUSSQLCH_ENABLE : 1;
    ///< Rx Squelch enable
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t RXCALFOSCFSM_RECAL : 8;
    ///< Rx FOS calbration recalibration. Bit[n] = Mode [n]
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1F"
    uint32_t RXRSTPDOVR_AETRRX_AFE_IN_HIZ_OVREN : 1;
    ///< Rx AFE input hi-z termination override enable
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t RXRSTPDOVR_AETRRX_AFE_IN_HIZ_OVR_B : 1;
    ///< Rx AFE input hi-z termination override
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_ctrl_out_reg_t;

#define PMA_RX_MGS_CTRL_OUT_DEFAULT (0x00001f00U)
#define PMA_RX_MGS_CTRL_OUT_RD_MASK (0x0003ff7fU)
#define PMA_RX_MGS_CTRL_OUT_WR_MASK (0x0003ff7fU)


///< Rx squelch power down override enable
#define PMA_RX_MGS_CTRL_OUT_RXRSTPDOVR_APDRX_SQLCH_OVREN_BF_OFF ( 0)
#define PMA_RX_MGS_CTRL_OUT_RXRSTPDOVR_APDRX_SQLCH_OVREN_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_OUT_RXRSTPDOVR_APDRX_SQLCH_OVREN_BF_MSK (0x00000001)
#define PMA_RX_MGS_CTRL_OUT_RXRSTPDOVR_APDRX_SQLCH_OVREN_BF_DEF (0x00000000)

///< Rx squelch power down override
#define PMA_RX_MGS_CTRL_OUT_RXRSTPDOVR_APDRX_SQLCH_OVR_B_BF_OFF ( 1)
#define PMA_RX_MGS_CTRL_OUT_RXRSTPDOVR_APDRX_SQLCH_OVR_B_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_OUT_RXRSTPDOVR_APDRX_SQLCH_OVR_B_BF_MSK (0x00000002)
#define PMA_RX_MGS_CTRL_OUT_RXRSTPDOVR_APDRX_SQLCH_OVR_B_BF_DEF (0x00000000)

///< Rx lock2data pin source select
#define PMA_RX_MGS_CTRL_OUT_RXSIGDET_LOCK2DATA_IF_PIN_SRC_SEL_BF_OFF ( 2)
#define PMA_RX_MGS_CTRL_OUT_RXSIGDET_LOCK2DATA_IF_PIN_SRC_SEL_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_OUT_RXSIGDET_LOCK2DATA_IF_PIN_SRC_SEL_BF_MSK (0x00000004)
#define PMA_RX_MGS_CTRL_OUT_RXSIGDET_LOCK2DATA_IF_PIN_SRC_SEL_BF_DEF (0x00000000)

///< Rx signal detect pin source select
#define PMA_RX_MGS_CTRL_OUT_RXSIGDET_SIGDET_IF_PIN_SRC_SEL_BF_OFF ( 3)
#define PMA_RX_MGS_CTRL_OUT_RXSIGDET_SIGDET_IF_PIN_SRC_SEL_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_OUT_RXSIGDET_SIGDET_IF_PIN_SRC_SEL_BF_MSK (0x00000008)
#define PMA_RX_MGS_CTRL_OUT_RXSIGDET_SIGDET_IF_PIN_SRC_SEL_BF_DEF (0x00000000)

///< Rx signal detect out override enable
#define PMA_RX_MGS_CTRL_OUT_RXSUSSIGDETOUT_OVR_EN_BF_OFF ( 4)
#define PMA_RX_MGS_CTRL_OUT_RXSUSSIGDETOUT_OVR_EN_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_OUT_RXSUSSIGDETOUT_OVR_EN_BF_MSK (0x00000010)
#define PMA_RX_MGS_CTRL_OUT_RXSUSSIGDETOUT_OVR_EN_BF_DEF (0x00000000)

///< Rx signal detect out override
#define PMA_RX_MGS_CTRL_OUT_RXSUSSIGDETOUT_OVR_BF_OFF ( 5)
#define PMA_RX_MGS_CTRL_OUT_RXSUSSIGDETOUT_OVR_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_OUT_RXSUSSIGDETOUT_OVR_BF_MSK (0x00000020)
#define PMA_RX_MGS_CTRL_OUT_RXSUSSIGDETOUT_OVR_BF_DEF (0x00000000)

///< Rx Squelch enable
#define PMA_RX_MGS_CTRL_OUT_RXSUSSQLCH_EN_BF_OFF ( 6)
#define PMA_RX_MGS_CTRL_OUT_RXSUSSQLCH_EN_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_OUT_RXSUSSQLCH_EN_BF_MSK (0x00000040)
#define PMA_RX_MGS_CTRL_OUT_RXSUSSQLCH_EN_BF_DEF (0x00000000)

///< Rx FOS calbration recalibration. Bit[n] = Mode [n]
#define PMA_RX_MGS_CTRL_OUT_RXCALFOSCFSM_RECAL_BF_OFF ( 8)
#define PMA_RX_MGS_CTRL_OUT_RXCALFOSCFSM_RECAL_BF_WID ( 8)
#define PMA_RX_MGS_CTRL_OUT_RXCALFOSCFSM_RECAL_BF_MSK (0x0000FF00)
#define PMA_RX_MGS_CTRL_OUT_RXCALFOSCFSM_RECAL_BF_DEF (0x00001F00)

///< Rx AFE input hi-z termination override enable
#define PMA_RX_MGS_CTRL_OUT_RXRSTPDOVR_AETRRX_AFE_IN_HIZ_OVREN_BF_OFF (16)
#define PMA_RX_MGS_CTRL_OUT_RXRSTPDOVR_AETRRX_AFE_IN_HIZ_OVREN_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_OUT_RXRSTPDOVR_AETRRX_AFE_IN_HIZ_OVREN_BF_MSK (0x00010000)
#define PMA_RX_MGS_CTRL_OUT_RXRSTPDOVR_AETRRX_AFE_IN_HIZ_OVREN_BF_DEF (0x00000000)

///< Rx AFE input hi-z termination override
#define PMA_RX_MGS_CTRL_OUT_RXRSTPDOVR_AETRRX_AFE_IN_HIZ_OVR_B_BF_OFF (17)
#define PMA_RX_MGS_CTRL_OUT_RXRSTPDOVR_AETRRX_AFE_IN_HIZ_OVR_B_BF_WID ( 1)
#define PMA_RX_MGS_CTRL_OUT_RXRSTPDOVR_AETRRX_AFE_IN_HIZ_OVR_B_BF_MSK (0x00020000)
#define PMA_RX_MGS_CTRL_OUT_RXRSTPDOVR_AETRRX_AFE_IN_HIZ_OVR_B_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_MARGIN_CTRL_0 register description at address offset 0x1d0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_margin_ctrl_0
  * Rx Margin Control
  */

typedef union {
  struct {
    uint32_t RXMARGIN_JIT_DISABLE_DELAY : 10;
    ///< RxMargin JIT disable delay
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXMARGIN_JIT_ENABLE_DELAY : 10;
    ///< RxMargin JIT enable delay
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RXMARGIN_JIT_SETUP_DELAY : 10;
    ///< RxMargin JIT setup delay
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_margin_ctrl_0_reg_t;

#define PMA_RX_MGS_MARGIN_CTRL_0_DEFAULT (0x00000000U)
#define PMA_RX_MGS_MARGIN_CTRL_0_RD_MASK (0x3fffffffU)
#define PMA_RX_MGS_MARGIN_CTRL_0_WR_MASK (0x3fffffffU)


///< RxMargin JIT disable delay
#define PMA_RX_MGS_MARGIN_CTRL_0_RXMARGIN_JIT_DIS_DELAY_BF_OFF ( 0)
#define PMA_RX_MGS_MARGIN_CTRL_0_RXMARGIN_JIT_DIS_DELAY_BF_WID (10)
#define PMA_RX_MGS_MARGIN_CTRL_0_RXMARGIN_JIT_DIS_DELAY_BF_MSK (0x000003FF)
#define PMA_RX_MGS_MARGIN_CTRL_0_RXMARGIN_JIT_DIS_DELAY_BF_DEF (0x00000000)

///< RxMargin JIT enable delay
#define PMA_RX_MGS_MARGIN_CTRL_0_RXMARGIN_JIT_EN_DELAY_BF_OFF (10)
#define PMA_RX_MGS_MARGIN_CTRL_0_RXMARGIN_JIT_EN_DELAY_BF_WID (10)
#define PMA_RX_MGS_MARGIN_CTRL_0_RXMARGIN_JIT_EN_DELAY_BF_MSK (0x000FFC00)
#define PMA_RX_MGS_MARGIN_CTRL_0_RXMARGIN_JIT_EN_DELAY_BF_DEF (0x00000000)

///< RxMargin JIT setup delay
#define PMA_RX_MGS_MARGIN_CTRL_0_RXMARGIN_JIT_SETUP_DELAY_BF_OFF (20)
#define PMA_RX_MGS_MARGIN_CTRL_0_RXMARGIN_JIT_SETUP_DELAY_BF_WID (10)
#define PMA_RX_MGS_MARGIN_CTRL_0_RXMARGIN_JIT_SETUP_DELAY_BF_MSK (0x3FF00000)
#define PMA_RX_MGS_MARGIN_CTRL_0_RXMARGIN_JIT_SETUP_DELAY_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_MARGIN_CTRL_1 register description at address offset 0x1d4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_margin_ctrl_1
  * Rx Margin Control
  */

typedef union {
  struct {
    uint32_t RXMARGIN_JIT_OFFSET_SHIFT : 5;
    ///< RxMargin JIT offset shift
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXMARGIN_VOLT_COMP_MASK : 2;
    ///< RxMargin Volt Mask
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t RXMARGIN_VOLT_FORCEL2D_EN : 1;
    ///< RxMargin Volt force lock to data enable
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t RXMARGIN_VOLT_OFFSET_SHIFT_D0 : 3;
    ///< RxMargin Volt offset shift d0
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RXMARGIN_VOLT_OFFSET_SHIFT_D1 : 3;
    ///< RxMargin Volt offset shift d1
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t RXMARGININ_FLX_JIT_OFFSET : 7;
    ///< RxMargin Flex Jit Offset (not used)
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_margin_ctrl_1_reg_t;

#define PMA_RX_MGS_MARGIN_CTRL_1_DEFAULT (0x00000000U)
#define PMA_RX_MGS_MARGIN_CTRL_1_RD_MASK (0x001fffffU)
#define PMA_RX_MGS_MARGIN_CTRL_1_WR_MASK (0x001fffffU)


///< RxMargin JIT offset shift
#define PMA_RX_MGS_MARGIN_CTRL_1_RXMARGIN_JIT_OFFSET_SHIFT_BF_OFF ( 0)
#define PMA_RX_MGS_MARGIN_CTRL_1_RXMARGIN_JIT_OFFSET_SHIFT_BF_WID ( 5)
#define PMA_RX_MGS_MARGIN_CTRL_1_RXMARGIN_JIT_OFFSET_SHIFT_BF_MSK (0x0000001F)
#define PMA_RX_MGS_MARGIN_CTRL_1_RXMARGIN_JIT_OFFSET_SHIFT_BF_DEF (0x00000000)

///< RxMargin Volt Mask
#define PMA_RX_MGS_MARGIN_CTRL_1_RXMARGIN_VOLT_COMP_MASK_BF_OFF ( 5)
#define PMA_RX_MGS_MARGIN_CTRL_1_RXMARGIN_VOLT_COMP_MASK_BF_WID ( 2)
#define PMA_RX_MGS_MARGIN_CTRL_1_RXMARGIN_VOLT_COMP_MASK_BF_MSK (0x00000060)
#define PMA_RX_MGS_MARGIN_CTRL_1_RXMARGIN_VOLT_COMP_MASK_BF_DEF (0x00000000)

///< RxMargin Volt force lock to data enable
#define PMA_RX_MGS_MARGIN_CTRL_1_RXMARGIN_VOLT_FORCEL2D_EN_BF_OFF ( 7)
#define PMA_RX_MGS_MARGIN_CTRL_1_RXMARGIN_VOLT_FORCEL2D_EN_BF_WID ( 1)
#define PMA_RX_MGS_MARGIN_CTRL_1_RXMARGIN_VOLT_FORCEL2D_EN_BF_MSK (0x00000080)
#define PMA_RX_MGS_MARGIN_CTRL_1_RXMARGIN_VOLT_FORCEL2D_EN_BF_DEF (0x00000000)

///< RxMargin Volt offset shift d0
#define PMA_RX_MGS_MARGIN_CTRL_1_RXMARGIN_VOLT_OFFSET_SHIFT_D0_BF_OFF ( 8)
#define PMA_RX_MGS_MARGIN_CTRL_1_RXMARGIN_VOLT_OFFSET_SHIFT_D0_BF_WID ( 3)
#define PMA_RX_MGS_MARGIN_CTRL_1_RXMARGIN_VOLT_OFFSET_SHIFT_D0_BF_MSK (0x00000700)
#define PMA_RX_MGS_MARGIN_CTRL_1_RXMARGIN_VOLT_OFFSET_SHIFT_D0_BF_DEF (0x00000000)

///< RxMargin Volt offset shift d1
#define PMA_RX_MGS_MARGIN_CTRL_1_RXMARGIN_VOLT_OFFSET_SHIFT_D1_BF_OFF (11)
#define PMA_RX_MGS_MARGIN_CTRL_1_RXMARGIN_VOLT_OFFSET_SHIFT_D1_BF_WID ( 3)
#define PMA_RX_MGS_MARGIN_CTRL_1_RXMARGIN_VOLT_OFFSET_SHIFT_D1_BF_MSK (0x00003800)
#define PMA_RX_MGS_MARGIN_CTRL_1_RXMARGIN_VOLT_OFFSET_SHIFT_D1_BF_DEF (0x00000000)

///< RxMargin Flex Jit Offset (not used)
#define PMA_RX_MGS_MARGIN_CTRL_1_RXMARGININ_FLX_JIT_OFFSET_BF_OFF (14)
#define PMA_RX_MGS_MARGIN_CTRL_1_RXMARGININ_FLX_JIT_OFFSET_BF_WID ( 7)
#define PMA_RX_MGS_MARGIN_CTRL_1_RXMARGININ_FLX_JIT_OFFSET_BF_MSK (0x001FC000)
#define PMA_RX_MGS_MARGIN_CTRL_1_RXMARGININ_FLX_JIT_OFFSET_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_MARGIN_CTRL_2 register description at address offset 0x1d8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_margin_ctrl_2
  * Rx Margin Control
  */

typedef union {
  struct {
    uint32_t RXEQSET_LATCH_DELAY : 4;
    ///< RxEq Latch delay
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXMARGIN_FLX_JIT_OFFSET_SHIFT : 5;
    ///< RxMargin Flex Jit Offset Sfhit (not used)
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RXMARGININ_LOCOVREN : 1;
    ///< RxMargin control override enable
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t RXMARGININ_START_LOCOVR : 1;
    ///< RxMargin start override
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RXMARGININ_DIRECTION_LOCOVR : 1;
    ///< RxMargin direction override
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t RXMARGININ_OFFSET_CHANGE_LOCOVR : 1;
    ///< RxMargin offset change override
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t RXMARGININ_MODE_LOCOVR : 1;
    ///< RxMargin mode override
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t RXMARGININ_OFFSET_LOCOVR : 7;
    ///< RxMargin offset override
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t RXMARGININ_PAM4_EYE_SEL_LOCOVR : 2;
    ///< RxMargin PAM4 eye select override
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t  : 9;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_margin_ctrl_2_reg_t;

#define PMA_RX_MGS_MARGIN_CTRL_2_DEFAULT (0x00000000U)
#define PMA_RX_MGS_MARGIN_CTRL_2_RD_MASK (0x007fffffU)
#define PMA_RX_MGS_MARGIN_CTRL_2_WR_MASK (0x007fffffU)


///< RxEq Latch delay
#define PMA_RX_MGS_MARGIN_CTRL_2_RXEQSET_LATCH_DELAY_BF_OFF ( 0)
#define PMA_RX_MGS_MARGIN_CTRL_2_RXEQSET_LATCH_DELAY_BF_WID ( 4)
#define PMA_RX_MGS_MARGIN_CTRL_2_RXEQSET_LATCH_DELAY_BF_MSK (0x0000000F)
#define PMA_RX_MGS_MARGIN_CTRL_2_RXEQSET_LATCH_DELAY_BF_DEF (0x00000000)

///< RxMargin Flex Jit Offset Sfhit (not used)
#define PMA_RX_MGS_MARGIN_CTRL_2_RXMARGIN_FLX_JIT_OFFSET_SHIFT_BF_OFF ( 4)
#define PMA_RX_MGS_MARGIN_CTRL_2_RXMARGIN_FLX_JIT_OFFSET_SHIFT_BF_WID ( 5)
#define PMA_RX_MGS_MARGIN_CTRL_2_RXMARGIN_FLX_JIT_OFFSET_SHIFT_BF_MSK (0x000001F0)
#define PMA_RX_MGS_MARGIN_CTRL_2_RXMARGIN_FLX_JIT_OFFSET_SHIFT_BF_DEF (0x00000000)

///< RxMargin control override enable
#define PMA_RX_MGS_MARGIN_CTRL_2_RXMARGININ_LOCOVREN_BF_OFF ( 9)
#define PMA_RX_MGS_MARGIN_CTRL_2_RXMARGININ_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_MARGIN_CTRL_2_RXMARGININ_LOCOVREN_BF_MSK (0x00000200)
#define PMA_RX_MGS_MARGIN_CTRL_2_RXMARGININ_LOCOVREN_BF_DEF (0x00000000)

///< RxMargin start override
#define PMA_RX_MGS_MARGIN_CTRL_2_RXMARGININ_START_LOCOVR_BF_OFF (10)
#define PMA_RX_MGS_MARGIN_CTRL_2_RXMARGININ_START_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_MARGIN_CTRL_2_RXMARGININ_START_LOCOVR_BF_MSK (0x00000400)
#define PMA_RX_MGS_MARGIN_CTRL_2_RXMARGININ_START_LOCOVR_BF_DEF (0x00000000)

///< RxMargin direction override
#define PMA_RX_MGS_MARGIN_CTRL_2_RXMARGININ_DIRECTION_LOCOVR_BF_OFF (11)
#define PMA_RX_MGS_MARGIN_CTRL_2_RXMARGININ_DIRECTION_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_MARGIN_CTRL_2_RXMARGININ_DIRECTION_LOCOVR_BF_MSK (0x00000800)
#define PMA_RX_MGS_MARGIN_CTRL_2_RXMARGININ_DIRECTION_LOCOVR_BF_DEF (0x00000000)

///< RxMargin offset change override
#define PMA_RX_MGS_MARGIN_CTRL_2_RXMARGININ_OFFSET_CHANGE_LOCOVR_BF_OFF (12)
#define PMA_RX_MGS_MARGIN_CTRL_2_RXMARGININ_OFFSET_CHANGE_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_MARGIN_CTRL_2_RXMARGININ_OFFSET_CHANGE_LOCOVR_BF_MSK (0x00001000)
#define PMA_RX_MGS_MARGIN_CTRL_2_RXMARGININ_OFFSET_CHANGE_LOCOVR_BF_DEF (0x00000000)

///< RxMargin mode override
#define PMA_RX_MGS_MARGIN_CTRL_2_RXMARGININ_MODE_LOCOVR_BF_OFF (13)
#define PMA_RX_MGS_MARGIN_CTRL_2_RXMARGININ_MODE_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_MARGIN_CTRL_2_RXMARGININ_MODE_LOCOVR_BF_MSK (0x00002000)
#define PMA_RX_MGS_MARGIN_CTRL_2_RXMARGININ_MODE_LOCOVR_BF_DEF (0x00000000)

///< RxMargin offset override
#define PMA_RX_MGS_MARGIN_CTRL_2_RXMARGININ_OFFSET_LOCOVR_BF_OFF (14)
#define PMA_RX_MGS_MARGIN_CTRL_2_RXMARGININ_OFFSET_LOCOVR_BF_WID ( 7)
#define PMA_RX_MGS_MARGIN_CTRL_2_RXMARGININ_OFFSET_LOCOVR_BF_MSK (0x001FC000)
#define PMA_RX_MGS_MARGIN_CTRL_2_RXMARGININ_OFFSET_LOCOVR_BF_DEF (0x00000000)

///< RxMargin PAM4 eye select override
#define PMA_RX_MGS_MARGIN_CTRL_2_RXMARGININ_PAM4_EYE_SEL_LOCOVR_BF_OFF (21)
#define PMA_RX_MGS_MARGIN_CTRL_2_RXMARGININ_PAM4_EYE_SEL_LOCOVR_BF_WID ( 2)
#define PMA_RX_MGS_MARGIN_CTRL_2_RXMARGININ_PAM4_EYE_SEL_LOCOVR_BF_MSK (0x00600000)
#define PMA_RX_MGS_MARGIN_CTRL_2_RXMARGININ_PAM4_EYE_SEL_LOCOVR_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_MARGIN_STATUS register description at address offset 0x1dc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_margin_status
  * Rx Margin Status
  */

typedef union {
  struct {
    uint32_t RXMARGINOUT_STATUS_CODE_GRAY : 2;
    ///< RxMargin Code Gray status
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RXEQ_RXMARGIN_VOLT_RUNNING_STATUS : 1;
    ///< RxMargin Volt Running status
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t RXMARGININ_START_LOC : 1;
    ///< RxMargin start
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t RXMARGININ_DIRECTION_LOC : 1;
    ///< RxMargin direction
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t RXMARGININ_OFFSET_CHANGE_LOC : 1;
    ///< RxMargin offset change
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t RXMARGININ_MODE_LOC : 1;
    ///< RxMargin mode
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t RXMARGININ_OFFSET_LOC : 7;
    ///< RxMargin offset
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t RXMARGININ_PAM4_EYE_SEL_LOC : 2;
    ///< RxMargin PAM4 eye select
    ///< AccessType="RO/V" BitOffset="14" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_margin_stat_reg_t;

#define PMA_RX_MGS_MARGIN_STAT_DEFAULT (0x00000000U)
#define PMA_RX_MGS_MARGIN_STAT_RD_MASK (0x0000ffffU)
#define PMA_RX_MGS_MARGIN_STAT_WR_MASK (0x00000000U)


///< RxMargin Code Gray status
#define PMA_RX_MGS_MARGIN_STAT_RXMARGINOUT_STAT_CODE_GRAY_BF_OFF ( 0)
#define PMA_RX_MGS_MARGIN_STAT_RXMARGINOUT_STAT_CODE_GRAY_BF_WID ( 2)
#define PMA_RX_MGS_MARGIN_STAT_RXMARGINOUT_STAT_CODE_GRAY_BF_MSK (0x00000003)
#define PMA_RX_MGS_MARGIN_STAT_RXMARGINOUT_STAT_CODE_GRAY_BF_DEF (0x00000000)

///< RxMargin Volt Running status
#define PMA_RX_MGS_MARGIN_STAT_RXEQ_RXMARGIN_VOLT_RUNNING_STAT_BF_OFF ( 2)
#define PMA_RX_MGS_MARGIN_STAT_RXEQ_RXMARGIN_VOLT_RUNNING_STAT_BF_WID ( 1)
#define PMA_RX_MGS_MARGIN_STAT_RXEQ_RXMARGIN_VOLT_RUNNING_STAT_BF_MSK (0x00000004)
#define PMA_RX_MGS_MARGIN_STAT_RXEQ_RXMARGIN_VOLT_RUNNING_STAT_BF_DEF (0x00000000)

///< RxMargin start
#define PMA_RX_MGS_MARGIN_STAT_RXMARGININ_START_LOC_BF_OFF ( 3)
#define PMA_RX_MGS_MARGIN_STAT_RXMARGININ_START_LOC_BF_WID ( 1)
#define PMA_RX_MGS_MARGIN_STAT_RXMARGININ_START_LOC_BF_MSK (0x00000008)
#define PMA_RX_MGS_MARGIN_STAT_RXMARGININ_START_LOC_BF_DEF (0x00000000)

///< RxMargin direction
#define PMA_RX_MGS_MARGIN_STAT_RXMARGININ_DIRECTION_LOC_BF_OFF ( 4)
#define PMA_RX_MGS_MARGIN_STAT_RXMARGININ_DIRECTION_LOC_BF_WID ( 1)
#define PMA_RX_MGS_MARGIN_STAT_RXMARGININ_DIRECTION_LOC_BF_MSK (0x00000010)
#define PMA_RX_MGS_MARGIN_STAT_RXMARGININ_DIRECTION_LOC_BF_DEF (0x00000000)

///< RxMargin offset change
#define PMA_RX_MGS_MARGIN_STAT_RXMARGININ_OFFSET_CHANGE_LOC_BF_OFF ( 5)
#define PMA_RX_MGS_MARGIN_STAT_RXMARGININ_OFFSET_CHANGE_LOC_BF_WID ( 1)
#define PMA_RX_MGS_MARGIN_STAT_RXMARGININ_OFFSET_CHANGE_LOC_BF_MSK (0x00000020)
#define PMA_RX_MGS_MARGIN_STAT_RXMARGININ_OFFSET_CHANGE_LOC_BF_DEF (0x00000000)

///< RxMargin mode
#define PMA_RX_MGS_MARGIN_STAT_RXMARGININ_MODE_LOC_BF_OFF ( 6)
#define PMA_RX_MGS_MARGIN_STAT_RXMARGININ_MODE_LOC_BF_WID ( 1)
#define PMA_RX_MGS_MARGIN_STAT_RXMARGININ_MODE_LOC_BF_MSK (0x00000040)
#define PMA_RX_MGS_MARGIN_STAT_RXMARGININ_MODE_LOC_BF_DEF (0x00000000)

///< RxMargin offset
#define PMA_RX_MGS_MARGIN_STAT_RXMARGININ_OFFSET_LOC_BF_OFF ( 7)
#define PMA_RX_MGS_MARGIN_STAT_RXMARGININ_OFFSET_LOC_BF_WID ( 7)
#define PMA_RX_MGS_MARGIN_STAT_RXMARGININ_OFFSET_LOC_BF_MSK (0x00003F80)
#define PMA_RX_MGS_MARGIN_STAT_RXMARGININ_OFFSET_LOC_BF_DEF (0x00000000)

///< RxMargin PAM4 eye select
#define PMA_RX_MGS_MARGIN_STAT_RXMARGININ_PAM4_EYE_SEL_LOC_BF_OFF (14)
#define PMA_RX_MGS_MARGIN_STAT_RXMARGININ_PAM4_EYE_SEL_LOC_BF_WID ( 2)
#define PMA_RX_MGS_MARGIN_STAT_RXMARGININ_PAM4_EYE_SEL_LOC_BF_MSK (0x0000C000)
#define PMA_RX_MGS_MARGIN_STAT_RXMARGININ_PAM4_EYE_SEL_LOC_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_INPUT_PIN_OVERRIDE register description at address offset 0x1e0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_input_pin_override
  * Rx input pin override
  */

typedef union {
  struct {
    uint32_t PIPEPCSPIN_LFPS_EN_LOCOVREN : 1;
    ///< PIPE PCS LFPS Enable pin override enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t PIPEPCSPIN_LFPS_EN_LOCOVR : 1;
    ///< PIPE PCS LFPS Enable override
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t PIPEPCSPIN_SRIS_EN_LOCOVREN : 1;
    ///< PIPE PCS SRIS Enable pin override enable
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t PIPEPCSPIN_SRIS_EN_LOCOVR : 1;
    ///< PIPE PCS SRIS Enable override
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t PIPEPCSPIN_EQ_INPROGRESS_LOCOVREN : 1;
    ///< PIPE PCS Equalize In-Progress pin override enable
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t PIPEPCSPIN_EQ_INPROGRESS_LOCOVR : 1;
    ///< PIPE PCS Equalize In-Progress override
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t PIPEPCSPIN_EQ_TRAINING_LOCOVREN : 1;
    ///< PIPIE PCS Equalize Training pin override enable
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t PIPEPCSPIN_EQ_TRAINING_LOCOVR : 1;
    ///< PIPIE PCS Equalize Training override
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t RXEQPIN_PRECAL_CODE_SEL_LOCOVREN : 1;
    ///< RxEq Pre-Cal Code Select pin override enable
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RXEQPIN_PRECAL_CODE_SEL_LOCOVR : 3;
    ///< RxEq Pre-Cal Code Select override
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t RXEQPIN_STATIC_EN_LOCOVREN : 1;
    ///< RxEq Static Enable pin override enable
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t RXEQPIN_STATIC_EN_LOCOVR : 1;
    ///< RxEq Static Enable override
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t RXEQPIN_ADAPTATION_START_LOCOVREN : 1;
    ///< RxEq Adaptation Start pin override enable
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t RXEQPIN_ADAPTATION_START_LOCOVR : 1;
    ///< RxEq Adaptation Start override
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RXEQPIN_EYEMEAS_START_LOCOVREN : 1;
    ///< RxEq Eye Measurment Start pin override enable
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t RXEQPIN_EYEMEAS_START_LOCOVR : 1;
    ///< RxEq Eye Measurment Start override
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t PIPEPCSPIN_DEEPPM_REQ_B_LOCOVREN : 1;
    ///< PIPIE PCS Deep Power Management pin override enable
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t PIPEPCSPIN_DEEPPM_REQ_B_LOCOVR : 1;
    ///< PIPIE PCS Deep Power Management override
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t PIPEPCSPIN_RESTORE_B_LOCOVREN : 1;
    ///< PIPIE PCS Restore pin override enable
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t PIPEPCSPIN_RESTORE_B_LOCOVR : 1;
    ///< PIPIE PCS Restore pin override
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_input_pin_ovrd_reg_t;

#define PMA_RX_MGS_INPUT_PIN_OVRD_DEFAULT (0x00000000U)
#define PMA_RX_MGS_INPUT_PIN_OVRD_RD_MASK (0x003fffffU)
#define PMA_RX_MGS_INPUT_PIN_OVRD_WR_MASK (0x003fffffU)


///< PIPE PCS LFPS Enable pin override enable
#define PMA_RX_MGS_INPUT_PIN_OVRD_PIPEPCSPIN_LFPS_EN_LOCOVREN_BF_OFF ( 0)
#define PMA_RX_MGS_INPUT_PIN_OVRD_PIPEPCSPIN_LFPS_EN_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_INPUT_PIN_OVRD_PIPEPCSPIN_LFPS_EN_LOCOVREN_BF_MSK (0x00000001)
#define PMA_RX_MGS_INPUT_PIN_OVRD_PIPEPCSPIN_LFPS_EN_LOCOVREN_BF_DEF (0x00000000)

///< PIPE PCS LFPS Enable override
#define PMA_RX_MGS_INPUT_PIN_OVRD_PIPEPCSPIN_LFPS_EN_LOCOVR_BF_OFF ( 1)
#define PMA_RX_MGS_INPUT_PIN_OVRD_PIPEPCSPIN_LFPS_EN_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_INPUT_PIN_OVRD_PIPEPCSPIN_LFPS_EN_LOCOVR_BF_MSK (0x00000002)
#define PMA_RX_MGS_INPUT_PIN_OVRD_PIPEPCSPIN_LFPS_EN_LOCOVR_BF_DEF (0x00000000)

///< PIPE PCS SRIS Enable pin override enable
#define PMA_RX_MGS_INPUT_PIN_OVRD_PIPEPCSPIN_SRIS_EN_LOCOVREN_BF_OFF ( 2)
#define PMA_RX_MGS_INPUT_PIN_OVRD_PIPEPCSPIN_SRIS_EN_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_INPUT_PIN_OVRD_PIPEPCSPIN_SRIS_EN_LOCOVREN_BF_MSK (0x00000004)
#define PMA_RX_MGS_INPUT_PIN_OVRD_PIPEPCSPIN_SRIS_EN_LOCOVREN_BF_DEF (0x00000000)

///< PIPE PCS SRIS Enable override
#define PMA_RX_MGS_INPUT_PIN_OVRD_PIPEPCSPIN_SRIS_EN_LOCOVR_BF_OFF ( 3)
#define PMA_RX_MGS_INPUT_PIN_OVRD_PIPEPCSPIN_SRIS_EN_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_INPUT_PIN_OVRD_PIPEPCSPIN_SRIS_EN_LOCOVR_BF_MSK (0x00000008)
#define PMA_RX_MGS_INPUT_PIN_OVRD_PIPEPCSPIN_SRIS_EN_LOCOVR_BF_DEF (0x00000000)

///< PIPE PCS Equalize In-Progress pin override enable
#define PMA_RX_MGS_INPUT_PIN_OVRD_PIPEPCSPIN_EQ_INPROGRESS_LOCOVREN_BF_OFF ( 4)
#define PMA_RX_MGS_INPUT_PIN_OVRD_PIPEPCSPIN_EQ_INPROGRESS_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_INPUT_PIN_OVRD_PIPEPCSPIN_EQ_INPROGRESS_LOCOVREN_BF_MSK (0x00000010)
#define PMA_RX_MGS_INPUT_PIN_OVRD_PIPEPCSPIN_EQ_INPROGRESS_LOCOVREN_BF_DEF (0x00000000)

///< PIPE PCS Equalize In-Progress override
#define PMA_RX_MGS_INPUT_PIN_OVRD_PIPEPCSPIN_EQ_INPROGRESS_LOCOVR_BF_OFF ( 5)
#define PMA_RX_MGS_INPUT_PIN_OVRD_PIPEPCSPIN_EQ_INPROGRESS_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_INPUT_PIN_OVRD_PIPEPCSPIN_EQ_INPROGRESS_LOCOVR_BF_MSK (0x00000020)
#define PMA_RX_MGS_INPUT_PIN_OVRD_PIPEPCSPIN_EQ_INPROGRESS_LOCOVR_BF_DEF (0x00000000)

///< PIPIE PCS Equalize Training pin override enable
#define PMA_RX_MGS_INPUT_PIN_OVRD_PIPEPCSPIN_EQ_TRAINING_LOCOVREN_BF_OFF ( 6)
#define PMA_RX_MGS_INPUT_PIN_OVRD_PIPEPCSPIN_EQ_TRAINING_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_INPUT_PIN_OVRD_PIPEPCSPIN_EQ_TRAINING_LOCOVREN_BF_MSK (0x00000040)
#define PMA_RX_MGS_INPUT_PIN_OVRD_PIPEPCSPIN_EQ_TRAINING_LOCOVREN_BF_DEF (0x00000000)

///< PIPIE PCS Equalize Training override
#define PMA_RX_MGS_INPUT_PIN_OVRD_PIPEPCSPIN_EQ_TRAINING_LOCOVR_BF_OFF ( 7)
#define PMA_RX_MGS_INPUT_PIN_OVRD_PIPEPCSPIN_EQ_TRAINING_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_INPUT_PIN_OVRD_PIPEPCSPIN_EQ_TRAINING_LOCOVR_BF_MSK (0x00000080)
#define PMA_RX_MGS_INPUT_PIN_OVRD_PIPEPCSPIN_EQ_TRAINING_LOCOVR_BF_DEF (0x00000000)

///< RxEq Pre-Cal Code Select pin override enable
#define PMA_RX_MGS_INPUT_PIN_OVRD_RXEQPIN_PRECAL_CODE_SEL_LOCOVREN_BF_OFF ( 8)
#define PMA_RX_MGS_INPUT_PIN_OVRD_RXEQPIN_PRECAL_CODE_SEL_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_INPUT_PIN_OVRD_RXEQPIN_PRECAL_CODE_SEL_LOCOVREN_BF_MSK (0x00000100)
#define PMA_RX_MGS_INPUT_PIN_OVRD_RXEQPIN_PRECAL_CODE_SEL_LOCOVREN_BF_DEF (0x00000000)

///< RxEq Pre-Cal Code Select override
#define PMA_RX_MGS_INPUT_PIN_OVRD_RXEQPIN_PRECAL_CODE_SEL_LOCOVR_BF_OFF ( 9)
#define PMA_RX_MGS_INPUT_PIN_OVRD_RXEQPIN_PRECAL_CODE_SEL_LOCOVR_BF_WID ( 3)
#define PMA_RX_MGS_INPUT_PIN_OVRD_RXEQPIN_PRECAL_CODE_SEL_LOCOVR_BF_MSK (0x00000E00)
#define PMA_RX_MGS_INPUT_PIN_OVRD_RXEQPIN_PRECAL_CODE_SEL_LOCOVR_BF_DEF (0x00000000)

///< RxEq Static Enable pin override enable
#define PMA_RX_MGS_INPUT_PIN_OVRD_RXEQPIN_STATIC_EN_LOCOVREN_BF_OFF (12)
#define PMA_RX_MGS_INPUT_PIN_OVRD_RXEQPIN_STATIC_EN_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_INPUT_PIN_OVRD_RXEQPIN_STATIC_EN_LOCOVREN_BF_MSK (0x00001000)
#define PMA_RX_MGS_INPUT_PIN_OVRD_RXEQPIN_STATIC_EN_LOCOVREN_BF_DEF (0x00000000)

///< RxEq Static Enable override
#define PMA_RX_MGS_INPUT_PIN_OVRD_RXEQPIN_STATIC_EN_LOCOVR_BF_OFF (13)
#define PMA_RX_MGS_INPUT_PIN_OVRD_RXEQPIN_STATIC_EN_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_INPUT_PIN_OVRD_RXEQPIN_STATIC_EN_LOCOVR_BF_MSK (0x00002000)
#define PMA_RX_MGS_INPUT_PIN_OVRD_RXEQPIN_STATIC_EN_LOCOVR_BF_DEF (0x00000000)

///< RxEq Adaptation Start pin override enable
#define PMA_RX_MGS_INPUT_PIN_OVRD_RXEQPIN_ADAPTATION_START_LOCOVREN_BF_OFF (14)
#define PMA_RX_MGS_INPUT_PIN_OVRD_RXEQPIN_ADAPTATION_START_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_INPUT_PIN_OVRD_RXEQPIN_ADAPTATION_START_LOCOVREN_BF_MSK (0x00004000)
#define PMA_RX_MGS_INPUT_PIN_OVRD_RXEQPIN_ADAPTATION_START_LOCOVREN_BF_DEF (0x00000000)

///< RxEq Adaptation Start override
#define PMA_RX_MGS_INPUT_PIN_OVRD_RXEQPIN_ADAPTATION_START_LOCOVR_BF_OFF (15)
#define PMA_RX_MGS_INPUT_PIN_OVRD_RXEQPIN_ADAPTATION_START_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_INPUT_PIN_OVRD_RXEQPIN_ADAPTATION_START_LOCOVR_BF_MSK (0x00008000)
#define PMA_RX_MGS_INPUT_PIN_OVRD_RXEQPIN_ADAPTATION_START_LOCOVR_BF_DEF (0x00000000)

///< RxEq Eye Measurment Start pin override enable
#define PMA_RX_MGS_INPUT_PIN_OVRD_RXEQPIN_EYEMEAS_START_LOCOVREN_BF_OFF (16)
#define PMA_RX_MGS_INPUT_PIN_OVRD_RXEQPIN_EYEMEAS_START_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_INPUT_PIN_OVRD_RXEQPIN_EYEMEAS_START_LOCOVREN_BF_MSK (0x00010000)
#define PMA_RX_MGS_INPUT_PIN_OVRD_RXEQPIN_EYEMEAS_START_LOCOVREN_BF_DEF (0x00000000)

///< RxEq Eye Measurment Start override
#define PMA_RX_MGS_INPUT_PIN_OVRD_RXEQPIN_EYEMEAS_START_LOCOVR_BF_OFF (17)
#define PMA_RX_MGS_INPUT_PIN_OVRD_RXEQPIN_EYEMEAS_START_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_INPUT_PIN_OVRD_RXEQPIN_EYEMEAS_START_LOCOVR_BF_MSK (0x00020000)
#define PMA_RX_MGS_INPUT_PIN_OVRD_RXEQPIN_EYEMEAS_START_LOCOVR_BF_DEF (0x00000000)

///< PIPIE PCS Deep Power Management pin override enable
#define PMA_RX_MGS_INPUT_PIN_OVRD_PIPEPCSPIN_DEEPPM_REQ_B_LOCOVREN_BF_OFF (18)
#define PMA_RX_MGS_INPUT_PIN_OVRD_PIPEPCSPIN_DEEPPM_REQ_B_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_INPUT_PIN_OVRD_PIPEPCSPIN_DEEPPM_REQ_B_LOCOVREN_BF_MSK (0x00040000)
#define PMA_RX_MGS_INPUT_PIN_OVRD_PIPEPCSPIN_DEEPPM_REQ_B_LOCOVREN_BF_DEF (0x00000000)

///< PIPIE PCS Deep Power Management override
#define PMA_RX_MGS_INPUT_PIN_OVRD_PIPEPCSPIN_DEEPPM_REQ_B_LOCOVR_BF_OFF (19)
#define PMA_RX_MGS_INPUT_PIN_OVRD_PIPEPCSPIN_DEEPPM_REQ_B_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_INPUT_PIN_OVRD_PIPEPCSPIN_DEEPPM_REQ_B_LOCOVR_BF_MSK (0x00080000)
#define PMA_RX_MGS_INPUT_PIN_OVRD_PIPEPCSPIN_DEEPPM_REQ_B_LOCOVR_BF_DEF (0x00000000)

///< PIPIE PCS Restore pin override enable
#define PMA_RX_MGS_INPUT_PIN_OVRD_PIPEPCSPIN_RESTORE_B_LOCOVREN_BF_OFF (20)
#define PMA_RX_MGS_INPUT_PIN_OVRD_PIPEPCSPIN_RESTORE_B_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_INPUT_PIN_OVRD_PIPEPCSPIN_RESTORE_B_LOCOVREN_BF_MSK (0x00100000)
#define PMA_RX_MGS_INPUT_PIN_OVRD_PIPEPCSPIN_RESTORE_B_LOCOVREN_BF_DEF (0x00000000)

///< PIPIE PCS Restore pin override
#define PMA_RX_MGS_INPUT_PIN_OVRD_PIPEPCSPIN_RESTORE_B_LOCOVR_BF_OFF (21)
#define PMA_RX_MGS_INPUT_PIN_OVRD_PIPEPCSPIN_RESTORE_B_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_INPUT_PIN_OVRD_PIPEPCSPIN_RESTORE_B_LOCOVR_BF_MSK (0x00200000)
#define PMA_RX_MGS_INPUT_PIN_OVRD_PIPEPCSPIN_RESTORE_B_LOCOVR_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_INPUT_PIN_PREOVERRIDE register description at address offset 0x1e4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_input_pin_preoverride
  * Rx inputpin pre-override value
  */

typedef union {
  struct {
    uint32_t PIPEPCSPIN_LFPS_EN_LOC : 1;
    ///< PIPE PCS LFPS Enable pre-override
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t PIPEPCSPIN_SRIS_EN_LOC : 1;
    ///< PIPE PCS SRIS Enable pre-override
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t PIPEPCSPIN_EQ_INPROGRESS_LOC : 1;
    ///< PIPE PCS Equalize In-Progress pre-override
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t PIPEPCSPIN_EQ_TRAINING_LOC : 1;
    ///< PIPIE PCS Equalize Training pre-override
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t RXEQPIN_PRECAL_CODE_SEL_LOC : 3;
    ///< RxEq Pre-Cal Code Select pre-override
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t RXEQPIN_STATIC_EN_LOC : 1;
    ///< RxEq Static Enable pre-override
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t RXEQPIN_ADAPTATION_START_LOC : 1;
    ///< RxEq Adaptation Start pre-override
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t RXEQPIN_EYEMEAS_START_LOC : 1;
    ///< RxEq Eye Measurment Start pre-override
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t PIPEPCSPIN_DEEPPM_REQ_B_LOC : 1;
    ///< PIPIE PCS Deep Power Management pre-override
    ///< AccessType="RO/V" BitOffset="10" ResetValue="0x0"
    uint32_t PIPEPCSPIN_RESTORE_B_LOC : 1;
    ///< PIPIE PCS Restore pin pre-override
    ///< AccessType="RO/V" BitOffset="11" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_input_pin_preovrd_reg_t;

#define PMA_RX_MGS_INPUT_PIN_PREOVRD_DEFAULT (0x00000000U)
#define PMA_RX_MGS_INPUT_PIN_PREOVRD_RD_MASK (0x00000fffU)
#define PMA_RX_MGS_INPUT_PIN_PREOVRD_WR_MASK (0x00000000U)


///< PIPE PCS LFPS Enable pre-override
#define PMA_RX_MGS_INPUT_PIN_PREOVRD_PIPEPCSPIN_LFPS_EN_LOC_BF_OFF ( 0)
#define PMA_RX_MGS_INPUT_PIN_PREOVRD_PIPEPCSPIN_LFPS_EN_LOC_BF_WID ( 1)
#define PMA_RX_MGS_INPUT_PIN_PREOVRD_PIPEPCSPIN_LFPS_EN_LOC_BF_MSK (0x00000001)
#define PMA_RX_MGS_INPUT_PIN_PREOVRD_PIPEPCSPIN_LFPS_EN_LOC_BF_DEF (0x00000000)

///< PIPE PCS SRIS Enable pre-override
#define PMA_RX_MGS_INPUT_PIN_PREOVRD_PIPEPCSPIN_SRIS_EN_LOC_BF_OFF ( 1)
#define PMA_RX_MGS_INPUT_PIN_PREOVRD_PIPEPCSPIN_SRIS_EN_LOC_BF_WID ( 1)
#define PMA_RX_MGS_INPUT_PIN_PREOVRD_PIPEPCSPIN_SRIS_EN_LOC_BF_MSK (0x00000002)
#define PMA_RX_MGS_INPUT_PIN_PREOVRD_PIPEPCSPIN_SRIS_EN_LOC_BF_DEF (0x00000000)

///< PIPE PCS Equalize In-Progress pre-override
#define PMA_RX_MGS_INPUT_PIN_PREOVRD_PIPEPCSPIN_EQ_INPROGRESS_LOC_BF_OFF ( 2)
#define PMA_RX_MGS_INPUT_PIN_PREOVRD_PIPEPCSPIN_EQ_INPROGRESS_LOC_BF_WID ( 1)
#define PMA_RX_MGS_INPUT_PIN_PREOVRD_PIPEPCSPIN_EQ_INPROGRESS_LOC_BF_MSK (0x00000004)
#define PMA_RX_MGS_INPUT_PIN_PREOVRD_PIPEPCSPIN_EQ_INPROGRESS_LOC_BF_DEF (0x00000000)

///< PIPIE PCS Equalize Training pre-override
#define PMA_RX_MGS_INPUT_PIN_PREOVRD_PIPEPCSPIN_EQ_TRAINING_LOC_BF_OFF ( 3)
#define PMA_RX_MGS_INPUT_PIN_PREOVRD_PIPEPCSPIN_EQ_TRAINING_LOC_BF_WID ( 1)
#define PMA_RX_MGS_INPUT_PIN_PREOVRD_PIPEPCSPIN_EQ_TRAINING_LOC_BF_MSK (0x00000008)
#define PMA_RX_MGS_INPUT_PIN_PREOVRD_PIPEPCSPIN_EQ_TRAINING_LOC_BF_DEF (0x00000000)

///< RxEq Pre-Cal Code Select pre-override
#define PMA_RX_MGS_INPUT_PIN_PREOVRD_RXEQPIN_PRECAL_CODE_SEL_LOC_BF_OFF ( 4)
#define PMA_RX_MGS_INPUT_PIN_PREOVRD_RXEQPIN_PRECAL_CODE_SEL_LOC_BF_WID ( 3)
#define PMA_RX_MGS_INPUT_PIN_PREOVRD_RXEQPIN_PRECAL_CODE_SEL_LOC_BF_MSK (0x00000070)
#define PMA_RX_MGS_INPUT_PIN_PREOVRD_RXEQPIN_PRECAL_CODE_SEL_LOC_BF_DEF (0x00000000)

///< RxEq Static Enable pre-override
#define PMA_RX_MGS_INPUT_PIN_PREOVRD_RXEQPIN_STATIC_EN_LOC_BF_OFF ( 7)
#define PMA_RX_MGS_INPUT_PIN_PREOVRD_RXEQPIN_STATIC_EN_LOC_BF_WID ( 1)
#define PMA_RX_MGS_INPUT_PIN_PREOVRD_RXEQPIN_STATIC_EN_LOC_BF_MSK (0x00000080)
#define PMA_RX_MGS_INPUT_PIN_PREOVRD_RXEQPIN_STATIC_EN_LOC_BF_DEF (0x00000000)

///< RxEq Adaptation Start pre-override
#define PMA_RX_MGS_INPUT_PIN_PREOVRD_RXEQPIN_ADAPTATION_START_LOC_BF_OFF ( 8)
#define PMA_RX_MGS_INPUT_PIN_PREOVRD_RXEQPIN_ADAPTATION_START_LOC_BF_WID ( 1)
#define PMA_RX_MGS_INPUT_PIN_PREOVRD_RXEQPIN_ADAPTATION_START_LOC_BF_MSK (0x00000100)
#define PMA_RX_MGS_INPUT_PIN_PREOVRD_RXEQPIN_ADAPTATION_START_LOC_BF_DEF (0x00000000)

///< RxEq Eye Measurment Start pre-override
#define PMA_RX_MGS_INPUT_PIN_PREOVRD_RXEQPIN_EYEMEAS_START_LOC_BF_OFF ( 9)
#define PMA_RX_MGS_INPUT_PIN_PREOVRD_RXEQPIN_EYEMEAS_START_LOC_BF_WID ( 1)
#define PMA_RX_MGS_INPUT_PIN_PREOVRD_RXEQPIN_EYEMEAS_START_LOC_BF_MSK (0x00000200)
#define PMA_RX_MGS_INPUT_PIN_PREOVRD_RXEQPIN_EYEMEAS_START_LOC_BF_DEF (0x00000000)

///< PIPIE PCS Deep Power Management pre-override
#define PMA_RX_MGS_INPUT_PIN_PREOVRD_PIPEPCSPIN_DEEPPM_REQ_B_LOC_BF_OFF (10)
#define PMA_RX_MGS_INPUT_PIN_PREOVRD_PIPEPCSPIN_DEEPPM_REQ_B_LOC_BF_WID ( 1)
#define PMA_RX_MGS_INPUT_PIN_PREOVRD_PIPEPCSPIN_DEEPPM_REQ_B_LOC_BF_MSK (0x00000400)
#define PMA_RX_MGS_INPUT_PIN_PREOVRD_PIPEPCSPIN_DEEPPM_REQ_B_LOC_BF_DEF (0x00000000)

///< PIPIE PCS Restore pin pre-override
#define PMA_RX_MGS_INPUT_PIN_PREOVRD_PIPEPCSPIN_RESTORE_B_LOC_BF_OFF (11)
#define PMA_RX_MGS_INPUT_PIN_PREOVRD_PIPEPCSPIN_RESTORE_B_LOC_BF_WID ( 1)
#define PMA_RX_MGS_INPUT_PIN_PREOVRD_PIPEPCSPIN_RESTORE_B_LOC_BF_MSK (0x00000800)
#define PMA_RX_MGS_INPUT_PIN_PREOVRD_PIPEPCSPIN_RESTORE_B_LOC_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_OUTPUT_PIN_OVERRIDE_0 register description at address offset 0x1e8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_output_pin_override_0
  * Rx output pin override
  */

typedef union {
  struct {
    uint32_t RXPIN_STATUS_LOCOVREN : 1;
    ///< o_rx_status_l[x]_a output pin override enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXPIN_STATUS_LOCOVR : 1;
    ///< o_rx_status_l[x]_a output pin override
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RXEQPIN_ADAPTATION_DONE_LOCOVREN : 1;
    ///< o_rxeq_adaptation_done_l[x]_a output pin override enable
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t RXEQPIN_ADAPTATION_DONE_LOCOVR : 1;
    ///< o_rxeq_adaptation_done_l[x]_a output pin override
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RXEQPIN_ADAPTATION_BEST_EYE_VAL_LOCOVREN : 1;
    ///< o_rxeq_adaptation_best_eye_val_l[x]_ output pin override enable
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RXEQPIN_ADAPTATION_BEST_EYE_VAL_LOCOVR : 14;
    ///< o_rxeq_adaptation_best_eye_val_l[x]_ output pin override
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t RXEQPIN_EYEMEAS_DONE_LOCOVREN : 1;
    ///< o_rxeq_eyemeas_done_l[x]_a output pin override enable
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t RXEQPIN_EYEMEAS_DONE_LOCOVR : 1;
    ///< o_rxeq_eyemeas_done_l[x]_a output pin override
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t RXEQPIN_EYEMEAS_ERR_LOCOVREN : 1;
    ///< o_rxeq_eyemeas_err_l[x]_a output pin override enable
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t RXEQPIN_EYEMEAS_ERR_LOCOVR : 1;
    ///< o_rxeq_eyemeas_err_l[x]_a output pin override
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t PIPEPCSPIN_DEEPPM_ACK_B_LOCOVREN : 1;
    ///< o_pipepcs_deeppm_ack_l[x]_b_a output pin override enable
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t PIPEPCSPIN_DEEPPM_ACK_B_LOCOVR : 1;
    ///< o_pipepcs_deeppm_ack_l[x]_b_a output pin override
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t RXDATPIN_CDRLOCK2DATA_LOCOVREN : 1;
    ///< o_rxdat_cdrlock2data_l[x]_a output pin override enable
    ///< AccessType="RW" BitOffset="25" ResetValue="0x0"
    uint32_t RXDATPIN_CDRLOCK2DATA_LOCOVR : 1;
    ///< o_rxdat_cdrlock2data_l[x]_a output pin override
    ///< AccessType="RW" BitOffset="26" ResetValue="0x0"
    uint32_t RXDATPIN_SIGNALDETECT_LOCOVREN : 1;
    ///< o_rxdat_signaldetect_l[x]_a output pin override enable
    ///< AccessType="RW" BitOffset="27" ResetValue="0x0"
    uint32_t RXDATPIN_SIGNALDETECT_LOCOVR : 1;
    ///< o_rxdat_signaldetect_l[x]_a output pin override
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t PIPEPCSPIN_SIGNALDETECT_LFPS_LOCOVREN : 1;
    ///< o_pipepcs_signaldetect_lfps_l[x]_a output pin override enable
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
    uint32_t PIPEPCSPIN_SIGNALDETECT_LFPS_LOCOVR : 1;
    ///< o_pipepcs_signaldetect_lfps_l[x]_a output pin override
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_output_pin_ovrd_0_reg_t;

#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_DEFAULT (0x00000000U)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RD_MASK (0x7fffffffU)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_WR_MASK (0x7fffffffU)


///< o_rx_status_l[x]_a output pin override enable
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXPIN_STAT_LOCOVREN_BF_OFF ( 0)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXPIN_STAT_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXPIN_STAT_LOCOVREN_BF_MSK (0x00000001)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXPIN_STAT_LOCOVREN_BF_DEF (0x00000000)

///< o_rx_status_l[x]_a output pin override
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXPIN_STAT_LOCOVR_BF_OFF ( 1)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXPIN_STAT_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXPIN_STAT_LOCOVR_BF_MSK (0x00000002)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXPIN_STAT_LOCOVR_BF_DEF (0x00000000)

///< o_rxeq_adaptation_done_l[x]_a output pin override enable
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXEQPIN_ADAPTATION_DONE_LOCOVREN_BF_OFF ( 2)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXEQPIN_ADAPTATION_DONE_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXEQPIN_ADAPTATION_DONE_LOCOVREN_BF_MSK (0x00000004)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXEQPIN_ADAPTATION_DONE_LOCOVREN_BF_DEF (0x00000000)

///< o_rxeq_adaptation_done_l[x]_a output pin override
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXEQPIN_ADAPTATION_DONE_LOCOVR_BF_OFF ( 3)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXEQPIN_ADAPTATION_DONE_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXEQPIN_ADAPTATION_DONE_LOCOVR_BF_MSK (0x00000008)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXEQPIN_ADAPTATION_DONE_LOCOVR_BF_DEF (0x00000000)

///< o_rxeq_adaptation_best_eye_val_l[x]_ output pin override enable
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXEQPIN_ADAPTATION_BEST_EYE_VAL_LOCOVREN_BF_OFF ( 4)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXEQPIN_ADAPTATION_BEST_EYE_VAL_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXEQPIN_ADAPTATION_BEST_EYE_VAL_LOCOVREN_BF_MSK (0x00000010)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXEQPIN_ADAPTATION_BEST_EYE_VAL_LOCOVREN_BF_DEF (0x00000000)

///< o_rxeq_adaptation_best_eye_val_l[x]_ output pin override
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXEQPIN_ADAPTATION_BEST_EYE_VAL_LOCOVR_BF_OFF ( 5)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXEQPIN_ADAPTATION_BEST_EYE_VAL_LOCOVR_BF_WID (14)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXEQPIN_ADAPTATION_BEST_EYE_VAL_LOCOVR_BF_MSK (0x0007FFE0)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXEQPIN_ADAPTATION_BEST_EYE_VAL_LOCOVR_BF_DEF (0x00000000)

///< o_rxeq_eyemeas_done_l[x]_a output pin override enable
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXEQPIN_EYEMEAS_DONE_LOCOVREN_BF_OFF (19)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXEQPIN_EYEMEAS_DONE_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXEQPIN_EYEMEAS_DONE_LOCOVREN_BF_MSK (0x00080000)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXEQPIN_EYEMEAS_DONE_LOCOVREN_BF_DEF (0x00000000)

///< o_rxeq_eyemeas_done_l[x]_a output pin override
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXEQPIN_EYEMEAS_DONE_LOCOVR_BF_OFF (20)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXEQPIN_EYEMEAS_DONE_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXEQPIN_EYEMEAS_DONE_LOCOVR_BF_MSK (0x00100000)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXEQPIN_EYEMEAS_DONE_LOCOVR_BF_DEF (0x00000000)

///< o_rxeq_eyemeas_err_l[x]_a output pin override enable
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXEQPIN_EYEMEAS_ERR_LOCOVREN_BF_OFF (21)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXEQPIN_EYEMEAS_ERR_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXEQPIN_EYEMEAS_ERR_LOCOVREN_BF_MSK (0x00200000)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXEQPIN_EYEMEAS_ERR_LOCOVREN_BF_DEF (0x00000000)

///< o_rxeq_eyemeas_err_l[x]_a output pin override
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXEQPIN_EYEMEAS_ERR_LOCOVR_BF_OFF (22)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXEQPIN_EYEMEAS_ERR_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXEQPIN_EYEMEAS_ERR_LOCOVR_BF_MSK (0x00400000)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXEQPIN_EYEMEAS_ERR_LOCOVR_BF_DEF (0x00000000)

///< o_pipepcs_deeppm_ack_l[x]_b_a output pin override enable
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_PIPEPCSPIN_DEEPPM_ACK_B_LOCOVREN_BF_OFF (23)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_PIPEPCSPIN_DEEPPM_ACK_B_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_PIPEPCSPIN_DEEPPM_ACK_B_LOCOVREN_BF_MSK (0x00800000)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_PIPEPCSPIN_DEEPPM_ACK_B_LOCOVREN_BF_DEF (0x00000000)

///< o_pipepcs_deeppm_ack_l[x]_b_a output pin override
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_PIPEPCSPIN_DEEPPM_ACK_B_LOCOVR_BF_OFF (24)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_PIPEPCSPIN_DEEPPM_ACK_B_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_PIPEPCSPIN_DEEPPM_ACK_B_LOCOVR_BF_MSK (0x01000000)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_PIPEPCSPIN_DEEPPM_ACK_B_LOCOVR_BF_DEF (0x00000000)

///< o_rxdat_cdrlock2data_l[x]_a output pin override enable
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXDATPIN_CDRLOCK2DATA_LOCOVREN_BF_OFF (25)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXDATPIN_CDRLOCK2DATA_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXDATPIN_CDRLOCK2DATA_LOCOVREN_BF_MSK (0x02000000)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXDATPIN_CDRLOCK2DATA_LOCOVREN_BF_DEF (0x00000000)

///< o_rxdat_cdrlock2data_l[x]_a output pin override
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXDATPIN_CDRLOCK2DATA_LOCOVR_BF_OFF (26)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXDATPIN_CDRLOCK2DATA_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXDATPIN_CDRLOCK2DATA_LOCOVR_BF_MSK (0x04000000)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXDATPIN_CDRLOCK2DATA_LOCOVR_BF_DEF (0x00000000)

///< o_rxdat_signaldetect_l[x]_a output pin override enable
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXDATPIN_SIGNALDETECT_LOCOVREN_BF_OFF (27)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXDATPIN_SIGNALDETECT_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXDATPIN_SIGNALDETECT_LOCOVREN_BF_MSK (0x08000000)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXDATPIN_SIGNALDETECT_LOCOVREN_BF_DEF (0x00000000)

///< o_rxdat_signaldetect_l[x]_a output pin override
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXDATPIN_SIGNALDETECT_LOCOVR_BF_OFF (28)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXDATPIN_SIGNALDETECT_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXDATPIN_SIGNALDETECT_LOCOVR_BF_MSK (0x10000000)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_RXDATPIN_SIGNALDETECT_LOCOVR_BF_DEF (0x00000000)

///< o_pipepcs_signaldetect_lfps_l[x]_a output pin override enable
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_PIPEPCSPIN_SIGNALDETECT_LFPS_LOCOVREN_BF_OFF (29)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_PIPEPCSPIN_SIGNALDETECT_LFPS_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_PIPEPCSPIN_SIGNALDETECT_LFPS_LOCOVREN_BF_MSK (0x20000000)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_PIPEPCSPIN_SIGNALDETECT_LFPS_LOCOVREN_BF_DEF (0x00000000)

///< o_pipepcs_signaldetect_lfps_l[x]_a output pin override
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_PIPEPCSPIN_SIGNALDETECT_LFPS_LOCOVR_BF_OFF (30)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_PIPEPCSPIN_SIGNALDETECT_LFPS_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_PIPEPCSPIN_SIGNALDETECT_LFPS_LOCOVR_BF_MSK (0x40000000)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_PIPEPCSPIN_SIGNALDETECT_LFPS_LOCOVR_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_OUTPUT_PIN_OVERRIDE_1 register description at address offset 0x1ec
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_output_pin_override_1
  * Rx output pin override
  */

typedef union {
  struct {
    uint32_t RXEQPIN_EYEMEAS_VAL_LOCOVREN : 1;
    ///< o_rxeq_eyemeas_val_l[x]_a output pin override enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXEQPIN_EYEMEAS_VAL_LOCOVR : 14;
    ///< o_rxeq_eyemeas_val_l[x]_a output pin override
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t PIPEPCSPIN_RXMARGIN_STATUS_GRAY_LOCOVREN : 1;
    ///< o_pipepcs_rxmargin_status_gray_l[x]_a output pin override enable
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t PIPEPCSPIN_RXMARGIN_STATUS_GRAY_LOCOVR : 2;
    ///< o_pipepcs_rxmargin_status_gray_l[x]_a output pin override
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_output_pin_ovrd_1_reg_t;

#define PMA_RX_MGS_OUTPUT_PIN_OVRD_1_DEFAULT (0x00000000U)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_1_RD_MASK (0x0003ffffU)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_1_WR_MASK (0x0003ffffU)


///< o_rxeq_eyemeas_val_l[x]_a output pin override enable
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_1_RXEQPIN_EYEMEAS_VAL_LOCOVREN_BF_OFF ( 0)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_1_RXEQPIN_EYEMEAS_VAL_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_1_RXEQPIN_EYEMEAS_VAL_LOCOVREN_BF_MSK (0x00000001)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_1_RXEQPIN_EYEMEAS_VAL_LOCOVREN_BF_DEF (0x00000000)

///< o_rxeq_eyemeas_val_l[x]_a output pin override
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_1_RXEQPIN_EYEMEAS_VAL_LOCOVR_BF_OFF ( 1)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_1_RXEQPIN_EYEMEAS_VAL_LOCOVR_BF_WID (14)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_1_RXEQPIN_EYEMEAS_VAL_LOCOVR_BF_MSK (0x00007FFE)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_1_RXEQPIN_EYEMEAS_VAL_LOCOVR_BF_DEF (0x00000000)

///< o_pipepcs_rxmargin_status_gray_l[x]_a output pin override enable
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_1_PIPEPCSPIN_RXMARGIN_STAT_GRAY_LOCOVREN_BF_OFF (15)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_1_PIPEPCSPIN_RXMARGIN_STAT_GRAY_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_1_PIPEPCSPIN_RXMARGIN_STAT_GRAY_LOCOVREN_BF_MSK (0x00008000)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_1_PIPEPCSPIN_RXMARGIN_STAT_GRAY_LOCOVREN_BF_DEF (0x00000000)

///< o_pipepcs_rxmargin_status_gray_l[x]_a output pin override
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_1_PIPEPCSPIN_RXMARGIN_STAT_GRAY_LOCOVR_BF_OFF (16)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_1_PIPEPCSPIN_RXMARGIN_STAT_GRAY_LOCOVR_BF_WID ( 2)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_1_PIPEPCSPIN_RXMARGIN_STAT_GRAY_LOCOVR_BF_MSK (0x00030000)
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_1_PIPEPCSPIN_RXMARGIN_STAT_GRAY_LOCOVR_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_OUTPUT_PIN_PREOVERRIDE_0 register description at address offset 0x1f0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_output_pin_preoverride_0
  * Rx output pin pre-override value
  */

typedef union {
  struct {
    uint32_t RXPIN_STATUS_LOC : 1;
    ///< o_rx_status_l[x]_a output pin pre-override value
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RXEQPIN_ADAPTATION_DONE_LOC : 1;
    ///< o_rxeq_adaptation_done_l[x]_a output pin pre-override value
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t RXEQPIN_ADAPTATION_BEST_EYE_VAL_LOC : 14;
    ///< o_rxeq_adaptation_best_eye_val_l[x]_ output pin pre-override value
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t RXEQPIN_EYEMEAS_DONE_LOC : 1;
    ///< o_rxeq_eyemeas_done_l[x]_a output pin pre-override value
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t RXEQPIN_EYEMEAS_ERR_LOC : 1;
    ///< o_rxeq_eyemeas_err_l[x]_a output pin pre-override value
    ///< AccessType="RO/V" BitOffset="17" ResetValue="0x0"
    uint32_t RXEQPIN_EYEMEAS_VAL_LOC : 14;
    ///< o_rxeq_eyemeas_val_l[x]_a output pin pre-override value
    ///< AccessType="RO/V" BitOffset="18" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_mgs_output_pin_preovrd_0_reg_t;

#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_0_DEFAULT (0x00000000U)
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_0_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_0_WR_MASK (0x00000000U)


///< o_rx_status_l[x]_a output pin pre-override value
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_0_RXPIN_STAT_LOC_BF_OFF ( 0)
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_0_RXPIN_STAT_LOC_BF_WID ( 1)
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_0_RXPIN_STAT_LOC_BF_MSK (0x00000001)
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_0_RXPIN_STAT_LOC_BF_DEF (0x00000000)

///< o_rxeq_adaptation_done_l[x]_a output pin pre-override value
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_0_RXEQPIN_ADAPTATION_DONE_LOC_BF_OFF ( 1)
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_0_RXEQPIN_ADAPTATION_DONE_LOC_BF_WID ( 1)
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_0_RXEQPIN_ADAPTATION_DONE_LOC_BF_MSK (0x00000002)
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_0_RXEQPIN_ADAPTATION_DONE_LOC_BF_DEF (0x00000000)

///< o_rxeq_adaptation_best_eye_val_l[x]_ output pin pre-override value
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_0_RXEQPIN_ADAPTATION_BEST_EYE_VAL_LOC_BF_OFF ( 2)
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_0_RXEQPIN_ADAPTATION_BEST_EYE_VAL_LOC_BF_WID (14)
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_0_RXEQPIN_ADAPTATION_BEST_EYE_VAL_LOC_BF_MSK (0x0000FFFC)
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_0_RXEQPIN_ADAPTATION_BEST_EYE_VAL_LOC_BF_DEF (0x00000000)

///< o_rxeq_eyemeas_done_l[x]_a output pin pre-override value
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_0_RXEQPIN_EYEMEAS_DONE_LOC_BF_OFF (16)
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_0_RXEQPIN_EYEMEAS_DONE_LOC_BF_WID ( 1)
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_0_RXEQPIN_EYEMEAS_DONE_LOC_BF_MSK (0x00010000)
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_0_RXEQPIN_EYEMEAS_DONE_LOC_BF_DEF (0x00000000)

///< o_rxeq_eyemeas_err_l[x]_a output pin pre-override value
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_0_RXEQPIN_EYEMEAS_ERR_LOC_BF_OFF (17)
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_0_RXEQPIN_EYEMEAS_ERR_LOC_BF_WID ( 1)
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_0_RXEQPIN_EYEMEAS_ERR_LOC_BF_MSK (0x00020000)
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_0_RXEQPIN_EYEMEAS_ERR_LOC_BF_DEF (0x00000000)

///< o_rxeq_eyemeas_val_l[x]_a output pin pre-override value
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_0_RXEQPIN_EYEMEAS_VAL_LOC_BF_OFF (18)
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_0_RXEQPIN_EYEMEAS_VAL_LOC_BF_WID (14)
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_0_RXEQPIN_EYEMEAS_VAL_LOC_BF_MSK (0xFFFC0000)
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_0_RXEQPIN_EYEMEAS_VAL_LOC_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_OUTPUT_PIN_PREOVERRIDE_1 register description at address offset 0x1f4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_output_pin_preoverride_1
  * Rx output pin pre-override value
  */

typedef union {
  struct {
    uint32_t PIPEPCSPIN_DEEPPM_ACK_B_LOC : 1;
    ///< o_pipepcs_deeppm_ack_l[x]_b_a a output pin pre-override value
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RXDATPIN_CDRLOCK2DATA_LOC : 1;
    ///< o_rxdat_cdrlock2data_l[x]_a output pin override value
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t RXDATPIN_SIGNALDETECT_LOC : 1;
    ///< o_rxdat_signaldetect_l[x]_a output pin pre-override value
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t PIPEPCSPIN_SIGNALDETECT_LFPS_LOC : 1;
    ///< o_pipepcs_signaldetect_lfps_l[x]_a output pin pre-override value
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t PIPEPCSPIN_RXMARGIN_STATUS_GRAY_LOC : 2;
    ///< o_pipepcs_rxmargin_status_gray_l[x]_a output pin pre-override value
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_output_pin_preovrd_1_reg_t;

#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_1_DEFAULT (0x00000000U)
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_1_RD_MASK (0x0000003fU)
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_1_WR_MASK (0x00000000U)


///< o_pipepcs_deeppm_ack_l[x]_b_a a output pin pre-override value
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_1_PIPEPCSPIN_DEEPPM_ACK_B_LOC_BF_OFF ( 0)
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_1_PIPEPCSPIN_DEEPPM_ACK_B_LOC_BF_WID ( 1)
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_1_PIPEPCSPIN_DEEPPM_ACK_B_LOC_BF_MSK (0x00000001)
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_1_PIPEPCSPIN_DEEPPM_ACK_B_LOC_BF_DEF (0x00000000)

///< o_rxdat_cdrlock2data_l[x]_a output pin override value
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_1_RXDATPIN_CDRLOCK2DATA_LOC_BF_OFF ( 1)
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_1_RXDATPIN_CDRLOCK2DATA_LOC_BF_WID ( 1)
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_1_RXDATPIN_CDRLOCK2DATA_LOC_BF_MSK (0x00000002)
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_1_RXDATPIN_CDRLOCK2DATA_LOC_BF_DEF (0x00000000)

///< o_rxdat_signaldetect_l[x]_a output pin pre-override value
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_1_RXDATPIN_SIGNALDETECT_LOC_BF_OFF ( 2)
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_1_RXDATPIN_SIGNALDETECT_LOC_BF_WID ( 1)
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_1_RXDATPIN_SIGNALDETECT_LOC_BF_MSK (0x00000004)
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_1_RXDATPIN_SIGNALDETECT_LOC_BF_DEF (0x00000000)

///< o_pipepcs_signaldetect_lfps_l[x]_a output pin pre-override value
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_1_PIPEPCSPIN_SIGNALDETECT_LFPS_LOC_BF_OFF ( 3)
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_1_PIPEPCSPIN_SIGNALDETECT_LFPS_LOC_BF_WID ( 1)
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_1_PIPEPCSPIN_SIGNALDETECT_LFPS_LOC_BF_MSK (0x00000008)
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_1_PIPEPCSPIN_SIGNALDETECT_LFPS_LOC_BF_DEF (0x00000000)

///< o_pipepcs_rxmargin_status_gray_l[x]_a output pin pre-override value
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_1_PIPEPCSPIN_RXMARGIN_STAT_GRAY_LOC_BF_OFF ( 4)
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_1_PIPEPCSPIN_RXMARGIN_STAT_GRAY_LOC_BF_WID ( 2)
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_1_PIPEPCSPIN_RXMARGIN_STAT_GRAY_LOC_BF_MSK (0x00000030)
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_1_PIPEPCSPIN_RXMARGIN_STAT_GRAY_LOC_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_BRKPT_CTRL register description at address offset 0x1f8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_brkpt_ctrl
  * Rx break point control
  */

typedef union {
  struct {
    uint32_t RXRPUBRKPT_EN : 1;
    ///< RPU break point enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXCALMASTERBRKPT_EN : 1;
    ///< CalMaster break point enable
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RXRATEWIDTHBRKPT_EN : 5;
    ///< RateWidth break point enable
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t RXFSM_RST_NOTIFY_EN : 1;
    ///< Main FSM reset notify enable
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t RXFSM_RST_BRKPT_EN_MASK : 1;
    ///< Main FSM reset break point enable.  This bit can be enable only when
    ///< txfsm_rst_notify_en is HIGH
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_brkpt_ctrl_reg_t;

#define PMA_RX_MGS_BRKPT_CTRL_DEFAULT (0x00000000U)
#define PMA_RX_MGS_BRKPT_CTRL_RD_MASK (0x000001ffU)
#define PMA_RX_MGS_BRKPT_CTRL_WR_MASK (0x000001ffU)


///< RPU break point enable
#define PMA_RX_MGS_BRKPT_CTRL_RXRPUBRKPT_EN_BF_OFF ( 0)
#define PMA_RX_MGS_BRKPT_CTRL_RXRPUBRKPT_EN_BF_WID ( 1)
#define PMA_RX_MGS_BRKPT_CTRL_RXRPUBRKPT_EN_BF_MSK (0x00000001)
#define PMA_RX_MGS_BRKPT_CTRL_RXRPUBRKPT_EN_BF_DEF (0x00000000)

///< CalMaster break point enable
#define PMA_RX_MGS_BRKPT_CTRL_RXCALMASTERBRKPT_EN_BF_OFF ( 1)
#define PMA_RX_MGS_BRKPT_CTRL_RXCALMASTERBRKPT_EN_BF_WID ( 1)
#define PMA_RX_MGS_BRKPT_CTRL_RXCALMASTERBRKPT_EN_BF_MSK (0x00000002)
#define PMA_RX_MGS_BRKPT_CTRL_RXCALMASTERBRKPT_EN_BF_DEF (0x00000000)

///< RateWidth break point enable
#define PMA_RX_MGS_BRKPT_CTRL_RXRATEWIDTHBRKPT_EN_BF_OFF ( 2)
#define PMA_RX_MGS_BRKPT_CTRL_RXRATEWIDTHBRKPT_EN_BF_WID ( 5)
#define PMA_RX_MGS_BRKPT_CTRL_RXRATEWIDTHBRKPT_EN_BF_MSK (0x0000007C)
#define PMA_RX_MGS_BRKPT_CTRL_RXRATEWIDTHBRKPT_EN_BF_DEF (0x00000000)

///< Main FSM reset notify enable
#define PMA_RX_MGS_BRKPT_CTRL_RXFSM_RST_NOTIFY_EN_BF_OFF ( 7)
#define PMA_RX_MGS_BRKPT_CTRL_RXFSM_RST_NOTIFY_EN_BF_WID ( 1)
#define PMA_RX_MGS_BRKPT_CTRL_RXFSM_RST_NOTIFY_EN_BF_MSK (0x00000080)
#define PMA_RX_MGS_BRKPT_CTRL_RXFSM_RST_NOTIFY_EN_BF_DEF (0x00000000)

///< Main FSM reset break point enable.  This bit can be enable only when
///< txfsm_rst_notify_en is HIGH
#define PMA_RX_MGS_BRKPT_CTRL_RXFSM_RST_BRKPT_EN_MASK_BF_OFF ( 8)
#define PMA_RX_MGS_BRKPT_CTRL_RXFSM_RST_BRKPT_EN_MASK_BF_WID ( 1)
#define PMA_RX_MGS_BRKPT_CTRL_RXFSM_RST_BRKPT_EN_MASK_BF_MSK (0x00000100)
#define PMA_RX_MGS_BRKPT_CTRL_RXFSM_RST_BRKPT_EN_MASK_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_BRKPT_STATUS register description at address offset 0x1fc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_brkpt_status
  * Rx break point status
  */

typedef union {
  struct {
    uint32_t RXRPUBRKPT_HIT : 1;
    ///< RPU break point status
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RXCALMASTERBRKPT_HIT : 1;
    ///< CalMaster break point status
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t RXRATEWIDTHBRKPT_HIT : 1;
    ///< RateWidth break point status
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t RXFSM_RST_NOTIFY_HIT : 1;
    ///< Main FSM reset notify status
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_brkpt_stat_reg_t;

#define PMA_RX_MGS_BRKPT_STAT_DEFAULT (0x00000000U)
#define PMA_RX_MGS_BRKPT_STAT_RD_MASK (0x0000000fU)
#define PMA_RX_MGS_BRKPT_STAT_WR_MASK (0x00000000U)


///< RPU break point status
#define PMA_RX_MGS_BRKPT_STAT_RXRPUBRKPT_HIT_BF_OFF ( 0)
#define PMA_RX_MGS_BRKPT_STAT_RXRPUBRKPT_HIT_BF_WID ( 1)
#define PMA_RX_MGS_BRKPT_STAT_RXRPUBRKPT_HIT_BF_MSK (0x00000001)
#define PMA_RX_MGS_BRKPT_STAT_RXRPUBRKPT_HIT_BF_DEF (0x00000000)

///< CalMaster break point status
#define PMA_RX_MGS_BRKPT_STAT_RXCALMASTERBRKPT_HIT_BF_OFF ( 1)
#define PMA_RX_MGS_BRKPT_STAT_RXCALMASTERBRKPT_HIT_BF_WID ( 1)
#define PMA_RX_MGS_BRKPT_STAT_RXCALMASTERBRKPT_HIT_BF_MSK (0x00000002)
#define PMA_RX_MGS_BRKPT_STAT_RXCALMASTERBRKPT_HIT_BF_DEF (0x00000000)

///< RateWidth break point status
#define PMA_RX_MGS_BRKPT_STAT_RXRATEWIDTHBRKPT_HIT_BF_OFF ( 2)
#define PMA_RX_MGS_BRKPT_STAT_RXRATEWIDTHBRKPT_HIT_BF_WID ( 1)
#define PMA_RX_MGS_BRKPT_STAT_RXRATEWIDTHBRKPT_HIT_BF_MSK (0x00000004)
#define PMA_RX_MGS_BRKPT_STAT_RXRATEWIDTHBRKPT_HIT_BF_DEF (0x00000000)

///< Main FSM reset notify status
#define PMA_RX_MGS_BRKPT_STAT_RXFSM_RST_NOTIFY_HIT_BF_OFF ( 3)
#define PMA_RX_MGS_BRKPT_STAT_RXFSM_RST_NOTIFY_HIT_BF_WID ( 1)
#define PMA_RX_MGS_BRKPT_STAT_RXFSM_RST_NOTIFY_HIT_BF_MSK (0x00000008)
#define PMA_RX_MGS_BRKPT_STAT_RXFSM_RST_NOTIFY_HIT_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_BRKPT_CLEAR register description at address offset 0x200
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_brkpt_clear
  * Rx break point control clear
  */

typedef union {
  struct {
    uint32_t RXRPUBRKPT_HIT_CLR : 1;
    ///< RPU break point clear/resume.  Self-clear bit.  Write 1 to clear/resume
    ///< the FSM from the break point.  When the break point is cleared, this
    ///< register value will return back to 1'b0
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t RXCALMASTERBRKPT_HIT_CLR : 1;
    ///< CalMaster break point clear/resume.  Self-clear bit.  Write 1 to clear/resume
    ///< the FSM from the break point.  When the break point is cleared, this
    ///< register value will return back to 1'b0
    ///< AccessType="RW/V" BitOffset="1" ResetValue="0x0"
    uint32_t RXRATEWIDTHBRKPT_HIT_CLR : 1;
    ///< RateWidth break point clear/resume.  Self-clear bit.  Write 1 to clear/resume
    ///< the FSM from the break point.  When the break point is cleared, this
    ///< register value will return back to 1'b0
    ///< AccessType="RW/V" BitOffset="2" ResetValue="0x0"
    uint32_t RXFSM_RST_NOTIFY_HIT_CLR : 1;
    ///< Main FSM reset notify break point clear/resume.  Self-clear bit.
    ///< Write 1 to clear/resume the FSM from the break point when txfsm_rst_brkpt_en_mask
    ///< is HIGH.  When the break point is cleared, this register value will
    ///< return back to 1'b0
    ///< AccessType="RW/V" BitOffset="3" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_brkpt_clr_reg_t;

#define PMA_RX_MGS_BRKPT_CLR_DEFAULT (0x00000000U)
#define PMA_RX_MGS_BRKPT_CLR_RD_MASK (0x0000000fU)
#define PMA_RX_MGS_BRKPT_CLR_WR_MASK (0x0000000fU)


///< RPU break point clear/resume.  Self-clear bit.  Write 1 to clear/resume
///< the FSM from the break point.  When the break point is cleared, this
///< register value will return back to 1'b0
#define PMA_RX_MGS_BRKPT_CLR_RXRPUBRKPT_HIT_CLR_BF_OFF ( 0)
#define PMA_RX_MGS_BRKPT_CLR_RXRPUBRKPT_HIT_CLR_BF_WID ( 1)
#define PMA_RX_MGS_BRKPT_CLR_RXRPUBRKPT_HIT_CLR_BF_MSK (0x00000001)
#define PMA_RX_MGS_BRKPT_CLR_RXRPUBRKPT_HIT_CLR_BF_DEF (0x00000000)

///< CalMaster break point clear/resume.  Self-clear bit.  Write 1 to clear/resume
///< the FSM from the break point.  When the break point is cleared, this
///< register value will return back to 1'b0
#define PMA_RX_MGS_BRKPT_CLR_RXCALMASTERBRKPT_HIT_CLR_BF_OFF ( 1)
#define PMA_RX_MGS_BRKPT_CLR_RXCALMASTERBRKPT_HIT_CLR_BF_WID ( 1)
#define PMA_RX_MGS_BRKPT_CLR_RXCALMASTERBRKPT_HIT_CLR_BF_MSK (0x00000002)
#define PMA_RX_MGS_BRKPT_CLR_RXCALMASTERBRKPT_HIT_CLR_BF_DEF (0x00000000)

///< RateWidth break point clear/resume.  Self-clear bit.  Write 1 to clear/resume
///< the FSM from the break point.  When the break point is cleared, this
///< register value will return back to 1'b0
#define PMA_RX_MGS_BRKPT_CLR_RXRATEWIDTHBRKPT_HIT_CLR_BF_OFF ( 2)
#define PMA_RX_MGS_BRKPT_CLR_RXRATEWIDTHBRKPT_HIT_CLR_BF_WID ( 1)
#define PMA_RX_MGS_BRKPT_CLR_RXRATEWIDTHBRKPT_HIT_CLR_BF_MSK (0x00000004)
#define PMA_RX_MGS_BRKPT_CLR_RXRATEWIDTHBRKPT_HIT_CLR_BF_DEF (0x00000000)

///< Main FSM reset notify break point clear/resume.  Self-clear bit.
///< Write 1 to clear/resume the FSM from the break point when txfsm_rst_brkpt_en_mask
///< is HIGH.  When the break point is cleared, this register value will
///< return back to 1'b0
#define PMA_RX_MGS_BRKPT_CLR_RXFSM_RST_NOTIFY_HIT_CLR_BF_OFF ( 3)
#define PMA_RX_MGS_BRKPT_CLR_RXFSM_RST_NOTIFY_HIT_CLR_BF_WID ( 1)
#define PMA_RX_MGS_BRKPT_CLR_RXFSM_RST_NOTIFY_HIT_CLR_BF_MSK (0x00000008)
#define PMA_RX_MGS_BRKPT_CLR_RXFSM_RST_NOTIFY_HIT_CLR_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXDCO_STATUS register description at address offset 0x204
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxdco_status
  * Rx DCO Status
  */

typedef union {
  struct {
    uint32_t RXPHDT_REFLVL_UPDATE_ACK : 1;
    ///< Rx Phase detector reference level update acknowledge
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RXDCO_HSCNT_VAL : 10;
    ///< RxDCO HS counter value
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t RXDCO_LDO_COMP_OUT : 1;
    ///< RxDCO LDO comparator output
    ///< AccessType="RO/V" BitOffset="11" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_dco_stat_reg_t;

#define PMA_RX_MSG_DCO_STAT_DEFAULT (0x00000000U)
#define PMA_RX_MSG_DCO_STAT_RD_MASK (0x00000fffU)
#define PMA_RX_MSG_DCO_STAT_WR_MASK (0x00000000U)


///< Rx Phase detector reference level update acknowledge
#define PMA_RX_MSG_DCO_STAT_RXPHDT_REFLVL_UPDATE_ACK_BF_OFF ( 0)
#define PMA_RX_MSG_DCO_STAT_RXPHDT_REFLVL_UPDATE_ACK_BF_WID ( 1)
#define PMA_RX_MSG_DCO_STAT_RXPHDT_REFLVL_UPDATE_ACK_BF_MSK (0x00000001)
#define PMA_RX_MSG_DCO_STAT_RXPHDT_REFLVL_UPDATE_ACK_BF_DEF (0x00000000)

///< RxDCO HS counter value
#define PMA_RX_MSG_DCO_STAT_RXDCO_HSCNT_VAL_BF_OFF ( 1)
#define PMA_RX_MSG_DCO_STAT_RXDCO_HSCNT_VAL_BF_WID (10)
#define PMA_RX_MSG_DCO_STAT_RXDCO_HSCNT_VAL_BF_MSK (0x000007FE)
#define PMA_RX_MSG_DCO_STAT_RXDCO_HSCNT_VAL_BF_DEF (0x00000000)

///< RxDCO LDO comparator output
#define PMA_RX_MSG_DCO_STAT_RXDCO_LDO_COMP_OUT_BF_OFF (11)
#define PMA_RX_MSG_DCO_STAT_RXDCO_LDO_COMP_OUT_BF_WID ( 1)
#define PMA_RX_MSG_DCO_STAT_RXDCO_LDO_COMP_OUT_BF_MSK (0x00000800)
#define PMA_RX_MSG_DCO_STAT_RXDCO_LDO_COMP_OUT_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXDCO_CONTROL_ANA register description at address offset 0x208
  *
  * Register default value:        0x00000007
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxdco_control_ana
  * RX DCO control
  */

typedef union {
  struct {
    uint32_t RXDCO_LDO_PKSNS_HIZ_B : 1;
    ///< RxDCO - LDO Peaking Sensor Hi-z.  Active Low
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t RXDCO_LDO_DCO_HIZ_B : 1;
    ///< RxDCO - LDO DCO Hi-z.  Active Low
    ///< AccessType="RW" BitOffset="1" ResetValue="0x1"
    uint32_t RXDCO_PKSNS_SWING_R_BYP_B : 1;
    ///< RxDCO - Peaking Sensor Swing bypass.  Active Low
    ///< AccessType="RW" BitOffset="2" ResetValue="0x1"
    uint32_t RXDCO_LDO_PKSNS_BYP_EN : 1;
    ///< RxDCO - LDO Peaking Sensor bypass enable
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RXDCO_LDO_REFGEN_BYP_EN : 1;
    ///< RxDCO - LDO Ref Generator bypass enable
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RXDCO_LDO_REFGEN_B : 1;
    ///< RxDCO - LDO Ref Generator power down.  Active LOW
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_dco_ctrl_ana_reg_t;

#define PMA_RX_MSG_DCO_CTRL_ANA_DEFAULT (0x00000007U)
#define PMA_RX_MSG_DCO_CTRL_ANA_RD_MASK (0x0000003fU)
#define PMA_RX_MSG_DCO_CTRL_ANA_WR_MASK (0x0000003fU)


///< RxDCO - LDO Peaking Sensor Hi-z.  Active Low
#define PMA_RX_MSG_DCO_CTRL_ANA_RXDCO_LDO_PKSNS_HIZ_B_BF_OFF ( 0)
#define PMA_RX_MSG_DCO_CTRL_ANA_RXDCO_LDO_PKSNS_HIZ_B_BF_WID ( 1)
#define PMA_RX_MSG_DCO_CTRL_ANA_RXDCO_LDO_PKSNS_HIZ_B_BF_MSK (0x00000001)
#define PMA_RX_MSG_DCO_CTRL_ANA_RXDCO_LDO_PKSNS_HIZ_B_BF_DEF (0x00000001)

///< RxDCO - LDO DCO Hi-z.  Active Low
#define PMA_RX_MSG_DCO_CTRL_ANA_RXDCO_LDO_DCO_HIZ_B_BF_OFF ( 1)
#define PMA_RX_MSG_DCO_CTRL_ANA_RXDCO_LDO_DCO_HIZ_B_BF_WID ( 1)
#define PMA_RX_MSG_DCO_CTRL_ANA_RXDCO_LDO_DCO_HIZ_B_BF_MSK (0x00000002)
#define PMA_RX_MSG_DCO_CTRL_ANA_RXDCO_LDO_DCO_HIZ_B_BF_DEF (0x00000002)

///< RxDCO - Peaking Sensor Swing bypass.  Active Low
#define PMA_RX_MSG_DCO_CTRL_ANA_RXDCO_PKSNS_SWING_R_BYP_B_BF_OFF ( 2)
#define PMA_RX_MSG_DCO_CTRL_ANA_RXDCO_PKSNS_SWING_R_BYP_B_BF_WID ( 1)
#define PMA_RX_MSG_DCO_CTRL_ANA_RXDCO_PKSNS_SWING_R_BYP_B_BF_MSK (0x00000004)
#define PMA_RX_MSG_DCO_CTRL_ANA_RXDCO_PKSNS_SWING_R_BYP_B_BF_DEF (0x00000004)

///< RxDCO - LDO Peaking Sensor bypass enable
#define PMA_RX_MSG_DCO_CTRL_ANA_RXDCO_LDO_PKSNS_BYP_EN_BF_OFF ( 3)
#define PMA_RX_MSG_DCO_CTRL_ANA_RXDCO_LDO_PKSNS_BYP_EN_BF_WID ( 1)
#define PMA_RX_MSG_DCO_CTRL_ANA_RXDCO_LDO_PKSNS_BYP_EN_BF_MSK (0x00000008)
#define PMA_RX_MSG_DCO_CTRL_ANA_RXDCO_LDO_PKSNS_BYP_EN_BF_DEF (0x00000000)

///< RxDCO - LDO Ref Generator bypass enable
#define PMA_RX_MSG_DCO_CTRL_ANA_RXDCO_LDO_REFGEN_BYP_EN_BF_OFF ( 4)
#define PMA_RX_MSG_DCO_CTRL_ANA_RXDCO_LDO_REFGEN_BYP_EN_BF_WID ( 1)
#define PMA_RX_MSG_DCO_CTRL_ANA_RXDCO_LDO_REFGEN_BYP_EN_BF_MSK (0x00000010)
#define PMA_RX_MSG_DCO_CTRL_ANA_RXDCO_LDO_REFGEN_BYP_EN_BF_DEF (0x00000000)

///< RxDCO - LDO Ref Generator power down.  Active LOW
#define PMA_RX_MSG_DCO_CTRL_ANA_RXDCO_LDO_REFGEN_B_BF_OFF ( 5)
#define PMA_RX_MSG_DCO_CTRL_ANA_RXDCO_LDO_REFGEN_B_BF_WID ( 1)
#define PMA_RX_MSG_DCO_CTRL_ANA_RXDCO_LDO_REFGEN_B_BF_MSK (0x00000020)
#define PMA_RX_MSG_DCO_CTRL_ANA_RXDCO_LDO_REFGEN_B_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXDCO_CONTROL_DIG_MUXD0 register description at address offset 0x20c
  *
  * Register default value:        0x03BFA264
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxdco_control_dig_muxd0
  * RX DCO control
  */

typedef union {
  struct {
    uint32_t PFD_INV_CB_MUXD0 : 1;
    ///< PFD Chicken Bit
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t PFD_GAIN_MUXD0 : 8;
    ///< PFD Gain
    ///< AccessType="RW" BitOffset="1" ResetValue="0x32"
    uint32_t RX_CDR_GATEINRESET_DISABLE_MUXD0 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="9" ResetValue="0x1"
    uint32_t RX_CDR_RXDCOFINE_PROP_SEL_MODE_MUXD0 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RX_CDR_RXSIGDET_CDRLOCK2DATA_SEL_MUXD0 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t RX_CDR_CDRLOCK_SEL_MUXD0 : 2;
    ///< TBD
    ///< AccessType="RW" BitOffset="12" ResetValue="0x2"
    uint32_t RX_CDR_FINE_MAX_LIMIT_MUXD0 : 8;
    ///< TBD
    ///< AccessType="RW" BitOffset="14" ResetValue="0xFE"
    uint32_t RX_CDR_DFT_TIMER_LIMIT_MUXD0 : 4;
    ///< TBD
    ///< AccessType="RW" BitOffset="22" ResetValue="0xE"
    uint32_t RX_CDR_DFT_CNT_RESTART_MUXD0 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="26" ResetValue="0x0"
    uint32_t RX_CDR_PE_DISABLE_MUXD0 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="27" ResetValue="0x0"
    uint32_t RX_CDR_DCODITHER_SYNC_BYPASS_EN_MUXD0 : 1;
    ///< Bypass dither synchronizers and use s2p clock for dithering fine fractional
    ///< code
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t RX_CDR_VOTE_AVG_HOLD_MUXD0 : 1;
    ///< Moving average logic for current PD voters set on hold
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_dco_ctrl_dig_muxd0_reg_t;

#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_DEFAULT (0x03bfa264U)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_RD_MASK (0x3fffffffU)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_WR_MASK (0x3fffffffU)


///< PFD Chicken Bit
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_PFD_INV_CB_MUXD0_BF_OFF ( 0)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_PFD_INV_CB_MUXD0_BF_WID ( 1)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_PFD_INV_CB_MUXD0_BF_MSK (0x00000001)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_PFD_INV_CB_MUXD0_BF_DEF (0x00000000)

///< PFD Gain
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_PFD_GAIN_MUXD0_BF_OFF ( 1)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_PFD_GAIN_MUXD0_BF_WID ( 8)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_PFD_GAIN_MUXD0_BF_MSK (0x000001FE)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_PFD_GAIN_MUXD0_BF_DEF (0x00000064)

///< TBD
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_RX_CDR_GATEINRST_DIS_MUXD0_BF_OFF ( 9)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_RX_CDR_GATEINRST_DIS_MUXD0_BF_WID ( 1)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_RX_CDR_GATEINRST_DIS_MUXD0_BF_MSK (0x00000200)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_RX_CDR_GATEINRST_DIS_MUXD0_BF_DEF (0x00000200)

///< TBD
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_RX_CDR_RXDCOFINE_PROP_SEL_MODE_MUXD0_BF_OFF (10)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_RX_CDR_RXDCOFINE_PROP_SEL_MODE_MUXD0_BF_WID ( 1)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_RX_CDR_RXDCOFINE_PROP_SEL_MODE_MUXD0_BF_MSK (0x00000400)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_RX_CDR_RXDCOFINE_PROP_SEL_MODE_MUXD0_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_RX_CDR_RXSIGDET_CDRLOCK2DATA_SEL_MUXD0_BF_OFF (11)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_RX_CDR_RXSIGDET_CDRLOCK2DATA_SEL_MUXD0_BF_WID ( 1)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_RX_CDR_RXSIGDET_CDRLOCK2DATA_SEL_MUXD0_BF_MSK (0x00000800)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_RX_CDR_RXSIGDET_CDRLOCK2DATA_SEL_MUXD0_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_RX_CDR_CDRLOCK_SEL_MUXD0_BF_OFF (12)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_RX_CDR_CDRLOCK_SEL_MUXD0_BF_WID ( 2)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_RX_CDR_CDRLOCK_SEL_MUXD0_BF_MSK (0x00003000)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_RX_CDR_CDRLOCK_SEL_MUXD0_BF_DEF (0x00002000)

///< TBD
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_RX_CDR_FINE_MAX_LIMIT_MUXD0_BF_OFF (14)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_RX_CDR_FINE_MAX_LIMIT_MUXD0_BF_WID ( 8)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_RX_CDR_FINE_MAX_LIMIT_MUXD0_BF_MSK (0x003FC000)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_RX_CDR_FINE_MAX_LIMIT_MUXD0_BF_DEF (0x003F8000)

///< TBD
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_RX_CDR_DFT_TIMER_LIMIT_MUXD0_BF_OFF (22)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_RX_CDR_DFT_TIMER_LIMIT_MUXD0_BF_WID ( 4)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_RX_CDR_DFT_TIMER_LIMIT_MUXD0_BF_MSK (0x03C00000)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_RX_CDR_DFT_TIMER_LIMIT_MUXD0_BF_DEF (0x03800000)

///< TBD
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_RX_CDR_DFT_CNT_RESTART_MUXD0_BF_OFF (26)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_RX_CDR_DFT_CNT_RESTART_MUXD0_BF_WID ( 1)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_RX_CDR_DFT_CNT_RESTART_MUXD0_BF_MSK (0x04000000)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_RX_CDR_DFT_CNT_RESTART_MUXD0_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_RX_CDR_PE_DIS_MUXD0_BF_OFF (27)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_RX_CDR_PE_DIS_MUXD0_BF_WID ( 1)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_RX_CDR_PE_DIS_MUXD0_BF_MSK (0x08000000)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_RX_CDR_PE_DIS_MUXD0_BF_DEF (0x00000000)

///< Bypass dither synchronizers and use s2p clock for dithering fine fractional
///< code
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_RX_CDR_DCODITHER_SYNC_BYP_EN_MUXD0_BF_OFF (28)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_RX_CDR_DCODITHER_SYNC_BYP_EN_MUXD0_BF_WID ( 1)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_RX_CDR_DCODITHER_SYNC_BYP_EN_MUXD0_BF_MSK (0x10000000)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_RX_CDR_DCODITHER_SYNC_BYP_EN_MUXD0_BF_DEF (0x00000000)

///< Moving average logic for current PD voters set on hold
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_RX_CDR_VOTE_AVG_HOLD_MUXD0_BF_OFF (29)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_RX_CDR_VOTE_AVG_HOLD_MUXD0_BF_WID ( 1)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_RX_CDR_VOTE_AVG_HOLD_MUXD0_BF_MSK (0x20000000)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_RX_CDR_VOTE_AVG_HOLD_MUXD0_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXDCO_CONTROL_DIG_MUXD1 register description at address offset 0x210
  *
  * Register default value:        0x03BFA264
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxdco_control_dig_muxd1
  * RX DCO control
  */

typedef union {
  struct {
    uint32_t PFD_INV_CB_MUXD1 : 1;
    ///< PFD Chicken Bit
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t PFD_GAIN_MUXD1 : 8;
    ///< PFD Gain
    ///< AccessType="RW" BitOffset="1" ResetValue="0x32"
    uint32_t RX_CDR_GATEINRESET_DISABLE_MUXD1 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="9" ResetValue="0x1"
    uint32_t RX_CDR_RXDCOFINE_PROP_SEL_MODE_MUXD1 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RX_CDR_RXSIGDET_CDRLOCK2DATA_SEL_MUXD1 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t RX_CDR_CDRLOCK_SEL_MUXD1 : 2;
    ///< TBD
    ///< AccessType="RW" BitOffset="12" ResetValue="0x2"
    uint32_t RX_CDR_FINE_MAX_LIMIT_MUXD1 : 8;
    ///< TBD
    ///< AccessType="RW" BitOffset="14" ResetValue="0xFE"
    uint32_t RX_CDR_DFT_TIMER_LIMIT_MUXD1 : 4;
    ///< TBD
    ///< AccessType="RW" BitOffset="22" ResetValue="0xE"
    uint32_t RX_CDR_DFT_CNT_RESTART_MUXD1 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="26" ResetValue="0x0"
    uint32_t RX_CDR_PE_DISABLE_MUXD1 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="27" ResetValue="0x0"
    uint32_t RX_CDR_DCODITHER_SYNC_BYPASS_EN_MUXD1 : 1;
    ///< Bypass dither synchronizers and use s2p clock for dithering fine fractional
    ///< code
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t RX_CDR_VOTE_AVG_HOLD_MUXD1 : 1;
    ///< Moving average logic for current PD voters set on hold
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_dco_ctrl_dig_muxd1_reg_t;

#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_DEFAULT (0x03bfa264U)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_RD_MASK (0x3fffffffU)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_WR_MASK (0x3fffffffU)


///< PFD Chicken Bit
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_PFD_INV_CB_MUXD1_BF_OFF ( 0)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_PFD_INV_CB_MUXD1_BF_WID ( 1)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_PFD_INV_CB_MUXD1_BF_MSK (0x00000001)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_PFD_INV_CB_MUXD1_BF_DEF (0x00000000)

///< PFD Gain
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_PFD_GAIN_MUXD1_BF_OFF ( 1)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_PFD_GAIN_MUXD1_BF_WID ( 8)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_PFD_GAIN_MUXD1_BF_MSK (0x000001FE)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_PFD_GAIN_MUXD1_BF_DEF (0x00000064)

///< TBD
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_RX_CDR_GATEINRST_DIS_MUXD1_BF_OFF ( 9)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_RX_CDR_GATEINRST_DIS_MUXD1_BF_WID ( 1)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_RX_CDR_GATEINRST_DIS_MUXD1_BF_MSK (0x00000200)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_RX_CDR_GATEINRST_DIS_MUXD1_BF_DEF (0x00000200)

///< TBD
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_RX_CDR_RXDCOFINE_PROP_SEL_MODE_MUXD1_BF_OFF (10)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_RX_CDR_RXDCOFINE_PROP_SEL_MODE_MUXD1_BF_WID ( 1)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_RX_CDR_RXDCOFINE_PROP_SEL_MODE_MUXD1_BF_MSK (0x00000400)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_RX_CDR_RXDCOFINE_PROP_SEL_MODE_MUXD1_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_RX_CDR_RXSIGDET_CDRLOCK2DATA_SEL_MUXD1_BF_OFF (11)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_RX_CDR_RXSIGDET_CDRLOCK2DATA_SEL_MUXD1_BF_WID ( 1)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_RX_CDR_RXSIGDET_CDRLOCK2DATA_SEL_MUXD1_BF_MSK (0x00000800)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_RX_CDR_RXSIGDET_CDRLOCK2DATA_SEL_MUXD1_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_RX_CDR_CDRLOCK_SEL_MUXD1_BF_OFF (12)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_RX_CDR_CDRLOCK_SEL_MUXD1_BF_WID ( 2)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_RX_CDR_CDRLOCK_SEL_MUXD1_BF_MSK (0x00003000)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_RX_CDR_CDRLOCK_SEL_MUXD1_BF_DEF (0x00002000)

///< TBD
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_RX_CDR_FINE_MAX_LIMIT_MUXD1_BF_OFF (14)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_RX_CDR_FINE_MAX_LIMIT_MUXD1_BF_WID ( 8)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_RX_CDR_FINE_MAX_LIMIT_MUXD1_BF_MSK (0x003FC000)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_RX_CDR_FINE_MAX_LIMIT_MUXD1_BF_DEF (0x003F8000)

///< TBD
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_RX_CDR_DFT_TIMER_LIMIT_MUXD1_BF_OFF (22)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_RX_CDR_DFT_TIMER_LIMIT_MUXD1_BF_WID ( 4)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_RX_CDR_DFT_TIMER_LIMIT_MUXD1_BF_MSK (0x03C00000)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_RX_CDR_DFT_TIMER_LIMIT_MUXD1_BF_DEF (0x03800000)

///< TBD
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_RX_CDR_DFT_CNT_RESTART_MUXD1_BF_OFF (26)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_RX_CDR_DFT_CNT_RESTART_MUXD1_BF_WID ( 1)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_RX_CDR_DFT_CNT_RESTART_MUXD1_BF_MSK (0x04000000)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_RX_CDR_DFT_CNT_RESTART_MUXD1_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_RX_CDR_PE_DIS_MUXD1_BF_OFF (27)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_RX_CDR_PE_DIS_MUXD1_BF_WID ( 1)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_RX_CDR_PE_DIS_MUXD1_BF_MSK (0x08000000)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_RX_CDR_PE_DIS_MUXD1_BF_DEF (0x00000000)

///< Bypass dither synchronizers and use s2p clock for dithering fine fractional
///< code
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_RX_CDR_DCODITHER_SYNC_BYP_EN_MUXD1_BF_OFF (28)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_RX_CDR_DCODITHER_SYNC_BYP_EN_MUXD1_BF_WID ( 1)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_RX_CDR_DCODITHER_SYNC_BYP_EN_MUXD1_BF_MSK (0x10000000)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_RX_CDR_DCODITHER_SYNC_BYP_EN_MUXD1_BF_DEF (0x00000000)

///< Moving average logic for current PD voters set on hold
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_RX_CDR_VOTE_AVG_HOLD_MUXD1_BF_OFF (29)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_RX_CDR_VOTE_AVG_HOLD_MUXD1_BF_WID ( 1)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_RX_CDR_VOTE_AVG_HOLD_MUXD1_BF_MSK (0x20000000)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_RX_CDR_VOTE_AVG_HOLD_MUXD1_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXDCO_CONTROL_DIG_MUXD2 register description at address offset 0x214
  *
  * Register default value:        0x03BFA264
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxdco_control_dig_muxd2
  * RX DCO control
  */

typedef union {
  struct {
    uint32_t PFD_INV_CB_MUXD2 : 1;
    ///< PFD Chicken Bit
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t PFD_GAIN_MUXD2 : 8;
    ///< PFD Gain
    ///< AccessType="RW" BitOffset="1" ResetValue="0x32"
    uint32_t RX_CDR_GATEINRESET_DISABLE_MUXD2 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="9" ResetValue="0x1"
    uint32_t RX_CDR_RXDCOFINE_PROP_SEL_MODE_MUXD2 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RX_CDR_RXSIGDET_CDRLOCK2DATA_SEL_MUXD2 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t RX_CDR_CDRLOCK_SEL_MUXD2 : 2;
    ///< TBD
    ///< AccessType="RW" BitOffset="12" ResetValue="0x2"
    uint32_t RX_CDR_FINE_MAX_LIMIT_MUXD2 : 8;
    ///< TBD
    ///< AccessType="RW" BitOffset="14" ResetValue="0xFE"
    uint32_t RX_CDR_DFT_TIMER_LIMIT_MUXD2 : 4;
    ///< TBD
    ///< AccessType="RW" BitOffset="22" ResetValue="0xE"
    uint32_t RX_CDR_DFT_CNT_RESTART_MUXD2 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="26" ResetValue="0x0"
    uint32_t RX_CDR_PE_DISABLE_MUXD2 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="27" ResetValue="0x0"
    uint32_t RX_CDR_DCODITHER_SYNC_BYPASS_EN_MUXD2 : 1;
    ///< Bypass dither synchronizers and use s2p clock for dithering fine fractional
    ///< code
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t RX_CDR_VOTE_AVG_HOLD_MUXD2 : 1;
    ///< Moving average logic for current PD voters set on hold
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_dco_ctrl_dig_muxd2_reg_t;

#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_DEFAULT (0x03bfa264U)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_RD_MASK (0x3fffffffU)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_WR_MASK (0x3fffffffU)


///< PFD Chicken Bit
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_PFD_INV_CB_MUXD2_BF_OFF ( 0)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_PFD_INV_CB_MUXD2_BF_WID ( 1)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_PFD_INV_CB_MUXD2_BF_MSK (0x00000001)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_PFD_INV_CB_MUXD2_BF_DEF (0x00000000)

///< PFD Gain
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_PFD_GAIN_MUXD2_BF_OFF ( 1)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_PFD_GAIN_MUXD2_BF_WID ( 8)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_PFD_GAIN_MUXD2_BF_MSK (0x000001FE)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_PFD_GAIN_MUXD2_BF_DEF (0x00000064)

///< TBD
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_RX_CDR_GATEINRST_DIS_MUXD2_BF_OFF ( 9)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_RX_CDR_GATEINRST_DIS_MUXD2_BF_WID ( 1)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_RX_CDR_GATEINRST_DIS_MUXD2_BF_MSK (0x00000200)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_RX_CDR_GATEINRST_DIS_MUXD2_BF_DEF (0x00000200)

///< TBD
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_RX_CDR_RXDCOFINE_PROP_SEL_MODE_MUXD2_BF_OFF (10)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_RX_CDR_RXDCOFINE_PROP_SEL_MODE_MUXD2_BF_WID ( 1)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_RX_CDR_RXDCOFINE_PROP_SEL_MODE_MUXD2_BF_MSK (0x00000400)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_RX_CDR_RXDCOFINE_PROP_SEL_MODE_MUXD2_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_RX_CDR_RXSIGDET_CDRLOCK2DATA_SEL_MUXD2_BF_OFF (11)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_RX_CDR_RXSIGDET_CDRLOCK2DATA_SEL_MUXD2_BF_WID ( 1)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_RX_CDR_RXSIGDET_CDRLOCK2DATA_SEL_MUXD2_BF_MSK (0x00000800)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_RX_CDR_RXSIGDET_CDRLOCK2DATA_SEL_MUXD2_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_RX_CDR_CDRLOCK_SEL_MUXD2_BF_OFF (12)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_RX_CDR_CDRLOCK_SEL_MUXD2_BF_WID ( 2)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_RX_CDR_CDRLOCK_SEL_MUXD2_BF_MSK (0x00003000)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_RX_CDR_CDRLOCK_SEL_MUXD2_BF_DEF (0x00002000)

///< TBD
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_RX_CDR_FINE_MAX_LIMIT_MUXD2_BF_OFF (14)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_RX_CDR_FINE_MAX_LIMIT_MUXD2_BF_WID ( 8)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_RX_CDR_FINE_MAX_LIMIT_MUXD2_BF_MSK (0x003FC000)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_RX_CDR_FINE_MAX_LIMIT_MUXD2_BF_DEF (0x003F8000)

///< TBD
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_RX_CDR_DFT_TIMER_LIMIT_MUXD2_BF_OFF (22)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_RX_CDR_DFT_TIMER_LIMIT_MUXD2_BF_WID ( 4)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_RX_CDR_DFT_TIMER_LIMIT_MUXD2_BF_MSK (0x03C00000)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_RX_CDR_DFT_TIMER_LIMIT_MUXD2_BF_DEF (0x03800000)

///< TBD
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_RX_CDR_DFT_CNT_RESTART_MUXD2_BF_OFF (26)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_RX_CDR_DFT_CNT_RESTART_MUXD2_BF_WID ( 1)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_RX_CDR_DFT_CNT_RESTART_MUXD2_BF_MSK (0x04000000)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_RX_CDR_DFT_CNT_RESTART_MUXD2_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_RX_CDR_PE_DIS_MUXD2_BF_OFF (27)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_RX_CDR_PE_DIS_MUXD2_BF_WID ( 1)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_RX_CDR_PE_DIS_MUXD2_BF_MSK (0x08000000)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_RX_CDR_PE_DIS_MUXD2_BF_DEF (0x00000000)

///< Bypass dither synchronizers and use s2p clock for dithering fine fractional
///< code
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_RX_CDR_DCODITHER_SYNC_BYP_EN_MUXD2_BF_OFF (28)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_RX_CDR_DCODITHER_SYNC_BYP_EN_MUXD2_BF_WID ( 1)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_RX_CDR_DCODITHER_SYNC_BYP_EN_MUXD2_BF_MSK (0x10000000)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_RX_CDR_DCODITHER_SYNC_BYP_EN_MUXD2_BF_DEF (0x00000000)

///< Moving average logic for current PD voters set on hold
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_RX_CDR_VOTE_AVG_HOLD_MUXD2_BF_OFF (29)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_RX_CDR_VOTE_AVG_HOLD_MUXD2_BF_WID ( 1)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_RX_CDR_VOTE_AVG_HOLD_MUXD2_BF_MSK (0x20000000)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_RX_CDR_VOTE_AVG_HOLD_MUXD2_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXDCO_CONTROL_DIG_MUXD3 register description at address offset 0x218
  *
  * Register default value:        0x03BFA264
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxdco_control_dig_muxd3
  * RX DCO control
  */

typedef union {
  struct {
    uint32_t PFD_INV_CB_MUXD3 : 1;
    ///< PFD Chicken Bit
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t PFD_GAIN_MUXD3 : 8;
    ///< PFD Gain
    ///< AccessType="RW" BitOffset="1" ResetValue="0x32"
    uint32_t RX_CDR_GATEINRESET_DISABLE_MUXD3 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="9" ResetValue="0x1"
    uint32_t RX_CDR_RXDCOFINE_PROP_SEL_MODE_MUXD3 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RX_CDR_RXSIGDET_CDRLOCK2DATA_SEL_MUXD3 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t RX_CDR_CDRLOCK_SEL_MUXD3 : 2;
    ///< TBD
    ///< AccessType="RW" BitOffset="12" ResetValue="0x2"
    uint32_t RX_CDR_FINE_MAX_LIMIT_MUXD3 : 8;
    ///< TBD
    ///< AccessType="RW" BitOffset="14" ResetValue="0xFE"
    uint32_t RX_CDR_DFT_TIMER_LIMIT_MUXD3 : 4;
    ///< TBD
    ///< AccessType="RW" BitOffset="22" ResetValue="0xE"
    uint32_t RX_CDR_DFT_CNT_RESTART_MUXD3 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="26" ResetValue="0x0"
    uint32_t RX_CDR_PE_DISABLE_MUXD3 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="27" ResetValue="0x0"
    uint32_t RX_CDR_DCODITHER_SYNC_BYPASS_EN_MUXD3 : 1;
    ///< Bypass dither synchronizers and use s2p clock for dithering fine fractional
    ///< code
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t RX_CDR_VOTE_AVG_HOLD_MUXD3 : 1;
    ///< Moving average logic for current PD voters set on hold
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_dco_ctrl_dig_muxd3_reg_t;

#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_DEFAULT (0x03bfa264U)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_RD_MASK (0x3fffffffU)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_WR_MASK (0x3fffffffU)


///< PFD Chicken Bit
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_PFD_INV_CB_MUXD3_BF_OFF ( 0)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_PFD_INV_CB_MUXD3_BF_WID ( 1)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_PFD_INV_CB_MUXD3_BF_MSK (0x00000001)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_PFD_INV_CB_MUXD3_BF_DEF (0x00000000)

///< PFD Gain
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_PFD_GAIN_MUXD3_BF_OFF ( 1)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_PFD_GAIN_MUXD3_BF_WID ( 8)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_PFD_GAIN_MUXD3_BF_MSK (0x000001FE)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_PFD_GAIN_MUXD3_BF_DEF (0x00000064)

///< TBD
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_RX_CDR_GATEINRST_DIS_MUXD3_BF_OFF ( 9)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_RX_CDR_GATEINRST_DIS_MUXD3_BF_WID ( 1)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_RX_CDR_GATEINRST_DIS_MUXD3_BF_MSK (0x00000200)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_RX_CDR_GATEINRST_DIS_MUXD3_BF_DEF (0x00000200)

///< TBD
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_RX_CDR_RXDCOFINE_PROP_SEL_MODE_MUXD3_BF_OFF (10)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_RX_CDR_RXDCOFINE_PROP_SEL_MODE_MUXD3_BF_WID ( 1)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_RX_CDR_RXDCOFINE_PROP_SEL_MODE_MUXD3_BF_MSK (0x00000400)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_RX_CDR_RXDCOFINE_PROP_SEL_MODE_MUXD3_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_RX_CDR_RXSIGDET_CDRLOCK2DATA_SEL_MUXD3_BF_OFF (11)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_RX_CDR_RXSIGDET_CDRLOCK2DATA_SEL_MUXD3_BF_WID ( 1)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_RX_CDR_RXSIGDET_CDRLOCK2DATA_SEL_MUXD3_BF_MSK (0x00000800)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_RX_CDR_RXSIGDET_CDRLOCK2DATA_SEL_MUXD3_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_RX_CDR_CDRLOCK_SEL_MUXD3_BF_OFF (12)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_RX_CDR_CDRLOCK_SEL_MUXD3_BF_WID ( 2)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_RX_CDR_CDRLOCK_SEL_MUXD3_BF_MSK (0x00003000)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_RX_CDR_CDRLOCK_SEL_MUXD3_BF_DEF (0x00002000)

///< TBD
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_RX_CDR_FINE_MAX_LIMIT_MUXD3_BF_OFF (14)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_RX_CDR_FINE_MAX_LIMIT_MUXD3_BF_WID ( 8)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_RX_CDR_FINE_MAX_LIMIT_MUXD3_BF_MSK (0x003FC000)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_RX_CDR_FINE_MAX_LIMIT_MUXD3_BF_DEF (0x003F8000)

///< TBD
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_RX_CDR_DFT_TIMER_LIMIT_MUXD3_BF_OFF (22)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_RX_CDR_DFT_TIMER_LIMIT_MUXD3_BF_WID ( 4)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_RX_CDR_DFT_TIMER_LIMIT_MUXD3_BF_MSK (0x03C00000)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_RX_CDR_DFT_TIMER_LIMIT_MUXD3_BF_DEF (0x03800000)

///< TBD
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_RX_CDR_DFT_CNT_RESTART_MUXD3_BF_OFF (26)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_RX_CDR_DFT_CNT_RESTART_MUXD3_BF_WID ( 1)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_RX_CDR_DFT_CNT_RESTART_MUXD3_BF_MSK (0x04000000)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_RX_CDR_DFT_CNT_RESTART_MUXD3_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_RX_CDR_PE_DIS_MUXD3_BF_OFF (27)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_RX_CDR_PE_DIS_MUXD3_BF_WID ( 1)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_RX_CDR_PE_DIS_MUXD3_BF_MSK (0x08000000)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_RX_CDR_PE_DIS_MUXD3_BF_DEF (0x00000000)

///< Bypass dither synchronizers and use s2p clock for dithering fine fractional
///< code
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_RX_CDR_DCODITHER_SYNC_BYP_EN_MUXD3_BF_OFF (28)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_RX_CDR_DCODITHER_SYNC_BYP_EN_MUXD3_BF_WID ( 1)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_RX_CDR_DCODITHER_SYNC_BYP_EN_MUXD3_BF_MSK (0x10000000)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_RX_CDR_DCODITHER_SYNC_BYP_EN_MUXD3_BF_DEF (0x00000000)

///< Moving average logic for current PD voters set on hold
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_RX_CDR_VOTE_AVG_HOLD_MUXD3_BF_OFF (29)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_RX_CDR_VOTE_AVG_HOLD_MUXD3_BF_WID ( 1)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_RX_CDR_VOTE_AVG_HOLD_MUXD3_BF_MSK (0x20000000)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_RX_CDR_VOTE_AVG_HOLD_MUXD3_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXDCO_CONTROL_DIG_MUXD4 register description at address offset 0x21c
  *
  * Register default value:        0x03BFA264
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxdco_control_dig_muxd4
  * RX DCO control
  */

typedef union {
  struct {
    uint32_t PFD_INV_CB_MUXD4 : 1;
    ///< PFD Chicken Bit
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t PFD_GAIN_MUXD4 : 8;
    ///< PFD Gain
    ///< AccessType="RW" BitOffset="1" ResetValue="0x32"
    uint32_t RX_CDR_GATEINRESET_DISABLE_MUXD4 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="9" ResetValue="0x1"
    uint32_t RX_CDR_RXDCOFINE_PROP_SEL_MODE_MUXD4 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RX_CDR_RXSIGDET_CDRLOCK2DATA_SEL_MUXD4 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t RX_CDR_CDRLOCK_SEL_MUXD4 : 2;
    ///< TBD
    ///< AccessType="RW" BitOffset="12" ResetValue="0x2"
    uint32_t RX_CDR_FINE_MAX_LIMIT_MUXD4 : 8;
    ///< TBD
    ///< AccessType="RW" BitOffset="14" ResetValue="0xFE"
    uint32_t RX_CDR_DFT_TIMER_LIMIT_MUXD4 : 4;
    ///< TBD
    ///< AccessType="RW" BitOffset="22" ResetValue="0xE"
    uint32_t RX_CDR_DFT_CNT_RESTART_MUXD4 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="26" ResetValue="0x0"
    uint32_t RX_CDR_PE_DISABLE_MUXD4 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="27" ResetValue="0x0"
    uint32_t RX_CDR_DCODITHER_SYNC_BYPASS_EN_MUXD4 : 1;
    ///< Bypass dither synchronizers and use s2p clock for dithering fine fractional
    ///< code
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t RX_CDR_VOTE_AVG_HOLD_MUXD4 : 1;
    ///< Moving average logic for current PD voters set on hold
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_dco_ctrl_dig_muxd4_reg_t;

#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_DEFAULT (0x03bfa264U)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_RD_MASK (0x3fffffffU)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_WR_MASK (0x3fffffffU)


///< PFD Chicken Bit
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_PFD_INV_CB_MUXD4_BF_OFF ( 0)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_PFD_INV_CB_MUXD4_BF_WID ( 1)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_PFD_INV_CB_MUXD4_BF_MSK (0x00000001)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_PFD_INV_CB_MUXD4_BF_DEF (0x00000000)

///< PFD Gain
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_PFD_GAIN_MUXD4_BF_OFF ( 1)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_PFD_GAIN_MUXD4_BF_WID ( 8)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_PFD_GAIN_MUXD4_BF_MSK (0x000001FE)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_PFD_GAIN_MUXD4_BF_DEF (0x00000064)

///< TBD
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_RX_CDR_GATEINRST_DIS_MUXD4_BF_OFF ( 9)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_RX_CDR_GATEINRST_DIS_MUXD4_BF_WID ( 1)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_RX_CDR_GATEINRST_DIS_MUXD4_BF_MSK (0x00000200)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_RX_CDR_GATEINRST_DIS_MUXD4_BF_DEF (0x00000200)

///< TBD
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_RX_CDR_RXDCOFINE_PROP_SEL_MODE_MUXD4_BF_OFF (10)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_RX_CDR_RXDCOFINE_PROP_SEL_MODE_MUXD4_BF_WID ( 1)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_RX_CDR_RXDCOFINE_PROP_SEL_MODE_MUXD4_BF_MSK (0x00000400)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_RX_CDR_RXDCOFINE_PROP_SEL_MODE_MUXD4_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_RX_CDR_RXSIGDET_CDRLOCK2DATA_SEL_MUXD4_BF_OFF (11)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_RX_CDR_RXSIGDET_CDRLOCK2DATA_SEL_MUXD4_BF_WID ( 1)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_RX_CDR_RXSIGDET_CDRLOCK2DATA_SEL_MUXD4_BF_MSK (0x00000800)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_RX_CDR_RXSIGDET_CDRLOCK2DATA_SEL_MUXD4_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_RX_CDR_CDRLOCK_SEL_MUXD4_BF_OFF (12)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_RX_CDR_CDRLOCK_SEL_MUXD4_BF_WID ( 2)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_RX_CDR_CDRLOCK_SEL_MUXD4_BF_MSK (0x00003000)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_RX_CDR_CDRLOCK_SEL_MUXD4_BF_DEF (0x00002000)

///< TBD
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_RX_CDR_FINE_MAX_LIMIT_MUXD4_BF_OFF (14)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_RX_CDR_FINE_MAX_LIMIT_MUXD4_BF_WID ( 8)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_RX_CDR_FINE_MAX_LIMIT_MUXD4_BF_MSK (0x003FC000)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_RX_CDR_FINE_MAX_LIMIT_MUXD4_BF_DEF (0x003F8000)

///< TBD
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_RX_CDR_DFT_TIMER_LIMIT_MUXD4_BF_OFF (22)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_RX_CDR_DFT_TIMER_LIMIT_MUXD4_BF_WID ( 4)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_RX_CDR_DFT_TIMER_LIMIT_MUXD4_BF_MSK (0x03C00000)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_RX_CDR_DFT_TIMER_LIMIT_MUXD4_BF_DEF (0x03800000)

///< TBD
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_RX_CDR_DFT_CNT_RESTART_MUXD4_BF_OFF (26)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_RX_CDR_DFT_CNT_RESTART_MUXD4_BF_WID ( 1)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_RX_CDR_DFT_CNT_RESTART_MUXD4_BF_MSK (0x04000000)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_RX_CDR_DFT_CNT_RESTART_MUXD4_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_RX_CDR_PE_DIS_MUXD4_BF_OFF (27)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_RX_CDR_PE_DIS_MUXD4_BF_WID ( 1)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_RX_CDR_PE_DIS_MUXD4_BF_MSK (0x08000000)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_RX_CDR_PE_DIS_MUXD4_BF_DEF (0x00000000)

///< Bypass dither synchronizers and use s2p clock for dithering fine fractional
///< code
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_RX_CDR_DCODITHER_SYNC_BYP_EN_MUXD4_BF_OFF (28)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_RX_CDR_DCODITHER_SYNC_BYP_EN_MUXD4_BF_WID ( 1)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_RX_CDR_DCODITHER_SYNC_BYP_EN_MUXD4_BF_MSK (0x10000000)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_RX_CDR_DCODITHER_SYNC_BYP_EN_MUXD4_BF_DEF (0x00000000)

///< Moving average logic for current PD voters set on hold
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_RX_CDR_VOTE_AVG_HOLD_MUXD4_BF_OFF (29)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_RX_CDR_VOTE_AVG_HOLD_MUXD4_BF_WID ( 1)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_RX_CDR_VOTE_AVG_HOLD_MUXD4_BF_MSK (0x20000000)
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_RX_CDR_VOTE_AVG_HOLD_MUXD4_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_PKSEN_CTRL_MUXD0 register description at address offset 0x220
  *
  * Register default value:        0x001040D8
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_pksen_ctrl_muxd0
  * RX DCO Peak Sensor control
  */

typedef union {
  struct {
    uint32_t RX_CDR_PKSEN_EN_MUXD0 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_START_PKSEN_READ_MUXD0 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RX_CDR_PKSEN_VREF_TARGET_MUXD0 : 6;
    ///< TBD
    ///< AccessType="RW" BitOffset="2" ResetValue="0x36"
    uint32_t RX_CDR_PKSEN_COMP_EN_MUXD0 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RX_CDR_PKSEN_VREF_SEL_MUXD0 : 6;
    ///< TBD
    ///< AccessType="RW" BitOffset="9" ResetValue="0x20"
    uint32_t RX_CDR_PKSEN_SETTLE_TIMER_LIMIT_MUXD0 : 3;
    ///< TBD
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RX_CDR_PKSEN_COMP_OUT_CHICKEN_BIT_MUXD0 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t RX_CDR_PKSEN_VREF_OVRD_MUXD0 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t RX_CDR_BYPASS_FINE_PROP_FLOOPS_MUXD0 : 1;
    ///< When set the output of the fine_prop of the digital filter is unflopped
    ///< AccessType="RW" BitOffset="20" ResetValue="0x1"
    uint32_t RX_CDR_PKSEN_SATURATION_EN_MUXD0 : 1;
    ///< Allow to cancel calibration if the peak sensor value saturates at
    ///< first search
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_pksen_ctrl_muxd0_reg_t;

#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD0_DEFAULT (0x001040d8U)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD0_RD_MASK (0x003fffffU)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD0_WR_MASK (0x003fffffU)


///< TBD
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD0_RX_CDR_PKSEN_EN_MUXD0_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD0_RX_CDR_PKSEN_EN_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD0_RX_CDR_PKSEN_EN_MUXD0_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD0_RX_CDR_PKSEN_EN_MUXD0_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD0_RX_CDR_START_PKSEN_READ_MUXD0_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD0_RX_CDR_START_PKSEN_READ_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD0_RX_CDR_START_PKSEN_READ_MUXD0_BF_MSK (0x00000002)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD0_RX_CDR_START_PKSEN_READ_MUXD0_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD0_RX_CDR_PKSEN_VREF_TARGET_MUXD0_BF_OFF ( 2)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD0_RX_CDR_PKSEN_VREF_TARGET_MUXD0_BF_WID ( 6)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD0_RX_CDR_PKSEN_VREF_TARGET_MUXD0_BF_MSK (0x000000FC)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD0_RX_CDR_PKSEN_VREF_TARGET_MUXD0_BF_DEF (0x000000D8)

///< TBD
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD0_RX_CDR_PKSEN_COMP_EN_MUXD0_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD0_RX_CDR_PKSEN_COMP_EN_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD0_RX_CDR_PKSEN_COMP_EN_MUXD0_BF_MSK (0x00000100)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD0_RX_CDR_PKSEN_COMP_EN_MUXD0_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD0_RX_CDR_PKSEN_VREF_SEL_MUXD0_BF_OFF ( 9)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD0_RX_CDR_PKSEN_VREF_SEL_MUXD0_BF_WID ( 6)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD0_RX_CDR_PKSEN_VREF_SEL_MUXD0_BF_MSK (0x00007E00)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD0_RX_CDR_PKSEN_VREF_SEL_MUXD0_BF_DEF (0x00004000)

///< TBD
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD0_RX_CDR_PKSEN_SETTLE_TIMER_LIMIT_MUXD0_BF_OFF (15)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD0_RX_CDR_PKSEN_SETTLE_TIMER_LIMIT_MUXD0_BF_WID ( 3)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD0_RX_CDR_PKSEN_SETTLE_TIMER_LIMIT_MUXD0_BF_MSK (0x00038000)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD0_RX_CDR_PKSEN_SETTLE_TIMER_LIMIT_MUXD0_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD0_RX_CDR_PKSEN_COMP_OUT_CHICKEN_BIT_MUXD0_BF_OFF (18)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD0_RX_CDR_PKSEN_COMP_OUT_CHICKEN_BIT_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD0_RX_CDR_PKSEN_COMP_OUT_CHICKEN_BIT_MUXD0_BF_MSK (0x00040000)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD0_RX_CDR_PKSEN_COMP_OUT_CHICKEN_BIT_MUXD0_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD0_RX_CDR_PKSEN_VREF_OVRD_MUXD0_BF_OFF (19)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD0_RX_CDR_PKSEN_VREF_OVRD_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD0_RX_CDR_PKSEN_VREF_OVRD_MUXD0_BF_MSK (0x00080000)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD0_RX_CDR_PKSEN_VREF_OVRD_MUXD0_BF_DEF (0x00000000)

///< When set the output of the fine_prop of the digital filter is unflopped
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD0_RX_CDR_BYP_FINE_PROP_FLOOPS_MUXD0_BF_OFF (20)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD0_RX_CDR_BYP_FINE_PROP_FLOOPS_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD0_RX_CDR_BYP_FINE_PROP_FLOOPS_MUXD0_BF_MSK (0x00100000)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD0_RX_CDR_BYP_FINE_PROP_FLOOPS_MUXD0_BF_DEF (0x00100000)

///< Allow to cancel calibration if the peak sensor value saturates at
///< first search
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD0_RX_CDR_PKSEN_SATURATION_EN_MUXD0_BF_OFF (21)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD0_RX_CDR_PKSEN_SATURATION_EN_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD0_RX_CDR_PKSEN_SATURATION_EN_MUXD0_BF_MSK (0x00200000)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD0_RX_CDR_PKSEN_SATURATION_EN_MUXD0_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_PKSEN_CTRL_MUXD1 register description at address offset 0x224
  *
  * Register default value:        0x001040D8
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_pksen_ctrl_muxd1
  * RX DCO Peak Sensor control
  */

typedef union {
  struct {
    uint32_t RX_CDR_PKSEN_EN_MUXD1 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_START_PKSEN_READ_MUXD1 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RX_CDR_PKSEN_VREF_TARGET_MUXD1 : 6;
    ///< TBD
    ///< AccessType="RW" BitOffset="2" ResetValue="0x36"
    uint32_t RX_CDR_PKSEN_COMP_EN_MUXD1 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RX_CDR_PKSEN_VREF_SEL_MUXD1 : 6;
    ///< TBD
    ///< AccessType="RW" BitOffset="9" ResetValue="0x20"
    uint32_t RX_CDR_PKSEN_SETTLE_TIMER_LIMIT_MUXD1 : 3;
    ///< TBD
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RX_CDR_PKSEN_COMP_OUT_CHICKEN_BIT_MUXD1 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t RX_CDR_PKSEN_VREF_OVRD_MUXD1 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t RX_CDR_BYPASS_FINE_PROP_FLOOPS_MUXD1 : 1;
    ///< When set the output of the fine_prop of the digital filter is unflopped
    ///< AccessType="RW" BitOffset="20" ResetValue="0x1"
    uint32_t RX_CDR_PKSEN_SATURATION_EN_MUXD1 : 1;
    ///< Allow to cancel calibration if the peak sensor value saturates at
    ///< first search
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_pksen_ctrl_muxd1_reg_t;

#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD1_DEFAULT (0x001040d8U)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD1_RD_MASK (0x003fffffU)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD1_WR_MASK (0x003fffffU)


///< TBD
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD1_RX_CDR_PKSEN_EN_MUXD1_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD1_RX_CDR_PKSEN_EN_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD1_RX_CDR_PKSEN_EN_MUXD1_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD1_RX_CDR_PKSEN_EN_MUXD1_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD1_RX_CDR_START_PKSEN_READ_MUXD1_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD1_RX_CDR_START_PKSEN_READ_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD1_RX_CDR_START_PKSEN_READ_MUXD1_BF_MSK (0x00000002)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD1_RX_CDR_START_PKSEN_READ_MUXD1_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD1_RX_CDR_PKSEN_VREF_TARGET_MUXD1_BF_OFF ( 2)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD1_RX_CDR_PKSEN_VREF_TARGET_MUXD1_BF_WID ( 6)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD1_RX_CDR_PKSEN_VREF_TARGET_MUXD1_BF_MSK (0x000000FC)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD1_RX_CDR_PKSEN_VREF_TARGET_MUXD1_BF_DEF (0x000000D8)

///< TBD
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD1_RX_CDR_PKSEN_COMP_EN_MUXD1_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD1_RX_CDR_PKSEN_COMP_EN_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD1_RX_CDR_PKSEN_COMP_EN_MUXD1_BF_MSK (0x00000100)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD1_RX_CDR_PKSEN_COMP_EN_MUXD1_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD1_RX_CDR_PKSEN_VREF_SEL_MUXD1_BF_OFF ( 9)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD1_RX_CDR_PKSEN_VREF_SEL_MUXD1_BF_WID ( 6)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD1_RX_CDR_PKSEN_VREF_SEL_MUXD1_BF_MSK (0x00007E00)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD1_RX_CDR_PKSEN_VREF_SEL_MUXD1_BF_DEF (0x00004000)

///< TBD
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD1_RX_CDR_PKSEN_SETTLE_TIMER_LIMIT_MUXD1_BF_OFF (15)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD1_RX_CDR_PKSEN_SETTLE_TIMER_LIMIT_MUXD1_BF_WID ( 3)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD1_RX_CDR_PKSEN_SETTLE_TIMER_LIMIT_MUXD1_BF_MSK (0x00038000)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD1_RX_CDR_PKSEN_SETTLE_TIMER_LIMIT_MUXD1_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD1_RX_CDR_PKSEN_COMP_OUT_CHICKEN_BIT_MUXD1_BF_OFF (18)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD1_RX_CDR_PKSEN_COMP_OUT_CHICKEN_BIT_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD1_RX_CDR_PKSEN_COMP_OUT_CHICKEN_BIT_MUXD1_BF_MSK (0x00040000)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD1_RX_CDR_PKSEN_COMP_OUT_CHICKEN_BIT_MUXD1_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD1_RX_CDR_PKSEN_VREF_OVRD_MUXD1_BF_OFF (19)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD1_RX_CDR_PKSEN_VREF_OVRD_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD1_RX_CDR_PKSEN_VREF_OVRD_MUXD1_BF_MSK (0x00080000)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD1_RX_CDR_PKSEN_VREF_OVRD_MUXD1_BF_DEF (0x00000000)

///< When set the output of the fine_prop of the digital filter is unflopped
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD1_RX_CDR_BYP_FINE_PROP_FLOOPS_MUXD1_BF_OFF (20)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD1_RX_CDR_BYP_FINE_PROP_FLOOPS_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD1_RX_CDR_BYP_FINE_PROP_FLOOPS_MUXD1_BF_MSK (0x00100000)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD1_RX_CDR_BYP_FINE_PROP_FLOOPS_MUXD1_BF_DEF (0x00100000)

///< Allow to cancel calibration if the peak sensor value saturates at
///< first search
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD1_RX_CDR_PKSEN_SATURATION_EN_MUXD1_BF_OFF (21)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD1_RX_CDR_PKSEN_SATURATION_EN_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD1_RX_CDR_PKSEN_SATURATION_EN_MUXD1_BF_MSK (0x00200000)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD1_RX_CDR_PKSEN_SATURATION_EN_MUXD1_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_PKSEN_CTRL_MUXD2 register description at address offset 0x228
  *
  * Register default value:        0x001040D8
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_pksen_ctrl_muxd2
  * RX DCO Peak Sensor control
  */

typedef union {
  struct {
    uint32_t RX_CDR_PKSEN_EN_MUXD2 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_START_PKSEN_READ_MUXD2 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RX_CDR_PKSEN_VREF_TARGET_MUXD2 : 6;
    ///< TBD
    ///< AccessType="RW" BitOffset="2" ResetValue="0x36"
    uint32_t RX_CDR_PKSEN_COMP_EN_MUXD2 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RX_CDR_PKSEN_VREF_SEL_MUXD2 : 6;
    ///< TBD
    ///< AccessType="RW" BitOffset="9" ResetValue="0x20"
    uint32_t RX_CDR_PKSEN_SETTLE_TIMER_LIMIT_MUXD2 : 3;
    ///< TBD
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RX_CDR_PKSEN_COMP_OUT_CHICKEN_BIT_MUXD2 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t RX_CDR_PKSEN_VREF_OVRD_MUXD2 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t RX_CDR_BYPASS_FINE_PROP_FLOOPS_MUXD2 : 1;
    ///< When set the output of the fine_prop of the digital filter is unflopped
    ///< AccessType="RW" BitOffset="20" ResetValue="0x1"
    uint32_t RX_CDR_PKSEN_SATURATION_EN_MUXD2 : 1;
    ///< Allow to cancel calibration if the peak sensor value saturates at
    ///< first search
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_pksen_ctrl_muxd2_reg_t;

#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD2_DEFAULT (0x001040d8U)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD2_RD_MASK (0x003fffffU)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD2_WR_MASK (0x003fffffU)


///< TBD
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD2_RX_CDR_PKSEN_EN_MUXD2_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD2_RX_CDR_PKSEN_EN_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD2_RX_CDR_PKSEN_EN_MUXD2_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD2_RX_CDR_PKSEN_EN_MUXD2_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD2_RX_CDR_START_PKSEN_READ_MUXD2_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD2_RX_CDR_START_PKSEN_READ_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD2_RX_CDR_START_PKSEN_READ_MUXD2_BF_MSK (0x00000002)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD2_RX_CDR_START_PKSEN_READ_MUXD2_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD2_RX_CDR_PKSEN_VREF_TARGET_MUXD2_BF_OFF ( 2)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD2_RX_CDR_PKSEN_VREF_TARGET_MUXD2_BF_WID ( 6)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD2_RX_CDR_PKSEN_VREF_TARGET_MUXD2_BF_MSK (0x000000FC)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD2_RX_CDR_PKSEN_VREF_TARGET_MUXD2_BF_DEF (0x000000D8)

///< TBD
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD2_RX_CDR_PKSEN_COMP_EN_MUXD2_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD2_RX_CDR_PKSEN_COMP_EN_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD2_RX_CDR_PKSEN_COMP_EN_MUXD2_BF_MSK (0x00000100)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD2_RX_CDR_PKSEN_COMP_EN_MUXD2_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD2_RX_CDR_PKSEN_VREF_SEL_MUXD2_BF_OFF ( 9)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD2_RX_CDR_PKSEN_VREF_SEL_MUXD2_BF_WID ( 6)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD2_RX_CDR_PKSEN_VREF_SEL_MUXD2_BF_MSK (0x00007E00)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD2_RX_CDR_PKSEN_VREF_SEL_MUXD2_BF_DEF (0x00004000)

///< TBD
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD2_RX_CDR_PKSEN_SETTLE_TIMER_LIMIT_MUXD2_BF_OFF (15)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD2_RX_CDR_PKSEN_SETTLE_TIMER_LIMIT_MUXD2_BF_WID ( 3)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD2_RX_CDR_PKSEN_SETTLE_TIMER_LIMIT_MUXD2_BF_MSK (0x00038000)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD2_RX_CDR_PKSEN_SETTLE_TIMER_LIMIT_MUXD2_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD2_RX_CDR_PKSEN_COMP_OUT_CHICKEN_BIT_MUXD2_BF_OFF (18)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD2_RX_CDR_PKSEN_COMP_OUT_CHICKEN_BIT_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD2_RX_CDR_PKSEN_COMP_OUT_CHICKEN_BIT_MUXD2_BF_MSK (0x00040000)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD2_RX_CDR_PKSEN_COMP_OUT_CHICKEN_BIT_MUXD2_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD2_RX_CDR_PKSEN_VREF_OVRD_MUXD2_BF_OFF (19)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD2_RX_CDR_PKSEN_VREF_OVRD_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD2_RX_CDR_PKSEN_VREF_OVRD_MUXD2_BF_MSK (0x00080000)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD2_RX_CDR_PKSEN_VREF_OVRD_MUXD2_BF_DEF (0x00000000)

///< When set the output of the fine_prop of the digital filter is unflopped
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD2_RX_CDR_BYP_FINE_PROP_FLOOPS_MUXD2_BF_OFF (20)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD2_RX_CDR_BYP_FINE_PROP_FLOOPS_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD2_RX_CDR_BYP_FINE_PROP_FLOOPS_MUXD2_BF_MSK (0x00100000)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD2_RX_CDR_BYP_FINE_PROP_FLOOPS_MUXD2_BF_DEF (0x00100000)

///< Allow to cancel calibration if the peak sensor value saturates at
///< first search
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD2_RX_CDR_PKSEN_SATURATION_EN_MUXD2_BF_OFF (21)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD2_RX_CDR_PKSEN_SATURATION_EN_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD2_RX_CDR_PKSEN_SATURATION_EN_MUXD2_BF_MSK (0x00200000)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD2_RX_CDR_PKSEN_SATURATION_EN_MUXD2_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_PKSEN_CTRL_MUXD3 register description at address offset 0x22c
  *
  * Register default value:        0x001040D8
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_pksen_ctrl_muxd3
  * RX DCO Peak Sensor control
  */

typedef union {
  struct {
    uint32_t RX_CDR_PKSEN_EN_MUXD3 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_START_PKSEN_READ_MUXD3 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RX_CDR_PKSEN_VREF_TARGET_MUXD3 : 6;
    ///< TBD
    ///< AccessType="RW" BitOffset="2" ResetValue="0x36"
    uint32_t RX_CDR_PKSEN_COMP_EN_MUXD3 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RX_CDR_PKSEN_VREF_SEL_MUXD3 : 6;
    ///< TBD
    ///< AccessType="RW" BitOffset="9" ResetValue="0x20"
    uint32_t RX_CDR_PKSEN_SETTLE_TIMER_LIMIT_MUXD3 : 3;
    ///< TBD
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RX_CDR_PKSEN_COMP_OUT_CHICKEN_BIT_MUXD3 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t RX_CDR_PKSEN_VREF_OVRD_MUXD3 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t RX_CDR_BYPASS_FINE_PROP_FLOOPS_MUXD3 : 1;
    ///< When set the output of the fine_prop of the digital filter is unflopped
    ///< AccessType="RW" BitOffset="20" ResetValue="0x1"
    uint32_t RX_CDR_PKSEN_SATURATION_EN_MUXD3 : 1;
    ///< Allow to cancel calibration if the peak sensor value saturates at
    ///< first search
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_pksen_ctrl_muxd3_reg_t;

#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD3_DEFAULT (0x001040d8U)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD3_RD_MASK (0x003fffffU)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD3_WR_MASK (0x003fffffU)


///< TBD
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD3_RX_CDR_PKSEN_EN_MUXD3_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD3_RX_CDR_PKSEN_EN_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD3_RX_CDR_PKSEN_EN_MUXD3_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD3_RX_CDR_PKSEN_EN_MUXD3_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD3_RX_CDR_START_PKSEN_READ_MUXD3_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD3_RX_CDR_START_PKSEN_READ_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD3_RX_CDR_START_PKSEN_READ_MUXD3_BF_MSK (0x00000002)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD3_RX_CDR_START_PKSEN_READ_MUXD3_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD3_RX_CDR_PKSEN_VREF_TARGET_MUXD3_BF_OFF ( 2)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD3_RX_CDR_PKSEN_VREF_TARGET_MUXD3_BF_WID ( 6)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD3_RX_CDR_PKSEN_VREF_TARGET_MUXD3_BF_MSK (0x000000FC)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD3_RX_CDR_PKSEN_VREF_TARGET_MUXD3_BF_DEF (0x000000D8)

///< TBD
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD3_RX_CDR_PKSEN_COMP_EN_MUXD3_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD3_RX_CDR_PKSEN_COMP_EN_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD3_RX_CDR_PKSEN_COMP_EN_MUXD3_BF_MSK (0x00000100)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD3_RX_CDR_PKSEN_COMP_EN_MUXD3_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD3_RX_CDR_PKSEN_VREF_SEL_MUXD3_BF_OFF ( 9)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD3_RX_CDR_PKSEN_VREF_SEL_MUXD3_BF_WID ( 6)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD3_RX_CDR_PKSEN_VREF_SEL_MUXD3_BF_MSK (0x00007E00)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD3_RX_CDR_PKSEN_VREF_SEL_MUXD3_BF_DEF (0x00004000)

///< TBD
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD3_RX_CDR_PKSEN_SETTLE_TIMER_LIMIT_MUXD3_BF_OFF (15)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD3_RX_CDR_PKSEN_SETTLE_TIMER_LIMIT_MUXD3_BF_WID ( 3)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD3_RX_CDR_PKSEN_SETTLE_TIMER_LIMIT_MUXD3_BF_MSK (0x00038000)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD3_RX_CDR_PKSEN_SETTLE_TIMER_LIMIT_MUXD3_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD3_RX_CDR_PKSEN_COMP_OUT_CHICKEN_BIT_MUXD3_BF_OFF (18)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD3_RX_CDR_PKSEN_COMP_OUT_CHICKEN_BIT_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD3_RX_CDR_PKSEN_COMP_OUT_CHICKEN_BIT_MUXD3_BF_MSK (0x00040000)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD3_RX_CDR_PKSEN_COMP_OUT_CHICKEN_BIT_MUXD3_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD3_RX_CDR_PKSEN_VREF_OVRD_MUXD3_BF_OFF (19)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD3_RX_CDR_PKSEN_VREF_OVRD_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD3_RX_CDR_PKSEN_VREF_OVRD_MUXD3_BF_MSK (0x00080000)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD3_RX_CDR_PKSEN_VREF_OVRD_MUXD3_BF_DEF (0x00000000)

///< When set the output of the fine_prop of the digital filter is unflopped
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD3_RX_CDR_BYP_FINE_PROP_FLOOPS_MUXD3_BF_OFF (20)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD3_RX_CDR_BYP_FINE_PROP_FLOOPS_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD3_RX_CDR_BYP_FINE_PROP_FLOOPS_MUXD3_BF_MSK (0x00100000)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD3_RX_CDR_BYP_FINE_PROP_FLOOPS_MUXD3_BF_DEF (0x00100000)

///< Allow to cancel calibration if the peak sensor value saturates at
///< first search
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD3_RX_CDR_PKSEN_SATURATION_EN_MUXD3_BF_OFF (21)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD3_RX_CDR_PKSEN_SATURATION_EN_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD3_RX_CDR_PKSEN_SATURATION_EN_MUXD3_BF_MSK (0x00200000)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD3_RX_CDR_PKSEN_SATURATION_EN_MUXD3_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_PKSEN_CTRL_MUXD4 register description at address offset 0x230
  *
  * Register default value:        0x001040D8
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_pksen_ctrl_muxd4
  * RX DCO Peak Sensor control
  */

typedef union {
  struct {
    uint32_t RX_CDR_PKSEN_EN_MUXD4 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_START_PKSEN_READ_MUXD4 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RX_CDR_PKSEN_VREF_TARGET_MUXD4 : 6;
    ///< TBD
    ///< AccessType="RW" BitOffset="2" ResetValue="0x36"
    uint32_t RX_CDR_PKSEN_COMP_EN_MUXD4 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RX_CDR_PKSEN_VREF_SEL_MUXD4 : 6;
    ///< TBD
    ///< AccessType="RW" BitOffset="9" ResetValue="0x20"
    uint32_t RX_CDR_PKSEN_SETTLE_TIMER_LIMIT_MUXD4 : 3;
    ///< TBD
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RX_CDR_PKSEN_COMP_OUT_CHICKEN_BIT_MUXD4 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t RX_CDR_PKSEN_VREF_OVRD_MUXD4 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t RX_CDR_BYPASS_FINE_PROP_FLOOPS_MUXD4 : 1;
    ///< When set the output of the fine_prop of the digital filter is unflopped
    ///< AccessType="RW" BitOffset="20" ResetValue="0x1"
    uint32_t RX_CDR_PKSEN_SATURATION_EN_MUXD4 : 1;
    ///< Allow to cancel calibration if the peak sensor value saturates at
    ///< first search
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_pksen_ctrl_muxd4_reg_t;

#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD4_DEFAULT (0x001040d8U)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD4_RD_MASK (0x003fffffU)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD4_WR_MASK (0x003fffffU)


///< TBD
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD4_RX_CDR_PKSEN_EN_MUXD4_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD4_RX_CDR_PKSEN_EN_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD4_RX_CDR_PKSEN_EN_MUXD4_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD4_RX_CDR_PKSEN_EN_MUXD4_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD4_RX_CDR_START_PKSEN_READ_MUXD4_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD4_RX_CDR_START_PKSEN_READ_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD4_RX_CDR_START_PKSEN_READ_MUXD4_BF_MSK (0x00000002)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD4_RX_CDR_START_PKSEN_READ_MUXD4_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD4_RX_CDR_PKSEN_VREF_TARGET_MUXD4_BF_OFF ( 2)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD4_RX_CDR_PKSEN_VREF_TARGET_MUXD4_BF_WID ( 6)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD4_RX_CDR_PKSEN_VREF_TARGET_MUXD4_BF_MSK (0x000000FC)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD4_RX_CDR_PKSEN_VREF_TARGET_MUXD4_BF_DEF (0x000000D8)

///< TBD
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD4_RX_CDR_PKSEN_COMP_EN_MUXD4_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD4_RX_CDR_PKSEN_COMP_EN_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD4_RX_CDR_PKSEN_COMP_EN_MUXD4_BF_MSK (0x00000100)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD4_RX_CDR_PKSEN_COMP_EN_MUXD4_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD4_RX_CDR_PKSEN_VREF_SEL_MUXD4_BF_OFF ( 9)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD4_RX_CDR_PKSEN_VREF_SEL_MUXD4_BF_WID ( 6)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD4_RX_CDR_PKSEN_VREF_SEL_MUXD4_BF_MSK (0x00007E00)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD4_RX_CDR_PKSEN_VREF_SEL_MUXD4_BF_DEF (0x00004000)

///< TBD
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD4_RX_CDR_PKSEN_SETTLE_TIMER_LIMIT_MUXD4_BF_OFF (15)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD4_RX_CDR_PKSEN_SETTLE_TIMER_LIMIT_MUXD4_BF_WID ( 3)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD4_RX_CDR_PKSEN_SETTLE_TIMER_LIMIT_MUXD4_BF_MSK (0x00038000)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD4_RX_CDR_PKSEN_SETTLE_TIMER_LIMIT_MUXD4_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD4_RX_CDR_PKSEN_COMP_OUT_CHICKEN_BIT_MUXD4_BF_OFF (18)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD4_RX_CDR_PKSEN_COMP_OUT_CHICKEN_BIT_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD4_RX_CDR_PKSEN_COMP_OUT_CHICKEN_BIT_MUXD4_BF_MSK (0x00040000)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD4_RX_CDR_PKSEN_COMP_OUT_CHICKEN_BIT_MUXD4_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD4_RX_CDR_PKSEN_VREF_OVRD_MUXD4_BF_OFF (19)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD4_RX_CDR_PKSEN_VREF_OVRD_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD4_RX_CDR_PKSEN_VREF_OVRD_MUXD4_BF_MSK (0x00080000)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD4_RX_CDR_PKSEN_VREF_OVRD_MUXD4_BF_DEF (0x00000000)

///< When set the output of the fine_prop of the digital filter is unflopped
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD4_RX_CDR_BYP_FINE_PROP_FLOOPS_MUXD4_BF_OFF (20)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD4_RX_CDR_BYP_FINE_PROP_FLOOPS_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD4_RX_CDR_BYP_FINE_PROP_FLOOPS_MUXD4_BF_MSK (0x00100000)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD4_RX_CDR_BYP_FINE_PROP_FLOOPS_MUXD4_BF_DEF (0x00100000)

///< Allow to cancel calibration if the peak sensor value saturates at
///< first search
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD4_RX_CDR_PKSEN_SATURATION_EN_MUXD4_BF_OFF (21)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD4_RX_CDR_PKSEN_SATURATION_EN_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD4_RX_CDR_PKSEN_SATURATION_EN_MUXD4_BF_MSK (0x00200000)
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD4_RX_CDR_PKSEN_SATURATION_EN_MUXD4_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_PKSEN_STATUS register description at address offset 0x234
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_pksen_status
  * Rx CDR Peak Sensor Status
  */

typedef union {
  struct {
    uint32_t RX_CDR_MAX_PKSNS_VREF_SEL : 6;
    ///< ---
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t RX_CDR_MIN_PKSNS_VREF_SEL : 6;
    ///< ---
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t RX_CDR_VOTE_AVG_SIGN : 1;
    ///< moving average voters signed
    ///< AccessType="RO/V" BitOffset="14" ResetValue="0x0"
    uint32_t RX_CDR_VOTE_AVG_ACCM : 13;
    ///< moving average voters magnitude
    ///< AccessType="RO/V" BitOffset="15" ResetValue="0x0"
    uint32_t RX_CDR_SDCLKMUX_STATUS : 2;
    ///< status of the SD clock MUX
    ///< AccessType="RO/V" BitOffset="28" ResetValue="0x0"
    uint32_t RX_CDR_SD_FINE_CLKMUX_STATUS : 2;
    ///< status of the SD Fine clock MUX
    ///< AccessType="RO/V" BitOffset="30" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_pksen_stat_reg_t;

#define PMA_RX_MGS_CDR_PKSEN_STAT_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CDR_PKSEN_STAT_RD_MASK (0xffffff3fU)
#define PMA_RX_MGS_CDR_PKSEN_STAT_WR_MASK (0x00000000U)


#define PMA_RX_MGS_CDR_PKSEN_STAT_RX_CDR_MAX_PKSNS_VREF_SEL_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_PKSEN_STAT_RX_CDR_MAX_PKSNS_VREF_SEL_BF_WID ( 6)
#define PMA_RX_MGS_CDR_PKSEN_STAT_RX_CDR_MAX_PKSNS_VREF_SEL_BF_MSK (0x0000003F)
#define PMA_RX_MGS_CDR_PKSEN_STAT_RX_CDR_MAX_PKSNS_VREF_SEL_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_PKSEN_STAT_RX_CDR_MIN_PKSNS_VREF_SEL_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_PKSEN_STAT_RX_CDR_MIN_PKSNS_VREF_SEL_BF_WID ( 6)
#define PMA_RX_MGS_CDR_PKSEN_STAT_RX_CDR_MIN_PKSNS_VREF_SEL_BF_MSK (0x00003F00)
#define PMA_RX_MGS_CDR_PKSEN_STAT_RX_CDR_MIN_PKSNS_VREF_SEL_BF_DEF (0x00000000)

///< moving average voters signed
#define PMA_RX_MGS_CDR_PKSEN_STAT_RX_CDR_VOTE_AVG_SIGN_BF_OFF (14)
#define PMA_RX_MGS_CDR_PKSEN_STAT_RX_CDR_VOTE_AVG_SIGN_BF_WID ( 1)
#define PMA_RX_MGS_CDR_PKSEN_STAT_RX_CDR_VOTE_AVG_SIGN_BF_MSK (0x00004000)
#define PMA_RX_MGS_CDR_PKSEN_STAT_RX_CDR_VOTE_AVG_SIGN_BF_DEF (0x00000000)

///< moving average voters magnitude
#define PMA_RX_MGS_CDR_PKSEN_STAT_RX_CDR_VOTE_AVG_ACCM_BF_OFF (15)
#define PMA_RX_MGS_CDR_PKSEN_STAT_RX_CDR_VOTE_AVG_ACCM_BF_WID (13)
#define PMA_RX_MGS_CDR_PKSEN_STAT_RX_CDR_VOTE_AVG_ACCM_BF_MSK (0x0FFF8000)
#define PMA_RX_MGS_CDR_PKSEN_STAT_RX_CDR_VOTE_AVG_ACCM_BF_DEF (0x00000000)

///< status of the SD clock MUX
#define PMA_RX_MGS_CDR_PKSEN_STAT_RX_CDR_SDCLKMUX_STAT_BF_OFF (28)
#define PMA_RX_MGS_CDR_PKSEN_STAT_RX_CDR_SDCLKMUX_STAT_BF_WID ( 2)
#define PMA_RX_MGS_CDR_PKSEN_STAT_RX_CDR_SDCLKMUX_STAT_BF_MSK (0x30000000)
#define PMA_RX_MGS_CDR_PKSEN_STAT_RX_CDR_SDCLKMUX_STAT_BF_DEF (0x00000000)

///< status of the SD Fine clock MUX
#define PMA_RX_MGS_CDR_PKSEN_STAT_RX_CDR_SD_FINE_CLKMUX_STAT_BF_OFF (30)
#define PMA_RX_MGS_CDR_PKSEN_STAT_RX_CDR_SD_FINE_CLKMUX_STAT_BF_WID ( 2)
#define PMA_RX_MGS_CDR_PKSEN_STAT_RX_CDR_SD_FINE_CLKMUX_STAT_BF_MSK (0xC0000000)
#define PMA_RX_MGS_CDR_PKSEN_STAT_RX_CDR_SD_FINE_CLKMUX_STAT_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXDCO_DCO_SWING_CTRL_MUXD0 register description at address offset 0x238
  *
  * Register default value:        0x03FF0004
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxdco_dco_swing_ctrl_muxd0
  * RX DCO Swing control
  */

typedef union {
  struct {
    uint32_t RX_CDR_SKIP_DCO_SWING_CALIB_MUXD0 : 1;
    ///< Do not perform swing calibration
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_STAY_DCO_SWING_CALIB_MUXD0 : 1;
    ///< Do not change FSM state after the swing calibration
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RX_CDR_DCO_SWING_VPEAK_MODE_MUXD0 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="2" ResetValue="0x1"
    uint32_t RX_CDR_SKIP_DCO_SWING_SLEEP_SEL_MUXD0 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RX_CDR_DCO_SWING_BY_FW_MUXD0 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
    uint32_t RX_CDR_DCO_SWING_SLEEP_TIMER_LIMIT_MUXD0 : 16;
    ///< TBD
    ///< AccessType="RW" BitOffset="16" ResetValue="0x3FF"
  } ;
  uint32_t value;
} pma_rx_msg_dco_swing_ctrl_muxd0_reg_t;

#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD0_DEFAULT (0x03ff0004U)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD0_RD_MASK (0xffff001fU)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD0_WR_MASK (0xffff001fU)


///< Do not perform swing calibration
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD0_RX_CDR_SKIP_DCO_SWING_CALIB_MUXD0_BF_OFF ( 0)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD0_RX_CDR_SKIP_DCO_SWING_CALIB_MUXD0_BF_WID ( 1)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD0_RX_CDR_SKIP_DCO_SWING_CALIB_MUXD0_BF_MSK (0x00000001)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD0_RX_CDR_SKIP_DCO_SWING_CALIB_MUXD0_BF_DEF (0x00000000)

///< Do not change FSM state after the swing calibration
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD0_RX_CDR_STAY_DCO_SWING_CALIB_MUXD0_BF_OFF ( 1)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD0_RX_CDR_STAY_DCO_SWING_CALIB_MUXD0_BF_WID ( 1)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD0_RX_CDR_STAY_DCO_SWING_CALIB_MUXD0_BF_MSK (0x00000002)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD0_RX_CDR_STAY_DCO_SWING_CALIB_MUXD0_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD0_RX_CDR_DCO_SWING_VPEAK_MODE_MUXD0_BF_OFF ( 2)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD0_RX_CDR_DCO_SWING_VPEAK_MODE_MUXD0_BF_WID ( 1)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD0_RX_CDR_DCO_SWING_VPEAK_MODE_MUXD0_BF_MSK (0x00000004)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD0_RX_CDR_DCO_SWING_VPEAK_MODE_MUXD0_BF_DEF (0x00000004)

///< TBD
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD0_RX_CDR_SKIP_DCO_SWING_SLEEP_SEL_MUXD0_BF_OFF ( 3)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD0_RX_CDR_SKIP_DCO_SWING_SLEEP_SEL_MUXD0_BF_WID ( 1)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD0_RX_CDR_SKIP_DCO_SWING_SLEEP_SEL_MUXD0_BF_MSK (0x00000008)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD0_RX_CDR_SKIP_DCO_SWING_SLEEP_SEL_MUXD0_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD0_RX_CDR_DCO_SWING_BY_FW_MUXD0_BF_OFF ( 4)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD0_RX_CDR_DCO_SWING_BY_FW_MUXD0_BF_WID ( 1)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD0_RX_CDR_DCO_SWING_BY_FW_MUXD0_BF_MSK (0x00000010)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD0_RX_CDR_DCO_SWING_BY_FW_MUXD0_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD0_RX_CDR_DCO_SWING_SLEEP_TIMER_LIMIT_MUXD0_BF_OFF (16)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD0_RX_CDR_DCO_SWING_SLEEP_TIMER_LIMIT_MUXD0_BF_WID (16)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD0_RX_CDR_DCO_SWING_SLEEP_TIMER_LIMIT_MUXD0_BF_MSK (0xFFFF0000)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD0_RX_CDR_DCO_SWING_SLEEP_TIMER_LIMIT_MUXD0_BF_DEF (0x03FF0000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXDCO_DCO_SWING_CTRL_MUXD1 register description at address offset 0x23c
  *
  * Register default value:        0x03FF0004
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxdco_dco_swing_ctrl_muxd1
  * RX DCO Swing control
  */

typedef union {
  struct {
    uint32_t RX_CDR_SKIP_DCO_SWING_CALIB_MUXD1 : 1;
    ///< Do not perform swing calibration
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_STAY_DCO_SWING_CALIB_MUXD1 : 1;
    ///< Do not change FSM state after the swing calibration
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RX_CDR_DCO_SWING_VPEAK_MODE_MUXD1 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="2" ResetValue="0x1"
    uint32_t RX_CDR_SKIP_DCO_SWING_SLEEP_SEL_MUXD1 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RX_CDR_DCO_SWING_BY_FW_MUXD1 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
    uint32_t RX_CDR_DCO_SWING_SLEEP_TIMER_LIMIT_MUXD1 : 16;
    ///< TBD
    ///< AccessType="RW" BitOffset="16" ResetValue="0x3FF"
  } ;
  uint32_t value;
} pma_rx_msg_dco_swing_ctrl_muxd1_reg_t;

#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD1_DEFAULT (0x03ff0004U)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD1_RD_MASK (0xffff001fU)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD1_WR_MASK (0xffff001fU)


///< Do not perform swing calibration
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD1_RX_CDR_SKIP_DCO_SWING_CALIB_MUXD1_BF_OFF ( 0)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD1_RX_CDR_SKIP_DCO_SWING_CALIB_MUXD1_BF_WID ( 1)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD1_RX_CDR_SKIP_DCO_SWING_CALIB_MUXD1_BF_MSK (0x00000001)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD1_RX_CDR_SKIP_DCO_SWING_CALIB_MUXD1_BF_DEF (0x00000000)

///< Do not change FSM state after the swing calibration
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD1_RX_CDR_STAY_DCO_SWING_CALIB_MUXD1_BF_OFF ( 1)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD1_RX_CDR_STAY_DCO_SWING_CALIB_MUXD1_BF_WID ( 1)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD1_RX_CDR_STAY_DCO_SWING_CALIB_MUXD1_BF_MSK (0x00000002)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD1_RX_CDR_STAY_DCO_SWING_CALIB_MUXD1_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD1_RX_CDR_DCO_SWING_VPEAK_MODE_MUXD1_BF_OFF ( 2)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD1_RX_CDR_DCO_SWING_VPEAK_MODE_MUXD1_BF_WID ( 1)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD1_RX_CDR_DCO_SWING_VPEAK_MODE_MUXD1_BF_MSK (0x00000004)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD1_RX_CDR_DCO_SWING_VPEAK_MODE_MUXD1_BF_DEF (0x00000004)

///< TBD
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD1_RX_CDR_SKIP_DCO_SWING_SLEEP_SEL_MUXD1_BF_OFF ( 3)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD1_RX_CDR_SKIP_DCO_SWING_SLEEP_SEL_MUXD1_BF_WID ( 1)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD1_RX_CDR_SKIP_DCO_SWING_SLEEP_SEL_MUXD1_BF_MSK (0x00000008)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD1_RX_CDR_SKIP_DCO_SWING_SLEEP_SEL_MUXD1_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD1_RX_CDR_DCO_SWING_BY_FW_MUXD1_BF_OFF ( 4)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD1_RX_CDR_DCO_SWING_BY_FW_MUXD1_BF_WID ( 1)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD1_RX_CDR_DCO_SWING_BY_FW_MUXD1_BF_MSK (0x00000010)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD1_RX_CDR_DCO_SWING_BY_FW_MUXD1_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD1_RX_CDR_DCO_SWING_SLEEP_TIMER_LIMIT_MUXD1_BF_OFF (16)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD1_RX_CDR_DCO_SWING_SLEEP_TIMER_LIMIT_MUXD1_BF_WID (16)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD1_RX_CDR_DCO_SWING_SLEEP_TIMER_LIMIT_MUXD1_BF_MSK (0xFFFF0000)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD1_RX_CDR_DCO_SWING_SLEEP_TIMER_LIMIT_MUXD1_BF_DEF (0x03FF0000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXDCO_DCO_SWING_CTRL_MUXD2 register description at address offset 0x240
  *
  * Register default value:        0x03FF0004
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxdco_dco_swing_ctrl_muxd2
  * RX DCO Swing control
  */

typedef union {
  struct {
    uint32_t RX_CDR_SKIP_DCO_SWING_CALIB_MUXD2 : 1;
    ///< Do not perform swing calibration
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_STAY_DCO_SWING_CALIB_MUXD2 : 1;
    ///< Do not change FSM state after the swing calibration
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RX_CDR_DCO_SWING_VPEAK_MODE_MUXD2 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="2" ResetValue="0x1"
    uint32_t RX_CDR_SKIP_DCO_SWING_SLEEP_SEL_MUXD2 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RX_CDR_DCO_SWING_BY_FW_MUXD2 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
    uint32_t RX_CDR_DCO_SWING_SLEEP_TIMER_LIMIT_MUXD2 : 16;
    ///< TBD
    ///< AccessType="RW" BitOffset="16" ResetValue="0x3FF"
  } ;
  uint32_t value;
} pma_rx_msg_dco_swing_ctrl_muxd2_reg_t;

#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD2_DEFAULT (0x03ff0004U)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD2_RD_MASK (0xffff001fU)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD2_WR_MASK (0xffff001fU)


///< Do not perform swing calibration
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD2_RX_CDR_SKIP_DCO_SWING_CALIB_MUXD2_BF_OFF ( 0)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD2_RX_CDR_SKIP_DCO_SWING_CALIB_MUXD2_BF_WID ( 1)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD2_RX_CDR_SKIP_DCO_SWING_CALIB_MUXD2_BF_MSK (0x00000001)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD2_RX_CDR_SKIP_DCO_SWING_CALIB_MUXD2_BF_DEF (0x00000000)

///< Do not change FSM state after the swing calibration
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD2_RX_CDR_STAY_DCO_SWING_CALIB_MUXD2_BF_OFF ( 1)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD2_RX_CDR_STAY_DCO_SWING_CALIB_MUXD2_BF_WID ( 1)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD2_RX_CDR_STAY_DCO_SWING_CALIB_MUXD2_BF_MSK (0x00000002)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD2_RX_CDR_STAY_DCO_SWING_CALIB_MUXD2_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD2_RX_CDR_DCO_SWING_VPEAK_MODE_MUXD2_BF_OFF ( 2)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD2_RX_CDR_DCO_SWING_VPEAK_MODE_MUXD2_BF_WID ( 1)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD2_RX_CDR_DCO_SWING_VPEAK_MODE_MUXD2_BF_MSK (0x00000004)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD2_RX_CDR_DCO_SWING_VPEAK_MODE_MUXD2_BF_DEF (0x00000004)

///< TBD
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD2_RX_CDR_SKIP_DCO_SWING_SLEEP_SEL_MUXD2_BF_OFF ( 3)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD2_RX_CDR_SKIP_DCO_SWING_SLEEP_SEL_MUXD2_BF_WID ( 1)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD2_RX_CDR_SKIP_DCO_SWING_SLEEP_SEL_MUXD2_BF_MSK (0x00000008)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD2_RX_CDR_SKIP_DCO_SWING_SLEEP_SEL_MUXD2_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD2_RX_CDR_DCO_SWING_BY_FW_MUXD2_BF_OFF ( 4)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD2_RX_CDR_DCO_SWING_BY_FW_MUXD2_BF_WID ( 1)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD2_RX_CDR_DCO_SWING_BY_FW_MUXD2_BF_MSK (0x00000010)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD2_RX_CDR_DCO_SWING_BY_FW_MUXD2_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD2_RX_CDR_DCO_SWING_SLEEP_TIMER_LIMIT_MUXD2_BF_OFF (16)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD2_RX_CDR_DCO_SWING_SLEEP_TIMER_LIMIT_MUXD2_BF_WID (16)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD2_RX_CDR_DCO_SWING_SLEEP_TIMER_LIMIT_MUXD2_BF_MSK (0xFFFF0000)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD2_RX_CDR_DCO_SWING_SLEEP_TIMER_LIMIT_MUXD2_BF_DEF (0x03FF0000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXDCO_DCO_SWING_CTRL_MUXD3 register description at address offset 0x244
  *
  * Register default value:        0x03FF0004
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxdco_dco_swing_ctrl_muxd3
  * RX DCO Swing control
  */

typedef union {
  struct {
    uint32_t RX_CDR_SKIP_DCO_SWING_CALIB_MUXD3 : 1;
    ///< Do not perform swing calibration
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_STAY_DCO_SWING_CALIB_MUXD3 : 1;
    ///< Do not change FSM state after the swing calibration
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RX_CDR_DCO_SWING_VPEAK_MODE_MUXD3 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="2" ResetValue="0x1"
    uint32_t RX_CDR_SKIP_DCO_SWING_SLEEP_SEL_MUXD3 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RX_CDR_DCO_SWING_BY_FW_MUXD3 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
    uint32_t RX_CDR_DCO_SWING_SLEEP_TIMER_LIMIT_MUXD3 : 16;
    ///< TBD
    ///< AccessType="RW" BitOffset="16" ResetValue="0x3FF"
  } ;
  uint32_t value;
} pma_rx_msg_dco_swing_ctrl_muxd3_reg_t;

#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD3_DEFAULT (0x03ff0004U)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD3_RD_MASK (0xffff001fU)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD3_WR_MASK (0xffff001fU)


///< Do not perform swing calibration
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD3_RX_CDR_SKIP_DCO_SWING_CALIB_MUXD3_BF_OFF ( 0)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD3_RX_CDR_SKIP_DCO_SWING_CALIB_MUXD3_BF_WID ( 1)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD3_RX_CDR_SKIP_DCO_SWING_CALIB_MUXD3_BF_MSK (0x00000001)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD3_RX_CDR_SKIP_DCO_SWING_CALIB_MUXD3_BF_DEF (0x00000000)

///< Do not change FSM state after the swing calibration
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD3_RX_CDR_STAY_DCO_SWING_CALIB_MUXD3_BF_OFF ( 1)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD3_RX_CDR_STAY_DCO_SWING_CALIB_MUXD3_BF_WID ( 1)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD3_RX_CDR_STAY_DCO_SWING_CALIB_MUXD3_BF_MSK (0x00000002)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD3_RX_CDR_STAY_DCO_SWING_CALIB_MUXD3_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD3_RX_CDR_DCO_SWING_VPEAK_MODE_MUXD3_BF_OFF ( 2)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD3_RX_CDR_DCO_SWING_VPEAK_MODE_MUXD3_BF_WID ( 1)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD3_RX_CDR_DCO_SWING_VPEAK_MODE_MUXD3_BF_MSK (0x00000004)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD3_RX_CDR_DCO_SWING_VPEAK_MODE_MUXD3_BF_DEF (0x00000004)

///< TBD
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD3_RX_CDR_SKIP_DCO_SWING_SLEEP_SEL_MUXD3_BF_OFF ( 3)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD3_RX_CDR_SKIP_DCO_SWING_SLEEP_SEL_MUXD3_BF_WID ( 1)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD3_RX_CDR_SKIP_DCO_SWING_SLEEP_SEL_MUXD3_BF_MSK (0x00000008)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD3_RX_CDR_SKIP_DCO_SWING_SLEEP_SEL_MUXD3_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD3_RX_CDR_DCO_SWING_BY_FW_MUXD3_BF_OFF ( 4)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD3_RX_CDR_DCO_SWING_BY_FW_MUXD3_BF_WID ( 1)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD3_RX_CDR_DCO_SWING_BY_FW_MUXD3_BF_MSK (0x00000010)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD3_RX_CDR_DCO_SWING_BY_FW_MUXD3_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD3_RX_CDR_DCO_SWING_SLEEP_TIMER_LIMIT_MUXD3_BF_OFF (16)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD3_RX_CDR_DCO_SWING_SLEEP_TIMER_LIMIT_MUXD3_BF_WID (16)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD3_RX_CDR_DCO_SWING_SLEEP_TIMER_LIMIT_MUXD3_BF_MSK (0xFFFF0000)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD3_RX_CDR_DCO_SWING_SLEEP_TIMER_LIMIT_MUXD3_BF_DEF (0x03FF0000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXDCO_DCO_SWING_CTRL_MUXD4 register description at address offset 0x248
  *
  * Register default value:        0x03FF0004
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxdco_dco_swing_ctrl_muxd4
  * RX DCO Swing control
  */

typedef union {
  struct {
    uint32_t RX_CDR_SKIP_DCO_SWING_CALIB_MUXD4 : 1;
    ///< Do not perform swing calibration
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_STAY_DCO_SWING_CALIB_MUXD4 : 1;
    ///< Do not change FSM state after the swing calibration
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RX_CDR_DCO_SWING_VPEAK_MODE_MUXD4 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="2" ResetValue="0x1"
    uint32_t RX_CDR_SKIP_DCO_SWING_SLEEP_SEL_MUXD4 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RX_CDR_DCO_SWING_BY_FW_MUXD4 : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
    uint32_t RX_CDR_DCO_SWING_SLEEP_TIMER_LIMIT_MUXD4 : 16;
    ///< TBD
    ///< AccessType="RW" BitOffset="16" ResetValue="0x3FF"
  } ;
  uint32_t value;
} pma_rx_msg_dco_swing_ctrl_muxd4_reg_t;

#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD4_DEFAULT (0x03ff0004U)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD4_RD_MASK (0xffff001fU)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD4_WR_MASK (0xffff001fU)


///< Do not perform swing calibration
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD4_RX_CDR_SKIP_DCO_SWING_CALIB_MUXD4_BF_OFF ( 0)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD4_RX_CDR_SKIP_DCO_SWING_CALIB_MUXD4_BF_WID ( 1)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD4_RX_CDR_SKIP_DCO_SWING_CALIB_MUXD4_BF_MSK (0x00000001)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD4_RX_CDR_SKIP_DCO_SWING_CALIB_MUXD4_BF_DEF (0x00000000)

///< Do not change FSM state after the swing calibration
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD4_RX_CDR_STAY_DCO_SWING_CALIB_MUXD4_BF_OFF ( 1)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD4_RX_CDR_STAY_DCO_SWING_CALIB_MUXD4_BF_WID ( 1)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD4_RX_CDR_STAY_DCO_SWING_CALIB_MUXD4_BF_MSK (0x00000002)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD4_RX_CDR_STAY_DCO_SWING_CALIB_MUXD4_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD4_RX_CDR_DCO_SWING_VPEAK_MODE_MUXD4_BF_OFF ( 2)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD4_RX_CDR_DCO_SWING_VPEAK_MODE_MUXD4_BF_WID ( 1)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD4_RX_CDR_DCO_SWING_VPEAK_MODE_MUXD4_BF_MSK (0x00000004)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD4_RX_CDR_DCO_SWING_VPEAK_MODE_MUXD4_BF_DEF (0x00000004)

///< TBD
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD4_RX_CDR_SKIP_DCO_SWING_SLEEP_SEL_MUXD4_BF_OFF ( 3)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD4_RX_CDR_SKIP_DCO_SWING_SLEEP_SEL_MUXD4_BF_WID ( 1)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD4_RX_CDR_SKIP_DCO_SWING_SLEEP_SEL_MUXD4_BF_MSK (0x00000008)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD4_RX_CDR_SKIP_DCO_SWING_SLEEP_SEL_MUXD4_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD4_RX_CDR_DCO_SWING_BY_FW_MUXD4_BF_OFF ( 4)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD4_RX_CDR_DCO_SWING_BY_FW_MUXD4_BF_WID ( 1)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD4_RX_CDR_DCO_SWING_BY_FW_MUXD4_BF_MSK (0x00000010)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD4_RX_CDR_DCO_SWING_BY_FW_MUXD4_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD4_RX_CDR_DCO_SWING_SLEEP_TIMER_LIMIT_MUXD4_BF_OFF (16)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD4_RX_CDR_DCO_SWING_SLEEP_TIMER_LIMIT_MUXD4_BF_WID (16)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD4_RX_CDR_DCO_SWING_SLEEP_TIMER_LIMIT_MUXD4_BF_MSK (0xFFFF0000)
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD4_RX_CDR_DCO_SWING_SLEEP_TIMER_LIMIT_MUXD4_BF_DEF (0x03FF0000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXDCO_BANGBANG_PD_CTRL_0 register description at address offset 0x24c
  *
  * Register default value:        0x00000010
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxdco_bangbang_pd_ctrl_0
  * RX DCO BangBang PD Control
  */

typedef union {
  struct {
    uint32_t RX_CDR_BANGBANG_PD_INV_CB : 1;
    ///< Invert voters sign
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_BANGBANG_PD_EDGE_ON_EVEN : 1;
    ///< Edge sample error is on even position of the ribbon
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RX_CDR_BANGBANG_PD_TD_EXTEND : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t RX_CDR_BANGBANG_PD_GAIN : 3;
    ///< Shift factor for the voters
    ///< AccessType="RW" BitOffset="3" ResetValue="0x2"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_dco_bangbang_pd_ctrl_0_reg_t;

#define PMA_RX_MSG_DCO_BANGBANG_PD_CTRL_0_DEFAULT (0x00000010U)
#define PMA_RX_MSG_DCO_BANGBANG_PD_CTRL_0_RD_MASK (0x0000003fU)
#define PMA_RX_MSG_DCO_BANGBANG_PD_CTRL_0_WR_MASK (0x0000003fU)


///< Invert voters sign
#define PMA_RX_MSG_DCO_BANGBANG_PD_CTRL_0_RX_CDR_BANGBANG_PD_INV_CB_BF_OFF ( 0)
#define PMA_RX_MSG_DCO_BANGBANG_PD_CTRL_0_RX_CDR_BANGBANG_PD_INV_CB_BF_WID ( 1)
#define PMA_RX_MSG_DCO_BANGBANG_PD_CTRL_0_RX_CDR_BANGBANG_PD_INV_CB_BF_MSK (0x00000001)
#define PMA_RX_MSG_DCO_BANGBANG_PD_CTRL_0_RX_CDR_BANGBANG_PD_INV_CB_BF_DEF (0x00000000)

///< Edge sample error is on even position of the ribbon
#define PMA_RX_MSG_DCO_BANGBANG_PD_CTRL_0_RX_CDR_BANGBANG_PD_EDGE_ON_EVEN_BF_OFF ( 1)
#define PMA_RX_MSG_DCO_BANGBANG_PD_CTRL_0_RX_CDR_BANGBANG_PD_EDGE_ON_EVEN_BF_WID ( 1)
#define PMA_RX_MSG_DCO_BANGBANG_PD_CTRL_0_RX_CDR_BANGBANG_PD_EDGE_ON_EVEN_BF_MSK (0x00000002)
#define PMA_RX_MSG_DCO_BANGBANG_PD_CTRL_0_RX_CDR_BANGBANG_PD_EDGE_ON_EVEN_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_BANGBANG_PD_CTRL_0_RX_CDR_BANGBANG_PD_TD_EXTEND_BF_OFF ( 2)
#define PMA_RX_MSG_DCO_BANGBANG_PD_CTRL_0_RX_CDR_BANGBANG_PD_TD_EXTEND_BF_WID ( 1)
#define PMA_RX_MSG_DCO_BANGBANG_PD_CTRL_0_RX_CDR_BANGBANG_PD_TD_EXTEND_BF_MSK (0x00000004)
#define PMA_RX_MSG_DCO_BANGBANG_PD_CTRL_0_RX_CDR_BANGBANG_PD_TD_EXTEND_BF_DEF (0x00000000)

///< Shift factor for the voters
#define PMA_RX_MSG_DCO_BANGBANG_PD_CTRL_0_RX_CDR_BANGBANG_PD_GAIN_BF_OFF ( 3)
#define PMA_RX_MSG_DCO_BANGBANG_PD_CTRL_0_RX_CDR_BANGBANG_PD_GAIN_BF_WID ( 3)
#define PMA_RX_MSG_DCO_BANGBANG_PD_CTRL_0_RX_CDR_BANGBANG_PD_GAIN_BF_MSK (0x00000038)
#define PMA_RX_MSG_DCO_BANGBANG_PD_CTRL_0_RX_CDR_BANGBANG_PD_GAIN_BF_DEF (0x00000010)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXDCO_BANGBANG_PD_CTRL_1 register description at address offset 0x250
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxdco_bangbang_pd_ctrl_1
  * RX DCO BangBang PD Control
  */

typedef union {
  struct {
    uint32_t RX_CDR_BANGBANG_PD_MASK : 32;
    ///< mask voters (in addition to those masked in HW)
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_msg_dco_bangbang_pd_ctrl_1_reg_t;

#define PMA_RX_MSG_DCO_BANGBANG_PD_CTRL_1_DEFAULT (0x00000000U)
#define PMA_RX_MSG_DCO_BANGBANG_PD_CTRL_1_RD_MASK (0xffffffffU)
#define PMA_RX_MSG_DCO_BANGBANG_PD_CTRL_1_WR_MASK (0xffffffffU)


///< mask voters (in addition to those masked in HW)
#define PMA_RX_MSG_DCO_BANGBANG_PD_CTRL_1_RX_CDR_BANGBANG_PD_MASK_BF_OFF ( 0)
#define PMA_RX_MSG_DCO_BANGBANG_PD_CTRL_1_RX_CDR_BANGBANG_PD_MASK_BF_WID (32)
#define PMA_RX_MSG_DCO_BANGBANG_PD_CTRL_1_RX_CDR_BANGBANG_PD_MASK_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MSG_DCO_BANGBANG_PD_CTRL_1_RX_CDR_BANGBANG_PD_MASK_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXDCO_BAUD_PD_CTRL_0 register description at address offset 0x254
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxdco_baud_pd_ctrl_0
  * RX DCO Baud PD Control
  */

typedef union {
  struct {
    uint32_t RX_CDR_BAUD_PD_INV : 1;
    ///< Invert voters sign
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_BAUD_PD_GAIN : 3;
    ///< Shift factor for the voters
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RX_CDR_BAUD_PD_FILTER_EN : 1;
    ///< Enables masking of the voters that out of range (for ex. s0=2 s1=3
    ///< s2=1)
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t FINE_BIN_INIT : 18;
    ///< Value for custom pre-load to the integral CDR path [17:10] integer
    ///< [9:0] fractional
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t FINE_BIN_SEL : 2;
    ///< Select a source to pre-load the integral CDR path: 0 - from fine_code
    ///< calibration block; 1 - from previously calibrated stored value; 2
    ///< - from fine_bin_init register; 3 same as 0
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t FINE_BIN_LOAD : 1;
    ///< Load the integral accumulator request. Activated by toggle 0->1
    ///< AccessType="RW" BitOffset="25" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="26" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_dco_baud_pd_ctrl_0_reg_t;

#define PMA_RX_MSG_DCO_BAUD_PD_CTRL_0_DEFAULT (0x00000000U)
#define PMA_RX_MSG_DCO_BAUD_PD_CTRL_0_RD_MASK (0x03ffffffU)
#define PMA_RX_MSG_DCO_BAUD_PD_CTRL_0_WR_MASK (0x03ffffffU)


///< Invert voters sign
#define PMA_RX_MSG_DCO_BAUD_PD_CTRL_0_RX_CDR_BAUD_PD_INV_BF_OFF ( 0)
#define PMA_RX_MSG_DCO_BAUD_PD_CTRL_0_RX_CDR_BAUD_PD_INV_BF_WID ( 1)
#define PMA_RX_MSG_DCO_BAUD_PD_CTRL_0_RX_CDR_BAUD_PD_INV_BF_MSK (0x00000001)
#define PMA_RX_MSG_DCO_BAUD_PD_CTRL_0_RX_CDR_BAUD_PD_INV_BF_DEF (0x00000000)

///< Shift factor for the voters
#define PMA_RX_MSG_DCO_BAUD_PD_CTRL_0_RX_CDR_BAUD_PD_GAIN_BF_OFF ( 1)
#define PMA_RX_MSG_DCO_BAUD_PD_CTRL_0_RX_CDR_BAUD_PD_GAIN_BF_WID ( 3)
#define PMA_RX_MSG_DCO_BAUD_PD_CTRL_0_RX_CDR_BAUD_PD_GAIN_BF_MSK (0x0000000E)
#define PMA_RX_MSG_DCO_BAUD_PD_CTRL_0_RX_CDR_BAUD_PD_GAIN_BF_DEF (0x00000000)

///< Enables masking of the voters that out of range (for ex. s0=2 s1=3
///< s2=1)
#define PMA_RX_MSG_DCO_BAUD_PD_CTRL_0_RX_CDR_BAUD_PD_FILTER_EN_BF_OFF ( 4)
#define PMA_RX_MSG_DCO_BAUD_PD_CTRL_0_RX_CDR_BAUD_PD_FILTER_EN_BF_WID ( 1)
#define PMA_RX_MSG_DCO_BAUD_PD_CTRL_0_RX_CDR_BAUD_PD_FILTER_EN_BF_MSK (0x00000010)
#define PMA_RX_MSG_DCO_BAUD_PD_CTRL_0_RX_CDR_BAUD_PD_FILTER_EN_BF_DEF (0x00000000)

///< Value for custom pre-load to the integral CDR path [17:10] integer
///< [9:0] fractional
#define PMA_RX_MSG_DCO_BAUD_PD_CTRL_0_FINE_BIN_INIT_BF_OFF ( 5)
#define PMA_RX_MSG_DCO_BAUD_PD_CTRL_0_FINE_BIN_INIT_BF_WID (18)
#define PMA_RX_MSG_DCO_BAUD_PD_CTRL_0_FINE_BIN_INIT_BF_MSK (0x007FFFE0)
#define PMA_RX_MSG_DCO_BAUD_PD_CTRL_0_FINE_BIN_INIT_BF_DEF (0x00000000)

///< Select a source to pre-load the integral CDR path: 0 - from fine_code
///< calibration block; 1 - from previously calibrated stored value; 2
///< - from fine_bin_init register; 3 same as 0
#define PMA_RX_MSG_DCO_BAUD_PD_CTRL_0_FINE_BIN_SEL_BF_OFF (23)
#define PMA_RX_MSG_DCO_BAUD_PD_CTRL_0_FINE_BIN_SEL_BF_WID ( 2)
#define PMA_RX_MSG_DCO_BAUD_PD_CTRL_0_FINE_BIN_SEL_BF_MSK (0x01800000)
#define PMA_RX_MSG_DCO_BAUD_PD_CTRL_0_FINE_BIN_SEL_BF_DEF (0x00000000)

///< Load the integral accumulator request. Activated by toggle 0->1
#define PMA_RX_MSG_DCO_BAUD_PD_CTRL_0_FINE_BIN_LOAD_BF_OFF (25)
#define PMA_RX_MSG_DCO_BAUD_PD_CTRL_0_FINE_BIN_LOAD_BF_WID ( 1)
#define PMA_RX_MSG_DCO_BAUD_PD_CTRL_0_FINE_BIN_LOAD_BF_MSK (0x02000000)
#define PMA_RX_MSG_DCO_BAUD_PD_CTRL_0_FINE_BIN_LOAD_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXDCO_BAUD_PD_CTRL_1 register description at address offset 0x258
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxdco_baud_pd_ctrl_1
  * RX DCO Baud PD Control
  */

typedef union {
  struct {
    uint32_t RX_CDR_BAUD_PD_MASK_31_0 : 32;
    ///< mask voters (in addition to those masked in HW)
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_msg_dco_baud_pd_ctrl_1_reg_t;

#define PMA_RX_MSG_DCO_BAUD_PD_CTRL_1_DEFAULT (0x00000000U)
#define PMA_RX_MSG_DCO_BAUD_PD_CTRL_1_RD_MASK (0xffffffffU)
#define PMA_RX_MSG_DCO_BAUD_PD_CTRL_1_WR_MASK (0xffffffffU)


///< mask voters (in addition to those masked in HW)
#define PMA_RX_MSG_DCO_BAUD_PD_CTRL_1_RX_CDR_BAUD_PD_MASK_31_0_BF_OFF ( 0)
#define PMA_RX_MSG_DCO_BAUD_PD_CTRL_1_RX_CDR_BAUD_PD_MASK_31_0_BF_WID (32)
#define PMA_RX_MSG_DCO_BAUD_PD_CTRL_1_RX_CDR_BAUD_PD_MASK_31_0_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MSG_DCO_BAUD_PD_CTRL_1_RX_CDR_BAUD_PD_MASK_31_0_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXDCO_BAUD_PD_CTRL_2 register description at address offset 0x25c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxdco_baud_pd_ctrl_2
  * RX DCO Baud PD Control
  */

typedef union {
  struct {
    uint32_t RX_CDR_BAUD_PD_MASK_63_32 : 32;
    ///< mask voters (in addition to those masked in HW)
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_msg_dco_baud_pd_ctrl_2_reg_t;

#define PMA_RX_MSG_DCO_BAUD_PD_CTRL_2_DEFAULT (0x00000000U)
#define PMA_RX_MSG_DCO_BAUD_PD_CTRL_2_RD_MASK (0xffffffffU)
#define PMA_RX_MSG_DCO_BAUD_PD_CTRL_2_WR_MASK (0xffffffffU)


///< mask voters (in addition to those masked in HW)
#define PMA_RX_MSG_DCO_BAUD_PD_CTRL_2_RX_CDR_BAUD_PD_MASK_63_32_BF_OFF ( 0)
#define PMA_RX_MSG_DCO_BAUD_PD_CTRL_2_RX_CDR_BAUD_PD_MASK_63_32_BF_WID (32)
#define PMA_RX_MSG_DCO_BAUD_PD_CTRL_2_RX_CDR_BAUD_PD_MASK_63_32_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MSG_DCO_BAUD_PD_CTRL_2_RX_CDR_BAUD_PD_MASK_63_32_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXDCO_LOCK_TFER_CTRL register description at address offset 0x260
  *
  * Register default value:        0x00000064
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxdco_lock_tfer_ctrl
  * RX DCO Lock Tfer Control
  */

typedef union {
  struct {
    uint32_t RX_CDR_LOCK_TFER_WAIT_CNTR : 8;
    ///< TBD
    ///< AccessType="RW" BitOffset="0" ResetValue="0x64"
    uint32_t RX_CDR_LOCK_TFER_L2D_PD_SEL : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RX_CDR_LOCK_TFER_PPM_HOLD_OVR : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t RX_CDR_LOCK_TFER_PPM_HOLD_VAL : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RX_CDR_LOCK_TFER_CLK_GATE_OVR : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t RX_CDR_LOCK_TFER_CLK_GATE_VAL : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t RX_CDR_LOCK_TFER_CLK_MUX_OVR : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t RX_CDR_LOCK_TFER_CLK_MUX_VAL : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t  : 17;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_dco_lock_tfer_ctrl_reg_t;

#define PMA_RX_MSG_DCO_LOCK_TFER_CTRL_DEFAULT (0x00000064U)
#define PMA_RX_MSG_DCO_LOCK_TFER_CTRL_RD_MASK (0x00007fffU)
#define PMA_RX_MSG_DCO_LOCK_TFER_CTRL_WR_MASK (0x00007fffU)


///< TBD
#define PMA_RX_MSG_DCO_LOCK_TFER_CTRL_RX_CDR_LOCK_TFER_WAIT_CNTR_BF_OFF ( 0)
#define PMA_RX_MSG_DCO_LOCK_TFER_CTRL_RX_CDR_LOCK_TFER_WAIT_CNTR_BF_WID ( 8)
#define PMA_RX_MSG_DCO_LOCK_TFER_CTRL_RX_CDR_LOCK_TFER_WAIT_CNTR_BF_MSK (0x000000FF)
#define PMA_RX_MSG_DCO_LOCK_TFER_CTRL_RX_CDR_LOCK_TFER_WAIT_CNTR_BF_DEF (0x00000064)

///< TBD
#define PMA_RX_MSG_DCO_LOCK_TFER_CTRL_RX_CDR_LOCK_TFER_L2D_PD_SEL_BF_OFF ( 8)
#define PMA_RX_MSG_DCO_LOCK_TFER_CTRL_RX_CDR_LOCK_TFER_L2D_PD_SEL_BF_WID ( 1)
#define PMA_RX_MSG_DCO_LOCK_TFER_CTRL_RX_CDR_LOCK_TFER_L2D_PD_SEL_BF_MSK (0x00000100)
#define PMA_RX_MSG_DCO_LOCK_TFER_CTRL_RX_CDR_LOCK_TFER_L2D_PD_SEL_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_LOCK_TFER_CTRL_RX_CDR_LOCK_TFER_PPM_HOLD_OVR_BF_OFF ( 9)
#define PMA_RX_MSG_DCO_LOCK_TFER_CTRL_RX_CDR_LOCK_TFER_PPM_HOLD_OVR_BF_WID ( 1)
#define PMA_RX_MSG_DCO_LOCK_TFER_CTRL_RX_CDR_LOCK_TFER_PPM_HOLD_OVR_BF_MSK (0x00000200)
#define PMA_RX_MSG_DCO_LOCK_TFER_CTRL_RX_CDR_LOCK_TFER_PPM_HOLD_OVR_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_LOCK_TFER_CTRL_RX_CDR_LOCK_TFER_PPM_HOLD_VAL_BF_OFF (10)
#define PMA_RX_MSG_DCO_LOCK_TFER_CTRL_RX_CDR_LOCK_TFER_PPM_HOLD_VAL_BF_WID ( 1)
#define PMA_RX_MSG_DCO_LOCK_TFER_CTRL_RX_CDR_LOCK_TFER_PPM_HOLD_VAL_BF_MSK (0x00000400)
#define PMA_RX_MSG_DCO_LOCK_TFER_CTRL_RX_CDR_LOCK_TFER_PPM_HOLD_VAL_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_LOCK_TFER_CTRL_RX_CDR_LOCK_TFER_CLK_GATE_OVR_BF_OFF (11)
#define PMA_RX_MSG_DCO_LOCK_TFER_CTRL_RX_CDR_LOCK_TFER_CLK_GATE_OVR_BF_WID ( 1)
#define PMA_RX_MSG_DCO_LOCK_TFER_CTRL_RX_CDR_LOCK_TFER_CLK_GATE_OVR_BF_MSK (0x00000800)
#define PMA_RX_MSG_DCO_LOCK_TFER_CTRL_RX_CDR_LOCK_TFER_CLK_GATE_OVR_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_LOCK_TFER_CTRL_RX_CDR_LOCK_TFER_CLK_GATE_VAL_BF_OFF (12)
#define PMA_RX_MSG_DCO_LOCK_TFER_CTRL_RX_CDR_LOCK_TFER_CLK_GATE_VAL_BF_WID ( 1)
#define PMA_RX_MSG_DCO_LOCK_TFER_CTRL_RX_CDR_LOCK_TFER_CLK_GATE_VAL_BF_MSK (0x00001000)
#define PMA_RX_MSG_DCO_LOCK_TFER_CTRL_RX_CDR_LOCK_TFER_CLK_GATE_VAL_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_LOCK_TFER_CTRL_RX_CDR_LOCK_TFER_CLK_MUX_OVR_BF_OFF (13)
#define PMA_RX_MSG_DCO_LOCK_TFER_CTRL_RX_CDR_LOCK_TFER_CLK_MUX_OVR_BF_WID ( 1)
#define PMA_RX_MSG_DCO_LOCK_TFER_CTRL_RX_CDR_LOCK_TFER_CLK_MUX_OVR_BF_MSK (0x00002000)
#define PMA_RX_MSG_DCO_LOCK_TFER_CTRL_RX_CDR_LOCK_TFER_CLK_MUX_OVR_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_LOCK_TFER_CTRL_RX_CDR_LOCK_TFER_CLK_MUX_VAL_BF_OFF (14)
#define PMA_RX_MSG_DCO_LOCK_TFER_CTRL_RX_CDR_LOCK_TFER_CLK_MUX_VAL_BF_WID ( 1)
#define PMA_RX_MSG_DCO_LOCK_TFER_CTRL_RX_CDR_LOCK_TFER_CLK_MUX_VAL_BF_MSK (0x00004000)
#define PMA_RX_MSG_DCO_LOCK_TFER_CTRL_RX_CDR_LOCK_TFER_CLK_MUX_VAL_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXDCO_OPTCLFASTLOCK_CTRL register description at address offset 0x264
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxdco_optclfastlock_ctrl
  * RX DCO Optical Fast Lock Control
  */

typedef union {
  struct {
    uint32_t RX_CDR_OPTCLFASTLOCK_EN : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_OPTCLFASTLOCK_SKIP_INIT_LOCK2DATA : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RX_CDR_OPTCLFASTLOCK_HOLD_EN : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t RX_CDR_OPTCLFASTLOCK_HOLD_TIMER : 4;
    ///< TBD
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RX_CDR_OPTCLFASTLOCK_CDRLOCK2DATATMR_OPTCL_SEL : 2;
    ///< TBD
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t RX_CDR_OPTCLFASTLOCK_EXIT_LOCK2DATA_EN : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t RX_CDR_OPTCLFASTLOCK_EXIT_LOCK2DATA_HOLD_EN : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RX_CDR_OPTCLFASTLOCK_ENTER_LOCK2DATA_EN : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t RX_CDR_OPTCLFASTLOCK_ENTER_LOCK2DATA_HOLD_EN : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t RX_CDR_OPTCLFASTLOCK_PPM_DETECT_FREEZE_EN : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t RX_CDR_OPTCLFASTLOCK_PPM_DETECT_HOLD_EN : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t RX_CDR_OPTCLFASTLOCK_ACC_FREEZE_EN : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RX_CDR_OPTCLFASTLOCK_PROP_FREEZE_EN : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t RX_CDR_OPTCLFASTLOCK_MOD_FREEZE_EN : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t RX_CDR_OPTCLFASTLOCK_CDRLOCK2DATA_GATER_EN : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t RX_CDR_OPTCLFASTLOCK_CDRLOCK2DATA_GATER_HOLD_EN : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t RX_CDR_OPTCLFASTLOCK_OVRD_EN : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t RX_CDR_OPTCLFASTLOCK_CDRLOCK2DATATMR_OPTCL_SEL_OVRD : 2;
    ///< TBD
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t RX_CDR_OPTCLFASTLOCK_FORCE_LOCK2REF_OVRD : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t RX_CDR_OPTCLFASTLOCK_FORCE_LOCK2DATA_OVRD : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t RX_CDR_OPTCLFASTLOCK_PPM_DETECT_FREEZE_OVRD : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="25" ResetValue="0x0"
    uint32_t RX_CDR_OPTCLFASTLOCK_PROP_FREEZE_OVRD : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="26" ResetValue="0x0"
    uint32_t RX_CDR_OPTCLFASTLOCK_CDRLOCK2DATA_GATER_OVRD : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="27" ResetValue="0x0"
    uint32_t RX_CDR_OPTCLFASTLOCK_INTF_OVRD_EN : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t RX_CDR_OPTCLFASTLOCK_INTF_OVRD_TYPE : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_dco_optclfastlock_ctrl_reg_t;

#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_DEFAULT (0x00000000U)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RD_MASK (0x3fffffffU)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_WR_MASK (0x3fffffffU)


///< TBD
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_EN_BF_OFF ( 0)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_EN_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_EN_BF_MSK (0x00000001)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_EN_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_SKIP_INIT_LOCK2DATA_BF_OFF ( 1)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_SKIP_INIT_LOCK2DATA_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_SKIP_INIT_LOCK2DATA_BF_MSK (0x00000002)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_SKIP_INIT_LOCK2DATA_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_HOLD_EN_BF_OFF ( 2)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_HOLD_EN_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_HOLD_EN_BF_MSK (0x00000004)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_HOLD_EN_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_HOLD_TIMER_BF_OFF ( 3)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_HOLD_TIMER_BF_WID ( 4)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_HOLD_TIMER_BF_MSK (0x00000078)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_HOLD_TIMER_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_CDRLOCK2DATATMR_OPTCL_SEL_BF_OFF ( 7)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_CDRLOCK2DATATMR_OPTCL_SEL_BF_WID ( 2)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_CDRLOCK2DATATMR_OPTCL_SEL_BF_MSK (0x00000180)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_CDRLOCK2DATATMR_OPTCL_SEL_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_EXIT_LOCK2DATA_EN_BF_OFF ( 9)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_EXIT_LOCK2DATA_EN_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_EXIT_LOCK2DATA_EN_BF_MSK (0x00000200)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_EXIT_LOCK2DATA_EN_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_EXIT_LOCK2DATA_HOLD_EN_BF_OFF (10)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_EXIT_LOCK2DATA_HOLD_EN_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_EXIT_LOCK2DATA_HOLD_EN_BF_MSK (0x00000400)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_EXIT_LOCK2DATA_HOLD_EN_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_ENTER_LOCK2DATA_EN_BF_OFF (11)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_ENTER_LOCK2DATA_EN_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_ENTER_LOCK2DATA_EN_BF_MSK (0x00000800)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_ENTER_LOCK2DATA_EN_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_ENTER_LOCK2DATA_HOLD_EN_BF_OFF (12)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_ENTER_LOCK2DATA_HOLD_EN_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_ENTER_LOCK2DATA_HOLD_EN_BF_MSK (0x00001000)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_ENTER_LOCK2DATA_HOLD_EN_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_PPM_DETECT_FREEZE_EN_BF_OFF (13)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_PPM_DETECT_FREEZE_EN_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_PPM_DETECT_FREEZE_EN_BF_MSK (0x00002000)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_PPM_DETECT_FREEZE_EN_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_PPM_DETECT_HOLD_EN_BF_OFF (14)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_PPM_DETECT_HOLD_EN_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_PPM_DETECT_HOLD_EN_BF_MSK (0x00004000)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_PPM_DETECT_HOLD_EN_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_ACC_FREEZE_EN_BF_OFF (15)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_ACC_FREEZE_EN_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_ACC_FREEZE_EN_BF_MSK (0x00008000)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_ACC_FREEZE_EN_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_PROP_FREEZE_EN_BF_OFF (16)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_PROP_FREEZE_EN_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_PROP_FREEZE_EN_BF_MSK (0x00010000)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_PROP_FREEZE_EN_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_MOD_FREEZE_EN_BF_OFF (17)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_MOD_FREEZE_EN_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_MOD_FREEZE_EN_BF_MSK (0x00020000)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_MOD_FREEZE_EN_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_CDRLOCK2DATA_GATER_EN_BF_OFF (18)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_CDRLOCK2DATA_GATER_EN_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_CDRLOCK2DATA_GATER_EN_BF_MSK (0x00040000)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_CDRLOCK2DATA_GATER_EN_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_CDRLOCK2DATA_GATER_HOLD_EN_BF_OFF (19)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_CDRLOCK2DATA_GATER_HOLD_EN_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_CDRLOCK2DATA_GATER_HOLD_EN_BF_MSK (0x00080000)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_CDRLOCK2DATA_GATER_HOLD_EN_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_OVRD_EN_BF_OFF (20)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_OVRD_EN_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_OVRD_EN_BF_MSK (0x00100000)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_OVRD_EN_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_CDRLOCK2DATATMR_OPTCL_SEL_OVRD_BF_OFF (21)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_CDRLOCK2DATATMR_OPTCL_SEL_OVRD_BF_WID ( 2)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_CDRLOCK2DATATMR_OPTCL_SEL_OVRD_BF_MSK (0x00600000)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_CDRLOCK2DATATMR_OPTCL_SEL_OVRD_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_FORCE_LOCK2REF_OVRD_BF_OFF (23)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_FORCE_LOCK2REF_OVRD_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_FORCE_LOCK2REF_OVRD_BF_MSK (0x00800000)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_FORCE_LOCK2REF_OVRD_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_FORCE_LOCK2DATA_OVRD_BF_OFF (24)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_FORCE_LOCK2DATA_OVRD_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_FORCE_LOCK2DATA_OVRD_BF_MSK (0x01000000)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_FORCE_LOCK2DATA_OVRD_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_PPM_DETECT_FREEZE_OVRD_BF_OFF (25)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_PPM_DETECT_FREEZE_OVRD_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_PPM_DETECT_FREEZE_OVRD_BF_MSK (0x02000000)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_PPM_DETECT_FREEZE_OVRD_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_PROP_FREEZE_OVRD_BF_OFF (26)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_PROP_FREEZE_OVRD_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_PROP_FREEZE_OVRD_BF_MSK (0x04000000)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_PROP_FREEZE_OVRD_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_CDRLOCK2DATA_GATER_OVRD_BF_OFF (27)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_CDRLOCK2DATA_GATER_OVRD_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_CDRLOCK2DATA_GATER_OVRD_BF_MSK (0x08000000)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_CDRLOCK2DATA_GATER_OVRD_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_INTF_OVRD_EN_BF_OFF (28)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_INTF_OVRD_EN_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_INTF_OVRD_EN_BF_MSK (0x10000000)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_INTF_OVRD_EN_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_INTF_OVRD_TYPE_BF_OFF (29)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_INTF_OVRD_TYPE_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_INTF_OVRD_TYPE_BF_MSK (0x20000000)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_RX_CDR_OPTCLFASTLOCK_INTF_OVRD_TYPE_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXDCO_OPTCLFASTLOCK_STATUS register description at address offset 0x268
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxdco_optclfastlock_status
  * RX DCO Optical Fast Lock Status
  */

typedef union {
  struct {
    uint32_t RX_CDR_OPTCLFASTLOCK_FSM_STATE : 3;
    ///< Optical Fast Lock FSM State
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_dco_optclfastlock_stat_reg_t;

#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_STAT_DEFAULT (0x00000000U)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_STAT_RD_MASK (0x00000007U)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_STAT_WR_MASK (0x00000000U)


///< Optical Fast Lock FSM State
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_STAT_RX_CDR_OPTCLFASTLOCK_FSM_STATE_BF_OFF ( 0)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_STAT_RX_CDR_OPTCLFASTLOCK_FSM_STATE_BF_WID ( 3)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_STAT_RX_CDR_OPTCLFASTLOCK_FSM_STATE_BF_MSK (0x00000007)
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_STAT_RX_CDR_OPTCLFASTLOCK_FSM_STATE_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXDCO_ETH_PMD_STATUS_0 register description at address offset 0x26c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxdco_eth_pmd_status_0
  * RX DCO ETH PMD Status
  */

typedef union {
  struct {
    uint32_t RX_CDR_ETH_PMD_PPM_RAW_CNT_PROBE : 32;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_msg_dco_eth_pmd_stat_0_reg_t;

#define PMA_RX_MSG_DCO_ETH_PMD_STAT_0_DEFAULT (0x00000000U)
#define PMA_RX_MSG_DCO_ETH_PMD_STAT_0_RD_MASK (0xffffffffU)
#define PMA_RX_MSG_DCO_ETH_PMD_STAT_0_WR_MASK (0x00000000U)


///< TBD
#define PMA_RX_MSG_DCO_ETH_PMD_STAT_0_RX_CDR_ETH_PMD_PPM_RAW_CNT_PROBE_BF_OFF ( 0)
#define PMA_RX_MSG_DCO_ETH_PMD_STAT_0_RX_CDR_ETH_PMD_PPM_RAW_CNT_PROBE_BF_WID (32)
#define PMA_RX_MSG_DCO_ETH_PMD_STAT_0_RX_CDR_ETH_PMD_PPM_RAW_CNT_PROBE_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MSG_DCO_ETH_PMD_STAT_0_RX_CDR_ETH_PMD_PPM_RAW_CNT_PROBE_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXDCO_ETH_PMD_STATUS_1 register description at address offset 0x270
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxdco_eth_pmd_status_1
  * RX DCO ETH PMD Status
  */

typedef union {
  struct {
    uint32_t RX_CDR_ETH_PMD_PPM_PROBE0 : 32;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_msg_dco_eth_pmd_stat_1_reg_t;

#define PMA_RX_MSG_DCO_ETH_PMD_STAT_1_DEFAULT (0x00000000U)
#define PMA_RX_MSG_DCO_ETH_PMD_STAT_1_RD_MASK (0xffffffffU)
#define PMA_RX_MSG_DCO_ETH_PMD_STAT_1_WR_MASK (0x00000000U)


///< TBD
#define PMA_RX_MSG_DCO_ETH_PMD_STAT_1_RX_CDR_ETH_PMD_PPM_PROBE0_BF_OFF ( 0)
#define PMA_RX_MSG_DCO_ETH_PMD_STAT_1_RX_CDR_ETH_PMD_PPM_PROBE0_BF_WID (32)
#define PMA_RX_MSG_DCO_ETH_PMD_STAT_1_RX_CDR_ETH_PMD_PPM_PROBE0_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MSG_DCO_ETH_PMD_STAT_1_RX_CDR_ETH_PMD_PPM_PROBE0_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXDCO_ETH_PMD_STATUS_2 register description at address offset 0x274
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxdco_eth_pmd_status_2
  * RX DCO ETH PMD Status
  */

typedef union {
  struct {
    uint32_t RX_CDR_ETH_PMD_PPM_PROBE1 : 32;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_msg_dco_eth_pmd_stat_2_reg_t;

#define PMA_RX_MSG_DCO_ETH_PMD_STAT_2_DEFAULT (0x00000000U)
#define PMA_RX_MSG_DCO_ETH_PMD_STAT_2_RD_MASK (0xffffffffU)
#define PMA_RX_MSG_DCO_ETH_PMD_STAT_2_WR_MASK (0x00000000U)


///< TBD
#define PMA_RX_MSG_DCO_ETH_PMD_STAT_2_RX_CDR_ETH_PMD_PPM_PROBE1_BF_OFF ( 0)
#define PMA_RX_MSG_DCO_ETH_PMD_STAT_2_RX_CDR_ETH_PMD_PPM_PROBE1_BF_WID (32)
#define PMA_RX_MSG_DCO_ETH_PMD_STAT_2_RX_CDR_ETH_PMD_PPM_PROBE1_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MSG_DCO_ETH_PMD_STAT_2_RX_CDR_ETH_PMD_PPM_PROBE1_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXDCO_ETH_PMD_STATUS_3 register description at address offset 0x278
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxdco_eth_pmd_status_3
  * RX DCO ETH PMD Status
  */

typedef union {
  struct {
    uint32_t RX_CDR_ETH_PMD_PPM_PROBE2 : 32;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_msg_dco_eth_pmd_stat_3_reg_t;

#define PMA_RX_MSG_DCO_ETH_PMD_STAT_3_DEFAULT (0x00000000U)
#define PMA_RX_MSG_DCO_ETH_PMD_STAT_3_RD_MASK (0xffffffffU)
#define PMA_RX_MSG_DCO_ETH_PMD_STAT_3_WR_MASK (0x00000000U)


///< TBD
#define PMA_RX_MSG_DCO_ETH_PMD_STAT_3_RX_CDR_ETH_PMD_PPM_PROBE2_BF_OFF ( 0)
#define PMA_RX_MSG_DCO_ETH_PMD_STAT_3_RX_CDR_ETH_PMD_PPM_PROBE2_BF_WID (32)
#define PMA_RX_MSG_DCO_ETH_PMD_STAT_3_RX_CDR_ETH_PMD_PPM_PROBE2_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MSG_DCO_ETH_PMD_STAT_3_RX_CDR_ETH_PMD_PPM_PROBE2_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXDCO_OVERRIDE_CTRL_0 register description at address offset 0x27c
  *
  * Register default value:        0x00000002
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxdco_override_ctrl_0
  * RX DCO control
  */

typedef union {
  struct {
    uint32_t RXDCOCLK_LOCOVREN : 1;
    ///< RxDCO local override enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXDCOCLK_EN_LOCOVR : 1;
    ///< RxDCO clock enable local override value
    ///< AccessType="RW" BitOffset="1" ResetValue="0x1"
    uint32_t RXDCOFINECODE_LOCOVREN : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t RXDCOFINECODE_BIN_LOCOVR : 8;
    ///< TBD
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RXDCO2F0DITH_LOCOVREN : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t RXDCO2F0DITH_EN_B_LOCOVR : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t RXDCOAFCCODE_LOCOVREN : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t RXDCOAFCCODE_BIN_LOCOVR : 9;
    ///< TBD
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t RXDCOFINEPLUS_LOCOVREN : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t RXDCOFINEPLUS_HFB_LF_BAND_SEL_LOCOVR : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t RXDCODTRCODE_LOCOVREN : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="25" ResetValue="0x0"
    uint32_t RXDCODTRCODE_BIN_LOCOVR : 6;
    ///< TBD
    ///< AccessType="RW" BitOffset="26" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_msg_dco_ovrd_ctrl_0_reg_t;

#define PMA_RX_MSG_DCO_OVRD_CTRL_0_DEFAULT (0x00000002U)
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_RD_MASK (0xffffffffU)
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_WR_MASK (0xffffffffU)


///< RxDCO local override enable
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_RXDCOCLK_LOCOVREN_BF_OFF ( 0)
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_RXDCOCLK_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_RXDCOCLK_LOCOVREN_BF_MSK (0x00000001)
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_RXDCOCLK_LOCOVREN_BF_DEF (0x00000000)

///< RxDCO clock enable local override value
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_RXDCOCLK_EN_LOCOVR_BF_OFF ( 1)
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_RXDCOCLK_EN_LOCOVR_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_RXDCOCLK_EN_LOCOVR_BF_MSK (0x00000002)
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_RXDCOCLK_EN_LOCOVR_BF_DEF (0x00000002)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_RXDCOFINECODE_LOCOVREN_BF_OFF ( 2)
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_RXDCOFINECODE_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_RXDCOFINECODE_LOCOVREN_BF_MSK (0x00000004)
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_RXDCOFINECODE_LOCOVREN_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_RXDCOFINECODE_BIN_LOCOVR_BF_OFF ( 3)
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_RXDCOFINECODE_BIN_LOCOVR_BF_WID ( 8)
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_RXDCOFINECODE_BIN_LOCOVR_BF_MSK (0x000007F8)
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_RXDCOFINECODE_BIN_LOCOVR_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_RXDCO2F0DITH_LOCOVREN_BF_OFF (11)
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_RXDCO2F0DITH_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_RXDCO2F0DITH_LOCOVREN_BF_MSK (0x00000800)
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_RXDCO2F0DITH_LOCOVREN_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_RXDCO2F0DITH_EN_B_LOCOVR_BF_OFF (12)
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_RXDCO2F0DITH_EN_B_LOCOVR_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_RXDCO2F0DITH_EN_B_LOCOVR_BF_MSK (0x00001000)
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_RXDCO2F0DITH_EN_B_LOCOVR_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_RXDCOAFCCODE_LOCOVREN_BF_OFF (13)
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_RXDCOAFCCODE_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_RXDCOAFCCODE_LOCOVREN_BF_MSK (0x00002000)
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_RXDCOAFCCODE_LOCOVREN_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_RXDCOAFCCODE_BIN_LOCOVR_BF_OFF (14)
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_RXDCOAFCCODE_BIN_LOCOVR_BF_WID ( 9)
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_RXDCOAFCCODE_BIN_LOCOVR_BF_MSK (0x007FC000)
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_RXDCOAFCCODE_BIN_LOCOVR_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_RXDCOFINEPLUS_LOCOVREN_BF_OFF (23)
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_RXDCOFINEPLUS_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_RXDCOFINEPLUS_LOCOVREN_BF_MSK (0x00800000)
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_RXDCOFINEPLUS_LOCOVREN_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_RXDCOFINEPLUS_HFB_LF_BAND_SEL_LOCOVR_BF_OFF (24)
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_RXDCOFINEPLUS_HFB_LF_BAND_SEL_LOCOVR_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_RXDCOFINEPLUS_HFB_LF_BAND_SEL_LOCOVR_BF_MSK (0x01000000)
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_RXDCOFINEPLUS_HFB_LF_BAND_SEL_LOCOVR_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_RXDCODTRCODE_LOCOVREN_BF_OFF (25)
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_RXDCODTRCODE_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_RXDCODTRCODE_LOCOVREN_BF_MSK (0x02000000)
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_RXDCODTRCODE_LOCOVREN_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_RXDCODTRCODE_BIN_LOCOVR_BF_OFF (26)
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_RXDCODTRCODE_BIN_LOCOVR_BF_WID ( 6)
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_RXDCODTRCODE_BIN_LOCOVR_BF_MSK (0xFC000000)
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_RXDCODTRCODE_BIN_LOCOVR_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXDCO_OVERRIDE_CTRL_1 register description at address offset 0x280
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxdco_override_ctrl_1
  * RX DCO control
  */

typedef union {
  struct {
    uint32_t RXDCOFINEPROP_LOCOVREN : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXDCOFINEPROP_LOCOVR : 8;
    ///< TBD
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RXDCOHSCNT_LOCOVREN : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t RXDCOHSCNT_EN_LOCOVR : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RXDCOSUPERCOARSECODE_LOCOVREN : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t RXDCOSUPERCOARSECODE_BIN_LOCOVR : 4;
    ///< TBD
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t RXDCO2F0DITHCAP_LOCOVREN : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t RXDCO2F0DITHCAP_B0_EN_B_LOCOVR : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t RXDCO2F0DITHCAP_B1_EN_B_LOCOVR : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t RXDCOLDO_LOCOVREN : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t RXDCOLDO_DCO_HIGH_VREF_SEL_LOCOVR : 6;
    ///< TBD
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t RXDCOFINEDITH_LOCOVREN : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="26" ResetValue="0x0"
    uint32_t RXDCOFINEDITH_LOCOVR : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="27" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_dco_ovrd_ctrl_1_reg_t;

#define PMA_RX_MSG_DCO_OVRD_CTRL_1_DEFAULT (0x00000000U)
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RD_MASK (0x0fffffffU)
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_WR_MASK (0x0fffffffU)


///< TBD
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RXDCOFINEPROP_LOCOVREN_BF_OFF ( 0)
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RXDCOFINEPROP_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RXDCOFINEPROP_LOCOVREN_BF_MSK (0x00000001)
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RXDCOFINEPROP_LOCOVREN_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RXDCOFINEPROP_LOCOVR_BF_OFF ( 1)
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RXDCOFINEPROP_LOCOVR_BF_WID ( 8)
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RXDCOFINEPROP_LOCOVR_BF_MSK (0x000001FE)
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RXDCOFINEPROP_LOCOVR_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RXDCOHSCNT_LOCOVREN_BF_OFF ( 9)
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RXDCOHSCNT_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RXDCOHSCNT_LOCOVREN_BF_MSK (0x00000200)
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RXDCOHSCNT_LOCOVREN_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RXDCOHSCNT_EN_LOCOVR_BF_OFF (10)
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RXDCOHSCNT_EN_LOCOVR_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RXDCOHSCNT_EN_LOCOVR_BF_MSK (0x00000400)
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RXDCOHSCNT_EN_LOCOVR_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RXDCOSUPERCOARSECODE_LOCOVREN_BF_OFF (11)
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RXDCOSUPERCOARSECODE_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RXDCOSUPERCOARSECODE_LOCOVREN_BF_MSK (0x00000800)
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RXDCOSUPERCOARSECODE_LOCOVREN_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RXDCOSUPERCOARSECODE_BIN_LOCOVR_BF_OFF (12)
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RXDCOSUPERCOARSECODE_BIN_LOCOVR_BF_WID ( 4)
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RXDCOSUPERCOARSECODE_BIN_LOCOVR_BF_MSK (0x0000F000)
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RXDCOSUPERCOARSECODE_BIN_LOCOVR_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RXDCO2F0DITHCAP_LOCOVREN_BF_OFF (16)
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RXDCO2F0DITHCAP_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RXDCO2F0DITHCAP_LOCOVREN_BF_MSK (0x00010000)
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RXDCO2F0DITHCAP_LOCOVREN_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RXDCO2F0DITHCAP_B0_EN_B_LOCOVR_BF_OFF (17)
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RXDCO2F0DITHCAP_B0_EN_B_LOCOVR_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RXDCO2F0DITHCAP_B0_EN_B_LOCOVR_BF_MSK (0x00020000)
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RXDCO2F0DITHCAP_B0_EN_B_LOCOVR_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RXDCO2F0DITHCAP_B1_EN_B_LOCOVR_BF_OFF (18)
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RXDCO2F0DITHCAP_B1_EN_B_LOCOVR_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RXDCO2F0DITHCAP_B1_EN_B_LOCOVR_BF_MSK (0x00040000)
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RXDCO2F0DITHCAP_B1_EN_B_LOCOVR_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RXDCOLDO_LOCOVREN_BF_OFF (19)
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RXDCOLDO_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RXDCOLDO_LOCOVREN_BF_MSK (0x00080000)
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RXDCOLDO_LOCOVREN_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RXDCOLDO_DCO_HIGH_VREF_SEL_LOCOVR_BF_OFF (20)
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RXDCOLDO_DCO_HIGH_VREF_SEL_LOCOVR_BF_WID ( 6)
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RXDCOLDO_DCO_HIGH_VREF_SEL_LOCOVR_BF_MSK (0x03F00000)
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RXDCOLDO_DCO_HIGH_VREF_SEL_LOCOVR_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RXDCOFINEDITH_LOCOVREN_BF_OFF (26)
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RXDCOFINEDITH_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RXDCOFINEDITH_LOCOVREN_BF_MSK (0x04000000)
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RXDCOFINEDITH_LOCOVREN_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RXDCOFINEDITH_LOCOVR_BF_OFF (27)
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RXDCOFINEDITH_LOCOVR_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RXDCOFINEDITH_LOCOVR_BF_MSK (0x08000000)
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_RXDCOFINEDITH_LOCOVR_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXDCO_OVERRIDE_CTRL_2 register description at address offset 0x284
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxdco_override_ctrl_2
  * RX DCO control
  */

typedef union {
  struct {
    uint32_t RXDCO2F0_LOCOVREN : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXDCO2F0_CODE_BIN_LOCOVR : 8;
    ///< TBD
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RXDCO2F0_NEXT_CODE_BIN_LOCOVR : 8;
    ///< TBD
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_dco_ovrd_ctrl_2_reg_t;

#define PMA_RX_MSG_DCO_OVRD_CTRL_2_DEFAULT (0x00000000U)
#define PMA_RX_MSG_DCO_OVRD_CTRL_2_RD_MASK (0x0001ffffU)
#define PMA_RX_MSG_DCO_OVRD_CTRL_2_WR_MASK (0x0001ffffU)


///< TBD
#define PMA_RX_MSG_DCO_OVRD_CTRL_2_RXDCO2F0_LOCOVREN_BF_OFF ( 0)
#define PMA_RX_MSG_DCO_OVRD_CTRL_2_RXDCO2F0_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OVRD_CTRL_2_RXDCO2F0_LOCOVREN_BF_MSK (0x00000001)
#define PMA_RX_MSG_DCO_OVRD_CTRL_2_RXDCO2F0_LOCOVREN_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_CTRL_2_RXDCO2F0_CODE_BIN_LOCOVR_BF_OFF ( 1)
#define PMA_RX_MSG_DCO_OVRD_CTRL_2_RXDCO2F0_CODE_BIN_LOCOVR_BF_WID ( 8)
#define PMA_RX_MSG_DCO_OVRD_CTRL_2_RXDCO2F0_CODE_BIN_LOCOVR_BF_MSK (0x000001FE)
#define PMA_RX_MSG_DCO_OVRD_CTRL_2_RXDCO2F0_CODE_BIN_LOCOVR_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_CTRL_2_RXDCO2F0_NEXT_CODE_BIN_LOCOVR_BF_OFF ( 9)
#define PMA_RX_MSG_DCO_OVRD_CTRL_2_RXDCO2F0_NEXT_CODE_BIN_LOCOVR_BF_WID ( 8)
#define PMA_RX_MSG_DCO_OVRD_CTRL_2_RXDCO2F0_NEXT_CODE_BIN_LOCOVR_BF_MSK (0x0001FE00)
#define PMA_RX_MSG_DCO_OVRD_CTRL_2_RXDCO2F0_NEXT_CODE_BIN_LOCOVR_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXDCO_OVERRIDE_CTRL_3 register description at address offset 0x288
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxdco_override_ctrl_3
  * RX DCO control
  */

typedef union {
  struct {
    uint32_t RXDCOFINE_LOCOVREN : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
    uint32_t RXDCOFINE_PROP0_SEL_LOCOVR : 3;
    ///< TBD
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RXDCOFINE_PROP1_SEL_LOCOVR : 3;
    ///< TBD
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t RXDCOFINE_PROP2_SEL_LOCOVR : 3;
    ///< TBD
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RXDCOFINE_PROP3_SEL_LOCOVR : 3;
    ///< TBD
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t RXDCOFINE_PROP4_SEL_LOCOVR : 3;
    ///< TBD
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t RXDCOFINE_PROP5_SEL_LOCOVR : 3;
    ///< TBD
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t RXDCOFINE_PROP6_SEL_LOCOVR : 3;
    ///< TBD
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t RXDCOFINE_PROP7_SEL_LOCOVR : 3;
    ///< TBD
    ///< AccessType="RW" BitOffset="25" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_dco_ovrd_ctrl_3_reg_t;

#define PMA_RX_MSG_DCO_OVRD_CTRL_3_DEFAULT (0x00000000U)
#define PMA_RX_MSG_DCO_OVRD_CTRL_3_RD_MASK (0x0ffffff1U)
#define PMA_RX_MSG_DCO_OVRD_CTRL_3_WR_MASK (0x0ffffff1U)


///< TBD
#define PMA_RX_MSG_DCO_OVRD_CTRL_3_RXDCOFINE_LOCOVREN_BF_OFF ( 0)
#define PMA_RX_MSG_DCO_OVRD_CTRL_3_RXDCOFINE_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OVRD_CTRL_3_RXDCOFINE_LOCOVREN_BF_MSK (0x00000001)
#define PMA_RX_MSG_DCO_OVRD_CTRL_3_RXDCOFINE_LOCOVREN_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_CTRL_3_RXDCOFINE_PROP0_SEL_LOCOVR_BF_OFF ( 4)
#define PMA_RX_MSG_DCO_OVRD_CTRL_3_RXDCOFINE_PROP0_SEL_LOCOVR_BF_WID ( 3)
#define PMA_RX_MSG_DCO_OVRD_CTRL_3_RXDCOFINE_PROP0_SEL_LOCOVR_BF_MSK (0x00000070)
#define PMA_RX_MSG_DCO_OVRD_CTRL_3_RXDCOFINE_PROP0_SEL_LOCOVR_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_CTRL_3_RXDCOFINE_PROP1_SEL_LOCOVR_BF_OFF ( 7)
#define PMA_RX_MSG_DCO_OVRD_CTRL_3_RXDCOFINE_PROP1_SEL_LOCOVR_BF_WID ( 3)
#define PMA_RX_MSG_DCO_OVRD_CTRL_3_RXDCOFINE_PROP1_SEL_LOCOVR_BF_MSK (0x00000380)
#define PMA_RX_MSG_DCO_OVRD_CTRL_3_RXDCOFINE_PROP1_SEL_LOCOVR_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_CTRL_3_RXDCOFINE_PROP2_SEL_LOCOVR_BF_OFF (10)
#define PMA_RX_MSG_DCO_OVRD_CTRL_3_RXDCOFINE_PROP2_SEL_LOCOVR_BF_WID ( 3)
#define PMA_RX_MSG_DCO_OVRD_CTRL_3_RXDCOFINE_PROP2_SEL_LOCOVR_BF_MSK (0x00001C00)
#define PMA_RX_MSG_DCO_OVRD_CTRL_3_RXDCOFINE_PROP2_SEL_LOCOVR_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_CTRL_3_RXDCOFINE_PROP3_SEL_LOCOVR_BF_OFF (13)
#define PMA_RX_MSG_DCO_OVRD_CTRL_3_RXDCOFINE_PROP3_SEL_LOCOVR_BF_WID ( 3)
#define PMA_RX_MSG_DCO_OVRD_CTRL_3_RXDCOFINE_PROP3_SEL_LOCOVR_BF_MSK (0x0000E000)
#define PMA_RX_MSG_DCO_OVRD_CTRL_3_RXDCOFINE_PROP3_SEL_LOCOVR_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_CTRL_3_RXDCOFINE_PROP4_SEL_LOCOVR_BF_OFF (16)
#define PMA_RX_MSG_DCO_OVRD_CTRL_3_RXDCOFINE_PROP4_SEL_LOCOVR_BF_WID ( 3)
#define PMA_RX_MSG_DCO_OVRD_CTRL_3_RXDCOFINE_PROP4_SEL_LOCOVR_BF_MSK (0x00070000)
#define PMA_RX_MSG_DCO_OVRD_CTRL_3_RXDCOFINE_PROP4_SEL_LOCOVR_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_CTRL_3_RXDCOFINE_PROP5_SEL_LOCOVR_BF_OFF (19)
#define PMA_RX_MSG_DCO_OVRD_CTRL_3_RXDCOFINE_PROP5_SEL_LOCOVR_BF_WID ( 3)
#define PMA_RX_MSG_DCO_OVRD_CTRL_3_RXDCOFINE_PROP5_SEL_LOCOVR_BF_MSK (0x00380000)
#define PMA_RX_MSG_DCO_OVRD_CTRL_3_RXDCOFINE_PROP5_SEL_LOCOVR_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_CTRL_3_RXDCOFINE_PROP6_SEL_LOCOVR_BF_OFF (22)
#define PMA_RX_MSG_DCO_OVRD_CTRL_3_RXDCOFINE_PROP6_SEL_LOCOVR_BF_WID ( 3)
#define PMA_RX_MSG_DCO_OVRD_CTRL_3_RXDCOFINE_PROP6_SEL_LOCOVR_BF_MSK (0x01C00000)
#define PMA_RX_MSG_DCO_OVRD_CTRL_3_RXDCOFINE_PROP6_SEL_LOCOVR_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_CTRL_3_RXDCOFINE_PROP7_SEL_LOCOVR_BF_OFF (25)
#define PMA_RX_MSG_DCO_OVRD_CTRL_3_RXDCOFINE_PROP7_SEL_LOCOVR_BF_WID ( 3)
#define PMA_RX_MSG_DCO_OVRD_CTRL_3_RXDCOFINE_PROP7_SEL_LOCOVR_BF_MSK (0x0E000000)
#define PMA_RX_MSG_DCO_OVRD_CTRL_3_RXDCOFINE_PROP7_SEL_LOCOVR_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXDCO_OVERRIDE_CTRL_4 register description at address offset 0x28c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxdco_override_ctrl_4
  * RX DCO control
  */

typedef union {
  struct {
    uint32_t RXDCO_PKSNS_COMP_EN_LOCOVREN : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXDCO_PKSNS_VREF_SEL_LOCOVREN : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RXDCO_LDO_DCO_VREF_SEL_LOCOVREN : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t RXDCO_PKSNS_COMP_EN_LOCOVR : 1;
    ///< TBD
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
    uint32_t RXDCO_PKSNS_VREF_SEL_LOCOVR : 6;
    ///< TBD
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t RXDCO_LDO_DCO_VREF_SEL_LOCOVR : 6;
    ///< TBD
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_dco_ovrd_ctrl_4_reg_t;

#define PMA_RX_MSG_DCO_OVRD_CTRL_4_DEFAULT (0x00000000U)
#define PMA_RX_MSG_DCO_OVRD_CTRL_4_RD_MASK (0x003f3f0fU)
#define PMA_RX_MSG_DCO_OVRD_CTRL_4_WR_MASK (0x003f3f0fU)


///< TBD
#define PMA_RX_MSG_DCO_OVRD_CTRL_4_RXDCO_PKSNS_COMP_EN_LOCOVREN_BF_OFF ( 0)
#define PMA_RX_MSG_DCO_OVRD_CTRL_4_RXDCO_PKSNS_COMP_EN_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OVRD_CTRL_4_RXDCO_PKSNS_COMP_EN_LOCOVREN_BF_MSK (0x00000001)
#define PMA_RX_MSG_DCO_OVRD_CTRL_4_RXDCO_PKSNS_COMP_EN_LOCOVREN_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_CTRL_4_RXDCO_PKSNS_VREF_SEL_LOCOVREN_BF_OFF ( 1)
#define PMA_RX_MSG_DCO_OVRD_CTRL_4_RXDCO_PKSNS_VREF_SEL_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OVRD_CTRL_4_RXDCO_PKSNS_VREF_SEL_LOCOVREN_BF_MSK (0x00000002)
#define PMA_RX_MSG_DCO_OVRD_CTRL_4_RXDCO_PKSNS_VREF_SEL_LOCOVREN_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_CTRL_4_RXDCO_LDO_DCO_VREF_SEL_LOCOVREN_BF_OFF ( 2)
#define PMA_RX_MSG_DCO_OVRD_CTRL_4_RXDCO_LDO_DCO_VREF_SEL_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OVRD_CTRL_4_RXDCO_LDO_DCO_VREF_SEL_LOCOVREN_BF_MSK (0x00000004)
#define PMA_RX_MSG_DCO_OVRD_CTRL_4_RXDCO_LDO_DCO_VREF_SEL_LOCOVREN_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_CTRL_4_RXDCO_PKSNS_COMP_EN_LOCOVR_BF_OFF ( 3)
#define PMA_RX_MSG_DCO_OVRD_CTRL_4_RXDCO_PKSNS_COMP_EN_LOCOVR_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OVRD_CTRL_4_RXDCO_PKSNS_COMP_EN_LOCOVR_BF_MSK (0x00000008)
#define PMA_RX_MSG_DCO_OVRD_CTRL_4_RXDCO_PKSNS_COMP_EN_LOCOVR_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_CTRL_4_RXDCO_PKSNS_VREF_SEL_LOCOVR_BF_OFF ( 8)
#define PMA_RX_MSG_DCO_OVRD_CTRL_4_RXDCO_PKSNS_VREF_SEL_LOCOVR_BF_WID ( 6)
#define PMA_RX_MSG_DCO_OVRD_CTRL_4_RXDCO_PKSNS_VREF_SEL_LOCOVR_BF_MSK (0x00003F00)
#define PMA_RX_MSG_DCO_OVRD_CTRL_4_RXDCO_PKSNS_VREF_SEL_LOCOVR_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_CTRL_4_RXDCO_LDO_DCO_VREF_SEL_LOCOVR_BF_OFF (16)
#define PMA_RX_MSG_DCO_OVRD_CTRL_4_RXDCO_LDO_DCO_VREF_SEL_LOCOVR_BF_WID ( 6)
#define PMA_RX_MSG_DCO_OVRD_CTRL_4_RXDCO_LDO_DCO_VREF_SEL_LOCOVR_BF_MSK (0x003F0000)
#define PMA_RX_MSG_DCO_OVRD_CTRL_4_RXDCO_LDO_DCO_VREF_SEL_LOCOVR_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXPHDT_OVERRIDE_CTRL_0 register description at address offset 0x290
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxphdt_override_ctrl_0
  * Overrides for digital slicer sar-data threshold
  */

typedef union {
  struct {
    uint32_t RXPHDT_LOCOVREN : 1;
    ///< Override enable for digital slicer sar-data threshold
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXPHDT_REF10ERR_LOCOVR : 4;
    ///< TBD
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RXPHDT_REF11ERR_LOCOVR : 5;
    ///< TBD
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t RXPHDT_REF1XDATA_LOCOVR : 5;
    ///< TBD
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RXPHDT_REFLVL_UPDATE_REQ_LOCOVR : 1;
    ///< Override value for phdt_reflvl_update_req
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_phdt_ovrd_ctrl_0_reg_t;

#define PMA_RX_MSG_PHDT_OVRD_CTRL_0_DEFAULT (0x00000000U)
#define PMA_RX_MSG_PHDT_OVRD_CTRL_0_RD_MASK (0x0000ffffU)
#define PMA_RX_MSG_PHDT_OVRD_CTRL_0_WR_MASK (0x0000ffffU)


///< Override enable for digital slicer sar-data threshold
#define PMA_RX_MSG_PHDT_OVRD_CTRL_0_RXPHDT_LOCOVREN_BF_OFF ( 0)
#define PMA_RX_MSG_PHDT_OVRD_CTRL_0_RXPHDT_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MSG_PHDT_OVRD_CTRL_0_RXPHDT_LOCOVREN_BF_MSK (0x00000001)
#define PMA_RX_MSG_PHDT_OVRD_CTRL_0_RXPHDT_LOCOVREN_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_PHDT_OVRD_CTRL_0_RXPHDT_REF10ERR_LOCOVR_BF_OFF ( 1)
#define PMA_RX_MSG_PHDT_OVRD_CTRL_0_RXPHDT_REF10ERR_LOCOVR_BF_WID ( 4)
#define PMA_RX_MSG_PHDT_OVRD_CTRL_0_RXPHDT_REF10ERR_LOCOVR_BF_MSK (0x0000001E)
#define PMA_RX_MSG_PHDT_OVRD_CTRL_0_RXPHDT_REF10ERR_LOCOVR_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_PHDT_OVRD_CTRL_0_RXPHDT_REF11ERR_LOCOVR_BF_OFF ( 5)
#define PMA_RX_MSG_PHDT_OVRD_CTRL_0_RXPHDT_REF11ERR_LOCOVR_BF_WID ( 5)
#define PMA_RX_MSG_PHDT_OVRD_CTRL_0_RXPHDT_REF11ERR_LOCOVR_BF_MSK (0x000003E0)
#define PMA_RX_MSG_PHDT_OVRD_CTRL_0_RXPHDT_REF11ERR_LOCOVR_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_PHDT_OVRD_CTRL_0_RXPHDT_REF1XDATA_LOCOVR_BF_OFF (10)
#define PMA_RX_MSG_PHDT_OVRD_CTRL_0_RXPHDT_REF1XDATA_LOCOVR_BF_WID ( 5)
#define PMA_RX_MSG_PHDT_OVRD_CTRL_0_RXPHDT_REF1XDATA_LOCOVR_BF_MSK (0x00007C00)
#define PMA_RX_MSG_PHDT_OVRD_CTRL_0_RXPHDT_REF1XDATA_LOCOVR_BF_DEF (0x00000000)

///< Override value for phdt_reflvl_update_req
#define PMA_RX_MSG_PHDT_OVRD_CTRL_0_RXPHDT_REFLVL_UPDATE_REQ_LOCOVR_BF_OFF (15)
#define PMA_RX_MSG_PHDT_OVRD_CTRL_0_RXPHDT_REFLVL_UPDATE_REQ_LOCOVR_BF_WID ( 1)
#define PMA_RX_MSG_PHDT_OVRD_CTRL_0_RXPHDT_REFLVL_UPDATE_REQ_LOCOVR_BF_MSK (0x00008000)
#define PMA_RX_MSG_PHDT_OVRD_CTRL_0_RXPHDT_REFLVL_UPDATE_REQ_LOCOVR_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXDCO_OVERRIDE_STATUS_0 register description at address offset 0x294
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxdco_override_status_0
  * RxDCO Override Status
  */

typedef union {
  struct {
    uint32_t RXDCOCLK_EN_LOC : 1;
    ///< RxDCO clock enable pre-override value
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RXDCOFINECODE_BIN_LOC : 8;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t RXDCO2F0DITH_EN_B_LOC : 1;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t RXDCOAFCCODE_BIN_LOC : 9;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="10" ResetValue="0x0"
    uint32_t RXDCOFINEPLUS_HFB_LF_BAND_SEL_LOC : 1;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="19" ResetValue="0x0"
    uint32_t RXDCODTRCODE_BIN_LOC : 6;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="20" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="26" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_dco_ovrd_stat_0_reg_t;

#define PMA_RX_MSG_DCO_OVRD_STAT_0_DEFAULT (0x00000000U)
#define PMA_RX_MSG_DCO_OVRD_STAT_0_RD_MASK (0x03ffffffU)
#define PMA_RX_MSG_DCO_OVRD_STAT_0_WR_MASK (0x00000000U)


///< RxDCO clock enable pre-override value
#define PMA_RX_MSG_DCO_OVRD_STAT_0_RXDCOCLK_EN_LOC_BF_OFF ( 0)
#define PMA_RX_MSG_DCO_OVRD_STAT_0_RXDCOCLK_EN_LOC_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OVRD_STAT_0_RXDCOCLK_EN_LOC_BF_MSK (0x00000001)
#define PMA_RX_MSG_DCO_OVRD_STAT_0_RXDCOCLK_EN_LOC_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_STAT_0_RXDCOFINECODE_BIN_LOC_BF_OFF ( 1)
#define PMA_RX_MSG_DCO_OVRD_STAT_0_RXDCOFINECODE_BIN_LOC_BF_WID ( 8)
#define PMA_RX_MSG_DCO_OVRD_STAT_0_RXDCOFINECODE_BIN_LOC_BF_MSK (0x000001FE)
#define PMA_RX_MSG_DCO_OVRD_STAT_0_RXDCOFINECODE_BIN_LOC_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_STAT_0_RXDCO2F0DITH_EN_B_LOC_BF_OFF ( 9)
#define PMA_RX_MSG_DCO_OVRD_STAT_0_RXDCO2F0DITH_EN_B_LOC_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OVRD_STAT_0_RXDCO2F0DITH_EN_B_LOC_BF_MSK (0x00000200)
#define PMA_RX_MSG_DCO_OVRD_STAT_0_RXDCO2F0DITH_EN_B_LOC_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_STAT_0_RXDCOAFCCODE_BIN_LOC_BF_OFF (10)
#define PMA_RX_MSG_DCO_OVRD_STAT_0_RXDCOAFCCODE_BIN_LOC_BF_WID ( 9)
#define PMA_RX_MSG_DCO_OVRD_STAT_0_RXDCOAFCCODE_BIN_LOC_BF_MSK (0x0007FC00)
#define PMA_RX_MSG_DCO_OVRD_STAT_0_RXDCOAFCCODE_BIN_LOC_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_STAT_0_RXDCOFINEPLUS_HFB_LF_BAND_SEL_LOC_BF_OFF (19)
#define PMA_RX_MSG_DCO_OVRD_STAT_0_RXDCOFINEPLUS_HFB_LF_BAND_SEL_LOC_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OVRD_STAT_0_RXDCOFINEPLUS_HFB_LF_BAND_SEL_LOC_BF_MSK (0x00080000)
#define PMA_RX_MSG_DCO_OVRD_STAT_0_RXDCOFINEPLUS_HFB_LF_BAND_SEL_LOC_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_STAT_0_RXDCODTRCODE_BIN_LOC_BF_OFF (20)
#define PMA_RX_MSG_DCO_OVRD_STAT_0_RXDCODTRCODE_BIN_LOC_BF_WID ( 6)
#define PMA_RX_MSG_DCO_OVRD_STAT_0_RXDCODTRCODE_BIN_LOC_BF_MSK (0x03F00000)
#define PMA_RX_MSG_DCO_OVRD_STAT_0_RXDCODTRCODE_BIN_LOC_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXDCO_OVERRIDE_STATUS_1 register description at address offset 0x298
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxdco_override_status_1
  * RxDCO Override Status
  */

typedef union {
  struct {
    uint32_t RXDCOFINEPROP_LOC : 8;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RXDCOHSCNT_EN_LOC : 1;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t RXDCOSUPERCOARSECODE_BIN_LOC : 4;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t RXDCO2F0DITHCAP_B0_EN_B_LOC : 1;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="13" ResetValue="0x0"
    uint32_t RXDCO2F0DITHCAP_B1_EN_B_LOC : 1;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="14" ResetValue="0x0"
    uint32_t RXDCOLDO_DCO_HIGH_VREF_SEL_LOC : 6;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="15" ResetValue="0x0"
    uint32_t RXDCOFINEDITH_LOC : 1;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="21" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_dco_ovrd_stat_1_reg_t;

#define PMA_RX_MSG_DCO_OVRD_STAT_1_DEFAULT (0x00000000U)
#define PMA_RX_MSG_DCO_OVRD_STAT_1_RD_MASK (0x003fffffU)
#define PMA_RX_MSG_DCO_OVRD_STAT_1_WR_MASK (0x00000000U)


///< TBD
#define PMA_RX_MSG_DCO_OVRD_STAT_1_RXDCOFINEPROP_LOC_BF_OFF ( 0)
#define PMA_RX_MSG_DCO_OVRD_STAT_1_RXDCOFINEPROP_LOC_BF_WID ( 8)
#define PMA_RX_MSG_DCO_OVRD_STAT_1_RXDCOFINEPROP_LOC_BF_MSK (0x000000FF)
#define PMA_RX_MSG_DCO_OVRD_STAT_1_RXDCOFINEPROP_LOC_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_STAT_1_RXDCOHSCNT_EN_LOC_BF_OFF ( 8)
#define PMA_RX_MSG_DCO_OVRD_STAT_1_RXDCOHSCNT_EN_LOC_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OVRD_STAT_1_RXDCOHSCNT_EN_LOC_BF_MSK (0x00000100)
#define PMA_RX_MSG_DCO_OVRD_STAT_1_RXDCOHSCNT_EN_LOC_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_STAT_1_RXDCOSUPERCOARSECODE_BIN_LOC_BF_OFF ( 9)
#define PMA_RX_MSG_DCO_OVRD_STAT_1_RXDCOSUPERCOARSECODE_BIN_LOC_BF_WID ( 4)
#define PMA_RX_MSG_DCO_OVRD_STAT_1_RXDCOSUPERCOARSECODE_BIN_LOC_BF_MSK (0x00001E00)
#define PMA_RX_MSG_DCO_OVRD_STAT_1_RXDCOSUPERCOARSECODE_BIN_LOC_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_STAT_1_RXDCO2F0DITHCAP_B0_EN_B_LOC_BF_OFF (13)
#define PMA_RX_MSG_DCO_OVRD_STAT_1_RXDCO2F0DITHCAP_B0_EN_B_LOC_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OVRD_STAT_1_RXDCO2F0DITHCAP_B0_EN_B_LOC_BF_MSK (0x00002000)
#define PMA_RX_MSG_DCO_OVRD_STAT_1_RXDCO2F0DITHCAP_B0_EN_B_LOC_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_STAT_1_RXDCO2F0DITHCAP_B1_EN_B_LOC_BF_OFF (14)
#define PMA_RX_MSG_DCO_OVRD_STAT_1_RXDCO2F0DITHCAP_B1_EN_B_LOC_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OVRD_STAT_1_RXDCO2F0DITHCAP_B1_EN_B_LOC_BF_MSK (0x00004000)
#define PMA_RX_MSG_DCO_OVRD_STAT_1_RXDCO2F0DITHCAP_B1_EN_B_LOC_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_STAT_1_RXDCOLDO_DCO_HIGH_VREF_SEL_LOC_BF_OFF (15)
#define PMA_RX_MSG_DCO_OVRD_STAT_1_RXDCOLDO_DCO_HIGH_VREF_SEL_LOC_BF_WID ( 6)
#define PMA_RX_MSG_DCO_OVRD_STAT_1_RXDCOLDO_DCO_HIGH_VREF_SEL_LOC_BF_MSK (0x001F8000)
#define PMA_RX_MSG_DCO_OVRD_STAT_1_RXDCOLDO_DCO_HIGH_VREF_SEL_LOC_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_STAT_1_RXDCOFINEDITH_LOC_BF_OFF (21)
#define PMA_RX_MSG_DCO_OVRD_STAT_1_RXDCOFINEDITH_LOC_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OVRD_STAT_1_RXDCOFINEDITH_LOC_BF_MSK (0x00200000)
#define PMA_RX_MSG_DCO_OVRD_STAT_1_RXDCOFINEDITH_LOC_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXDCO_OVERRIDE_STATUS_2 register description at address offset 0x29c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxdco_override_status_2
  * RxDCO Override Status
  */

typedef union {
  struct {
    uint32_t RXDCO2F0_CODE_BIN_LOC : 8;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RXDCO2F0_NEXT_CODE_BIN_LOC : 8;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_dco_ovrd_stat_2_reg_t;

#define PMA_RX_MSG_DCO_OVRD_STAT_2_DEFAULT (0x00000000U)
#define PMA_RX_MSG_DCO_OVRD_STAT_2_RD_MASK (0x0000ffffU)
#define PMA_RX_MSG_DCO_OVRD_STAT_2_WR_MASK (0x00000000U)


///< TBD
#define PMA_RX_MSG_DCO_OVRD_STAT_2_RXDCO2F0_CODE_BIN_LOC_BF_OFF ( 0)
#define PMA_RX_MSG_DCO_OVRD_STAT_2_RXDCO2F0_CODE_BIN_LOC_BF_WID ( 8)
#define PMA_RX_MSG_DCO_OVRD_STAT_2_RXDCO2F0_CODE_BIN_LOC_BF_MSK (0x000000FF)
#define PMA_RX_MSG_DCO_OVRD_STAT_2_RXDCO2F0_CODE_BIN_LOC_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_STAT_2_RXDCO2F0_NEXT_CODE_BIN_LOC_BF_OFF ( 8)
#define PMA_RX_MSG_DCO_OVRD_STAT_2_RXDCO2F0_NEXT_CODE_BIN_LOC_BF_WID ( 8)
#define PMA_RX_MSG_DCO_OVRD_STAT_2_RXDCO2F0_NEXT_CODE_BIN_LOC_BF_MSK (0x0000FF00)
#define PMA_RX_MSG_DCO_OVRD_STAT_2_RXDCO2F0_NEXT_CODE_BIN_LOC_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXDCO_OVERRIDE_STATUS_3 register description at address offset 0x2a0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxdco_override_status_3
  * RxDCO Override Status
  */

typedef union {
  struct {
    uint32_t RXDCOFINE_PROP0_SEL_LOC : 3;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RXDCOFINE_PROP1_SEL_LOC : 3;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t RXDCOFINE_PROP2_SEL_LOC : 3;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t RXDCOFINE_PROP3_SEL_LOC : 3;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t RXDCOFINE_PROP4_SEL_LOC : 3;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t RXDCOFINE_PROP5_SEL_LOC : 3;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="15" ResetValue="0x0"
    uint32_t RXDCOFINE_PROP6_SEL_LOC : 3;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="18" ResetValue="0x0"
    uint32_t RXDCOFINE_PROP7_SEL_LOC : 3;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="21" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_dco_ovrd_stat_3_reg_t;

#define PMA_RX_MSG_DCO_OVRD_STAT_3_DEFAULT (0x00000000U)
#define PMA_RX_MSG_DCO_OVRD_STAT_3_RD_MASK (0x00ffffffU)
#define PMA_RX_MSG_DCO_OVRD_STAT_3_WR_MASK (0x00000000U)


///< TBD
#define PMA_RX_MSG_DCO_OVRD_STAT_3_RXDCOFINE_PROP0_SEL_LOC_BF_OFF ( 0)
#define PMA_RX_MSG_DCO_OVRD_STAT_3_RXDCOFINE_PROP0_SEL_LOC_BF_WID ( 3)
#define PMA_RX_MSG_DCO_OVRD_STAT_3_RXDCOFINE_PROP0_SEL_LOC_BF_MSK (0x00000007)
#define PMA_RX_MSG_DCO_OVRD_STAT_3_RXDCOFINE_PROP0_SEL_LOC_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_STAT_3_RXDCOFINE_PROP1_SEL_LOC_BF_OFF ( 3)
#define PMA_RX_MSG_DCO_OVRD_STAT_3_RXDCOFINE_PROP1_SEL_LOC_BF_WID ( 3)
#define PMA_RX_MSG_DCO_OVRD_STAT_3_RXDCOFINE_PROP1_SEL_LOC_BF_MSK (0x00000038)
#define PMA_RX_MSG_DCO_OVRD_STAT_3_RXDCOFINE_PROP1_SEL_LOC_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_STAT_3_RXDCOFINE_PROP2_SEL_LOC_BF_OFF ( 6)
#define PMA_RX_MSG_DCO_OVRD_STAT_3_RXDCOFINE_PROP2_SEL_LOC_BF_WID ( 3)
#define PMA_RX_MSG_DCO_OVRD_STAT_3_RXDCOFINE_PROP2_SEL_LOC_BF_MSK (0x000001C0)
#define PMA_RX_MSG_DCO_OVRD_STAT_3_RXDCOFINE_PROP2_SEL_LOC_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_STAT_3_RXDCOFINE_PROP3_SEL_LOC_BF_OFF ( 9)
#define PMA_RX_MSG_DCO_OVRD_STAT_3_RXDCOFINE_PROP3_SEL_LOC_BF_WID ( 3)
#define PMA_RX_MSG_DCO_OVRD_STAT_3_RXDCOFINE_PROP3_SEL_LOC_BF_MSK (0x00000E00)
#define PMA_RX_MSG_DCO_OVRD_STAT_3_RXDCOFINE_PROP3_SEL_LOC_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_STAT_3_RXDCOFINE_PROP4_SEL_LOC_BF_OFF (12)
#define PMA_RX_MSG_DCO_OVRD_STAT_3_RXDCOFINE_PROP4_SEL_LOC_BF_WID ( 3)
#define PMA_RX_MSG_DCO_OVRD_STAT_3_RXDCOFINE_PROP4_SEL_LOC_BF_MSK (0x00007000)
#define PMA_RX_MSG_DCO_OVRD_STAT_3_RXDCOFINE_PROP4_SEL_LOC_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_STAT_3_RXDCOFINE_PROP5_SEL_LOC_BF_OFF (15)
#define PMA_RX_MSG_DCO_OVRD_STAT_3_RXDCOFINE_PROP5_SEL_LOC_BF_WID ( 3)
#define PMA_RX_MSG_DCO_OVRD_STAT_3_RXDCOFINE_PROP5_SEL_LOC_BF_MSK (0x00038000)
#define PMA_RX_MSG_DCO_OVRD_STAT_3_RXDCOFINE_PROP5_SEL_LOC_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_STAT_3_RXDCOFINE_PROP6_SEL_LOC_BF_OFF (18)
#define PMA_RX_MSG_DCO_OVRD_STAT_3_RXDCOFINE_PROP6_SEL_LOC_BF_WID ( 3)
#define PMA_RX_MSG_DCO_OVRD_STAT_3_RXDCOFINE_PROP6_SEL_LOC_BF_MSK (0x001C0000)
#define PMA_RX_MSG_DCO_OVRD_STAT_3_RXDCOFINE_PROP6_SEL_LOC_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_STAT_3_RXDCOFINE_PROP7_SEL_LOC_BF_OFF (21)
#define PMA_RX_MSG_DCO_OVRD_STAT_3_RXDCOFINE_PROP7_SEL_LOC_BF_WID ( 3)
#define PMA_RX_MSG_DCO_OVRD_STAT_3_RXDCOFINE_PROP7_SEL_LOC_BF_MSK (0x00E00000)
#define PMA_RX_MSG_DCO_OVRD_STAT_3_RXDCOFINE_PROP7_SEL_LOC_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXDCO_OVERRIDE_STATUS_4 register description at address offset 0x2a4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxdco_override_status_4
  * RxDCO Override Status
  */

typedef union {
  struct {
    uint32_t RXDCO_PKSNS_COMP_EN_LOC : 1;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RXDCO_PKSNS_VREF_SEL_LOC : 6;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t RXDCO_LDO_DCO_VREF_SEL_LOC : 6;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 18;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_dco_ovrd_stat_4_reg_t;

#define PMA_RX_MSG_DCO_OVRD_STAT_4_DEFAULT (0x00000000U)
#define PMA_RX_MSG_DCO_OVRD_STAT_4_RD_MASK (0x00003f7fU)
#define PMA_RX_MSG_DCO_OVRD_STAT_4_WR_MASK (0x00000000U)


///< TBD
#define PMA_RX_MSG_DCO_OVRD_STAT_4_RXDCO_PKSNS_COMP_EN_LOC_BF_OFF ( 0)
#define PMA_RX_MSG_DCO_OVRD_STAT_4_RXDCO_PKSNS_COMP_EN_LOC_BF_WID ( 1)
#define PMA_RX_MSG_DCO_OVRD_STAT_4_RXDCO_PKSNS_COMP_EN_LOC_BF_MSK (0x00000001)
#define PMA_RX_MSG_DCO_OVRD_STAT_4_RXDCO_PKSNS_COMP_EN_LOC_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_STAT_4_RXDCO_PKSNS_VREF_SEL_LOC_BF_OFF ( 1)
#define PMA_RX_MSG_DCO_OVRD_STAT_4_RXDCO_PKSNS_VREF_SEL_LOC_BF_WID ( 6)
#define PMA_RX_MSG_DCO_OVRD_STAT_4_RXDCO_PKSNS_VREF_SEL_LOC_BF_MSK (0x0000007E)
#define PMA_RX_MSG_DCO_OVRD_STAT_4_RXDCO_PKSNS_VREF_SEL_LOC_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_DCO_OVRD_STAT_4_RXDCO_LDO_DCO_VREF_SEL_LOC_BF_OFF ( 8)
#define PMA_RX_MSG_DCO_OVRD_STAT_4_RXDCO_LDO_DCO_VREF_SEL_LOC_BF_WID ( 6)
#define PMA_RX_MSG_DCO_OVRD_STAT_4_RXDCO_LDO_DCO_VREF_SEL_LOC_BF_MSK (0x00003F00)
#define PMA_RX_MSG_DCO_OVRD_STAT_4_RXDCO_LDO_DCO_VREF_SEL_LOC_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXPHDT_OVERRIDE_STATUS_0 register description at address offset 0x2a8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxphdt_override_status_0
  * Rx Phase Detector Status
  */

typedef union {
  struct {
    uint32_t RXPHDT_REF10ERR_LOC : 4;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RXPHDT_REF11ERR_LOC : 5;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t RXPHDT_REF1XDATA_LOC : 5;
    ///< TBD
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t RXPHDT_REFLVL_UPDATE_REQ_LOC : 1;
    ///< Threshold update request from LMS Engine
    ///< AccessType="RO/V" BitOffset="14" ResetValue="0x0"
    uint32_t  : 17;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_phdt_ovrd_stat_0_reg_t;

#define PMA_RX_MSG_PHDT_OVRD_STAT_0_DEFAULT (0x00000000U)
#define PMA_RX_MSG_PHDT_OVRD_STAT_0_RD_MASK (0x00007fffU)
#define PMA_RX_MSG_PHDT_OVRD_STAT_0_WR_MASK (0x00000000U)


///< TBD
#define PMA_RX_MSG_PHDT_OVRD_STAT_0_RXPHDT_REF10ERR_LOC_BF_OFF ( 0)
#define PMA_RX_MSG_PHDT_OVRD_STAT_0_RXPHDT_REF10ERR_LOC_BF_WID ( 4)
#define PMA_RX_MSG_PHDT_OVRD_STAT_0_RXPHDT_REF10ERR_LOC_BF_MSK (0x0000000F)
#define PMA_RX_MSG_PHDT_OVRD_STAT_0_RXPHDT_REF10ERR_LOC_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_PHDT_OVRD_STAT_0_RXPHDT_REF11ERR_LOC_BF_OFF ( 4)
#define PMA_RX_MSG_PHDT_OVRD_STAT_0_RXPHDT_REF11ERR_LOC_BF_WID ( 5)
#define PMA_RX_MSG_PHDT_OVRD_STAT_0_RXPHDT_REF11ERR_LOC_BF_MSK (0x000001F0)
#define PMA_RX_MSG_PHDT_OVRD_STAT_0_RXPHDT_REF11ERR_LOC_BF_DEF (0x00000000)

///< TBD
#define PMA_RX_MSG_PHDT_OVRD_STAT_0_RXPHDT_REF1XDATA_LOC_BF_OFF ( 9)
#define PMA_RX_MSG_PHDT_OVRD_STAT_0_RXPHDT_REF1XDATA_LOC_BF_WID ( 5)
#define PMA_RX_MSG_PHDT_OVRD_STAT_0_RXPHDT_REF1XDATA_LOC_BF_MSK (0x00003E00)
#define PMA_RX_MSG_PHDT_OVRD_STAT_0_RXPHDT_REF1XDATA_LOC_BF_DEF (0x00000000)

///< Threshold update request from LMS Engine
#define PMA_RX_MSG_PHDT_OVRD_STAT_0_RXPHDT_REFLVL_UPDATE_REQ_LOC_BF_OFF (14)
#define PMA_RX_MSG_PHDT_OVRD_STAT_0_RXPHDT_REFLVL_UPDATE_REQ_LOC_BF_WID ( 1)
#define PMA_RX_MSG_PHDT_OVRD_STAT_0_RXPHDT_REFLVL_UPDATE_REQ_LOC_BF_MSK (0x00004000)
#define PMA_RX_MSG_PHDT_OVRD_STAT_0_RXPHDT_REFLVL_UPDATE_REQ_LOC_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_ADC_SPARE register description at address offset 0x2ac
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_adc_spare
  * Rx ADC Spare
  */

typedef union {
  struct {
    uint32_t RX_ADC_SPARE : 4;
    ///< Rx ADC Spare
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_adc_spare_reg_t;

#define PMA_RX_MGS_ADC_SPARE_DEFAULT (0x00000000U)
#define PMA_RX_MGS_ADC_SPARE_RD_MASK (0x0000000fU)
#define PMA_RX_MGS_ADC_SPARE_WR_MASK (0x00000000U)


///< Rx ADC Spare
#define PMA_RX_MGS_ADC_SPARE_RX_ADC_SPARE_BF_OFF ( 0)
#define PMA_RX_MGS_ADC_SPARE_RX_ADC_SPARE_BF_WID ( 4)
#define PMA_RX_MGS_ADC_SPARE_RX_ADC_SPARE_BF_MSK (0x0000000F)
#define PMA_RX_MGS_ADC_SPARE_RX_ADC_SPARE_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CKM_CTRL_0 register description at address offset 0x2b0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_ckm_ctrl_0
  * Clock Measurment Ctrl
  */

typedef union {
  struct {
    uint32_t CKM_AVG_EN : 1;
    ///< Clock measurment averager enable.  When this is 1, the clock measurment
    ///< will an average of 4 measurments.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CKM_CLK_EN : 1;
    ///< Clock measurment clock enable.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t CKM_CONTINUOUS : 1;
    ///< Clock measurment continous mode.  When this is set.  The measurment
    ///< block will continue take the clock measurment, until ckm_clk_en set
    ///< to 0
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t CKM_DIG_MEAS_EN : 1;
    ///< Clock measurment in digital domain.  Perform the clock measuement
    ///< that the clocks are in the digital domain. Always set to 1.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t CKM_DIG_MEAS_ERR_CLR : 1;
    ///< Clock measurment error clear.  To clear the error status
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t CKM_EN : 1;
    ///< Clock measurment enable.
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t CKM_MEAS_CK_SEL : 4;
    ///< Clock measurment input clock select.
    ///< Selection TBD
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t CKM_MEA7_SRC_SEL : 1;
    ///< Clock measurment input clock source select when ckm_meas_ck_sel =
    ///< 7 (TBD)
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t  : 21;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_ckm_ctrl_0_reg_t;

#define PMA_RX_MGS_CKM_CTRL_0_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CKM_CTRL_0_RD_MASK (0x000007ffU)
#define PMA_RX_MGS_CKM_CTRL_0_WR_MASK (0x000007ffU)


///< Clock measurment averager enable.  When this is 1, the clock measurment
///< will an average of 4 measurments.
#define PMA_RX_MGS_CKM_CTRL_0_CKM_AVG_EN_BF_OFF ( 0)
#define PMA_RX_MGS_CKM_CTRL_0_CKM_AVG_EN_BF_WID ( 1)
#define PMA_RX_MGS_CKM_CTRL_0_CKM_AVG_EN_BF_MSK (0x00000001)
#define PMA_RX_MGS_CKM_CTRL_0_CKM_AVG_EN_BF_DEF (0x00000000)

///< Clock measurment clock enable.
#define PMA_RX_MGS_CKM_CTRL_0_CKM_CLK_EN_BF_OFF ( 1)
#define PMA_RX_MGS_CKM_CTRL_0_CKM_CLK_EN_BF_WID ( 1)
#define PMA_RX_MGS_CKM_CTRL_0_CKM_CLK_EN_BF_MSK (0x00000002)
#define PMA_RX_MGS_CKM_CTRL_0_CKM_CLK_EN_BF_DEF (0x00000000)

///< Clock measurment continous mode.  When this is set.  The measurment
///< block will continue take the clock measurment, until ckm_clk_en set
///< to 0
#define PMA_RX_MGS_CKM_CTRL_0_CKM_CONTINUOUS_BF_OFF ( 2)
#define PMA_RX_MGS_CKM_CTRL_0_CKM_CONTINUOUS_BF_WID ( 1)
#define PMA_RX_MGS_CKM_CTRL_0_CKM_CONTINUOUS_BF_MSK (0x00000004)
#define PMA_RX_MGS_CKM_CTRL_0_CKM_CONTINUOUS_BF_DEF (0x00000000)

///< Clock measurment in digital domain.  Perform the clock measuement
///< that the clocks are in the digital domain. Always set to 1.
#define PMA_RX_MGS_CKM_CTRL_0_CKM_DIG_MEAS_EN_BF_OFF ( 3)
#define PMA_RX_MGS_CKM_CTRL_0_CKM_DIG_MEAS_EN_BF_WID ( 1)
#define PMA_RX_MGS_CKM_CTRL_0_CKM_DIG_MEAS_EN_BF_MSK (0x00000008)
#define PMA_RX_MGS_CKM_CTRL_0_CKM_DIG_MEAS_EN_BF_DEF (0x00000000)

///< Clock measurment error clear.  To clear the error status
#define PMA_RX_MGS_CKM_CTRL_0_CKM_DIG_MEAS_ERR_CLR_BF_OFF ( 4)
#define PMA_RX_MGS_CKM_CTRL_0_CKM_DIG_MEAS_ERR_CLR_BF_WID ( 1)
#define PMA_RX_MGS_CKM_CTRL_0_CKM_DIG_MEAS_ERR_CLR_BF_MSK (0x00000010)
#define PMA_RX_MGS_CKM_CTRL_0_CKM_DIG_MEAS_ERR_CLR_BF_DEF (0x00000000)

///< Clock measurment enable.
#define PMA_RX_MGS_CKM_CTRL_0_CKM_EN_BF_OFF ( 5)
#define PMA_RX_MGS_CKM_CTRL_0_CKM_EN_BF_WID ( 1)
#define PMA_RX_MGS_CKM_CTRL_0_CKM_EN_BF_MSK (0x00000020)
#define PMA_RX_MGS_CKM_CTRL_0_CKM_EN_BF_DEF (0x00000000)

///< Clock measurment input clock select.
///< Selection TBD
#define PMA_RX_MGS_CKM_CTRL_0_CKM_MEAS_CK_SEL_BF_OFF ( 6)
#define PMA_RX_MGS_CKM_CTRL_0_CKM_MEAS_CK_SEL_BF_WID ( 4)
#define PMA_RX_MGS_CKM_CTRL_0_CKM_MEAS_CK_SEL_BF_MSK (0x000003C0)
#define PMA_RX_MGS_CKM_CTRL_0_CKM_MEAS_CK_SEL_BF_DEF (0x00000000)

///< Clock measurment input clock source select when ckm_meas_ck_sel =
///< 7 (TBD)
#define PMA_RX_MGS_CKM_CTRL_0_CKM_MEA7_SRC_SEL_BF_OFF (10)
#define PMA_RX_MGS_CKM_CTRL_0_CKM_MEA7_SRC_SEL_BF_WID ( 1)
#define PMA_RX_MGS_CKM_CTRL_0_CKM_MEA7_SRC_SEL_BF_MSK (0x00000400)
#define PMA_RX_MGS_CKM_CTRL_0_CKM_MEA7_SRC_SEL_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CKM_CTRL_1 register description at address offset 0x2b4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_ckm_ctrl_1
  * Clock Measurment Ctrl
  */

typedef union {
  struct {
    uint32_t CKM_RESULT_CLR : 1;
    ///< Clock measurment clear.  Set this to 1 to clear all the measurment
    ///< history
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CKM_START : 1;
    ///< Clock measurment start.  To start the clock measurment.  All clock
    ///< measurment configuration must be set prior to this register is set
    ///< to 1
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t CKM_REF_CK_DIV_RATIO : 3;
    ///< Clock measurment sample clock divider.
    ///< Clock divider ration = 2 ^ cmnckm_ref_ck_div_ratio
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t CKM_WDT_INTERVAL : 2;
    ///< Clock measurment watch dog timer interval.  Time before report the
    ///< block is not able to take any clock measumrent.  For example, the
    ///< measured clock is not toggled
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t CKM_WIN_THR_REF : 25;
    ///< Clock measurment window threshold
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_mgs_ckm_ctrl_1_reg_t;

#define PMA_RX_MGS_CKM_CTRL_1_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CKM_CTRL_1_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_CKM_CTRL_1_WR_MASK (0xffffffffU)


///< Clock measurment clear.  Set this to 1 to clear all the measurment
///< history
#define PMA_RX_MGS_CKM_CTRL_1_CKM_RSLT_CLR_BF_OFF ( 0)
#define PMA_RX_MGS_CKM_CTRL_1_CKM_RSLT_CLR_BF_WID ( 1)
#define PMA_RX_MGS_CKM_CTRL_1_CKM_RSLT_CLR_BF_MSK (0x00000001)
#define PMA_RX_MGS_CKM_CTRL_1_CKM_RSLT_CLR_BF_DEF (0x00000000)

///< Clock measurment start.  To start the clock measurment.  All clock
///< measurment configuration must be set prior to this register is set
///< to 1
#define PMA_RX_MGS_CKM_CTRL_1_CKM_START_BF_OFF ( 1)
#define PMA_RX_MGS_CKM_CTRL_1_CKM_START_BF_WID ( 1)
#define PMA_RX_MGS_CKM_CTRL_1_CKM_START_BF_MSK (0x00000002)
#define PMA_RX_MGS_CKM_CTRL_1_CKM_START_BF_DEF (0x00000000)

///< Clock measurment sample clock divider.
///< Clock divider ration = 2 ^ cmnckm_ref_ck_div_ratio
#define PMA_RX_MGS_CKM_CTRL_1_CKM_REF_CK_DIV_RATIO_BF_OFF ( 2)
#define PMA_RX_MGS_CKM_CTRL_1_CKM_REF_CK_DIV_RATIO_BF_WID ( 3)
#define PMA_RX_MGS_CKM_CTRL_1_CKM_REF_CK_DIV_RATIO_BF_MSK (0x0000001C)
#define PMA_RX_MGS_CKM_CTRL_1_CKM_REF_CK_DIV_RATIO_BF_DEF (0x00000000)

///< Clock measurment watch dog timer interval.  Time before report the
///< block is not able to take any clock measumrent.  For example, the
///< measured clock is not toggled
#define PMA_RX_MGS_CKM_CTRL_1_CKM_WDT_INTERVAL_BF_OFF ( 5)
#define PMA_RX_MGS_CKM_CTRL_1_CKM_WDT_INTERVAL_BF_WID ( 2)
#define PMA_RX_MGS_CKM_CTRL_1_CKM_WDT_INTERVAL_BF_MSK (0x00000060)
#define PMA_RX_MGS_CKM_CTRL_1_CKM_WDT_INTERVAL_BF_DEF (0x00000000)

///< Clock measurment window threshold
#define PMA_RX_MGS_CKM_CTRL_1_CKM_WIN_THR_REF_BF_OFF ( 7)
#define PMA_RX_MGS_CKM_CTRL_1_CKM_WIN_THR_REF_BF_WID (25)
#define PMA_RX_MGS_CKM_CTRL_1_CKM_WIN_THR_REF_BF_MSK (0xFFFFFF80)
#define PMA_RX_MGS_CKM_CTRL_1_CKM_WIN_THR_REF_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CKM_CTRL_2 register description at address offset 0x2b8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_ckm_ctrl_2
  * Clock Measurment Ctrl
  */

typedef union {
  struct {
    uint32_t CKM_MAX_THR : 25;
    ///< Clock measurment windows
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 7;
    ///< Reserved
    ///< AccessType="RO" BitOffset="25" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_ckm_ctrl_2_reg_t;

#define PMA_RX_MGS_CKM_CTRL_2_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CKM_CTRL_2_RD_MASK (0x01ffffffU)
#define PMA_RX_MGS_CKM_CTRL_2_WR_MASK (0x01ffffffU)


///< Clock measurment windows
#define PMA_RX_MGS_CKM_CTRL_2_CKM_MAX_THR_BF_OFF ( 0)
#define PMA_RX_MGS_CKM_CTRL_2_CKM_MAX_THR_BF_WID (25)
#define PMA_RX_MGS_CKM_CTRL_2_CKM_MAX_THR_BF_MSK (0x01FFFFFF)
#define PMA_RX_MGS_CKM_CTRL_2_CKM_MAX_THR_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CKM_STATUS register description at address offset 0x2bc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_ckm_status
  * Clock Measurment Status
  */

typedef union {
  struct {
    uint32_t CKM_DIG_MEAS_ERR : 1;
    ///< CKM error status.  This signal will be asserted to HIGH, if the measured
    ///< counter is overflow.  This signal will remain HIGH until laneckm_dig_masur_err_clr
    ///< is HIGH
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t CKM_RESULT_MEAS : 25;
    ///< Measured clock result.   This value represents how many measured clock
    ///< has counted during measuring window.  When Averager is OFF, this value
    ///< in this register represents the instantanous result from the last
    ///< run.  If Averager is ON.  This value from this register represents
    ///< the average value from the last 4 measured result.
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t CKM_STATUS : 1;
    ///< This is a status indicates the CKM is in the progress taking clock
    ///< clock meaurement.
    ///< AccessType="RO/V" BitOffset="26" ResetValue="0x0"
    uint32_t CKM_VALID_MEAS : 1;
    ///< This indicates the measured result (ckm_result_meas) is valid to be
    ///< read
    ///< AccessType="RO/V" BitOffset="27" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_ckm_stat_reg_t;

#define PMA_RX_MGS_CKM_STAT_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CKM_STAT_RD_MASK (0x0fffffffU)
#define PMA_RX_MGS_CKM_STAT_WR_MASK (0x00000000U)


///< CKM error status.  This signal will be asserted to HIGH, if the measured
///< counter is overflow.  This signal will remain HIGH until laneckm_dig_masur_err_clr
///< is HIGH
#define PMA_RX_MGS_CKM_STAT_CKM_DIG_MEAS_ERR_BF_OFF ( 0)
#define PMA_RX_MGS_CKM_STAT_CKM_DIG_MEAS_ERR_BF_WID ( 1)
#define PMA_RX_MGS_CKM_STAT_CKM_DIG_MEAS_ERR_BF_MSK (0x00000001)
#define PMA_RX_MGS_CKM_STAT_CKM_DIG_MEAS_ERR_BF_DEF (0x00000000)

///< Measured clock result.   This value represents how many measured clock
///< has counted during measuring window.  When Averager is OFF, this value
///< in this register represents the instantanous result from the last
///< run.  If Averager is ON.  This value from this register represents
///< the average value from the last 4 measured result.
#define PMA_RX_MGS_CKM_STAT_CKM_RSLT_MEAS_BF_OFF ( 1)
#define PMA_RX_MGS_CKM_STAT_CKM_RSLT_MEAS_BF_WID (25)
#define PMA_RX_MGS_CKM_STAT_CKM_RSLT_MEAS_BF_MSK (0x03FFFFFE)
#define PMA_RX_MGS_CKM_STAT_CKM_RSLT_MEAS_BF_DEF (0x00000000)

///< This is a status indicates the CKM is in the progress taking clock
///< clock meaurement.
#define PMA_RX_MGS_CKM_STAT_CKM_STAT_BF_OFF (26)
#define PMA_RX_MGS_CKM_STAT_CKM_STAT_BF_WID ( 1)
#define PMA_RX_MGS_CKM_STAT_CKM_STAT_BF_MSK (0x04000000)
#define PMA_RX_MGS_CKM_STAT_CKM_STAT_BF_DEF (0x00000000)

///< This indicates the measured result (ckm_result_meas) is valid to be
///< read
#define PMA_RX_MGS_CKM_STAT_CKM_VALID_MEAS_BF_OFF (27)
#define PMA_RX_MGS_CKM_STAT_CKM_VALID_MEAS_BF_WID ( 1)
#define PMA_RX_MGS_CKM_STAT_CKM_VALID_MEAS_BF_MSK (0x08000000)
#define PMA_RX_MGS_CKM_STAT_CKM_VALID_MEAS_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXBIST_CFG_0 register description at address offset 0x2c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxbist_cfg_0
  * Rx Bist Config
  */

typedef union {
  struct {
    uint32_t RXBIST_BURST_ONE_ERRTYPE : 1;
    ///< RxBist count error type. 0 - Count errors where there are exactly
    ///< 1 errors in a data cycle; 1- Count erros where there are >= 1 erros
    ///< in a data cycle
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXBIST_BURST_TWO_ERRTYPE : 1;
    ///< RxBist count error type. 0 - Count errors where there are exactly
    ///< 2 errors in a data cycle; 1- Count erros where there are >= 2 erros
    ///< in a data cycle
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RXBIST_BURST_THREE_ERRTYPE : 1;
    ///< RxBist count error type. 0 - Count errors where there are exactly
    ///< 3 errors in a data cycle; 1- Count erros where there are >= 3 erros
    ///< in a data cycle
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t RXBIST_BURST_FOUR_ERRTYPE : 1;
    ///< RxBist count error type. 0 - Count errors where there are exactly
    ///< 4 errors in a data cycle; 1- Count erros where there are >= 4 erros
    ///< in a data cycle
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RXBIST_CDRLOCK2DATA_BYPASS : 1;
    ///< RxBist bypass for input data valid
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RXBIST_CLEAR_ERRCOUNT : 1;
    ///< RxBist to clearn all counters
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t RXBIST_ERR_TRIG_TYPE : 1;
    ///< RxBist error trigger type. 0 - any bit error; 1 - satisfying condition
    ///< defined by cfg_rw_rxbist_firsterr_type
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t RXBIST_ERRTYPE : 1;
    ///< RxBist error detection type.  0 - bit error; 1 - byte error
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t RXBIST_MOSTRECENT_ERR : 1;
    ///< RxBist log mode. 0 - Log first error; 1 - log most recent error instead
    ///< of the first error
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RXBIST_STATUS_HOLD : 1;
    ///< RxBist status hold.  To freeze all RxBIst status
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t RXBIST_ERRMASK : 2;
    ///< RxBist error mask.  2'b0x- don't mask out any bits; 2'b10 - mask out
    ///< even bits errrors; 2'b11 - mask out odd bits errors
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RXBIST_LOCKCHK_COUNT : 2;
    ///< RxBist lock check. Number of cycles to check for lock when enabled
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t RXBIST_RELOCK_ITERCOUNT : 2;
    ///< RxBist lock check iteration. Iterations to try re-locking if got an
    ///< error within lockchk cycles
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t RXBIST_CDRLOCK2DATA_POSTAMBLE : 16;
    ///< RxBist - initialization delay.  It will wait # of cycles after data
    ///< valid before beginning the test
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_msg_bist_cfg_0_reg_t;

#define PMA_RX_MSG_BIST_CFG_0_DEFAULT (0x00000000U)
#define PMA_RX_MSG_BIST_CFG_0_RD_MASK (0xffffffffU)
#define PMA_RX_MSG_BIST_CFG_0_WR_MASK (0xffffffffU)


///< RxBist count error type. 0 - Count errors where there are exactly
///< 1 errors in a data cycle; 1- Count erros where there are >= 1 erros
///< in a data cycle
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_BURST_ONE_ERRTYPE_BF_OFF ( 0)
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_BURST_ONE_ERRTYPE_BF_WID ( 1)
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_BURST_ONE_ERRTYPE_BF_MSK (0x00000001)
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_BURST_ONE_ERRTYPE_BF_DEF (0x00000000)

///< RxBist count error type. 0 - Count errors where there are exactly
///< 2 errors in a data cycle; 1- Count erros where there are >= 2 erros
///< in a data cycle
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_BURST_TWO_ERRTYPE_BF_OFF ( 1)
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_BURST_TWO_ERRTYPE_BF_WID ( 1)
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_BURST_TWO_ERRTYPE_BF_MSK (0x00000002)
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_BURST_TWO_ERRTYPE_BF_DEF (0x00000000)

///< RxBist count error type. 0 - Count errors where there are exactly
///< 3 errors in a data cycle; 1- Count erros where there are >= 3 erros
///< in a data cycle
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_BURST_THREE_ERRTYPE_BF_OFF ( 2)
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_BURST_THREE_ERRTYPE_BF_WID ( 1)
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_BURST_THREE_ERRTYPE_BF_MSK (0x00000004)
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_BURST_THREE_ERRTYPE_BF_DEF (0x00000000)

///< RxBist count error type. 0 - Count errors where there are exactly
///< 4 errors in a data cycle; 1- Count erros where there are >= 4 erros
///< in a data cycle
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_BURST_FOUR_ERRTYPE_BF_OFF ( 3)
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_BURST_FOUR_ERRTYPE_BF_WID ( 1)
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_BURST_FOUR_ERRTYPE_BF_MSK (0x00000008)
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_BURST_FOUR_ERRTYPE_BF_DEF (0x00000000)

///< RxBist bypass for input data valid
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_CDRLOCK2DATA_BYP_BF_OFF ( 4)
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_CDRLOCK2DATA_BYP_BF_WID ( 1)
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_CDRLOCK2DATA_BYP_BF_MSK (0x00000010)
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_CDRLOCK2DATA_BYP_BF_DEF (0x00000000)

///< RxBist to clearn all counters
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_CLR_ERRCNT_BF_OFF ( 5)
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_CLR_ERRCNT_BF_WID ( 1)
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_CLR_ERRCNT_BF_MSK (0x00000020)
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_CLR_ERRCNT_BF_DEF (0x00000000)

///< RxBist error trigger type. 0 - any bit error; 1 - satisfying condition
///< defined by cfg_rw_rxbist_firsterr_type
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_ERR_TRIG_TYPE_BF_OFF ( 6)
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_ERR_TRIG_TYPE_BF_WID ( 1)
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_ERR_TRIG_TYPE_BF_MSK (0x00000040)
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_ERR_TRIG_TYPE_BF_DEF (0x00000000)

///< RxBist error detection type.  0 - bit error; 1 - byte error
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_ERRTYPE_BF_OFF ( 7)
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_ERRTYPE_BF_WID ( 1)
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_ERRTYPE_BF_MSK (0x00000080)
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_ERRTYPE_BF_DEF (0x00000000)

///< RxBist log mode. 0 - Log first error; 1 - log most recent error instead
///< of the first error
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_MOSTRECENT_ERR_BF_OFF ( 8)
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_MOSTRECENT_ERR_BF_WID ( 1)
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_MOSTRECENT_ERR_BF_MSK (0x00000100)
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_MOSTRECENT_ERR_BF_DEF (0x00000000)

///< RxBist status hold.  To freeze all RxBIst status
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_STAT_HOLD_BF_OFF ( 9)
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_STAT_HOLD_BF_WID ( 1)
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_STAT_HOLD_BF_MSK (0x00000200)
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_STAT_HOLD_BF_DEF (0x00000000)

///< RxBist error mask.  2'b0x- don't mask out any bits; 2'b10 - mask out
///< even bits errrors; 2'b11 - mask out odd bits errors
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_ERRMASK_BF_OFF (10)
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_ERRMASK_BF_WID ( 2)
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_ERRMASK_BF_MSK (0x00000C00)
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_ERRMASK_BF_DEF (0x00000000)

///< RxBist lock check. Number of cycles to check for lock when enabled
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_LOCKCHK_CNT_BF_OFF (12)
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_LOCKCHK_CNT_BF_WID ( 2)
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_LOCKCHK_CNT_BF_MSK (0x00003000)
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_LOCKCHK_CNT_BF_DEF (0x00000000)

///< RxBist lock check iteration. Iterations to try re-locking if got an
///< error within lockchk cycles
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_RELOCK_ITERCNT_BF_OFF (14)
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_RELOCK_ITERCNT_BF_WID ( 2)
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_RELOCK_ITERCNT_BF_MSK (0x0000C000)
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_RELOCK_ITERCNT_BF_DEF (0x00000000)

///< RxBist - initialization delay.  It will wait # of cycles after data
///< valid before beginning the test
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_CDRLOCK2DATA_POSTAMBLE_BF_OFF (16)
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_CDRLOCK2DATA_POSTAMBLE_BF_WID (16)
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_CDRLOCK2DATA_POSTAMBLE_BF_MSK (0xFFFF0000)
#define PMA_RX_MSG_BIST_CFG_0_RXBIST_CDRLOCK2DATA_POSTAMBLE_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXBIST_CFG_1 register description at address offset 0x2c4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxbist_cfg_1
  * Rx Bist Config
  */

typedef union {
  struct {
    uint32_t RXBIST_FIRSTERR_TYPE : 3;
    ///< RxBist first error captured type. 0 - on error counter; 1 - on burst
    ///< one counter; 2 - on burst two counter; 3 - on burst three counter;
    ///< 4 - on burst four counter; others - on error counter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXBIST_MAXBITCNT : 3;
    ///< RxBist run-timer counter (data check count) limit in term of num Rx
    ///< clocks.  0: disabled; 1 - 2^20; 2 - 2^21; 3 - 2^22; 4 - 2^23; 5 -
    ///< 2^24; 6 2^28; 7 - 2^32
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RXBIST_UDP_SIZE : 9;
    ///< RxBist Bit UDP data size. It should be at least equal to the RX parallel
    ///< word width. For TX2RX loopback, must match txbist_udp_size.
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t RXBIST_EN : 1;
    ///< RxBist enable
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RXBIST_MODESEL : 4;
    ///< RxBist mode select
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_bist_cfg_1_reg_t;

#define PMA_RX_MSG_BIST_CFG_1_DEFAULT (0x00000000U)
#define PMA_RX_MSG_BIST_CFG_1_RD_MASK (0x000fffffU)
#define PMA_RX_MSG_BIST_CFG_1_WR_MASK (0x000fffffU)


///< RxBist first error captured type. 0 - on error counter; 1 - on burst
///< one counter; 2 - on burst two counter; 3 - on burst three counter;
///< 4 - on burst four counter; others - on error counter
#define PMA_RX_MSG_BIST_CFG_1_RXBIST_FIRSTERR_TYPE_BF_OFF ( 0)
#define PMA_RX_MSG_BIST_CFG_1_RXBIST_FIRSTERR_TYPE_BF_WID ( 3)
#define PMA_RX_MSG_BIST_CFG_1_RXBIST_FIRSTERR_TYPE_BF_MSK (0x00000007)
#define PMA_RX_MSG_BIST_CFG_1_RXBIST_FIRSTERR_TYPE_BF_DEF (0x00000000)

///< RxBist run-timer counter (data check count) limit in term of num Rx
///< clocks.  0: disabled; 1 - 2^20; 2 - 2^21; 3 - 2^22; 4 - 2^23; 5 -
///< 2^24; 6 2^28; 7 - 2^32
#define PMA_RX_MSG_BIST_CFG_1_RXBIST_MAXBITCNT_BF_OFF ( 3)
#define PMA_RX_MSG_BIST_CFG_1_RXBIST_MAXBITCNT_BF_WID ( 3)
#define PMA_RX_MSG_BIST_CFG_1_RXBIST_MAXBITCNT_BF_MSK (0x00000038)
#define PMA_RX_MSG_BIST_CFG_1_RXBIST_MAXBITCNT_BF_DEF (0x00000000)

///< RxBist Bit UDP data size. It should be at least equal to the RX parallel
///< word width. For TX2RX loopback, must match txbist_udp_size.
#define PMA_RX_MSG_BIST_CFG_1_RXBIST_UDP_SIZE_BF_OFF ( 6)
#define PMA_RX_MSG_BIST_CFG_1_RXBIST_UDP_SIZE_BF_WID ( 9)
#define PMA_RX_MSG_BIST_CFG_1_RXBIST_UDP_SIZE_BF_MSK (0x00007FC0)
#define PMA_RX_MSG_BIST_CFG_1_RXBIST_UDP_SIZE_BF_DEF (0x00000000)

///< RxBist enable
#define PMA_RX_MSG_BIST_CFG_1_RXBIST_EN_BF_OFF (15)
#define PMA_RX_MSG_BIST_CFG_1_RXBIST_EN_BF_WID ( 1)
#define PMA_RX_MSG_BIST_CFG_1_RXBIST_EN_BF_MSK (0x00008000)
#define PMA_RX_MSG_BIST_CFG_1_RXBIST_EN_BF_DEF (0x00000000)

///< RxBist mode select
#define PMA_RX_MSG_BIST_CFG_1_RXBIST_MODESEL_BF_OFF (16)
#define PMA_RX_MSG_BIST_CFG_1_RXBIST_MODESEL_BF_WID ( 4)
#define PMA_RX_MSG_BIST_CFG_1_RXBIST_MODESEL_BF_MSK (0x000F0000)
#define PMA_RX_MSG_BIST_CFG_1_RXBIST_MODESEL_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXBIST_SEED register description at address offset 0x2c8
  *
  * Register default value:        0x7FFFFFFF
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxbist_seed
  * Rx Bist Seed
  */

typedef union {
  struct {
    uint32_t RXBIST_SEED : 31;
    ///< RxBist Initial Seed
    ///< AccessType="RW" BitOffset="0" ResetValue="0x7FFFFFFF"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_bist_seed_reg_t;

#define PMA_RX_MSG_BIST_SEED_DEFAULT (0x7fffffffU)
#define PMA_RX_MSG_BIST_SEED_RD_MASK (0x7fffffffU)
#define PMA_RX_MSG_BIST_SEED_WR_MASK (0x7fffffffU)


///< RxBist Initial Seed
#define PMA_RX_MSG_BIST_SEED_RXBIST_SEED_BF_OFF ( 0)
#define PMA_RX_MSG_BIST_SEED_RXBIST_SEED_BF_WID (31)
#define PMA_RX_MSG_BIST_SEED_RXBIST_SEED_BF_MSK (0x7FFFFFFF)
#define PMA_RX_MSG_BIST_SEED_RXBIST_SEED_BF_DEF (0x7FFFFFFF)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXBIST_UDP_VF00 register description at address offset 0x2cc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxbist_udp_vf00
  * RxBist UDP patern
  */

typedef union {
  struct {
    uint32_t RXBIST_UDP_VF00 : 32;
    ///< RxBist UDP pattern
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_msg_bist_udp_vf00_reg_t;

#define PMA_RX_MSG_BIST_UDP_VF00_DEFAULT (0x00000000U)
#define PMA_RX_MSG_BIST_UDP_VF00_RD_MASK (0xffffffffU)
#define PMA_RX_MSG_BIST_UDP_VF00_WR_MASK (0xffffffffU)


///< RxBist UDP pattern
#define PMA_RX_MSG_BIST_UDP_VF00_RXBIST_UDP_VF00_BF_OFF ( 0)
#define PMA_RX_MSG_BIST_UDP_VF00_RXBIST_UDP_VF00_BF_WID (32)
#define PMA_RX_MSG_BIST_UDP_VF00_RXBIST_UDP_VF00_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MSG_BIST_UDP_VF00_RXBIST_UDP_VF00_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXBIST_UDP_VF01 register description at address offset 0x2d0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxbist_udp_vf01
  * RxBist UDP patern
  */

typedef union {
  struct {
    uint32_t RXBIST_UDP_VF01 : 32;
    ///< RxBist UDP pattern
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_msg_bist_udp_vf01_reg_t;

#define PMA_RX_MSG_BIST_UDP_VF01_DEFAULT (0x00000000U)
#define PMA_RX_MSG_BIST_UDP_VF01_RD_MASK (0xffffffffU)
#define PMA_RX_MSG_BIST_UDP_VF01_WR_MASK (0xffffffffU)


///< RxBist UDP pattern
#define PMA_RX_MSG_BIST_UDP_VF01_RXBIST_UDP_VF01_BF_OFF ( 0)
#define PMA_RX_MSG_BIST_UDP_VF01_RXBIST_UDP_VF01_BF_WID (32)
#define PMA_RX_MSG_BIST_UDP_VF01_RXBIST_UDP_VF01_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MSG_BIST_UDP_VF01_RXBIST_UDP_VF01_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXBIST_UDP_VF02 register description at address offset 0x2d4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxbist_udp_vf02
  * RxBist UDP patern
  */

typedef union {
  struct {
    uint32_t RXBIST_UDP_VF02 : 32;
    ///< RxBist UDP pattern
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_msg_bist_udp_vf02_reg_t;

#define PMA_RX_MSG_BIST_UDP_VF02_DEFAULT (0x00000000U)
#define PMA_RX_MSG_BIST_UDP_VF02_RD_MASK (0xffffffffU)
#define PMA_RX_MSG_BIST_UDP_VF02_WR_MASK (0xffffffffU)


///< RxBist UDP pattern
#define PMA_RX_MSG_BIST_UDP_VF02_RXBIST_UDP_VF02_BF_OFF ( 0)
#define PMA_RX_MSG_BIST_UDP_VF02_RXBIST_UDP_VF02_BF_WID (32)
#define PMA_RX_MSG_BIST_UDP_VF02_RXBIST_UDP_VF02_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MSG_BIST_UDP_VF02_RXBIST_UDP_VF02_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXBIST_UDP_VF03 register description at address offset 0x2d8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxbist_udp_vf03
  * RxBist UDP patern
  */

typedef union {
  struct {
    uint32_t RXBIST_UDP_VF03 : 32;
    ///< RxBist UDP pattern
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_msg_bist_udp_vf03_reg_t;

#define PMA_RX_MSG_BIST_UDP_VF03_DEFAULT (0x00000000U)
#define PMA_RX_MSG_BIST_UDP_VF03_RD_MASK (0xffffffffU)
#define PMA_RX_MSG_BIST_UDP_VF03_WR_MASK (0xffffffffU)


///< RxBist UDP pattern
#define PMA_RX_MSG_BIST_UDP_VF03_RXBIST_UDP_VF03_BF_OFF ( 0)
#define PMA_RX_MSG_BIST_UDP_VF03_RXBIST_UDP_VF03_BF_WID (32)
#define PMA_RX_MSG_BIST_UDP_VF03_RXBIST_UDP_VF03_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MSG_BIST_UDP_VF03_RXBIST_UDP_VF03_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXBIST_UDP_VF04 register description at address offset 0x2dc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxbist_udp_vf04
  * RxBist UDP patern
  */

typedef union {
  struct {
    uint32_t RXBIST_UDP_VF04 : 32;
    ///< RxBist UDP pattern
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_msg_bist_udp_vf04_reg_t;

#define PMA_RX_MSG_BIST_UDP_VF04_DEFAULT (0x00000000U)
#define PMA_RX_MSG_BIST_UDP_VF04_RD_MASK (0xffffffffU)
#define PMA_RX_MSG_BIST_UDP_VF04_WR_MASK (0xffffffffU)


///< RxBist UDP pattern
#define PMA_RX_MSG_BIST_UDP_VF04_RXBIST_UDP_VF04_BF_OFF ( 0)
#define PMA_RX_MSG_BIST_UDP_VF04_RXBIST_UDP_VF04_BF_WID (32)
#define PMA_RX_MSG_BIST_UDP_VF04_RXBIST_UDP_VF04_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MSG_BIST_UDP_VF04_RXBIST_UDP_VF04_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXBIST_UDP_VF05 register description at address offset 0x2e0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxbist_udp_vf05
  * RxBist UDP patern
  */

typedef union {
  struct {
    uint32_t RXBIST_UDP_VF05 : 32;
    ///< RxBist UDP pattern
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_msg_bist_udp_vf05_reg_t;

#define PMA_RX_MSG_BIST_UDP_VF05_DEFAULT (0x00000000U)
#define PMA_RX_MSG_BIST_UDP_VF05_RD_MASK (0xffffffffU)
#define PMA_RX_MSG_BIST_UDP_VF05_WR_MASK (0xffffffffU)


///< RxBist UDP pattern
#define PMA_RX_MSG_BIST_UDP_VF05_RXBIST_UDP_VF05_BF_OFF ( 0)
#define PMA_RX_MSG_BIST_UDP_VF05_RXBIST_UDP_VF05_BF_WID (32)
#define PMA_RX_MSG_BIST_UDP_VF05_RXBIST_UDP_VF05_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MSG_BIST_UDP_VF05_RXBIST_UDP_VF05_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXBIST_UDP_VF06 register description at address offset 0x2e4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxbist_udp_vf06
  * RxBist UDP patern
  */

typedef union {
  struct {
    uint32_t RXBIST_UDP_VF06 : 32;
    ///< RxBist UDP pattern
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_msg_bist_udp_vf06_reg_t;

#define PMA_RX_MSG_BIST_UDP_VF06_DEFAULT (0x00000000U)
#define PMA_RX_MSG_BIST_UDP_VF06_RD_MASK (0xffffffffU)
#define PMA_RX_MSG_BIST_UDP_VF06_WR_MASK (0xffffffffU)


///< RxBist UDP pattern
#define PMA_RX_MSG_BIST_UDP_VF06_RXBIST_UDP_VF06_BF_OFF ( 0)
#define PMA_RX_MSG_BIST_UDP_VF06_RXBIST_UDP_VF06_BF_WID (32)
#define PMA_RX_MSG_BIST_UDP_VF06_RXBIST_UDP_VF06_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MSG_BIST_UDP_VF06_RXBIST_UDP_VF06_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXBIST_UDP_VF07 register description at address offset 0x2e8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxbist_udp_vf07
  * RxBist UDP patern
  */

typedef union {
  struct {
    uint32_t RXBIST_UDP_VF07 : 32;
    ///< RxBist UDP pattern
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_msg_bist_udp_vf07_reg_t;

#define PMA_RX_MSG_BIST_UDP_VF07_DEFAULT (0x00000000U)
#define PMA_RX_MSG_BIST_UDP_VF07_RD_MASK (0xffffffffU)
#define PMA_RX_MSG_BIST_UDP_VF07_WR_MASK (0xffffffffU)


///< RxBist UDP pattern
#define PMA_RX_MSG_BIST_UDP_VF07_RXBIST_UDP_VF07_BF_OFF ( 0)
#define PMA_RX_MSG_BIST_UDP_VF07_RXBIST_UDP_VF07_BF_WID (32)
#define PMA_RX_MSG_BIST_UDP_VF07_RXBIST_UDP_VF07_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MSG_BIST_UDP_VF07_RXBIST_UDP_VF07_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXBIST_UDP_VF08 register description at address offset 0x2ec
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxbist_udp_vf08
  * RxBist UDP patern
  */

typedef union {
  struct {
    uint32_t RXBIST_UDP_VF08 : 32;
    ///< RxBist UDP pattern
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_msg_bist_udp_vf08_reg_t;

#define PMA_RX_MSG_BIST_UDP_VF08_DEFAULT (0x00000000U)
#define PMA_RX_MSG_BIST_UDP_VF08_RD_MASK (0xffffffffU)
#define PMA_RX_MSG_BIST_UDP_VF08_WR_MASK (0xffffffffU)


///< RxBist UDP pattern
#define PMA_RX_MSG_BIST_UDP_VF08_RXBIST_UDP_VF08_BF_OFF ( 0)
#define PMA_RX_MSG_BIST_UDP_VF08_RXBIST_UDP_VF08_BF_WID (32)
#define PMA_RX_MSG_BIST_UDP_VF08_RXBIST_UDP_VF08_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MSG_BIST_UDP_VF08_RXBIST_UDP_VF08_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXBIST_UDP_VF09 register description at address offset 0x2f0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxbist_udp_vf09
  * RxBist UDP patern
  */

typedef union {
  struct {
    uint32_t RXBIST_UDP_VF09 : 32;
    ///< RxBist UDP pattern
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_msg_bist_udp_vf09_reg_t;

#define PMA_RX_MSG_BIST_UDP_VF09_DEFAULT (0x00000000U)
#define PMA_RX_MSG_BIST_UDP_VF09_RD_MASK (0xffffffffU)
#define PMA_RX_MSG_BIST_UDP_VF09_WR_MASK (0xffffffffU)


///< RxBist UDP pattern
#define PMA_RX_MSG_BIST_UDP_VF09_RXBIST_UDP_VF09_BF_OFF ( 0)
#define PMA_RX_MSG_BIST_UDP_VF09_RXBIST_UDP_VF09_BF_WID (32)
#define PMA_RX_MSG_BIST_UDP_VF09_RXBIST_UDP_VF09_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MSG_BIST_UDP_VF09_RXBIST_UDP_VF09_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXBIST_ERRCOUNT_STATUS_0 register description at address offset 0x2f4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxbist_errcount_status_0
  * RxBist Error Count Status
  */

typedef union {
  struct {
    uint32_t RXBIST_BURST_ERRCOUNT_ONE_OVERFLOW : 1;
    ///< RxBist Burst error count (1 or >= 1) overflow
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RXBIST_BURST_ERRCOUNT_TWO_OVERFLOW : 1;
    ///< RxBist Burst error count (2 or >= 2) overflow
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t RXBIST_BURST_ERRCOUNT_THREE_OVERFLOW : 1;
    ///< RxBist Burst error count (3 or >= 3) overflow
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t RXBIST_BURST_ERRCOUNT_FOUR_OVERFLOW : 1;
    ///< RxBist Burst error count (4 or >= 4) overflow
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t RXBIST_DATACHK_DONE : 1;
    ///< RsBist data check done
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t RXBIST_DONE : 1;
    ///< RsBist done
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t RXBIST_ERRCOUNT_OVERFLOW : 1;
    ///< RxBist errcount overflow
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t RXBIST_FSMSTATE : 4;
    ///< RxBist FSM state
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t RXBIST_RXLOCKED : 1;
    ///< RxBist Rx locked
    ///< AccessType="RO/V" BitOffset="11" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_bist_errcnt_stat_0_reg_t;

#define PMA_RX_MSG_BIST_ERRCNT_STAT_0_DEFAULT (0x00000000U)
#define PMA_RX_MSG_BIST_ERRCNT_STAT_0_RD_MASK (0x00000fffU)
#define PMA_RX_MSG_BIST_ERRCNT_STAT_0_WR_MASK (0x00000000U)


///< RxBist Burst error count (1 or >= 1) overflow
#define PMA_RX_MSG_BIST_ERRCNT_STAT_0_RXBIST_BURST_ERRCNT_ONE_OVERFLOW_BF_OFF ( 0)
#define PMA_RX_MSG_BIST_ERRCNT_STAT_0_RXBIST_BURST_ERRCNT_ONE_OVERFLOW_BF_WID ( 1)
#define PMA_RX_MSG_BIST_ERRCNT_STAT_0_RXBIST_BURST_ERRCNT_ONE_OVERFLOW_BF_MSK (0x00000001)
#define PMA_RX_MSG_BIST_ERRCNT_STAT_0_RXBIST_BURST_ERRCNT_ONE_OVERFLOW_BF_DEF (0x00000000)

///< RxBist Burst error count (2 or >= 2) overflow
#define PMA_RX_MSG_BIST_ERRCNT_STAT_0_RXBIST_BURST_ERRCNT_TWO_OVERFLOW_BF_OFF ( 1)
#define PMA_RX_MSG_BIST_ERRCNT_STAT_0_RXBIST_BURST_ERRCNT_TWO_OVERFLOW_BF_WID ( 1)
#define PMA_RX_MSG_BIST_ERRCNT_STAT_0_RXBIST_BURST_ERRCNT_TWO_OVERFLOW_BF_MSK (0x00000002)
#define PMA_RX_MSG_BIST_ERRCNT_STAT_0_RXBIST_BURST_ERRCNT_TWO_OVERFLOW_BF_DEF (0x00000000)

///< RxBist Burst error count (3 or >= 3) overflow
#define PMA_RX_MSG_BIST_ERRCNT_STAT_0_RXBIST_BURST_ERRCNT_THREE_OVERFLOW_BF_OFF ( 2)
#define PMA_RX_MSG_BIST_ERRCNT_STAT_0_RXBIST_BURST_ERRCNT_THREE_OVERFLOW_BF_WID ( 1)
#define PMA_RX_MSG_BIST_ERRCNT_STAT_0_RXBIST_BURST_ERRCNT_THREE_OVERFLOW_BF_MSK (0x00000004)
#define PMA_RX_MSG_BIST_ERRCNT_STAT_0_RXBIST_BURST_ERRCNT_THREE_OVERFLOW_BF_DEF (0x00000000)

///< RxBist Burst error count (4 or >= 4) overflow
#define PMA_RX_MSG_BIST_ERRCNT_STAT_0_RXBIST_BURST_ERRCNT_FOUR_OVERFLOW_BF_OFF ( 3)
#define PMA_RX_MSG_BIST_ERRCNT_STAT_0_RXBIST_BURST_ERRCNT_FOUR_OVERFLOW_BF_WID ( 1)
#define PMA_RX_MSG_BIST_ERRCNT_STAT_0_RXBIST_BURST_ERRCNT_FOUR_OVERFLOW_BF_MSK (0x00000008)
#define PMA_RX_MSG_BIST_ERRCNT_STAT_0_RXBIST_BURST_ERRCNT_FOUR_OVERFLOW_BF_DEF (0x00000000)

///< RsBist data check done
#define PMA_RX_MSG_BIST_ERRCNT_STAT_0_RXBIST_DATACHK_DONE_BF_OFF ( 4)
#define PMA_RX_MSG_BIST_ERRCNT_STAT_0_RXBIST_DATACHK_DONE_BF_WID ( 1)
#define PMA_RX_MSG_BIST_ERRCNT_STAT_0_RXBIST_DATACHK_DONE_BF_MSK (0x00000010)
#define PMA_RX_MSG_BIST_ERRCNT_STAT_0_RXBIST_DATACHK_DONE_BF_DEF (0x00000000)

///< RsBist done
#define PMA_RX_MSG_BIST_ERRCNT_STAT_0_RXBIST_DONE_BF_OFF ( 5)
#define PMA_RX_MSG_BIST_ERRCNT_STAT_0_RXBIST_DONE_BF_WID ( 1)
#define PMA_RX_MSG_BIST_ERRCNT_STAT_0_RXBIST_DONE_BF_MSK (0x00000020)
#define PMA_RX_MSG_BIST_ERRCNT_STAT_0_RXBIST_DONE_BF_DEF (0x00000000)

///< RxBist errcount overflow
#define PMA_RX_MSG_BIST_ERRCNT_STAT_0_RXBIST_ERRCNT_OVERFLOW_BF_OFF ( 6)
#define PMA_RX_MSG_BIST_ERRCNT_STAT_0_RXBIST_ERRCNT_OVERFLOW_BF_WID ( 1)
#define PMA_RX_MSG_BIST_ERRCNT_STAT_0_RXBIST_ERRCNT_OVERFLOW_BF_MSK (0x00000040)
#define PMA_RX_MSG_BIST_ERRCNT_STAT_0_RXBIST_ERRCNT_OVERFLOW_BF_DEF (0x00000000)

///< RxBist FSM state
#define PMA_RX_MSG_BIST_ERRCNT_STAT_0_RXBIST_FSMSTATE_BF_OFF ( 7)
#define PMA_RX_MSG_BIST_ERRCNT_STAT_0_RXBIST_FSMSTATE_BF_WID ( 4)
#define PMA_RX_MSG_BIST_ERRCNT_STAT_0_RXBIST_FSMSTATE_BF_MSK (0x00000780)
#define PMA_RX_MSG_BIST_ERRCNT_STAT_0_RXBIST_FSMSTATE_BF_DEF (0x00000000)

///< RxBist Rx locked
#define PMA_RX_MSG_BIST_ERRCNT_STAT_0_RXBIST_RXLOCKED_BF_OFF (11)
#define PMA_RX_MSG_BIST_ERRCNT_STAT_0_RXBIST_RXLOCKED_BF_WID ( 1)
#define PMA_RX_MSG_BIST_ERRCNT_STAT_0_RXBIST_RXLOCKED_BF_MSK (0x00000800)
#define PMA_RX_MSG_BIST_ERRCNT_STAT_0_RXBIST_RXLOCKED_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXBIST_ERRCOUNT_STATUS_1 register description at address offset 0x2f8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxbist_errcount_status_1
  * RxBist Error Count Status
  */

typedef union {
  struct {
    uint32_t RXBIST_ERRCOUNT : 32;
    ///< RxBist error count
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_msg_bist_errcnt_stat_1_reg_t;

#define PMA_RX_MSG_BIST_ERRCNT_STAT_1_DEFAULT (0x00000000U)
#define PMA_RX_MSG_BIST_ERRCNT_STAT_1_RD_MASK (0xffffffffU)
#define PMA_RX_MSG_BIST_ERRCNT_STAT_1_WR_MASK (0x00000000U)


///< RxBist error count
#define PMA_RX_MSG_BIST_ERRCNT_STAT_1_RXBIST_ERRCNT_BF_OFF ( 0)
#define PMA_RX_MSG_BIST_ERRCNT_STAT_1_RXBIST_ERRCNT_BF_WID (32)
#define PMA_RX_MSG_BIST_ERRCNT_STAT_1_RXBIST_ERRCNT_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MSG_BIST_ERRCNT_STAT_1_RXBIST_ERRCNT_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXBIST_ERRCOUNT_STATUS_2 register description at address offset 0x2fc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxbist_errcount_status_2
  * RxBist Error Count Status
  */

typedef union {
  struct {
    uint32_t RXBIST_BURST_ERRCOUNT_ONE : 16;
    ///< RxBist error count for one
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RXBIST_BURST_ERRCOUNT_TWO : 16;
    ///< RxBist error count for two
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_msg_bist_errcnt_stat_2_reg_t;

#define PMA_RX_MSG_BIST_ERRCNT_STAT_2_DEFAULT (0x00000000U)
#define PMA_RX_MSG_BIST_ERRCNT_STAT_2_RD_MASK (0xffffffffU)
#define PMA_RX_MSG_BIST_ERRCNT_STAT_2_WR_MASK (0x00000000U)


///< RxBist error count for one
#define PMA_RX_MSG_BIST_ERRCNT_STAT_2_RXBIST_BURST_ERRCNT_ONE_BF_OFF ( 0)
#define PMA_RX_MSG_BIST_ERRCNT_STAT_2_RXBIST_BURST_ERRCNT_ONE_BF_WID (16)
#define PMA_RX_MSG_BIST_ERRCNT_STAT_2_RXBIST_BURST_ERRCNT_ONE_BF_MSK (0x0000FFFF)
#define PMA_RX_MSG_BIST_ERRCNT_STAT_2_RXBIST_BURST_ERRCNT_ONE_BF_DEF (0x00000000)

///< RxBist error count for two
#define PMA_RX_MSG_BIST_ERRCNT_STAT_2_RXBIST_BURST_ERRCNT_TWO_BF_OFF (16)
#define PMA_RX_MSG_BIST_ERRCNT_STAT_2_RXBIST_BURST_ERRCNT_TWO_BF_WID (16)
#define PMA_RX_MSG_BIST_ERRCNT_STAT_2_RXBIST_BURST_ERRCNT_TWO_BF_MSK (0xFFFF0000)
#define PMA_RX_MSG_BIST_ERRCNT_STAT_2_RXBIST_BURST_ERRCNT_TWO_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXBIST_ERRCOUNT_STATUS_3 register description at address offset 0x300
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxbist_errcount_status_3
  * RxBist Error Count Status
  */

typedef union {
  struct {
    uint32_t RXBIST_BURST_ERRCOUNT_THREE : 16;
    ///< RxBist error count for three
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RXBIST_BURST_ERRCOUNT_FOUR : 16;
    ///< RxBist error count for four
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_msg_bist_errcnt_stat_3_reg_t;

#define PMA_RX_MSG_BIST_ERRCNT_STAT_3_DEFAULT (0x00000000U)
#define PMA_RX_MSG_BIST_ERRCNT_STAT_3_RD_MASK (0xffffffffU)
#define PMA_RX_MSG_BIST_ERRCNT_STAT_3_WR_MASK (0x00000000U)


///< RxBist error count for three
#define PMA_RX_MSG_BIST_ERRCNT_STAT_3_RXBIST_BURST_ERRCNT_THREE_BF_OFF ( 0)
#define PMA_RX_MSG_BIST_ERRCNT_STAT_3_RXBIST_BURST_ERRCNT_THREE_BF_WID (16)
#define PMA_RX_MSG_BIST_ERRCNT_STAT_3_RXBIST_BURST_ERRCNT_THREE_BF_MSK (0x0000FFFF)
#define PMA_RX_MSG_BIST_ERRCNT_STAT_3_RXBIST_BURST_ERRCNT_THREE_BF_DEF (0x00000000)

///< RxBist error count for four
#define PMA_RX_MSG_BIST_ERRCNT_STAT_3_RXBIST_BURST_ERRCNT_FOUR_BF_OFF (16)
#define PMA_RX_MSG_BIST_ERRCNT_STAT_3_RXBIST_BURST_ERRCNT_FOUR_BF_WID (16)
#define PMA_RX_MSG_BIST_ERRCNT_STAT_3_RXBIST_BURST_ERRCNT_FOUR_BF_MSK (0xFFFF0000)
#define PMA_RX_MSG_BIST_ERRCNT_STAT_3_RXBIST_BURST_ERRCNT_FOUR_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXBIST_STATUS_DATACHKCOUNT register description at address offset 0x304
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxbist_status_datachkcount
  * RxBist Data Check Counter Status
  */

typedef union {
  struct {
    uint32_t RXBIST_DATACHKCOUNT : 32;
    ///< RxBist data check count
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_msg_bist_stat_datachkcnt_reg_t;

#define PMA_RX_MSG_BIST_STAT_DATACHKCNT_DEFAULT (0x00000000U)
#define PMA_RX_MSG_BIST_STAT_DATACHKCNT_RD_MASK (0xffffffffU)
#define PMA_RX_MSG_BIST_STAT_DATACHKCNT_WR_MASK (0x00000000U)


///< RxBist data check count
#define PMA_RX_MSG_BIST_STAT_DATACHKCNT_RXBIST_DATACHKCNT_BF_OFF ( 0)
#define PMA_RX_MSG_BIST_STAT_DATACHKCNT_RXBIST_DATACHKCNT_BF_WID (32)
#define PMA_RX_MSG_BIST_STAT_DATACHKCNT_RXBIST_DATACHKCNT_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MSG_BIST_STAT_DATACHKCNT_RXBIST_DATACHKCNT_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXBIST_DATA_STATUS_0 register description at address offset 0x308
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxbist_data_status_0
  * RxBist Data Status
  */

typedef union {
  struct {
    uint32_t RXBIST_INDATA_VF00 : 32;
    ///< RxBist data in data
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_msg_bist_data_stat_0_reg_t;

#define PMA_RX_MSG_BIST_DATA_STAT_0_DEFAULT (0x00000000U)
#define PMA_RX_MSG_BIST_DATA_STAT_0_RD_MASK (0xffffffffU)
#define PMA_RX_MSG_BIST_DATA_STAT_0_WR_MASK (0x00000000U)


///< RxBist data in data
#define PMA_RX_MSG_BIST_DATA_STAT_0_RXBIST_INDATA_VF00_BF_OFF ( 0)
#define PMA_RX_MSG_BIST_DATA_STAT_0_RXBIST_INDATA_VF00_BF_WID (32)
#define PMA_RX_MSG_BIST_DATA_STAT_0_RXBIST_INDATA_VF00_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MSG_BIST_DATA_STAT_0_RXBIST_INDATA_VF00_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXBIST_DATA_STATUS_1 register description at address offset 0x30c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxbist_data_status_1
  * RxBist Data Status
  */

typedef union {
  struct {
    uint32_t RXBIST_INDATA_VF01 : 32;
    ///< RxBist data in data
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_msg_bist_data_stat_1_reg_t;

#define PMA_RX_MSG_BIST_DATA_STAT_1_DEFAULT (0x00000000U)
#define PMA_RX_MSG_BIST_DATA_STAT_1_RD_MASK (0xffffffffU)
#define PMA_RX_MSG_BIST_DATA_STAT_1_WR_MASK (0x00000000U)


///< RxBist data in data
#define PMA_RX_MSG_BIST_DATA_STAT_1_RXBIST_INDATA_VF01_BF_OFF ( 0)
#define PMA_RX_MSG_BIST_DATA_STAT_1_RXBIST_INDATA_VF01_BF_WID (32)
#define PMA_RX_MSG_BIST_DATA_STAT_1_RXBIST_INDATA_VF01_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MSG_BIST_DATA_STAT_1_RXBIST_INDATA_VF01_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXBIST_DATA_STATUS_2 register description at address offset 0x310
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxbist_data_status_2
  * RxBist Data Status
  */

typedef union {
  struct {
    uint32_t RXBIST_INDATA_VF02 : 32;
    ///< RxBist data in data
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_msg_bist_data_stat_2_reg_t;

#define PMA_RX_MSG_BIST_DATA_STAT_2_DEFAULT (0x00000000U)
#define PMA_RX_MSG_BIST_DATA_STAT_2_RD_MASK (0xffffffffU)
#define PMA_RX_MSG_BIST_DATA_STAT_2_WR_MASK (0x00000000U)


///< RxBist data in data
#define PMA_RX_MSG_BIST_DATA_STAT_2_RXBIST_INDATA_VF02_BF_OFF ( 0)
#define PMA_RX_MSG_BIST_DATA_STAT_2_RXBIST_INDATA_VF02_BF_WID (32)
#define PMA_RX_MSG_BIST_DATA_STAT_2_RXBIST_INDATA_VF02_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MSG_BIST_DATA_STAT_2_RXBIST_INDATA_VF02_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXBIST_DATA_STATUS_3 register description at address offset 0x314
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxbist_data_status_3
  * RxBist Data Status
  */

typedef union {
  struct {
    uint32_t RXBIST_INDATA_VF03 : 32;
    ///< RxBist data in data
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_msg_bist_data_stat_3_reg_t;

#define PMA_RX_MSG_BIST_DATA_STAT_3_DEFAULT (0x00000000U)
#define PMA_RX_MSG_BIST_DATA_STAT_3_RD_MASK (0xffffffffU)
#define PMA_RX_MSG_BIST_DATA_STAT_3_WR_MASK (0x00000000U)


///< RxBist data in data
#define PMA_RX_MSG_BIST_DATA_STAT_3_RXBIST_INDATA_VF03_BF_OFF ( 0)
#define PMA_RX_MSG_BIST_DATA_STAT_3_RXBIST_INDATA_VF03_BF_WID (32)
#define PMA_RX_MSG_BIST_DATA_STAT_3_RXBIST_INDATA_VF03_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MSG_BIST_DATA_STAT_3_RXBIST_INDATA_VF03_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXBIST_DATA_STATUS_4 register description at address offset 0x318
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxbist_data_status_4
  * RxBist Data Status
  */

typedef union {
  struct {
    uint32_t RXBIST_INDATA_POST_VF00 : 32;
    ///< RxBist data in post-data
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_msg_bist_data_stat_4_reg_t;

#define PMA_RX_MSG_BIST_DATA_STAT_4_DEFAULT (0x00000000U)
#define PMA_RX_MSG_BIST_DATA_STAT_4_RD_MASK (0xffffffffU)
#define PMA_RX_MSG_BIST_DATA_STAT_4_WR_MASK (0x00000000U)


///< RxBist data in post-data
#define PMA_RX_MSG_BIST_DATA_STAT_4_RXBIST_INDATA_POST_VF00_BF_OFF ( 0)
#define PMA_RX_MSG_BIST_DATA_STAT_4_RXBIST_INDATA_POST_VF00_BF_WID (32)
#define PMA_RX_MSG_BIST_DATA_STAT_4_RXBIST_INDATA_POST_VF00_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MSG_BIST_DATA_STAT_4_RXBIST_INDATA_POST_VF00_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXBIST_DATA_STATUS_5 register description at address offset 0x31c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxbist_data_status_5
  * RxBist Data Status
  */

typedef union {
  struct {
    uint32_t RXBIST_INDATA_POST_VF01 : 32;
    ///< RxBist data in post-data
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_msg_bist_data_stat_5_reg_t;

#define PMA_RX_MSG_BIST_DATA_STAT_5_DEFAULT (0x00000000U)
#define PMA_RX_MSG_BIST_DATA_STAT_5_RD_MASK (0xffffffffU)
#define PMA_RX_MSG_BIST_DATA_STAT_5_WR_MASK (0x00000000U)


///< RxBist data in post-data
#define PMA_RX_MSG_BIST_DATA_STAT_5_RXBIST_INDATA_POST_VF01_BF_OFF ( 0)
#define PMA_RX_MSG_BIST_DATA_STAT_5_RXBIST_INDATA_POST_VF01_BF_WID (32)
#define PMA_RX_MSG_BIST_DATA_STAT_5_RXBIST_INDATA_POST_VF01_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MSG_BIST_DATA_STAT_5_RXBIST_INDATA_POST_VF01_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXBIST_DATA_STATUS_6 register description at address offset 0x320
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxbist_data_status_6
  * RxBist Data Status
  */

typedef union {
  struct {
    uint32_t RXBIST_INDATA_POST_VF02 : 32;
    ///< RxBist data in post-data
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_msg_bist_data_stat_6_reg_t;

#define PMA_RX_MSG_BIST_DATA_STAT_6_DEFAULT (0x00000000U)
#define PMA_RX_MSG_BIST_DATA_STAT_6_RD_MASK (0xffffffffU)
#define PMA_RX_MSG_BIST_DATA_STAT_6_WR_MASK (0x00000000U)


///< RxBist data in post-data
#define PMA_RX_MSG_BIST_DATA_STAT_6_RXBIST_INDATA_POST_VF02_BF_OFF ( 0)
#define PMA_RX_MSG_BIST_DATA_STAT_6_RXBIST_INDATA_POST_VF02_BF_WID (32)
#define PMA_RX_MSG_BIST_DATA_STAT_6_RXBIST_INDATA_POST_VF02_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MSG_BIST_DATA_STAT_6_RXBIST_INDATA_POST_VF02_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXBIST_DATA_STATUS_7 register description at address offset 0x324
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxbist_data_status_7
  * RxBist Data Status
  */

typedef union {
  struct {
    uint32_t RXBIST_INDATA_POST_VF03 : 32;
    ///< RxBist data in post-data
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_msg_bist_data_stat_7_reg_t;

#define PMA_RX_MSG_BIST_DATA_STAT_7_DEFAULT (0x00000000U)
#define PMA_RX_MSG_BIST_DATA_STAT_7_RD_MASK (0xffffffffU)
#define PMA_RX_MSG_BIST_DATA_STAT_7_WR_MASK (0x00000000U)


///< RxBist data in post-data
#define PMA_RX_MSG_BIST_DATA_STAT_7_RXBIST_INDATA_POST_VF03_BF_OFF ( 0)
#define PMA_RX_MSG_BIST_DATA_STAT_7_RXBIST_INDATA_POST_VF03_BF_WID (32)
#define PMA_RX_MSG_BIST_DATA_STAT_7_RXBIST_INDATA_POST_VF03_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MSG_BIST_DATA_STAT_7_RXBIST_INDATA_POST_VF03_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXBIST_DATA_STATUS_8 register description at address offset 0x328
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxbist_data_status_8
  * RxBist Data Status
  */

typedef union {
  struct {
    uint32_t RXBIST_INDATA_PRE_VF00 : 32;
    ///< RxBist data in pre-data
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_msg_bist_data_stat_8_reg_t;

#define PMA_RX_MSG_BIST_DATA_STAT_8_DEFAULT (0x00000000U)
#define PMA_RX_MSG_BIST_DATA_STAT_8_RD_MASK (0xffffffffU)
#define PMA_RX_MSG_BIST_DATA_STAT_8_WR_MASK (0x00000000U)


///< RxBist data in pre-data
#define PMA_RX_MSG_BIST_DATA_STAT_8_RXBIST_INDATA_PRE_VF00_BF_OFF ( 0)
#define PMA_RX_MSG_BIST_DATA_STAT_8_RXBIST_INDATA_PRE_VF00_BF_WID (32)
#define PMA_RX_MSG_BIST_DATA_STAT_8_RXBIST_INDATA_PRE_VF00_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MSG_BIST_DATA_STAT_8_RXBIST_INDATA_PRE_VF00_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXBIST_DATA_STATUS_9 register description at address offset 0x32c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxbist_data_status_9
  * RxBist Data Status
  */

typedef union {
  struct {
    uint32_t RXBIST_INDATA_PRE_VF01 : 32;
    ///< RxBist data in pre-data
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_msg_bist_data_stat_9_reg_t;

#define PMA_RX_MSG_BIST_DATA_STAT_9_DEFAULT (0x00000000U)
#define PMA_RX_MSG_BIST_DATA_STAT_9_RD_MASK (0xffffffffU)
#define PMA_RX_MSG_BIST_DATA_STAT_9_WR_MASK (0x00000000U)


///< RxBist data in pre-data
#define PMA_RX_MSG_BIST_DATA_STAT_9_RXBIST_INDATA_PRE_VF01_BF_OFF ( 0)
#define PMA_RX_MSG_BIST_DATA_STAT_9_RXBIST_INDATA_PRE_VF01_BF_WID (32)
#define PMA_RX_MSG_BIST_DATA_STAT_9_RXBIST_INDATA_PRE_VF01_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MSG_BIST_DATA_STAT_9_RXBIST_INDATA_PRE_VF01_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXBIST_DATA_STATUS_10 register description at address offset 0x330
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxbist_data_status_10
  * RxBist Data Status
  */

typedef union {
  struct {
    uint32_t RXBIST_INDATA_PRE_VF02 : 32;
    ///< RxBist data in pre-data
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_msg_bist_data_stat_10_reg_t;

#define PMA_RX_MSG_BIST_DATA_STAT_10_DEFAULT (0x00000000U)
#define PMA_RX_MSG_BIST_DATA_STAT_10_RD_MASK (0xffffffffU)
#define PMA_RX_MSG_BIST_DATA_STAT_10_WR_MASK (0x00000000U)


///< RxBist data in pre-data
#define PMA_RX_MSG_BIST_DATA_STAT_10_RXBIST_INDATA_PRE_VF02_BF_OFF ( 0)
#define PMA_RX_MSG_BIST_DATA_STAT_10_RXBIST_INDATA_PRE_VF02_BF_WID (32)
#define PMA_RX_MSG_BIST_DATA_STAT_10_RXBIST_INDATA_PRE_VF02_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MSG_BIST_DATA_STAT_10_RXBIST_INDATA_PRE_VF02_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXBIST_DATA_STATUS_11 register description at address offset 0x334
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxbist_data_status_11
  * RxBist Data Status
  */

typedef union {
  struct {
    uint32_t RXBIST_INDATA_PRE_VF03 : 32;
    ///< RxBist data in pre-data
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_msg_bist_data_stat_11_reg_t;

#define PMA_RX_MSG_BIST_DATA_STAT_11_DEFAULT (0x00000000U)
#define PMA_RX_MSG_BIST_DATA_STAT_11_RD_MASK (0xffffffffU)
#define PMA_RX_MSG_BIST_DATA_STAT_11_WR_MASK (0x00000000U)


///< RxBist data in pre-data
#define PMA_RX_MSG_BIST_DATA_STAT_11_RXBIST_INDATA_PRE_VF03_BF_OFF ( 0)
#define PMA_RX_MSG_BIST_DATA_STAT_11_RXBIST_INDATA_PRE_VF03_BF_WID (32)
#define PMA_RX_MSG_BIST_DATA_STAT_11_RXBIST_INDATA_PRE_VF03_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MSG_BIST_DATA_STAT_11_RXBIST_INDATA_PRE_VF03_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXBIST_DATA_STATUS_12 register description at address offset 0x338
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxbist_data_status_12
  * RxBist Data Status
  */

typedef union {
  struct {
    uint32_t RXBIST_REFDATA_VF00 : 32;
    ///< RxBist data in reference-data
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_msg_bist_data_stat_12_reg_t;

#define PMA_RX_MSG_BIST_DATA_STAT_12_DEFAULT (0x00000000U)
#define PMA_RX_MSG_BIST_DATA_STAT_12_RD_MASK (0xffffffffU)
#define PMA_RX_MSG_BIST_DATA_STAT_12_WR_MASK (0x00000000U)


///< RxBist data in reference-data
#define PMA_RX_MSG_BIST_DATA_STAT_12_RXBIST_REFDATA_VF00_BF_OFF ( 0)
#define PMA_RX_MSG_BIST_DATA_STAT_12_RXBIST_REFDATA_VF00_BF_WID (32)
#define PMA_RX_MSG_BIST_DATA_STAT_12_RXBIST_REFDATA_VF00_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MSG_BIST_DATA_STAT_12_RXBIST_REFDATA_VF00_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXBIST_DATA_STATUS_13 register description at address offset 0x33c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxbist_data_status_13
  * RxBist Data Status
  */

typedef union {
  struct {
    uint32_t RXBIST_REFDATA_VF01 : 32;
    ///< RxBist data in reference-data
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_msg_bist_data_stat_13_reg_t;

#define PMA_RX_MSG_BIST_DATA_STAT_13_DEFAULT (0x00000000U)
#define PMA_RX_MSG_BIST_DATA_STAT_13_RD_MASK (0xffffffffU)
#define PMA_RX_MSG_BIST_DATA_STAT_13_WR_MASK (0x00000000U)


///< RxBist data in reference-data
#define PMA_RX_MSG_BIST_DATA_STAT_13_RXBIST_REFDATA_VF01_BF_OFF ( 0)
#define PMA_RX_MSG_BIST_DATA_STAT_13_RXBIST_REFDATA_VF01_BF_WID (32)
#define PMA_RX_MSG_BIST_DATA_STAT_13_RXBIST_REFDATA_VF01_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MSG_BIST_DATA_STAT_13_RXBIST_REFDATA_VF01_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXBIST_DATA_STATUS_14 register description at address offset 0x340
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxbist_data_status_14
  * RxBist Data Status
  */

typedef union {
  struct {
    uint32_t RXBIST_REFDATA_VF02 : 32;
    ///< RxBist data in reference-data
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_msg_bist_data_stat_14_reg_t;

#define PMA_RX_MSG_BIST_DATA_STAT_14_DEFAULT (0x00000000U)
#define PMA_RX_MSG_BIST_DATA_STAT_14_RD_MASK (0xffffffffU)
#define PMA_RX_MSG_BIST_DATA_STAT_14_WR_MASK (0x00000000U)


///< RxBist data in reference-data
#define PMA_RX_MSG_BIST_DATA_STAT_14_RXBIST_REFDATA_VF02_BF_OFF ( 0)
#define PMA_RX_MSG_BIST_DATA_STAT_14_RXBIST_REFDATA_VF02_BF_WID (32)
#define PMA_RX_MSG_BIST_DATA_STAT_14_RXBIST_REFDATA_VF02_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MSG_BIST_DATA_STAT_14_RXBIST_REFDATA_VF02_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RXBIST_DATA_STATUS_15 register description at address offset 0x344
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rxbist_data_status_15
  * RxBist Data Status
  */

typedef union {
  struct {
    uint32_t RXBIST_REFDATA_VF03 : 32;
    ///< RxBist data in reference-data
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_msg_bist_data_stat_15_reg_t;

#define PMA_RX_MSG_BIST_DATA_STAT_15_DEFAULT (0x00000000U)
#define PMA_RX_MSG_BIST_DATA_STAT_15_RD_MASK (0xffffffffU)
#define PMA_RX_MSG_BIST_DATA_STAT_15_WR_MASK (0x00000000U)


///< RxBist data in reference-data
#define PMA_RX_MSG_BIST_DATA_STAT_15_RXBIST_REFDATA_VF03_BF_OFF ( 0)
#define PMA_RX_MSG_BIST_DATA_STAT_15_RXBIST_REFDATA_VF03_BF_WID (32)
#define PMA_RX_MSG_BIST_DATA_STAT_15_RXBIST_REFDATA_VF03_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MSG_BIST_DATA_STAT_15_RXBIST_REFDATA_VF03_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_AFFE_COEFF_SET_STATUS_0 register description at address offset 0x348
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_affe_coeff_set_status_0
  * Rx AFFE Coeffecient Set Control Status
  */

typedef union {
  struct {
    uint32_t RX_AFFE_COEFF_SET_CM1_LOC : 8;
    ///< Rx AFFE Coeffecient - Set Control Cursor m1
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RX_AFFE_COEFF_SET_CM2_LOC : 8;
    ///< Rx AFFE Coeffecient - Set Control Cursor m2
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t RX_AFFE_COEFF_SET_CP1_LOC : 8;
    ///< Rx AFFE Coeffecient - Set Control Cursor p1
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t RX_AFFE_COEFF_SET_CP2_LOC : 8;
    ///< Rx AFFE Coeffecient - Set Control Cursor p2
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_mgs_affe_coeff_set_stat_0_reg_t;

#define PMA_RX_MGS_AFFE_COEFF_SET_STAT_0_DEFAULT (0x00000000U)
#define PMA_RX_MGS_AFFE_COEFF_SET_STAT_0_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_AFFE_COEFF_SET_STAT_0_WR_MASK (0x00000000U)


///< Rx AFFE Coeffecient - Set Control Cursor m1
#define PMA_RX_MGS_AFFE_COEFF_SET_STAT_0_RX_AFFE_COEFF_SET_CM1_LOC_BF_OFF ( 0)
#define PMA_RX_MGS_AFFE_COEFF_SET_STAT_0_RX_AFFE_COEFF_SET_CM1_LOC_BF_WID ( 8)
#define PMA_RX_MGS_AFFE_COEFF_SET_STAT_0_RX_AFFE_COEFF_SET_CM1_LOC_BF_MSK (0x000000FF)
#define PMA_RX_MGS_AFFE_COEFF_SET_STAT_0_RX_AFFE_COEFF_SET_CM1_LOC_BF_DEF (0x00000000)

///< Rx AFFE Coeffecient - Set Control Cursor m2
#define PMA_RX_MGS_AFFE_COEFF_SET_STAT_0_RX_AFFE_COEFF_SET_CM2_LOC_BF_OFF ( 8)
#define PMA_RX_MGS_AFFE_COEFF_SET_STAT_0_RX_AFFE_COEFF_SET_CM2_LOC_BF_WID ( 8)
#define PMA_RX_MGS_AFFE_COEFF_SET_STAT_0_RX_AFFE_COEFF_SET_CM2_LOC_BF_MSK (0x0000FF00)
#define PMA_RX_MGS_AFFE_COEFF_SET_STAT_0_RX_AFFE_COEFF_SET_CM2_LOC_BF_DEF (0x00000000)

///< Rx AFFE Coeffecient - Set Control Cursor p1
#define PMA_RX_MGS_AFFE_COEFF_SET_STAT_0_RX_AFFE_COEFF_SET_CP1_LOC_BF_OFF (16)
#define PMA_RX_MGS_AFFE_COEFF_SET_STAT_0_RX_AFFE_COEFF_SET_CP1_LOC_BF_WID ( 8)
#define PMA_RX_MGS_AFFE_COEFF_SET_STAT_0_RX_AFFE_COEFF_SET_CP1_LOC_BF_MSK (0x00FF0000)
#define PMA_RX_MGS_AFFE_COEFF_SET_STAT_0_RX_AFFE_COEFF_SET_CP1_LOC_BF_DEF (0x00000000)

///< Rx AFFE Coeffecient - Set Control Cursor p2
#define PMA_RX_MGS_AFFE_COEFF_SET_STAT_0_RX_AFFE_COEFF_SET_CP2_LOC_BF_OFF (24)
#define PMA_RX_MGS_AFFE_COEFF_SET_STAT_0_RX_AFFE_COEFF_SET_CP2_LOC_BF_WID ( 8)
#define PMA_RX_MGS_AFFE_COEFF_SET_STAT_0_RX_AFFE_COEFF_SET_CP2_LOC_BF_MSK (0xFF000000)
#define PMA_RX_MGS_AFFE_COEFF_SET_STAT_0_RX_AFFE_COEFF_SET_CP2_LOC_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_AFFE_COEFF_SET_STATUS_1 register description at address offset 0x34c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_affe_coeff_set_status_1
  * Rx AFFE Coeffecient Set Control Status
  */

typedef union {
  struct {
    uint32_t RX_AFFE_COEFF_SET_SELECT_LOC : 17;
    ///< Rx AFFE Coeffecient - Set Control - One Hot Select - Bit 16 enables
    ///< all selects
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_affe_coeff_set_stat_1_reg_t;

#define PMA_RX_MGS_AFFE_COEFF_SET_STAT_1_DEFAULT (0x00000000U)
#define PMA_RX_MGS_AFFE_COEFF_SET_STAT_1_RD_MASK (0x0001ffffU)
#define PMA_RX_MGS_AFFE_COEFF_SET_STAT_1_WR_MASK (0x00000000U)


///< Rx AFFE Coeffecient - Set Control - One Hot Select - Bit 16 enables
///< all selects
#define PMA_RX_MGS_AFFE_COEFF_SET_STAT_1_RX_AFFE_COEFF_SET_SEL_LOC_BF_OFF ( 0)
#define PMA_RX_MGS_AFFE_COEFF_SET_STAT_1_RX_AFFE_COEFF_SET_SEL_LOC_BF_WID (17)
#define PMA_RX_MGS_AFFE_COEFF_SET_STAT_1_RX_AFFE_COEFF_SET_SEL_LOC_BF_MSK (0x0001FFFF)
#define PMA_RX_MGS_AFFE_COEFF_SET_STAT_1_RX_AFFE_COEFF_SET_SEL_LOC_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_AFFE_COEFF_SET_OVERRIDE_0 register description at address offset 0x350
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_affe_coeff_set_override_0
  * Rx AFFE Coeffecient Set Control Override
  */

typedef union {
  struct {
    uint32_t RX_AFFE_COEFF_SET_CM1_LOCOVR : 8;
    ///< Rx AFFE Coeffecient - Set Control Cursor m1 - Override Value
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_AFFE_COEFF_SET_CM2_LOCOVR : 8;
    ///< Rx AFFE Coeffecient - Set Control Cursor m2 - Override Value
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RX_AFFE_COEFF_SET_CP1_LOCOVR : 8;
    ///< Rx AFFE Coeffecient - Set Control Cursor p1 - Override Value
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t RX_AFFE_COEFF_SET_CP2_LOCOVR : 8;
    ///< Rx AFFE Coeffecient - Set Control Cursor p2 - Override Value
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_mgs_affe_coeff_set_ovrd_0_reg_t;

#define PMA_RX_MGS_AFFE_COEFF_SET_OVRD_0_DEFAULT (0x00000000U)
#define PMA_RX_MGS_AFFE_COEFF_SET_OVRD_0_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_AFFE_COEFF_SET_OVRD_0_WR_MASK (0xffffffffU)


///< Rx AFFE Coeffecient - Set Control Cursor m1 - Override Value
#define PMA_RX_MGS_AFFE_COEFF_SET_OVRD_0_RX_AFFE_COEFF_SET_CM1_LOCOVR_BF_OFF ( 0)
#define PMA_RX_MGS_AFFE_COEFF_SET_OVRD_0_RX_AFFE_COEFF_SET_CM1_LOCOVR_BF_WID ( 8)
#define PMA_RX_MGS_AFFE_COEFF_SET_OVRD_0_RX_AFFE_COEFF_SET_CM1_LOCOVR_BF_MSK (0x000000FF)
#define PMA_RX_MGS_AFFE_COEFF_SET_OVRD_0_RX_AFFE_COEFF_SET_CM1_LOCOVR_BF_DEF (0x00000000)

///< Rx AFFE Coeffecient - Set Control Cursor m2 - Override Value
#define PMA_RX_MGS_AFFE_COEFF_SET_OVRD_0_RX_AFFE_COEFF_SET_CM2_LOCOVR_BF_OFF ( 8)
#define PMA_RX_MGS_AFFE_COEFF_SET_OVRD_0_RX_AFFE_COEFF_SET_CM2_LOCOVR_BF_WID ( 8)
#define PMA_RX_MGS_AFFE_COEFF_SET_OVRD_0_RX_AFFE_COEFF_SET_CM2_LOCOVR_BF_MSK (0x0000FF00)
#define PMA_RX_MGS_AFFE_COEFF_SET_OVRD_0_RX_AFFE_COEFF_SET_CM2_LOCOVR_BF_DEF (0x00000000)

///< Rx AFFE Coeffecient - Set Control Cursor p1 - Override Value
#define PMA_RX_MGS_AFFE_COEFF_SET_OVRD_0_RX_AFFE_COEFF_SET_CP1_LOCOVR_BF_OFF (16)
#define PMA_RX_MGS_AFFE_COEFF_SET_OVRD_0_RX_AFFE_COEFF_SET_CP1_LOCOVR_BF_WID ( 8)
#define PMA_RX_MGS_AFFE_COEFF_SET_OVRD_0_RX_AFFE_COEFF_SET_CP1_LOCOVR_BF_MSK (0x00FF0000)
#define PMA_RX_MGS_AFFE_COEFF_SET_OVRD_0_RX_AFFE_COEFF_SET_CP1_LOCOVR_BF_DEF (0x00000000)

///< Rx AFFE Coeffecient - Set Control Cursor p2 - Override Value
#define PMA_RX_MGS_AFFE_COEFF_SET_OVRD_0_RX_AFFE_COEFF_SET_CP2_LOCOVR_BF_OFF (24)
#define PMA_RX_MGS_AFFE_COEFF_SET_OVRD_0_RX_AFFE_COEFF_SET_CP2_LOCOVR_BF_WID ( 8)
#define PMA_RX_MGS_AFFE_COEFF_SET_OVRD_0_RX_AFFE_COEFF_SET_CP2_LOCOVR_BF_MSK (0xFF000000)
#define PMA_RX_MGS_AFFE_COEFF_SET_OVRD_0_RX_AFFE_COEFF_SET_CP2_LOCOVR_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_AFFE_COEFF_SET_OVERRIDE_1 register description at address offset 0x354
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_affe_coeff_set_override_1
  * Rx AFFE Coeffecient Set Control Override
  */

typedef union {
  struct {
    uint32_t RX_AFFE_COEFF_SET_SELECT_LOCOVR : 17;
    ///< Rx AFFE Coeffecient - Set Control - One Hot Select - Override Value
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 7;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
    uint32_t RX_AFFE_COEFF_SET_SELECT_LOCOVREN : 1;
    ///< Rx AFFE Coeffecient - Set Control - One Hot Select - Override Enable
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t RX_AFFE_COEFF_SET_LOCOVREN : 1;
    ///< Rx AFFE Coeffecient - Set Control -  Override Enable
    ///< AccessType="RW" BitOffset="25" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="26" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_affe_coeff_set_ovrd_1_reg_t;

#define PMA_RX_MGS_AFFE_COEFF_SET_OVRD_1_DEFAULT (0x00000000U)
#define PMA_RX_MGS_AFFE_COEFF_SET_OVRD_1_RD_MASK (0x0301ffffU)
#define PMA_RX_MGS_AFFE_COEFF_SET_OVRD_1_WR_MASK (0x0301ffffU)


///< Rx AFFE Coeffecient - Set Control - One Hot Select - Override Value
#define PMA_RX_MGS_AFFE_COEFF_SET_OVRD_1_RX_AFFE_COEFF_SET_SEL_LOCOVR_BF_OFF ( 0)
#define PMA_RX_MGS_AFFE_COEFF_SET_OVRD_1_RX_AFFE_COEFF_SET_SEL_LOCOVR_BF_WID (17)
#define PMA_RX_MGS_AFFE_COEFF_SET_OVRD_1_RX_AFFE_COEFF_SET_SEL_LOCOVR_BF_MSK (0x0001FFFF)
#define PMA_RX_MGS_AFFE_COEFF_SET_OVRD_1_RX_AFFE_COEFF_SET_SEL_LOCOVR_BF_DEF (0x00000000)

///< Rx AFFE Coeffecient - Set Control - One Hot Select - Override Enable
#define PMA_RX_MGS_AFFE_COEFF_SET_OVRD_1_RX_AFFE_COEFF_SET_SEL_LOCOVREN_BF_OFF (24)
#define PMA_RX_MGS_AFFE_COEFF_SET_OVRD_1_RX_AFFE_COEFF_SET_SEL_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_AFFE_COEFF_SET_OVRD_1_RX_AFFE_COEFF_SET_SEL_LOCOVREN_BF_MSK (0x01000000)
#define PMA_RX_MGS_AFFE_COEFF_SET_OVRD_1_RX_AFFE_COEFF_SET_SEL_LOCOVREN_BF_DEF (0x00000000)

///< Rx AFFE Coeffecient - Set Control -  Override Enable
#define PMA_RX_MGS_AFFE_COEFF_SET_OVRD_1_RX_AFFE_COEFF_SET_LOCOVREN_BF_OFF (25)
#define PMA_RX_MGS_AFFE_COEFF_SET_OVRD_1_RX_AFFE_COEFF_SET_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_AFFE_COEFF_SET_OVRD_1_RX_AFFE_COEFF_SET_LOCOVREN_BF_MSK (0x02000000)
#define PMA_RX_MGS_AFFE_COEFF_SET_OVRD_1_RX_AFFE_COEFF_SET_LOCOVREN_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_OPS_IF_STATUS_0 register description at address offset 0x358
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_ops_if_status_0
  * Rx OPS Control Interface Status
  */

typedef union {
  struct {
    uint32_t OPS_IF_BIT_SEL_LOC : 3;
    ///< Rx OPS Bit Select
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_IF_GRP_SEL_LOC : 3;
    ///< Rx OPS Group Select
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t OPS_IF_TAPS_VLD_LOC : 1;
    ///< Rx OPS Valid
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t  : 25;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_ops_if_stat_0_reg_t;

#define PMA_RX_MGS_OPS_IF_STAT_0_DEFAULT (0x00000000U)
#define PMA_RX_MGS_OPS_IF_STAT_0_RD_MASK (0x0000007fU)
#define PMA_RX_MGS_OPS_IF_STAT_0_WR_MASK (0x00000000U)


///< Rx OPS Bit Select
#define PMA_RX_MGS_OPS_IF_STAT_0_OPS_IF_BIT_SEL_LOC_BF_OFF ( 0)
#define PMA_RX_MGS_OPS_IF_STAT_0_OPS_IF_BIT_SEL_LOC_BF_WID ( 3)
#define PMA_RX_MGS_OPS_IF_STAT_0_OPS_IF_BIT_SEL_LOC_BF_MSK (0x00000007)
#define PMA_RX_MGS_OPS_IF_STAT_0_OPS_IF_BIT_SEL_LOC_BF_DEF (0x00000000)

///< Rx OPS Group Select
#define PMA_RX_MGS_OPS_IF_STAT_0_OPS_IF_GRP_SEL_LOC_BF_OFF ( 3)
#define PMA_RX_MGS_OPS_IF_STAT_0_OPS_IF_GRP_SEL_LOC_BF_WID ( 3)
#define PMA_RX_MGS_OPS_IF_STAT_0_OPS_IF_GRP_SEL_LOC_BF_MSK (0x00000038)
#define PMA_RX_MGS_OPS_IF_STAT_0_OPS_IF_GRP_SEL_LOC_BF_DEF (0x00000000)

///< Rx OPS Valid
#define PMA_RX_MGS_OPS_IF_STAT_0_OPS_IF_TAPS_VLD_LOC_BF_OFF ( 6)
#define PMA_RX_MGS_OPS_IF_STAT_0_OPS_IF_TAPS_VLD_LOC_BF_WID ( 1)
#define PMA_RX_MGS_OPS_IF_STAT_0_OPS_IF_TAPS_VLD_LOC_BF_MSK (0x00000040)
#define PMA_RX_MGS_OPS_IF_STAT_0_OPS_IF_TAPS_VLD_LOC_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_OPS_IF_STATUS_1 register description at address offset 0x35c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_ops_if_status_1
  * Rx OPS Control Interface Status
  */

typedef union {
  struct {
    uint32_t OPS_IF_TAPS_0_LOC : 8;
    ///< Rx OPS Data 0 - 8 bits
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_IF_TAPS_1_LOC : 8;
    ///< Rx OPS Data 1 - 8 bits
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_IF_TAPS_2_LOC : 8;
    ///< Rx OPS Data 2 - 8 bits
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_IF_TAPS_3_LOC : 8;
    ///< Rx OPS Data 3 - 8 bits
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_mgs_ops_if_stat_1_reg_t;

#define PMA_RX_MGS_OPS_IF_STAT_1_DEFAULT (0x00000000U)
#define PMA_RX_MGS_OPS_IF_STAT_1_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_OPS_IF_STAT_1_WR_MASK (0x00000000U)


///< Rx OPS Data 0 - 8 bits
#define PMA_RX_MGS_OPS_IF_STAT_1_OPS_IF_TAPS_0_LOC_BF_OFF ( 0)
#define PMA_RX_MGS_OPS_IF_STAT_1_OPS_IF_TAPS_0_LOC_BF_WID ( 8)
#define PMA_RX_MGS_OPS_IF_STAT_1_OPS_IF_TAPS_0_LOC_BF_MSK (0x000000FF)
#define PMA_RX_MGS_OPS_IF_STAT_1_OPS_IF_TAPS_0_LOC_BF_DEF (0x00000000)

///< Rx OPS Data 1 - 8 bits
#define PMA_RX_MGS_OPS_IF_STAT_1_OPS_IF_TAPS_1_LOC_BF_OFF ( 8)
#define PMA_RX_MGS_OPS_IF_STAT_1_OPS_IF_TAPS_1_LOC_BF_WID ( 8)
#define PMA_RX_MGS_OPS_IF_STAT_1_OPS_IF_TAPS_1_LOC_BF_MSK (0x0000FF00)
#define PMA_RX_MGS_OPS_IF_STAT_1_OPS_IF_TAPS_1_LOC_BF_DEF (0x00000000)

///< Rx OPS Data 2 - 8 bits
#define PMA_RX_MGS_OPS_IF_STAT_1_OPS_IF_TAPS_2_LOC_BF_OFF (16)
#define PMA_RX_MGS_OPS_IF_STAT_1_OPS_IF_TAPS_2_LOC_BF_WID ( 8)
#define PMA_RX_MGS_OPS_IF_STAT_1_OPS_IF_TAPS_2_LOC_BF_MSK (0x00FF0000)
#define PMA_RX_MGS_OPS_IF_STAT_1_OPS_IF_TAPS_2_LOC_BF_DEF (0x00000000)

///< Rx OPS Data 3 - 8 bits
#define PMA_RX_MGS_OPS_IF_STAT_1_OPS_IF_TAPS_3_LOC_BF_OFF (24)
#define PMA_RX_MGS_OPS_IF_STAT_1_OPS_IF_TAPS_3_LOC_BF_WID ( 8)
#define PMA_RX_MGS_OPS_IF_STAT_1_OPS_IF_TAPS_3_LOC_BF_MSK (0xFF000000)
#define PMA_RX_MGS_OPS_IF_STAT_1_OPS_IF_TAPS_3_LOC_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_OPS_IF_STATUS_2 register description at address offset 0x360
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_ops_if_status_2
  * Rx OPS Control Interface Status
  */

typedef union {
  struct {
    uint32_t OPS_IF_TAPS_4_LOC : 8;
    ///< Rx OPS Data 4 - 8 bits
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_IF_TAPS_5_LOC : 8;
    ///< Rx OPS Data 5 - 8 bits
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_IF_TAPS_6_LOC : 8;
    ///< Rx OPS Data 6 - 8 bits
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_IF_TAPS_7_LOC : 8;
    ///< Rx OPS Data 7 - 8 bits
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_mgs_ops_if_stat_2_reg_t;

#define PMA_RX_MGS_OPS_IF_STAT_2_DEFAULT (0x00000000U)
#define PMA_RX_MGS_OPS_IF_STAT_2_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_OPS_IF_STAT_2_WR_MASK (0x00000000U)


///< Rx OPS Data 4 - 8 bits
#define PMA_RX_MGS_OPS_IF_STAT_2_OPS_IF_TAPS_4_LOC_BF_OFF ( 0)
#define PMA_RX_MGS_OPS_IF_STAT_2_OPS_IF_TAPS_4_LOC_BF_WID ( 8)
#define PMA_RX_MGS_OPS_IF_STAT_2_OPS_IF_TAPS_4_LOC_BF_MSK (0x000000FF)
#define PMA_RX_MGS_OPS_IF_STAT_2_OPS_IF_TAPS_4_LOC_BF_DEF (0x00000000)

///< Rx OPS Data 5 - 8 bits
#define PMA_RX_MGS_OPS_IF_STAT_2_OPS_IF_TAPS_5_LOC_BF_OFF ( 8)
#define PMA_RX_MGS_OPS_IF_STAT_2_OPS_IF_TAPS_5_LOC_BF_WID ( 8)
#define PMA_RX_MGS_OPS_IF_STAT_2_OPS_IF_TAPS_5_LOC_BF_MSK (0x0000FF00)
#define PMA_RX_MGS_OPS_IF_STAT_2_OPS_IF_TAPS_5_LOC_BF_DEF (0x00000000)

///< Rx OPS Data 6 - 8 bits
#define PMA_RX_MGS_OPS_IF_STAT_2_OPS_IF_TAPS_6_LOC_BF_OFF (16)
#define PMA_RX_MGS_OPS_IF_STAT_2_OPS_IF_TAPS_6_LOC_BF_WID ( 8)
#define PMA_RX_MGS_OPS_IF_STAT_2_OPS_IF_TAPS_6_LOC_BF_MSK (0x00FF0000)
#define PMA_RX_MGS_OPS_IF_STAT_2_OPS_IF_TAPS_6_LOC_BF_DEF (0x00000000)

///< Rx OPS Data 7 - 8 bits
#define PMA_RX_MGS_OPS_IF_STAT_2_OPS_IF_TAPS_7_LOC_BF_OFF (24)
#define PMA_RX_MGS_OPS_IF_STAT_2_OPS_IF_TAPS_7_LOC_BF_WID ( 8)
#define PMA_RX_MGS_OPS_IF_STAT_2_OPS_IF_TAPS_7_LOC_BF_MSK (0xFF000000)
#define PMA_RX_MGS_OPS_IF_STAT_2_OPS_IF_TAPS_7_LOC_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_OPS_IF_OVERRIDE_0 register description at address offset 0x364
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_ops_if_override_0
  * Rx OPS Control Interface Override
  */

typedef union {
  struct {
    uint32_t OPS_IF_BIT_SEL_LOCOVR : 3;
    ///< Rx OPS Bit Select - Override Value
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_IF_GRP_SEL_LOCOVR : 3;
    ///< Rx OPS Group Select - Override Value
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t OPS_IF_TAPS_VLD_LOCOVR : 1;
    ///< Rx OPS Valid - Override Value
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t  : 9;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t OPS_IF_CTRL_LOCOVREN : 1;
    ///< Rx OPS Control - Override Enable
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_IF_DATA_LOCOVREN : 1;
    ///< Rx OPS Data - Override Enable
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_ops_if_ovrd_0_reg_t;

#define PMA_RX_MGS_OPS_IF_OVRD_0_DEFAULT (0x00000000U)
#define PMA_RX_MGS_OPS_IF_OVRD_0_RD_MASK (0x0003007fU)
#define PMA_RX_MGS_OPS_IF_OVRD_0_WR_MASK (0x0003007fU)


///< Rx OPS Bit Select - Override Value
#define PMA_RX_MGS_OPS_IF_OVRD_0_OPS_IF_BIT_SEL_LOCOVR_BF_OFF ( 0)
#define PMA_RX_MGS_OPS_IF_OVRD_0_OPS_IF_BIT_SEL_LOCOVR_BF_WID ( 3)
#define PMA_RX_MGS_OPS_IF_OVRD_0_OPS_IF_BIT_SEL_LOCOVR_BF_MSK (0x00000007)
#define PMA_RX_MGS_OPS_IF_OVRD_0_OPS_IF_BIT_SEL_LOCOVR_BF_DEF (0x00000000)

///< Rx OPS Group Select - Override Value
#define PMA_RX_MGS_OPS_IF_OVRD_0_OPS_IF_GRP_SEL_LOCOVR_BF_OFF ( 3)
#define PMA_RX_MGS_OPS_IF_OVRD_0_OPS_IF_GRP_SEL_LOCOVR_BF_WID ( 3)
#define PMA_RX_MGS_OPS_IF_OVRD_0_OPS_IF_GRP_SEL_LOCOVR_BF_MSK (0x00000038)
#define PMA_RX_MGS_OPS_IF_OVRD_0_OPS_IF_GRP_SEL_LOCOVR_BF_DEF (0x00000000)

///< Rx OPS Valid - Override Value
#define PMA_RX_MGS_OPS_IF_OVRD_0_OPS_IF_TAPS_VLD_LOCOVR_BF_OFF ( 6)
#define PMA_RX_MGS_OPS_IF_OVRD_0_OPS_IF_TAPS_VLD_LOCOVR_BF_WID ( 1)
#define PMA_RX_MGS_OPS_IF_OVRD_0_OPS_IF_TAPS_VLD_LOCOVR_BF_MSK (0x00000040)
#define PMA_RX_MGS_OPS_IF_OVRD_0_OPS_IF_TAPS_VLD_LOCOVR_BF_DEF (0x00000000)

///< Rx OPS Control - Override Enable
#define PMA_RX_MGS_OPS_IF_OVRD_0_OPS_IF_CTRL_LOCOVREN_BF_OFF (16)
#define PMA_RX_MGS_OPS_IF_OVRD_0_OPS_IF_CTRL_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_OPS_IF_OVRD_0_OPS_IF_CTRL_LOCOVREN_BF_MSK (0x00010000)
#define PMA_RX_MGS_OPS_IF_OVRD_0_OPS_IF_CTRL_LOCOVREN_BF_DEF (0x00000000)

///< Rx OPS Data - Override Enable
#define PMA_RX_MGS_OPS_IF_OVRD_0_OPS_IF_DATA_LOCOVREN_BF_OFF (17)
#define PMA_RX_MGS_OPS_IF_OVRD_0_OPS_IF_DATA_LOCOVREN_BF_WID ( 1)
#define PMA_RX_MGS_OPS_IF_OVRD_0_OPS_IF_DATA_LOCOVREN_BF_MSK (0x00020000)
#define PMA_RX_MGS_OPS_IF_OVRD_0_OPS_IF_DATA_LOCOVREN_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_OPS_IF_OVERRIDE_1 register description at address offset 0x368
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_ops_if_override_1
  * Rx OPS Control Interface Override
  */

typedef union {
  struct {
    uint32_t OPS_IF_TAPS_0_LOCOVR : 8;
    ///< Rx OPS Data 0 - Override Value
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_IF_TAPS_1_LOCOVR : 8;
    ///< Rx OPS Data 1 - Override Value
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_IF_TAPS_2_LOCOVR : 8;
    ///< Rx OPS Data 2 - Override Value
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_IF_TAPS_3_LOCOVR : 8;
    ///< Rx OPS Data 3 - Override Value
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_mgs_ops_if_ovrd_1_reg_t;

#define PMA_RX_MGS_OPS_IF_OVRD_1_DEFAULT (0x00000000U)
#define PMA_RX_MGS_OPS_IF_OVRD_1_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_OPS_IF_OVRD_1_WR_MASK (0xffffffffU)


///< Rx OPS Data 0 - Override Value
#define PMA_RX_MGS_OPS_IF_OVRD_1_OPS_IF_TAPS_0_LOCOVR_BF_OFF ( 0)
#define PMA_RX_MGS_OPS_IF_OVRD_1_OPS_IF_TAPS_0_LOCOVR_BF_WID ( 8)
#define PMA_RX_MGS_OPS_IF_OVRD_1_OPS_IF_TAPS_0_LOCOVR_BF_MSK (0x000000FF)
#define PMA_RX_MGS_OPS_IF_OVRD_1_OPS_IF_TAPS_0_LOCOVR_BF_DEF (0x00000000)

///< Rx OPS Data 1 - Override Value
#define PMA_RX_MGS_OPS_IF_OVRD_1_OPS_IF_TAPS_1_LOCOVR_BF_OFF ( 8)
#define PMA_RX_MGS_OPS_IF_OVRD_1_OPS_IF_TAPS_1_LOCOVR_BF_WID ( 8)
#define PMA_RX_MGS_OPS_IF_OVRD_1_OPS_IF_TAPS_1_LOCOVR_BF_MSK (0x0000FF00)
#define PMA_RX_MGS_OPS_IF_OVRD_1_OPS_IF_TAPS_1_LOCOVR_BF_DEF (0x00000000)

///< Rx OPS Data 2 - Override Value
#define PMA_RX_MGS_OPS_IF_OVRD_1_OPS_IF_TAPS_2_LOCOVR_BF_OFF (16)
#define PMA_RX_MGS_OPS_IF_OVRD_1_OPS_IF_TAPS_2_LOCOVR_BF_WID ( 8)
#define PMA_RX_MGS_OPS_IF_OVRD_1_OPS_IF_TAPS_2_LOCOVR_BF_MSK (0x00FF0000)
#define PMA_RX_MGS_OPS_IF_OVRD_1_OPS_IF_TAPS_2_LOCOVR_BF_DEF (0x00000000)

///< Rx OPS Data 3 - Override Value
#define PMA_RX_MGS_OPS_IF_OVRD_1_OPS_IF_TAPS_3_LOCOVR_BF_OFF (24)
#define PMA_RX_MGS_OPS_IF_OVRD_1_OPS_IF_TAPS_3_LOCOVR_BF_WID ( 8)
#define PMA_RX_MGS_OPS_IF_OVRD_1_OPS_IF_TAPS_3_LOCOVR_BF_MSK (0xFF000000)
#define PMA_RX_MGS_OPS_IF_OVRD_1_OPS_IF_TAPS_3_LOCOVR_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_OPS_IF_OVERRIDE_2 register description at address offset 0x36c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_ops_if_override_2
  * Rx OPS Control Interface Override
  */

typedef union {
  struct {
    uint32_t OPS_IF_TAPS_4_LOCOVR : 8;
    ///< Rx OPS Data 4 - Override Value
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_IF_TAPS_5_LOCOVR : 8;
    ///< Rx OPS Data 5 - Override Value
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_IF_TAPS_6_LOCOVR : 8;
    ///< Rx OPS Data 6 - Override Value
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_IF_TAPS_7_LOCOVR : 8;
    ///< Rx OPS Data 7 - Override Value
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_mgs_ops_if_ovrd_2_reg_t;

#define PMA_RX_MGS_OPS_IF_OVRD_2_DEFAULT (0x00000000U)
#define PMA_RX_MGS_OPS_IF_OVRD_2_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_OPS_IF_OVRD_2_WR_MASK (0xffffffffU)


///< Rx OPS Data 4 - Override Value
#define PMA_RX_MGS_OPS_IF_OVRD_2_OPS_IF_TAPS_4_LOCOVR_BF_OFF ( 0)
#define PMA_RX_MGS_OPS_IF_OVRD_2_OPS_IF_TAPS_4_LOCOVR_BF_WID ( 8)
#define PMA_RX_MGS_OPS_IF_OVRD_2_OPS_IF_TAPS_4_LOCOVR_BF_MSK (0x000000FF)
#define PMA_RX_MGS_OPS_IF_OVRD_2_OPS_IF_TAPS_4_LOCOVR_BF_DEF (0x00000000)

///< Rx OPS Data 5 - Override Value
#define PMA_RX_MGS_OPS_IF_OVRD_2_OPS_IF_TAPS_5_LOCOVR_BF_OFF ( 8)
#define PMA_RX_MGS_OPS_IF_OVRD_2_OPS_IF_TAPS_5_LOCOVR_BF_WID ( 8)
#define PMA_RX_MGS_OPS_IF_OVRD_2_OPS_IF_TAPS_5_LOCOVR_BF_MSK (0x0000FF00)
#define PMA_RX_MGS_OPS_IF_OVRD_2_OPS_IF_TAPS_5_LOCOVR_BF_DEF (0x00000000)

///< Rx OPS Data 6 - Override Value
#define PMA_RX_MGS_OPS_IF_OVRD_2_OPS_IF_TAPS_6_LOCOVR_BF_OFF (16)
#define PMA_RX_MGS_OPS_IF_OVRD_2_OPS_IF_TAPS_6_LOCOVR_BF_WID ( 8)
#define PMA_RX_MGS_OPS_IF_OVRD_2_OPS_IF_TAPS_6_LOCOVR_BF_MSK (0x00FF0000)
#define PMA_RX_MGS_OPS_IF_OVRD_2_OPS_IF_TAPS_6_LOCOVR_BF_DEF (0x00000000)

///< Rx OPS Data 7 - Override Value
#define PMA_RX_MGS_OPS_IF_OVRD_2_OPS_IF_TAPS_7_LOCOVR_BF_OFF (24)
#define PMA_RX_MGS_OPS_IF_OVRD_2_OPS_IF_TAPS_7_LOCOVR_BF_WID ( 8)
#define PMA_RX_MGS_OPS_IF_OVRD_2_OPS_IF_TAPS_7_LOCOVR_BF_MSK (0xFF000000)
#define PMA_RX_MGS_OPS_IF_OVRD_2_OPS_IF_TAPS_7_LOCOVR_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_SCRATCHY_0 register description at address offset 0x370
  *
  * Register default value:        0x00001249
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_scratchy_0
  * Orchy RX scratch register
  */

typedef union {
  struct {
    uint32_t REFCKSEL_MUXD0 : 3;
    ///< Select the source for  the reference clock mux for RXDCO. 0 - TXPLL
    ///< soc postdiv, 1 - ioa_ck_ref_left/right[0], 2 - ioa_ck_ref_left/right[1],
    ///< 3 - ioa_ck_ref_left/right[2], 4 - ioa_ck_ref_left/right[3], 4/5/6/7
    ///< - 1'b0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t REFCKSEL_MUXD1 : 3;
    ///< Select the source for  the reference clock mux for RXDCO. 0 - TXPLL
    ///< soc postdiv, 1 - ioa_ck_ref_left/right[0], 2 - ioa_ck_ref_left/right[1],
    ///< 3 - ioa_ck_ref_left/right[2], 4 - ioa_ck_ref_left/right[3], 4/5/6/7
    ///< - 1'b0
    ///< AccessType="RW" BitOffset="3" ResetValue="0x1"
    uint32_t REFCKSEL_MUXD2 : 3;
    ///< Select the source for  the reference clock mux for RXDCO. 0 - TXPLL
    ///< soc postdiv, 1 - ioa_ck_ref_left/right[0], 2 - ioa_ck_ref_left/right[1],
    ///< 3 - ioa_ck_ref_left/right[2], 4 - ioa_ck_ref_left/right[3], 4/5/6/7
    ///< - 1'b0
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t REFCKSEL_MUXD3 : 3;
    ///< Select the source for  the reference clock mux for RXDCO. 0 - TXPLL
    ///< soc postdiv, 1 - ioa_ck_ref_left/right[0], 2 - ioa_ck_ref_left/right[1],
    ///< 3 - ioa_ck_ref_left/right[2], 4 - ioa_ck_ref_left/right[3], 4/5/6/7
    ///< - 1'b0
    ///< AccessType="RW" BitOffset="9" ResetValue="0x1"
    uint32_t REFCKSEL_MUXD4 : 3;
    ///< Select the source for  the reference clock mux for RXDCO. 0 - TXPLL
    ///< soc postdiv, 1 - ioa_ck_ref_left/right[0], 2 - ioa_ck_ref_left/right[1],
    ///< 3 - ioa_ck_ref_left/right[2], 4 - ioa_ck_ref_left/right[3], 4/5/6/7
    ///< - 1'b0
    ///< AccessType="RW" BitOffset="12" ResetValue="0x1"
    uint32_t  : 17;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_scratchy_0_reg_t;

#define PMA_RX_MGS_SCRATCHY_0_DEFAULT (0x00001249U)
#define PMA_RX_MGS_SCRATCHY_0_RD_MASK (0x00007fffU)
#define PMA_RX_MGS_SCRATCHY_0_WR_MASK (0x00007fffU)


///< Select the source for  the reference clock mux for RXDCO. 0 - TXPLL
///< soc postdiv, 1 - ioa_ck_ref_left/right[0], 2 - ioa_ck_ref_left/right[1],
///< 3 - ioa_ck_ref_left/right[2], 4 - ioa_ck_ref_left/right[3], 4/5/6/7
///< - 1'b0
#define PMA_RX_MGS_SCRATCHY_0_REFCKSEL_MUXD0_BF_OFF ( 0)
#define PMA_RX_MGS_SCRATCHY_0_REFCKSEL_MUXD0_BF_WID ( 3)
#define PMA_RX_MGS_SCRATCHY_0_REFCKSEL_MUXD0_BF_MSK (0x00000007)
#define PMA_RX_MGS_SCRATCHY_0_REFCKSEL_MUXD0_BF_DEF (0x00000001)

///< Select the source for  the reference clock mux for RXDCO. 0 - TXPLL
///< soc postdiv, 1 - ioa_ck_ref_left/right[0], 2 - ioa_ck_ref_left/right[1],
///< 3 - ioa_ck_ref_left/right[2], 4 - ioa_ck_ref_left/right[3], 4/5/6/7
///< - 1'b0
#define PMA_RX_MGS_SCRATCHY_0_REFCKSEL_MUXD1_BF_OFF ( 3)
#define PMA_RX_MGS_SCRATCHY_0_REFCKSEL_MUXD1_BF_WID ( 3)
#define PMA_RX_MGS_SCRATCHY_0_REFCKSEL_MUXD1_BF_MSK (0x00000038)
#define PMA_RX_MGS_SCRATCHY_0_REFCKSEL_MUXD1_BF_DEF (0x00000008)

///< Select the source for  the reference clock mux for RXDCO. 0 - TXPLL
///< soc postdiv, 1 - ioa_ck_ref_left/right[0], 2 - ioa_ck_ref_left/right[1],
///< 3 - ioa_ck_ref_left/right[2], 4 - ioa_ck_ref_left/right[3], 4/5/6/7
///< - 1'b0
#define PMA_RX_MGS_SCRATCHY_0_REFCKSEL_MUXD2_BF_OFF ( 6)
#define PMA_RX_MGS_SCRATCHY_0_REFCKSEL_MUXD2_BF_WID ( 3)
#define PMA_RX_MGS_SCRATCHY_0_REFCKSEL_MUXD2_BF_MSK (0x000001C0)
#define PMA_RX_MGS_SCRATCHY_0_REFCKSEL_MUXD2_BF_DEF (0x00000040)

///< Select the source for  the reference clock mux for RXDCO. 0 - TXPLL
///< soc postdiv, 1 - ioa_ck_ref_left/right[0], 2 - ioa_ck_ref_left/right[1],
///< 3 - ioa_ck_ref_left/right[2], 4 - ioa_ck_ref_left/right[3], 4/5/6/7
///< - 1'b0
#define PMA_RX_MGS_SCRATCHY_0_REFCKSEL_MUXD3_BF_OFF ( 9)
#define PMA_RX_MGS_SCRATCHY_0_REFCKSEL_MUXD3_BF_WID ( 3)
#define PMA_RX_MGS_SCRATCHY_0_REFCKSEL_MUXD3_BF_MSK (0x00000E00)
#define PMA_RX_MGS_SCRATCHY_0_REFCKSEL_MUXD3_BF_DEF (0x00000200)

///< Select the source for  the reference clock mux for RXDCO. 0 - TXPLL
///< soc postdiv, 1 - ioa_ck_ref_left/right[0], 2 - ioa_ck_ref_left/right[1],
///< 3 - ioa_ck_ref_left/right[2], 4 - ioa_ck_ref_left/right[3], 4/5/6/7
///< - 1'b0
#define PMA_RX_MGS_SCRATCHY_0_REFCKSEL_MUXD4_BF_OFF (12)
#define PMA_RX_MGS_SCRATCHY_0_REFCKSEL_MUXD4_BF_WID ( 3)
#define PMA_RX_MGS_SCRATCHY_0_REFCKSEL_MUXD4_BF_MSK (0x00007000)
#define PMA_RX_MGS_SCRATCHY_0_REFCKSEL_MUXD4_BF_DEF (0x00001000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_SCRATCHY_1 register description at address offset 0x374
  *
  * Register default value:        0x01041041
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_scratchy_1
  * Orchy RX scratch register
  */

typedef union {
  struct {
    uint32_t REFDIV_MUXD0 : 6;
    ///< Reference clock divider value for RXDCO
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t REFDIV_MUXD1 : 6;
    ///< Reference clock divider value for RXDCO
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t REFDIV_MUXD2 : 6;
    ///< Reference clock divider value for RXDCO
    ///< AccessType="RW" BitOffset="12" ResetValue="0x1"
    uint32_t REFDIV_MUXD3 : 6;
    ///< Reference clock divider value for RXDCO
    ///< AccessType="RW" BitOffset="18" ResetValue="0x1"
    uint32_t REFDIV_MUXD4 : 6;
    ///< Reference clock divider value for RXDCO
    ///< AccessType="RW" BitOffset="24" ResetValue="0x1"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_scratchy_1_reg_t;

#define PMA_RX_MGS_SCRATCHY_1_DEFAULT (0x01041041U)
#define PMA_RX_MGS_SCRATCHY_1_RD_MASK (0x3fffffffU)
#define PMA_RX_MGS_SCRATCHY_1_WR_MASK (0x3fffffffU)


///< Reference clock divider value for RXDCO
#define PMA_RX_MGS_SCRATCHY_1_REFDIV_MUXD0_BF_OFF ( 0)
#define PMA_RX_MGS_SCRATCHY_1_REFDIV_MUXD0_BF_WID ( 6)
#define PMA_RX_MGS_SCRATCHY_1_REFDIV_MUXD0_BF_MSK (0x0000003F)
#define PMA_RX_MGS_SCRATCHY_1_REFDIV_MUXD0_BF_DEF (0x00000001)

///< Reference clock divider value for RXDCO
#define PMA_RX_MGS_SCRATCHY_1_REFDIV_MUXD1_BF_OFF ( 6)
#define PMA_RX_MGS_SCRATCHY_1_REFDIV_MUXD1_BF_WID ( 6)
#define PMA_RX_MGS_SCRATCHY_1_REFDIV_MUXD1_BF_MSK (0x00000FC0)
#define PMA_RX_MGS_SCRATCHY_1_REFDIV_MUXD1_BF_DEF (0x00000040)

///< Reference clock divider value for RXDCO
#define PMA_RX_MGS_SCRATCHY_1_REFDIV_MUXD2_BF_OFF (12)
#define PMA_RX_MGS_SCRATCHY_1_REFDIV_MUXD2_BF_WID ( 6)
#define PMA_RX_MGS_SCRATCHY_1_REFDIV_MUXD2_BF_MSK (0x0003F000)
#define PMA_RX_MGS_SCRATCHY_1_REFDIV_MUXD2_BF_DEF (0x00001000)

///< Reference clock divider value for RXDCO
#define PMA_RX_MGS_SCRATCHY_1_REFDIV_MUXD3_BF_OFF (18)
#define PMA_RX_MGS_SCRATCHY_1_REFDIV_MUXD3_BF_WID ( 6)
#define PMA_RX_MGS_SCRATCHY_1_REFDIV_MUXD3_BF_MSK (0x00FC0000)
#define PMA_RX_MGS_SCRATCHY_1_REFDIV_MUXD3_BF_DEF (0x00040000)

///< Reference clock divider value for RXDCO
#define PMA_RX_MGS_SCRATCHY_1_REFDIV_MUXD4_BF_OFF (24)
#define PMA_RX_MGS_SCRATCHY_1_REFDIV_MUXD4_BF_WID ( 6)
#define PMA_RX_MGS_SCRATCHY_1_REFDIV_MUXD4_BF_MSK (0x3F000000)
#define PMA_RX_MGS_SCRATCHY_1_REFDIV_MUXD4_BF_DEF (0x01000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_GENERAL_CONTROL register description at address offset 0x400
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_general_control
  * rx_cdr_general_control
  */

typedef union {
  struct {
    uint32_t RX_CDR_LOCAL_GEN_RESET : 1;
    ///< Reset entire CDR
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_LOCAL_DIGLF_RESET : 1;
    ///< Reset digital loop filter
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RX_CDR_LOCK2REF_ON_DEMAND : 1;
    ///< Force lock to reference
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t RX_CDR_LOCK2DATA_ON_DEMAND : 1;
    ///< Force lock to data (priority if L2R set)
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RX_PAM4_EN : 1;
    ///< Rx PAM4 Enable
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RXADC_2X_DOUBLE_RATE : 1;
    ///< allowed decode of the mode where bang-bang phase detector can be turned
    ///< on
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_general_ctrl_reg_t;

#define PMA_RX_MGS_CDR_GENERAL_CTRL_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CDR_GENERAL_CTRL_RD_MASK (0x0000003fU)
#define PMA_RX_MGS_CDR_GENERAL_CTRL_WR_MASK (0x0000003fU)


///< Reset entire CDR
#define PMA_RX_MGS_CDR_GENERAL_CTRL_RX_CDR_LOCAL_GEN_RST_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_GENERAL_CTRL_RX_CDR_LOCAL_GEN_RST_BF_WID ( 1)
#define PMA_RX_MGS_CDR_GENERAL_CTRL_RX_CDR_LOCAL_GEN_RST_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_GENERAL_CTRL_RX_CDR_LOCAL_GEN_RST_BF_DEF (0x00000000)

///< Reset digital loop filter
#define PMA_RX_MGS_CDR_GENERAL_CTRL_RX_CDR_LOCAL_DIGLF_RST_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_GENERAL_CTRL_RX_CDR_LOCAL_DIGLF_RST_BF_WID ( 1)
#define PMA_RX_MGS_CDR_GENERAL_CTRL_RX_CDR_LOCAL_DIGLF_RST_BF_MSK (0x00000002)
#define PMA_RX_MGS_CDR_GENERAL_CTRL_RX_CDR_LOCAL_DIGLF_RST_BF_DEF (0x00000000)

///< Force lock to reference
#define PMA_RX_MGS_CDR_GENERAL_CTRL_RX_CDR_LOCK2REF_ON_DEMAND_BF_OFF ( 2)
#define PMA_RX_MGS_CDR_GENERAL_CTRL_RX_CDR_LOCK2REF_ON_DEMAND_BF_WID ( 1)
#define PMA_RX_MGS_CDR_GENERAL_CTRL_RX_CDR_LOCK2REF_ON_DEMAND_BF_MSK (0x00000004)
#define PMA_RX_MGS_CDR_GENERAL_CTRL_RX_CDR_LOCK2REF_ON_DEMAND_BF_DEF (0x00000000)

///< Force lock to data (priority if L2R set)
#define PMA_RX_MGS_CDR_GENERAL_CTRL_RX_CDR_LOCK2DATA_ON_DEMAND_BF_OFF ( 3)
#define PMA_RX_MGS_CDR_GENERAL_CTRL_RX_CDR_LOCK2DATA_ON_DEMAND_BF_WID ( 1)
#define PMA_RX_MGS_CDR_GENERAL_CTRL_RX_CDR_LOCK2DATA_ON_DEMAND_BF_MSK (0x00000008)
#define PMA_RX_MGS_CDR_GENERAL_CTRL_RX_CDR_LOCK2DATA_ON_DEMAND_BF_DEF (0x00000000)

///< Rx PAM4 Enable
#define PMA_RX_MGS_CDR_GENERAL_CTRL_RX_PAM4_EN_BF_OFF ( 4)
#define PMA_RX_MGS_CDR_GENERAL_CTRL_RX_PAM4_EN_BF_WID ( 1)
#define PMA_RX_MGS_CDR_GENERAL_CTRL_RX_PAM4_EN_BF_MSK (0x00000010)
#define PMA_RX_MGS_CDR_GENERAL_CTRL_RX_PAM4_EN_BF_DEF (0x00000000)

///< allowed decode of the mode where bang-bang phase detector can be turned
///< on
#define PMA_RX_MGS_CDR_GENERAL_CTRL_RXADC_2X_DOUBLE_RATE_BF_OFF ( 5)
#define PMA_RX_MGS_CDR_GENERAL_CTRL_RXADC_2X_DOUBLE_RATE_BF_WID ( 1)
#define PMA_RX_MGS_CDR_GENERAL_CTRL_RXADC_2X_DOUBLE_RATE_BF_MSK (0x00000020)
#define PMA_RX_MGS_CDR_GENERAL_CTRL_RXADC_2X_DOUBLE_RATE_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_DIV0_MUXD0 register description at address offset 0x404
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_div0_muxd0
  * rx_cdr_div0
  */

typedef union {
  struct {
    uint32_t RX_CDR_FBDIV_FRAC_MUXD0 : 32;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_div0_muxd0_reg_t;

#define PMA_RX_MGS_CDR_DIV0_MUXD0_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CDR_DIV0_MUXD0_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_CDR_DIV0_MUXD0_WR_MASK (0xffffffffU)


#define PMA_RX_MGS_CDR_DIV0_MUXD0_RX_CDR_FBDIV_FRAC_MUXD0_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_DIV0_MUXD0_RX_CDR_FBDIV_FRAC_MUXD0_BF_WID (32)
#define PMA_RX_MGS_CDR_DIV0_MUXD0_RX_CDR_FBDIV_FRAC_MUXD0_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MGS_CDR_DIV0_MUXD0_RX_CDR_FBDIV_FRAC_MUXD0_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_DIV0_MUXD1 register description at address offset 0x408
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_div0_muxd1
  * rx_cdr_div0
  */

typedef union {
  struct {
    uint32_t RX_CDR_FBDIV_FRAC_MUXD1 : 32;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_div0_muxd1_reg_t;

#define PMA_RX_MGS_CDR_DIV0_MUXD1_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CDR_DIV0_MUXD1_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_CDR_DIV0_MUXD1_WR_MASK (0xffffffffU)


#define PMA_RX_MGS_CDR_DIV0_MUXD1_RX_CDR_FBDIV_FRAC_MUXD1_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_DIV0_MUXD1_RX_CDR_FBDIV_FRAC_MUXD1_BF_WID (32)
#define PMA_RX_MGS_CDR_DIV0_MUXD1_RX_CDR_FBDIV_FRAC_MUXD1_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MGS_CDR_DIV0_MUXD1_RX_CDR_FBDIV_FRAC_MUXD1_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_DIV0_MUXD2 register description at address offset 0x40c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_div0_muxd2
  * rx_cdr_div0
  */

typedef union {
  struct {
    uint32_t RX_CDR_FBDIV_FRAC_MUXD2 : 32;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_div0_muxd2_reg_t;

#define PMA_RX_MGS_CDR_DIV0_MUXD2_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CDR_DIV0_MUXD2_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_CDR_DIV0_MUXD2_WR_MASK (0xffffffffU)


#define PMA_RX_MGS_CDR_DIV0_MUXD2_RX_CDR_FBDIV_FRAC_MUXD2_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_DIV0_MUXD2_RX_CDR_FBDIV_FRAC_MUXD2_BF_WID (32)
#define PMA_RX_MGS_CDR_DIV0_MUXD2_RX_CDR_FBDIV_FRAC_MUXD2_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MGS_CDR_DIV0_MUXD2_RX_CDR_FBDIV_FRAC_MUXD2_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_DIV0_MUXD3 register description at address offset 0x410
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_div0_muxd3
  * rx_cdr_div0
  */

typedef union {
  struct {
    uint32_t RX_CDR_FBDIV_FRAC_MUXD3 : 32;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_div0_muxd3_reg_t;

#define PMA_RX_MGS_CDR_DIV0_MUXD3_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CDR_DIV0_MUXD3_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_CDR_DIV0_MUXD3_WR_MASK (0xffffffffU)


#define PMA_RX_MGS_CDR_DIV0_MUXD3_RX_CDR_FBDIV_FRAC_MUXD3_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_DIV0_MUXD3_RX_CDR_FBDIV_FRAC_MUXD3_BF_WID (32)
#define PMA_RX_MGS_CDR_DIV0_MUXD3_RX_CDR_FBDIV_FRAC_MUXD3_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MGS_CDR_DIV0_MUXD3_RX_CDR_FBDIV_FRAC_MUXD3_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_DIV0_MUXD4 register description at address offset 0x414
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_div0_muxd4
  * rx_cdr_div0
  */

typedef union {
  struct {
    uint32_t RX_CDR_FBDIV_FRAC_MUXD4 : 32;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_div0_muxd4_reg_t;

#define PMA_RX_MGS_CDR_DIV0_MUXD4_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CDR_DIV0_MUXD4_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_CDR_DIV0_MUXD4_WR_MASK (0xffffffffU)


#define PMA_RX_MGS_CDR_DIV0_MUXD4_RX_CDR_FBDIV_FRAC_MUXD4_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_DIV0_MUXD4_RX_CDR_FBDIV_FRAC_MUXD4_BF_WID (32)
#define PMA_RX_MGS_CDR_DIV0_MUXD4_RX_CDR_FBDIV_FRAC_MUXD4_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MGS_CDR_DIV0_MUXD4_RX_CDR_FBDIV_FRAC_MUXD4_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_FRAC_LOCK0_MUXD0 register description at address offset 0x418
  *
  * Register default value:        0x00002C0C
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_frac_lock0_muxd0
  * rx_cdr_frac_lock0
  */

typedef union {
  struct {
    uint32_t RX_CDR_FEEDFWRDGAIN_MUXD0 : 8;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0xC"
    uint32_t RX_CDR_FEEDFWRDCAL_EN_H_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RX_CDR_FEEDFWRDCAL_PAUSE_H_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t RX_CDR_DCODITHEREN_H_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x1"
    uint32_t RX_CDR_LOCK_CRITERIA_MUXD0 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x5"
    uint32_t RX_CDR_FBDIV_STROBE_H_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t RX_CDR_DITHER_VALUE_MUXD0 : 5;
    ///< ---
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RX_CDR_SIGMA_DELTA2_SEL_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t RX_CDR_HIGH_SPEED_SD_EN_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_frac_lock0_muxd0_reg_t;

#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD0_DEFAULT (0x00002c0cU)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD0_RD_MASK (0x003fffffU)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD0_WR_MASK (0x003fffffU)


#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD0_RX_CDR_FEEDFWRDGAIN_MUXD0_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD0_RX_CDR_FEEDFWRDGAIN_MUXD0_BF_WID ( 8)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD0_RX_CDR_FEEDFWRDGAIN_MUXD0_BF_MSK (0x000000FF)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD0_RX_CDR_FEEDFWRDGAIN_MUXD0_BF_DEF (0x0000000C)

#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD0_RX_CDR_FEEDFWRDCAL_EN_H_MUXD0_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD0_RX_CDR_FEEDFWRDCAL_EN_H_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD0_RX_CDR_FEEDFWRDCAL_EN_H_MUXD0_BF_MSK (0x00000100)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD0_RX_CDR_FEEDFWRDCAL_EN_H_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD0_RX_CDR_FEEDFWRDCAL_PAUSE_H_MUXD0_BF_OFF ( 9)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD0_RX_CDR_FEEDFWRDCAL_PAUSE_H_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD0_RX_CDR_FEEDFWRDCAL_PAUSE_H_MUXD0_BF_MSK (0x00000200)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD0_RX_CDR_FEEDFWRDCAL_PAUSE_H_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD0_RX_CDR_DCODITHEREN_H_MUXD0_BF_OFF (10)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD0_RX_CDR_DCODITHEREN_H_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD0_RX_CDR_DCODITHEREN_H_MUXD0_BF_MSK (0x00000400)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD0_RX_CDR_DCODITHEREN_H_MUXD0_BF_DEF (0x00000400)

#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD0_RX_CDR_LOCK_CRITERIA_MUXD0_BF_OFF (11)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD0_RX_CDR_LOCK_CRITERIA_MUXD0_BF_WID ( 3)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD0_RX_CDR_LOCK_CRITERIA_MUXD0_BF_MSK (0x00003800)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD0_RX_CDR_LOCK_CRITERIA_MUXD0_BF_DEF (0x00002800)

#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD0_RX_CDR_FBDIV_STROBE_H_MUXD0_BF_OFF (14)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD0_RX_CDR_FBDIV_STROBE_H_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD0_RX_CDR_FBDIV_STROBE_H_MUXD0_BF_MSK (0x00004000)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD0_RX_CDR_FBDIV_STROBE_H_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD0_RX_CDR_DITHER_VAL_MUXD0_BF_OFF (15)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD0_RX_CDR_DITHER_VAL_MUXD0_BF_WID ( 5)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD0_RX_CDR_DITHER_VAL_MUXD0_BF_MSK (0x000F8000)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD0_RX_CDR_DITHER_VAL_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD0_RX_CDR_SIGMA_DELTA2_SEL_MUXD0_BF_OFF (20)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD0_RX_CDR_SIGMA_DELTA2_SEL_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD0_RX_CDR_SIGMA_DELTA2_SEL_MUXD0_BF_MSK (0x00100000)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD0_RX_CDR_SIGMA_DELTA2_SEL_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD0_RX_CDR_HIGH_SPEED_SD_EN_MUXD0_BF_OFF (21)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD0_RX_CDR_HIGH_SPEED_SD_EN_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD0_RX_CDR_HIGH_SPEED_SD_EN_MUXD0_BF_MSK (0x00200000)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD0_RX_CDR_HIGH_SPEED_SD_EN_MUXD0_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_FRAC_LOCK0_MUXD1 register description at address offset 0x41c
  *
  * Register default value:        0x00002C0C
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_frac_lock0_muxd1
  * rx_cdr_frac_lock0
  */

typedef union {
  struct {
    uint32_t RX_CDR_FEEDFWRDGAIN_MUXD1 : 8;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0xC"
    uint32_t RX_CDR_FEEDFWRDCAL_EN_H_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RX_CDR_FEEDFWRDCAL_PAUSE_H_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t RX_CDR_DCODITHEREN_H_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x1"
    uint32_t RX_CDR_LOCK_CRITERIA_MUXD1 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x5"
    uint32_t RX_CDR_FBDIV_STROBE_H_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t RX_CDR_DITHER_VALUE_MUXD1 : 5;
    ///< ---
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RX_CDR_SIGMA_DELTA2_SEL_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t RX_CDR_HIGH_SPEED_SD_EN_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_frac_lock0_muxd1_reg_t;

#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD1_DEFAULT (0x00002c0cU)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD1_RD_MASK (0x003fffffU)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD1_WR_MASK (0x003fffffU)


#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD1_RX_CDR_FEEDFWRDGAIN_MUXD1_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD1_RX_CDR_FEEDFWRDGAIN_MUXD1_BF_WID ( 8)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD1_RX_CDR_FEEDFWRDGAIN_MUXD1_BF_MSK (0x000000FF)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD1_RX_CDR_FEEDFWRDGAIN_MUXD1_BF_DEF (0x0000000C)

#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD1_RX_CDR_FEEDFWRDCAL_EN_H_MUXD1_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD1_RX_CDR_FEEDFWRDCAL_EN_H_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD1_RX_CDR_FEEDFWRDCAL_EN_H_MUXD1_BF_MSK (0x00000100)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD1_RX_CDR_FEEDFWRDCAL_EN_H_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD1_RX_CDR_FEEDFWRDCAL_PAUSE_H_MUXD1_BF_OFF ( 9)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD1_RX_CDR_FEEDFWRDCAL_PAUSE_H_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD1_RX_CDR_FEEDFWRDCAL_PAUSE_H_MUXD1_BF_MSK (0x00000200)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD1_RX_CDR_FEEDFWRDCAL_PAUSE_H_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD1_RX_CDR_DCODITHEREN_H_MUXD1_BF_OFF (10)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD1_RX_CDR_DCODITHEREN_H_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD1_RX_CDR_DCODITHEREN_H_MUXD1_BF_MSK (0x00000400)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD1_RX_CDR_DCODITHEREN_H_MUXD1_BF_DEF (0x00000400)

#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD1_RX_CDR_LOCK_CRITERIA_MUXD1_BF_OFF (11)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD1_RX_CDR_LOCK_CRITERIA_MUXD1_BF_WID ( 3)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD1_RX_CDR_LOCK_CRITERIA_MUXD1_BF_MSK (0x00003800)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD1_RX_CDR_LOCK_CRITERIA_MUXD1_BF_DEF (0x00002800)

#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD1_RX_CDR_FBDIV_STROBE_H_MUXD1_BF_OFF (14)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD1_RX_CDR_FBDIV_STROBE_H_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD1_RX_CDR_FBDIV_STROBE_H_MUXD1_BF_MSK (0x00004000)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD1_RX_CDR_FBDIV_STROBE_H_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD1_RX_CDR_DITHER_VAL_MUXD1_BF_OFF (15)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD1_RX_CDR_DITHER_VAL_MUXD1_BF_WID ( 5)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD1_RX_CDR_DITHER_VAL_MUXD1_BF_MSK (0x000F8000)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD1_RX_CDR_DITHER_VAL_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD1_RX_CDR_SIGMA_DELTA2_SEL_MUXD1_BF_OFF (20)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD1_RX_CDR_SIGMA_DELTA2_SEL_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD1_RX_CDR_SIGMA_DELTA2_SEL_MUXD1_BF_MSK (0x00100000)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD1_RX_CDR_SIGMA_DELTA2_SEL_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD1_RX_CDR_HIGH_SPEED_SD_EN_MUXD1_BF_OFF (21)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD1_RX_CDR_HIGH_SPEED_SD_EN_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD1_RX_CDR_HIGH_SPEED_SD_EN_MUXD1_BF_MSK (0x00200000)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD1_RX_CDR_HIGH_SPEED_SD_EN_MUXD1_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_FRAC_LOCK0_MUXD2 register description at address offset 0x420
  *
  * Register default value:        0x00002C0C
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_frac_lock0_muxd2
  * rx_cdr_frac_lock0
  */

typedef union {
  struct {
    uint32_t RX_CDR_FEEDFWRDGAIN_MUXD2 : 8;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0xC"
    uint32_t RX_CDR_FEEDFWRDCAL_EN_H_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RX_CDR_FEEDFWRDCAL_PAUSE_H_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t RX_CDR_DCODITHEREN_H_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x1"
    uint32_t RX_CDR_LOCK_CRITERIA_MUXD2 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x5"
    uint32_t RX_CDR_FBDIV_STROBE_H_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t RX_CDR_DITHER_VALUE_MUXD2 : 5;
    ///< ---
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RX_CDR_SIGMA_DELTA2_SEL_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t RX_CDR_HIGH_SPEED_SD_EN_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_frac_lock0_muxd2_reg_t;

#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD2_DEFAULT (0x00002c0cU)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD2_RD_MASK (0x003fffffU)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD2_WR_MASK (0x003fffffU)


#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD2_RX_CDR_FEEDFWRDGAIN_MUXD2_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD2_RX_CDR_FEEDFWRDGAIN_MUXD2_BF_WID ( 8)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD2_RX_CDR_FEEDFWRDGAIN_MUXD2_BF_MSK (0x000000FF)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD2_RX_CDR_FEEDFWRDGAIN_MUXD2_BF_DEF (0x0000000C)

#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD2_RX_CDR_FEEDFWRDCAL_EN_H_MUXD2_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD2_RX_CDR_FEEDFWRDCAL_EN_H_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD2_RX_CDR_FEEDFWRDCAL_EN_H_MUXD2_BF_MSK (0x00000100)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD2_RX_CDR_FEEDFWRDCAL_EN_H_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD2_RX_CDR_FEEDFWRDCAL_PAUSE_H_MUXD2_BF_OFF ( 9)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD2_RX_CDR_FEEDFWRDCAL_PAUSE_H_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD2_RX_CDR_FEEDFWRDCAL_PAUSE_H_MUXD2_BF_MSK (0x00000200)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD2_RX_CDR_FEEDFWRDCAL_PAUSE_H_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD2_RX_CDR_DCODITHEREN_H_MUXD2_BF_OFF (10)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD2_RX_CDR_DCODITHEREN_H_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD2_RX_CDR_DCODITHEREN_H_MUXD2_BF_MSK (0x00000400)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD2_RX_CDR_DCODITHEREN_H_MUXD2_BF_DEF (0x00000400)

#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD2_RX_CDR_LOCK_CRITERIA_MUXD2_BF_OFF (11)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD2_RX_CDR_LOCK_CRITERIA_MUXD2_BF_WID ( 3)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD2_RX_CDR_LOCK_CRITERIA_MUXD2_BF_MSK (0x00003800)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD2_RX_CDR_LOCK_CRITERIA_MUXD2_BF_DEF (0x00002800)

#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD2_RX_CDR_FBDIV_STROBE_H_MUXD2_BF_OFF (14)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD2_RX_CDR_FBDIV_STROBE_H_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD2_RX_CDR_FBDIV_STROBE_H_MUXD2_BF_MSK (0x00004000)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD2_RX_CDR_FBDIV_STROBE_H_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD2_RX_CDR_DITHER_VAL_MUXD2_BF_OFF (15)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD2_RX_CDR_DITHER_VAL_MUXD2_BF_WID ( 5)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD2_RX_CDR_DITHER_VAL_MUXD2_BF_MSK (0x000F8000)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD2_RX_CDR_DITHER_VAL_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD2_RX_CDR_SIGMA_DELTA2_SEL_MUXD2_BF_OFF (20)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD2_RX_CDR_SIGMA_DELTA2_SEL_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD2_RX_CDR_SIGMA_DELTA2_SEL_MUXD2_BF_MSK (0x00100000)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD2_RX_CDR_SIGMA_DELTA2_SEL_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD2_RX_CDR_HIGH_SPEED_SD_EN_MUXD2_BF_OFF (21)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD2_RX_CDR_HIGH_SPEED_SD_EN_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD2_RX_CDR_HIGH_SPEED_SD_EN_MUXD2_BF_MSK (0x00200000)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD2_RX_CDR_HIGH_SPEED_SD_EN_MUXD2_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_FRAC_LOCK0_MUXD3 register description at address offset 0x424
  *
  * Register default value:        0x00002C0C
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_frac_lock0_muxd3
  * rx_cdr_frac_lock0
  */

typedef union {
  struct {
    uint32_t RX_CDR_FEEDFWRDGAIN_MUXD3 : 8;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0xC"
    uint32_t RX_CDR_FEEDFWRDCAL_EN_H_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RX_CDR_FEEDFWRDCAL_PAUSE_H_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t RX_CDR_DCODITHEREN_H_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x1"
    uint32_t RX_CDR_LOCK_CRITERIA_MUXD3 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x5"
    uint32_t RX_CDR_FBDIV_STROBE_H_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t RX_CDR_DITHER_VALUE_MUXD3 : 5;
    ///< ---
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RX_CDR_SIGMA_DELTA2_SEL_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t RX_CDR_HIGH_SPEED_SD_EN_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_frac_lock0_muxd3_reg_t;

#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD3_DEFAULT (0x00002c0cU)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD3_RD_MASK (0x003fffffU)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD3_WR_MASK (0x003fffffU)


#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD3_RX_CDR_FEEDFWRDGAIN_MUXD3_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD3_RX_CDR_FEEDFWRDGAIN_MUXD3_BF_WID ( 8)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD3_RX_CDR_FEEDFWRDGAIN_MUXD3_BF_MSK (0x000000FF)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD3_RX_CDR_FEEDFWRDGAIN_MUXD3_BF_DEF (0x0000000C)

#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD3_RX_CDR_FEEDFWRDCAL_EN_H_MUXD3_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD3_RX_CDR_FEEDFWRDCAL_EN_H_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD3_RX_CDR_FEEDFWRDCAL_EN_H_MUXD3_BF_MSK (0x00000100)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD3_RX_CDR_FEEDFWRDCAL_EN_H_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD3_RX_CDR_FEEDFWRDCAL_PAUSE_H_MUXD3_BF_OFF ( 9)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD3_RX_CDR_FEEDFWRDCAL_PAUSE_H_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD3_RX_CDR_FEEDFWRDCAL_PAUSE_H_MUXD3_BF_MSK (0x00000200)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD3_RX_CDR_FEEDFWRDCAL_PAUSE_H_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD3_RX_CDR_DCODITHEREN_H_MUXD3_BF_OFF (10)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD3_RX_CDR_DCODITHEREN_H_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD3_RX_CDR_DCODITHEREN_H_MUXD3_BF_MSK (0x00000400)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD3_RX_CDR_DCODITHEREN_H_MUXD3_BF_DEF (0x00000400)

#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD3_RX_CDR_LOCK_CRITERIA_MUXD3_BF_OFF (11)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD3_RX_CDR_LOCK_CRITERIA_MUXD3_BF_WID ( 3)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD3_RX_CDR_LOCK_CRITERIA_MUXD3_BF_MSK (0x00003800)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD3_RX_CDR_LOCK_CRITERIA_MUXD3_BF_DEF (0x00002800)

#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD3_RX_CDR_FBDIV_STROBE_H_MUXD3_BF_OFF (14)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD3_RX_CDR_FBDIV_STROBE_H_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD3_RX_CDR_FBDIV_STROBE_H_MUXD3_BF_MSK (0x00004000)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD3_RX_CDR_FBDIV_STROBE_H_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD3_RX_CDR_DITHER_VAL_MUXD3_BF_OFF (15)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD3_RX_CDR_DITHER_VAL_MUXD3_BF_WID ( 5)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD3_RX_CDR_DITHER_VAL_MUXD3_BF_MSK (0x000F8000)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD3_RX_CDR_DITHER_VAL_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD3_RX_CDR_SIGMA_DELTA2_SEL_MUXD3_BF_OFF (20)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD3_RX_CDR_SIGMA_DELTA2_SEL_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD3_RX_CDR_SIGMA_DELTA2_SEL_MUXD3_BF_MSK (0x00100000)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD3_RX_CDR_SIGMA_DELTA2_SEL_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD3_RX_CDR_HIGH_SPEED_SD_EN_MUXD3_BF_OFF (21)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD3_RX_CDR_HIGH_SPEED_SD_EN_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD3_RX_CDR_HIGH_SPEED_SD_EN_MUXD3_BF_MSK (0x00200000)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD3_RX_CDR_HIGH_SPEED_SD_EN_MUXD3_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_FRAC_LOCK0_MUXD4 register description at address offset 0x428
  *
  * Register default value:        0x00002C0C
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_frac_lock0_muxd4
  * rx_cdr_frac_lock0
  */

typedef union {
  struct {
    uint32_t RX_CDR_FEEDFWRDGAIN_MUXD4 : 8;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0xC"
    uint32_t RX_CDR_FEEDFWRDCAL_EN_H_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RX_CDR_FEEDFWRDCAL_PAUSE_H_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t RX_CDR_DCODITHEREN_H_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x1"
    uint32_t RX_CDR_LOCK_CRITERIA_MUXD4 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x5"
    uint32_t RX_CDR_FBDIV_STROBE_H_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t RX_CDR_DITHER_VALUE_MUXD4 : 5;
    ///< ---
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RX_CDR_SIGMA_DELTA2_SEL_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t RX_CDR_HIGH_SPEED_SD_EN_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_frac_lock0_muxd4_reg_t;

#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD4_DEFAULT (0x00002c0cU)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD4_RD_MASK (0x003fffffU)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD4_WR_MASK (0x003fffffU)


#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD4_RX_CDR_FEEDFWRDGAIN_MUXD4_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD4_RX_CDR_FEEDFWRDGAIN_MUXD4_BF_WID ( 8)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD4_RX_CDR_FEEDFWRDGAIN_MUXD4_BF_MSK (0x000000FF)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD4_RX_CDR_FEEDFWRDGAIN_MUXD4_BF_DEF (0x0000000C)

#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD4_RX_CDR_FEEDFWRDCAL_EN_H_MUXD4_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD4_RX_CDR_FEEDFWRDCAL_EN_H_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD4_RX_CDR_FEEDFWRDCAL_EN_H_MUXD4_BF_MSK (0x00000100)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD4_RX_CDR_FEEDFWRDCAL_EN_H_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD4_RX_CDR_FEEDFWRDCAL_PAUSE_H_MUXD4_BF_OFF ( 9)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD4_RX_CDR_FEEDFWRDCAL_PAUSE_H_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD4_RX_CDR_FEEDFWRDCAL_PAUSE_H_MUXD4_BF_MSK (0x00000200)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD4_RX_CDR_FEEDFWRDCAL_PAUSE_H_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD4_RX_CDR_DCODITHEREN_H_MUXD4_BF_OFF (10)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD4_RX_CDR_DCODITHEREN_H_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD4_RX_CDR_DCODITHEREN_H_MUXD4_BF_MSK (0x00000400)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD4_RX_CDR_DCODITHEREN_H_MUXD4_BF_DEF (0x00000400)

#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD4_RX_CDR_LOCK_CRITERIA_MUXD4_BF_OFF (11)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD4_RX_CDR_LOCK_CRITERIA_MUXD4_BF_WID ( 3)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD4_RX_CDR_LOCK_CRITERIA_MUXD4_BF_MSK (0x00003800)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD4_RX_CDR_LOCK_CRITERIA_MUXD4_BF_DEF (0x00002800)

#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD4_RX_CDR_FBDIV_STROBE_H_MUXD4_BF_OFF (14)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD4_RX_CDR_FBDIV_STROBE_H_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD4_RX_CDR_FBDIV_STROBE_H_MUXD4_BF_MSK (0x00004000)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD4_RX_CDR_FBDIV_STROBE_H_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD4_RX_CDR_DITHER_VAL_MUXD4_BF_OFF (15)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD4_RX_CDR_DITHER_VAL_MUXD4_BF_WID ( 5)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD4_RX_CDR_DITHER_VAL_MUXD4_BF_MSK (0x000F8000)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD4_RX_CDR_DITHER_VAL_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD4_RX_CDR_SIGMA_DELTA2_SEL_MUXD4_BF_OFF (20)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD4_RX_CDR_SIGMA_DELTA2_SEL_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD4_RX_CDR_SIGMA_DELTA2_SEL_MUXD4_BF_MSK (0x00100000)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD4_RX_CDR_SIGMA_DELTA2_SEL_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD4_RX_CDR_HIGH_SPEED_SD_EN_MUXD4_BF_OFF (21)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD4_RX_CDR_HIGH_SPEED_SD_EN_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD4_RX_CDR_HIGH_SPEED_SD_EN_MUXD4_BF_MSK (0x00200000)
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD4_RX_CDR_HIGH_SPEED_SD_EN_MUXD4_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_FRAC_LOCK1_MUXD0 register description at address offset 0x42c
  *
  * Register default value:        0x0000DB05
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_frac_lock1_muxd0
  * rx_cdr_frac_lock1
  */

typedef union {
  struct {
    uint32_t RX_CDR_LOCK_THRESH_MUXD0 : 5;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x5"
    uint32_t RX_CDR_FINE_FIRST_BOOST_REPEAT_MUXD0 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t RX_CDR_L2D_INTEGRAL_SHIFT_FACTOR_MUXD0 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x3"
    uint32_t RX_CDR_L2R_INTEGRAL_SHIFT_FACTOR_MUXD0 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x3"
    uint32_t RX_CDR_L2R_PROP_SHIFT_FACTOR_MUXD0 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="14" ResetValue="0x3"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_frac_lock1_muxd0_reg_t;

#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD0_DEFAULT (0x0000db05U)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD0_RD_MASK (0x0001ffffU)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD0_WR_MASK (0x0001ffffU)


#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD0_RX_CDR_LOCK_THRESH_MUXD0_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD0_RX_CDR_LOCK_THRESH_MUXD0_BF_WID ( 5)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD0_RX_CDR_LOCK_THRESH_MUXD0_BF_MSK (0x0000001F)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD0_RX_CDR_LOCK_THRESH_MUXD0_BF_DEF (0x00000005)

#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD0_RX_CDR_FINE_FIRST_BOOST_REPEAT_MUXD0_BF_OFF ( 5)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD0_RX_CDR_FINE_FIRST_BOOST_REPEAT_MUXD0_BF_WID ( 3)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD0_RX_CDR_FINE_FIRST_BOOST_REPEAT_MUXD0_BF_MSK (0x000000E0)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD0_RX_CDR_FINE_FIRST_BOOST_REPEAT_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD0_RX_CDR_L2D_INTEGRAL_SHIFT_FACTOR_MUXD0_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD0_RX_CDR_L2D_INTEGRAL_SHIFT_FACTOR_MUXD0_BF_WID ( 3)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD0_RX_CDR_L2D_INTEGRAL_SHIFT_FACTOR_MUXD0_BF_MSK (0x00000700)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD0_RX_CDR_L2D_INTEGRAL_SHIFT_FACTOR_MUXD0_BF_DEF (0x00000300)

#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD0_RX_CDR_L2R_INTEGRAL_SHIFT_FACTOR_MUXD0_BF_OFF (11)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD0_RX_CDR_L2R_INTEGRAL_SHIFT_FACTOR_MUXD0_BF_WID ( 3)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD0_RX_CDR_L2R_INTEGRAL_SHIFT_FACTOR_MUXD0_BF_MSK (0x00003800)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD0_RX_CDR_L2R_INTEGRAL_SHIFT_FACTOR_MUXD0_BF_DEF (0x00001800)

#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD0_RX_CDR_L2R_PROP_SHIFT_FACTOR_MUXD0_BF_OFF (14)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD0_RX_CDR_L2R_PROP_SHIFT_FACTOR_MUXD0_BF_WID ( 3)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD0_RX_CDR_L2R_PROP_SHIFT_FACTOR_MUXD0_BF_MSK (0x0001C000)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD0_RX_CDR_L2R_PROP_SHIFT_FACTOR_MUXD0_BF_DEF (0x0000C000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_FRAC_LOCK1_MUXD1 register description at address offset 0x430
  *
  * Register default value:        0x0000DB05
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_frac_lock1_muxd1
  * rx_cdr_frac_lock1
  */

typedef union {
  struct {
    uint32_t RX_CDR_LOCK_THRESH_MUXD1 : 5;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x5"
    uint32_t RX_CDR_FINE_FIRST_BOOST_REPEAT_MUXD1 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t RX_CDR_L2D_INTEGRAL_SHIFT_FACTOR_MUXD1 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x3"
    uint32_t RX_CDR_L2R_INTEGRAL_SHIFT_FACTOR_MUXD1 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x3"
    uint32_t RX_CDR_L2R_PROP_SHIFT_FACTOR_MUXD1 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="14" ResetValue="0x3"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_frac_lock1_muxd1_reg_t;

#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD1_DEFAULT (0x0000db05U)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD1_RD_MASK (0x0001ffffU)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD1_WR_MASK (0x0001ffffU)


#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD1_RX_CDR_LOCK_THRESH_MUXD1_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD1_RX_CDR_LOCK_THRESH_MUXD1_BF_WID ( 5)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD1_RX_CDR_LOCK_THRESH_MUXD1_BF_MSK (0x0000001F)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD1_RX_CDR_LOCK_THRESH_MUXD1_BF_DEF (0x00000005)

#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD1_RX_CDR_FINE_FIRST_BOOST_REPEAT_MUXD1_BF_OFF ( 5)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD1_RX_CDR_FINE_FIRST_BOOST_REPEAT_MUXD1_BF_WID ( 3)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD1_RX_CDR_FINE_FIRST_BOOST_REPEAT_MUXD1_BF_MSK (0x000000E0)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD1_RX_CDR_FINE_FIRST_BOOST_REPEAT_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD1_RX_CDR_L2D_INTEGRAL_SHIFT_FACTOR_MUXD1_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD1_RX_CDR_L2D_INTEGRAL_SHIFT_FACTOR_MUXD1_BF_WID ( 3)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD1_RX_CDR_L2D_INTEGRAL_SHIFT_FACTOR_MUXD1_BF_MSK (0x00000700)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD1_RX_CDR_L2D_INTEGRAL_SHIFT_FACTOR_MUXD1_BF_DEF (0x00000300)

#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD1_RX_CDR_L2R_INTEGRAL_SHIFT_FACTOR_MUXD1_BF_OFF (11)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD1_RX_CDR_L2R_INTEGRAL_SHIFT_FACTOR_MUXD1_BF_WID ( 3)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD1_RX_CDR_L2R_INTEGRAL_SHIFT_FACTOR_MUXD1_BF_MSK (0x00003800)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD1_RX_CDR_L2R_INTEGRAL_SHIFT_FACTOR_MUXD1_BF_DEF (0x00001800)

#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD1_RX_CDR_L2R_PROP_SHIFT_FACTOR_MUXD1_BF_OFF (14)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD1_RX_CDR_L2R_PROP_SHIFT_FACTOR_MUXD1_BF_WID ( 3)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD1_RX_CDR_L2R_PROP_SHIFT_FACTOR_MUXD1_BF_MSK (0x0001C000)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD1_RX_CDR_L2R_PROP_SHIFT_FACTOR_MUXD1_BF_DEF (0x0000C000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_FRAC_LOCK1_MUXD2 register description at address offset 0x434
  *
  * Register default value:        0x0000DB05
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_frac_lock1_muxd2
  * rx_cdr_frac_lock1
  */

typedef union {
  struct {
    uint32_t RX_CDR_LOCK_THRESH_MUXD2 : 5;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x5"
    uint32_t RX_CDR_FINE_FIRST_BOOST_REPEAT_MUXD2 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t RX_CDR_L2D_INTEGRAL_SHIFT_FACTOR_MUXD2 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x3"
    uint32_t RX_CDR_L2R_INTEGRAL_SHIFT_FACTOR_MUXD2 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x3"
    uint32_t RX_CDR_L2R_PROP_SHIFT_FACTOR_MUXD2 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="14" ResetValue="0x3"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_frac_lock1_muxd2_reg_t;

#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD2_DEFAULT (0x0000db05U)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD2_RD_MASK (0x0001ffffU)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD2_WR_MASK (0x0001ffffU)


#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD2_RX_CDR_LOCK_THRESH_MUXD2_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD2_RX_CDR_LOCK_THRESH_MUXD2_BF_WID ( 5)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD2_RX_CDR_LOCK_THRESH_MUXD2_BF_MSK (0x0000001F)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD2_RX_CDR_LOCK_THRESH_MUXD2_BF_DEF (0x00000005)

#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD2_RX_CDR_FINE_FIRST_BOOST_REPEAT_MUXD2_BF_OFF ( 5)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD2_RX_CDR_FINE_FIRST_BOOST_REPEAT_MUXD2_BF_WID ( 3)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD2_RX_CDR_FINE_FIRST_BOOST_REPEAT_MUXD2_BF_MSK (0x000000E0)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD2_RX_CDR_FINE_FIRST_BOOST_REPEAT_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD2_RX_CDR_L2D_INTEGRAL_SHIFT_FACTOR_MUXD2_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD2_RX_CDR_L2D_INTEGRAL_SHIFT_FACTOR_MUXD2_BF_WID ( 3)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD2_RX_CDR_L2D_INTEGRAL_SHIFT_FACTOR_MUXD2_BF_MSK (0x00000700)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD2_RX_CDR_L2D_INTEGRAL_SHIFT_FACTOR_MUXD2_BF_DEF (0x00000300)

#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD2_RX_CDR_L2R_INTEGRAL_SHIFT_FACTOR_MUXD2_BF_OFF (11)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD2_RX_CDR_L2R_INTEGRAL_SHIFT_FACTOR_MUXD2_BF_WID ( 3)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD2_RX_CDR_L2R_INTEGRAL_SHIFT_FACTOR_MUXD2_BF_MSK (0x00003800)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD2_RX_CDR_L2R_INTEGRAL_SHIFT_FACTOR_MUXD2_BF_DEF (0x00001800)

#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD2_RX_CDR_L2R_PROP_SHIFT_FACTOR_MUXD2_BF_OFF (14)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD2_RX_CDR_L2R_PROP_SHIFT_FACTOR_MUXD2_BF_WID ( 3)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD2_RX_CDR_L2R_PROP_SHIFT_FACTOR_MUXD2_BF_MSK (0x0001C000)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD2_RX_CDR_L2R_PROP_SHIFT_FACTOR_MUXD2_BF_DEF (0x0000C000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_FRAC_LOCK1_MUXD3 register description at address offset 0x438
  *
  * Register default value:        0x0000DB05
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_frac_lock1_muxd3
  * rx_cdr_frac_lock1
  */

typedef union {
  struct {
    uint32_t RX_CDR_LOCK_THRESH_MUXD3 : 5;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x5"
    uint32_t RX_CDR_FINE_FIRST_BOOST_REPEAT_MUXD3 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t RX_CDR_L2D_INTEGRAL_SHIFT_FACTOR_MUXD3 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x3"
    uint32_t RX_CDR_L2R_INTEGRAL_SHIFT_FACTOR_MUXD3 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x3"
    uint32_t RX_CDR_L2R_PROP_SHIFT_FACTOR_MUXD3 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="14" ResetValue="0x3"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_frac_lock1_muxd3_reg_t;

#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD3_DEFAULT (0x0000db05U)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD3_RD_MASK (0x0001ffffU)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD3_WR_MASK (0x0001ffffU)


#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD3_RX_CDR_LOCK_THRESH_MUXD3_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD3_RX_CDR_LOCK_THRESH_MUXD3_BF_WID ( 5)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD3_RX_CDR_LOCK_THRESH_MUXD3_BF_MSK (0x0000001F)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD3_RX_CDR_LOCK_THRESH_MUXD3_BF_DEF (0x00000005)

#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD3_RX_CDR_FINE_FIRST_BOOST_REPEAT_MUXD3_BF_OFF ( 5)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD3_RX_CDR_FINE_FIRST_BOOST_REPEAT_MUXD3_BF_WID ( 3)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD3_RX_CDR_FINE_FIRST_BOOST_REPEAT_MUXD3_BF_MSK (0x000000E0)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD3_RX_CDR_FINE_FIRST_BOOST_REPEAT_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD3_RX_CDR_L2D_INTEGRAL_SHIFT_FACTOR_MUXD3_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD3_RX_CDR_L2D_INTEGRAL_SHIFT_FACTOR_MUXD3_BF_WID ( 3)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD3_RX_CDR_L2D_INTEGRAL_SHIFT_FACTOR_MUXD3_BF_MSK (0x00000700)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD3_RX_CDR_L2D_INTEGRAL_SHIFT_FACTOR_MUXD3_BF_DEF (0x00000300)

#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD3_RX_CDR_L2R_INTEGRAL_SHIFT_FACTOR_MUXD3_BF_OFF (11)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD3_RX_CDR_L2R_INTEGRAL_SHIFT_FACTOR_MUXD3_BF_WID ( 3)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD3_RX_CDR_L2R_INTEGRAL_SHIFT_FACTOR_MUXD3_BF_MSK (0x00003800)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD3_RX_CDR_L2R_INTEGRAL_SHIFT_FACTOR_MUXD3_BF_DEF (0x00001800)

#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD3_RX_CDR_L2R_PROP_SHIFT_FACTOR_MUXD3_BF_OFF (14)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD3_RX_CDR_L2R_PROP_SHIFT_FACTOR_MUXD3_BF_WID ( 3)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD3_RX_CDR_L2R_PROP_SHIFT_FACTOR_MUXD3_BF_MSK (0x0001C000)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD3_RX_CDR_L2R_PROP_SHIFT_FACTOR_MUXD3_BF_DEF (0x0000C000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_FRAC_LOCK1_MUXD4 register description at address offset 0x43c
  *
  * Register default value:        0x0000DB05
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_frac_lock1_muxd4
  * rx_cdr_frac_lock1
  */

typedef union {
  struct {
    uint32_t RX_CDR_LOCK_THRESH_MUXD4 : 5;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x5"
    uint32_t RX_CDR_FINE_FIRST_BOOST_REPEAT_MUXD4 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t RX_CDR_L2D_INTEGRAL_SHIFT_FACTOR_MUXD4 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x3"
    uint32_t RX_CDR_L2R_INTEGRAL_SHIFT_FACTOR_MUXD4 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x3"
    uint32_t RX_CDR_L2R_PROP_SHIFT_FACTOR_MUXD4 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="14" ResetValue="0x3"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_frac_lock1_muxd4_reg_t;

#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD4_DEFAULT (0x0000db05U)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD4_RD_MASK (0x0001ffffU)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD4_WR_MASK (0x0001ffffU)


#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD4_RX_CDR_LOCK_THRESH_MUXD4_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD4_RX_CDR_LOCK_THRESH_MUXD4_BF_WID ( 5)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD4_RX_CDR_LOCK_THRESH_MUXD4_BF_MSK (0x0000001F)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD4_RX_CDR_LOCK_THRESH_MUXD4_BF_DEF (0x00000005)

#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD4_RX_CDR_FINE_FIRST_BOOST_REPEAT_MUXD4_BF_OFF ( 5)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD4_RX_CDR_FINE_FIRST_BOOST_REPEAT_MUXD4_BF_WID ( 3)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD4_RX_CDR_FINE_FIRST_BOOST_REPEAT_MUXD4_BF_MSK (0x000000E0)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD4_RX_CDR_FINE_FIRST_BOOST_REPEAT_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD4_RX_CDR_L2D_INTEGRAL_SHIFT_FACTOR_MUXD4_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD4_RX_CDR_L2D_INTEGRAL_SHIFT_FACTOR_MUXD4_BF_WID ( 3)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD4_RX_CDR_L2D_INTEGRAL_SHIFT_FACTOR_MUXD4_BF_MSK (0x00000700)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD4_RX_CDR_L2D_INTEGRAL_SHIFT_FACTOR_MUXD4_BF_DEF (0x00000300)

#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD4_RX_CDR_L2R_INTEGRAL_SHIFT_FACTOR_MUXD4_BF_OFF (11)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD4_RX_CDR_L2R_INTEGRAL_SHIFT_FACTOR_MUXD4_BF_WID ( 3)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD4_RX_CDR_L2R_INTEGRAL_SHIFT_FACTOR_MUXD4_BF_MSK (0x00003800)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD4_RX_CDR_L2R_INTEGRAL_SHIFT_FACTOR_MUXD4_BF_DEF (0x00001800)

#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD4_RX_CDR_L2R_PROP_SHIFT_FACTOR_MUXD4_BF_OFF (14)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD4_RX_CDR_L2R_PROP_SHIFT_FACTOR_MUXD4_BF_WID ( 3)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD4_RX_CDR_L2R_PROP_SHIFT_FACTOR_MUXD4_BF_MSK (0x0001C000)
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD4_RX_CDR_L2R_PROP_SHIFT_FACTOR_MUXD4_BF_DEF (0x0000C000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_LOCKFSM_CONTROL_MUXD0 register description at address offset 0x440
  *
  * Register default value:        0x00000040
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_lockfsm_control_muxd0
  * rx_cdr_lockfsm_control
  */

typedef union {
  struct {
    uint32_t RX_CDR_WAIT_CNTR_MUXD0 : 8;
    ///< Wait counter values.
    ///< Bits [7:4] used in the wait counter at S_WAIT state as power of 2
    ///< (1<<i_wait_cntr[7:4]) Ref clk  bits [3:0] are used in S_*_TFER and
    ///< S_*_DONE states, varies [0:15] cycles of REF clk  if set to zero no
    ///< wait state is applied
    ///< AccessType="RW" BitOffset="0" ResetValue="0x40"
    uint32_t RX_CDR_PPM_LOCKED_OVR_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RX_CDR_PPM_LOCKED_VAL_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t RX_CDR_PPM_LOST_OVR_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RX_CDR_PPM_LOST_VAL_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t RX_CDR_LPCTRL_CALDONE_OVR_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t RX_CDR_LPCTRL_CALDONE_VAL_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t RX_CDR_LOCK2DATA_REQ_OVR_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t RX_CDR_LOCK2DATA_REQ_VAL_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RX_CDR_PPM_HOLD_OVR_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t RX_CDR_PPM_HOLD_VAL_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t RX_CDR_CLK_GATE_OVR_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t RX_CDR_CLK_GATE_VAL_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t RX_CDR_CLK_MUX_OVR_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t RX_CDR_CLK_MUX_VAL_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_lockfsm_ctrl_muxd0_reg_t;

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_DEFAULT (0x00000040U)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RD_MASK (0x003fffffU)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_WR_MASK (0x003fffffU)


///< Wait counter values.
///< Bits [7:4] used in the wait counter at S_WAIT state as power of 2
///< (1<<i_wait_cntr[7:4]) Ref clk  bits [3:0] are used in S_*_TFER and
///< S_*_DONE states, varies [0:15] cycles of REF clk  if set to zero no
///< wait state is applied
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_WAIT_CNTR_MUXD0_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_WAIT_CNTR_MUXD0_BF_WID ( 8)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_WAIT_CNTR_MUXD0_BF_MSK (0x000000FF)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_WAIT_CNTR_MUXD0_BF_DEF (0x00000040)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_PPM_LOCKED_OVR_MUXD0_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_PPM_LOCKED_OVR_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_PPM_LOCKED_OVR_MUXD0_BF_MSK (0x00000100)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_PPM_LOCKED_OVR_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_PPM_LOCKED_VAL_MUXD0_BF_OFF ( 9)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_PPM_LOCKED_VAL_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_PPM_LOCKED_VAL_MUXD0_BF_MSK (0x00000200)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_PPM_LOCKED_VAL_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_PPM_LOST_OVR_MUXD0_BF_OFF (10)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_PPM_LOST_OVR_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_PPM_LOST_OVR_MUXD0_BF_MSK (0x00000400)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_PPM_LOST_OVR_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_PPM_LOST_VAL_MUXD0_BF_OFF (11)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_PPM_LOST_VAL_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_PPM_LOST_VAL_MUXD0_BF_MSK (0x00000800)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_PPM_LOST_VAL_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_LPCTRL_CALDONE_OVR_MUXD0_BF_OFF (12)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_LPCTRL_CALDONE_OVR_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_LPCTRL_CALDONE_OVR_MUXD0_BF_MSK (0x00001000)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_LPCTRL_CALDONE_OVR_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_LPCTRL_CALDONE_VAL_MUXD0_BF_OFF (13)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_LPCTRL_CALDONE_VAL_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_LPCTRL_CALDONE_VAL_MUXD0_BF_MSK (0x00002000)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_LPCTRL_CALDONE_VAL_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_LOCK2DATA_REQ_OVR_MUXD0_BF_OFF (14)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_LOCK2DATA_REQ_OVR_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_LOCK2DATA_REQ_OVR_MUXD0_BF_MSK (0x00004000)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_LOCK2DATA_REQ_OVR_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_LOCK2DATA_REQ_VAL_MUXD0_BF_OFF (15)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_LOCK2DATA_REQ_VAL_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_LOCK2DATA_REQ_VAL_MUXD0_BF_MSK (0x00008000)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_LOCK2DATA_REQ_VAL_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_PPM_HOLD_OVR_MUXD0_BF_OFF (16)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_PPM_HOLD_OVR_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_PPM_HOLD_OVR_MUXD0_BF_MSK (0x00010000)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_PPM_HOLD_OVR_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_PPM_HOLD_VAL_MUXD0_BF_OFF (17)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_PPM_HOLD_VAL_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_PPM_HOLD_VAL_MUXD0_BF_MSK (0x00020000)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_PPM_HOLD_VAL_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_CLK_GATE_OVR_MUXD0_BF_OFF (18)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_CLK_GATE_OVR_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_CLK_GATE_OVR_MUXD0_BF_MSK (0x00040000)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_CLK_GATE_OVR_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_CLK_GATE_VAL_MUXD0_BF_OFF (19)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_CLK_GATE_VAL_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_CLK_GATE_VAL_MUXD0_BF_MSK (0x00080000)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_CLK_GATE_VAL_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_CLK_MUX_OVR_MUXD0_BF_OFF (20)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_CLK_MUX_OVR_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_CLK_MUX_OVR_MUXD0_BF_MSK (0x00100000)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_CLK_MUX_OVR_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_CLK_MUX_VAL_MUXD0_BF_OFF (21)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_CLK_MUX_VAL_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_CLK_MUX_VAL_MUXD0_BF_MSK (0x00200000)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_RX_CDR_CLK_MUX_VAL_MUXD0_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_LOCKFSM_CONTROL_MUXD1 register description at address offset 0x444
  *
  * Register default value:        0x00000040
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_lockfsm_control_muxd1
  * rx_cdr_lockfsm_control
  */

typedef union {
  struct {
    uint32_t RX_CDR_WAIT_CNTR_MUXD1 : 8;
    ///< Wait counter values.
    ///< Bits [7:4] used in the wait counter at S_WAIT state as power of 2
    ///< (1<<i_wait_cntr[7:4]) Ref clk  bits [3:0] are used in S_*_TFER and
    ///< S_*_DONE states, varies [0:15] cycles of REF clk  if set to zero no
    ///< wait state is applied
    ///< AccessType="RW" BitOffset="0" ResetValue="0x40"
    uint32_t RX_CDR_PPM_LOCKED_OVR_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RX_CDR_PPM_LOCKED_VAL_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t RX_CDR_PPM_LOST_OVR_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RX_CDR_PPM_LOST_VAL_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t RX_CDR_LPCTRL_CALDONE_OVR_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t RX_CDR_LPCTRL_CALDONE_VAL_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t RX_CDR_LOCK2DATA_REQ_OVR_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t RX_CDR_LOCK2DATA_REQ_VAL_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RX_CDR_PPM_HOLD_OVR_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t RX_CDR_PPM_HOLD_VAL_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t RX_CDR_CLK_GATE_OVR_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t RX_CDR_CLK_GATE_VAL_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t RX_CDR_CLK_MUX_OVR_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t RX_CDR_CLK_MUX_VAL_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_lockfsm_ctrl_muxd1_reg_t;

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_DEFAULT (0x00000040U)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RD_MASK (0x003fffffU)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_WR_MASK (0x003fffffU)


///< Wait counter values.
///< Bits [7:4] used in the wait counter at S_WAIT state as power of 2
///< (1<<i_wait_cntr[7:4]) Ref clk  bits [3:0] are used in S_*_TFER and
///< S_*_DONE states, varies [0:15] cycles of REF clk  if set to zero no
///< wait state is applied
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_WAIT_CNTR_MUXD1_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_WAIT_CNTR_MUXD1_BF_WID ( 8)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_WAIT_CNTR_MUXD1_BF_MSK (0x000000FF)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_WAIT_CNTR_MUXD1_BF_DEF (0x00000040)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_PPM_LOCKED_OVR_MUXD1_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_PPM_LOCKED_OVR_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_PPM_LOCKED_OVR_MUXD1_BF_MSK (0x00000100)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_PPM_LOCKED_OVR_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_PPM_LOCKED_VAL_MUXD1_BF_OFF ( 9)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_PPM_LOCKED_VAL_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_PPM_LOCKED_VAL_MUXD1_BF_MSK (0x00000200)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_PPM_LOCKED_VAL_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_PPM_LOST_OVR_MUXD1_BF_OFF (10)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_PPM_LOST_OVR_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_PPM_LOST_OVR_MUXD1_BF_MSK (0x00000400)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_PPM_LOST_OVR_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_PPM_LOST_VAL_MUXD1_BF_OFF (11)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_PPM_LOST_VAL_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_PPM_LOST_VAL_MUXD1_BF_MSK (0x00000800)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_PPM_LOST_VAL_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_LPCTRL_CALDONE_OVR_MUXD1_BF_OFF (12)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_LPCTRL_CALDONE_OVR_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_LPCTRL_CALDONE_OVR_MUXD1_BF_MSK (0x00001000)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_LPCTRL_CALDONE_OVR_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_LPCTRL_CALDONE_VAL_MUXD1_BF_OFF (13)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_LPCTRL_CALDONE_VAL_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_LPCTRL_CALDONE_VAL_MUXD1_BF_MSK (0x00002000)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_LPCTRL_CALDONE_VAL_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_LOCK2DATA_REQ_OVR_MUXD1_BF_OFF (14)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_LOCK2DATA_REQ_OVR_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_LOCK2DATA_REQ_OVR_MUXD1_BF_MSK (0x00004000)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_LOCK2DATA_REQ_OVR_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_LOCK2DATA_REQ_VAL_MUXD1_BF_OFF (15)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_LOCK2DATA_REQ_VAL_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_LOCK2DATA_REQ_VAL_MUXD1_BF_MSK (0x00008000)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_LOCK2DATA_REQ_VAL_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_PPM_HOLD_OVR_MUXD1_BF_OFF (16)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_PPM_HOLD_OVR_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_PPM_HOLD_OVR_MUXD1_BF_MSK (0x00010000)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_PPM_HOLD_OVR_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_PPM_HOLD_VAL_MUXD1_BF_OFF (17)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_PPM_HOLD_VAL_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_PPM_HOLD_VAL_MUXD1_BF_MSK (0x00020000)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_PPM_HOLD_VAL_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_CLK_GATE_OVR_MUXD1_BF_OFF (18)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_CLK_GATE_OVR_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_CLK_GATE_OVR_MUXD1_BF_MSK (0x00040000)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_CLK_GATE_OVR_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_CLK_GATE_VAL_MUXD1_BF_OFF (19)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_CLK_GATE_VAL_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_CLK_GATE_VAL_MUXD1_BF_MSK (0x00080000)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_CLK_GATE_VAL_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_CLK_MUX_OVR_MUXD1_BF_OFF (20)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_CLK_MUX_OVR_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_CLK_MUX_OVR_MUXD1_BF_MSK (0x00100000)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_CLK_MUX_OVR_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_CLK_MUX_VAL_MUXD1_BF_OFF (21)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_CLK_MUX_VAL_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_CLK_MUX_VAL_MUXD1_BF_MSK (0x00200000)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_RX_CDR_CLK_MUX_VAL_MUXD1_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_LOCKFSM_CONTROL_MUXD2 register description at address offset 0x448
  *
  * Register default value:        0x00000040
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_lockfsm_control_muxd2
  * rx_cdr_lockfsm_control
  */

typedef union {
  struct {
    uint32_t RX_CDR_WAIT_CNTR_MUXD2 : 8;
    ///< Wait counter values.
    ///< Bits [7:4] used in the wait counter at S_WAIT state as power of 2
    ///< (1<<i_wait_cntr[7:4]) Ref clk  bits [3:0] are used in S_*_TFER and
    ///< S_*_DONE states, varies [0:15] cycles of REF clk  if set to zero no
    ///< wait state is applied
    ///< AccessType="RW" BitOffset="0" ResetValue="0x40"
    uint32_t RX_CDR_PPM_LOCKED_OVR_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RX_CDR_PPM_LOCKED_VAL_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t RX_CDR_PPM_LOST_OVR_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RX_CDR_PPM_LOST_VAL_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t RX_CDR_LPCTRL_CALDONE_OVR_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t RX_CDR_LPCTRL_CALDONE_VAL_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t RX_CDR_LOCK2DATA_REQ_OVR_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t RX_CDR_LOCK2DATA_REQ_VAL_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RX_CDR_PPM_HOLD_OVR_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t RX_CDR_PPM_HOLD_VAL_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t RX_CDR_CLK_GATE_OVR_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t RX_CDR_CLK_GATE_VAL_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t RX_CDR_CLK_MUX_OVR_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t RX_CDR_CLK_MUX_VAL_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_lockfsm_ctrl_muxd2_reg_t;

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_DEFAULT (0x00000040U)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RD_MASK (0x003fffffU)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_WR_MASK (0x003fffffU)


///< Wait counter values.
///< Bits [7:4] used in the wait counter at S_WAIT state as power of 2
///< (1<<i_wait_cntr[7:4]) Ref clk  bits [3:0] are used in S_*_TFER and
///< S_*_DONE states, varies [0:15] cycles of REF clk  if set to zero no
///< wait state is applied
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_WAIT_CNTR_MUXD2_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_WAIT_CNTR_MUXD2_BF_WID ( 8)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_WAIT_CNTR_MUXD2_BF_MSK (0x000000FF)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_WAIT_CNTR_MUXD2_BF_DEF (0x00000040)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_PPM_LOCKED_OVR_MUXD2_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_PPM_LOCKED_OVR_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_PPM_LOCKED_OVR_MUXD2_BF_MSK (0x00000100)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_PPM_LOCKED_OVR_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_PPM_LOCKED_VAL_MUXD2_BF_OFF ( 9)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_PPM_LOCKED_VAL_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_PPM_LOCKED_VAL_MUXD2_BF_MSK (0x00000200)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_PPM_LOCKED_VAL_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_PPM_LOST_OVR_MUXD2_BF_OFF (10)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_PPM_LOST_OVR_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_PPM_LOST_OVR_MUXD2_BF_MSK (0x00000400)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_PPM_LOST_OVR_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_PPM_LOST_VAL_MUXD2_BF_OFF (11)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_PPM_LOST_VAL_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_PPM_LOST_VAL_MUXD2_BF_MSK (0x00000800)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_PPM_LOST_VAL_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_LPCTRL_CALDONE_OVR_MUXD2_BF_OFF (12)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_LPCTRL_CALDONE_OVR_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_LPCTRL_CALDONE_OVR_MUXD2_BF_MSK (0x00001000)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_LPCTRL_CALDONE_OVR_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_LPCTRL_CALDONE_VAL_MUXD2_BF_OFF (13)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_LPCTRL_CALDONE_VAL_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_LPCTRL_CALDONE_VAL_MUXD2_BF_MSK (0x00002000)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_LPCTRL_CALDONE_VAL_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_LOCK2DATA_REQ_OVR_MUXD2_BF_OFF (14)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_LOCK2DATA_REQ_OVR_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_LOCK2DATA_REQ_OVR_MUXD2_BF_MSK (0x00004000)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_LOCK2DATA_REQ_OVR_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_LOCK2DATA_REQ_VAL_MUXD2_BF_OFF (15)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_LOCK2DATA_REQ_VAL_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_LOCK2DATA_REQ_VAL_MUXD2_BF_MSK (0x00008000)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_LOCK2DATA_REQ_VAL_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_PPM_HOLD_OVR_MUXD2_BF_OFF (16)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_PPM_HOLD_OVR_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_PPM_HOLD_OVR_MUXD2_BF_MSK (0x00010000)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_PPM_HOLD_OVR_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_PPM_HOLD_VAL_MUXD2_BF_OFF (17)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_PPM_HOLD_VAL_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_PPM_HOLD_VAL_MUXD2_BF_MSK (0x00020000)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_PPM_HOLD_VAL_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_CLK_GATE_OVR_MUXD2_BF_OFF (18)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_CLK_GATE_OVR_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_CLK_GATE_OVR_MUXD2_BF_MSK (0x00040000)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_CLK_GATE_OVR_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_CLK_GATE_VAL_MUXD2_BF_OFF (19)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_CLK_GATE_VAL_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_CLK_GATE_VAL_MUXD2_BF_MSK (0x00080000)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_CLK_GATE_VAL_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_CLK_MUX_OVR_MUXD2_BF_OFF (20)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_CLK_MUX_OVR_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_CLK_MUX_OVR_MUXD2_BF_MSK (0x00100000)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_CLK_MUX_OVR_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_CLK_MUX_VAL_MUXD2_BF_OFF (21)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_CLK_MUX_VAL_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_CLK_MUX_VAL_MUXD2_BF_MSK (0x00200000)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_RX_CDR_CLK_MUX_VAL_MUXD2_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_LOCKFSM_CONTROL_MUXD3 register description at address offset 0x44c
  *
  * Register default value:        0x00000040
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_lockfsm_control_muxd3
  * rx_cdr_lockfsm_control
  */

typedef union {
  struct {
    uint32_t RX_CDR_WAIT_CNTR_MUXD3 : 8;
    ///< Wait counter values.
    ///< Bits [7:4] used in the wait counter at S_WAIT state as power of 2
    ///< (1<<i_wait_cntr[7:4]) Ref clk  bits [3:0] are used in S_*_TFER and
    ///< S_*_DONE states, varies [0:15] cycles of REF clk  if set to zero no
    ///< wait state is applied
    ///< AccessType="RW" BitOffset="0" ResetValue="0x40"
    uint32_t RX_CDR_PPM_LOCKED_OVR_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RX_CDR_PPM_LOCKED_VAL_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t RX_CDR_PPM_LOST_OVR_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RX_CDR_PPM_LOST_VAL_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t RX_CDR_LPCTRL_CALDONE_OVR_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t RX_CDR_LPCTRL_CALDONE_VAL_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t RX_CDR_LOCK2DATA_REQ_OVR_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t RX_CDR_LOCK2DATA_REQ_VAL_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RX_CDR_PPM_HOLD_OVR_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t RX_CDR_PPM_HOLD_VAL_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t RX_CDR_CLK_GATE_OVR_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t RX_CDR_CLK_GATE_VAL_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t RX_CDR_CLK_MUX_OVR_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t RX_CDR_CLK_MUX_VAL_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_lockfsm_ctrl_muxd3_reg_t;

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_DEFAULT (0x00000040U)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RD_MASK (0x003fffffU)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_WR_MASK (0x003fffffU)


///< Wait counter values.
///< Bits [7:4] used in the wait counter at S_WAIT state as power of 2
///< (1<<i_wait_cntr[7:4]) Ref clk  bits [3:0] are used in S_*_TFER and
///< S_*_DONE states, varies [0:15] cycles of REF clk  if set to zero no
///< wait state is applied
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_WAIT_CNTR_MUXD3_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_WAIT_CNTR_MUXD3_BF_WID ( 8)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_WAIT_CNTR_MUXD3_BF_MSK (0x000000FF)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_WAIT_CNTR_MUXD3_BF_DEF (0x00000040)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_PPM_LOCKED_OVR_MUXD3_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_PPM_LOCKED_OVR_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_PPM_LOCKED_OVR_MUXD3_BF_MSK (0x00000100)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_PPM_LOCKED_OVR_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_PPM_LOCKED_VAL_MUXD3_BF_OFF ( 9)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_PPM_LOCKED_VAL_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_PPM_LOCKED_VAL_MUXD3_BF_MSK (0x00000200)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_PPM_LOCKED_VAL_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_PPM_LOST_OVR_MUXD3_BF_OFF (10)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_PPM_LOST_OVR_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_PPM_LOST_OVR_MUXD3_BF_MSK (0x00000400)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_PPM_LOST_OVR_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_PPM_LOST_VAL_MUXD3_BF_OFF (11)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_PPM_LOST_VAL_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_PPM_LOST_VAL_MUXD3_BF_MSK (0x00000800)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_PPM_LOST_VAL_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_LPCTRL_CALDONE_OVR_MUXD3_BF_OFF (12)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_LPCTRL_CALDONE_OVR_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_LPCTRL_CALDONE_OVR_MUXD3_BF_MSK (0x00001000)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_LPCTRL_CALDONE_OVR_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_LPCTRL_CALDONE_VAL_MUXD3_BF_OFF (13)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_LPCTRL_CALDONE_VAL_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_LPCTRL_CALDONE_VAL_MUXD3_BF_MSK (0x00002000)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_LPCTRL_CALDONE_VAL_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_LOCK2DATA_REQ_OVR_MUXD3_BF_OFF (14)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_LOCK2DATA_REQ_OVR_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_LOCK2DATA_REQ_OVR_MUXD3_BF_MSK (0x00004000)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_LOCK2DATA_REQ_OVR_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_LOCK2DATA_REQ_VAL_MUXD3_BF_OFF (15)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_LOCK2DATA_REQ_VAL_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_LOCK2DATA_REQ_VAL_MUXD3_BF_MSK (0x00008000)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_LOCK2DATA_REQ_VAL_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_PPM_HOLD_OVR_MUXD3_BF_OFF (16)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_PPM_HOLD_OVR_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_PPM_HOLD_OVR_MUXD3_BF_MSK (0x00010000)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_PPM_HOLD_OVR_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_PPM_HOLD_VAL_MUXD3_BF_OFF (17)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_PPM_HOLD_VAL_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_PPM_HOLD_VAL_MUXD3_BF_MSK (0x00020000)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_PPM_HOLD_VAL_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_CLK_GATE_OVR_MUXD3_BF_OFF (18)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_CLK_GATE_OVR_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_CLK_GATE_OVR_MUXD3_BF_MSK (0x00040000)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_CLK_GATE_OVR_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_CLK_GATE_VAL_MUXD3_BF_OFF (19)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_CLK_GATE_VAL_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_CLK_GATE_VAL_MUXD3_BF_MSK (0x00080000)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_CLK_GATE_VAL_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_CLK_MUX_OVR_MUXD3_BF_OFF (20)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_CLK_MUX_OVR_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_CLK_MUX_OVR_MUXD3_BF_MSK (0x00100000)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_CLK_MUX_OVR_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_CLK_MUX_VAL_MUXD3_BF_OFF (21)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_CLK_MUX_VAL_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_CLK_MUX_VAL_MUXD3_BF_MSK (0x00200000)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_RX_CDR_CLK_MUX_VAL_MUXD3_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_LOCKFSM_CONTROL_MUXD4 register description at address offset 0x450
  *
  * Register default value:        0x00000040
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_lockfsm_control_muxd4
  * rx_cdr_lockfsm_control
  */

typedef union {
  struct {
    uint32_t RX_CDR_WAIT_CNTR_MUXD4 : 8;
    ///< Wait counter values.
    ///< Bits [7:4] used in the wait counter at S_WAIT state as power of 2
    ///< (1<<i_wait_cntr[7:4]) Ref clk  bits [3:0] are used in S_*_TFER and
    ///< S_*_DONE states, varies [0:15] cycles of REF clk  if set to zero no
    ///< wait state is applied
    ///< AccessType="RW" BitOffset="0" ResetValue="0x40"
    uint32_t RX_CDR_PPM_LOCKED_OVR_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RX_CDR_PPM_LOCKED_VAL_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t RX_CDR_PPM_LOST_OVR_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RX_CDR_PPM_LOST_VAL_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t RX_CDR_LPCTRL_CALDONE_OVR_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t RX_CDR_LPCTRL_CALDONE_VAL_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t RX_CDR_LOCK2DATA_REQ_OVR_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t RX_CDR_LOCK2DATA_REQ_VAL_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RX_CDR_PPM_HOLD_OVR_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t RX_CDR_PPM_HOLD_VAL_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t RX_CDR_CLK_GATE_OVR_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t RX_CDR_CLK_GATE_VAL_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t RX_CDR_CLK_MUX_OVR_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t RX_CDR_CLK_MUX_VAL_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_lockfsm_ctrl_muxd4_reg_t;

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_DEFAULT (0x00000040U)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RD_MASK (0x003fffffU)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_WR_MASK (0x003fffffU)


///< Wait counter values.
///< Bits [7:4] used in the wait counter at S_WAIT state as power of 2
///< (1<<i_wait_cntr[7:4]) Ref clk  bits [3:0] are used in S_*_TFER and
///< S_*_DONE states, varies [0:15] cycles of REF clk  if set to zero no
///< wait state is applied
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_WAIT_CNTR_MUXD4_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_WAIT_CNTR_MUXD4_BF_WID ( 8)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_WAIT_CNTR_MUXD4_BF_MSK (0x000000FF)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_WAIT_CNTR_MUXD4_BF_DEF (0x00000040)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_PPM_LOCKED_OVR_MUXD4_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_PPM_LOCKED_OVR_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_PPM_LOCKED_OVR_MUXD4_BF_MSK (0x00000100)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_PPM_LOCKED_OVR_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_PPM_LOCKED_VAL_MUXD4_BF_OFF ( 9)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_PPM_LOCKED_VAL_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_PPM_LOCKED_VAL_MUXD4_BF_MSK (0x00000200)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_PPM_LOCKED_VAL_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_PPM_LOST_OVR_MUXD4_BF_OFF (10)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_PPM_LOST_OVR_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_PPM_LOST_OVR_MUXD4_BF_MSK (0x00000400)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_PPM_LOST_OVR_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_PPM_LOST_VAL_MUXD4_BF_OFF (11)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_PPM_LOST_VAL_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_PPM_LOST_VAL_MUXD4_BF_MSK (0x00000800)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_PPM_LOST_VAL_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_LPCTRL_CALDONE_OVR_MUXD4_BF_OFF (12)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_LPCTRL_CALDONE_OVR_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_LPCTRL_CALDONE_OVR_MUXD4_BF_MSK (0x00001000)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_LPCTRL_CALDONE_OVR_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_LPCTRL_CALDONE_VAL_MUXD4_BF_OFF (13)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_LPCTRL_CALDONE_VAL_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_LPCTRL_CALDONE_VAL_MUXD4_BF_MSK (0x00002000)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_LPCTRL_CALDONE_VAL_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_LOCK2DATA_REQ_OVR_MUXD4_BF_OFF (14)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_LOCK2DATA_REQ_OVR_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_LOCK2DATA_REQ_OVR_MUXD4_BF_MSK (0x00004000)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_LOCK2DATA_REQ_OVR_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_LOCK2DATA_REQ_VAL_MUXD4_BF_OFF (15)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_LOCK2DATA_REQ_VAL_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_LOCK2DATA_REQ_VAL_MUXD4_BF_MSK (0x00008000)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_LOCK2DATA_REQ_VAL_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_PPM_HOLD_OVR_MUXD4_BF_OFF (16)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_PPM_HOLD_OVR_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_PPM_HOLD_OVR_MUXD4_BF_MSK (0x00010000)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_PPM_HOLD_OVR_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_PPM_HOLD_VAL_MUXD4_BF_OFF (17)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_PPM_HOLD_VAL_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_PPM_HOLD_VAL_MUXD4_BF_MSK (0x00020000)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_PPM_HOLD_VAL_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_CLK_GATE_OVR_MUXD4_BF_OFF (18)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_CLK_GATE_OVR_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_CLK_GATE_OVR_MUXD4_BF_MSK (0x00040000)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_CLK_GATE_OVR_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_CLK_GATE_VAL_MUXD4_BF_OFF (19)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_CLK_GATE_VAL_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_CLK_GATE_VAL_MUXD4_BF_MSK (0x00080000)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_CLK_GATE_VAL_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_CLK_MUX_OVR_MUXD4_BF_OFF (20)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_CLK_MUX_OVR_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_CLK_MUX_OVR_MUXD4_BF_MSK (0x00100000)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_CLK_MUX_OVR_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_CLK_MUX_VAL_MUXD4_BF_OFF (21)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_CLK_MUX_VAL_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_CLK_MUX_VAL_MUXD4_BF_MSK (0x00200000)
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_RX_CDR_CLK_MUX_VAL_MUXD4_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_LOCKFSM_STATUS register description at address offset 0x454
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_lockfsm_status
  * rx_cdr_lockfsm_status
  */

typedef union {
  struct {
    uint32_t RX_CDR_TFER_FSM_STATE : 7;
    ///< ---
    ///< AccessType="RO/C/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 25;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_lockfsm_stat_reg_t;

#define PMA_RX_MGS_CDR_LOCKFSM_STAT_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CDR_LOCKFSM_STAT_RD_MASK (0x0000007fU)
#define PMA_RX_MGS_CDR_LOCKFSM_STAT_WR_MASK (0x00000000U)


#define PMA_RX_MGS_CDR_LOCKFSM_STAT_RX_CDR_TFER_FSM_STATE_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_LOCKFSM_STAT_RX_CDR_TFER_FSM_STATE_BF_WID ( 7)
#define PMA_RX_MGS_CDR_LOCKFSM_STAT_RX_CDR_TFER_FSM_STATE_BF_MSK (0x0000007F)
#define PMA_RX_MGS_CDR_LOCKFSM_STAT_RX_CDR_TFER_FSM_STATE_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_TAP_OVRD register description at address offset 0x458
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_tap_ovrd
  * rx_cdr_tap_ovrd
  */

typedef union {
  struct {
    uint32_t RX_CDR_CDR_ENABLE : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_CDR_EN_MODE_CTRL : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RX_CDR_LDO_ENABLE : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t RX_CDR_VREFGEN_EN_OVRD : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RX_CDR_VREFGEN_EN_OVRD_VAL : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RX_CDR_LDO_BIAS_EN_OVRD : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t RX_CDR_LDO_BIAS_EN_OVRD_VAL : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t RX_CDR_LDOCLK_EN_OVRD : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t RX_CDR_LDOCLK_EN_OVRD_VAL : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RX_CDR_LDODCO_EN_OVRD : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t RX_CDR_LDODCO_EN_OVRD_VAL : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t  : 21;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_tap_ovrd_reg_t;

#define PMA_RX_MGS_CDR_TAP_OVRD_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CDR_TAP_OVRD_RD_MASK (0x000007ffU)
#define PMA_RX_MGS_CDR_TAP_OVRD_WR_MASK (0x000007ffU)


#define PMA_RX_MGS_CDR_TAP_OVRD_RX_CDR_EN_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_TAP_OVRD_RX_CDR_EN_BF_WID ( 1)
#define PMA_RX_MGS_CDR_TAP_OVRD_RX_CDR_EN_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_TAP_OVRD_RX_CDR_EN_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_TAP_OVRD_RX_CDR_EN_MODE_CTRL_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_TAP_OVRD_RX_CDR_EN_MODE_CTRL_BF_WID ( 1)
#define PMA_RX_MGS_CDR_TAP_OVRD_RX_CDR_EN_MODE_CTRL_BF_MSK (0x00000002)
#define PMA_RX_MGS_CDR_TAP_OVRD_RX_CDR_EN_MODE_CTRL_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_TAP_OVRD_RX_CDR_LDO_EN_BF_OFF ( 2)
#define PMA_RX_MGS_CDR_TAP_OVRD_RX_CDR_LDO_EN_BF_WID ( 1)
#define PMA_RX_MGS_CDR_TAP_OVRD_RX_CDR_LDO_EN_BF_MSK (0x00000004)
#define PMA_RX_MGS_CDR_TAP_OVRD_RX_CDR_LDO_EN_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_TAP_OVRD_RX_CDR_VREFGEN_EN_OVRD_BF_OFF ( 3)
#define PMA_RX_MGS_CDR_TAP_OVRD_RX_CDR_VREFGEN_EN_OVRD_BF_WID ( 1)
#define PMA_RX_MGS_CDR_TAP_OVRD_RX_CDR_VREFGEN_EN_OVRD_BF_MSK (0x00000008)
#define PMA_RX_MGS_CDR_TAP_OVRD_RX_CDR_VREFGEN_EN_OVRD_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_TAP_OVRD_RX_CDR_VREFGEN_EN_OVRD_VAL_BF_OFF ( 4)
#define PMA_RX_MGS_CDR_TAP_OVRD_RX_CDR_VREFGEN_EN_OVRD_VAL_BF_WID ( 1)
#define PMA_RX_MGS_CDR_TAP_OVRD_RX_CDR_VREFGEN_EN_OVRD_VAL_BF_MSK (0x00000010)
#define PMA_RX_MGS_CDR_TAP_OVRD_RX_CDR_VREFGEN_EN_OVRD_VAL_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_TAP_OVRD_RX_CDR_LDO_BIAS_EN_OVRD_BF_OFF ( 5)
#define PMA_RX_MGS_CDR_TAP_OVRD_RX_CDR_LDO_BIAS_EN_OVRD_BF_WID ( 1)
#define PMA_RX_MGS_CDR_TAP_OVRD_RX_CDR_LDO_BIAS_EN_OVRD_BF_MSK (0x00000020)
#define PMA_RX_MGS_CDR_TAP_OVRD_RX_CDR_LDO_BIAS_EN_OVRD_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_TAP_OVRD_RX_CDR_LDO_BIAS_EN_OVRD_VAL_BF_OFF ( 6)
#define PMA_RX_MGS_CDR_TAP_OVRD_RX_CDR_LDO_BIAS_EN_OVRD_VAL_BF_WID ( 1)
#define PMA_RX_MGS_CDR_TAP_OVRD_RX_CDR_LDO_BIAS_EN_OVRD_VAL_BF_MSK (0x00000040)
#define PMA_RX_MGS_CDR_TAP_OVRD_RX_CDR_LDO_BIAS_EN_OVRD_VAL_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_TAP_OVRD_RX_CDR_LDOCLK_EN_OVRD_BF_OFF ( 7)
#define PMA_RX_MGS_CDR_TAP_OVRD_RX_CDR_LDOCLK_EN_OVRD_BF_WID ( 1)
#define PMA_RX_MGS_CDR_TAP_OVRD_RX_CDR_LDOCLK_EN_OVRD_BF_MSK (0x00000080)
#define PMA_RX_MGS_CDR_TAP_OVRD_RX_CDR_LDOCLK_EN_OVRD_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_TAP_OVRD_RX_CDR_LDOCLK_EN_OVRD_VAL_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_TAP_OVRD_RX_CDR_LDOCLK_EN_OVRD_VAL_BF_WID ( 1)
#define PMA_RX_MGS_CDR_TAP_OVRD_RX_CDR_LDOCLK_EN_OVRD_VAL_BF_MSK (0x00000100)
#define PMA_RX_MGS_CDR_TAP_OVRD_RX_CDR_LDOCLK_EN_OVRD_VAL_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_TAP_OVRD_RX_CDR_LDODCO_EN_OVRD_BF_OFF ( 9)
#define PMA_RX_MGS_CDR_TAP_OVRD_RX_CDR_LDODCO_EN_OVRD_BF_WID ( 1)
#define PMA_RX_MGS_CDR_TAP_OVRD_RX_CDR_LDODCO_EN_OVRD_BF_MSK (0x00000200)
#define PMA_RX_MGS_CDR_TAP_OVRD_RX_CDR_LDODCO_EN_OVRD_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_TAP_OVRD_RX_CDR_LDODCO_EN_OVRD_VAL_BF_OFF (10)
#define PMA_RX_MGS_CDR_TAP_OVRD_RX_CDR_LDODCO_EN_OVRD_VAL_BF_WID ( 1)
#define PMA_RX_MGS_CDR_TAP_OVRD_RX_CDR_LDODCO_EN_OVRD_VAL_BF_MSK (0x00000400)
#define PMA_RX_MGS_CDR_TAP_OVRD_RX_CDR_LDODCO_EN_OVRD_VAL_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_DFX_DCO_MUXD0 register description at address offset 0x45c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_dfx_dco_muxd0
  * rx_cdr_dfx_dco
  */

typedef union {
  struct {
    uint32_t RX_CDR_DCOFINEDFTSEL_MUXD0 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_DCOCOARSE_OVRD_H_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t RX_CDR_DCOFINE_MUXD0 : 8;
    ///< ---
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RX_CDR_DCOCOARSE_MUXD0 : 9;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_dfx_dco_muxd0_reg_t;

#define PMA_RX_MGS_CDR_DFX_DCO_MUXD0_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD0_RD_MASK (0x000fffffU)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD0_WR_MASK (0x000fffffU)


#define PMA_RX_MGS_CDR_DFX_DCO_MUXD0_RX_CDR_DCOFINEDFTSEL_MUXD0_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD0_RX_CDR_DCOFINEDFTSEL_MUXD0_BF_WID ( 2)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD0_RX_CDR_DCOFINEDFTSEL_MUXD0_BF_MSK (0x00000003)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD0_RX_CDR_DCOFINEDFTSEL_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX_DCO_MUXD0_RX_CDR_DCOCOARSE_OVRD_H_MUXD0_BF_OFF ( 2)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD0_RX_CDR_DCOCOARSE_OVRD_H_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD0_RX_CDR_DCOCOARSE_OVRD_H_MUXD0_BF_MSK (0x00000004)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD0_RX_CDR_DCOCOARSE_OVRD_H_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX_DCO_MUXD0_RX_CDR_DCOFINE_MUXD0_BF_OFF ( 3)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD0_RX_CDR_DCOFINE_MUXD0_BF_WID ( 8)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD0_RX_CDR_DCOFINE_MUXD0_BF_MSK (0x000007F8)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD0_RX_CDR_DCOFINE_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX_DCO_MUXD0_RX_CDR_DCOCOARSE_MUXD0_BF_OFF (11)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD0_RX_CDR_DCOCOARSE_MUXD0_BF_WID ( 9)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD0_RX_CDR_DCOCOARSE_MUXD0_BF_MSK (0x000FF800)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD0_RX_CDR_DCOCOARSE_MUXD0_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_DFX_DCO_MUXD1 register description at address offset 0x460
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_dfx_dco_muxd1
  * rx_cdr_dfx_dco
  */

typedef union {
  struct {
    uint32_t RX_CDR_DCOFINEDFTSEL_MUXD1 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_DCOCOARSE_OVRD_H_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t RX_CDR_DCOFINE_MUXD1 : 8;
    ///< ---
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RX_CDR_DCOCOARSE_MUXD1 : 9;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_dfx_dco_muxd1_reg_t;

#define PMA_RX_MGS_CDR_DFX_DCO_MUXD1_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD1_RD_MASK (0x000fffffU)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD1_WR_MASK (0x000fffffU)


#define PMA_RX_MGS_CDR_DFX_DCO_MUXD1_RX_CDR_DCOFINEDFTSEL_MUXD1_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD1_RX_CDR_DCOFINEDFTSEL_MUXD1_BF_WID ( 2)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD1_RX_CDR_DCOFINEDFTSEL_MUXD1_BF_MSK (0x00000003)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD1_RX_CDR_DCOFINEDFTSEL_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX_DCO_MUXD1_RX_CDR_DCOCOARSE_OVRD_H_MUXD1_BF_OFF ( 2)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD1_RX_CDR_DCOCOARSE_OVRD_H_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD1_RX_CDR_DCOCOARSE_OVRD_H_MUXD1_BF_MSK (0x00000004)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD1_RX_CDR_DCOCOARSE_OVRD_H_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX_DCO_MUXD1_RX_CDR_DCOFINE_MUXD1_BF_OFF ( 3)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD1_RX_CDR_DCOFINE_MUXD1_BF_WID ( 8)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD1_RX_CDR_DCOFINE_MUXD1_BF_MSK (0x000007F8)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD1_RX_CDR_DCOFINE_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX_DCO_MUXD1_RX_CDR_DCOCOARSE_MUXD1_BF_OFF (11)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD1_RX_CDR_DCOCOARSE_MUXD1_BF_WID ( 9)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD1_RX_CDR_DCOCOARSE_MUXD1_BF_MSK (0x000FF800)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD1_RX_CDR_DCOCOARSE_MUXD1_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_DFX_DCO_MUXD2 register description at address offset 0x464
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_dfx_dco_muxd2
  * rx_cdr_dfx_dco
  */

typedef union {
  struct {
    uint32_t RX_CDR_DCOFINEDFTSEL_MUXD2 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_DCOCOARSE_OVRD_H_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t RX_CDR_DCOFINE_MUXD2 : 8;
    ///< ---
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RX_CDR_DCOCOARSE_MUXD2 : 9;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_dfx_dco_muxd2_reg_t;

#define PMA_RX_MGS_CDR_DFX_DCO_MUXD2_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD2_RD_MASK (0x000fffffU)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD2_WR_MASK (0x000fffffU)


#define PMA_RX_MGS_CDR_DFX_DCO_MUXD2_RX_CDR_DCOFINEDFTSEL_MUXD2_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD2_RX_CDR_DCOFINEDFTSEL_MUXD2_BF_WID ( 2)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD2_RX_CDR_DCOFINEDFTSEL_MUXD2_BF_MSK (0x00000003)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD2_RX_CDR_DCOFINEDFTSEL_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX_DCO_MUXD2_RX_CDR_DCOCOARSE_OVRD_H_MUXD2_BF_OFF ( 2)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD2_RX_CDR_DCOCOARSE_OVRD_H_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD2_RX_CDR_DCOCOARSE_OVRD_H_MUXD2_BF_MSK (0x00000004)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD2_RX_CDR_DCOCOARSE_OVRD_H_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX_DCO_MUXD2_RX_CDR_DCOFINE_MUXD2_BF_OFF ( 3)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD2_RX_CDR_DCOFINE_MUXD2_BF_WID ( 8)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD2_RX_CDR_DCOFINE_MUXD2_BF_MSK (0x000007F8)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD2_RX_CDR_DCOFINE_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX_DCO_MUXD2_RX_CDR_DCOCOARSE_MUXD2_BF_OFF (11)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD2_RX_CDR_DCOCOARSE_MUXD2_BF_WID ( 9)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD2_RX_CDR_DCOCOARSE_MUXD2_BF_MSK (0x000FF800)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD2_RX_CDR_DCOCOARSE_MUXD2_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_DFX_DCO_MUXD3 register description at address offset 0x468
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_dfx_dco_muxd3
  * rx_cdr_dfx_dco
  */

typedef union {
  struct {
    uint32_t RX_CDR_DCOFINEDFTSEL_MUXD3 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_DCOCOARSE_OVRD_H_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t RX_CDR_DCOFINE_MUXD3 : 8;
    ///< ---
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RX_CDR_DCOCOARSE_MUXD3 : 9;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_dfx_dco_muxd3_reg_t;

#define PMA_RX_MGS_CDR_DFX_DCO_MUXD3_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD3_RD_MASK (0x000fffffU)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD3_WR_MASK (0x000fffffU)


#define PMA_RX_MGS_CDR_DFX_DCO_MUXD3_RX_CDR_DCOFINEDFTSEL_MUXD3_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD3_RX_CDR_DCOFINEDFTSEL_MUXD3_BF_WID ( 2)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD3_RX_CDR_DCOFINEDFTSEL_MUXD3_BF_MSK (0x00000003)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD3_RX_CDR_DCOFINEDFTSEL_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX_DCO_MUXD3_RX_CDR_DCOCOARSE_OVRD_H_MUXD3_BF_OFF ( 2)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD3_RX_CDR_DCOCOARSE_OVRD_H_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD3_RX_CDR_DCOCOARSE_OVRD_H_MUXD3_BF_MSK (0x00000004)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD3_RX_CDR_DCOCOARSE_OVRD_H_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX_DCO_MUXD3_RX_CDR_DCOFINE_MUXD3_BF_OFF ( 3)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD3_RX_CDR_DCOFINE_MUXD3_BF_WID ( 8)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD3_RX_CDR_DCOFINE_MUXD3_BF_MSK (0x000007F8)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD3_RX_CDR_DCOFINE_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX_DCO_MUXD3_RX_CDR_DCOCOARSE_MUXD3_BF_OFF (11)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD3_RX_CDR_DCOCOARSE_MUXD3_BF_WID ( 9)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD3_RX_CDR_DCOCOARSE_MUXD3_BF_MSK (0x000FF800)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD3_RX_CDR_DCOCOARSE_MUXD3_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_DFX_DCO_MUXD4 register description at address offset 0x46c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_dfx_dco_muxd4
  * rx_cdr_dfx_dco
  */

typedef union {
  struct {
    uint32_t RX_CDR_DCOFINEDFTSEL_MUXD4 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_DCOCOARSE_OVRD_H_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t RX_CDR_DCOFINE_MUXD4 : 8;
    ///< ---
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RX_CDR_DCOCOARSE_MUXD4 : 9;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_dfx_dco_muxd4_reg_t;

#define PMA_RX_MGS_CDR_DFX_DCO_MUXD4_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD4_RD_MASK (0x000fffffU)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD4_WR_MASK (0x000fffffU)


#define PMA_RX_MGS_CDR_DFX_DCO_MUXD4_RX_CDR_DCOFINEDFTSEL_MUXD4_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD4_RX_CDR_DCOFINEDFTSEL_MUXD4_BF_WID ( 2)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD4_RX_CDR_DCOFINEDFTSEL_MUXD4_BF_MSK (0x00000003)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD4_RX_CDR_DCOFINEDFTSEL_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX_DCO_MUXD4_RX_CDR_DCOCOARSE_OVRD_H_MUXD4_BF_OFF ( 2)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD4_RX_CDR_DCOCOARSE_OVRD_H_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD4_RX_CDR_DCOCOARSE_OVRD_H_MUXD4_BF_MSK (0x00000004)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD4_RX_CDR_DCOCOARSE_OVRD_H_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX_DCO_MUXD4_RX_CDR_DCOFINE_MUXD4_BF_OFF ( 3)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD4_RX_CDR_DCOFINE_MUXD4_BF_WID ( 8)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD4_RX_CDR_DCOFINE_MUXD4_BF_MSK (0x000007F8)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD4_RX_CDR_DCOFINE_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX_DCO_MUXD4_RX_CDR_DCOCOARSE_MUXD4_BF_OFF (11)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD4_RX_CDR_DCOCOARSE_MUXD4_BF_WID ( 9)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD4_RX_CDR_DCOCOARSE_MUXD4_BF_MSK (0x000FF800)
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD4_RX_CDR_DCOCOARSE_MUXD4_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_DIV1 register description at address offset 0x470
  *
  * Register default value:        0x00000050
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_div1
  * rx_cdr_div1
  */

typedef union {
  struct {
    uint32_t RX_CDR_FBDIV_INTGR : 10;
    ///< Not a muxd register as Orchy/FW will set this value based on rxdco_divrate_fbdiv_muxd#
    ///< AccessType="RW" BitOffset="0" ResetValue="0x50"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_div1_reg_t;

#define PMA_RX_MGS_CDR_DIV1_DEFAULT (0x00000050U)
#define PMA_RX_MGS_CDR_DIV1_RD_MASK (0x000003ffU)
#define PMA_RX_MGS_CDR_DIV1_WR_MASK (0x000003ffU)


///< Not a muxd register as Orchy/FW will set this value based on rxdco_divrate_fbdiv_muxd#
#define PMA_RX_MGS_CDR_DIV1_RX_CDR_FBDIV_INTGR_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_DIV1_RX_CDR_FBDIV_INTGR_BF_WID (10)
#define PMA_RX_MGS_CDR_DIV1_RX_CDR_FBDIV_INTGR_BF_MSK (0x000003FF)
#define PMA_RX_MGS_CDR_DIV1_RX_CDR_FBDIV_INTGR_BF_DEF (0x00000050)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_DIV1_MUXD0 register description at address offset 0x474
  *
  * Register default value:        0x00003000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_div1_muxd0
  * rx_cdr_div1
  */

typedef union {
  struct {
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="0" ResetValue="None"
    uint32_t RX_CDR_FRACNEN_H_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RX_CDR_REFCLK_CNT_LIMIT_MUXD0 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x6"
    uint32_t RX_CDR_FRACN_SD_STEP_EN_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t RX_CDR_FRACN_SD_STEP_MUXD0 : 6;
    ///< ---
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RX_CDR_HF_LF_INUSE_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t RX_CDR_HF_LF_BAND_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t  : 9;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_div1_muxd0_reg_t;

#define PMA_RX_MGS_CDR_DIV1_MUXD0_DEFAULT (0x00003000U)
#define PMA_RX_MGS_CDR_DIV1_MUXD0_RD_MASK (0x007ffc00U)
#define PMA_RX_MGS_CDR_DIV1_MUXD0_WR_MASK (0x007ffc00U)


#define PMA_RX_MGS_CDR_DIV1_MUXD0_RX_CDR_FRACNEN_H_MUXD0_BF_OFF (10)
#define PMA_RX_MGS_CDR_DIV1_MUXD0_RX_CDR_FRACNEN_H_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DIV1_MUXD0_RX_CDR_FRACNEN_H_MUXD0_BF_MSK (0x00000400)
#define PMA_RX_MGS_CDR_DIV1_MUXD0_RX_CDR_FRACNEN_H_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DIV1_MUXD0_RX_CDR_REFCLK_CNT_LIMIT_MUXD0_BF_OFF (11)
#define PMA_RX_MGS_CDR_DIV1_MUXD0_RX_CDR_REFCLK_CNT_LIMIT_MUXD0_BF_WID ( 3)
#define PMA_RX_MGS_CDR_DIV1_MUXD0_RX_CDR_REFCLK_CNT_LIMIT_MUXD0_BF_MSK (0x00003800)
#define PMA_RX_MGS_CDR_DIV1_MUXD0_RX_CDR_REFCLK_CNT_LIMIT_MUXD0_BF_DEF (0x00003000)

#define PMA_RX_MGS_CDR_DIV1_MUXD0_RX_CDR_FRACN_SD_STEP_EN_MUXD0_BF_OFF (14)
#define PMA_RX_MGS_CDR_DIV1_MUXD0_RX_CDR_FRACN_SD_STEP_EN_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DIV1_MUXD0_RX_CDR_FRACN_SD_STEP_EN_MUXD0_BF_MSK (0x00004000)
#define PMA_RX_MGS_CDR_DIV1_MUXD0_RX_CDR_FRACN_SD_STEP_EN_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DIV1_MUXD0_RX_CDR_FRACN_SD_STEP_MUXD0_BF_OFF (15)
#define PMA_RX_MGS_CDR_DIV1_MUXD0_RX_CDR_FRACN_SD_STEP_MUXD0_BF_WID ( 6)
#define PMA_RX_MGS_CDR_DIV1_MUXD0_RX_CDR_FRACN_SD_STEP_MUXD0_BF_MSK (0x001F8000)
#define PMA_RX_MGS_CDR_DIV1_MUXD0_RX_CDR_FRACN_SD_STEP_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DIV1_MUXD0_RX_CDR_HF_LF_INUSE_MUXD0_BF_OFF (21)
#define PMA_RX_MGS_CDR_DIV1_MUXD0_RX_CDR_HF_LF_INUSE_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DIV1_MUXD0_RX_CDR_HF_LF_INUSE_MUXD0_BF_MSK (0x00200000)
#define PMA_RX_MGS_CDR_DIV1_MUXD0_RX_CDR_HF_LF_INUSE_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DIV1_MUXD0_RX_CDR_HF_LF_BAND_MUXD0_BF_OFF (22)
#define PMA_RX_MGS_CDR_DIV1_MUXD0_RX_CDR_HF_LF_BAND_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DIV1_MUXD0_RX_CDR_HF_LF_BAND_MUXD0_BF_MSK (0x00400000)
#define PMA_RX_MGS_CDR_DIV1_MUXD0_RX_CDR_HF_LF_BAND_MUXD0_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_DIV1_MUXD1 register description at address offset 0x478
  *
  * Register default value:        0x00003000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_div1_muxd1
  * rx_cdr_div1
  */

typedef union {
  struct {
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="0" ResetValue="None"
    uint32_t RX_CDR_FRACNEN_H_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RX_CDR_REFCLK_CNT_LIMIT_MUXD1 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x6"
    uint32_t RX_CDR_FRACN_SD_STEP_EN_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t RX_CDR_FRACN_SD_STEP_MUXD1 : 6;
    ///< ---
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RX_CDR_HF_LF_INUSE_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t RX_CDR_HF_LF_BAND_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t  : 9;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_div1_muxd1_reg_t;

#define PMA_RX_MGS_CDR_DIV1_MUXD1_DEFAULT (0x00003000U)
#define PMA_RX_MGS_CDR_DIV1_MUXD1_RD_MASK (0x007ffc00U)
#define PMA_RX_MGS_CDR_DIV1_MUXD1_WR_MASK (0x007ffc00U)


#define PMA_RX_MGS_CDR_DIV1_MUXD1_RX_CDR_FRACNEN_H_MUXD1_BF_OFF (10)
#define PMA_RX_MGS_CDR_DIV1_MUXD1_RX_CDR_FRACNEN_H_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DIV1_MUXD1_RX_CDR_FRACNEN_H_MUXD1_BF_MSK (0x00000400)
#define PMA_RX_MGS_CDR_DIV1_MUXD1_RX_CDR_FRACNEN_H_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DIV1_MUXD1_RX_CDR_REFCLK_CNT_LIMIT_MUXD1_BF_OFF (11)
#define PMA_RX_MGS_CDR_DIV1_MUXD1_RX_CDR_REFCLK_CNT_LIMIT_MUXD1_BF_WID ( 3)
#define PMA_RX_MGS_CDR_DIV1_MUXD1_RX_CDR_REFCLK_CNT_LIMIT_MUXD1_BF_MSK (0x00003800)
#define PMA_RX_MGS_CDR_DIV1_MUXD1_RX_CDR_REFCLK_CNT_LIMIT_MUXD1_BF_DEF (0x00003000)

#define PMA_RX_MGS_CDR_DIV1_MUXD1_RX_CDR_FRACN_SD_STEP_EN_MUXD1_BF_OFF (14)
#define PMA_RX_MGS_CDR_DIV1_MUXD1_RX_CDR_FRACN_SD_STEP_EN_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DIV1_MUXD1_RX_CDR_FRACN_SD_STEP_EN_MUXD1_BF_MSK (0x00004000)
#define PMA_RX_MGS_CDR_DIV1_MUXD1_RX_CDR_FRACN_SD_STEP_EN_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DIV1_MUXD1_RX_CDR_FRACN_SD_STEP_MUXD1_BF_OFF (15)
#define PMA_RX_MGS_CDR_DIV1_MUXD1_RX_CDR_FRACN_SD_STEP_MUXD1_BF_WID ( 6)
#define PMA_RX_MGS_CDR_DIV1_MUXD1_RX_CDR_FRACN_SD_STEP_MUXD1_BF_MSK (0x001F8000)
#define PMA_RX_MGS_CDR_DIV1_MUXD1_RX_CDR_FRACN_SD_STEP_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DIV1_MUXD1_RX_CDR_HF_LF_INUSE_MUXD1_BF_OFF (21)
#define PMA_RX_MGS_CDR_DIV1_MUXD1_RX_CDR_HF_LF_INUSE_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DIV1_MUXD1_RX_CDR_HF_LF_INUSE_MUXD1_BF_MSK (0x00200000)
#define PMA_RX_MGS_CDR_DIV1_MUXD1_RX_CDR_HF_LF_INUSE_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DIV1_MUXD1_RX_CDR_HF_LF_BAND_MUXD1_BF_OFF (22)
#define PMA_RX_MGS_CDR_DIV1_MUXD1_RX_CDR_HF_LF_BAND_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DIV1_MUXD1_RX_CDR_HF_LF_BAND_MUXD1_BF_MSK (0x00400000)
#define PMA_RX_MGS_CDR_DIV1_MUXD1_RX_CDR_HF_LF_BAND_MUXD1_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_DIV1_MUXD2 register description at address offset 0x47c
  *
  * Register default value:        0x00003000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_div1_muxd2
  * rx_cdr_div1
  */

typedef union {
  struct {
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="0" ResetValue="None"
    uint32_t RX_CDR_FRACNEN_H_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RX_CDR_REFCLK_CNT_LIMIT_MUXD2 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x6"
    uint32_t RX_CDR_FRACN_SD_STEP_EN_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t RX_CDR_FRACN_SD_STEP_MUXD2 : 6;
    ///< ---
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RX_CDR_HF_LF_INUSE_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t RX_CDR_HF_LF_BAND_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t  : 9;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_div1_muxd2_reg_t;

#define PMA_RX_MGS_CDR_DIV1_MUXD2_DEFAULT (0x00003000U)
#define PMA_RX_MGS_CDR_DIV1_MUXD2_RD_MASK (0x007ffc00U)
#define PMA_RX_MGS_CDR_DIV1_MUXD2_WR_MASK (0x007ffc00U)


#define PMA_RX_MGS_CDR_DIV1_MUXD2_RX_CDR_FRACNEN_H_MUXD2_BF_OFF (10)
#define PMA_RX_MGS_CDR_DIV1_MUXD2_RX_CDR_FRACNEN_H_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DIV1_MUXD2_RX_CDR_FRACNEN_H_MUXD2_BF_MSK (0x00000400)
#define PMA_RX_MGS_CDR_DIV1_MUXD2_RX_CDR_FRACNEN_H_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DIV1_MUXD2_RX_CDR_REFCLK_CNT_LIMIT_MUXD2_BF_OFF (11)
#define PMA_RX_MGS_CDR_DIV1_MUXD2_RX_CDR_REFCLK_CNT_LIMIT_MUXD2_BF_WID ( 3)
#define PMA_RX_MGS_CDR_DIV1_MUXD2_RX_CDR_REFCLK_CNT_LIMIT_MUXD2_BF_MSK (0x00003800)
#define PMA_RX_MGS_CDR_DIV1_MUXD2_RX_CDR_REFCLK_CNT_LIMIT_MUXD2_BF_DEF (0x00003000)

#define PMA_RX_MGS_CDR_DIV1_MUXD2_RX_CDR_FRACN_SD_STEP_EN_MUXD2_BF_OFF (14)
#define PMA_RX_MGS_CDR_DIV1_MUXD2_RX_CDR_FRACN_SD_STEP_EN_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DIV1_MUXD2_RX_CDR_FRACN_SD_STEP_EN_MUXD2_BF_MSK (0x00004000)
#define PMA_RX_MGS_CDR_DIV1_MUXD2_RX_CDR_FRACN_SD_STEP_EN_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DIV1_MUXD2_RX_CDR_FRACN_SD_STEP_MUXD2_BF_OFF (15)
#define PMA_RX_MGS_CDR_DIV1_MUXD2_RX_CDR_FRACN_SD_STEP_MUXD2_BF_WID ( 6)
#define PMA_RX_MGS_CDR_DIV1_MUXD2_RX_CDR_FRACN_SD_STEP_MUXD2_BF_MSK (0x001F8000)
#define PMA_RX_MGS_CDR_DIV1_MUXD2_RX_CDR_FRACN_SD_STEP_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DIV1_MUXD2_RX_CDR_HF_LF_INUSE_MUXD2_BF_OFF (21)
#define PMA_RX_MGS_CDR_DIV1_MUXD2_RX_CDR_HF_LF_INUSE_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DIV1_MUXD2_RX_CDR_HF_LF_INUSE_MUXD2_BF_MSK (0x00200000)
#define PMA_RX_MGS_CDR_DIV1_MUXD2_RX_CDR_HF_LF_INUSE_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DIV1_MUXD2_RX_CDR_HF_LF_BAND_MUXD2_BF_OFF (22)
#define PMA_RX_MGS_CDR_DIV1_MUXD2_RX_CDR_HF_LF_BAND_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DIV1_MUXD2_RX_CDR_HF_LF_BAND_MUXD2_BF_MSK (0x00400000)
#define PMA_RX_MGS_CDR_DIV1_MUXD2_RX_CDR_HF_LF_BAND_MUXD2_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_DIV1_MUXD3 register description at address offset 0x480
  *
  * Register default value:        0x00003000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_div1_muxd3
  * rx_cdr_div1
  */

typedef union {
  struct {
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="0" ResetValue="None"
    uint32_t RX_CDR_FRACNEN_H_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RX_CDR_REFCLK_CNT_LIMIT_MUXD3 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x6"
    uint32_t RX_CDR_FRACN_SD_STEP_EN_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t RX_CDR_FRACN_SD_STEP_MUXD3 : 6;
    ///< ---
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RX_CDR_HF_LF_INUSE_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t RX_CDR_HF_LF_BAND_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t  : 9;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_div1_muxd3_reg_t;

#define PMA_RX_MGS_CDR_DIV1_MUXD3_DEFAULT (0x00003000U)
#define PMA_RX_MGS_CDR_DIV1_MUXD3_RD_MASK (0x007ffc00U)
#define PMA_RX_MGS_CDR_DIV1_MUXD3_WR_MASK (0x007ffc00U)


#define PMA_RX_MGS_CDR_DIV1_MUXD3_RX_CDR_FRACNEN_H_MUXD3_BF_OFF (10)
#define PMA_RX_MGS_CDR_DIV1_MUXD3_RX_CDR_FRACNEN_H_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DIV1_MUXD3_RX_CDR_FRACNEN_H_MUXD3_BF_MSK (0x00000400)
#define PMA_RX_MGS_CDR_DIV1_MUXD3_RX_CDR_FRACNEN_H_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DIV1_MUXD3_RX_CDR_REFCLK_CNT_LIMIT_MUXD3_BF_OFF (11)
#define PMA_RX_MGS_CDR_DIV1_MUXD3_RX_CDR_REFCLK_CNT_LIMIT_MUXD3_BF_WID ( 3)
#define PMA_RX_MGS_CDR_DIV1_MUXD3_RX_CDR_REFCLK_CNT_LIMIT_MUXD3_BF_MSK (0x00003800)
#define PMA_RX_MGS_CDR_DIV1_MUXD3_RX_CDR_REFCLK_CNT_LIMIT_MUXD3_BF_DEF (0x00003000)

#define PMA_RX_MGS_CDR_DIV1_MUXD3_RX_CDR_FRACN_SD_STEP_EN_MUXD3_BF_OFF (14)
#define PMA_RX_MGS_CDR_DIV1_MUXD3_RX_CDR_FRACN_SD_STEP_EN_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DIV1_MUXD3_RX_CDR_FRACN_SD_STEP_EN_MUXD3_BF_MSK (0x00004000)
#define PMA_RX_MGS_CDR_DIV1_MUXD3_RX_CDR_FRACN_SD_STEP_EN_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DIV1_MUXD3_RX_CDR_FRACN_SD_STEP_MUXD3_BF_OFF (15)
#define PMA_RX_MGS_CDR_DIV1_MUXD3_RX_CDR_FRACN_SD_STEP_MUXD3_BF_WID ( 6)
#define PMA_RX_MGS_CDR_DIV1_MUXD3_RX_CDR_FRACN_SD_STEP_MUXD3_BF_MSK (0x001F8000)
#define PMA_RX_MGS_CDR_DIV1_MUXD3_RX_CDR_FRACN_SD_STEP_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DIV1_MUXD3_RX_CDR_HF_LF_INUSE_MUXD3_BF_OFF (21)
#define PMA_RX_MGS_CDR_DIV1_MUXD3_RX_CDR_HF_LF_INUSE_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DIV1_MUXD3_RX_CDR_HF_LF_INUSE_MUXD3_BF_MSK (0x00200000)
#define PMA_RX_MGS_CDR_DIV1_MUXD3_RX_CDR_HF_LF_INUSE_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DIV1_MUXD3_RX_CDR_HF_LF_BAND_MUXD3_BF_OFF (22)
#define PMA_RX_MGS_CDR_DIV1_MUXD3_RX_CDR_HF_LF_BAND_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DIV1_MUXD3_RX_CDR_HF_LF_BAND_MUXD3_BF_MSK (0x00400000)
#define PMA_RX_MGS_CDR_DIV1_MUXD3_RX_CDR_HF_LF_BAND_MUXD3_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_DIV1_MUXD4 register description at address offset 0x484
  *
  * Register default value:        0x00003000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_div1_muxd4
  * rx_cdr_div1
  */

typedef union {
  struct {
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="0" ResetValue="None"
    uint32_t RX_CDR_FRACNEN_H_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RX_CDR_REFCLK_CNT_LIMIT_MUXD4 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x6"
    uint32_t RX_CDR_FRACN_SD_STEP_EN_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t RX_CDR_FRACN_SD_STEP_MUXD4 : 6;
    ///< ---
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RX_CDR_HF_LF_INUSE_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t RX_CDR_HF_LF_BAND_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t  : 9;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_div1_muxd4_reg_t;

#define PMA_RX_MGS_CDR_DIV1_MUXD4_DEFAULT (0x00003000U)
#define PMA_RX_MGS_CDR_DIV1_MUXD4_RD_MASK (0x007ffc00U)
#define PMA_RX_MGS_CDR_DIV1_MUXD4_WR_MASK (0x007ffc00U)


#define PMA_RX_MGS_CDR_DIV1_MUXD4_RX_CDR_FRACNEN_H_MUXD4_BF_OFF (10)
#define PMA_RX_MGS_CDR_DIV1_MUXD4_RX_CDR_FRACNEN_H_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DIV1_MUXD4_RX_CDR_FRACNEN_H_MUXD4_BF_MSK (0x00000400)
#define PMA_RX_MGS_CDR_DIV1_MUXD4_RX_CDR_FRACNEN_H_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DIV1_MUXD4_RX_CDR_REFCLK_CNT_LIMIT_MUXD4_BF_OFF (11)
#define PMA_RX_MGS_CDR_DIV1_MUXD4_RX_CDR_REFCLK_CNT_LIMIT_MUXD4_BF_WID ( 3)
#define PMA_RX_MGS_CDR_DIV1_MUXD4_RX_CDR_REFCLK_CNT_LIMIT_MUXD4_BF_MSK (0x00003800)
#define PMA_RX_MGS_CDR_DIV1_MUXD4_RX_CDR_REFCLK_CNT_LIMIT_MUXD4_BF_DEF (0x00003000)

#define PMA_RX_MGS_CDR_DIV1_MUXD4_RX_CDR_FRACN_SD_STEP_EN_MUXD4_BF_OFF (14)
#define PMA_RX_MGS_CDR_DIV1_MUXD4_RX_CDR_FRACN_SD_STEP_EN_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DIV1_MUXD4_RX_CDR_FRACN_SD_STEP_EN_MUXD4_BF_MSK (0x00004000)
#define PMA_RX_MGS_CDR_DIV1_MUXD4_RX_CDR_FRACN_SD_STEP_EN_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DIV1_MUXD4_RX_CDR_FRACN_SD_STEP_MUXD4_BF_OFF (15)
#define PMA_RX_MGS_CDR_DIV1_MUXD4_RX_CDR_FRACN_SD_STEP_MUXD4_BF_WID ( 6)
#define PMA_RX_MGS_CDR_DIV1_MUXD4_RX_CDR_FRACN_SD_STEP_MUXD4_BF_MSK (0x001F8000)
#define PMA_RX_MGS_CDR_DIV1_MUXD4_RX_CDR_FRACN_SD_STEP_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DIV1_MUXD4_RX_CDR_HF_LF_INUSE_MUXD4_BF_OFF (21)
#define PMA_RX_MGS_CDR_DIV1_MUXD4_RX_CDR_HF_LF_INUSE_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DIV1_MUXD4_RX_CDR_HF_LF_INUSE_MUXD4_BF_MSK (0x00200000)
#define PMA_RX_MGS_CDR_DIV1_MUXD4_RX_CDR_HF_LF_INUSE_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DIV1_MUXD4_RX_CDR_HF_LF_BAND_MUXD4_BF_OFF (22)
#define PMA_RX_MGS_CDR_DIV1_MUXD4_RX_CDR_HF_LF_BAND_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DIV1_MUXD4_RX_CDR_HF_LF_BAND_MUXD4_BF_MSK (0x00400000)
#define PMA_RX_MGS_CDR_DIV1_MUXD4_RX_CDR_HF_LF_BAND_MUXD4_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_CNTR_BIST_SETTINGS register description at address offset 0x488
  *
  * Register default value:        0x00000FFF
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_cntr_bist_settings
  * rx_cdr_cntr_bist_settings
  */

typedef union {
  struct {
    uint32_t RX_CDR_LOCKTIMER_MAXCNT : 14;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0xFFF"
    uint32_t RX_CDR_LOCK_STATE_SEL : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t  : 17;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_cntr_bist_settings_reg_t;

#define PMA_RX_MGS_CDR_CNTR_BIST_SETTINGS_DEFAULT (0x00000fffU)
#define PMA_RX_MGS_CDR_CNTR_BIST_SETTINGS_RD_MASK (0x00007fffU)
#define PMA_RX_MGS_CDR_CNTR_BIST_SETTINGS_WR_MASK (0x00007fffU)


#define PMA_RX_MGS_CDR_CNTR_BIST_SETTINGS_RX_CDR_LOCKTIMER_MAXCNT_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_CNTR_BIST_SETTINGS_RX_CDR_LOCKTIMER_MAXCNT_BF_WID (14)
#define PMA_RX_MGS_CDR_CNTR_BIST_SETTINGS_RX_CDR_LOCKTIMER_MAXCNT_BF_MSK (0x00003FFF)
#define PMA_RX_MGS_CDR_CNTR_BIST_SETTINGS_RX_CDR_LOCKTIMER_MAXCNT_BF_DEF (0x00000FFF)

#define PMA_RX_MGS_CDR_CNTR_BIST_SETTINGS_RX_CDR_LOCK_STATE_SEL_BF_OFF (14)
#define PMA_RX_MGS_CDR_CNTR_BIST_SETTINGS_RX_CDR_LOCK_STATE_SEL_BF_WID ( 1)
#define PMA_RX_MGS_CDR_CNTR_BIST_SETTINGS_RX_CDR_LOCK_STATE_SEL_BF_MSK (0x00004000)
#define PMA_RX_MGS_CDR_CNTR_BIST_SETTINGS_RX_CDR_LOCK_STATE_SEL_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_CALIB0_MUXD0 register description at address offset 0x48c
  *
  * Register default value:        0x801FDFD1
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_calib0_muxd0
  * rx_cdr_calib0
  */

typedef union {
  struct {
    uint32_t RX_CDR_COARSE_LOOP_GSCALE_MAX_MUXD0 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t RX_CDR_COARSE_LOOP_GSCALE_MIN_MUXD0 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="4" ResetValue="0xD"
    uint32_t RX_CDR_COARSE_LOOP_GSCALE_CNT_MAX_MUXD0 : 5;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1F"
    uint32_t RX_CDR_DCOCOARSE_OVRDEN_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t RX_CDR_DCOCOARSE_OVRD_MUXD0 : 8;
    ///< ---
    ///< AccessType="RW" BitOffset="14" ResetValue="0x7F"
    uint32_t RX_CDR_BOOSTGAIN_MAXCNT_MUXD0 : 10;
    ///< ---
    ///< AccessType="RW" BitOffset="22" ResetValue="0x200"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_calib0_muxd0_reg_t;

#define PMA_RX_MGS_CDR_CALIB0_MUXD0_DEFAULT (0x801fdfd1U)
#define PMA_RX_MGS_CDR_CALIB0_MUXD0_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_CDR_CALIB0_MUXD0_WR_MASK (0xffffffffU)


#define PMA_RX_MGS_CDR_CALIB0_MUXD0_RX_CDR_COARSE_LOOP_GSCALE_MAX_MUXD0_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_CALIB0_MUXD0_RX_CDR_COARSE_LOOP_GSCALE_MAX_MUXD0_BF_WID ( 4)
#define PMA_RX_MGS_CDR_CALIB0_MUXD0_RX_CDR_COARSE_LOOP_GSCALE_MAX_MUXD0_BF_MSK (0x0000000F)
#define PMA_RX_MGS_CDR_CALIB0_MUXD0_RX_CDR_COARSE_LOOP_GSCALE_MAX_MUXD0_BF_DEF (0x00000001)

#define PMA_RX_MGS_CDR_CALIB0_MUXD0_RX_CDR_COARSE_LOOP_GSCALE_MIN_MUXD0_BF_OFF ( 4)
#define PMA_RX_MGS_CDR_CALIB0_MUXD0_RX_CDR_COARSE_LOOP_GSCALE_MIN_MUXD0_BF_WID ( 4)
#define PMA_RX_MGS_CDR_CALIB0_MUXD0_RX_CDR_COARSE_LOOP_GSCALE_MIN_MUXD0_BF_MSK (0x000000F0)
#define PMA_RX_MGS_CDR_CALIB0_MUXD0_RX_CDR_COARSE_LOOP_GSCALE_MIN_MUXD0_BF_DEF (0x000000D0)

#define PMA_RX_MGS_CDR_CALIB0_MUXD0_RX_CDR_COARSE_LOOP_GSCALE_CNT_MAX_MUXD0_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_CALIB0_MUXD0_RX_CDR_COARSE_LOOP_GSCALE_CNT_MAX_MUXD0_BF_WID ( 5)
#define PMA_RX_MGS_CDR_CALIB0_MUXD0_RX_CDR_COARSE_LOOP_GSCALE_CNT_MAX_MUXD0_BF_MSK (0x00001F00)
#define PMA_RX_MGS_CDR_CALIB0_MUXD0_RX_CDR_COARSE_LOOP_GSCALE_CNT_MAX_MUXD0_BF_DEF (0x00001F00)

#define PMA_RX_MGS_CDR_CALIB0_MUXD0_RX_CDR_DCOCOARSE_OVRDEN_MUXD0_BF_OFF (13)
#define PMA_RX_MGS_CDR_CALIB0_MUXD0_RX_CDR_DCOCOARSE_OVRDEN_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_CALIB0_MUXD0_RX_CDR_DCOCOARSE_OVRDEN_MUXD0_BF_MSK (0x00002000)
#define PMA_RX_MGS_CDR_CALIB0_MUXD0_RX_CDR_DCOCOARSE_OVRDEN_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_CALIB0_MUXD0_RX_CDR_DCOCOARSE_OVRD_MUXD0_BF_OFF (14)
#define PMA_RX_MGS_CDR_CALIB0_MUXD0_RX_CDR_DCOCOARSE_OVRD_MUXD0_BF_WID ( 8)
#define PMA_RX_MGS_CDR_CALIB0_MUXD0_RX_CDR_DCOCOARSE_OVRD_MUXD0_BF_MSK (0x003FC000)
#define PMA_RX_MGS_CDR_CALIB0_MUXD0_RX_CDR_DCOCOARSE_OVRD_MUXD0_BF_DEF (0x001FC000)

#define PMA_RX_MGS_CDR_CALIB0_MUXD0_RX_CDR_BOOSTGAIN_MAXCNT_MUXD0_BF_OFF (22)
#define PMA_RX_MGS_CDR_CALIB0_MUXD0_RX_CDR_BOOSTGAIN_MAXCNT_MUXD0_BF_WID (10)
#define PMA_RX_MGS_CDR_CALIB0_MUXD0_RX_CDR_BOOSTGAIN_MAXCNT_MUXD0_BF_MSK (0xFFC00000)
#define PMA_RX_MGS_CDR_CALIB0_MUXD0_RX_CDR_BOOSTGAIN_MAXCNT_MUXD0_BF_DEF (0x80000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_CALIB0_MUXD1 register description at address offset 0x490
  *
  * Register default value:        0x801FDFD1
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_calib0_muxd1
  * rx_cdr_calib0
  */

typedef union {
  struct {
    uint32_t RX_CDR_COARSE_LOOP_GSCALE_MAX_MUXD1 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t RX_CDR_COARSE_LOOP_GSCALE_MIN_MUXD1 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="4" ResetValue="0xD"
    uint32_t RX_CDR_COARSE_LOOP_GSCALE_CNT_MAX_MUXD1 : 5;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1F"
    uint32_t RX_CDR_DCOCOARSE_OVRDEN_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t RX_CDR_DCOCOARSE_OVRD_MUXD1 : 8;
    ///< ---
    ///< AccessType="RW" BitOffset="14" ResetValue="0x7F"
    uint32_t RX_CDR_BOOSTGAIN_MAXCNT_MUXD1 : 10;
    ///< ---
    ///< AccessType="RW" BitOffset="22" ResetValue="0x200"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_calib0_muxd1_reg_t;

#define PMA_RX_MGS_CDR_CALIB0_MUXD1_DEFAULT (0x801fdfd1U)
#define PMA_RX_MGS_CDR_CALIB0_MUXD1_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_CDR_CALIB0_MUXD1_WR_MASK (0xffffffffU)


#define PMA_RX_MGS_CDR_CALIB0_MUXD1_RX_CDR_COARSE_LOOP_GSCALE_MAX_MUXD1_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_CALIB0_MUXD1_RX_CDR_COARSE_LOOP_GSCALE_MAX_MUXD1_BF_WID ( 4)
#define PMA_RX_MGS_CDR_CALIB0_MUXD1_RX_CDR_COARSE_LOOP_GSCALE_MAX_MUXD1_BF_MSK (0x0000000F)
#define PMA_RX_MGS_CDR_CALIB0_MUXD1_RX_CDR_COARSE_LOOP_GSCALE_MAX_MUXD1_BF_DEF (0x00000001)

#define PMA_RX_MGS_CDR_CALIB0_MUXD1_RX_CDR_COARSE_LOOP_GSCALE_MIN_MUXD1_BF_OFF ( 4)
#define PMA_RX_MGS_CDR_CALIB0_MUXD1_RX_CDR_COARSE_LOOP_GSCALE_MIN_MUXD1_BF_WID ( 4)
#define PMA_RX_MGS_CDR_CALIB0_MUXD1_RX_CDR_COARSE_LOOP_GSCALE_MIN_MUXD1_BF_MSK (0x000000F0)
#define PMA_RX_MGS_CDR_CALIB0_MUXD1_RX_CDR_COARSE_LOOP_GSCALE_MIN_MUXD1_BF_DEF (0x000000D0)

#define PMA_RX_MGS_CDR_CALIB0_MUXD1_RX_CDR_COARSE_LOOP_GSCALE_CNT_MAX_MUXD1_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_CALIB0_MUXD1_RX_CDR_COARSE_LOOP_GSCALE_CNT_MAX_MUXD1_BF_WID ( 5)
#define PMA_RX_MGS_CDR_CALIB0_MUXD1_RX_CDR_COARSE_LOOP_GSCALE_CNT_MAX_MUXD1_BF_MSK (0x00001F00)
#define PMA_RX_MGS_CDR_CALIB0_MUXD1_RX_CDR_COARSE_LOOP_GSCALE_CNT_MAX_MUXD1_BF_DEF (0x00001F00)

#define PMA_RX_MGS_CDR_CALIB0_MUXD1_RX_CDR_DCOCOARSE_OVRDEN_MUXD1_BF_OFF (13)
#define PMA_RX_MGS_CDR_CALIB0_MUXD1_RX_CDR_DCOCOARSE_OVRDEN_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_CALIB0_MUXD1_RX_CDR_DCOCOARSE_OVRDEN_MUXD1_BF_MSK (0x00002000)
#define PMA_RX_MGS_CDR_CALIB0_MUXD1_RX_CDR_DCOCOARSE_OVRDEN_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_CALIB0_MUXD1_RX_CDR_DCOCOARSE_OVRD_MUXD1_BF_OFF (14)
#define PMA_RX_MGS_CDR_CALIB0_MUXD1_RX_CDR_DCOCOARSE_OVRD_MUXD1_BF_WID ( 8)
#define PMA_RX_MGS_CDR_CALIB0_MUXD1_RX_CDR_DCOCOARSE_OVRD_MUXD1_BF_MSK (0x003FC000)
#define PMA_RX_MGS_CDR_CALIB0_MUXD1_RX_CDR_DCOCOARSE_OVRD_MUXD1_BF_DEF (0x001FC000)

#define PMA_RX_MGS_CDR_CALIB0_MUXD1_RX_CDR_BOOSTGAIN_MAXCNT_MUXD1_BF_OFF (22)
#define PMA_RX_MGS_CDR_CALIB0_MUXD1_RX_CDR_BOOSTGAIN_MAXCNT_MUXD1_BF_WID (10)
#define PMA_RX_MGS_CDR_CALIB0_MUXD1_RX_CDR_BOOSTGAIN_MAXCNT_MUXD1_BF_MSK (0xFFC00000)
#define PMA_RX_MGS_CDR_CALIB0_MUXD1_RX_CDR_BOOSTGAIN_MAXCNT_MUXD1_BF_DEF (0x80000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_CALIB0_MUXD2 register description at address offset 0x494
  *
  * Register default value:        0x801FDFD1
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_calib0_muxd2
  * rx_cdr_calib0
  */

typedef union {
  struct {
    uint32_t RX_CDR_COARSE_LOOP_GSCALE_MAX_MUXD2 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t RX_CDR_COARSE_LOOP_GSCALE_MIN_MUXD2 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="4" ResetValue="0xD"
    uint32_t RX_CDR_COARSE_LOOP_GSCALE_CNT_MAX_MUXD2 : 5;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1F"
    uint32_t RX_CDR_DCOCOARSE_OVRDEN_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t RX_CDR_DCOCOARSE_OVRD_MUXD2 : 8;
    ///< ---
    ///< AccessType="RW" BitOffset="14" ResetValue="0x7F"
    uint32_t RX_CDR_BOOSTGAIN_MAXCNT_MUXD2 : 10;
    ///< ---
    ///< AccessType="RW" BitOffset="22" ResetValue="0x200"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_calib0_muxd2_reg_t;

#define PMA_RX_MGS_CDR_CALIB0_MUXD2_DEFAULT (0x801fdfd1U)
#define PMA_RX_MGS_CDR_CALIB0_MUXD2_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_CDR_CALIB0_MUXD2_WR_MASK (0xffffffffU)


#define PMA_RX_MGS_CDR_CALIB0_MUXD2_RX_CDR_COARSE_LOOP_GSCALE_MAX_MUXD2_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_CALIB0_MUXD2_RX_CDR_COARSE_LOOP_GSCALE_MAX_MUXD2_BF_WID ( 4)
#define PMA_RX_MGS_CDR_CALIB0_MUXD2_RX_CDR_COARSE_LOOP_GSCALE_MAX_MUXD2_BF_MSK (0x0000000F)
#define PMA_RX_MGS_CDR_CALIB0_MUXD2_RX_CDR_COARSE_LOOP_GSCALE_MAX_MUXD2_BF_DEF (0x00000001)

#define PMA_RX_MGS_CDR_CALIB0_MUXD2_RX_CDR_COARSE_LOOP_GSCALE_MIN_MUXD2_BF_OFF ( 4)
#define PMA_RX_MGS_CDR_CALIB0_MUXD2_RX_CDR_COARSE_LOOP_GSCALE_MIN_MUXD2_BF_WID ( 4)
#define PMA_RX_MGS_CDR_CALIB0_MUXD2_RX_CDR_COARSE_LOOP_GSCALE_MIN_MUXD2_BF_MSK (0x000000F0)
#define PMA_RX_MGS_CDR_CALIB0_MUXD2_RX_CDR_COARSE_LOOP_GSCALE_MIN_MUXD2_BF_DEF (0x000000D0)

#define PMA_RX_MGS_CDR_CALIB0_MUXD2_RX_CDR_COARSE_LOOP_GSCALE_CNT_MAX_MUXD2_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_CALIB0_MUXD2_RX_CDR_COARSE_LOOP_GSCALE_CNT_MAX_MUXD2_BF_WID ( 5)
#define PMA_RX_MGS_CDR_CALIB0_MUXD2_RX_CDR_COARSE_LOOP_GSCALE_CNT_MAX_MUXD2_BF_MSK (0x00001F00)
#define PMA_RX_MGS_CDR_CALIB0_MUXD2_RX_CDR_COARSE_LOOP_GSCALE_CNT_MAX_MUXD2_BF_DEF (0x00001F00)

#define PMA_RX_MGS_CDR_CALIB0_MUXD2_RX_CDR_DCOCOARSE_OVRDEN_MUXD2_BF_OFF (13)
#define PMA_RX_MGS_CDR_CALIB0_MUXD2_RX_CDR_DCOCOARSE_OVRDEN_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_CALIB0_MUXD2_RX_CDR_DCOCOARSE_OVRDEN_MUXD2_BF_MSK (0x00002000)
#define PMA_RX_MGS_CDR_CALIB0_MUXD2_RX_CDR_DCOCOARSE_OVRDEN_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_CALIB0_MUXD2_RX_CDR_DCOCOARSE_OVRD_MUXD2_BF_OFF (14)
#define PMA_RX_MGS_CDR_CALIB0_MUXD2_RX_CDR_DCOCOARSE_OVRD_MUXD2_BF_WID ( 8)
#define PMA_RX_MGS_CDR_CALIB0_MUXD2_RX_CDR_DCOCOARSE_OVRD_MUXD2_BF_MSK (0x003FC000)
#define PMA_RX_MGS_CDR_CALIB0_MUXD2_RX_CDR_DCOCOARSE_OVRD_MUXD2_BF_DEF (0x001FC000)

#define PMA_RX_MGS_CDR_CALIB0_MUXD2_RX_CDR_BOOSTGAIN_MAXCNT_MUXD2_BF_OFF (22)
#define PMA_RX_MGS_CDR_CALIB0_MUXD2_RX_CDR_BOOSTGAIN_MAXCNT_MUXD2_BF_WID (10)
#define PMA_RX_MGS_CDR_CALIB0_MUXD2_RX_CDR_BOOSTGAIN_MAXCNT_MUXD2_BF_MSK (0xFFC00000)
#define PMA_RX_MGS_CDR_CALIB0_MUXD2_RX_CDR_BOOSTGAIN_MAXCNT_MUXD2_BF_DEF (0x80000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_CALIB0_MUXD3 register description at address offset 0x498
  *
  * Register default value:        0x801FDFD1
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_calib0_muxd3
  * rx_cdr_calib0
  */

typedef union {
  struct {
    uint32_t RX_CDR_COARSE_LOOP_GSCALE_MAX_MUXD3 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t RX_CDR_COARSE_LOOP_GSCALE_MIN_MUXD3 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="4" ResetValue="0xD"
    uint32_t RX_CDR_COARSE_LOOP_GSCALE_CNT_MAX_MUXD3 : 5;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1F"
    uint32_t RX_CDR_DCOCOARSE_OVRDEN_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t RX_CDR_DCOCOARSE_OVRD_MUXD3 : 8;
    ///< ---
    ///< AccessType="RW" BitOffset="14" ResetValue="0x7F"
    uint32_t RX_CDR_BOOSTGAIN_MAXCNT_MUXD3 : 10;
    ///< ---
    ///< AccessType="RW" BitOffset="22" ResetValue="0x200"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_calib0_muxd3_reg_t;

#define PMA_RX_MGS_CDR_CALIB0_MUXD3_DEFAULT (0x801fdfd1U)
#define PMA_RX_MGS_CDR_CALIB0_MUXD3_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_CDR_CALIB0_MUXD3_WR_MASK (0xffffffffU)


#define PMA_RX_MGS_CDR_CALIB0_MUXD3_RX_CDR_COARSE_LOOP_GSCALE_MAX_MUXD3_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_CALIB0_MUXD3_RX_CDR_COARSE_LOOP_GSCALE_MAX_MUXD3_BF_WID ( 4)
#define PMA_RX_MGS_CDR_CALIB0_MUXD3_RX_CDR_COARSE_LOOP_GSCALE_MAX_MUXD3_BF_MSK (0x0000000F)
#define PMA_RX_MGS_CDR_CALIB0_MUXD3_RX_CDR_COARSE_LOOP_GSCALE_MAX_MUXD3_BF_DEF (0x00000001)

#define PMA_RX_MGS_CDR_CALIB0_MUXD3_RX_CDR_COARSE_LOOP_GSCALE_MIN_MUXD3_BF_OFF ( 4)
#define PMA_RX_MGS_CDR_CALIB0_MUXD3_RX_CDR_COARSE_LOOP_GSCALE_MIN_MUXD3_BF_WID ( 4)
#define PMA_RX_MGS_CDR_CALIB0_MUXD3_RX_CDR_COARSE_LOOP_GSCALE_MIN_MUXD3_BF_MSK (0x000000F0)
#define PMA_RX_MGS_CDR_CALIB0_MUXD3_RX_CDR_COARSE_LOOP_GSCALE_MIN_MUXD3_BF_DEF (0x000000D0)

#define PMA_RX_MGS_CDR_CALIB0_MUXD3_RX_CDR_COARSE_LOOP_GSCALE_CNT_MAX_MUXD3_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_CALIB0_MUXD3_RX_CDR_COARSE_LOOP_GSCALE_CNT_MAX_MUXD3_BF_WID ( 5)
#define PMA_RX_MGS_CDR_CALIB0_MUXD3_RX_CDR_COARSE_LOOP_GSCALE_CNT_MAX_MUXD3_BF_MSK (0x00001F00)
#define PMA_RX_MGS_CDR_CALIB0_MUXD3_RX_CDR_COARSE_LOOP_GSCALE_CNT_MAX_MUXD3_BF_DEF (0x00001F00)

#define PMA_RX_MGS_CDR_CALIB0_MUXD3_RX_CDR_DCOCOARSE_OVRDEN_MUXD3_BF_OFF (13)
#define PMA_RX_MGS_CDR_CALIB0_MUXD3_RX_CDR_DCOCOARSE_OVRDEN_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_CALIB0_MUXD3_RX_CDR_DCOCOARSE_OVRDEN_MUXD3_BF_MSK (0x00002000)
#define PMA_RX_MGS_CDR_CALIB0_MUXD3_RX_CDR_DCOCOARSE_OVRDEN_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_CALIB0_MUXD3_RX_CDR_DCOCOARSE_OVRD_MUXD3_BF_OFF (14)
#define PMA_RX_MGS_CDR_CALIB0_MUXD3_RX_CDR_DCOCOARSE_OVRD_MUXD3_BF_WID ( 8)
#define PMA_RX_MGS_CDR_CALIB0_MUXD3_RX_CDR_DCOCOARSE_OVRD_MUXD3_BF_MSK (0x003FC000)
#define PMA_RX_MGS_CDR_CALIB0_MUXD3_RX_CDR_DCOCOARSE_OVRD_MUXD3_BF_DEF (0x001FC000)

#define PMA_RX_MGS_CDR_CALIB0_MUXD3_RX_CDR_BOOSTGAIN_MAXCNT_MUXD3_BF_OFF (22)
#define PMA_RX_MGS_CDR_CALIB0_MUXD3_RX_CDR_BOOSTGAIN_MAXCNT_MUXD3_BF_WID (10)
#define PMA_RX_MGS_CDR_CALIB0_MUXD3_RX_CDR_BOOSTGAIN_MAXCNT_MUXD3_BF_MSK (0xFFC00000)
#define PMA_RX_MGS_CDR_CALIB0_MUXD3_RX_CDR_BOOSTGAIN_MAXCNT_MUXD3_BF_DEF (0x80000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_CALIB0_MUXD4 register description at address offset 0x49c
  *
  * Register default value:        0x801FDFD1
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_calib0_muxd4
  * rx_cdr_calib0
  */

typedef union {
  struct {
    uint32_t RX_CDR_COARSE_LOOP_GSCALE_MAX_MUXD4 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t RX_CDR_COARSE_LOOP_GSCALE_MIN_MUXD4 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="4" ResetValue="0xD"
    uint32_t RX_CDR_COARSE_LOOP_GSCALE_CNT_MAX_MUXD4 : 5;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1F"
    uint32_t RX_CDR_DCOCOARSE_OVRDEN_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t RX_CDR_DCOCOARSE_OVRD_MUXD4 : 8;
    ///< ---
    ///< AccessType="RW" BitOffset="14" ResetValue="0x7F"
    uint32_t RX_CDR_BOOSTGAIN_MAXCNT_MUXD4 : 10;
    ///< ---
    ///< AccessType="RW" BitOffset="22" ResetValue="0x200"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_calib0_muxd4_reg_t;

#define PMA_RX_MGS_CDR_CALIB0_MUXD4_DEFAULT (0x801fdfd1U)
#define PMA_RX_MGS_CDR_CALIB0_MUXD4_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_CDR_CALIB0_MUXD4_WR_MASK (0xffffffffU)


#define PMA_RX_MGS_CDR_CALIB0_MUXD4_RX_CDR_COARSE_LOOP_GSCALE_MAX_MUXD4_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_CALIB0_MUXD4_RX_CDR_COARSE_LOOP_GSCALE_MAX_MUXD4_BF_WID ( 4)
#define PMA_RX_MGS_CDR_CALIB0_MUXD4_RX_CDR_COARSE_LOOP_GSCALE_MAX_MUXD4_BF_MSK (0x0000000F)
#define PMA_RX_MGS_CDR_CALIB0_MUXD4_RX_CDR_COARSE_LOOP_GSCALE_MAX_MUXD4_BF_DEF (0x00000001)

#define PMA_RX_MGS_CDR_CALIB0_MUXD4_RX_CDR_COARSE_LOOP_GSCALE_MIN_MUXD4_BF_OFF ( 4)
#define PMA_RX_MGS_CDR_CALIB0_MUXD4_RX_CDR_COARSE_LOOP_GSCALE_MIN_MUXD4_BF_WID ( 4)
#define PMA_RX_MGS_CDR_CALIB0_MUXD4_RX_CDR_COARSE_LOOP_GSCALE_MIN_MUXD4_BF_MSK (0x000000F0)
#define PMA_RX_MGS_CDR_CALIB0_MUXD4_RX_CDR_COARSE_LOOP_GSCALE_MIN_MUXD4_BF_DEF (0x000000D0)

#define PMA_RX_MGS_CDR_CALIB0_MUXD4_RX_CDR_COARSE_LOOP_GSCALE_CNT_MAX_MUXD4_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_CALIB0_MUXD4_RX_CDR_COARSE_LOOP_GSCALE_CNT_MAX_MUXD4_BF_WID ( 5)
#define PMA_RX_MGS_CDR_CALIB0_MUXD4_RX_CDR_COARSE_LOOP_GSCALE_CNT_MAX_MUXD4_BF_MSK (0x00001F00)
#define PMA_RX_MGS_CDR_CALIB0_MUXD4_RX_CDR_COARSE_LOOP_GSCALE_CNT_MAX_MUXD4_BF_DEF (0x00001F00)

#define PMA_RX_MGS_CDR_CALIB0_MUXD4_RX_CDR_DCOCOARSE_OVRDEN_MUXD4_BF_OFF (13)
#define PMA_RX_MGS_CDR_CALIB0_MUXD4_RX_CDR_DCOCOARSE_OVRDEN_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_CALIB0_MUXD4_RX_CDR_DCOCOARSE_OVRDEN_MUXD4_BF_MSK (0x00002000)
#define PMA_RX_MGS_CDR_CALIB0_MUXD4_RX_CDR_DCOCOARSE_OVRDEN_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_CALIB0_MUXD4_RX_CDR_DCOCOARSE_OVRD_MUXD4_BF_OFF (14)
#define PMA_RX_MGS_CDR_CALIB0_MUXD4_RX_CDR_DCOCOARSE_OVRD_MUXD4_BF_WID ( 8)
#define PMA_RX_MGS_CDR_CALIB0_MUXD4_RX_CDR_DCOCOARSE_OVRD_MUXD4_BF_MSK (0x003FC000)
#define PMA_RX_MGS_CDR_CALIB0_MUXD4_RX_CDR_DCOCOARSE_OVRD_MUXD4_BF_DEF (0x001FC000)

#define PMA_RX_MGS_CDR_CALIB0_MUXD4_RX_CDR_BOOSTGAIN_MAXCNT_MUXD4_BF_OFF (22)
#define PMA_RX_MGS_CDR_CALIB0_MUXD4_RX_CDR_BOOSTGAIN_MAXCNT_MUXD4_BF_WID (10)
#define PMA_RX_MGS_CDR_CALIB0_MUXD4_RX_CDR_BOOSTGAIN_MAXCNT_MUXD4_BF_MSK (0xFFC00000)
#define PMA_RX_MGS_CDR_CALIB0_MUXD4_RX_CDR_BOOSTGAIN_MAXCNT_MUXD4_BF_DEF (0x80000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_CALIB1_MUXD0 register description at address offset 0x4a0
  *
  * Register default value:        0x1A8210C7
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_calib1_muxd0
  * rx_cdr_calib1
  */

typedef union {
  struct {
    uint32_t RX_CDR_FILTER_BOOSTFADE_FINE_EN_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t RX_CDR_FINE_PROP_COEFF_BOOST_VAL_MUXD0 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x3"
    uint32_t RX_CDR_FINE_INT_COEFF_BOOST_VAL_MUXD0 : 5;
    ///< ---
    ///< AccessType="RW" BitOffset="5" ResetValue="0x6"
    uint32_t RX_CDR_BOOST_FINE_CONST_ZETA_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
    uint32_t RX_CDR_FINE_PROP_COEFF_BOOST_STEP_MUXD0 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="12" ResetValue="0x1"
    uint32_t RX_CDR_FINE_INT_COEFF_BOOST_STEP_MUXD0 : 5;
    ///< ---
    ///< AccessType="RW" BitOffset="16" ResetValue="0x2"
    uint32_t RX_CDR_FINE_PROP_COEFF_MUXD0 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="21" ResetValue="0x4"
    uint32_t RX_CDR_FINE_INT_COEFF_MUXD0 : 5;
    ///< ---
    ///< AccessType="RW" BitOffset="25" ResetValue="0xD"
    uint32_t RX_CDR_FINE_PROP_DISABLE_MUXD0 : 1;
    ///< Turn off the PI proportional
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t RX_CDR_FINE_PROP_L2R_ONLY_MUXD0 : 1;
    ///< Use proportional in L2R mode only
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_calib1_muxd0_reg_t;

#define PMA_RX_MGS_CDR_CALIB1_MUXD0_DEFAULT (0x1a8210c7U)
#define PMA_RX_MGS_CDR_CALIB1_MUXD0_RD_MASK (0xfffff7ffU)
#define PMA_RX_MGS_CDR_CALIB1_MUXD0_WR_MASK (0xfffff7ffU)


#define PMA_RX_MGS_CDR_CALIB1_MUXD0_RX_CDR_FILTER_BOOSTFADE_FINE_EN_MUXD0_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_CALIB1_MUXD0_RX_CDR_FILTER_BOOSTFADE_FINE_EN_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_CALIB1_MUXD0_RX_CDR_FILTER_BOOSTFADE_FINE_EN_MUXD0_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_CALIB1_MUXD0_RX_CDR_FILTER_BOOSTFADE_FINE_EN_MUXD0_BF_DEF (0x00000001)

#define PMA_RX_MGS_CDR_CALIB1_MUXD0_RX_CDR_FINE_PROP_COEFF_BOOST_VAL_MUXD0_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_CALIB1_MUXD0_RX_CDR_FINE_PROP_COEFF_BOOST_VAL_MUXD0_BF_WID ( 4)
#define PMA_RX_MGS_CDR_CALIB1_MUXD0_RX_CDR_FINE_PROP_COEFF_BOOST_VAL_MUXD0_BF_MSK (0x0000001E)
#define PMA_RX_MGS_CDR_CALIB1_MUXD0_RX_CDR_FINE_PROP_COEFF_BOOST_VAL_MUXD0_BF_DEF (0x00000006)

#define PMA_RX_MGS_CDR_CALIB1_MUXD0_RX_CDR_FINE_INT_COEFF_BOOST_VAL_MUXD0_BF_OFF ( 5)
#define PMA_RX_MGS_CDR_CALIB1_MUXD0_RX_CDR_FINE_INT_COEFF_BOOST_VAL_MUXD0_BF_WID ( 5)
#define PMA_RX_MGS_CDR_CALIB1_MUXD0_RX_CDR_FINE_INT_COEFF_BOOST_VAL_MUXD0_BF_MSK (0x000003E0)
#define PMA_RX_MGS_CDR_CALIB1_MUXD0_RX_CDR_FINE_INT_COEFF_BOOST_VAL_MUXD0_BF_DEF (0x000000C0)

#define PMA_RX_MGS_CDR_CALIB1_MUXD0_RX_CDR_BOOST_FINE_CONST_ZETA_MUXD0_BF_OFF (10)
#define PMA_RX_MGS_CDR_CALIB1_MUXD0_RX_CDR_BOOST_FINE_CONST_ZETA_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_CALIB1_MUXD0_RX_CDR_BOOST_FINE_CONST_ZETA_MUXD0_BF_MSK (0x00000400)
#define PMA_RX_MGS_CDR_CALIB1_MUXD0_RX_CDR_BOOST_FINE_CONST_ZETA_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_CALIB1_MUXD0_RX_CDR_FINE_PROP_COEFF_BOOST_STEP_MUXD0_BF_OFF (12)
#define PMA_RX_MGS_CDR_CALIB1_MUXD0_RX_CDR_FINE_PROP_COEFF_BOOST_STEP_MUXD0_BF_WID ( 4)
#define PMA_RX_MGS_CDR_CALIB1_MUXD0_RX_CDR_FINE_PROP_COEFF_BOOST_STEP_MUXD0_BF_MSK (0x0000F000)
#define PMA_RX_MGS_CDR_CALIB1_MUXD0_RX_CDR_FINE_PROP_COEFF_BOOST_STEP_MUXD0_BF_DEF (0x00001000)

#define PMA_RX_MGS_CDR_CALIB1_MUXD0_RX_CDR_FINE_INT_COEFF_BOOST_STEP_MUXD0_BF_OFF (16)
#define PMA_RX_MGS_CDR_CALIB1_MUXD0_RX_CDR_FINE_INT_COEFF_BOOST_STEP_MUXD0_BF_WID ( 5)
#define PMA_RX_MGS_CDR_CALIB1_MUXD0_RX_CDR_FINE_INT_COEFF_BOOST_STEP_MUXD0_BF_MSK (0x001F0000)
#define PMA_RX_MGS_CDR_CALIB1_MUXD0_RX_CDR_FINE_INT_COEFF_BOOST_STEP_MUXD0_BF_DEF (0x00020000)

#define PMA_RX_MGS_CDR_CALIB1_MUXD0_RX_CDR_FINE_PROP_COEFF_MUXD0_BF_OFF (21)
#define PMA_RX_MGS_CDR_CALIB1_MUXD0_RX_CDR_FINE_PROP_COEFF_MUXD0_BF_WID ( 4)
#define PMA_RX_MGS_CDR_CALIB1_MUXD0_RX_CDR_FINE_PROP_COEFF_MUXD0_BF_MSK (0x01E00000)
#define PMA_RX_MGS_CDR_CALIB1_MUXD0_RX_CDR_FINE_PROP_COEFF_MUXD0_BF_DEF (0x00800000)

#define PMA_RX_MGS_CDR_CALIB1_MUXD0_RX_CDR_FINE_INT_COEFF_MUXD0_BF_OFF (25)
#define PMA_RX_MGS_CDR_CALIB1_MUXD0_RX_CDR_FINE_INT_COEFF_MUXD0_BF_WID ( 5)
#define PMA_RX_MGS_CDR_CALIB1_MUXD0_RX_CDR_FINE_INT_COEFF_MUXD0_BF_MSK (0x3E000000)
#define PMA_RX_MGS_CDR_CALIB1_MUXD0_RX_CDR_FINE_INT_COEFF_MUXD0_BF_DEF (0x1A000000)

///< Turn off the PI proportional
#define PMA_RX_MGS_CDR_CALIB1_MUXD0_RX_CDR_FINE_PROP_DIS_MUXD0_BF_OFF (30)
#define PMA_RX_MGS_CDR_CALIB1_MUXD0_RX_CDR_FINE_PROP_DIS_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_CALIB1_MUXD0_RX_CDR_FINE_PROP_DIS_MUXD0_BF_MSK (0x40000000)
#define PMA_RX_MGS_CDR_CALIB1_MUXD0_RX_CDR_FINE_PROP_DIS_MUXD0_BF_DEF (0x00000000)

///< Use proportional in L2R mode only
#define PMA_RX_MGS_CDR_CALIB1_MUXD0_RX_CDR_FINE_PROP_L2R_ONLY_MUXD0_BF_OFF (31)
#define PMA_RX_MGS_CDR_CALIB1_MUXD0_RX_CDR_FINE_PROP_L2R_ONLY_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_CALIB1_MUXD0_RX_CDR_FINE_PROP_L2R_ONLY_MUXD0_BF_MSK (0x80000000)
#define PMA_RX_MGS_CDR_CALIB1_MUXD0_RX_CDR_FINE_PROP_L2R_ONLY_MUXD0_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_CALIB1_MUXD1 register description at address offset 0x4a4
  *
  * Register default value:        0x1A8210C7
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_calib1_muxd1
  * rx_cdr_calib1
  */

typedef union {
  struct {
    uint32_t RX_CDR_FILTER_BOOSTFADE_FINE_EN_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t RX_CDR_FINE_PROP_COEFF_BOOST_VAL_MUXD1 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x3"
    uint32_t RX_CDR_FINE_INT_COEFF_BOOST_VAL_MUXD1 : 5;
    ///< ---
    ///< AccessType="RW" BitOffset="5" ResetValue="0x6"
    uint32_t RX_CDR_BOOST_FINE_CONST_ZETA_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
    uint32_t RX_CDR_FINE_PROP_COEFF_BOOST_STEP_MUXD1 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="12" ResetValue="0x1"
    uint32_t RX_CDR_FINE_INT_COEFF_BOOST_STEP_MUXD1 : 5;
    ///< ---
    ///< AccessType="RW" BitOffset="16" ResetValue="0x2"
    uint32_t RX_CDR_FINE_PROP_COEFF_MUXD1 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="21" ResetValue="0x4"
    uint32_t RX_CDR_FINE_INT_COEFF_MUXD1 : 5;
    ///< ---
    ///< AccessType="RW" BitOffset="25" ResetValue="0xD"
    uint32_t RX_CDR_FINE_PROP_DISABLE_MUXD1 : 1;
    ///< Turn off the PI proportional
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t RX_CDR_FINE_PROP_L2R_ONLY_MUXD1 : 1;
    ///< Use proportional in L2R mode only
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_calib1_muxd1_reg_t;

#define PMA_RX_MGS_CDR_CALIB1_MUXD1_DEFAULT (0x1a8210c7U)
#define PMA_RX_MGS_CDR_CALIB1_MUXD1_RD_MASK (0xfffff7ffU)
#define PMA_RX_MGS_CDR_CALIB1_MUXD1_WR_MASK (0xfffff7ffU)


#define PMA_RX_MGS_CDR_CALIB1_MUXD1_RX_CDR_FILTER_BOOSTFADE_FINE_EN_MUXD1_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_CALIB1_MUXD1_RX_CDR_FILTER_BOOSTFADE_FINE_EN_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_CALIB1_MUXD1_RX_CDR_FILTER_BOOSTFADE_FINE_EN_MUXD1_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_CALIB1_MUXD1_RX_CDR_FILTER_BOOSTFADE_FINE_EN_MUXD1_BF_DEF (0x00000001)

#define PMA_RX_MGS_CDR_CALIB1_MUXD1_RX_CDR_FINE_PROP_COEFF_BOOST_VAL_MUXD1_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_CALIB1_MUXD1_RX_CDR_FINE_PROP_COEFF_BOOST_VAL_MUXD1_BF_WID ( 4)
#define PMA_RX_MGS_CDR_CALIB1_MUXD1_RX_CDR_FINE_PROP_COEFF_BOOST_VAL_MUXD1_BF_MSK (0x0000001E)
#define PMA_RX_MGS_CDR_CALIB1_MUXD1_RX_CDR_FINE_PROP_COEFF_BOOST_VAL_MUXD1_BF_DEF (0x00000006)

#define PMA_RX_MGS_CDR_CALIB1_MUXD1_RX_CDR_FINE_INT_COEFF_BOOST_VAL_MUXD1_BF_OFF ( 5)
#define PMA_RX_MGS_CDR_CALIB1_MUXD1_RX_CDR_FINE_INT_COEFF_BOOST_VAL_MUXD1_BF_WID ( 5)
#define PMA_RX_MGS_CDR_CALIB1_MUXD1_RX_CDR_FINE_INT_COEFF_BOOST_VAL_MUXD1_BF_MSK (0x000003E0)
#define PMA_RX_MGS_CDR_CALIB1_MUXD1_RX_CDR_FINE_INT_COEFF_BOOST_VAL_MUXD1_BF_DEF (0x000000C0)

#define PMA_RX_MGS_CDR_CALIB1_MUXD1_RX_CDR_BOOST_FINE_CONST_ZETA_MUXD1_BF_OFF (10)
#define PMA_RX_MGS_CDR_CALIB1_MUXD1_RX_CDR_BOOST_FINE_CONST_ZETA_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_CALIB1_MUXD1_RX_CDR_BOOST_FINE_CONST_ZETA_MUXD1_BF_MSK (0x00000400)
#define PMA_RX_MGS_CDR_CALIB1_MUXD1_RX_CDR_BOOST_FINE_CONST_ZETA_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_CALIB1_MUXD1_RX_CDR_FINE_PROP_COEFF_BOOST_STEP_MUXD1_BF_OFF (12)
#define PMA_RX_MGS_CDR_CALIB1_MUXD1_RX_CDR_FINE_PROP_COEFF_BOOST_STEP_MUXD1_BF_WID ( 4)
#define PMA_RX_MGS_CDR_CALIB1_MUXD1_RX_CDR_FINE_PROP_COEFF_BOOST_STEP_MUXD1_BF_MSK (0x0000F000)
#define PMA_RX_MGS_CDR_CALIB1_MUXD1_RX_CDR_FINE_PROP_COEFF_BOOST_STEP_MUXD1_BF_DEF (0x00001000)

#define PMA_RX_MGS_CDR_CALIB1_MUXD1_RX_CDR_FINE_INT_COEFF_BOOST_STEP_MUXD1_BF_OFF (16)
#define PMA_RX_MGS_CDR_CALIB1_MUXD1_RX_CDR_FINE_INT_COEFF_BOOST_STEP_MUXD1_BF_WID ( 5)
#define PMA_RX_MGS_CDR_CALIB1_MUXD1_RX_CDR_FINE_INT_COEFF_BOOST_STEP_MUXD1_BF_MSK (0x001F0000)
#define PMA_RX_MGS_CDR_CALIB1_MUXD1_RX_CDR_FINE_INT_COEFF_BOOST_STEP_MUXD1_BF_DEF (0x00020000)

#define PMA_RX_MGS_CDR_CALIB1_MUXD1_RX_CDR_FINE_PROP_COEFF_MUXD1_BF_OFF (21)
#define PMA_RX_MGS_CDR_CALIB1_MUXD1_RX_CDR_FINE_PROP_COEFF_MUXD1_BF_WID ( 4)
#define PMA_RX_MGS_CDR_CALIB1_MUXD1_RX_CDR_FINE_PROP_COEFF_MUXD1_BF_MSK (0x01E00000)
#define PMA_RX_MGS_CDR_CALIB1_MUXD1_RX_CDR_FINE_PROP_COEFF_MUXD1_BF_DEF (0x00800000)

#define PMA_RX_MGS_CDR_CALIB1_MUXD1_RX_CDR_FINE_INT_COEFF_MUXD1_BF_OFF (25)
#define PMA_RX_MGS_CDR_CALIB1_MUXD1_RX_CDR_FINE_INT_COEFF_MUXD1_BF_WID ( 5)
#define PMA_RX_MGS_CDR_CALIB1_MUXD1_RX_CDR_FINE_INT_COEFF_MUXD1_BF_MSK (0x3E000000)
#define PMA_RX_MGS_CDR_CALIB1_MUXD1_RX_CDR_FINE_INT_COEFF_MUXD1_BF_DEF (0x1A000000)

///< Turn off the PI proportional
#define PMA_RX_MGS_CDR_CALIB1_MUXD1_RX_CDR_FINE_PROP_DIS_MUXD1_BF_OFF (30)
#define PMA_RX_MGS_CDR_CALIB1_MUXD1_RX_CDR_FINE_PROP_DIS_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_CALIB1_MUXD1_RX_CDR_FINE_PROP_DIS_MUXD1_BF_MSK (0x40000000)
#define PMA_RX_MGS_CDR_CALIB1_MUXD1_RX_CDR_FINE_PROP_DIS_MUXD1_BF_DEF (0x00000000)

///< Use proportional in L2R mode only
#define PMA_RX_MGS_CDR_CALIB1_MUXD1_RX_CDR_FINE_PROP_L2R_ONLY_MUXD1_BF_OFF (31)
#define PMA_RX_MGS_CDR_CALIB1_MUXD1_RX_CDR_FINE_PROP_L2R_ONLY_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_CALIB1_MUXD1_RX_CDR_FINE_PROP_L2R_ONLY_MUXD1_BF_MSK (0x80000000)
#define PMA_RX_MGS_CDR_CALIB1_MUXD1_RX_CDR_FINE_PROP_L2R_ONLY_MUXD1_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_CALIB1_MUXD2 register description at address offset 0x4a8
  *
  * Register default value:        0x1A8210C7
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_calib1_muxd2
  * rx_cdr_calib1
  */

typedef union {
  struct {
    uint32_t RX_CDR_FILTER_BOOSTFADE_FINE_EN_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t RX_CDR_FINE_PROP_COEFF_BOOST_VAL_MUXD2 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x3"
    uint32_t RX_CDR_FINE_INT_COEFF_BOOST_VAL_MUXD2 : 5;
    ///< ---
    ///< AccessType="RW" BitOffset="5" ResetValue="0x6"
    uint32_t RX_CDR_BOOST_FINE_CONST_ZETA_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
    uint32_t RX_CDR_FINE_PROP_COEFF_BOOST_STEP_MUXD2 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="12" ResetValue="0x1"
    uint32_t RX_CDR_FINE_INT_COEFF_BOOST_STEP_MUXD2 : 5;
    ///< ---
    ///< AccessType="RW" BitOffset="16" ResetValue="0x2"
    uint32_t RX_CDR_FINE_PROP_COEFF_MUXD2 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="21" ResetValue="0x4"
    uint32_t RX_CDR_FINE_INT_COEFF_MUXD2 : 5;
    ///< ---
    ///< AccessType="RW" BitOffset="25" ResetValue="0xD"
    uint32_t RX_CDR_FINE_PROP_DISABLE_MUXD2 : 1;
    ///< Turn off the PI proportional
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t RX_CDR_FINE_PROP_L2R_ONLY_MUXD2 : 1;
    ///< Use proportional in L2R mode only
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_calib1_muxd2_reg_t;

#define PMA_RX_MGS_CDR_CALIB1_MUXD2_DEFAULT (0x1a8210c7U)
#define PMA_RX_MGS_CDR_CALIB1_MUXD2_RD_MASK (0xfffff7ffU)
#define PMA_RX_MGS_CDR_CALIB1_MUXD2_WR_MASK (0xfffff7ffU)


#define PMA_RX_MGS_CDR_CALIB1_MUXD2_RX_CDR_FILTER_BOOSTFADE_FINE_EN_MUXD2_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_CALIB1_MUXD2_RX_CDR_FILTER_BOOSTFADE_FINE_EN_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_CALIB1_MUXD2_RX_CDR_FILTER_BOOSTFADE_FINE_EN_MUXD2_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_CALIB1_MUXD2_RX_CDR_FILTER_BOOSTFADE_FINE_EN_MUXD2_BF_DEF (0x00000001)

#define PMA_RX_MGS_CDR_CALIB1_MUXD2_RX_CDR_FINE_PROP_COEFF_BOOST_VAL_MUXD2_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_CALIB1_MUXD2_RX_CDR_FINE_PROP_COEFF_BOOST_VAL_MUXD2_BF_WID ( 4)
#define PMA_RX_MGS_CDR_CALIB1_MUXD2_RX_CDR_FINE_PROP_COEFF_BOOST_VAL_MUXD2_BF_MSK (0x0000001E)
#define PMA_RX_MGS_CDR_CALIB1_MUXD2_RX_CDR_FINE_PROP_COEFF_BOOST_VAL_MUXD2_BF_DEF (0x00000006)

#define PMA_RX_MGS_CDR_CALIB1_MUXD2_RX_CDR_FINE_INT_COEFF_BOOST_VAL_MUXD2_BF_OFF ( 5)
#define PMA_RX_MGS_CDR_CALIB1_MUXD2_RX_CDR_FINE_INT_COEFF_BOOST_VAL_MUXD2_BF_WID ( 5)
#define PMA_RX_MGS_CDR_CALIB1_MUXD2_RX_CDR_FINE_INT_COEFF_BOOST_VAL_MUXD2_BF_MSK (0x000003E0)
#define PMA_RX_MGS_CDR_CALIB1_MUXD2_RX_CDR_FINE_INT_COEFF_BOOST_VAL_MUXD2_BF_DEF (0x000000C0)

#define PMA_RX_MGS_CDR_CALIB1_MUXD2_RX_CDR_BOOST_FINE_CONST_ZETA_MUXD2_BF_OFF (10)
#define PMA_RX_MGS_CDR_CALIB1_MUXD2_RX_CDR_BOOST_FINE_CONST_ZETA_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_CALIB1_MUXD2_RX_CDR_BOOST_FINE_CONST_ZETA_MUXD2_BF_MSK (0x00000400)
#define PMA_RX_MGS_CDR_CALIB1_MUXD2_RX_CDR_BOOST_FINE_CONST_ZETA_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_CALIB1_MUXD2_RX_CDR_FINE_PROP_COEFF_BOOST_STEP_MUXD2_BF_OFF (12)
#define PMA_RX_MGS_CDR_CALIB1_MUXD2_RX_CDR_FINE_PROP_COEFF_BOOST_STEP_MUXD2_BF_WID ( 4)
#define PMA_RX_MGS_CDR_CALIB1_MUXD2_RX_CDR_FINE_PROP_COEFF_BOOST_STEP_MUXD2_BF_MSK (0x0000F000)
#define PMA_RX_MGS_CDR_CALIB1_MUXD2_RX_CDR_FINE_PROP_COEFF_BOOST_STEP_MUXD2_BF_DEF (0x00001000)

#define PMA_RX_MGS_CDR_CALIB1_MUXD2_RX_CDR_FINE_INT_COEFF_BOOST_STEP_MUXD2_BF_OFF (16)
#define PMA_RX_MGS_CDR_CALIB1_MUXD2_RX_CDR_FINE_INT_COEFF_BOOST_STEP_MUXD2_BF_WID ( 5)
#define PMA_RX_MGS_CDR_CALIB1_MUXD2_RX_CDR_FINE_INT_COEFF_BOOST_STEP_MUXD2_BF_MSK (0x001F0000)
#define PMA_RX_MGS_CDR_CALIB1_MUXD2_RX_CDR_FINE_INT_COEFF_BOOST_STEP_MUXD2_BF_DEF (0x00020000)

#define PMA_RX_MGS_CDR_CALIB1_MUXD2_RX_CDR_FINE_PROP_COEFF_MUXD2_BF_OFF (21)
#define PMA_RX_MGS_CDR_CALIB1_MUXD2_RX_CDR_FINE_PROP_COEFF_MUXD2_BF_WID ( 4)
#define PMA_RX_MGS_CDR_CALIB1_MUXD2_RX_CDR_FINE_PROP_COEFF_MUXD2_BF_MSK (0x01E00000)
#define PMA_RX_MGS_CDR_CALIB1_MUXD2_RX_CDR_FINE_PROP_COEFF_MUXD2_BF_DEF (0x00800000)

#define PMA_RX_MGS_CDR_CALIB1_MUXD2_RX_CDR_FINE_INT_COEFF_MUXD2_BF_OFF (25)
#define PMA_RX_MGS_CDR_CALIB1_MUXD2_RX_CDR_FINE_INT_COEFF_MUXD2_BF_WID ( 5)
#define PMA_RX_MGS_CDR_CALIB1_MUXD2_RX_CDR_FINE_INT_COEFF_MUXD2_BF_MSK (0x3E000000)
#define PMA_RX_MGS_CDR_CALIB1_MUXD2_RX_CDR_FINE_INT_COEFF_MUXD2_BF_DEF (0x1A000000)

///< Turn off the PI proportional
#define PMA_RX_MGS_CDR_CALIB1_MUXD2_RX_CDR_FINE_PROP_DIS_MUXD2_BF_OFF (30)
#define PMA_RX_MGS_CDR_CALIB1_MUXD2_RX_CDR_FINE_PROP_DIS_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_CALIB1_MUXD2_RX_CDR_FINE_PROP_DIS_MUXD2_BF_MSK (0x40000000)
#define PMA_RX_MGS_CDR_CALIB1_MUXD2_RX_CDR_FINE_PROP_DIS_MUXD2_BF_DEF (0x00000000)

///< Use proportional in L2R mode only
#define PMA_RX_MGS_CDR_CALIB1_MUXD2_RX_CDR_FINE_PROP_L2R_ONLY_MUXD2_BF_OFF (31)
#define PMA_RX_MGS_CDR_CALIB1_MUXD2_RX_CDR_FINE_PROP_L2R_ONLY_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_CALIB1_MUXD2_RX_CDR_FINE_PROP_L2R_ONLY_MUXD2_BF_MSK (0x80000000)
#define PMA_RX_MGS_CDR_CALIB1_MUXD2_RX_CDR_FINE_PROP_L2R_ONLY_MUXD2_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_CALIB1_MUXD3 register description at address offset 0x4ac
  *
  * Register default value:        0x1A8210C7
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_calib1_muxd3
  * rx_cdr_calib1
  */

typedef union {
  struct {
    uint32_t RX_CDR_FILTER_BOOSTFADE_FINE_EN_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t RX_CDR_FINE_PROP_COEFF_BOOST_VAL_MUXD3 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x3"
    uint32_t RX_CDR_FINE_INT_COEFF_BOOST_VAL_MUXD3 : 5;
    ///< ---
    ///< AccessType="RW" BitOffset="5" ResetValue="0x6"
    uint32_t RX_CDR_BOOST_FINE_CONST_ZETA_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
    uint32_t RX_CDR_FINE_PROP_COEFF_BOOST_STEP_MUXD3 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="12" ResetValue="0x1"
    uint32_t RX_CDR_FINE_INT_COEFF_BOOST_STEP_MUXD3 : 5;
    ///< ---
    ///< AccessType="RW" BitOffset="16" ResetValue="0x2"
    uint32_t RX_CDR_FINE_PROP_COEFF_MUXD3 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="21" ResetValue="0x4"
    uint32_t RX_CDR_FINE_INT_COEFF_MUXD3 : 5;
    ///< ---
    ///< AccessType="RW" BitOffset="25" ResetValue="0xD"
    uint32_t RX_CDR_FINE_PROP_DISABLE_MUXD3 : 1;
    ///< Turn off the PI proportional
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t RX_CDR_FINE_PROP_L2R_ONLY_MUXD3 : 1;
    ///< Use proportional in L2R mode only
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_calib1_muxd3_reg_t;

#define PMA_RX_MGS_CDR_CALIB1_MUXD3_DEFAULT (0x1a8210c7U)
#define PMA_RX_MGS_CDR_CALIB1_MUXD3_RD_MASK (0xfffff7ffU)
#define PMA_RX_MGS_CDR_CALIB1_MUXD3_WR_MASK (0xfffff7ffU)


#define PMA_RX_MGS_CDR_CALIB1_MUXD3_RX_CDR_FILTER_BOOSTFADE_FINE_EN_MUXD3_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_CALIB1_MUXD3_RX_CDR_FILTER_BOOSTFADE_FINE_EN_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_CALIB1_MUXD3_RX_CDR_FILTER_BOOSTFADE_FINE_EN_MUXD3_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_CALIB1_MUXD3_RX_CDR_FILTER_BOOSTFADE_FINE_EN_MUXD3_BF_DEF (0x00000001)

#define PMA_RX_MGS_CDR_CALIB1_MUXD3_RX_CDR_FINE_PROP_COEFF_BOOST_VAL_MUXD3_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_CALIB1_MUXD3_RX_CDR_FINE_PROP_COEFF_BOOST_VAL_MUXD3_BF_WID ( 4)
#define PMA_RX_MGS_CDR_CALIB1_MUXD3_RX_CDR_FINE_PROP_COEFF_BOOST_VAL_MUXD3_BF_MSK (0x0000001E)
#define PMA_RX_MGS_CDR_CALIB1_MUXD3_RX_CDR_FINE_PROP_COEFF_BOOST_VAL_MUXD3_BF_DEF (0x00000006)

#define PMA_RX_MGS_CDR_CALIB1_MUXD3_RX_CDR_FINE_INT_COEFF_BOOST_VAL_MUXD3_BF_OFF ( 5)
#define PMA_RX_MGS_CDR_CALIB1_MUXD3_RX_CDR_FINE_INT_COEFF_BOOST_VAL_MUXD3_BF_WID ( 5)
#define PMA_RX_MGS_CDR_CALIB1_MUXD3_RX_CDR_FINE_INT_COEFF_BOOST_VAL_MUXD3_BF_MSK (0x000003E0)
#define PMA_RX_MGS_CDR_CALIB1_MUXD3_RX_CDR_FINE_INT_COEFF_BOOST_VAL_MUXD3_BF_DEF (0x000000C0)

#define PMA_RX_MGS_CDR_CALIB1_MUXD3_RX_CDR_BOOST_FINE_CONST_ZETA_MUXD3_BF_OFF (10)
#define PMA_RX_MGS_CDR_CALIB1_MUXD3_RX_CDR_BOOST_FINE_CONST_ZETA_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_CALIB1_MUXD3_RX_CDR_BOOST_FINE_CONST_ZETA_MUXD3_BF_MSK (0x00000400)
#define PMA_RX_MGS_CDR_CALIB1_MUXD3_RX_CDR_BOOST_FINE_CONST_ZETA_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_CALIB1_MUXD3_RX_CDR_FINE_PROP_COEFF_BOOST_STEP_MUXD3_BF_OFF (12)
#define PMA_RX_MGS_CDR_CALIB1_MUXD3_RX_CDR_FINE_PROP_COEFF_BOOST_STEP_MUXD3_BF_WID ( 4)
#define PMA_RX_MGS_CDR_CALIB1_MUXD3_RX_CDR_FINE_PROP_COEFF_BOOST_STEP_MUXD3_BF_MSK (0x0000F000)
#define PMA_RX_MGS_CDR_CALIB1_MUXD3_RX_CDR_FINE_PROP_COEFF_BOOST_STEP_MUXD3_BF_DEF (0x00001000)

#define PMA_RX_MGS_CDR_CALIB1_MUXD3_RX_CDR_FINE_INT_COEFF_BOOST_STEP_MUXD3_BF_OFF (16)
#define PMA_RX_MGS_CDR_CALIB1_MUXD3_RX_CDR_FINE_INT_COEFF_BOOST_STEP_MUXD3_BF_WID ( 5)
#define PMA_RX_MGS_CDR_CALIB1_MUXD3_RX_CDR_FINE_INT_COEFF_BOOST_STEP_MUXD3_BF_MSK (0x001F0000)
#define PMA_RX_MGS_CDR_CALIB1_MUXD3_RX_CDR_FINE_INT_COEFF_BOOST_STEP_MUXD3_BF_DEF (0x00020000)

#define PMA_RX_MGS_CDR_CALIB1_MUXD3_RX_CDR_FINE_PROP_COEFF_MUXD3_BF_OFF (21)
#define PMA_RX_MGS_CDR_CALIB1_MUXD3_RX_CDR_FINE_PROP_COEFF_MUXD3_BF_WID ( 4)
#define PMA_RX_MGS_CDR_CALIB1_MUXD3_RX_CDR_FINE_PROP_COEFF_MUXD3_BF_MSK (0x01E00000)
#define PMA_RX_MGS_CDR_CALIB1_MUXD3_RX_CDR_FINE_PROP_COEFF_MUXD3_BF_DEF (0x00800000)

#define PMA_RX_MGS_CDR_CALIB1_MUXD3_RX_CDR_FINE_INT_COEFF_MUXD3_BF_OFF (25)
#define PMA_RX_MGS_CDR_CALIB1_MUXD3_RX_CDR_FINE_INT_COEFF_MUXD3_BF_WID ( 5)
#define PMA_RX_MGS_CDR_CALIB1_MUXD3_RX_CDR_FINE_INT_COEFF_MUXD3_BF_MSK (0x3E000000)
#define PMA_RX_MGS_CDR_CALIB1_MUXD3_RX_CDR_FINE_INT_COEFF_MUXD3_BF_DEF (0x1A000000)

///< Turn off the PI proportional
#define PMA_RX_MGS_CDR_CALIB1_MUXD3_RX_CDR_FINE_PROP_DIS_MUXD3_BF_OFF (30)
#define PMA_RX_MGS_CDR_CALIB1_MUXD3_RX_CDR_FINE_PROP_DIS_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_CALIB1_MUXD3_RX_CDR_FINE_PROP_DIS_MUXD3_BF_MSK (0x40000000)
#define PMA_RX_MGS_CDR_CALIB1_MUXD3_RX_CDR_FINE_PROP_DIS_MUXD3_BF_DEF (0x00000000)

///< Use proportional in L2R mode only
#define PMA_RX_MGS_CDR_CALIB1_MUXD3_RX_CDR_FINE_PROP_L2R_ONLY_MUXD3_BF_OFF (31)
#define PMA_RX_MGS_CDR_CALIB1_MUXD3_RX_CDR_FINE_PROP_L2R_ONLY_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_CALIB1_MUXD3_RX_CDR_FINE_PROP_L2R_ONLY_MUXD3_BF_MSK (0x80000000)
#define PMA_RX_MGS_CDR_CALIB1_MUXD3_RX_CDR_FINE_PROP_L2R_ONLY_MUXD3_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_CALIB1_MUXD4 register description at address offset 0x4b0
  *
  * Register default value:        0x1A8210C7
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_calib1_muxd4
  * rx_cdr_calib1
  */

typedef union {
  struct {
    uint32_t RX_CDR_FILTER_BOOSTFADE_FINE_EN_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t RX_CDR_FINE_PROP_COEFF_BOOST_VAL_MUXD4 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x3"
    uint32_t RX_CDR_FINE_INT_COEFF_BOOST_VAL_MUXD4 : 5;
    ///< ---
    ///< AccessType="RW" BitOffset="5" ResetValue="0x6"
    uint32_t RX_CDR_BOOST_FINE_CONST_ZETA_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
    uint32_t RX_CDR_FINE_PROP_COEFF_BOOST_STEP_MUXD4 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="12" ResetValue="0x1"
    uint32_t RX_CDR_FINE_INT_COEFF_BOOST_STEP_MUXD4 : 5;
    ///< ---
    ///< AccessType="RW" BitOffset="16" ResetValue="0x2"
    uint32_t RX_CDR_FINE_PROP_COEFF_MUXD4 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="21" ResetValue="0x4"
    uint32_t RX_CDR_FINE_INT_COEFF_MUXD4 : 5;
    ///< ---
    ///< AccessType="RW" BitOffset="25" ResetValue="0xD"
    uint32_t RX_CDR_FINE_PROP_DISABLE_MUXD4 : 1;
    ///< Turn off the PI proportional
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t RX_CDR_FINE_PROP_L2R_ONLY_MUXD4 : 1;
    ///< Use proportional in L2R mode only
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_calib1_muxd4_reg_t;

#define PMA_RX_MGS_CDR_CALIB1_MUXD4_DEFAULT (0x1a8210c7U)
#define PMA_RX_MGS_CDR_CALIB1_MUXD4_RD_MASK (0xfffff7ffU)
#define PMA_RX_MGS_CDR_CALIB1_MUXD4_WR_MASK (0xfffff7ffU)


#define PMA_RX_MGS_CDR_CALIB1_MUXD4_RX_CDR_FILTER_BOOSTFADE_FINE_EN_MUXD4_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_CALIB1_MUXD4_RX_CDR_FILTER_BOOSTFADE_FINE_EN_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_CALIB1_MUXD4_RX_CDR_FILTER_BOOSTFADE_FINE_EN_MUXD4_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_CALIB1_MUXD4_RX_CDR_FILTER_BOOSTFADE_FINE_EN_MUXD4_BF_DEF (0x00000001)

#define PMA_RX_MGS_CDR_CALIB1_MUXD4_RX_CDR_FINE_PROP_COEFF_BOOST_VAL_MUXD4_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_CALIB1_MUXD4_RX_CDR_FINE_PROP_COEFF_BOOST_VAL_MUXD4_BF_WID ( 4)
#define PMA_RX_MGS_CDR_CALIB1_MUXD4_RX_CDR_FINE_PROP_COEFF_BOOST_VAL_MUXD4_BF_MSK (0x0000001E)
#define PMA_RX_MGS_CDR_CALIB1_MUXD4_RX_CDR_FINE_PROP_COEFF_BOOST_VAL_MUXD4_BF_DEF (0x00000006)

#define PMA_RX_MGS_CDR_CALIB1_MUXD4_RX_CDR_FINE_INT_COEFF_BOOST_VAL_MUXD4_BF_OFF ( 5)
#define PMA_RX_MGS_CDR_CALIB1_MUXD4_RX_CDR_FINE_INT_COEFF_BOOST_VAL_MUXD4_BF_WID ( 5)
#define PMA_RX_MGS_CDR_CALIB1_MUXD4_RX_CDR_FINE_INT_COEFF_BOOST_VAL_MUXD4_BF_MSK (0x000003E0)
#define PMA_RX_MGS_CDR_CALIB1_MUXD4_RX_CDR_FINE_INT_COEFF_BOOST_VAL_MUXD4_BF_DEF (0x000000C0)

#define PMA_RX_MGS_CDR_CALIB1_MUXD4_RX_CDR_BOOST_FINE_CONST_ZETA_MUXD4_BF_OFF (10)
#define PMA_RX_MGS_CDR_CALIB1_MUXD4_RX_CDR_BOOST_FINE_CONST_ZETA_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_CALIB1_MUXD4_RX_CDR_BOOST_FINE_CONST_ZETA_MUXD4_BF_MSK (0x00000400)
#define PMA_RX_MGS_CDR_CALIB1_MUXD4_RX_CDR_BOOST_FINE_CONST_ZETA_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_CALIB1_MUXD4_RX_CDR_FINE_PROP_COEFF_BOOST_STEP_MUXD4_BF_OFF (12)
#define PMA_RX_MGS_CDR_CALIB1_MUXD4_RX_CDR_FINE_PROP_COEFF_BOOST_STEP_MUXD4_BF_WID ( 4)
#define PMA_RX_MGS_CDR_CALIB1_MUXD4_RX_CDR_FINE_PROP_COEFF_BOOST_STEP_MUXD4_BF_MSK (0x0000F000)
#define PMA_RX_MGS_CDR_CALIB1_MUXD4_RX_CDR_FINE_PROP_COEFF_BOOST_STEP_MUXD4_BF_DEF (0x00001000)

#define PMA_RX_MGS_CDR_CALIB1_MUXD4_RX_CDR_FINE_INT_COEFF_BOOST_STEP_MUXD4_BF_OFF (16)
#define PMA_RX_MGS_CDR_CALIB1_MUXD4_RX_CDR_FINE_INT_COEFF_BOOST_STEP_MUXD4_BF_WID ( 5)
#define PMA_RX_MGS_CDR_CALIB1_MUXD4_RX_CDR_FINE_INT_COEFF_BOOST_STEP_MUXD4_BF_MSK (0x001F0000)
#define PMA_RX_MGS_CDR_CALIB1_MUXD4_RX_CDR_FINE_INT_COEFF_BOOST_STEP_MUXD4_BF_DEF (0x00020000)

#define PMA_RX_MGS_CDR_CALIB1_MUXD4_RX_CDR_FINE_PROP_COEFF_MUXD4_BF_OFF (21)
#define PMA_RX_MGS_CDR_CALIB1_MUXD4_RX_CDR_FINE_PROP_COEFF_MUXD4_BF_WID ( 4)
#define PMA_RX_MGS_CDR_CALIB1_MUXD4_RX_CDR_FINE_PROP_COEFF_MUXD4_BF_MSK (0x01E00000)
#define PMA_RX_MGS_CDR_CALIB1_MUXD4_RX_CDR_FINE_PROP_COEFF_MUXD4_BF_DEF (0x00800000)

#define PMA_RX_MGS_CDR_CALIB1_MUXD4_RX_CDR_FINE_INT_COEFF_MUXD4_BF_OFF (25)
#define PMA_RX_MGS_CDR_CALIB1_MUXD4_RX_CDR_FINE_INT_COEFF_MUXD4_BF_WID ( 5)
#define PMA_RX_MGS_CDR_CALIB1_MUXD4_RX_CDR_FINE_INT_COEFF_MUXD4_BF_MSK (0x3E000000)
#define PMA_RX_MGS_CDR_CALIB1_MUXD4_RX_CDR_FINE_INT_COEFF_MUXD4_BF_DEF (0x1A000000)

///< Turn off the PI proportional
#define PMA_RX_MGS_CDR_CALIB1_MUXD4_RX_CDR_FINE_PROP_DIS_MUXD4_BF_OFF (30)
#define PMA_RX_MGS_CDR_CALIB1_MUXD4_RX_CDR_FINE_PROP_DIS_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_CALIB1_MUXD4_RX_CDR_FINE_PROP_DIS_MUXD4_BF_MSK (0x40000000)
#define PMA_RX_MGS_CDR_CALIB1_MUXD4_RX_CDR_FINE_PROP_DIS_MUXD4_BF_DEF (0x00000000)

///< Use proportional in L2R mode only
#define PMA_RX_MGS_CDR_CALIB1_MUXD4_RX_CDR_FINE_PROP_L2R_ONLY_MUXD4_BF_OFF (31)
#define PMA_RX_MGS_CDR_CALIB1_MUXD4_RX_CDR_FINE_PROP_L2R_ONLY_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_CALIB1_MUXD4_RX_CDR_FINE_PROP_L2R_ONLY_MUXD4_BF_MSK (0x80000000)
#define PMA_RX_MGS_CDR_CALIB1_MUXD4_RX_CDR_FINE_PROP_L2R_ONLY_MUXD4_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_CALIB2_MUXD0 register description at address offset 0x4b4
  *
  * Register default value:        0x02813812
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_calib2_muxd0
  * rx_cdr_calib2
  */

typedef union {
  struct {
    uint32_t RX_CDR_TDCBBPD_EN_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_TDCBBPD_CNT_LIMIT_MUXD0 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x9"
    uint32_t RX_CDR_GAINCAL_UPDATE_RATE_MUXD0 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t RX_CDR_REFCLK_CYCLES_PER_1US_MAXCNT_MUXD0 : 8;
    ///< ---
    ///< AccessType="RW" BitOffset="9" ResetValue="0x9C"
    uint32_t RX_CDR_SCOVRDEN_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t RX_CDR_SCOVRD_MUXD0 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t RX_CDR_FINE_INT_COEFF_L2D_MUXD0 : 5;
    ///< ---
    ///< AccessType="RW" BitOffset="22" ResetValue="0xA"
    uint32_t RX_CDR_KPKI_COMPENSATE_VAL_MUXD0 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="27" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_calib2_muxd0_reg_t;

#define PMA_RX_MGS_CDR_CALIB2_MUXD0_DEFAULT (0x02813812U)
#define PMA_RX_MGS_CDR_CALIB2_MUXD0_RD_MASK (0x1fffffffU)
#define PMA_RX_MGS_CDR_CALIB2_MUXD0_WR_MASK (0x1fffffffU)


#define PMA_RX_MGS_CDR_CALIB2_MUXD0_RX_CDR_TDCBBPD_EN_MUXD0_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_CALIB2_MUXD0_RX_CDR_TDCBBPD_EN_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_CALIB2_MUXD0_RX_CDR_TDCBBPD_EN_MUXD0_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_CALIB2_MUXD0_RX_CDR_TDCBBPD_EN_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_CALIB2_MUXD0_RX_CDR_TDCBBPD_CNT_LIMIT_MUXD0_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_CALIB2_MUXD0_RX_CDR_TDCBBPD_CNT_LIMIT_MUXD0_BF_WID ( 4)
#define PMA_RX_MGS_CDR_CALIB2_MUXD0_RX_CDR_TDCBBPD_CNT_LIMIT_MUXD0_BF_MSK (0x0000001E)
#define PMA_RX_MGS_CDR_CALIB2_MUXD0_RX_CDR_TDCBBPD_CNT_LIMIT_MUXD0_BF_DEF (0x00000012)

#define PMA_RX_MGS_CDR_CALIB2_MUXD0_RX_CDR_GAINCAL_UPDATE_RATE_MUXD0_BF_OFF ( 5)
#define PMA_RX_MGS_CDR_CALIB2_MUXD0_RX_CDR_GAINCAL_UPDATE_RATE_MUXD0_BF_WID ( 4)
#define PMA_RX_MGS_CDR_CALIB2_MUXD0_RX_CDR_GAINCAL_UPDATE_RATE_MUXD0_BF_MSK (0x000001E0)
#define PMA_RX_MGS_CDR_CALIB2_MUXD0_RX_CDR_GAINCAL_UPDATE_RATE_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_CALIB2_MUXD0_RX_CDR_REFCLK_CYCLES_PER_1US_MAXCNT_MUXD0_BF_OFF ( 9)
#define PMA_RX_MGS_CDR_CALIB2_MUXD0_RX_CDR_REFCLK_CYCLES_PER_1US_MAXCNT_MUXD0_BF_WID ( 8)
#define PMA_RX_MGS_CDR_CALIB2_MUXD0_RX_CDR_REFCLK_CYCLES_PER_1US_MAXCNT_MUXD0_BF_MSK (0x0001FE00)
#define PMA_RX_MGS_CDR_CALIB2_MUXD0_RX_CDR_REFCLK_CYCLES_PER_1US_MAXCNT_MUXD0_BF_DEF (0x00013800)

#define PMA_RX_MGS_CDR_CALIB2_MUXD0_RX_CDR_SCOVRDEN_MUXD0_BF_OFF (17)
#define PMA_RX_MGS_CDR_CALIB2_MUXD0_RX_CDR_SCOVRDEN_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_CALIB2_MUXD0_RX_CDR_SCOVRDEN_MUXD0_BF_MSK (0x00020000)
#define PMA_RX_MGS_CDR_CALIB2_MUXD0_RX_CDR_SCOVRDEN_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_CALIB2_MUXD0_RX_CDR_SCOVRD_MUXD0_BF_OFF (18)
#define PMA_RX_MGS_CDR_CALIB2_MUXD0_RX_CDR_SCOVRD_MUXD0_BF_WID ( 4)
#define PMA_RX_MGS_CDR_CALIB2_MUXD0_RX_CDR_SCOVRD_MUXD0_BF_MSK (0x003C0000)
#define PMA_RX_MGS_CDR_CALIB2_MUXD0_RX_CDR_SCOVRD_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_CALIB2_MUXD0_RX_CDR_FINE_INT_COEFF_L2D_MUXD0_BF_OFF (22)
#define PMA_RX_MGS_CDR_CALIB2_MUXD0_RX_CDR_FINE_INT_COEFF_L2D_MUXD0_BF_WID ( 5)
#define PMA_RX_MGS_CDR_CALIB2_MUXD0_RX_CDR_FINE_INT_COEFF_L2D_MUXD0_BF_MSK (0x07C00000)
#define PMA_RX_MGS_CDR_CALIB2_MUXD0_RX_CDR_FINE_INT_COEFF_L2D_MUXD0_BF_DEF (0x02800000)

#define PMA_RX_MGS_CDR_CALIB2_MUXD0_RX_CDR_KPKI_COMPENSATE_VAL_MUXD0_BF_OFF (27)
#define PMA_RX_MGS_CDR_CALIB2_MUXD0_RX_CDR_KPKI_COMPENSATE_VAL_MUXD0_BF_WID ( 2)
#define PMA_RX_MGS_CDR_CALIB2_MUXD0_RX_CDR_KPKI_COMPENSATE_VAL_MUXD0_BF_MSK (0x18000000)
#define PMA_RX_MGS_CDR_CALIB2_MUXD0_RX_CDR_KPKI_COMPENSATE_VAL_MUXD0_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_CALIB2_MUXD1 register description at address offset 0x4b8
  *
  * Register default value:        0x02813812
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_calib2_muxd1
  * rx_cdr_calib2
  */

typedef union {
  struct {
    uint32_t RX_CDR_TDCBBPD_EN_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_TDCBBPD_CNT_LIMIT_MUXD1 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x9"
    uint32_t RX_CDR_GAINCAL_UPDATE_RATE_MUXD1 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t RX_CDR_REFCLK_CYCLES_PER_1US_MAXCNT_MUXD1 : 8;
    ///< ---
    ///< AccessType="RW" BitOffset="9" ResetValue="0x9C"
    uint32_t RX_CDR_SCOVRDEN_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t RX_CDR_SCOVRD_MUXD1 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t RX_CDR_FINE_INT_COEFF_L2D_MUXD1 : 5;
    ///< ---
    ///< AccessType="RW" BitOffset="22" ResetValue="0xA"
    uint32_t RX_CDR_KPKI_COMPENSATE_VAL_MUXD1 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="27" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_calib2_muxd1_reg_t;

#define PMA_RX_MGS_CDR_CALIB2_MUXD1_DEFAULT (0x02813812U)
#define PMA_RX_MGS_CDR_CALIB2_MUXD1_RD_MASK (0x1fffffffU)
#define PMA_RX_MGS_CDR_CALIB2_MUXD1_WR_MASK (0x1fffffffU)


#define PMA_RX_MGS_CDR_CALIB2_MUXD1_RX_CDR_TDCBBPD_EN_MUXD1_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_CALIB2_MUXD1_RX_CDR_TDCBBPD_EN_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_CALIB2_MUXD1_RX_CDR_TDCBBPD_EN_MUXD1_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_CALIB2_MUXD1_RX_CDR_TDCBBPD_EN_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_CALIB2_MUXD1_RX_CDR_TDCBBPD_CNT_LIMIT_MUXD1_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_CALIB2_MUXD1_RX_CDR_TDCBBPD_CNT_LIMIT_MUXD1_BF_WID ( 4)
#define PMA_RX_MGS_CDR_CALIB2_MUXD1_RX_CDR_TDCBBPD_CNT_LIMIT_MUXD1_BF_MSK (0x0000001E)
#define PMA_RX_MGS_CDR_CALIB2_MUXD1_RX_CDR_TDCBBPD_CNT_LIMIT_MUXD1_BF_DEF (0x00000012)

#define PMA_RX_MGS_CDR_CALIB2_MUXD1_RX_CDR_GAINCAL_UPDATE_RATE_MUXD1_BF_OFF ( 5)
#define PMA_RX_MGS_CDR_CALIB2_MUXD1_RX_CDR_GAINCAL_UPDATE_RATE_MUXD1_BF_WID ( 4)
#define PMA_RX_MGS_CDR_CALIB2_MUXD1_RX_CDR_GAINCAL_UPDATE_RATE_MUXD1_BF_MSK (0x000001E0)
#define PMA_RX_MGS_CDR_CALIB2_MUXD1_RX_CDR_GAINCAL_UPDATE_RATE_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_CALIB2_MUXD1_RX_CDR_REFCLK_CYCLES_PER_1US_MAXCNT_MUXD1_BF_OFF ( 9)
#define PMA_RX_MGS_CDR_CALIB2_MUXD1_RX_CDR_REFCLK_CYCLES_PER_1US_MAXCNT_MUXD1_BF_WID ( 8)
#define PMA_RX_MGS_CDR_CALIB2_MUXD1_RX_CDR_REFCLK_CYCLES_PER_1US_MAXCNT_MUXD1_BF_MSK (0x0001FE00)
#define PMA_RX_MGS_CDR_CALIB2_MUXD1_RX_CDR_REFCLK_CYCLES_PER_1US_MAXCNT_MUXD1_BF_DEF (0x00013800)

#define PMA_RX_MGS_CDR_CALIB2_MUXD1_RX_CDR_SCOVRDEN_MUXD1_BF_OFF (17)
#define PMA_RX_MGS_CDR_CALIB2_MUXD1_RX_CDR_SCOVRDEN_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_CALIB2_MUXD1_RX_CDR_SCOVRDEN_MUXD1_BF_MSK (0x00020000)
#define PMA_RX_MGS_CDR_CALIB2_MUXD1_RX_CDR_SCOVRDEN_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_CALIB2_MUXD1_RX_CDR_SCOVRD_MUXD1_BF_OFF (18)
#define PMA_RX_MGS_CDR_CALIB2_MUXD1_RX_CDR_SCOVRD_MUXD1_BF_WID ( 4)
#define PMA_RX_MGS_CDR_CALIB2_MUXD1_RX_CDR_SCOVRD_MUXD1_BF_MSK (0x003C0000)
#define PMA_RX_MGS_CDR_CALIB2_MUXD1_RX_CDR_SCOVRD_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_CALIB2_MUXD1_RX_CDR_FINE_INT_COEFF_L2D_MUXD1_BF_OFF (22)
#define PMA_RX_MGS_CDR_CALIB2_MUXD1_RX_CDR_FINE_INT_COEFF_L2D_MUXD1_BF_WID ( 5)
#define PMA_RX_MGS_CDR_CALIB2_MUXD1_RX_CDR_FINE_INT_COEFF_L2D_MUXD1_BF_MSK (0x07C00000)
#define PMA_RX_MGS_CDR_CALIB2_MUXD1_RX_CDR_FINE_INT_COEFF_L2D_MUXD1_BF_DEF (0x02800000)

#define PMA_RX_MGS_CDR_CALIB2_MUXD1_RX_CDR_KPKI_COMPENSATE_VAL_MUXD1_BF_OFF (27)
#define PMA_RX_MGS_CDR_CALIB2_MUXD1_RX_CDR_KPKI_COMPENSATE_VAL_MUXD1_BF_WID ( 2)
#define PMA_RX_MGS_CDR_CALIB2_MUXD1_RX_CDR_KPKI_COMPENSATE_VAL_MUXD1_BF_MSK (0x18000000)
#define PMA_RX_MGS_CDR_CALIB2_MUXD1_RX_CDR_KPKI_COMPENSATE_VAL_MUXD1_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_CALIB2_MUXD2 register description at address offset 0x4bc
  *
  * Register default value:        0x02813812
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_calib2_muxd2
  * rx_cdr_calib2
  */

typedef union {
  struct {
    uint32_t RX_CDR_TDCBBPD_EN_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_TDCBBPD_CNT_LIMIT_MUXD2 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x9"
    uint32_t RX_CDR_GAINCAL_UPDATE_RATE_MUXD2 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t RX_CDR_REFCLK_CYCLES_PER_1US_MAXCNT_MUXD2 : 8;
    ///< ---
    ///< AccessType="RW" BitOffset="9" ResetValue="0x9C"
    uint32_t RX_CDR_SCOVRDEN_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t RX_CDR_SCOVRD_MUXD2 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t RX_CDR_FINE_INT_COEFF_L2D_MUXD2 : 5;
    ///< ---
    ///< AccessType="RW" BitOffset="22" ResetValue="0xA"
    uint32_t RX_CDR_KPKI_COMPENSATE_VAL_MUXD2 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="27" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_calib2_muxd2_reg_t;

#define PMA_RX_MGS_CDR_CALIB2_MUXD2_DEFAULT (0x02813812U)
#define PMA_RX_MGS_CDR_CALIB2_MUXD2_RD_MASK (0x1fffffffU)
#define PMA_RX_MGS_CDR_CALIB2_MUXD2_WR_MASK (0x1fffffffU)


#define PMA_RX_MGS_CDR_CALIB2_MUXD2_RX_CDR_TDCBBPD_EN_MUXD2_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_CALIB2_MUXD2_RX_CDR_TDCBBPD_EN_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_CALIB2_MUXD2_RX_CDR_TDCBBPD_EN_MUXD2_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_CALIB2_MUXD2_RX_CDR_TDCBBPD_EN_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_CALIB2_MUXD2_RX_CDR_TDCBBPD_CNT_LIMIT_MUXD2_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_CALIB2_MUXD2_RX_CDR_TDCBBPD_CNT_LIMIT_MUXD2_BF_WID ( 4)
#define PMA_RX_MGS_CDR_CALIB2_MUXD2_RX_CDR_TDCBBPD_CNT_LIMIT_MUXD2_BF_MSK (0x0000001E)
#define PMA_RX_MGS_CDR_CALIB2_MUXD2_RX_CDR_TDCBBPD_CNT_LIMIT_MUXD2_BF_DEF (0x00000012)

#define PMA_RX_MGS_CDR_CALIB2_MUXD2_RX_CDR_GAINCAL_UPDATE_RATE_MUXD2_BF_OFF ( 5)
#define PMA_RX_MGS_CDR_CALIB2_MUXD2_RX_CDR_GAINCAL_UPDATE_RATE_MUXD2_BF_WID ( 4)
#define PMA_RX_MGS_CDR_CALIB2_MUXD2_RX_CDR_GAINCAL_UPDATE_RATE_MUXD2_BF_MSK (0x000001E0)
#define PMA_RX_MGS_CDR_CALIB2_MUXD2_RX_CDR_GAINCAL_UPDATE_RATE_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_CALIB2_MUXD2_RX_CDR_REFCLK_CYCLES_PER_1US_MAXCNT_MUXD2_BF_OFF ( 9)
#define PMA_RX_MGS_CDR_CALIB2_MUXD2_RX_CDR_REFCLK_CYCLES_PER_1US_MAXCNT_MUXD2_BF_WID ( 8)
#define PMA_RX_MGS_CDR_CALIB2_MUXD2_RX_CDR_REFCLK_CYCLES_PER_1US_MAXCNT_MUXD2_BF_MSK (0x0001FE00)
#define PMA_RX_MGS_CDR_CALIB2_MUXD2_RX_CDR_REFCLK_CYCLES_PER_1US_MAXCNT_MUXD2_BF_DEF (0x00013800)

#define PMA_RX_MGS_CDR_CALIB2_MUXD2_RX_CDR_SCOVRDEN_MUXD2_BF_OFF (17)
#define PMA_RX_MGS_CDR_CALIB2_MUXD2_RX_CDR_SCOVRDEN_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_CALIB2_MUXD2_RX_CDR_SCOVRDEN_MUXD2_BF_MSK (0x00020000)
#define PMA_RX_MGS_CDR_CALIB2_MUXD2_RX_CDR_SCOVRDEN_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_CALIB2_MUXD2_RX_CDR_SCOVRD_MUXD2_BF_OFF (18)
#define PMA_RX_MGS_CDR_CALIB2_MUXD2_RX_CDR_SCOVRD_MUXD2_BF_WID ( 4)
#define PMA_RX_MGS_CDR_CALIB2_MUXD2_RX_CDR_SCOVRD_MUXD2_BF_MSK (0x003C0000)
#define PMA_RX_MGS_CDR_CALIB2_MUXD2_RX_CDR_SCOVRD_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_CALIB2_MUXD2_RX_CDR_FINE_INT_COEFF_L2D_MUXD2_BF_OFF (22)
#define PMA_RX_MGS_CDR_CALIB2_MUXD2_RX_CDR_FINE_INT_COEFF_L2D_MUXD2_BF_WID ( 5)
#define PMA_RX_MGS_CDR_CALIB2_MUXD2_RX_CDR_FINE_INT_COEFF_L2D_MUXD2_BF_MSK (0x07C00000)
#define PMA_RX_MGS_CDR_CALIB2_MUXD2_RX_CDR_FINE_INT_COEFF_L2D_MUXD2_BF_DEF (0x02800000)

#define PMA_RX_MGS_CDR_CALIB2_MUXD2_RX_CDR_KPKI_COMPENSATE_VAL_MUXD2_BF_OFF (27)
#define PMA_RX_MGS_CDR_CALIB2_MUXD2_RX_CDR_KPKI_COMPENSATE_VAL_MUXD2_BF_WID ( 2)
#define PMA_RX_MGS_CDR_CALIB2_MUXD2_RX_CDR_KPKI_COMPENSATE_VAL_MUXD2_BF_MSK (0x18000000)
#define PMA_RX_MGS_CDR_CALIB2_MUXD2_RX_CDR_KPKI_COMPENSATE_VAL_MUXD2_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_CALIB2_MUXD3 register description at address offset 0x4c0
  *
  * Register default value:        0x02813812
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_calib2_muxd3
  * rx_cdr_calib2
  */

typedef union {
  struct {
    uint32_t RX_CDR_TDCBBPD_EN_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_TDCBBPD_CNT_LIMIT_MUXD3 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x9"
    uint32_t RX_CDR_GAINCAL_UPDATE_RATE_MUXD3 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t RX_CDR_REFCLK_CYCLES_PER_1US_MAXCNT_MUXD3 : 8;
    ///< ---
    ///< AccessType="RW" BitOffset="9" ResetValue="0x9C"
    uint32_t RX_CDR_SCOVRDEN_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t RX_CDR_SCOVRD_MUXD3 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t RX_CDR_FINE_INT_COEFF_L2D_MUXD3 : 5;
    ///< ---
    ///< AccessType="RW" BitOffset="22" ResetValue="0xA"
    uint32_t RX_CDR_KPKI_COMPENSATE_VAL_MUXD3 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="27" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_calib2_muxd3_reg_t;

#define PMA_RX_MGS_CDR_CALIB2_MUXD3_DEFAULT (0x02813812U)
#define PMA_RX_MGS_CDR_CALIB2_MUXD3_RD_MASK (0x1fffffffU)
#define PMA_RX_MGS_CDR_CALIB2_MUXD3_WR_MASK (0x1fffffffU)


#define PMA_RX_MGS_CDR_CALIB2_MUXD3_RX_CDR_TDCBBPD_EN_MUXD3_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_CALIB2_MUXD3_RX_CDR_TDCBBPD_EN_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_CALIB2_MUXD3_RX_CDR_TDCBBPD_EN_MUXD3_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_CALIB2_MUXD3_RX_CDR_TDCBBPD_EN_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_CALIB2_MUXD3_RX_CDR_TDCBBPD_CNT_LIMIT_MUXD3_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_CALIB2_MUXD3_RX_CDR_TDCBBPD_CNT_LIMIT_MUXD3_BF_WID ( 4)
#define PMA_RX_MGS_CDR_CALIB2_MUXD3_RX_CDR_TDCBBPD_CNT_LIMIT_MUXD3_BF_MSK (0x0000001E)
#define PMA_RX_MGS_CDR_CALIB2_MUXD3_RX_CDR_TDCBBPD_CNT_LIMIT_MUXD3_BF_DEF (0x00000012)

#define PMA_RX_MGS_CDR_CALIB2_MUXD3_RX_CDR_GAINCAL_UPDATE_RATE_MUXD3_BF_OFF ( 5)
#define PMA_RX_MGS_CDR_CALIB2_MUXD3_RX_CDR_GAINCAL_UPDATE_RATE_MUXD3_BF_WID ( 4)
#define PMA_RX_MGS_CDR_CALIB2_MUXD3_RX_CDR_GAINCAL_UPDATE_RATE_MUXD3_BF_MSK (0x000001E0)
#define PMA_RX_MGS_CDR_CALIB2_MUXD3_RX_CDR_GAINCAL_UPDATE_RATE_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_CALIB2_MUXD3_RX_CDR_REFCLK_CYCLES_PER_1US_MAXCNT_MUXD3_BF_OFF ( 9)
#define PMA_RX_MGS_CDR_CALIB2_MUXD3_RX_CDR_REFCLK_CYCLES_PER_1US_MAXCNT_MUXD3_BF_WID ( 8)
#define PMA_RX_MGS_CDR_CALIB2_MUXD3_RX_CDR_REFCLK_CYCLES_PER_1US_MAXCNT_MUXD3_BF_MSK (0x0001FE00)
#define PMA_RX_MGS_CDR_CALIB2_MUXD3_RX_CDR_REFCLK_CYCLES_PER_1US_MAXCNT_MUXD3_BF_DEF (0x00013800)

#define PMA_RX_MGS_CDR_CALIB2_MUXD3_RX_CDR_SCOVRDEN_MUXD3_BF_OFF (17)
#define PMA_RX_MGS_CDR_CALIB2_MUXD3_RX_CDR_SCOVRDEN_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_CALIB2_MUXD3_RX_CDR_SCOVRDEN_MUXD3_BF_MSK (0x00020000)
#define PMA_RX_MGS_CDR_CALIB2_MUXD3_RX_CDR_SCOVRDEN_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_CALIB2_MUXD3_RX_CDR_SCOVRD_MUXD3_BF_OFF (18)
#define PMA_RX_MGS_CDR_CALIB2_MUXD3_RX_CDR_SCOVRD_MUXD3_BF_WID ( 4)
#define PMA_RX_MGS_CDR_CALIB2_MUXD3_RX_CDR_SCOVRD_MUXD3_BF_MSK (0x003C0000)
#define PMA_RX_MGS_CDR_CALIB2_MUXD3_RX_CDR_SCOVRD_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_CALIB2_MUXD3_RX_CDR_FINE_INT_COEFF_L2D_MUXD3_BF_OFF (22)
#define PMA_RX_MGS_CDR_CALIB2_MUXD3_RX_CDR_FINE_INT_COEFF_L2D_MUXD3_BF_WID ( 5)
#define PMA_RX_MGS_CDR_CALIB2_MUXD3_RX_CDR_FINE_INT_COEFF_L2D_MUXD3_BF_MSK (0x07C00000)
#define PMA_RX_MGS_CDR_CALIB2_MUXD3_RX_CDR_FINE_INT_COEFF_L2D_MUXD3_BF_DEF (0x02800000)

#define PMA_RX_MGS_CDR_CALIB2_MUXD3_RX_CDR_KPKI_COMPENSATE_VAL_MUXD3_BF_OFF (27)
#define PMA_RX_MGS_CDR_CALIB2_MUXD3_RX_CDR_KPKI_COMPENSATE_VAL_MUXD3_BF_WID ( 2)
#define PMA_RX_MGS_CDR_CALIB2_MUXD3_RX_CDR_KPKI_COMPENSATE_VAL_MUXD3_BF_MSK (0x18000000)
#define PMA_RX_MGS_CDR_CALIB2_MUXD3_RX_CDR_KPKI_COMPENSATE_VAL_MUXD3_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_CALIB2_MUXD4 register description at address offset 0x4c4
  *
  * Register default value:        0x02813812
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_calib2_muxd4
  * rx_cdr_calib2
  */

typedef union {
  struct {
    uint32_t RX_CDR_TDCBBPD_EN_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_TDCBBPD_CNT_LIMIT_MUXD4 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x9"
    uint32_t RX_CDR_GAINCAL_UPDATE_RATE_MUXD4 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t RX_CDR_REFCLK_CYCLES_PER_1US_MAXCNT_MUXD4 : 8;
    ///< ---
    ///< AccessType="RW" BitOffset="9" ResetValue="0x9C"
    uint32_t RX_CDR_SCOVRDEN_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t RX_CDR_SCOVRD_MUXD4 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t RX_CDR_FINE_INT_COEFF_L2D_MUXD4 : 5;
    ///< ---
    ///< AccessType="RW" BitOffset="22" ResetValue="0xA"
    uint32_t RX_CDR_KPKI_COMPENSATE_VAL_MUXD4 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="27" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_calib2_muxd4_reg_t;

#define PMA_RX_MGS_CDR_CALIB2_MUXD4_DEFAULT (0x02813812U)
#define PMA_RX_MGS_CDR_CALIB2_MUXD4_RD_MASK (0x1fffffffU)
#define PMA_RX_MGS_CDR_CALIB2_MUXD4_WR_MASK (0x1fffffffU)


#define PMA_RX_MGS_CDR_CALIB2_MUXD4_RX_CDR_TDCBBPD_EN_MUXD4_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_CALIB2_MUXD4_RX_CDR_TDCBBPD_EN_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_CALIB2_MUXD4_RX_CDR_TDCBBPD_EN_MUXD4_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_CALIB2_MUXD4_RX_CDR_TDCBBPD_EN_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_CALIB2_MUXD4_RX_CDR_TDCBBPD_CNT_LIMIT_MUXD4_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_CALIB2_MUXD4_RX_CDR_TDCBBPD_CNT_LIMIT_MUXD4_BF_WID ( 4)
#define PMA_RX_MGS_CDR_CALIB2_MUXD4_RX_CDR_TDCBBPD_CNT_LIMIT_MUXD4_BF_MSK (0x0000001E)
#define PMA_RX_MGS_CDR_CALIB2_MUXD4_RX_CDR_TDCBBPD_CNT_LIMIT_MUXD4_BF_DEF (0x00000012)

#define PMA_RX_MGS_CDR_CALIB2_MUXD4_RX_CDR_GAINCAL_UPDATE_RATE_MUXD4_BF_OFF ( 5)
#define PMA_RX_MGS_CDR_CALIB2_MUXD4_RX_CDR_GAINCAL_UPDATE_RATE_MUXD4_BF_WID ( 4)
#define PMA_RX_MGS_CDR_CALIB2_MUXD4_RX_CDR_GAINCAL_UPDATE_RATE_MUXD4_BF_MSK (0x000001E0)
#define PMA_RX_MGS_CDR_CALIB2_MUXD4_RX_CDR_GAINCAL_UPDATE_RATE_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_CALIB2_MUXD4_RX_CDR_REFCLK_CYCLES_PER_1US_MAXCNT_MUXD4_BF_OFF ( 9)
#define PMA_RX_MGS_CDR_CALIB2_MUXD4_RX_CDR_REFCLK_CYCLES_PER_1US_MAXCNT_MUXD4_BF_WID ( 8)
#define PMA_RX_MGS_CDR_CALIB2_MUXD4_RX_CDR_REFCLK_CYCLES_PER_1US_MAXCNT_MUXD4_BF_MSK (0x0001FE00)
#define PMA_RX_MGS_CDR_CALIB2_MUXD4_RX_CDR_REFCLK_CYCLES_PER_1US_MAXCNT_MUXD4_BF_DEF (0x00013800)

#define PMA_RX_MGS_CDR_CALIB2_MUXD4_RX_CDR_SCOVRDEN_MUXD4_BF_OFF (17)
#define PMA_RX_MGS_CDR_CALIB2_MUXD4_RX_CDR_SCOVRDEN_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_CALIB2_MUXD4_RX_CDR_SCOVRDEN_MUXD4_BF_MSK (0x00020000)
#define PMA_RX_MGS_CDR_CALIB2_MUXD4_RX_CDR_SCOVRDEN_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_CALIB2_MUXD4_RX_CDR_SCOVRD_MUXD4_BF_OFF (18)
#define PMA_RX_MGS_CDR_CALIB2_MUXD4_RX_CDR_SCOVRD_MUXD4_BF_WID ( 4)
#define PMA_RX_MGS_CDR_CALIB2_MUXD4_RX_CDR_SCOVRD_MUXD4_BF_MSK (0x003C0000)
#define PMA_RX_MGS_CDR_CALIB2_MUXD4_RX_CDR_SCOVRD_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_CALIB2_MUXD4_RX_CDR_FINE_INT_COEFF_L2D_MUXD4_BF_OFF (22)
#define PMA_RX_MGS_CDR_CALIB2_MUXD4_RX_CDR_FINE_INT_COEFF_L2D_MUXD4_BF_WID ( 5)
#define PMA_RX_MGS_CDR_CALIB2_MUXD4_RX_CDR_FINE_INT_COEFF_L2D_MUXD4_BF_MSK (0x07C00000)
#define PMA_RX_MGS_CDR_CALIB2_MUXD4_RX_CDR_FINE_INT_COEFF_L2D_MUXD4_BF_DEF (0x02800000)

#define PMA_RX_MGS_CDR_CALIB2_MUXD4_RX_CDR_KPKI_COMPENSATE_VAL_MUXD4_BF_OFF (27)
#define PMA_RX_MGS_CDR_CALIB2_MUXD4_RX_CDR_KPKI_COMPENSATE_VAL_MUXD4_BF_WID ( 2)
#define PMA_RX_MGS_CDR_CALIB2_MUXD4_RX_CDR_KPKI_COMPENSATE_VAL_MUXD4_BF_MSK (0x18000000)
#define PMA_RX_MGS_CDR_CALIB2_MUXD4_RX_CDR_KPKI_COMPENSATE_VAL_MUXD4_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_CALIB3_MUXD0 register description at address offset 0x4c8
  *
  * Register default value:        0x0000007F
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_calib3_muxd0
  * rx_cdr_calib3
  */

typedef union {
  struct {
    uint32_t RX_CDR_FINE_BIN_FLL_VAL_MUXD0 : 18;
    ///< The value to load in the integral path
    ///< AccessType="RW" BitOffset="0" ResetValue="0x7F"
    uint32_t RX_CDR_FINE_BIN_FLL_LOAD_MUXD0 : 1;
    ///< 0->1 will generate load strobe
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t RX_CDR_OFFSET_CORRECTION_2F0_MUXD0 : 9;
    ///< Addition to the calibrated kvcc value
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_calib3_muxd0_reg_t;

#define PMA_RX_MGS_CDR_CALIB3_MUXD0_DEFAULT (0x0000007fU)
#define PMA_RX_MGS_CDR_CALIB3_MUXD0_RD_MASK (0x0fffffffU)
#define PMA_RX_MGS_CDR_CALIB3_MUXD0_WR_MASK (0x0fffffffU)


///< The value to load in the integral path
#define PMA_RX_MGS_CDR_CALIB3_MUXD0_RX_CDR_FINE_BIN_FLL_VAL_MUXD0_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_CALIB3_MUXD0_RX_CDR_FINE_BIN_FLL_VAL_MUXD0_BF_WID (18)
#define PMA_RX_MGS_CDR_CALIB3_MUXD0_RX_CDR_FINE_BIN_FLL_VAL_MUXD0_BF_MSK (0x0003FFFF)
#define PMA_RX_MGS_CDR_CALIB3_MUXD0_RX_CDR_FINE_BIN_FLL_VAL_MUXD0_BF_DEF (0x0000007F)

///< 0->1 will generate load strobe
#define PMA_RX_MGS_CDR_CALIB3_MUXD0_RX_CDR_FINE_BIN_FLL_LOAD_MUXD0_BF_OFF (18)
#define PMA_RX_MGS_CDR_CALIB3_MUXD0_RX_CDR_FINE_BIN_FLL_LOAD_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_CALIB3_MUXD0_RX_CDR_FINE_BIN_FLL_LOAD_MUXD0_BF_MSK (0x00040000)
#define PMA_RX_MGS_CDR_CALIB3_MUXD0_RX_CDR_FINE_BIN_FLL_LOAD_MUXD0_BF_DEF (0x00000000)

///< Addition to the calibrated kvcc value
#define PMA_RX_MGS_CDR_CALIB3_MUXD0_RX_CDR_OFFSET_CORRECTION_2F0_MUXD0_BF_OFF (19)
#define PMA_RX_MGS_CDR_CALIB3_MUXD0_RX_CDR_OFFSET_CORRECTION_2F0_MUXD0_BF_WID ( 9)
#define PMA_RX_MGS_CDR_CALIB3_MUXD0_RX_CDR_OFFSET_CORRECTION_2F0_MUXD0_BF_MSK (0x0FF80000)
#define PMA_RX_MGS_CDR_CALIB3_MUXD0_RX_CDR_OFFSET_CORRECTION_2F0_MUXD0_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_CALIB3_MUXD1 register description at address offset 0x4cc
  *
  * Register default value:        0x0000007F
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_calib3_muxd1
  * rx_cdr_calib3
  */

typedef union {
  struct {
    uint32_t RX_CDR_FINE_BIN_FLL_VAL_MUXD1 : 18;
    ///< The value to load in the integral path
    ///< AccessType="RW" BitOffset="0" ResetValue="0x7F"
    uint32_t RX_CDR_FINE_BIN_FLL_LOAD_MUXD1 : 1;
    ///< 0->1 will generate load strobe
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t RX_CDR_OFFSET_CORRECTION_2F0_MUXD1 : 9;
    ///< Addition to the calibrated kvcc value
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_calib3_muxd1_reg_t;

#define PMA_RX_MGS_CDR_CALIB3_MUXD1_DEFAULT (0x0000007fU)
#define PMA_RX_MGS_CDR_CALIB3_MUXD1_RD_MASK (0x0fffffffU)
#define PMA_RX_MGS_CDR_CALIB3_MUXD1_WR_MASK (0x0fffffffU)


///< The value to load in the integral path
#define PMA_RX_MGS_CDR_CALIB3_MUXD1_RX_CDR_FINE_BIN_FLL_VAL_MUXD1_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_CALIB3_MUXD1_RX_CDR_FINE_BIN_FLL_VAL_MUXD1_BF_WID (18)
#define PMA_RX_MGS_CDR_CALIB3_MUXD1_RX_CDR_FINE_BIN_FLL_VAL_MUXD1_BF_MSK (0x0003FFFF)
#define PMA_RX_MGS_CDR_CALIB3_MUXD1_RX_CDR_FINE_BIN_FLL_VAL_MUXD1_BF_DEF (0x0000007F)

///< 0->1 will generate load strobe
#define PMA_RX_MGS_CDR_CALIB3_MUXD1_RX_CDR_FINE_BIN_FLL_LOAD_MUXD1_BF_OFF (18)
#define PMA_RX_MGS_CDR_CALIB3_MUXD1_RX_CDR_FINE_BIN_FLL_LOAD_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_CALIB3_MUXD1_RX_CDR_FINE_BIN_FLL_LOAD_MUXD1_BF_MSK (0x00040000)
#define PMA_RX_MGS_CDR_CALIB3_MUXD1_RX_CDR_FINE_BIN_FLL_LOAD_MUXD1_BF_DEF (0x00000000)

///< Addition to the calibrated kvcc value
#define PMA_RX_MGS_CDR_CALIB3_MUXD1_RX_CDR_OFFSET_CORRECTION_2F0_MUXD1_BF_OFF (19)
#define PMA_RX_MGS_CDR_CALIB3_MUXD1_RX_CDR_OFFSET_CORRECTION_2F0_MUXD1_BF_WID ( 9)
#define PMA_RX_MGS_CDR_CALIB3_MUXD1_RX_CDR_OFFSET_CORRECTION_2F0_MUXD1_BF_MSK (0x0FF80000)
#define PMA_RX_MGS_CDR_CALIB3_MUXD1_RX_CDR_OFFSET_CORRECTION_2F0_MUXD1_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_CALIB3_MUXD2 register description at address offset 0x4d0
  *
  * Register default value:        0x0000007F
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_calib3_muxd2
  * rx_cdr_calib3
  */

typedef union {
  struct {
    uint32_t RX_CDR_FINE_BIN_FLL_VAL_MUXD2 : 18;
    ///< The value to load in the integral path
    ///< AccessType="RW" BitOffset="0" ResetValue="0x7F"
    uint32_t RX_CDR_FINE_BIN_FLL_LOAD_MUXD2 : 1;
    ///< 0->1 will generate load strobe
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t RX_CDR_OFFSET_CORRECTION_2F0_MUXD2 : 9;
    ///< Addition to the calibrated kvcc value
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_calib3_muxd2_reg_t;

#define PMA_RX_MGS_CDR_CALIB3_MUXD2_DEFAULT (0x0000007fU)
#define PMA_RX_MGS_CDR_CALIB3_MUXD2_RD_MASK (0x0fffffffU)
#define PMA_RX_MGS_CDR_CALIB3_MUXD2_WR_MASK (0x0fffffffU)


///< The value to load in the integral path
#define PMA_RX_MGS_CDR_CALIB3_MUXD2_RX_CDR_FINE_BIN_FLL_VAL_MUXD2_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_CALIB3_MUXD2_RX_CDR_FINE_BIN_FLL_VAL_MUXD2_BF_WID (18)
#define PMA_RX_MGS_CDR_CALIB3_MUXD2_RX_CDR_FINE_BIN_FLL_VAL_MUXD2_BF_MSK (0x0003FFFF)
#define PMA_RX_MGS_CDR_CALIB3_MUXD2_RX_CDR_FINE_BIN_FLL_VAL_MUXD2_BF_DEF (0x0000007F)

///< 0->1 will generate load strobe
#define PMA_RX_MGS_CDR_CALIB3_MUXD2_RX_CDR_FINE_BIN_FLL_LOAD_MUXD2_BF_OFF (18)
#define PMA_RX_MGS_CDR_CALIB3_MUXD2_RX_CDR_FINE_BIN_FLL_LOAD_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_CALIB3_MUXD2_RX_CDR_FINE_BIN_FLL_LOAD_MUXD2_BF_MSK (0x00040000)
#define PMA_RX_MGS_CDR_CALIB3_MUXD2_RX_CDR_FINE_BIN_FLL_LOAD_MUXD2_BF_DEF (0x00000000)

///< Addition to the calibrated kvcc value
#define PMA_RX_MGS_CDR_CALIB3_MUXD2_RX_CDR_OFFSET_CORRECTION_2F0_MUXD2_BF_OFF (19)
#define PMA_RX_MGS_CDR_CALIB3_MUXD2_RX_CDR_OFFSET_CORRECTION_2F0_MUXD2_BF_WID ( 9)
#define PMA_RX_MGS_CDR_CALIB3_MUXD2_RX_CDR_OFFSET_CORRECTION_2F0_MUXD2_BF_MSK (0x0FF80000)
#define PMA_RX_MGS_CDR_CALIB3_MUXD2_RX_CDR_OFFSET_CORRECTION_2F0_MUXD2_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_CALIB3_MUXD3 register description at address offset 0x4d4
  *
  * Register default value:        0x0000007F
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_calib3_muxd3
  * rx_cdr_calib3
  */

typedef union {
  struct {
    uint32_t RX_CDR_FINE_BIN_FLL_VAL_MUXD3 : 18;
    ///< The value to load in the integral path
    ///< AccessType="RW" BitOffset="0" ResetValue="0x7F"
    uint32_t RX_CDR_FINE_BIN_FLL_LOAD_MUXD3 : 1;
    ///< 0->1 will generate load strobe
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t RX_CDR_OFFSET_CORRECTION_2F0_MUXD3 : 9;
    ///< Addition to the calibrated kvcc value
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_calib3_muxd3_reg_t;

#define PMA_RX_MGS_CDR_CALIB3_MUXD3_DEFAULT (0x0000007fU)
#define PMA_RX_MGS_CDR_CALIB3_MUXD3_RD_MASK (0x0fffffffU)
#define PMA_RX_MGS_CDR_CALIB3_MUXD3_WR_MASK (0x0fffffffU)


///< The value to load in the integral path
#define PMA_RX_MGS_CDR_CALIB3_MUXD3_RX_CDR_FINE_BIN_FLL_VAL_MUXD3_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_CALIB3_MUXD3_RX_CDR_FINE_BIN_FLL_VAL_MUXD3_BF_WID (18)
#define PMA_RX_MGS_CDR_CALIB3_MUXD3_RX_CDR_FINE_BIN_FLL_VAL_MUXD3_BF_MSK (0x0003FFFF)
#define PMA_RX_MGS_CDR_CALIB3_MUXD3_RX_CDR_FINE_BIN_FLL_VAL_MUXD3_BF_DEF (0x0000007F)

///< 0->1 will generate load strobe
#define PMA_RX_MGS_CDR_CALIB3_MUXD3_RX_CDR_FINE_BIN_FLL_LOAD_MUXD3_BF_OFF (18)
#define PMA_RX_MGS_CDR_CALIB3_MUXD3_RX_CDR_FINE_BIN_FLL_LOAD_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_CALIB3_MUXD3_RX_CDR_FINE_BIN_FLL_LOAD_MUXD3_BF_MSK (0x00040000)
#define PMA_RX_MGS_CDR_CALIB3_MUXD3_RX_CDR_FINE_BIN_FLL_LOAD_MUXD3_BF_DEF (0x00000000)

///< Addition to the calibrated kvcc value
#define PMA_RX_MGS_CDR_CALIB3_MUXD3_RX_CDR_OFFSET_CORRECTION_2F0_MUXD3_BF_OFF (19)
#define PMA_RX_MGS_CDR_CALIB3_MUXD3_RX_CDR_OFFSET_CORRECTION_2F0_MUXD3_BF_WID ( 9)
#define PMA_RX_MGS_CDR_CALIB3_MUXD3_RX_CDR_OFFSET_CORRECTION_2F0_MUXD3_BF_MSK (0x0FF80000)
#define PMA_RX_MGS_CDR_CALIB3_MUXD3_RX_CDR_OFFSET_CORRECTION_2F0_MUXD3_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_CALIB3_MUXD4 register description at address offset 0x4d8
  *
  * Register default value:        0x0000007F
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_calib3_muxd4
  * rx_cdr_calib3
  */

typedef union {
  struct {
    uint32_t RX_CDR_FINE_BIN_FLL_VAL_MUXD4 : 18;
    ///< The value to load in the integral path
    ///< AccessType="RW" BitOffset="0" ResetValue="0x7F"
    uint32_t RX_CDR_FINE_BIN_FLL_LOAD_MUXD4 : 1;
    ///< 0->1 will generate load strobe
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t RX_CDR_OFFSET_CORRECTION_2F0_MUXD4 : 9;
    ///< Addition to the calibrated kvcc value
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_calib3_muxd4_reg_t;

#define PMA_RX_MGS_CDR_CALIB3_MUXD4_DEFAULT (0x0000007fU)
#define PMA_RX_MGS_CDR_CALIB3_MUXD4_RD_MASK (0x0fffffffU)
#define PMA_RX_MGS_CDR_CALIB3_MUXD4_WR_MASK (0x0fffffffU)


///< The value to load in the integral path
#define PMA_RX_MGS_CDR_CALIB3_MUXD4_RX_CDR_FINE_BIN_FLL_VAL_MUXD4_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_CALIB3_MUXD4_RX_CDR_FINE_BIN_FLL_VAL_MUXD4_BF_WID (18)
#define PMA_RX_MGS_CDR_CALIB3_MUXD4_RX_CDR_FINE_BIN_FLL_VAL_MUXD4_BF_MSK (0x0003FFFF)
#define PMA_RX_MGS_CDR_CALIB3_MUXD4_RX_CDR_FINE_BIN_FLL_VAL_MUXD4_BF_DEF (0x0000007F)

///< 0->1 will generate load strobe
#define PMA_RX_MGS_CDR_CALIB3_MUXD4_RX_CDR_FINE_BIN_FLL_LOAD_MUXD4_BF_OFF (18)
#define PMA_RX_MGS_CDR_CALIB3_MUXD4_RX_CDR_FINE_BIN_FLL_LOAD_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_CALIB3_MUXD4_RX_CDR_FINE_BIN_FLL_LOAD_MUXD4_BF_MSK (0x00040000)
#define PMA_RX_MGS_CDR_CALIB3_MUXD4_RX_CDR_FINE_BIN_FLL_LOAD_MUXD4_BF_DEF (0x00000000)

///< Addition to the calibrated kvcc value
#define PMA_RX_MGS_CDR_CALIB3_MUXD4_RX_CDR_OFFSET_CORRECTION_2F0_MUXD4_BF_OFF (19)
#define PMA_RX_MGS_CDR_CALIB3_MUXD4_RX_CDR_OFFSET_CORRECTION_2F0_MUXD4_BF_WID ( 9)
#define PMA_RX_MGS_CDR_CALIB3_MUXD4_RX_CDR_OFFSET_CORRECTION_2F0_MUXD4_BF_MSK (0x0FF80000)
#define PMA_RX_MGS_CDR_CALIB3_MUXD4_RX_CDR_OFFSET_CORRECTION_2F0_MUXD4_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_TEMP_TRACKING_MUXD0 register description at address offset 0x4dc
  *
  * Register default value:        0x00000027
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_temp_tracking_muxd0
  * rx_cdr_temp_tracking
  */

typedef union {
  struct {
    uint32_t RX_CDR_TEMP_TRACK_EN_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t RX_CDR_FINE2DTR_RATIO_MUXD0 : 6;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x13"
    uint32_t RX_CDR_SSC_TRACK_EN_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t RX_CDR_CAPTURE_FILTER_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_temp_tracking_muxd0_reg_t;

#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD0_DEFAULT (0x00000027U)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD0_RD_MASK (0x000001ffU)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD0_WR_MASK (0x000001ffU)


#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD0_RX_CDR_TEMP_TRACK_EN_MUXD0_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD0_RX_CDR_TEMP_TRACK_EN_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD0_RX_CDR_TEMP_TRACK_EN_MUXD0_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD0_RX_CDR_TEMP_TRACK_EN_MUXD0_BF_DEF (0x00000001)

#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD0_RX_CDR_FINE2DTR_RATIO_MUXD0_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD0_RX_CDR_FINE2DTR_RATIO_MUXD0_BF_WID ( 6)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD0_RX_CDR_FINE2DTR_RATIO_MUXD0_BF_MSK (0x0000007E)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD0_RX_CDR_FINE2DTR_RATIO_MUXD0_BF_DEF (0x00000026)

#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD0_RX_CDR_SSC_TRACK_EN_MUXD0_BF_OFF ( 7)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD0_RX_CDR_SSC_TRACK_EN_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD0_RX_CDR_SSC_TRACK_EN_MUXD0_BF_MSK (0x00000080)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD0_RX_CDR_SSC_TRACK_EN_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD0_RX_CDR_CAP_FILTER_MUXD0_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD0_RX_CDR_CAP_FILTER_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD0_RX_CDR_CAP_FILTER_MUXD0_BF_MSK (0x00000100)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD0_RX_CDR_CAP_FILTER_MUXD0_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_TEMP_TRACKING_MUXD1 register description at address offset 0x4e0
  *
  * Register default value:        0x00000027
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_temp_tracking_muxd1
  * rx_cdr_temp_tracking
  */

typedef union {
  struct {
    uint32_t RX_CDR_TEMP_TRACK_EN_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t RX_CDR_FINE2DTR_RATIO_MUXD1 : 6;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x13"
    uint32_t RX_CDR_SSC_TRACK_EN_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t RX_CDR_CAPTURE_FILTER_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_temp_tracking_muxd1_reg_t;

#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD1_DEFAULT (0x00000027U)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD1_RD_MASK (0x000001ffU)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD1_WR_MASK (0x000001ffU)


#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD1_RX_CDR_TEMP_TRACK_EN_MUXD1_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD1_RX_CDR_TEMP_TRACK_EN_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD1_RX_CDR_TEMP_TRACK_EN_MUXD1_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD1_RX_CDR_TEMP_TRACK_EN_MUXD1_BF_DEF (0x00000001)

#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD1_RX_CDR_FINE2DTR_RATIO_MUXD1_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD1_RX_CDR_FINE2DTR_RATIO_MUXD1_BF_WID ( 6)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD1_RX_CDR_FINE2DTR_RATIO_MUXD1_BF_MSK (0x0000007E)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD1_RX_CDR_FINE2DTR_RATIO_MUXD1_BF_DEF (0x00000026)

#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD1_RX_CDR_SSC_TRACK_EN_MUXD1_BF_OFF ( 7)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD1_RX_CDR_SSC_TRACK_EN_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD1_RX_CDR_SSC_TRACK_EN_MUXD1_BF_MSK (0x00000080)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD1_RX_CDR_SSC_TRACK_EN_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD1_RX_CDR_CAP_FILTER_MUXD1_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD1_RX_CDR_CAP_FILTER_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD1_RX_CDR_CAP_FILTER_MUXD1_BF_MSK (0x00000100)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD1_RX_CDR_CAP_FILTER_MUXD1_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_TEMP_TRACKING_MUXD2 register description at address offset 0x4e4
  *
  * Register default value:        0x00000027
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_temp_tracking_muxd2
  * rx_cdr_temp_tracking
  */

typedef union {
  struct {
    uint32_t RX_CDR_TEMP_TRACK_EN_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t RX_CDR_FINE2DTR_RATIO_MUXD2 : 6;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x13"
    uint32_t RX_CDR_SSC_TRACK_EN_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t RX_CDR_CAPTURE_FILTER_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_temp_tracking_muxd2_reg_t;

#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD2_DEFAULT (0x00000027U)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD2_RD_MASK (0x000001ffU)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD2_WR_MASK (0x000001ffU)


#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD2_RX_CDR_TEMP_TRACK_EN_MUXD2_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD2_RX_CDR_TEMP_TRACK_EN_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD2_RX_CDR_TEMP_TRACK_EN_MUXD2_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD2_RX_CDR_TEMP_TRACK_EN_MUXD2_BF_DEF (0x00000001)

#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD2_RX_CDR_FINE2DTR_RATIO_MUXD2_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD2_RX_CDR_FINE2DTR_RATIO_MUXD2_BF_WID ( 6)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD2_RX_CDR_FINE2DTR_RATIO_MUXD2_BF_MSK (0x0000007E)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD2_RX_CDR_FINE2DTR_RATIO_MUXD2_BF_DEF (0x00000026)

#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD2_RX_CDR_SSC_TRACK_EN_MUXD2_BF_OFF ( 7)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD2_RX_CDR_SSC_TRACK_EN_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD2_RX_CDR_SSC_TRACK_EN_MUXD2_BF_MSK (0x00000080)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD2_RX_CDR_SSC_TRACK_EN_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD2_RX_CDR_CAP_FILTER_MUXD2_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD2_RX_CDR_CAP_FILTER_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD2_RX_CDR_CAP_FILTER_MUXD2_BF_MSK (0x00000100)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD2_RX_CDR_CAP_FILTER_MUXD2_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_TEMP_TRACKING_MUXD3 register description at address offset 0x4e8
  *
  * Register default value:        0x00000027
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_temp_tracking_muxd3
  * rx_cdr_temp_tracking
  */

typedef union {
  struct {
    uint32_t RX_CDR_TEMP_TRACK_EN_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t RX_CDR_FINE2DTR_RATIO_MUXD3 : 6;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x13"
    uint32_t RX_CDR_SSC_TRACK_EN_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t RX_CDR_CAPTURE_FILTER_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_temp_tracking_muxd3_reg_t;

#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD3_DEFAULT (0x00000027U)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD3_RD_MASK (0x000001ffU)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD3_WR_MASK (0x000001ffU)


#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD3_RX_CDR_TEMP_TRACK_EN_MUXD3_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD3_RX_CDR_TEMP_TRACK_EN_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD3_RX_CDR_TEMP_TRACK_EN_MUXD3_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD3_RX_CDR_TEMP_TRACK_EN_MUXD3_BF_DEF (0x00000001)

#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD3_RX_CDR_FINE2DTR_RATIO_MUXD3_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD3_RX_CDR_FINE2DTR_RATIO_MUXD3_BF_WID ( 6)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD3_RX_CDR_FINE2DTR_RATIO_MUXD3_BF_MSK (0x0000007E)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD3_RX_CDR_FINE2DTR_RATIO_MUXD3_BF_DEF (0x00000026)

#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD3_RX_CDR_SSC_TRACK_EN_MUXD3_BF_OFF ( 7)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD3_RX_CDR_SSC_TRACK_EN_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD3_RX_CDR_SSC_TRACK_EN_MUXD3_BF_MSK (0x00000080)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD3_RX_CDR_SSC_TRACK_EN_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD3_RX_CDR_CAP_FILTER_MUXD3_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD3_RX_CDR_CAP_FILTER_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD3_RX_CDR_CAP_FILTER_MUXD3_BF_MSK (0x00000100)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD3_RX_CDR_CAP_FILTER_MUXD3_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_TEMP_TRACKING_MUXD4 register description at address offset 0x4ec
  *
  * Register default value:        0x00000027
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_temp_tracking_muxd4
  * rx_cdr_temp_tracking
  */

typedef union {
  struct {
    uint32_t RX_CDR_TEMP_TRACK_EN_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t RX_CDR_FINE2DTR_RATIO_MUXD4 : 6;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x13"
    uint32_t RX_CDR_SSC_TRACK_EN_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t RX_CDR_CAPTURE_FILTER_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_temp_tracking_muxd4_reg_t;

#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD4_DEFAULT (0x00000027U)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD4_RD_MASK (0x000001ffU)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD4_WR_MASK (0x000001ffU)


#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD4_RX_CDR_TEMP_TRACK_EN_MUXD4_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD4_RX_CDR_TEMP_TRACK_EN_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD4_RX_CDR_TEMP_TRACK_EN_MUXD4_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD4_RX_CDR_TEMP_TRACK_EN_MUXD4_BF_DEF (0x00000001)

#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD4_RX_CDR_FINE2DTR_RATIO_MUXD4_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD4_RX_CDR_FINE2DTR_RATIO_MUXD4_BF_WID ( 6)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD4_RX_CDR_FINE2DTR_RATIO_MUXD4_BF_MSK (0x0000007E)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD4_RX_CDR_FINE2DTR_RATIO_MUXD4_BF_DEF (0x00000026)

#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD4_RX_CDR_SSC_TRACK_EN_MUXD4_BF_OFF ( 7)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD4_RX_CDR_SSC_TRACK_EN_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD4_RX_CDR_SSC_TRACK_EN_MUXD4_BF_MSK (0x00000080)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD4_RX_CDR_SSC_TRACK_EN_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD4_RX_CDR_CAP_FILTER_MUXD4_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD4_RX_CDR_CAP_FILTER_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD4_RX_CDR_CAP_FILTER_MUXD4_BF_MSK (0x00000100)
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD4_RX_CDR_CAP_FILTER_MUXD4_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_MAIN_FSM_CONTROL_MUXD0 register description at address offset 0x4f0
  *
  * Register default value:        0x0000A0AE
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_main_fsm_control_muxd0
  * rx_cdr_main_fsm_control
  */

typedef union {
  struct {
    uint32_t RX_CDR_DCOSETTLE_MODE_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_DCOSETTLE_TIME_MUXD0 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x7"
    uint32_t RX_CDR_SKIP_STDC_CALIB_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="5" ResetValue="0x1"
    uint32_t RX_CDR_STAY_STDC_CALIB_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t RX_CDR_SKIP_VREG_CALIB_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="7" ResetValue="0x1"
    uint32_t RX_CDR_STAY_VREG_CALIB_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RX_CDR_SKIP_SC_CALIB_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t RX_CDR_STAY_SC_CALIB_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RX_CDR_SKIP_FIRST_AFC_CALIB_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t RX_CDR_STAY_FIRST_AFC_CALIB_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t RX_CDR_SKIP_KVCC_CALIB_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="13" ResetValue="0x1"
    uint32_t RX_CDR_STAY_KVCC_CALIB_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t RX_CDR_SKIP_SECOND_AFC_CALIB_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="15" ResetValue="0x1"
    uint32_t RX_CDR_STAY_SECOND_AFC_CALIB_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t RX_CDR_SKIP_FINE_FLL_CALIB_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t RX_CDR_STAY_FINE_FLL_CALIB_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t RX_CDR_SEC_AFC_CALIB_BINARY_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t RX_CDR_FULL_RANGE_AFC_SEL_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_main_fsm_ctrl_muxd0_reg_t;

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_DEFAULT (0x0000a0aeU)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RD_MASK (0x001fffffU)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_WR_MASK (0x001fffffU)


#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_DCOSETTLE_MODE_MUXD0_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_DCOSETTLE_MODE_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_DCOSETTLE_MODE_MUXD0_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_DCOSETTLE_MODE_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_DCOSETTLE_TIME_MUXD0_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_DCOSETTLE_TIME_MUXD0_BF_WID ( 4)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_DCOSETTLE_TIME_MUXD0_BF_MSK (0x0000001E)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_DCOSETTLE_TIME_MUXD0_BF_DEF (0x0000000E)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_SKIP_STDC_CALIB_MUXD0_BF_OFF ( 5)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_SKIP_STDC_CALIB_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_SKIP_STDC_CALIB_MUXD0_BF_MSK (0x00000020)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_SKIP_STDC_CALIB_MUXD0_BF_DEF (0x00000020)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_STAY_STDC_CALIB_MUXD0_BF_OFF ( 6)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_STAY_STDC_CALIB_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_STAY_STDC_CALIB_MUXD0_BF_MSK (0x00000040)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_STAY_STDC_CALIB_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_SKIP_VREG_CALIB_MUXD0_BF_OFF ( 7)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_SKIP_VREG_CALIB_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_SKIP_VREG_CALIB_MUXD0_BF_MSK (0x00000080)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_SKIP_VREG_CALIB_MUXD0_BF_DEF (0x00000080)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_STAY_VREG_CALIB_MUXD0_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_STAY_VREG_CALIB_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_STAY_VREG_CALIB_MUXD0_BF_MSK (0x00000100)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_STAY_VREG_CALIB_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_SKIP_SC_CALIB_MUXD0_BF_OFF ( 9)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_SKIP_SC_CALIB_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_SKIP_SC_CALIB_MUXD0_BF_MSK (0x00000200)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_SKIP_SC_CALIB_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_STAY_SC_CALIB_MUXD0_BF_OFF (10)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_STAY_SC_CALIB_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_STAY_SC_CALIB_MUXD0_BF_MSK (0x00000400)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_STAY_SC_CALIB_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_SKIP_FIRST_AFC_CALIB_MUXD0_BF_OFF (11)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_SKIP_FIRST_AFC_CALIB_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_SKIP_FIRST_AFC_CALIB_MUXD0_BF_MSK (0x00000800)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_SKIP_FIRST_AFC_CALIB_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_STAY_FIRST_AFC_CALIB_MUXD0_BF_OFF (12)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_STAY_FIRST_AFC_CALIB_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_STAY_FIRST_AFC_CALIB_MUXD0_BF_MSK (0x00001000)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_STAY_FIRST_AFC_CALIB_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_SKIP_KVCC_CALIB_MUXD0_BF_OFF (13)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_SKIP_KVCC_CALIB_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_SKIP_KVCC_CALIB_MUXD0_BF_MSK (0x00002000)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_SKIP_KVCC_CALIB_MUXD0_BF_DEF (0x00002000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_STAY_KVCC_CALIB_MUXD0_BF_OFF (14)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_STAY_KVCC_CALIB_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_STAY_KVCC_CALIB_MUXD0_BF_MSK (0x00004000)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_STAY_KVCC_CALIB_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_SKIP_SECOND_AFC_CALIB_MUXD0_BF_OFF (15)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_SKIP_SECOND_AFC_CALIB_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_SKIP_SECOND_AFC_CALIB_MUXD0_BF_MSK (0x00008000)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_SKIP_SECOND_AFC_CALIB_MUXD0_BF_DEF (0x00008000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_STAY_SECOND_AFC_CALIB_MUXD0_BF_OFF (16)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_STAY_SECOND_AFC_CALIB_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_STAY_SECOND_AFC_CALIB_MUXD0_BF_MSK (0x00010000)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_STAY_SECOND_AFC_CALIB_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_SKIP_FINE_FLL_CALIB_MUXD0_BF_OFF (17)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_SKIP_FINE_FLL_CALIB_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_SKIP_FINE_FLL_CALIB_MUXD0_BF_MSK (0x00020000)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_SKIP_FINE_FLL_CALIB_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_STAY_FINE_FLL_CALIB_MUXD0_BF_OFF (18)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_STAY_FINE_FLL_CALIB_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_STAY_FINE_FLL_CALIB_MUXD0_BF_MSK (0x00040000)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_STAY_FINE_FLL_CALIB_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_SEC_AFC_CALIB_BINARY_MUXD0_BF_OFF (19)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_SEC_AFC_CALIB_BINARY_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_SEC_AFC_CALIB_BINARY_MUXD0_BF_MSK (0x00080000)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_SEC_AFC_CALIB_BINARY_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_FULL_RANGE_AFC_SEL_MUXD0_BF_OFF (20)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_FULL_RANGE_AFC_SEL_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_FULL_RANGE_AFC_SEL_MUXD0_BF_MSK (0x00100000)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_RX_CDR_FULL_RANGE_AFC_SEL_MUXD0_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_MAIN_FSM_CONTROL_MUXD1 register description at address offset 0x4f4
  *
  * Register default value:        0x0000A0AE
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_main_fsm_control_muxd1
  * rx_cdr_main_fsm_control
  */

typedef union {
  struct {
    uint32_t RX_CDR_DCOSETTLE_MODE_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_DCOSETTLE_TIME_MUXD1 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x7"
    uint32_t RX_CDR_SKIP_STDC_CALIB_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="5" ResetValue="0x1"
    uint32_t RX_CDR_STAY_STDC_CALIB_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t RX_CDR_SKIP_VREG_CALIB_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="7" ResetValue="0x1"
    uint32_t RX_CDR_STAY_VREG_CALIB_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RX_CDR_SKIP_SC_CALIB_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t RX_CDR_STAY_SC_CALIB_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RX_CDR_SKIP_FIRST_AFC_CALIB_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t RX_CDR_STAY_FIRST_AFC_CALIB_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t RX_CDR_SKIP_KVCC_CALIB_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="13" ResetValue="0x1"
    uint32_t RX_CDR_STAY_KVCC_CALIB_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t RX_CDR_SKIP_SECOND_AFC_CALIB_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="15" ResetValue="0x1"
    uint32_t RX_CDR_STAY_SECOND_AFC_CALIB_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t RX_CDR_SKIP_FINE_FLL_CALIB_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t RX_CDR_STAY_FINE_FLL_CALIB_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t RX_CDR_SEC_AFC_CALIB_BINARY_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t RX_CDR_FULL_RANGE_AFC_SEL_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_main_fsm_ctrl_muxd1_reg_t;

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_DEFAULT (0x0000a0aeU)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RD_MASK (0x001fffffU)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_WR_MASK (0x001fffffU)


#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_DCOSETTLE_MODE_MUXD1_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_DCOSETTLE_MODE_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_DCOSETTLE_MODE_MUXD1_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_DCOSETTLE_MODE_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_DCOSETTLE_TIME_MUXD1_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_DCOSETTLE_TIME_MUXD1_BF_WID ( 4)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_DCOSETTLE_TIME_MUXD1_BF_MSK (0x0000001E)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_DCOSETTLE_TIME_MUXD1_BF_DEF (0x0000000E)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_SKIP_STDC_CALIB_MUXD1_BF_OFF ( 5)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_SKIP_STDC_CALIB_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_SKIP_STDC_CALIB_MUXD1_BF_MSK (0x00000020)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_SKIP_STDC_CALIB_MUXD1_BF_DEF (0x00000020)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_STAY_STDC_CALIB_MUXD1_BF_OFF ( 6)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_STAY_STDC_CALIB_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_STAY_STDC_CALIB_MUXD1_BF_MSK (0x00000040)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_STAY_STDC_CALIB_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_SKIP_VREG_CALIB_MUXD1_BF_OFF ( 7)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_SKIP_VREG_CALIB_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_SKIP_VREG_CALIB_MUXD1_BF_MSK (0x00000080)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_SKIP_VREG_CALIB_MUXD1_BF_DEF (0x00000080)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_STAY_VREG_CALIB_MUXD1_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_STAY_VREG_CALIB_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_STAY_VREG_CALIB_MUXD1_BF_MSK (0x00000100)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_STAY_VREG_CALIB_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_SKIP_SC_CALIB_MUXD1_BF_OFF ( 9)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_SKIP_SC_CALIB_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_SKIP_SC_CALIB_MUXD1_BF_MSK (0x00000200)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_SKIP_SC_CALIB_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_STAY_SC_CALIB_MUXD1_BF_OFF (10)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_STAY_SC_CALIB_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_STAY_SC_CALIB_MUXD1_BF_MSK (0x00000400)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_STAY_SC_CALIB_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_SKIP_FIRST_AFC_CALIB_MUXD1_BF_OFF (11)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_SKIP_FIRST_AFC_CALIB_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_SKIP_FIRST_AFC_CALIB_MUXD1_BF_MSK (0x00000800)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_SKIP_FIRST_AFC_CALIB_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_STAY_FIRST_AFC_CALIB_MUXD1_BF_OFF (12)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_STAY_FIRST_AFC_CALIB_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_STAY_FIRST_AFC_CALIB_MUXD1_BF_MSK (0x00001000)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_STAY_FIRST_AFC_CALIB_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_SKIP_KVCC_CALIB_MUXD1_BF_OFF (13)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_SKIP_KVCC_CALIB_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_SKIP_KVCC_CALIB_MUXD1_BF_MSK (0x00002000)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_SKIP_KVCC_CALIB_MUXD1_BF_DEF (0x00002000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_STAY_KVCC_CALIB_MUXD1_BF_OFF (14)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_STAY_KVCC_CALIB_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_STAY_KVCC_CALIB_MUXD1_BF_MSK (0x00004000)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_STAY_KVCC_CALIB_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_SKIP_SECOND_AFC_CALIB_MUXD1_BF_OFF (15)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_SKIP_SECOND_AFC_CALIB_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_SKIP_SECOND_AFC_CALIB_MUXD1_BF_MSK (0x00008000)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_SKIP_SECOND_AFC_CALIB_MUXD1_BF_DEF (0x00008000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_STAY_SECOND_AFC_CALIB_MUXD1_BF_OFF (16)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_STAY_SECOND_AFC_CALIB_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_STAY_SECOND_AFC_CALIB_MUXD1_BF_MSK (0x00010000)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_STAY_SECOND_AFC_CALIB_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_SKIP_FINE_FLL_CALIB_MUXD1_BF_OFF (17)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_SKIP_FINE_FLL_CALIB_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_SKIP_FINE_FLL_CALIB_MUXD1_BF_MSK (0x00020000)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_SKIP_FINE_FLL_CALIB_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_STAY_FINE_FLL_CALIB_MUXD1_BF_OFF (18)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_STAY_FINE_FLL_CALIB_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_STAY_FINE_FLL_CALIB_MUXD1_BF_MSK (0x00040000)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_STAY_FINE_FLL_CALIB_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_SEC_AFC_CALIB_BINARY_MUXD1_BF_OFF (19)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_SEC_AFC_CALIB_BINARY_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_SEC_AFC_CALIB_BINARY_MUXD1_BF_MSK (0x00080000)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_SEC_AFC_CALIB_BINARY_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_FULL_RANGE_AFC_SEL_MUXD1_BF_OFF (20)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_FULL_RANGE_AFC_SEL_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_FULL_RANGE_AFC_SEL_MUXD1_BF_MSK (0x00100000)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_RX_CDR_FULL_RANGE_AFC_SEL_MUXD1_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_MAIN_FSM_CONTROL_MUXD2 register description at address offset 0x4f8
  *
  * Register default value:        0x0000A0AE
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_main_fsm_control_muxd2
  * rx_cdr_main_fsm_control
  */

typedef union {
  struct {
    uint32_t RX_CDR_DCOSETTLE_MODE_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_DCOSETTLE_TIME_MUXD2 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x7"
    uint32_t RX_CDR_SKIP_STDC_CALIB_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="5" ResetValue="0x1"
    uint32_t RX_CDR_STAY_STDC_CALIB_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t RX_CDR_SKIP_VREG_CALIB_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="7" ResetValue="0x1"
    uint32_t RX_CDR_STAY_VREG_CALIB_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RX_CDR_SKIP_SC_CALIB_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t RX_CDR_STAY_SC_CALIB_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RX_CDR_SKIP_FIRST_AFC_CALIB_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t RX_CDR_STAY_FIRST_AFC_CALIB_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t RX_CDR_SKIP_KVCC_CALIB_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="13" ResetValue="0x1"
    uint32_t RX_CDR_STAY_KVCC_CALIB_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t RX_CDR_SKIP_SECOND_AFC_CALIB_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="15" ResetValue="0x1"
    uint32_t RX_CDR_STAY_SECOND_AFC_CALIB_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t RX_CDR_SKIP_FINE_FLL_CALIB_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t RX_CDR_STAY_FINE_FLL_CALIB_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t RX_CDR_SEC_AFC_CALIB_BINARY_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t RX_CDR_FULL_RANGE_AFC_SEL_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_main_fsm_ctrl_muxd2_reg_t;

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_DEFAULT (0x0000a0aeU)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RD_MASK (0x001fffffU)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_WR_MASK (0x001fffffU)


#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_DCOSETTLE_MODE_MUXD2_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_DCOSETTLE_MODE_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_DCOSETTLE_MODE_MUXD2_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_DCOSETTLE_MODE_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_DCOSETTLE_TIME_MUXD2_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_DCOSETTLE_TIME_MUXD2_BF_WID ( 4)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_DCOSETTLE_TIME_MUXD2_BF_MSK (0x0000001E)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_DCOSETTLE_TIME_MUXD2_BF_DEF (0x0000000E)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_SKIP_STDC_CALIB_MUXD2_BF_OFF ( 5)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_SKIP_STDC_CALIB_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_SKIP_STDC_CALIB_MUXD2_BF_MSK (0x00000020)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_SKIP_STDC_CALIB_MUXD2_BF_DEF (0x00000020)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_STAY_STDC_CALIB_MUXD2_BF_OFF ( 6)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_STAY_STDC_CALIB_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_STAY_STDC_CALIB_MUXD2_BF_MSK (0x00000040)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_STAY_STDC_CALIB_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_SKIP_VREG_CALIB_MUXD2_BF_OFF ( 7)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_SKIP_VREG_CALIB_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_SKIP_VREG_CALIB_MUXD2_BF_MSK (0x00000080)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_SKIP_VREG_CALIB_MUXD2_BF_DEF (0x00000080)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_STAY_VREG_CALIB_MUXD2_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_STAY_VREG_CALIB_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_STAY_VREG_CALIB_MUXD2_BF_MSK (0x00000100)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_STAY_VREG_CALIB_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_SKIP_SC_CALIB_MUXD2_BF_OFF ( 9)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_SKIP_SC_CALIB_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_SKIP_SC_CALIB_MUXD2_BF_MSK (0x00000200)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_SKIP_SC_CALIB_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_STAY_SC_CALIB_MUXD2_BF_OFF (10)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_STAY_SC_CALIB_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_STAY_SC_CALIB_MUXD2_BF_MSK (0x00000400)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_STAY_SC_CALIB_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_SKIP_FIRST_AFC_CALIB_MUXD2_BF_OFF (11)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_SKIP_FIRST_AFC_CALIB_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_SKIP_FIRST_AFC_CALIB_MUXD2_BF_MSK (0x00000800)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_SKIP_FIRST_AFC_CALIB_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_STAY_FIRST_AFC_CALIB_MUXD2_BF_OFF (12)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_STAY_FIRST_AFC_CALIB_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_STAY_FIRST_AFC_CALIB_MUXD2_BF_MSK (0x00001000)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_STAY_FIRST_AFC_CALIB_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_SKIP_KVCC_CALIB_MUXD2_BF_OFF (13)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_SKIP_KVCC_CALIB_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_SKIP_KVCC_CALIB_MUXD2_BF_MSK (0x00002000)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_SKIP_KVCC_CALIB_MUXD2_BF_DEF (0x00002000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_STAY_KVCC_CALIB_MUXD2_BF_OFF (14)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_STAY_KVCC_CALIB_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_STAY_KVCC_CALIB_MUXD2_BF_MSK (0x00004000)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_STAY_KVCC_CALIB_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_SKIP_SECOND_AFC_CALIB_MUXD2_BF_OFF (15)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_SKIP_SECOND_AFC_CALIB_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_SKIP_SECOND_AFC_CALIB_MUXD2_BF_MSK (0x00008000)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_SKIP_SECOND_AFC_CALIB_MUXD2_BF_DEF (0x00008000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_STAY_SECOND_AFC_CALIB_MUXD2_BF_OFF (16)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_STAY_SECOND_AFC_CALIB_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_STAY_SECOND_AFC_CALIB_MUXD2_BF_MSK (0x00010000)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_STAY_SECOND_AFC_CALIB_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_SKIP_FINE_FLL_CALIB_MUXD2_BF_OFF (17)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_SKIP_FINE_FLL_CALIB_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_SKIP_FINE_FLL_CALIB_MUXD2_BF_MSK (0x00020000)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_SKIP_FINE_FLL_CALIB_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_STAY_FINE_FLL_CALIB_MUXD2_BF_OFF (18)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_STAY_FINE_FLL_CALIB_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_STAY_FINE_FLL_CALIB_MUXD2_BF_MSK (0x00040000)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_STAY_FINE_FLL_CALIB_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_SEC_AFC_CALIB_BINARY_MUXD2_BF_OFF (19)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_SEC_AFC_CALIB_BINARY_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_SEC_AFC_CALIB_BINARY_MUXD2_BF_MSK (0x00080000)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_SEC_AFC_CALIB_BINARY_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_FULL_RANGE_AFC_SEL_MUXD2_BF_OFF (20)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_FULL_RANGE_AFC_SEL_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_FULL_RANGE_AFC_SEL_MUXD2_BF_MSK (0x00100000)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_RX_CDR_FULL_RANGE_AFC_SEL_MUXD2_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_MAIN_FSM_CONTROL_MUXD3 register description at address offset 0x4fc
  *
  * Register default value:        0x0000A0AE
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_main_fsm_control_muxd3
  * rx_cdr_main_fsm_control
  */

typedef union {
  struct {
    uint32_t RX_CDR_DCOSETTLE_MODE_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_DCOSETTLE_TIME_MUXD3 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x7"
    uint32_t RX_CDR_SKIP_STDC_CALIB_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="5" ResetValue="0x1"
    uint32_t RX_CDR_STAY_STDC_CALIB_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t RX_CDR_SKIP_VREG_CALIB_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="7" ResetValue="0x1"
    uint32_t RX_CDR_STAY_VREG_CALIB_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RX_CDR_SKIP_SC_CALIB_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t RX_CDR_STAY_SC_CALIB_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RX_CDR_SKIP_FIRST_AFC_CALIB_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t RX_CDR_STAY_FIRST_AFC_CALIB_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t RX_CDR_SKIP_KVCC_CALIB_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="13" ResetValue="0x1"
    uint32_t RX_CDR_STAY_KVCC_CALIB_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t RX_CDR_SKIP_SECOND_AFC_CALIB_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="15" ResetValue="0x1"
    uint32_t RX_CDR_STAY_SECOND_AFC_CALIB_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t RX_CDR_SKIP_FINE_FLL_CALIB_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t RX_CDR_STAY_FINE_FLL_CALIB_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t RX_CDR_SEC_AFC_CALIB_BINARY_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t RX_CDR_FULL_RANGE_AFC_SEL_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_main_fsm_ctrl_muxd3_reg_t;

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_DEFAULT (0x0000a0aeU)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RD_MASK (0x001fffffU)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_WR_MASK (0x001fffffU)


#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_DCOSETTLE_MODE_MUXD3_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_DCOSETTLE_MODE_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_DCOSETTLE_MODE_MUXD3_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_DCOSETTLE_MODE_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_DCOSETTLE_TIME_MUXD3_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_DCOSETTLE_TIME_MUXD3_BF_WID ( 4)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_DCOSETTLE_TIME_MUXD3_BF_MSK (0x0000001E)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_DCOSETTLE_TIME_MUXD3_BF_DEF (0x0000000E)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_SKIP_STDC_CALIB_MUXD3_BF_OFF ( 5)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_SKIP_STDC_CALIB_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_SKIP_STDC_CALIB_MUXD3_BF_MSK (0x00000020)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_SKIP_STDC_CALIB_MUXD3_BF_DEF (0x00000020)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_STAY_STDC_CALIB_MUXD3_BF_OFF ( 6)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_STAY_STDC_CALIB_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_STAY_STDC_CALIB_MUXD3_BF_MSK (0x00000040)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_STAY_STDC_CALIB_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_SKIP_VREG_CALIB_MUXD3_BF_OFF ( 7)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_SKIP_VREG_CALIB_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_SKIP_VREG_CALIB_MUXD3_BF_MSK (0x00000080)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_SKIP_VREG_CALIB_MUXD3_BF_DEF (0x00000080)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_STAY_VREG_CALIB_MUXD3_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_STAY_VREG_CALIB_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_STAY_VREG_CALIB_MUXD3_BF_MSK (0x00000100)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_STAY_VREG_CALIB_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_SKIP_SC_CALIB_MUXD3_BF_OFF ( 9)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_SKIP_SC_CALIB_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_SKIP_SC_CALIB_MUXD3_BF_MSK (0x00000200)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_SKIP_SC_CALIB_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_STAY_SC_CALIB_MUXD3_BF_OFF (10)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_STAY_SC_CALIB_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_STAY_SC_CALIB_MUXD3_BF_MSK (0x00000400)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_STAY_SC_CALIB_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_SKIP_FIRST_AFC_CALIB_MUXD3_BF_OFF (11)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_SKIP_FIRST_AFC_CALIB_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_SKIP_FIRST_AFC_CALIB_MUXD3_BF_MSK (0x00000800)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_SKIP_FIRST_AFC_CALIB_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_STAY_FIRST_AFC_CALIB_MUXD3_BF_OFF (12)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_STAY_FIRST_AFC_CALIB_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_STAY_FIRST_AFC_CALIB_MUXD3_BF_MSK (0x00001000)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_STAY_FIRST_AFC_CALIB_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_SKIP_KVCC_CALIB_MUXD3_BF_OFF (13)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_SKIP_KVCC_CALIB_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_SKIP_KVCC_CALIB_MUXD3_BF_MSK (0x00002000)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_SKIP_KVCC_CALIB_MUXD3_BF_DEF (0x00002000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_STAY_KVCC_CALIB_MUXD3_BF_OFF (14)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_STAY_KVCC_CALIB_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_STAY_KVCC_CALIB_MUXD3_BF_MSK (0x00004000)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_STAY_KVCC_CALIB_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_SKIP_SECOND_AFC_CALIB_MUXD3_BF_OFF (15)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_SKIP_SECOND_AFC_CALIB_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_SKIP_SECOND_AFC_CALIB_MUXD3_BF_MSK (0x00008000)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_SKIP_SECOND_AFC_CALIB_MUXD3_BF_DEF (0x00008000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_STAY_SECOND_AFC_CALIB_MUXD3_BF_OFF (16)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_STAY_SECOND_AFC_CALIB_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_STAY_SECOND_AFC_CALIB_MUXD3_BF_MSK (0x00010000)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_STAY_SECOND_AFC_CALIB_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_SKIP_FINE_FLL_CALIB_MUXD3_BF_OFF (17)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_SKIP_FINE_FLL_CALIB_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_SKIP_FINE_FLL_CALIB_MUXD3_BF_MSK (0x00020000)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_SKIP_FINE_FLL_CALIB_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_STAY_FINE_FLL_CALIB_MUXD3_BF_OFF (18)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_STAY_FINE_FLL_CALIB_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_STAY_FINE_FLL_CALIB_MUXD3_BF_MSK (0x00040000)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_STAY_FINE_FLL_CALIB_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_SEC_AFC_CALIB_BINARY_MUXD3_BF_OFF (19)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_SEC_AFC_CALIB_BINARY_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_SEC_AFC_CALIB_BINARY_MUXD3_BF_MSK (0x00080000)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_SEC_AFC_CALIB_BINARY_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_FULL_RANGE_AFC_SEL_MUXD3_BF_OFF (20)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_FULL_RANGE_AFC_SEL_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_FULL_RANGE_AFC_SEL_MUXD3_BF_MSK (0x00100000)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_RX_CDR_FULL_RANGE_AFC_SEL_MUXD3_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_MAIN_FSM_CONTROL_MUXD4 register description at address offset 0x500
  *
  * Register default value:        0x0000A0AE
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_main_fsm_control_muxd4
  * rx_cdr_main_fsm_control
  */

typedef union {
  struct {
    uint32_t RX_CDR_DCOSETTLE_MODE_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_DCOSETTLE_TIME_MUXD4 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x7"
    uint32_t RX_CDR_SKIP_STDC_CALIB_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="5" ResetValue="0x1"
    uint32_t RX_CDR_STAY_STDC_CALIB_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t RX_CDR_SKIP_VREG_CALIB_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="7" ResetValue="0x1"
    uint32_t RX_CDR_STAY_VREG_CALIB_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RX_CDR_SKIP_SC_CALIB_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t RX_CDR_STAY_SC_CALIB_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RX_CDR_SKIP_FIRST_AFC_CALIB_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t RX_CDR_STAY_FIRST_AFC_CALIB_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t RX_CDR_SKIP_KVCC_CALIB_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="13" ResetValue="0x1"
    uint32_t RX_CDR_STAY_KVCC_CALIB_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t RX_CDR_SKIP_SECOND_AFC_CALIB_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="15" ResetValue="0x1"
    uint32_t RX_CDR_STAY_SECOND_AFC_CALIB_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t RX_CDR_SKIP_FINE_FLL_CALIB_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t RX_CDR_STAY_FINE_FLL_CALIB_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t RX_CDR_SEC_AFC_CALIB_BINARY_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t RX_CDR_FULL_RANGE_AFC_SEL_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_main_fsm_ctrl_muxd4_reg_t;

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_DEFAULT (0x0000a0aeU)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RD_MASK (0x001fffffU)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_WR_MASK (0x001fffffU)


#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_DCOSETTLE_MODE_MUXD4_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_DCOSETTLE_MODE_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_DCOSETTLE_MODE_MUXD4_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_DCOSETTLE_MODE_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_DCOSETTLE_TIME_MUXD4_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_DCOSETTLE_TIME_MUXD4_BF_WID ( 4)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_DCOSETTLE_TIME_MUXD4_BF_MSK (0x0000001E)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_DCOSETTLE_TIME_MUXD4_BF_DEF (0x0000000E)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_SKIP_STDC_CALIB_MUXD4_BF_OFF ( 5)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_SKIP_STDC_CALIB_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_SKIP_STDC_CALIB_MUXD4_BF_MSK (0x00000020)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_SKIP_STDC_CALIB_MUXD4_BF_DEF (0x00000020)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_STAY_STDC_CALIB_MUXD4_BF_OFF ( 6)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_STAY_STDC_CALIB_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_STAY_STDC_CALIB_MUXD4_BF_MSK (0x00000040)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_STAY_STDC_CALIB_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_SKIP_VREG_CALIB_MUXD4_BF_OFF ( 7)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_SKIP_VREG_CALIB_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_SKIP_VREG_CALIB_MUXD4_BF_MSK (0x00000080)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_SKIP_VREG_CALIB_MUXD4_BF_DEF (0x00000080)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_STAY_VREG_CALIB_MUXD4_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_STAY_VREG_CALIB_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_STAY_VREG_CALIB_MUXD4_BF_MSK (0x00000100)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_STAY_VREG_CALIB_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_SKIP_SC_CALIB_MUXD4_BF_OFF ( 9)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_SKIP_SC_CALIB_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_SKIP_SC_CALIB_MUXD4_BF_MSK (0x00000200)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_SKIP_SC_CALIB_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_STAY_SC_CALIB_MUXD4_BF_OFF (10)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_STAY_SC_CALIB_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_STAY_SC_CALIB_MUXD4_BF_MSK (0x00000400)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_STAY_SC_CALIB_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_SKIP_FIRST_AFC_CALIB_MUXD4_BF_OFF (11)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_SKIP_FIRST_AFC_CALIB_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_SKIP_FIRST_AFC_CALIB_MUXD4_BF_MSK (0x00000800)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_SKIP_FIRST_AFC_CALIB_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_STAY_FIRST_AFC_CALIB_MUXD4_BF_OFF (12)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_STAY_FIRST_AFC_CALIB_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_STAY_FIRST_AFC_CALIB_MUXD4_BF_MSK (0x00001000)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_STAY_FIRST_AFC_CALIB_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_SKIP_KVCC_CALIB_MUXD4_BF_OFF (13)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_SKIP_KVCC_CALIB_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_SKIP_KVCC_CALIB_MUXD4_BF_MSK (0x00002000)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_SKIP_KVCC_CALIB_MUXD4_BF_DEF (0x00002000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_STAY_KVCC_CALIB_MUXD4_BF_OFF (14)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_STAY_KVCC_CALIB_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_STAY_KVCC_CALIB_MUXD4_BF_MSK (0x00004000)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_STAY_KVCC_CALIB_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_SKIP_SECOND_AFC_CALIB_MUXD4_BF_OFF (15)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_SKIP_SECOND_AFC_CALIB_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_SKIP_SECOND_AFC_CALIB_MUXD4_BF_MSK (0x00008000)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_SKIP_SECOND_AFC_CALIB_MUXD4_BF_DEF (0x00008000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_STAY_SECOND_AFC_CALIB_MUXD4_BF_OFF (16)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_STAY_SECOND_AFC_CALIB_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_STAY_SECOND_AFC_CALIB_MUXD4_BF_MSK (0x00010000)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_STAY_SECOND_AFC_CALIB_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_SKIP_FINE_FLL_CALIB_MUXD4_BF_OFF (17)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_SKIP_FINE_FLL_CALIB_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_SKIP_FINE_FLL_CALIB_MUXD4_BF_MSK (0x00020000)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_SKIP_FINE_FLL_CALIB_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_STAY_FINE_FLL_CALIB_MUXD4_BF_OFF (18)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_STAY_FINE_FLL_CALIB_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_STAY_FINE_FLL_CALIB_MUXD4_BF_MSK (0x00040000)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_STAY_FINE_FLL_CALIB_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_SEC_AFC_CALIB_BINARY_MUXD4_BF_OFF (19)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_SEC_AFC_CALIB_BINARY_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_SEC_AFC_CALIB_BINARY_MUXD4_BF_MSK (0x00080000)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_SEC_AFC_CALIB_BINARY_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_FULL_RANGE_AFC_SEL_MUXD4_BF_OFF (20)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_FULL_RANGE_AFC_SEL_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_FULL_RANGE_AFC_SEL_MUXD4_BF_MSK (0x00100000)
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_RX_CDR_FULL_RANGE_AFC_SEL_MUXD4_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_ANA_CONTROL1_MUXD0 register description at address offset 0x504
  *
  * Register default value:        0x08802705
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_ana_control1_muxd0
  * rx_cdr_ana_control1
  */

typedef union {
  struct {
    uint32_t RX_CDR_CLKOUTEN_CB_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t RX_CDR_CLKOUTEN_LANE_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RX_CDR_CB56_LANE32DIV_EN_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="2" ResetValue="0x1"
    uint32_t RX_CDR_10G_EN_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RX_CDR_PCS3334_DIVSEL_MUXD0 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RX_CDR_PCS3334DIV_EN_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t RX_CDR_CDR_BYPASS_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t RX_CDR_REFCLK2NEXTFAMILYDIV_EN_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1"
    uint32_t RX_CDR_REFCLK4LANEDIV_EN_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="9" ResetValue="0x1"
    uint32_t RX_CDR_SDDIV_EN_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x1"
    uint32_t RX_CDR_SDDIV_RATIO_MUXD0 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x4"
    uint32_t RX_CDR_SDDTR_CLK_SEL_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t RX_CDR_OBSMUX0_SEL_MUXD0 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RX_CDR_OBSMUX1_SEL_MUXD0 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t RX_CDR_PREDIV_RATIO_MUXD0 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="23" ResetValue="0x1"
    uint32_t RX_CDR_DCODIV2_TO_FBDIV_BYPASS_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="27" ResetValue="0x1"
    uint32_t RX_CDR_CLK2TXADCDIV_EN_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t RX_CDR_FB_DELAY_LINE_SEL_MUXD0 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_ana_ctrl1_muxd0_reg_t;

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_DEFAULT (0x08802705U)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RD_MASK (0x7fffffffU)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_WR_MASK (0x7fffffffU)


#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_CLKOUTEN_CB_MUXD0_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_CLKOUTEN_CB_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_CLKOUTEN_CB_MUXD0_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_CLKOUTEN_CB_MUXD0_BF_DEF (0x00000001)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_CLKOUTEN_LANE_MUXD0_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_CLKOUTEN_LANE_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_CLKOUTEN_LANE_MUXD0_BF_MSK (0x00000002)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_CLKOUTEN_LANE_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_CB56_LANE32DIV_EN_MUXD0_BF_OFF ( 2)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_CB56_LANE32DIV_EN_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_CB56_LANE32DIV_EN_MUXD0_BF_MSK (0x00000004)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_CB56_LANE32DIV_EN_MUXD0_BF_DEF (0x00000004)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_10G_EN_MUXD0_BF_OFF ( 3)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_10G_EN_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_10G_EN_MUXD0_BF_MSK (0x00000008)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_10G_EN_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_PCS3334_DIVSEL_MUXD0_BF_OFF ( 4)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_PCS3334_DIVSEL_MUXD0_BF_WID ( 2)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_PCS3334_DIVSEL_MUXD0_BF_MSK (0x00000030)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_PCS3334_DIVSEL_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_PCS3334DIV_EN_MUXD0_BF_OFF ( 6)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_PCS3334DIV_EN_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_PCS3334DIV_EN_MUXD0_BF_MSK (0x00000040)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_PCS3334DIV_EN_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_BYP_MUXD0_BF_OFF ( 7)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_BYP_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_BYP_MUXD0_BF_MSK (0x00000080)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_BYP_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_REFCLK2NEXTFAMILYDIV_EN_MUXD0_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_REFCLK2NEXTFAMILYDIV_EN_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_REFCLK2NEXTFAMILYDIV_EN_MUXD0_BF_MSK (0x00000100)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_REFCLK2NEXTFAMILYDIV_EN_MUXD0_BF_DEF (0x00000100)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_REFCLK4LANEDIV_EN_MUXD0_BF_OFF ( 9)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_REFCLK4LANEDIV_EN_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_REFCLK4LANEDIV_EN_MUXD0_BF_MSK (0x00000200)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_REFCLK4LANEDIV_EN_MUXD0_BF_DEF (0x00000200)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_SDDIV_EN_MUXD0_BF_OFF (10)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_SDDIV_EN_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_SDDIV_EN_MUXD0_BF_MSK (0x00000400)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_SDDIV_EN_MUXD0_BF_DEF (0x00000400)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_SDDIV_RATIO_MUXD0_BF_OFF (11)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_SDDIV_RATIO_MUXD0_BF_WID ( 3)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_SDDIV_RATIO_MUXD0_BF_MSK (0x00003800)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_SDDIV_RATIO_MUXD0_BF_DEF (0x00002000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_SDDTR_CLK_SEL_MUXD0_BF_OFF (14)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_SDDTR_CLK_SEL_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_SDDTR_CLK_SEL_MUXD0_BF_MSK (0x00004000)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_SDDTR_CLK_SEL_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_OBSMUX0_SEL_MUXD0_BF_OFF (15)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_OBSMUX0_SEL_MUXD0_BF_WID ( 4)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_OBSMUX0_SEL_MUXD0_BF_MSK (0x00078000)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_OBSMUX0_SEL_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_OBSMUX1_SEL_MUXD0_BF_OFF (19)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_OBSMUX1_SEL_MUXD0_BF_WID ( 4)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_OBSMUX1_SEL_MUXD0_BF_MSK (0x00780000)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_OBSMUX1_SEL_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_PREDIV_RATIO_MUXD0_BF_OFF (23)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_PREDIV_RATIO_MUXD0_BF_WID ( 4)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_PREDIV_RATIO_MUXD0_BF_MSK (0x07800000)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_PREDIV_RATIO_MUXD0_BF_DEF (0x00800000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_DCODIV2_TO_FBDIV_BYP_MUXD0_BF_OFF (27)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_DCODIV2_TO_FBDIV_BYP_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_DCODIV2_TO_FBDIV_BYP_MUXD0_BF_MSK (0x08000000)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_DCODIV2_TO_FBDIV_BYP_MUXD0_BF_DEF (0x08000000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_CLK2TXADCDIV_EN_MUXD0_BF_OFF (28)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_CLK2TXADCDIV_EN_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_CLK2TXADCDIV_EN_MUXD0_BF_MSK (0x10000000)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_CLK2TXADCDIV_EN_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_FB_DELAY_LINE_SEL_MUXD0_BF_OFF (29)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_FB_DELAY_LINE_SEL_MUXD0_BF_WID ( 2)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_FB_DELAY_LINE_SEL_MUXD0_BF_MSK (0x60000000)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_RX_CDR_FB_DELAY_LINE_SEL_MUXD0_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_ANA_CONTROL1_MUXD1 register description at address offset 0x508
  *
  * Register default value:        0x08802705
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_ana_control1_muxd1
  * rx_cdr_ana_control1
  */

typedef union {
  struct {
    uint32_t RX_CDR_CLKOUTEN_CB_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t RX_CDR_CLKOUTEN_LANE_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RX_CDR_CB56_LANE32DIV_EN_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="2" ResetValue="0x1"
    uint32_t RX_CDR_10G_EN_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RX_CDR_PCS3334_DIVSEL_MUXD1 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RX_CDR_PCS3334DIV_EN_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t RX_CDR_CDR_BYPASS_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t RX_CDR_REFCLK2NEXTFAMILYDIV_EN_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1"
    uint32_t RX_CDR_REFCLK4LANEDIV_EN_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="9" ResetValue="0x1"
    uint32_t RX_CDR_SDDIV_EN_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x1"
    uint32_t RX_CDR_SDDIV_RATIO_MUXD1 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x4"
    uint32_t RX_CDR_SDDTR_CLK_SEL_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t RX_CDR_OBSMUX0_SEL_MUXD1 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RX_CDR_OBSMUX1_SEL_MUXD1 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t RX_CDR_PREDIV_RATIO_MUXD1 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="23" ResetValue="0x1"
    uint32_t RX_CDR_DCODIV2_TO_FBDIV_BYPASS_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="27" ResetValue="0x1"
    uint32_t RX_CDR_CLK2TXADCDIV_EN_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t RX_CDR_FB_DELAY_LINE_SEL_MUXD1 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_ana_ctrl1_muxd1_reg_t;

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_DEFAULT (0x08802705U)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RD_MASK (0x7fffffffU)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_WR_MASK (0x7fffffffU)


#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_CLKOUTEN_CB_MUXD1_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_CLKOUTEN_CB_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_CLKOUTEN_CB_MUXD1_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_CLKOUTEN_CB_MUXD1_BF_DEF (0x00000001)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_CLKOUTEN_LANE_MUXD1_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_CLKOUTEN_LANE_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_CLKOUTEN_LANE_MUXD1_BF_MSK (0x00000002)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_CLKOUTEN_LANE_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_CB56_LANE32DIV_EN_MUXD1_BF_OFF ( 2)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_CB56_LANE32DIV_EN_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_CB56_LANE32DIV_EN_MUXD1_BF_MSK (0x00000004)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_CB56_LANE32DIV_EN_MUXD1_BF_DEF (0x00000004)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_10G_EN_MUXD1_BF_OFF ( 3)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_10G_EN_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_10G_EN_MUXD1_BF_MSK (0x00000008)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_10G_EN_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_PCS3334_DIVSEL_MUXD1_BF_OFF ( 4)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_PCS3334_DIVSEL_MUXD1_BF_WID ( 2)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_PCS3334_DIVSEL_MUXD1_BF_MSK (0x00000030)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_PCS3334_DIVSEL_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_PCS3334DIV_EN_MUXD1_BF_OFF ( 6)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_PCS3334DIV_EN_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_PCS3334DIV_EN_MUXD1_BF_MSK (0x00000040)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_PCS3334DIV_EN_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_BYP_MUXD1_BF_OFF ( 7)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_BYP_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_BYP_MUXD1_BF_MSK (0x00000080)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_BYP_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_REFCLK2NEXTFAMILYDIV_EN_MUXD1_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_REFCLK2NEXTFAMILYDIV_EN_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_REFCLK2NEXTFAMILYDIV_EN_MUXD1_BF_MSK (0x00000100)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_REFCLK2NEXTFAMILYDIV_EN_MUXD1_BF_DEF (0x00000100)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_REFCLK4LANEDIV_EN_MUXD1_BF_OFF ( 9)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_REFCLK4LANEDIV_EN_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_REFCLK4LANEDIV_EN_MUXD1_BF_MSK (0x00000200)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_REFCLK4LANEDIV_EN_MUXD1_BF_DEF (0x00000200)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_SDDIV_EN_MUXD1_BF_OFF (10)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_SDDIV_EN_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_SDDIV_EN_MUXD1_BF_MSK (0x00000400)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_SDDIV_EN_MUXD1_BF_DEF (0x00000400)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_SDDIV_RATIO_MUXD1_BF_OFF (11)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_SDDIV_RATIO_MUXD1_BF_WID ( 3)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_SDDIV_RATIO_MUXD1_BF_MSK (0x00003800)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_SDDIV_RATIO_MUXD1_BF_DEF (0x00002000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_SDDTR_CLK_SEL_MUXD1_BF_OFF (14)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_SDDTR_CLK_SEL_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_SDDTR_CLK_SEL_MUXD1_BF_MSK (0x00004000)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_SDDTR_CLK_SEL_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_OBSMUX0_SEL_MUXD1_BF_OFF (15)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_OBSMUX0_SEL_MUXD1_BF_WID ( 4)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_OBSMUX0_SEL_MUXD1_BF_MSK (0x00078000)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_OBSMUX0_SEL_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_OBSMUX1_SEL_MUXD1_BF_OFF (19)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_OBSMUX1_SEL_MUXD1_BF_WID ( 4)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_OBSMUX1_SEL_MUXD1_BF_MSK (0x00780000)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_OBSMUX1_SEL_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_PREDIV_RATIO_MUXD1_BF_OFF (23)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_PREDIV_RATIO_MUXD1_BF_WID ( 4)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_PREDIV_RATIO_MUXD1_BF_MSK (0x07800000)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_PREDIV_RATIO_MUXD1_BF_DEF (0x00800000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_DCODIV2_TO_FBDIV_BYP_MUXD1_BF_OFF (27)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_DCODIV2_TO_FBDIV_BYP_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_DCODIV2_TO_FBDIV_BYP_MUXD1_BF_MSK (0x08000000)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_DCODIV2_TO_FBDIV_BYP_MUXD1_BF_DEF (0x08000000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_CLK2TXADCDIV_EN_MUXD1_BF_OFF (28)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_CLK2TXADCDIV_EN_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_CLK2TXADCDIV_EN_MUXD1_BF_MSK (0x10000000)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_CLK2TXADCDIV_EN_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_FB_DELAY_LINE_SEL_MUXD1_BF_OFF (29)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_FB_DELAY_LINE_SEL_MUXD1_BF_WID ( 2)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_FB_DELAY_LINE_SEL_MUXD1_BF_MSK (0x60000000)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_RX_CDR_FB_DELAY_LINE_SEL_MUXD1_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_ANA_CONTROL1_MUXD2 register description at address offset 0x50c
  *
  * Register default value:        0x08802705
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_ana_control1_muxd2
  * rx_cdr_ana_control1
  */

typedef union {
  struct {
    uint32_t RX_CDR_CLKOUTEN_CB_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t RX_CDR_CLKOUTEN_LANE_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RX_CDR_CB56_LANE32DIV_EN_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="2" ResetValue="0x1"
    uint32_t RX_CDR_10G_EN_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RX_CDR_PCS3334_DIVSEL_MUXD2 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RX_CDR_PCS3334DIV_EN_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t RX_CDR_CDR_BYPASS_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t RX_CDR_REFCLK2NEXTFAMILYDIV_EN_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1"
    uint32_t RX_CDR_REFCLK4LANEDIV_EN_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="9" ResetValue="0x1"
    uint32_t RX_CDR_SDDIV_EN_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x1"
    uint32_t RX_CDR_SDDIV_RATIO_MUXD2 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x4"
    uint32_t RX_CDR_SDDTR_CLK_SEL_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t RX_CDR_OBSMUX0_SEL_MUXD2 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RX_CDR_OBSMUX1_SEL_MUXD2 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t RX_CDR_PREDIV_RATIO_MUXD2 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="23" ResetValue="0x1"
    uint32_t RX_CDR_DCODIV2_TO_FBDIV_BYPASS_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="27" ResetValue="0x1"
    uint32_t RX_CDR_CLK2TXADCDIV_EN_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t RX_CDR_FB_DELAY_LINE_SEL_MUXD2 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_ana_ctrl1_muxd2_reg_t;

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_DEFAULT (0x08802705U)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RD_MASK (0x7fffffffU)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_WR_MASK (0x7fffffffU)


#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_CLKOUTEN_CB_MUXD2_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_CLKOUTEN_CB_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_CLKOUTEN_CB_MUXD2_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_CLKOUTEN_CB_MUXD2_BF_DEF (0x00000001)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_CLKOUTEN_LANE_MUXD2_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_CLKOUTEN_LANE_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_CLKOUTEN_LANE_MUXD2_BF_MSK (0x00000002)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_CLKOUTEN_LANE_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_CB56_LANE32DIV_EN_MUXD2_BF_OFF ( 2)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_CB56_LANE32DIV_EN_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_CB56_LANE32DIV_EN_MUXD2_BF_MSK (0x00000004)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_CB56_LANE32DIV_EN_MUXD2_BF_DEF (0x00000004)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_10G_EN_MUXD2_BF_OFF ( 3)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_10G_EN_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_10G_EN_MUXD2_BF_MSK (0x00000008)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_10G_EN_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_PCS3334_DIVSEL_MUXD2_BF_OFF ( 4)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_PCS3334_DIVSEL_MUXD2_BF_WID ( 2)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_PCS3334_DIVSEL_MUXD2_BF_MSK (0x00000030)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_PCS3334_DIVSEL_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_PCS3334DIV_EN_MUXD2_BF_OFF ( 6)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_PCS3334DIV_EN_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_PCS3334DIV_EN_MUXD2_BF_MSK (0x00000040)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_PCS3334DIV_EN_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_BYP_MUXD2_BF_OFF ( 7)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_BYP_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_BYP_MUXD2_BF_MSK (0x00000080)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_BYP_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_REFCLK2NEXTFAMILYDIV_EN_MUXD2_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_REFCLK2NEXTFAMILYDIV_EN_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_REFCLK2NEXTFAMILYDIV_EN_MUXD2_BF_MSK (0x00000100)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_REFCLK2NEXTFAMILYDIV_EN_MUXD2_BF_DEF (0x00000100)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_REFCLK4LANEDIV_EN_MUXD2_BF_OFF ( 9)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_REFCLK4LANEDIV_EN_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_REFCLK4LANEDIV_EN_MUXD2_BF_MSK (0x00000200)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_REFCLK4LANEDIV_EN_MUXD2_BF_DEF (0x00000200)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_SDDIV_EN_MUXD2_BF_OFF (10)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_SDDIV_EN_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_SDDIV_EN_MUXD2_BF_MSK (0x00000400)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_SDDIV_EN_MUXD2_BF_DEF (0x00000400)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_SDDIV_RATIO_MUXD2_BF_OFF (11)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_SDDIV_RATIO_MUXD2_BF_WID ( 3)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_SDDIV_RATIO_MUXD2_BF_MSK (0x00003800)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_SDDIV_RATIO_MUXD2_BF_DEF (0x00002000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_SDDTR_CLK_SEL_MUXD2_BF_OFF (14)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_SDDTR_CLK_SEL_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_SDDTR_CLK_SEL_MUXD2_BF_MSK (0x00004000)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_SDDTR_CLK_SEL_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_OBSMUX0_SEL_MUXD2_BF_OFF (15)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_OBSMUX0_SEL_MUXD2_BF_WID ( 4)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_OBSMUX0_SEL_MUXD2_BF_MSK (0x00078000)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_OBSMUX0_SEL_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_OBSMUX1_SEL_MUXD2_BF_OFF (19)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_OBSMUX1_SEL_MUXD2_BF_WID ( 4)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_OBSMUX1_SEL_MUXD2_BF_MSK (0x00780000)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_OBSMUX1_SEL_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_PREDIV_RATIO_MUXD2_BF_OFF (23)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_PREDIV_RATIO_MUXD2_BF_WID ( 4)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_PREDIV_RATIO_MUXD2_BF_MSK (0x07800000)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_PREDIV_RATIO_MUXD2_BF_DEF (0x00800000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_DCODIV2_TO_FBDIV_BYP_MUXD2_BF_OFF (27)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_DCODIV2_TO_FBDIV_BYP_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_DCODIV2_TO_FBDIV_BYP_MUXD2_BF_MSK (0x08000000)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_DCODIV2_TO_FBDIV_BYP_MUXD2_BF_DEF (0x08000000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_CLK2TXADCDIV_EN_MUXD2_BF_OFF (28)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_CLK2TXADCDIV_EN_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_CLK2TXADCDIV_EN_MUXD2_BF_MSK (0x10000000)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_CLK2TXADCDIV_EN_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_FB_DELAY_LINE_SEL_MUXD2_BF_OFF (29)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_FB_DELAY_LINE_SEL_MUXD2_BF_WID ( 2)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_FB_DELAY_LINE_SEL_MUXD2_BF_MSK (0x60000000)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_RX_CDR_FB_DELAY_LINE_SEL_MUXD2_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_ANA_CONTROL1_MUXD3 register description at address offset 0x510
  *
  * Register default value:        0x08802705
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_ana_control1_muxd3
  * rx_cdr_ana_control1
  */

typedef union {
  struct {
    uint32_t RX_CDR_CLKOUTEN_CB_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t RX_CDR_CLKOUTEN_LANE_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RX_CDR_CB56_LANE32DIV_EN_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="2" ResetValue="0x1"
    uint32_t RX_CDR_10G_EN_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RX_CDR_PCS3334_DIVSEL_MUXD3 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RX_CDR_PCS3334DIV_EN_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t RX_CDR_CDR_BYPASS_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t RX_CDR_REFCLK2NEXTFAMILYDIV_EN_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1"
    uint32_t RX_CDR_REFCLK4LANEDIV_EN_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="9" ResetValue="0x1"
    uint32_t RX_CDR_SDDIV_EN_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x1"
    uint32_t RX_CDR_SDDIV_RATIO_MUXD3 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x4"
    uint32_t RX_CDR_SDDTR_CLK_SEL_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t RX_CDR_OBSMUX0_SEL_MUXD3 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RX_CDR_OBSMUX1_SEL_MUXD3 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t RX_CDR_PREDIV_RATIO_MUXD3 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="23" ResetValue="0x1"
    uint32_t RX_CDR_DCODIV2_TO_FBDIV_BYPASS_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="27" ResetValue="0x1"
    uint32_t RX_CDR_CLK2TXADCDIV_EN_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t RX_CDR_FB_DELAY_LINE_SEL_MUXD3 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_ana_ctrl1_muxd3_reg_t;

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_DEFAULT (0x08802705U)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RD_MASK (0x7fffffffU)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_WR_MASK (0x7fffffffU)


#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_CLKOUTEN_CB_MUXD3_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_CLKOUTEN_CB_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_CLKOUTEN_CB_MUXD3_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_CLKOUTEN_CB_MUXD3_BF_DEF (0x00000001)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_CLKOUTEN_LANE_MUXD3_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_CLKOUTEN_LANE_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_CLKOUTEN_LANE_MUXD3_BF_MSK (0x00000002)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_CLKOUTEN_LANE_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_CB56_LANE32DIV_EN_MUXD3_BF_OFF ( 2)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_CB56_LANE32DIV_EN_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_CB56_LANE32DIV_EN_MUXD3_BF_MSK (0x00000004)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_CB56_LANE32DIV_EN_MUXD3_BF_DEF (0x00000004)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_10G_EN_MUXD3_BF_OFF ( 3)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_10G_EN_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_10G_EN_MUXD3_BF_MSK (0x00000008)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_10G_EN_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_PCS3334_DIVSEL_MUXD3_BF_OFF ( 4)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_PCS3334_DIVSEL_MUXD3_BF_WID ( 2)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_PCS3334_DIVSEL_MUXD3_BF_MSK (0x00000030)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_PCS3334_DIVSEL_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_PCS3334DIV_EN_MUXD3_BF_OFF ( 6)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_PCS3334DIV_EN_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_PCS3334DIV_EN_MUXD3_BF_MSK (0x00000040)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_PCS3334DIV_EN_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_BYP_MUXD3_BF_OFF ( 7)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_BYP_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_BYP_MUXD3_BF_MSK (0x00000080)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_BYP_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_REFCLK2NEXTFAMILYDIV_EN_MUXD3_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_REFCLK2NEXTFAMILYDIV_EN_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_REFCLK2NEXTFAMILYDIV_EN_MUXD3_BF_MSK (0x00000100)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_REFCLK2NEXTFAMILYDIV_EN_MUXD3_BF_DEF (0x00000100)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_REFCLK4LANEDIV_EN_MUXD3_BF_OFF ( 9)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_REFCLK4LANEDIV_EN_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_REFCLK4LANEDIV_EN_MUXD3_BF_MSK (0x00000200)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_REFCLK4LANEDIV_EN_MUXD3_BF_DEF (0x00000200)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_SDDIV_EN_MUXD3_BF_OFF (10)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_SDDIV_EN_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_SDDIV_EN_MUXD3_BF_MSK (0x00000400)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_SDDIV_EN_MUXD3_BF_DEF (0x00000400)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_SDDIV_RATIO_MUXD3_BF_OFF (11)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_SDDIV_RATIO_MUXD3_BF_WID ( 3)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_SDDIV_RATIO_MUXD3_BF_MSK (0x00003800)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_SDDIV_RATIO_MUXD3_BF_DEF (0x00002000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_SDDTR_CLK_SEL_MUXD3_BF_OFF (14)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_SDDTR_CLK_SEL_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_SDDTR_CLK_SEL_MUXD3_BF_MSK (0x00004000)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_SDDTR_CLK_SEL_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_OBSMUX0_SEL_MUXD3_BF_OFF (15)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_OBSMUX0_SEL_MUXD3_BF_WID ( 4)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_OBSMUX0_SEL_MUXD3_BF_MSK (0x00078000)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_OBSMUX0_SEL_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_OBSMUX1_SEL_MUXD3_BF_OFF (19)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_OBSMUX1_SEL_MUXD3_BF_WID ( 4)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_OBSMUX1_SEL_MUXD3_BF_MSK (0x00780000)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_OBSMUX1_SEL_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_PREDIV_RATIO_MUXD3_BF_OFF (23)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_PREDIV_RATIO_MUXD3_BF_WID ( 4)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_PREDIV_RATIO_MUXD3_BF_MSK (0x07800000)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_PREDIV_RATIO_MUXD3_BF_DEF (0x00800000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_DCODIV2_TO_FBDIV_BYP_MUXD3_BF_OFF (27)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_DCODIV2_TO_FBDIV_BYP_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_DCODIV2_TO_FBDIV_BYP_MUXD3_BF_MSK (0x08000000)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_DCODIV2_TO_FBDIV_BYP_MUXD3_BF_DEF (0x08000000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_CLK2TXADCDIV_EN_MUXD3_BF_OFF (28)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_CLK2TXADCDIV_EN_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_CLK2TXADCDIV_EN_MUXD3_BF_MSK (0x10000000)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_CLK2TXADCDIV_EN_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_FB_DELAY_LINE_SEL_MUXD3_BF_OFF (29)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_FB_DELAY_LINE_SEL_MUXD3_BF_WID ( 2)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_FB_DELAY_LINE_SEL_MUXD3_BF_MSK (0x60000000)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_RX_CDR_FB_DELAY_LINE_SEL_MUXD3_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_ANA_CONTROL1_MUXD4 register description at address offset 0x514
  *
  * Register default value:        0x08802705
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_ana_control1_muxd4
  * rx_cdr_ana_control1
  */

typedef union {
  struct {
    uint32_t RX_CDR_CLKOUTEN_CB_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t RX_CDR_CLKOUTEN_LANE_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RX_CDR_CB56_LANE32DIV_EN_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="2" ResetValue="0x1"
    uint32_t RX_CDR_10G_EN_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RX_CDR_PCS3334_DIVSEL_MUXD4 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RX_CDR_PCS3334DIV_EN_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t RX_CDR_CDR_BYPASS_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t RX_CDR_REFCLK2NEXTFAMILYDIV_EN_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1"
    uint32_t RX_CDR_REFCLK4LANEDIV_EN_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="9" ResetValue="0x1"
    uint32_t RX_CDR_SDDIV_EN_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x1"
    uint32_t RX_CDR_SDDIV_RATIO_MUXD4 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x4"
    uint32_t RX_CDR_SDDTR_CLK_SEL_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t RX_CDR_OBSMUX0_SEL_MUXD4 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RX_CDR_OBSMUX1_SEL_MUXD4 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t RX_CDR_PREDIV_RATIO_MUXD4 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="23" ResetValue="0x1"
    uint32_t RX_CDR_DCODIV2_TO_FBDIV_BYPASS_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="27" ResetValue="0x1"
    uint32_t RX_CDR_CLK2TXADCDIV_EN_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t RX_CDR_FB_DELAY_LINE_SEL_MUXD4 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_ana_ctrl1_muxd4_reg_t;

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_DEFAULT (0x08802705U)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RD_MASK (0x7fffffffU)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_WR_MASK (0x7fffffffU)


#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_CLKOUTEN_CB_MUXD4_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_CLKOUTEN_CB_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_CLKOUTEN_CB_MUXD4_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_CLKOUTEN_CB_MUXD4_BF_DEF (0x00000001)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_CLKOUTEN_LANE_MUXD4_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_CLKOUTEN_LANE_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_CLKOUTEN_LANE_MUXD4_BF_MSK (0x00000002)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_CLKOUTEN_LANE_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_CB56_LANE32DIV_EN_MUXD4_BF_OFF ( 2)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_CB56_LANE32DIV_EN_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_CB56_LANE32DIV_EN_MUXD4_BF_MSK (0x00000004)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_CB56_LANE32DIV_EN_MUXD4_BF_DEF (0x00000004)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_10G_EN_MUXD4_BF_OFF ( 3)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_10G_EN_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_10G_EN_MUXD4_BF_MSK (0x00000008)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_10G_EN_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_PCS3334_DIVSEL_MUXD4_BF_OFF ( 4)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_PCS3334_DIVSEL_MUXD4_BF_WID ( 2)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_PCS3334_DIVSEL_MUXD4_BF_MSK (0x00000030)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_PCS3334_DIVSEL_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_PCS3334DIV_EN_MUXD4_BF_OFF ( 6)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_PCS3334DIV_EN_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_PCS3334DIV_EN_MUXD4_BF_MSK (0x00000040)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_PCS3334DIV_EN_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_BYP_MUXD4_BF_OFF ( 7)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_BYP_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_BYP_MUXD4_BF_MSK (0x00000080)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_BYP_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_REFCLK2NEXTFAMILYDIV_EN_MUXD4_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_REFCLK2NEXTFAMILYDIV_EN_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_REFCLK2NEXTFAMILYDIV_EN_MUXD4_BF_MSK (0x00000100)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_REFCLK2NEXTFAMILYDIV_EN_MUXD4_BF_DEF (0x00000100)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_REFCLK4LANEDIV_EN_MUXD4_BF_OFF ( 9)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_REFCLK4LANEDIV_EN_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_REFCLK4LANEDIV_EN_MUXD4_BF_MSK (0x00000200)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_REFCLK4LANEDIV_EN_MUXD4_BF_DEF (0x00000200)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_SDDIV_EN_MUXD4_BF_OFF (10)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_SDDIV_EN_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_SDDIV_EN_MUXD4_BF_MSK (0x00000400)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_SDDIV_EN_MUXD4_BF_DEF (0x00000400)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_SDDIV_RATIO_MUXD4_BF_OFF (11)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_SDDIV_RATIO_MUXD4_BF_WID ( 3)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_SDDIV_RATIO_MUXD4_BF_MSK (0x00003800)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_SDDIV_RATIO_MUXD4_BF_DEF (0x00002000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_SDDTR_CLK_SEL_MUXD4_BF_OFF (14)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_SDDTR_CLK_SEL_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_SDDTR_CLK_SEL_MUXD4_BF_MSK (0x00004000)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_SDDTR_CLK_SEL_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_OBSMUX0_SEL_MUXD4_BF_OFF (15)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_OBSMUX0_SEL_MUXD4_BF_WID ( 4)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_OBSMUX0_SEL_MUXD4_BF_MSK (0x00078000)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_OBSMUX0_SEL_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_OBSMUX1_SEL_MUXD4_BF_OFF (19)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_OBSMUX1_SEL_MUXD4_BF_WID ( 4)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_OBSMUX1_SEL_MUXD4_BF_MSK (0x00780000)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_OBSMUX1_SEL_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_PREDIV_RATIO_MUXD4_BF_OFF (23)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_PREDIV_RATIO_MUXD4_BF_WID ( 4)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_PREDIV_RATIO_MUXD4_BF_MSK (0x07800000)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_PREDIV_RATIO_MUXD4_BF_DEF (0x00800000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_DCODIV2_TO_FBDIV_BYP_MUXD4_BF_OFF (27)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_DCODIV2_TO_FBDIV_BYP_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_DCODIV2_TO_FBDIV_BYP_MUXD4_BF_MSK (0x08000000)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_DCODIV2_TO_FBDIV_BYP_MUXD4_BF_DEF (0x08000000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_CLK2TXADCDIV_EN_MUXD4_BF_OFF (28)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_CLK2TXADCDIV_EN_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_CLK2TXADCDIV_EN_MUXD4_BF_MSK (0x10000000)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_CLK2TXADCDIV_EN_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_FB_DELAY_LINE_SEL_MUXD4_BF_OFF (29)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_FB_DELAY_LINE_SEL_MUXD4_BF_WID ( 2)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_FB_DELAY_LINE_SEL_MUXD4_BF_MSK (0x60000000)
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_RX_CDR_FB_DELAY_LINE_SEL_MUXD4_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_ANA_CONTROL2_MUXD0 register description at address offset 0x518
  *
  * Register default value:        0x001D0004
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_ana_control2_muxd0
  * rx_cdr_ana_control2
  */

typedef union {
  struct {
    uint32_t RX_CDR_A2F_EN_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_BTI_CLKGATE_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RX_CDR_DCO_ACBUF2TX_EN_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="2" ResetValue="0x1"
    uint32_t RX_CDR_OBSMUX0_DEL_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RX_CDR_OBSMUX1_DEL_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RX_CDR_ANAMONMUX0_SEL_MUXD0 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t RX_CDR_ANAMONMUX1_SEL_MUXD0 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t RX_CDR_HSCNTR_HSCLK_SEL_OVR_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t RX_CDR_HSCNTR_HSCLK_SEL_OVR_VAL_MUXD0 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RX_CDR_CDR_UPSTRMCLK_PULLDN_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t RX_CDR_LDODRV_BYPASS_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t RX_CDR_CDR_REFCLK_HSMODE_SEL_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RX_CDR_RXDCOLDO_DCO_HIGH_VREF_SEL_MUXD0 : 6;
    ///< ---
    ///< AccessType="RW" BitOffset="16" ResetValue="0x1D"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_ana_ctrl2_muxd0_reg_t;

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_DEFAULT (0x001d0004U)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RD_MASK (0x003fffffU)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_WR_MASK (0x003fffffU)


#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RX_CDR_A2F_EN_MUXD0_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RX_CDR_A2F_EN_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RX_CDR_A2F_EN_MUXD0_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RX_CDR_A2F_EN_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RX_CDR_BTI_CLKGATE_MUXD0_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RX_CDR_BTI_CLKGATE_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RX_CDR_BTI_CLKGATE_MUXD0_BF_MSK (0x00000002)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RX_CDR_BTI_CLKGATE_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RX_CDR_DCO_ACBUF2TX_EN_MUXD0_BF_OFF ( 2)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RX_CDR_DCO_ACBUF2TX_EN_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RX_CDR_DCO_ACBUF2TX_EN_MUXD0_BF_MSK (0x00000004)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RX_CDR_DCO_ACBUF2TX_EN_MUXD0_BF_DEF (0x00000004)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RX_CDR_OBSMUX0_DEL_MUXD0_BF_OFF ( 3)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RX_CDR_OBSMUX0_DEL_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RX_CDR_OBSMUX0_DEL_MUXD0_BF_MSK (0x00000008)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RX_CDR_OBSMUX0_DEL_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RX_CDR_OBSMUX1_DEL_MUXD0_BF_OFF ( 4)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RX_CDR_OBSMUX1_DEL_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RX_CDR_OBSMUX1_DEL_MUXD0_BF_MSK (0x00000010)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RX_CDR_OBSMUX1_DEL_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RX_CDR_ANAMONMUX0_SEL_MUXD0_BF_OFF ( 5)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RX_CDR_ANAMONMUX0_SEL_MUXD0_BF_WID ( 2)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RX_CDR_ANAMONMUX0_SEL_MUXD0_BF_MSK (0x00000060)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RX_CDR_ANAMONMUX0_SEL_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RX_CDR_ANAMONMUX1_SEL_MUXD0_BF_OFF ( 7)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RX_CDR_ANAMONMUX1_SEL_MUXD0_BF_WID ( 2)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RX_CDR_ANAMONMUX1_SEL_MUXD0_BF_MSK (0x00000180)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RX_CDR_ANAMONMUX1_SEL_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RX_CDR_HSCNTR_HSCLK_SEL_OVR_MUXD0_BF_OFF ( 9)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RX_CDR_HSCNTR_HSCLK_SEL_OVR_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RX_CDR_HSCNTR_HSCLK_SEL_OVR_MUXD0_BF_MSK (0x00000200)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RX_CDR_HSCNTR_HSCLK_SEL_OVR_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RX_CDR_HSCNTR_HSCLK_SEL_OVR_VAL_MUXD0_BF_OFF (10)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RX_CDR_HSCNTR_HSCLK_SEL_OVR_VAL_MUXD0_BF_WID ( 3)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RX_CDR_HSCNTR_HSCLK_SEL_OVR_VAL_MUXD0_BF_MSK (0x00001C00)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RX_CDR_HSCNTR_HSCLK_SEL_OVR_VAL_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RX_CDR_UPSTRMCLK_PULLDN_MUXD0_BF_OFF (13)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RX_CDR_UPSTRMCLK_PULLDN_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RX_CDR_UPSTRMCLK_PULLDN_MUXD0_BF_MSK (0x00002000)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RX_CDR_UPSTRMCLK_PULLDN_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RX_CDR_LDODRV_BYP_MUXD0_BF_OFF (14)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RX_CDR_LDODRV_BYP_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RX_CDR_LDODRV_BYP_MUXD0_BF_MSK (0x00004000)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RX_CDR_LDODRV_BYP_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RX_CDR_REFCLK_HSMODE_SEL_MUXD0_BF_OFF (15)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RX_CDR_REFCLK_HSMODE_SEL_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RX_CDR_REFCLK_HSMODE_SEL_MUXD0_BF_MSK (0x00008000)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RX_CDR_REFCLK_HSMODE_SEL_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RX_CDR_RXDCOLDO_DCO_HIGH_VREF_SEL_MUXD0_BF_OFF (16)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RX_CDR_RXDCOLDO_DCO_HIGH_VREF_SEL_MUXD0_BF_WID ( 6)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RX_CDR_RXDCOLDO_DCO_HIGH_VREF_SEL_MUXD0_BF_MSK (0x003F0000)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_RX_CDR_RXDCOLDO_DCO_HIGH_VREF_SEL_MUXD0_BF_DEF (0x001D0000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_ANA_CONTROL2_MUXD1 register description at address offset 0x51c
  *
  * Register default value:        0x001D0004
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_ana_control2_muxd1
  * rx_cdr_ana_control2
  */

typedef union {
  struct {
    uint32_t RX_CDR_A2F_EN_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_BTI_CLKGATE_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RX_CDR_DCO_ACBUF2TX_EN_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="2" ResetValue="0x1"
    uint32_t RX_CDR_OBSMUX0_DEL_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RX_CDR_OBSMUX1_DEL_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RX_CDR_ANAMONMUX0_SEL_MUXD1 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t RX_CDR_ANAMONMUX1_SEL_MUXD1 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t RX_CDR_HSCNTR_HSCLK_SEL_OVR_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t RX_CDR_HSCNTR_HSCLK_SEL_OVR_VAL_MUXD1 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RX_CDR_CDR_UPSTRMCLK_PULLDN_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t RX_CDR_LDODRV_BYPASS_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t RX_CDR_CDR_REFCLK_HSMODE_SEL_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RX_CDR_RXDCOLDO_DCO_HIGH_VREF_SEL_MUXD1 : 6;
    ///< ---
    ///< AccessType="RW" BitOffset="16" ResetValue="0x1D"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_ana_ctrl2_muxd1_reg_t;

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_DEFAULT (0x001d0004U)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RD_MASK (0x003fffffU)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_WR_MASK (0x003fffffU)


#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RX_CDR_A2F_EN_MUXD1_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RX_CDR_A2F_EN_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RX_CDR_A2F_EN_MUXD1_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RX_CDR_A2F_EN_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RX_CDR_BTI_CLKGATE_MUXD1_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RX_CDR_BTI_CLKGATE_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RX_CDR_BTI_CLKGATE_MUXD1_BF_MSK (0x00000002)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RX_CDR_BTI_CLKGATE_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RX_CDR_DCO_ACBUF2TX_EN_MUXD1_BF_OFF ( 2)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RX_CDR_DCO_ACBUF2TX_EN_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RX_CDR_DCO_ACBUF2TX_EN_MUXD1_BF_MSK (0x00000004)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RX_CDR_DCO_ACBUF2TX_EN_MUXD1_BF_DEF (0x00000004)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RX_CDR_OBSMUX0_DEL_MUXD1_BF_OFF ( 3)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RX_CDR_OBSMUX0_DEL_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RX_CDR_OBSMUX0_DEL_MUXD1_BF_MSK (0x00000008)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RX_CDR_OBSMUX0_DEL_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RX_CDR_OBSMUX1_DEL_MUXD1_BF_OFF ( 4)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RX_CDR_OBSMUX1_DEL_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RX_CDR_OBSMUX1_DEL_MUXD1_BF_MSK (0x00000010)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RX_CDR_OBSMUX1_DEL_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RX_CDR_ANAMONMUX0_SEL_MUXD1_BF_OFF ( 5)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RX_CDR_ANAMONMUX0_SEL_MUXD1_BF_WID ( 2)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RX_CDR_ANAMONMUX0_SEL_MUXD1_BF_MSK (0x00000060)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RX_CDR_ANAMONMUX0_SEL_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RX_CDR_ANAMONMUX1_SEL_MUXD1_BF_OFF ( 7)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RX_CDR_ANAMONMUX1_SEL_MUXD1_BF_WID ( 2)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RX_CDR_ANAMONMUX1_SEL_MUXD1_BF_MSK (0x00000180)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RX_CDR_ANAMONMUX1_SEL_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RX_CDR_HSCNTR_HSCLK_SEL_OVR_MUXD1_BF_OFF ( 9)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RX_CDR_HSCNTR_HSCLK_SEL_OVR_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RX_CDR_HSCNTR_HSCLK_SEL_OVR_MUXD1_BF_MSK (0x00000200)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RX_CDR_HSCNTR_HSCLK_SEL_OVR_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RX_CDR_HSCNTR_HSCLK_SEL_OVR_VAL_MUXD1_BF_OFF (10)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RX_CDR_HSCNTR_HSCLK_SEL_OVR_VAL_MUXD1_BF_WID ( 3)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RX_CDR_HSCNTR_HSCLK_SEL_OVR_VAL_MUXD1_BF_MSK (0x00001C00)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RX_CDR_HSCNTR_HSCLK_SEL_OVR_VAL_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RX_CDR_UPSTRMCLK_PULLDN_MUXD1_BF_OFF (13)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RX_CDR_UPSTRMCLK_PULLDN_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RX_CDR_UPSTRMCLK_PULLDN_MUXD1_BF_MSK (0x00002000)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RX_CDR_UPSTRMCLK_PULLDN_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RX_CDR_LDODRV_BYP_MUXD1_BF_OFF (14)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RX_CDR_LDODRV_BYP_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RX_CDR_LDODRV_BYP_MUXD1_BF_MSK (0x00004000)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RX_CDR_LDODRV_BYP_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RX_CDR_REFCLK_HSMODE_SEL_MUXD1_BF_OFF (15)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RX_CDR_REFCLK_HSMODE_SEL_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RX_CDR_REFCLK_HSMODE_SEL_MUXD1_BF_MSK (0x00008000)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RX_CDR_REFCLK_HSMODE_SEL_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RX_CDR_RXDCOLDO_DCO_HIGH_VREF_SEL_MUXD1_BF_OFF (16)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RX_CDR_RXDCOLDO_DCO_HIGH_VREF_SEL_MUXD1_BF_WID ( 6)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RX_CDR_RXDCOLDO_DCO_HIGH_VREF_SEL_MUXD1_BF_MSK (0x003F0000)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_RX_CDR_RXDCOLDO_DCO_HIGH_VREF_SEL_MUXD1_BF_DEF (0x001D0000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_ANA_CONTROL2_MUXD2 register description at address offset 0x520
  *
  * Register default value:        0x001D0004
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_ana_control2_muxd2
  * rx_cdr_ana_control2
  */

typedef union {
  struct {
    uint32_t RX_CDR_A2F_EN_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_BTI_CLKGATE_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RX_CDR_DCO_ACBUF2TX_EN_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="2" ResetValue="0x1"
    uint32_t RX_CDR_OBSMUX0_DEL_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RX_CDR_OBSMUX1_DEL_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RX_CDR_ANAMONMUX0_SEL_MUXD2 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t RX_CDR_ANAMONMUX1_SEL_MUXD2 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t RX_CDR_HSCNTR_HSCLK_SEL_OVR_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t RX_CDR_HSCNTR_HSCLK_SEL_OVR_VAL_MUXD2 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RX_CDR_CDR_UPSTRMCLK_PULLDN_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t RX_CDR_LDODRV_BYPASS_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t RX_CDR_CDR_REFCLK_HSMODE_SEL_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RX_CDR_RXDCOLDO_DCO_HIGH_VREF_SEL_MUXD2 : 6;
    ///< ---
    ///< AccessType="RW" BitOffset="16" ResetValue="0x1D"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_ana_ctrl2_muxd2_reg_t;

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_DEFAULT (0x001d0004U)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RD_MASK (0x003fffffU)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_WR_MASK (0x003fffffU)


#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RX_CDR_A2F_EN_MUXD2_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RX_CDR_A2F_EN_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RX_CDR_A2F_EN_MUXD2_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RX_CDR_A2F_EN_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RX_CDR_BTI_CLKGATE_MUXD2_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RX_CDR_BTI_CLKGATE_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RX_CDR_BTI_CLKGATE_MUXD2_BF_MSK (0x00000002)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RX_CDR_BTI_CLKGATE_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RX_CDR_DCO_ACBUF2TX_EN_MUXD2_BF_OFF ( 2)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RX_CDR_DCO_ACBUF2TX_EN_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RX_CDR_DCO_ACBUF2TX_EN_MUXD2_BF_MSK (0x00000004)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RX_CDR_DCO_ACBUF2TX_EN_MUXD2_BF_DEF (0x00000004)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RX_CDR_OBSMUX0_DEL_MUXD2_BF_OFF ( 3)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RX_CDR_OBSMUX0_DEL_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RX_CDR_OBSMUX0_DEL_MUXD2_BF_MSK (0x00000008)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RX_CDR_OBSMUX0_DEL_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RX_CDR_OBSMUX1_DEL_MUXD2_BF_OFF ( 4)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RX_CDR_OBSMUX1_DEL_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RX_CDR_OBSMUX1_DEL_MUXD2_BF_MSK (0x00000010)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RX_CDR_OBSMUX1_DEL_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RX_CDR_ANAMONMUX0_SEL_MUXD2_BF_OFF ( 5)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RX_CDR_ANAMONMUX0_SEL_MUXD2_BF_WID ( 2)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RX_CDR_ANAMONMUX0_SEL_MUXD2_BF_MSK (0x00000060)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RX_CDR_ANAMONMUX0_SEL_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RX_CDR_ANAMONMUX1_SEL_MUXD2_BF_OFF ( 7)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RX_CDR_ANAMONMUX1_SEL_MUXD2_BF_WID ( 2)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RX_CDR_ANAMONMUX1_SEL_MUXD2_BF_MSK (0x00000180)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RX_CDR_ANAMONMUX1_SEL_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RX_CDR_HSCNTR_HSCLK_SEL_OVR_MUXD2_BF_OFF ( 9)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RX_CDR_HSCNTR_HSCLK_SEL_OVR_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RX_CDR_HSCNTR_HSCLK_SEL_OVR_MUXD2_BF_MSK (0x00000200)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RX_CDR_HSCNTR_HSCLK_SEL_OVR_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RX_CDR_HSCNTR_HSCLK_SEL_OVR_VAL_MUXD2_BF_OFF (10)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RX_CDR_HSCNTR_HSCLK_SEL_OVR_VAL_MUXD2_BF_WID ( 3)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RX_CDR_HSCNTR_HSCLK_SEL_OVR_VAL_MUXD2_BF_MSK (0x00001C00)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RX_CDR_HSCNTR_HSCLK_SEL_OVR_VAL_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RX_CDR_UPSTRMCLK_PULLDN_MUXD2_BF_OFF (13)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RX_CDR_UPSTRMCLK_PULLDN_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RX_CDR_UPSTRMCLK_PULLDN_MUXD2_BF_MSK (0x00002000)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RX_CDR_UPSTRMCLK_PULLDN_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RX_CDR_LDODRV_BYP_MUXD2_BF_OFF (14)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RX_CDR_LDODRV_BYP_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RX_CDR_LDODRV_BYP_MUXD2_BF_MSK (0x00004000)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RX_CDR_LDODRV_BYP_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RX_CDR_REFCLK_HSMODE_SEL_MUXD2_BF_OFF (15)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RX_CDR_REFCLK_HSMODE_SEL_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RX_CDR_REFCLK_HSMODE_SEL_MUXD2_BF_MSK (0x00008000)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RX_CDR_REFCLK_HSMODE_SEL_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RX_CDR_RXDCOLDO_DCO_HIGH_VREF_SEL_MUXD2_BF_OFF (16)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RX_CDR_RXDCOLDO_DCO_HIGH_VREF_SEL_MUXD2_BF_WID ( 6)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RX_CDR_RXDCOLDO_DCO_HIGH_VREF_SEL_MUXD2_BF_MSK (0x003F0000)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_RX_CDR_RXDCOLDO_DCO_HIGH_VREF_SEL_MUXD2_BF_DEF (0x001D0000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_ANA_CONTROL2_MUXD3 register description at address offset 0x524
  *
  * Register default value:        0x001D0004
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_ana_control2_muxd3
  * rx_cdr_ana_control2
  */

typedef union {
  struct {
    uint32_t RX_CDR_A2F_EN_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_BTI_CLKGATE_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RX_CDR_DCO_ACBUF2TX_EN_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="2" ResetValue="0x1"
    uint32_t RX_CDR_OBSMUX0_DEL_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RX_CDR_OBSMUX1_DEL_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RX_CDR_ANAMONMUX0_SEL_MUXD3 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t RX_CDR_ANAMONMUX1_SEL_MUXD3 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t RX_CDR_HSCNTR_HSCLK_SEL_OVR_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t RX_CDR_HSCNTR_HSCLK_SEL_OVR_VAL_MUXD3 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RX_CDR_CDR_UPSTRMCLK_PULLDN_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t RX_CDR_LDODRV_BYPASS_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t RX_CDR_CDR_REFCLK_HSMODE_SEL_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RX_CDR_RXDCOLDO_DCO_HIGH_VREF_SEL_MUXD3 : 6;
    ///< ---
    ///< AccessType="RW" BitOffset="16" ResetValue="0x1D"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_ana_ctrl2_muxd3_reg_t;

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_DEFAULT (0x001d0004U)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RD_MASK (0x003fffffU)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_WR_MASK (0x003fffffU)


#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RX_CDR_A2F_EN_MUXD3_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RX_CDR_A2F_EN_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RX_CDR_A2F_EN_MUXD3_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RX_CDR_A2F_EN_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RX_CDR_BTI_CLKGATE_MUXD3_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RX_CDR_BTI_CLKGATE_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RX_CDR_BTI_CLKGATE_MUXD3_BF_MSK (0x00000002)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RX_CDR_BTI_CLKGATE_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RX_CDR_DCO_ACBUF2TX_EN_MUXD3_BF_OFF ( 2)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RX_CDR_DCO_ACBUF2TX_EN_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RX_CDR_DCO_ACBUF2TX_EN_MUXD3_BF_MSK (0x00000004)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RX_CDR_DCO_ACBUF2TX_EN_MUXD3_BF_DEF (0x00000004)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RX_CDR_OBSMUX0_DEL_MUXD3_BF_OFF ( 3)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RX_CDR_OBSMUX0_DEL_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RX_CDR_OBSMUX0_DEL_MUXD3_BF_MSK (0x00000008)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RX_CDR_OBSMUX0_DEL_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RX_CDR_OBSMUX1_DEL_MUXD3_BF_OFF ( 4)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RX_CDR_OBSMUX1_DEL_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RX_CDR_OBSMUX1_DEL_MUXD3_BF_MSK (0x00000010)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RX_CDR_OBSMUX1_DEL_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RX_CDR_ANAMONMUX0_SEL_MUXD3_BF_OFF ( 5)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RX_CDR_ANAMONMUX0_SEL_MUXD3_BF_WID ( 2)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RX_CDR_ANAMONMUX0_SEL_MUXD3_BF_MSK (0x00000060)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RX_CDR_ANAMONMUX0_SEL_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RX_CDR_ANAMONMUX1_SEL_MUXD3_BF_OFF ( 7)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RX_CDR_ANAMONMUX1_SEL_MUXD3_BF_WID ( 2)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RX_CDR_ANAMONMUX1_SEL_MUXD3_BF_MSK (0x00000180)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RX_CDR_ANAMONMUX1_SEL_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RX_CDR_HSCNTR_HSCLK_SEL_OVR_MUXD3_BF_OFF ( 9)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RX_CDR_HSCNTR_HSCLK_SEL_OVR_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RX_CDR_HSCNTR_HSCLK_SEL_OVR_MUXD3_BF_MSK (0x00000200)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RX_CDR_HSCNTR_HSCLK_SEL_OVR_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RX_CDR_HSCNTR_HSCLK_SEL_OVR_VAL_MUXD3_BF_OFF (10)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RX_CDR_HSCNTR_HSCLK_SEL_OVR_VAL_MUXD3_BF_WID ( 3)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RX_CDR_HSCNTR_HSCLK_SEL_OVR_VAL_MUXD3_BF_MSK (0x00001C00)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RX_CDR_HSCNTR_HSCLK_SEL_OVR_VAL_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RX_CDR_UPSTRMCLK_PULLDN_MUXD3_BF_OFF (13)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RX_CDR_UPSTRMCLK_PULLDN_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RX_CDR_UPSTRMCLK_PULLDN_MUXD3_BF_MSK (0x00002000)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RX_CDR_UPSTRMCLK_PULLDN_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RX_CDR_LDODRV_BYP_MUXD3_BF_OFF (14)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RX_CDR_LDODRV_BYP_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RX_CDR_LDODRV_BYP_MUXD3_BF_MSK (0x00004000)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RX_CDR_LDODRV_BYP_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RX_CDR_REFCLK_HSMODE_SEL_MUXD3_BF_OFF (15)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RX_CDR_REFCLK_HSMODE_SEL_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RX_CDR_REFCLK_HSMODE_SEL_MUXD3_BF_MSK (0x00008000)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RX_CDR_REFCLK_HSMODE_SEL_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RX_CDR_RXDCOLDO_DCO_HIGH_VREF_SEL_MUXD3_BF_OFF (16)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RX_CDR_RXDCOLDO_DCO_HIGH_VREF_SEL_MUXD3_BF_WID ( 6)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RX_CDR_RXDCOLDO_DCO_HIGH_VREF_SEL_MUXD3_BF_MSK (0x003F0000)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_RX_CDR_RXDCOLDO_DCO_HIGH_VREF_SEL_MUXD3_BF_DEF (0x001D0000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_ANA_CONTROL2_MUXD4 register description at address offset 0x528
  *
  * Register default value:        0x001D0004
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_ana_control2_muxd4
  * rx_cdr_ana_control2
  */

typedef union {
  struct {
    uint32_t RX_CDR_A2F_EN_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_BTI_CLKGATE_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RX_CDR_DCO_ACBUF2TX_EN_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="2" ResetValue="0x1"
    uint32_t RX_CDR_OBSMUX0_DEL_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RX_CDR_OBSMUX1_DEL_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RX_CDR_ANAMONMUX0_SEL_MUXD4 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t RX_CDR_ANAMONMUX1_SEL_MUXD4 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t RX_CDR_HSCNTR_HSCLK_SEL_OVR_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t RX_CDR_HSCNTR_HSCLK_SEL_OVR_VAL_MUXD4 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RX_CDR_CDR_UPSTRMCLK_PULLDN_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t RX_CDR_LDODRV_BYPASS_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t RX_CDR_CDR_REFCLK_HSMODE_SEL_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RX_CDR_RXDCOLDO_DCO_HIGH_VREF_SEL_MUXD4 : 6;
    ///< ---
    ///< AccessType="RW" BitOffset="16" ResetValue="0x1D"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_ana_ctrl2_muxd4_reg_t;

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_DEFAULT (0x001d0004U)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RD_MASK (0x003fffffU)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_WR_MASK (0x003fffffU)


#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RX_CDR_A2F_EN_MUXD4_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RX_CDR_A2F_EN_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RX_CDR_A2F_EN_MUXD4_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RX_CDR_A2F_EN_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RX_CDR_BTI_CLKGATE_MUXD4_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RX_CDR_BTI_CLKGATE_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RX_CDR_BTI_CLKGATE_MUXD4_BF_MSK (0x00000002)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RX_CDR_BTI_CLKGATE_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RX_CDR_DCO_ACBUF2TX_EN_MUXD4_BF_OFF ( 2)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RX_CDR_DCO_ACBUF2TX_EN_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RX_CDR_DCO_ACBUF2TX_EN_MUXD4_BF_MSK (0x00000004)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RX_CDR_DCO_ACBUF2TX_EN_MUXD4_BF_DEF (0x00000004)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RX_CDR_OBSMUX0_DEL_MUXD4_BF_OFF ( 3)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RX_CDR_OBSMUX0_DEL_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RX_CDR_OBSMUX0_DEL_MUXD4_BF_MSK (0x00000008)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RX_CDR_OBSMUX0_DEL_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RX_CDR_OBSMUX1_DEL_MUXD4_BF_OFF ( 4)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RX_CDR_OBSMUX1_DEL_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RX_CDR_OBSMUX1_DEL_MUXD4_BF_MSK (0x00000010)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RX_CDR_OBSMUX1_DEL_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RX_CDR_ANAMONMUX0_SEL_MUXD4_BF_OFF ( 5)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RX_CDR_ANAMONMUX0_SEL_MUXD4_BF_WID ( 2)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RX_CDR_ANAMONMUX0_SEL_MUXD4_BF_MSK (0x00000060)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RX_CDR_ANAMONMUX0_SEL_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RX_CDR_ANAMONMUX1_SEL_MUXD4_BF_OFF ( 7)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RX_CDR_ANAMONMUX1_SEL_MUXD4_BF_WID ( 2)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RX_CDR_ANAMONMUX1_SEL_MUXD4_BF_MSK (0x00000180)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RX_CDR_ANAMONMUX1_SEL_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RX_CDR_HSCNTR_HSCLK_SEL_OVR_MUXD4_BF_OFF ( 9)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RX_CDR_HSCNTR_HSCLK_SEL_OVR_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RX_CDR_HSCNTR_HSCLK_SEL_OVR_MUXD4_BF_MSK (0x00000200)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RX_CDR_HSCNTR_HSCLK_SEL_OVR_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RX_CDR_HSCNTR_HSCLK_SEL_OVR_VAL_MUXD4_BF_OFF (10)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RX_CDR_HSCNTR_HSCLK_SEL_OVR_VAL_MUXD4_BF_WID ( 3)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RX_CDR_HSCNTR_HSCLK_SEL_OVR_VAL_MUXD4_BF_MSK (0x00001C00)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RX_CDR_HSCNTR_HSCLK_SEL_OVR_VAL_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RX_CDR_UPSTRMCLK_PULLDN_MUXD4_BF_OFF (13)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RX_CDR_UPSTRMCLK_PULLDN_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RX_CDR_UPSTRMCLK_PULLDN_MUXD4_BF_MSK (0x00002000)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RX_CDR_UPSTRMCLK_PULLDN_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RX_CDR_LDODRV_BYP_MUXD4_BF_OFF (14)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RX_CDR_LDODRV_BYP_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RX_CDR_LDODRV_BYP_MUXD4_BF_MSK (0x00004000)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RX_CDR_LDODRV_BYP_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RX_CDR_REFCLK_HSMODE_SEL_MUXD4_BF_OFF (15)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RX_CDR_REFCLK_HSMODE_SEL_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RX_CDR_REFCLK_HSMODE_SEL_MUXD4_BF_MSK (0x00008000)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RX_CDR_REFCLK_HSMODE_SEL_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RX_CDR_RXDCOLDO_DCO_HIGH_VREF_SEL_MUXD4_BF_OFF (16)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RX_CDR_RXDCOLDO_DCO_HIGH_VREF_SEL_MUXD4_BF_WID ( 6)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RX_CDR_RXDCOLDO_DCO_HIGH_VREF_SEL_MUXD4_BF_MSK (0x003F0000)
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_RX_CDR_RXDCOLDO_DCO_HIGH_VREF_SEL_MUXD4_BF_DEF (0x001D0000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_ANA_CONTROL3_MUXD0 register description at address offset 0x52c
  *
  * Register default value:        0x00003850
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_ana_control3_muxd0
  * rx_cdr_ana_control3
  */

typedef union {
  struct {
    uint32_t RX_CDR_REFCLK2NEXTFAMILY_DIVRATIO_MUXD0 : 9;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x50"
    uint32_t RX_CDR_CB56_LANE32_DIVRATIO_MUXD0 : 9;
    ///< ---
    ///< AccessType="RW" BitOffset="9" ResetValue="0x1C"
    uint32_t RX_CDR_PAM6_EN_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_ana_ctrl3_muxd0_reg_t;

#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD0_DEFAULT (0x00003850U)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD0_RD_MASK (0x0007ffffU)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD0_WR_MASK (0x0007ffffU)


#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD0_RX_CDR_REFCLK2NEXTFAMILY_DIVRATIO_MUXD0_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD0_RX_CDR_REFCLK2NEXTFAMILY_DIVRATIO_MUXD0_BF_WID ( 9)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD0_RX_CDR_REFCLK2NEXTFAMILY_DIVRATIO_MUXD0_BF_MSK (0x000001FF)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD0_RX_CDR_REFCLK2NEXTFAMILY_DIVRATIO_MUXD0_BF_DEF (0x00000050)

#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD0_RX_CDR_CB56_LANE32_DIVRATIO_MUXD0_BF_OFF ( 9)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD0_RX_CDR_CB56_LANE32_DIVRATIO_MUXD0_BF_WID ( 9)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD0_RX_CDR_CB56_LANE32_DIVRATIO_MUXD0_BF_MSK (0x0003FE00)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD0_RX_CDR_CB56_LANE32_DIVRATIO_MUXD0_BF_DEF (0x00003800)

#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD0_RX_CDR_PAM6_EN_MUXD0_BF_OFF (18)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD0_RX_CDR_PAM6_EN_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD0_RX_CDR_PAM6_EN_MUXD0_BF_MSK (0x00040000)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD0_RX_CDR_PAM6_EN_MUXD0_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_ANA_CONTROL3_MUXD1 register description at address offset 0x530
  *
  * Register default value:        0x00003850
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_ana_control3_muxd1
  * rx_cdr_ana_control3
  */

typedef union {
  struct {
    uint32_t RX_CDR_REFCLK2NEXTFAMILY_DIVRATIO_MUXD1 : 9;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x50"
    uint32_t RX_CDR_CB56_LANE32_DIVRATIO_MUXD1 : 9;
    ///< ---
    ///< AccessType="RW" BitOffset="9" ResetValue="0x1C"
    uint32_t RX_CDR_PAM6_EN_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_ana_ctrl3_muxd1_reg_t;

#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD1_DEFAULT (0x00003850U)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD1_RD_MASK (0x0007ffffU)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD1_WR_MASK (0x0007ffffU)


#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD1_RX_CDR_REFCLK2NEXTFAMILY_DIVRATIO_MUXD1_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD1_RX_CDR_REFCLK2NEXTFAMILY_DIVRATIO_MUXD1_BF_WID ( 9)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD1_RX_CDR_REFCLK2NEXTFAMILY_DIVRATIO_MUXD1_BF_MSK (0x000001FF)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD1_RX_CDR_REFCLK2NEXTFAMILY_DIVRATIO_MUXD1_BF_DEF (0x00000050)

#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD1_RX_CDR_CB56_LANE32_DIVRATIO_MUXD1_BF_OFF ( 9)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD1_RX_CDR_CB56_LANE32_DIVRATIO_MUXD1_BF_WID ( 9)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD1_RX_CDR_CB56_LANE32_DIVRATIO_MUXD1_BF_MSK (0x0003FE00)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD1_RX_CDR_CB56_LANE32_DIVRATIO_MUXD1_BF_DEF (0x00003800)

#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD1_RX_CDR_PAM6_EN_MUXD1_BF_OFF (18)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD1_RX_CDR_PAM6_EN_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD1_RX_CDR_PAM6_EN_MUXD1_BF_MSK (0x00040000)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD1_RX_CDR_PAM6_EN_MUXD1_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_ANA_CONTROL3_MUXD2 register description at address offset 0x534
  *
  * Register default value:        0x00003850
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_ana_control3_muxd2
  * rx_cdr_ana_control3
  */

typedef union {
  struct {
    uint32_t RX_CDR_REFCLK2NEXTFAMILY_DIVRATIO_MUXD2 : 9;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x50"
    uint32_t RX_CDR_CB56_LANE32_DIVRATIO_MUXD2 : 9;
    ///< ---
    ///< AccessType="RW" BitOffset="9" ResetValue="0x1C"
    uint32_t RX_CDR_PAM6_EN_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_ana_ctrl3_muxd2_reg_t;

#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD2_DEFAULT (0x00003850U)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD2_RD_MASK (0x0007ffffU)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD2_WR_MASK (0x0007ffffU)


#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD2_RX_CDR_REFCLK2NEXTFAMILY_DIVRATIO_MUXD2_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD2_RX_CDR_REFCLK2NEXTFAMILY_DIVRATIO_MUXD2_BF_WID ( 9)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD2_RX_CDR_REFCLK2NEXTFAMILY_DIVRATIO_MUXD2_BF_MSK (0x000001FF)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD2_RX_CDR_REFCLK2NEXTFAMILY_DIVRATIO_MUXD2_BF_DEF (0x00000050)

#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD2_RX_CDR_CB56_LANE32_DIVRATIO_MUXD2_BF_OFF ( 9)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD2_RX_CDR_CB56_LANE32_DIVRATIO_MUXD2_BF_WID ( 9)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD2_RX_CDR_CB56_LANE32_DIVRATIO_MUXD2_BF_MSK (0x0003FE00)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD2_RX_CDR_CB56_LANE32_DIVRATIO_MUXD2_BF_DEF (0x00003800)

#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD2_RX_CDR_PAM6_EN_MUXD2_BF_OFF (18)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD2_RX_CDR_PAM6_EN_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD2_RX_CDR_PAM6_EN_MUXD2_BF_MSK (0x00040000)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD2_RX_CDR_PAM6_EN_MUXD2_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_ANA_CONTROL3_MUXD3 register description at address offset 0x538
  *
  * Register default value:        0x00003850
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_ana_control3_muxd3
  * rx_cdr_ana_control3
  */

typedef union {
  struct {
    uint32_t RX_CDR_REFCLK2NEXTFAMILY_DIVRATIO_MUXD3 : 9;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x50"
    uint32_t RX_CDR_CB56_LANE32_DIVRATIO_MUXD3 : 9;
    ///< ---
    ///< AccessType="RW" BitOffset="9" ResetValue="0x1C"
    uint32_t RX_CDR_PAM6_EN_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_ana_ctrl3_muxd3_reg_t;

#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD3_DEFAULT (0x00003850U)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD3_RD_MASK (0x0007ffffU)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD3_WR_MASK (0x0007ffffU)


#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD3_RX_CDR_REFCLK2NEXTFAMILY_DIVRATIO_MUXD3_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD3_RX_CDR_REFCLK2NEXTFAMILY_DIVRATIO_MUXD3_BF_WID ( 9)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD3_RX_CDR_REFCLK2NEXTFAMILY_DIVRATIO_MUXD3_BF_MSK (0x000001FF)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD3_RX_CDR_REFCLK2NEXTFAMILY_DIVRATIO_MUXD3_BF_DEF (0x00000050)

#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD3_RX_CDR_CB56_LANE32_DIVRATIO_MUXD3_BF_OFF ( 9)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD3_RX_CDR_CB56_LANE32_DIVRATIO_MUXD3_BF_WID ( 9)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD3_RX_CDR_CB56_LANE32_DIVRATIO_MUXD3_BF_MSK (0x0003FE00)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD3_RX_CDR_CB56_LANE32_DIVRATIO_MUXD3_BF_DEF (0x00003800)

#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD3_RX_CDR_PAM6_EN_MUXD3_BF_OFF (18)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD3_RX_CDR_PAM6_EN_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD3_RX_CDR_PAM6_EN_MUXD3_BF_MSK (0x00040000)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD3_RX_CDR_PAM6_EN_MUXD3_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_ANA_CONTROL3_MUXD4 register description at address offset 0x53c
  *
  * Register default value:        0x00003850
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_ana_control3_muxd4
  * rx_cdr_ana_control3
  */

typedef union {
  struct {
    uint32_t RX_CDR_REFCLK2NEXTFAMILY_DIVRATIO_MUXD4 : 9;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x50"
    uint32_t RX_CDR_CB56_LANE32_DIVRATIO_MUXD4 : 9;
    ///< ---
    ///< AccessType="RW" BitOffset="9" ResetValue="0x1C"
    uint32_t RX_CDR_PAM6_EN_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_ana_ctrl3_muxd4_reg_t;

#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD4_DEFAULT (0x00003850U)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD4_RD_MASK (0x0007ffffU)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD4_WR_MASK (0x0007ffffU)


#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD4_RX_CDR_REFCLK2NEXTFAMILY_DIVRATIO_MUXD4_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD4_RX_CDR_REFCLK2NEXTFAMILY_DIVRATIO_MUXD4_BF_WID ( 9)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD4_RX_CDR_REFCLK2NEXTFAMILY_DIVRATIO_MUXD4_BF_MSK (0x000001FF)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD4_RX_CDR_REFCLK2NEXTFAMILY_DIVRATIO_MUXD4_BF_DEF (0x00000050)

#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD4_RX_CDR_CB56_LANE32_DIVRATIO_MUXD4_BF_OFF ( 9)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD4_RX_CDR_CB56_LANE32_DIVRATIO_MUXD4_BF_WID ( 9)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD4_RX_CDR_CB56_LANE32_DIVRATIO_MUXD4_BF_MSK (0x0003FE00)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD4_RX_CDR_CB56_LANE32_DIVRATIO_MUXD4_BF_DEF (0x00003800)

#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD4_RX_CDR_PAM6_EN_MUXD4_BF_OFF (18)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD4_RX_CDR_PAM6_EN_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD4_RX_CDR_PAM6_EN_MUXD4_BF_MSK (0x00040000)
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD4_RX_CDR_PAM6_EN_MUXD4_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_DFX0_MUXD0 register description at address offset 0x540
  *
  * Register default value:        0x00400000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_dfx0_muxd0
  * rx_cdr_dfx0
  */

typedef union {
  struct {
    uint32_t RX_CDR_FINE_MODULATION_EN_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_FINE_MODULATION_SEL_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RX_CDR_TDCPE_MODULATION_EN_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t RX_CDR_LDO_MODULATION_EN_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RX_CDR_MODULATION_TOGGLE_DELAY_MUXD0 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RX_CDR_DFX_FEEDFWRD_OFFSET_OVR_EN_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 7;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
    uint32_t RX_CDR_DFX_FEEDFWRDPHASE_OVR_VAL_MUXD0 : 5;
    ///< ---
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t RX_CDR_DFX_DISABLE_DFT_TIMER_OVRD_VAL_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t RX_CDR_DFX_DISABLE_DFT_TIMER_OVRD_EN_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="22" ResetValue="0x1"
    uint32_t  : 9;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_dfx0_muxd0_reg_t;

#define PMA_RX_MGS_CDR_DFX0_MUXD0_DEFAULT (0x00400000U)
#define PMA_RX_MGS_CDR_DFX0_MUXD0_RD_MASK (0x007f01ffU)
#define PMA_RX_MGS_CDR_DFX0_MUXD0_WR_MASK (0x007f01ffU)


#define PMA_RX_MGS_CDR_DFX0_MUXD0_RX_CDR_FINE_MOD_EN_MUXD0_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_DFX0_MUXD0_RX_CDR_FINE_MOD_EN_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DFX0_MUXD0_RX_CDR_FINE_MOD_EN_MUXD0_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_DFX0_MUXD0_RX_CDR_FINE_MOD_EN_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX0_MUXD0_RX_CDR_FINE_MOD_SEL_MUXD0_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_DFX0_MUXD0_RX_CDR_FINE_MOD_SEL_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DFX0_MUXD0_RX_CDR_FINE_MOD_SEL_MUXD0_BF_MSK (0x00000002)
#define PMA_RX_MGS_CDR_DFX0_MUXD0_RX_CDR_FINE_MOD_SEL_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX0_MUXD0_RX_CDR_TDCPE_MOD_EN_MUXD0_BF_OFF ( 2)
#define PMA_RX_MGS_CDR_DFX0_MUXD0_RX_CDR_TDCPE_MOD_EN_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DFX0_MUXD0_RX_CDR_TDCPE_MOD_EN_MUXD0_BF_MSK (0x00000004)
#define PMA_RX_MGS_CDR_DFX0_MUXD0_RX_CDR_TDCPE_MOD_EN_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX0_MUXD0_RX_CDR_LDO_MOD_EN_MUXD0_BF_OFF ( 3)
#define PMA_RX_MGS_CDR_DFX0_MUXD0_RX_CDR_LDO_MOD_EN_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DFX0_MUXD0_RX_CDR_LDO_MOD_EN_MUXD0_BF_MSK (0x00000008)
#define PMA_RX_MGS_CDR_DFX0_MUXD0_RX_CDR_LDO_MOD_EN_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX0_MUXD0_RX_CDR_MOD_TOGGLE_DELAY_MUXD0_BF_OFF ( 4)
#define PMA_RX_MGS_CDR_DFX0_MUXD0_RX_CDR_MOD_TOGGLE_DELAY_MUXD0_BF_WID ( 4)
#define PMA_RX_MGS_CDR_DFX0_MUXD0_RX_CDR_MOD_TOGGLE_DELAY_MUXD0_BF_MSK (0x000000F0)
#define PMA_RX_MGS_CDR_DFX0_MUXD0_RX_CDR_MOD_TOGGLE_DELAY_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX0_MUXD0_RX_CDR_DFX_FEEDFWRD_OFFSET_OVR_EN_MUXD0_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_DFX0_MUXD0_RX_CDR_DFX_FEEDFWRD_OFFSET_OVR_EN_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DFX0_MUXD0_RX_CDR_DFX_FEEDFWRD_OFFSET_OVR_EN_MUXD0_BF_MSK (0x00000100)
#define PMA_RX_MGS_CDR_DFX0_MUXD0_RX_CDR_DFX_FEEDFWRD_OFFSET_OVR_EN_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX0_MUXD0_RX_CDR_DFX_FEEDFWRDPHASE_OVR_VAL_MUXD0_BF_OFF (16)
#define PMA_RX_MGS_CDR_DFX0_MUXD0_RX_CDR_DFX_FEEDFWRDPHASE_OVR_VAL_MUXD0_BF_WID ( 5)
#define PMA_RX_MGS_CDR_DFX0_MUXD0_RX_CDR_DFX_FEEDFWRDPHASE_OVR_VAL_MUXD0_BF_MSK (0x001F0000)
#define PMA_RX_MGS_CDR_DFX0_MUXD0_RX_CDR_DFX_FEEDFWRDPHASE_OVR_VAL_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX0_MUXD0_RX_CDR_DFX_DIS_DFT_TIMER_OVRD_VAL_MUXD0_BF_OFF (21)
#define PMA_RX_MGS_CDR_DFX0_MUXD0_RX_CDR_DFX_DIS_DFT_TIMER_OVRD_VAL_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DFX0_MUXD0_RX_CDR_DFX_DIS_DFT_TIMER_OVRD_VAL_MUXD0_BF_MSK (0x00200000)
#define PMA_RX_MGS_CDR_DFX0_MUXD0_RX_CDR_DFX_DIS_DFT_TIMER_OVRD_VAL_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX0_MUXD0_RX_CDR_DFX_DIS_DFT_TIMER_OVRD_EN_MUXD0_BF_OFF (22)
#define PMA_RX_MGS_CDR_DFX0_MUXD0_RX_CDR_DFX_DIS_DFT_TIMER_OVRD_EN_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DFX0_MUXD0_RX_CDR_DFX_DIS_DFT_TIMER_OVRD_EN_MUXD0_BF_MSK (0x00400000)
#define PMA_RX_MGS_CDR_DFX0_MUXD0_RX_CDR_DFX_DIS_DFT_TIMER_OVRD_EN_MUXD0_BF_DEF (0x00400000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_DFX0_MUXD1 register description at address offset 0x544
  *
  * Register default value:        0x00400000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_dfx0_muxd1
  * rx_cdr_dfx0
  */

typedef union {
  struct {
    uint32_t RX_CDR_FINE_MODULATION_EN_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_FINE_MODULATION_SEL_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RX_CDR_TDCPE_MODULATION_EN_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t RX_CDR_LDO_MODULATION_EN_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RX_CDR_MODULATION_TOGGLE_DELAY_MUXD1 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RX_CDR_DFX_FEEDFWRD_OFFSET_OVR_EN_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 7;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
    uint32_t RX_CDR_DFX_FEEDFWRDPHASE_OVR_VAL_MUXD1 : 5;
    ///< ---
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t RX_CDR_DFX_DISABLE_DFT_TIMER_OVRD_VAL_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t RX_CDR_DFX_DISABLE_DFT_TIMER_OVRD_EN_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="22" ResetValue="0x1"
    uint32_t  : 9;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_dfx0_muxd1_reg_t;

#define PMA_RX_MGS_CDR_DFX0_MUXD1_DEFAULT (0x00400000U)
#define PMA_RX_MGS_CDR_DFX0_MUXD1_RD_MASK (0x007f01ffU)
#define PMA_RX_MGS_CDR_DFX0_MUXD1_WR_MASK (0x007f01ffU)


#define PMA_RX_MGS_CDR_DFX0_MUXD1_RX_CDR_FINE_MOD_EN_MUXD1_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_DFX0_MUXD1_RX_CDR_FINE_MOD_EN_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DFX0_MUXD1_RX_CDR_FINE_MOD_EN_MUXD1_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_DFX0_MUXD1_RX_CDR_FINE_MOD_EN_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX0_MUXD1_RX_CDR_FINE_MOD_SEL_MUXD1_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_DFX0_MUXD1_RX_CDR_FINE_MOD_SEL_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DFX0_MUXD1_RX_CDR_FINE_MOD_SEL_MUXD1_BF_MSK (0x00000002)
#define PMA_RX_MGS_CDR_DFX0_MUXD1_RX_CDR_FINE_MOD_SEL_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX0_MUXD1_RX_CDR_TDCPE_MOD_EN_MUXD1_BF_OFF ( 2)
#define PMA_RX_MGS_CDR_DFX0_MUXD1_RX_CDR_TDCPE_MOD_EN_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DFX0_MUXD1_RX_CDR_TDCPE_MOD_EN_MUXD1_BF_MSK (0x00000004)
#define PMA_RX_MGS_CDR_DFX0_MUXD1_RX_CDR_TDCPE_MOD_EN_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX0_MUXD1_RX_CDR_LDO_MOD_EN_MUXD1_BF_OFF ( 3)
#define PMA_RX_MGS_CDR_DFX0_MUXD1_RX_CDR_LDO_MOD_EN_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DFX0_MUXD1_RX_CDR_LDO_MOD_EN_MUXD1_BF_MSK (0x00000008)
#define PMA_RX_MGS_CDR_DFX0_MUXD1_RX_CDR_LDO_MOD_EN_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX0_MUXD1_RX_CDR_MOD_TOGGLE_DELAY_MUXD1_BF_OFF ( 4)
#define PMA_RX_MGS_CDR_DFX0_MUXD1_RX_CDR_MOD_TOGGLE_DELAY_MUXD1_BF_WID ( 4)
#define PMA_RX_MGS_CDR_DFX0_MUXD1_RX_CDR_MOD_TOGGLE_DELAY_MUXD1_BF_MSK (0x000000F0)
#define PMA_RX_MGS_CDR_DFX0_MUXD1_RX_CDR_MOD_TOGGLE_DELAY_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX0_MUXD1_RX_CDR_DFX_FEEDFWRD_OFFSET_OVR_EN_MUXD1_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_DFX0_MUXD1_RX_CDR_DFX_FEEDFWRD_OFFSET_OVR_EN_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DFX0_MUXD1_RX_CDR_DFX_FEEDFWRD_OFFSET_OVR_EN_MUXD1_BF_MSK (0x00000100)
#define PMA_RX_MGS_CDR_DFX0_MUXD1_RX_CDR_DFX_FEEDFWRD_OFFSET_OVR_EN_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX0_MUXD1_RX_CDR_DFX_FEEDFWRDPHASE_OVR_VAL_MUXD1_BF_OFF (16)
#define PMA_RX_MGS_CDR_DFX0_MUXD1_RX_CDR_DFX_FEEDFWRDPHASE_OVR_VAL_MUXD1_BF_WID ( 5)
#define PMA_RX_MGS_CDR_DFX0_MUXD1_RX_CDR_DFX_FEEDFWRDPHASE_OVR_VAL_MUXD1_BF_MSK (0x001F0000)
#define PMA_RX_MGS_CDR_DFX0_MUXD1_RX_CDR_DFX_FEEDFWRDPHASE_OVR_VAL_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX0_MUXD1_RX_CDR_DFX_DIS_DFT_TIMER_OVRD_VAL_MUXD1_BF_OFF (21)
#define PMA_RX_MGS_CDR_DFX0_MUXD1_RX_CDR_DFX_DIS_DFT_TIMER_OVRD_VAL_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DFX0_MUXD1_RX_CDR_DFX_DIS_DFT_TIMER_OVRD_VAL_MUXD1_BF_MSK (0x00200000)
#define PMA_RX_MGS_CDR_DFX0_MUXD1_RX_CDR_DFX_DIS_DFT_TIMER_OVRD_VAL_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX0_MUXD1_RX_CDR_DFX_DIS_DFT_TIMER_OVRD_EN_MUXD1_BF_OFF (22)
#define PMA_RX_MGS_CDR_DFX0_MUXD1_RX_CDR_DFX_DIS_DFT_TIMER_OVRD_EN_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DFX0_MUXD1_RX_CDR_DFX_DIS_DFT_TIMER_OVRD_EN_MUXD1_BF_MSK (0x00400000)
#define PMA_RX_MGS_CDR_DFX0_MUXD1_RX_CDR_DFX_DIS_DFT_TIMER_OVRD_EN_MUXD1_BF_DEF (0x00400000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_DFX0_MUXD2 register description at address offset 0x548
  *
  * Register default value:        0x00400000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_dfx0_muxd2
  * rx_cdr_dfx0
  */

typedef union {
  struct {
    uint32_t RX_CDR_FINE_MODULATION_EN_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_FINE_MODULATION_SEL_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RX_CDR_TDCPE_MODULATION_EN_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t RX_CDR_LDO_MODULATION_EN_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RX_CDR_MODULATION_TOGGLE_DELAY_MUXD2 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RX_CDR_DFX_FEEDFWRD_OFFSET_OVR_EN_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 7;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
    uint32_t RX_CDR_DFX_FEEDFWRDPHASE_OVR_VAL_MUXD2 : 5;
    ///< ---
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t RX_CDR_DFX_DISABLE_DFT_TIMER_OVRD_VAL_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t RX_CDR_DFX_DISABLE_DFT_TIMER_OVRD_EN_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="22" ResetValue="0x1"
    uint32_t  : 9;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_dfx0_muxd2_reg_t;

#define PMA_RX_MGS_CDR_DFX0_MUXD2_DEFAULT (0x00400000U)
#define PMA_RX_MGS_CDR_DFX0_MUXD2_RD_MASK (0x007f01ffU)
#define PMA_RX_MGS_CDR_DFX0_MUXD2_WR_MASK (0x007f01ffU)


#define PMA_RX_MGS_CDR_DFX0_MUXD2_RX_CDR_FINE_MOD_EN_MUXD2_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_DFX0_MUXD2_RX_CDR_FINE_MOD_EN_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DFX0_MUXD2_RX_CDR_FINE_MOD_EN_MUXD2_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_DFX0_MUXD2_RX_CDR_FINE_MOD_EN_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX0_MUXD2_RX_CDR_FINE_MOD_SEL_MUXD2_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_DFX0_MUXD2_RX_CDR_FINE_MOD_SEL_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DFX0_MUXD2_RX_CDR_FINE_MOD_SEL_MUXD2_BF_MSK (0x00000002)
#define PMA_RX_MGS_CDR_DFX0_MUXD2_RX_CDR_FINE_MOD_SEL_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX0_MUXD2_RX_CDR_TDCPE_MOD_EN_MUXD2_BF_OFF ( 2)
#define PMA_RX_MGS_CDR_DFX0_MUXD2_RX_CDR_TDCPE_MOD_EN_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DFX0_MUXD2_RX_CDR_TDCPE_MOD_EN_MUXD2_BF_MSK (0x00000004)
#define PMA_RX_MGS_CDR_DFX0_MUXD2_RX_CDR_TDCPE_MOD_EN_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX0_MUXD2_RX_CDR_LDO_MOD_EN_MUXD2_BF_OFF ( 3)
#define PMA_RX_MGS_CDR_DFX0_MUXD2_RX_CDR_LDO_MOD_EN_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DFX0_MUXD2_RX_CDR_LDO_MOD_EN_MUXD2_BF_MSK (0x00000008)
#define PMA_RX_MGS_CDR_DFX0_MUXD2_RX_CDR_LDO_MOD_EN_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX0_MUXD2_RX_CDR_MOD_TOGGLE_DELAY_MUXD2_BF_OFF ( 4)
#define PMA_RX_MGS_CDR_DFX0_MUXD2_RX_CDR_MOD_TOGGLE_DELAY_MUXD2_BF_WID ( 4)
#define PMA_RX_MGS_CDR_DFX0_MUXD2_RX_CDR_MOD_TOGGLE_DELAY_MUXD2_BF_MSK (0x000000F0)
#define PMA_RX_MGS_CDR_DFX0_MUXD2_RX_CDR_MOD_TOGGLE_DELAY_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX0_MUXD2_RX_CDR_DFX_FEEDFWRD_OFFSET_OVR_EN_MUXD2_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_DFX0_MUXD2_RX_CDR_DFX_FEEDFWRD_OFFSET_OVR_EN_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DFX0_MUXD2_RX_CDR_DFX_FEEDFWRD_OFFSET_OVR_EN_MUXD2_BF_MSK (0x00000100)
#define PMA_RX_MGS_CDR_DFX0_MUXD2_RX_CDR_DFX_FEEDFWRD_OFFSET_OVR_EN_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX0_MUXD2_RX_CDR_DFX_FEEDFWRDPHASE_OVR_VAL_MUXD2_BF_OFF (16)
#define PMA_RX_MGS_CDR_DFX0_MUXD2_RX_CDR_DFX_FEEDFWRDPHASE_OVR_VAL_MUXD2_BF_WID ( 5)
#define PMA_RX_MGS_CDR_DFX0_MUXD2_RX_CDR_DFX_FEEDFWRDPHASE_OVR_VAL_MUXD2_BF_MSK (0x001F0000)
#define PMA_RX_MGS_CDR_DFX0_MUXD2_RX_CDR_DFX_FEEDFWRDPHASE_OVR_VAL_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX0_MUXD2_RX_CDR_DFX_DIS_DFT_TIMER_OVRD_VAL_MUXD2_BF_OFF (21)
#define PMA_RX_MGS_CDR_DFX0_MUXD2_RX_CDR_DFX_DIS_DFT_TIMER_OVRD_VAL_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DFX0_MUXD2_RX_CDR_DFX_DIS_DFT_TIMER_OVRD_VAL_MUXD2_BF_MSK (0x00200000)
#define PMA_RX_MGS_CDR_DFX0_MUXD2_RX_CDR_DFX_DIS_DFT_TIMER_OVRD_VAL_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX0_MUXD2_RX_CDR_DFX_DIS_DFT_TIMER_OVRD_EN_MUXD2_BF_OFF (22)
#define PMA_RX_MGS_CDR_DFX0_MUXD2_RX_CDR_DFX_DIS_DFT_TIMER_OVRD_EN_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DFX0_MUXD2_RX_CDR_DFX_DIS_DFT_TIMER_OVRD_EN_MUXD2_BF_MSK (0x00400000)
#define PMA_RX_MGS_CDR_DFX0_MUXD2_RX_CDR_DFX_DIS_DFT_TIMER_OVRD_EN_MUXD2_BF_DEF (0x00400000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_DFX0_MUXD3 register description at address offset 0x54c
  *
  * Register default value:        0x00400000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_dfx0_muxd3
  * rx_cdr_dfx0
  */

typedef union {
  struct {
    uint32_t RX_CDR_FINE_MODULATION_EN_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_FINE_MODULATION_SEL_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RX_CDR_TDCPE_MODULATION_EN_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t RX_CDR_LDO_MODULATION_EN_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RX_CDR_MODULATION_TOGGLE_DELAY_MUXD3 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RX_CDR_DFX_FEEDFWRD_OFFSET_OVR_EN_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 7;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
    uint32_t RX_CDR_DFX_FEEDFWRDPHASE_OVR_VAL_MUXD3 : 5;
    ///< ---
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t RX_CDR_DFX_DISABLE_DFT_TIMER_OVRD_VAL_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t RX_CDR_DFX_DISABLE_DFT_TIMER_OVRD_EN_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="22" ResetValue="0x1"
    uint32_t  : 9;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_dfx0_muxd3_reg_t;

#define PMA_RX_MGS_CDR_DFX0_MUXD3_DEFAULT (0x00400000U)
#define PMA_RX_MGS_CDR_DFX0_MUXD3_RD_MASK (0x007f01ffU)
#define PMA_RX_MGS_CDR_DFX0_MUXD3_WR_MASK (0x007f01ffU)


#define PMA_RX_MGS_CDR_DFX0_MUXD3_RX_CDR_FINE_MOD_EN_MUXD3_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_DFX0_MUXD3_RX_CDR_FINE_MOD_EN_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DFX0_MUXD3_RX_CDR_FINE_MOD_EN_MUXD3_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_DFX0_MUXD3_RX_CDR_FINE_MOD_EN_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX0_MUXD3_RX_CDR_FINE_MOD_SEL_MUXD3_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_DFX0_MUXD3_RX_CDR_FINE_MOD_SEL_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DFX0_MUXD3_RX_CDR_FINE_MOD_SEL_MUXD3_BF_MSK (0x00000002)
#define PMA_RX_MGS_CDR_DFX0_MUXD3_RX_CDR_FINE_MOD_SEL_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX0_MUXD3_RX_CDR_TDCPE_MOD_EN_MUXD3_BF_OFF ( 2)
#define PMA_RX_MGS_CDR_DFX0_MUXD3_RX_CDR_TDCPE_MOD_EN_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DFX0_MUXD3_RX_CDR_TDCPE_MOD_EN_MUXD3_BF_MSK (0x00000004)
#define PMA_RX_MGS_CDR_DFX0_MUXD3_RX_CDR_TDCPE_MOD_EN_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX0_MUXD3_RX_CDR_LDO_MOD_EN_MUXD3_BF_OFF ( 3)
#define PMA_RX_MGS_CDR_DFX0_MUXD3_RX_CDR_LDO_MOD_EN_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DFX0_MUXD3_RX_CDR_LDO_MOD_EN_MUXD3_BF_MSK (0x00000008)
#define PMA_RX_MGS_CDR_DFX0_MUXD3_RX_CDR_LDO_MOD_EN_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX0_MUXD3_RX_CDR_MOD_TOGGLE_DELAY_MUXD3_BF_OFF ( 4)
#define PMA_RX_MGS_CDR_DFX0_MUXD3_RX_CDR_MOD_TOGGLE_DELAY_MUXD3_BF_WID ( 4)
#define PMA_RX_MGS_CDR_DFX0_MUXD3_RX_CDR_MOD_TOGGLE_DELAY_MUXD3_BF_MSK (0x000000F0)
#define PMA_RX_MGS_CDR_DFX0_MUXD3_RX_CDR_MOD_TOGGLE_DELAY_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX0_MUXD3_RX_CDR_DFX_FEEDFWRD_OFFSET_OVR_EN_MUXD3_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_DFX0_MUXD3_RX_CDR_DFX_FEEDFWRD_OFFSET_OVR_EN_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DFX0_MUXD3_RX_CDR_DFX_FEEDFWRD_OFFSET_OVR_EN_MUXD3_BF_MSK (0x00000100)
#define PMA_RX_MGS_CDR_DFX0_MUXD3_RX_CDR_DFX_FEEDFWRD_OFFSET_OVR_EN_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX0_MUXD3_RX_CDR_DFX_FEEDFWRDPHASE_OVR_VAL_MUXD3_BF_OFF (16)
#define PMA_RX_MGS_CDR_DFX0_MUXD3_RX_CDR_DFX_FEEDFWRDPHASE_OVR_VAL_MUXD3_BF_WID ( 5)
#define PMA_RX_MGS_CDR_DFX0_MUXD3_RX_CDR_DFX_FEEDFWRDPHASE_OVR_VAL_MUXD3_BF_MSK (0x001F0000)
#define PMA_RX_MGS_CDR_DFX0_MUXD3_RX_CDR_DFX_FEEDFWRDPHASE_OVR_VAL_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX0_MUXD3_RX_CDR_DFX_DIS_DFT_TIMER_OVRD_VAL_MUXD3_BF_OFF (21)
#define PMA_RX_MGS_CDR_DFX0_MUXD3_RX_CDR_DFX_DIS_DFT_TIMER_OVRD_VAL_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DFX0_MUXD3_RX_CDR_DFX_DIS_DFT_TIMER_OVRD_VAL_MUXD3_BF_MSK (0x00200000)
#define PMA_RX_MGS_CDR_DFX0_MUXD3_RX_CDR_DFX_DIS_DFT_TIMER_OVRD_VAL_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX0_MUXD3_RX_CDR_DFX_DIS_DFT_TIMER_OVRD_EN_MUXD3_BF_OFF (22)
#define PMA_RX_MGS_CDR_DFX0_MUXD3_RX_CDR_DFX_DIS_DFT_TIMER_OVRD_EN_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DFX0_MUXD3_RX_CDR_DFX_DIS_DFT_TIMER_OVRD_EN_MUXD3_BF_MSK (0x00400000)
#define PMA_RX_MGS_CDR_DFX0_MUXD3_RX_CDR_DFX_DIS_DFT_TIMER_OVRD_EN_MUXD3_BF_DEF (0x00400000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_DFX0_MUXD4 register description at address offset 0x550
  *
  * Register default value:        0x00400000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_dfx0_muxd4
  * rx_cdr_dfx0
  */

typedef union {
  struct {
    uint32_t RX_CDR_FINE_MODULATION_EN_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_FINE_MODULATION_SEL_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RX_CDR_TDCPE_MODULATION_EN_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t RX_CDR_LDO_MODULATION_EN_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RX_CDR_MODULATION_TOGGLE_DELAY_MUXD4 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RX_CDR_DFX_FEEDFWRD_OFFSET_OVR_EN_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 7;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
    uint32_t RX_CDR_DFX_FEEDFWRDPHASE_OVR_VAL_MUXD4 : 5;
    ///< ---
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t RX_CDR_DFX_DISABLE_DFT_TIMER_OVRD_VAL_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t RX_CDR_DFX_DISABLE_DFT_TIMER_OVRD_EN_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="22" ResetValue="0x1"
    uint32_t  : 9;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_dfx0_muxd4_reg_t;

#define PMA_RX_MGS_CDR_DFX0_MUXD4_DEFAULT (0x00400000U)
#define PMA_RX_MGS_CDR_DFX0_MUXD4_RD_MASK (0x007f01ffU)
#define PMA_RX_MGS_CDR_DFX0_MUXD4_WR_MASK (0x007f01ffU)


#define PMA_RX_MGS_CDR_DFX0_MUXD4_RX_CDR_FINE_MOD_EN_MUXD4_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_DFX0_MUXD4_RX_CDR_FINE_MOD_EN_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DFX0_MUXD4_RX_CDR_FINE_MOD_EN_MUXD4_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_DFX0_MUXD4_RX_CDR_FINE_MOD_EN_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX0_MUXD4_RX_CDR_FINE_MOD_SEL_MUXD4_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_DFX0_MUXD4_RX_CDR_FINE_MOD_SEL_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DFX0_MUXD4_RX_CDR_FINE_MOD_SEL_MUXD4_BF_MSK (0x00000002)
#define PMA_RX_MGS_CDR_DFX0_MUXD4_RX_CDR_FINE_MOD_SEL_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX0_MUXD4_RX_CDR_TDCPE_MOD_EN_MUXD4_BF_OFF ( 2)
#define PMA_RX_MGS_CDR_DFX0_MUXD4_RX_CDR_TDCPE_MOD_EN_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DFX0_MUXD4_RX_CDR_TDCPE_MOD_EN_MUXD4_BF_MSK (0x00000004)
#define PMA_RX_MGS_CDR_DFX0_MUXD4_RX_CDR_TDCPE_MOD_EN_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX0_MUXD4_RX_CDR_LDO_MOD_EN_MUXD4_BF_OFF ( 3)
#define PMA_RX_MGS_CDR_DFX0_MUXD4_RX_CDR_LDO_MOD_EN_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DFX0_MUXD4_RX_CDR_LDO_MOD_EN_MUXD4_BF_MSK (0x00000008)
#define PMA_RX_MGS_CDR_DFX0_MUXD4_RX_CDR_LDO_MOD_EN_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX0_MUXD4_RX_CDR_MOD_TOGGLE_DELAY_MUXD4_BF_OFF ( 4)
#define PMA_RX_MGS_CDR_DFX0_MUXD4_RX_CDR_MOD_TOGGLE_DELAY_MUXD4_BF_WID ( 4)
#define PMA_RX_MGS_CDR_DFX0_MUXD4_RX_CDR_MOD_TOGGLE_DELAY_MUXD4_BF_MSK (0x000000F0)
#define PMA_RX_MGS_CDR_DFX0_MUXD4_RX_CDR_MOD_TOGGLE_DELAY_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX0_MUXD4_RX_CDR_DFX_FEEDFWRD_OFFSET_OVR_EN_MUXD4_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_DFX0_MUXD4_RX_CDR_DFX_FEEDFWRD_OFFSET_OVR_EN_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DFX0_MUXD4_RX_CDR_DFX_FEEDFWRD_OFFSET_OVR_EN_MUXD4_BF_MSK (0x00000100)
#define PMA_RX_MGS_CDR_DFX0_MUXD4_RX_CDR_DFX_FEEDFWRD_OFFSET_OVR_EN_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX0_MUXD4_RX_CDR_DFX_FEEDFWRDPHASE_OVR_VAL_MUXD4_BF_OFF (16)
#define PMA_RX_MGS_CDR_DFX0_MUXD4_RX_CDR_DFX_FEEDFWRDPHASE_OVR_VAL_MUXD4_BF_WID ( 5)
#define PMA_RX_MGS_CDR_DFX0_MUXD4_RX_CDR_DFX_FEEDFWRDPHASE_OVR_VAL_MUXD4_BF_MSK (0x001F0000)
#define PMA_RX_MGS_CDR_DFX0_MUXD4_RX_CDR_DFX_FEEDFWRDPHASE_OVR_VAL_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX0_MUXD4_RX_CDR_DFX_DIS_DFT_TIMER_OVRD_VAL_MUXD4_BF_OFF (21)
#define PMA_RX_MGS_CDR_DFX0_MUXD4_RX_CDR_DFX_DIS_DFT_TIMER_OVRD_VAL_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DFX0_MUXD4_RX_CDR_DFX_DIS_DFT_TIMER_OVRD_VAL_MUXD4_BF_MSK (0x00200000)
#define PMA_RX_MGS_CDR_DFX0_MUXD4_RX_CDR_DFX_DIS_DFT_TIMER_OVRD_VAL_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX0_MUXD4_RX_CDR_DFX_DIS_DFT_TIMER_OVRD_EN_MUXD4_BF_OFF (22)
#define PMA_RX_MGS_CDR_DFX0_MUXD4_RX_CDR_DFX_DIS_DFT_TIMER_OVRD_EN_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DFX0_MUXD4_RX_CDR_DFX_DIS_DFT_TIMER_OVRD_EN_MUXD4_BF_MSK (0x00400000)
#define PMA_RX_MGS_CDR_DFX0_MUXD4_RX_CDR_DFX_DIS_DFT_TIMER_OVRD_EN_MUXD4_BF_DEF (0x00400000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_DFX1 register description at address offset 0x554
  *
  * Register default value:        0x0000AAAA
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_dfx1
  * rx_cdr_dfx1
  */

typedef union {
  struct {
    uint32_t RX_CDR_DPSO_MARKER : 16;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0xAAAA"
    uint32_t RX_CDR_FBDIV_CLKGATE : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t RX_CDR_TDCPE_MODULATION_VAL : 5;
    ///< ---
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_dfx1_reg_t;

#define PMA_RX_MGS_CDR_DFX1_DEFAULT (0x0000aaaaU)
#define PMA_RX_MGS_CDR_DFX1_RD_MASK (0x003fffffU)
#define PMA_RX_MGS_CDR_DFX1_WR_MASK (0x003fffffU)


#define PMA_RX_MGS_CDR_DFX1_RX_CDR_DPSO_MARKER_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_DFX1_RX_CDR_DPSO_MARKER_BF_WID (16)
#define PMA_RX_MGS_CDR_DFX1_RX_CDR_DPSO_MARKER_BF_MSK (0x0000FFFF)
#define PMA_RX_MGS_CDR_DFX1_RX_CDR_DPSO_MARKER_BF_DEF (0x0000AAAA)

#define PMA_RX_MGS_CDR_DFX1_RX_CDR_FBDIV_CLKGATE_BF_OFF (16)
#define PMA_RX_MGS_CDR_DFX1_RX_CDR_FBDIV_CLKGATE_BF_WID ( 1)
#define PMA_RX_MGS_CDR_DFX1_RX_CDR_FBDIV_CLKGATE_BF_MSK (0x00010000)
#define PMA_RX_MGS_CDR_DFX1_RX_CDR_FBDIV_CLKGATE_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_DFX1_RX_CDR_TDCPE_MOD_VAL_BF_OFF (17)
#define PMA_RX_MGS_CDR_DFX1_RX_CDR_TDCPE_MOD_VAL_BF_WID ( 5)
#define PMA_RX_MGS_CDR_DFX1_RX_CDR_TDCPE_MOD_VAL_BF_MSK (0x003E0000)
#define PMA_RX_MGS_CDR_DFX1_RX_CDR_TDCPE_MOD_VAL_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_LDO0_MUXD0 register description at address offset 0x558
  *
  * Register default value:        0x021C05AA
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_ldo0_muxd0
  * rx_cdr_ldo0
  */

typedef union {
  struct {
    uint32_t RX_CDR_REFGEN_LDODCO_LOW_SEL_MUXD0 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0xA"
    uint32_t RX_CDR_REFGEN_LDODCO_HIGH_SEL_MUXD0 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="4" ResetValue="0xA"
    uint32_t RX_CDR_REFGEN_SEL_STG_LOW_MUXD0 : 8;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x5"
    uint32_t RX_CDR_SWING_PEAK_REF_CTL_MUXD0 : 5;
    ///< ---
    ///< AccessType="RW" BitOffset="16" ResetValue="0x1C"
    uint32_t RX_CDR_BYP_RES_MUXD0 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t RX_CDR_LDO_BYPASS_EN_MUXD0 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t RX_CDR_EN_DIVMON_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="25" ResetValue="0x1"
    uint32_t RX_CDR_EN_PEAK_SENSE_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="26" ResetValue="0x0"
    uint32_t RX_CDR_INV_VPEAK_COMB_FB_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="27" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_ldo0_muxd0_reg_t;

#define PMA_RX_MGS_CDR_LDO0_MUXD0_DEFAULT (0x021c05aaU)
#define PMA_RX_MGS_CDR_LDO0_MUXD0_RD_MASK (0x0fffffffU)
#define PMA_RX_MGS_CDR_LDO0_MUXD0_WR_MASK (0x0fffffffU)


#define PMA_RX_MGS_CDR_LDO0_MUXD0_RX_CDR_REFGEN_LDODCO_LOW_SEL_MUXD0_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_LDO0_MUXD0_RX_CDR_REFGEN_LDODCO_LOW_SEL_MUXD0_BF_WID ( 4)
#define PMA_RX_MGS_CDR_LDO0_MUXD0_RX_CDR_REFGEN_LDODCO_LOW_SEL_MUXD0_BF_MSK (0x0000000F)
#define PMA_RX_MGS_CDR_LDO0_MUXD0_RX_CDR_REFGEN_LDODCO_LOW_SEL_MUXD0_BF_DEF (0x0000000A)

#define PMA_RX_MGS_CDR_LDO0_MUXD0_RX_CDR_REFGEN_LDODCO_HIGH_SEL_MUXD0_BF_OFF ( 4)
#define PMA_RX_MGS_CDR_LDO0_MUXD0_RX_CDR_REFGEN_LDODCO_HIGH_SEL_MUXD0_BF_WID ( 4)
#define PMA_RX_MGS_CDR_LDO0_MUXD0_RX_CDR_REFGEN_LDODCO_HIGH_SEL_MUXD0_BF_MSK (0x000000F0)
#define PMA_RX_MGS_CDR_LDO0_MUXD0_RX_CDR_REFGEN_LDODCO_HIGH_SEL_MUXD0_BF_DEF (0x000000A0)

#define PMA_RX_MGS_CDR_LDO0_MUXD0_RX_CDR_REFGEN_SEL_STG_LOW_MUXD0_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_LDO0_MUXD0_RX_CDR_REFGEN_SEL_STG_LOW_MUXD0_BF_WID ( 8)
#define PMA_RX_MGS_CDR_LDO0_MUXD0_RX_CDR_REFGEN_SEL_STG_LOW_MUXD0_BF_MSK (0x0000FF00)
#define PMA_RX_MGS_CDR_LDO0_MUXD0_RX_CDR_REFGEN_SEL_STG_LOW_MUXD0_BF_DEF (0x00000500)

#define PMA_RX_MGS_CDR_LDO0_MUXD0_RX_CDR_SWING_PEAK_REF_CTL_MUXD0_BF_OFF (16)
#define PMA_RX_MGS_CDR_LDO0_MUXD0_RX_CDR_SWING_PEAK_REF_CTL_MUXD0_BF_WID ( 5)
#define PMA_RX_MGS_CDR_LDO0_MUXD0_RX_CDR_SWING_PEAK_REF_CTL_MUXD0_BF_MSK (0x001F0000)
#define PMA_RX_MGS_CDR_LDO0_MUXD0_RX_CDR_SWING_PEAK_REF_CTL_MUXD0_BF_DEF (0x001C0000)

#define PMA_RX_MGS_CDR_LDO0_MUXD0_RX_CDR_BYP_RES_MUXD0_BF_OFF (21)
#define PMA_RX_MGS_CDR_LDO0_MUXD0_RX_CDR_BYP_RES_MUXD0_BF_WID ( 2)
#define PMA_RX_MGS_CDR_LDO0_MUXD0_RX_CDR_BYP_RES_MUXD0_BF_MSK (0x00600000)
#define PMA_RX_MGS_CDR_LDO0_MUXD0_RX_CDR_BYP_RES_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO0_MUXD0_RX_CDR_LDO_BYP_EN_MUXD0_BF_OFF (23)
#define PMA_RX_MGS_CDR_LDO0_MUXD0_RX_CDR_LDO_BYP_EN_MUXD0_BF_WID ( 2)
#define PMA_RX_MGS_CDR_LDO0_MUXD0_RX_CDR_LDO_BYP_EN_MUXD0_BF_MSK (0x01800000)
#define PMA_RX_MGS_CDR_LDO0_MUXD0_RX_CDR_LDO_BYP_EN_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO0_MUXD0_RX_CDR_EN_DIVMON_MUXD0_BF_OFF (25)
#define PMA_RX_MGS_CDR_LDO0_MUXD0_RX_CDR_EN_DIVMON_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO0_MUXD0_RX_CDR_EN_DIVMON_MUXD0_BF_MSK (0x02000000)
#define PMA_RX_MGS_CDR_LDO0_MUXD0_RX_CDR_EN_DIVMON_MUXD0_BF_DEF (0x02000000)

#define PMA_RX_MGS_CDR_LDO0_MUXD0_RX_CDR_EN_PEAK_SENSE_MUXD0_BF_OFF (26)
#define PMA_RX_MGS_CDR_LDO0_MUXD0_RX_CDR_EN_PEAK_SENSE_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO0_MUXD0_RX_CDR_EN_PEAK_SENSE_MUXD0_BF_MSK (0x04000000)
#define PMA_RX_MGS_CDR_LDO0_MUXD0_RX_CDR_EN_PEAK_SENSE_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO0_MUXD0_RX_CDR_INV_VPEAK_COMB_FB_MUXD0_BF_OFF (27)
#define PMA_RX_MGS_CDR_LDO0_MUXD0_RX_CDR_INV_VPEAK_COMB_FB_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO0_MUXD0_RX_CDR_INV_VPEAK_COMB_FB_MUXD0_BF_MSK (0x08000000)
#define PMA_RX_MGS_CDR_LDO0_MUXD0_RX_CDR_INV_VPEAK_COMB_FB_MUXD0_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_LDO0_MUXD1 register description at address offset 0x55c
  *
  * Register default value:        0x021C05AA
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_ldo0_muxd1
  * rx_cdr_ldo0
  */

typedef union {
  struct {
    uint32_t RX_CDR_REFGEN_LDODCO_LOW_SEL_MUXD1 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0xA"
    uint32_t RX_CDR_REFGEN_LDODCO_HIGH_SEL_MUXD1 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="4" ResetValue="0xA"
    uint32_t RX_CDR_REFGEN_SEL_STG_LOW_MUXD1 : 8;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x5"
    uint32_t RX_CDR_SWING_PEAK_REF_CTL_MUXD1 : 5;
    ///< ---
    ///< AccessType="RW" BitOffset="16" ResetValue="0x1C"
    uint32_t RX_CDR_BYP_RES_MUXD1 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t RX_CDR_LDO_BYPASS_EN_MUXD1 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t RX_CDR_EN_DIVMON_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="25" ResetValue="0x1"
    uint32_t RX_CDR_EN_PEAK_SENSE_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="26" ResetValue="0x0"
    uint32_t RX_CDR_INV_VPEAK_COMB_FB_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="27" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_ldo0_muxd1_reg_t;

#define PMA_RX_MGS_CDR_LDO0_MUXD1_DEFAULT (0x021c05aaU)
#define PMA_RX_MGS_CDR_LDO0_MUXD1_RD_MASK (0x0fffffffU)
#define PMA_RX_MGS_CDR_LDO0_MUXD1_WR_MASK (0x0fffffffU)


#define PMA_RX_MGS_CDR_LDO0_MUXD1_RX_CDR_REFGEN_LDODCO_LOW_SEL_MUXD1_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_LDO0_MUXD1_RX_CDR_REFGEN_LDODCO_LOW_SEL_MUXD1_BF_WID ( 4)
#define PMA_RX_MGS_CDR_LDO0_MUXD1_RX_CDR_REFGEN_LDODCO_LOW_SEL_MUXD1_BF_MSK (0x0000000F)
#define PMA_RX_MGS_CDR_LDO0_MUXD1_RX_CDR_REFGEN_LDODCO_LOW_SEL_MUXD1_BF_DEF (0x0000000A)

#define PMA_RX_MGS_CDR_LDO0_MUXD1_RX_CDR_REFGEN_LDODCO_HIGH_SEL_MUXD1_BF_OFF ( 4)
#define PMA_RX_MGS_CDR_LDO0_MUXD1_RX_CDR_REFGEN_LDODCO_HIGH_SEL_MUXD1_BF_WID ( 4)
#define PMA_RX_MGS_CDR_LDO0_MUXD1_RX_CDR_REFGEN_LDODCO_HIGH_SEL_MUXD1_BF_MSK (0x000000F0)
#define PMA_RX_MGS_CDR_LDO0_MUXD1_RX_CDR_REFGEN_LDODCO_HIGH_SEL_MUXD1_BF_DEF (0x000000A0)

#define PMA_RX_MGS_CDR_LDO0_MUXD1_RX_CDR_REFGEN_SEL_STG_LOW_MUXD1_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_LDO0_MUXD1_RX_CDR_REFGEN_SEL_STG_LOW_MUXD1_BF_WID ( 8)
#define PMA_RX_MGS_CDR_LDO0_MUXD1_RX_CDR_REFGEN_SEL_STG_LOW_MUXD1_BF_MSK (0x0000FF00)
#define PMA_RX_MGS_CDR_LDO0_MUXD1_RX_CDR_REFGEN_SEL_STG_LOW_MUXD1_BF_DEF (0x00000500)

#define PMA_RX_MGS_CDR_LDO0_MUXD1_RX_CDR_SWING_PEAK_REF_CTL_MUXD1_BF_OFF (16)
#define PMA_RX_MGS_CDR_LDO0_MUXD1_RX_CDR_SWING_PEAK_REF_CTL_MUXD1_BF_WID ( 5)
#define PMA_RX_MGS_CDR_LDO0_MUXD1_RX_CDR_SWING_PEAK_REF_CTL_MUXD1_BF_MSK (0x001F0000)
#define PMA_RX_MGS_CDR_LDO0_MUXD1_RX_CDR_SWING_PEAK_REF_CTL_MUXD1_BF_DEF (0x001C0000)

#define PMA_RX_MGS_CDR_LDO0_MUXD1_RX_CDR_BYP_RES_MUXD1_BF_OFF (21)
#define PMA_RX_MGS_CDR_LDO0_MUXD1_RX_CDR_BYP_RES_MUXD1_BF_WID ( 2)
#define PMA_RX_MGS_CDR_LDO0_MUXD1_RX_CDR_BYP_RES_MUXD1_BF_MSK (0x00600000)
#define PMA_RX_MGS_CDR_LDO0_MUXD1_RX_CDR_BYP_RES_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO0_MUXD1_RX_CDR_LDO_BYP_EN_MUXD1_BF_OFF (23)
#define PMA_RX_MGS_CDR_LDO0_MUXD1_RX_CDR_LDO_BYP_EN_MUXD1_BF_WID ( 2)
#define PMA_RX_MGS_CDR_LDO0_MUXD1_RX_CDR_LDO_BYP_EN_MUXD1_BF_MSK (0x01800000)
#define PMA_RX_MGS_CDR_LDO0_MUXD1_RX_CDR_LDO_BYP_EN_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO0_MUXD1_RX_CDR_EN_DIVMON_MUXD1_BF_OFF (25)
#define PMA_RX_MGS_CDR_LDO0_MUXD1_RX_CDR_EN_DIVMON_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO0_MUXD1_RX_CDR_EN_DIVMON_MUXD1_BF_MSK (0x02000000)
#define PMA_RX_MGS_CDR_LDO0_MUXD1_RX_CDR_EN_DIVMON_MUXD1_BF_DEF (0x02000000)

#define PMA_RX_MGS_CDR_LDO0_MUXD1_RX_CDR_EN_PEAK_SENSE_MUXD1_BF_OFF (26)
#define PMA_RX_MGS_CDR_LDO0_MUXD1_RX_CDR_EN_PEAK_SENSE_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO0_MUXD1_RX_CDR_EN_PEAK_SENSE_MUXD1_BF_MSK (0x04000000)
#define PMA_RX_MGS_CDR_LDO0_MUXD1_RX_CDR_EN_PEAK_SENSE_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO0_MUXD1_RX_CDR_INV_VPEAK_COMB_FB_MUXD1_BF_OFF (27)
#define PMA_RX_MGS_CDR_LDO0_MUXD1_RX_CDR_INV_VPEAK_COMB_FB_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO0_MUXD1_RX_CDR_INV_VPEAK_COMB_FB_MUXD1_BF_MSK (0x08000000)
#define PMA_RX_MGS_CDR_LDO0_MUXD1_RX_CDR_INV_VPEAK_COMB_FB_MUXD1_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_LDO0_MUXD2 register description at address offset 0x560
  *
  * Register default value:        0x021C05AA
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_ldo0_muxd2
  * rx_cdr_ldo0
  */

typedef union {
  struct {
    uint32_t RX_CDR_REFGEN_LDODCO_LOW_SEL_MUXD2 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0xA"
    uint32_t RX_CDR_REFGEN_LDODCO_HIGH_SEL_MUXD2 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="4" ResetValue="0xA"
    uint32_t RX_CDR_REFGEN_SEL_STG_LOW_MUXD2 : 8;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x5"
    uint32_t RX_CDR_SWING_PEAK_REF_CTL_MUXD2 : 5;
    ///< ---
    ///< AccessType="RW" BitOffset="16" ResetValue="0x1C"
    uint32_t RX_CDR_BYP_RES_MUXD2 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t RX_CDR_LDO_BYPASS_EN_MUXD2 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t RX_CDR_EN_DIVMON_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="25" ResetValue="0x1"
    uint32_t RX_CDR_EN_PEAK_SENSE_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="26" ResetValue="0x0"
    uint32_t RX_CDR_INV_VPEAK_COMB_FB_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="27" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_ldo0_muxd2_reg_t;

#define PMA_RX_MGS_CDR_LDO0_MUXD2_DEFAULT (0x021c05aaU)
#define PMA_RX_MGS_CDR_LDO0_MUXD2_RD_MASK (0x0fffffffU)
#define PMA_RX_MGS_CDR_LDO0_MUXD2_WR_MASK (0x0fffffffU)


#define PMA_RX_MGS_CDR_LDO0_MUXD2_RX_CDR_REFGEN_LDODCO_LOW_SEL_MUXD2_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_LDO0_MUXD2_RX_CDR_REFGEN_LDODCO_LOW_SEL_MUXD2_BF_WID ( 4)
#define PMA_RX_MGS_CDR_LDO0_MUXD2_RX_CDR_REFGEN_LDODCO_LOW_SEL_MUXD2_BF_MSK (0x0000000F)
#define PMA_RX_MGS_CDR_LDO0_MUXD2_RX_CDR_REFGEN_LDODCO_LOW_SEL_MUXD2_BF_DEF (0x0000000A)

#define PMA_RX_MGS_CDR_LDO0_MUXD2_RX_CDR_REFGEN_LDODCO_HIGH_SEL_MUXD2_BF_OFF ( 4)
#define PMA_RX_MGS_CDR_LDO0_MUXD2_RX_CDR_REFGEN_LDODCO_HIGH_SEL_MUXD2_BF_WID ( 4)
#define PMA_RX_MGS_CDR_LDO0_MUXD2_RX_CDR_REFGEN_LDODCO_HIGH_SEL_MUXD2_BF_MSK (0x000000F0)
#define PMA_RX_MGS_CDR_LDO0_MUXD2_RX_CDR_REFGEN_LDODCO_HIGH_SEL_MUXD2_BF_DEF (0x000000A0)

#define PMA_RX_MGS_CDR_LDO0_MUXD2_RX_CDR_REFGEN_SEL_STG_LOW_MUXD2_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_LDO0_MUXD2_RX_CDR_REFGEN_SEL_STG_LOW_MUXD2_BF_WID ( 8)
#define PMA_RX_MGS_CDR_LDO0_MUXD2_RX_CDR_REFGEN_SEL_STG_LOW_MUXD2_BF_MSK (0x0000FF00)
#define PMA_RX_MGS_CDR_LDO0_MUXD2_RX_CDR_REFGEN_SEL_STG_LOW_MUXD2_BF_DEF (0x00000500)

#define PMA_RX_MGS_CDR_LDO0_MUXD2_RX_CDR_SWING_PEAK_REF_CTL_MUXD2_BF_OFF (16)
#define PMA_RX_MGS_CDR_LDO0_MUXD2_RX_CDR_SWING_PEAK_REF_CTL_MUXD2_BF_WID ( 5)
#define PMA_RX_MGS_CDR_LDO0_MUXD2_RX_CDR_SWING_PEAK_REF_CTL_MUXD2_BF_MSK (0x001F0000)
#define PMA_RX_MGS_CDR_LDO0_MUXD2_RX_CDR_SWING_PEAK_REF_CTL_MUXD2_BF_DEF (0x001C0000)

#define PMA_RX_MGS_CDR_LDO0_MUXD2_RX_CDR_BYP_RES_MUXD2_BF_OFF (21)
#define PMA_RX_MGS_CDR_LDO0_MUXD2_RX_CDR_BYP_RES_MUXD2_BF_WID ( 2)
#define PMA_RX_MGS_CDR_LDO0_MUXD2_RX_CDR_BYP_RES_MUXD2_BF_MSK (0x00600000)
#define PMA_RX_MGS_CDR_LDO0_MUXD2_RX_CDR_BYP_RES_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO0_MUXD2_RX_CDR_LDO_BYP_EN_MUXD2_BF_OFF (23)
#define PMA_RX_MGS_CDR_LDO0_MUXD2_RX_CDR_LDO_BYP_EN_MUXD2_BF_WID ( 2)
#define PMA_RX_MGS_CDR_LDO0_MUXD2_RX_CDR_LDO_BYP_EN_MUXD2_BF_MSK (0x01800000)
#define PMA_RX_MGS_CDR_LDO0_MUXD2_RX_CDR_LDO_BYP_EN_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO0_MUXD2_RX_CDR_EN_DIVMON_MUXD2_BF_OFF (25)
#define PMA_RX_MGS_CDR_LDO0_MUXD2_RX_CDR_EN_DIVMON_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO0_MUXD2_RX_CDR_EN_DIVMON_MUXD2_BF_MSK (0x02000000)
#define PMA_RX_MGS_CDR_LDO0_MUXD2_RX_CDR_EN_DIVMON_MUXD2_BF_DEF (0x02000000)

#define PMA_RX_MGS_CDR_LDO0_MUXD2_RX_CDR_EN_PEAK_SENSE_MUXD2_BF_OFF (26)
#define PMA_RX_MGS_CDR_LDO0_MUXD2_RX_CDR_EN_PEAK_SENSE_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO0_MUXD2_RX_CDR_EN_PEAK_SENSE_MUXD2_BF_MSK (0x04000000)
#define PMA_RX_MGS_CDR_LDO0_MUXD2_RX_CDR_EN_PEAK_SENSE_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO0_MUXD2_RX_CDR_INV_VPEAK_COMB_FB_MUXD2_BF_OFF (27)
#define PMA_RX_MGS_CDR_LDO0_MUXD2_RX_CDR_INV_VPEAK_COMB_FB_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO0_MUXD2_RX_CDR_INV_VPEAK_COMB_FB_MUXD2_BF_MSK (0x08000000)
#define PMA_RX_MGS_CDR_LDO0_MUXD2_RX_CDR_INV_VPEAK_COMB_FB_MUXD2_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_LDO0_MUXD3 register description at address offset 0x564
  *
  * Register default value:        0x021C05AA
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_ldo0_muxd3
  * rx_cdr_ldo0
  */

typedef union {
  struct {
    uint32_t RX_CDR_REFGEN_LDODCO_LOW_SEL_MUXD3 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0xA"
    uint32_t RX_CDR_REFGEN_LDODCO_HIGH_SEL_MUXD3 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="4" ResetValue="0xA"
    uint32_t RX_CDR_REFGEN_SEL_STG_LOW_MUXD3 : 8;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x5"
    uint32_t RX_CDR_SWING_PEAK_REF_CTL_MUXD3 : 5;
    ///< ---
    ///< AccessType="RW" BitOffset="16" ResetValue="0x1C"
    uint32_t RX_CDR_BYP_RES_MUXD3 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t RX_CDR_LDO_BYPASS_EN_MUXD3 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t RX_CDR_EN_DIVMON_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="25" ResetValue="0x1"
    uint32_t RX_CDR_EN_PEAK_SENSE_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="26" ResetValue="0x0"
    uint32_t RX_CDR_INV_VPEAK_COMB_FB_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="27" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_ldo0_muxd3_reg_t;

#define PMA_RX_MGS_CDR_LDO0_MUXD3_DEFAULT (0x021c05aaU)
#define PMA_RX_MGS_CDR_LDO0_MUXD3_RD_MASK (0x0fffffffU)
#define PMA_RX_MGS_CDR_LDO0_MUXD3_WR_MASK (0x0fffffffU)


#define PMA_RX_MGS_CDR_LDO0_MUXD3_RX_CDR_REFGEN_LDODCO_LOW_SEL_MUXD3_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_LDO0_MUXD3_RX_CDR_REFGEN_LDODCO_LOW_SEL_MUXD3_BF_WID ( 4)
#define PMA_RX_MGS_CDR_LDO0_MUXD3_RX_CDR_REFGEN_LDODCO_LOW_SEL_MUXD3_BF_MSK (0x0000000F)
#define PMA_RX_MGS_CDR_LDO0_MUXD3_RX_CDR_REFGEN_LDODCO_LOW_SEL_MUXD3_BF_DEF (0x0000000A)

#define PMA_RX_MGS_CDR_LDO0_MUXD3_RX_CDR_REFGEN_LDODCO_HIGH_SEL_MUXD3_BF_OFF ( 4)
#define PMA_RX_MGS_CDR_LDO0_MUXD3_RX_CDR_REFGEN_LDODCO_HIGH_SEL_MUXD3_BF_WID ( 4)
#define PMA_RX_MGS_CDR_LDO0_MUXD3_RX_CDR_REFGEN_LDODCO_HIGH_SEL_MUXD3_BF_MSK (0x000000F0)
#define PMA_RX_MGS_CDR_LDO0_MUXD3_RX_CDR_REFGEN_LDODCO_HIGH_SEL_MUXD3_BF_DEF (0x000000A0)

#define PMA_RX_MGS_CDR_LDO0_MUXD3_RX_CDR_REFGEN_SEL_STG_LOW_MUXD3_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_LDO0_MUXD3_RX_CDR_REFGEN_SEL_STG_LOW_MUXD3_BF_WID ( 8)
#define PMA_RX_MGS_CDR_LDO0_MUXD3_RX_CDR_REFGEN_SEL_STG_LOW_MUXD3_BF_MSK (0x0000FF00)
#define PMA_RX_MGS_CDR_LDO0_MUXD3_RX_CDR_REFGEN_SEL_STG_LOW_MUXD3_BF_DEF (0x00000500)

#define PMA_RX_MGS_CDR_LDO0_MUXD3_RX_CDR_SWING_PEAK_REF_CTL_MUXD3_BF_OFF (16)
#define PMA_RX_MGS_CDR_LDO0_MUXD3_RX_CDR_SWING_PEAK_REF_CTL_MUXD3_BF_WID ( 5)
#define PMA_RX_MGS_CDR_LDO0_MUXD3_RX_CDR_SWING_PEAK_REF_CTL_MUXD3_BF_MSK (0x001F0000)
#define PMA_RX_MGS_CDR_LDO0_MUXD3_RX_CDR_SWING_PEAK_REF_CTL_MUXD3_BF_DEF (0x001C0000)

#define PMA_RX_MGS_CDR_LDO0_MUXD3_RX_CDR_BYP_RES_MUXD3_BF_OFF (21)
#define PMA_RX_MGS_CDR_LDO0_MUXD3_RX_CDR_BYP_RES_MUXD3_BF_WID ( 2)
#define PMA_RX_MGS_CDR_LDO0_MUXD3_RX_CDR_BYP_RES_MUXD3_BF_MSK (0x00600000)
#define PMA_RX_MGS_CDR_LDO0_MUXD3_RX_CDR_BYP_RES_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO0_MUXD3_RX_CDR_LDO_BYP_EN_MUXD3_BF_OFF (23)
#define PMA_RX_MGS_CDR_LDO0_MUXD3_RX_CDR_LDO_BYP_EN_MUXD3_BF_WID ( 2)
#define PMA_RX_MGS_CDR_LDO0_MUXD3_RX_CDR_LDO_BYP_EN_MUXD3_BF_MSK (0x01800000)
#define PMA_RX_MGS_CDR_LDO0_MUXD3_RX_CDR_LDO_BYP_EN_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO0_MUXD3_RX_CDR_EN_DIVMON_MUXD3_BF_OFF (25)
#define PMA_RX_MGS_CDR_LDO0_MUXD3_RX_CDR_EN_DIVMON_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO0_MUXD3_RX_CDR_EN_DIVMON_MUXD3_BF_MSK (0x02000000)
#define PMA_RX_MGS_CDR_LDO0_MUXD3_RX_CDR_EN_DIVMON_MUXD3_BF_DEF (0x02000000)

#define PMA_RX_MGS_CDR_LDO0_MUXD3_RX_CDR_EN_PEAK_SENSE_MUXD3_BF_OFF (26)
#define PMA_RX_MGS_CDR_LDO0_MUXD3_RX_CDR_EN_PEAK_SENSE_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO0_MUXD3_RX_CDR_EN_PEAK_SENSE_MUXD3_BF_MSK (0x04000000)
#define PMA_RX_MGS_CDR_LDO0_MUXD3_RX_CDR_EN_PEAK_SENSE_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO0_MUXD3_RX_CDR_INV_VPEAK_COMB_FB_MUXD3_BF_OFF (27)
#define PMA_RX_MGS_CDR_LDO0_MUXD3_RX_CDR_INV_VPEAK_COMB_FB_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO0_MUXD3_RX_CDR_INV_VPEAK_COMB_FB_MUXD3_BF_MSK (0x08000000)
#define PMA_RX_MGS_CDR_LDO0_MUXD3_RX_CDR_INV_VPEAK_COMB_FB_MUXD3_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_LDO0_MUXD4 register description at address offset 0x568
  *
  * Register default value:        0x021C05AA
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_ldo0_muxd4
  * rx_cdr_ldo0
  */

typedef union {
  struct {
    uint32_t RX_CDR_REFGEN_LDODCO_LOW_SEL_MUXD4 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0xA"
    uint32_t RX_CDR_REFGEN_LDODCO_HIGH_SEL_MUXD4 : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="4" ResetValue="0xA"
    uint32_t RX_CDR_REFGEN_SEL_STG_LOW_MUXD4 : 8;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x5"
    uint32_t RX_CDR_SWING_PEAK_REF_CTL_MUXD4 : 5;
    ///< ---
    ///< AccessType="RW" BitOffset="16" ResetValue="0x1C"
    uint32_t RX_CDR_BYP_RES_MUXD4 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t RX_CDR_LDO_BYPASS_EN_MUXD4 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t RX_CDR_EN_DIVMON_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="25" ResetValue="0x1"
    uint32_t RX_CDR_EN_PEAK_SENSE_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="26" ResetValue="0x0"
    uint32_t RX_CDR_INV_VPEAK_COMB_FB_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="27" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_ldo0_muxd4_reg_t;

#define PMA_RX_MGS_CDR_LDO0_MUXD4_DEFAULT (0x021c05aaU)
#define PMA_RX_MGS_CDR_LDO0_MUXD4_RD_MASK (0x0fffffffU)
#define PMA_RX_MGS_CDR_LDO0_MUXD4_WR_MASK (0x0fffffffU)


#define PMA_RX_MGS_CDR_LDO0_MUXD4_RX_CDR_REFGEN_LDODCO_LOW_SEL_MUXD4_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_LDO0_MUXD4_RX_CDR_REFGEN_LDODCO_LOW_SEL_MUXD4_BF_WID ( 4)
#define PMA_RX_MGS_CDR_LDO0_MUXD4_RX_CDR_REFGEN_LDODCO_LOW_SEL_MUXD4_BF_MSK (0x0000000F)
#define PMA_RX_MGS_CDR_LDO0_MUXD4_RX_CDR_REFGEN_LDODCO_LOW_SEL_MUXD4_BF_DEF (0x0000000A)

#define PMA_RX_MGS_CDR_LDO0_MUXD4_RX_CDR_REFGEN_LDODCO_HIGH_SEL_MUXD4_BF_OFF ( 4)
#define PMA_RX_MGS_CDR_LDO0_MUXD4_RX_CDR_REFGEN_LDODCO_HIGH_SEL_MUXD4_BF_WID ( 4)
#define PMA_RX_MGS_CDR_LDO0_MUXD4_RX_CDR_REFGEN_LDODCO_HIGH_SEL_MUXD4_BF_MSK (0x000000F0)
#define PMA_RX_MGS_CDR_LDO0_MUXD4_RX_CDR_REFGEN_LDODCO_HIGH_SEL_MUXD4_BF_DEF (0x000000A0)

#define PMA_RX_MGS_CDR_LDO0_MUXD4_RX_CDR_REFGEN_SEL_STG_LOW_MUXD4_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_LDO0_MUXD4_RX_CDR_REFGEN_SEL_STG_LOW_MUXD4_BF_WID ( 8)
#define PMA_RX_MGS_CDR_LDO0_MUXD4_RX_CDR_REFGEN_SEL_STG_LOW_MUXD4_BF_MSK (0x0000FF00)
#define PMA_RX_MGS_CDR_LDO0_MUXD4_RX_CDR_REFGEN_SEL_STG_LOW_MUXD4_BF_DEF (0x00000500)

#define PMA_RX_MGS_CDR_LDO0_MUXD4_RX_CDR_SWING_PEAK_REF_CTL_MUXD4_BF_OFF (16)
#define PMA_RX_MGS_CDR_LDO0_MUXD4_RX_CDR_SWING_PEAK_REF_CTL_MUXD4_BF_WID ( 5)
#define PMA_RX_MGS_CDR_LDO0_MUXD4_RX_CDR_SWING_PEAK_REF_CTL_MUXD4_BF_MSK (0x001F0000)
#define PMA_RX_MGS_CDR_LDO0_MUXD4_RX_CDR_SWING_PEAK_REF_CTL_MUXD4_BF_DEF (0x001C0000)

#define PMA_RX_MGS_CDR_LDO0_MUXD4_RX_CDR_BYP_RES_MUXD4_BF_OFF (21)
#define PMA_RX_MGS_CDR_LDO0_MUXD4_RX_CDR_BYP_RES_MUXD4_BF_WID ( 2)
#define PMA_RX_MGS_CDR_LDO0_MUXD4_RX_CDR_BYP_RES_MUXD4_BF_MSK (0x00600000)
#define PMA_RX_MGS_CDR_LDO0_MUXD4_RX_CDR_BYP_RES_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO0_MUXD4_RX_CDR_LDO_BYP_EN_MUXD4_BF_OFF (23)
#define PMA_RX_MGS_CDR_LDO0_MUXD4_RX_CDR_LDO_BYP_EN_MUXD4_BF_WID ( 2)
#define PMA_RX_MGS_CDR_LDO0_MUXD4_RX_CDR_LDO_BYP_EN_MUXD4_BF_MSK (0x01800000)
#define PMA_RX_MGS_CDR_LDO0_MUXD4_RX_CDR_LDO_BYP_EN_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO0_MUXD4_RX_CDR_EN_DIVMON_MUXD4_BF_OFF (25)
#define PMA_RX_MGS_CDR_LDO0_MUXD4_RX_CDR_EN_DIVMON_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO0_MUXD4_RX_CDR_EN_DIVMON_MUXD4_BF_MSK (0x02000000)
#define PMA_RX_MGS_CDR_LDO0_MUXD4_RX_CDR_EN_DIVMON_MUXD4_BF_DEF (0x02000000)

#define PMA_RX_MGS_CDR_LDO0_MUXD4_RX_CDR_EN_PEAK_SENSE_MUXD4_BF_OFF (26)
#define PMA_RX_MGS_CDR_LDO0_MUXD4_RX_CDR_EN_PEAK_SENSE_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO0_MUXD4_RX_CDR_EN_PEAK_SENSE_MUXD4_BF_MSK (0x04000000)
#define PMA_RX_MGS_CDR_LDO0_MUXD4_RX_CDR_EN_PEAK_SENSE_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO0_MUXD4_RX_CDR_INV_VPEAK_COMB_FB_MUXD4_BF_OFF (27)
#define PMA_RX_MGS_CDR_LDO0_MUXD4_RX_CDR_INV_VPEAK_COMB_FB_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO0_MUXD4_RX_CDR_INV_VPEAK_COMB_FB_MUXD4_BF_MSK (0x08000000)
#define PMA_RX_MGS_CDR_LDO0_MUXD4_RX_CDR_INV_VPEAK_COMB_FB_MUXD4_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_LDO1_MUXD0 register description at address offset 0x56c
  *
  * Register default value:        0x108050A4
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_ldo1_muxd0
  * rx_cdr_ldo1
  */

typedef union {
  struct {
    uint32_t RX_CDR_VREG_INIT_GAIN_MUXD0 : 3;
    ///< vreg_init_gain=ldo1[2:0]
    ///< AccessType="RW" BitOffset="0" ResetValue="0x4"
    uint32_t RX_CDR_VREG_GAIN_MAXCNT_MUXD0 : 8;
    ///< ---
    ///< AccessType="RW" BitOffset="3" ResetValue="0x14"
    uint32_t RX_CDR_VREG_FINAL_GAIN_MAXCNT_MUXD0 : 8;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0xA"
    uint32_t RX_CDR_VREG_LOOPEN_MAXCNT_MUXD0 : 8;
    ///< ---
    ///< AccessType="RW" BitOffset="19" ResetValue="0x10"
    uint32_t RX_CDR_VREGCOMP_AVERAGE_CNT_MUXD0 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="27" ResetValue="0x2"
    uint32_t RX_CDR_FW_VREG_ACCUM_OVRD_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_ldo1_muxd0_reg_t;

#define PMA_RX_MGS_CDR_LDO1_MUXD0_DEFAULT (0x108050a4U)
#define PMA_RX_MGS_CDR_LDO1_MUXD0_RD_MASK (0x7fffffffU)
#define PMA_RX_MGS_CDR_LDO1_MUXD0_WR_MASK (0x7fffffffU)


///< vreg_init_gain=ldo1[2:0]
#define PMA_RX_MGS_CDR_LDO1_MUXD0_RX_CDR_VREG_INIT_GAIN_MUXD0_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_LDO1_MUXD0_RX_CDR_VREG_INIT_GAIN_MUXD0_BF_WID ( 3)
#define PMA_RX_MGS_CDR_LDO1_MUXD0_RX_CDR_VREG_INIT_GAIN_MUXD0_BF_MSK (0x00000007)
#define PMA_RX_MGS_CDR_LDO1_MUXD0_RX_CDR_VREG_INIT_GAIN_MUXD0_BF_DEF (0x00000004)

#define PMA_RX_MGS_CDR_LDO1_MUXD0_RX_CDR_VREG_GAIN_MAXCNT_MUXD0_BF_OFF ( 3)
#define PMA_RX_MGS_CDR_LDO1_MUXD0_RX_CDR_VREG_GAIN_MAXCNT_MUXD0_BF_WID ( 8)
#define PMA_RX_MGS_CDR_LDO1_MUXD0_RX_CDR_VREG_GAIN_MAXCNT_MUXD0_BF_MSK (0x000007F8)
#define PMA_RX_MGS_CDR_LDO1_MUXD0_RX_CDR_VREG_GAIN_MAXCNT_MUXD0_BF_DEF (0x000000A0)

#define PMA_RX_MGS_CDR_LDO1_MUXD0_RX_CDR_VREG_FINAL_GAIN_MAXCNT_MUXD0_BF_OFF (11)
#define PMA_RX_MGS_CDR_LDO1_MUXD0_RX_CDR_VREG_FINAL_GAIN_MAXCNT_MUXD0_BF_WID ( 8)
#define PMA_RX_MGS_CDR_LDO1_MUXD0_RX_CDR_VREG_FINAL_GAIN_MAXCNT_MUXD0_BF_MSK (0x0007F800)
#define PMA_RX_MGS_CDR_LDO1_MUXD0_RX_CDR_VREG_FINAL_GAIN_MAXCNT_MUXD0_BF_DEF (0x00005000)

#define PMA_RX_MGS_CDR_LDO1_MUXD0_RX_CDR_VREG_LOOPEN_MAXCNT_MUXD0_BF_OFF (19)
#define PMA_RX_MGS_CDR_LDO1_MUXD0_RX_CDR_VREG_LOOPEN_MAXCNT_MUXD0_BF_WID ( 8)
#define PMA_RX_MGS_CDR_LDO1_MUXD0_RX_CDR_VREG_LOOPEN_MAXCNT_MUXD0_BF_MSK (0x07F80000)
#define PMA_RX_MGS_CDR_LDO1_MUXD0_RX_CDR_VREG_LOOPEN_MAXCNT_MUXD0_BF_DEF (0x00800000)

#define PMA_RX_MGS_CDR_LDO1_MUXD0_RX_CDR_VREGCOMP_AVERAGE_CNT_MUXD0_BF_OFF (27)
#define PMA_RX_MGS_CDR_LDO1_MUXD0_RX_CDR_VREGCOMP_AVERAGE_CNT_MUXD0_BF_WID ( 3)
#define PMA_RX_MGS_CDR_LDO1_MUXD0_RX_CDR_VREGCOMP_AVERAGE_CNT_MUXD0_BF_MSK (0x38000000)
#define PMA_RX_MGS_CDR_LDO1_MUXD0_RX_CDR_VREGCOMP_AVERAGE_CNT_MUXD0_BF_DEF (0x10000000)

#define PMA_RX_MGS_CDR_LDO1_MUXD0_RX_CDR_FW_VREG_ACCUM_OVRD_MUXD0_BF_OFF (30)
#define PMA_RX_MGS_CDR_LDO1_MUXD0_RX_CDR_FW_VREG_ACCUM_OVRD_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO1_MUXD0_RX_CDR_FW_VREG_ACCUM_OVRD_MUXD0_BF_MSK (0x40000000)
#define PMA_RX_MGS_CDR_LDO1_MUXD0_RX_CDR_FW_VREG_ACCUM_OVRD_MUXD0_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_LDO1_MUXD1 register description at address offset 0x570
  *
  * Register default value:        0x108050A4
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_ldo1_muxd1
  * rx_cdr_ldo1
  */

typedef union {
  struct {
    uint32_t RX_CDR_VREG_INIT_GAIN_MUXD1 : 3;
    ///< vreg_init_gain=ldo1[2:0]
    ///< AccessType="RW" BitOffset="0" ResetValue="0x4"
    uint32_t RX_CDR_VREG_GAIN_MAXCNT_MUXD1 : 8;
    ///< ---
    ///< AccessType="RW" BitOffset="3" ResetValue="0x14"
    uint32_t RX_CDR_VREG_FINAL_GAIN_MAXCNT_MUXD1 : 8;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0xA"
    uint32_t RX_CDR_VREG_LOOPEN_MAXCNT_MUXD1 : 8;
    ///< ---
    ///< AccessType="RW" BitOffset="19" ResetValue="0x10"
    uint32_t RX_CDR_VREGCOMP_AVERAGE_CNT_MUXD1 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="27" ResetValue="0x2"
    uint32_t RX_CDR_FW_VREG_ACCUM_OVRD_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_ldo1_muxd1_reg_t;

#define PMA_RX_MGS_CDR_LDO1_MUXD1_DEFAULT (0x108050a4U)
#define PMA_RX_MGS_CDR_LDO1_MUXD1_RD_MASK (0x7fffffffU)
#define PMA_RX_MGS_CDR_LDO1_MUXD1_WR_MASK (0x7fffffffU)


///< vreg_init_gain=ldo1[2:0]
#define PMA_RX_MGS_CDR_LDO1_MUXD1_RX_CDR_VREG_INIT_GAIN_MUXD1_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_LDO1_MUXD1_RX_CDR_VREG_INIT_GAIN_MUXD1_BF_WID ( 3)
#define PMA_RX_MGS_CDR_LDO1_MUXD1_RX_CDR_VREG_INIT_GAIN_MUXD1_BF_MSK (0x00000007)
#define PMA_RX_MGS_CDR_LDO1_MUXD1_RX_CDR_VREG_INIT_GAIN_MUXD1_BF_DEF (0x00000004)

#define PMA_RX_MGS_CDR_LDO1_MUXD1_RX_CDR_VREG_GAIN_MAXCNT_MUXD1_BF_OFF ( 3)
#define PMA_RX_MGS_CDR_LDO1_MUXD1_RX_CDR_VREG_GAIN_MAXCNT_MUXD1_BF_WID ( 8)
#define PMA_RX_MGS_CDR_LDO1_MUXD1_RX_CDR_VREG_GAIN_MAXCNT_MUXD1_BF_MSK (0x000007F8)
#define PMA_RX_MGS_CDR_LDO1_MUXD1_RX_CDR_VREG_GAIN_MAXCNT_MUXD1_BF_DEF (0x000000A0)

#define PMA_RX_MGS_CDR_LDO1_MUXD1_RX_CDR_VREG_FINAL_GAIN_MAXCNT_MUXD1_BF_OFF (11)
#define PMA_RX_MGS_CDR_LDO1_MUXD1_RX_CDR_VREG_FINAL_GAIN_MAXCNT_MUXD1_BF_WID ( 8)
#define PMA_RX_MGS_CDR_LDO1_MUXD1_RX_CDR_VREG_FINAL_GAIN_MAXCNT_MUXD1_BF_MSK (0x0007F800)
#define PMA_RX_MGS_CDR_LDO1_MUXD1_RX_CDR_VREG_FINAL_GAIN_MAXCNT_MUXD1_BF_DEF (0x00005000)

#define PMA_RX_MGS_CDR_LDO1_MUXD1_RX_CDR_VREG_LOOPEN_MAXCNT_MUXD1_BF_OFF (19)
#define PMA_RX_MGS_CDR_LDO1_MUXD1_RX_CDR_VREG_LOOPEN_MAXCNT_MUXD1_BF_WID ( 8)
#define PMA_RX_MGS_CDR_LDO1_MUXD1_RX_CDR_VREG_LOOPEN_MAXCNT_MUXD1_BF_MSK (0x07F80000)
#define PMA_RX_MGS_CDR_LDO1_MUXD1_RX_CDR_VREG_LOOPEN_MAXCNT_MUXD1_BF_DEF (0x00800000)

#define PMA_RX_MGS_CDR_LDO1_MUXD1_RX_CDR_VREGCOMP_AVERAGE_CNT_MUXD1_BF_OFF (27)
#define PMA_RX_MGS_CDR_LDO1_MUXD1_RX_CDR_VREGCOMP_AVERAGE_CNT_MUXD1_BF_WID ( 3)
#define PMA_RX_MGS_CDR_LDO1_MUXD1_RX_CDR_VREGCOMP_AVERAGE_CNT_MUXD1_BF_MSK (0x38000000)
#define PMA_RX_MGS_CDR_LDO1_MUXD1_RX_CDR_VREGCOMP_AVERAGE_CNT_MUXD1_BF_DEF (0x10000000)

#define PMA_RX_MGS_CDR_LDO1_MUXD1_RX_CDR_FW_VREG_ACCUM_OVRD_MUXD1_BF_OFF (30)
#define PMA_RX_MGS_CDR_LDO1_MUXD1_RX_CDR_FW_VREG_ACCUM_OVRD_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO1_MUXD1_RX_CDR_FW_VREG_ACCUM_OVRD_MUXD1_BF_MSK (0x40000000)
#define PMA_RX_MGS_CDR_LDO1_MUXD1_RX_CDR_FW_VREG_ACCUM_OVRD_MUXD1_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_LDO1_MUXD2 register description at address offset 0x574
  *
  * Register default value:        0x108050A4
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_ldo1_muxd2
  * rx_cdr_ldo1
  */

typedef union {
  struct {
    uint32_t RX_CDR_VREG_INIT_GAIN_MUXD2 : 3;
    ///< vreg_init_gain=ldo1[2:0]
    ///< AccessType="RW" BitOffset="0" ResetValue="0x4"
    uint32_t RX_CDR_VREG_GAIN_MAXCNT_MUXD2 : 8;
    ///< ---
    ///< AccessType="RW" BitOffset="3" ResetValue="0x14"
    uint32_t RX_CDR_VREG_FINAL_GAIN_MAXCNT_MUXD2 : 8;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0xA"
    uint32_t RX_CDR_VREG_LOOPEN_MAXCNT_MUXD2 : 8;
    ///< ---
    ///< AccessType="RW" BitOffset="19" ResetValue="0x10"
    uint32_t RX_CDR_VREGCOMP_AVERAGE_CNT_MUXD2 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="27" ResetValue="0x2"
    uint32_t RX_CDR_FW_VREG_ACCUM_OVRD_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_ldo1_muxd2_reg_t;

#define PMA_RX_MGS_CDR_LDO1_MUXD2_DEFAULT (0x108050a4U)
#define PMA_RX_MGS_CDR_LDO1_MUXD2_RD_MASK (0x7fffffffU)
#define PMA_RX_MGS_CDR_LDO1_MUXD2_WR_MASK (0x7fffffffU)


///< vreg_init_gain=ldo1[2:0]
#define PMA_RX_MGS_CDR_LDO1_MUXD2_RX_CDR_VREG_INIT_GAIN_MUXD2_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_LDO1_MUXD2_RX_CDR_VREG_INIT_GAIN_MUXD2_BF_WID ( 3)
#define PMA_RX_MGS_CDR_LDO1_MUXD2_RX_CDR_VREG_INIT_GAIN_MUXD2_BF_MSK (0x00000007)
#define PMA_RX_MGS_CDR_LDO1_MUXD2_RX_CDR_VREG_INIT_GAIN_MUXD2_BF_DEF (0x00000004)

#define PMA_RX_MGS_CDR_LDO1_MUXD2_RX_CDR_VREG_GAIN_MAXCNT_MUXD2_BF_OFF ( 3)
#define PMA_RX_MGS_CDR_LDO1_MUXD2_RX_CDR_VREG_GAIN_MAXCNT_MUXD2_BF_WID ( 8)
#define PMA_RX_MGS_CDR_LDO1_MUXD2_RX_CDR_VREG_GAIN_MAXCNT_MUXD2_BF_MSK (0x000007F8)
#define PMA_RX_MGS_CDR_LDO1_MUXD2_RX_CDR_VREG_GAIN_MAXCNT_MUXD2_BF_DEF (0x000000A0)

#define PMA_RX_MGS_CDR_LDO1_MUXD2_RX_CDR_VREG_FINAL_GAIN_MAXCNT_MUXD2_BF_OFF (11)
#define PMA_RX_MGS_CDR_LDO1_MUXD2_RX_CDR_VREG_FINAL_GAIN_MAXCNT_MUXD2_BF_WID ( 8)
#define PMA_RX_MGS_CDR_LDO1_MUXD2_RX_CDR_VREG_FINAL_GAIN_MAXCNT_MUXD2_BF_MSK (0x0007F800)
#define PMA_RX_MGS_CDR_LDO1_MUXD2_RX_CDR_VREG_FINAL_GAIN_MAXCNT_MUXD2_BF_DEF (0x00005000)

#define PMA_RX_MGS_CDR_LDO1_MUXD2_RX_CDR_VREG_LOOPEN_MAXCNT_MUXD2_BF_OFF (19)
#define PMA_RX_MGS_CDR_LDO1_MUXD2_RX_CDR_VREG_LOOPEN_MAXCNT_MUXD2_BF_WID ( 8)
#define PMA_RX_MGS_CDR_LDO1_MUXD2_RX_CDR_VREG_LOOPEN_MAXCNT_MUXD2_BF_MSK (0x07F80000)
#define PMA_RX_MGS_CDR_LDO1_MUXD2_RX_CDR_VREG_LOOPEN_MAXCNT_MUXD2_BF_DEF (0x00800000)

#define PMA_RX_MGS_CDR_LDO1_MUXD2_RX_CDR_VREGCOMP_AVERAGE_CNT_MUXD2_BF_OFF (27)
#define PMA_RX_MGS_CDR_LDO1_MUXD2_RX_CDR_VREGCOMP_AVERAGE_CNT_MUXD2_BF_WID ( 3)
#define PMA_RX_MGS_CDR_LDO1_MUXD2_RX_CDR_VREGCOMP_AVERAGE_CNT_MUXD2_BF_MSK (0x38000000)
#define PMA_RX_MGS_CDR_LDO1_MUXD2_RX_CDR_VREGCOMP_AVERAGE_CNT_MUXD2_BF_DEF (0x10000000)

#define PMA_RX_MGS_CDR_LDO1_MUXD2_RX_CDR_FW_VREG_ACCUM_OVRD_MUXD2_BF_OFF (30)
#define PMA_RX_MGS_CDR_LDO1_MUXD2_RX_CDR_FW_VREG_ACCUM_OVRD_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO1_MUXD2_RX_CDR_FW_VREG_ACCUM_OVRD_MUXD2_BF_MSK (0x40000000)
#define PMA_RX_MGS_CDR_LDO1_MUXD2_RX_CDR_FW_VREG_ACCUM_OVRD_MUXD2_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_LDO1_MUXD3 register description at address offset 0x578
  *
  * Register default value:        0x108050A4
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_ldo1_muxd3
  * rx_cdr_ldo1
  */

typedef union {
  struct {
    uint32_t RX_CDR_VREG_INIT_GAIN_MUXD3 : 3;
    ///< vreg_init_gain=ldo1[2:0]
    ///< AccessType="RW" BitOffset="0" ResetValue="0x4"
    uint32_t RX_CDR_VREG_GAIN_MAXCNT_MUXD3 : 8;
    ///< ---
    ///< AccessType="RW" BitOffset="3" ResetValue="0x14"
    uint32_t RX_CDR_VREG_FINAL_GAIN_MAXCNT_MUXD3 : 8;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0xA"
    uint32_t RX_CDR_VREG_LOOPEN_MAXCNT_MUXD3 : 8;
    ///< ---
    ///< AccessType="RW" BitOffset="19" ResetValue="0x10"
    uint32_t RX_CDR_VREGCOMP_AVERAGE_CNT_MUXD3 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="27" ResetValue="0x2"
    uint32_t RX_CDR_FW_VREG_ACCUM_OVRD_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_ldo1_muxd3_reg_t;

#define PMA_RX_MGS_CDR_LDO1_MUXD3_DEFAULT (0x108050a4U)
#define PMA_RX_MGS_CDR_LDO1_MUXD3_RD_MASK (0x7fffffffU)
#define PMA_RX_MGS_CDR_LDO1_MUXD3_WR_MASK (0x7fffffffU)


///< vreg_init_gain=ldo1[2:0]
#define PMA_RX_MGS_CDR_LDO1_MUXD3_RX_CDR_VREG_INIT_GAIN_MUXD3_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_LDO1_MUXD3_RX_CDR_VREG_INIT_GAIN_MUXD3_BF_WID ( 3)
#define PMA_RX_MGS_CDR_LDO1_MUXD3_RX_CDR_VREG_INIT_GAIN_MUXD3_BF_MSK (0x00000007)
#define PMA_RX_MGS_CDR_LDO1_MUXD3_RX_CDR_VREG_INIT_GAIN_MUXD3_BF_DEF (0x00000004)

#define PMA_RX_MGS_CDR_LDO1_MUXD3_RX_CDR_VREG_GAIN_MAXCNT_MUXD3_BF_OFF ( 3)
#define PMA_RX_MGS_CDR_LDO1_MUXD3_RX_CDR_VREG_GAIN_MAXCNT_MUXD3_BF_WID ( 8)
#define PMA_RX_MGS_CDR_LDO1_MUXD3_RX_CDR_VREG_GAIN_MAXCNT_MUXD3_BF_MSK (0x000007F8)
#define PMA_RX_MGS_CDR_LDO1_MUXD3_RX_CDR_VREG_GAIN_MAXCNT_MUXD3_BF_DEF (0x000000A0)

#define PMA_RX_MGS_CDR_LDO1_MUXD3_RX_CDR_VREG_FINAL_GAIN_MAXCNT_MUXD3_BF_OFF (11)
#define PMA_RX_MGS_CDR_LDO1_MUXD3_RX_CDR_VREG_FINAL_GAIN_MAXCNT_MUXD3_BF_WID ( 8)
#define PMA_RX_MGS_CDR_LDO1_MUXD3_RX_CDR_VREG_FINAL_GAIN_MAXCNT_MUXD3_BF_MSK (0x0007F800)
#define PMA_RX_MGS_CDR_LDO1_MUXD3_RX_CDR_VREG_FINAL_GAIN_MAXCNT_MUXD3_BF_DEF (0x00005000)

#define PMA_RX_MGS_CDR_LDO1_MUXD3_RX_CDR_VREG_LOOPEN_MAXCNT_MUXD3_BF_OFF (19)
#define PMA_RX_MGS_CDR_LDO1_MUXD3_RX_CDR_VREG_LOOPEN_MAXCNT_MUXD3_BF_WID ( 8)
#define PMA_RX_MGS_CDR_LDO1_MUXD3_RX_CDR_VREG_LOOPEN_MAXCNT_MUXD3_BF_MSK (0x07F80000)
#define PMA_RX_MGS_CDR_LDO1_MUXD3_RX_CDR_VREG_LOOPEN_MAXCNT_MUXD3_BF_DEF (0x00800000)

#define PMA_RX_MGS_CDR_LDO1_MUXD3_RX_CDR_VREGCOMP_AVERAGE_CNT_MUXD3_BF_OFF (27)
#define PMA_RX_MGS_CDR_LDO1_MUXD3_RX_CDR_VREGCOMP_AVERAGE_CNT_MUXD3_BF_WID ( 3)
#define PMA_RX_MGS_CDR_LDO1_MUXD3_RX_CDR_VREGCOMP_AVERAGE_CNT_MUXD3_BF_MSK (0x38000000)
#define PMA_RX_MGS_CDR_LDO1_MUXD3_RX_CDR_VREGCOMP_AVERAGE_CNT_MUXD3_BF_DEF (0x10000000)

#define PMA_RX_MGS_CDR_LDO1_MUXD3_RX_CDR_FW_VREG_ACCUM_OVRD_MUXD3_BF_OFF (30)
#define PMA_RX_MGS_CDR_LDO1_MUXD3_RX_CDR_FW_VREG_ACCUM_OVRD_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO1_MUXD3_RX_CDR_FW_VREG_ACCUM_OVRD_MUXD3_BF_MSK (0x40000000)
#define PMA_RX_MGS_CDR_LDO1_MUXD3_RX_CDR_FW_VREG_ACCUM_OVRD_MUXD3_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_LDO1_MUXD4 register description at address offset 0x57c
  *
  * Register default value:        0x108050A4
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_ldo1_muxd4
  * rx_cdr_ldo1
  */

typedef union {
  struct {
    uint32_t RX_CDR_VREG_INIT_GAIN_MUXD4 : 3;
    ///< vreg_init_gain=ldo1[2:0]
    ///< AccessType="RW" BitOffset="0" ResetValue="0x4"
    uint32_t RX_CDR_VREG_GAIN_MAXCNT_MUXD4 : 8;
    ///< ---
    ///< AccessType="RW" BitOffset="3" ResetValue="0x14"
    uint32_t RX_CDR_VREG_FINAL_GAIN_MAXCNT_MUXD4 : 8;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0xA"
    uint32_t RX_CDR_VREG_LOOPEN_MAXCNT_MUXD4 : 8;
    ///< ---
    ///< AccessType="RW" BitOffset="19" ResetValue="0x10"
    uint32_t RX_CDR_VREGCOMP_AVERAGE_CNT_MUXD4 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="27" ResetValue="0x2"
    uint32_t RX_CDR_FW_VREG_ACCUM_OVRD_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_ldo1_muxd4_reg_t;

#define PMA_RX_MGS_CDR_LDO1_MUXD4_DEFAULT (0x108050a4U)
#define PMA_RX_MGS_CDR_LDO1_MUXD4_RD_MASK (0x7fffffffU)
#define PMA_RX_MGS_CDR_LDO1_MUXD4_WR_MASK (0x7fffffffU)


///< vreg_init_gain=ldo1[2:0]
#define PMA_RX_MGS_CDR_LDO1_MUXD4_RX_CDR_VREG_INIT_GAIN_MUXD4_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_LDO1_MUXD4_RX_CDR_VREG_INIT_GAIN_MUXD4_BF_WID ( 3)
#define PMA_RX_MGS_CDR_LDO1_MUXD4_RX_CDR_VREG_INIT_GAIN_MUXD4_BF_MSK (0x00000007)
#define PMA_RX_MGS_CDR_LDO1_MUXD4_RX_CDR_VREG_INIT_GAIN_MUXD4_BF_DEF (0x00000004)

#define PMA_RX_MGS_CDR_LDO1_MUXD4_RX_CDR_VREG_GAIN_MAXCNT_MUXD4_BF_OFF ( 3)
#define PMA_RX_MGS_CDR_LDO1_MUXD4_RX_CDR_VREG_GAIN_MAXCNT_MUXD4_BF_WID ( 8)
#define PMA_RX_MGS_CDR_LDO1_MUXD4_RX_CDR_VREG_GAIN_MAXCNT_MUXD4_BF_MSK (0x000007F8)
#define PMA_RX_MGS_CDR_LDO1_MUXD4_RX_CDR_VREG_GAIN_MAXCNT_MUXD4_BF_DEF (0x000000A0)

#define PMA_RX_MGS_CDR_LDO1_MUXD4_RX_CDR_VREG_FINAL_GAIN_MAXCNT_MUXD4_BF_OFF (11)
#define PMA_RX_MGS_CDR_LDO1_MUXD4_RX_CDR_VREG_FINAL_GAIN_MAXCNT_MUXD4_BF_WID ( 8)
#define PMA_RX_MGS_CDR_LDO1_MUXD4_RX_CDR_VREG_FINAL_GAIN_MAXCNT_MUXD4_BF_MSK (0x0007F800)
#define PMA_RX_MGS_CDR_LDO1_MUXD4_RX_CDR_VREG_FINAL_GAIN_MAXCNT_MUXD4_BF_DEF (0x00005000)

#define PMA_RX_MGS_CDR_LDO1_MUXD4_RX_CDR_VREG_LOOPEN_MAXCNT_MUXD4_BF_OFF (19)
#define PMA_RX_MGS_CDR_LDO1_MUXD4_RX_CDR_VREG_LOOPEN_MAXCNT_MUXD4_BF_WID ( 8)
#define PMA_RX_MGS_CDR_LDO1_MUXD4_RX_CDR_VREG_LOOPEN_MAXCNT_MUXD4_BF_MSK (0x07F80000)
#define PMA_RX_MGS_CDR_LDO1_MUXD4_RX_CDR_VREG_LOOPEN_MAXCNT_MUXD4_BF_DEF (0x00800000)

#define PMA_RX_MGS_CDR_LDO1_MUXD4_RX_CDR_VREGCOMP_AVERAGE_CNT_MUXD4_BF_OFF (27)
#define PMA_RX_MGS_CDR_LDO1_MUXD4_RX_CDR_VREGCOMP_AVERAGE_CNT_MUXD4_BF_WID ( 3)
#define PMA_RX_MGS_CDR_LDO1_MUXD4_RX_CDR_VREGCOMP_AVERAGE_CNT_MUXD4_BF_MSK (0x38000000)
#define PMA_RX_MGS_CDR_LDO1_MUXD4_RX_CDR_VREGCOMP_AVERAGE_CNT_MUXD4_BF_DEF (0x10000000)

#define PMA_RX_MGS_CDR_LDO1_MUXD4_RX_CDR_FW_VREG_ACCUM_OVRD_MUXD4_BF_OFF (30)
#define PMA_RX_MGS_CDR_LDO1_MUXD4_RX_CDR_FW_VREG_ACCUM_OVRD_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO1_MUXD4_RX_CDR_FW_VREG_ACCUM_OVRD_MUXD4_BF_MSK (0x40000000)
#define PMA_RX_MGS_CDR_LDO1_MUXD4_RX_CDR_FW_VREG_ACCUM_OVRD_MUXD4_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_LDO2_MUXD0 register description at address offset 0x580
  *
  * Register default value:        0x00014858
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_ldo2_muxd0
  * rx_cdr_ldo2
  */

typedef union {
  struct {
    uint32_t RX_CDR_START_LDODCO_STEP_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_LDODCO_STEP_DIR_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RX_CDR_LDODCO_STEP_SETTLE_TIMER_LIMIT_MUXD0 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="2" ResetValue="0x2"
    uint32_t RX_CDR_LDODCO_ADAPT_CTR_DELAY_MUXD0 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="4" ResetValue="0x5"
    uint32_t RX_CDR_LDODCO_ADAPT_STEP_MUXD0 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t RX_CDR_LDODCO_STEP_CHICKEN_BIT_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RX_CDR_LDODCO_ADAPT_EN_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x1"
    uint32_t RX_CDR_LDODCO_VREF_OVRD_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t RX_CDR_LDODCO_VREF_SEL_MUXD0 : 6;
    ///< ---
    ///< AccessType="RW" BitOffset="13" ResetValue="0xA"
    uint32_t RX_CDR_DFX_LDODCO_ADAPT_TOGGLE_EN_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t RX_CDR_DFX_LDODCO_ADAPT_DIR_OVR_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t RX_CDR_DFX_LDODCO_ADAPT_ENABLE_OVR_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t RX_CDR_DFX_LDODCO_ADAPT_VAL_OVR_MUXD0 : 9;
    ///< ---
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_ldo2_muxd0_reg_t;

#define PMA_RX_MGS_CDR_LDO2_MUXD0_DEFAULT (0x00014858U)
#define PMA_RX_MGS_CDR_LDO2_MUXD0_RD_MASK (0x7fffffffU)
#define PMA_RX_MGS_CDR_LDO2_MUXD0_WR_MASK (0x7fffffffU)


#define PMA_RX_MGS_CDR_LDO2_MUXD0_RX_CDR_START_LDODCO_STEP_MUXD0_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_LDO2_MUXD0_RX_CDR_START_LDODCO_STEP_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO2_MUXD0_RX_CDR_START_LDODCO_STEP_MUXD0_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_LDO2_MUXD0_RX_CDR_START_LDODCO_STEP_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO2_MUXD0_RX_CDR_LDODCO_STEP_DIR_MUXD0_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_LDO2_MUXD0_RX_CDR_LDODCO_STEP_DIR_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO2_MUXD0_RX_CDR_LDODCO_STEP_DIR_MUXD0_BF_MSK (0x00000002)
#define PMA_RX_MGS_CDR_LDO2_MUXD0_RX_CDR_LDODCO_STEP_DIR_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO2_MUXD0_RX_CDR_LDODCO_STEP_SETTLE_TIMER_LIMIT_MUXD0_BF_OFF ( 2)
#define PMA_RX_MGS_CDR_LDO2_MUXD0_RX_CDR_LDODCO_STEP_SETTLE_TIMER_LIMIT_MUXD0_BF_WID ( 2)
#define PMA_RX_MGS_CDR_LDO2_MUXD0_RX_CDR_LDODCO_STEP_SETTLE_TIMER_LIMIT_MUXD0_BF_MSK (0x0000000C)
#define PMA_RX_MGS_CDR_LDO2_MUXD0_RX_CDR_LDODCO_STEP_SETTLE_TIMER_LIMIT_MUXD0_BF_DEF (0x00000008)

#define PMA_RX_MGS_CDR_LDO2_MUXD0_RX_CDR_LDODCO_ADAPT_CTR_DELAY_MUXD0_BF_OFF ( 4)
#define PMA_RX_MGS_CDR_LDO2_MUXD0_RX_CDR_LDODCO_ADAPT_CTR_DELAY_MUXD0_BF_WID ( 3)
#define PMA_RX_MGS_CDR_LDO2_MUXD0_RX_CDR_LDODCO_ADAPT_CTR_DELAY_MUXD0_BF_MSK (0x00000070)
#define PMA_RX_MGS_CDR_LDO2_MUXD0_RX_CDR_LDODCO_ADAPT_CTR_DELAY_MUXD0_BF_DEF (0x00000050)

#define PMA_RX_MGS_CDR_LDO2_MUXD0_RX_CDR_LDODCO_ADAPT_STEP_MUXD0_BF_OFF ( 7)
#define PMA_RX_MGS_CDR_LDO2_MUXD0_RX_CDR_LDODCO_ADAPT_STEP_MUXD0_BF_WID ( 3)
#define PMA_RX_MGS_CDR_LDO2_MUXD0_RX_CDR_LDODCO_ADAPT_STEP_MUXD0_BF_MSK (0x00000380)
#define PMA_RX_MGS_CDR_LDO2_MUXD0_RX_CDR_LDODCO_ADAPT_STEP_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO2_MUXD0_RX_CDR_LDODCO_STEP_CHICKEN_BIT_MUXD0_BF_OFF (10)
#define PMA_RX_MGS_CDR_LDO2_MUXD0_RX_CDR_LDODCO_STEP_CHICKEN_BIT_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO2_MUXD0_RX_CDR_LDODCO_STEP_CHICKEN_BIT_MUXD0_BF_MSK (0x00000400)
#define PMA_RX_MGS_CDR_LDO2_MUXD0_RX_CDR_LDODCO_STEP_CHICKEN_BIT_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO2_MUXD0_RX_CDR_LDODCO_ADAPT_EN_MUXD0_BF_OFF (11)
#define PMA_RX_MGS_CDR_LDO2_MUXD0_RX_CDR_LDODCO_ADAPT_EN_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO2_MUXD0_RX_CDR_LDODCO_ADAPT_EN_MUXD0_BF_MSK (0x00000800)
#define PMA_RX_MGS_CDR_LDO2_MUXD0_RX_CDR_LDODCO_ADAPT_EN_MUXD0_BF_DEF (0x00000800)

#define PMA_RX_MGS_CDR_LDO2_MUXD0_RX_CDR_LDODCO_VREF_OVRD_MUXD0_BF_OFF (12)
#define PMA_RX_MGS_CDR_LDO2_MUXD0_RX_CDR_LDODCO_VREF_OVRD_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO2_MUXD0_RX_CDR_LDODCO_VREF_OVRD_MUXD0_BF_MSK (0x00001000)
#define PMA_RX_MGS_CDR_LDO2_MUXD0_RX_CDR_LDODCO_VREF_OVRD_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO2_MUXD0_RX_CDR_LDODCO_VREF_SEL_MUXD0_BF_OFF (13)
#define PMA_RX_MGS_CDR_LDO2_MUXD0_RX_CDR_LDODCO_VREF_SEL_MUXD0_BF_WID ( 6)
#define PMA_RX_MGS_CDR_LDO2_MUXD0_RX_CDR_LDODCO_VREF_SEL_MUXD0_BF_MSK (0x0007E000)
#define PMA_RX_MGS_CDR_LDO2_MUXD0_RX_CDR_LDODCO_VREF_SEL_MUXD0_BF_DEF (0x00014000)

#define PMA_RX_MGS_CDR_LDO2_MUXD0_RX_CDR_DFX_LDODCO_ADAPT_TOGGLE_EN_MUXD0_BF_OFF (19)
#define PMA_RX_MGS_CDR_LDO2_MUXD0_RX_CDR_DFX_LDODCO_ADAPT_TOGGLE_EN_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO2_MUXD0_RX_CDR_DFX_LDODCO_ADAPT_TOGGLE_EN_MUXD0_BF_MSK (0x00080000)
#define PMA_RX_MGS_CDR_LDO2_MUXD0_RX_CDR_DFX_LDODCO_ADAPT_TOGGLE_EN_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO2_MUXD0_RX_CDR_DFX_LDODCO_ADAPT_DIR_OVR_MUXD0_BF_OFF (20)
#define PMA_RX_MGS_CDR_LDO2_MUXD0_RX_CDR_DFX_LDODCO_ADAPT_DIR_OVR_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO2_MUXD0_RX_CDR_DFX_LDODCO_ADAPT_DIR_OVR_MUXD0_BF_MSK (0x00100000)
#define PMA_RX_MGS_CDR_LDO2_MUXD0_RX_CDR_DFX_LDODCO_ADAPT_DIR_OVR_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO2_MUXD0_RX_CDR_DFX_LDODCO_ADAPT_EN_OVR_MUXD0_BF_OFF (21)
#define PMA_RX_MGS_CDR_LDO2_MUXD0_RX_CDR_DFX_LDODCO_ADAPT_EN_OVR_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO2_MUXD0_RX_CDR_DFX_LDODCO_ADAPT_EN_OVR_MUXD0_BF_MSK (0x00200000)
#define PMA_RX_MGS_CDR_LDO2_MUXD0_RX_CDR_DFX_LDODCO_ADAPT_EN_OVR_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO2_MUXD0_RX_CDR_DFX_LDODCO_ADAPT_VAL_OVR_MUXD0_BF_OFF (22)
#define PMA_RX_MGS_CDR_LDO2_MUXD0_RX_CDR_DFX_LDODCO_ADAPT_VAL_OVR_MUXD0_BF_WID ( 9)
#define PMA_RX_MGS_CDR_LDO2_MUXD0_RX_CDR_DFX_LDODCO_ADAPT_VAL_OVR_MUXD0_BF_MSK (0x7FC00000)
#define PMA_RX_MGS_CDR_LDO2_MUXD0_RX_CDR_DFX_LDODCO_ADAPT_VAL_OVR_MUXD0_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_LDO2_MUXD1 register description at address offset 0x584
  *
  * Register default value:        0x00014858
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_ldo2_muxd1
  * rx_cdr_ldo2
  */

typedef union {
  struct {
    uint32_t RX_CDR_START_LDODCO_STEP_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_LDODCO_STEP_DIR_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RX_CDR_LDODCO_STEP_SETTLE_TIMER_LIMIT_MUXD1 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="2" ResetValue="0x2"
    uint32_t RX_CDR_LDODCO_ADAPT_CTR_DELAY_MUXD1 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="4" ResetValue="0x5"
    uint32_t RX_CDR_LDODCO_ADAPT_STEP_MUXD1 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t RX_CDR_LDODCO_STEP_CHICKEN_BIT_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RX_CDR_LDODCO_ADAPT_EN_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x1"
    uint32_t RX_CDR_LDODCO_VREF_OVRD_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t RX_CDR_LDODCO_VREF_SEL_MUXD1 : 6;
    ///< ---
    ///< AccessType="RW" BitOffset="13" ResetValue="0xA"
    uint32_t RX_CDR_DFX_LDODCO_ADAPT_TOGGLE_EN_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t RX_CDR_DFX_LDODCO_ADAPT_DIR_OVR_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t RX_CDR_DFX_LDODCO_ADAPT_ENABLE_OVR_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t RX_CDR_DFX_LDODCO_ADAPT_VAL_OVR_MUXD1 : 9;
    ///< ---
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_ldo2_muxd1_reg_t;

#define PMA_RX_MGS_CDR_LDO2_MUXD1_DEFAULT (0x00014858U)
#define PMA_RX_MGS_CDR_LDO2_MUXD1_RD_MASK (0x7fffffffU)
#define PMA_RX_MGS_CDR_LDO2_MUXD1_WR_MASK (0x7fffffffU)


#define PMA_RX_MGS_CDR_LDO2_MUXD1_RX_CDR_START_LDODCO_STEP_MUXD1_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_LDO2_MUXD1_RX_CDR_START_LDODCO_STEP_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO2_MUXD1_RX_CDR_START_LDODCO_STEP_MUXD1_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_LDO2_MUXD1_RX_CDR_START_LDODCO_STEP_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO2_MUXD1_RX_CDR_LDODCO_STEP_DIR_MUXD1_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_LDO2_MUXD1_RX_CDR_LDODCO_STEP_DIR_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO2_MUXD1_RX_CDR_LDODCO_STEP_DIR_MUXD1_BF_MSK (0x00000002)
#define PMA_RX_MGS_CDR_LDO2_MUXD1_RX_CDR_LDODCO_STEP_DIR_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO2_MUXD1_RX_CDR_LDODCO_STEP_SETTLE_TIMER_LIMIT_MUXD1_BF_OFF ( 2)
#define PMA_RX_MGS_CDR_LDO2_MUXD1_RX_CDR_LDODCO_STEP_SETTLE_TIMER_LIMIT_MUXD1_BF_WID ( 2)
#define PMA_RX_MGS_CDR_LDO2_MUXD1_RX_CDR_LDODCO_STEP_SETTLE_TIMER_LIMIT_MUXD1_BF_MSK (0x0000000C)
#define PMA_RX_MGS_CDR_LDO2_MUXD1_RX_CDR_LDODCO_STEP_SETTLE_TIMER_LIMIT_MUXD1_BF_DEF (0x00000008)

#define PMA_RX_MGS_CDR_LDO2_MUXD1_RX_CDR_LDODCO_ADAPT_CTR_DELAY_MUXD1_BF_OFF ( 4)
#define PMA_RX_MGS_CDR_LDO2_MUXD1_RX_CDR_LDODCO_ADAPT_CTR_DELAY_MUXD1_BF_WID ( 3)
#define PMA_RX_MGS_CDR_LDO2_MUXD1_RX_CDR_LDODCO_ADAPT_CTR_DELAY_MUXD1_BF_MSK (0x00000070)
#define PMA_RX_MGS_CDR_LDO2_MUXD1_RX_CDR_LDODCO_ADAPT_CTR_DELAY_MUXD1_BF_DEF (0x00000050)

#define PMA_RX_MGS_CDR_LDO2_MUXD1_RX_CDR_LDODCO_ADAPT_STEP_MUXD1_BF_OFF ( 7)
#define PMA_RX_MGS_CDR_LDO2_MUXD1_RX_CDR_LDODCO_ADAPT_STEP_MUXD1_BF_WID ( 3)
#define PMA_RX_MGS_CDR_LDO2_MUXD1_RX_CDR_LDODCO_ADAPT_STEP_MUXD1_BF_MSK (0x00000380)
#define PMA_RX_MGS_CDR_LDO2_MUXD1_RX_CDR_LDODCO_ADAPT_STEP_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO2_MUXD1_RX_CDR_LDODCO_STEP_CHICKEN_BIT_MUXD1_BF_OFF (10)
#define PMA_RX_MGS_CDR_LDO2_MUXD1_RX_CDR_LDODCO_STEP_CHICKEN_BIT_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO2_MUXD1_RX_CDR_LDODCO_STEP_CHICKEN_BIT_MUXD1_BF_MSK (0x00000400)
#define PMA_RX_MGS_CDR_LDO2_MUXD1_RX_CDR_LDODCO_STEP_CHICKEN_BIT_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO2_MUXD1_RX_CDR_LDODCO_ADAPT_EN_MUXD1_BF_OFF (11)
#define PMA_RX_MGS_CDR_LDO2_MUXD1_RX_CDR_LDODCO_ADAPT_EN_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO2_MUXD1_RX_CDR_LDODCO_ADAPT_EN_MUXD1_BF_MSK (0x00000800)
#define PMA_RX_MGS_CDR_LDO2_MUXD1_RX_CDR_LDODCO_ADAPT_EN_MUXD1_BF_DEF (0x00000800)

#define PMA_RX_MGS_CDR_LDO2_MUXD1_RX_CDR_LDODCO_VREF_OVRD_MUXD1_BF_OFF (12)
#define PMA_RX_MGS_CDR_LDO2_MUXD1_RX_CDR_LDODCO_VREF_OVRD_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO2_MUXD1_RX_CDR_LDODCO_VREF_OVRD_MUXD1_BF_MSK (0x00001000)
#define PMA_RX_MGS_CDR_LDO2_MUXD1_RX_CDR_LDODCO_VREF_OVRD_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO2_MUXD1_RX_CDR_LDODCO_VREF_SEL_MUXD1_BF_OFF (13)
#define PMA_RX_MGS_CDR_LDO2_MUXD1_RX_CDR_LDODCO_VREF_SEL_MUXD1_BF_WID ( 6)
#define PMA_RX_MGS_CDR_LDO2_MUXD1_RX_CDR_LDODCO_VREF_SEL_MUXD1_BF_MSK (0x0007E000)
#define PMA_RX_MGS_CDR_LDO2_MUXD1_RX_CDR_LDODCO_VREF_SEL_MUXD1_BF_DEF (0x00014000)

#define PMA_RX_MGS_CDR_LDO2_MUXD1_RX_CDR_DFX_LDODCO_ADAPT_TOGGLE_EN_MUXD1_BF_OFF (19)
#define PMA_RX_MGS_CDR_LDO2_MUXD1_RX_CDR_DFX_LDODCO_ADAPT_TOGGLE_EN_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO2_MUXD1_RX_CDR_DFX_LDODCO_ADAPT_TOGGLE_EN_MUXD1_BF_MSK (0x00080000)
#define PMA_RX_MGS_CDR_LDO2_MUXD1_RX_CDR_DFX_LDODCO_ADAPT_TOGGLE_EN_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO2_MUXD1_RX_CDR_DFX_LDODCO_ADAPT_DIR_OVR_MUXD1_BF_OFF (20)
#define PMA_RX_MGS_CDR_LDO2_MUXD1_RX_CDR_DFX_LDODCO_ADAPT_DIR_OVR_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO2_MUXD1_RX_CDR_DFX_LDODCO_ADAPT_DIR_OVR_MUXD1_BF_MSK (0x00100000)
#define PMA_RX_MGS_CDR_LDO2_MUXD1_RX_CDR_DFX_LDODCO_ADAPT_DIR_OVR_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO2_MUXD1_RX_CDR_DFX_LDODCO_ADAPT_EN_OVR_MUXD1_BF_OFF (21)
#define PMA_RX_MGS_CDR_LDO2_MUXD1_RX_CDR_DFX_LDODCO_ADAPT_EN_OVR_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO2_MUXD1_RX_CDR_DFX_LDODCO_ADAPT_EN_OVR_MUXD1_BF_MSK (0x00200000)
#define PMA_RX_MGS_CDR_LDO2_MUXD1_RX_CDR_DFX_LDODCO_ADAPT_EN_OVR_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO2_MUXD1_RX_CDR_DFX_LDODCO_ADAPT_VAL_OVR_MUXD1_BF_OFF (22)
#define PMA_RX_MGS_CDR_LDO2_MUXD1_RX_CDR_DFX_LDODCO_ADAPT_VAL_OVR_MUXD1_BF_WID ( 9)
#define PMA_RX_MGS_CDR_LDO2_MUXD1_RX_CDR_DFX_LDODCO_ADAPT_VAL_OVR_MUXD1_BF_MSK (0x7FC00000)
#define PMA_RX_MGS_CDR_LDO2_MUXD1_RX_CDR_DFX_LDODCO_ADAPT_VAL_OVR_MUXD1_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_LDO2_MUXD2 register description at address offset 0x588
  *
  * Register default value:        0x00014858
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_ldo2_muxd2
  * rx_cdr_ldo2
  */

typedef union {
  struct {
    uint32_t RX_CDR_START_LDODCO_STEP_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_LDODCO_STEP_DIR_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RX_CDR_LDODCO_STEP_SETTLE_TIMER_LIMIT_MUXD2 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="2" ResetValue="0x2"
    uint32_t RX_CDR_LDODCO_ADAPT_CTR_DELAY_MUXD2 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="4" ResetValue="0x5"
    uint32_t RX_CDR_LDODCO_ADAPT_STEP_MUXD2 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t RX_CDR_LDODCO_STEP_CHICKEN_BIT_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RX_CDR_LDODCO_ADAPT_EN_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x1"
    uint32_t RX_CDR_LDODCO_VREF_OVRD_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t RX_CDR_LDODCO_VREF_SEL_MUXD2 : 6;
    ///< ---
    ///< AccessType="RW" BitOffset="13" ResetValue="0xA"
    uint32_t RX_CDR_DFX_LDODCO_ADAPT_TOGGLE_EN_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t RX_CDR_DFX_LDODCO_ADAPT_DIR_OVR_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t RX_CDR_DFX_LDODCO_ADAPT_ENABLE_OVR_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t RX_CDR_DFX_LDODCO_ADAPT_VAL_OVR_MUXD2 : 9;
    ///< ---
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_ldo2_muxd2_reg_t;

#define PMA_RX_MGS_CDR_LDO2_MUXD2_DEFAULT (0x00014858U)
#define PMA_RX_MGS_CDR_LDO2_MUXD2_RD_MASK (0x7fffffffU)
#define PMA_RX_MGS_CDR_LDO2_MUXD2_WR_MASK (0x7fffffffU)


#define PMA_RX_MGS_CDR_LDO2_MUXD2_RX_CDR_START_LDODCO_STEP_MUXD2_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_LDO2_MUXD2_RX_CDR_START_LDODCO_STEP_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO2_MUXD2_RX_CDR_START_LDODCO_STEP_MUXD2_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_LDO2_MUXD2_RX_CDR_START_LDODCO_STEP_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO2_MUXD2_RX_CDR_LDODCO_STEP_DIR_MUXD2_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_LDO2_MUXD2_RX_CDR_LDODCO_STEP_DIR_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO2_MUXD2_RX_CDR_LDODCO_STEP_DIR_MUXD2_BF_MSK (0x00000002)
#define PMA_RX_MGS_CDR_LDO2_MUXD2_RX_CDR_LDODCO_STEP_DIR_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO2_MUXD2_RX_CDR_LDODCO_STEP_SETTLE_TIMER_LIMIT_MUXD2_BF_OFF ( 2)
#define PMA_RX_MGS_CDR_LDO2_MUXD2_RX_CDR_LDODCO_STEP_SETTLE_TIMER_LIMIT_MUXD2_BF_WID ( 2)
#define PMA_RX_MGS_CDR_LDO2_MUXD2_RX_CDR_LDODCO_STEP_SETTLE_TIMER_LIMIT_MUXD2_BF_MSK (0x0000000C)
#define PMA_RX_MGS_CDR_LDO2_MUXD2_RX_CDR_LDODCO_STEP_SETTLE_TIMER_LIMIT_MUXD2_BF_DEF (0x00000008)

#define PMA_RX_MGS_CDR_LDO2_MUXD2_RX_CDR_LDODCO_ADAPT_CTR_DELAY_MUXD2_BF_OFF ( 4)
#define PMA_RX_MGS_CDR_LDO2_MUXD2_RX_CDR_LDODCO_ADAPT_CTR_DELAY_MUXD2_BF_WID ( 3)
#define PMA_RX_MGS_CDR_LDO2_MUXD2_RX_CDR_LDODCO_ADAPT_CTR_DELAY_MUXD2_BF_MSK (0x00000070)
#define PMA_RX_MGS_CDR_LDO2_MUXD2_RX_CDR_LDODCO_ADAPT_CTR_DELAY_MUXD2_BF_DEF (0x00000050)

#define PMA_RX_MGS_CDR_LDO2_MUXD2_RX_CDR_LDODCO_ADAPT_STEP_MUXD2_BF_OFF ( 7)
#define PMA_RX_MGS_CDR_LDO2_MUXD2_RX_CDR_LDODCO_ADAPT_STEP_MUXD2_BF_WID ( 3)
#define PMA_RX_MGS_CDR_LDO2_MUXD2_RX_CDR_LDODCO_ADAPT_STEP_MUXD2_BF_MSK (0x00000380)
#define PMA_RX_MGS_CDR_LDO2_MUXD2_RX_CDR_LDODCO_ADAPT_STEP_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO2_MUXD2_RX_CDR_LDODCO_STEP_CHICKEN_BIT_MUXD2_BF_OFF (10)
#define PMA_RX_MGS_CDR_LDO2_MUXD2_RX_CDR_LDODCO_STEP_CHICKEN_BIT_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO2_MUXD2_RX_CDR_LDODCO_STEP_CHICKEN_BIT_MUXD2_BF_MSK (0x00000400)
#define PMA_RX_MGS_CDR_LDO2_MUXD2_RX_CDR_LDODCO_STEP_CHICKEN_BIT_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO2_MUXD2_RX_CDR_LDODCO_ADAPT_EN_MUXD2_BF_OFF (11)
#define PMA_RX_MGS_CDR_LDO2_MUXD2_RX_CDR_LDODCO_ADAPT_EN_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO2_MUXD2_RX_CDR_LDODCO_ADAPT_EN_MUXD2_BF_MSK (0x00000800)
#define PMA_RX_MGS_CDR_LDO2_MUXD2_RX_CDR_LDODCO_ADAPT_EN_MUXD2_BF_DEF (0x00000800)

#define PMA_RX_MGS_CDR_LDO2_MUXD2_RX_CDR_LDODCO_VREF_OVRD_MUXD2_BF_OFF (12)
#define PMA_RX_MGS_CDR_LDO2_MUXD2_RX_CDR_LDODCO_VREF_OVRD_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO2_MUXD2_RX_CDR_LDODCO_VREF_OVRD_MUXD2_BF_MSK (0x00001000)
#define PMA_RX_MGS_CDR_LDO2_MUXD2_RX_CDR_LDODCO_VREF_OVRD_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO2_MUXD2_RX_CDR_LDODCO_VREF_SEL_MUXD2_BF_OFF (13)
#define PMA_RX_MGS_CDR_LDO2_MUXD2_RX_CDR_LDODCO_VREF_SEL_MUXD2_BF_WID ( 6)
#define PMA_RX_MGS_CDR_LDO2_MUXD2_RX_CDR_LDODCO_VREF_SEL_MUXD2_BF_MSK (0x0007E000)
#define PMA_RX_MGS_CDR_LDO2_MUXD2_RX_CDR_LDODCO_VREF_SEL_MUXD2_BF_DEF (0x00014000)

#define PMA_RX_MGS_CDR_LDO2_MUXD2_RX_CDR_DFX_LDODCO_ADAPT_TOGGLE_EN_MUXD2_BF_OFF (19)
#define PMA_RX_MGS_CDR_LDO2_MUXD2_RX_CDR_DFX_LDODCO_ADAPT_TOGGLE_EN_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO2_MUXD2_RX_CDR_DFX_LDODCO_ADAPT_TOGGLE_EN_MUXD2_BF_MSK (0x00080000)
#define PMA_RX_MGS_CDR_LDO2_MUXD2_RX_CDR_DFX_LDODCO_ADAPT_TOGGLE_EN_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO2_MUXD2_RX_CDR_DFX_LDODCO_ADAPT_DIR_OVR_MUXD2_BF_OFF (20)
#define PMA_RX_MGS_CDR_LDO2_MUXD2_RX_CDR_DFX_LDODCO_ADAPT_DIR_OVR_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO2_MUXD2_RX_CDR_DFX_LDODCO_ADAPT_DIR_OVR_MUXD2_BF_MSK (0x00100000)
#define PMA_RX_MGS_CDR_LDO2_MUXD2_RX_CDR_DFX_LDODCO_ADAPT_DIR_OVR_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO2_MUXD2_RX_CDR_DFX_LDODCO_ADAPT_EN_OVR_MUXD2_BF_OFF (21)
#define PMA_RX_MGS_CDR_LDO2_MUXD2_RX_CDR_DFX_LDODCO_ADAPT_EN_OVR_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO2_MUXD2_RX_CDR_DFX_LDODCO_ADAPT_EN_OVR_MUXD2_BF_MSK (0x00200000)
#define PMA_RX_MGS_CDR_LDO2_MUXD2_RX_CDR_DFX_LDODCO_ADAPT_EN_OVR_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO2_MUXD2_RX_CDR_DFX_LDODCO_ADAPT_VAL_OVR_MUXD2_BF_OFF (22)
#define PMA_RX_MGS_CDR_LDO2_MUXD2_RX_CDR_DFX_LDODCO_ADAPT_VAL_OVR_MUXD2_BF_WID ( 9)
#define PMA_RX_MGS_CDR_LDO2_MUXD2_RX_CDR_DFX_LDODCO_ADAPT_VAL_OVR_MUXD2_BF_MSK (0x7FC00000)
#define PMA_RX_MGS_CDR_LDO2_MUXD2_RX_CDR_DFX_LDODCO_ADAPT_VAL_OVR_MUXD2_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_LDO2_MUXD3 register description at address offset 0x58c
  *
  * Register default value:        0x00014858
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_ldo2_muxd3
  * rx_cdr_ldo2
  */

typedef union {
  struct {
    uint32_t RX_CDR_START_LDODCO_STEP_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_LDODCO_STEP_DIR_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RX_CDR_LDODCO_STEP_SETTLE_TIMER_LIMIT_MUXD3 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="2" ResetValue="0x2"
    uint32_t RX_CDR_LDODCO_ADAPT_CTR_DELAY_MUXD3 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="4" ResetValue="0x5"
    uint32_t RX_CDR_LDODCO_ADAPT_STEP_MUXD3 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t RX_CDR_LDODCO_STEP_CHICKEN_BIT_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RX_CDR_LDODCO_ADAPT_EN_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x1"
    uint32_t RX_CDR_LDODCO_VREF_OVRD_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t RX_CDR_LDODCO_VREF_SEL_MUXD3 : 6;
    ///< ---
    ///< AccessType="RW" BitOffset="13" ResetValue="0xA"
    uint32_t RX_CDR_DFX_LDODCO_ADAPT_TOGGLE_EN_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t RX_CDR_DFX_LDODCO_ADAPT_DIR_OVR_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t RX_CDR_DFX_LDODCO_ADAPT_ENABLE_OVR_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t RX_CDR_DFX_LDODCO_ADAPT_VAL_OVR_MUXD3 : 9;
    ///< ---
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_ldo2_muxd3_reg_t;

#define PMA_RX_MGS_CDR_LDO2_MUXD3_DEFAULT (0x00014858U)
#define PMA_RX_MGS_CDR_LDO2_MUXD3_RD_MASK (0x7fffffffU)
#define PMA_RX_MGS_CDR_LDO2_MUXD3_WR_MASK (0x7fffffffU)


#define PMA_RX_MGS_CDR_LDO2_MUXD3_RX_CDR_START_LDODCO_STEP_MUXD3_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_LDO2_MUXD3_RX_CDR_START_LDODCO_STEP_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO2_MUXD3_RX_CDR_START_LDODCO_STEP_MUXD3_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_LDO2_MUXD3_RX_CDR_START_LDODCO_STEP_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO2_MUXD3_RX_CDR_LDODCO_STEP_DIR_MUXD3_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_LDO2_MUXD3_RX_CDR_LDODCO_STEP_DIR_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO2_MUXD3_RX_CDR_LDODCO_STEP_DIR_MUXD3_BF_MSK (0x00000002)
#define PMA_RX_MGS_CDR_LDO2_MUXD3_RX_CDR_LDODCO_STEP_DIR_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO2_MUXD3_RX_CDR_LDODCO_STEP_SETTLE_TIMER_LIMIT_MUXD3_BF_OFF ( 2)
#define PMA_RX_MGS_CDR_LDO2_MUXD3_RX_CDR_LDODCO_STEP_SETTLE_TIMER_LIMIT_MUXD3_BF_WID ( 2)
#define PMA_RX_MGS_CDR_LDO2_MUXD3_RX_CDR_LDODCO_STEP_SETTLE_TIMER_LIMIT_MUXD3_BF_MSK (0x0000000C)
#define PMA_RX_MGS_CDR_LDO2_MUXD3_RX_CDR_LDODCO_STEP_SETTLE_TIMER_LIMIT_MUXD3_BF_DEF (0x00000008)

#define PMA_RX_MGS_CDR_LDO2_MUXD3_RX_CDR_LDODCO_ADAPT_CTR_DELAY_MUXD3_BF_OFF ( 4)
#define PMA_RX_MGS_CDR_LDO2_MUXD3_RX_CDR_LDODCO_ADAPT_CTR_DELAY_MUXD3_BF_WID ( 3)
#define PMA_RX_MGS_CDR_LDO2_MUXD3_RX_CDR_LDODCO_ADAPT_CTR_DELAY_MUXD3_BF_MSK (0x00000070)
#define PMA_RX_MGS_CDR_LDO2_MUXD3_RX_CDR_LDODCO_ADAPT_CTR_DELAY_MUXD3_BF_DEF (0x00000050)

#define PMA_RX_MGS_CDR_LDO2_MUXD3_RX_CDR_LDODCO_ADAPT_STEP_MUXD3_BF_OFF ( 7)
#define PMA_RX_MGS_CDR_LDO2_MUXD3_RX_CDR_LDODCO_ADAPT_STEP_MUXD3_BF_WID ( 3)
#define PMA_RX_MGS_CDR_LDO2_MUXD3_RX_CDR_LDODCO_ADAPT_STEP_MUXD3_BF_MSK (0x00000380)
#define PMA_RX_MGS_CDR_LDO2_MUXD3_RX_CDR_LDODCO_ADAPT_STEP_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO2_MUXD3_RX_CDR_LDODCO_STEP_CHICKEN_BIT_MUXD3_BF_OFF (10)
#define PMA_RX_MGS_CDR_LDO2_MUXD3_RX_CDR_LDODCO_STEP_CHICKEN_BIT_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO2_MUXD3_RX_CDR_LDODCO_STEP_CHICKEN_BIT_MUXD3_BF_MSK (0x00000400)
#define PMA_RX_MGS_CDR_LDO2_MUXD3_RX_CDR_LDODCO_STEP_CHICKEN_BIT_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO2_MUXD3_RX_CDR_LDODCO_ADAPT_EN_MUXD3_BF_OFF (11)
#define PMA_RX_MGS_CDR_LDO2_MUXD3_RX_CDR_LDODCO_ADAPT_EN_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO2_MUXD3_RX_CDR_LDODCO_ADAPT_EN_MUXD3_BF_MSK (0x00000800)
#define PMA_RX_MGS_CDR_LDO2_MUXD3_RX_CDR_LDODCO_ADAPT_EN_MUXD3_BF_DEF (0x00000800)

#define PMA_RX_MGS_CDR_LDO2_MUXD3_RX_CDR_LDODCO_VREF_OVRD_MUXD3_BF_OFF (12)
#define PMA_RX_MGS_CDR_LDO2_MUXD3_RX_CDR_LDODCO_VREF_OVRD_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO2_MUXD3_RX_CDR_LDODCO_VREF_OVRD_MUXD3_BF_MSK (0x00001000)
#define PMA_RX_MGS_CDR_LDO2_MUXD3_RX_CDR_LDODCO_VREF_OVRD_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO2_MUXD3_RX_CDR_LDODCO_VREF_SEL_MUXD3_BF_OFF (13)
#define PMA_RX_MGS_CDR_LDO2_MUXD3_RX_CDR_LDODCO_VREF_SEL_MUXD3_BF_WID ( 6)
#define PMA_RX_MGS_CDR_LDO2_MUXD3_RX_CDR_LDODCO_VREF_SEL_MUXD3_BF_MSK (0x0007E000)
#define PMA_RX_MGS_CDR_LDO2_MUXD3_RX_CDR_LDODCO_VREF_SEL_MUXD3_BF_DEF (0x00014000)

#define PMA_RX_MGS_CDR_LDO2_MUXD3_RX_CDR_DFX_LDODCO_ADAPT_TOGGLE_EN_MUXD3_BF_OFF (19)
#define PMA_RX_MGS_CDR_LDO2_MUXD3_RX_CDR_DFX_LDODCO_ADAPT_TOGGLE_EN_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO2_MUXD3_RX_CDR_DFX_LDODCO_ADAPT_TOGGLE_EN_MUXD3_BF_MSK (0x00080000)
#define PMA_RX_MGS_CDR_LDO2_MUXD3_RX_CDR_DFX_LDODCO_ADAPT_TOGGLE_EN_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO2_MUXD3_RX_CDR_DFX_LDODCO_ADAPT_DIR_OVR_MUXD3_BF_OFF (20)
#define PMA_RX_MGS_CDR_LDO2_MUXD3_RX_CDR_DFX_LDODCO_ADAPT_DIR_OVR_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO2_MUXD3_RX_CDR_DFX_LDODCO_ADAPT_DIR_OVR_MUXD3_BF_MSK (0x00100000)
#define PMA_RX_MGS_CDR_LDO2_MUXD3_RX_CDR_DFX_LDODCO_ADAPT_DIR_OVR_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO2_MUXD3_RX_CDR_DFX_LDODCO_ADAPT_EN_OVR_MUXD3_BF_OFF (21)
#define PMA_RX_MGS_CDR_LDO2_MUXD3_RX_CDR_DFX_LDODCO_ADAPT_EN_OVR_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO2_MUXD3_RX_CDR_DFX_LDODCO_ADAPT_EN_OVR_MUXD3_BF_MSK (0x00200000)
#define PMA_RX_MGS_CDR_LDO2_MUXD3_RX_CDR_DFX_LDODCO_ADAPT_EN_OVR_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO2_MUXD3_RX_CDR_DFX_LDODCO_ADAPT_VAL_OVR_MUXD3_BF_OFF (22)
#define PMA_RX_MGS_CDR_LDO2_MUXD3_RX_CDR_DFX_LDODCO_ADAPT_VAL_OVR_MUXD3_BF_WID ( 9)
#define PMA_RX_MGS_CDR_LDO2_MUXD3_RX_CDR_DFX_LDODCO_ADAPT_VAL_OVR_MUXD3_BF_MSK (0x7FC00000)
#define PMA_RX_MGS_CDR_LDO2_MUXD3_RX_CDR_DFX_LDODCO_ADAPT_VAL_OVR_MUXD3_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_LDO2_MUXD4 register description at address offset 0x590
  *
  * Register default value:        0x00014858
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_ldo2_muxd4
  * rx_cdr_ldo2
  */

typedef union {
  struct {
    uint32_t RX_CDR_START_LDODCO_STEP_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_LDODCO_STEP_DIR_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RX_CDR_LDODCO_STEP_SETTLE_TIMER_LIMIT_MUXD4 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="2" ResetValue="0x2"
    uint32_t RX_CDR_LDODCO_ADAPT_CTR_DELAY_MUXD4 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="4" ResetValue="0x5"
    uint32_t RX_CDR_LDODCO_ADAPT_STEP_MUXD4 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t RX_CDR_LDODCO_STEP_CHICKEN_BIT_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RX_CDR_LDODCO_ADAPT_EN_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x1"
    uint32_t RX_CDR_LDODCO_VREF_OVRD_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t RX_CDR_LDODCO_VREF_SEL_MUXD4 : 6;
    ///< ---
    ///< AccessType="RW" BitOffset="13" ResetValue="0xA"
    uint32_t RX_CDR_DFX_LDODCO_ADAPT_TOGGLE_EN_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t RX_CDR_DFX_LDODCO_ADAPT_DIR_OVR_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t RX_CDR_DFX_LDODCO_ADAPT_ENABLE_OVR_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t RX_CDR_DFX_LDODCO_ADAPT_VAL_OVR_MUXD4 : 9;
    ///< ---
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_ldo2_muxd4_reg_t;

#define PMA_RX_MGS_CDR_LDO2_MUXD4_DEFAULT (0x00014858U)
#define PMA_RX_MGS_CDR_LDO2_MUXD4_RD_MASK (0x7fffffffU)
#define PMA_RX_MGS_CDR_LDO2_MUXD4_WR_MASK (0x7fffffffU)


#define PMA_RX_MGS_CDR_LDO2_MUXD4_RX_CDR_START_LDODCO_STEP_MUXD4_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_LDO2_MUXD4_RX_CDR_START_LDODCO_STEP_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO2_MUXD4_RX_CDR_START_LDODCO_STEP_MUXD4_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_LDO2_MUXD4_RX_CDR_START_LDODCO_STEP_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO2_MUXD4_RX_CDR_LDODCO_STEP_DIR_MUXD4_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_LDO2_MUXD4_RX_CDR_LDODCO_STEP_DIR_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO2_MUXD4_RX_CDR_LDODCO_STEP_DIR_MUXD4_BF_MSK (0x00000002)
#define PMA_RX_MGS_CDR_LDO2_MUXD4_RX_CDR_LDODCO_STEP_DIR_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO2_MUXD4_RX_CDR_LDODCO_STEP_SETTLE_TIMER_LIMIT_MUXD4_BF_OFF ( 2)
#define PMA_RX_MGS_CDR_LDO2_MUXD4_RX_CDR_LDODCO_STEP_SETTLE_TIMER_LIMIT_MUXD4_BF_WID ( 2)
#define PMA_RX_MGS_CDR_LDO2_MUXD4_RX_CDR_LDODCO_STEP_SETTLE_TIMER_LIMIT_MUXD4_BF_MSK (0x0000000C)
#define PMA_RX_MGS_CDR_LDO2_MUXD4_RX_CDR_LDODCO_STEP_SETTLE_TIMER_LIMIT_MUXD4_BF_DEF (0x00000008)

#define PMA_RX_MGS_CDR_LDO2_MUXD4_RX_CDR_LDODCO_ADAPT_CTR_DELAY_MUXD4_BF_OFF ( 4)
#define PMA_RX_MGS_CDR_LDO2_MUXD4_RX_CDR_LDODCO_ADAPT_CTR_DELAY_MUXD4_BF_WID ( 3)
#define PMA_RX_MGS_CDR_LDO2_MUXD4_RX_CDR_LDODCO_ADAPT_CTR_DELAY_MUXD4_BF_MSK (0x00000070)
#define PMA_RX_MGS_CDR_LDO2_MUXD4_RX_CDR_LDODCO_ADAPT_CTR_DELAY_MUXD4_BF_DEF (0x00000050)

#define PMA_RX_MGS_CDR_LDO2_MUXD4_RX_CDR_LDODCO_ADAPT_STEP_MUXD4_BF_OFF ( 7)
#define PMA_RX_MGS_CDR_LDO2_MUXD4_RX_CDR_LDODCO_ADAPT_STEP_MUXD4_BF_WID ( 3)
#define PMA_RX_MGS_CDR_LDO2_MUXD4_RX_CDR_LDODCO_ADAPT_STEP_MUXD4_BF_MSK (0x00000380)
#define PMA_RX_MGS_CDR_LDO2_MUXD4_RX_CDR_LDODCO_ADAPT_STEP_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO2_MUXD4_RX_CDR_LDODCO_STEP_CHICKEN_BIT_MUXD4_BF_OFF (10)
#define PMA_RX_MGS_CDR_LDO2_MUXD4_RX_CDR_LDODCO_STEP_CHICKEN_BIT_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO2_MUXD4_RX_CDR_LDODCO_STEP_CHICKEN_BIT_MUXD4_BF_MSK (0x00000400)
#define PMA_RX_MGS_CDR_LDO2_MUXD4_RX_CDR_LDODCO_STEP_CHICKEN_BIT_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO2_MUXD4_RX_CDR_LDODCO_ADAPT_EN_MUXD4_BF_OFF (11)
#define PMA_RX_MGS_CDR_LDO2_MUXD4_RX_CDR_LDODCO_ADAPT_EN_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO2_MUXD4_RX_CDR_LDODCO_ADAPT_EN_MUXD4_BF_MSK (0x00000800)
#define PMA_RX_MGS_CDR_LDO2_MUXD4_RX_CDR_LDODCO_ADAPT_EN_MUXD4_BF_DEF (0x00000800)

#define PMA_RX_MGS_CDR_LDO2_MUXD4_RX_CDR_LDODCO_VREF_OVRD_MUXD4_BF_OFF (12)
#define PMA_RX_MGS_CDR_LDO2_MUXD4_RX_CDR_LDODCO_VREF_OVRD_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO2_MUXD4_RX_CDR_LDODCO_VREF_OVRD_MUXD4_BF_MSK (0x00001000)
#define PMA_RX_MGS_CDR_LDO2_MUXD4_RX_CDR_LDODCO_VREF_OVRD_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO2_MUXD4_RX_CDR_LDODCO_VREF_SEL_MUXD4_BF_OFF (13)
#define PMA_RX_MGS_CDR_LDO2_MUXD4_RX_CDR_LDODCO_VREF_SEL_MUXD4_BF_WID ( 6)
#define PMA_RX_MGS_CDR_LDO2_MUXD4_RX_CDR_LDODCO_VREF_SEL_MUXD4_BF_MSK (0x0007E000)
#define PMA_RX_MGS_CDR_LDO2_MUXD4_RX_CDR_LDODCO_VREF_SEL_MUXD4_BF_DEF (0x00014000)

#define PMA_RX_MGS_CDR_LDO2_MUXD4_RX_CDR_DFX_LDODCO_ADAPT_TOGGLE_EN_MUXD4_BF_OFF (19)
#define PMA_RX_MGS_CDR_LDO2_MUXD4_RX_CDR_DFX_LDODCO_ADAPT_TOGGLE_EN_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO2_MUXD4_RX_CDR_DFX_LDODCO_ADAPT_TOGGLE_EN_MUXD4_BF_MSK (0x00080000)
#define PMA_RX_MGS_CDR_LDO2_MUXD4_RX_CDR_DFX_LDODCO_ADAPT_TOGGLE_EN_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO2_MUXD4_RX_CDR_DFX_LDODCO_ADAPT_DIR_OVR_MUXD4_BF_OFF (20)
#define PMA_RX_MGS_CDR_LDO2_MUXD4_RX_CDR_DFX_LDODCO_ADAPT_DIR_OVR_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO2_MUXD4_RX_CDR_DFX_LDODCO_ADAPT_DIR_OVR_MUXD4_BF_MSK (0x00100000)
#define PMA_RX_MGS_CDR_LDO2_MUXD4_RX_CDR_DFX_LDODCO_ADAPT_DIR_OVR_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO2_MUXD4_RX_CDR_DFX_LDODCO_ADAPT_EN_OVR_MUXD4_BF_OFF (21)
#define PMA_RX_MGS_CDR_LDO2_MUXD4_RX_CDR_DFX_LDODCO_ADAPT_EN_OVR_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_LDO2_MUXD4_RX_CDR_DFX_LDODCO_ADAPT_EN_OVR_MUXD4_BF_MSK (0x00200000)
#define PMA_RX_MGS_CDR_LDO2_MUXD4_RX_CDR_DFX_LDODCO_ADAPT_EN_OVR_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO2_MUXD4_RX_CDR_DFX_LDODCO_ADAPT_VAL_OVR_MUXD4_BF_OFF (22)
#define PMA_RX_MGS_CDR_LDO2_MUXD4_RX_CDR_DFX_LDODCO_ADAPT_VAL_OVR_MUXD4_BF_WID ( 9)
#define PMA_RX_MGS_CDR_LDO2_MUXD4_RX_CDR_DFX_LDODCO_ADAPT_VAL_OVR_MUXD4_BF_MSK (0x7FC00000)
#define PMA_RX_MGS_CDR_LDO2_MUXD4_RX_CDR_DFX_LDODCO_ADAPT_VAL_OVR_MUXD4_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_LDO_STATUS register description at address offset 0x594
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_ldo_status
  * Rx CDR LDO Status
  */

typedef union {
  struct {
    uint32_t RX_CDR_MAX_LDODCO_VREF_SEL : 6;
    ///< ---
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t RX_CDR_MIN_LDODCO_VREF_SEL : 6;
    ///< ---
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 18;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_ldo_stat_reg_t;

#define PMA_RX_MGS_CDR_LDO_STAT_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CDR_LDO_STAT_RD_MASK (0x00003f3fU)
#define PMA_RX_MGS_CDR_LDO_STAT_WR_MASK (0x00000000U)


#define PMA_RX_MGS_CDR_LDO_STAT_RX_CDR_MAX_LDODCO_VREF_SEL_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_LDO_STAT_RX_CDR_MAX_LDODCO_VREF_SEL_BF_WID ( 6)
#define PMA_RX_MGS_CDR_LDO_STAT_RX_CDR_MAX_LDODCO_VREF_SEL_BF_MSK (0x0000003F)
#define PMA_RX_MGS_CDR_LDO_STAT_RX_CDR_MAX_LDODCO_VREF_SEL_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_LDO_STAT_RX_CDR_MIN_LDODCO_VREF_SEL_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_LDO_STAT_RX_CDR_MIN_LDODCO_VREF_SEL_BF_WID ( 6)
#define PMA_RX_MGS_CDR_LDO_STAT_RX_CDR_MIN_LDODCO_VREF_SEL_BF_MSK (0x00003F00)
#define PMA_RX_MGS_CDR_LDO_STAT_RX_CDR_MIN_LDODCO_VREF_SEL_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_ADL0 register description at address offset 0x598
  *
  * Register default value:        0x01800007
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_adl0
  * rx_cdr_adl0
  */

typedef union {
  struct {
    uint32_t RX_CDR_ADL_ENABLE : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t RX_CDR_ADL_RANGE : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x3"
    uint32_t RX_CDR_ADL_POS_OFFSET : 8;
    ///< ---
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RX_CDR_ADL_NEG_OFFSET : 8;
    ///< ---
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t RX_CDR_ADL_ENABLE_OVR_EN : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t RX_CDR_ADL_ENABLE_OVR_VAL : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t RX_CDR_ADL_CAP_CTRL_OVR_EN : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t RX_CDR_ADL_CAP_CTRL_OVR_VAL : 9;
    ///< ---
    ///< AccessType="RW" BitOffset="23" ResetValue="0x3"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_adl0_reg_t;

#define PMA_RX_MGS_CDR_ADL0_DEFAULT (0x01800007U)
#define PMA_RX_MGS_CDR_ADL0_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_CDR_ADL0_WR_MASK (0xffffffffU)


#define PMA_RX_MGS_CDR_ADL0_RX_CDR_ADL_EN_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_ADL0_RX_CDR_ADL_EN_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ADL0_RX_CDR_ADL_EN_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_ADL0_RX_CDR_ADL_EN_BF_DEF (0x00000001)

#define PMA_RX_MGS_CDR_ADL0_RX_CDR_ADL_RANGE_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_ADL0_RX_CDR_ADL_RANGE_BF_WID ( 3)
#define PMA_RX_MGS_CDR_ADL0_RX_CDR_ADL_RANGE_BF_MSK (0x0000000E)
#define PMA_RX_MGS_CDR_ADL0_RX_CDR_ADL_RANGE_BF_DEF (0x00000006)

#define PMA_RX_MGS_CDR_ADL0_RX_CDR_ADL_POS_OFFSET_BF_OFF ( 4)
#define PMA_RX_MGS_CDR_ADL0_RX_CDR_ADL_POS_OFFSET_BF_WID ( 8)
#define PMA_RX_MGS_CDR_ADL0_RX_CDR_ADL_POS_OFFSET_BF_MSK (0x00000FF0)
#define PMA_RX_MGS_CDR_ADL0_RX_CDR_ADL_POS_OFFSET_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ADL0_RX_CDR_ADL_NEG_OFFSET_BF_OFF (12)
#define PMA_RX_MGS_CDR_ADL0_RX_CDR_ADL_NEG_OFFSET_BF_WID ( 8)
#define PMA_RX_MGS_CDR_ADL0_RX_CDR_ADL_NEG_OFFSET_BF_MSK (0x000FF000)
#define PMA_RX_MGS_CDR_ADL0_RX_CDR_ADL_NEG_OFFSET_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ADL0_RX_CDR_ADL_EN_OVR_EN_BF_OFF (20)
#define PMA_RX_MGS_CDR_ADL0_RX_CDR_ADL_EN_OVR_EN_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ADL0_RX_CDR_ADL_EN_OVR_EN_BF_MSK (0x00100000)
#define PMA_RX_MGS_CDR_ADL0_RX_CDR_ADL_EN_OVR_EN_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ADL0_RX_CDR_ADL_EN_OVR_VAL_BF_OFF (21)
#define PMA_RX_MGS_CDR_ADL0_RX_CDR_ADL_EN_OVR_VAL_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ADL0_RX_CDR_ADL_EN_OVR_VAL_BF_MSK (0x00200000)
#define PMA_RX_MGS_CDR_ADL0_RX_CDR_ADL_EN_OVR_VAL_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ADL0_RX_CDR_ADL_CAP_CTRL_OVR_EN_BF_OFF (22)
#define PMA_RX_MGS_CDR_ADL0_RX_CDR_ADL_CAP_CTRL_OVR_EN_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ADL0_RX_CDR_ADL_CAP_CTRL_OVR_EN_BF_MSK (0x00400000)
#define PMA_RX_MGS_CDR_ADL0_RX_CDR_ADL_CAP_CTRL_OVR_EN_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ADL0_RX_CDR_ADL_CAP_CTRL_OVR_VAL_BF_OFF (23)
#define PMA_RX_MGS_CDR_ADL0_RX_CDR_ADL_CAP_CTRL_OVR_VAL_BF_WID ( 9)
#define PMA_RX_MGS_CDR_ADL0_RX_CDR_ADL_CAP_CTRL_OVR_VAL_BF_MSK (0xFF800000)
#define PMA_RX_MGS_CDR_ADL0_RX_CDR_ADL_CAP_CTRL_OVR_VAL_BF_DEF (0x01800000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_ADL1 register description at address offset 0x59c
  *
  * Register default value:        0x03FF0000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_adl1
  * rx_cdr_adl1
  */

typedef union {
  struct {
    uint32_t RX_CDR_ADL_MONITOR_OCT_SEL : 8;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_ADL_MONITOR_RSTB : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RX_CDR_ADL_MONITOR_THR : 5;
    ///< ---
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t RX_CDR_LOCKTIME_MON_L2D_TIMER_MAX : 16;
    ///< ---
    ///< AccessType="RW" BitOffset="16" ResetValue="0x3FF"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_adl1_reg_t;

#define PMA_RX_MGS_CDR_ADL1_DEFAULT (0x03ff0000U)
#define PMA_RX_MGS_CDR_ADL1_RD_MASK (0xffff3fffU)
#define PMA_RX_MGS_CDR_ADL1_WR_MASK (0xffff3fffU)


#define PMA_RX_MGS_CDR_ADL1_RX_CDR_ADL_MON_OCT_SEL_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_ADL1_RX_CDR_ADL_MON_OCT_SEL_BF_WID ( 8)
#define PMA_RX_MGS_CDR_ADL1_RX_CDR_ADL_MON_OCT_SEL_BF_MSK (0x000000FF)
#define PMA_RX_MGS_CDR_ADL1_RX_CDR_ADL_MON_OCT_SEL_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ADL1_RX_CDR_ADL_MON_RSTB_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_ADL1_RX_CDR_ADL_MON_RSTB_BF_WID ( 1)
#define PMA_RX_MGS_CDR_ADL1_RX_CDR_ADL_MON_RSTB_BF_MSK (0x00000100)
#define PMA_RX_MGS_CDR_ADL1_RX_CDR_ADL_MON_RSTB_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ADL1_RX_CDR_ADL_MON_THR_BF_OFF ( 9)
#define PMA_RX_MGS_CDR_ADL1_RX_CDR_ADL_MON_THR_BF_WID ( 5)
#define PMA_RX_MGS_CDR_ADL1_RX_CDR_ADL_MON_THR_BF_MSK (0x00003E00)
#define PMA_RX_MGS_CDR_ADL1_RX_CDR_ADL_MON_THR_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_ADL1_RX_CDR_LOCKTIME_MON_L2D_TIMER_MAX_BF_OFF (16)
#define PMA_RX_MGS_CDR_ADL1_RX_CDR_LOCKTIME_MON_L2D_TIMER_MAX_BF_WID (16)
#define PMA_RX_MGS_CDR_ADL1_RX_CDR_LOCKTIME_MON_L2D_TIMER_MAX_BF_MSK (0xFFFF0000)
#define PMA_RX_MGS_CDR_ADL1_RX_CDR_LOCKTIME_MON_L2D_TIMER_MAX_BF_DEF (0x03FF0000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_KVCC0_MUXD0 register description at address offset 0x5a0
  *
  * Register default value:        0x420813C5
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_kvcc0_muxd0
  * rx_cdr_kvcc0
  */

typedef union {
  struct {
    uint32_t RX_CDR_KVCC_SETTLE_MAXCNT_MUXD0 : 8;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0xC5"
    uint32_t RX_CDR_KVCC_MEASURE_MAXCNT_MUXD0 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x3"
    uint32_t RX_CDR_KVCCCALIB_LDO_OFFSET_MUXD0 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x2"
    uint32_t RX_CDR_DFT_FREQ_MEAS_ENABLE_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t RX_CDR_NOTCH_OFFSET_MUXD0 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RX_CDR_FULL_RANGE_KVCC_SEL_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t RX_CDR_KVCC_INV_POLARITY_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="19" ResetValue="0x1"
    uint32_t RX_CDR_2F0_FINE_RATIO_MUXD0 : 7;
    ///< ---
    ///< AccessType="RW" BitOffset="20" ResetValue="0x20"
    uint32_t RX_CDR_START_2F0_STEP_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="27" ResetValue="0x0"
    uint32_t RX_CDR_COMP_CMSEL_MUXD0 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t RX_CDR_COMP_ENB_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="30" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_kvcc0_muxd0_reg_t;

#define PMA_RX_MGS_CDR_KVCC0_MUXD0_DEFAULT (0x420813c5U)
#define PMA_RX_MGS_CDR_KVCC0_MUXD0_RD_MASK (0x7fffffffU)
#define PMA_RX_MGS_CDR_KVCC0_MUXD0_WR_MASK (0x7fffffffU)


#define PMA_RX_MGS_CDR_KVCC0_MUXD0_RX_CDR_KVCC_SETTLE_MAXCNT_MUXD0_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_KVCC0_MUXD0_RX_CDR_KVCC_SETTLE_MAXCNT_MUXD0_BF_WID ( 8)
#define PMA_RX_MGS_CDR_KVCC0_MUXD0_RX_CDR_KVCC_SETTLE_MAXCNT_MUXD0_BF_MSK (0x000000FF)
#define PMA_RX_MGS_CDR_KVCC0_MUXD0_RX_CDR_KVCC_SETTLE_MAXCNT_MUXD0_BF_DEF (0x000000C5)

#define PMA_RX_MGS_CDR_KVCC0_MUXD0_RX_CDR_KVCC_MEAS_MAXCNT_MUXD0_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_KVCC0_MUXD0_RX_CDR_KVCC_MEAS_MAXCNT_MUXD0_BF_WID ( 3)
#define PMA_RX_MGS_CDR_KVCC0_MUXD0_RX_CDR_KVCC_MEAS_MAXCNT_MUXD0_BF_MSK (0x00000700)
#define PMA_RX_MGS_CDR_KVCC0_MUXD0_RX_CDR_KVCC_MEAS_MAXCNT_MUXD0_BF_DEF (0x00000300)

#define PMA_RX_MGS_CDR_KVCC0_MUXD0_RX_CDR_KVCCCALIB_LDO_OFFSET_MUXD0_BF_OFF (11)
#define PMA_RX_MGS_CDR_KVCC0_MUXD0_RX_CDR_KVCCCALIB_LDO_OFFSET_MUXD0_BF_WID ( 3)
#define PMA_RX_MGS_CDR_KVCC0_MUXD0_RX_CDR_KVCCCALIB_LDO_OFFSET_MUXD0_BF_MSK (0x00003800)
#define PMA_RX_MGS_CDR_KVCC0_MUXD0_RX_CDR_KVCCCALIB_LDO_OFFSET_MUXD0_BF_DEF (0x00001000)

#define PMA_RX_MGS_CDR_KVCC0_MUXD0_RX_CDR_DFT_FREQ_MEAS_EN_MUXD0_BF_OFF (14)
#define PMA_RX_MGS_CDR_KVCC0_MUXD0_RX_CDR_DFT_FREQ_MEAS_EN_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC0_MUXD0_RX_CDR_DFT_FREQ_MEAS_EN_MUXD0_BF_MSK (0x00004000)
#define PMA_RX_MGS_CDR_KVCC0_MUXD0_RX_CDR_DFT_FREQ_MEAS_EN_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC0_MUXD0_RX_CDR_NOTCH_OFFSET_MUXD0_BF_OFF (15)
#define PMA_RX_MGS_CDR_KVCC0_MUXD0_RX_CDR_NOTCH_OFFSET_MUXD0_BF_WID ( 3)
#define PMA_RX_MGS_CDR_KVCC0_MUXD0_RX_CDR_NOTCH_OFFSET_MUXD0_BF_MSK (0x00038000)
#define PMA_RX_MGS_CDR_KVCC0_MUXD0_RX_CDR_NOTCH_OFFSET_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC0_MUXD0_RX_CDR_FULL_RANGE_KVCC_SEL_MUXD0_BF_OFF (18)
#define PMA_RX_MGS_CDR_KVCC0_MUXD0_RX_CDR_FULL_RANGE_KVCC_SEL_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC0_MUXD0_RX_CDR_FULL_RANGE_KVCC_SEL_MUXD0_BF_MSK (0x00040000)
#define PMA_RX_MGS_CDR_KVCC0_MUXD0_RX_CDR_FULL_RANGE_KVCC_SEL_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC0_MUXD0_RX_CDR_KVCC_INV_POLARITY_MUXD0_BF_OFF (19)
#define PMA_RX_MGS_CDR_KVCC0_MUXD0_RX_CDR_KVCC_INV_POLARITY_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC0_MUXD0_RX_CDR_KVCC_INV_POLARITY_MUXD0_BF_MSK (0x00080000)
#define PMA_RX_MGS_CDR_KVCC0_MUXD0_RX_CDR_KVCC_INV_POLARITY_MUXD0_BF_DEF (0x00080000)

#define PMA_RX_MGS_CDR_KVCC0_MUXD0_RX_CDR_2F0_FINE_RATIO_MUXD0_BF_OFF (20)
#define PMA_RX_MGS_CDR_KVCC0_MUXD0_RX_CDR_2F0_FINE_RATIO_MUXD0_BF_WID ( 7)
#define PMA_RX_MGS_CDR_KVCC0_MUXD0_RX_CDR_2F0_FINE_RATIO_MUXD0_BF_MSK (0x07F00000)
#define PMA_RX_MGS_CDR_KVCC0_MUXD0_RX_CDR_2F0_FINE_RATIO_MUXD0_BF_DEF (0x02000000)

#define PMA_RX_MGS_CDR_KVCC0_MUXD0_RX_CDR_START_2F0_STEP_MUXD0_BF_OFF (27)
#define PMA_RX_MGS_CDR_KVCC0_MUXD0_RX_CDR_START_2F0_STEP_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC0_MUXD0_RX_CDR_START_2F0_STEP_MUXD0_BF_MSK (0x08000000)
#define PMA_RX_MGS_CDR_KVCC0_MUXD0_RX_CDR_START_2F0_STEP_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC0_MUXD0_RX_CDR_COMP_CMSEL_MUXD0_BF_OFF (28)
#define PMA_RX_MGS_CDR_KVCC0_MUXD0_RX_CDR_COMP_CMSEL_MUXD0_BF_WID ( 2)
#define PMA_RX_MGS_CDR_KVCC0_MUXD0_RX_CDR_COMP_CMSEL_MUXD0_BF_MSK (0x30000000)
#define PMA_RX_MGS_CDR_KVCC0_MUXD0_RX_CDR_COMP_CMSEL_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC0_MUXD0_RX_CDR_COMP_ENB_MUXD0_BF_OFF (30)
#define PMA_RX_MGS_CDR_KVCC0_MUXD0_RX_CDR_COMP_ENB_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC0_MUXD0_RX_CDR_COMP_ENB_MUXD0_BF_MSK (0x40000000)
#define PMA_RX_MGS_CDR_KVCC0_MUXD0_RX_CDR_COMP_ENB_MUXD0_BF_DEF (0x40000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_KVCC0_MUXD1 register description at address offset 0x5a4
  *
  * Register default value:        0x420813C5
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_kvcc0_muxd1
  * rx_cdr_kvcc0
  */

typedef union {
  struct {
    uint32_t RX_CDR_KVCC_SETTLE_MAXCNT_MUXD1 : 8;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0xC5"
    uint32_t RX_CDR_KVCC_MEASURE_MAXCNT_MUXD1 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x3"
    uint32_t RX_CDR_KVCCCALIB_LDO_OFFSET_MUXD1 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x2"
    uint32_t RX_CDR_DFT_FREQ_MEAS_ENABLE_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t RX_CDR_NOTCH_OFFSET_MUXD1 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RX_CDR_FULL_RANGE_KVCC_SEL_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t RX_CDR_KVCC_INV_POLARITY_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="19" ResetValue="0x1"
    uint32_t RX_CDR_2F0_FINE_RATIO_MUXD1 : 7;
    ///< ---
    ///< AccessType="RW" BitOffset="20" ResetValue="0x20"
    uint32_t RX_CDR_START_2F0_STEP_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="27" ResetValue="0x0"
    uint32_t RX_CDR_COMP_CMSEL_MUXD1 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t RX_CDR_COMP_ENB_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="30" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_kvcc0_muxd1_reg_t;

#define PMA_RX_MGS_CDR_KVCC0_MUXD1_DEFAULT (0x420813c5U)
#define PMA_RX_MGS_CDR_KVCC0_MUXD1_RD_MASK (0x7fffffffU)
#define PMA_RX_MGS_CDR_KVCC0_MUXD1_WR_MASK (0x7fffffffU)


#define PMA_RX_MGS_CDR_KVCC0_MUXD1_RX_CDR_KVCC_SETTLE_MAXCNT_MUXD1_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_KVCC0_MUXD1_RX_CDR_KVCC_SETTLE_MAXCNT_MUXD1_BF_WID ( 8)
#define PMA_RX_MGS_CDR_KVCC0_MUXD1_RX_CDR_KVCC_SETTLE_MAXCNT_MUXD1_BF_MSK (0x000000FF)
#define PMA_RX_MGS_CDR_KVCC0_MUXD1_RX_CDR_KVCC_SETTLE_MAXCNT_MUXD1_BF_DEF (0x000000C5)

#define PMA_RX_MGS_CDR_KVCC0_MUXD1_RX_CDR_KVCC_MEAS_MAXCNT_MUXD1_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_KVCC0_MUXD1_RX_CDR_KVCC_MEAS_MAXCNT_MUXD1_BF_WID ( 3)
#define PMA_RX_MGS_CDR_KVCC0_MUXD1_RX_CDR_KVCC_MEAS_MAXCNT_MUXD1_BF_MSK (0x00000700)
#define PMA_RX_MGS_CDR_KVCC0_MUXD1_RX_CDR_KVCC_MEAS_MAXCNT_MUXD1_BF_DEF (0x00000300)

#define PMA_RX_MGS_CDR_KVCC0_MUXD1_RX_CDR_KVCCCALIB_LDO_OFFSET_MUXD1_BF_OFF (11)
#define PMA_RX_MGS_CDR_KVCC0_MUXD1_RX_CDR_KVCCCALIB_LDO_OFFSET_MUXD1_BF_WID ( 3)
#define PMA_RX_MGS_CDR_KVCC0_MUXD1_RX_CDR_KVCCCALIB_LDO_OFFSET_MUXD1_BF_MSK (0x00003800)
#define PMA_RX_MGS_CDR_KVCC0_MUXD1_RX_CDR_KVCCCALIB_LDO_OFFSET_MUXD1_BF_DEF (0x00001000)

#define PMA_RX_MGS_CDR_KVCC0_MUXD1_RX_CDR_DFT_FREQ_MEAS_EN_MUXD1_BF_OFF (14)
#define PMA_RX_MGS_CDR_KVCC0_MUXD1_RX_CDR_DFT_FREQ_MEAS_EN_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC0_MUXD1_RX_CDR_DFT_FREQ_MEAS_EN_MUXD1_BF_MSK (0x00004000)
#define PMA_RX_MGS_CDR_KVCC0_MUXD1_RX_CDR_DFT_FREQ_MEAS_EN_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC0_MUXD1_RX_CDR_NOTCH_OFFSET_MUXD1_BF_OFF (15)
#define PMA_RX_MGS_CDR_KVCC0_MUXD1_RX_CDR_NOTCH_OFFSET_MUXD1_BF_WID ( 3)
#define PMA_RX_MGS_CDR_KVCC0_MUXD1_RX_CDR_NOTCH_OFFSET_MUXD1_BF_MSK (0x00038000)
#define PMA_RX_MGS_CDR_KVCC0_MUXD1_RX_CDR_NOTCH_OFFSET_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC0_MUXD1_RX_CDR_FULL_RANGE_KVCC_SEL_MUXD1_BF_OFF (18)
#define PMA_RX_MGS_CDR_KVCC0_MUXD1_RX_CDR_FULL_RANGE_KVCC_SEL_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC0_MUXD1_RX_CDR_FULL_RANGE_KVCC_SEL_MUXD1_BF_MSK (0x00040000)
#define PMA_RX_MGS_CDR_KVCC0_MUXD1_RX_CDR_FULL_RANGE_KVCC_SEL_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC0_MUXD1_RX_CDR_KVCC_INV_POLARITY_MUXD1_BF_OFF (19)
#define PMA_RX_MGS_CDR_KVCC0_MUXD1_RX_CDR_KVCC_INV_POLARITY_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC0_MUXD1_RX_CDR_KVCC_INV_POLARITY_MUXD1_BF_MSK (0x00080000)
#define PMA_RX_MGS_CDR_KVCC0_MUXD1_RX_CDR_KVCC_INV_POLARITY_MUXD1_BF_DEF (0x00080000)

#define PMA_RX_MGS_CDR_KVCC0_MUXD1_RX_CDR_2F0_FINE_RATIO_MUXD1_BF_OFF (20)
#define PMA_RX_MGS_CDR_KVCC0_MUXD1_RX_CDR_2F0_FINE_RATIO_MUXD1_BF_WID ( 7)
#define PMA_RX_MGS_CDR_KVCC0_MUXD1_RX_CDR_2F0_FINE_RATIO_MUXD1_BF_MSK (0x07F00000)
#define PMA_RX_MGS_CDR_KVCC0_MUXD1_RX_CDR_2F0_FINE_RATIO_MUXD1_BF_DEF (0x02000000)

#define PMA_RX_MGS_CDR_KVCC0_MUXD1_RX_CDR_START_2F0_STEP_MUXD1_BF_OFF (27)
#define PMA_RX_MGS_CDR_KVCC0_MUXD1_RX_CDR_START_2F0_STEP_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC0_MUXD1_RX_CDR_START_2F0_STEP_MUXD1_BF_MSK (0x08000000)
#define PMA_RX_MGS_CDR_KVCC0_MUXD1_RX_CDR_START_2F0_STEP_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC0_MUXD1_RX_CDR_COMP_CMSEL_MUXD1_BF_OFF (28)
#define PMA_RX_MGS_CDR_KVCC0_MUXD1_RX_CDR_COMP_CMSEL_MUXD1_BF_WID ( 2)
#define PMA_RX_MGS_CDR_KVCC0_MUXD1_RX_CDR_COMP_CMSEL_MUXD1_BF_MSK (0x30000000)
#define PMA_RX_MGS_CDR_KVCC0_MUXD1_RX_CDR_COMP_CMSEL_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC0_MUXD1_RX_CDR_COMP_ENB_MUXD1_BF_OFF (30)
#define PMA_RX_MGS_CDR_KVCC0_MUXD1_RX_CDR_COMP_ENB_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC0_MUXD1_RX_CDR_COMP_ENB_MUXD1_BF_MSK (0x40000000)
#define PMA_RX_MGS_CDR_KVCC0_MUXD1_RX_CDR_COMP_ENB_MUXD1_BF_DEF (0x40000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_KVCC0_MUXD2 register description at address offset 0x5a8
  *
  * Register default value:        0x420813C5
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_kvcc0_muxd2
  * rx_cdr_kvcc0
  */

typedef union {
  struct {
    uint32_t RX_CDR_KVCC_SETTLE_MAXCNT_MUXD2 : 8;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0xC5"
    uint32_t RX_CDR_KVCC_MEASURE_MAXCNT_MUXD2 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x3"
    uint32_t RX_CDR_KVCCCALIB_LDO_OFFSET_MUXD2 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x2"
    uint32_t RX_CDR_DFT_FREQ_MEAS_ENABLE_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t RX_CDR_NOTCH_OFFSET_MUXD2 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RX_CDR_FULL_RANGE_KVCC_SEL_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t RX_CDR_KVCC_INV_POLARITY_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="19" ResetValue="0x1"
    uint32_t RX_CDR_2F0_FINE_RATIO_MUXD2 : 7;
    ///< ---
    ///< AccessType="RW" BitOffset="20" ResetValue="0x20"
    uint32_t RX_CDR_START_2F0_STEP_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="27" ResetValue="0x0"
    uint32_t RX_CDR_COMP_CMSEL_MUXD2 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t RX_CDR_COMP_ENB_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="30" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_kvcc0_muxd2_reg_t;

#define PMA_RX_MGS_CDR_KVCC0_MUXD2_DEFAULT (0x420813c5U)
#define PMA_RX_MGS_CDR_KVCC0_MUXD2_RD_MASK (0x7fffffffU)
#define PMA_RX_MGS_CDR_KVCC0_MUXD2_WR_MASK (0x7fffffffU)


#define PMA_RX_MGS_CDR_KVCC0_MUXD2_RX_CDR_KVCC_SETTLE_MAXCNT_MUXD2_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_KVCC0_MUXD2_RX_CDR_KVCC_SETTLE_MAXCNT_MUXD2_BF_WID ( 8)
#define PMA_RX_MGS_CDR_KVCC0_MUXD2_RX_CDR_KVCC_SETTLE_MAXCNT_MUXD2_BF_MSK (0x000000FF)
#define PMA_RX_MGS_CDR_KVCC0_MUXD2_RX_CDR_KVCC_SETTLE_MAXCNT_MUXD2_BF_DEF (0x000000C5)

#define PMA_RX_MGS_CDR_KVCC0_MUXD2_RX_CDR_KVCC_MEAS_MAXCNT_MUXD2_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_KVCC0_MUXD2_RX_CDR_KVCC_MEAS_MAXCNT_MUXD2_BF_WID ( 3)
#define PMA_RX_MGS_CDR_KVCC0_MUXD2_RX_CDR_KVCC_MEAS_MAXCNT_MUXD2_BF_MSK (0x00000700)
#define PMA_RX_MGS_CDR_KVCC0_MUXD2_RX_CDR_KVCC_MEAS_MAXCNT_MUXD2_BF_DEF (0x00000300)

#define PMA_RX_MGS_CDR_KVCC0_MUXD2_RX_CDR_KVCCCALIB_LDO_OFFSET_MUXD2_BF_OFF (11)
#define PMA_RX_MGS_CDR_KVCC0_MUXD2_RX_CDR_KVCCCALIB_LDO_OFFSET_MUXD2_BF_WID ( 3)
#define PMA_RX_MGS_CDR_KVCC0_MUXD2_RX_CDR_KVCCCALIB_LDO_OFFSET_MUXD2_BF_MSK (0x00003800)
#define PMA_RX_MGS_CDR_KVCC0_MUXD2_RX_CDR_KVCCCALIB_LDO_OFFSET_MUXD2_BF_DEF (0x00001000)

#define PMA_RX_MGS_CDR_KVCC0_MUXD2_RX_CDR_DFT_FREQ_MEAS_EN_MUXD2_BF_OFF (14)
#define PMA_RX_MGS_CDR_KVCC0_MUXD2_RX_CDR_DFT_FREQ_MEAS_EN_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC0_MUXD2_RX_CDR_DFT_FREQ_MEAS_EN_MUXD2_BF_MSK (0x00004000)
#define PMA_RX_MGS_CDR_KVCC0_MUXD2_RX_CDR_DFT_FREQ_MEAS_EN_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC0_MUXD2_RX_CDR_NOTCH_OFFSET_MUXD2_BF_OFF (15)
#define PMA_RX_MGS_CDR_KVCC0_MUXD2_RX_CDR_NOTCH_OFFSET_MUXD2_BF_WID ( 3)
#define PMA_RX_MGS_CDR_KVCC0_MUXD2_RX_CDR_NOTCH_OFFSET_MUXD2_BF_MSK (0x00038000)
#define PMA_RX_MGS_CDR_KVCC0_MUXD2_RX_CDR_NOTCH_OFFSET_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC0_MUXD2_RX_CDR_FULL_RANGE_KVCC_SEL_MUXD2_BF_OFF (18)
#define PMA_RX_MGS_CDR_KVCC0_MUXD2_RX_CDR_FULL_RANGE_KVCC_SEL_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC0_MUXD2_RX_CDR_FULL_RANGE_KVCC_SEL_MUXD2_BF_MSK (0x00040000)
#define PMA_RX_MGS_CDR_KVCC0_MUXD2_RX_CDR_FULL_RANGE_KVCC_SEL_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC0_MUXD2_RX_CDR_KVCC_INV_POLARITY_MUXD2_BF_OFF (19)
#define PMA_RX_MGS_CDR_KVCC0_MUXD2_RX_CDR_KVCC_INV_POLARITY_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC0_MUXD2_RX_CDR_KVCC_INV_POLARITY_MUXD2_BF_MSK (0x00080000)
#define PMA_RX_MGS_CDR_KVCC0_MUXD2_RX_CDR_KVCC_INV_POLARITY_MUXD2_BF_DEF (0x00080000)

#define PMA_RX_MGS_CDR_KVCC0_MUXD2_RX_CDR_2F0_FINE_RATIO_MUXD2_BF_OFF (20)
#define PMA_RX_MGS_CDR_KVCC0_MUXD2_RX_CDR_2F0_FINE_RATIO_MUXD2_BF_WID ( 7)
#define PMA_RX_MGS_CDR_KVCC0_MUXD2_RX_CDR_2F0_FINE_RATIO_MUXD2_BF_MSK (0x07F00000)
#define PMA_RX_MGS_CDR_KVCC0_MUXD2_RX_CDR_2F0_FINE_RATIO_MUXD2_BF_DEF (0x02000000)

#define PMA_RX_MGS_CDR_KVCC0_MUXD2_RX_CDR_START_2F0_STEP_MUXD2_BF_OFF (27)
#define PMA_RX_MGS_CDR_KVCC0_MUXD2_RX_CDR_START_2F0_STEP_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC0_MUXD2_RX_CDR_START_2F0_STEP_MUXD2_BF_MSK (0x08000000)
#define PMA_RX_MGS_CDR_KVCC0_MUXD2_RX_CDR_START_2F0_STEP_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC0_MUXD2_RX_CDR_COMP_CMSEL_MUXD2_BF_OFF (28)
#define PMA_RX_MGS_CDR_KVCC0_MUXD2_RX_CDR_COMP_CMSEL_MUXD2_BF_WID ( 2)
#define PMA_RX_MGS_CDR_KVCC0_MUXD2_RX_CDR_COMP_CMSEL_MUXD2_BF_MSK (0x30000000)
#define PMA_RX_MGS_CDR_KVCC0_MUXD2_RX_CDR_COMP_CMSEL_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC0_MUXD2_RX_CDR_COMP_ENB_MUXD2_BF_OFF (30)
#define PMA_RX_MGS_CDR_KVCC0_MUXD2_RX_CDR_COMP_ENB_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC0_MUXD2_RX_CDR_COMP_ENB_MUXD2_BF_MSK (0x40000000)
#define PMA_RX_MGS_CDR_KVCC0_MUXD2_RX_CDR_COMP_ENB_MUXD2_BF_DEF (0x40000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_KVCC0_MUXD3 register description at address offset 0x5ac
  *
  * Register default value:        0x420813C5
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_kvcc0_muxd3
  * rx_cdr_kvcc0
  */

typedef union {
  struct {
    uint32_t RX_CDR_KVCC_SETTLE_MAXCNT_MUXD3 : 8;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0xC5"
    uint32_t RX_CDR_KVCC_MEASURE_MAXCNT_MUXD3 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x3"
    uint32_t RX_CDR_KVCCCALIB_LDO_OFFSET_MUXD3 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x2"
    uint32_t RX_CDR_DFT_FREQ_MEAS_ENABLE_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t RX_CDR_NOTCH_OFFSET_MUXD3 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RX_CDR_FULL_RANGE_KVCC_SEL_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t RX_CDR_KVCC_INV_POLARITY_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="19" ResetValue="0x1"
    uint32_t RX_CDR_2F0_FINE_RATIO_MUXD3 : 7;
    ///< ---
    ///< AccessType="RW" BitOffset="20" ResetValue="0x20"
    uint32_t RX_CDR_START_2F0_STEP_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="27" ResetValue="0x0"
    uint32_t RX_CDR_COMP_CMSEL_MUXD3 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t RX_CDR_COMP_ENB_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="30" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_kvcc0_muxd3_reg_t;

#define PMA_RX_MGS_CDR_KVCC0_MUXD3_DEFAULT (0x420813c5U)
#define PMA_RX_MGS_CDR_KVCC0_MUXD3_RD_MASK (0x7fffffffU)
#define PMA_RX_MGS_CDR_KVCC0_MUXD3_WR_MASK (0x7fffffffU)


#define PMA_RX_MGS_CDR_KVCC0_MUXD3_RX_CDR_KVCC_SETTLE_MAXCNT_MUXD3_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_KVCC0_MUXD3_RX_CDR_KVCC_SETTLE_MAXCNT_MUXD3_BF_WID ( 8)
#define PMA_RX_MGS_CDR_KVCC0_MUXD3_RX_CDR_KVCC_SETTLE_MAXCNT_MUXD3_BF_MSK (0x000000FF)
#define PMA_RX_MGS_CDR_KVCC0_MUXD3_RX_CDR_KVCC_SETTLE_MAXCNT_MUXD3_BF_DEF (0x000000C5)

#define PMA_RX_MGS_CDR_KVCC0_MUXD3_RX_CDR_KVCC_MEAS_MAXCNT_MUXD3_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_KVCC0_MUXD3_RX_CDR_KVCC_MEAS_MAXCNT_MUXD3_BF_WID ( 3)
#define PMA_RX_MGS_CDR_KVCC0_MUXD3_RX_CDR_KVCC_MEAS_MAXCNT_MUXD3_BF_MSK (0x00000700)
#define PMA_RX_MGS_CDR_KVCC0_MUXD3_RX_CDR_KVCC_MEAS_MAXCNT_MUXD3_BF_DEF (0x00000300)

#define PMA_RX_MGS_CDR_KVCC0_MUXD3_RX_CDR_KVCCCALIB_LDO_OFFSET_MUXD3_BF_OFF (11)
#define PMA_RX_MGS_CDR_KVCC0_MUXD3_RX_CDR_KVCCCALIB_LDO_OFFSET_MUXD3_BF_WID ( 3)
#define PMA_RX_MGS_CDR_KVCC0_MUXD3_RX_CDR_KVCCCALIB_LDO_OFFSET_MUXD3_BF_MSK (0x00003800)
#define PMA_RX_MGS_CDR_KVCC0_MUXD3_RX_CDR_KVCCCALIB_LDO_OFFSET_MUXD3_BF_DEF (0x00001000)

#define PMA_RX_MGS_CDR_KVCC0_MUXD3_RX_CDR_DFT_FREQ_MEAS_EN_MUXD3_BF_OFF (14)
#define PMA_RX_MGS_CDR_KVCC0_MUXD3_RX_CDR_DFT_FREQ_MEAS_EN_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC0_MUXD3_RX_CDR_DFT_FREQ_MEAS_EN_MUXD3_BF_MSK (0x00004000)
#define PMA_RX_MGS_CDR_KVCC0_MUXD3_RX_CDR_DFT_FREQ_MEAS_EN_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC0_MUXD3_RX_CDR_NOTCH_OFFSET_MUXD3_BF_OFF (15)
#define PMA_RX_MGS_CDR_KVCC0_MUXD3_RX_CDR_NOTCH_OFFSET_MUXD3_BF_WID ( 3)
#define PMA_RX_MGS_CDR_KVCC0_MUXD3_RX_CDR_NOTCH_OFFSET_MUXD3_BF_MSK (0x00038000)
#define PMA_RX_MGS_CDR_KVCC0_MUXD3_RX_CDR_NOTCH_OFFSET_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC0_MUXD3_RX_CDR_FULL_RANGE_KVCC_SEL_MUXD3_BF_OFF (18)
#define PMA_RX_MGS_CDR_KVCC0_MUXD3_RX_CDR_FULL_RANGE_KVCC_SEL_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC0_MUXD3_RX_CDR_FULL_RANGE_KVCC_SEL_MUXD3_BF_MSK (0x00040000)
#define PMA_RX_MGS_CDR_KVCC0_MUXD3_RX_CDR_FULL_RANGE_KVCC_SEL_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC0_MUXD3_RX_CDR_KVCC_INV_POLARITY_MUXD3_BF_OFF (19)
#define PMA_RX_MGS_CDR_KVCC0_MUXD3_RX_CDR_KVCC_INV_POLARITY_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC0_MUXD3_RX_CDR_KVCC_INV_POLARITY_MUXD3_BF_MSK (0x00080000)
#define PMA_RX_MGS_CDR_KVCC0_MUXD3_RX_CDR_KVCC_INV_POLARITY_MUXD3_BF_DEF (0x00080000)

#define PMA_RX_MGS_CDR_KVCC0_MUXD3_RX_CDR_2F0_FINE_RATIO_MUXD3_BF_OFF (20)
#define PMA_RX_MGS_CDR_KVCC0_MUXD3_RX_CDR_2F0_FINE_RATIO_MUXD3_BF_WID ( 7)
#define PMA_RX_MGS_CDR_KVCC0_MUXD3_RX_CDR_2F0_FINE_RATIO_MUXD3_BF_MSK (0x07F00000)
#define PMA_RX_MGS_CDR_KVCC0_MUXD3_RX_CDR_2F0_FINE_RATIO_MUXD3_BF_DEF (0x02000000)

#define PMA_RX_MGS_CDR_KVCC0_MUXD3_RX_CDR_START_2F0_STEP_MUXD3_BF_OFF (27)
#define PMA_RX_MGS_CDR_KVCC0_MUXD3_RX_CDR_START_2F0_STEP_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC0_MUXD3_RX_CDR_START_2F0_STEP_MUXD3_BF_MSK (0x08000000)
#define PMA_RX_MGS_CDR_KVCC0_MUXD3_RX_CDR_START_2F0_STEP_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC0_MUXD3_RX_CDR_COMP_CMSEL_MUXD3_BF_OFF (28)
#define PMA_RX_MGS_CDR_KVCC0_MUXD3_RX_CDR_COMP_CMSEL_MUXD3_BF_WID ( 2)
#define PMA_RX_MGS_CDR_KVCC0_MUXD3_RX_CDR_COMP_CMSEL_MUXD3_BF_MSK (0x30000000)
#define PMA_RX_MGS_CDR_KVCC0_MUXD3_RX_CDR_COMP_CMSEL_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC0_MUXD3_RX_CDR_COMP_ENB_MUXD3_BF_OFF (30)
#define PMA_RX_MGS_CDR_KVCC0_MUXD3_RX_CDR_COMP_ENB_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC0_MUXD3_RX_CDR_COMP_ENB_MUXD3_BF_MSK (0x40000000)
#define PMA_RX_MGS_CDR_KVCC0_MUXD3_RX_CDR_COMP_ENB_MUXD3_BF_DEF (0x40000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_KVCC0_MUXD4 register description at address offset 0x5b0
  *
  * Register default value:        0x420813C5
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_kvcc0_muxd4
  * rx_cdr_kvcc0
  */

typedef union {
  struct {
    uint32_t RX_CDR_KVCC_SETTLE_MAXCNT_MUXD4 : 8;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0xC5"
    uint32_t RX_CDR_KVCC_MEASURE_MAXCNT_MUXD4 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x3"
    uint32_t RX_CDR_KVCCCALIB_LDO_OFFSET_MUXD4 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x2"
    uint32_t RX_CDR_DFT_FREQ_MEAS_ENABLE_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t RX_CDR_NOTCH_OFFSET_MUXD4 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RX_CDR_FULL_RANGE_KVCC_SEL_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t RX_CDR_KVCC_INV_POLARITY_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="19" ResetValue="0x1"
    uint32_t RX_CDR_2F0_FINE_RATIO_MUXD4 : 7;
    ///< ---
    ///< AccessType="RW" BitOffset="20" ResetValue="0x20"
    uint32_t RX_CDR_START_2F0_STEP_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="27" ResetValue="0x0"
    uint32_t RX_CDR_COMP_CMSEL_MUXD4 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t RX_CDR_COMP_ENB_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="30" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_kvcc0_muxd4_reg_t;

#define PMA_RX_MGS_CDR_KVCC0_MUXD4_DEFAULT (0x420813c5U)
#define PMA_RX_MGS_CDR_KVCC0_MUXD4_RD_MASK (0x7fffffffU)
#define PMA_RX_MGS_CDR_KVCC0_MUXD4_WR_MASK (0x7fffffffU)


#define PMA_RX_MGS_CDR_KVCC0_MUXD4_RX_CDR_KVCC_SETTLE_MAXCNT_MUXD4_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_KVCC0_MUXD4_RX_CDR_KVCC_SETTLE_MAXCNT_MUXD4_BF_WID ( 8)
#define PMA_RX_MGS_CDR_KVCC0_MUXD4_RX_CDR_KVCC_SETTLE_MAXCNT_MUXD4_BF_MSK (0x000000FF)
#define PMA_RX_MGS_CDR_KVCC0_MUXD4_RX_CDR_KVCC_SETTLE_MAXCNT_MUXD4_BF_DEF (0x000000C5)

#define PMA_RX_MGS_CDR_KVCC0_MUXD4_RX_CDR_KVCC_MEAS_MAXCNT_MUXD4_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_KVCC0_MUXD4_RX_CDR_KVCC_MEAS_MAXCNT_MUXD4_BF_WID ( 3)
#define PMA_RX_MGS_CDR_KVCC0_MUXD4_RX_CDR_KVCC_MEAS_MAXCNT_MUXD4_BF_MSK (0x00000700)
#define PMA_RX_MGS_CDR_KVCC0_MUXD4_RX_CDR_KVCC_MEAS_MAXCNT_MUXD4_BF_DEF (0x00000300)

#define PMA_RX_MGS_CDR_KVCC0_MUXD4_RX_CDR_KVCCCALIB_LDO_OFFSET_MUXD4_BF_OFF (11)
#define PMA_RX_MGS_CDR_KVCC0_MUXD4_RX_CDR_KVCCCALIB_LDO_OFFSET_MUXD4_BF_WID ( 3)
#define PMA_RX_MGS_CDR_KVCC0_MUXD4_RX_CDR_KVCCCALIB_LDO_OFFSET_MUXD4_BF_MSK (0x00003800)
#define PMA_RX_MGS_CDR_KVCC0_MUXD4_RX_CDR_KVCCCALIB_LDO_OFFSET_MUXD4_BF_DEF (0x00001000)

#define PMA_RX_MGS_CDR_KVCC0_MUXD4_RX_CDR_DFT_FREQ_MEAS_EN_MUXD4_BF_OFF (14)
#define PMA_RX_MGS_CDR_KVCC0_MUXD4_RX_CDR_DFT_FREQ_MEAS_EN_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC0_MUXD4_RX_CDR_DFT_FREQ_MEAS_EN_MUXD4_BF_MSK (0x00004000)
#define PMA_RX_MGS_CDR_KVCC0_MUXD4_RX_CDR_DFT_FREQ_MEAS_EN_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC0_MUXD4_RX_CDR_NOTCH_OFFSET_MUXD4_BF_OFF (15)
#define PMA_RX_MGS_CDR_KVCC0_MUXD4_RX_CDR_NOTCH_OFFSET_MUXD4_BF_WID ( 3)
#define PMA_RX_MGS_CDR_KVCC0_MUXD4_RX_CDR_NOTCH_OFFSET_MUXD4_BF_MSK (0x00038000)
#define PMA_RX_MGS_CDR_KVCC0_MUXD4_RX_CDR_NOTCH_OFFSET_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC0_MUXD4_RX_CDR_FULL_RANGE_KVCC_SEL_MUXD4_BF_OFF (18)
#define PMA_RX_MGS_CDR_KVCC0_MUXD4_RX_CDR_FULL_RANGE_KVCC_SEL_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC0_MUXD4_RX_CDR_FULL_RANGE_KVCC_SEL_MUXD4_BF_MSK (0x00040000)
#define PMA_RX_MGS_CDR_KVCC0_MUXD4_RX_CDR_FULL_RANGE_KVCC_SEL_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC0_MUXD4_RX_CDR_KVCC_INV_POLARITY_MUXD4_BF_OFF (19)
#define PMA_RX_MGS_CDR_KVCC0_MUXD4_RX_CDR_KVCC_INV_POLARITY_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC0_MUXD4_RX_CDR_KVCC_INV_POLARITY_MUXD4_BF_MSK (0x00080000)
#define PMA_RX_MGS_CDR_KVCC0_MUXD4_RX_CDR_KVCC_INV_POLARITY_MUXD4_BF_DEF (0x00080000)

#define PMA_RX_MGS_CDR_KVCC0_MUXD4_RX_CDR_2F0_FINE_RATIO_MUXD4_BF_OFF (20)
#define PMA_RX_MGS_CDR_KVCC0_MUXD4_RX_CDR_2F0_FINE_RATIO_MUXD4_BF_WID ( 7)
#define PMA_RX_MGS_CDR_KVCC0_MUXD4_RX_CDR_2F0_FINE_RATIO_MUXD4_BF_MSK (0x07F00000)
#define PMA_RX_MGS_CDR_KVCC0_MUXD4_RX_CDR_2F0_FINE_RATIO_MUXD4_BF_DEF (0x02000000)

#define PMA_RX_MGS_CDR_KVCC0_MUXD4_RX_CDR_START_2F0_STEP_MUXD4_BF_OFF (27)
#define PMA_RX_MGS_CDR_KVCC0_MUXD4_RX_CDR_START_2F0_STEP_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC0_MUXD4_RX_CDR_START_2F0_STEP_MUXD4_BF_MSK (0x08000000)
#define PMA_RX_MGS_CDR_KVCC0_MUXD4_RX_CDR_START_2F0_STEP_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC0_MUXD4_RX_CDR_COMP_CMSEL_MUXD4_BF_OFF (28)
#define PMA_RX_MGS_CDR_KVCC0_MUXD4_RX_CDR_COMP_CMSEL_MUXD4_BF_WID ( 2)
#define PMA_RX_MGS_CDR_KVCC0_MUXD4_RX_CDR_COMP_CMSEL_MUXD4_BF_MSK (0x30000000)
#define PMA_RX_MGS_CDR_KVCC0_MUXD4_RX_CDR_COMP_CMSEL_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC0_MUXD4_RX_CDR_COMP_ENB_MUXD4_BF_OFF (30)
#define PMA_RX_MGS_CDR_KVCC0_MUXD4_RX_CDR_COMP_ENB_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC0_MUXD4_RX_CDR_COMP_ENB_MUXD4_BF_MSK (0x40000000)
#define PMA_RX_MGS_CDR_KVCC0_MUXD4_RX_CDR_COMP_ENB_MUXD4_BF_DEF (0x40000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_KVCC1_MUXD0 register description at address offset 0x5b4
  *
  * Register default value:        0x000EF200
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_kvcc1_muxd0
  * rx_cdr_kvcc1
  */

typedef union {
  struct {
    uint32_t RX_CDR_KVCC_CODE_OVRD_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_KVCC_CODE_VAL_MUXD0 : 9;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x100"
    uint32_t RX_CDR_KVCC_LDO_OFFSET_EN_OVRD_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RX_CDR_KVCC_LDO_OFFSET_EN_VAL_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t RX_CDR_KVCC_MAX_CODE_LIMIT_MUXD0 : 9;
    ///< ---
    ///< AccessType="RW" BitOffset="12" ResetValue="0xEF"
    uint32_t RX_CDR_KVCC_ADAPT_BY_FW_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_kvcc1_muxd0_reg_t;

#define PMA_RX_MGS_CDR_KVCC1_MUXD0_DEFAULT (0x000ef200U)
#define PMA_RX_MGS_CDR_KVCC1_MUXD0_RD_MASK (0x003fffffU)
#define PMA_RX_MGS_CDR_KVCC1_MUXD0_WR_MASK (0x003fffffU)


#define PMA_RX_MGS_CDR_KVCC1_MUXD0_RX_CDR_KVCC_CODE_OVRD_MUXD0_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_KVCC1_MUXD0_RX_CDR_KVCC_CODE_OVRD_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC1_MUXD0_RX_CDR_KVCC_CODE_OVRD_MUXD0_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_KVCC1_MUXD0_RX_CDR_KVCC_CODE_OVRD_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC1_MUXD0_RX_CDR_KVCC_CODE_VAL_MUXD0_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_KVCC1_MUXD0_RX_CDR_KVCC_CODE_VAL_MUXD0_BF_WID ( 9)
#define PMA_RX_MGS_CDR_KVCC1_MUXD0_RX_CDR_KVCC_CODE_VAL_MUXD0_BF_MSK (0x000003FE)
#define PMA_RX_MGS_CDR_KVCC1_MUXD0_RX_CDR_KVCC_CODE_VAL_MUXD0_BF_DEF (0x00000200)

#define PMA_RX_MGS_CDR_KVCC1_MUXD0_RX_CDR_KVCC_LDO_OFFSET_EN_OVRD_MUXD0_BF_OFF (10)
#define PMA_RX_MGS_CDR_KVCC1_MUXD0_RX_CDR_KVCC_LDO_OFFSET_EN_OVRD_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC1_MUXD0_RX_CDR_KVCC_LDO_OFFSET_EN_OVRD_MUXD0_BF_MSK (0x00000400)
#define PMA_RX_MGS_CDR_KVCC1_MUXD0_RX_CDR_KVCC_LDO_OFFSET_EN_OVRD_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC1_MUXD0_RX_CDR_KVCC_LDO_OFFSET_EN_VAL_MUXD0_BF_OFF (11)
#define PMA_RX_MGS_CDR_KVCC1_MUXD0_RX_CDR_KVCC_LDO_OFFSET_EN_VAL_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC1_MUXD0_RX_CDR_KVCC_LDO_OFFSET_EN_VAL_MUXD0_BF_MSK (0x00000800)
#define PMA_RX_MGS_CDR_KVCC1_MUXD0_RX_CDR_KVCC_LDO_OFFSET_EN_VAL_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC1_MUXD0_RX_CDR_KVCC_MAX_CODE_LIMIT_MUXD0_BF_OFF (12)
#define PMA_RX_MGS_CDR_KVCC1_MUXD0_RX_CDR_KVCC_MAX_CODE_LIMIT_MUXD0_BF_WID ( 9)
#define PMA_RX_MGS_CDR_KVCC1_MUXD0_RX_CDR_KVCC_MAX_CODE_LIMIT_MUXD0_BF_MSK (0x001FF000)
#define PMA_RX_MGS_CDR_KVCC1_MUXD0_RX_CDR_KVCC_MAX_CODE_LIMIT_MUXD0_BF_DEF (0x000EF000)

#define PMA_RX_MGS_CDR_KVCC1_MUXD0_RX_CDR_KVCC_ADAPT_BY_FW_MUXD0_BF_OFF (21)
#define PMA_RX_MGS_CDR_KVCC1_MUXD0_RX_CDR_KVCC_ADAPT_BY_FW_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC1_MUXD0_RX_CDR_KVCC_ADAPT_BY_FW_MUXD0_BF_MSK (0x00200000)
#define PMA_RX_MGS_CDR_KVCC1_MUXD0_RX_CDR_KVCC_ADAPT_BY_FW_MUXD0_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_KVCC1_MUXD1 register description at address offset 0x5b8
  *
  * Register default value:        0x000EF200
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_kvcc1_muxd1
  * rx_cdr_kvcc1
  */

typedef union {
  struct {
    uint32_t RX_CDR_KVCC_CODE_OVRD_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_KVCC_CODE_VAL_MUXD1 : 9;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x100"
    uint32_t RX_CDR_KVCC_LDO_OFFSET_EN_OVRD_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RX_CDR_KVCC_LDO_OFFSET_EN_VAL_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t RX_CDR_KVCC_MAX_CODE_LIMIT_MUXD1 : 9;
    ///< ---
    ///< AccessType="RW" BitOffset="12" ResetValue="0xEF"
    uint32_t RX_CDR_KVCC_ADAPT_BY_FW_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_kvcc1_muxd1_reg_t;

#define PMA_RX_MGS_CDR_KVCC1_MUXD1_DEFAULT (0x000ef200U)
#define PMA_RX_MGS_CDR_KVCC1_MUXD1_RD_MASK (0x003fffffU)
#define PMA_RX_MGS_CDR_KVCC1_MUXD1_WR_MASK (0x003fffffU)


#define PMA_RX_MGS_CDR_KVCC1_MUXD1_RX_CDR_KVCC_CODE_OVRD_MUXD1_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_KVCC1_MUXD1_RX_CDR_KVCC_CODE_OVRD_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC1_MUXD1_RX_CDR_KVCC_CODE_OVRD_MUXD1_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_KVCC1_MUXD1_RX_CDR_KVCC_CODE_OVRD_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC1_MUXD1_RX_CDR_KVCC_CODE_VAL_MUXD1_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_KVCC1_MUXD1_RX_CDR_KVCC_CODE_VAL_MUXD1_BF_WID ( 9)
#define PMA_RX_MGS_CDR_KVCC1_MUXD1_RX_CDR_KVCC_CODE_VAL_MUXD1_BF_MSK (0x000003FE)
#define PMA_RX_MGS_CDR_KVCC1_MUXD1_RX_CDR_KVCC_CODE_VAL_MUXD1_BF_DEF (0x00000200)

#define PMA_RX_MGS_CDR_KVCC1_MUXD1_RX_CDR_KVCC_LDO_OFFSET_EN_OVRD_MUXD1_BF_OFF (10)
#define PMA_RX_MGS_CDR_KVCC1_MUXD1_RX_CDR_KVCC_LDO_OFFSET_EN_OVRD_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC1_MUXD1_RX_CDR_KVCC_LDO_OFFSET_EN_OVRD_MUXD1_BF_MSK (0x00000400)
#define PMA_RX_MGS_CDR_KVCC1_MUXD1_RX_CDR_KVCC_LDO_OFFSET_EN_OVRD_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC1_MUXD1_RX_CDR_KVCC_LDO_OFFSET_EN_VAL_MUXD1_BF_OFF (11)
#define PMA_RX_MGS_CDR_KVCC1_MUXD1_RX_CDR_KVCC_LDO_OFFSET_EN_VAL_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC1_MUXD1_RX_CDR_KVCC_LDO_OFFSET_EN_VAL_MUXD1_BF_MSK (0x00000800)
#define PMA_RX_MGS_CDR_KVCC1_MUXD1_RX_CDR_KVCC_LDO_OFFSET_EN_VAL_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC1_MUXD1_RX_CDR_KVCC_MAX_CODE_LIMIT_MUXD1_BF_OFF (12)
#define PMA_RX_MGS_CDR_KVCC1_MUXD1_RX_CDR_KVCC_MAX_CODE_LIMIT_MUXD1_BF_WID ( 9)
#define PMA_RX_MGS_CDR_KVCC1_MUXD1_RX_CDR_KVCC_MAX_CODE_LIMIT_MUXD1_BF_MSK (0x001FF000)
#define PMA_RX_MGS_CDR_KVCC1_MUXD1_RX_CDR_KVCC_MAX_CODE_LIMIT_MUXD1_BF_DEF (0x000EF000)

#define PMA_RX_MGS_CDR_KVCC1_MUXD1_RX_CDR_KVCC_ADAPT_BY_FW_MUXD1_BF_OFF (21)
#define PMA_RX_MGS_CDR_KVCC1_MUXD1_RX_CDR_KVCC_ADAPT_BY_FW_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC1_MUXD1_RX_CDR_KVCC_ADAPT_BY_FW_MUXD1_BF_MSK (0x00200000)
#define PMA_RX_MGS_CDR_KVCC1_MUXD1_RX_CDR_KVCC_ADAPT_BY_FW_MUXD1_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_KVCC1_MUXD2 register description at address offset 0x5bc
  *
  * Register default value:        0x000EF200
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_kvcc1_muxd2
  * rx_cdr_kvcc1
  */

typedef union {
  struct {
    uint32_t RX_CDR_KVCC_CODE_OVRD_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_KVCC_CODE_VAL_MUXD2 : 9;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x100"
    uint32_t RX_CDR_KVCC_LDO_OFFSET_EN_OVRD_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RX_CDR_KVCC_LDO_OFFSET_EN_VAL_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t RX_CDR_KVCC_MAX_CODE_LIMIT_MUXD2 : 9;
    ///< ---
    ///< AccessType="RW" BitOffset="12" ResetValue="0xEF"
    uint32_t RX_CDR_KVCC_ADAPT_BY_FW_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_kvcc1_muxd2_reg_t;

#define PMA_RX_MGS_CDR_KVCC1_MUXD2_DEFAULT (0x000ef200U)
#define PMA_RX_MGS_CDR_KVCC1_MUXD2_RD_MASK (0x003fffffU)
#define PMA_RX_MGS_CDR_KVCC1_MUXD2_WR_MASK (0x003fffffU)


#define PMA_RX_MGS_CDR_KVCC1_MUXD2_RX_CDR_KVCC_CODE_OVRD_MUXD2_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_KVCC1_MUXD2_RX_CDR_KVCC_CODE_OVRD_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC1_MUXD2_RX_CDR_KVCC_CODE_OVRD_MUXD2_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_KVCC1_MUXD2_RX_CDR_KVCC_CODE_OVRD_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC1_MUXD2_RX_CDR_KVCC_CODE_VAL_MUXD2_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_KVCC1_MUXD2_RX_CDR_KVCC_CODE_VAL_MUXD2_BF_WID ( 9)
#define PMA_RX_MGS_CDR_KVCC1_MUXD2_RX_CDR_KVCC_CODE_VAL_MUXD2_BF_MSK (0x000003FE)
#define PMA_RX_MGS_CDR_KVCC1_MUXD2_RX_CDR_KVCC_CODE_VAL_MUXD2_BF_DEF (0x00000200)

#define PMA_RX_MGS_CDR_KVCC1_MUXD2_RX_CDR_KVCC_LDO_OFFSET_EN_OVRD_MUXD2_BF_OFF (10)
#define PMA_RX_MGS_CDR_KVCC1_MUXD2_RX_CDR_KVCC_LDO_OFFSET_EN_OVRD_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC1_MUXD2_RX_CDR_KVCC_LDO_OFFSET_EN_OVRD_MUXD2_BF_MSK (0x00000400)
#define PMA_RX_MGS_CDR_KVCC1_MUXD2_RX_CDR_KVCC_LDO_OFFSET_EN_OVRD_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC1_MUXD2_RX_CDR_KVCC_LDO_OFFSET_EN_VAL_MUXD2_BF_OFF (11)
#define PMA_RX_MGS_CDR_KVCC1_MUXD2_RX_CDR_KVCC_LDO_OFFSET_EN_VAL_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC1_MUXD2_RX_CDR_KVCC_LDO_OFFSET_EN_VAL_MUXD2_BF_MSK (0x00000800)
#define PMA_RX_MGS_CDR_KVCC1_MUXD2_RX_CDR_KVCC_LDO_OFFSET_EN_VAL_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC1_MUXD2_RX_CDR_KVCC_MAX_CODE_LIMIT_MUXD2_BF_OFF (12)
#define PMA_RX_MGS_CDR_KVCC1_MUXD2_RX_CDR_KVCC_MAX_CODE_LIMIT_MUXD2_BF_WID ( 9)
#define PMA_RX_MGS_CDR_KVCC1_MUXD2_RX_CDR_KVCC_MAX_CODE_LIMIT_MUXD2_BF_MSK (0x001FF000)
#define PMA_RX_MGS_CDR_KVCC1_MUXD2_RX_CDR_KVCC_MAX_CODE_LIMIT_MUXD2_BF_DEF (0x000EF000)

#define PMA_RX_MGS_CDR_KVCC1_MUXD2_RX_CDR_KVCC_ADAPT_BY_FW_MUXD2_BF_OFF (21)
#define PMA_RX_MGS_CDR_KVCC1_MUXD2_RX_CDR_KVCC_ADAPT_BY_FW_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC1_MUXD2_RX_CDR_KVCC_ADAPT_BY_FW_MUXD2_BF_MSK (0x00200000)
#define PMA_RX_MGS_CDR_KVCC1_MUXD2_RX_CDR_KVCC_ADAPT_BY_FW_MUXD2_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_KVCC1_MUXD3 register description at address offset 0x5c0
  *
  * Register default value:        0x000EF200
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_kvcc1_muxd3
  * rx_cdr_kvcc1
  */

typedef union {
  struct {
    uint32_t RX_CDR_KVCC_CODE_OVRD_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_KVCC_CODE_VAL_MUXD3 : 9;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x100"
    uint32_t RX_CDR_KVCC_LDO_OFFSET_EN_OVRD_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RX_CDR_KVCC_LDO_OFFSET_EN_VAL_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t RX_CDR_KVCC_MAX_CODE_LIMIT_MUXD3 : 9;
    ///< ---
    ///< AccessType="RW" BitOffset="12" ResetValue="0xEF"
    uint32_t RX_CDR_KVCC_ADAPT_BY_FW_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_kvcc1_muxd3_reg_t;

#define PMA_RX_MGS_CDR_KVCC1_MUXD3_DEFAULT (0x000ef200U)
#define PMA_RX_MGS_CDR_KVCC1_MUXD3_RD_MASK (0x003fffffU)
#define PMA_RX_MGS_CDR_KVCC1_MUXD3_WR_MASK (0x003fffffU)


#define PMA_RX_MGS_CDR_KVCC1_MUXD3_RX_CDR_KVCC_CODE_OVRD_MUXD3_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_KVCC1_MUXD3_RX_CDR_KVCC_CODE_OVRD_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC1_MUXD3_RX_CDR_KVCC_CODE_OVRD_MUXD3_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_KVCC1_MUXD3_RX_CDR_KVCC_CODE_OVRD_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC1_MUXD3_RX_CDR_KVCC_CODE_VAL_MUXD3_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_KVCC1_MUXD3_RX_CDR_KVCC_CODE_VAL_MUXD3_BF_WID ( 9)
#define PMA_RX_MGS_CDR_KVCC1_MUXD3_RX_CDR_KVCC_CODE_VAL_MUXD3_BF_MSK (0x000003FE)
#define PMA_RX_MGS_CDR_KVCC1_MUXD3_RX_CDR_KVCC_CODE_VAL_MUXD3_BF_DEF (0x00000200)

#define PMA_RX_MGS_CDR_KVCC1_MUXD3_RX_CDR_KVCC_LDO_OFFSET_EN_OVRD_MUXD3_BF_OFF (10)
#define PMA_RX_MGS_CDR_KVCC1_MUXD3_RX_CDR_KVCC_LDO_OFFSET_EN_OVRD_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC1_MUXD3_RX_CDR_KVCC_LDO_OFFSET_EN_OVRD_MUXD3_BF_MSK (0x00000400)
#define PMA_RX_MGS_CDR_KVCC1_MUXD3_RX_CDR_KVCC_LDO_OFFSET_EN_OVRD_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC1_MUXD3_RX_CDR_KVCC_LDO_OFFSET_EN_VAL_MUXD3_BF_OFF (11)
#define PMA_RX_MGS_CDR_KVCC1_MUXD3_RX_CDR_KVCC_LDO_OFFSET_EN_VAL_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC1_MUXD3_RX_CDR_KVCC_LDO_OFFSET_EN_VAL_MUXD3_BF_MSK (0x00000800)
#define PMA_RX_MGS_CDR_KVCC1_MUXD3_RX_CDR_KVCC_LDO_OFFSET_EN_VAL_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC1_MUXD3_RX_CDR_KVCC_MAX_CODE_LIMIT_MUXD3_BF_OFF (12)
#define PMA_RX_MGS_CDR_KVCC1_MUXD3_RX_CDR_KVCC_MAX_CODE_LIMIT_MUXD3_BF_WID ( 9)
#define PMA_RX_MGS_CDR_KVCC1_MUXD3_RX_CDR_KVCC_MAX_CODE_LIMIT_MUXD3_BF_MSK (0x001FF000)
#define PMA_RX_MGS_CDR_KVCC1_MUXD3_RX_CDR_KVCC_MAX_CODE_LIMIT_MUXD3_BF_DEF (0x000EF000)

#define PMA_RX_MGS_CDR_KVCC1_MUXD3_RX_CDR_KVCC_ADAPT_BY_FW_MUXD3_BF_OFF (21)
#define PMA_RX_MGS_CDR_KVCC1_MUXD3_RX_CDR_KVCC_ADAPT_BY_FW_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC1_MUXD3_RX_CDR_KVCC_ADAPT_BY_FW_MUXD3_BF_MSK (0x00200000)
#define PMA_RX_MGS_CDR_KVCC1_MUXD3_RX_CDR_KVCC_ADAPT_BY_FW_MUXD3_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_KVCC1_MUXD4 register description at address offset 0x5c4
  *
  * Register default value:        0x000EF200
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_kvcc1_muxd4
  * rx_cdr_kvcc1
  */

typedef union {
  struct {
    uint32_t RX_CDR_KVCC_CODE_OVRD_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_KVCC_CODE_VAL_MUXD4 : 9;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x100"
    uint32_t RX_CDR_KVCC_LDO_OFFSET_EN_OVRD_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RX_CDR_KVCC_LDO_OFFSET_EN_VAL_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t RX_CDR_KVCC_MAX_CODE_LIMIT_MUXD4 : 9;
    ///< ---
    ///< AccessType="RW" BitOffset="12" ResetValue="0xEF"
    uint32_t RX_CDR_KVCC_ADAPT_BY_FW_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_kvcc1_muxd4_reg_t;

#define PMA_RX_MGS_CDR_KVCC1_MUXD4_DEFAULT (0x000ef200U)
#define PMA_RX_MGS_CDR_KVCC1_MUXD4_RD_MASK (0x003fffffU)
#define PMA_RX_MGS_CDR_KVCC1_MUXD4_WR_MASK (0x003fffffU)


#define PMA_RX_MGS_CDR_KVCC1_MUXD4_RX_CDR_KVCC_CODE_OVRD_MUXD4_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_KVCC1_MUXD4_RX_CDR_KVCC_CODE_OVRD_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC1_MUXD4_RX_CDR_KVCC_CODE_OVRD_MUXD4_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_KVCC1_MUXD4_RX_CDR_KVCC_CODE_OVRD_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC1_MUXD4_RX_CDR_KVCC_CODE_VAL_MUXD4_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_KVCC1_MUXD4_RX_CDR_KVCC_CODE_VAL_MUXD4_BF_WID ( 9)
#define PMA_RX_MGS_CDR_KVCC1_MUXD4_RX_CDR_KVCC_CODE_VAL_MUXD4_BF_MSK (0x000003FE)
#define PMA_RX_MGS_CDR_KVCC1_MUXD4_RX_CDR_KVCC_CODE_VAL_MUXD4_BF_DEF (0x00000200)

#define PMA_RX_MGS_CDR_KVCC1_MUXD4_RX_CDR_KVCC_LDO_OFFSET_EN_OVRD_MUXD4_BF_OFF (10)
#define PMA_RX_MGS_CDR_KVCC1_MUXD4_RX_CDR_KVCC_LDO_OFFSET_EN_OVRD_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC1_MUXD4_RX_CDR_KVCC_LDO_OFFSET_EN_OVRD_MUXD4_BF_MSK (0x00000400)
#define PMA_RX_MGS_CDR_KVCC1_MUXD4_RX_CDR_KVCC_LDO_OFFSET_EN_OVRD_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC1_MUXD4_RX_CDR_KVCC_LDO_OFFSET_EN_VAL_MUXD4_BF_OFF (11)
#define PMA_RX_MGS_CDR_KVCC1_MUXD4_RX_CDR_KVCC_LDO_OFFSET_EN_VAL_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC1_MUXD4_RX_CDR_KVCC_LDO_OFFSET_EN_VAL_MUXD4_BF_MSK (0x00000800)
#define PMA_RX_MGS_CDR_KVCC1_MUXD4_RX_CDR_KVCC_LDO_OFFSET_EN_VAL_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC1_MUXD4_RX_CDR_KVCC_MAX_CODE_LIMIT_MUXD4_BF_OFF (12)
#define PMA_RX_MGS_CDR_KVCC1_MUXD4_RX_CDR_KVCC_MAX_CODE_LIMIT_MUXD4_BF_WID ( 9)
#define PMA_RX_MGS_CDR_KVCC1_MUXD4_RX_CDR_KVCC_MAX_CODE_LIMIT_MUXD4_BF_MSK (0x001FF000)
#define PMA_RX_MGS_CDR_KVCC1_MUXD4_RX_CDR_KVCC_MAX_CODE_LIMIT_MUXD4_BF_DEF (0x000EF000)

#define PMA_RX_MGS_CDR_KVCC1_MUXD4_RX_CDR_KVCC_ADAPT_BY_FW_MUXD4_BF_OFF (21)
#define PMA_RX_MGS_CDR_KVCC1_MUXD4_RX_CDR_KVCC_ADAPT_BY_FW_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC1_MUXD4_RX_CDR_KVCC_ADAPT_BY_FW_MUXD4_BF_MSK (0x00200000)
#define PMA_RX_MGS_CDR_KVCC1_MUXD4_RX_CDR_KVCC_ADAPT_BY_FW_MUXD4_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_KVCC2_MUXD0 register description at address offset 0x5c8
  *
  * Register default value:        0x000000A9
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_kvcc2_muxd0
  * rx_cdr_kvcc2
  */

typedef union {
  struct {
    uint32_t RX_CDR_KVCC_ADAPT_EN_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t RX_CDR_KVCC_ADAPT_MODE_MUXD0 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RX_CDR_KVCC_ADAPT_THR_MUXD0 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="3" ResetValue="0x1"
    uint32_t RX_CDR_KVCC_ADAPT_CTR_DELAY_MUXD0 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="5" ResetValue="0x5"
    uint32_t RX_CDR_KVCC_ADAPT_STEP_MUXD0 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RX_CDR_DFX_KVCC_ADAPT_TOGGLE_EN_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t RX_CDR_DFX_KVCC_ADAPT_ENABLE_OVR_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t RX_CDR_DFX_KVCC_ADAPT_VAL_OVR_MUXD0 : 9;
    ///< ---
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t RX_CDR_DFX_KVCC_ADAPT_DIR_OVR_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t RX_CDR_KVCC_ADAPT_CHICKEN_BIT_MUXD0 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_kvcc2_muxd0_reg_t;

#define PMA_RX_MGS_CDR_KVCC2_MUXD0_DEFAULT (0x000000a9U)
#define PMA_RX_MGS_CDR_KVCC2_MUXD0_RD_MASK (0x00ffffffU)
#define PMA_RX_MGS_CDR_KVCC2_MUXD0_WR_MASK (0x00ffffffU)


#define PMA_RX_MGS_CDR_KVCC2_MUXD0_RX_CDR_KVCC_ADAPT_EN_MUXD0_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_KVCC2_MUXD0_RX_CDR_KVCC_ADAPT_EN_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC2_MUXD0_RX_CDR_KVCC_ADAPT_EN_MUXD0_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_KVCC2_MUXD0_RX_CDR_KVCC_ADAPT_EN_MUXD0_BF_DEF (0x00000001)

#define PMA_RX_MGS_CDR_KVCC2_MUXD0_RX_CDR_KVCC_ADAPT_MODE_MUXD0_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_KVCC2_MUXD0_RX_CDR_KVCC_ADAPT_MODE_MUXD0_BF_WID ( 2)
#define PMA_RX_MGS_CDR_KVCC2_MUXD0_RX_CDR_KVCC_ADAPT_MODE_MUXD0_BF_MSK (0x00000006)
#define PMA_RX_MGS_CDR_KVCC2_MUXD0_RX_CDR_KVCC_ADAPT_MODE_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC2_MUXD0_RX_CDR_KVCC_ADAPT_THR_MUXD0_BF_OFF ( 3)
#define PMA_RX_MGS_CDR_KVCC2_MUXD0_RX_CDR_KVCC_ADAPT_THR_MUXD0_BF_WID ( 2)
#define PMA_RX_MGS_CDR_KVCC2_MUXD0_RX_CDR_KVCC_ADAPT_THR_MUXD0_BF_MSK (0x00000018)
#define PMA_RX_MGS_CDR_KVCC2_MUXD0_RX_CDR_KVCC_ADAPT_THR_MUXD0_BF_DEF (0x00000008)

#define PMA_RX_MGS_CDR_KVCC2_MUXD0_RX_CDR_KVCC_ADAPT_CTR_DELAY_MUXD0_BF_OFF ( 5)
#define PMA_RX_MGS_CDR_KVCC2_MUXD0_RX_CDR_KVCC_ADAPT_CTR_DELAY_MUXD0_BF_WID ( 3)
#define PMA_RX_MGS_CDR_KVCC2_MUXD0_RX_CDR_KVCC_ADAPT_CTR_DELAY_MUXD0_BF_MSK (0x000000E0)
#define PMA_RX_MGS_CDR_KVCC2_MUXD0_RX_CDR_KVCC_ADAPT_CTR_DELAY_MUXD0_BF_DEF (0x000000A0)

#define PMA_RX_MGS_CDR_KVCC2_MUXD0_RX_CDR_KVCC_ADAPT_STEP_MUXD0_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_KVCC2_MUXD0_RX_CDR_KVCC_ADAPT_STEP_MUXD0_BF_WID ( 3)
#define PMA_RX_MGS_CDR_KVCC2_MUXD0_RX_CDR_KVCC_ADAPT_STEP_MUXD0_BF_MSK (0x00000700)
#define PMA_RX_MGS_CDR_KVCC2_MUXD0_RX_CDR_KVCC_ADAPT_STEP_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC2_MUXD0_RX_CDR_DFX_KVCC_ADAPT_TOGGLE_EN_MUXD0_BF_OFF (11)
#define PMA_RX_MGS_CDR_KVCC2_MUXD0_RX_CDR_DFX_KVCC_ADAPT_TOGGLE_EN_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC2_MUXD0_RX_CDR_DFX_KVCC_ADAPT_TOGGLE_EN_MUXD0_BF_MSK (0x00000800)
#define PMA_RX_MGS_CDR_KVCC2_MUXD0_RX_CDR_DFX_KVCC_ADAPT_TOGGLE_EN_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC2_MUXD0_RX_CDR_DFX_KVCC_ADAPT_EN_OVR_MUXD0_BF_OFF (12)
#define PMA_RX_MGS_CDR_KVCC2_MUXD0_RX_CDR_DFX_KVCC_ADAPT_EN_OVR_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC2_MUXD0_RX_CDR_DFX_KVCC_ADAPT_EN_OVR_MUXD0_BF_MSK (0x00001000)
#define PMA_RX_MGS_CDR_KVCC2_MUXD0_RX_CDR_DFX_KVCC_ADAPT_EN_OVR_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC2_MUXD0_RX_CDR_DFX_KVCC_ADAPT_VAL_OVR_MUXD0_BF_OFF (13)
#define PMA_RX_MGS_CDR_KVCC2_MUXD0_RX_CDR_DFX_KVCC_ADAPT_VAL_OVR_MUXD0_BF_WID ( 9)
#define PMA_RX_MGS_CDR_KVCC2_MUXD0_RX_CDR_DFX_KVCC_ADAPT_VAL_OVR_MUXD0_BF_MSK (0x003FE000)
#define PMA_RX_MGS_CDR_KVCC2_MUXD0_RX_CDR_DFX_KVCC_ADAPT_VAL_OVR_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC2_MUXD0_RX_CDR_DFX_KVCC_ADAPT_DIR_OVR_MUXD0_BF_OFF (22)
#define PMA_RX_MGS_CDR_KVCC2_MUXD0_RX_CDR_DFX_KVCC_ADAPT_DIR_OVR_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC2_MUXD0_RX_CDR_DFX_KVCC_ADAPT_DIR_OVR_MUXD0_BF_MSK (0x00400000)
#define PMA_RX_MGS_CDR_KVCC2_MUXD0_RX_CDR_DFX_KVCC_ADAPT_DIR_OVR_MUXD0_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC2_MUXD0_RX_CDR_KVCC_ADAPT_CHICKEN_BIT_MUXD0_BF_OFF (23)
#define PMA_RX_MGS_CDR_KVCC2_MUXD0_RX_CDR_KVCC_ADAPT_CHICKEN_BIT_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC2_MUXD0_RX_CDR_KVCC_ADAPT_CHICKEN_BIT_MUXD0_BF_MSK (0x00800000)
#define PMA_RX_MGS_CDR_KVCC2_MUXD0_RX_CDR_KVCC_ADAPT_CHICKEN_BIT_MUXD0_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_KVCC2_MUXD1 register description at address offset 0x5cc
  *
  * Register default value:        0x000000A9
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_kvcc2_muxd1
  * rx_cdr_kvcc2
  */

typedef union {
  struct {
    uint32_t RX_CDR_KVCC_ADAPT_EN_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t RX_CDR_KVCC_ADAPT_MODE_MUXD1 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RX_CDR_KVCC_ADAPT_THR_MUXD1 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="3" ResetValue="0x1"
    uint32_t RX_CDR_KVCC_ADAPT_CTR_DELAY_MUXD1 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="5" ResetValue="0x5"
    uint32_t RX_CDR_KVCC_ADAPT_STEP_MUXD1 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RX_CDR_DFX_KVCC_ADAPT_TOGGLE_EN_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t RX_CDR_DFX_KVCC_ADAPT_ENABLE_OVR_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t RX_CDR_DFX_KVCC_ADAPT_VAL_OVR_MUXD1 : 9;
    ///< ---
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t RX_CDR_DFX_KVCC_ADAPT_DIR_OVR_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t RX_CDR_KVCC_ADAPT_CHICKEN_BIT_MUXD1 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_kvcc2_muxd1_reg_t;

#define PMA_RX_MGS_CDR_KVCC2_MUXD1_DEFAULT (0x000000a9U)
#define PMA_RX_MGS_CDR_KVCC2_MUXD1_RD_MASK (0x00ffffffU)
#define PMA_RX_MGS_CDR_KVCC2_MUXD1_WR_MASK (0x00ffffffU)


#define PMA_RX_MGS_CDR_KVCC2_MUXD1_RX_CDR_KVCC_ADAPT_EN_MUXD1_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_KVCC2_MUXD1_RX_CDR_KVCC_ADAPT_EN_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC2_MUXD1_RX_CDR_KVCC_ADAPT_EN_MUXD1_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_KVCC2_MUXD1_RX_CDR_KVCC_ADAPT_EN_MUXD1_BF_DEF (0x00000001)

#define PMA_RX_MGS_CDR_KVCC2_MUXD1_RX_CDR_KVCC_ADAPT_MODE_MUXD1_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_KVCC2_MUXD1_RX_CDR_KVCC_ADAPT_MODE_MUXD1_BF_WID ( 2)
#define PMA_RX_MGS_CDR_KVCC2_MUXD1_RX_CDR_KVCC_ADAPT_MODE_MUXD1_BF_MSK (0x00000006)
#define PMA_RX_MGS_CDR_KVCC2_MUXD1_RX_CDR_KVCC_ADAPT_MODE_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC2_MUXD1_RX_CDR_KVCC_ADAPT_THR_MUXD1_BF_OFF ( 3)
#define PMA_RX_MGS_CDR_KVCC2_MUXD1_RX_CDR_KVCC_ADAPT_THR_MUXD1_BF_WID ( 2)
#define PMA_RX_MGS_CDR_KVCC2_MUXD1_RX_CDR_KVCC_ADAPT_THR_MUXD1_BF_MSK (0x00000018)
#define PMA_RX_MGS_CDR_KVCC2_MUXD1_RX_CDR_KVCC_ADAPT_THR_MUXD1_BF_DEF (0x00000008)

#define PMA_RX_MGS_CDR_KVCC2_MUXD1_RX_CDR_KVCC_ADAPT_CTR_DELAY_MUXD1_BF_OFF ( 5)
#define PMA_RX_MGS_CDR_KVCC2_MUXD1_RX_CDR_KVCC_ADAPT_CTR_DELAY_MUXD1_BF_WID ( 3)
#define PMA_RX_MGS_CDR_KVCC2_MUXD1_RX_CDR_KVCC_ADAPT_CTR_DELAY_MUXD1_BF_MSK (0x000000E0)
#define PMA_RX_MGS_CDR_KVCC2_MUXD1_RX_CDR_KVCC_ADAPT_CTR_DELAY_MUXD1_BF_DEF (0x000000A0)

#define PMA_RX_MGS_CDR_KVCC2_MUXD1_RX_CDR_KVCC_ADAPT_STEP_MUXD1_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_KVCC2_MUXD1_RX_CDR_KVCC_ADAPT_STEP_MUXD1_BF_WID ( 3)
#define PMA_RX_MGS_CDR_KVCC2_MUXD1_RX_CDR_KVCC_ADAPT_STEP_MUXD1_BF_MSK (0x00000700)
#define PMA_RX_MGS_CDR_KVCC2_MUXD1_RX_CDR_KVCC_ADAPT_STEP_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC2_MUXD1_RX_CDR_DFX_KVCC_ADAPT_TOGGLE_EN_MUXD1_BF_OFF (11)
#define PMA_RX_MGS_CDR_KVCC2_MUXD1_RX_CDR_DFX_KVCC_ADAPT_TOGGLE_EN_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC2_MUXD1_RX_CDR_DFX_KVCC_ADAPT_TOGGLE_EN_MUXD1_BF_MSK (0x00000800)
#define PMA_RX_MGS_CDR_KVCC2_MUXD1_RX_CDR_DFX_KVCC_ADAPT_TOGGLE_EN_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC2_MUXD1_RX_CDR_DFX_KVCC_ADAPT_EN_OVR_MUXD1_BF_OFF (12)
#define PMA_RX_MGS_CDR_KVCC2_MUXD1_RX_CDR_DFX_KVCC_ADAPT_EN_OVR_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC2_MUXD1_RX_CDR_DFX_KVCC_ADAPT_EN_OVR_MUXD1_BF_MSK (0x00001000)
#define PMA_RX_MGS_CDR_KVCC2_MUXD1_RX_CDR_DFX_KVCC_ADAPT_EN_OVR_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC2_MUXD1_RX_CDR_DFX_KVCC_ADAPT_VAL_OVR_MUXD1_BF_OFF (13)
#define PMA_RX_MGS_CDR_KVCC2_MUXD1_RX_CDR_DFX_KVCC_ADAPT_VAL_OVR_MUXD1_BF_WID ( 9)
#define PMA_RX_MGS_CDR_KVCC2_MUXD1_RX_CDR_DFX_KVCC_ADAPT_VAL_OVR_MUXD1_BF_MSK (0x003FE000)
#define PMA_RX_MGS_CDR_KVCC2_MUXD1_RX_CDR_DFX_KVCC_ADAPT_VAL_OVR_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC2_MUXD1_RX_CDR_DFX_KVCC_ADAPT_DIR_OVR_MUXD1_BF_OFF (22)
#define PMA_RX_MGS_CDR_KVCC2_MUXD1_RX_CDR_DFX_KVCC_ADAPT_DIR_OVR_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC2_MUXD1_RX_CDR_DFX_KVCC_ADAPT_DIR_OVR_MUXD1_BF_MSK (0x00400000)
#define PMA_RX_MGS_CDR_KVCC2_MUXD1_RX_CDR_DFX_KVCC_ADAPT_DIR_OVR_MUXD1_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC2_MUXD1_RX_CDR_KVCC_ADAPT_CHICKEN_BIT_MUXD1_BF_OFF (23)
#define PMA_RX_MGS_CDR_KVCC2_MUXD1_RX_CDR_KVCC_ADAPT_CHICKEN_BIT_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC2_MUXD1_RX_CDR_KVCC_ADAPT_CHICKEN_BIT_MUXD1_BF_MSK (0x00800000)
#define PMA_RX_MGS_CDR_KVCC2_MUXD1_RX_CDR_KVCC_ADAPT_CHICKEN_BIT_MUXD1_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_KVCC2_MUXD2 register description at address offset 0x5d0
  *
  * Register default value:        0x000000A9
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_kvcc2_muxd2
  * rx_cdr_kvcc2
  */

typedef union {
  struct {
    uint32_t RX_CDR_KVCC_ADAPT_EN_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t RX_CDR_KVCC_ADAPT_MODE_MUXD2 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RX_CDR_KVCC_ADAPT_THR_MUXD2 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="3" ResetValue="0x1"
    uint32_t RX_CDR_KVCC_ADAPT_CTR_DELAY_MUXD2 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="5" ResetValue="0x5"
    uint32_t RX_CDR_KVCC_ADAPT_STEP_MUXD2 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RX_CDR_DFX_KVCC_ADAPT_TOGGLE_EN_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t RX_CDR_DFX_KVCC_ADAPT_ENABLE_OVR_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t RX_CDR_DFX_KVCC_ADAPT_VAL_OVR_MUXD2 : 9;
    ///< ---
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t RX_CDR_DFX_KVCC_ADAPT_DIR_OVR_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t RX_CDR_KVCC_ADAPT_CHICKEN_BIT_MUXD2 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_kvcc2_muxd2_reg_t;

#define PMA_RX_MGS_CDR_KVCC2_MUXD2_DEFAULT (0x000000a9U)
#define PMA_RX_MGS_CDR_KVCC2_MUXD2_RD_MASK (0x00ffffffU)
#define PMA_RX_MGS_CDR_KVCC2_MUXD2_WR_MASK (0x00ffffffU)


#define PMA_RX_MGS_CDR_KVCC2_MUXD2_RX_CDR_KVCC_ADAPT_EN_MUXD2_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_KVCC2_MUXD2_RX_CDR_KVCC_ADAPT_EN_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC2_MUXD2_RX_CDR_KVCC_ADAPT_EN_MUXD2_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_KVCC2_MUXD2_RX_CDR_KVCC_ADAPT_EN_MUXD2_BF_DEF (0x00000001)

#define PMA_RX_MGS_CDR_KVCC2_MUXD2_RX_CDR_KVCC_ADAPT_MODE_MUXD2_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_KVCC2_MUXD2_RX_CDR_KVCC_ADAPT_MODE_MUXD2_BF_WID ( 2)
#define PMA_RX_MGS_CDR_KVCC2_MUXD2_RX_CDR_KVCC_ADAPT_MODE_MUXD2_BF_MSK (0x00000006)
#define PMA_RX_MGS_CDR_KVCC2_MUXD2_RX_CDR_KVCC_ADAPT_MODE_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC2_MUXD2_RX_CDR_KVCC_ADAPT_THR_MUXD2_BF_OFF ( 3)
#define PMA_RX_MGS_CDR_KVCC2_MUXD2_RX_CDR_KVCC_ADAPT_THR_MUXD2_BF_WID ( 2)
#define PMA_RX_MGS_CDR_KVCC2_MUXD2_RX_CDR_KVCC_ADAPT_THR_MUXD2_BF_MSK (0x00000018)
#define PMA_RX_MGS_CDR_KVCC2_MUXD2_RX_CDR_KVCC_ADAPT_THR_MUXD2_BF_DEF (0x00000008)

#define PMA_RX_MGS_CDR_KVCC2_MUXD2_RX_CDR_KVCC_ADAPT_CTR_DELAY_MUXD2_BF_OFF ( 5)
#define PMA_RX_MGS_CDR_KVCC2_MUXD2_RX_CDR_KVCC_ADAPT_CTR_DELAY_MUXD2_BF_WID ( 3)
#define PMA_RX_MGS_CDR_KVCC2_MUXD2_RX_CDR_KVCC_ADAPT_CTR_DELAY_MUXD2_BF_MSK (0x000000E0)
#define PMA_RX_MGS_CDR_KVCC2_MUXD2_RX_CDR_KVCC_ADAPT_CTR_DELAY_MUXD2_BF_DEF (0x000000A0)

#define PMA_RX_MGS_CDR_KVCC2_MUXD2_RX_CDR_KVCC_ADAPT_STEP_MUXD2_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_KVCC2_MUXD2_RX_CDR_KVCC_ADAPT_STEP_MUXD2_BF_WID ( 3)
#define PMA_RX_MGS_CDR_KVCC2_MUXD2_RX_CDR_KVCC_ADAPT_STEP_MUXD2_BF_MSK (0x00000700)
#define PMA_RX_MGS_CDR_KVCC2_MUXD2_RX_CDR_KVCC_ADAPT_STEP_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC2_MUXD2_RX_CDR_DFX_KVCC_ADAPT_TOGGLE_EN_MUXD2_BF_OFF (11)
#define PMA_RX_MGS_CDR_KVCC2_MUXD2_RX_CDR_DFX_KVCC_ADAPT_TOGGLE_EN_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC2_MUXD2_RX_CDR_DFX_KVCC_ADAPT_TOGGLE_EN_MUXD2_BF_MSK (0x00000800)
#define PMA_RX_MGS_CDR_KVCC2_MUXD2_RX_CDR_DFX_KVCC_ADAPT_TOGGLE_EN_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC2_MUXD2_RX_CDR_DFX_KVCC_ADAPT_EN_OVR_MUXD2_BF_OFF (12)
#define PMA_RX_MGS_CDR_KVCC2_MUXD2_RX_CDR_DFX_KVCC_ADAPT_EN_OVR_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC2_MUXD2_RX_CDR_DFX_KVCC_ADAPT_EN_OVR_MUXD2_BF_MSK (0x00001000)
#define PMA_RX_MGS_CDR_KVCC2_MUXD2_RX_CDR_DFX_KVCC_ADAPT_EN_OVR_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC2_MUXD2_RX_CDR_DFX_KVCC_ADAPT_VAL_OVR_MUXD2_BF_OFF (13)
#define PMA_RX_MGS_CDR_KVCC2_MUXD2_RX_CDR_DFX_KVCC_ADAPT_VAL_OVR_MUXD2_BF_WID ( 9)
#define PMA_RX_MGS_CDR_KVCC2_MUXD2_RX_CDR_DFX_KVCC_ADAPT_VAL_OVR_MUXD2_BF_MSK (0x003FE000)
#define PMA_RX_MGS_CDR_KVCC2_MUXD2_RX_CDR_DFX_KVCC_ADAPT_VAL_OVR_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC2_MUXD2_RX_CDR_DFX_KVCC_ADAPT_DIR_OVR_MUXD2_BF_OFF (22)
#define PMA_RX_MGS_CDR_KVCC2_MUXD2_RX_CDR_DFX_KVCC_ADAPT_DIR_OVR_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC2_MUXD2_RX_CDR_DFX_KVCC_ADAPT_DIR_OVR_MUXD2_BF_MSK (0x00400000)
#define PMA_RX_MGS_CDR_KVCC2_MUXD2_RX_CDR_DFX_KVCC_ADAPT_DIR_OVR_MUXD2_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC2_MUXD2_RX_CDR_KVCC_ADAPT_CHICKEN_BIT_MUXD2_BF_OFF (23)
#define PMA_RX_MGS_CDR_KVCC2_MUXD2_RX_CDR_KVCC_ADAPT_CHICKEN_BIT_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC2_MUXD2_RX_CDR_KVCC_ADAPT_CHICKEN_BIT_MUXD2_BF_MSK (0x00800000)
#define PMA_RX_MGS_CDR_KVCC2_MUXD2_RX_CDR_KVCC_ADAPT_CHICKEN_BIT_MUXD2_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_KVCC2_MUXD3 register description at address offset 0x5d4
  *
  * Register default value:        0x000000A9
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_kvcc2_muxd3
  * rx_cdr_kvcc2
  */

typedef union {
  struct {
    uint32_t RX_CDR_KVCC_ADAPT_EN_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t RX_CDR_KVCC_ADAPT_MODE_MUXD3 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RX_CDR_KVCC_ADAPT_THR_MUXD3 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="3" ResetValue="0x1"
    uint32_t RX_CDR_KVCC_ADAPT_CTR_DELAY_MUXD3 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="5" ResetValue="0x5"
    uint32_t RX_CDR_KVCC_ADAPT_STEP_MUXD3 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RX_CDR_DFX_KVCC_ADAPT_TOGGLE_EN_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t RX_CDR_DFX_KVCC_ADAPT_ENABLE_OVR_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t RX_CDR_DFX_KVCC_ADAPT_VAL_OVR_MUXD3 : 9;
    ///< ---
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t RX_CDR_DFX_KVCC_ADAPT_DIR_OVR_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t RX_CDR_KVCC_ADAPT_CHICKEN_BIT_MUXD3 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_kvcc2_muxd3_reg_t;

#define PMA_RX_MGS_CDR_KVCC2_MUXD3_DEFAULT (0x000000a9U)
#define PMA_RX_MGS_CDR_KVCC2_MUXD3_RD_MASK (0x00ffffffU)
#define PMA_RX_MGS_CDR_KVCC2_MUXD3_WR_MASK (0x00ffffffU)


#define PMA_RX_MGS_CDR_KVCC2_MUXD3_RX_CDR_KVCC_ADAPT_EN_MUXD3_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_KVCC2_MUXD3_RX_CDR_KVCC_ADAPT_EN_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC2_MUXD3_RX_CDR_KVCC_ADAPT_EN_MUXD3_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_KVCC2_MUXD3_RX_CDR_KVCC_ADAPT_EN_MUXD3_BF_DEF (0x00000001)

#define PMA_RX_MGS_CDR_KVCC2_MUXD3_RX_CDR_KVCC_ADAPT_MODE_MUXD3_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_KVCC2_MUXD3_RX_CDR_KVCC_ADAPT_MODE_MUXD3_BF_WID ( 2)
#define PMA_RX_MGS_CDR_KVCC2_MUXD3_RX_CDR_KVCC_ADAPT_MODE_MUXD3_BF_MSK (0x00000006)
#define PMA_RX_MGS_CDR_KVCC2_MUXD3_RX_CDR_KVCC_ADAPT_MODE_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC2_MUXD3_RX_CDR_KVCC_ADAPT_THR_MUXD3_BF_OFF ( 3)
#define PMA_RX_MGS_CDR_KVCC2_MUXD3_RX_CDR_KVCC_ADAPT_THR_MUXD3_BF_WID ( 2)
#define PMA_RX_MGS_CDR_KVCC2_MUXD3_RX_CDR_KVCC_ADAPT_THR_MUXD3_BF_MSK (0x00000018)
#define PMA_RX_MGS_CDR_KVCC2_MUXD3_RX_CDR_KVCC_ADAPT_THR_MUXD3_BF_DEF (0x00000008)

#define PMA_RX_MGS_CDR_KVCC2_MUXD3_RX_CDR_KVCC_ADAPT_CTR_DELAY_MUXD3_BF_OFF ( 5)
#define PMA_RX_MGS_CDR_KVCC2_MUXD3_RX_CDR_KVCC_ADAPT_CTR_DELAY_MUXD3_BF_WID ( 3)
#define PMA_RX_MGS_CDR_KVCC2_MUXD3_RX_CDR_KVCC_ADAPT_CTR_DELAY_MUXD3_BF_MSK (0x000000E0)
#define PMA_RX_MGS_CDR_KVCC2_MUXD3_RX_CDR_KVCC_ADAPT_CTR_DELAY_MUXD3_BF_DEF (0x000000A0)

#define PMA_RX_MGS_CDR_KVCC2_MUXD3_RX_CDR_KVCC_ADAPT_STEP_MUXD3_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_KVCC2_MUXD3_RX_CDR_KVCC_ADAPT_STEP_MUXD3_BF_WID ( 3)
#define PMA_RX_MGS_CDR_KVCC2_MUXD3_RX_CDR_KVCC_ADAPT_STEP_MUXD3_BF_MSK (0x00000700)
#define PMA_RX_MGS_CDR_KVCC2_MUXD3_RX_CDR_KVCC_ADAPT_STEP_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC2_MUXD3_RX_CDR_DFX_KVCC_ADAPT_TOGGLE_EN_MUXD3_BF_OFF (11)
#define PMA_RX_MGS_CDR_KVCC2_MUXD3_RX_CDR_DFX_KVCC_ADAPT_TOGGLE_EN_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC2_MUXD3_RX_CDR_DFX_KVCC_ADAPT_TOGGLE_EN_MUXD3_BF_MSK (0x00000800)
#define PMA_RX_MGS_CDR_KVCC2_MUXD3_RX_CDR_DFX_KVCC_ADAPT_TOGGLE_EN_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC2_MUXD3_RX_CDR_DFX_KVCC_ADAPT_EN_OVR_MUXD3_BF_OFF (12)
#define PMA_RX_MGS_CDR_KVCC2_MUXD3_RX_CDR_DFX_KVCC_ADAPT_EN_OVR_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC2_MUXD3_RX_CDR_DFX_KVCC_ADAPT_EN_OVR_MUXD3_BF_MSK (0x00001000)
#define PMA_RX_MGS_CDR_KVCC2_MUXD3_RX_CDR_DFX_KVCC_ADAPT_EN_OVR_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC2_MUXD3_RX_CDR_DFX_KVCC_ADAPT_VAL_OVR_MUXD3_BF_OFF (13)
#define PMA_RX_MGS_CDR_KVCC2_MUXD3_RX_CDR_DFX_KVCC_ADAPT_VAL_OVR_MUXD3_BF_WID ( 9)
#define PMA_RX_MGS_CDR_KVCC2_MUXD3_RX_CDR_DFX_KVCC_ADAPT_VAL_OVR_MUXD3_BF_MSK (0x003FE000)
#define PMA_RX_MGS_CDR_KVCC2_MUXD3_RX_CDR_DFX_KVCC_ADAPT_VAL_OVR_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC2_MUXD3_RX_CDR_DFX_KVCC_ADAPT_DIR_OVR_MUXD3_BF_OFF (22)
#define PMA_RX_MGS_CDR_KVCC2_MUXD3_RX_CDR_DFX_KVCC_ADAPT_DIR_OVR_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC2_MUXD3_RX_CDR_DFX_KVCC_ADAPT_DIR_OVR_MUXD3_BF_MSK (0x00400000)
#define PMA_RX_MGS_CDR_KVCC2_MUXD3_RX_CDR_DFX_KVCC_ADAPT_DIR_OVR_MUXD3_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC2_MUXD3_RX_CDR_KVCC_ADAPT_CHICKEN_BIT_MUXD3_BF_OFF (23)
#define PMA_RX_MGS_CDR_KVCC2_MUXD3_RX_CDR_KVCC_ADAPT_CHICKEN_BIT_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC2_MUXD3_RX_CDR_KVCC_ADAPT_CHICKEN_BIT_MUXD3_BF_MSK (0x00800000)
#define PMA_RX_MGS_CDR_KVCC2_MUXD3_RX_CDR_KVCC_ADAPT_CHICKEN_BIT_MUXD3_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_KVCC2_MUXD4 register description at address offset 0x5d8
  *
  * Register default value:        0x000000A9
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_kvcc2_muxd4
  * rx_cdr_kvcc2
  */

typedef union {
  struct {
    uint32_t RX_CDR_KVCC_ADAPT_EN_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t RX_CDR_KVCC_ADAPT_MODE_MUXD4 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RX_CDR_KVCC_ADAPT_THR_MUXD4 : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="3" ResetValue="0x1"
    uint32_t RX_CDR_KVCC_ADAPT_CTR_DELAY_MUXD4 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="5" ResetValue="0x5"
    uint32_t RX_CDR_KVCC_ADAPT_STEP_MUXD4 : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RX_CDR_DFX_KVCC_ADAPT_TOGGLE_EN_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t RX_CDR_DFX_KVCC_ADAPT_ENABLE_OVR_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t RX_CDR_DFX_KVCC_ADAPT_VAL_OVR_MUXD4 : 9;
    ///< ---
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t RX_CDR_DFX_KVCC_ADAPT_DIR_OVR_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t RX_CDR_KVCC_ADAPT_CHICKEN_BIT_MUXD4 : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_kvcc2_muxd4_reg_t;

#define PMA_RX_MGS_CDR_KVCC2_MUXD4_DEFAULT (0x000000a9U)
#define PMA_RX_MGS_CDR_KVCC2_MUXD4_RD_MASK (0x00ffffffU)
#define PMA_RX_MGS_CDR_KVCC2_MUXD4_WR_MASK (0x00ffffffU)


#define PMA_RX_MGS_CDR_KVCC2_MUXD4_RX_CDR_KVCC_ADAPT_EN_MUXD4_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_KVCC2_MUXD4_RX_CDR_KVCC_ADAPT_EN_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC2_MUXD4_RX_CDR_KVCC_ADAPT_EN_MUXD4_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_KVCC2_MUXD4_RX_CDR_KVCC_ADAPT_EN_MUXD4_BF_DEF (0x00000001)

#define PMA_RX_MGS_CDR_KVCC2_MUXD4_RX_CDR_KVCC_ADAPT_MODE_MUXD4_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_KVCC2_MUXD4_RX_CDR_KVCC_ADAPT_MODE_MUXD4_BF_WID ( 2)
#define PMA_RX_MGS_CDR_KVCC2_MUXD4_RX_CDR_KVCC_ADAPT_MODE_MUXD4_BF_MSK (0x00000006)
#define PMA_RX_MGS_CDR_KVCC2_MUXD4_RX_CDR_KVCC_ADAPT_MODE_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC2_MUXD4_RX_CDR_KVCC_ADAPT_THR_MUXD4_BF_OFF ( 3)
#define PMA_RX_MGS_CDR_KVCC2_MUXD4_RX_CDR_KVCC_ADAPT_THR_MUXD4_BF_WID ( 2)
#define PMA_RX_MGS_CDR_KVCC2_MUXD4_RX_CDR_KVCC_ADAPT_THR_MUXD4_BF_MSK (0x00000018)
#define PMA_RX_MGS_CDR_KVCC2_MUXD4_RX_CDR_KVCC_ADAPT_THR_MUXD4_BF_DEF (0x00000008)

#define PMA_RX_MGS_CDR_KVCC2_MUXD4_RX_CDR_KVCC_ADAPT_CTR_DELAY_MUXD4_BF_OFF ( 5)
#define PMA_RX_MGS_CDR_KVCC2_MUXD4_RX_CDR_KVCC_ADAPT_CTR_DELAY_MUXD4_BF_WID ( 3)
#define PMA_RX_MGS_CDR_KVCC2_MUXD4_RX_CDR_KVCC_ADAPT_CTR_DELAY_MUXD4_BF_MSK (0x000000E0)
#define PMA_RX_MGS_CDR_KVCC2_MUXD4_RX_CDR_KVCC_ADAPT_CTR_DELAY_MUXD4_BF_DEF (0x000000A0)

#define PMA_RX_MGS_CDR_KVCC2_MUXD4_RX_CDR_KVCC_ADAPT_STEP_MUXD4_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_KVCC2_MUXD4_RX_CDR_KVCC_ADAPT_STEP_MUXD4_BF_WID ( 3)
#define PMA_RX_MGS_CDR_KVCC2_MUXD4_RX_CDR_KVCC_ADAPT_STEP_MUXD4_BF_MSK (0x00000700)
#define PMA_RX_MGS_CDR_KVCC2_MUXD4_RX_CDR_KVCC_ADAPT_STEP_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC2_MUXD4_RX_CDR_DFX_KVCC_ADAPT_TOGGLE_EN_MUXD4_BF_OFF (11)
#define PMA_RX_MGS_CDR_KVCC2_MUXD4_RX_CDR_DFX_KVCC_ADAPT_TOGGLE_EN_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC2_MUXD4_RX_CDR_DFX_KVCC_ADAPT_TOGGLE_EN_MUXD4_BF_MSK (0x00000800)
#define PMA_RX_MGS_CDR_KVCC2_MUXD4_RX_CDR_DFX_KVCC_ADAPT_TOGGLE_EN_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC2_MUXD4_RX_CDR_DFX_KVCC_ADAPT_EN_OVR_MUXD4_BF_OFF (12)
#define PMA_RX_MGS_CDR_KVCC2_MUXD4_RX_CDR_DFX_KVCC_ADAPT_EN_OVR_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC2_MUXD4_RX_CDR_DFX_KVCC_ADAPT_EN_OVR_MUXD4_BF_MSK (0x00001000)
#define PMA_RX_MGS_CDR_KVCC2_MUXD4_RX_CDR_DFX_KVCC_ADAPT_EN_OVR_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC2_MUXD4_RX_CDR_DFX_KVCC_ADAPT_VAL_OVR_MUXD4_BF_OFF (13)
#define PMA_RX_MGS_CDR_KVCC2_MUXD4_RX_CDR_DFX_KVCC_ADAPT_VAL_OVR_MUXD4_BF_WID ( 9)
#define PMA_RX_MGS_CDR_KVCC2_MUXD4_RX_CDR_DFX_KVCC_ADAPT_VAL_OVR_MUXD4_BF_MSK (0x003FE000)
#define PMA_RX_MGS_CDR_KVCC2_MUXD4_RX_CDR_DFX_KVCC_ADAPT_VAL_OVR_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC2_MUXD4_RX_CDR_DFX_KVCC_ADAPT_DIR_OVR_MUXD4_BF_OFF (22)
#define PMA_RX_MGS_CDR_KVCC2_MUXD4_RX_CDR_DFX_KVCC_ADAPT_DIR_OVR_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC2_MUXD4_RX_CDR_DFX_KVCC_ADAPT_DIR_OVR_MUXD4_BF_MSK (0x00400000)
#define PMA_RX_MGS_CDR_KVCC2_MUXD4_RX_CDR_DFX_KVCC_ADAPT_DIR_OVR_MUXD4_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC2_MUXD4_RX_CDR_KVCC_ADAPT_CHICKEN_BIT_MUXD4_BF_OFF (23)
#define PMA_RX_MGS_CDR_KVCC2_MUXD4_RX_CDR_KVCC_ADAPT_CHICKEN_BIT_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_CDR_KVCC2_MUXD4_RX_CDR_KVCC_ADAPT_CHICKEN_BIT_MUXD4_BF_MSK (0x00800000)
#define PMA_RX_MGS_CDR_KVCC2_MUXD4_RX_CDR_KVCC_ADAPT_CHICKEN_BIT_MUXD4_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_UXPPM_CONTROL0 register description at address offset 0x5dc
  *
  * Register default value:        0x04007D08
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_uxppm_control0
  * rx_cdr_uxppm_control0
  */

typedef union {
  struct {
    uint32_t RX_CDR_FREQ_MAX_OFFSET_H : 5;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x8"
    uint32_t RX_CDR_FREQ_MAX_OFFSET_L : 5;
    ///< ---
    ///< AccessType="RW" BitOffset="5" ResetValue="0x8"
    uint32_t RX_CDR_FREQ_REF_CNT : 5;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x1F"
    uint32_t RX_CDR_LOCK_LOST_CLR : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RX_CDR_PPMDRIFTCOUNT : 16;
    ///< ---
    ///< AccessType="RW" BitOffset="16" ResetValue="0x400"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_uxppm_ctrl0_reg_t;

#define PMA_RX_MGS_CDR_UXPPM_CTRL0_DEFAULT (0x04007d08U)
#define PMA_RX_MGS_CDR_UXPPM_CTRL0_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_CDR_UXPPM_CTRL0_WR_MASK (0xffffffffU)


#define PMA_RX_MGS_CDR_UXPPM_CTRL0_RX_CDR_FREQ_MAX_OFFSET_H_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_UXPPM_CTRL0_RX_CDR_FREQ_MAX_OFFSET_H_BF_WID ( 5)
#define PMA_RX_MGS_CDR_UXPPM_CTRL0_RX_CDR_FREQ_MAX_OFFSET_H_BF_MSK (0x0000001F)
#define PMA_RX_MGS_CDR_UXPPM_CTRL0_RX_CDR_FREQ_MAX_OFFSET_H_BF_DEF (0x00000008)

#define PMA_RX_MGS_CDR_UXPPM_CTRL0_RX_CDR_FREQ_MAX_OFFSET_L_BF_OFF ( 5)
#define PMA_RX_MGS_CDR_UXPPM_CTRL0_RX_CDR_FREQ_MAX_OFFSET_L_BF_WID ( 5)
#define PMA_RX_MGS_CDR_UXPPM_CTRL0_RX_CDR_FREQ_MAX_OFFSET_L_BF_MSK (0x000003E0)
#define PMA_RX_MGS_CDR_UXPPM_CTRL0_RX_CDR_FREQ_MAX_OFFSET_L_BF_DEF (0x00000100)

#define PMA_RX_MGS_CDR_UXPPM_CTRL0_RX_CDR_FREQ_REF_CNT_BF_OFF (10)
#define PMA_RX_MGS_CDR_UXPPM_CTRL0_RX_CDR_FREQ_REF_CNT_BF_WID ( 5)
#define PMA_RX_MGS_CDR_UXPPM_CTRL0_RX_CDR_FREQ_REF_CNT_BF_MSK (0x00007C00)
#define PMA_RX_MGS_CDR_UXPPM_CTRL0_RX_CDR_FREQ_REF_CNT_BF_DEF (0x00007C00)

#define PMA_RX_MGS_CDR_UXPPM_CTRL0_RX_CDR_LOCK_LOST_CLR_BF_OFF (15)
#define PMA_RX_MGS_CDR_UXPPM_CTRL0_RX_CDR_LOCK_LOST_CLR_BF_WID ( 1)
#define PMA_RX_MGS_CDR_UXPPM_CTRL0_RX_CDR_LOCK_LOST_CLR_BF_MSK (0x00008000)
#define PMA_RX_MGS_CDR_UXPPM_CTRL0_RX_CDR_LOCK_LOST_CLR_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_UXPPM_CTRL0_RX_CDR_PPMDRIFTCNT_BF_OFF (16)
#define PMA_RX_MGS_CDR_UXPPM_CTRL0_RX_CDR_PPMDRIFTCNT_BF_WID (16)
#define PMA_RX_MGS_CDR_UXPPM_CTRL0_RX_CDR_PPMDRIFTCNT_BF_MSK (0xFFFF0000)
#define PMA_RX_MGS_CDR_UXPPM_CTRL0_RX_CDR_PPMDRIFTCNT_BF_DEF (0x04000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_UXPPM_CONTROL1 register description at address offset 0x5e0
  *
  * Register default value:        0x00000011
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_uxppm_control1
  * rx_cdr_uxppm_control1
  */

typedef union {
  struct {
    uint32_t RX_CDR_PPMDRIFTMAX : 16;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x11"
    uint32_t RX_CDR_PPMEN : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t RX_CDR_PPMFRZ : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t RX_CDR_PPMREINIT : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t RX_CDR_SCAN_MODE_CLKMUX : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t RX_CDR_STATUS_HOLD : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t RX_CDR_WATCHDOGTMR_SEL : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_uxppm_ctrl1_reg_t;

#define PMA_RX_MGS_CDR_UXPPM_CTRL1_DEFAULT (0x00000011U)
#define PMA_RX_MGS_CDR_UXPPM_CTRL1_RD_MASK (0x003fffffU)
#define PMA_RX_MGS_CDR_UXPPM_CTRL1_WR_MASK (0x003fffffU)


#define PMA_RX_MGS_CDR_UXPPM_CTRL1_RX_CDR_PPMDRIFTMAX_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_UXPPM_CTRL1_RX_CDR_PPMDRIFTMAX_BF_WID (16)
#define PMA_RX_MGS_CDR_UXPPM_CTRL1_RX_CDR_PPMDRIFTMAX_BF_MSK (0x0000FFFF)
#define PMA_RX_MGS_CDR_UXPPM_CTRL1_RX_CDR_PPMDRIFTMAX_BF_DEF (0x00000011)

#define PMA_RX_MGS_CDR_UXPPM_CTRL1_RX_CDR_PPMEN_BF_OFF (16)
#define PMA_RX_MGS_CDR_UXPPM_CTRL1_RX_CDR_PPMEN_BF_WID ( 1)
#define PMA_RX_MGS_CDR_UXPPM_CTRL1_RX_CDR_PPMEN_BF_MSK (0x00010000)
#define PMA_RX_MGS_CDR_UXPPM_CTRL1_RX_CDR_PPMEN_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_UXPPM_CTRL1_RX_CDR_PPMFRZ_BF_OFF (17)
#define PMA_RX_MGS_CDR_UXPPM_CTRL1_RX_CDR_PPMFRZ_BF_WID ( 1)
#define PMA_RX_MGS_CDR_UXPPM_CTRL1_RX_CDR_PPMFRZ_BF_MSK (0x00020000)
#define PMA_RX_MGS_CDR_UXPPM_CTRL1_RX_CDR_PPMFRZ_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_UXPPM_CTRL1_RX_CDR_PPMREINIT_BF_OFF (18)
#define PMA_RX_MGS_CDR_UXPPM_CTRL1_RX_CDR_PPMREINIT_BF_WID ( 1)
#define PMA_RX_MGS_CDR_UXPPM_CTRL1_RX_CDR_PPMREINIT_BF_MSK (0x00040000)
#define PMA_RX_MGS_CDR_UXPPM_CTRL1_RX_CDR_PPMREINIT_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_UXPPM_CTRL1_RX_CDR_SCAN_MODE_CLKMUX_BF_OFF (19)
#define PMA_RX_MGS_CDR_UXPPM_CTRL1_RX_CDR_SCAN_MODE_CLKMUX_BF_WID ( 1)
#define PMA_RX_MGS_CDR_UXPPM_CTRL1_RX_CDR_SCAN_MODE_CLKMUX_BF_MSK (0x00080000)
#define PMA_RX_MGS_CDR_UXPPM_CTRL1_RX_CDR_SCAN_MODE_CLKMUX_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_UXPPM_CTRL1_RX_CDR_STAT_HOLD_BF_OFF (20)
#define PMA_RX_MGS_CDR_UXPPM_CTRL1_RX_CDR_STAT_HOLD_BF_WID ( 1)
#define PMA_RX_MGS_CDR_UXPPM_CTRL1_RX_CDR_STAT_HOLD_BF_MSK (0x00100000)
#define PMA_RX_MGS_CDR_UXPPM_CTRL1_RX_CDR_STAT_HOLD_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_UXPPM_CTRL1_RX_CDR_WATCHDOGTMR_SEL_BF_OFF (21)
#define PMA_RX_MGS_CDR_UXPPM_CTRL1_RX_CDR_WATCHDOGTMR_SEL_BF_WID ( 1)
#define PMA_RX_MGS_CDR_UXPPM_CTRL1_RX_CDR_WATCHDOGTMR_SEL_BF_MSK (0x00200000)
#define PMA_RX_MGS_CDR_UXPPM_CTRL1_RX_CDR_WATCHDOGTMR_SEL_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_UXPPM_WATCHDOG register description at address offset 0x5e4
  *
  * Register default value:        0x01380138
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_uxppm_watchdog
  * rx_cdr_uxppm_watchdog
  */

typedef union {
  struct {
    uint32_t RX_CDR_WATCHDOGTMR_FAST : 16;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x138"
    uint32_t RX_CDR_WATCHDOGTMR : 16;
    ///< ---
    ///< AccessType="RW" BitOffset="16" ResetValue="0x138"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_uxppm_watchdog_reg_t;

#define PMA_RX_MGS_CDR_UXPPM_WATCHDOG_DEFAULT (0x01380138U)
#define PMA_RX_MGS_CDR_UXPPM_WATCHDOG_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_CDR_UXPPM_WATCHDOG_WR_MASK (0xffffffffU)


#define PMA_RX_MGS_CDR_UXPPM_WATCHDOG_RX_CDR_WATCHDOGTMR_FAST_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_UXPPM_WATCHDOG_RX_CDR_WATCHDOGTMR_FAST_BF_WID (16)
#define PMA_RX_MGS_CDR_UXPPM_WATCHDOG_RX_CDR_WATCHDOGTMR_FAST_BF_MSK (0x0000FFFF)
#define PMA_RX_MGS_CDR_UXPPM_WATCHDOG_RX_CDR_WATCHDOGTMR_FAST_BF_DEF (0x00000138)

#define PMA_RX_MGS_CDR_UXPPM_WATCHDOG_RX_CDR_WATCHDOGTMR_BF_OFF (16)
#define PMA_RX_MGS_CDR_UXPPM_WATCHDOG_RX_CDR_WATCHDOGTMR_BF_WID (16)
#define PMA_RX_MGS_CDR_UXPPM_WATCHDOG_RX_CDR_WATCHDOGTMR_BF_MSK (0xFFFF0000)
#define PMA_RX_MGS_CDR_UXPPM_WATCHDOG_RX_CDR_WATCHDOGTMR_BF_DEF (0x01380000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_BRKPPM_CONTROL0 register description at address offset 0x5e8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_brkppm_control0
  * rx_cdr_brkppm_control0
  */

typedef union {
  struct {
    uint32_t RX_CDR_CLEAR_PPM_COUNTERS_SC : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_STOP_PPM_METERS : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RX_CDR_PPM_RAW_CONTER_RESTART_SC : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_brkppm_ctrl0_reg_t;

#define PMA_RX_MGS_CDR_BRKPPM_CTRL0_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CDR_BRKPPM_CTRL0_RD_MASK (0x00000007U)
#define PMA_RX_MGS_CDR_BRKPPM_CTRL0_WR_MASK (0x00000007U)


#define PMA_RX_MGS_CDR_BRKPPM_CTRL0_RX_CDR_CLR_PPM_CNTERS_SC_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_BRKPPM_CTRL0_RX_CDR_CLR_PPM_CNTERS_SC_BF_WID ( 1)
#define PMA_RX_MGS_CDR_BRKPPM_CTRL0_RX_CDR_CLR_PPM_CNTERS_SC_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_BRKPPM_CTRL0_RX_CDR_CLR_PPM_CNTERS_SC_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_BRKPPM_CTRL0_RX_CDR_STOP_PPM_METERS_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_BRKPPM_CTRL0_RX_CDR_STOP_PPM_METERS_BF_WID ( 1)
#define PMA_RX_MGS_CDR_BRKPPM_CTRL0_RX_CDR_STOP_PPM_METERS_BF_MSK (0x00000002)
#define PMA_RX_MGS_CDR_BRKPPM_CTRL0_RX_CDR_STOP_PPM_METERS_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_BRKPPM_CTRL0_RX_CDR_PPM_RAW_CONTER_RESTART_SC_BF_OFF ( 2)
#define PMA_RX_MGS_CDR_BRKPPM_CTRL0_RX_CDR_PPM_RAW_CONTER_RESTART_SC_BF_WID ( 1)
#define PMA_RX_MGS_CDR_BRKPPM_CTRL0_RX_CDR_PPM_RAW_CONTER_RESTART_SC_BF_MSK (0x00000004)
#define PMA_RX_MGS_CDR_BRKPPM_CTRL0_RX_CDR_PPM_RAW_CONTER_RESTART_SC_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_BRKPPM_CONTROL1 register description at address offset 0x5ec
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_brkppm_control1
  * rx_cdr_brkppm_control1
  */

typedef union {
  struct {
    uint32_t RX_CDR_PPM_COUNTER_TH : 32;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_brkppm_ctrl1_reg_t;

#define PMA_RX_MGS_CDR_BRKPPM_CTRL1_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CDR_BRKPPM_CTRL1_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_CDR_BRKPPM_CTRL1_WR_MASK (0xffffffffU)


#define PMA_RX_MGS_CDR_BRKPPM_CTRL1_RX_CDR_PPM_CNTER_TH_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_BRKPPM_CTRL1_RX_CDR_PPM_CNTER_TH_BF_WID (32)
#define PMA_RX_MGS_CDR_BRKPPM_CTRL1_RX_CDR_PPM_CNTER_TH_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MGS_CDR_BRKPPM_CTRL1_RX_CDR_PPM_CNTER_TH_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_FINE_PROP_CONTROL0 register description at address offset 0x5f0
  *
  * Register default value:        0x000001E1
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_fine_prop_control0
  * rx_cdr_fine_prop_control0
  */

typedef union {
  struct {
    uint32_t RX_CDR_FINE_PROP_EN : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t RX_CDR_FINE_PROP_HIGH_GAIN_OVR : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RX_CDR_FINE_PROP_HIGH_GAIN_VAL : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t RX_CDR_FINE_PROP_THRS_LOAD : 1;
    ///< Toggle 0-> loads new thresholds
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
    uint32_t RX_CDR_FINE_PROP_OVRD_VAL : 8;
    ///< Thermometer
    ///< AccessType="RW" BitOffset="5" ResetValue="0xF"
    uint32_t RX_CDR_FINE_PROP_OVRD_EN : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t RX_CDR_FINE_PROP_VOTER_GAIN : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_fine_prop_ctrl0_reg_t;

#define PMA_RX_MGS_CDR_FINE_PROP_CTRL0_DEFAULT (0x000001e1U)
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL0_RD_MASK (0x0000ffefU)
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL0_WR_MASK (0x0000ffefU)


#define PMA_RX_MGS_CDR_FINE_PROP_CTRL0_RX_CDR_FINE_PROP_EN_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL0_RX_CDR_FINE_PROP_EN_BF_WID ( 1)
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL0_RX_CDR_FINE_PROP_EN_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL0_RX_CDR_FINE_PROP_EN_BF_DEF (0x00000001)

#define PMA_RX_MGS_CDR_FINE_PROP_CTRL0_RX_CDR_FINE_PROP_HIGH_GAIN_OVR_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL0_RX_CDR_FINE_PROP_HIGH_GAIN_OVR_BF_WID ( 1)
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL0_RX_CDR_FINE_PROP_HIGH_GAIN_OVR_BF_MSK (0x00000002)
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL0_RX_CDR_FINE_PROP_HIGH_GAIN_OVR_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_FINE_PROP_CTRL0_RX_CDR_FINE_PROP_HIGH_GAIN_VAL_BF_OFF ( 2)
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL0_RX_CDR_FINE_PROP_HIGH_GAIN_VAL_BF_WID ( 1)
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL0_RX_CDR_FINE_PROP_HIGH_GAIN_VAL_BF_MSK (0x00000004)
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL0_RX_CDR_FINE_PROP_HIGH_GAIN_VAL_BF_DEF (0x00000000)

///< Toggle 0-> loads new thresholds
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL0_RX_CDR_FINE_PROP_THRS_LOAD_BF_OFF ( 3)
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL0_RX_CDR_FINE_PROP_THRS_LOAD_BF_WID ( 1)
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL0_RX_CDR_FINE_PROP_THRS_LOAD_BF_MSK (0x00000008)
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL0_RX_CDR_FINE_PROP_THRS_LOAD_BF_DEF (0x00000000)

///< Thermometer
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL0_RX_CDR_FINE_PROP_OVRD_VAL_BF_OFF ( 5)
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL0_RX_CDR_FINE_PROP_OVRD_VAL_BF_WID ( 8)
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL0_RX_CDR_FINE_PROP_OVRD_VAL_BF_MSK (0x00001FE0)
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL0_RX_CDR_FINE_PROP_OVRD_VAL_BF_DEF (0x000001E0)

#define PMA_RX_MGS_CDR_FINE_PROP_CTRL0_RX_CDR_FINE_PROP_OVRD_EN_BF_OFF (13)
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL0_RX_CDR_FINE_PROP_OVRD_EN_BF_WID ( 1)
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL0_RX_CDR_FINE_PROP_OVRD_EN_BF_MSK (0x00002000)
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL0_RX_CDR_FINE_PROP_OVRD_EN_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_FINE_PROP_CTRL0_RX_CDR_FINE_PROP_VOTER_GAIN_BF_OFF (14)
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL0_RX_CDR_FINE_PROP_VOTER_GAIN_BF_WID ( 2)
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL0_RX_CDR_FINE_PROP_VOTER_GAIN_BF_MSK (0x0000C000)
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL0_RX_CDR_FINE_PROP_VOTER_GAIN_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_FINE_PROP_CONTROL1 register description at address offset 0x5f4
  *
  * Register default value:        0x02203F3F
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_fine_prop_control1
  * rx_cdr_fine_prop_control1
  */

typedef union {
  struct {
    uint32_t RX_CDR_FINE_PROP_THRS_POS_0 : 7;
    ///< Default 63
    ///< AccessType="RW" BitOffset="0" ResetValue="0x3F"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t RX_CDR_FINE_PROP_THRS_POS_1 : 7;
    ///< Default 63
    ///< AccessType="RW" BitOffset="8" ResetValue="0x3F"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t RX_CDR_FINE_PROP_THRS_POS_2 : 7;
    ///< Default 32
    ///< AccessType="RW" BitOffset="16" ResetValue="0x20"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
    uint32_t RX_CDR_FINE_PROP_THRS_POS_3 : 7;
    ///< Default 2
    ///< AccessType="RW" BitOffset="24" ResetValue="0x2"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_fine_prop_ctrl1_reg_t;

#define PMA_RX_MGS_CDR_FINE_PROP_CTRL1_DEFAULT (0x02203f3fU)
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL1_RD_MASK (0x7f7f7f7fU)
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL1_WR_MASK (0x7f7f7f7fU)


///< Default 63
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL1_RX_CDR_FINE_PROP_THRS_POS_0_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL1_RX_CDR_FINE_PROP_THRS_POS_0_BF_WID ( 7)
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL1_RX_CDR_FINE_PROP_THRS_POS_0_BF_MSK (0x0000007F)
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL1_RX_CDR_FINE_PROP_THRS_POS_0_BF_DEF (0x0000003F)

///< Default 63
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL1_RX_CDR_FINE_PROP_THRS_POS_1_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL1_RX_CDR_FINE_PROP_THRS_POS_1_BF_WID ( 7)
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL1_RX_CDR_FINE_PROP_THRS_POS_1_BF_MSK (0x00007F00)
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL1_RX_CDR_FINE_PROP_THRS_POS_1_BF_DEF (0x00003F00)

///< Default 32
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL1_RX_CDR_FINE_PROP_THRS_POS_2_BF_OFF (16)
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL1_RX_CDR_FINE_PROP_THRS_POS_2_BF_WID ( 7)
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL1_RX_CDR_FINE_PROP_THRS_POS_2_BF_MSK (0x007F0000)
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL1_RX_CDR_FINE_PROP_THRS_POS_2_BF_DEF (0x00200000)

///< Default 2
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL1_RX_CDR_FINE_PROP_THRS_POS_3_BF_OFF (24)
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL1_RX_CDR_FINE_PROP_THRS_POS_3_BF_WID ( 7)
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL1_RX_CDR_FINE_PROP_THRS_POS_3_BF_MSK (0x7F000000)
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL1_RX_CDR_FINE_PROP_THRS_POS_3_BF_DEF (0x02000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_FINE_PROP_CONTROL2 register description at address offset 0x5f8
  *
  * Register default value:        0x7E604141
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_fine_prop_control2
  * rx_cdr_fine_prop_control2
  */

typedef union {
  struct {
    uint32_t RX_CDR_FINE_PROP_THRS_NEG_0 : 7;
    ///< Default -63
    ///< AccessType="RW" BitOffset="0" ResetValue="0x41"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t RX_CDR_FINE_PROP_THRS_NEG_1 : 7;
    ///< Default -63
    ///< AccessType="RW" BitOffset="8" ResetValue="0x41"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t RX_CDR_FINE_PROP_THRS_NEG_2 : 7;
    ///< Default -32
    ///< AccessType="RW" BitOffset="16" ResetValue="0x60"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
    uint32_t RX_CDR_FINE_PROP_THRS_NEG_3 : 7;
    ///< Default -2
    ///< AccessType="RW" BitOffset="24" ResetValue="0x7E"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_fine_prop_ctrl2_reg_t;

#define PMA_RX_MGS_CDR_FINE_PROP_CTRL2_DEFAULT (0x7e604141U)
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL2_RD_MASK (0x7f7f7f7fU)
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL2_WR_MASK (0x7f7f7f7fU)


///< Default -63
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL2_RX_CDR_FINE_PROP_THRS_NEG_0_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL2_RX_CDR_FINE_PROP_THRS_NEG_0_BF_WID ( 7)
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL2_RX_CDR_FINE_PROP_THRS_NEG_0_BF_MSK (0x0000007F)
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL2_RX_CDR_FINE_PROP_THRS_NEG_0_BF_DEF (0x00000041)

///< Default -63
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL2_RX_CDR_FINE_PROP_THRS_NEG_1_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL2_RX_CDR_FINE_PROP_THRS_NEG_1_BF_WID ( 7)
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL2_RX_CDR_FINE_PROP_THRS_NEG_1_BF_MSK (0x00007F00)
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL2_RX_CDR_FINE_PROP_THRS_NEG_1_BF_DEF (0x00004100)

///< Default -32
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL2_RX_CDR_FINE_PROP_THRS_NEG_2_BF_OFF (16)
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL2_RX_CDR_FINE_PROP_THRS_NEG_2_BF_WID ( 7)
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL2_RX_CDR_FINE_PROP_THRS_NEG_2_BF_MSK (0x007F0000)
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL2_RX_CDR_FINE_PROP_THRS_NEG_2_BF_DEF (0x00600000)

///< Default -2
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL2_RX_CDR_FINE_PROP_THRS_NEG_3_BF_OFF (24)
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL2_RX_CDR_FINE_PROP_THRS_NEG_3_BF_WID ( 7)
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL2_RX_CDR_FINE_PROP_THRS_NEG_3_BF_MSK (0x7F000000)
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL2_RX_CDR_FINE_PROP_THRS_NEG_3_BF_DEF (0x7E000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_FINE_PROP_HI_GAIN_CONTROL0 register description at address offset 0x5fc
  *
  * Register default value:        0x01010101
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_fine_prop_hi_gain_control0
  * rx_cdr_fine_prop_control1
  */

typedef union {
  struct {
    uint32_t RX_CDR_FINE_PROP_HI_GAIN_THRS_POS_0 : 7;
    ///< Default 1
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t RX_CDR_FINE_PROP_HI_GAIN_THRS_POS_1 : 7;
    ///< Default 1
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t RX_CDR_FINE_PROP_HI_GAIN_THRS_POS_2 : 7;
    ///< Default 1
    ///< AccessType="RW" BitOffset="16" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
    uint32_t RX_CDR_FINE_PROP_HI_GAIN_THRS_POS_3 : 7;
    ///< Default 1
    ///< AccessType="RW" BitOffset="24" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_fine_prop_hi_gain_ctrl0_reg_t;

#define PMA_RX_MGS_CDR_FINE_PROP_HI_GAIN_CTRL0_DEFAULT (0x01010101U)
#define PMA_RX_MGS_CDR_FINE_PROP_HI_GAIN_CTRL0_RD_MASK (0x7f7f7f7fU)
#define PMA_RX_MGS_CDR_FINE_PROP_HI_GAIN_CTRL0_WR_MASK (0x7f7f7f7fU)


///< Default 1
#define PMA_RX_MGS_CDR_FINE_PROP_HI_GAIN_CTRL0_RX_CDR_FINE_PROP_HI_GAIN_THRS_POS_0_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_FINE_PROP_HI_GAIN_CTRL0_RX_CDR_FINE_PROP_HI_GAIN_THRS_POS_0_BF_WID ( 7)
#define PMA_RX_MGS_CDR_FINE_PROP_HI_GAIN_CTRL0_RX_CDR_FINE_PROP_HI_GAIN_THRS_POS_0_BF_MSK (0x0000007F)
#define PMA_RX_MGS_CDR_FINE_PROP_HI_GAIN_CTRL0_RX_CDR_FINE_PROP_HI_GAIN_THRS_POS_0_BF_DEF (0x00000001)

///< Default 1
#define PMA_RX_MGS_CDR_FINE_PROP_HI_GAIN_CTRL0_RX_CDR_FINE_PROP_HI_GAIN_THRS_POS_1_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_FINE_PROP_HI_GAIN_CTRL0_RX_CDR_FINE_PROP_HI_GAIN_THRS_POS_1_BF_WID ( 7)
#define PMA_RX_MGS_CDR_FINE_PROP_HI_GAIN_CTRL0_RX_CDR_FINE_PROP_HI_GAIN_THRS_POS_1_BF_MSK (0x00007F00)
#define PMA_RX_MGS_CDR_FINE_PROP_HI_GAIN_CTRL0_RX_CDR_FINE_PROP_HI_GAIN_THRS_POS_1_BF_DEF (0x00000100)

///< Default 1
#define PMA_RX_MGS_CDR_FINE_PROP_HI_GAIN_CTRL0_RX_CDR_FINE_PROP_HI_GAIN_THRS_POS_2_BF_OFF (16)
#define PMA_RX_MGS_CDR_FINE_PROP_HI_GAIN_CTRL0_RX_CDR_FINE_PROP_HI_GAIN_THRS_POS_2_BF_WID ( 7)
#define PMA_RX_MGS_CDR_FINE_PROP_HI_GAIN_CTRL0_RX_CDR_FINE_PROP_HI_GAIN_THRS_POS_2_BF_MSK (0x007F0000)
#define PMA_RX_MGS_CDR_FINE_PROP_HI_GAIN_CTRL0_RX_CDR_FINE_PROP_HI_GAIN_THRS_POS_2_BF_DEF (0x00010000)

///< Default 1
#define PMA_RX_MGS_CDR_FINE_PROP_HI_GAIN_CTRL0_RX_CDR_FINE_PROP_HI_GAIN_THRS_POS_3_BF_OFF (24)
#define PMA_RX_MGS_CDR_FINE_PROP_HI_GAIN_CTRL0_RX_CDR_FINE_PROP_HI_GAIN_THRS_POS_3_BF_WID ( 7)
#define PMA_RX_MGS_CDR_FINE_PROP_HI_GAIN_CTRL0_RX_CDR_FINE_PROP_HI_GAIN_THRS_POS_3_BF_MSK (0x7F000000)
#define PMA_RX_MGS_CDR_FINE_PROP_HI_GAIN_CTRL0_RX_CDR_FINE_PROP_HI_GAIN_THRS_POS_3_BF_DEF (0x01000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_FINE_PROP_HI_GAIN_CONTROL1 register description at address offset 0x600
  *
  * Register default value:        0x7F7F7F7F
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_fine_prop_hi_gain_control1
  * rx_cdr_fine_prop_control2
  */

typedef union {
  struct {
    uint32_t RX_CDR_FINE_PROP_HI_GAIN_THRS_NEG_0 : 7;
    ///< Default -1
    ///< AccessType="RW" BitOffset="0" ResetValue="0x7F"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t RX_CDR_FINE_PROP_HI_GAIN_THRS_NEG_1 : 7;
    ///< Default -1
    ///< AccessType="RW" BitOffset="8" ResetValue="0x7F"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t RX_CDR_FINE_PROP_HI_GAIN_THRS_NEG_2 : 7;
    ///< Default -1
    ///< AccessType="RW" BitOffset="16" ResetValue="0x7F"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
    uint32_t RX_CDR_FINE_PROP_HI_GAIN_THRS_NEG_3 : 7;
    ///< Default -1
    ///< AccessType="RW" BitOffset="24" ResetValue="0x7F"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_fine_prop_hi_gain_ctrl1_reg_t;

#define PMA_RX_MGS_CDR_FINE_PROP_HI_GAIN_CTRL1_DEFAULT (0x7f7f7f7fU)
#define PMA_RX_MGS_CDR_FINE_PROP_HI_GAIN_CTRL1_RD_MASK (0x7f7f7f7fU)
#define PMA_RX_MGS_CDR_FINE_PROP_HI_GAIN_CTRL1_WR_MASK (0x7f7f7f7fU)


///< Default -1
#define PMA_RX_MGS_CDR_FINE_PROP_HI_GAIN_CTRL1_RX_CDR_FINE_PROP_HI_GAIN_THRS_NEG_0_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_FINE_PROP_HI_GAIN_CTRL1_RX_CDR_FINE_PROP_HI_GAIN_THRS_NEG_0_BF_WID ( 7)
#define PMA_RX_MGS_CDR_FINE_PROP_HI_GAIN_CTRL1_RX_CDR_FINE_PROP_HI_GAIN_THRS_NEG_0_BF_MSK (0x0000007F)
#define PMA_RX_MGS_CDR_FINE_PROP_HI_GAIN_CTRL1_RX_CDR_FINE_PROP_HI_GAIN_THRS_NEG_0_BF_DEF (0x0000007F)

///< Default -1
#define PMA_RX_MGS_CDR_FINE_PROP_HI_GAIN_CTRL1_RX_CDR_FINE_PROP_HI_GAIN_THRS_NEG_1_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_FINE_PROP_HI_GAIN_CTRL1_RX_CDR_FINE_PROP_HI_GAIN_THRS_NEG_1_BF_WID ( 7)
#define PMA_RX_MGS_CDR_FINE_PROP_HI_GAIN_CTRL1_RX_CDR_FINE_PROP_HI_GAIN_THRS_NEG_1_BF_MSK (0x00007F00)
#define PMA_RX_MGS_CDR_FINE_PROP_HI_GAIN_CTRL1_RX_CDR_FINE_PROP_HI_GAIN_THRS_NEG_1_BF_DEF (0x00007F00)

///< Default -1
#define PMA_RX_MGS_CDR_FINE_PROP_HI_GAIN_CTRL1_RX_CDR_FINE_PROP_HI_GAIN_THRS_NEG_2_BF_OFF (16)
#define PMA_RX_MGS_CDR_FINE_PROP_HI_GAIN_CTRL1_RX_CDR_FINE_PROP_HI_GAIN_THRS_NEG_2_BF_WID ( 7)
#define PMA_RX_MGS_CDR_FINE_PROP_HI_GAIN_CTRL1_RX_CDR_FINE_PROP_HI_GAIN_THRS_NEG_2_BF_MSK (0x007F0000)
#define PMA_RX_MGS_CDR_FINE_PROP_HI_GAIN_CTRL1_RX_CDR_FINE_PROP_HI_GAIN_THRS_NEG_2_BF_DEF (0x007F0000)

///< Default -1
#define PMA_RX_MGS_CDR_FINE_PROP_HI_GAIN_CTRL1_RX_CDR_FINE_PROP_HI_GAIN_THRS_NEG_3_BF_OFF (24)
#define PMA_RX_MGS_CDR_FINE_PROP_HI_GAIN_CTRL1_RX_CDR_FINE_PROP_HI_GAIN_THRS_NEG_3_BF_WID ( 7)
#define PMA_RX_MGS_CDR_FINE_PROP_HI_GAIN_CTRL1_RX_CDR_FINE_PROP_HI_GAIN_THRS_NEG_3_BF_MSK (0x7F000000)
#define PMA_RX_MGS_CDR_FINE_PROP_HI_GAIN_CTRL1_RX_CDR_FINE_PROP_HI_GAIN_THRS_NEG_3_BF_DEF (0x7F000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_FINE_PROP_LO_GAIN_CONTROL0 register description at address offset 0x604
  *
  * Register default value:        0x3F3F2002
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_fine_prop_lo_gain_control0
  * rx_cdr_fine_prop_control1
  */

typedef union {
  struct {
    uint32_t RX_CDR_FINE_PROP_LO_GAIN_THRS_POS_0 : 7;
    ///< Default 2
    ///< AccessType="RW" BitOffset="0" ResetValue="0x2"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t RX_CDR_FINE_PROP_LO_GAIN_THRS_POS_1 : 7;
    ///< Default 32
    ///< AccessType="RW" BitOffset="8" ResetValue="0x20"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t RX_CDR_FINE_PROP_LO_GAIN_THRS_POS_2 : 7;
    ///< Default 63
    ///< AccessType="RW" BitOffset="16" ResetValue="0x3F"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
    uint32_t RX_CDR_FINE_PROP_LO_GAIN_THRS_POS_3 : 7;
    ///< Default 63
    ///< AccessType="RW" BitOffset="24" ResetValue="0x3F"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_fine_prop_lo_gain_ctrl0_reg_t;

#define PMA_RX_MGS_CDR_FINE_PROP_LO_GAIN_CTRL0_DEFAULT (0x3f3f2002U)
#define PMA_RX_MGS_CDR_FINE_PROP_LO_GAIN_CTRL0_RD_MASK (0x7f7f7f7fU)
#define PMA_RX_MGS_CDR_FINE_PROP_LO_GAIN_CTRL0_WR_MASK (0x7f7f7f7fU)


///< Default 2
#define PMA_RX_MGS_CDR_FINE_PROP_LO_GAIN_CTRL0_RX_CDR_FINE_PROP_LO_GAIN_THRS_POS_0_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_FINE_PROP_LO_GAIN_CTRL0_RX_CDR_FINE_PROP_LO_GAIN_THRS_POS_0_BF_WID ( 7)
#define PMA_RX_MGS_CDR_FINE_PROP_LO_GAIN_CTRL0_RX_CDR_FINE_PROP_LO_GAIN_THRS_POS_0_BF_MSK (0x0000007F)
#define PMA_RX_MGS_CDR_FINE_PROP_LO_GAIN_CTRL0_RX_CDR_FINE_PROP_LO_GAIN_THRS_POS_0_BF_DEF (0x00000002)

///< Default 32
#define PMA_RX_MGS_CDR_FINE_PROP_LO_GAIN_CTRL0_RX_CDR_FINE_PROP_LO_GAIN_THRS_POS_1_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_FINE_PROP_LO_GAIN_CTRL0_RX_CDR_FINE_PROP_LO_GAIN_THRS_POS_1_BF_WID ( 7)
#define PMA_RX_MGS_CDR_FINE_PROP_LO_GAIN_CTRL0_RX_CDR_FINE_PROP_LO_GAIN_THRS_POS_1_BF_MSK (0x00007F00)
#define PMA_RX_MGS_CDR_FINE_PROP_LO_GAIN_CTRL0_RX_CDR_FINE_PROP_LO_GAIN_THRS_POS_1_BF_DEF (0x00002000)

///< Default 63
#define PMA_RX_MGS_CDR_FINE_PROP_LO_GAIN_CTRL0_RX_CDR_FINE_PROP_LO_GAIN_THRS_POS_2_BF_OFF (16)
#define PMA_RX_MGS_CDR_FINE_PROP_LO_GAIN_CTRL0_RX_CDR_FINE_PROP_LO_GAIN_THRS_POS_2_BF_WID ( 7)
#define PMA_RX_MGS_CDR_FINE_PROP_LO_GAIN_CTRL0_RX_CDR_FINE_PROP_LO_GAIN_THRS_POS_2_BF_MSK (0x007F0000)
#define PMA_RX_MGS_CDR_FINE_PROP_LO_GAIN_CTRL0_RX_CDR_FINE_PROP_LO_GAIN_THRS_POS_2_BF_DEF (0x003F0000)

///< Default 63
#define PMA_RX_MGS_CDR_FINE_PROP_LO_GAIN_CTRL0_RX_CDR_FINE_PROP_LO_GAIN_THRS_POS_3_BF_OFF (24)
#define PMA_RX_MGS_CDR_FINE_PROP_LO_GAIN_CTRL0_RX_CDR_FINE_PROP_LO_GAIN_THRS_POS_3_BF_WID ( 7)
#define PMA_RX_MGS_CDR_FINE_PROP_LO_GAIN_CTRL0_RX_CDR_FINE_PROP_LO_GAIN_THRS_POS_3_BF_MSK (0x7F000000)
#define PMA_RX_MGS_CDR_FINE_PROP_LO_GAIN_CTRL0_RX_CDR_FINE_PROP_LO_GAIN_THRS_POS_3_BF_DEF (0x3F000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_FINE_PROP_LO_GAIN_CONTROL1 register description at address offset 0x608
  *
  * Register default value:        0x4141607E
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_fine_prop_lo_gain_control1
  * rx_cdr_fine_prop_control2
  */

typedef union {
  struct {
    uint32_t RX_CDR_FINE_PROP_LO_GAIN_THRS_NEG_0 : 7;
    ///< Default -2
    ///< AccessType="RW" BitOffset="0" ResetValue="0x7E"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t RX_CDR_FINE_PROP_LO_GAIN_THRS_NEG_1 : 7;
    ///< Default -32
    ///< AccessType="RW" BitOffset="8" ResetValue="0x60"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t RX_CDR_FINE_PROP_LO_GAIN_THRS_NEG_2 : 7;
    ///< Default -63
    ///< AccessType="RW" BitOffset="16" ResetValue="0x41"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
    uint32_t RX_CDR_FINE_PROP_LO_GAIN_THRS_NEG_3 : 7;
    ///< Default -63
    ///< AccessType="RW" BitOffset="24" ResetValue="0x41"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_fine_prop_lo_gain_ctrl1_reg_t;

#define PMA_RX_MGS_CDR_FINE_PROP_LO_GAIN_CTRL1_DEFAULT (0x4141607eU)
#define PMA_RX_MGS_CDR_FINE_PROP_LO_GAIN_CTRL1_RD_MASK (0x7f7f7f7fU)
#define PMA_RX_MGS_CDR_FINE_PROP_LO_GAIN_CTRL1_WR_MASK (0x7f7f7f7fU)


///< Default -2
#define PMA_RX_MGS_CDR_FINE_PROP_LO_GAIN_CTRL1_RX_CDR_FINE_PROP_LO_GAIN_THRS_NEG_0_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_FINE_PROP_LO_GAIN_CTRL1_RX_CDR_FINE_PROP_LO_GAIN_THRS_NEG_0_BF_WID ( 7)
#define PMA_RX_MGS_CDR_FINE_PROP_LO_GAIN_CTRL1_RX_CDR_FINE_PROP_LO_GAIN_THRS_NEG_0_BF_MSK (0x0000007F)
#define PMA_RX_MGS_CDR_FINE_PROP_LO_GAIN_CTRL1_RX_CDR_FINE_PROP_LO_GAIN_THRS_NEG_0_BF_DEF (0x0000007E)

///< Default -32
#define PMA_RX_MGS_CDR_FINE_PROP_LO_GAIN_CTRL1_RX_CDR_FINE_PROP_LO_GAIN_THRS_NEG_1_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_FINE_PROP_LO_GAIN_CTRL1_RX_CDR_FINE_PROP_LO_GAIN_THRS_NEG_1_BF_WID ( 7)
#define PMA_RX_MGS_CDR_FINE_PROP_LO_GAIN_CTRL1_RX_CDR_FINE_PROP_LO_GAIN_THRS_NEG_1_BF_MSK (0x00007F00)
#define PMA_RX_MGS_CDR_FINE_PROP_LO_GAIN_CTRL1_RX_CDR_FINE_PROP_LO_GAIN_THRS_NEG_1_BF_DEF (0x00006000)

///< Default -63
#define PMA_RX_MGS_CDR_FINE_PROP_LO_GAIN_CTRL1_RX_CDR_FINE_PROP_LO_GAIN_THRS_NEG_2_BF_OFF (16)
#define PMA_RX_MGS_CDR_FINE_PROP_LO_GAIN_CTRL1_RX_CDR_FINE_PROP_LO_GAIN_THRS_NEG_2_BF_WID ( 7)
#define PMA_RX_MGS_CDR_FINE_PROP_LO_GAIN_CTRL1_RX_CDR_FINE_PROP_LO_GAIN_THRS_NEG_2_BF_MSK (0x007F0000)
#define PMA_RX_MGS_CDR_FINE_PROP_LO_GAIN_CTRL1_RX_CDR_FINE_PROP_LO_GAIN_THRS_NEG_2_BF_DEF (0x00410000)

///< Default -63
#define PMA_RX_MGS_CDR_FINE_PROP_LO_GAIN_CTRL1_RX_CDR_FINE_PROP_LO_GAIN_THRS_NEG_3_BF_OFF (24)
#define PMA_RX_MGS_CDR_FINE_PROP_LO_GAIN_CTRL1_RX_CDR_FINE_PROP_LO_GAIN_THRS_NEG_3_BF_WID ( 7)
#define PMA_RX_MGS_CDR_FINE_PROP_LO_GAIN_CTRL1_RX_CDR_FINE_PROP_LO_GAIN_THRS_NEG_3_BF_MSK (0x7F000000)
#define PMA_RX_MGS_CDR_FINE_PROP_LO_GAIN_CTRL1_RX_CDR_FINE_PROP_LO_GAIN_THRS_NEG_3_BF_DEF (0x41000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_QPD_ACCUM_MASK_HI register description at address offset 0x60c
  *
  * Register default value:        0xFFFFFFFF
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_qpd_accum_mask_hi
  * rx_cdr_qpd_accum_mask_hi
  */

typedef union {
  struct {
    uint32_t RX_CDR_QPD_ACCUM_MASK_HI : 32;
    ///< Hi Mask for QPD Accumulator
    ///< AccessType="RW" BitOffset="0" ResetValue="0xFFFFFFFF"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_qpd_accum_mask_hi_reg_t;

#define PMA_RX_MGS_CDR_QPD_ACCUM_MASK_HI_DEFAULT (0xffffffffU)
#define PMA_RX_MGS_CDR_QPD_ACCUM_MASK_HI_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_CDR_QPD_ACCUM_MASK_HI_WR_MASK (0xffffffffU)


///< Hi Mask for QPD Accumulator
#define PMA_RX_MGS_CDR_QPD_ACCUM_MASK_HI_RX_CDR_QPD_ACCUM_MASK_HI_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_QPD_ACCUM_MASK_HI_RX_CDR_QPD_ACCUM_MASK_HI_BF_WID (32)
#define PMA_RX_MGS_CDR_QPD_ACCUM_MASK_HI_RX_CDR_QPD_ACCUM_MASK_HI_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MGS_CDR_QPD_ACCUM_MASK_HI_RX_CDR_QPD_ACCUM_MASK_HI_BF_DEF (0xFFFFFFFF)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_QPD_ACCUM_MASK_LO register description at address offset 0x610
  *
  * Register default value:        0xFFFFFFFF
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_qpd_accum_mask_lo
  * rx_cdr_qpd_accum_mask_lo
  */

typedef union {
  struct {
    uint32_t RX_CDR_QPD_ACCUM_MASK_LO : 32;
    ///< Lo Mask for QPD Accumulator
    ///< AccessType="RW" BitOffset="0" ResetValue="0xFFFFFFFF"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_qpd_accum_mask_lo_reg_t;

#define PMA_RX_MGS_CDR_QPD_ACCUM_MASK_LO_DEFAULT (0xffffffffU)
#define PMA_RX_MGS_CDR_QPD_ACCUM_MASK_LO_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_CDR_QPD_ACCUM_MASK_LO_WR_MASK (0xffffffffU)


///< Lo Mask for QPD Accumulator
#define PMA_RX_MGS_CDR_QPD_ACCUM_MASK_LO_RX_CDR_QPD_ACCUM_MASK_LO_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_QPD_ACCUM_MASK_LO_RX_CDR_QPD_ACCUM_MASK_LO_BF_WID (32)
#define PMA_RX_MGS_CDR_QPD_ACCUM_MASK_LO_RX_CDR_QPD_ACCUM_MASK_LO_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MGS_CDR_QPD_ACCUM_MASK_LO_RX_CDR_QPD_ACCUM_MASK_LO_BF_DEF (0xFFFFFFFF)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_QPD_ACCUM_CTRL register description at address offset 0x614
  *
  * Register default value:        0x00000080
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_qpd_accum_ctrl
  * rx_cdr_qpd_accum_ctrl
  */

typedef union {
  struct {
    uint32_t RX_CDR_QPD_ACCUM_STAT_MAX : 16;
    ///< Max for QPD Accumulator
    ///< AccessType="RW" BitOffset="0" ResetValue="0x80"
    uint32_t RX_CDR_QPD_ACCUM_START_A : 1;
    ///< Start for QPD Accumulator
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_qpd_accum_ctrl_reg_t;

#define PMA_RX_MGS_CDR_QPD_ACCUM_CTRL_DEFAULT (0x00000080U)
#define PMA_RX_MGS_CDR_QPD_ACCUM_CTRL_RD_MASK (0x0001ffffU)
#define PMA_RX_MGS_CDR_QPD_ACCUM_CTRL_WR_MASK (0x0001ffffU)


///< Max for QPD Accumulator
#define PMA_RX_MGS_CDR_QPD_ACCUM_CTRL_RX_CDR_QPD_ACCUM_STAT_MAX_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_QPD_ACCUM_CTRL_RX_CDR_QPD_ACCUM_STAT_MAX_BF_WID (16)
#define PMA_RX_MGS_CDR_QPD_ACCUM_CTRL_RX_CDR_QPD_ACCUM_STAT_MAX_BF_MSK (0x0000FFFF)
#define PMA_RX_MGS_CDR_QPD_ACCUM_CTRL_RX_CDR_QPD_ACCUM_STAT_MAX_BF_DEF (0x00000080)

///< Start for QPD Accumulator
#define PMA_RX_MGS_CDR_QPD_ACCUM_CTRL_RX_CDR_QPD_ACCUM_START_A_BF_OFF (16)
#define PMA_RX_MGS_CDR_QPD_ACCUM_CTRL_RX_CDR_QPD_ACCUM_START_A_BF_WID ( 1)
#define PMA_RX_MGS_CDR_QPD_ACCUM_CTRL_RX_CDR_QPD_ACCUM_START_A_BF_MSK (0x00010000)
#define PMA_RX_MGS_CDR_QPD_ACCUM_CTRL_RX_CDR_QPD_ACCUM_START_A_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_BBPD_ACCUM_MASK register description at address offset 0x618
  *
  * Register default value:        0xFFFFFFFF
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_bbpd_accum_mask
  * rx_cdr_bbpd_accum_mask
  */

typedef union {
  struct {
    uint32_t RX_CDR_BBPD_ACCUM_MASK : 32;
    ///< Mask for BBPD Accumulator
    ///< AccessType="RW" BitOffset="0" ResetValue="0xFFFFFFFF"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_bbpd_accum_mask_reg_t;

#define PMA_RX_MGS_CDR_BBPD_ACCUM_MASK_DEFAULT (0xffffffffU)
#define PMA_RX_MGS_CDR_BBPD_ACCUM_MASK_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_CDR_BBPD_ACCUM_MASK_WR_MASK (0xffffffffU)


///< Mask for BBPD Accumulator
#define PMA_RX_MGS_CDR_BBPD_ACCUM_MASK_RX_CDR_BBPD_ACCUM_MASK_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_BBPD_ACCUM_MASK_RX_CDR_BBPD_ACCUM_MASK_BF_WID (32)
#define PMA_RX_MGS_CDR_BBPD_ACCUM_MASK_RX_CDR_BBPD_ACCUM_MASK_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MGS_CDR_BBPD_ACCUM_MASK_RX_CDR_BBPD_ACCUM_MASK_BF_DEF (0xFFFFFFFF)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_BBPD_ACCUM_CTRL register description at address offset 0x61c
  *
  * Register default value:        0x00000080
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_bbpd_accum_ctrl
  * rx_cdr_bbpd_accum_ctrl
  */

typedef union {
  struct {
    uint32_t RX_CDR_BBPD_ACCUM_STAT_MAX : 16;
    ///< Max for BBPD Accumulator
    ///< AccessType="RW" BitOffset="0" ResetValue="0x80"
    uint32_t RX_CDR_BBPD_ACCUM_START_A : 1;
    ///< Start for BBPD Accumulator
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_bbpd_accum_ctrl_reg_t;

#define PMA_RX_MGS_CDR_BBPD_ACCUM_CTRL_DEFAULT (0x00000080U)
#define PMA_RX_MGS_CDR_BBPD_ACCUM_CTRL_RD_MASK (0x0001ffffU)
#define PMA_RX_MGS_CDR_BBPD_ACCUM_CTRL_WR_MASK (0x0001ffffU)


///< Max for BBPD Accumulator
#define PMA_RX_MGS_CDR_BBPD_ACCUM_CTRL_RX_CDR_BBPD_ACCUM_STAT_MAX_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_BBPD_ACCUM_CTRL_RX_CDR_BBPD_ACCUM_STAT_MAX_BF_WID (16)
#define PMA_RX_MGS_CDR_BBPD_ACCUM_CTRL_RX_CDR_BBPD_ACCUM_STAT_MAX_BF_MSK (0x0000FFFF)
#define PMA_RX_MGS_CDR_BBPD_ACCUM_CTRL_RX_CDR_BBPD_ACCUM_STAT_MAX_BF_DEF (0x00000080)

///< Start for BBPD Accumulator
#define PMA_RX_MGS_CDR_BBPD_ACCUM_CTRL_RX_CDR_BBPD_ACCUM_START_A_BF_OFF (16)
#define PMA_RX_MGS_CDR_BBPD_ACCUM_CTRL_RX_CDR_BBPD_ACCUM_START_A_BF_WID ( 1)
#define PMA_RX_MGS_CDR_BBPD_ACCUM_CTRL_RX_CDR_BBPD_ACCUM_START_A_BF_MSK (0x00010000)
#define PMA_RX_MGS_CDR_BBPD_ACCUM_CTRL_RX_CDR_BBPD_ACCUM_START_A_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_RW_SPARE0 register description at address offset 0x620
  *
  * Register default value:        0x00004000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_rw_spare0
  * rx_cdr_rw_spare0
  */

typedef union {
  struct {
    uint32_t RX_CDR_SPARE_DIG2ANA : 18;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x4000"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_rw_spare0_reg_t;

#define PMA_RX_MGS_CDR_RW_SPARE0_DEFAULT (0x00004000U)
#define PMA_RX_MGS_CDR_RW_SPARE0_RD_MASK (0x0003ffffU)
#define PMA_RX_MGS_CDR_RW_SPARE0_WR_MASK (0x0003ffffU)


#define PMA_RX_MGS_CDR_RW_SPARE0_RX_CDR_SPARE_DIG2ANA_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_RW_SPARE0_RX_CDR_SPARE_DIG2ANA_BF_WID (18)
#define PMA_RX_MGS_CDR_RW_SPARE0_RX_CDR_SPARE_DIG2ANA_BF_MSK (0x0003FFFF)
#define PMA_RX_MGS_CDR_RW_SPARE0_RX_CDR_SPARE_DIG2ANA_BF_DEF (0x00004000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_FINE_STATUS register description at address offset 0x624
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_fine_status
  * rx_cdr_fine_status
  */

typedef union {
  struct {
    uint32_t RX_CDR_FINE_PROP_CURR : 8;
    ///< ---
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_FILTER_ACCUM_SAMPLED : 16;
    ///< ---
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_fine_stat_reg_t;

#define PMA_RX_MGS_CDR_FINE_STAT_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CDR_FINE_STAT_RD_MASK (0x00ffffffU)
#define PMA_RX_MGS_CDR_FINE_STAT_WR_MASK (0x00000000U)


#define PMA_RX_MGS_CDR_FINE_STAT_RX_CDR_FINE_PROP_CURR_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_FINE_STAT_RX_CDR_FINE_PROP_CURR_BF_WID ( 8)
#define PMA_RX_MGS_CDR_FINE_STAT_RX_CDR_FINE_PROP_CURR_BF_MSK (0x000000FF)
#define PMA_RX_MGS_CDR_FINE_STAT_RX_CDR_FINE_PROP_CURR_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_FINE_STAT_RX_CDR_FILTER_ACCUM_SAMPLED_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_FINE_STAT_RX_CDR_FILTER_ACCUM_SAMPLED_BF_WID (16)
#define PMA_RX_MGS_CDR_FINE_STAT_RX_CDR_FILTER_ACCUM_SAMPLED_BF_MSK (0x00FFFF00)
#define PMA_RX_MGS_CDR_FINE_STAT_RX_CDR_FILTER_ACCUM_SAMPLED_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_BRKPPM_STATUS0 register description at address offset 0x628
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_brkppm_status0
  * rx_cdr_brkppm_status0
  */

typedef union {
  struct {
    uint32_t RX_CDR_ALL_TECH_PPM_COUNT_LATCH : 32;
    ///< ---
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_brkppm_stat0_reg_t;

#define PMA_RX_MGS_CDR_BRKPPM_STAT0_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CDR_BRKPPM_STAT0_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_CDR_BRKPPM_STAT0_WR_MASK (0x00000000U)


#define PMA_RX_MGS_CDR_BRKPPM_STAT0_RX_CDR_ALL_TECH_PPM_CNT_LATCH_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_BRKPPM_STAT0_RX_CDR_ALL_TECH_PPM_CNT_LATCH_BF_WID (32)
#define PMA_RX_MGS_CDR_BRKPPM_STAT0_RX_CDR_ALL_TECH_PPM_CNT_LATCH_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MGS_CDR_BRKPPM_STAT0_RX_CDR_ALL_TECH_PPM_CNT_LATCH_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_BRKPPM_STATUS1 register description at address offset 0x62c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_brkppm_status1
  * rx_cdr_brkppm_status1
  */

typedef union {
  struct {
    uint32_t RX_CDR_REF_PPM_COUNT_LATCH : 32;
    ///< ---
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_brkppm_stat1_reg_t;

#define PMA_RX_MGS_CDR_BRKPPM_STAT1_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CDR_BRKPPM_STAT1_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_CDR_BRKPPM_STAT1_WR_MASK (0x00000000U)


#define PMA_RX_MGS_CDR_BRKPPM_STAT1_RX_CDR_REF_PPM_CNT_LATCH_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_BRKPPM_STAT1_RX_CDR_REF_PPM_CNT_LATCH_BF_WID (32)
#define PMA_RX_MGS_CDR_BRKPPM_STAT1_RX_CDR_REF_PPM_CNT_LATCH_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MGS_CDR_BRKPPM_STAT1_RX_CDR_REF_PPM_CNT_LATCH_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_BRKPPM_STATUS2 register description at address offset 0x630
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_brkppm_status2
  * rx_cdr_brkppm_status2
  */

typedef union {
  struct {
    uint32_t RX_CDR_ETH_PMD_PPM_RAW_CNT : 32;
    ///< ---
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_brkppm_stat2_reg_t;

#define PMA_RX_MGS_CDR_BRKPPM_STAT2_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CDR_BRKPPM_STAT2_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_CDR_BRKPPM_STAT2_WR_MASK (0x00000000U)


#define PMA_RX_MGS_CDR_BRKPPM_STAT2_RX_CDR_ETH_PMD_PPM_RAW_CNT_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_BRKPPM_STAT2_RX_CDR_ETH_PMD_PPM_RAW_CNT_BF_WID (32)
#define PMA_RX_MGS_CDR_BRKPPM_STAT2_RX_CDR_ETH_PMD_PPM_RAW_CNT_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MGS_CDR_BRKPPM_STAT2_RX_CDR_ETH_PMD_PPM_RAW_CNT_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_UXPPM_STATUS register description at address offset 0x634
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_uxppm_status
  * rx_cdr_uxppm_status
  */

typedef union {
  struct {
    uint32_t RX_CDR_PPMREINIT_ACK : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_REGPPMLOCKSTATUS : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t RX_CDR_PPMLOCKSTATUS_STICKY : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t RX_CDR_LOCK_LOST_STICKY : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t RX_CDR_LOCK_RECOVERY : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_uxppm_stat_reg_t;

#define PMA_RX_MGS_CDR_UXPPM_STAT_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CDR_UXPPM_STAT_RD_MASK (0x0000001fU)
#define PMA_RX_MGS_CDR_UXPPM_STAT_WR_MASK (0x00000000U)


#define PMA_RX_MGS_CDR_UXPPM_STAT_RX_CDR_PPMREINIT_ACK_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_UXPPM_STAT_RX_CDR_PPMREINIT_ACK_BF_WID ( 1)
#define PMA_RX_MGS_CDR_UXPPM_STAT_RX_CDR_PPMREINIT_ACK_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_UXPPM_STAT_RX_CDR_PPMREINIT_ACK_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_UXPPM_STAT_RX_CDR_REGPPMLOCKSTAT_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_UXPPM_STAT_RX_CDR_REGPPMLOCKSTAT_BF_WID ( 1)
#define PMA_RX_MGS_CDR_UXPPM_STAT_RX_CDR_REGPPMLOCKSTAT_BF_MSK (0x00000002)
#define PMA_RX_MGS_CDR_UXPPM_STAT_RX_CDR_REGPPMLOCKSTAT_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_UXPPM_STAT_RX_CDR_PPMLOCKSTAT_STICKY_BF_OFF ( 2)
#define PMA_RX_MGS_CDR_UXPPM_STAT_RX_CDR_PPMLOCKSTAT_STICKY_BF_WID ( 1)
#define PMA_RX_MGS_CDR_UXPPM_STAT_RX_CDR_PPMLOCKSTAT_STICKY_BF_MSK (0x00000004)
#define PMA_RX_MGS_CDR_UXPPM_STAT_RX_CDR_PPMLOCKSTAT_STICKY_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_UXPPM_STAT_RX_CDR_LOCK_LOST_STICKY_BF_OFF ( 3)
#define PMA_RX_MGS_CDR_UXPPM_STAT_RX_CDR_LOCK_LOST_STICKY_BF_WID ( 1)
#define PMA_RX_MGS_CDR_UXPPM_STAT_RX_CDR_LOCK_LOST_STICKY_BF_MSK (0x00000008)
#define PMA_RX_MGS_CDR_UXPPM_STAT_RX_CDR_LOCK_LOST_STICKY_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_UXPPM_STAT_RX_CDR_LOCK_RECOVERY_BF_OFF ( 4)
#define PMA_RX_MGS_CDR_UXPPM_STAT_RX_CDR_LOCK_RECOVERY_BF_WID ( 1)
#define PMA_RX_MGS_CDR_UXPPM_STAT_RX_CDR_LOCK_RECOVERY_BF_MSK (0x00000010)
#define PMA_RX_MGS_CDR_UXPPM_STAT_RX_CDR_LOCK_RECOVERY_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_UXPPM_TEST_0 register description at address offset 0x638
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_uxppm_test_0
  * rx_cdr_uxppm_test
  */

typedef union {
  struct {
    uint32_t RX_CDR_TSTPPMFREQERR : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_TSTPPMSMPLCOUNT : 17;
    ///< ---
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_uxppm_test_0_reg_t;

#define PMA_RX_MGS_CDR_UXPPM_TEST_0_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CDR_UXPPM_TEST_0_RD_MASK (0x0003ffffU)
#define PMA_RX_MGS_CDR_UXPPM_TEST_0_WR_MASK (0x00000000U)


#define PMA_RX_MGS_CDR_UXPPM_TEST_0_RX_CDR_TSTPPMFREQERR_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_UXPPM_TEST_0_RX_CDR_TSTPPMFREQERR_BF_WID ( 1)
#define PMA_RX_MGS_CDR_UXPPM_TEST_0_RX_CDR_TSTPPMFREQERR_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_UXPPM_TEST_0_RX_CDR_TSTPPMFREQERR_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_UXPPM_TEST_0_RX_CDR_TSTPPMSMPLCNT_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_UXPPM_TEST_0_RX_CDR_TSTPPMSMPLCNT_BF_WID (17)
#define PMA_RX_MGS_CDR_UXPPM_TEST_0_RX_CDR_TSTPPMSMPLCNT_BF_MSK (0x0003FFFE)
#define PMA_RX_MGS_CDR_UXPPM_TEST_0_RX_CDR_TSTPPMSMPLCNT_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_UXPPM_TEST_1 register description at address offset 0x63c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_uxppm_test_1
  * rx_cdr_uxppm_test
  */

typedef union {
  struct {
    uint32_t RX_CDR_TSTPPMDRIFTCOUNT : 17;
    ///< ---
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_uxppm_test_1_reg_t;

#define PMA_RX_MGS_CDR_UXPPM_TEST_1_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CDR_UXPPM_TEST_1_RD_MASK (0x0001ffffU)
#define PMA_RX_MGS_CDR_UXPPM_TEST_1_WR_MASK (0x00000000U)


#define PMA_RX_MGS_CDR_UXPPM_TEST_1_RX_CDR_TSTPPMDRIFTCNT_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_UXPPM_TEST_1_RX_CDR_TSTPPMDRIFTCNT_BF_WID (17)
#define PMA_RX_MGS_CDR_UXPPM_TEST_1_RX_CDR_TSTPPMDRIFTCNT_BF_MSK (0x0001FFFF)
#define PMA_RX_MGS_CDR_UXPPM_TEST_1_RX_CDR_TSTPPMDRIFTCNT_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_CALIB_STATUS register description at address offset 0x640
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_calib_status
  * rx_cdr_calib_status
  */

typedef union {
  struct {
    uint32_t RX_CDR_AFC_CALIB_DONE : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_DITH_KVCC_ADAPT_EN_STICKY : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t RX_CDR_FBDIV_UPDATE_ALLOWED_H : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t RX_CDR_FINE_FLL_CALIB_DONE : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t RX_CDR_SCCALDONE : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t RX_CDR_SC_EN : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_calib_stat_reg_t;

#define PMA_RX_MGS_CDR_CALIB_STAT_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CDR_CALIB_STAT_RD_MASK (0x0000003fU)
#define PMA_RX_MGS_CDR_CALIB_STAT_WR_MASK (0x00000000U)


#define PMA_RX_MGS_CDR_CALIB_STAT_RX_CDR_AFC_CALIB_DONE_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_CALIB_STAT_RX_CDR_AFC_CALIB_DONE_BF_WID ( 1)
#define PMA_RX_MGS_CDR_CALIB_STAT_RX_CDR_AFC_CALIB_DONE_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_CALIB_STAT_RX_CDR_AFC_CALIB_DONE_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_CALIB_STAT_RX_CDR_DITH_KVCC_ADAPT_EN_STICKY_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_CALIB_STAT_RX_CDR_DITH_KVCC_ADAPT_EN_STICKY_BF_WID ( 1)
#define PMA_RX_MGS_CDR_CALIB_STAT_RX_CDR_DITH_KVCC_ADAPT_EN_STICKY_BF_MSK (0x00000002)
#define PMA_RX_MGS_CDR_CALIB_STAT_RX_CDR_DITH_KVCC_ADAPT_EN_STICKY_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_CALIB_STAT_RX_CDR_FBDIV_UPDATE_ALLOWED_H_BF_OFF ( 2)
#define PMA_RX_MGS_CDR_CALIB_STAT_RX_CDR_FBDIV_UPDATE_ALLOWED_H_BF_WID ( 1)
#define PMA_RX_MGS_CDR_CALIB_STAT_RX_CDR_FBDIV_UPDATE_ALLOWED_H_BF_MSK (0x00000004)
#define PMA_RX_MGS_CDR_CALIB_STAT_RX_CDR_FBDIV_UPDATE_ALLOWED_H_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_CALIB_STAT_RX_CDR_FINE_FLL_CALIB_DONE_BF_OFF ( 3)
#define PMA_RX_MGS_CDR_CALIB_STAT_RX_CDR_FINE_FLL_CALIB_DONE_BF_WID ( 1)
#define PMA_RX_MGS_CDR_CALIB_STAT_RX_CDR_FINE_FLL_CALIB_DONE_BF_MSK (0x00000008)
#define PMA_RX_MGS_CDR_CALIB_STAT_RX_CDR_FINE_FLL_CALIB_DONE_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_CALIB_STAT_RX_CDR_SCCALDONE_BF_OFF ( 4)
#define PMA_RX_MGS_CDR_CALIB_STAT_RX_CDR_SCCALDONE_BF_WID ( 1)
#define PMA_RX_MGS_CDR_CALIB_STAT_RX_CDR_SCCALDONE_BF_MSK (0x00000010)
#define PMA_RX_MGS_CDR_CALIB_STAT_RX_CDR_SCCALDONE_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_CALIB_STAT_RX_CDR_SC_EN_BF_OFF ( 5)
#define PMA_RX_MGS_CDR_CALIB_STAT_RX_CDR_SC_EN_BF_WID ( 1)
#define PMA_RX_MGS_CDR_CALIB_STAT_RX_CDR_SC_EN_BF_MSK (0x00000020)
#define PMA_RX_MGS_CDR_CALIB_STAT_RX_CDR_SC_EN_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_MEAS_STATUS register description at address offset 0x644
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_meas_status
  * rx_cdr_meas_status
  */

typedef union {
  struct {
    uint32_t RX_CDR_FREQ_MEAS_READY_RO : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_LOCKTIME_ERROR : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t RX_CDR_CDR_MUXED_LOCK : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t RX_CDR_CDR_PHASE_LOCK : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t RX_CDR_CDR_PHASE_LOCK_STICKY : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t RX_CDR_CDRUNLOCK_FLAG : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_meas_stat_reg_t;

#define PMA_RX_MGS_CDR_MEAS_STAT_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CDR_MEAS_STAT_RD_MASK (0x0000003fU)
#define PMA_RX_MGS_CDR_MEAS_STAT_WR_MASK (0x00000000U)


#define PMA_RX_MGS_CDR_MEAS_STAT_RX_CDR_FREQ_MEAS_READY_RO_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_MEAS_STAT_RX_CDR_FREQ_MEAS_READY_RO_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MEAS_STAT_RX_CDR_FREQ_MEAS_READY_RO_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_MEAS_STAT_RX_CDR_FREQ_MEAS_READY_RO_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MEAS_STAT_RX_CDR_LOCKTIME_ERR_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_MEAS_STAT_RX_CDR_LOCKTIME_ERR_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MEAS_STAT_RX_CDR_LOCKTIME_ERR_BF_MSK (0x00000002)
#define PMA_RX_MGS_CDR_MEAS_STAT_RX_CDR_LOCKTIME_ERR_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MEAS_STAT_RX_CDR_MUXED_LOCK_BF_OFF ( 2)
#define PMA_RX_MGS_CDR_MEAS_STAT_RX_CDR_MUXED_LOCK_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MEAS_STAT_RX_CDR_MUXED_LOCK_BF_MSK (0x00000004)
#define PMA_RX_MGS_CDR_MEAS_STAT_RX_CDR_MUXED_LOCK_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MEAS_STAT_RX_CDR_PHASE_LOCK_BF_OFF ( 3)
#define PMA_RX_MGS_CDR_MEAS_STAT_RX_CDR_PHASE_LOCK_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MEAS_STAT_RX_CDR_PHASE_LOCK_BF_MSK (0x00000008)
#define PMA_RX_MGS_CDR_MEAS_STAT_RX_CDR_PHASE_LOCK_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MEAS_STAT_RX_CDR_PHASE_LOCK_STICKY_BF_OFF ( 4)
#define PMA_RX_MGS_CDR_MEAS_STAT_RX_CDR_PHASE_LOCK_STICKY_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MEAS_STAT_RX_CDR_PHASE_LOCK_STICKY_BF_MSK (0x00000010)
#define PMA_RX_MGS_CDR_MEAS_STAT_RX_CDR_PHASE_LOCK_STICKY_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MEAS_STAT_RX_CDR_CDRUNLOCK_FLAG_BF_OFF ( 5)
#define PMA_RX_MGS_CDR_MEAS_STAT_RX_CDR_CDRUNLOCK_FLAG_BF_WID ( 1)
#define PMA_RX_MGS_CDR_MEAS_STAT_RX_CDR_CDRUNLOCK_FLAG_BF_MSK (0x00000020)
#define PMA_RX_MGS_CDR_MEAS_STAT_RX_CDR_CDRUNLOCK_FLAG_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_TIME2LOCK_STATUS register description at address offset 0x648
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_time2lock_status
  * rx_cdr_time2lock_status
  */

typedef union {
  struct {
    uint32_t RX_CDR_FIRST : 14;
    ///< ---
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_LAST : 14;
    ///< ---
    ///< AccessType="RO/V" BitOffset="14" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_time2lock_stat_reg_t;

#define PMA_RX_MGS_CDR_TIME2LOCK_STAT_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CDR_TIME2LOCK_STAT_RD_MASK (0x0fffffffU)
#define PMA_RX_MGS_CDR_TIME2LOCK_STAT_WR_MASK (0x00000000U)


#define PMA_RX_MGS_CDR_TIME2LOCK_STAT_RX_CDR_FIRST_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_TIME2LOCK_STAT_RX_CDR_FIRST_BF_WID (14)
#define PMA_RX_MGS_CDR_TIME2LOCK_STAT_RX_CDR_FIRST_BF_MSK (0x00003FFF)
#define PMA_RX_MGS_CDR_TIME2LOCK_STAT_RX_CDR_FIRST_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_TIME2LOCK_STAT_RX_CDR_LAST_BF_OFF (14)
#define PMA_RX_MGS_CDR_TIME2LOCK_STAT_RX_CDR_LAST_BF_WID (14)
#define PMA_RX_MGS_CDR_TIME2LOCK_STAT_RX_CDR_LAST_BF_MSK (0x0FFFC000)
#define PMA_RX_MGS_CDR_TIME2LOCK_STAT_RX_CDR_LAST_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_FRACDIV_STATUS register description at address offset 0x64c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_fracdiv_status
  * rx_cdr_fracdiv_status
  */

typedef union {
  struct {
    uint32_t RX_CDR_FRACDIV_SYNC : 32;
    ///< ---
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_fracdiv_stat_reg_t;

#define PMA_RX_MGS_CDR_FRACDIV_STAT_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CDR_FRACDIV_STAT_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_CDR_FRACDIV_STAT_WR_MASK (0x00000000U)


#define PMA_RX_MGS_CDR_FRACDIV_STAT_RX_CDR_FRACDIV_SYNC_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_FRACDIV_STAT_RX_CDR_FRACDIV_SYNC_BF_WID (32)
#define PMA_RX_MGS_CDR_FRACDIV_STAT_RX_CDR_FRACDIV_SYNC_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MGS_CDR_FRACDIV_STAT_RX_CDR_FRACDIV_SYNC_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_MISC0_STATUS register description at address offset 0x650
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_misc0_status
  * rx_cdr_misc0_status
  */

typedef union {
  struct {
    uint32_t RX_CDR_FREQ_MEAS : 20;
    ///< ---
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_FEEDFWRDGAIN_SHIFT : 2;
    ///< ---
    ///< AccessType="RO/V" BitOffset="20" ResetValue="0x0"
    uint32_t RX_CDR_SC_CALIB_CODE : 4;
    ///< ---
    ///< AccessType="RO/V" BitOffset="22" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="26" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_misc0_stat_reg_t;

#define PMA_RX_MGS_CDR_MISC0_STAT_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CDR_MISC0_STAT_RD_MASK (0x03ffffffU)
#define PMA_RX_MGS_CDR_MISC0_STAT_WR_MASK (0x00000000U)


#define PMA_RX_MGS_CDR_MISC0_STAT_RX_CDR_FREQ_MEAS_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_MISC0_STAT_RX_CDR_FREQ_MEAS_BF_WID (20)
#define PMA_RX_MGS_CDR_MISC0_STAT_RX_CDR_FREQ_MEAS_BF_MSK (0x000FFFFF)
#define PMA_RX_MGS_CDR_MISC0_STAT_RX_CDR_FREQ_MEAS_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MISC0_STAT_RX_CDR_FEEDFWRDGAIN_SHIFT_BF_OFF (20)
#define PMA_RX_MGS_CDR_MISC0_STAT_RX_CDR_FEEDFWRDGAIN_SHIFT_BF_WID ( 2)
#define PMA_RX_MGS_CDR_MISC0_STAT_RX_CDR_FEEDFWRDGAIN_SHIFT_BF_MSK (0x00300000)
#define PMA_RX_MGS_CDR_MISC0_STAT_RX_CDR_FEEDFWRDGAIN_SHIFT_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MISC0_STAT_RX_CDR_SC_CALIB_CODE_BF_OFF (22)
#define PMA_RX_MGS_CDR_MISC0_STAT_RX_CDR_SC_CALIB_CODE_BF_WID ( 4)
#define PMA_RX_MGS_CDR_MISC0_STAT_RX_CDR_SC_CALIB_CODE_BF_MSK (0x03C00000)
#define PMA_RX_MGS_CDR_MISC0_STAT_RX_CDR_SC_CALIB_CODE_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_MISC1_STATUS register description at address offset 0x654
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_misc1_status
  * rx_cdr_misc1_status
  */

typedef union {
  struct {
    uint32_t RX_CDR_FEEDFWRDGAIN_CAL : 10;
    ///< ---
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_FINE_FLL_BIN_CODE : 8;
    ///< ---
    ///< AccessType="RO/V" BitOffset="10" ResetValue="0x0"
    uint32_t RX_CDR_FINEOUT_LOCK : 8;
    ///< ---
    ///< AccessType="RO/V" BitOffset="18" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="26" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_misc1_stat_reg_t;

#define PMA_RX_MGS_CDR_MISC1_STAT_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CDR_MISC1_STAT_RD_MASK (0x03ffffffU)
#define PMA_RX_MGS_CDR_MISC1_STAT_WR_MASK (0x00000000U)


#define PMA_RX_MGS_CDR_MISC1_STAT_RX_CDR_FEEDFWRDGAIN_CAL_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_MISC1_STAT_RX_CDR_FEEDFWRDGAIN_CAL_BF_WID (10)
#define PMA_RX_MGS_CDR_MISC1_STAT_RX_CDR_FEEDFWRDGAIN_CAL_BF_MSK (0x000003FF)
#define PMA_RX_MGS_CDR_MISC1_STAT_RX_CDR_FEEDFWRDGAIN_CAL_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MISC1_STAT_RX_CDR_FINE_FLL_BIN_CODE_BF_OFF (10)
#define PMA_RX_MGS_CDR_MISC1_STAT_RX_CDR_FINE_FLL_BIN_CODE_BF_WID ( 8)
#define PMA_RX_MGS_CDR_MISC1_STAT_RX_CDR_FINE_FLL_BIN_CODE_BF_MSK (0x0003FC00)
#define PMA_RX_MGS_CDR_MISC1_STAT_RX_CDR_FINE_FLL_BIN_CODE_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MISC1_STAT_RX_CDR_FINEOUT_LOCK_BF_OFF (18)
#define PMA_RX_MGS_CDR_MISC1_STAT_RX_CDR_FINEOUT_LOCK_BF_WID ( 8)
#define PMA_RX_MGS_CDR_MISC1_STAT_RX_CDR_FINEOUT_LOCK_BF_MSK (0x03FC0000)
#define PMA_RX_MGS_CDR_MISC1_STAT_RX_CDR_FINEOUT_LOCK_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_CSELFINE_STATUS register description at address offset 0x658
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_cselfine_status
  * rx_cdr_cselfine_status
  */

typedef union {
  struct {
    uint32_t RX_CDR_CSELFINE : 8;
    ///< ---
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_MAX_CSELFINE : 8;
    ///< ---
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t RX_CDR_MIN_CSELFINE : 8;
    ///< ---
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_cselfine_stat_reg_t;

#define PMA_RX_MGS_CDR_CSELFINE_STAT_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CDR_CSELFINE_STAT_RD_MASK (0x00ffffffU)
#define PMA_RX_MGS_CDR_CSELFINE_STAT_WR_MASK (0x00000000U)


#define PMA_RX_MGS_CDR_CSELFINE_STAT_RX_CDR_CSELFINE_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_CSELFINE_STAT_RX_CDR_CSELFINE_BF_WID ( 8)
#define PMA_RX_MGS_CDR_CSELFINE_STAT_RX_CDR_CSELFINE_BF_MSK (0x000000FF)
#define PMA_RX_MGS_CDR_CSELFINE_STAT_RX_CDR_CSELFINE_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_CSELFINE_STAT_RX_CDR_MAX_CSELFINE_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_CSELFINE_STAT_RX_CDR_MAX_CSELFINE_BF_WID ( 8)
#define PMA_RX_MGS_CDR_CSELFINE_STAT_RX_CDR_MAX_CSELFINE_BF_MSK (0x0000FF00)
#define PMA_RX_MGS_CDR_CSELFINE_STAT_RX_CDR_MAX_CSELFINE_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_CSELFINE_STAT_RX_CDR_MIN_CSELFINE_BF_OFF (16)
#define PMA_RX_MGS_CDR_CSELFINE_STAT_RX_CDR_MIN_CSELFINE_BF_WID ( 8)
#define PMA_RX_MGS_CDR_CSELFINE_STAT_RX_CDR_MIN_CSELFINE_BF_MSK (0x00FF0000)
#define PMA_RX_MGS_CDR_CSELFINE_STAT_RX_CDR_MIN_CSELFINE_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_REFGEN_STATUS register description at address offset 0x65c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_refgen_status
  * rx_cdr_refgen_status
  */

typedef union {
  struct {
    uint32_t RX_CDR_REFGEN_SEL_CODE : 8;
    ///< ---
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_refgen_stat_reg_t;

#define PMA_RX_MGS_CDR_REFGEN_STAT_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CDR_REFGEN_STAT_RD_MASK (0x000000ffU)
#define PMA_RX_MGS_CDR_REFGEN_STAT_WR_MASK (0x00000000U)


#define PMA_RX_MGS_CDR_REFGEN_STAT_RX_CDR_REFGEN_SEL_CODE_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_REFGEN_STAT_RX_CDR_REFGEN_SEL_CODE_BF_WID ( 8)
#define PMA_RX_MGS_CDR_REFGEN_STAT_RX_CDR_REFGEN_SEL_CODE_BF_MSK (0x000000FF)
#define PMA_RX_MGS_CDR_REFGEN_STAT_RX_CDR_REFGEN_SEL_CODE_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_MISC3_STATUS register description at address offset 0x660
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_misc3_status
  * rx_cdr_misc3_status
  */

typedef union {
  struct {
    uint32_t RX_CDR_AFC_BIN_CODE : 9;
    ///< ---
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_FBDIVRATIO_SYNC : 10;
    ///< ---
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t RX_CDR_FILTER_FRAC : 9;
    ///< ---
    ///< AccessType="RO/V" BitOffset="19" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_misc3_stat_reg_t;

#define PMA_RX_MGS_CDR_MISC3_STAT_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CDR_MISC3_STAT_RD_MASK (0x0fffffffU)
#define PMA_RX_MGS_CDR_MISC3_STAT_WR_MASK (0x00000000U)


#define PMA_RX_MGS_CDR_MISC3_STAT_RX_CDR_AFC_BIN_CODE_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_MISC3_STAT_RX_CDR_AFC_BIN_CODE_BF_WID ( 9)
#define PMA_RX_MGS_CDR_MISC3_STAT_RX_CDR_AFC_BIN_CODE_BF_MSK (0x000001FF)
#define PMA_RX_MGS_CDR_MISC3_STAT_RX_CDR_AFC_BIN_CODE_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MISC3_STAT_RX_CDR_FBDIVRATIO_SYNC_BF_OFF ( 9)
#define PMA_RX_MGS_CDR_MISC3_STAT_RX_CDR_FBDIVRATIO_SYNC_BF_WID (10)
#define PMA_RX_MGS_CDR_MISC3_STAT_RX_CDR_FBDIVRATIO_SYNC_BF_MSK (0x0007FE00)
#define PMA_RX_MGS_CDR_MISC3_STAT_RX_CDR_FBDIVRATIO_SYNC_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_MISC3_STAT_RX_CDR_FILTER_FRAC_BF_OFF (19)
#define PMA_RX_MGS_CDR_MISC3_STAT_RX_CDR_FILTER_FRAC_BF_WID ( 9)
#define PMA_RX_MGS_CDR_MISC3_STAT_RX_CDR_FILTER_FRAC_BF_MSK (0x0FF80000)
#define PMA_RX_MGS_CDR_MISC3_STAT_RX_CDR_FILTER_FRAC_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_KVCC_STATUS_0 register description at address offset 0x664
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_kvcc_status_0
  * rx_cdr_kvcc_status
  */

typedef union {
  struct {
    uint32_t RX_CDR_KVCC_CALIB_CODE : 9;
    ///< ---
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_KVCC_FULL_BIN_RO : 9;
    ///< ---
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_kvcc_stat_0_reg_t;

#define PMA_RX_MGS_CDR_KVCC_STAT_0_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CDR_KVCC_STAT_0_RD_MASK (0x0003ffffU)
#define PMA_RX_MGS_CDR_KVCC_STAT_0_WR_MASK (0x00000000U)


#define PMA_RX_MGS_CDR_KVCC_STAT_0_RX_CDR_KVCC_CALIB_CODE_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_KVCC_STAT_0_RX_CDR_KVCC_CALIB_CODE_BF_WID ( 9)
#define PMA_RX_MGS_CDR_KVCC_STAT_0_RX_CDR_KVCC_CALIB_CODE_BF_MSK (0x000001FF)
#define PMA_RX_MGS_CDR_KVCC_STAT_0_RX_CDR_KVCC_CALIB_CODE_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC_STAT_0_RX_CDR_KVCC_FULL_BIN_RO_BF_OFF ( 9)
#define PMA_RX_MGS_CDR_KVCC_STAT_0_RX_CDR_KVCC_FULL_BIN_RO_BF_WID ( 9)
#define PMA_RX_MGS_CDR_KVCC_STAT_0_RX_CDR_KVCC_FULL_BIN_RO_BF_MSK (0x0003FE00)
#define PMA_RX_MGS_CDR_KVCC_STAT_0_RX_CDR_KVCC_FULL_BIN_RO_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_KVCC_STATUS_1 register description at address offset 0x668
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_kvcc_status_1
  * rx_cdr_kvcc_status
  */

typedef union {
  struct {
    uint32_t RX_CDR_KVCC_LAST_MEAS : 8;
    ///< ---
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_REFGEN_SEL_CODE_AT_CALIB_DONE : 8;
    ///< ---
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_kvcc_stat_1_reg_t;

#define PMA_RX_MGS_CDR_KVCC_STAT_1_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CDR_KVCC_STAT_1_RD_MASK (0x0000ffffU)
#define PMA_RX_MGS_CDR_KVCC_STAT_1_WR_MASK (0x00000000U)


#define PMA_RX_MGS_CDR_KVCC_STAT_1_RX_CDR_KVCC_LAST_MEAS_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_KVCC_STAT_1_RX_CDR_KVCC_LAST_MEAS_BF_WID ( 8)
#define PMA_RX_MGS_CDR_KVCC_STAT_1_RX_CDR_KVCC_LAST_MEAS_BF_MSK (0x000000FF)
#define PMA_RX_MGS_CDR_KVCC_STAT_1_RX_CDR_KVCC_LAST_MEAS_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_KVCC_STAT_1_RX_CDR_REFGEN_SEL_CODE_AT_CALIB_DONE_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_KVCC_STAT_1_RX_CDR_REFGEN_SEL_CODE_AT_CALIB_DONE_BF_WID ( 8)
#define PMA_RX_MGS_CDR_KVCC_STAT_1_RX_CDR_REFGEN_SEL_CODE_AT_CALIB_DONE_BF_MSK (0x0000FF00)
#define PMA_RX_MGS_CDR_KVCC_STAT_1_RX_CDR_REFGEN_SEL_CODE_AT_CALIB_DONE_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_FEEDFWRDGAIN_STATUS register description at address offset 0x66c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_feedfwrdgain_status
  * rx_cdr_feedfwrdgain_status
  */

typedef union {
  struct {
    uint32_t RX_CDR_MAX_FEEDFWRDGAIN : 10;
    ///< ---
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_MIN_FEEDFWRDGAIN : 10;
    ///< ---
    ///< AccessType="RO/V" BitOffset="10" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_feedfwrdgain_stat_reg_t;

#define PMA_RX_MGS_CDR_FEEDFWRDGAIN_STAT_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CDR_FEEDFWRDGAIN_STAT_RD_MASK (0x000fffffU)
#define PMA_RX_MGS_CDR_FEEDFWRDGAIN_STAT_WR_MASK (0x00000000U)


#define PMA_RX_MGS_CDR_FEEDFWRDGAIN_STAT_RX_CDR_MAX_FEEDFWRDGAIN_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_FEEDFWRDGAIN_STAT_RX_CDR_MAX_FEEDFWRDGAIN_BF_WID (10)
#define PMA_RX_MGS_CDR_FEEDFWRDGAIN_STAT_RX_CDR_MAX_FEEDFWRDGAIN_BF_MSK (0x000003FF)
#define PMA_RX_MGS_CDR_FEEDFWRDGAIN_STAT_RX_CDR_MAX_FEEDFWRDGAIN_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_FEEDFWRDGAIN_STAT_RX_CDR_MIN_FEEDFWRDGAIN_BF_OFF (10)
#define PMA_RX_MGS_CDR_FEEDFWRDGAIN_STAT_RX_CDR_MIN_FEEDFWRDGAIN_BF_WID (10)
#define PMA_RX_MGS_CDR_FEEDFWRDGAIN_STAT_RX_CDR_MIN_FEEDFWRDGAIN_BF_MSK (0x000FFC00)
#define PMA_RX_MGS_CDR_FEEDFWRDGAIN_STAT_RX_CDR_MIN_FEEDFWRDGAIN_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_CAPTURE_CTRL register description at address offset 0x670
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_capture_ctrl
  * rx_cdr_capture_ctrl
  */

typedef union {
  struct {
    uint32_t RX_CDR_VOTE_CAPTURE : 1;
    ///< Registers in rx_cdr_vote_status are changing quickly and on other
    ///< clock domains. Trigger this bit (write to 1) to capture the current
    ///< values, will auto clear itself when capture is complete.
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_CODE_CAPTURE : 1;
    ///< Registers in rx_cdr_code_status are changing quickly and on other
    ///< clock domains. Trigger this bit (write to 1) to capture the current
    ///< values, will auto clear itself when capture is complete.
    ///< AccessType="RW/V" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_cap_ctrl_reg_t;

#define PMA_RX_MGS_CDR_CAP_CTRL_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CDR_CAP_CTRL_RD_MASK (0x00000003U)
#define PMA_RX_MGS_CDR_CAP_CTRL_WR_MASK (0x00000003U)


///< Registers in rx_cdr_vote_status are changing quickly and on other
///< clock domains. Trigger this bit (write to 1) to capture the current
///< values, will auto clear itself when capture is complete.
#define PMA_RX_MGS_CDR_CAP_CTRL_RX_CDR_VOTE_CAP_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_CAP_CTRL_RX_CDR_VOTE_CAP_BF_WID ( 1)
#define PMA_RX_MGS_CDR_CAP_CTRL_RX_CDR_VOTE_CAP_BF_MSK (0x00000001)
#define PMA_RX_MGS_CDR_CAP_CTRL_RX_CDR_VOTE_CAP_BF_DEF (0x00000000)

///< Registers in rx_cdr_code_status are changing quickly and on other
///< clock domains. Trigger this bit (write to 1) to capture the current
///< values, will auto clear itself when capture is complete.
#define PMA_RX_MGS_CDR_CAP_CTRL_RX_CDR_CODE_CAP_BF_OFF ( 1)
#define PMA_RX_MGS_CDR_CAP_CTRL_RX_CDR_CODE_CAP_BF_WID ( 1)
#define PMA_RX_MGS_CDR_CAP_CTRL_RX_CDR_CODE_CAP_BF_MSK (0x00000002)
#define PMA_RX_MGS_CDR_CAP_CTRL_RX_CDR_CODE_CAP_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_VOTE_STATUS register description at address offset 0x674
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_vote_status
  * rx_cdr_vote_status
  */

typedef union {
  struct {
    uint32_t RX_CDR_PFD_PD_VOTE : 7;
    ///< ---
    ///< AccessType="RO/C/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t RX_CDR_BB_PD_VOTE : 7;
    ///< ---
    ///< AccessType="RO/C/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t RX_CDR_BOUD_PD_VOTE : 7;
    ///< ---
    ///< AccessType="RO/C/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 9;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_vote_stat_reg_t;

#define PMA_RX_MGS_CDR_VOTE_STAT_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CDR_VOTE_STAT_RD_MASK (0x007f7f7fU)
#define PMA_RX_MGS_CDR_VOTE_STAT_WR_MASK (0x00000000U)


#define PMA_RX_MGS_CDR_VOTE_STAT_RX_CDR_PFD_PD_VOTE_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_VOTE_STAT_RX_CDR_PFD_PD_VOTE_BF_WID ( 7)
#define PMA_RX_MGS_CDR_VOTE_STAT_RX_CDR_PFD_PD_VOTE_BF_MSK (0x0000007F)
#define PMA_RX_MGS_CDR_VOTE_STAT_RX_CDR_PFD_PD_VOTE_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_VOTE_STAT_RX_CDR_BB_PD_VOTE_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_VOTE_STAT_RX_CDR_BB_PD_VOTE_BF_WID ( 7)
#define PMA_RX_MGS_CDR_VOTE_STAT_RX_CDR_BB_PD_VOTE_BF_MSK (0x00007F00)
#define PMA_RX_MGS_CDR_VOTE_STAT_RX_CDR_BB_PD_VOTE_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_VOTE_STAT_RX_CDR_BOUD_PD_VOTE_BF_OFF (16)
#define PMA_RX_MGS_CDR_VOTE_STAT_RX_CDR_BOUD_PD_VOTE_BF_WID ( 7)
#define PMA_RX_MGS_CDR_VOTE_STAT_RX_CDR_BOUD_PD_VOTE_BF_MSK (0x007F0000)
#define PMA_RX_MGS_CDR_VOTE_STAT_RX_CDR_BOUD_PD_VOTE_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_CODE_STATUS register description at address offset 0x678
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_code_status
  * rx_cdr_code_status
  */

typedef union {
  struct {
    uint32_t RX_CDR_CSELFINE_CAPTURE : 8;
    ///< ---
    ///< AccessType="RO/C/V" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_LDODCO_VREF_SEL_CAPTURE : 6;
    ///< ---
    ///< AccessType="RO/C/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t RX_CDR_PKSNS_VREF_SEL_CAPTURE : 6;
    ///< ---
    ///< AccessType="RO/C/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_code_stat_reg_t;

#define PMA_RX_MGS_CDR_CODE_STAT_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CDR_CODE_STAT_RD_MASK (0x003f3fffU)
#define PMA_RX_MGS_CDR_CODE_STAT_WR_MASK (0x00000000U)


#define PMA_RX_MGS_CDR_CODE_STAT_RX_CDR_CSELFINE_CAP_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_CODE_STAT_RX_CDR_CSELFINE_CAP_BF_WID ( 8)
#define PMA_RX_MGS_CDR_CODE_STAT_RX_CDR_CSELFINE_CAP_BF_MSK (0x000000FF)
#define PMA_RX_MGS_CDR_CODE_STAT_RX_CDR_CSELFINE_CAP_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_CODE_STAT_RX_CDR_LDODCO_VREF_SEL_CAP_BF_OFF ( 8)
#define PMA_RX_MGS_CDR_CODE_STAT_RX_CDR_LDODCO_VREF_SEL_CAP_BF_WID ( 6)
#define PMA_RX_MGS_CDR_CODE_STAT_RX_CDR_LDODCO_VREF_SEL_CAP_BF_MSK (0x00003F00)
#define PMA_RX_MGS_CDR_CODE_STAT_RX_CDR_LDODCO_VREF_SEL_CAP_BF_DEF (0x00000000)

#define PMA_RX_MGS_CDR_CODE_STAT_RX_CDR_PKSNS_VREF_SEL_CAP_BF_OFF (16)
#define PMA_RX_MGS_CDR_CODE_STAT_RX_CDR_PKSNS_VREF_SEL_CAP_BF_WID ( 6)
#define PMA_RX_MGS_CDR_CODE_STAT_RX_CDR_PKSNS_VREF_SEL_CAP_BF_MSK (0x003F0000)
#define PMA_RX_MGS_CDR_CODE_STAT_RX_CDR_PKSNS_VREF_SEL_CAP_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_RO_SPARE_ANA2DIG register description at address offset 0x67c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_ro_spare_ana2dig
  * rx_cdr_ro_spare_ana2dig
  */

typedef union {
  struct {
    uint32_t RX_CDR_RO_SPARE_ANA2DIG : 8;
    ///< ---
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_ro_spare_ana2dig_reg_t;

#define PMA_RX_MGS_CDR_RO_SPARE_ANA2DIG_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CDR_RO_SPARE_ANA2DIG_RD_MASK (0x000000ffU)
#define PMA_RX_MGS_CDR_RO_SPARE_ANA2DIG_WR_MASK (0x00000000U)


#define PMA_RX_MGS_CDR_RO_SPARE_ANA2DIG_RX_CDR_RO_SPARE_ANA2DIG_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_RO_SPARE_ANA2DIG_RX_CDR_RO_SPARE_ANA2DIG_BF_WID ( 8)
#define PMA_RX_MGS_CDR_RO_SPARE_ANA2DIG_RX_CDR_RO_SPARE_ANA2DIG_BF_MSK (0x000000FF)
#define PMA_RX_MGS_CDR_RO_SPARE_ANA2DIG_RX_CDR_RO_SPARE_ANA2DIG_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_L2R_LOCKTIME register description at address offset 0x680
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_l2r_locktime
  * RxCDR Lock2Ref locktime
  */

typedef union {
  struct {
    uint32_t RX_CDR_L2R_LOCKTIME : 18;
    ///< RxCDR Lock-to-reference lock time.  Measure how long the RxCDR takes
    ///< to be in lock state from RxCDR enable
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_l2r_locktime_reg_t;

#define PMA_RX_MGS_CDR_L2R_LOCKTIME_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CDR_L2R_LOCKTIME_RD_MASK (0x0003ffffU)
#define PMA_RX_MGS_CDR_L2R_LOCKTIME_WR_MASK (0x00000000U)


///< RxCDR Lock-to-reference lock time.  Measure how long the RxCDR takes
///< to be in lock state from RxCDR enable
#define PMA_RX_MGS_CDR_L2R_LOCKTIME_RX_CDR_L2R_LOCKTIME_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_L2R_LOCKTIME_RX_CDR_L2R_LOCKTIME_BF_WID (18)
#define PMA_RX_MGS_CDR_L2R_LOCKTIME_RX_CDR_L2R_LOCKTIME_BF_MSK (0x0003FFFF)
#define PMA_RX_MGS_CDR_L2R_LOCKTIME_RX_CDR_L2R_LOCKTIME_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_L2D_LOCKTIME register description at address offset 0x684
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_l2d_locktime
  * RxCDR Lock2Dat locktime
  */

typedef union {
  struct {
    uint32_t RX_CDR_L2D_LOCKTIME : 18;
    ///< RxCDR Lock-to-data lock time.  Measure how long the RxCDR takes to
    ///< be in lock state from signal detected
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_l2d_locktime_reg_t;

#define PMA_RX_MGS_CDR_L2D_LOCKTIME_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CDR_L2D_LOCKTIME_RD_MASK (0x0003ffffU)
#define PMA_RX_MGS_CDR_L2D_LOCKTIME_WR_MASK (0x00000000U)


///< RxCDR Lock-to-data lock time.  Measure how long the RxCDR takes to
///< be in lock state from signal detected
#define PMA_RX_MGS_CDR_L2D_LOCKTIME_RX_CDR_L2D_LOCKTIME_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_L2D_LOCKTIME_RX_CDR_L2D_LOCKTIME_BF_WID (18)
#define PMA_RX_MGS_CDR_L2D_LOCKTIME_RX_CDR_L2D_LOCKTIME_BF_MSK (0x0003FFFF)
#define PMA_RX_MGS_CDR_L2D_LOCKTIME_RX_CDR_L2D_LOCKTIME_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_QPD_ACCUM_STATUS register description at address offset 0x688
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_qpd_accum_status
  * rx_cdr_qpd_accum_status
  */

typedef union {
  struct {
    uint32_t RX_CDR_QPD_ACCUM_RESULT : 16;
    ///< QPD Accumulator Result
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_QPD_ACCUM_DONE : 1;
    ///< QPD Accumulator Done
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_qpd_accum_stat_reg_t;

#define PMA_RX_MGS_CDR_QPD_ACCUM_STAT_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CDR_QPD_ACCUM_STAT_RD_MASK (0x0001ffffU)
#define PMA_RX_MGS_CDR_QPD_ACCUM_STAT_WR_MASK (0x00000000U)


///< QPD Accumulator Result
#define PMA_RX_MGS_CDR_QPD_ACCUM_STAT_RX_CDR_QPD_ACCUM_RSLT_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_QPD_ACCUM_STAT_RX_CDR_QPD_ACCUM_RSLT_BF_WID (16)
#define PMA_RX_MGS_CDR_QPD_ACCUM_STAT_RX_CDR_QPD_ACCUM_RSLT_BF_MSK (0x0000FFFF)
#define PMA_RX_MGS_CDR_QPD_ACCUM_STAT_RX_CDR_QPD_ACCUM_RSLT_BF_DEF (0x00000000)

///< QPD Accumulator Done
#define PMA_RX_MGS_CDR_QPD_ACCUM_STAT_RX_CDR_QPD_ACCUM_DONE_BF_OFF (16)
#define PMA_RX_MGS_CDR_QPD_ACCUM_STAT_RX_CDR_QPD_ACCUM_DONE_BF_WID ( 1)
#define PMA_RX_MGS_CDR_QPD_ACCUM_STAT_RX_CDR_QPD_ACCUM_DONE_BF_MSK (0x00010000)
#define PMA_RX_MGS_CDR_QPD_ACCUM_STAT_RX_CDR_QPD_ACCUM_DONE_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_BBPD_ACCUM_STATUS register description at address offset 0x68c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_bbpd_accum_status
  * rx_cdr_bbpd_accum_status
  */

typedef union {
  struct {
    uint32_t RX_CDR_BBPD_ACCUM_RESULT : 16;
    ///< BBPD Accumulator Result
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RX_CDR_BBPD_ACCUM_DONE : 1;
    ///< BBPD Accumulator Done
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_bbpd_accum_stat_reg_t;

#define PMA_RX_MGS_CDR_BBPD_ACCUM_STAT_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CDR_BBPD_ACCUM_STAT_RD_MASK (0x0001ffffU)
#define PMA_RX_MGS_CDR_BBPD_ACCUM_STAT_WR_MASK (0x00000000U)


///< BBPD Accumulator Result
#define PMA_RX_MGS_CDR_BBPD_ACCUM_STAT_RX_CDR_BBPD_ACCUM_RSLT_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_BBPD_ACCUM_STAT_RX_CDR_BBPD_ACCUM_RSLT_BF_WID (16)
#define PMA_RX_MGS_CDR_BBPD_ACCUM_STAT_RX_CDR_BBPD_ACCUM_RSLT_BF_MSK (0x0000FFFF)
#define PMA_RX_MGS_CDR_BBPD_ACCUM_STAT_RX_CDR_BBPD_ACCUM_RSLT_BF_DEF (0x00000000)

///< BBPD Accumulator Done
#define PMA_RX_MGS_CDR_BBPD_ACCUM_STAT_RX_CDR_BBPD_ACCUM_DONE_BF_OFF (16)
#define PMA_RX_MGS_CDR_BBPD_ACCUM_STAT_RX_CDR_BBPD_ACCUM_DONE_BF_WID ( 1)
#define PMA_RX_MGS_CDR_BBPD_ACCUM_STAT_RX_CDR_BBPD_ACCUM_DONE_BF_MSK (0x00010000)
#define PMA_RX_MGS_CDR_BBPD_ACCUM_STAT_RX_CDR_BBPD_ACCUM_DONE_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CDR_RO_SPARE register description at address offset 0x690
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cdr_ro_spare
  * rx_cdr_ro_spare
  */

typedef union {
  struct {
    uint32_t RX_CDR_RO_SPARE : 32;
    ///< ---
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_mgs_cdr_ro_spare_reg_t;

#define PMA_RX_MGS_CDR_RO_SPARE_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CDR_RO_SPARE_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_CDR_RO_SPARE_WR_MASK (0x00000000U)


#define PMA_RX_MGS_CDR_RO_SPARE_RX_CDR_RO_SPARE_BF_OFF ( 0)
#define PMA_RX_MGS_CDR_RO_SPARE_RX_CDR_RO_SPARE_BF_WID (32)
#define PMA_RX_MGS_CDR_RO_SPARE_RX_CDR_RO_SPARE_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MGS_CDR_RO_SPARE_RX_CDR_RO_SPARE_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_MODE_SEL_CFG0 register description at address offset 0x694
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_mode_sel_cfg0
  * Rx Mode Sel Config
  */

typedef union {
  struct {
    uint32_t RXGDIV_RATIO_MUXD0 : 4;
    ///< div rate 0-1; 1-2; 2-4; 3-8; 8-1.5; 9-3; A-6; B-1
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXNUM_OF_PREBUF_MUXD0 : 2;
    ///< Data Width # of aFEE Coefficient.  0-1; 1-2; 2-4; others-reserved
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RXPHD_SEL_MUXD0 : 3;
    ///< Phase detect scheme select: 0-Ana_alex; 1-Ana Qureshi; 2-Dig_alex;
    ///< 3-Dig_qureshi; others-reserved
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t RXDPHD_DATA_SRC_SEL_MUXD0 : 4;
    ///< Phase detect data source select: 0-dFFE output; 1-aFFE output; others-reserved
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t RXDATAPATH_SLICER_SRC_SEL_MUXD0 : 4;
    ///< Datapath slicer source select: 0-dFFE output; 1-aFFE output; 2-aFFE
    ///< output without fixed slicer thres aka NRZ_LP; others-reserved
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t RXMODULATION_SCHEME_MUXD0 : 1;
    ///< Rx Modulation Scheme: 0-NRZ; 1-PAM4
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t RXCFGLUT_SPARE0_MUXD0 : 3;
    ///< Spare0 - reserved for future used
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t RXCFGLUT_SPARE1_MUXD0 : 3;
    ///< Spare1 - reserved for future used
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t RXCFGLUT_SPARE2_MUXD0 : 2;
    ///< Spare2 - reserved for future used
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="26" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_mode_sel_cfg0_reg_t;

#define PMA_RX_MGS_MODE_SEL_CFG0_DEFAULT (0x00000000U)
#define PMA_RX_MGS_MODE_SEL_CFG0_RD_MASK (0x03ffffffU)
#define PMA_RX_MGS_MODE_SEL_CFG0_WR_MASK (0x03ffffffU)


///< div rate 0-1; 1-2; 2-4; 3-8; 8-1.5; 9-3; A-6; B-1
#define PMA_RX_MGS_MODE_SEL_CFG0_RXGDIV_RATIO_MUXD0_BF_OFF ( 0)
#define PMA_RX_MGS_MODE_SEL_CFG0_RXGDIV_RATIO_MUXD0_BF_WID ( 4)
#define PMA_RX_MGS_MODE_SEL_CFG0_RXGDIV_RATIO_MUXD0_BF_MSK (0x0000000F)
#define PMA_RX_MGS_MODE_SEL_CFG0_RXGDIV_RATIO_MUXD0_BF_DEF (0x00000000)

///< Data Width # of aFEE Coefficient.  0-1; 1-2; 2-4; others-reserved
#define PMA_RX_MGS_MODE_SEL_CFG0_RXNUM_OF_PREBUF_MUXD0_BF_OFF ( 4)
#define PMA_RX_MGS_MODE_SEL_CFG0_RXNUM_OF_PREBUF_MUXD0_BF_WID ( 2)
#define PMA_RX_MGS_MODE_SEL_CFG0_RXNUM_OF_PREBUF_MUXD0_BF_MSK (0x00000030)
#define PMA_RX_MGS_MODE_SEL_CFG0_RXNUM_OF_PREBUF_MUXD0_BF_DEF (0x00000000)

///< Phase detect scheme select: 0-Ana_alex; 1-Ana Qureshi; 2-Dig_alex;
///< 3-Dig_qureshi; others-reserved
#define PMA_RX_MGS_MODE_SEL_CFG0_RXPHD_SEL_MUXD0_BF_OFF ( 6)
#define PMA_RX_MGS_MODE_SEL_CFG0_RXPHD_SEL_MUXD0_BF_WID ( 3)
#define PMA_RX_MGS_MODE_SEL_CFG0_RXPHD_SEL_MUXD0_BF_MSK (0x000001C0)
#define PMA_RX_MGS_MODE_SEL_CFG0_RXPHD_SEL_MUXD0_BF_DEF (0x00000000)

///< Phase detect data source select: 0-dFFE output; 1-aFFE output; others-reserved
#define PMA_RX_MGS_MODE_SEL_CFG0_RXDPHD_DATA_SRC_SEL_MUXD0_BF_OFF ( 9)
#define PMA_RX_MGS_MODE_SEL_CFG0_RXDPHD_DATA_SRC_SEL_MUXD0_BF_WID ( 4)
#define PMA_RX_MGS_MODE_SEL_CFG0_RXDPHD_DATA_SRC_SEL_MUXD0_BF_MSK (0x00001E00)
#define PMA_RX_MGS_MODE_SEL_CFG0_RXDPHD_DATA_SRC_SEL_MUXD0_BF_DEF (0x00000000)

///< Datapath slicer source select: 0-dFFE output; 1-aFFE output; 2-aFFE
///< output without fixed slicer thres aka NRZ_LP; others-reserved
#define PMA_RX_MGS_MODE_SEL_CFG0_RXDATAPATH_SLICER_SRC_SEL_MUXD0_BF_OFF (13)
#define PMA_RX_MGS_MODE_SEL_CFG0_RXDATAPATH_SLICER_SRC_SEL_MUXD0_BF_WID ( 4)
#define PMA_RX_MGS_MODE_SEL_CFG0_RXDATAPATH_SLICER_SRC_SEL_MUXD0_BF_MSK (0x0001E000)
#define PMA_RX_MGS_MODE_SEL_CFG0_RXDATAPATH_SLICER_SRC_SEL_MUXD0_BF_DEF (0x00000000)

///< Rx Modulation Scheme: 0-NRZ; 1-PAM4
#define PMA_RX_MGS_MODE_SEL_CFG0_RXMOD_SCHEME_MUXD0_BF_OFF (17)
#define PMA_RX_MGS_MODE_SEL_CFG0_RXMOD_SCHEME_MUXD0_BF_WID ( 1)
#define PMA_RX_MGS_MODE_SEL_CFG0_RXMOD_SCHEME_MUXD0_BF_MSK (0x00020000)
#define PMA_RX_MGS_MODE_SEL_CFG0_RXMOD_SCHEME_MUXD0_BF_DEF (0x00000000)

///< Spare0 - reserved for future used
#define PMA_RX_MGS_MODE_SEL_CFG0_RXCFGLUT_SPARE0_MUXD0_BF_OFF (18)
#define PMA_RX_MGS_MODE_SEL_CFG0_RXCFGLUT_SPARE0_MUXD0_BF_WID ( 3)
#define PMA_RX_MGS_MODE_SEL_CFG0_RXCFGLUT_SPARE0_MUXD0_BF_MSK (0x001C0000)
#define PMA_RX_MGS_MODE_SEL_CFG0_RXCFGLUT_SPARE0_MUXD0_BF_DEF (0x00000000)

///< Spare1 - reserved for future used
#define PMA_RX_MGS_MODE_SEL_CFG0_RXCFGLUT_SPARE1_MUXD0_BF_OFF (21)
#define PMA_RX_MGS_MODE_SEL_CFG0_RXCFGLUT_SPARE1_MUXD0_BF_WID ( 3)
#define PMA_RX_MGS_MODE_SEL_CFG0_RXCFGLUT_SPARE1_MUXD0_BF_MSK (0x00E00000)
#define PMA_RX_MGS_MODE_SEL_CFG0_RXCFGLUT_SPARE1_MUXD0_BF_DEF (0x00000000)

///< Spare2 - reserved for future used
#define PMA_RX_MGS_MODE_SEL_CFG0_RXCFGLUT_SPARE2_MUXD0_BF_OFF (24)
#define PMA_RX_MGS_MODE_SEL_CFG0_RXCFGLUT_SPARE2_MUXD0_BF_WID ( 2)
#define PMA_RX_MGS_MODE_SEL_CFG0_RXCFGLUT_SPARE2_MUXD0_BF_MSK (0x03000000)
#define PMA_RX_MGS_MODE_SEL_CFG0_RXCFGLUT_SPARE2_MUXD0_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_MODE_SEL_CFG1 register description at address offset 0x698
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_mode_sel_cfg1
  * Rx Mode Sel Config
  */

typedef union {
  struct {
    uint32_t RXGDIV_RATIO_MUXD1 : 4;
    ///< div rate 0-1; 1-2; 2-4; 3-8; 8-1.5; 9-3; A-6; B-1
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXNUM_OF_PREBUF_MUXD1 : 2;
    ///< Data Width # of aFEE Coefficient.  0-1; 1-2; 2-4; others-reserved
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RXPHD_SEL_MUXD1 : 3;
    ///< Phase detect scheme select: 0-Ana_alex; 1-Ana Qureshi; 2-Dig_alex;
    ///< 3-Dig_qureshi; others-reserved
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t RXDPHD_DATA_SRC_SEL_MUXD1 : 4;
    ///< Phase detect data source select: 0-dFFE output; 1-aFFE output; others-reserved
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t RXDATAPATH_SLICER_SRC_SEL_MUXD1 : 4;
    ///< Datapath slicer source select: 0-dFFE output; 1-aFFE output; 2-aFFE
    ///< output without fixed slicer thres aka NRZ_LP; others-reserved
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t RXMODULATION_SCHEME_MUXD1 : 1;
    ///< Rx Modulation Scheme: 0-NRZ; 1-PAM4
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t RXCFGLUT_SPARE0_MUXD1 : 3;
    ///< Spare0 - reserved for future used
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t RXCFGLUT_SPARE1_MUXD1 : 3;
    ///< Spare1 - reserved for future used
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t RXCFGLUT_SPARE2_MUXD1 : 2;
    ///< Spare2 - reserved for future used
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="26" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_mode_sel_cfg1_reg_t;

#define PMA_RX_MGS_MODE_SEL_CFG1_DEFAULT (0x00000000U)
#define PMA_RX_MGS_MODE_SEL_CFG1_RD_MASK (0x03ffffffU)
#define PMA_RX_MGS_MODE_SEL_CFG1_WR_MASK (0x03ffffffU)


///< div rate 0-1; 1-2; 2-4; 3-8; 8-1.5; 9-3; A-6; B-1
#define PMA_RX_MGS_MODE_SEL_CFG1_RXGDIV_RATIO_MUXD1_BF_OFF ( 0)
#define PMA_RX_MGS_MODE_SEL_CFG1_RXGDIV_RATIO_MUXD1_BF_WID ( 4)
#define PMA_RX_MGS_MODE_SEL_CFG1_RXGDIV_RATIO_MUXD1_BF_MSK (0x0000000F)
#define PMA_RX_MGS_MODE_SEL_CFG1_RXGDIV_RATIO_MUXD1_BF_DEF (0x00000000)

///< Data Width # of aFEE Coefficient.  0-1; 1-2; 2-4; others-reserved
#define PMA_RX_MGS_MODE_SEL_CFG1_RXNUM_OF_PREBUF_MUXD1_BF_OFF ( 4)
#define PMA_RX_MGS_MODE_SEL_CFG1_RXNUM_OF_PREBUF_MUXD1_BF_WID ( 2)
#define PMA_RX_MGS_MODE_SEL_CFG1_RXNUM_OF_PREBUF_MUXD1_BF_MSK (0x00000030)
#define PMA_RX_MGS_MODE_SEL_CFG1_RXNUM_OF_PREBUF_MUXD1_BF_DEF (0x00000000)

///< Phase detect scheme select: 0-Ana_alex; 1-Ana Qureshi; 2-Dig_alex;
///< 3-Dig_qureshi; others-reserved
#define PMA_RX_MGS_MODE_SEL_CFG1_RXPHD_SEL_MUXD1_BF_OFF ( 6)
#define PMA_RX_MGS_MODE_SEL_CFG1_RXPHD_SEL_MUXD1_BF_WID ( 3)
#define PMA_RX_MGS_MODE_SEL_CFG1_RXPHD_SEL_MUXD1_BF_MSK (0x000001C0)
#define PMA_RX_MGS_MODE_SEL_CFG1_RXPHD_SEL_MUXD1_BF_DEF (0x00000000)

///< Phase detect data source select: 0-dFFE output; 1-aFFE output; others-reserved
#define PMA_RX_MGS_MODE_SEL_CFG1_RXDPHD_DATA_SRC_SEL_MUXD1_BF_OFF ( 9)
#define PMA_RX_MGS_MODE_SEL_CFG1_RXDPHD_DATA_SRC_SEL_MUXD1_BF_WID ( 4)
#define PMA_RX_MGS_MODE_SEL_CFG1_RXDPHD_DATA_SRC_SEL_MUXD1_BF_MSK (0x00001E00)
#define PMA_RX_MGS_MODE_SEL_CFG1_RXDPHD_DATA_SRC_SEL_MUXD1_BF_DEF (0x00000000)

///< Datapath slicer source select: 0-dFFE output; 1-aFFE output; 2-aFFE
///< output without fixed slicer thres aka NRZ_LP; others-reserved
#define PMA_RX_MGS_MODE_SEL_CFG1_RXDATAPATH_SLICER_SRC_SEL_MUXD1_BF_OFF (13)
#define PMA_RX_MGS_MODE_SEL_CFG1_RXDATAPATH_SLICER_SRC_SEL_MUXD1_BF_WID ( 4)
#define PMA_RX_MGS_MODE_SEL_CFG1_RXDATAPATH_SLICER_SRC_SEL_MUXD1_BF_MSK (0x0001E000)
#define PMA_RX_MGS_MODE_SEL_CFG1_RXDATAPATH_SLICER_SRC_SEL_MUXD1_BF_DEF (0x00000000)

///< Rx Modulation Scheme: 0-NRZ; 1-PAM4
#define PMA_RX_MGS_MODE_SEL_CFG1_RXMOD_SCHEME_MUXD1_BF_OFF (17)
#define PMA_RX_MGS_MODE_SEL_CFG1_RXMOD_SCHEME_MUXD1_BF_WID ( 1)
#define PMA_RX_MGS_MODE_SEL_CFG1_RXMOD_SCHEME_MUXD1_BF_MSK (0x00020000)
#define PMA_RX_MGS_MODE_SEL_CFG1_RXMOD_SCHEME_MUXD1_BF_DEF (0x00000000)

///< Spare0 - reserved for future used
#define PMA_RX_MGS_MODE_SEL_CFG1_RXCFGLUT_SPARE0_MUXD1_BF_OFF (18)
#define PMA_RX_MGS_MODE_SEL_CFG1_RXCFGLUT_SPARE0_MUXD1_BF_WID ( 3)
#define PMA_RX_MGS_MODE_SEL_CFG1_RXCFGLUT_SPARE0_MUXD1_BF_MSK (0x001C0000)
#define PMA_RX_MGS_MODE_SEL_CFG1_RXCFGLUT_SPARE0_MUXD1_BF_DEF (0x00000000)

///< Spare1 - reserved for future used
#define PMA_RX_MGS_MODE_SEL_CFG1_RXCFGLUT_SPARE1_MUXD1_BF_OFF (21)
#define PMA_RX_MGS_MODE_SEL_CFG1_RXCFGLUT_SPARE1_MUXD1_BF_WID ( 3)
#define PMA_RX_MGS_MODE_SEL_CFG1_RXCFGLUT_SPARE1_MUXD1_BF_MSK (0x00E00000)
#define PMA_RX_MGS_MODE_SEL_CFG1_RXCFGLUT_SPARE1_MUXD1_BF_DEF (0x00000000)

///< Spare2 - reserved for future used
#define PMA_RX_MGS_MODE_SEL_CFG1_RXCFGLUT_SPARE2_MUXD1_BF_OFF (24)
#define PMA_RX_MGS_MODE_SEL_CFG1_RXCFGLUT_SPARE2_MUXD1_BF_WID ( 2)
#define PMA_RX_MGS_MODE_SEL_CFG1_RXCFGLUT_SPARE2_MUXD1_BF_MSK (0x03000000)
#define PMA_RX_MGS_MODE_SEL_CFG1_RXCFGLUT_SPARE2_MUXD1_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_MODE_SEL_CFG2 register description at address offset 0x69c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_mode_sel_cfg2
  * Rx Mode Sel Config
  */

typedef union {
  struct {
    uint32_t RXGDIV_RATIO_MUXD2 : 4;
    ///< div rate 0-1; 1-2; 2-4; 3-8; 8-1.5; 9-3; A-6; B-1
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXNUM_OF_PREBUF_MUXD2 : 2;
    ///< Data Width # of aFEE Coefficient.  0-1; 1-2; 2-4; others-reserved
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RXPHD_SEL_MUXD2 : 3;
    ///< Phase detect scheme select: 0-Ana_alex; 1-Ana Qureshi; 2-Dig_alex;
    ///< 3-Dig_qureshi; others-reserved
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t RXDPHD_DATA_SRC_SEL_MUXD2 : 4;
    ///< Phase detect data source select: 0-dFFE output; 1-aFFE output; others-reserved
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t RXDATAPATH_SLICER_SRC_SEL_MUXD2 : 4;
    ///< Datapath slicer source select: 0-dFFE output; 1-aFFE output; 2-aFFE
    ///< output without fixed slicer thres aka NRZ_LP; others-reserved
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t RXMODULATION_SCHEME_MUXD2 : 1;
    ///< Rx Modulation Scheme: 0-NRZ; 1-PAM4
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t RXCFGLUT_SPARE0_MUXD2 : 3;
    ///< Spare0 - reserved for future used
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t RXCFGLUT_SPARE1_MUXD2 : 3;
    ///< Spare1 - reserved for future used
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t RXCFGLUT_SPARE2_MUXD2 : 2;
    ///< Spare2 - reserved for future used
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="26" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_mode_sel_cfg2_reg_t;

#define PMA_RX_MGS_MODE_SEL_CFG2_DEFAULT (0x00000000U)
#define PMA_RX_MGS_MODE_SEL_CFG2_RD_MASK (0x03ffffffU)
#define PMA_RX_MGS_MODE_SEL_CFG2_WR_MASK (0x03ffffffU)


///< div rate 0-1; 1-2; 2-4; 3-8; 8-1.5; 9-3; A-6; B-1
#define PMA_RX_MGS_MODE_SEL_CFG2_RXGDIV_RATIO_MUXD2_BF_OFF ( 0)
#define PMA_RX_MGS_MODE_SEL_CFG2_RXGDIV_RATIO_MUXD2_BF_WID ( 4)
#define PMA_RX_MGS_MODE_SEL_CFG2_RXGDIV_RATIO_MUXD2_BF_MSK (0x0000000F)
#define PMA_RX_MGS_MODE_SEL_CFG2_RXGDIV_RATIO_MUXD2_BF_DEF (0x00000000)

///< Data Width # of aFEE Coefficient.  0-1; 1-2; 2-4; others-reserved
#define PMA_RX_MGS_MODE_SEL_CFG2_RXNUM_OF_PREBUF_MUXD2_BF_OFF ( 4)
#define PMA_RX_MGS_MODE_SEL_CFG2_RXNUM_OF_PREBUF_MUXD2_BF_WID ( 2)
#define PMA_RX_MGS_MODE_SEL_CFG2_RXNUM_OF_PREBUF_MUXD2_BF_MSK (0x00000030)
#define PMA_RX_MGS_MODE_SEL_CFG2_RXNUM_OF_PREBUF_MUXD2_BF_DEF (0x00000000)

///< Phase detect scheme select: 0-Ana_alex; 1-Ana Qureshi; 2-Dig_alex;
///< 3-Dig_qureshi; others-reserved
#define PMA_RX_MGS_MODE_SEL_CFG2_RXPHD_SEL_MUXD2_BF_OFF ( 6)
#define PMA_RX_MGS_MODE_SEL_CFG2_RXPHD_SEL_MUXD2_BF_WID ( 3)
#define PMA_RX_MGS_MODE_SEL_CFG2_RXPHD_SEL_MUXD2_BF_MSK (0x000001C0)
#define PMA_RX_MGS_MODE_SEL_CFG2_RXPHD_SEL_MUXD2_BF_DEF (0x00000000)

///< Phase detect data source select: 0-dFFE output; 1-aFFE output; others-reserved
#define PMA_RX_MGS_MODE_SEL_CFG2_RXDPHD_DATA_SRC_SEL_MUXD2_BF_OFF ( 9)
#define PMA_RX_MGS_MODE_SEL_CFG2_RXDPHD_DATA_SRC_SEL_MUXD2_BF_WID ( 4)
#define PMA_RX_MGS_MODE_SEL_CFG2_RXDPHD_DATA_SRC_SEL_MUXD2_BF_MSK (0x00001E00)
#define PMA_RX_MGS_MODE_SEL_CFG2_RXDPHD_DATA_SRC_SEL_MUXD2_BF_DEF (0x00000000)

///< Datapath slicer source select: 0-dFFE output; 1-aFFE output; 2-aFFE
///< output without fixed slicer thres aka NRZ_LP; others-reserved
#define PMA_RX_MGS_MODE_SEL_CFG2_RXDATAPATH_SLICER_SRC_SEL_MUXD2_BF_OFF (13)
#define PMA_RX_MGS_MODE_SEL_CFG2_RXDATAPATH_SLICER_SRC_SEL_MUXD2_BF_WID ( 4)
#define PMA_RX_MGS_MODE_SEL_CFG2_RXDATAPATH_SLICER_SRC_SEL_MUXD2_BF_MSK (0x0001E000)
#define PMA_RX_MGS_MODE_SEL_CFG2_RXDATAPATH_SLICER_SRC_SEL_MUXD2_BF_DEF (0x00000000)

///< Rx Modulation Scheme: 0-NRZ; 1-PAM4
#define PMA_RX_MGS_MODE_SEL_CFG2_RXMOD_SCHEME_MUXD2_BF_OFF (17)
#define PMA_RX_MGS_MODE_SEL_CFG2_RXMOD_SCHEME_MUXD2_BF_WID ( 1)
#define PMA_RX_MGS_MODE_SEL_CFG2_RXMOD_SCHEME_MUXD2_BF_MSK (0x00020000)
#define PMA_RX_MGS_MODE_SEL_CFG2_RXMOD_SCHEME_MUXD2_BF_DEF (0x00000000)

///< Spare0 - reserved for future used
#define PMA_RX_MGS_MODE_SEL_CFG2_RXCFGLUT_SPARE0_MUXD2_BF_OFF (18)
#define PMA_RX_MGS_MODE_SEL_CFG2_RXCFGLUT_SPARE0_MUXD2_BF_WID ( 3)
#define PMA_RX_MGS_MODE_SEL_CFG2_RXCFGLUT_SPARE0_MUXD2_BF_MSK (0x001C0000)
#define PMA_RX_MGS_MODE_SEL_CFG2_RXCFGLUT_SPARE0_MUXD2_BF_DEF (0x00000000)

///< Spare1 - reserved for future used
#define PMA_RX_MGS_MODE_SEL_CFG2_RXCFGLUT_SPARE1_MUXD2_BF_OFF (21)
#define PMA_RX_MGS_MODE_SEL_CFG2_RXCFGLUT_SPARE1_MUXD2_BF_WID ( 3)
#define PMA_RX_MGS_MODE_SEL_CFG2_RXCFGLUT_SPARE1_MUXD2_BF_MSK (0x00E00000)
#define PMA_RX_MGS_MODE_SEL_CFG2_RXCFGLUT_SPARE1_MUXD2_BF_DEF (0x00000000)

///< Spare2 - reserved for future used
#define PMA_RX_MGS_MODE_SEL_CFG2_RXCFGLUT_SPARE2_MUXD2_BF_OFF (24)
#define PMA_RX_MGS_MODE_SEL_CFG2_RXCFGLUT_SPARE2_MUXD2_BF_WID ( 2)
#define PMA_RX_MGS_MODE_SEL_CFG2_RXCFGLUT_SPARE2_MUXD2_BF_MSK (0x03000000)
#define PMA_RX_MGS_MODE_SEL_CFG2_RXCFGLUT_SPARE2_MUXD2_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_MODE_SEL_CFG3 register description at address offset 0x6a0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_mode_sel_cfg3
  * Rx Mode Sel Config
  */

typedef union {
  struct {
    uint32_t RXGDIV_RATIO_MUXD3 : 4;
    ///< div rate 0-1; 1-2; 2-4; 3-8; 8-1.5; 9-3; A-6; B-1
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXNUM_OF_PREBUF_MUXD3 : 2;
    ///< Data Width # of aFEE Coefficient.  0-1; 1-2; 2-4; others-reserved
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RXPHD_SEL_MUXD3 : 3;
    ///< Phase detect scheme select: 0-Ana_alex; 1-Ana Qureshi; 2-Dig_alex;
    ///< 3-Dig_qureshi; others-reserved
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t RXDPHD_DATA_SRC_SEL_MUXD3 : 4;
    ///< Phase detect data source select: 0-dFFE output; 1-aFFE output; others-reserved
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t RXDATAPATH_SLICER_SRC_SEL_MUXD3 : 4;
    ///< Datapath slicer source select: 0-dFFE output; 1-aFFE output; 2-aFFE
    ///< output without fixed slicer thres aka NRZ_LP; others-reserved
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t RXMODULATION_SCHEME_MUXD3 : 1;
    ///< Rx Modulation Scheme: 0-NRZ; 1-PAM4
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t RXCFGLUT_SPARE0_MUXD3 : 3;
    ///< Spare0 - reserved for future used
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t RXCFGLUT_SPARE1_MUXD3 : 3;
    ///< Spare1 - reserved for future used
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t RXCFGLUT_SPARE2_MUXD3 : 2;
    ///< Spare2 - reserved for future used
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="26" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_mode_sel_cfg3_reg_t;

#define PMA_RX_MGS_MODE_SEL_CFG3_DEFAULT (0x00000000U)
#define PMA_RX_MGS_MODE_SEL_CFG3_RD_MASK (0x03ffffffU)
#define PMA_RX_MGS_MODE_SEL_CFG3_WR_MASK (0x03ffffffU)


///< div rate 0-1; 1-2; 2-4; 3-8; 8-1.5; 9-3; A-6; B-1
#define PMA_RX_MGS_MODE_SEL_CFG3_RXGDIV_RATIO_MUXD3_BF_OFF ( 0)
#define PMA_RX_MGS_MODE_SEL_CFG3_RXGDIV_RATIO_MUXD3_BF_WID ( 4)
#define PMA_RX_MGS_MODE_SEL_CFG3_RXGDIV_RATIO_MUXD3_BF_MSK (0x0000000F)
#define PMA_RX_MGS_MODE_SEL_CFG3_RXGDIV_RATIO_MUXD3_BF_DEF (0x00000000)

///< Data Width # of aFEE Coefficient.  0-1; 1-2; 2-4; others-reserved
#define PMA_RX_MGS_MODE_SEL_CFG3_RXNUM_OF_PREBUF_MUXD3_BF_OFF ( 4)
#define PMA_RX_MGS_MODE_SEL_CFG3_RXNUM_OF_PREBUF_MUXD3_BF_WID ( 2)
#define PMA_RX_MGS_MODE_SEL_CFG3_RXNUM_OF_PREBUF_MUXD3_BF_MSK (0x00000030)
#define PMA_RX_MGS_MODE_SEL_CFG3_RXNUM_OF_PREBUF_MUXD3_BF_DEF (0x00000000)

///< Phase detect scheme select: 0-Ana_alex; 1-Ana Qureshi; 2-Dig_alex;
///< 3-Dig_qureshi; others-reserved
#define PMA_RX_MGS_MODE_SEL_CFG3_RXPHD_SEL_MUXD3_BF_OFF ( 6)
#define PMA_RX_MGS_MODE_SEL_CFG3_RXPHD_SEL_MUXD3_BF_WID ( 3)
#define PMA_RX_MGS_MODE_SEL_CFG3_RXPHD_SEL_MUXD3_BF_MSK (0x000001C0)
#define PMA_RX_MGS_MODE_SEL_CFG3_RXPHD_SEL_MUXD3_BF_DEF (0x00000000)

///< Phase detect data source select: 0-dFFE output; 1-aFFE output; others-reserved
#define PMA_RX_MGS_MODE_SEL_CFG3_RXDPHD_DATA_SRC_SEL_MUXD3_BF_OFF ( 9)
#define PMA_RX_MGS_MODE_SEL_CFG3_RXDPHD_DATA_SRC_SEL_MUXD3_BF_WID ( 4)
#define PMA_RX_MGS_MODE_SEL_CFG3_RXDPHD_DATA_SRC_SEL_MUXD3_BF_MSK (0x00001E00)
#define PMA_RX_MGS_MODE_SEL_CFG3_RXDPHD_DATA_SRC_SEL_MUXD3_BF_DEF (0x00000000)

///< Datapath slicer source select: 0-dFFE output; 1-aFFE output; 2-aFFE
///< output without fixed slicer thres aka NRZ_LP; others-reserved
#define PMA_RX_MGS_MODE_SEL_CFG3_RXDATAPATH_SLICER_SRC_SEL_MUXD3_BF_OFF (13)
#define PMA_RX_MGS_MODE_SEL_CFG3_RXDATAPATH_SLICER_SRC_SEL_MUXD3_BF_WID ( 4)
#define PMA_RX_MGS_MODE_SEL_CFG3_RXDATAPATH_SLICER_SRC_SEL_MUXD3_BF_MSK (0x0001E000)
#define PMA_RX_MGS_MODE_SEL_CFG3_RXDATAPATH_SLICER_SRC_SEL_MUXD3_BF_DEF (0x00000000)

///< Rx Modulation Scheme: 0-NRZ; 1-PAM4
#define PMA_RX_MGS_MODE_SEL_CFG3_RXMOD_SCHEME_MUXD3_BF_OFF (17)
#define PMA_RX_MGS_MODE_SEL_CFG3_RXMOD_SCHEME_MUXD3_BF_WID ( 1)
#define PMA_RX_MGS_MODE_SEL_CFG3_RXMOD_SCHEME_MUXD3_BF_MSK (0x00020000)
#define PMA_RX_MGS_MODE_SEL_CFG3_RXMOD_SCHEME_MUXD3_BF_DEF (0x00000000)

///< Spare0 - reserved for future used
#define PMA_RX_MGS_MODE_SEL_CFG3_RXCFGLUT_SPARE0_MUXD3_BF_OFF (18)
#define PMA_RX_MGS_MODE_SEL_CFG3_RXCFGLUT_SPARE0_MUXD3_BF_WID ( 3)
#define PMA_RX_MGS_MODE_SEL_CFG3_RXCFGLUT_SPARE0_MUXD3_BF_MSK (0x001C0000)
#define PMA_RX_MGS_MODE_SEL_CFG3_RXCFGLUT_SPARE0_MUXD3_BF_DEF (0x00000000)

///< Spare1 - reserved for future used
#define PMA_RX_MGS_MODE_SEL_CFG3_RXCFGLUT_SPARE1_MUXD3_BF_OFF (21)
#define PMA_RX_MGS_MODE_SEL_CFG3_RXCFGLUT_SPARE1_MUXD3_BF_WID ( 3)
#define PMA_RX_MGS_MODE_SEL_CFG3_RXCFGLUT_SPARE1_MUXD3_BF_MSK (0x00E00000)
#define PMA_RX_MGS_MODE_SEL_CFG3_RXCFGLUT_SPARE1_MUXD3_BF_DEF (0x00000000)

///< Spare2 - reserved for future used
#define PMA_RX_MGS_MODE_SEL_CFG3_RXCFGLUT_SPARE2_MUXD3_BF_OFF (24)
#define PMA_RX_MGS_MODE_SEL_CFG3_RXCFGLUT_SPARE2_MUXD3_BF_WID ( 2)
#define PMA_RX_MGS_MODE_SEL_CFG3_RXCFGLUT_SPARE2_MUXD3_BF_MSK (0x03000000)
#define PMA_RX_MGS_MODE_SEL_CFG3_RXCFGLUT_SPARE2_MUXD3_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_MODE_SEL_CFG4 register description at address offset 0x6a4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_mode_sel_cfg4
  * Rx Mode Sel Config
  */

typedef union {
  struct {
    uint32_t RXGDIV_RATIO_MUXD4 : 4;
    ///< div rate 0-1; 1-2; 2-4; 3-8; 8-1.5; 9-3; A-6; B-1
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXNUM_OF_PREBUF_MUXD4 : 2;
    ///< Data Width # of aFEE Coefficient.  0-1; 1-2; 2-4; others-reserved
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RXPHD_SEL_MUXD4 : 3;
    ///< Phase detect scheme select: 0-Ana_alex; 1-Ana Qureshi; 2-Dig_alex;
    ///< 3-Dig_qureshi; others-reserved
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t RXDPHD_DATA_SRC_SEL_MUXD4 : 4;
    ///< Phase detect data source select: 0-dFFE output; 1-aFFE output; others-reserved
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t RXDATAPATH_SLICER_SRC_SEL_MUXD4 : 4;
    ///< Datapath slicer source select: 0-dFFE output; 1-aFFE output; 2-aFFE
    ///< output without fixed slicer thres aka NRZ_LP; others-reserved
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t RXMODULATION_SCHEME_MUXD4 : 1;
    ///< Rx Modulation Scheme: 0-NRZ; 1-PAM4
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t RXCFGLUT_SPARE0_MUXD4 : 3;
    ///< Spare0 - reserved for future used
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t RXCFGLUT_SPARE1_MUXD4 : 3;
    ///< Spare1 - reserved for future used
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t RXCFGLUT_SPARE2_MUXD4 : 2;
    ///< Spare2 - reserved for future used
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="26" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_mode_sel_cfg4_reg_t;

#define PMA_RX_MGS_MODE_SEL_CFG4_DEFAULT (0x00000000U)
#define PMA_RX_MGS_MODE_SEL_CFG4_RD_MASK (0x03ffffffU)
#define PMA_RX_MGS_MODE_SEL_CFG4_WR_MASK (0x03ffffffU)


///< div rate 0-1; 1-2; 2-4; 3-8; 8-1.5; 9-3; A-6; B-1
#define PMA_RX_MGS_MODE_SEL_CFG4_RXGDIV_RATIO_MUXD4_BF_OFF ( 0)
#define PMA_RX_MGS_MODE_SEL_CFG4_RXGDIV_RATIO_MUXD4_BF_WID ( 4)
#define PMA_RX_MGS_MODE_SEL_CFG4_RXGDIV_RATIO_MUXD4_BF_MSK (0x0000000F)
#define PMA_RX_MGS_MODE_SEL_CFG4_RXGDIV_RATIO_MUXD4_BF_DEF (0x00000000)

///< Data Width # of aFEE Coefficient.  0-1; 1-2; 2-4; others-reserved
#define PMA_RX_MGS_MODE_SEL_CFG4_RXNUM_OF_PREBUF_MUXD4_BF_OFF ( 4)
#define PMA_RX_MGS_MODE_SEL_CFG4_RXNUM_OF_PREBUF_MUXD4_BF_WID ( 2)
#define PMA_RX_MGS_MODE_SEL_CFG4_RXNUM_OF_PREBUF_MUXD4_BF_MSK (0x00000030)
#define PMA_RX_MGS_MODE_SEL_CFG4_RXNUM_OF_PREBUF_MUXD4_BF_DEF (0x00000000)

///< Phase detect scheme select: 0-Ana_alex; 1-Ana Qureshi; 2-Dig_alex;
///< 3-Dig_qureshi; others-reserved
#define PMA_RX_MGS_MODE_SEL_CFG4_RXPHD_SEL_MUXD4_BF_OFF ( 6)
#define PMA_RX_MGS_MODE_SEL_CFG4_RXPHD_SEL_MUXD4_BF_WID ( 3)
#define PMA_RX_MGS_MODE_SEL_CFG4_RXPHD_SEL_MUXD4_BF_MSK (0x000001C0)
#define PMA_RX_MGS_MODE_SEL_CFG4_RXPHD_SEL_MUXD4_BF_DEF (0x00000000)

///< Phase detect data source select: 0-dFFE output; 1-aFFE output; others-reserved
#define PMA_RX_MGS_MODE_SEL_CFG4_RXDPHD_DATA_SRC_SEL_MUXD4_BF_OFF ( 9)
#define PMA_RX_MGS_MODE_SEL_CFG4_RXDPHD_DATA_SRC_SEL_MUXD4_BF_WID ( 4)
#define PMA_RX_MGS_MODE_SEL_CFG4_RXDPHD_DATA_SRC_SEL_MUXD4_BF_MSK (0x00001E00)
#define PMA_RX_MGS_MODE_SEL_CFG4_RXDPHD_DATA_SRC_SEL_MUXD4_BF_DEF (0x00000000)

///< Datapath slicer source select: 0-dFFE output; 1-aFFE output; 2-aFFE
///< output without fixed slicer thres aka NRZ_LP; others-reserved
#define PMA_RX_MGS_MODE_SEL_CFG4_RXDATAPATH_SLICER_SRC_SEL_MUXD4_BF_OFF (13)
#define PMA_RX_MGS_MODE_SEL_CFG4_RXDATAPATH_SLICER_SRC_SEL_MUXD4_BF_WID ( 4)
#define PMA_RX_MGS_MODE_SEL_CFG4_RXDATAPATH_SLICER_SRC_SEL_MUXD4_BF_MSK (0x0001E000)
#define PMA_RX_MGS_MODE_SEL_CFG4_RXDATAPATH_SLICER_SRC_SEL_MUXD4_BF_DEF (0x00000000)

///< Rx Modulation Scheme: 0-NRZ; 1-PAM4
#define PMA_RX_MGS_MODE_SEL_CFG4_RXMOD_SCHEME_MUXD4_BF_OFF (17)
#define PMA_RX_MGS_MODE_SEL_CFG4_RXMOD_SCHEME_MUXD4_BF_WID ( 1)
#define PMA_RX_MGS_MODE_SEL_CFG4_RXMOD_SCHEME_MUXD4_BF_MSK (0x00020000)
#define PMA_RX_MGS_MODE_SEL_CFG4_RXMOD_SCHEME_MUXD4_BF_DEF (0x00000000)

///< Spare0 - reserved for future used
#define PMA_RX_MGS_MODE_SEL_CFG4_RXCFGLUT_SPARE0_MUXD4_BF_OFF (18)
#define PMA_RX_MGS_MODE_SEL_CFG4_RXCFGLUT_SPARE0_MUXD4_BF_WID ( 3)
#define PMA_RX_MGS_MODE_SEL_CFG4_RXCFGLUT_SPARE0_MUXD4_BF_MSK (0x001C0000)
#define PMA_RX_MGS_MODE_SEL_CFG4_RXCFGLUT_SPARE0_MUXD4_BF_DEF (0x00000000)

///< Spare1 - reserved for future used
#define PMA_RX_MGS_MODE_SEL_CFG4_RXCFGLUT_SPARE1_MUXD4_BF_OFF (21)
#define PMA_RX_MGS_MODE_SEL_CFG4_RXCFGLUT_SPARE1_MUXD4_BF_WID ( 3)
#define PMA_RX_MGS_MODE_SEL_CFG4_RXCFGLUT_SPARE1_MUXD4_BF_MSK (0x00E00000)
#define PMA_RX_MGS_MODE_SEL_CFG4_RXCFGLUT_SPARE1_MUXD4_BF_DEF (0x00000000)

///< Spare2 - reserved for future used
#define PMA_RX_MGS_MODE_SEL_CFG4_RXCFGLUT_SPARE2_MUXD4_BF_OFF (24)
#define PMA_RX_MGS_MODE_SEL_CFG4_RXCFGLUT_SPARE2_MUXD4_BF_WID ( 2)
#define PMA_RX_MGS_MODE_SEL_CFG4_RXCFGLUT_SPARE2_MUXD4_BF_MSK (0x03000000)
#define PMA_RX_MGS_MODE_SEL_CFG4_RXCFGLUT_SPARE2_MUXD4_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_MODE_SEL_STATUS0 register description at address offset 0x6a8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_mode_sel_status0
  * Rx Mode Sel Config
  */

typedef union {
  struct {
    uint32_t RXFSM_MAIN_CUR_GDIV_RATIO : 4;
    ///< Main FSM current value for rxgdiv_ratio
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RXFSM_MAIN_CUR_NUM_OF_PREBUF : 2;
    ///< Main FSM current value for rxnum_for_prebuf
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t RXFSM_MAIN_CUR_PHD_SEL : 3;
    ///< Main FSM current value for rxphd_sel
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t RXFSM_MAIN_CUR_DPHD_DATA_SRC_SEL : 4;
    ///< Main FSM current value for rxdphd_data_src_sel
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t RXFSM_MAIN_CUR_DATAPATH_SLICER_SRC_SEL : 4;
    ///< Main FSM current value for rxdatapath_slicer_src_sel
    ///< AccessType="RO/V" BitOffset="13" ResetValue="0x0"
    uint32_t RXFSM_MAIN_CUR_RXMODULATION_SCHEME : 1;
    ///< Main FSM current value for rxmodulation scheme
    ///< AccessType="RO/V" BitOffset="17" ResetValue="0x0"
    uint32_t RXFSM_MAIN_CUR_RXCFGLUT_SPARE0 : 3;
    ///< Main FSM current value for rxcfglut_spare0
    ///< AccessType="RO/V" BitOffset="18" ResetValue="0x0"
    uint32_t RXFSM_MAIN_CUR_RXCFGLUT_SPARE1 : 3;
    ///< Main FSM current value for rxcfglut_spare1
    ///< AccessType="RO/V" BitOffset="21" ResetValue="0x0"
    uint32_t RXFSM_MAIN_CUR_RXCFGLUT_SPARE2 : 2;
    ///< Main FSM current value for rxcfglut_spare2
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="26" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_mode_sel_stat0_reg_t;

#define PMA_RX_MGS_MODE_SEL_STAT0_DEFAULT (0x00000000U)
#define PMA_RX_MGS_MODE_SEL_STAT0_RD_MASK (0x03ffffffU)
#define PMA_RX_MGS_MODE_SEL_STAT0_WR_MASK (0x00000000U)


///< Main FSM current value for rxgdiv_ratio
#define PMA_RX_MGS_MODE_SEL_STAT0_RXFSM_MAIN_CUR_GDIV_RATIO_BF_OFF ( 0)
#define PMA_RX_MGS_MODE_SEL_STAT0_RXFSM_MAIN_CUR_GDIV_RATIO_BF_WID ( 4)
#define PMA_RX_MGS_MODE_SEL_STAT0_RXFSM_MAIN_CUR_GDIV_RATIO_BF_MSK (0x0000000F)
#define PMA_RX_MGS_MODE_SEL_STAT0_RXFSM_MAIN_CUR_GDIV_RATIO_BF_DEF (0x00000000)

///< Main FSM current value for rxnum_for_prebuf
#define PMA_RX_MGS_MODE_SEL_STAT0_RXFSM_MAIN_CUR_NUM_OF_PREBUF_BF_OFF ( 4)
#define PMA_RX_MGS_MODE_SEL_STAT0_RXFSM_MAIN_CUR_NUM_OF_PREBUF_BF_WID ( 2)
#define PMA_RX_MGS_MODE_SEL_STAT0_RXFSM_MAIN_CUR_NUM_OF_PREBUF_BF_MSK (0x00000030)
#define PMA_RX_MGS_MODE_SEL_STAT0_RXFSM_MAIN_CUR_NUM_OF_PREBUF_BF_DEF (0x00000000)

///< Main FSM current value for rxphd_sel
#define PMA_RX_MGS_MODE_SEL_STAT0_RXFSM_MAIN_CUR_PHD_SEL_BF_OFF ( 6)
#define PMA_RX_MGS_MODE_SEL_STAT0_RXFSM_MAIN_CUR_PHD_SEL_BF_WID ( 3)
#define PMA_RX_MGS_MODE_SEL_STAT0_RXFSM_MAIN_CUR_PHD_SEL_BF_MSK (0x000001C0)
#define PMA_RX_MGS_MODE_SEL_STAT0_RXFSM_MAIN_CUR_PHD_SEL_BF_DEF (0x00000000)

///< Main FSM current value for rxdphd_data_src_sel
#define PMA_RX_MGS_MODE_SEL_STAT0_RXFSM_MAIN_CUR_DPHD_DATA_SRC_SEL_BF_OFF ( 9)
#define PMA_RX_MGS_MODE_SEL_STAT0_RXFSM_MAIN_CUR_DPHD_DATA_SRC_SEL_BF_WID ( 4)
#define PMA_RX_MGS_MODE_SEL_STAT0_RXFSM_MAIN_CUR_DPHD_DATA_SRC_SEL_BF_MSK (0x00001E00)
#define PMA_RX_MGS_MODE_SEL_STAT0_RXFSM_MAIN_CUR_DPHD_DATA_SRC_SEL_BF_DEF (0x00000000)

///< Main FSM current value for rxdatapath_slicer_src_sel
#define PMA_RX_MGS_MODE_SEL_STAT0_RXFSM_MAIN_CUR_DATAPATH_SLICER_SRC_SEL_BF_OFF (13)
#define PMA_RX_MGS_MODE_SEL_STAT0_RXFSM_MAIN_CUR_DATAPATH_SLICER_SRC_SEL_BF_WID ( 4)
#define PMA_RX_MGS_MODE_SEL_STAT0_RXFSM_MAIN_CUR_DATAPATH_SLICER_SRC_SEL_BF_MSK (0x0001E000)
#define PMA_RX_MGS_MODE_SEL_STAT0_RXFSM_MAIN_CUR_DATAPATH_SLICER_SRC_SEL_BF_DEF (0x00000000)

///< Main FSM current value for rxmodulation scheme
#define PMA_RX_MGS_MODE_SEL_STAT0_RXFSM_MAIN_CUR_RXMOD_SCHEME_BF_OFF (17)
#define PMA_RX_MGS_MODE_SEL_STAT0_RXFSM_MAIN_CUR_RXMOD_SCHEME_BF_WID ( 1)
#define PMA_RX_MGS_MODE_SEL_STAT0_RXFSM_MAIN_CUR_RXMOD_SCHEME_BF_MSK (0x00020000)
#define PMA_RX_MGS_MODE_SEL_STAT0_RXFSM_MAIN_CUR_RXMOD_SCHEME_BF_DEF (0x00000000)

///< Main FSM current value for rxcfglut_spare0
#define PMA_RX_MGS_MODE_SEL_STAT0_RXFSM_MAIN_CUR_RXCFGLUT_SPARE0_BF_OFF (18)
#define PMA_RX_MGS_MODE_SEL_STAT0_RXFSM_MAIN_CUR_RXCFGLUT_SPARE0_BF_WID ( 3)
#define PMA_RX_MGS_MODE_SEL_STAT0_RXFSM_MAIN_CUR_RXCFGLUT_SPARE0_BF_MSK (0x001C0000)
#define PMA_RX_MGS_MODE_SEL_STAT0_RXFSM_MAIN_CUR_RXCFGLUT_SPARE0_BF_DEF (0x00000000)

///< Main FSM current value for rxcfglut_spare1
#define PMA_RX_MGS_MODE_SEL_STAT0_RXFSM_MAIN_CUR_RXCFGLUT_SPARE1_BF_OFF (21)
#define PMA_RX_MGS_MODE_SEL_STAT0_RXFSM_MAIN_CUR_RXCFGLUT_SPARE1_BF_WID ( 3)
#define PMA_RX_MGS_MODE_SEL_STAT0_RXFSM_MAIN_CUR_RXCFGLUT_SPARE1_BF_MSK (0x00E00000)
#define PMA_RX_MGS_MODE_SEL_STAT0_RXFSM_MAIN_CUR_RXCFGLUT_SPARE1_BF_DEF (0x00000000)

///< Main FSM current value for rxcfglut_spare2
#define PMA_RX_MGS_MODE_SEL_STAT0_RXFSM_MAIN_CUR_RXCFGLUT_SPARE2_BF_OFF (24)
#define PMA_RX_MGS_MODE_SEL_STAT0_RXFSM_MAIN_CUR_RXCFGLUT_SPARE2_BF_WID ( 2)
#define PMA_RX_MGS_MODE_SEL_STAT0_RXFSM_MAIN_CUR_RXCFGLUT_SPARE2_BF_MSK (0x03000000)
#define PMA_RX_MGS_MODE_SEL_STAT0_RXFSM_MAIN_CUR_RXCFGLUT_SPARE2_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_MODE_SEL_STATUS1 register description at address offset 0x6ac
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_mode_sel_status1
  * Rx Mode Sel Config
  */

typedef union {
  struct {
    uint32_t RXFSM_MAIN_TARG_GDIV_RATIO : 4;
    ///< Main FSM target value for rxgdiv_ratio
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RXFSM_MAIN_TARG_NUM_OF_PREBUF : 2;
    ///< Main FSM target value for rxnum_for_prebuf
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t RXFSM_MAIN_TARG_PHD_SEL : 3;
    ///< Main FSM target value for rxphd_sel
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t RXFSM_MAIN_TARG_DPHD_DATA_SRC_SEL : 4;
    ///< Main FSM target value for rxdphd_data_src_sel
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t RXFSM_MAIN_TARG_DATAPATH_SLICER_SRC_SEL : 4;
    ///< Main FSM target value for rxdatapath_slicer_src_sel
    ///< AccessType="RO/V" BitOffset="13" ResetValue="0x0"
    uint32_t RXFSM_MAIN_TARG_RXMODULATION_SCHEME : 1;
    ///< Main FSM target value for rxmodulation scheme
    ///< AccessType="RO/V" BitOffset="17" ResetValue="0x0"
    uint32_t RXFSM_MAIN_TARG_RXCFGLUT_SPARE0 : 3;
    ///< Main FSM target value for rxcfglut_spare0
    ///< AccessType="RO/V" BitOffset="18" ResetValue="0x0"
    uint32_t RXFSM_MAIN_TARG_RXCFGLUT_SPARE1 : 3;
    ///< Main FSM target value for rxcfglut_spare1
    ///< AccessType="RO/V" BitOffset="21" ResetValue="0x0"
    uint32_t RXFSM_MAIN_TARG_RXCFGLUT_SPARE2 : 2;
    ///< Main FSM target value for rxcfglut_spare2
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="26" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_mode_sel_stat1_reg_t;

#define PMA_RX_MGS_MODE_SEL_STAT1_DEFAULT (0x00000000U)
#define PMA_RX_MGS_MODE_SEL_STAT1_RD_MASK (0x03ffffffU)
#define PMA_RX_MGS_MODE_SEL_STAT1_WR_MASK (0x00000000U)


///< Main FSM target value for rxgdiv_ratio
#define PMA_RX_MGS_MODE_SEL_STAT1_RXFSM_MAIN_TARG_GDIV_RATIO_BF_OFF ( 0)
#define PMA_RX_MGS_MODE_SEL_STAT1_RXFSM_MAIN_TARG_GDIV_RATIO_BF_WID ( 4)
#define PMA_RX_MGS_MODE_SEL_STAT1_RXFSM_MAIN_TARG_GDIV_RATIO_BF_MSK (0x0000000F)
#define PMA_RX_MGS_MODE_SEL_STAT1_RXFSM_MAIN_TARG_GDIV_RATIO_BF_DEF (0x00000000)

///< Main FSM target value for rxnum_for_prebuf
#define PMA_RX_MGS_MODE_SEL_STAT1_RXFSM_MAIN_TARG_NUM_OF_PREBUF_BF_OFF ( 4)
#define PMA_RX_MGS_MODE_SEL_STAT1_RXFSM_MAIN_TARG_NUM_OF_PREBUF_BF_WID ( 2)
#define PMA_RX_MGS_MODE_SEL_STAT1_RXFSM_MAIN_TARG_NUM_OF_PREBUF_BF_MSK (0x00000030)
#define PMA_RX_MGS_MODE_SEL_STAT1_RXFSM_MAIN_TARG_NUM_OF_PREBUF_BF_DEF (0x00000000)

///< Main FSM target value for rxphd_sel
#define PMA_RX_MGS_MODE_SEL_STAT1_RXFSM_MAIN_TARG_PHD_SEL_BF_OFF ( 6)
#define PMA_RX_MGS_MODE_SEL_STAT1_RXFSM_MAIN_TARG_PHD_SEL_BF_WID ( 3)
#define PMA_RX_MGS_MODE_SEL_STAT1_RXFSM_MAIN_TARG_PHD_SEL_BF_MSK (0x000001C0)
#define PMA_RX_MGS_MODE_SEL_STAT1_RXFSM_MAIN_TARG_PHD_SEL_BF_DEF (0x00000000)

///< Main FSM target value for rxdphd_data_src_sel
#define PMA_RX_MGS_MODE_SEL_STAT1_RXFSM_MAIN_TARG_DPHD_DATA_SRC_SEL_BF_OFF ( 9)
#define PMA_RX_MGS_MODE_SEL_STAT1_RXFSM_MAIN_TARG_DPHD_DATA_SRC_SEL_BF_WID ( 4)
#define PMA_RX_MGS_MODE_SEL_STAT1_RXFSM_MAIN_TARG_DPHD_DATA_SRC_SEL_BF_MSK (0x00001E00)
#define PMA_RX_MGS_MODE_SEL_STAT1_RXFSM_MAIN_TARG_DPHD_DATA_SRC_SEL_BF_DEF (0x00000000)

///< Main FSM target value for rxdatapath_slicer_src_sel
#define PMA_RX_MGS_MODE_SEL_STAT1_RXFSM_MAIN_TARG_DATAPATH_SLICER_SRC_SEL_BF_OFF (13)
#define PMA_RX_MGS_MODE_SEL_STAT1_RXFSM_MAIN_TARG_DATAPATH_SLICER_SRC_SEL_BF_WID ( 4)
#define PMA_RX_MGS_MODE_SEL_STAT1_RXFSM_MAIN_TARG_DATAPATH_SLICER_SRC_SEL_BF_MSK (0x0001E000)
#define PMA_RX_MGS_MODE_SEL_STAT1_RXFSM_MAIN_TARG_DATAPATH_SLICER_SRC_SEL_BF_DEF (0x00000000)

///< Main FSM target value for rxmodulation scheme
#define PMA_RX_MGS_MODE_SEL_STAT1_RXFSM_MAIN_TARG_RXMOD_SCHEME_BF_OFF (17)
#define PMA_RX_MGS_MODE_SEL_STAT1_RXFSM_MAIN_TARG_RXMOD_SCHEME_BF_WID ( 1)
#define PMA_RX_MGS_MODE_SEL_STAT1_RXFSM_MAIN_TARG_RXMOD_SCHEME_BF_MSK (0x00020000)
#define PMA_RX_MGS_MODE_SEL_STAT1_RXFSM_MAIN_TARG_RXMOD_SCHEME_BF_DEF (0x00000000)

///< Main FSM target value for rxcfglut_spare0
#define PMA_RX_MGS_MODE_SEL_STAT1_RXFSM_MAIN_TARG_RXCFGLUT_SPARE0_BF_OFF (18)
#define PMA_RX_MGS_MODE_SEL_STAT1_RXFSM_MAIN_TARG_RXCFGLUT_SPARE0_BF_WID ( 3)
#define PMA_RX_MGS_MODE_SEL_STAT1_RXFSM_MAIN_TARG_RXCFGLUT_SPARE0_BF_MSK (0x001C0000)
#define PMA_RX_MGS_MODE_SEL_STAT1_RXFSM_MAIN_TARG_RXCFGLUT_SPARE0_BF_DEF (0x00000000)

///< Main FSM target value for rxcfglut_spare1
#define PMA_RX_MGS_MODE_SEL_STAT1_RXFSM_MAIN_TARG_RXCFGLUT_SPARE1_BF_OFF (21)
#define PMA_RX_MGS_MODE_SEL_STAT1_RXFSM_MAIN_TARG_RXCFGLUT_SPARE1_BF_WID ( 3)
#define PMA_RX_MGS_MODE_SEL_STAT1_RXFSM_MAIN_TARG_RXCFGLUT_SPARE1_BF_MSK (0x00E00000)
#define PMA_RX_MGS_MODE_SEL_STAT1_RXFSM_MAIN_TARG_RXCFGLUT_SPARE1_BF_DEF (0x00000000)

///< Main FSM target value for rxcfglut_spare2
#define PMA_RX_MGS_MODE_SEL_STAT1_RXFSM_MAIN_TARG_RXCFGLUT_SPARE2_BF_OFF (24)
#define PMA_RX_MGS_MODE_SEL_STAT1_RXFSM_MAIN_TARG_RXCFGLUT_SPARE2_BF_WID ( 2)
#define PMA_RX_MGS_MODE_SEL_STAT1_RXFSM_MAIN_TARG_RXCFGLUT_SPARE2_BF_MSK (0x03000000)
#define PMA_RX_MGS_MODE_SEL_STAT1_RXFSM_MAIN_TARG_RXCFGLUT_SPARE2_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_MODE_SEL_STATUS2 register description at address offset 0x6b0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_mode_sel_status2
  * Rx Mode Sel Config
  */

typedef union {
  struct {
    uint32_t RXGDIV_RATIO : 4;
    ///< Ratewidth FSM value for rxgdiv_ratio
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RXNUM_OF_PREBUF : 2;
    ///< Ratewidth FSM value for rxnum_for_prebuf
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t RXPHD_SEL : 3;
    ///< Ratewidth FSM value for rxphd_sel
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t RXDPHD_DATA_SRC_SEL : 4;
    ///< Ratewidth FSM value for rxdphd_data_src_sel
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t RXDATAPATH_SLICER_SRC_SEL : 4;
    ///< Ratewidth FSM value for rxdatapath_slicer_src_sel
    ///< AccessType="RO/V" BitOffset="13" ResetValue="0x0"
    uint32_t RXMODULATION_SCHEME : 1;
    ///< Ratewidth FSM value for rxmodulation scheme
    ///< AccessType="RO/V" BitOffset="17" ResetValue="0x0"
    uint32_t RXCFGLUT_SPARE0 : 3;
    ///< Ratewidth FSM value for rxcfglut_spare0
    ///< AccessType="RO/V" BitOffset="18" ResetValue="0x0"
    uint32_t RXCFGLUT_SPARE1 : 3;
    ///< Ratewidth FSM value for rxcfglut_spare1
    ///< AccessType="RO/V" BitOffset="21" ResetValue="0x0"
    uint32_t RXCFGLUT_SPARE2 : 2;
    ///< Ratewidth FSM value for rxcfglut_spare2
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="26" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_mode_sel_stat2_reg_t;

#define PMA_RX_MGS_MODE_SEL_STAT2_DEFAULT (0x00000000U)
#define PMA_RX_MGS_MODE_SEL_STAT2_RD_MASK (0x03ffffffU)
#define PMA_RX_MGS_MODE_SEL_STAT2_WR_MASK (0x00000000U)


///< Ratewidth FSM value for rxgdiv_ratio
#define PMA_RX_MGS_MODE_SEL_STAT2_RXGDIV_RATIO_BF_OFF ( 0)
#define PMA_RX_MGS_MODE_SEL_STAT2_RXGDIV_RATIO_BF_WID ( 4)
#define PMA_RX_MGS_MODE_SEL_STAT2_RXGDIV_RATIO_BF_MSK (0x0000000F)
#define PMA_RX_MGS_MODE_SEL_STAT2_RXGDIV_RATIO_BF_DEF (0x00000000)

///< Ratewidth FSM value for rxnum_for_prebuf
#define PMA_RX_MGS_MODE_SEL_STAT2_RXNUM_OF_PREBUF_BF_OFF ( 4)
#define PMA_RX_MGS_MODE_SEL_STAT2_RXNUM_OF_PREBUF_BF_WID ( 2)
#define PMA_RX_MGS_MODE_SEL_STAT2_RXNUM_OF_PREBUF_BF_MSK (0x00000030)
#define PMA_RX_MGS_MODE_SEL_STAT2_RXNUM_OF_PREBUF_BF_DEF (0x00000000)

///< Ratewidth FSM value for rxphd_sel
#define PMA_RX_MGS_MODE_SEL_STAT2_RXPHD_SEL_BF_OFF ( 6)
#define PMA_RX_MGS_MODE_SEL_STAT2_RXPHD_SEL_BF_WID ( 3)
#define PMA_RX_MGS_MODE_SEL_STAT2_RXPHD_SEL_BF_MSK (0x000001C0)
#define PMA_RX_MGS_MODE_SEL_STAT2_RXPHD_SEL_BF_DEF (0x00000000)

///< Ratewidth FSM value for rxdphd_data_src_sel
#define PMA_RX_MGS_MODE_SEL_STAT2_RXDPHD_DATA_SRC_SEL_BF_OFF ( 9)
#define PMA_RX_MGS_MODE_SEL_STAT2_RXDPHD_DATA_SRC_SEL_BF_WID ( 4)
#define PMA_RX_MGS_MODE_SEL_STAT2_RXDPHD_DATA_SRC_SEL_BF_MSK (0x00001E00)
#define PMA_RX_MGS_MODE_SEL_STAT2_RXDPHD_DATA_SRC_SEL_BF_DEF (0x00000000)

///< Ratewidth FSM value for rxdatapath_slicer_src_sel
#define PMA_RX_MGS_MODE_SEL_STAT2_RXDATAPATH_SLICER_SRC_SEL_BF_OFF (13)
#define PMA_RX_MGS_MODE_SEL_STAT2_RXDATAPATH_SLICER_SRC_SEL_BF_WID ( 4)
#define PMA_RX_MGS_MODE_SEL_STAT2_RXDATAPATH_SLICER_SRC_SEL_BF_MSK (0x0001E000)
#define PMA_RX_MGS_MODE_SEL_STAT2_RXDATAPATH_SLICER_SRC_SEL_BF_DEF (0x00000000)

///< Ratewidth FSM value for rxmodulation scheme
#define PMA_RX_MGS_MODE_SEL_STAT2_RXMOD_SCHEME_BF_OFF (17)
#define PMA_RX_MGS_MODE_SEL_STAT2_RXMOD_SCHEME_BF_WID ( 1)
#define PMA_RX_MGS_MODE_SEL_STAT2_RXMOD_SCHEME_BF_MSK (0x00020000)
#define PMA_RX_MGS_MODE_SEL_STAT2_RXMOD_SCHEME_BF_DEF (0x00000000)

///< Ratewidth FSM value for rxcfglut_spare0
#define PMA_RX_MGS_MODE_SEL_STAT2_RXCFGLUT_SPARE0_BF_OFF (18)
#define PMA_RX_MGS_MODE_SEL_STAT2_RXCFGLUT_SPARE0_BF_WID ( 3)
#define PMA_RX_MGS_MODE_SEL_STAT2_RXCFGLUT_SPARE0_BF_MSK (0x001C0000)
#define PMA_RX_MGS_MODE_SEL_STAT2_RXCFGLUT_SPARE0_BF_DEF (0x00000000)

///< Ratewidth FSM value for rxcfglut_spare1
#define PMA_RX_MGS_MODE_SEL_STAT2_RXCFGLUT_SPARE1_BF_OFF (21)
#define PMA_RX_MGS_MODE_SEL_STAT2_RXCFGLUT_SPARE1_BF_WID ( 3)
#define PMA_RX_MGS_MODE_SEL_STAT2_RXCFGLUT_SPARE1_BF_MSK (0x00E00000)
#define PMA_RX_MGS_MODE_SEL_STAT2_RXCFGLUT_SPARE1_BF_DEF (0x00000000)

///< Ratewidth FSM value for rxcfglut_spare2
#define PMA_RX_MGS_MODE_SEL_STAT2_RXCFGLUT_SPARE2_BF_OFF (24)
#define PMA_RX_MGS_MODE_SEL_STAT2_RXCFGLUT_SPARE2_BF_WID ( 2)
#define PMA_RX_MGS_MODE_SEL_STAT2_RXCFGLUT_SPARE2_BF_MSK (0x03000000)
#define PMA_RX_MGS_MODE_SEL_STAT2_RXCFGLUT_SPARE2_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_ADCSKEWDET_CALASSIST_CTRL register description at address offset 0x6b4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_adcskewdet_calassist_ctrl
  * Rx ADC Skew Det Calibration Assistance Control
  */

typedef union {
  struct {
    uint32_t RXADCSKEWDETCALASSIST_CAL_SETTLE_CNT : 3;
    ///< Rx ADC Skew Det Calibration Assistance Setting time
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXADCSKEWDETCALASSIST_CAL_SMPL_CNT : 10;
    ///< Rx ADC Skew Det Calibration Assistance Sample time
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RXADCSKEWDETCALASSIST_CAL_REF_CNT : 10;
    ///< Rx ADC Skew Det Calibration Assistance Reference time
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
    uint32_t RXADCSKEWDETCALASSIST_CAL_REQ : 1;
    ///< Rx ADC Skew Det Calibration Assistance request
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t  : 7;
    ///< Reserved
    ///< AccessType="RO" BitOffset="25" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_adcskewdet_calassist_ctrl_reg_t;

#define PMA_RX_MGS_ADCSKEWDET_CALASSIST_CTRL_DEFAULT (0x00000000U)
#define PMA_RX_MGS_ADCSKEWDET_CALASSIST_CTRL_RD_MASK (0x017fffffU)
#define PMA_RX_MGS_ADCSKEWDET_CALASSIST_CTRL_WR_MASK (0x017fffffU)


///< Rx ADC Skew Det Calibration Assistance Setting time
#define PMA_RX_MGS_ADCSKEWDET_CALASSIST_CTRL_RXADCSKEWDETCALASSIST_CAL_SETTLE_CNT_BF_OFF ( 0)
#define PMA_RX_MGS_ADCSKEWDET_CALASSIST_CTRL_RXADCSKEWDETCALASSIST_CAL_SETTLE_CNT_BF_WID ( 3)
#define PMA_RX_MGS_ADCSKEWDET_CALASSIST_CTRL_RXADCSKEWDETCALASSIST_CAL_SETTLE_CNT_BF_MSK (0x00000007)
#define PMA_RX_MGS_ADCSKEWDET_CALASSIST_CTRL_RXADCSKEWDETCALASSIST_CAL_SETTLE_CNT_BF_DEF (0x00000000)

///< Rx ADC Skew Det Calibration Assistance Sample time
#define PMA_RX_MGS_ADCSKEWDET_CALASSIST_CTRL_RXADCSKEWDETCALASSIST_CAL_SMPL_CNT_BF_OFF ( 3)
#define PMA_RX_MGS_ADCSKEWDET_CALASSIST_CTRL_RXADCSKEWDETCALASSIST_CAL_SMPL_CNT_BF_WID (10)
#define PMA_RX_MGS_ADCSKEWDET_CALASSIST_CTRL_RXADCSKEWDETCALASSIST_CAL_SMPL_CNT_BF_MSK (0x00001FF8)
#define PMA_RX_MGS_ADCSKEWDET_CALASSIST_CTRL_RXADCSKEWDETCALASSIST_CAL_SMPL_CNT_BF_DEF (0x00000000)

///< Rx ADC Skew Det Calibration Assistance Reference time
#define PMA_RX_MGS_ADCSKEWDET_CALASSIST_CTRL_RXADCSKEWDETCALASSIST_CAL_REF_CNT_BF_OFF (13)
#define PMA_RX_MGS_ADCSKEWDET_CALASSIST_CTRL_RXADCSKEWDETCALASSIST_CAL_REF_CNT_BF_WID (10)
#define PMA_RX_MGS_ADCSKEWDET_CALASSIST_CTRL_RXADCSKEWDETCALASSIST_CAL_REF_CNT_BF_MSK (0x007FE000)
#define PMA_RX_MGS_ADCSKEWDET_CALASSIST_CTRL_RXADCSKEWDETCALASSIST_CAL_REF_CNT_BF_DEF (0x00000000)

///< Rx ADC Skew Det Calibration Assistance request
#define PMA_RX_MGS_ADCSKEWDET_CALASSIST_CTRL_RXADCSKEWDETCALASSIST_CAL_REQ_BF_OFF (24)
#define PMA_RX_MGS_ADCSKEWDET_CALASSIST_CTRL_RXADCSKEWDETCALASSIST_CAL_REQ_BF_WID ( 1)
#define PMA_RX_MGS_ADCSKEWDET_CALASSIST_CTRL_RXADCSKEWDETCALASSIST_CAL_REQ_BF_MSK (0x01000000)
#define PMA_RX_MGS_ADCSKEWDET_CALASSIST_CTRL_RXADCSKEWDETCALASSIST_CAL_REQ_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_ADCSKEWDET_CALASSIST_STATUS register description at address offset 0x6b8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_adcskewdet_calassist_status
  * Rx ADC Skew Det Calibration Assistance Status
  */

typedef union {
  struct {
    uint32_t RXADCSKEWDETCALASSIST_CAL_ACK : 1;
    ///< Rx ADC Skew Det Calibration Assistance ack
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RXADCSKEWDETCALASSIST_CAL_DAT : 1;
    ///< Rx ADC Skew Det Calibration Assistance data result
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_adcskewdet_calassist_stat_reg_t;

#define PMA_RX_MGS_ADCSKEWDET_CALASSIST_STAT_DEFAULT (0x00000000U)
#define PMA_RX_MGS_ADCSKEWDET_CALASSIST_STAT_RD_MASK (0x00000003U)
#define PMA_RX_MGS_ADCSKEWDET_CALASSIST_STAT_WR_MASK (0x00000000U)


///< Rx ADC Skew Det Calibration Assistance ack
#define PMA_RX_MGS_ADCSKEWDET_CALASSIST_STAT_RXADCSKEWDETCALASSIST_CAL_ACK_BF_OFF ( 0)
#define PMA_RX_MGS_ADCSKEWDET_CALASSIST_STAT_RXADCSKEWDETCALASSIST_CAL_ACK_BF_WID ( 1)
#define PMA_RX_MGS_ADCSKEWDET_CALASSIST_STAT_RXADCSKEWDETCALASSIST_CAL_ACK_BF_MSK (0x00000001)
#define PMA_RX_MGS_ADCSKEWDET_CALASSIST_STAT_RXADCSKEWDETCALASSIST_CAL_ACK_BF_DEF (0x00000000)

///< Rx ADC Skew Det Calibration Assistance data result
#define PMA_RX_MGS_ADCSKEWDET_CALASSIST_STAT_RXADCSKEWDETCALASSIST_CAL_DAT_BF_OFF ( 1)
#define PMA_RX_MGS_ADCSKEWDET_CALASSIST_STAT_RXADCSKEWDETCALASSIST_CAL_DAT_BF_WID ( 1)
#define PMA_RX_MGS_ADCSKEWDET_CALASSIST_STAT_RXADCSKEWDETCALASSIST_CAL_DAT_BF_MSK (0x00000002)
#define PMA_RX_MGS_ADCSKEWDET_CALASSIST_STAT_RXADCSKEWDETCALASSIST_CAL_DAT_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_LANE_CHARGEPUMP_CALASSIST_CTRL register description at address offset 0x6bc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/lane_chargepump_calassist_ctrl
  * Lane Charge Pump Calibration Assistance Control
  */

typedef union {
  struct {
    uint32_t LANECHARGEPUMPCALASSIST_CAL_SETTLE_CNT : 3;
    ///< Lane Charge Pump Calibration Assistance Setting time
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t LANECHARGEPUMPCALASSIST_CAL_SMPL_CNT : 10;
    ///< Lane Charge Pump Calibration Assistance Sample time
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t LANECHARGEPUMPCALASSIST_CAL_REF_CNT : 10;
    ///< Lane Charge Pump Calibration Assistance Reference time
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
    uint32_t LANECHARGEPUMPCALASSIST_CAL_REQ : 1;
    ///< Lane Charge Pump Calibration Assistance request
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t  : 7;
    ///< Reserved
    ///< AccessType="RO" BitOffset="25" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_lane_chargepump_calassist_ctrl_reg_t;

#define PMA_RX_MSG_LANE_CHARGEPUMP_CALASSIST_CTRL_DEFAULT (0x00000000U)
#define PMA_RX_MSG_LANE_CHARGEPUMP_CALASSIST_CTRL_RD_MASK (0x017fffffU)
#define PMA_RX_MSG_LANE_CHARGEPUMP_CALASSIST_CTRL_WR_MASK (0x017fffffU)


///< Lane Charge Pump Calibration Assistance Setting time
#define PMA_RX_MSG_LANE_CHARGEPUMP_CALASSIST_CTRL_LANECHARGEPUMPCALASSIST_CAL_SETTLE_CNT_BF_OFF ( 0)
#define PMA_RX_MSG_LANE_CHARGEPUMP_CALASSIST_CTRL_LANECHARGEPUMPCALASSIST_CAL_SETTLE_CNT_BF_WID ( 3)
#define PMA_RX_MSG_LANE_CHARGEPUMP_CALASSIST_CTRL_LANECHARGEPUMPCALASSIST_CAL_SETTLE_CNT_BF_MSK (0x00000007)
#define PMA_RX_MSG_LANE_CHARGEPUMP_CALASSIST_CTRL_LANECHARGEPUMPCALASSIST_CAL_SETTLE_CNT_BF_DEF (0x00000000)

///< Lane Charge Pump Calibration Assistance Sample time
#define PMA_RX_MSG_LANE_CHARGEPUMP_CALASSIST_CTRL_LANECHARGEPUMPCALASSIST_CAL_SMPL_CNT_BF_OFF ( 3)
#define PMA_RX_MSG_LANE_CHARGEPUMP_CALASSIST_CTRL_LANECHARGEPUMPCALASSIST_CAL_SMPL_CNT_BF_WID (10)
#define PMA_RX_MSG_LANE_CHARGEPUMP_CALASSIST_CTRL_LANECHARGEPUMPCALASSIST_CAL_SMPL_CNT_BF_MSK (0x00001FF8)
#define PMA_RX_MSG_LANE_CHARGEPUMP_CALASSIST_CTRL_LANECHARGEPUMPCALASSIST_CAL_SMPL_CNT_BF_DEF (0x00000000)

///< Lane Charge Pump Calibration Assistance Reference time
#define PMA_RX_MSG_LANE_CHARGEPUMP_CALASSIST_CTRL_LANECHARGEPUMPCALASSIST_CAL_REF_CNT_BF_OFF (13)
#define PMA_RX_MSG_LANE_CHARGEPUMP_CALASSIST_CTRL_LANECHARGEPUMPCALASSIST_CAL_REF_CNT_BF_WID (10)
#define PMA_RX_MSG_LANE_CHARGEPUMP_CALASSIST_CTRL_LANECHARGEPUMPCALASSIST_CAL_REF_CNT_BF_MSK (0x007FE000)
#define PMA_RX_MSG_LANE_CHARGEPUMP_CALASSIST_CTRL_LANECHARGEPUMPCALASSIST_CAL_REF_CNT_BF_DEF (0x00000000)

///< Lane Charge Pump Calibration Assistance request
#define PMA_RX_MSG_LANE_CHARGEPUMP_CALASSIST_CTRL_LANECHARGEPUMPCALASSIST_CAL_REQ_BF_OFF (24)
#define PMA_RX_MSG_LANE_CHARGEPUMP_CALASSIST_CTRL_LANECHARGEPUMPCALASSIST_CAL_REQ_BF_WID ( 1)
#define PMA_RX_MSG_LANE_CHARGEPUMP_CALASSIST_CTRL_LANECHARGEPUMPCALASSIST_CAL_REQ_BF_MSK (0x01000000)
#define PMA_RX_MSG_LANE_CHARGEPUMP_CALASSIST_CTRL_LANECHARGEPUMPCALASSIST_CAL_REQ_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_LANE_CHARGEPUMP_CALASSIST_STATUS register description at address offset 0x6c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/lane_chargepump_calassist_status
  * Lane Charge Pump Calibration Assistance Status
  */

typedef union {
  struct {
    uint32_t LANECHARGEPUMPCALASSIST_CAL_ACK : 1;
    ///< Lane Charge Pump Calibration Assistance ack
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t LANECHARGEPUMPCALASSIST_CAL_DAT : 1;
    ///< Lane Charge Pump Calibration Assistance data result
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_msg_lane_chargepump_calassist_stat_reg_t;

#define PMA_RX_MSG_LANE_CHARGEPUMP_CALASSIST_STAT_DEFAULT (0x00000000U)
#define PMA_RX_MSG_LANE_CHARGEPUMP_CALASSIST_STAT_RD_MASK (0x00000003U)
#define PMA_RX_MSG_LANE_CHARGEPUMP_CALASSIST_STAT_WR_MASK (0x00000000U)


///< Lane Charge Pump Calibration Assistance ack
#define PMA_RX_MSG_LANE_CHARGEPUMP_CALASSIST_STAT_LANECHARGEPUMPCALASSIST_CAL_ACK_BF_OFF ( 0)
#define PMA_RX_MSG_LANE_CHARGEPUMP_CALASSIST_STAT_LANECHARGEPUMPCALASSIST_CAL_ACK_BF_WID ( 1)
#define PMA_RX_MSG_LANE_CHARGEPUMP_CALASSIST_STAT_LANECHARGEPUMPCALASSIST_CAL_ACK_BF_MSK (0x00000001)
#define PMA_RX_MSG_LANE_CHARGEPUMP_CALASSIST_STAT_LANECHARGEPUMPCALASSIST_CAL_ACK_BF_DEF (0x00000000)

///< Lane Charge Pump Calibration Assistance data result
#define PMA_RX_MSG_LANE_CHARGEPUMP_CALASSIST_STAT_LANECHARGEPUMPCALASSIST_CAL_DAT_BF_OFF ( 1)
#define PMA_RX_MSG_LANE_CHARGEPUMP_CALASSIST_STAT_LANECHARGEPUMPCALASSIST_CAL_DAT_BF_WID ( 1)
#define PMA_RX_MSG_LANE_CHARGEPUMP_CALASSIST_STAT_LANECHARGEPUMPCALASSIST_CAL_DAT_BF_MSK (0x00000002)
#define PMA_RX_MSG_LANE_CHARGEPUMP_CALASSIST_STAT_LANECHARGEPUMPCALASSIST_CAL_DAT_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CMPOUT_CALASSIST_CTRL0 register description at address offset 0x6c4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cmpout_calassist_ctrl0
  * Rx CmpOut Calibration Assistance Control
  */

typedef union {
  struct {
    uint32_t RXCMPOUTCALASSIST_CALSTART_PREAMBLE_DELAY : 16;
    ///< Rx CmpOut Calibration Assistance premable delay
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXCMPOUTCALASSIST_CALCODE_FINISHSIDE : 1;
    ///< Rx CmpOut Calibration Assistance finish side. 0: finish low end; 1:
    ///< finish high end
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t RXCMPOUTCALASSIST_CALMEAS_POLARITY : 1;
    ///< Rx CmpOut Calibration Assistance error signal polarity
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t RXCMPOUTCALASSIST_CALMEAS_VALID_COUNT : 4;
    ///< Rx CmpOut Calibration Assistance valid count
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t RXCMPOUTCALASSIST_CAL_REQ : 1;
    ///< Rx CmpOut Calibration Assistance request
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t RXCMPOUTCALASSIST_CALMEAS_REQ_OVR_EN : 1;
    ///< Rx CmpOut Calibration Assistance dither (measurement) request override
    ///< enable
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t RXCMPOUTCALASSIST_CALMEAS_REQ_OVR : 1;
    ///< Rx CmpOut Calibration Assistance dither (measurement) request override
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t RXCMPOUTCALASSIST_CALCODE_BUSY_OVR : 1;
    ///< Rx CmpOut Calibration Assistance busy override
    ///< AccessType="RW" BitOffset="25" ResetValue="0x0"
    uint32_t RXCMPOUTCALASSIST_CALCODE_BUSY_OVR_EN : 1;
    ///< Rx CmpOut Calibration Assistance busy override enable
    ///< AccessType="RW" BitOffset="26" ResetValue="0x0"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="27" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cmpout_calassist_ctrl0_reg_t;

#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL0_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL0_RD_MASK (0x07ffffffU)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL0_WR_MASK (0x07ffffffU)


///< Rx CmpOut Calibration Assistance premable delay
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL0_RXCMPOUTCALASSIST_CALSTART_PREAMBLE_DELAY_BF_OFF ( 0)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL0_RXCMPOUTCALASSIST_CALSTART_PREAMBLE_DELAY_BF_WID (16)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL0_RXCMPOUTCALASSIST_CALSTART_PREAMBLE_DELAY_BF_MSK (0x0000FFFF)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL0_RXCMPOUTCALASSIST_CALSTART_PREAMBLE_DELAY_BF_DEF (0x00000000)

///< Rx CmpOut Calibration Assistance finish side. 0: finish low end; 1:
///< finish high end
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL0_RXCMPOUTCALASSIST_CALCODE_FINISHSIDE_BF_OFF (16)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL0_RXCMPOUTCALASSIST_CALCODE_FINISHSIDE_BF_WID ( 1)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL0_RXCMPOUTCALASSIST_CALCODE_FINISHSIDE_BF_MSK (0x00010000)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL0_RXCMPOUTCALASSIST_CALCODE_FINISHSIDE_BF_DEF (0x00000000)

///< Rx CmpOut Calibration Assistance error signal polarity
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL0_RXCMPOUTCALASSIST_CALMEAS_POLARITY_BF_OFF (17)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL0_RXCMPOUTCALASSIST_CALMEAS_POLARITY_BF_WID ( 1)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL0_RXCMPOUTCALASSIST_CALMEAS_POLARITY_BF_MSK (0x00020000)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL0_RXCMPOUTCALASSIST_CALMEAS_POLARITY_BF_DEF (0x00000000)

///< Rx CmpOut Calibration Assistance valid count
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL0_RXCMPOUTCALASSIST_CALMEAS_VALID_CNT_BF_OFF (18)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL0_RXCMPOUTCALASSIST_CALMEAS_VALID_CNT_BF_WID ( 4)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL0_RXCMPOUTCALASSIST_CALMEAS_VALID_CNT_BF_MSK (0x003C0000)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL0_RXCMPOUTCALASSIST_CALMEAS_VALID_CNT_BF_DEF (0x00000000)

///< Rx CmpOut Calibration Assistance request
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL0_RXCMPOUTCALASSIST_CAL_REQ_BF_OFF (22)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL0_RXCMPOUTCALASSIST_CAL_REQ_BF_WID ( 1)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL0_RXCMPOUTCALASSIST_CAL_REQ_BF_MSK (0x00400000)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL0_RXCMPOUTCALASSIST_CAL_REQ_BF_DEF (0x00000000)

///< Rx CmpOut Calibration Assistance dither (measurement) request override
///< enable
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL0_RXCMPOUTCALASSIST_CALMEAS_REQ_OVR_EN_BF_OFF (23)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL0_RXCMPOUTCALASSIST_CALMEAS_REQ_OVR_EN_BF_WID ( 1)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL0_RXCMPOUTCALASSIST_CALMEAS_REQ_OVR_EN_BF_MSK (0x00800000)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL0_RXCMPOUTCALASSIST_CALMEAS_REQ_OVR_EN_BF_DEF (0x00000000)

///< Rx CmpOut Calibration Assistance dither (measurement) request override
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL0_RXCMPOUTCALASSIST_CALMEAS_REQ_OVR_BF_OFF (24)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL0_RXCMPOUTCALASSIST_CALMEAS_REQ_OVR_BF_WID ( 1)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL0_RXCMPOUTCALASSIST_CALMEAS_REQ_OVR_BF_MSK (0x01000000)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL0_RXCMPOUTCALASSIST_CALMEAS_REQ_OVR_BF_DEF (0x00000000)

///< Rx CmpOut Calibration Assistance busy override
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL0_RXCMPOUTCALASSIST_CALCODE_BUSY_OVR_BF_OFF (25)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL0_RXCMPOUTCALASSIST_CALCODE_BUSY_OVR_BF_WID ( 1)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL0_RXCMPOUTCALASSIST_CALCODE_BUSY_OVR_BF_MSK (0x02000000)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL0_RXCMPOUTCALASSIST_CALCODE_BUSY_OVR_BF_DEF (0x00000000)

///< Rx CmpOut Calibration Assistance busy override enable
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL0_RXCMPOUTCALASSIST_CALCODE_BUSY_OVR_EN_BF_OFF (26)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL0_RXCMPOUTCALASSIST_CALCODE_BUSY_OVR_EN_BF_WID ( 1)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL0_RXCMPOUTCALASSIST_CALCODE_BUSY_OVR_EN_BF_MSK (0x04000000)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL0_RXCMPOUTCALASSIST_CALCODE_BUSY_OVR_EN_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CMPOUT_CALASSIST_CTRL1 register description at address offset 0x6c8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cmpout_calassist_ctrl1
  * Rx CmpOut Calibration Assistance Control
  */

typedef union {
  struct {
    uint32_t RXCMPOUTCALASSIST_CALCODE_MAX : 10;
    ///< Rx CmpOut Calibration Assistance dither (measurement) cal code max
    ///< value
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXCMPOUTCALASSIST_CALCODE_MIN : 10;
    ///< Rx CmpOut Calibration Assistance dither (measurement) cal code min
    ///< value
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RXCMPOUTCALASSIST_CALCODE_OVR_EN : 1;
    ///< Rx CmpOut Calibration Assistance dither (measurement) final cal code
    ///< override enable
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t RXCMPOUTCALASSIST_CALCODE_OVR : 10;
    ///< Rx CmpOut Calibration Assistance dither (measurement) final cal code
    ///< override
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cmpout_calassist_ctrl1_reg_t;

#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL1_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL1_RD_MASK (0x7fffffffU)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL1_WR_MASK (0x7fffffffU)


///< Rx CmpOut Calibration Assistance dither (measurement) cal code max
///< value
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL1_RXCMPOUTCALASSIST_CALCODE_MAX_BF_OFF ( 0)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL1_RXCMPOUTCALASSIST_CALCODE_MAX_BF_WID (10)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL1_RXCMPOUTCALASSIST_CALCODE_MAX_BF_MSK (0x000003FF)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL1_RXCMPOUTCALASSIST_CALCODE_MAX_BF_DEF (0x00000000)

///< Rx CmpOut Calibration Assistance dither (measurement) cal code min
///< value
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL1_RXCMPOUTCALASSIST_CALCODE_MIN_BF_OFF (10)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL1_RXCMPOUTCALASSIST_CALCODE_MIN_BF_WID (10)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL1_RXCMPOUTCALASSIST_CALCODE_MIN_BF_MSK (0x000FFC00)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL1_RXCMPOUTCALASSIST_CALCODE_MIN_BF_DEF (0x00000000)

///< Rx CmpOut Calibration Assistance dither (measurement) final cal code
///< override enable
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL1_RXCMPOUTCALASSIST_CALCODE_OVR_EN_BF_OFF (20)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL1_RXCMPOUTCALASSIST_CALCODE_OVR_EN_BF_WID ( 1)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL1_RXCMPOUTCALASSIST_CALCODE_OVR_EN_BF_MSK (0x00100000)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL1_RXCMPOUTCALASSIST_CALCODE_OVR_EN_BF_DEF (0x00000000)

///< Rx CmpOut Calibration Assistance dither (measurement) final cal code
///< override
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL1_RXCMPOUTCALASSIST_CALCODE_OVR_BF_OFF (21)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL1_RXCMPOUTCALASSIST_CALCODE_OVR_BF_WID (10)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL1_RXCMPOUTCALASSIST_CALCODE_OVR_BF_MSK (0x7FE00000)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL1_RXCMPOUTCALASSIST_CALCODE_OVR_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CMPOUT_CALASSIST_CTRL2 register description at address offset 0x6cc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cmpout_calassist_ctrl2
  * Rx CmpOut Calibration Assistance Control
  */

typedef union {
  struct {
    uint32_t RXCMPOUTCALASSIST_CALCODE_OFFSET : 11;
    ///< Rx CmpOut Calibration Assistance offset
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXCMPOUTCALASSIST_CALMEAS_DLYCOUNT : 9;
    ///< Rx CmpOut Calibration Assistance dither (measurement) measure delay
    ///< time
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t RXCMPOUTCALASSIST_CALMEAS_POW2COUNT : 3;
    ///< Rx CmpOut Calibration Assistance dither (measurement) measure period
    ///< in power of 2
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t RXCMPOUTCALASSIST_CALMEAS_CLR_COUNT : 4;
    ///< Rx CmpOut Calibration Assistance dither (measurement) clear time
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="27" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cmpout_calassist_ctrl2_reg_t;

#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL2_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL2_RD_MASK (0x07ffffffU)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL2_WR_MASK (0x07ffffffU)


///< Rx CmpOut Calibration Assistance offset
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL2_RXCMPOUTCALASSIST_CALCODE_OFFSET_BF_OFF ( 0)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL2_RXCMPOUTCALASSIST_CALCODE_OFFSET_BF_WID (11)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL2_RXCMPOUTCALASSIST_CALCODE_OFFSET_BF_MSK (0x000007FF)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL2_RXCMPOUTCALASSIST_CALCODE_OFFSET_BF_DEF (0x00000000)

///< Rx CmpOut Calibration Assistance dither (measurement) measure delay
///< time
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL2_RXCMPOUTCALASSIST_CALMEAS_DLYCNT_BF_OFF (11)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL2_RXCMPOUTCALASSIST_CALMEAS_DLYCNT_BF_WID ( 9)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL2_RXCMPOUTCALASSIST_CALMEAS_DLYCNT_BF_MSK (0x000FF800)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL2_RXCMPOUTCALASSIST_CALMEAS_DLYCNT_BF_DEF (0x00000000)

///< Rx CmpOut Calibration Assistance dither (measurement) measure period
///< in power of 2
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL2_RXCMPOUTCALASSIST_CALMEAS_POW2CNT_BF_OFF (20)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL2_RXCMPOUTCALASSIST_CALMEAS_POW2CNT_BF_WID ( 3)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL2_RXCMPOUTCALASSIST_CALMEAS_POW2CNT_BF_MSK (0x00700000)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL2_RXCMPOUTCALASSIST_CALMEAS_POW2CNT_BF_DEF (0x00000000)

///< Rx CmpOut Calibration Assistance dither (measurement) clear time
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL2_RXCMPOUTCALASSIST_CALMEAS_CLR_CNT_BF_OFF (23)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL2_RXCMPOUTCALASSIST_CALMEAS_CLR_CNT_BF_WID ( 4)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL2_RXCMPOUTCALASSIST_CALMEAS_CLR_CNT_BF_MSK (0x07800000)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL2_RXCMPOUTCALASSIST_CALMEAS_CLR_CNT_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CMPOUT_CALASSIST_CTRL3 register description at address offset 0x6d0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cmpout_calassist_ctrl3
  * Rx CmpOut Calibration Assistance Control
  */

typedef union {
  struct {
    uint32_t RXCMPOUTCALASSIST_ACC_DATA_DISP_STICKY_CLR : 1;
    ///< Rx CmpOut Calibration Assistance Accmuation with disparity exceeded
    ///< status clear
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXCMPOUTCALASSIST_ACC_DISPARITY_CHECK_EARLY_START : 1;
    ///< Rx CmpOut Calibration Assistance Accmuation with disparity  check
    ///< early start
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RXCMPOUTCALASSIST_ACC_MEAS_EN : 1;
    ///< Rx CmpOut Calibration Assistance Accmuation with disparity measure
    ///< enable
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t RXCMPOUTCALASSIST_ACC_MEAS_THR_SEL_POW2 : 4;
    ///< Rx CmpOut Calibration Assistance Accmuation with disparity threshold
    ///< in a power of 2
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RXCMPOUTCALASSIST_ACC_MEAS_TIMER : 16;
    ///< Rx CmpOut Calibration Assistance Accmuation with disparity timer
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t RXCMPOUTCALASSIST_ACC_OFC_DISPARITY_DISABLE : 1;
    ///< Rx CmpOut Calibration Assistance Accmuation with disparity ofc disable
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t RXCMPOUTCALASSIST_ACC_OFC_DISPARITY_LEAK : 4;
    ///< Rx CmpOut Calibration Assistance Accmuation with disparity ofc leak
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t RXCMPOUTCALASSIST_ACC_OFC_DISPARITY_THR_SEL : 3;
    ///< Rx CmpOut Calibration Assistance Accmuation with disparity ofc threshold
    ///< select
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cmpout_calassist_ctrl3_reg_t;

#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL3_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL3_RD_MASK (0x7fffffffU)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL3_WR_MASK (0x7fffffffU)


///< Rx CmpOut Calibration Assistance Accmuation with disparity exceeded
///< status clear
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL3_RXCMPOUTCALASSIST_ACC_DATA_DISP_STICKY_CLR_BF_OFF ( 0)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL3_RXCMPOUTCALASSIST_ACC_DATA_DISP_STICKY_CLR_BF_WID ( 1)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL3_RXCMPOUTCALASSIST_ACC_DATA_DISP_STICKY_CLR_BF_MSK (0x00000001)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL3_RXCMPOUTCALASSIST_ACC_DATA_DISP_STICKY_CLR_BF_DEF (0x00000000)

///< Rx CmpOut Calibration Assistance Accmuation with disparity  check
///< early start
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL3_RXCMPOUTCALASSIST_ACC_DISPARITY_CHECK_EARLY_START_BF_OFF ( 1)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL3_RXCMPOUTCALASSIST_ACC_DISPARITY_CHECK_EARLY_START_BF_WID ( 1)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL3_RXCMPOUTCALASSIST_ACC_DISPARITY_CHECK_EARLY_START_BF_MSK (0x00000002)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL3_RXCMPOUTCALASSIST_ACC_DISPARITY_CHECK_EARLY_START_BF_DEF (0x00000000)

///< Rx CmpOut Calibration Assistance Accmuation with disparity measure
///< enable
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL3_RXCMPOUTCALASSIST_ACC_MEAS_EN_BF_OFF ( 2)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL3_RXCMPOUTCALASSIST_ACC_MEAS_EN_BF_WID ( 1)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL3_RXCMPOUTCALASSIST_ACC_MEAS_EN_BF_MSK (0x00000004)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL3_RXCMPOUTCALASSIST_ACC_MEAS_EN_BF_DEF (0x00000000)

///< Rx CmpOut Calibration Assistance Accmuation with disparity threshold
///< in a power of 2
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL3_RXCMPOUTCALASSIST_ACC_MEAS_THR_SEL_POW2_BF_OFF ( 3)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL3_RXCMPOUTCALASSIST_ACC_MEAS_THR_SEL_POW2_BF_WID ( 4)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL3_RXCMPOUTCALASSIST_ACC_MEAS_THR_SEL_POW2_BF_MSK (0x00000078)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL3_RXCMPOUTCALASSIST_ACC_MEAS_THR_SEL_POW2_BF_DEF (0x00000000)

///< Rx CmpOut Calibration Assistance Accmuation with disparity timer
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL3_RXCMPOUTCALASSIST_ACC_MEAS_TIMER_BF_OFF ( 7)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL3_RXCMPOUTCALASSIST_ACC_MEAS_TIMER_BF_WID (16)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL3_RXCMPOUTCALASSIST_ACC_MEAS_TIMER_BF_MSK (0x007FFF80)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL3_RXCMPOUTCALASSIST_ACC_MEAS_TIMER_BF_DEF (0x00000000)

///< Rx CmpOut Calibration Assistance Accmuation with disparity ofc disable
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL3_RXCMPOUTCALASSIST_ACC_OFC_DISPARITY_DIS_BF_OFF (23)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL3_RXCMPOUTCALASSIST_ACC_OFC_DISPARITY_DIS_BF_WID ( 1)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL3_RXCMPOUTCALASSIST_ACC_OFC_DISPARITY_DIS_BF_MSK (0x00800000)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL3_RXCMPOUTCALASSIST_ACC_OFC_DISPARITY_DIS_BF_DEF (0x00000000)

///< Rx CmpOut Calibration Assistance Accmuation with disparity ofc leak
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL3_RXCMPOUTCALASSIST_ACC_OFC_DISPARITY_LEAK_BF_OFF (24)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL3_RXCMPOUTCALASSIST_ACC_OFC_DISPARITY_LEAK_BF_WID ( 4)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL3_RXCMPOUTCALASSIST_ACC_OFC_DISPARITY_LEAK_BF_MSK (0x0F000000)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL3_RXCMPOUTCALASSIST_ACC_OFC_DISPARITY_LEAK_BF_DEF (0x00000000)

///< Rx CmpOut Calibration Assistance Accmuation with disparity ofc threshold
///< select
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL3_RXCMPOUTCALASSIST_ACC_OFC_DISPARITY_THR_SEL_BF_OFF (28)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL3_RXCMPOUTCALASSIST_ACC_OFC_DISPARITY_THR_SEL_BF_WID ( 3)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL3_RXCMPOUTCALASSIST_ACC_OFC_DISPARITY_THR_SEL_BF_MSK (0x70000000)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL3_RXCMPOUTCALASSIST_ACC_OFC_DISPARITY_THR_SEL_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CMPOUT_CALASSIST_CTRL4 register description at address offset 0x6d4
  *
  * Register default value:        0xFFFFFFFF
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cmpout_calassist_ctrl4
  * Rx CmpOut Calibration Assistance Control
  */

typedef union {
  struct {
    uint32_t RXCMPOUTCALASSIST_ACC_DISPARITY_SAR_MASK_31_0 : 32;
    ///< Rx CmpOut Calibration Assistance Accmuation SAR 0 to 31 Mask.
    ///< Bit[n] = 0 : SAR[n] will not be computed for disparity
    ///< Bit[n] = 1 : SAR[n] will be computed for disparity
    ///< AccessType="RW" BitOffset="0" ResetValue="0xFFFFFFFF"
  } ;
  uint32_t value;
} pma_rx_mgs_cmpout_calassist_ctrl4_reg_t;

#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL4_DEFAULT (0xffffffffU)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL4_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL4_WR_MASK (0xffffffffU)


///< Rx CmpOut Calibration Assistance Accmuation SAR 0 to 31 Mask.
///< Bit[n] = 0 : SAR[n] will not be computed for disparity
///< Bit[n] = 1 : SAR[n] will be computed for disparity
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL4_RXCMPOUTCALASSIST_ACC_DISPARITY_SAR_MASK_31_0_BF_OFF ( 0)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL4_RXCMPOUTCALASSIST_ACC_DISPARITY_SAR_MASK_31_0_BF_WID (32)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL4_RXCMPOUTCALASSIST_ACC_DISPARITY_SAR_MASK_31_0_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL4_RXCMPOUTCALASSIST_ACC_DISPARITY_SAR_MASK_31_0_BF_DEF (0xFFFFFFFF)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CMPOUT_CALASSIST_CTRL5 register description at address offset 0x6d8
  *
  * Register default value:        0xFFFFFFFF
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cmpout_calassist_ctrl5
  * Rx CmpOut Calibration Assistance Control
  */

typedef union {
  struct {
    uint32_t RXCMPOUTCALASSIST_ACC_DISPARITY_SAR_MASK_63_32 : 32;
    ///< Rx CmpOut Calibration Assistance Accmuation SAR 32 to 63 Mask.
    ///< Bit[n] = 0 : SAR[n] will not be computed for disparity
    ///< Bit[n] = 1 : SAR[n] will be computed for disparity
    ///< AccessType="RW" BitOffset="0" ResetValue="0xFFFFFFFF"
  } ;
  uint32_t value;
} pma_rx_mgs_cmpout_calassist_ctrl5_reg_t;

#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL5_DEFAULT (0xffffffffU)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL5_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL5_WR_MASK (0xffffffffU)


///< Rx CmpOut Calibration Assistance Accmuation SAR 32 to 63 Mask.
///< Bit[n] = 0 : SAR[n] will not be computed for disparity
///< Bit[n] = 1 : SAR[n] will be computed for disparity
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL5_RXCMPOUTCALASSIST_ACC_DISPARITY_SAR_MASK_63_32_BF_OFF ( 0)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL5_RXCMPOUTCALASSIST_ACC_DISPARITY_SAR_MASK_63_32_BF_WID (32)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL5_RXCMPOUTCALASSIST_ACC_DISPARITY_SAR_MASK_63_32_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL5_RXCMPOUTCALASSIST_ACC_DISPARITY_SAR_MASK_63_32_BF_DEF (0xFFFFFFFF)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_CMPOUT_CALASSIST_STATUS register description at address offset 0x6dc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_cmpout_calassist_status
  * Rx CmpOut Calibration Assistance Status
  */

typedef union {
  struct {
    uint32_t RXCMPOUTCALASSIST_CALCODE_CLAMP : 10;
    ///< Rx CmpOut Calibration Assistance calibrated code (clamp with max/min
    ///< value)
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RXCMPOUTCALASSIST_CALMEASACC : 8;
    ///< Rx CmpOut Calibration Assistance dither accumulated error
    ///< AccessType="RO/V" BitOffset="10" ResetValue="0x0"
    uint32_t RXCMPOUTCALASSIST_CALMEAS_ERR_RAW : 1;
    ///< Rx CmpOut Calibration Assistance dither (measurement) ack
    ///< AccessType="RO/V" BitOffset="18" ResetValue="0x0"
    uint32_t RXCMPOUTCALASSIST_CALMEAS_ACK : 1;
    ///< Rx CmpOut Calibration Assistance ack
    ///< AccessType="RO/V" BitOffset="19" ResetValue="0x0"
    uint32_t RXCMPOUTCALASSIST_CALMEAS_ERRAVG : 1;
    ///< Rx CmpOut averaged error signal
    ///< AccessType="RO/V" BitOffset="20" ResetValue="0x0"
    uint32_t RXCMPOUTCALASSIST_CAL_ACK : 1;
    ///< Rx CmpOut Calibration Assistance ack
    ///< AccessType="RO/V" BitOffset="21" ResetValue="0x0"
    uint32_t RXCMPOUTCALASSIST_ACC_DISPARITY_EXCEEDED_STICKY : 1;
    ///< Rx CmpOut Calibration Assistance Accmuation with disparity exceeded
    ///< status - sticky
    ///< AccessType="RO/V" BitOffset="22" ResetValue="0x0"
    uint32_t RXCMPOUTCALASSIST_ACC_MEAS_DONE : 1;
    ///< Rx CmpOut Calibration Assistance Accmuation with disparity measure
    ///< done
    ///< AccessType="RO/V" BitOffset="23" ResetValue="0x0"
    uint32_t RXCMPOUTCALASSIST_ACC_STEP_DN : 1;
    ///< Rx CmpOut Calibration Assistance Accmuation with disparity step down
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t RXCMPOUTCALASSIST_ACC_STEP_UP : 1;
    ///< Rx CmpOut Calibration Assistance Accmuation with disparity step up
    ///< AccessType="RO/V" BitOffset="25" ResetValue="0x0"
    uint32_t RXCMPOUTCALASSIST_CALCODE_BUSY : 1;
    ///< Rx CmpOut Calibration Assistance busy
    ///< AccessType="RO/V" BitOffset="26" ResetValue="0x0"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="27" ResetValue="None"
  } ;
  uint32_t value;
} pma_rx_mgs_cmpout_calassist_stat_reg_t;

#define PMA_RX_MGS_CMPOUT_CALASSIST_STAT_DEFAULT (0x00000000U)
#define PMA_RX_MGS_CMPOUT_CALASSIST_STAT_RD_MASK (0x07ffffffU)
#define PMA_RX_MGS_CMPOUT_CALASSIST_STAT_WR_MASK (0x00000000U)


///< Rx CmpOut Calibration Assistance calibrated code (clamp with max/min
///< value)
#define PMA_RX_MGS_CMPOUT_CALASSIST_STAT_RXCMPOUTCALASSIST_CALCODE_CLAMP_BF_OFF ( 0)
#define PMA_RX_MGS_CMPOUT_CALASSIST_STAT_RXCMPOUTCALASSIST_CALCODE_CLAMP_BF_WID (10)
#define PMA_RX_MGS_CMPOUT_CALASSIST_STAT_RXCMPOUTCALASSIST_CALCODE_CLAMP_BF_MSK (0x000003FF)
#define PMA_RX_MGS_CMPOUT_CALASSIST_STAT_RXCMPOUTCALASSIST_CALCODE_CLAMP_BF_DEF (0x00000000)

///< Rx CmpOut Calibration Assistance dither accumulated error
#define PMA_RX_MGS_CMPOUT_CALASSIST_STAT_RXCMPOUTCALASSIST_CALMEASACC_BF_OFF (10)
#define PMA_RX_MGS_CMPOUT_CALASSIST_STAT_RXCMPOUTCALASSIST_CALMEASACC_BF_WID ( 8)
#define PMA_RX_MGS_CMPOUT_CALASSIST_STAT_RXCMPOUTCALASSIST_CALMEASACC_BF_MSK (0x0003FC00)
#define PMA_RX_MGS_CMPOUT_CALASSIST_STAT_RXCMPOUTCALASSIST_CALMEASACC_BF_DEF (0x00000000)

///< Rx CmpOut Calibration Assistance dither (measurement) ack
#define PMA_RX_MGS_CMPOUT_CALASSIST_STAT_RXCMPOUTCALASSIST_CALMEAS_ERR_RAW_BF_OFF (18)
#define PMA_RX_MGS_CMPOUT_CALASSIST_STAT_RXCMPOUTCALASSIST_CALMEAS_ERR_RAW_BF_WID ( 1)
#define PMA_RX_MGS_CMPOUT_CALASSIST_STAT_RXCMPOUTCALASSIST_CALMEAS_ERR_RAW_BF_MSK (0x00040000)
#define PMA_RX_MGS_CMPOUT_CALASSIST_STAT_RXCMPOUTCALASSIST_CALMEAS_ERR_RAW_BF_DEF (0x00000000)

///< Rx CmpOut Calibration Assistance ack
#define PMA_RX_MGS_CMPOUT_CALASSIST_STAT_RXCMPOUTCALASSIST_CALMEAS_ACK_BF_OFF (19)
#define PMA_RX_MGS_CMPOUT_CALASSIST_STAT_RXCMPOUTCALASSIST_CALMEAS_ACK_BF_WID ( 1)
#define PMA_RX_MGS_CMPOUT_CALASSIST_STAT_RXCMPOUTCALASSIST_CALMEAS_ACK_BF_MSK (0x00080000)
#define PMA_RX_MGS_CMPOUT_CALASSIST_STAT_RXCMPOUTCALASSIST_CALMEAS_ACK_BF_DEF (0x00000000)

///< Rx CmpOut averaged error signal
#define PMA_RX_MGS_CMPOUT_CALASSIST_STAT_RXCMPOUTCALASSIST_CALMEAS_ERRAVG_BF_OFF (20)
#define PMA_RX_MGS_CMPOUT_CALASSIST_STAT_RXCMPOUTCALASSIST_CALMEAS_ERRAVG_BF_WID ( 1)
#define PMA_RX_MGS_CMPOUT_CALASSIST_STAT_RXCMPOUTCALASSIST_CALMEAS_ERRAVG_BF_MSK (0x00100000)
#define PMA_RX_MGS_CMPOUT_CALASSIST_STAT_RXCMPOUTCALASSIST_CALMEAS_ERRAVG_BF_DEF (0x00000000)

///< Rx CmpOut Calibration Assistance ack
#define PMA_RX_MGS_CMPOUT_CALASSIST_STAT_RXCMPOUTCALASSIST_CAL_ACK_BF_OFF (21)
#define PMA_RX_MGS_CMPOUT_CALASSIST_STAT_RXCMPOUTCALASSIST_CAL_ACK_BF_WID ( 1)
#define PMA_RX_MGS_CMPOUT_CALASSIST_STAT_RXCMPOUTCALASSIST_CAL_ACK_BF_MSK (0x00200000)
#define PMA_RX_MGS_CMPOUT_CALASSIST_STAT_RXCMPOUTCALASSIST_CAL_ACK_BF_DEF (0x00000000)

///< Rx CmpOut Calibration Assistance Accmuation with disparity exceeded
///< status - sticky
#define PMA_RX_MGS_CMPOUT_CALASSIST_STAT_RXCMPOUTCALASSIST_ACC_DISPARITY_EXCEEDED_STICKY_BF_OFF (22)
#define PMA_RX_MGS_CMPOUT_CALASSIST_STAT_RXCMPOUTCALASSIST_ACC_DISPARITY_EXCEEDED_STICKY_BF_WID ( 1)
#define PMA_RX_MGS_CMPOUT_CALASSIST_STAT_RXCMPOUTCALASSIST_ACC_DISPARITY_EXCEEDED_STICKY_BF_MSK (0x00400000)
#define PMA_RX_MGS_CMPOUT_CALASSIST_STAT_RXCMPOUTCALASSIST_ACC_DISPARITY_EXCEEDED_STICKY_BF_DEF (0x00000000)

///< Rx CmpOut Calibration Assistance Accmuation with disparity measure
///< done
#define PMA_RX_MGS_CMPOUT_CALASSIST_STAT_RXCMPOUTCALASSIST_ACC_MEAS_DONE_BF_OFF (23)
#define PMA_RX_MGS_CMPOUT_CALASSIST_STAT_RXCMPOUTCALASSIST_ACC_MEAS_DONE_BF_WID ( 1)
#define PMA_RX_MGS_CMPOUT_CALASSIST_STAT_RXCMPOUTCALASSIST_ACC_MEAS_DONE_BF_MSK (0x00800000)
#define PMA_RX_MGS_CMPOUT_CALASSIST_STAT_RXCMPOUTCALASSIST_ACC_MEAS_DONE_BF_DEF (0x00000000)

///< Rx CmpOut Calibration Assistance Accmuation with disparity step down
#define PMA_RX_MGS_CMPOUT_CALASSIST_STAT_RXCMPOUTCALASSIST_ACC_STEP_DN_BF_OFF (24)
#define PMA_RX_MGS_CMPOUT_CALASSIST_STAT_RXCMPOUTCALASSIST_ACC_STEP_DN_BF_WID ( 1)
#define PMA_RX_MGS_CMPOUT_CALASSIST_STAT_RXCMPOUTCALASSIST_ACC_STEP_DN_BF_MSK (0x01000000)
#define PMA_RX_MGS_CMPOUT_CALASSIST_STAT_RXCMPOUTCALASSIST_ACC_STEP_DN_BF_DEF (0x00000000)

///< Rx CmpOut Calibration Assistance Accmuation with disparity step up
#define PMA_RX_MGS_CMPOUT_CALASSIST_STAT_RXCMPOUTCALASSIST_ACC_STEP_UP_BF_OFF (25)
#define PMA_RX_MGS_CMPOUT_CALASSIST_STAT_RXCMPOUTCALASSIST_ACC_STEP_UP_BF_WID ( 1)
#define PMA_RX_MGS_CMPOUT_CALASSIST_STAT_RXCMPOUTCALASSIST_ACC_STEP_UP_BF_MSK (0x02000000)
#define PMA_RX_MGS_CMPOUT_CALASSIST_STAT_RXCMPOUTCALASSIST_ACC_STEP_UP_BF_DEF (0x00000000)

///< Rx CmpOut Calibration Assistance busy
#define PMA_RX_MGS_CMPOUT_CALASSIST_STAT_RXCMPOUTCALASSIST_CALCODE_BUSY_BF_OFF (26)
#define PMA_RX_MGS_CMPOUT_CALASSIST_STAT_RXCMPOUTCALASSIST_CALCODE_BUSY_BF_WID ( 1)
#define PMA_RX_MGS_CMPOUT_CALASSIST_STAT_RXCMPOUTCALASSIST_CALCODE_BUSY_BF_MSK (0x04000000)
#define PMA_RX_MGS_CMPOUT_CALASSIST_STAT_RXCMPOUTCALASSIST_CALCODE_BUSY_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_RW_SPARE_0 register description at address offset 0x7dc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_rw_spare_0
  * Spare RW register
  */

typedef union {
  struct {
    uint32_t RX_RW_SPARE_0 : 32;
    ///< Spare register.  Reseved for future
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_mgs_rw_spare_0_reg_t;

#define PMA_RX_MGS_RW_SPARE_0_DEFAULT (0x00000000U)
#define PMA_RX_MGS_RW_SPARE_0_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_RW_SPARE_0_WR_MASK (0xffffffffU)


///< Spare register.  Reseved for future
#define PMA_RX_MGS_RW_SPARE_0_RX_RW_SPARE_0_BF_OFF ( 0)
#define PMA_RX_MGS_RW_SPARE_0_RX_RW_SPARE_0_BF_WID (32)
#define PMA_RX_MGS_RW_SPARE_0_RX_RW_SPARE_0_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MGS_RW_SPARE_0_RX_RW_SPARE_0_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_RW_SPARE_1 register description at address offset 0x7e0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_rw_spare_1
  * Spare RW register
  */

typedef union {
  struct {
    uint32_t RX_RW_SPARE_1 : 32;
    ///< Spare register.  Reseved for future
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_mgs_rw_spare_1_reg_t;

#define PMA_RX_MGS_RW_SPARE_1_DEFAULT (0x00000000U)
#define PMA_RX_MGS_RW_SPARE_1_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_RW_SPARE_1_WR_MASK (0xffffffffU)


///< Spare register.  Reseved for future
#define PMA_RX_MGS_RW_SPARE_1_RX_RW_SPARE_1_BF_OFF ( 0)
#define PMA_RX_MGS_RW_SPARE_1_RX_RW_SPARE_1_BF_WID (32)
#define PMA_RX_MGS_RW_SPARE_1_RX_RW_SPARE_1_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MGS_RW_SPARE_1_RX_RW_SPARE_1_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_RW_SPARE_2 register description at address offset 0x7e4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_rw_spare_2
  * Spare RW register
  */

typedef union {
  struct {
    uint32_t RX_RW_SPARE_2 : 32;
    ///< Spare register.  Reseved for future
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_mgs_rw_spare_2_reg_t;

#define PMA_RX_MGS_RW_SPARE_2_DEFAULT (0x00000000U)
#define PMA_RX_MGS_RW_SPARE_2_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_RW_SPARE_2_WR_MASK (0xffffffffU)


///< Spare register.  Reseved for future
#define PMA_RX_MGS_RW_SPARE_2_RX_RW_SPARE_2_BF_OFF ( 0)
#define PMA_RX_MGS_RW_SPARE_2_RX_RW_SPARE_2_BF_WID (32)
#define PMA_RX_MGS_RW_SPARE_2_RX_RW_SPARE_2_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MGS_RW_SPARE_2_RX_RW_SPARE_2_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_RW_SPARE_3 register description at address offset 0x7e8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_rw_spare_3
  * Spare RW register
  */

typedef union {
  struct {
    uint32_t RX_RW_SPARE_3 : 32;
    ///< Spare register.  Reseved for future
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_mgs_rw_spare_3_reg_t;

#define PMA_RX_MGS_RW_SPARE_3_DEFAULT (0x00000000U)
#define PMA_RX_MGS_RW_SPARE_3_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_RW_SPARE_3_WR_MASK (0xffffffffU)


///< Spare register.  Reseved for future
#define PMA_RX_MGS_RW_SPARE_3_RX_RW_SPARE_3_BF_OFF ( 0)
#define PMA_RX_MGS_RW_SPARE_3_RX_RW_SPARE_3_BF_WID (32)
#define PMA_RX_MGS_RW_SPARE_3_RX_RW_SPARE_3_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MGS_RW_SPARE_3_RX_RW_SPARE_3_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_RO_SPARE_0 register description at address offset 0x7ec
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_ro_spare_0
  * Spare RO register
  */

typedef union {
  struct {
    uint32_t RX_RO_SPARE_0 : 32;
    ///< Spare register.  Reseved for future
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_mgs_ro_spare_0_reg_t;

#define PMA_RX_MGS_RO_SPARE_0_DEFAULT (0x00000000U)
#define PMA_RX_MGS_RO_SPARE_0_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_RO_SPARE_0_WR_MASK (0x00000000U)


///< Spare register.  Reseved for future
#define PMA_RX_MGS_RO_SPARE_0_RX_RO_SPARE_0_BF_OFF ( 0)
#define PMA_RX_MGS_RO_SPARE_0_RX_RO_SPARE_0_BF_WID (32)
#define PMA_RX_MGS_RO_SPARE_0_RX_RO_SPARE_0_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MGS_RO_SPARE_0_RX_RO_SPARE_0_BF_DEF (0x00000000)


/** @brief PMA_RX_REGS_MSG_PMA_RX_REGS_RX_RO_SPARE_1 register description at address offset 0x7f0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RX_regs_MSG/PMA_RX_regs/rx_ro_spare_1
  * Spare RO register
  */

typedef union {
  struct {
    uint32_t RX_RO_SPARE_1 : 32;
    ///< Spare register.  Reseved for future
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rx_mgs_ro_spare_1_reg_t;

#define PMA_RX_MGS_RO_SPARE_1_DEFAULT (0x00000000U)
#define PMA_RX_MGS_RO_SPARE_1_RD_MASK (0xffffffffU)
#define PMA_RX_MGS_RO_SPARE_1_WR_MASK (0x00000000U)


///< Spare register.  Reseved for future
#define PMA_RX_MGS_RO_SPARE_1_RX_RO_SPARE_1_BF_OFF ( 0)
#define PMA_RX_MGS_RO_SPARE_1_RX_RO_SPARE_1_BF_WID (32)
#define PMA_RX_MGS_RO_SPARE_1_RX_RO_SPARE_1_BF_MSK (0xFFFFFFFF)
#define PMA_RX_MGS_RO_SPARE_1_RX_RO_SPARE_1_BF_DEF (0x00000000)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define PMA_RX_MGS_CAR_CFG_REG(_BASE) ((pma_rx_mgs_car_cfg_reg_t*) PMA_RX_MGS_CAR_CFG_ADR(_BASE))
#define PMA_RX_MGS_CAR_CFG_RO_REG(_BASE) ((pma_rx_mgs_car_cfg_ro_reg_t*) PMA_RX_MGS_CAR_CFG_RO_ADR(_BASE))
#define PMA_RX_MGS_SCRATCH_PAD_0_REG(_BASE) ((pma_rx_mgs_scratch_pad_0_reg_t*) PMA_RX_MGS_SCRATCH_PAD_0_ADR(_BASE))
#define PMA_RX_MGS_SCRATCH_PAD_1_REG(_BASE) ((pma_rx_mgs_scratch_pad_1_reg_t*) PMA_RX_MGS_SCRATCH_PAD_1_ADR(_BASE))
#define PMA_RX_MGS_SCRATCH_PAD_2_REG(_BASE) ((pma_rx_mgs_scratch_pad_2_reg_t*) PMA_RX_MGS_SCRATCH_PAD_2_ADR(_BASE))
#define PMA_RX_MGS_SCRATCH_PAD_3_REG(_BASE) ((pma_rx_mgs_scratch_pad_3_reg_t*) PMA_RX_MGS_SCRATCH_PAD_3_ADR(_BASE))
#define PMA_RX_MGS_SCRATCH_PAD_4_REG(_BASE) ((pma_rx_mgs_scratch_pad_4_reg_t*) PMA_RX_MGS_SCRATCH_PAD_4_ADR(_BASE))
#define PMA_RX_MGS_SCRATCH_PAD_5_REG(_BASE) ((pma_rx_mgs_scratch_pad_5_reg_t*) PMA_RX_MGS_SCRATCH_PAD_5_ADR(_BASE))
#define PMA_RX_MGS_SCRATCH_PAD_6_REG(_BASE) ((pma_rx_mgs_scratch_pad_6_reg_t*) PMA_RX_MGS_SCRATCH_PAD_6_ADR(_BASE))
#define PMA_RX_MGS_SCRATCH_PAD_7_REG(_BASE) ((pma_rx_mgs_scratch_pad_7_reg_t*) PMA_RX_MGS_SCRATCH_PAD_7_ADR(_BASE))
#define PMA_RX_MGS_CTRL_0_REG(_BASE) ((pma_rx_mgs_ctrl_0_reg_t*) PMA_RX_MGS_CTRL_0_ADR(_BASE))
#define PMA_RX_MGS_CTRL_1_REG(_BASE) ((pma_rx_mgs_ctrl_1_reg_t*) PMA_RX_MGS_CTRL_1_ADR(_BASE))
#define PMA_RX_MGS_CTRL_RO_REG(_BASE) ((pma_rx_mgs_ctrl_ro_reg_t*) PMA_RX_MGS_CTRL_RO_ADR(_BASE))
#define PMA_RX_MSG_FSM_CFG_REG(_BASE) ((pma_rx_msg_fsm_cfg_reg_t*) PMA_RX_MSG_FSM_CFG_ADR(_BASE))
#define PMA_RX_MGS_MEM_CTRL_REG(_BASE) ((pma_rx_mgs_mem_ctrl_reg_t*) PMA_RX_MGS_MEM_CTRL_ADR(_BASE))
#define PMA_RX_MGS_MEM_REQ_CTRL_REG(_BASE) ((pma_rx_mgs_mem_req_ctrl_reg_t*) PMA_RX_MGS_MEM_REQ_CTRL_ADR(_BASE))
#define PMA_RX_MGS_PLL_SEL_CFG_REG(_BASE) ((pma_rx_mgs_pll_sel_cfg_reg_t*) PMA_RX_MGS_PLL_SEL_CFG_ADR(_BASE))
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_0_REG(_BASE) ((pma_rx_msg_dco_postdivclk_ctrl_0_reg_t*) PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_0_ADR(_BASE))
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_1_REG(_BASE) ((pma_rx_msg_dco_postdivclk_ctrl_1_reg_t*) PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_1_ADR(_BASE))
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_2_REG(_BASE) ((pma_rx_msg_dco_postdivclk_ctrl_2_reg_t*) PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_2_ADR(_BASE))
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_3_REG(_BASE) ((pma_rx_msg_dco_postdivclk_ctrl_3_reg_t*) PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_3_ADR(_BASE))
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_4_REG(_BASE) ((pma_rx_msg_dco_postdivclk_ctrl_4_reg_t*) PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_4_ADR(_BASE))
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_5_REG(_BASE) ((pma_rx_msg_dco_postdivclk_ctrl_5_reg_t*) PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_5_ADR(_BASE))
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_6_REG(_BASE) ((pma_rx_msg_dco_postdivclk_ctrl_6_reg_t*) PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_6_ADR(_BASE))
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_REG(_BASE) ((pma_rx_msg_dco_postdivclk_ctrl_7_reg_t*) PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_7_ADR(_BASE))
#define PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_8_REG(_BASE) ((pma_rx_msg_dco_postdivclk_ctrl_8_reg_t*) PMA_RX_MSG_DCO_POSTDIVCLK_CTRL_8_ADR(_BASE))
#define PMA_RX_MGS_PWR_MNG_CTRL_REG(_BASE) ((pma_rx_mgs_pwr_mng_ctrl_reg_t*) PMA_RX_MGS_PWR_MNG_CTRL_ADR(_BASE))
#define PMA_RX_MGS_PWR_MNG_STAT_REG(_BASE) ((pma_rx_mgs_pwr_mng_stat_reg_t*) PMA_RX_MGS_PWR_MNG_STAT_ADR(_BASE))
#define PMA_RX_MGS_CALDUTY_CTRL_0_REG(_BASE) ((pma_rx_mgs_calduty_ctrl_0_reg_t*) PMA_RX_MGS_CALDUTY_CTRL_0_ADR(_BASE))
#define PMA_RX_MGS_CALDUTY_CTRL_1_REG(_BASE) ((pma_rx_mgs_calduty_ctrl_1_reg_t*) PMA_RX_MGS_CALDUTY_CTRL_1_ADR(_BASE))
#define PMA_RX_MGS_CALFSM_CTRL_REG(_BASE) ((pma_rx_mgs_calfsm_ctrl_reg_t*) PMA_RX_MGS_CALFSM_CTRL_ADR(_BASE))
#define PMA_RX_MGS_STAT_0_REG(_BASE) ((pma_rx_mgs_stat_0_reg_t*) PMA_RX_MGS_STAT_0_ADR(_BASE))
#define PMA_RX_MGS_STAT_1_REG(_BASE) ((pma_rx_mgs_stat_1_reg_t*) PMA_RX_MGS_STAT_1_ADR(_BASE))
#define PMA_RX_MGS_STAT_2_REG(_BASE) ((pma_rx_mgs_stat_2_reg_t*) PMA_RX_MGS_STAT_2_ADR(_BASE))
#define PMA_RX_MSG_PCS_PCIE_CTRL_REG(_BASE) ((pma_rx_msg_pcs_pcie_ctrl_reg_t*) PMA_RX_MSG_PCS_PCIE_CTRL_ADR(_BASE))
#define PMA_RX_MSG_PCS_PCIE_CTRL_RO_REG(_BASE) ((pma_rx_msg_pcs_pcie_ctrl_ro_reg_t*) PMA_RX_MSG_PCS_PCIE_CTRL_RO_ADR(_BASE))
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_0_REG(_BASE) ((pma_rx_msg_fsm_ratewidth_cfg_0_reg_t*) PMA_RX_MSG_FSM_RATEWIDTH_CFG_0_ADR(_BASE))
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_1_REG(_BASE) ((pma_rx_msg_fsm_ratewidth_cfg_1_reg_t*) PMA_RX_MSG_FSM_RATEWIDTH_CFG_1_ADR(_BASE))
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_2_REG(_BASE) ((pma_rx_msg_fsm_ratewidth_cfg_2_reg_t*) PMA_RX_MSG_FSM_RATEWIDTH_CFG_2_ADR(_BASE))
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_3_REG(_BASE) ((pma_rx_msg_fsm_ratewidth_cfg_3_reg_t*) PMA_RX_MSG_FSM_RATEWIDTH_CFG_3_ADR(_BASE))
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_4_REG(_BASE) ((pma_rx_msg_fsm_ratewidth_cfg_4_reg_t*) PMA_RX_MSG_FSM_RATEWIDTH_CFG_4_ADR(_BASE))
#define PMA_RX_MSG_FSM_RATEWIDTH_CFG_5_REG(_BASE) ((pma_rx_msg_fsm_ratewidth_cfg_5_reg_t*) PMA_RX_MSG_FSM_RATEWIDTH_CFG_5_ADR(_BASE))
#define PMA_RX_MSG_FSM_CALMASTER_PSTATE_CFG_REG(_BASE) ((pma_rx_msg_fsm_calmaster_pstate_cfg_reg_t*) PMA_RX_MSG_FSM_CALMASTER_PSTATE_CFG_ADR(_BASE))
#define PMA_RX_MSG_FSM_CALMASTER_QUAD_CFG_REG(_BASE) ((pma_rx_msg_fsm_calmaster_quad_cfg_reg_t*) PMA_RX_MSG_FSM_CALMASTER_QUAD_CFG_ADR(_BASE))
#define PMA_RX_MGS_CALAVG_CTRL_0_REG(_BASE) ((pma_rx_mgs_calavg_ctrl_0_reg_t*) PMA_RX_MGS_CALAVG_CTRL_0_ADR(_BASE))
#define PMA_RX_MGS_CALAVG_CTRL_1_REG(_BASE) ((pma_rx_mgs_calavg_ctrl_1_reg_t*) PMA_RX_MGS_CALAVG_CTRL_1_ADR(_BASE))
#define PMA_RX_MGS_CALAVG_CTRL_2_REG(_BASE) ((pma_rx_mgs_calavg_ctrl_2_reg_t*) PMA_RX_MGS_CALAVG_CTRL_2_ADR(_BASE))
#define PMA_RX_MGS_CAL_STAT_REG(_BASE) ((pma_rx_mgs_cal_stat_reg_t*) PMA_RX_MGS_CAL_STAT_ADR(_BASE))
#define PMA_RX_MGS_CALAVG_STAT_REG(_BASE) ((pma_rx_mgs_calavg_stat_reg_t*) PMA_RX_MGS_CALAVG_STAT_ADR(_BASE))
#define PMA_RX_MSG_RPU_CTRL_REG(_BASE) ((pma_rx_msg_rpu_ctrl_reg_t*) PMA_RX_MSG_RPU_CTRL_ADR(_BASE))
#define PMA_RX_MSG_RPU_LUT_CFG_0_REG(_BASE) ((pma_rx_msg_rpu_lut_cfg_0_reg_t*) PMA_RX_MSG_RPU_LUT_CFG_0_ADR(_BASE))
#define PMA_RX_MSG_RPU_LUT_CFG_1_REG(_BASE) ((pma_rx_msg_rpu_lut_cfg_1_reg_t*) PMA_RX_MSG_RPU_LUT_CFG_1_ADR(_BASE))
#define PMA_RX_MSG_RPU_LUT_CFG_2_REG(_BASE) ((pma_rx_msg_rpu_lut_cfg_2_reg_t*) PMA_RX_MSG_RPU_LUT_CFG_2_ADR(_BASE))
#define PMA_RX_MSG_RPU_LUT_CFG_3_REG(_BASE) ((pma_rx_msg_rpu_lut_cfg_3_reg_t*) PMA_RX_MSG_RPU_LUT_CFG_3_ADR(_BASE))
#define PMA_RX_MSG_RPU_LUT_CFG_4_REG(_BASE) ((pma_rx_msg_rpu_lut_cfg_4_reg_t*) PMA_RX_MSG_RPU_LUT_CFG_4_ADR(_BASE))
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_0_REG(_BASE) ((pma_rx_msg_rpu_evup_delay_cfg_0_reg_t*) PMA_RX_MSG_RPU_EVUP_DELAY_CFG_0_ADR(_BASE))
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_1_REG(_BASE) ((pma_rx_msg_rpu_evup_delay_cfg_1_reg_t*) PMA_RX_MSG_RPU_EVUP_DELAY_CFG_1_ADR(_BASE))
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_2_REG(_BASE) ((pma_rx_msg_rpu_evup_delay_cfg_2_reg_t*) PMA_RX_MSG_RPU_EVUP_DELAY_CFG_2_ADR(_BASE))
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_3_REG(_BASE) ((pma_rx_msg_rpu_evup_delay_cfg_3_reg_t*) PMA_RX_MSG_RPU_EVUP_DELAY_CFG_3_ADR(_BASE))
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_4_REG(_BASE) ((pma_rx_msg_rpu_evup_delay_cfg_4_reg_t*) PMA_RX_MSG_RPU_EVUP_DELAY_CFG_4_ADR(_BASE))
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_5_REG(_BASE) ((pma_rx_msg_rpu_evup_delay_cfg_5_reg_t*) PMA_RX_MSG_RPU_EVUP_DELAY_CFG_5_ADR(_BASE))
#define PMA_RX_MSG_RPU_EVUP_DELAY_CFG_6_REG(_BASE) ((pma_rx_msg_rpu_evup_delay_cfg_6_reg_t*) PMA_RX_MSG_RPU_EVUP_DELAY_CFG_6_ADR(_BASE))
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_REG(_BASE) ((pma_rx_msg_rpu_evdn_delay_cfg_0_reg_t*) PMA_RX_MSG_RPU_EVDN_DELAY_CFG_0_ADR(_BASE))
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_REG(_BASE) ((pma_rx_msg_rpu_evdn_delay_cfg_1_reg_t*) PMA_RX_MSG_RPU_EVDN_DELAY_CFG_1_ADR(_BASE))
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_REG(_BASE) ((pma_rx_msg_rpu_evdn_delay_cfg_2_reg_t*) PMA_RX_MSG_RPU_EVDN_DELAY_CFG_2_ADR(_BASE))
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_REG(_BASE) ((pma_rx_msg_rpu_evdn_delay_cfg_3_reg_t*) PMA_RX_MSG_RPU_EVDN_DELAY_CFG_3_ADR(_BASE))
#define PMA_RX_MSG_RPU_EVDN_DELAY_CFG_4_REG(_BASE) ((pma_rx_msg_rpu_evdn_delay_cfg_4_reg_t*) PMA_RX_MSG_RPU_EVDN_DELAY_CFG_4_ADR(_BASE))
#define PMA_RX_MGS_RPU_EVENT_CFG_0_REG(_BASE) ((pma_rx_mgs_rpu_event_cfg_0_reg_t*) PMA_RX_MGS_RPU_EVENT_CFG_0_ADR(_BASE))
#define PMA_RX_MGS_RPU_EVENT_CFG_1_REG(_BASE) ((pma_rx_mgs_rpu_event_cfg_1_reg_t*) PMA_RX_MGS_RPU_EVENT_CFG_1_ADR(_BASE))
#define PMA_RX_MGS_RPU_EVENT_CFG_2_REG(_BASE) ((pma_rx_mgs_rpu_event_cfg_2_reg_t*) PMA_RX_MGS_RPU_EVENT_CFG_2_ADR(_BASE))
#define PMA_RX_MGS_RPU_EVENT_CFG_3_REG(_BASE) ((pma_rx_mgs_rpu_event_cfg_3_reg_t*) PMA_RX_MGS_RPU_EVENT_CFG_3_ADR(_BASE))
#define PMA_RX_MGS_RPU_EVENT_CFG_4_REG(_BASE) ((pma_rx_mgs_rpu_event_cfg_4_reg_t*) PMA_RX_MGS_RPU_EVENT_CFG_4_ADR(_BASE))
#define PMA_RX_MGS_RPU_EVENT_CFG_5_REG(_BASE) ((pma_rx_mgs_rpu_event_cfg_5_reg_t*) PMA_RX_MGS_RPU_EVENT_CFG_5_ADR(_BASE))
#define PMA_RX_MGS_RPU_EVENT_CFG_6_REG(_BASE) ((pma_rx_mgs_rpu_event_cfg_6_reg_t*) PMA_RX_MGS_RPU_EVENT_CFG_6_ADR(_BASE))
#define PMA_RX_MGS_RPU_EVENT_CFG_7_REG(_BASE) ((pma_rx_mgs_rpu_event_cfg_7_reg_t*) PMA_RX_MGS_RPU_EVENT_CFG_7_ADR(_BASE))
#define PMA_RX_MGS_RPU_EVENT_CFG_8_REG(_BASE) ((pma_rx_mgs_rpu_event_cfg_8_reg_t*) PMA_RX_MGS_RPU_EVENT_CFG_8_ADR(_BASE))
#define PMA_RX_MGS_RPU_EVENT_CFG_9_REG(_BASE) ((pma_rx_mgs_rpu_event_cfg_9_reg_t*) PMA_RX_MGS_RPU_EVENT_CFG_9_ADR(_BASE))
#define PMA_RX_MGS_RPU_EVENT_CFG_10_REG(_BASE) ((pma_rx_mgs_rpu_event_cfg_10_reg_t*) PMA_RX_MGS_RPU_EVENT_CFG_10_ADR(_BASE))
#define PMA_RX_MGS_RPU_EVENT_CFG_11_REG(_BASE) ((pma_rx_mgs_rpu_event_cfg_11_reg_t*) PMA_RX_MGS_RPU_EVENT_CFG_11_ADR(_BASE))
#define PMA_RX_MGS_RPU_EVENT_CFG_12_REG(_BASE) ((pma_rx_mgs_rpu_event_cfg_12_reg_t*) PMA_RX_MGS_RPU_EVENT_CFG_12_ADR(_BASE))
#define PMA_RX_MGS_RPU_EVENT_CFG_13_REG(_BASE) ((pma_rx_mgs_rpu_event_cfg_13_reg_t*) PMA_RX_MGS_RPU_EVENT_CFG_13_ADR(_BASE))
#define PMA_RX_MGS_RPU_EVENT_CFG_14_REG(_BASE) ((pma_rx_mgs_rpu_event_cfg_14_reg_t*) PMA_RX_MGS_RPU_EVENT_CFG_14_ADR(_BASE))
#define PMA_RX_MGS_RPU_EVENT_CFG_15_REG(_BASE) ((pma_rx_mgs_rpu_event_cfg_15_reg_t*) PMA_RX_MGS_RPU_EVENT_CFG_15_ADR(_BASE))
#define PMA_RX_MGS_RPU_EVENT_CFG_16_REG(_BASE) ((pma_rx_mgs_rpu_event_cfg_16_reg_t*) PMA_RX_MGS_RPU_EVENT_CFG_16_ADR(_BASE))
#define PMA_RX_MGS_RPU_EVENT_CFG_17_REG(_BASE) ((pma_rx_mgs_rpu_event_cfg_17_reg_t*) PMA_RX_MGS_RPU_EVENT_CFG_17_ADR(_BASE))
#define PMA_RX_MGS_RPU_EVENT_CFG_18_REG(_BASE) ((pma_rx_mgs_rpu_event_cfg_18_reg_t*) PMA_RX_MGS_RPU_EVENT_CFG_18_ADR(_BASE))
#define PMA_RX_MGS_RPU_EVENT_CFG_19_REG(_BASE) ((pma_rx_mgs_rpu_event_cfg_19_reg_t*) PMA_RX_MGS_RPU_EVENT_CFG_19_ADR(_BASE))
#define PMA_RX_MSG_SIGDET_CTRL_0_REG(_BASE) ((pma_rx_msg_sigdet_ctrl_0_reg_t*) PMA_RX_MSG_SIGDET_CTRL_0_ADR(_BASE))
#define PMA_RX_MSG_SIGDET_CTRL_1_REG(_BASE) ((pma_rx_msg_sigdet_ctrl_1_reg_t*) PMA_RX_MSG_SIGDET_CTRL_1_ADR(_BASE))
#define PMA_RX_MSG_SIGDET_CTRL_2_REG(_BASE) ((pma_rx_msg_sigdet_ctrl_2_reg_t*) PMA_RX_MSG_SIGDET_CTRL_2_ADR(_BASE))
#define PMA_RX_MSG_SIGDET_CTRL_3_REG(_BASE) ((pma_rx_msg_sigdet_ctrl_3_reg_t*) PMA_RX_MSG_SIGDET_CTRL_3_ADR(_BASE))
#define PMA_RX_MSG_SIGDET_CTRL_4_REG(_BASE) ((pma_rx_msg_sigdet_ctrl_4_reg_t*) PMA_RX_MSG_SIGDET_CTRL_4_ADR(_BASE))
#define PMA_RX_MSG_SIGDET_CTRL_5_REG(_BASE) ((pma_rx_msg_sigdet_ctrl_5_reg_t*) PMA_RX_MSG_SIGDET_CTRL_5_ADR(_BASE))
#define PMA_RX_MSG_SIGDET_CTRL_6_REG(_BASE) ((pma_rx_msg_sigdet_ctrl_6_reg_t*) PMA_RX_MSG_SIGDET_CTRL_6_ADR(_BASE))
#define PMA_RX_MSG_SIGDET_CTRL_7_REG(_BASE) ((pma_rx_msg_sigdet_ctrl_7_reg_t*) PMA_RX_MSG_SIGDET_CTRL_7_ADR(_BASE))
#define PMA_RX_MSG_SIGDET_CTRL_RO_REG(_BASE) ((pma_rx_msg_sigdet_ctrl_ro_reg_t*) PMA_RX_MSG_SIGDET_CTRL_RO_ADR(_BASE))
#define PMA_RX_MSG_SIGDET_STAT_REG(_BASE) ((pma_rx_msg_sigdet_stat_reg_t*) PMA_RX_MSG_SIGDET_STAT_ADR(_BASE))
#define PMA_RX_MGS_LFPS_DET_CTRL_0_REG(_BASE) ((pma_rx_mgs_lfps_det_ctrl_0_reg_t*) PMA_RX_MGS_LFPS_DET_CTRL_0_ADR(_BASE))
#define PMA_RX_MGS_LFPS_DET_CTRL_1_REG(_BASE) ((pma_rx_mgs_lfps_det_ctrl_1_reg_t*) PMA_RX_MGS_LFPS_DET_CTRL_1_ADR(_BASE))
#define PMA_RX_MGS_SQLCH_CTRL_0_REG(_BASE) ((pma_rx_mgs_sqlch_ctrl_0_reg_t*) PMA_RX_MGS_SQLCH_CTRL_0_ADR(_BASE))
#define PMA_RX_MGS_SQLCH_CTRL_1_REG(_BASE) ((pma_rx_mgs_sqlch_ctrl_1_reg_t*) PMA_RX_MGS_SQLCH_CTRL_1_ADR(_BASE))
#define PMA_RX_MGS_SQLCH_CTRL_2_REG(_BASE) ((pma_rx_mgs_sqlch_ctrl_2_reg_t*) PMA_RX_MGS_SQLCH_CTRL_2_ADR(_BASE))
#define PMA_RX_MGS_SQLCH_CTRL_3_REG(_BASE) ((pma_rx_mgs_sqlch_ctrl_3_reg_t*) PMA_RX_MGS_SQLCH_CTRL_3_ADR(_BASE))
#define PMA_RX_MGS_SQLCH_CTRL_4_REG(_BASE) ((pma_rx_mgs_sqlch_ctrl_4_reg_t*) PMA_RX_MGS_SQLCH_CTRL_4_ADR(_BASE))
#define PMA_RX_MGS_SQLCH_STAT_REG(_BASE) ((pma_rx_mgs_sqlch_stat_reg_t*) PMA_RX_MGS_SQLCH_STAT_ADR(_BASE))
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_0_REG(_BASE) ((pma_rx_mgs_sqlchoscmeas_ctrl_0_reg_t*) PMA_RX_MGS_SQLCHOSCMEAS_CTRL_0_ADR(_BASE))
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_1_REG(_BASE) ((pma_rx_mgs_sqlchoscmeas_ctrl_1_reg_t*) PMA_RX_MGS_SQLCHOSCMEAS_CTRL_1_ADR(_BASE))
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_2_REG(_BASE) ((pma_rx_mgs_sqlchoscmeas_ctrl_2_reg_t*) PMA_RX_MGS_SQLCHOSCMEAS_CTRL_2_ADR(_BASE))
#define PMA_RX_MGS_SQLCHOSCMEAS_CTRL_3_REG(_BASE) ((pma_rx_mgs_sqlchoscmeas_ctrl_3_reg_t*) PMA_RX_MGS_SQLCHOSCMEAS_CTRL_3_ADR(_BASE))
#define PMA_RX_MGS_SQLCH_CALFSM_CTRL_REG(_BASE) ((pma_rx_mgs_sqlch_calfsm_ctrl_reg_t*) PMA_RX_MGS_SQLCH_CALFSM_CTRL_ADR(_BASE))
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_0_REG(_BASE) ((pma_rx_mgs_sqlch_calfsm_stat_0_reg_t*) PMA_RX_MGS_SQLCH_CALFSM_STAT_0_ADR(_BASE))
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_1_REG(_BASE) ((pma_rx_mgs_sqlch_calfsm_stat_1_reg_t*) PMA_RX_MGS_SQLCH_CALFSM_STAT_1_ADR(_BASE))
#define PMA_RX_MGS_SQLCH_CALFSM_STAT_2_REG(_BASE) ((pma_rx_mgs_sqlch_calfsm_stat_2_reg_t*) PMA_RX_MGS_SQLCH_CALFSM_STAT_2_ADR(_BASE))
#define PMA_RX_MGS_CTRL_OVRD_REG(_BASE) ((pma_rx_mgs_ctrl_ovrd_reg_t*) PMA_RX_MGS_CTRL_OVRD_ADR(_BASE))
#define PMA_RX_MGS_CTRL_OVRD_RO_REG(_BASE) ((pma_rx_mgs_ctrl_ovrd_ro_reg_t*) PMA_RX_MGS_CTRL_OVRD_RO_ADR(_BASE))
#define PMA_RX_MGS_CTRL_OUT_REG(_BASE) ((pma_rx_mgs_ctrl_out_reg_t*) PMA_RX_MGS_CTRL_OUT_ADR(_BASE))
#define PMA_RX_MGS_MARGIN_CTRL_0_REG(_BASE) ((pma_rx_mgs_margin_ctrl_0_reg_t*) PMA_RX_MGS_MARGIN_CTRL_0_ADR(_BASE))
#define PMA_RX_MGS_MARGIN_CTRL_1_REG(_BASE) ((pma_rx_mgs_margin_ctrl_1_reg_t*) PMA_RX_MGS_MARGIN_CTRL_1_ADR(_BASE))
#define PMA_RX_MGS_MARGIN_CTRL_2_REG(_BASE) ((pma_rx_mgs_margin_ctrl_2_reg_t*) PMA_RX_MGS_MARGIN_CTRL_2_ADR(_BASE))
#define PMA_RX_MGS_MARGIN_STAT_REG(_BASE) ((pma_rx_mgs_margin_stat_reg_t*) PMA_RX_MGS_MARGIN_STAT_ADR(_BASE))
#define PMA_RX_MGS_INPUT_PIN_OVRD_REG(_BASE) ((pma_rx_mgs_input_pin_ovrd_reg_t*) PMA_RX_MGS_INPUT_PIN_OVRD_ADR(_BASE))
#define PMA_RX_MGS_INPUT_PIN_PREOVRD_REG(_BASE) ((pma_rx_mgs_input_pin_preovrd_reg_t*) PMA_RX_MGS_INPUT_PIN_PREOVRD_ADR(_BASE))
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_0_REG(_BASE) ((pma_rx_mgs_output_pin_ovrd_0_reg_t*) PMA_RX_MGS_OUTPUT_PIN_OVRD_0_ADR(_BASE))
#define PMA_RX_MGS_OUTPUT_PIN_OVRD_1_REG(_BASE) ((pma_rx_mgs_output_pin_ovrd_1_reg_t*) PMA_RX_MGS_OUTPUT_PIN_OVRD_1_ADR(_BASE))
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_0_REG(_BASE) ((pma_rx_mgs_output_pin_preovrd_0_reg_t*) PMA_RX_MGS_OUTPUT_PIN_PREOVRD_0_ADR(_BASE))
#define PMA_RX_MGS_OUTPUT_PIN_PREOVRD_1_REG(_BASE) ((pma_rx_mgs_output_pin_preovrd_1_reg_t*) PMA_RX_MGS_OUTPUT_PIN_PREOVRD_1_ADR(_BASE))
#define PMA_RX_MGS_BRKPT_CTRL_REG(_BASE) ((pma_rx_mgs_brkpt_ctrl_reg_t*) PMA_RX_MGS_BRKPT_CTRL_ADR(_BASE))
#define PMA_RX_MGS_BRKPT_STAT_REG(_BASE) ((pma_rx_mgs_brkpt_stat_reg_t*) PMA_RX_MGS_BRKPT_STAT_ADR(_BASE))
#define PMA_RX_MGS_BRKPT_CLR_REG(_BASE) ((pma_rx_mgs_brkpt_clr_reg_t*) PMA_RX_MGS_BRKPT_CLR_ADR(_BASE))
#define PMA_RX_MSG_DCO_STAT_REG(_BASE) ((pma_rx_msg_dco_stat_reg_t*) PMA_RX_MSG_DCO_STAT_ADR(_BASE))
#define PMA_RX_MSG_DCO_CTRL_ANA_REG(_BASE) ((pma_rx_msg_dco_ctrl_ana_reg_t*) PMA_RX_MSG_DCO_CTRL_ANA_ADR(_BASE))
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_REG(_BASE) ((pma_rx_msg_dco_ctrl_dig_muxd0_reg_t*) PMA_RX_MSG_DCO_CTRL_DIG_MUXD0_ADR(_BASE))
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_REG(_BASE) ((pma_rx_msg_dco_ctrl_dig_muxd1_reg_t*) PMA_RX_MSG_DCO_CTRL_DIG_MUXD1_ADR(_BASE))
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_REG(_BASE) ((pma_rx_msg_dco_ctrl_dig_muxd2_reg_t*) PMA_RX_MSG_DCO_CTRL_DIG_MUXD2_ADR(_BASE))
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_REG(_BASE) ((pma_rx_msg_dco_ctrl_dig_muxd3_reg_t*) PMA_RX_MSG_DCO_CTRL_DIG_MUXD3_ADR(_BASE))
#define PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_REG(_BASE) ((pma_rx_msg_dco_ctrl_dig_muxd4_reg_t*) PMA_RX_MSG_DCO_CTRL_DIG_MUXD4_ADR(_BASE))
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD0_REG(_BASE) ((pma_rx_mgs_cdr_pksen_ctrl_muxd0_reg_t*) PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD0_ADR(_BASE))
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD1_REG(_BASE) ((pma_rx_mgs_cdr_pksen_ctrl_muxd1_reg_t*) PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD1_ADR(_BASE))
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD2_REG(_BASE) ((pma_rx_mgs_cdr_pksen_ctrl_muxd2_reg_t*) PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD2_ADR(_BASE))
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD3_REG(_BASE) ((pma_rx_mgs_cdr_pksen_ctrl_muxd3_reg_t*) PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD3_ADR(_BASE))
#define PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD4_REG(_BASE) ((pma_rx_mgs_cdr_pksen_ctrl_muxd4_reg_t*) PMA_RX_MGS_CDR_PKSEN_CTRL_MUXD4_ADR(_BASE))
#define PMA_RX_MGS_CDR_PKSEN_STAT_REG(_BASE) ((pma_rx_mgs_cdr_pksen_stat_reg_t*) PMA_RX_MGS_CDR_PKSEN_STAT_ADR(_BASE))
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD0_REG(_BASE) ((pma_rx_msg_dco_swing_ctrl_muxd0_reg_t*) PMA_RX_MSG_DCO_SWING_CTRL_MUXD0_ADR(_BASE))
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD1_REG(_BASE) ((pma_rx_msg_dco_swing_ctrl_muxd1_reg_t*) PMA_RX_MSG_DCO_SWING_CTRL_MUXD1_ADR(_BASE))
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD2_REG(_BASE) ((pma_rx_msg_dco_swing_ctrl_muxd2_reg_t*) PMA_RX_MSG_DCO_SWING_CTRL_MUXD2_ADR(_BASE))
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD3_REG(_BASE) ((pma_rx_msg_dco_swing_ctrl_muxd3_reg_t*) PMA_RX_MSG_DCO_SWING_CTRL_MUXD3_ADR(_BASE))
#define PMA_RX_MSG_DCO_SWING_CTRL_MUXD4_REG(_BASE) ((pma_rx_msg_dco_swing_ctrl_muxd4_reg_t*) PMA_RX_MSG_DCO_SWING_CTRL_MUXD4_ADR(_BASE))
#define PMA_RX_MSG_DCO_BANGBANG_PD_CTRL_0_REG(_BASE) ((pma_rx_msg_dco_bangbang_pd_ctrl_0_reg_t*) PMA_RX_MSG_DCO_BANGBANG_PD_CTRL_0_ADR(_BASE))
#define PMA_RX_MSG_DCO_BANGBANG_PD_CTRL_1_REG(_BASE) ((pma_rx_msg_dco_bangbang_pd_ctrl_1_reg_t*) PMA_RX_MSG_DCO_BANGBANG_PD_CTRL_1_ADR(_BASE))
#define PMA_RX_MSG_DCO_BAUD_PD_CTRL_0_REG(_BASE) ((pma_rx_msg_dco_baud_pd_ctrl_0_reg_t*) PMA_RX_MSG_DCO_BAUD_PD_CTRL_0_ADR(_BASE))
#define PMA_RX_MSG_DCO_BAUD_PD_CTRL_1_REG(_BASE) ((pma_rx_msg_dco_baud_pd_ctrl_1_reg_t*) PMA_RX_MSG_DCO_BAUD_PD_CTRL_1_ADR(_BASE))
#define PMA_RX_MSG_DCO_BAUD_PD_CTRL_2_REG(_BASE) ((pma_rx_msg_dco_baud_pd_ctrl_2_reg_t*) PMA_RX_MSG_DCO_BAUD_PD_CTRL_2_ADR(_BASE))
#define PMA_RX_MSG_DCO_LOCK_TFER_CTRL_REG(_BASE) ((pma_rx_msg_dco_lock_tfer_ctrl_reg_t*) PMA_RX_MSG_DCO_LOCK_TFER_CTRL_ADR(_BASE))
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_REG(_BASE) ((pma_rx_msg_dco_optclfastlock_ctrl_reg_t*) PMA_RX_MSG_DCO_OPTCLFASTLOCK_CTRL_ADR(_BASE))
#define PMA_RX_MSG_DCO_OPTCLFASTLOCK_STAT_REG(_BASE) ((pma_rx_msg_dco_optclfastlock_stat_reg_t*) PMA_RX_MSG_DCO_OPTCLFASTLOCK_STAT_ADR(_BASE))
#define PMA_RX_MSG_DCO_ETH_PMD_STAT_0_REG(_BASE) ((pma_rx_msg_dco_eth_pmd_stat_0_reg_t*) PMA_RX_MSG_DCO_ETH_PMD_STAT_0_ADR(_BASE))
#define PMA_RX_MSG_DCO_ETH_PMD_STAT_1_REG(_BASE) ((pma_rx_msg_dco_eth_pmd_stat_1_reg_t*) PMA_RX_MSG_DCO_ETH_PMD_STAT_1_ADR(_BASE))
#define PMA_RX_MSG_DCO_ETH_PMD_STAT_2_REG(_BASE) ((pma_rx_msg_dco_eth_pmd_stat_2_reg_t*) PMA_RX_MSG_DCO_ETH_PMD_STAT_2_ADR(_BASE))
#define PMA_RX_MSG_DCO_ETH_PMD_STAT_3_REG(_BASE) ((pma_rx_msg_dco_eth_pmd_stat_3_reg_t*) PMA_RX_MSG_DCO_ETH_PMD_STAT_3_ADR(_BASE))
#define PMA_RX_MSG_DCO_OVRD_CTRL_0_REG(_BASE) ((pma_rx_msg_dco_ovrd_ctrl_0_reg_t*) PMA_RX_MSG_DCO_OVRD_CTRL_0_ADR(_BASE))
#define PMA_RX_MSG_DCO_OVRD_CTRL_1_REG(_BASE) ((pma_rx_msg_dco_ovrd_ctrl_1_reg_t*) PMA_RX_MSG_DCO_OVRD_CTRL_1_ADR(_BASE))
#define PMA_RX_MSG_DCO_OVRD_CTRL_2_REG(_BASE) ((pma_rx_msg_dco_ovrd_ctrl_2_reg_t*) PMA_RX_MSG_DCO_OVRD_CTRL_2_ADR(_BASE))
#define PMA_RX_MSG_DCO_OVRD_CTRL_3_REG(_BASE) ((pma_rx_msg_dco_ovrd_ctrl_3_reg_t*) PMA_RX_MSG_DCO_OVRD_CTRL_3_ADR(_BASE))
#define PMA_RX_MSG_DCO_OVRD_CTRL_4_REG(_BASE) ((pma_rx_msg_dco_ovrd_ctrl_4_reg_t*) PMA_RX_MSG_DCO_OVRD_CTRL_4_ADR(_BASE))
#define PMA_RX_MSG_PHDT_OVRD_CTRL_0_REG(_BASE) ((pma_rx_msg_phdt_ovrd_ctrl_0_reg_t*) PMA_RX_MSG_PHDT_OVRD_CTRL_0_ADR(_BASE))
#define PMA_RX_MSG_DCO_OVRD_STAT_0_REG(_BASE) ((pma_rx_msg_dco_ovrd_stat_0_reg_t*) PMA_RX_MSG_DCO_OVRD_STAT_0_ADR(_BASE))
#define PMA_RX_MSG_DCO_OVRD_STAT_1_REG(_BASE) ((pma_rx_msg_dco_ovrd_stat_1_reg_t*) PMA_RX_MSG_DCO_OVRD_STAT_1_ADR(_BASE))
#define PMA_RX_MSG_DCO_OVRD_STAT_2_REG(_BASE) ((pma_rx_msg_dco_ovrd_stat_2_reg_t*) PMA_RX_MSG_DCO_OVRD_STAT_2_ADR(_BASE))
#define PMA_RX_MSG_DCO_OVRD_STAT_3_REG(_BASE) ((pma_rx_msg_dco_ovrd_stat_3_reg_t*) PMA_RX_MSG_DCO_OVRD_STAT_3_ADR(_BASE))
#define PMA_RX_MSG_DCO_OVRD_STAT_4_REG(_BASE) ((pma_rx_msg_dco_ovrd_stat_4_reg_t*) PMA_RX_MSG_DCO_OVRD_STAT_4_ADR(_BASE))
#define PMA_RX_MSG_PHDT_OVRD_STAT_0_REG(_BASE) ((pma_rx_msg_phdt_ovrd_stat_0_reg_t*) PMA_RX_MSG_PHDT_OVRD_STAT_0_ADR(_BASE))
#define PMA_RX_MGS_ADC_SPARE_REG(_BASE) ((pma_rx_mgs_adc_spare_reg_t*) PMA_RX_MGS_ADC_SPARE_ADR(_BASE))
#define PMA_RX_MGS_CKM_CTRL_0_REG(_BASE) ((pma_rx_mgs_ckm_ctrl_0_reg_t*) PMA_RX_MGS_CKM_CTRL_0_ADR(_BASE))
#define PMA_RX_MGS_CKM_CTRL_1_REG(_BASE) ((pma_rx_mgs_ckm_ctrl_1_reg_t*) PMA_RX_MGS_CKM_CTRL_1_ADR(_BASE))
#define PMA_RX_MGS_CKM_CTRL_2_REG(_BASE) ((pma_rx_mgs_ckm_ctrl_2_reg_t*) PMA_RX_MGS_CKM_CTRL_2_ADR(_BASE))
#define PMA_RX_MGS_CKM_STAT_REG(_BASE) ((pma_rx_mgs_ckm_stat_reg_t*) PMA_RX_MGS_CKM_STAT_ADR(_BASE))
#define PMA_RX_MSG_BIST_CFG_0_REG(_BASE) ((pma_rx_msg_bist_cfg_0_reg_t*) PMA_RX_MSG_BIST_CFG_0_ADR(_BASE))
#define PMA_RX_MSG_BIST_CFG_1_REG(_BASE) ((pma_rx_msg_bist_cfg_1_reg_t*) PMA_RX_MSG_BIST_CFG_1_ADR(_BASE))
#define PMA_RX_MSG_BIST_SEED_REG(_BASE) ((pma_rx_msg_bist_seed_reg_t*) PMA_RX_MSG_BIST_SEED_ADR(_BASE))
#define PMA_RX_MSG_BIST_UDP_VF00_REG(_BASE) ((pma_rx_msg_bist_udp_vf00_reg_t*) PMA_RX_MSG_BIST_UDP_VF00_ADR(_BASE))
#define PMA_RX_MSG_BIST_UDP_VF01_REG(_BASE) ((pma_rx_msg_bist_udp_vf01_reg_t*) PMA_RX_MSG_BIST_UDP_VF01_ADR(_BASE))
#define PMA_RX_MSG_BIST_UDP_VF02_REG(_BASE) ((pma_rx_msg_bist_udp_vf02_reg_t*) PMA_RX_MSG_BIST_UDP_VF02_ADR(_BASE))
#define PMA_RX_MSG_BIST_UDP_VF03_REG(_BASE) ((pma_rx_msg_bist_udp_vf03_reg_t*) PMA_RX_MSG_BIST_UDP_VF03_ADR(_BASE))
#define PMA_RX_MSG_BIST_UDP_VF04_REG(_BASE) ((pma_rx_msg_bist_udp_vf04_reg_t*) PMA_RX_MSG_BIST_UDP_VF04_ADR(_BASE))
#define PMA_RX_MSG_BIST_UDP_VF05_REG(_BASE) ((pma_rx_msg_bist_udp_vf05_reg_t*) PMA_RX_MSG_BIST_UDP_VF05_ADR(_BASE))
#define PMA_RX_MSG_BIST_UDP_VF06_REG(_BASE) ((pma_rx_msg_bist_udp_vf06_reg_t*) PMA_RX_MSG_BIST_UDP_VF06_ADR(_BASE))
#define PMA_RX_MSG_BIST_UDP_VF07_REG(_BASE) ((pma_rx_msg_bist_udp_vf07_reg_t*) PMA_RX_MSG_BIST_UDP_VF07_ADR(_BASE))
#define PMA_RX_MSG_BIST_UDP_VF08_REG(_BASE) ((pma_rx_msg_bist_udp_vf08_reg_t*) PMA_RX_MSG_BIST_UDP_VF08_ADR(_BASE))
#define PMA_RX_MSG_BIST_UDP_VF09_REG(_BASE) ((pma_rx_msg_bist_udp_vf09_reg_t*) PMA_RX_MSG_BIST_UDP_VF09_ADR(_BASE))
#define PMA_RX_MSG_BIST_ERRCNT_STAT_0_REG(_BASE) ((pma_rx_msg_bist_errcnt_stat_0_reg_t*) PMA_RX_MSG_BIST_ERRCNT_STAT_0_ADR(_BASE))
#define PMA_RX_MSG_BIST_ERRCNT_STAT_1_REG(_BASE) ((pma_rx_msg_bist_errcnt_stat_1_reg_t*) PMA_RX_MSG_BIST_ERRCNT_STAT_1_ADR(_BASE))
#define PMA_RX_MSG_BIST_ERRCNT_STAT_2_REG(_BASE) ((pma_rx_msg_bist_errcnt_stat_2_reg_t*) PMA_RX_MSG_BIST_ERRCNT_STAT_2_ADR(_BASE))
#define PMA_RX_MSG_BIST_ERRCNT_STAT_3_REG(_BASE) ((pma_rx_msg_bist_errcnt_stat_3_reg_t*) PMA_RX_MSG_BIST_ERRCNT_STAT_3_ADR(_BASE))
#define PMA_RX_MSG_BIST_STAT_DATACHKCNT_REG(_BASE) ((pma_rx_msg_bist_stat_datachkcnt_reg_t*) PMA_RX_MSG_BIST_STAT_DATACHKCNT_ADR(_BASE))
#define PMA_RX_MSG_BIST_DATA_STAT_0_REG(_BASE) ((pma_rx_msg_bist_data_stat_0_reg_t*) PMA_RX_MSG_BIST_DATA_STAT_0_ADR(_BASE))
#define PMA_RX_MSG_BIST_DATA_STAT_1_REG(_BASE) ((pma_rx_msg_bist_data_stat_1_reg_t*) PMA_RX_MSG_BIST_DATA_STAT_1_ADR(_BASE))
#define PMA_RX_MSG_BIST_DATA_STAT_2_REG(_BASE) ((pma_rx_msg_bist_data_stat_2_reg_t*) PMA_RX_MSG_BIST_DATA_STAT_2_ADR(_BASE))
#define PMA_RX_MSG_BIST_DATA_STAT_3_REG(_BASE) ((pma_rx_msg_bist_data_stat_3_reg_t*) PMA_RX_MSG_BIST_DATA_STAT_3_ADR(_BASE))
#define PMA_RX_MSG_BIST_DATA_STAT_4_REG(_BASE) ((pma_rx_msg_bist_data_stat_4_reg_t*) PMA_RX_MSG_BIST_DATA_STAT_4_ADR(_BASE))
#define PMA_RX_MSG_BIST_DATA_STAT_5_REG(_BASE) ((pma_rx_msg_bist_data_stat_5_reg_t*) PMA_RX_MSG_BIST_DATA_STAT_5_ADR(_BASE))
#define PMA_RX_MSG_BIST_DATA_STAT_6_REG(_BASE) ((pma_rx_msg_bist_data_stat_6_reg_t*) PMA_RX_MSG_BIST_DATA_STAT_6_ADR(_BASE))
#define PMA_RX_MSG_BIST_DATA_STAT_7_REG(_BASE) ((pma_rx_msg_bist_data_stat_7_reg_t*) PMA_RX_MSG_BIST_DATA_STAT_7_ADR(_BASE))
#define PMA_RX_MSG_BIST_DATA_STAT_8_REG(_BASE) ((pma_rx_msg_bist_data_stat_8_reg_t*) PMA_RX_MSG_BIST_DATA_STAT_8_ADR(_BASE))
#define PMA_RX_MSG_BIST_DATA_STAT_9_REG(_BASE) ((pma_rx_msg_bist_data_stat_9_reg_t*) PMA_RX_MSG_BIST_DATA_STAT_9_ADR(_BASE))
#define PMA_RX_MSG_BIST_DATA_STAT_10_REG(_BASE) ((pma_rx_msg_bist_data_stat_10_reg_t*) PMA_RX_MSG_BIST_DATA_STAT_10_ADR(_BASE))
#define PMA_RX_MSG_BIST_DATA_STAT_11_REG(_BASE) ((pma_rx_msg_bist_data_stat_11_reg_t*) PMA_RX_MSG_BIST_DATA_STAT_11_ADR(_BASE))
#define PMA_RX_MSG_BIST_DATA_STAT_12_REG(_BASE) ((pma_rx_msg_bist_data_stat_12_reg_t*) PMA_RX_MSG_BIST_DATA_STAT_12_ADR(_BASE))
#define PMA_RX_MSG_BIST_DATA_STAT_13_REG(_BASE) ((pma_rx_msg_bist_data_stat_13_reg_t*) PMA_RX_MSG_BIST_DATA_STAT_13_ADR(_BASE))
#define PMA_RX_MSG_BIST_DATA_STAT_14_REG(_BASE) ((pma_rx_msg_bist_data_stat_14_reg_t*) PMA_RX_MSG_BIST_DATA_STAT_14_ADR(_BASE))
#define PMA_RX_MSG_BIST_DATA_STAT_15_REG(_BASE) ((pma_rx_msg_bist_data_stat_15_reg_t*) PMA_RX_MSG_BIST_DATA_STAT_15_ADR(_BASE))
#define PMA_RX_MGS_AFFE_COEFF_SET_STAT_0_REG(_BASE) ((pma_rx_mgs_affe_coeff_set_stat_0_reg_t*) PMA_RX_MGS_AFFE_COEFF_SET_STAT_0_ADR(_BASE))
#define PMA_RX_MGS_AFFE_COEFF_SET_STAT_1_REG(_BASE) ((pma_rx_mgs_affe_coeff_set_stat_1_reg_t*) PMA_RX_MGS_AFFE_COEFF_SET_STAT_1_ADR(_BASE))
#define PMA_RX_MGS_AFFE_COEFF_SET_OVRD_0_REG(_BASE) ((pma_rx_mgs_affe_coeff_set_ovrd_0_reg_t*) PMA_RX_MGS_AFFE_COEFF_SET_OVRD_0_ADR(_BASE))
#define PMA_RX_MGS_AFFE_COEFF_SET_OVRD_1_REG(_BASE) ((pma_rx_mgs_affe_coeff_set_ovrd_1_reg_t*) PMA_RX_MGS_AFFE_COEFF_SET_OVRD_1_ADR(_BASE))
#define PMA_RX_MGS_OPS_IF_STAT_0_REG(_BASE) ((pma_rx_mgs_ops_if_stat_0_reg_t*) PMA_RX_MGS_OPS_IF_STAT_0_ADR(_BASE))
#define PMA_RX_MGS_OPS_IF_STAT_1_REG(_BASE) ((pma_rx_mgs_ops_if_stat_1_reg_t*) PMA_RX_MGS_OPS_IF_STAT_1_ADR(_BASE))
#define PMA_RX_MGS_OPS_IF_STAT_2_REG(_BASE) ((pma_rx_mgs_ops_if_stat_2_reg_t*) PMA_RX_MGS_OPS_IF_STAT_2_ADR(_BASE))
#define PMA_RX_MGS_OPS_IF_OVRD_0_REG(_BASE) ((pma_rx_mgs_ops_if_ovrd_0_reg_t*) PMA_RX_MGS_OPS_IF_OVRD_0_ADR(_BASE))
#define PMA_RX_MGS_OPS_IF_OVRD_1_REG(_BASE) ((pma_rx_mgs_ops_if_ovrd_1_reg_t*) PMA_RX_MGS_OPS_IF_OVRD_1_ADR(_BASE))
#define PMA_RX_MGS_OPS_IF_OVRD_2_REG(_BASE) ((pma_rx_mgs_ops_if_ovrd_2_reg_t*) PMA_RX_MGS_OPS_IF_OVRD_2_ADR(_BASE))
#define PMA_RX_MGS_SCRATCHY_0_REG(_BASE) ((pma_rx_mgs_scratchy_0_reg_t*) PMA_RX_MGS_SCRATCHY_0_ADR(_BASE))
#define PMA_RX_MGS_SCRATCHY_1_REG(_BASE) ((pma_rx_mgs_scratchy_1_reg_t*) PMA_RX_MGS_SCRATCHY_1_ADR(_BASE))
#define PMA_RX_MGS_CDR_GENERAL_CTRL_REG(_BASE) ((pma_rx_mgs_cdr_general_ctrl_reg_t*) PMA_RX_MGS_CDR_GENERAL_CTRL_ADR(_BASE))
#define PMA_RX_MGS_CDR_DIV0_MUXD0_REG(_BASE) ((pma_rx_mgs_cdr_div0_muxd0_reg_t*) PMA_RX_MGS_CDR_DIV0_MUXD0_ADR(_BASE))
#define PMA_RX_MGS_CDR_DIV0_MUXD1_REG(_BASE) ((pma_rx_mgs_cdr_div0_muxd1_reg_t*) PMA_RX_MGS_CDR_DIV0_MUXD1_ADR(_BASE))
#define PMA_RX_MGS_CDR_DIV0_MUXD2_REG(_BASE) ((pma_rx_mgs_cdr_div0_muxd2_reg_t*) PMA_RX_MGS_CDR_DIV0_MUXD2_ADR(_BASE))
#define PMA_RX_MGS_CDR_DIV0_MUXD3_REG(_BASE) ((pma_rx_mgs_cdr_div0_muxd3_reg_t*) PMA_RX_MGS_CDR_DIV0_MUXD3_ADR(_BASE))
#define PMA_RX_MGS_CDR_DIV0_MUXD4_REG(_BASE) ((pma_rx_mgs_cdr_div0_muxd4_reg_t*) PMA_RX_MGS_CDR_DIV0_MUXD4_ADR(_BASE))
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD0_REG(_BASE) ((pma_rx_mgs_cdr_frac_lock0_muxd0_reg_t*) PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD0_ADR(_BASE))
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD1_REG(_BASE) ((pma_rx_mgs_cdr_frac_lock0_muxd1_reg_t*) PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD1_ADR(_BASE))
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD2_REG(_BASE) ((pma_rx_mgs_cdr_frac_lock0_muxd2_reg_t*) PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD2_ADR(_BASE))
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD3_REG(_BASE) ((pma_rx_mgs_cdr_frac_lock0_muxd3_reg_t*) PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD3_ADR(_BASE))
#define PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD4_REG(_BASE) ((pma_rx_mgs_cdr_frac_lock0_muxd4_reg_t*) PMA_RX_MGS_CDR_FRAC_LOCK0_MUXD4_ADR(_BASE))
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD0_REG(_BASE) ((pma_rx_mgs_cdr_frac_lock1_muxd0_reg_t*) PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD0_ADR(_BASE))
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD1_REG(_BASE) ((pma_rx_mgs_cdr_frac_lock1_muxd1_reg_t*) PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD1_ADR(_BASE))
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD2_REG(_BASE) ((pma_rx_mgs_cdr_frac_lock1_muxd2_reg_t*) PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD2_ADR(_BASE))
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD3_REG(_BASE) ((pma_rx_mgs_cdr_frac_lock1_muxd3_reg_t*) PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD3_ADR(_BASE))
#define PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD4_REG(_BASE) ((pma_rx_mgs_cdr_frac_lock1_muxd4_reg_t*) PMA_RX_MGS_CDR_FRAC_LOCK1_MUXD4_ADR(_BASE))
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_REG(_BASE) ((pma_rx_mgs_cdr_lockfsm_ctrl_muxd0_reg_t*) PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD0_ADR(_BASE))
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_REG(_BASE) ((pma_rx_mgs_cdr_lockfsm_ctrl_muxd1_reg_t*) PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD1_ADR(_BASE))
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_REG(_BASE) ((pma_rx_mgs_cdr_lockfsm_ctrl_muxd2_reg_t*) PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD2_ADR(_BASE))
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_REG(_BASE) ((pma_rx_mgs_cdr_lockfsm_ctrl_muxd3_reg_t*) PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD3_ADR(_BASE))
#define PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_REG(_BASE) ((pma_rx_mgs_cdr_lockfsm_ctrl_muxd4_reg_t*) PMA_RX_MGS_CDR_LOCKFSM_CTRL_MUXD4_ADR(_BASE))
#define PMA_RX_MGS_CDR_LOCKFSM_STAT_REG(_BASE) ((pma_rx_mgs_cdr_lockfsm_stat_reg_t*) PMA_RX_MGS_CDR_LOCKFSM_STAT_ADR(_BASE))
#define PMA_RX_MGS_CDR_TAP_OVRD_REG(_BASE) ((pma_rx_mgs_cdr_tap_ovrd_reg_t*) PMA_RX_MGS_CDR_TAP_OVRD_ADR(_BASE))
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD0_REG(_BASE) ((pma_rx_mgs_cdr_dfx_dco_muxd0_reg_t*) PMA_RX_MGS_CDR_DFX_DCO_MUXD0_ADR(_BASE))
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD1_REG(_BASE) ((pma_rx_mgs_cdr_dfx_dco_muxd1_reg_t*) PMA_RX_MGS_CDR_DFX_DCO_MUXD1_ADR(_BASE))
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD2_REG(_BASE) ((pma_rx_mgs_cdr_dfx_dco_muxd2_reg_t*) PMA_RX_MGS_CDR_DFX_DCO_MUXD2_ADR(_BASE))
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD3_REG(_BASE) ((pma_rx_mgs_cdr_dfx_dco_muxd3_reg_t*) PMA_RX_MGS_CDR_DFX_DCO_MUXD3_ADR(_BASE))
#define PMA_RX_MGS_CDR_DFX_DCO_MUXD4_REG(_BASE) ((pma_rx_mgs_cdr_dfx_dco_muxd4_reg_t*) PMA_RX_MGS_CDR_DFX_DCO_MUXD4_ADR(_BASE))
#define PMA_RX_MGS_CDR_DIV1_REG(_BASE) ((pma_rx_mgs_cdr_div1_reg_t*) PMA_RX_MGS_CDR_DIV1_ADR(_BASE))
#define PMA_RX_MGS_CDR_DIV1_MUXD0_REG(_BASE) ((pma_rx_mgs_cdr_div1_muxd0_reg_t*) PMA_RX_MGS_CDR_DIV1_MUXD0_ADR(_BASE))
#define PMA_RX_MGS_CDR_DIV1_MUXD1_REG(_BASE) ((pma_rx_mgs_cdr_div1_muxd1_reg_t*) PMA_RX_MGS_CDR_DIV1_MUXD1_ADR(_BASE))
#define PMA_RX_MGS_CDR_DIV1_MUXD2_REG(_BASE) ((pma_rx_mgs_cdr_div1_muxd2_reg_t*) PMA_RX_MGS_CDR_DIV1_MUXD2_ADR(_BASE))
#define PMA_RX_MGS_CDR_DIV1_MUXD3_REG(_BASE) ((pma_rx_mgs_cdr_div1_muxd3_reg_t*) PMA_RX_MGS_CDR_DIV1_MUXD3_ADR(_BASE))
#define PMA_RX_MGS_CDR_DIV1_MUXD4_REG(_BASE) ((pma_rx_mgs_cdr_div1_muxd4_reg_t*) PMA_RX_MGS_CDR_DIV1_MUXD4_ADR(_BASE))
#define PMA_RX_MGS_CDR_CNTR_BIST_SETTINGS_REG(_BASE) ((pma_rx_mgs_cdr_cntr_bist_settings_reg_t*) PMA_RX_MGS_CDR_CNTR_BIST_SETTINGS_ADR(_BASE))
#define PMA_RX_MGS_CDR_CALIB0_MUXD0_REG(_BASE) ((pma_rx_mgs_cdr_calib0_muxd0_reg_t*) PMA_RX_MGS_CDR_CALIB0_MUXD0_ADR(_BASE))
#define PMA_RX_MGS_CDR_CALIB0_MUXD1_REG(_BASE) ((pma_rx_mgs_cdr_calib0_muxd1_reg_t*) PMA_RX_MGS_CDR_CALIB0_MUXD1_ADR(_BASE))
#define PMA_RX_MGS_CDR_CALIB0_MUXD2_REG(_BASE) ((pma_rx_mgs_cdr_calib0_muxd2_reg_t*) PMA_RX_MGS_CDR_CALIB0_MUXD2_ADR(_BASE))
#define PMA_RX_MGS_CDR_CALIB0_MUXD3_REG(_BASE) ((pma_rx_mgs_cdr_calib0_muxd3_reg_t*) PMA_RX_MGS_CDR_CALIB0_MUXD3_ADR(_BASE))
#define PMA_RX_MGS_CDR_CALIB0_MUXD4_REG(_BASE) ((pma_rx_mgs_cdr_calib0_muxd4_reg_t*) PMA_RX_MGS_CDR_CALIB0_MUXD4_ADR(_BASE))
#define PMA_RX_MGS_CDR_CALIB1_MUXD0_REG(_BASE) ((pma_rx_mgs_cdr_calib1_muxd0_reg_t*) PMA_RX_MGS_CDR_CALIB1_MUXD0_ADR(_BASE))
#define PMA_RX_MGS_CDR_CALIB1_MUXD1_REG(_BASE) ((pma_rx_mgs_cdr_calib1_muxd1_reg_t*) PMA_RX_MGS_CDR_CALIB1_MUXD1_ADR(_BASE))
#define PMA_RX_MGS_CDR_CALIB1_MUXD2_REG(_BASE) ((pma_rx_mgs_cdr_calib1_muxd2_reg_t*) PMA_RX_MGS_CDR_CALIB1_MUXD2_ADR(_BASE))
#define PMA_RX_MGS_CDR_CALIB1_MUXD3_REG(_BASE) ((pma_rx_mgs_cdr_calib1_muxd3_reg_t*) PMA_RX_MGS_CDR_CALIB1_MUXD3_ADR(_BASE))
#define PMA_RX_MGS_CDR_CALIB1_MUXD4_REG(_BASE) ((pma_rx_mgs_cdr_calib1_muxd4_reg_t*) PMA_RX_MGS_CDR_CALIB1_MUXD4_ADR(_BASE))
#define PMA_RX_MGS_CDR_CALIB2_MUXD0_REG(_BASE) ((pma_rx_mgs_cdr_calib2_muxd0_reg_t*) PMA_RX_MGS_CDR_CALIB2_MUXD0_ADR(_BASE))
#define PMA_RX_MGS_CDR_CALIB2_MUXD1_REG(_BASE) ((pma_rx_mgs_cdr_calib2_muxd1_reg_t*) PMA_RX_MGS_CDR_CALIB2_MUXD1_ADR(_BASE))
#define PMA_RX_MGS_CDR_CALIB2_MUXD2_REG(_BASE) ((pma_rx_mgs_cdr_calib2_muxd2_reg_t*) PMA_RX_MGS_CDR_CALIB2_MUXD2_ADR(_BASE))
#define PMA_RX_MGS_CDR_CALIB2_MUXD3_REG(_BASE) ((pma_rx_mgs_cdr_calib2_muxd3_reg_t*) PMA_RX_MGS_CDR_CALIB2_MUXD3_ADR(_BASE))
#define PMA_RX_MGS_CDR_CALIB2_MUXD4_REG(_BASE) ((pma_rx_mgs_cdr_calib2_muxd4_reg_t*) PMA_RX_MGS_CDR_CALIB2_MUXD4_ADR(_BASE))
#define PMA_RX_MGS_CDR_CALIB3_MUXD0_REG(_BASE) ((pma_rx_mgs_cdr_calib3_muxd0_reg_t*) PMA_RX_MGS_CDR_CALIB3_MUXD0_ADR(_BASE))
#define PMA_RX_MGS_CDR_CALIB3_MUXD1_REG(_BASE) ((pma_rx_mgs_cdr_calib3_muxd1_reg_t*) PMA_RX_MGS_CDR_CALIB3_MUXD1_ADR(_BASE))
#define PMA_RX_MGS_CDR_CALIB3_MUXD2_REG(_BASE) ((pma_rx_mgs_cdr_calib3_muxd2_reg_t*) PMA_RX_MGS_CDR_CALIB3_MUXD2_ADR(_BASE))
#define PMA_RX_MGS_CDR_CALIB3_MUXD3_REG(_BASE) ((pma_rx_mgs_cdr_calib3_muxd3_reg_t*) PMA_RX_MGS_CDR_CALIB3_MUXD3_ADR(_BASE))
#define PMA_RX_MGS_CDR_CALIB3_MUXD4_REG(_BASE) ((pma_rx_mgs_cdr_calib3_muxd4_reg_t*) PMA_RX_MGS_CDR_CALIB3_MUXD4_ADR(_BASE))
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD0_REG(_BASE) ((pma_rx_mgs_cdr_temp_tracking_muxd0_reg_t*) PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD0_ADR(_BASE))
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD1_REG(_BASE) ((pma_rx_mgs_cdr_temp_tracking_muxd1_reg_t*) PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD1_ADR(_BASE))
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD2_REG(_BASE) ((pma_rx_mgs_cdr_temp_tracking_muxd2_reg_t*) PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD2_ADR(_BASE))
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD3_REG(_BASE) ((pma_rx_mgs_cdr_temp_tracking_muxd3_reg_t*) PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD3_ADR(_BASE))
#define PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD4_REG(_BASE) ((pma_rx_mgs_cdr_temp_tracking_muxd4_reg_t*) PMA_RX_MGS_CDR_TEMP_TRACKING_MUXD4_ADR(_BASE))
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_REG(_BASE) ((pma_rx_mgs_cdr_main_fsm_ctrl_muxd0_reg_t*) PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD0_ADR(_BASE))
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_REG(_BASE) ((pma_rx_mgs_cdr_main_fsm_ctrl_muxd1_reg_t*) PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD1_ADR(_BASE))
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_REG(_BASE) ((pma_rx_mgs_cdr_main_fsm_ctrl_muxd2_reg_t*) PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD2_ADR(_BASE))
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_REG(_BASE) ((pma_rx_mgs_cdr_main_fsm_ctrl_muxd3_reg_t*) PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD3_ADR(_BASE))
#define PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_REG(_BASE) ((pma_rx_mgs_cdr_main_fsm_ctrl_muxd4_reg_t*) PMA_RX_MGS_CDR_MAIN_FSM_CTRL_MUXD4_ADR(_BASE))
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_REG(_BASE) ((pma_rx_mgs_cdr_ana_ctrl1_muxd0_reg_t*) PMA_RX_MGS_CDR_ANA_CTRL1_MUXD0_ADR(_BASE))
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_REG(_BASE) ((pma_rx_mgs_cdr_ana_ctrl1_muxd1_reg_t*) PMA_RX_MGS_CDR_ANA_CTRL1_MUXD1_ADR(_BASE))
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_REG(_BASE) ((pma_rx_mgs_cdr_ana_ctrl1_muxd2_reg_t*) PMA_RX_MGS_CDR_ANA_CTRL1_MUXD2_ADR(_BASE))
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_REG(_BASE) ((pma_rx_mgs_cdr_ana_ctrl1_muxd3_reg_t*) PMA_RX_MGS_CDR_ANA_CTRL1_MUXD3_ADR(_BASE))
#define PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_REG(_BASE) ((pma_rx_mgs_cdr_ana_ctrl1_muxd4_reg_t*) PMA_RX_MGS_CDR_ANA_CTRL1_MUXD4_ADR(_BASE))
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_REG(_BASE) ((pma_rx_mgs_cdr_ana_ctrl2_muxd0_reg_t*) PMA_RX_MGS_CDR_ANA_CTRL2_MUXD0_ADR(_BASE))
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_REG(_BASE) ((pma_rx_mgs_cdr_ana_ctrl2_muxd1_reg_t*) PMA_RX_MGS_CDR_ANA_CTRL2_MUXD1_ADR(_BASE))
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_REG(_BASE) ((pma_rx_mgs_cdr_ana_ctrl2_muxd2_reg_t*) PMA_RX_MGS_CDR_ANA_CTRL2_MUXD2_ADR(_BASE))
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_REG(_BASE) ((pma_rx_mgs_cdr_ana_ctrl2_muxd3_reg_t*) PMA_RX_MGS_CDR_ANA_CTRL2_MUXD3_ADR(_BASE))
#define PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_REG(_BASE) ((pma_rx_mgs_cdr_ana_ctrl2_muxd4_reg_t*) PMA_RX_MGS_CDR_ANA_CTRL2_MUXD4_ADR(_BASE))
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD0_REG(_BASE) ((pma_rx_mgs_cdr_ana_ctrl3_muxd0_reg_t*) PMA_RX_MGS_CDR_ANA_CTRL3_MUXD0_ADR(_BASE))
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD1_REG(_BASE) ((pma_rx_mgs_cdr_ana_ctrl3_muxd1_reg_t*) PMA_RX_MGS_CDR_ANA_CTRL3_MUXD1_ADR(_BASE))
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD2_REG(_BASE) ((pma_rx_mgs_cdr_ana_ctrl3_muxd2_reg_t*) PMA_RX_MGS_CDR_ANA_CTRL3_MUXD2_ADR(_BASE))
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD3_REG(_BASE) ((pma_rx_mgs_cdr_ana_ctrl3_muxd3_reg_t*) PMA_RX_MGS_CDR_ANA_CTRL3_MUXD3_ADR(_BASE))
#define PMA_RX_MGS_CDR_ANA_CTRL3_MUXD4_REG(_BASE) ((pma_rx_mgs_cdr_ana_ctrl3_muxd4_reg_t*) PMA_RX_MGS_CDR_ANA_CTRL3_MUXD4_ADR(_BASE))
#define PMA_RX_MGS_CDR_DFX0_MUXD0_REG(_BASE) ((pma_rx_mgs_cdr_dfx0_muxd0_reg_t*) PMA_RX_MGS_CDR_DFX0_MUXD0_ADR(_BASE))
#define PMA_RX_MGS_CDR_DFX0_MUXD1_REG(_BASE) ((pma_rx_mgs_cdr_dfx0_muxd1_reg_t*) PMA_RX_MGS_CDR_DFX0_MUXD1_ADR(_BASE))
#define PMA_RX_MGS_CDR_DFX0_MUXD2_REG(_BASE) ((pma_rx_mgs_cdr_dfx0_muxd2_reg_t*) PMA_RX_MGS_CDR_DFX0_MUXD2_ADR(_BASE))
#define PMA_RX_MGS_CDR_DFX0_MUXD3_REG(_BASE) ((pma_rx_mgs_cdr_dfx0_muxd3_reg_t*) PMA_RX_MGS_CDR_DFX0_MUXD3_ADR(_BASE))
#define PMA_RX_MGS_CDR_DFX0_MUXD4_REG(_BASE) ((pma_rx_mgs_cdr_dfx0_muxd4_reg_t*) PMA_RX_MGS_CDR_DFX0_MUXD4_ADR(_BASE))
#define PMA_RX_MGS_CDR_DFX1_REG(_BASE) ((pma_rx_mgs_cdr_dfx1_reg_t*) PMA_RX_MGS_CDR_DFX1_ADR(_BASE))
#define PMA_RX_MGS_CDR_LDO0_MUXD0_REG(_BASE) ((pma_rx_mgs_cdr_ldo0_muxd0_reg_t*) PMA_RX_MGS_CDR_LDO0_MUXD0_ADR(_BASE))
#define PMA_RX_MGS_CDR_LDO0_MUXD1_REG(_BASE) ((pma_rx_mgs_cdr_ldo0_muxd1_reg_t*) PMA_RX_MGS_CDR_LDO0_MUXD1_ADR(_BASE))
#define PMA_RX_MGS_CDR_LDO0_MUXD2_REG(_BASE) ((pma_rx_mgs_cdr_ldo0_muxd2_reg_t*) PMA_RX_MGS_CDR_LDO0_MUXD2_ADR(_BASE))
#define PMA_RX_MGS_CDR_LDO0_MUXD3_REG(_BASE) ((pma_rx_mgs_cdr_ldo0_muxd3_reg_t*) PMA_RX_MGS_CDR_LDO0_MUXD3_ADR(_BASE))
#define PMA_RX_MGS_CDR_LDO0_MUXD4_REG(_BASE) ((pma_rx_mgs_cdr_ldo0_muxd4_reg_t*) PMA_RX_MGS_CDR_LDO0_MUXD4_ADR(_BASE))
#define PMA_RX_MGS_CDR_LDO1_MUXD0_REG(_BASE) ((pma_rx_mgs_cdr_ldo1_muxd0_reg_t*) PMA_RX_MGS_CDR_LDO1_MUXD0_ADR(_BASE))
#define PMA_RX_MGS_CDR_LDO1_MUXD1_REG(_BASE) ((pma_rx_mgs_cdr_ldo1_muxd1_reg_t*) PMA_RX_MGS_CDR_LDO1_MUXD1_ADR(_BASE))
#define PMA_RX_MGS_CDR_LDO1_MUXD2_REG(_BASE) ((pma_rx_mgs_cdr_ldo1_muxd2_reg_t*) PMA_RX_MGS_CDR_LDO1_MUXD2_ADR(_BASE))
#define PMA_RX_MGS_CDR_LDO1_MUXD3_REG(_BASE) ((pma_rx_mgs_cdr_ldo1_muxd3_reg_t*) PMA_RX_MGS_CDR_LDO1_MUXD3_ADR(_BASE))
#define PMA_RX_MGS_CDR_LDO1_MUXD4_REG(_BASE) ((pma_rx_mgs_cdr_ldo1_muxd4_reg_t*) PMA_RX_MGS_CDR_LDO1_MUXD4_ADR(_BASE))
#define PMA_RX_MGS_CDR_LDO2_MUXD0_REG(_BASE) ((pma_rx_mgs_cdr_ldo2_muxd0_reg_t*) PMA_RX_MGS_CDR_LDO2_MUXD0_ADR(_BASE))
#define PMA_RX_MGS_CDR_LDO2_MUXD1_REG(_BASE) ((pma_rx_mgs_cdr_ldo2_muxd1_reg_t*) PMA_RX_MGS_CDR_LDO2_MUXD1_ADR(_BASE))
#define PMA_RX_MGS_CDR_LDO2_MUXD2_REG(_BASE) ((pma_rx_mgs_cdr_ldo2_muxd2_reg_t*) PMA_RX_MGS_CDR_LDO2_MUXD2_ADR(_BASE))
#define PMA_RX_MGS_CDR_LDO2_MUXD3_REG(_BASE) ((pma_rx_mgs_cdr_ldo2_muxd3_reg_t*) PMA_RX_MGS_CDR_LDO2_MUXD3_ADR(_BASE))
#define PMA_RX_MGS_CDR_LDO2_MUXD4_REG(_BASE) ((pma_rx_mgs_cdr_ldo2_muxd4_reg_t*) PMA_RX_MGS_CDR_LDO2_MUXD4_ADR(_BASE))
#define PMA_RX_MGS_CDR_LDO_STAT_REG(_BASE) ((pma_rx_mgs_cdr_ldo_stat_reg_t*) PMA_RX_MGS_CDR_LDO_STAT_ADR(_BASE))
#define PMA_RX_MGS_CDR_ADL0_REG(_BASE) ((pma_rx_mgs_cdr_adl0_reg_t*) PMA_RX_MGS_CDR_ADL0_ADR(_BASE))
#define PMA_RX_MGS_CDR_ADL1_REG(_BASE) ((pma_rx_mgs_cdr_adl1_reg_t*) PMA_RX_MGS_CDR_ADL1_ADR(_BASE))
#define PMA_RX_MGS_CDR_KVCC0_MUXD0_REG(_BASE) ((pma_rx_mgs_cdr_kvcc0_muxd0_reg_t*) PMA_RX_MGS_CDR_KVCC0_MUXD0_ADR(_BASE))
#define PMA_RX_MGS_CDR_KVCC0_MUXD1_REG(_BASE) ((pma_rx_mgs_cdr_kvcc0_muxd1_reg_t*) PMA_RX_MGS_CDR_KVCC0_MUXD1_ADR(_BASE))
#define PMA_RX_MGS_CDR_KVCC0_MUXD2_REG(_BASE) ((pma_rx_mgs_cdr_kvcc0_muxd2_reg_t*) PMA_RX_MGS_CDR_KVCC0_MUXD2_ADR(_BASE))
#define PMA_RX_MGS_CDR_KVCC0_MUXD3_REG(_BASE) ((pma_rx_mgs_cdr_kvcc0_muxd3_reg_t*) PMA_RX_MGS_CDR_KVCC0_MUXD3_ADR(_BASE))
#define PMA_RX_MGS_CDR_KVCC0_MUXD4_REG(_BASE) ((pma_rx_mgs_cdr_kvcc0_muxd4_reg_t*) PMA_RX_MGS_CDR_KVCC0_MUXD4_ADR(_BASE))
#define PMA_RX_MGS_CDR_KVCC1_MUXD0_REG(_BASE) ((pma_rx_mgs_cdr_kvcc1_muxd0_reg_t*) PMA_RX_MGS_CDR_KVCC1_MUXD0_ADR(_BASE))
#define PMA_RX_MGS_CDR_KVCC1_MUXD1_REG(_BASE) ((pma_rx_mgs_cdr_kvcc1_muxd1_reg_t*) PMA_RX_MGS_CDR_KVCC1_MUXD1_ADR(_BASE))
#define PMA_RX_MGS_CDR_KVCC1_MUXD2_REG(_BASE) ((pma_rx_mgs_cdr_kvcc1_muxd2_reg_t*) PMA_RX_MGS_CDR_KVCC1_MUXD2_ADR(_BASE))
#define PMA_RX_MGS_CDR_KVCC1_MUXD3_REG(_BASE) ((pma_rx_mgs_cdr_kvcc1_muxd3_reg_t*) PMA_RX_MGS_CDR_KVCC1_MUXD3_ADR(_BASE))
#define PMA_RX_MGS_CDR_KVCC1_MUXD4_REG(_BASE) ((pma_rx_mgs_cdr_kvcc1_muxd4_reg_t*) PMA_RX_MGS_CDR_KVCC1_MUXD4_ADR(_BASE))
#define PMA_RX_MGS_CDR_KVCC2_MUXD0_REG(_BASE) ((pma_rx_mgs_cdr_kvcc2_muxd0_reg_t*) PMA_RX_MGS_CDR_KVCC2_MUXD0_ADR(_BASE))
#define PMA_RX_MGS_CDR_KVCC2_MUXD1_REG(_BASE) ((pma_rx_mgs_cdr_kvcc2_muxd1_reg_t*) PMA_RX_MGS_CDR_KVCC2_MUXD1_ADR(_BASE))
#define PMA_RX_MGS_CDR_KVCC2_MUXD2_REG(_BASE) ((pma_rx_mgs_cdr_kvcc2_muxd2_reg_t*) PMA_RX_MGS_CDR_KVCC2_MUXD2_ADR(_BASE))
#define PMA_RX_MGS_CDR_KVCC2_MUXD3_REG(_BASE) ((pma_rx_mgs_cdr_kvcc2_muxd3_reg_t*) PMA_RX_MGS_CDR_KVCC2_MUXD3_ADR(_BASE))
#define PMA_RX_MGS_CDR_KVCC2_MUXD4_REG(_BASE) ((pma_rx_mgs_cdr_kvcc2_muxd4_reg_t*) PMA_RX_MGS_CDR_KVCC2_MUXD4_ADR(_BASE))
#define PMA_RX_MGS_CDR_UXPPM_CTRL0_REG(_BASE) ((pma_rx_mgs_cdr_uxppm_ctrl0_reg_t*) PMA_RX_MGS_CDR_UXPPM_CTRL0_ADR(_BASE))
#define PMA_RX_MGS_CDR_UXPPM_CTRL1_REG(_BASE) ((pma_rx_mgs_cdr_uxppm_ctrl1_reg_t*) PMA_RX_MGS_CDR_UXPPM_CTRL1_ADR(_BASE))
#define PMA_RX_MGS_CDR_UXPPM_WATCHDOG_REG(_BASE) ((pma_rx_mgs_cdr_uxppm_watchdog_reg_t*) PMA_RX_MGS_CDR_UXPPM_WATCHDOG_ADR(_BASE))
#define PMA_RX_MGS_CDR_BRKPPM_CTRL0_REG(_BASE) ((pma_rx_mgs_cdr_brkppm_ctrl0_reg_t*) PMA_RX_MGS_CDR_BRKPPM_CTRL0_ADR(_BASE))
#define PMA_RX_MGS_CDR_BRKPPM_CTRL1_REG(_BASE) ((pma_rx_mgs_cdr_brkppm_ctrl1_reg_t*) PMA_RX_MGS_CDR_BRKPPM_CTRL1_ADR(_BASE))
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL0_REG(_BASE) ((pma_rx_mgs_cdr_fine_prop_ctrl0_reg_t*) PMA_RX_MGS_CDR_FINE_PROP_CTRL0_ADR(_BASE))
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL1_REG(_BASE) ((pma_rx_mgs_cdr_fine_prop_ctrl1_reg_t*) PMA_RX_MGS_CDR_FINE_PROP_CTRL1_ADR(_BASE))
#define PMA_RX_MGS_CDR_FINE_PROP_CTRL2_REG(_BASE) ((pma_rx_mgs_cdr_fine_prop_ctrl2_reg_t*) PMA_RX_MGS_CDR_FINE_PROP_CTRL2_ADR(_BASE))
#define PMA_RX_MGS_CDR_FINE_PROP_HI_GAIN_CTRL0_REG(_BASE) ((pma_rx_mgs_cdr_fine_prop_hi_gain_ctrl0_reg_t*) PMA_RX_MGS_CDR_FINE_PROP_HI_GAIN_CTRL0_ADR(_BASE))
#define PMA_RX_MGS_CDR_FINE_PROP_HI_GAIN_CTRL1_REG(_BASE) ((pma_rx_mgs_cdr_fine_prop_hi_gain_ctrl1_reg_t*) PMA_RX_MGS_CDR_FINE_PROP_HI_GAIN_CTRL1_ADR(_BASE))
#define PMA_RX_MGS_CDR_FINE_PROP_LO_GAIN_CTRL0_REG(_BASE) ((pma_rx_mgs_cdr_fine_prop_lo_gain_ctrl0_reg_t*) PMA_RX_MGS_CDR_FINE_PROP_LO_GAIN_CTRL0_ADR(_BASE))
#define PMA_RX_MGS_CDR_FINE_PROP_LO_GAIN_CTRL1_REG(_BASE) ((pma_rx_mgs_cdr_fine_prop_lo_gain_ctrl1_reg_t*) PMA_RX_MGS_CDR_FINE_PROP_LO_GAIN_CTRL1_ADR(_BASE))
#define PMA_RX_MGS_CDR_QPD_ACCUM_MASK_HI_REG(_BASE) ((pma_rx_mgs_cdr_qpd_accum_mask_hi_reg_t*) PMA_RX_MGS_CDR_QPD_ACCUM_MASK_HI_ADR(_BASE))
#define PMA_RX_MGS_CDR_QPD_ACCUM_MASK_LO_REG(_BASE) ((pma_rx_mgs_cdr_qpd_accum_mask_lo_reg_t*) PMA_RX_MGS_CDR_QPD_ACCUM_MASK_LO_ADR(_BASE))
#define PMA_RX_MGS_CDR_QPD_ACCUM_CTRL_REG(_BASE) ((pma_rx_mgs_cdr_qpd_accum_ctrl_reg_t*) PMA_RX_MGS_CDR_QPD_ACCUM_CTRL_ADR(_BASE))
#define PMA_RX_MGS_CDR_BBPD_ACCUM_MASK_REG(_BASE) ((pma_rx_mgs_cdr_bbpd_accum_mask_reg_t*) PMA_RX_MGS_CDR_BBPD_ACCUM_MASK_ADR(_BASE))
#define PMA_RX_MGS_CDR_BBPD_ACCUM_CTRL_REG(_BASE) ((pma_rx_mgs_cdr_bbpd_accum_ctrl_reg_t*) PMA_RX_MGS_CDR_BBPD_ACCUM_CTRL_ADR(_BASE))
#define PMA_RX_MGS_CDR_RW_SPARE0_REG(_BASE) ((pma_rx_mgs_cdr_rw_spare0_reg_t*) PMA_RX_MGS_CDR_RW_SPARE0_ADR(_BASE))
#define PMA_RX_MGS_CDR_FINE_STAT_REG(_BASE) ((pma_rx_mgs_cdr_fine_stat_reg_t*) PMA_RX_MGS_CDR_FINE_STAT_ADR(_BASE))
#define PMA_RX_MGS_CDR_BRKPPM_STAT0_REG(_BASE) ((pma_rx_mgs_cdr_brkppm_stat0_reg_t*) PMA_RX_MGS_CDR_BRKPPM_STAT0_ADR(_BASE))
#define PMA_RX_MGS_CDR_BRKPPM_STAT1_REG(_BASE) ((pma_rx_mgs_cdr_brkppm_stat1_reg_t*) PMA_RX_MGS_CDR_BRKPPM_STAT1_ADR(_BASE))
#define PMA_RX_MGS_CDR_BRKPPM_STAT2_REG(_BASE) ((pma_rx_mgs_cdr_brkppm_stat2_reg_t*) PMA_RX_MGS_CDR_BRKPPM_STAT2_ADR(_BASE))
#define PMA_RX_MGS_CDR_UXPPM_STAT_REG(_BASE) ((pma_rx_mgs_cdr_uxppm_stat_reg_t*) PMA_RX_MGS_CDR_UXPPM_STAT_ADR(_BASE))
#define PMA_RX_MGS_CDR_UXPPM_TEST_0_REG(_BASE) ((pma_rx_mgs_cdr_uxppm_test_0_reg_t*) PMA_RX_MGS_CDR_UXPPM_TEST_0_ADR(_BASE))
#define PMA_RX_MGS_CDR_UXPPM_TEST_1_REG(_BASE) ((pma_rx_mgs_cdr_uxppm_test_1_reg_t*) PMA_RX_MGS_CDR_UXPPM_TEST_1_ADR(_BASE))
#define PMA_RX_MGS_CDR_CALIB_STAT_REG(_BASE) ((pma_rx_mgs_cdr_calib_stat_reg_t*) PMA_RX_MGS_CDR_CALIB_STAT_ADR(_BASE))
#define PMA_RX_MGS_CDR_MEAS_STAT_REG(_BASE) ((pma_rx_mgs_cdr_meas_stat_reg_t*) PMA_RX_MGS_CDR_MEAS_STAT_ADR(_BASE))
#define PMA_RX_MGS_CDR_TIME2LOCK_STAT_REG(_BASE) ((pma_rx_mgs_cdr_time2lock_stat_reg_t*) PMA_RX_MGS_CDR_TIME2LOCK_STAT_ADR(_BASE))
#define PMA_RX_MGS_CDR_FRACDIV_STAT_REG(_BASE) ((pma_rx_mgs_cdr_fracdiv_stat_reg_t*) PMA_RX_MGS_CDR_FRACDIV_STAT_ADR(_BASE))
#define PMA_RX_MGS_CDR_MISC0_STAT_REG(_BASE) ((pma_rx_mgs_cdr_misc0_stat_reg_t*) PMA_RX_MGS_CDR_MISC0_STAT_ADR(_BASE))
#define PMA_RX_MGS_CDR_MISC1_STAT_REG(_BASE) ((pma_rx_mgs_cdr_misc1_stat_reg_t*) PMA_RX_MGS_CDR_MISC1_STAT_ADR(_BASE))
#define PMA_RX_MGS_CDR_CSELFINE_STAT_REG(_BASE) ((pma_rx_mgs_cdr_cselfine_stat_reg_t*) PMA_RX_MGS_CDR_CSELFINE_STAT_ADR(_BASE))
#define PMA_RX_MGS_CDR_REFGEN_STAT_REG(_BASE) ((pma_rx_mgs_cdr_refgen_stat_reg_t*) PMA_RX_MGS_CDR_REFGEN_STAT_ADR(_BASE))
#define PMA_RX_MGS_CDR_MISC3_STAT_REG(_BASE) ((pma_rx_mgs_cdr_misc3_stat_reg_t*) PMA_RX_MGS_CDR_MISC3_STAT_ADR(_BASE))
#define PMA_RX_MGS_CDR_KVCC_STAT_0_REG(_BASE) ((pma_rx_mgs_cdr_kvcc_stat_0_reg_t*) PMA_RX_MGS_CDR_KVCC_STAT_0_ADR(_BASE))
#define PMA_RX_MGS_CDR_KVCC_STAT_1_REG(_BASE) ((pma_rx_mgs_cdr_kvcc_stat_1_reg_t*) PMA_RX_MGS_CDR_KVCC_STAT_1_ADR(_BASE))
#define PMA_RX_MGS_CDR_FEEDFWRDGAIN_STAT_REG(_BASE) ((pma_rx_mgs_cdr_feedfwrdgain_stat_reg_t*) PMA_RX_MGS_CDR_FEEDFWRDGAIN_STAT_ADR(_BASE))
#define PMA_RX_MGS_CDR_CAP_CTRL_REG(_BASE) ((pma_rx_mgs_cdr_cap_ctrl_reg_t*) PMA_RX_MGS_CDR_CAP_CTRL_ADR(_BASE))
#define PMA_RX_MGS_CDR_VOTE_STAT_REG(_BASE) ((pma_rx_mgs_cdr_vote_stat_reg_t*) PMA_RX_MGS_CDR_VOTE_STAT_ADR(_BASE))
#define PMA_RX_MGS_CDR_CODE_STAT_REG(_BASE) ((pma_rx_mgs_cdr_code_stat_reg_t*) PMA_RX_MGS_CDR_CODE_STAT_ADR(_BASE))
#define PMA_RX_MGS_CDR_RO_SPARE_ANA2DIG_REG(_BASE) ((pma_rx_mgs_cdr_ro_spare_ana2dig_reg_t*) PMA_RX_MGS_CDR_RO_SPARE_ANA2DIG_ADR(_BASE))
#define PMA_RX_MGS_CDR_L2R_LOCKTIME_REG(_BASE) ((pma_rx_mgs_cdr_l2r_locktime_reg_t*) PMA_RX_MGS_CDR_L2R_LOCKTIME_ADR(_BASE))
#define PMA_RX_MGS_CDR_L2D_LOCKTIME_REG(_BASE) ((pma_rx_mgs_cdr_l2d_locktime_reg_t*) PMA_RX_MGS_CDR_L2D_LOCKTIME_ADR(_BASE))
#define PMA_RX_MGS_CDR_QPD_ACCUM_STAT_REG(_BASE) ((pma_rx_mgs_cdr_qpd_accum_stat_reg_t*) PMA_RX_MGS_CDR_QPD_ACCUM_STAT_ADR(_BASE))
#define PMA_RX_MGS_CDR_BBPD_ACCUM_STAT_REG(_BASE) ((pma_rx_mgs_cdr_bbpd_accum_stat_reg_t*) PMA_RX_MGS_CDR_BBPD_ACCUM_STAT_ADR(_BASE))
#define PMA_RX_MGS_CDR_RO_SPARE_REG(_BASE) ((pma_rx_mgs_cdr_ro_spare_reg_t*) PMA_RX_MGS_CDR_RO_SPARE_ADR(_BASE))
#define PMA_RX_MGS_MODE_SEL_CFG0_REG(_BASE) ((pma_rx_mgs_mode_sel_cfg0_reg_t*) PMA_RX_MGS_MODE_SEL_CFG0_ADR(_BASE))
#define PMA_RX_MGS_MODE_SEL_CFG1_REG(_BASE) ((pma_rx_mgs_mode_sel_cfg1_reg_t*) PMA_RX_MGS_MODE_SEL_CFG1_ADR(_BASE))
#define PMA_RX_MGS_MODE_SEL_CFG2_REG(_BASE) ((pma_rx_mgs_mode_sel_cfg2_reg_t*) PMA_RX_MGS_MODE_SEL_CFG2_ADR(_BASE))
#define PMA_RX_MGS_MODE_SEL_CFG3_REG(_BASE) ((pma_rx_mgs_mode_sel_cfg3_reg_t*) PMA_RX_MGS_MODE_SEL_CFG3_ADR(_BASE))
#define PMA_RX_MGS_MODE_SEL_CFG4_REG(_BASE) ((pma_rx_mgs_mode_sel_cfg4_reg_t*) PMA_RX_MGS_MODE_SEL_CFG4_ADR(_BASE))
#define PMA_RX_MGS_MODE_SEL_STAT0_REG(_BASE) ((pma_rx_mgs_mode_sel_stat0_reg_t*) PMA_RX_MGS_MODE_SEL_STAT0_ADR(_BASE))
#define PMA_RX_MGS_MODE_SEL_STAT1_REG(_BASE) ((pma_rx_mgs_mode_sel_stat1_reg_t*) PMA_RX_MGS_MODE_SEL_STAT1_ADR(_BASE))
#define PMA_RX_MGS_MODE_SEL_STAT2_REG(_BASE) ((pma_rx_mgs_mode_sel_stat2_reg_t*) PMA_RX_MGS_MODE_SEL_STAT2_ADR(_BASE))
#define PMA_RX_MGS_ADCSKEWDET_CALASSIST_CTRL_REG(_BASE) ((pma_rx_mgs_adcskewdet_calassist_ctrl_reg_t*) PMA_RX_MGS_ADCSKEWDET_CALASSIST_CTRL_ADR(_BASE))
#define PMA_RX_MGS_ADCSKEWDET_CALASSIST_STAT_REG(_BASE) ((pma_rx_mgs_adcskewdet_calassist_stat_reg_t*) PMA_RX_MGS_ADCSKEWDET_CALASSIST_STAT_ADR(_BASE))
#define PMA_RX_MSG_LANE_CHARGEPUMP_CALASSIST_CTRL_REG(_BASE) ((pma_rx_msg_lane_chargepump_calassist_ctrl_reg_t*) PMA_RX_MSG_LANE_CHARGEPUMP_CALASSIST_CTRL_ADR(_BASE))
#define PMA_RX_MSG_LANE_CHARGEPUMP_CALASSIST_STAT_REG(_BASE) ((pma_rx_msg_lane_chargepump_calassist_stat_reg_t*) PMA_RX_MSG_LANE_CHARGEPUMP_CALASSIST_STAT_ADR(_BASE))
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL0_REG(_BASE) ((pma_rx_mgs_cmpout_calassist_ctrl0_reg_t*) PMA_RX_MGS_CMPOUT_CALASSIST_CTRL0_ADR(_BASE))
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL1_REG(_BASE) ((pma_rx_mgs_cmpout_calassist_ctrl1_reg_t*) PMA_RX_MGS_CMPOUT_CALASSIST_CTRL1_ADR(_BASE))
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL2_REG(_BASE) ((pma_rx_mgs_cmpout_calassist_ctrl2_reg_t*) PMA_RX_MGS_CMPOUT_CALASSIST_CTRL2_ADR(_BASE))
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL3_REG(_BASE) ((pma_rx_mgs_cmpout_calassist_ctrl3_reg_t*) PMA_RX_MGS_CMPOUT_CALASSIST_CTRL3_ADR(_BASE))
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL4_REG(_BASE) ((pma_rx_mgs_cmpout_calassist_ctrl4_reg_t*) PMA_RX_MGS_CMPOUT_CALASSIST_CTRL4_ADR(_BASE))
#define PMA_RX_MGS_CMPOUT_CALASSIST_CTRL5_REG(_BASE) ((pma_rx_mgs_cmpout_calassist_ctrl5_reg_t*) PMA_RX_MGS_CMPOUT_CALASSIST_CTRL5_ADR(_BASE))
#define PMA_RX_MGS_CMPOUT_CALASSIST_STAT_REG(_BASE) ((pma_rx_mgs_cmpout_calassist_stat_reg_t*) PMA_RX_MGS_CMPOUT_CALASSIST_STAT_ADR(_BASE))
#define PMA_RX_MGS_RW_SPARE_0_REG(_BASE) ((pma_rx_mgs_rw_spare_0_reg_t*) PMA_RX_MGS_RW_SPARE_0_ADR(_BASE))
#define PMA_RX_MGS_RW_SPARE_1_REG(_BASE) ((pma_rx_mgs_rw_spare_1_reg_t*) PMA_RX_MGS_RW_SPARE_1_ADR(_BASE))
#define PMA_RX_MGS_RW_SPARE_2_REG(_BASE) ((pma_rx_mgs_rw_spare_2_reg_t*) PMA_RX_MGS_RW_SPARE_2_ADR(_BASE))
#define PMA_RX_MGS_RW_SPARE_3_REG(_BASE) ((pma_rx_mgs_rw_spare_3_reg_t*) PMA_RX_MGS_RW_SPARE_3_ADR(_BASE))
#define PMA_RX_MGS_RO_SPARE_0_REG(_BASE) ((pma_rx_mgs_ro_spare_0_reg_t*) PMA_RX_MGS_RO_SPARE_0_ADR(_BASE))
#define PMA_RX_MGS_RO_SPARE_1_REG(_BASE) ((pma_rx_mgs_ro_spare_1_reg_t*) PMA_RX_MGS_RO_SPARE_1_ADR(_BASE))

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    pma_rx_mgs_car_cfg_reg_t RX_CAR_CFG; /*< Address offset = 0x0 */
    pma_rx_mgs_car_cfg_ro_reg_t RX_CAR_CFG_RO; /*< Address offset = 0x4 */
    pma_rx_mgs_scratch_pad_0_reg_t RX_SCRATCH_PAD_0; /*< Address offset = 0x8 */
    pma_rx_mgs_scratch_pad_1_reg_t RX_SCRATCH_PAD_1; /*< Address offset = 0xc */
    pma_rx_mgs_scratch_pad_2_reg_t RX_SCRATCH_PAD_2; /*< Address offset = 0x10 */
    pma_rx_mgs_scratch_pad_3_reg_t RX_SCRATCH_PAD_3; /*< Address offset = 0x14 */
    pma_rx_mgs_scratch_pad_4_reg_t RX_SCRATCH_PAD_4; /*< Address offset = 0x18 */
    pma_rx_mgs_scratch_pad_5_reg_t RX_SCRATCH_PAD_5; /*< Address offset = 0x1c */
    pma_rx_mgs_scratch_pad_6_reg_t RX_SCRATCH_PAD_6; /*< Address offset = 0x20 */
    pma_rx_mgs_scratch_pad_7_reg_t RX_SCRATCH_PAD_7; /*< Address offset = 0x24 */
    pma_rx_mgs_ctrl_0_reg_t RX_CTRL_0; /*< Address offset = 0x28 */
    pma_rx_mgs_ctrl_1_reg_t RX_CTRL_1; /*< Address offset = 0x2c */
    pma_rx_mgs_ctrl_ro_reg_t RX_CTRL_RO; /*< Address offset = 0x30 */
    pma_rx_msg_fsm_cfg_reg_t RXFSM_CFG; /*< Address offset = 0x34 */
    pma_rx_mgs_mem_ctrl_reg_t RX_MEM_CTRL; /*< Address offset = 0x38 */
    pma_rx_mgs_mem_req_ctrl_reg_t RX_MEM_REQ_CTRL; /*< Address offset = 0x3c */
    pma_rx_mgs_pll_sel_cfg_reg_t RX_PLL_SEL_CFG; /*< Address offset = 0x40 */
    pma_rx_msg_dco_postdivclk_ctrl_0_reg_t RXDCO_POSTDIVCLK_CTRL_0; /*< Address offset = 0x44 */
    pma_rx_msg_dco_postdivclk_ctrl_1_reg_t RXDCO_POSTDIVCLK_CTRL_1; /*< Address offset = 0x48 */
    pma_rx_msg_dco_postdivclk_ctrl_2_reg_t RXDCO_POSTDIVCLK_CTRL_2; /*< Address offset = 0x4c */
    pma_rx_msg_dco_postdivclk_ctrl_3_reg_t RXDCO_POSTDIVCLK_CTRL_3; /*< Address offset = 0x50 */
    pma_rx_msg_dco_postdivclk_ctrl_4_reg_t RXDCO_POSTDIVCLK_CTRL_4; /*< Address offset = 0x54 */
    pma_rx_msg_dco_postdivclk_ctrl_5_reg_t RXDCO_POSTDIVCLK_CTRL_5; /*< Address offset = 0x58 */
    pma_rx_msg_dco_postdivclk_ctrl_6_reg_t RXDCO_POSTDIVCLK_CTRL_6; /*< Address offset = 0x5c */
    pma_rx_msg_dco_postdivclk_ctrl_7_reg_t RXDCO_POSTDIVCLK_CTRL_7; /*< Address offset = 0x60 */
    pma_rx_msg_dco_postdivclk_ctrl_8_reg_t RXDCO_POSTDIVCLK_CTRL_8; /*< Address offset = 0x64 */
    pma_rx_mgs_pwr_mng_ctrl_reg_t RX_PWR_MNG_CTRL; /*< Address offset = 0x68 */
    pma_rx_mgs_pwr_mng_stat_reg_t RX_PWR_MNG_STAT; /*< Address offset = 0x6c */
    pma_rx_mgs_calduty_ctrl_0_reg_t RX_CALDUTY_CTRL_0; /*< Address offset = 0x70 */
    pma_rx_mgs_calduty_ctrl_1_reg_t RX_CALDUTY_CTRL_1; /*< Address offset = 0x74 */
    pma_rx_mgs_calfsm_ctrl_reg_t RX_CALFSM_CTRL; /*< Address offset = 0x78 */
    pma_rx_mgs_stat_0_reg_t RX_STAT_0; /*< Address offset = 0x7c */
    pma_rx_mgs_stat_1_reg_t RX_STAT_1; /*< Address offset = 0x80 */
    pma_rx_mgs_stat_2_reg_t RX_STAT_2; /*< Address offset = 0x84 */
    pma_rx_msg_pcs_pcie_ctrl_reg_t RXPCS_PCIE_CTRL; /*< Address offset = 0x88 */
    pma_rx_msg_pcs_pcie_ctrl_ro_reg_t RXPCS_PCIE_CTRL_RO; /*< Address offset = 0x8c */
    pma_rx_msg_fsm_ratewidth_cfg_0_reg_t RXFSM_RATEWIDTH_CFG_0; /*< Address offset = 0x90 */
    pma_rx_msg_fsm_ratewidth_cfg_1_reg_t RXFSM_RATEWIDTH_CFG_1; /*< Address offset = 0x94 */
    pma_rx_msg_fsm_ratewidth_cfg_2_reg_t RXFSM_RATEWIDTH_CFG_2; /*< Address offset = 0x98 */
    pma_rx_msg_fsm_ratewidth_cfg_3_reg_t RXFSM_RATEWIDTH_CFG_3; /*< Address offset = 0x9c */
    pma_rx_msg_fsm_ratewidth_cfg_4_reg_t RXFSM_RATEWIDTH_CFG_4; /*< Address offset = 0xa0 */
    pma_rx_msg_fsm_ratewidth_cfg_5_reg_t RXFSM_RATEWIDTH_CFG_5; /*< Address offset = 0xa4 */
    pma_rx_msg_fsm_calmaster_pstate_cfg_reg_t RXFSM_CALMASTER_PSTATE_CFG; /*< Address offset = 0xa8 */
    pma_rx_msg_fsm_calmaster_quad_cfg_reg_t RXFSM_CALMASTER_QUAD_CFG; /*< Address offset = 0xac */
    pma_rx_mgs_calavg_ctrl_0_reg_t RX_CALAVG_CTRL_0; /*< Address offset = 0xb0 */
    pma_rx_mgs_calavg_ctrl_1_reg_t RX_CALAVG_CTRL_1; /*< Address offset = 0xb4 */
    pma_rx_mgs_calavg_ctrl_2_reg_t RX_CALAVG_CTRL_2; /*< Address offset = 0xb8 */
    pma_rx_mgs_cal_stat_reg_t RX_CAL_STAT; /*< Address offset = 0xbc */
    pma_rx_mgs_calavg_stat_reg_t RX_CALAVG_STAT; /*< Address offset = 0xc0 */
    pma_rx_msg_rpu_ctrl_reg_t RXRPU_CTRL; /*< Address offset = 0xc4 */
    pma_rx_msg_rpu_lut_cfg_0_reg_t RXRPU_LUT_CFG_0; /*< Address offset = 0xc8 */
    pma_rx_msg_rpu_lut_cfg_1_reg_t RXRPU_LUT_CFG_1; /*< Address offset = 0xcc */
    pma_rx_msg_rpu_lut_cfg_2_reg_t RXRPU_LUT_CFG_2; /*< Address offset = 0xd0 */
    pma_rx_msg_rpu_lut_cfg_3_reg_t RXRPU_LUT_CFG_3; /*< Address offset = 0xd4 */
    pma_rx_msg_rpu_lut_cfg_4_reg_t RXRPU_LUT_CFG_4; /*< Address offset = 0xd8 */
    pma_rx_msg_rpu_evup_delay_cfg_0_reg_t RXRPU_EVUP_DELAY_CFG_0; /*< Address offset = 0xdc */
    pma_rx_msg_rpu_evup_delay_cfg_1_reg_t RXRPU_EVUP_DELAY_CFG_1; /*< Address offset = 0xe0 */
    pma_rx_msg_rpu_evup_delay_cfg_2_reg_t RXRPU_EVUP_DELAY_CFG_2; /*< Address offset = 0xe4 */
    pma_rx_msg_rpu_evup_delay_cfg_3_reg_t RXRPU_EVUP_DELAY_CFG_3; /*< Address offset = 0xe8 */
    pma_rx_msg_rpu_evup_delay_cfg_4_reg_t RXRPU_EVUP_DELAY_CFG_4; /*< Address offset = 0xec */
    pma_rx_msg_rpu_evup_delay_cfg_5_reg_t RXRPU_EVUP_DELAY_CFG_5; /*< Address offset = 0xf0 */
    pma_rx_msg_rpu_evup_delay_cfg_6_reg_t RXRPU_EVUP_DELAY_CFG_6; /*< Address offset = 0xf4 */
    pma_rx_msg_rpu_evdn_delay_cfg_0_reg_t RXRPU_EVDN_DELAY_CFG_0; /*< Address offset = 0xf8 */
    pma_rx_msg_rpu_evdn_delay_cfg_1_reg_t RXRPU_EVDN_DELAY_CFG_1; /*< Address offset = 0xfc */
    pma_rx_msg_rpu_evdn_delay_cfg_2_reg_t RXRPU_EVDN_DELAY_CFG_2; /*< Address offset = 0x100 */
    pma_rx_msg_rpu_evdn_delay_cfg_3_reg_t RXRPU_EVDN_DELAY_CFG_3; /*< Address offset = 0x104 */
    pma_rx_msg_rpu_evdn_delay_cfg_4_reg_t RXRPU_EVDN_DELAY_CFG_4; /*< Address offset = 0x108 */
    pma_rx_mgs_rpu_event_cfg_0_reg_t RX_RPU_EVENT_CFG_0; /*< Address offset = 0x10c */
    pma_rx_mgs_rpu_event_cfg_1_reg_t RX_RPU_EVENT_CFG_1; /*< Address offset = 0x110 */
    pma_rx_mgs_rpu_event_cfg_2_reg_t RX_RPU_EVENT_CFG_2; /*< Address offset = 0x114 */
    pma_rx_mgs_rpu_event_cfg_3_reg_t RX_RPU_EVENT_CFG_3; /*< Address offset = 0x118 */
    pma_rx_mgs_rpu_event_cfg_4_reg_t RX_RPU_EVENT_CFG_4; /*< Address offset = 0x11c */
    pma_rx_mgs_rpu_event_cfg_5_reg_t RX_RPU_EVENT_CFG_5; /*< Address offset = 0x120 */
    pma_rx_mgs_rpu_event_cfg_6_reg_t RX_RPU_EVENT_CFG_6; /*< Address offset = 0x124 */
    pma_rx_mgs_rpu_event_cfg_7_reg_t RX_RPU_EVENT_CFG_7; /*< Address offset = 0x128 */
    pma_rx_mgs_rpu_event_cfg_8_reg_t RX_RPU_EVENT_CFG_8; /*< Address offset = 0x12c */
    pma_rx_mgs_rpu_event_cfg_9_reg_t RX_RPU_EVENT_CFG_9; /*< Address offset = 0x130 */
    pma_rx_mgs_rpu_event_cfg_10_reg_t RX_RPU_EVENT_CFG_10; /*< Address offset = 0x134 */
    pma_rx_mgs_rpu_event_cfg_11_reg_t RX_RPU_EVENT_CFG_11; /*< Address offset = 0x138 */
    pma_rx_mgs_rpu_event_cfg_12_reg_t RX_RPU_EVENT_CFG_12; /*< Address offset = 0x13c */
    pma_rx_mgs_rpu_event_cfg_13_reg_t RX_RPU_EVENT_CFG_13; /*< Address offset = 0x140 */
    pma_rx_mgs_rpu_event_cfg_14_reg_t RX_RPU_EVENT_CFG_14; /*< Address offset = 0x144 */
    pma_rx_mgs_rpu_event_cfg_15_reg_t RX_RPU_EVENT_CFG_15; /*< Address offset = 0x148 */
    pma_rx_mgs_rpu_event_cfg_16_reg_t RX_RPU_EVENT_CFG_16; /*< Address offset = 0x14c */
    pma_rx_mgs_rpu_event_cfg_17_reg_t RX_RPU_EVENT_CFG_17; /*< Address offset = 0x150 */
    pma_rx_mgs_rpu_event_cfg_18_reg_t RX_RPU_EVENT_CFG_18; /*< Address offset = 0x154 */
    pma_rx_mgs_rpu_event_cfg_19_reg_t RX_RPU_EVENT_CFG_19; /*< Address offset = 0x158 */
    pma_rx_msg_sigdet_ctrl_0_reg_t RXSIGDET_CTRL_0; /*< Address offset = 0x15c */
    pma_rx_msg_sigdet_ctrl_1_reg_t RXSIGDET_CTRL_1; /*< Address offset = 0x160 */
    pma_rx_msg_sigdet_ctrl_2_reg_t RXSIGDET_CTRL_2; /*< Address offset = 0x164 */
    pma_rx_msg_sigdet_ctrl_3_reg_t RXSIGDET_CTRL_3; /*< Address offset = 0x168 */
    pma_rx_msg_sigdet_ctrl_4_reg_t RXSIGDET_CTRL_4; /*< Address offset = 0x16c */
    pma_rx_msg_sigdet_ctrl_5_reg_t RXSIGDET_CTRL_5; /*< Address offset = 0x170 */
    pma_rx_msg_sigdet_ctrl_6_reg_t RXSIGDET_CTRL_6; /*< Address offset = 0x174 */
    pma_rx_msg_sigdet_ctrl_7_reg_t RXSIGDET_CTRL_7; /*< Address offset = 0x178 */
    pma_rx_msg_sigdet_ctrl_ro_reg_t RXSIGDET_CTRL_RO; /*< Address offset = 0x17c */
    pma_rx_msg_sigdet_stat_reg_t RXSIGDET_STAT; /*< Address offset = 0x180 */
    pma_rx_mgs_lfps_det_ctrl_0_reg_t RX_LFPS_DET_CTRL_0; /*< Address offset = 0x184 */
    pma_rx_mgs_lfps_det_ctrl_1_reg_t RX_LFPS_DET_CTRL_1; /*< Address offset = 0x188 */
    pma_rx_mgs_sqlch_ctrl_0_reg_t RX_SQLCH_CTRL_0; /*< Address offset = 0x18c */
    pma_rx_mgs_sqlch_ctrl_1_reg_t RX_SQLCH_CTRL_1; /*< Address offset = 0x190 */
    pma_rx_mgs_sqlch_ctrl_2_reg_t RX_SQLCH_CTRL_2; /*< Address offset = 0x194 */
    pma_rx_mgs_sqlch_ctrl_3_reg_t RX_SQLCH_CTRL_3; /*< Address offset = 0x198 */
    pma_rx_mgs_sqlch_ctrl_4_reg_t RX_SQLCH_CTRL_4; /*< Address offset = 0x19c */
    pma_rx_mgs_sqlch_stat_reg_t RX_SQLCH_STAT; /*< Address offset = 0x1a0 */
    pma_rx_mgs_sqlchoscmeas_ctrl_0_reg_t RX_SQLCHOSCMEAS_CTRL_0; /*< Address offset = 0x1a4 */
    pma_rx_mgs_sqlchoscmeas_ctrl_1_reg_t RX_SQLCHOSCMEAS_CTRL_1; /*< Address offset = 0x1a8 */
    pma_rx_mgs_sqlchoscmeas_ctrl_2_reg_t RX_SQLCHOSCMEAS_CTRL_2; /*< Address offset = 0x1ac */
    pma_rx_mgs_sqlchoscmeas_ctrl_3_reg_t RX_SQLCHOSCMEAS_CTRL_3; /*< Address offset = 0x1b0 */
    pma_rx_mgs_sqlch_calfsm_ctrl_reg_t RX_SQLCH_CALFSM_CTRL; /*< Address offset = 0x1b4 */
    pma_rx_mgs_sqlch_calfsm_stat_0_reg_t RX_SQLCH_CALFSM_STAT_0; /*< Address offset = 0x1b8 */
    pma_rx_mgs_sqlch_calfsm_stat_1_reg_t RX_SQLCH_CALFSM_STAT_1; /*< Address offset = 0x1bc */
    pma_rx_mgs_sqlch_calfsm_stat_2_reg_t RX_SQLCH_CALFSM_STAT_2; /*< Address offset = 0x1c0 */
    pma_rx_mgs_ctrl_ovrd_reg_t RX_CTRL_OVRD; /*< Address offset = 0x1c4 */
    pma_rx_mgs_ctrl_ovrd_ro_reg_t RX_CTRL_OVRD_RO; /*< Address offset = 0x1c8 */
    pma_rx_mgs_ctrl_out_reg_t RX_CTRL_OUT; /*< Address offset = 0x1cc */
    pma_rx_mgs_margin_ctrl_0_reg_t RX_MARGIN_CTRL_0; /*< Address offset = 0x1d0 */
    pma_rx_mgs_margin_ctrl_1_reg_t RX_MARGIN_CTRL_1; /*< Address offset = 0x1d4 */
    pma_rx_mgs_margin_ctrl_2_reg_t RX_MARGIN_CTRL_2; /*< Address offset = 0x1d8 */
    pma_rx_mgs_margin_stat_reg_t RX_MARGIN_STAT; /*< Address offset = 0x1dc */
    pma_rx_mgs_input_pin_ovrd_reg_t RX_INPUT_PIN_OVRD; /*< Address offset = 0x1e0 */
    pma_rx_mgs_input_pin_preovrd_reg_t RX_INPUT_PIN_PREOVRD; /*< Address offset = 0x1e4 */
    pma_rx_mgs_output_pin_ovrd_0_reg_t RX_OUTPUT_PIN_OVRD_0; /*< Address offset = 0x1e8 */
    pma_rx_mgs_output_pin_ovrd_1_reg_t RX_OUTPUT_PIN_OVRD_1; /*< Address offset = 0x1ec */
    pma_rx_mgs_output_pin_preovrd_0_reg_t RX_OUTPUT_PIN_PREOVRD_0; /*< Address offset = 0x1f0 */
    pma_rx_mgs_output_pin_preovrd_1_reg_t RX_OUTPUT_PIN_PREOVRD_1; /*< Address offset = 0x1f4 */
    pma_rx_mgs_brkpt_ctrl_reg_t RX_BRKPT_CTRL; /*< Address offset = 0x1f8 */
    pma_rx_mgs_brkpt_stat_reg_t RX_BRKPT_STAT; /*< Address offset = 0x1fc */
    pma_rx_mgs_brkpt_clr_reg_t RX_BRKPT_CLR; /*< Address offset = 0x200 */
    pma_rx_msg_dco_stat_reg_t RXDCO_STAT; /*< Address offset = 0x204 */
    pma_rx_msg_dco_ctrl_ana_reg_t RXDCO_CTRL_ANA; /*< Address offset = 0x208 */
    pma_rx_msg_dco_ctrl_dig_muxd0_reg_t RXDCO_CTRL_DIG_MUXD0; /*< Address offset = 0x20c */
    pma_rx_msg_dco_ctrl_dig_muxd1_reg_t RXDCO_CTRL_DIG_MUXD1; /*< Address offset = 0x210 */
    pma_rx_msg_dco_ctrl_dig_muxd2_reg_t RXDCO_CTRL_DIG_MUXD2; /*< Address offset = 0x214 */
    pma_rx_msg_dco_ctrl_dig_muxd3_reg_t RXDCO_CTRL_DIG_MUXD3; /*< Address offset = 0x218 */
    pma_rx_msg_dco_ctrl_dig_muxd4_reg_t RXDCO_CTRL_DIG_MUXD4; /*< Address offset = 0x21c */
    pma_rx_mgs_cdr_pksen_ctrl_muxd0_reg_t RX_CDR_PKSEN_CTRL_MUXD0; /*< Address offset = 0x220 */
    pma_rx_mgs_cdr_pksen_ctrl_muxd1_reg_t RX_CDR_PKSEN_CTRL_MUXD1; /*< Address offset = 0x224 */
    pma_rx_mgs_cdr_pksen_ctrl_muxd2_reg_t RX_CDR_PKSEN_CTRL_MUXD2; /*< Address offset = 0x228 */
    pma_rx_mgs_cdr_pksen_ctrl_muxd3_reg_t RX_CDR_PKSEN_CTRL_MUXD3; /*< Address offset = 0x22c */
    pma_rx_mgs_cdr_pksen_ctrl_muxd4_reg_t RX_CDR_PKSEN_CTRL_MUXD4; /*< Address offset = 0x230 */
    pma_rx_mgs_cdr_pksen_stat_reg_t RX_CDR_PKSEN_STAT; /*< Address offset = 0x234 */
    pma_rx_msg_dco_swing_ctrl_muxd0_reg_t RXDCO_DCO_SWING_CTRL_MUXD0; /*< Address offset = 0x238 */
    pma_rx_msg_dco_swing_ctrl_muxd1_reg_t RXDCO_DCO_SWING_CTRL_MUXD1; /*< Address offset = 0x23c */
    pma_rx_msg_dco_swing_ctrl_muxd2_reg_t RXDCO_DCO_SWING_CTRL_MUXD2; /*< Address offset = 0x240 */
    pma_rx_msg_dco_swing_ctrl_muxd3_reg_t RXDCO_DCO_SWING_CTRL_MUXD3; /*< Address offset = 0x244 */
    pma_rx_msg_dco_swing_ctrl_muxd4_reg_t RXDCO_DCO_SWING_CTRL_MUXD4; /*< Address offset = 0x248 */
    pma_rx_msg_dco_bangbang_pd_ctrl_0_reg_t RXDCO_BANGBANG_PD_CTRL_0; /*< Address offset = 0x24c */
    pma_rx_msg_dco_bangbang_pd_ctrl_1_reg_t RXDCO_BANGBANG_PD_CTRL_1; /*< Address offset = 0x250 */
    pma_rx_msg_dco_baud_pd_ctrl_0_reg_t RXDCO_BAUD_PD_CTRL_0; /*< Address offset = 0x254 */
    pma_rx_msg_dco_baud_pd_ctrl_1_reg_t RXDCO_BAUD_PD_CTRL_1; /*< Address offset = 0x258 */
    pma_rx_msg_dco_baud_pd_ctrl_2_reg_t RXDCO_BAUD_PD_CTRL_2; /*< Address offset = 0x25c */
    pma_rx_msg_dco_lock_tfer_ctrl_reg_t RXDCO_LOCK_TFER_CTRL; /*< Address offset = 0x260 */
    pma_rx_msg_dco_optclfastlock_ctrl_reg_t RXDCO_OPTCLFASTLOCK_CTRL; /*< Address offset = 0x264 */
    pma_rx_msg_dco_optclfastlock_stat_reg_t RXDCO_OPTCLFASTLOCK_STAT; /*< Address offset = 0x268 */
    pma_rx_msg_dco_eth_pmd_stat_0_reg_t RXDCO_ETH_PMD_STAT_0; /*< Address offset = 0x26c */
    pma_rx_msg_dco_eth_pmd_stat_1_reg_t RXDCO_ETH_PMD_STAT_1; /*< Address offset = 0x270 */
    pma_rx_msg_dco_eth_pmd_stat_2_reg_t RXDCO_ETH_PMD_STAT_2; /*< Address offset = 0x274 */
    pma_rx_msg_dco_eth_pmd_stat_3_reg_t RXDCO_ETH_PMD_STAT_3; /*< Address offset = 0x278 */
    pma_rx_msg_dco_ovrd_ctrl_0_reg_t RXDCO_OVRD_CTRL_0; /*< Address offset = 0x27c */
    pma_rx_msg_dco_ovrd_ctrl_1_reg_t RXDCO_OVRD_CTRL_1; /*< Address offset = 0x280 */
    pma_rx_msg_dco_ovrd_ctrl_2_reg_t RXDCO_OVRD_CTRL_2; /*< Address offset = 0x284 */
    pma_rx_msg_dco_ovrd_ctrl_3_reg_t RXDCO_OVRD_CTRL_3; /*< Address offset = 0x288 */
    pma_rx_msg_dco_ovrd_ctrl_4_reg_t RXDCO_OVRD_CTRL_4; /*< Address offset = 0x28c */
    pma_rx_msg_phdt_ovrd_ctrl_0_reg_t RXPHDT_OVRD_CTRL_0; /*< Address offset = 0x290 */
    pma_rx_msg_dco_ovrd_stat_0_reg_t RXDCO_OVRD_STAT_0; /*< Address offset = 0x294 */
    pma_rx_msg_dco_ovrd_stat_1_reg_t RXDCO_OVRD_STAT_1; /*< Address offset = 0x298 */
    pma_rx_msg_dco_ovrd_stat_2_reg_t RXDCO_OVRD_STAT_2; /*< Address offset = 0x29c */
    pma_rx_msg_dco_ovrd_stat_3_reg_t RXDCO_OVRD_STAT_3; /*< Address offset = 0x2a0 */
    pma_rx_msg_dco_ovrd_stat_4_reg_t RXDCO_OVRD_STAT_4; /*< Address offset = 0x2a4 */
    pma_rx_msg_phdt_ovrd_stat_0_reg_t RXPHDT_OVRD_STAT_0; /*< Address offset = 0x2a8 */
    pma_rx_mgs_adc_spare_reg_t RX_ADC_SPARE; /*< Address offset = 0x2ac */
    pma_rx_mgs_ckm_ctrl_0_reg_t RX_CKM_CTRL_0; /*< Address offset = 0x2b0 */
    pma_rx_mgs_ckm_ctrl_1_reg_t RX_CKM_CTRL_1; /*< Address offset = 0x2b4 */
    pma_rx_mgs_ckm_ctrl_2_reg_t RX_CKM_CTRL_2; /*< Address offset = 0x2b8 */
    pma_rx_mgs_ckm_stat_reg_t RX_CKM_STAT; /*< Address offset = 0x2bc */
    pma_rx_msg_bist_cfg_0_reg_t RXBIST_CFG_0; /*< Address offset = 0x2c0 */
    pma_rx_msg_bist_cfg_1_reg_t RXBIST_CFG_1; /*< Address offset = 0x2c4 */
    pma_rx_msg_bist_seed_reg_t RXBIST_SEED; /*< Address offset = 0x2c8 */
    pma_rx_msg_bist_udp_vf00_reg_t RXBIST_UDP_VF00; /*< Address offset = 0x2cc */
    pma_rx_msg_bist_udp_vf01_reg_t RXBIST_UDP_VF01; /*< Address offset = 0x2d0 */
    pma_rx_msg_bist_udp_vf02_reg_t RXBIST_UDP_VF02; /*< Address offset = 0x2d4 */
    pma_rx_msg_bist_udp_vf03_reg_t RXBIST_UDP_VF03; /*< Address offset = 0x2d8 */
    pma_rx_msg_bist_udp_vf04_reg_t RXBIST_UDP_VF04; /*< Address offset = 0x2dc */
    pma_rx_msg_bist_udp_vf05_reg_t RXBIST_UDP_VF05; /*< Address offset = 0x2e0 */
    pma_rx_msg_bist_udp_vf06_reg_t RXBIST_UDP_VF06; /*< Address offset = 0x2e4 */
    pma_rx_msg_bist_udp_vf07_reg_t RXBIST_UDP_VF07; /*< Address offset = 0x2e8 */
    pma_rx_msg_bist_udp_vf08_reg_t RXBIST_UDP_VF08; /*< Address offset = 0x2ec */
    pma_rx_msg_bist_udp_vf09_reg_t RXBIST_UDP_VF09; /*< Address offset = 0x2f0 */
    pma_rx_msg_bist_errcnt_stat_0_reg_t RXBIST_ERRCNT_STAT_0; /*< Address offset = 0x2f4 */
    pma_rx_msg_bist_errcnt_stat_1_reg_t RXBIST_ERRCNT_STAT_1; /*< Address offset = 0x2f8 */
    pma_rx_msg_bist_errcnt_stat_2_reg_t RXBIST_ERRCNT_STAT_2; /*< Address offset = 0x2fc */
    pma_rx_msg_bist_errcnt_stat_3_reg_t RXBIST_ERRCNT_STAT_3; /*< Address offset = 0x300 */
    pma_rx_msg_bist_stat_datachkcnt_reg_t RXBIST_STAT_DATACHKCNT; /*< Address offset = 0x304 */
    pma_rx_msg_bist_data_stat_0_reg_t RXBIST_DATA_STAT_0; /*< Address offset = 0x308 */
    pma_rx_msg_bist_data_stat_1_reg_t RXBIST_DATA_STAT_1; /*< Address offset = 0x30c */
    pma_rx_msg_bist_data_stat_2_reg_t RXBIST_DATA_STAT_2; /*< Address offset = 0x310 */
    pma_rx_msg_bist_data_stat_3_reg_t RXBIST_DATA_STAT_3; /*< Address offset = 0x314 */
    pma_rx_msg_bist_data_stat_4_reg_t RXBIST_DATA_STAT_4; /*< Address offset = 0x318 */
    pma_rx_msg_bist_data_stat_5_reg_t RXBIST_DATA_STAT_5; /*< Address offset = 0x31c */
    pma_rx_msg_bist_data_stat_6_reg_t RXBIST_DATA_STAT_6; /*< Address offset = 0x320 */
    pma_rx_msg_bist_data_stat_7_reg_t RXBIST_DATA_STAT_7; /*< Address offset = 0x324 */
    pma_rx_msg_bist_data_stat_8_reg_t RXBIST_DATA_STAT_8; /*< Address offset = 0x328 */
    pma_rx_msg_bist_data_stat_9_reg_t RXBIST_DATA_STAT_9; /*< Address offset = 0x32c */
    pma_rx_msg_bist_data_stat_10_reg_t RXBIST_DATA_STAT_10; /*< Address offset = 0x330 */
    pma_rx_msg_bist_data_stat_11_reg_t RXBIST_DATA_STAT_11; /*< Address offset = 0x334 */
    pma_rx_msg_bist_data_stat_12_reg_t RXBIST_DATA_STAT_12; /*< Address offset = 0x338 */
    pma_rx_msg_bist_data_stat_13_reg_t RXBIST_DATA_STAT_13; /*< Address offset = 0x33c */
    pma_rx_msg_bist_data_stat_14_reg_t RXBIST_DATA_STAT_14; /*< Address offset = 0x340 */
    pma_rx_msg_bist_data_stat_15_reg_t RXBIST_DATA_STAT_15; /*< Address offset = 0x344 */
    pma_rx_mgs_affe_coeff_set_stat_0_reg_t RX_AFFE_COEFF_SET_STAT_0; /*< Address offset = 0x348 */
    pma_rx_mgs_affe_coeff_set_stat_1_reg_t RX_AFFE_COEFF_SET_STAT_1; /*< Address offset = 0x34c */
    pma_rx_mgs_affe_coeff_set_ovrd_0_reg_t RX_AFFE_COEFF_SET_OVRD_0; /*< Address offset = 0x350 */
    pma_rx_mgs_affe_coeff_set_ovrd_1_reg_t RX_AFFE_COEFF_SET_OVRD_1; /*< Address offset = 0x354 */
    pma_rx_mgs_ops_if_stat_0_reg_t RX_OPS_IF_STAT_0; /*< Address offset = 0x358 */
    pma_rx_mgs_ops_if_stat_1_reg_t RX_OPS_IF_STAT_1; /*< Address offset = 0x35c */
    pma_rx_mgs_ops_if_stat_2_reg_t RX_OPS_IF_STAT_2; /*< Address offset = 0x360 */
    pma_rx_mgs_ops_if_ovrd_0_reg_t RX_OPS_IF_OVRD_0; /*< Address offset = 0x364 */
    pma_rx_mgs_ops_if_ovrd_1_reg_t RX_OPS_IF_OVRD_1; /*< Address offset = 0x368 */
    pma_rx_mgs_ops_if_ovrd_2_reg_t RX_OPS_IF_OVRD_2; /*< Address offset = 0x36c */
    pma_rx_mgs_scratchy_0_reg_t RX_SCRATCHY_0; /*< Address offset = 0x370 */
    pma_rx_mgs_scratchy_1_reg_t RX_SCRATCHY_1; /*< Address offset = 0x374 */
    const uint8_t        reservedArea0 [136]; /*< Address offset = 0x378 */
    pma_rx_mgs_cdr_general_ctrl_reg_t RX_CDR_GENERAL_CTRL; /*< Address offset = 0x400 */
    pma_rx_mgs_cdr_div0_muxd0_reg_t RX_CDR_DIV0_MUXD0; /*< Address offset = 0x404 */
    pma_rx_mgs_cdr_div0_muxd1_reg_t RX_CDR_DIV0_MUXD1; /*< Address offset = 0x408 */
    pma_rx_mgs_cdr_div0_muxd2_reg_t RX_CDR_DIV0_MUXD2; /*< Address offset = 0x40c */
    pma_rx_mgs_cdr_div0_muxd3_reg_t RX_CDR_DIV0_MUXD3; /*< Address offset = 0x410 */
    pma_rx_mgs_cdr_div0_muxd4_reg_t RX_CDR_DIV0_MUXD4; /*< Address offset = 0x414 */
    pma_rx_mgs_cdr_frac_lock0_muxd0_reg_t RX_CDR_FRAC_LOCK0_MUXD0; /*< Address offset = 0x418 */
    pma_rx_mgs_cdr_frac_lock0_muxd1_reg_t RX_CDR_FRAC_LOCK0_MUXD1; /*< Address offset = 0x41c */
    pma_rx_mgs_cdr_frac_lock0_muxd2_reg_t RX_CDR_FRAC_LOCK0_MUXD2; /*< Address offset = 0x420 */
    pma_rx_mgs_cdr_frac_lock0_muxd3_reg_t RX_CDR_FRAC_LOCK0_MUXD3; /*< Address offset = 0x424 */
    pma_rx_mgs_cdr_frac_lock0_muxd4_reg_t RX_CDR_FRAC_LOCK0_MUXD4; /*< Address offset = 0x428 */
    pma_rx_mgs_cdr_frac_lock1_muxd0_reg_t RX_CDR_FRAC_LOCK1_MUXD0; /*< Address offset = 0x42c */
    pma_rx_mgs_cdr_frac_lock1_muxd1_reg_t RX_CDR_FRAC_LOCK1_MUXD1; /*< Address offset = 0x430 */
    pma_rx_mgs_cdr_frac_lock1_muxd2_reg_t RX_CDR_FRAC_LOCK1_MUXD2; /*< Address offset = 0x434 */
    pma_rx_mgs_cdr_frac_lock1_muxd3_reg_t RX_CDR_FRAC_LOCK1_MUXD3; /*< Address offset = 0x438 */
    pma_rx_mgs_cdr_frac_lock1_muxd4_reg_t RX_CDR_FRAC_LOCK1_MUXD4; /*< Address offset = 0x43c */
    pma_rx_mgs_cdr_lockfsm_ctrl_muxd0_reg_t RX_CDR_LOCKFSM_CTRL_MUXD0; /*< Address offset = 0x440 */
    pma_rx_mgs_cdr_lockfsm_ctrl_muxd1_reg_t RX_CDR_LOCKFSM_CTRL_MUXD1; /*< Address offset = 0x444 */
    pma_rx_mgs_cdr_lockfsm_ctrl_muxd2_reg_t RX_CDR_LOCKFSM_CTRL_MUXD2; /*< Address offset = 0x448 */
    pma_rx_mgs_cdr_lockfsm_ctrl_muxd3_reg_t RX_CDR_LOCKFSM_CTRL_MUXD3; /*< Address offset = 0x44c */
    pma_rx_mgs_cdr_lockfsm_ctrl_muxd4_reg_t RX_CDR_LOCKFSM_CTRL_MUXD4; /*< Address offset = 0x450 */
    pma_rx_mgs_cdr_lockfsm_stat_reg_t RX_CDR_LOCKFSM_STAT; /*< Address offset = 0x454 */
    pma_rx_mgs_cdr_tap_ovrd_reg_t RX_CDR_TAP_OVRD; /*< Address offset = 0x458 */
    pma_rx_mgs_cdr_dfx_dco_muxd0_reg_t RX_CDR_DFX_DCO_MUXD0; /*< Address offset = 0x45c */
    pma_rx_mgs_cdr_dfx_dco_muxd1_reg_t RX_CDR_DFX_DCO_MUXD1; /*< Address offset = 0x460 */
    pma_rx_mgs_cdr_dfx_dco_muxd2_reg_t RX_CDR_DFX_DCO_MUXD2; /*< Address offset = 0x464 */
    pma_rx_mgs_cdr_dfx_dco_muxd3_reg_t RX_CDR_DFX_DCO_MUXD3; /*< Address offset = 0x468 */
    pma_rx_mgs_cdr_dfx_dco_muxd4_reg_t RX_CDR_DFX_DCO_MUXD4; /*< Address offset = 0x46c */
    pma_rx_mgs_cdr_div1_reg_t RX_CDR_DIV1; /*< Address offset = 0x470 */
    pma_rx_mgs_cdr_div1_muxd0_reg_t RX_CDR_DIV1_MUXD0; /*< Address offset = 0x474 */
    pma_rx_mgs_cdr_div1_muxd1_reg_t RX_CDR_DIV1_MUXD1; /*< Address offset = 0x478 */
    pma_rx_mgs_cdr_div1_muxd2_reg_t RX_CDR_DIV1_MUXD2; /*< Address offset = 0x47c */
    pma_rx_mgs_cdr_div1_muxd3_reg_t RX_CDR_DIV1_MUXD3; /*< Address offset = 0x480 */
    pma_rx_mgs_cdr_div1_muxd4_reg_t RX_CDR_DIV1_MUXD4; /*< Address offset = 0x484 */
    pma_rx_mgs_cdr_cntr_bist_settings_reg_t RX_CDR_CNTR_BIST_SETTINGS; /*< Address offset = 0x488 */
    pma_rx_mgs_cdr_calib0_muxd0_reg_t RX_CDR_CALIB0_MUXD0; /*< Address offset = 0x48c */
    pma_rx_mgs_cdr_calib0_muxd1_reg_t RX_CDR_CALIB0_MUXD1; /*< Address offset = 0x490 */
    pma_rx_mgs_cdr_calib0_muxd2_reg_t RX_CDR_CALIB0_MUXD2; /*< Address offset = 0x494 */
    pma_rx_mgs_cdr_calib0_muxd3_reg_t RX_CDR_CALIB0_MUXD3; /*< Address offset = 0x498 */
    pma_rx_mgs_cdr_calib0_muxd4_reg_t RX_CDR_CALIB0_MUXD4; /*< Address offset = 0x49c */
    pma_rx_mgs_cdr_calib1_muxd0_reg_t RX_CDR_CALIB1_MUXD0; /*< Address offset = 0x4a0 */
    pma_rx_mgs_cdr_calib1_muxd1_reg_t RX_CDR_CALIB1_MUXD1; /*< Address offset = 0x4a4 */
    pma_rx_mgs_cdr_calib1_muxd2_reg_t RX_CDR_CALIB1_MUXD2; /*< Address offset = 0x4a8 */
    pma_rx_mgs_cdr_calib1_muxd3_reg_t RX_CDR_CALIB1_MUXD3; /*< Address offset = 0x4ac */
    pma_rx_mgs_cdr_calib1_muxd4_reg_t RX_CDR_CALIB1_MUXD4; /*< Address offset = 0x4b0 */
    pma_rx_mgs_cdr_calib2_muxd0_reg_t RX_CDR_CALIB2_MUXD0; /*< Address offset = 0x4b4 */
    pma_rx_mgs_cdr_calib2_muxd1_reg_t RX_CDR_CALIB2_MUXD1; /*< Address offset = 0x4b8 */
    pma_rx_mgs_cdr_calib2_muxd2_reg_t RX_CDR_CALIB2_MUXD2; /*< Address offset = 0x4bc */
    pma_rx_mgs_cdr_calib2_muxd3_reg_t RX_CDR_CALIB2_MUXD3; /*< Address offset = 0x4c0 */
    pma_rx_mgs_cdr_calib2_muxd4_reg_t RX_CDR_CALIB2_MUXD4; /*< Address offset = 0x4c4 */
    pma_rx_mgs_cdr_calib3_muxd0_reg_t RX_CDR_CALIB3_MUXD0; /*< Address offset = 0x4c8 */
    pma_rx_mgs_cdr_calib3_muxd1_reg_t RX_CDR_CALIB3_MUXD1; /*< Address offset = 0x4cc */
    pma_rx_mgs_cdr_calib3_muxd2_reg_t RX_CDR_CALIB3_MUXD2; /*< Address offset = 0x4d0 */
    pma_rx_mgs_cdr_calib3_muxd3_reg_t RX_CDR_CALIB3_MUXD3; /*< Address offset = 0x4d4 */
    pma_rx_mgs_cdr_calib3_muxd4_reg_t RX_CDR_CALIB3_MUXD4; /*< Address offset = 0x4d8 */
    pma_rx_mgs_cdr_temp_tracking_muxd0_reg_t RX_CDR_TEMP_TRACKING_MUXD0; /*< Address offset = 0x4dc */
    pma_rx_mgs_cdr_temp_tracking_muxd1_reg_t RX_CDR_TEMP_TRACKING_MUXD1; /*< Address offset = 0x4e0 */
    pma_rx_mgs_cdr_temp_tracking_muxd2_reg_t RX_CDR_TEMP_TRACKING_MUXD2; /*< Address offset = 0x4e4 */
    pma_rx_mgs_cdr_temp_tracking_muxd3_reg_t RX_CDR_TEMP_TRACKING_MUXD3; /*< Address offset = 0x4e8 */
    pma_rx_mgs_cdr_temp_tracking_muxd4_reg_t RX_CDR_TEMP_TRACKING_MUXD4; /*< Address offset = 0x4ec */
    pma_rx_mgs_cdr_main_fsm_ctrl_muxd0_reg_t RX_CDR_MAIN_FSM_CTRL_MUXD0; /*< Address offset = 0x4f0 */
    pma_rx_mgs_cdr_main_fsm_ctrl_muxd1_reg_t RX_CDR_MAIN_FSM_CTRL_MUXD1; /*< Address offset = 0x4f4 */
    pma_rx_mgs_cdr_main_fsm_ctrl_muxd2_reg_t RX_CDR_MAIN_FSM_CTRL_MUXD2; /*< Address offset = 0x4f8 */
    pma_rx_mgs_cdr_main_fsm_ctrl_muxd3_reg_t RX_CDR_MAIN_FSM_CTRL_MUXD3; /*< Address offset = 0x4fc */
    pma_rx_mgs_cdr_main_fsm_ctrl_muxd4_reg_t RX_CDR_MAIN_FSM_CTRL_MUXD4; /*< Address offset = 0x500 */
    pma_rx_mgs_cdr_ana_ctrl1_muxd0_reg_t RX_CDR_ANA_CTRL1_MUXD0; /*< Address offset = 0x504 */
    pma_rx_mgs_cdr_ana_ctrl1_muxd1_reg_t RX_CDR_ANA_CTRL1_MUXD1; /*< Address offset = 0x508 */
    pma_rx_mgs_cdr_ana_ctrl1_muxd2_reg_t RX_CDR_ANA_CTRL1_MUXD2; /*< Address offset = 0x50c */
    pma_rx_mgs_cdr_ana_ctrl1_muxd3_reg_t RX_CDR_ANA_CTRL1_MUXD3; /*< Address offset = 0x510 */
    pma_rx_mgs_cdr_ana_ctrl1_muxd4_reg_t RX_CDR_ANA_CTRL1_MUXD4; /*< Address offset = 0x514 */
    pma_rx_mgs_cdr_ana_ctrl2_muxd0_reg_t RX_CDR_ANA_CTRL2_MUXD0; /*< Address offset = 0x518 */
    pma_rx_mgs_cdr_ana_ctrl2_muxd1_reg_t RX_CDR_ANA_CTRL2_MUXD1; /*< Address offset = 0x51c */
    pma_rx_mgs_cdr_ana_ctrl2_muxd2_reg_t RX_CDR_ANA_CTRL2_MUXD2; /*< Address offset = 0x520 */
    pma_rx_mgs_cdr_ana_ctrl2_muxd3_reg_t RX_CDR_ANA_CTRL2_MUXD3; /*< Address offset = 0x524 */
    pma_rx_mgs_cdr_ana_ctrl2_muxd4_reg_t RX_CDR_ANA_CTRL2_MUXD4; /*< Address offset = 0x528 */
    pma_rx_mgs_cdr_ana_ctrl3_muxd0_reg_t RX_CDR_ANA_CTRL3_MUXD0; /*< Address offset = 0x52c */
    pma_rx_mgs_cdr_ana_ctrl3_muxd1_reg_t RX_CDR_ANA_CTRL3_MUXD1; /*< Address offset = 0x530 */
    pma_rx_mgs_cdr_ana_ctrl3_muxd2_reg_t RX_CDR_ANA_CTRL3_MUXD2; /*< Address offset = 0x534 */
    pma_rx_mgs_cdr_ana_ctrl3_muxd3_reg_t RX_CDR_ANA_CTRL3_MUXD3; /*< Address offset = 0x538 */
    pma_rx_mgs_cdr_ana_ctrl3_muxd4_reg_t RX_CDR_ANA_CTRL3_MUXD4; /*< Address offset = 0x53c */
    pma_rx_mgs_cdr_dfx0_muxd0_reg_t RX_CDR_DFX0_MUXD0; /*< Address offset = 0x540 */
    pma_rx_mgs_cdr_dfx0_muxd1_reg_t RX_CDR_DFX0_MUXD1; /*< Address offset = 0x544 */
    pma_rx_mgs_cdr_dfx0_muxd2_reg_t RX_CDR_DFX0_MUXD2; /*< Address offset = 0x548 */
    pma_rx_mgs_cdr_dfx0_muxd3_reg_t RX_CDR_DFX0_MUXD3; /*< Address offset = 0x54c */
    pma_rx_mgs_cdr_dfx0_muxd4_reg_t RX_CDR_DFX0_MUXD4; /*< Address offset = 0x550 */
    pma_rx_mgs_cdr_dfx1_reg_t RX_CDR_DFX1; /*< Address offset = 0x554 */
    pma_rx_mgs_cdr_ldo0_muxd0_reg_t RX_CDR_LDO0_MUXD0; /*< Address offset = 0x558 */
    pma_rx_mgs_cdr_ldo0_muxd1_reg_t RX_CDR_LDO0_MUXD1; /*< Address offset = 0x55c */
    pma_rx_mgs_cdr_ldo0_muxd2_reg_t RX_CDR_LDO0_MUXD2; /*< Address offset = 0x560 */
    pma_rx_mgs_cdr_ldo0_muxd3_reg_t RX_CDR_LDO0_MUXD3; /*< Address offset = 0x564 */
    pma_rx_mgs_cdr_ldo0_muxd4_reg_t RX_CDR_LDO0_MUXD4; /*< Address offset = 0x568 */
    pma_rx_mgs_cdr_ldo1_muxd0_reg_t RX_CDR_LDO1_MUXD0; /*< Address offset = 0x56c */
    pma_rx_mgs_cdr_ldo1_muxd1_reg_t RX_CDR_LDO1_MUXD1; /*< Address offset = 0x570 */
    pma_rx_mgs_cdr_ldo1_muxd2_reg_t RX_CDR_LDO1_MUXD2; /*< Address offset = 0x574 */
    pma_rx_mgs_cdr_ldo1_muxd3_reg_t RX_CDR_LDO1_MUXD3; /*< Address offset = 0x578 */
    pma_rx_mgs_cdr_ldo1_muxd4_reg_t RX_CDR_LDO1_MUXD4; /*< Address offset = 0x57c */
    pma_rx_mgs_cdr_ldo2_muxd0_reg_t RX_CDR_LDO2_MUXD0; /*< Address offset = 0x580 */
    pma_rx_mgs_cdr_ldo2_muxd1_reg_t RX_CDR_LDO2_MUXD1; /*< Address offset = 0x584 */
    pma_rx_mgs_cdr_ldo2_muxd2_reg_t RX_CDR_LDO2_MUXD2; /*< Address offset = 0x588 */
    pma_rx_mgs_cdr_ldo2_muxd3_reg_t RX_CDR_LDO2_MUXD3; /*< Address offset = 0x58c */
    pma_rx_mgs_cdr_ldo2_muxd4_reg_t RX_CDR_LDO2_MUXD4; /*< Address offset = 0x590 */
    pma_rx_mgs_cdr_ldo_stat_reg_t RX_CDR_LDO_STAT; /*< Address offset = 0x594 */
    pma_rx_mgs_cdr_adl0_reg_t RX_CDR_ADL0; /*< Address offset = 0x598 */
    pma_rx_mgs_cdr_adl1_reg_t RX_CDR_ADL1; /*< Address offset = 0x59c */
    pma_rx_mgs_cdr_kvcc0_muxd0_reg_t RX_CDR_KVCC0_MUXD0; /*< Address offset = 0x5a0 */
    pma_rx_mgs_cdr_kvcc0_muxd1_reg_t RX_CDR_KVCC0_MUXD1; /*< Address offset = 0x5a4 */
    pma_rx_mgs_cdr_kvcc0_muxd2_reg_t RX_CDR_KVCC0_MUXD2; /*< Address offset = 0x5a8 */
    pma_rx_mgs_cdr_kvcc0_muxd3_reg_t RX_CDR_KVCC0_MUXD3; /*< Address offset = 0x5ac */
    pma_rx_mgs_cdr_kvcc0_muxd4_reg_t RX_CDR_KVCC0_MUXD4; /*< Address offset = 0x5b0 */
    pma_rx_mgs_cdr_kvcc1_muxd0_reg_t RX_CDR_KVCC1_MUXD0; /*< Address offset = 0x5b4 */
    pma_rx_mgs_cdr_kvcc1_muxd1_reg_t RX_CDR_KVCC1_MUXD1; /*< Address offset = 0x5b8 */
    pma_rx_mgs_cdr_kvcc1_muxd2_reg_t RX_CDR_KVCC1_MUXD2; /*< Address offset = 0x5bc */
    pma_rx_mgs_cdr_kvcc1_muxd3_reg_t RX_CDR_KVCC1_MUXD3; /*< Address offset = 0x5c0 */
    pma_rx_mgs_cdr_kvcc1_muxd4_reg_t RX_CDR_KVCC1_MUXD4; /*< Address offset = 0x5c4 */
    pma_rx_mgs_cdr_kvcc2_muxd0_reg_t RX_CDR_KVCC2_MUXD0; /*< Address offset = 0x5c8 */
    pma_rx_mgs_cdr_kvcc2_muxd1_reg_t RX_CDR_KVCC2_MUXD1; /*< Address offset = 0x5cc */
    pma_rx_mgs_cdr_kvcc2_muxd2_reg_t RX_CDR_KVCC2_MUXD2; /*< Address offset = 0x5d0 */
    pma_rx_mgs_cdr_kvcc2_muxd3_reg_t RX_CDR_KVCC2_MUXD3; /*< Address offset = 0x5d4 */
    pma_rx_mgs_cdr_kvcc2_muxd4_reg_t RX_CDR_KVCC2_MUXD4; /*< Address offset = 0x5d8 */
    pma_rx_mgs_cdr_uxppm_ctrl0_reg_t RX_CDR_UXPPM_CTRL0; /*< Address offset = 0x5dc */
    pma_rx_mgs_cdr_uxppm_ctrl1_reg_t RX_CDR_UXPPM_CTRL1; /*< Address offset = 0x5e0 */
    pma_rx_mgs_cdr_uxppm_watchdog_reg_t RX_CDR_UXPPM_WATCHDOG; /*< Address offset = 0x5e4 */
    pma_rx_mgs_cdr_brkppm_ctrl0_reg_t RX_CDR_BRKPPM_CTRL0; /*< Address offset = 0x5e8 */
    pma_rx_mgs_cdr_brkppm_ctrl1_reg_t RX_CDR_BRKPPM_CTRL1; /*< Address offset = 0x5ec */
    pma_rx_mgs_cdr_fine_prop_ctrl0_reg_t RX_CDR_FINE_PROP_CTRL0; /*< Address offset = 0x5f0 */
    pma_rx_mgs_cdr_fine_prop_ctrl1_reg_t RX_CDR_FINE_PROP_CTRL1; /*< Address offset = 0x5f4 */
    pma_rx_mgs_cdr_fine_prop_ctrl2_reg_t RX_CDR_FINE_PROP_CTRL2; /*< Address offset = 0x5f8 */
    pma_rx_mgs_cdr_fine_prop_hi_gain_ctrl0_reg_t RX_CDR_FINE_PROP_HI_GAIN_CTRL0; /*< Address offset = 0x5fc */
    pma_rx_mgs_cdr_fine_prop_hi_gain_ctrl1_reg_t RX_CDR_FINE_PROP_HI_GAIN_CTRL1; /*< Address offset = 0x600 */
    pma_rx_mgs_cdr_fine_prop_lo_gain_ctrl0_reg_t RX_CDR_FINE_PROP_LO_GAIN_CTRL0; /*< Address offset = 0x604 */
    pma_rx_mgs_cdr_fine_prop_lo_gain_ctrl1_reg_t RX_CDR_FINE_PROP_LO_GAIN_CTRL1; /*< Address offset = 0x608 */
    pma_rx_mgs_cdr_qpd_accum_mask_hi_reg_t RX_CDR_QPD_ACCUM_MASK_HI; /*< Address offset = 0x60c */
    pma_rx_mgs_cdr_qpd_accum_mask_lo_reg_t RX_CDR_QPD_ACCUM_MASK_LO; /*< Address offset = 0x610 */
    pma_rx_mgs_cdr_qpd_accum_ctrl_reg_t RX_CDR_QPD_ACCUM_CTRL; /*< Address offset = 0x614 */
    pma_rx_mgs_cdr_bbpd_accum_mask_reg_t RX_CDR_BBPD_ACCUM_MASK; /*< Address offset = 0x618 */
    pma_rx_mgs_cdr_bbpd_accum_ctrl_reg_t RX_CDR_BBPD_ACCUM_CTRL; /*< Address offset = 0x61c */
    pma_rx_mgs_cdr_rw_spare0_reg_t RX_CDR_RW_SPARE0; /*< Address offset = 0x620 */
    pma_rx_mgs_cdr_fine_stat_reg_t RX_CDR_FINE_STAT; /*< Address offset = 0x624 */
    pma_rx_mgs_cdr_brkppm_stat0_reg_t RX_CDR_BRKPPM_STAT0; /*< Address offset = 0x628 */
    pma_rx_mgs_cdr_brkppm_stat1_reg_t RX_CDR_BRKPPM_STAT1; /*< Address offset = 0x62c */
    pma_rx_mgs_cdr_brkppm_stat2_reg_t RX_CDR_BRKPPM_STAT2; /*< Address offset = 0x630 */
    pma_rx_mgs_cdr_uxppm_stat_reg_t RX_CDR_UXPPM_STAT; /*< Address offset = 0x634 */
    pma_rx_mgs_cdr_uxppm_test_0_reg_t RX_CDR_UXPPM_TEST_0; /*< Address offset = 0x638 */
    pma_rx_mgs_cdr_uxppm_test_1_reg_t RX_CDR_UXPPM_TEST_1; /*< Address offset = 0x63c */
    pma_rx_mgs_cdr_calib_stat_reg_t RX_CDR_CALIB_STAT; /*< Address offset = 0x640 */
    pma_rx_mgs_cdr_meas_stat_reg_t RX_CDR_MEAS_STAT; /*< Address offset = 0x644 */
    pma_rx_mgs_cdr_time2lock_stat_reg_t RX_CDR_TIME2LOCK_STAT; /*< Address offset = 0x648 */
    pma_rx_mgs_cdr_fracdiv_stat_reg_t RX_CDR_FRACDIV_STAT; /*< Address offset = 0x64c */
    pma_rx_mgs_cdr_misc0_stat_reg_t RX_CDR_MISC0_STAT; /*< Address offset = 0x650 */
    pma_rx_mgs_cdr_misc1_stat_reg_t RX_CDR_MISC1_STAT; /*< Address offset = 0x654 */
    pma_rx_mgs_cdr_cselfine_stat_reg_t RX_CDR_CSELFINE_STAT; /*< Address offset = 0x658 */
    pma_rx_mgs_cdr_refgen_stat_reg_t RX_CDR_REFGEN_STAT; /*< Address offset = 0x65c */
    pma_rx_mgs_cdr_misc3_stat_reg_t RX_CDR_MISC3_STAT; /*< Address offset = 0x660 */
    pma_rx_mgs_cdr_kvcc_stat_0_reg_t RX_CDR_KVCC_STAT_0; /*< Address offset = 0x664 */
    pma_rx_mgs_cdr_kvcc_stat_1_reg_t RX_CDR_KVCC_STAT_1; /*< Address offset = 0x668 */
    pma_rx_mgs_cdr_feedfwrdgain_stat_reg_t RX_CDR_FEEDFWRDGAIN_STAT; /*< Address offset = 0x66c */
    pma_rx_mgs_cdr_cap_ctrl_reg_t RX_CDR_CAP_CTRL; /*< Address offset = 0x670 */
    pma_rx_mgs_cdr_vote_stat_reg_t RX_CDR_VOTE_STAT; /*< Address offset = 0x674 */
    pma_rx_mgs_cdr_code_stat_reg_t RX_CDR_CODE_STAT; /*< Address offset = 0x678 */
    pma_rx_mgs_cdr_ro_spare_ana2dig_reg_t RX_CDR_RO_SPARE_ANA2DIG; /*< Address offset = 0x67c */
    pma_rx_mgs_cdr_l2r_locktime_reg_t RX_CDR_L2R_LOCKTIME; /*< Address offset = 0x680 */
    pma_rx_mgs_cdr_l2d_locktime_reg_t RX_CDR_L2D_LOCKTIME; /*< Address offset = 0x684 */
    pma_rx_mgs_cdr_qpd_accum_stat_reg_t RX_CDR_QPD_ACCUM_STAT; /*< Address offset = 0x688 */
    pma_rx_mgs_cdr_bbpd_accum_stat_reg_t RX_CDR_BBPD_ACCUM_STAT; /*< Address offset = 0x68c */
    pma_rx_mgs_cdr_ro_spare_reg_t RX_CDR_RO_SPARE; /*< Address offset = 0x690 */
    pma_rx_mgs_mode_sel_cfg0_reg_t RX_MODE_SEL_CFG0; /*< Address offset = 0x694 */
    pma_rx_mgs_mode_sel_cfg1_reg_t RX_MODE_SEL_CFG1; /*< Address offset = 0x698 */
    pma_rx_mgs_mode_sel_cfg2_reg_t RX_MODE_SEL_CFG2; /*< Address offset = 0x69c */
    pma_rx_mgs_mode_sel_cfg3_reg_t RX_MODE_SEL_CFG3; /*< Address offset = 0x6a0 */
    pma_rx_mgs_mode_sel_cfg4_reg_t RX_MODE_SEL_CFG4; /*< Address offset = 0x6a4 */
    pma_rx_mgs_mode_sel_stat0_reg_t RX_MODE_SEL_STAT0; /*< Address offset = 0x6a8 */
    pma_rx_mgs_mode_sel_stat1_reg_t RX_MODE_SEL_STAT1; /*< Address offset = 0x6ac */
    pma_rx_mgs_mode_sel_stat2_reg_t RX_MODE_SEL_STAT2; /*< Address offset = 0x6b0 */
    pma_rx_mgs_adcskewdet_calassist_ctrl_reg_t RX_ADCSKEWDET_CALASSIST_CTRL; /*< Address offset = 0x6b4 */
    pma_rx_mgs_adcskewdet_calassist_stat_reg_t RX_ADCSKEWDET_CALASSIST_STAT; /*< Address offset = 0x6b8 */
    pma_rx_msg_lane_chargepump_calassist_ctrl_reg_t LANE_CHARGEPUMP_CALASSIST_CTRL; /*< Address offset = 0x6bc */
    pma_rx_msg_lane_chargepump_calassist_stat_reg_t LANE_CHARGEPUMP_CALASSIST_STAT; /*< Address offset = 0x6c0 */
    pma_rx_mgs_cmpout_calassist_ctrl0_reg_t RX_CMPOUT_CALASSIST_CTRL0; /*< Address offset = 0x6c4 */
    pma_rx_mgs_cmpout_calassist_ctrl1_reg_t RX_CMPOUT_CALASSIST_CTRL1; /*< Address offset = 0x6c8 */
    pma_rx_mgs_cmpout_calassist_ctrl2_reg_t RX_CMPOUT_CALASSIST_CTRL2; /*< Address offset = 0x6cc */
    pma_rx_mgs_cmpout_calassist_ctrl3_reg_t RX_CMPOUT_CALASSIST_CTRL3; /*< Address offset = 0x6d0 */
    pma_rx_mgs_cmpout_calassist_ctrl4_reg_t RX_CMPOUT_CALASSIST_CTRL4; /*< Address offset = 0x6d4 */
    pma_rx_mgs_cmpout_calassist_ctrl5_reg_t RX_CMPOUT_CALASSIST_CTRL5; /*< Address offset = 0x6d8 */
    pma_rx_mgs_cmpout_calassist_stat_reg_t RX_CMPOUT_CALASSIST_STAT; /*< Address offset = 0x6dc */
    const uint8_t        reservedArea1 [252]; /*< Address offset = 0x6e0 */
    pma_rx_mgs_rw_spare_0_reg_t RX_RW_SPARE_0; /*< Address offset = 0x7dc */
    pma_rx_mgs_rw_spare_1_reg_t RX_RW_SPARE_1; /*< Address offset = 0x7e0 */
    pma_rx_mgs_rw_spare_2_reg_t RX_RW_SPARE_2; /*< Address offset = 0x7e4 */
    pma_rx_mgs_rw_spare_3_reg_t RX_RW_SPARE_3; /*< Address offset = 0x7e8 */
    pma_rx_mgs_ro_spare_0_reg_t RX_RO_SPARE_0; /*< Address offset = 0x7ec */
    pma_rx_mgs_ro_spare_1_reg_t RX_RO_SPARE_1; /*< Address offset = 0x7f0 */
} pma_rx_msg_t;     // size: 0x0670

// AddressSpace struct pointer
//
#define DLNK_JESD0_PHY_PMA0_RX_GLOBAL  ((pma_rx_msg_t*) DLNK_JESD0_PHY_PMA0_RX_GLOBAL_BASE)
#define DLNK_JESD0_PHY_PMA0_RX_Q0      ((pma_rx_msg_t*) DLNK_JESD0_PHY_PMA0_RX_Q0_BASE)
#define DLNK_JESD0_PHY_PMA0_RX_Q1      ((pma_rx_msg_t*) DLNK_JESD0_PHY_PMA0_RX_Q1_BASE)
#define DLNK_JESD0_PHY_PMA0_RX_Q2      ((pma_rx_msg_t*) DLNK_JESD0_PHY_PMA0_RX_Q2_BASE)
#define DLNK_JESD0_PHY_PMA0_RX_Q3      ((pma_rx_msg_t*) DLNK_JESD0_PHY_PMA0_RX_Q3_BASE)
#define DLNK_JESD1_PHY_PMA0_RX_GLOBAL  ((pma_rx_msg_t*) DLNK_JESD1_PHY_PMA0_RX_GLOBAL_BASE)
#define DLNK_JESD1_PHY_PMA0_RX_Q0      ((pma_rx_msg_t*) DLNK_JESD1_PHY_PMA0_RX_Q0_BASE)
#define DLNK_JESD1_PHY_PMA0_RX_Q1      ((pma_rx_msg_t*) DLNK_JESD1_PHY_PMA0_RX_Q1_BASE)
#define DLNK_JESD1_PHY_PMA0_RX_Q2      ((pma_rx_msg_t*) DLNK_JESD1_PHY_PMA0_RX_Q2_BASE)
#define DLNK_JESD1_PHY_PMA0_RX_Q3      ((pma_rx_msg_t*) DLNK_JESD1_PHY_PMA0_RX_Q3_BASE)
#define DLNK_JESD2_PHY_PMA0_RX_GLOBAL  ((pma_rx_msg_t*) DLNK_JESD2_PHY_PMA0_RX_GLOBAL_BASE)
#define DLNK_JESD2_PHY_PMA0_RX_Q0      ((pma_rx_msg_t*) DLNK_JESD2_PHY_PMA0_RX_Q0_BASE)
#define DLNK_JESD2_PHY_PMA0_RX_Q1      ((pma_rx_msg_t*) DLNK_JESD2_PHY_PMA0_RX_Q1_BASE)
#define DLNK_JESD2_PHY_PMA0_RX_Q2      ((pma_rx_msg_t*) DLNK_JESD2_PHY_PMA0_RX_Q2_BASE)
#define DLNK_JESD2_PHY_PMA0_RX_Q3      ((pma_rx_msg_t*) DLNK_JESD2_PHY_PMA0_RX_Q3_BASE)
#define DLNK_JESD3_PHY_PMA0_RX_GLOBAL  ((pma_rx_msg_t*) DLNK_JESD3_PHY_PMA0_RX_GLOBAL_BASE)
#define DLNK_JESD3_PHY_PMA0_RX_Q0      ((pma_rx_msg_t*) DLNK_JESD3_PHY_PMA0_RX_Q0_BASE)
#define DLNK_JESD3_PHY_PMA0_RX_Q1      ((pma_rx_msg_t*) DLNK_JESD3_PHY_PMA0_RX_Q1_BASE)
#define DLNK_JESD3_PHY_PMA0_RX_Q2      ((pma_rx_msg_t*) DLNK_JESD3_PHY_PMA0_RX_Q2_BASE)
#define DLNK_JESD3_PHY_PMA0_RX_Q3      ((pma_rx_msg_t*) DLNK_JESD3_PHY_PMA0_RX_Q3_BASE)

// ******************************************* /Address Space

#endif      // _PMA_RX_MSG_H_

