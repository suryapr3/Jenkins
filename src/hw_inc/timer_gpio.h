#ifndef _TIMER_GPIO_H_
#define _TIMER_GPIO_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define RCS_TIMER_GRP0_GPIO_BASE  ( 0x00268000 )
#define RCS_TIMER_GRP1_GPIO_BASE  ( 0x00268400 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define TIMER_GPIO_CFG_OFFSET ( 0x00000200U )
#define TIMER_GPIO_DEB_CNT_SEL_OFFSET ( 0x00000204U )
#define TIMER_GPIO_POLARITY_OFFSET ( 0x00000208U )
#define TIMER_GPIO_INOUT_OFFSET ( 0x00000210U )
#define TIMER_GPIO_CURR_OUT_OFFSET ( 0x00000214U )
#define TIMER_GPIO_CURR_IN_OFFSET ( 0x00000218U )
#define TIMER_GPIO_SET_VAL_15_0_OFFSET ( 0x0000021cU )
#define TIMER_GPIO_SET_VAL_31_16_OFFSET ( 0x00000220U )
#define TIMER_GPIO_IN_DELTA_OFFSET ( 0x00000224U )
#define TIMER_GPIO_IN_MASK_OFFSET ( 0x00000228U )
#define TIMER_GPIO_IN_MASKED_DELTA_OFFSET ( 0x0000022cU )
#define TIMER_GPIO_DR_7_0_OFFSET ( 0x00000230U )
#define TIMER_GPIO_DR_15_8_OFFSET ( 0x00000234U )
#define TIMER_GPIO_DR_23_16_OFFSET ( 0x00000238U )
#define TIMER_GPIO_DR_31_24_OFFSET ( 0x0000023cU )
#define TIMER_GPIO_LPR_15_0_OFFSET ( 0x00000240U )
#define TIMER_GPIO_LPR_31_16_OFFSET ( 0x00000244U )
#define TIMER_GPIO_PDE_15_0_OFFSET ( 0x00000248U )
#define TIMER_GPIO_PDE_31_16_OFFSET ( 0x0000024cU )
#define TIMER_GPIO_PUE_15_0_OFFSET ( 0x00000250U )
#define TIMER_GPIO_PUE_31_16_OFFSET ( 0x00000254U )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define TIMER_GPIO_CFG_ADR(_BASE)  (( ( _BASE ) + ( TIMER_GPIO_CFG_OFFSET ) ))
#define TIMER_GPIO_DEB_CNT_SEL_ADR(_BASE) (( ( _BASE ) + ( TIMER_GPIO_DEB_CNT_SEL_OFFSET ) ))
#define TIMER_GPIO_POLARITY_ADR(_BASE) (( ( _BASE ) + ( TIMER_GPIO_POLARITY_OFFSET ) ))
#define TIMER_GPIO_INOUT_ADR(_BASE) (( ( _BASE ) + ( TIMER_GPIO_INOUT_OFFSET ) ))
#define TIMER_GPIO_CURR_OUT_ADR(_BASE) (( ( _BASE ) + ( TIMER_GPIO_CURR_OUT_OFFSET ) ))
#define TIMER_GPIO_CURR_IN_ADR(_BASE) (( ( _BASE ) + ( TIMER_GPIO_CURR_IN_OFFSET ) ))
#define TIMER_GPIO_SET_VAL_15_0_ADR(_BASE) (( ( _BASE ) + ( TIMER_GPIO_SET_VAL_15_0_OFFSET ) ))
#define TIMER_GPIO_SET_VAL_31_16_ADR(_BASE) (( ( _BASE ) + ( TIMER_GPIO_SET_VAL_31_16_OFFSET ) ))
#define TIMER_GPIO_IN_DELTA_ADR(_BASE) (( ( _BASE ) + ( TIMER_GPIO_IN_DELTA_OFFSET ) ))
#define TIMER_GPIO_IN_MASK_ADR(_BASE) (( ( _BASE ) + ( TIMER_GPIO_IN_MASK_OFFSET ) ))
#define TIMER_GPIO_IN_MASKED_DELTA_ADR(_BASE) (( ( _BASE ) + ( TIMER_GPIO_IN_MASKED_DELTA_OFFSET ) ))
#define TIMER_GPIO_DR_7_0_ADR(_BASE) (( ( _BASE ) + ( TIMER_GPIO_DR_7_0_OFFSET ) ))
#define TIMER_GPIO_DR_15_8_ADR(_BASE) (( ( _BASE ) + ( TIMER_GPIO_DR_15_8_OFFSET ) ))
#define TIMER_GPIO_DR_23_16_ADR(_BASE) (( ( _BASE ) + ( TIMER_GPIO_DR_23_16_OFFSET ) ))
#define TIMER_GPIO_DR_31_24_ADR(_BASE) (( ( _BASE ) + ( TIMER_GPIO_DR_31_24_OFFSET ) ))
#define TIMER_GPIO_LPR_15_0_ADR(_BASE) (( ( _BASE ) + ( TIMER_GPIO_LPR_15_0_OFFSET ) ))
#define TIMER_GPIO_LPR_31_16_ADR(_BASE) (( ( _BASE ) + ( TIMER_GPIO_LPR_31_16_OFFSET ) ))
#define TIMER_GPIO_PDE_15_0_ADR(_BASE) (( ( _BASE ) + ( TIMER_GPIO_PDE_15_0_OFFSET ) ))
#define TIMER_GPIO_PDE_31_16_ADR(_BASE) (( ( _BASE ) + ( TIMER_GPIO_PDE_31_16_OFFSET ) ))
#define TIMER_GPIO_PUE_15_0_ADR(_BASE) (( ( _BASE ) + ( TIMER_GPIO_PUE_15_0_OFFSET ) ))
#define TIMER_GPIO_PUE_31_16_ADR(_BASE) (( ( _BASE ) + ( TIMER_GPIO_PUE_31_16_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief TIMER_GPIO_COM_REG_GPIO_CFG register description at address offset 0x200
  *
  * Register default value:        0x00000022
  * Register full path in IP: timer_gpio_com/reg/gpio_cfg
  * GPIO Group Config
  */

typedef union {
  struct {
    uint32_t DEBOUNCE_CNT : 4;
    ///< Incoming GPIO signals can be filtered to avoid glitches. This register
    ///< determines how many extra clk_bfn cycles an incoming GPIO bit must
    ///< remain at a value before being registered as a change. The higher
    ///< the value, the more latency a GPIO change takes.  If no debouncing
    ///< is needed then a value of 0 should be used.  Note prior to debouncing
    ///< the GPIO are first synchronized into clk_bfn domain (983Mhz).
    ///< AccessType="RW" BitOffset="0" ResetValue="0x2"
    uint32_t DEBOUNCE_CNT_2 : 4;
    ///< This is a secondary option to the debug count specified in bits 3:0
    ///< of this register.  By default bits 3:0 are used, but each gpio can
    ///< override this and use this value instead by configuring the DEB_CNT_SEL
    ///< register.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x2"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} timer_gpio_cfg_reg_t;

#define TIMER_GPIO_CFG_DEFAULT (0x00000022U)
#define TIMER_GPIO_CFG_RD_MASK (0x000000ffU)
#define TIMER_GPIO_CFG_WR_MASK (0x000000ffU)


///< Incoming GPIO signals can be filtered to avoid glitches. This register
///< determines how many extra clk_bfn cycles an incoming GPIO bit must
///< remain at a value before being registered as a change. The higher
///< the value, the more latency a GPIO change takes.  If no debouncing
///< is needed then a value of 0 should be used.  Note prior to debouncing
///< the GPIO are first synchronized into clk_bfn domain (983Mhz).
#define TIMER_GPIO_CFG_DEBOUNCE_CNT_BF_OFF ( 0)
#define TIMER_GPIO_CFG_DEBOUNCE_CNT_BF_WID ( 4)
#define TIMER_GPIO_CFG_DEBOUNCE_CNT_BF_MSK (0x0000000F)
#define TIMER_GPIO_CFG_DEBOUNCE_CNT_BF_DEF (0x00000002)

///< This is a secondary option to the debug count specified in bits 3:0
///< of this register.  By default bits 3:0 are used, but each gpio can
///< override this and use this value instead by configuring the DEB_CNT_SEL
///< register.
#define TIMER_GPIO_CFG_DEBOUNCE_CNT_2_BF_OFF ( 4)
#define TIMER_GPIO_CFG_DEBOUNCE_CNT_2_BF_WID ( 4)
#define TIMER_GPIO_CFG_DEBOUNCE_CNT_2_BF_MSK (0x000000F0)
#define TIMER_GPIO_CFG_DEBOUNCE_CNT_2_BF_DEF (0x00000020)


/** @brief TIMER_GPIO_COM_REG_GPIO_DEB_CNT_SEL register description at address offset 0x204
  *
  * Register default value:        0x00000000
  * Register full path in IP: timer_gpio_com/reg/gpio_deb_cnt_sel
  * GPIO debounce counter select
  */

typedef union {
  struct {
    uint32_t DEBOUNCE_CNT_SEL : 32;
    ///< This is a secondary option to the debug count specified in bits 3:0
    ///< of this register.  By default bits 3:0 are used, but each gpio can
    ///< override this and use this value instead by configuring the DEB_CNT_SEL
    ///< register.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} timer_gpio_deb_cnt_sel_reg_t;

#define TIMER_GPIO_DEB_CNT_SEL_DEFAULT (0x00000000U)
#define TIMER_GPIO_DEB_CNT_SEL_RD_MASK (0xffffffffU)
#define TIMER_GPIO_DEB_CNT_SEL_WR_MASK (0xffffffffU)


///< This is a secondary option to the debug count specified in bits 3:0
///< of this register.  By default bits 3:0 are used, but each gpio can
///< override this and use this value instead by configuring the DEB_CNT_SEL
///< register.
#define TIMER_GPIO_DEB_CNT_SEL_DEBOUNCE_CNT_SEL_BF_OFF ( 0)
#define TIMER_GPIO_DEB_CNT_SEL_DEBOUNCE_CNT_SEL_BF_WID (32)
#define TIMER_GPIO_DEB_CNT_SEL_DEBOUNCE_CNT_SEL_BF_MSK (0xFFFFFFFF)
#define TIMER_GPIO_DEB_CNT_SEL_DEBOUNCE_CNT_SEL_BF_DEF (0x00000000)


/** @brief TIMER_GPIO_COM_REG_GPIO_POLARITY register description at address offset 0x208
  *
  * Register default value:        0x00000000
  * Register full path in IP: timer_gpio_com/reg/gpio_polarity
  * GPIO polarity configuration
  */

typedef union {
  struct {
    uint32_t GPIO_POL : 32;
    ///< Determines if the gpio outputs need to be inverted due to a device
    ///< that is active low.  If set to 1, the final PDO will be inverted.
    ///< GPIO timers should take this setting into account.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} timer_gpio_polarity_reg_t;

#define TIMER_GPIO_POLARITY_DEFAULT (0x00000000U)
#define TIMER_GPIO_POLARITY_RD_MASK (0xffffffffU)
#define TIMER_GPIO_POLARITY_WR_MASK (0xffffffffU)


///< Determines if the gpio outputs need to be inverted due to a device
///< that is active low.  If set to 1, the final PDO will be inverted.
///< GPIO timers should take this setting into account.
#define TIMER_GPIO_POLARITY_GPIO_POL_BF_OFF ( 0)
#define TIMER_GPIO_POLARITY_GPIO_POL_BF_WID (32)
#define TIMER_GPIO_POLARITY_GPIO_POL_BF_MSK (0xFFFFFFFF)
#define TIMER_GPIO_POLARITY_GPIO_POL_BF_DEF (0x00000000)


/** @brief TIMER_GPIO_COM_REG_GPIO_INOUT register description at address offset 0x210
  *
  * Register default value:        0x00000000
  * Register full path in IP: timer_gpio_com/reg/gpio_inout
  * GPIO In/Out Control
  */

typedef union {
  struct {
    uint32_t GPIO_DIR : 32;
    ///< Controls the direction of each GPIO pin. Set to 1 to enable the output
    ///< buffer. Set to 0 to make an input pin
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} timer_gpio_inout_reg_t;

#define TIMER_GPIO_INOUT_DEFAULT (0x00000000U)
#define TIMER_GPIO_INOUT_RD_MASK (0xffffffffU)
#define TIMER_GPIO_INOUT_WR_MASK (0xffffffffU)


///< Controls the direction of each GPIO pin. Set to 1 to enable the output
///< buffer. Set to 0 to make an input pin
#define TIMER_GPIO_INOUT_GPIO_DIR_BF_OFF ( 0)
#define TIMER_GPIO_INOUT_GPIO_DIR_BF_WID (32)
#define TIMER_GPIO_INOUT_GPIO_DIR_BF_MSK (0xFFFFFFFF)
#define TIMER_GPIO_INOUT_GPIO_DIR_BF_DEF (0x00000000)


/** @brief TIMER_GPIO_COM_REG_GPIO_CURR_OUT register description at address offset 0x214
  *
  * Register default value:        0x00000000
  * Register full path in IP: timer_gpio_com/reg/gpio_curr_out
  * GPIO Out Value
  */

typedef union {
  struct {
    uint32_t GPIO_OUT : 32;
    ///< The value to be driven out of the GPIO when the corresponding GPIO_DIR
    ///< bit is set to 1. This value can be changed by timers expiring or through
    ///< writes to the gpio_set_val registers.  It can also be overridden by
    ///< FOVR/PHM for gpio groups 0 and 1.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} timer_gpio_curr_out_reg_t;

#define TIMER_GPIO_CURR_OUT_DEFAULT (0x00000000U)
#define TIMER_GPIO_CURR_OUT_RD_MASK (0xffffffffU)
#define TIMER_GPIO_CURR_OUT_WR_MASK (0x00000000U)


///< The value to be driven out of the GPIO when the corresponding GPIO_DIR
///< bit is set to 1. This value can be changed by timers expiring or through
///< writes to the gpio_set_val registers.  It can also be overridden by
///< FOVR/PHM for gpio groups 0 and 1.
#define TIMER_GPIO_CURR_OUT_GPIO_OUT_BF_OFF ( 0)
#define TIMER_GPIO_CURR_OUT_GPIO_OUT_BF_WID (32)
#define TIMER_GPIO_CURR_OUT_GPIO_OUT_BF_MSK (0xFFFFFFFF)
#define TIMER_GPIO_CURR_OUT_GPIO_OUT_BF_DEF (0x00000000)


/** @brief TIMER_GPIO_COM_REG_GPIO_CURR_IN register description at address offset 0x218
  *
  * Register default value:        0x00000000
  * Register full path in IP: timer_gpio_com/reg/gpio_curr_in
  * GPIO In Value
  */

typedef union {
  struct {
    uint32_t GPIO_IN : 32;
    ///< The synchronized/debounced current value of the GPIO pin
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} timer_gpio_curr_in_reg_t;

#define TIMER_GPIO_CURR_IN_DEFAULT (0x00000000U)
#define TIMER_GPIO_CURR_IN_RD_MASK (0xffffffffU)
#define TIMER_GPIO_CURR_IN_WR_MASK (0x00000000U)


///< The synchronized/debounced current value of the GPIO pin
#define TIMER_GPIO_CURR_IN_GPIO_IN_BF_OFF ( 0)
#define TIMER_GPIO_CURR_IN_GPIO_IN_BF_WID (32)
#define TIMER_GPIO_CURR_IN_GPIO_IN_BF_MSK (0xFFFFFFFF)
#define TIMER_GPIO_CURR_IN_GPIO_IN_BF_DEF (0x00000000)


/** @brief TIMER_GPIO_COM_REG_GPIO_SET_VAL_15_0 register description at address offset 0x21c
  *
  * Register default value:        0x00000000
  * Register full path in IP: timer_gpio_com/reg/gpio_set_val_15_0
  * GPIO Value/Mask
  */

typedef union {
  struct {
    uint32_t GPIO_VALUE : 16;
    ///< Value to be driven out on the GPIO output when GPIO_DIR = 1 and GPIO_MASK
    ///< = 1
    ///< AccessType="WO" BitOffset="0" ResetValue="0x0"
    uint32_t MASK : 16;
    ///< Maskable
    ///< AccessType="WO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} timer_gpio_set_val_15_0_reg_t;

#define TIMER_GPIO_SET_VAL_15_0_DEFAULT (0x00000000U)
#define TIMER_GPIO_SET_VAL_15_0_RD_MASK (0x00000000U)
#define TIMER_GPIO_SET_VAL_15_0_WR_MASK (0xffffffffU)


///< Value to be driven out on the GPIO output when GPIO_DIR = 1 and GPIO_MASK
///< = 1
#define TIMER_GPIO_SET_VAL_15_0_GPIO_VAL_BF_OFF ( 0)
#define TIMER_GPIO_SET_VAL_15_0_GPIO_VAL_BF_WID (16)
#define TIMER_GPIO_SET_VAL_15_0_GPIO_VAL_BF_MSK (0x0000FFFF)
#define TIMER_GPIO_SET_VAL_15_0_GPIO_VAL_BF_DEF (0x00000000)
#define TIMER_GPIO_SET_VAL_15_0_MASK_BF_OFF (16)
#define TIMER_GPIO_SET_VAL_15_0_MASK_BF_WID (16)
#define TIMER_GPIO_SET_VAL_15_0_MASK_BF_MSK (0xFFFF0000)


/** @brief TIMER_GPIO_COM_REG_GPIO_SET_VAL_31_16 register description at address offset 0x220
  *
  * Register default value:        0x00000000
  * Register full path in IP: timer_gpio_com/reg/gpio_set_val_31_16
  * GPIO Value/Mask
  */

typedef union {
  struct {
    uint32_t GPIO_VALUE : 16;
    ///< Value to be driven out on the GPIO output when GPIO_DIR = 1 and GPIO_MASK
    ///< = 1
    ///< AccessType="WO" BitOffset="0" ResetValue="0x0"
    uint32_t MASK : 16;
    ///< Maskable
    ///< AccessType="WO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} timer_gpio_set_val_31_16_reg_t;

#define TIMER_GPIO_SET_VAL_31_16_DEFAULT (0x00000000U)
#define TIMER_GPIO_SET_VAL_31_16_RD_MASK (0x00000000U)
#define TIMER_GPIO_SET_VAL_31_16_WR_MASK (0xffffffffU)


///< Value to be driven out on the GPIO output when GPIO_DIR = 1 and GPIO_MASK
///< = 1
#define TIMER_GPIO_SET_VAL_31_16_GPIO_VAL_BF_OFF ( 0)
#define TIMER_GPIO_SET_VAL_31_16_GPIO_VAL_BF_WID (16)
#define TIMER_GPIO_SET_VAL_31_16_GPIO_VAL_BF_MSK (0x0000FFFF)
#define TIMER_GPIO_SET_VAL_31_16_GPIO_VAL_BF_DEF (0x00000000)
#define TIMER_GPIO_SET_VAL_31_16_MASK_BF_OFF (16)
#define TIMER_GPIO_SET_VAL_31_16_MASK_BF_WID (16)
#define TIMER_GPIO_SET_VAL_31_16_MASK_BF_MSK (0xFFFF0000)


/** @brief TIMER_GPIO_COM_REG_GPIO_IN_DELTA register description at address offset 0x224
  *
  * Register default value:        0x00000000
  * Register full path in IP: timer_gpio_com/reg/gpio_in_delta
  * GPIO In Delta
  */

typedef union {
  struct {
    uint32_t GPIO_IN_DELTA : 32;
    ///< Indicates that the sampled value of the GPIO input has changed. This
    ///< along with the GPIO_IN_MASK register are used to generate the 4 GPIO
    ///< interrupts. Write 1 to each bit to clear the delta indication
    ///< AccessType="RW/1C/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} timer_gpio_in_delta_reg_t;

#define TIMER_GPIO_IN_DELTA_DEFAULT (0x00000000U)
#define TIMER_GPIO_IN_DELTA_RD_MASK (0xffffffffU)
#define TIMER_GPIO_IN_DELTA_WR_MASK (0xffffffffU)


///< Indicates that the sampled value of the GPIO input has changed. This
///< along with the GPIO_IN_MASK register are used to generate the 4 GPIO
///< interrupts. Write 1 to each bit to clear the delta indication
#define TIMER_GPIO_IN_DELTA_GPIO_IN_DELTA_BF_OFF ( 0)
#define TIMER_GPIO_IN_DELTA_GPIO_IN_DELTA_BF_WID (32)
#define TIMER_GPIO_IN_DELTA_GPIO_IN_DELTA_BF_MSK (0xFFFFFFFF)
#define TIMER_GPIO_IN_DELTA_GPIO_IN_DELTA_BF_DEF (0x00000000)


/** @brief TIMER_GPIO_COM_REG_GPIO_IN_MASK register description at address offset 0x228
  *
  * Register default value:        0x00000000
  * Register full path in IP: timer_gpio_com/reg/gpio_in_mask
  * GPIO In MASK
  */

typedef union {
  struct {
    uint32_t GPIO_IN_MASK : 32;
    ///< Set to 1 to allow associated GPIO bit's contribution to GPIO interrupt.
    ///< The interrupts are grouped as GPIO[31:24], GPIO[23:16], GPIO[15:8],
    ///< GPIO[7:0]
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} timer_gpio_in_mask_reg_t;

#define TIMER_GPIO_IN_MASK_DEFAULT (0x00000000U)
#define TIMER_GPIO_IN_MASK_RD_MASK (0xffffffffU)
#define TIMER_GPIO_IN_MASK_WR_MASK (0xffffffffU)


///< Set to 1 to allow associated GPIO bit's contribution to GPIO interrupt.
///< The interrupts are grouped as GPIO[31:24], GPIO[23:16], GPIO[15:8],
///< GPIO[7:0]
#define TIMER_GPIO_IN_MASK_GPIO_IN_MASK_BF_OFF ( 0)
#define TIMER_GPIO_IN_MASK_GPIO_IN_MASK_BF_WID (32)
#define TIMER_GPIO_IN_MASK_GPIO_IN_MASK_BF_MSK (0xFFFFFFFF)
#define TIMER_GPIO_IN_MASK_GPIO_IN_MASK_BF_DEF (0x00000000)


/** @brief TIMER_GPIO_COM_REG_GPIO_IN_MASKED_DELTA register description at address offset 0x22c
  *
  * Register default value:        0x00000000
  * Register full path in IP: timer_gpio_com/reg/gpio_in_masked_delta
  * GPIO In MASKED Delta
  */

typedef union {
  struct {
    uint32_t GPIO_IN_MASKED_DELTA : 32;
    ///< Indicates whether a GPIO_IN_DELTA is contributing to the interrupt.
    ///< Read Only
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} timer_gpio_in_masked_delta_reg_t;

#define TIMER_GPIO_IN_MASKED_DELTA_DEFAULT (0x00000000U)
#define TIMER_GPIO_IN_MASKED_DELTA_RD_MASK (0xffffffffU)
#define TIMER_GPIO_IN_MASKED_DELTA_WR_MASK (0x00000000U)


///< Indicates whether a GPIO_IN_DELTA is contributing to the interrupt.
///< Read Only
#define TIMER_GPIO_IN_MASKED_DELTA_GPIO_IN_MASKED_DELTA_BF_OFF ( 0)
#define TIMER_GPIO_IN_MASKED_DELTA_GPIO_IN_MASKED_DELTA_BF_WID (32)
#define TIMER_GPIO_IN_MASKED_DELTA_GPIO_IN_MASKED_DELTA_BF_MSK (0xFFFFFFFF)
#define TIMER_GPIO_IN_MASKED_DELTA_GPIO_IN_MASKED_DELTA_BF_DEF (0x00000000)


/** @brief TIMER_GPIO_COM_REG_GPIO_DR_7_0 register description at address offset 0x230
  *
  * Register default value:        0x00005555
  * Register full path in IP: timer_gpio_com/reg/gpio_dr_7_0
  * GPIO output impedance values for gpio 0-7
  */

typedef union {
  struct {
    uint32_t GPIO_DR_0 : 2;
    ///< Output Impedance for GPIO n.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t GPIO_DR_1 : 2;
    ///< Output Impedance for GPIO n.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x1"
    uint32_t GPIO_DR_2 : 2;
    ///< Output Impedance for GPIO n.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x1"
    uint32_t GPIO_DR_3 : 2;
    ///< Output Impedance for GPIO n.
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t GPIO_DR_4 : 2;
    ///< Output Impedance for GPIO n.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1"
    uint32_t GPIO_DR_5 : 2;
    ///< Output Impedance for GPIO n.
    ///< AccessType="RW" BitOffset="10" ResetValue="0x1"
    uint32_t GPIO_DR_6 : 2;
    ///< Output Impedance for GPIO n.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x1"
    uint32_t GPIO_DR_7 : 2;
    ///< Output Impedance for GPIO n.
    ///< AccessType="RW" BitOffset="14" ResetValue="0x1"
    uint32_t MASK : 16;
    ///< Maskable
    ///< AccessType="WO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} timer_gpio_dr_7_0_reg_t;

#define TIMER_GPIO_DR_7_0_DEFAULT (0x00005555U)
#define TIMER_GPIO_DR_7_0_RD_MASK (0x0000ffffU)
#define TIMER_GPIO_DR_7_0_WR_MASK (0xffffffffU)


///< Output Impedance for GPIO n.
#define TIMER_GPIO_DR_7_0_GPIO_DR_0_BF_OFF ( 0)
#define TIMER_GPIO_DR_7_0_GPIO_DR_0_BF_WID ( 2)
#define TIMER_GPIO_DR_7_0_GPIO_DR_0_BF_MSK (0x00000003)
#define TIMER_GPIO_DR_7_0_GPIO_DR_0_BF_DEF (0x00000001)

///< Output Impedance for GPIO n.
#define TIMER_GPIO_DR_7_0_GPIO_DR_1_BF_OFF ( 2)
#define TIMER_GPIO_DR_7_0_GPIO_DR_1_BF_WID ( 2)
#define TIMER_GPIO_DR_7_0_GPIO_DR_1_BF_MSK (0x0000000C)
#define TIMER_GPIO_DR_7_0_GPIO_DR_1_BF_DEF (0x00000004)

///< Output Impedance for GPIO n.
#define TIMER_GPIO_DR_7_0_GPIO_DR_2_BF_OFF ( 4)
#define TIMER_GPIO_DR_7_0_GPIO_DR_2_BF_WID ( 2)
#define TIMER_GPIO_DR_7_0_GPIO_DR_2_BF_MSK (0x00000030)
#define TIMER_GPIO_DR_7_0_GPIO_DR_2_BF_DEF (0x00000010)

///< Output Impedance for GPIO n.
#define TIMER_GPIO_DR_7_0_GPIO_DR_3_BF_OFF ( 6)
#define TIMER_GPIO_DR_7_0_GPIO_DR_3_BF_WID ( 2)
#define TIMER_GPIO_DR_7_0_GPIO_DR_3_BF_MSK (0x000000C0)
#define TIMER_GPIO_DR_7_0_GPIO_DR_3_BF_DEF (0x00000040)

///< Output Impedance for GPIO n.
#define TIMER_GPIO_DR_7_0_GPIO_DR_4_BF_OFF ( 8)
#define TIMER_GPIO_DR_7_0_GPIO_DR_4_BF_WID ( 2)
#define TIMER_GPIO_DR_7_0_GPIO_DR_4_BF_MSK (0x00000300)
#define TIMER_GPIO_DR_7_0_GPIO_DR_4_BF_DEF (0x00000100)

///< Output Impedance for GPIO n.
#define TIMER_GPIO_DR_7_0_GPIO_DR_5_BF_OFF (10)
#define TIMER_GPIO_DR_7_0_GPIO_DR_5_BF_WID ( 2)
#define TIMER_GPIO_DR_7_0_GPIO_DR_5_BF_MSK (0x00000C00)
#define TIMER_GPIO_DR_7_0_GPIO_DR_5_BF_DEF (0x00000400)

///< Output Impedance for GPIO n.
#define TIMER_GPIO_DR_7_0_GPIO_DR_6_BF_OFF (12)
#define TIMER_GPIO_DR_7_0_GPIO_DR_6_BF_WID ( 2)
#define TIMER_GPIO_DR_7_0_GPIO_DR_6_BF_MSK (0x00003000)
#define TIMER_GPIO_DR_7_0_GPIO_DR_6_BF_DEF (0x00001000)

///< Output Impedance for GPIO n.
#define TIMER_GPIO_DR_7_0_GPIO_DR_7_BF_OFF (14)
#define TIMER_GPIO_DR_7_0_GPIO_DR_7_BF_WID ( 2)
#define TIMER_GPIO_DR_7_0_GPIO_DR_7_BF_MSK (0x0000C000)
#define TIMER_GPIO_DR_7_0_GPIO_DR_7_BF_DEF (0x00004000)
#define TIMER_GPIO_DR_7_0_MASK_BF_OFF (16)
#define TIMER_GPIO_DR_7_0_MASK_BF_WID (16)
#define TIMER_GPIO_DR_7_0_MASK_BF_MSK (0xFFFF0000)


/** @brief TIMER_GPIO_COM_REG_GPIO_DR_15_8 register description at address offset 0x234
  *
  * Register default value:        0x00005555
  * Register full path in IP: timer_gpio_com/reg/gpio_dr_15_8
  * GPIO output impedance values for gpio 8 - 15
  */

typedef union {
  struct {
    uint32_t GPIO_DR_8 : 2;
    ///< Output Impedance for GPIO n, see encoding values in gpio_dr_0_7
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t GPIO_DR_9 : 2;
    ///< Output Impedance for GPIO n, see encoding values in gpio_dr_0_7
    ///< AccessType="RW" BitOffset="2" ResetValue="0x1"
    uint32_t GPIO_DR_10 : 2;
    ///< Output Impedance for GPIO n, see encoding values in gpio_dr_0_7
    ///< AccessType="RW" BitOffset="4" ResetValue="0x1"
    uint32_t GPIO_DR_11 : 2;
    ///< Output Impedance for GPIO n, see encoding values in gpio_dr_0_7
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t GPIO_DR_12 : 2;
    ///< Output Impedance for GPIO n, see encoding values in gpio_dr_0_7
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1"
    uint32_t GPIO_DR_13 : 2;
    ///< Output Impedance for GPIO n, see encoding values in gpio_dr_0_7
    ///< AccessType="RW" BitOffset="10" ResetValue="0x1"
    uint32_t GPIO_DR_14 : 2;
    ///< Output Impedance for GPIO n, see encoding values in gpio_dr_0_7
    ///< AccessType="RW" BitOffset="12" ResetValue="0x1"
    uint32_t GPIO_DR_15 : 2;
    ///< Output Impedance for GPIO n, see encoding values in gpio_dr_0_7
    ///< AccessType="RW" BitOffset="14" ResetValue="0x1"
    uint32_t MASK : 16;
    ///< Maskable
    ///< AccessType="WO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} timer_gpio_dr_15_8_reg_t;

#define TIMER_GPIO_DR_15_8_DEFAULT (0x00005555U)
#define TIMER_GPIO_DR_15_8_RD_MASK (0x0000ffffU)
#define TIMER_GPIO_DR_15_8_WR_MASK (0xffffffffU)


///< Output Impedance for GPIO n, see encoding values in gpio_dr_0_7
#define TIMER_GPIO_DR_15_8_GPIO_DR_8_BF_OFF ( 0)
#define TIMER_GPIO_DR_15_8_GPIO_DR_8_BF_WID ( 2)
#define TIMER_GPIO_DR_15_8_GPIO_DR_8_BF_MSK (0x00000003)
#define TIMER_GPIO_DR_15_8_GPIO_DR_8_BF_DEF (0x00000001)

///< Output Impedance for GPIO n, see encoding values in gpio_dr_0_7
#define TIMER_GPIO_DR_15_8_GPIO_DR_9_BF_OFF ( 2)
#define TIMER_GPIO_DR_15_8_GPIO_DR_9_BF_WID ( 2)
#define TIMER_GPIO_DR_15_8_GPIO_DR_9_BF_MSK (0x0000000C)
#define TIMER_GPIO_DR_15_8_GPIO_DR_9_BF_DEF (0x00000004)

///< Output Impedance for GPIO n, see encoding values in gpio_dr_0_7
#define TIMER_GPIO_DR_15_8_GPIO_DR_10_BF_OFF ( 4)
#define TIMER_GPIO_DR_15_8_GPIO_DR_10_BF_WID ( 2)
#define TIMER_GPIO_DR_15_8_GPIO_DR_10_BF_MSK (0x00000030)
#define TIMER_GPIO_DR_15_8_GPIO_DR_10_BF_DEF (0x00000010)

///< Output Impedance for GPIO n, see encoding values in gpio_dr_0_7
#define TIMER_GPIO_DR_15_8_GPIO_DR_11_BF_OFF ( 6)
#define TIMER_GPIO_DR_15_8_GPIO_DR_11_BF_WID ( 2)
#define TIMER_GPIO_DR_15_8_GPIO_DR_11_BF_MSK (0x000000C0)
#define TIMER_GPIO_DR_15_8_GPIO_DR_11_BF_DEF (0x00000040)

///< Output Impedance for GPIO n, see encoding values in gpio_dr_0_7
#define TIMER_GPIO_DR_15_8_GPIO_DR_12_BF_OFF ( 8)
#define TIMER_GPIO_DR_15_8_GPIO_DR_12_BF_WID ( 2)
#define TIMER_GPIO_DR_15_8_GPIO_DR_12_BF_MSK (0x00000300)
#define TIMER_GPIO_DR_15_8_GPIO_DR_12_BF_DEF (0x00000100)

///< Output Impedance for GPIO n, see encoding values in gpio_dr_0_7
#define TIMER_GPIO_DR_15_8_GPIO_DR_13_BF_OFF (10)
#define TIMER_GPIO_DR_15_8_GPIO_DR_13_BF_WID ( 2)
#define TIMER_GPIO_DR_15_8_GPIO_DR_13_BF_MSK (0x00000C00)
#define TIMER_GPIO_DR_15_8_GPIO_DR_13_BF_DEF (0x00000400)

///< Output Impedance for GPIO n, see encoding values in gpio_dr_0_7
#define TIMER_GPIO_DR_15_8_GPIO_DR_14_BF_OFF (12)
#define TIMER_GPIO_DR_15_8_GPIO_DR_14_BF_WID ( 2)
#define TIMER_GPIO_DR_15_8_GPIO_DR_14_BF_MSK (0x00003000)
#define TIMER_GPIO_DR_15_8_GPIO_DR_14_BF_DEF (0x00001000)

///< Output Impedance for GPIO n, see encoding values in gpio_dr_0_7
#define TIMER_GPIO_DR_15_8_GPIO_DR_15_BF_OFF (14)
#define TIMER_GPIO_DR_15_8_GPIO_DR_15_BF_WID ( 2)
#define TIMER_GPIO_DR_15_8_GPIO_DR_15_BF_MSK (0x0000C000)
#define TIMER_GPIO_DR_15_8_GPIO_DR_15_BF_DEF (0x00004000)
#define TIMER_GPIO_DR_15_8_MASK_BF_OFF (16)
#define TIMER_GPIO_DR_15_8_MASK_BF_WID (16)
#define TIMER_GPIO_DR_15_8_MASK_BF_MSK (0xFFFF0000)


/** @brief TIMER_GPIO_COM_REG_GPIO_DR_23_16 register description at address offset 0x238
  *
  * Register default value:        0x00005555
  * Register full path in IP: timer_gpio_com/reg/gpio_dr_23_16
  * GPIO output impedance values for gpio 16 - 23
  */

typedef union {
  struct {
    uint32_t GPIO_DR_16 : 2;
    ///< Output Impedance for GPIO n, see encoding values in gpio_dr_0_7
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t GPIO_DR_17 : 2;
    ///< Output Impedance for GPIO n, see encoding values in gpio_dr_0_7
    ///< AccessType="RW" BitOffset="2" ResetValue="0x1"
    uint32_t GPIO_DR_18 : 2;
    ///< Output Impedance for GPIO n, see encoding values in gpio_dr_0_7
    ///< AccessType="RW" BitOffset="4" ResetValue="0x1"
    uint32_t GPIO_DR_19 : 2;
    ///< Output Impedance for GPIO n, see encoding values in gpio_dr_0_7
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t GPIO_DR_20 : 2;
    ///< Output Impedance for GPIO n, see encoding values in gpio_dr_0_7
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1"
    uint32_t GPIO_DR_21 : 2;
    ///< Output Impedance for GPIO n, see encoding values in gpio_dr_0_7
    ///< AccessType="RW" BitOffset="10" ResetValue="0x1"
    uint32_t GPIO_DR_22 : 2;
    ///< Output Impedance for GPIO n, see encoding values in gpio_dr_0_7
    ///< AccessType="RW" BitOffset="12" ResetValue="0x1"
    uint32_t GPIO_DR_23 : 2;
    ///< Output Impedance for GPIO n, see encoding values in gpio_dr_0_7
    ///< AccessType="RW" BitOffset="14" ResetValue="0x1"
    uint32_t MASK : 16;
    ///< Maskable
    ///< AccessType="WO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} timer_gpio_dr_23_16_reg_t;

#define TIMER_GPIO_DR_23_16_DEFAULT (0x00005555U)
#define TIMER_GPIO_DR_23_16_RD_MASK (0x0000ffffU)
#define TIMER_GPIO_DR_23_16_WR_MASK (0xffffffffU)


///< Output Impedance for GPIO n, see encoding values in gpio_dr_0_7
#define TIMER_GPIO_DR_23_16_GPIO_DR_16_BF_OFF ( 0)
#define TIMER_GPIO_DR_23_16_GPIO_DR_16_BF_WID ( 2)
#define TIMER_GPIO_DR_23_16_GPIO_DR_16_BF_MSK (0x00000003)
#define TIMER_GPIO_DR_23_16_GPIO_DR_16_BF_DEF (0x00000001)

///< Output Impedance for GPIO n, see encoding values in gpio_dr_0_7
#define TIMER_GPIO_DR_23_16_GPIO_DR_17_BF_OFF ( 2)
#define TIMER_GPIO_DR_23_16_GPIO_DR_17_BF_WID ( 2)
#define TIMER_GPIO_DR_23_16_GPIO_DR_17_BF_MSK (0x0000000C)
#define TIMER_GPIO_DR_23_16_GPIO_DR_17_BF_DEF (0x00000004)

///< Output Impedance for GPIO n, see encoding values in gpio_dr_0_7
#define TIMER_GPIO_DR_23_16_GPIO_DR_18_BF_OFF ( 4)
#define TIMER_GPIO_DR_23_16_GPIO_DR_18_BF_WID ( 2)
#define TIMER_GPIO_DR_23_16_GPIO_DR_18_BF_MSK (0x00000030)
#define TIMER_GPIO_DR_23_16_GPIO_DR_18_BF_DEF (0x00000010)

///< Output Impedance for GPIO n, see encoding values in gpio_dr_0_7
#define TIMER_GPIO_DR_23_16_GPIO_DR_19_BF_OFF ( 6)
#define TIMER_GPIO_DR_23_16_GPIO_DR_19_BF_WID ( 2)
#define TIMER_GPIO_DR_23_16_GPIO_DR_19_BF_MSK (0x000000C0)
#define TIMER_GPIO_DR_23_16_GPIO_DR_19_BF_DEF (0x00000040)

///< Output Impedance for GPIO n, see encoding values in gpio_dr_0_7
#define TIMER_GPIO_DR_23_16_GPIO_DR_20_BF_OFF ( 8)
#define TIMER_GPIO_DR_23_16_GPIO_DR_20_BF_WID ( 2)
#define TIMER_GPIO_DR_23_16_GPIO_DR_20_BF_MSK (0x00000300)
#define TIMER_GPIO_DR_23_16_GPIO_DR_20_BF_DEF (0x00000100)

///< Output Impedance for GPIO n, see encoding values in gpio_dr_0_7
#define TIMER_GPIO_DR_23_16_GPIO_DR_21_BF_OFF (10)
#define TIMER_GPIO_DR_23_16_GPIO_DR_21_BF_WID ( 2)
#define TIMER_GPIO_DR_23_16_GPIO_DR_21_BF_MSK (0x00000C00)
#define TIMER_GPIO_DR_23_16_GPIO_DR_21_BF_DEF (0x00000400)

///< Output Impedance for GPIO n, see encoding values in gpio_dr_0_7
#define TIMER_GPIO_DR_23_16_GPIO_DR_22_BF_OFF (12)
#define TIMER_GPIO_DR_23_16_GPIO_DR_22_BF_WID ( 2)
#define TIMER_GPIO_DR_23_16_GPIO_DR_22_BF_MSK (0x00003000)
#define TIMER_GPIO_DR_23_16_GPIO_DR_22_BF_DEF (0x00001000)

///< Output Impedance for GPIO n, see encoding values in gpio_dr_0_7
#define TIMER_GPIO_DR_23_16_GPIO_DR_23_BF_OFF (14)
#define TIMER_GPIO_DR_23_16_GPIO_DR_23_BF_WID ( 2)
#define TIMER_GPIO_DR_23_16_GPIO_DR_23_BF_MSK (0x0000C000)
#define TIMER_GPIO_DR_23_16_GPIO_DR_23_BF_DEF (0x00004000)
#define TIMER_GPIO_DR_23_16_MASK_BF_OFF (16)
#define TIMER_GPIO_DR_23_16_MASK_BF_WID (16)
#define TIMER_GPIO_DR_23_16_MASK_BF_MSK (0xFFFF0000)


/** @brief TIMER_GPIO_COM_REG_GPIO_DR_31_24 register description at address offset 0x23c
  *
  * Register default value:        0x00005555
  * Register full path in IP: timer_gpio_com/reg/gpio_dr_31_24
  * GPIO output impedance values for gpio 24 - 31
  */

typedef union {
  struct {
    uint32_t GPIO_DR_24 : 2;
    ///< Output Impedance for GPIO n, see encoding values in gpio_dr_0_7
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t GPIO_DR_25 : 2;
    ///< Output Impedance for GPIO n, see encoding values in gpio_dr_0_7
    ///< AccessType="RW" BitOffset="2" ResetValue="0x1"
    uint32_t GPIO_DR_26 : 2;
    ///< Output Impedance for GPIO n, see encoding values in gpio_dr_0_7
    ///< AccessType="RW" BitOffset="4" ResetValue="0x1"
    uint32_t GPIO_DR_27 : 2;
    ///< Output Impedance for GPIO n, see encoding values in gpio_dr_0_7
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t GPIO_DR_28 : 2;
    ///< Output Impedance for GPIO n, see encoding values in gpio_dr_0_7
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1"
    uint32_t GPIO_DR_29 : 2;
    ///< Output Impedance for GPIO n, see encoding values in gpio_dr_0_7
    ///< AccessType="RW" BitOffset="10" ResetValue="0x1"
    uint32_t GPIO_DR_30 : 2;
    ///< Output Impedance for GPIO n, see encoding values in gpio_dr_0_7
    ///< AccessType="RW" BitOffset="12" ResetValue="0x1"
    uint32_t GPIO_DR_31 : 2;
    ///< Output Impedance for GPIO n, see encoding values in gpio_dr_0_7
    ///< AccessType="RW" BitOffset="14" ResetValue="0x1"
    uint32_t MASK : 16;
    ///< Maskable
    ///< AccessType="WO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} timer_gpio_dr_31_24_reg_t;

#define TIMER_GPIO_DR_31_24_DEFAULT (0x00005555U)
#define TIMER_GPIO_DR_31_24_RD_MASK (0x0000ffffU)
#define TIMER_GPIO_DR_31_24_WR_MASK (0xffffffffU)


///< Output Impedance for GPIO n, see encoding values in gpio_dr_0_7
#define TIMER_GPIO_DR_31_24_GPIO_DR_24_BF_OFF ( 0)
#define TIMER_GPIO_DR_31_24_GPIO_DR_24_BF_WID ( 2)
#define TIMER_GPIO_DR_31_24_GPIO_DR_24_BF_MSK (0x00000003)
#define TIMER_GPIO_DR_31_24_GPIO_DR_24_BF_DEF (0x00000001)

///< Output Impedance for GPIO n, see encoding values in gpio_dr_0_7
#define TIMER_GPIO_DR_31_24_GPIO_DR_25_BF_OFF ( 2)
#define TIMER_GPIO_DR_31_24_GPIO_DR_25_BF_WID ( 2)
#define TIMER_GPIO_DR_31_24_GPIO_DR_25_BF_MSK (0x0000000C)
#define TIMER_GPIO_DR_31_24_GPIO_DR_25_BF_DEF (0x00000004)

///< Output Impedance for GPIO n, see encoding values in gpio_dr_0_7
#define TIMER_GPIO_DR_31_24_GPIO_DR_26_BF_OFF ( 4)
#define TIMER_GPIO_DR_31_24_GPIO_DR_26_BF_WID ( 2)
#define TIMER_GPIO_DR_31_24_GPIO_DR_26_BF_MSK (0x00000030)
#define TIMER_GPIO_DR_31_24_GPIO_DR_26_BF_DEF (0x00000010)

///< Output Impedance for GPIO n, see encoding values in gpio_dr_0_7
#define TIMER_GPIO_DR_31_24_GPIO_DR_27_BF_OFF ( 6)
#define TIMER_GPIO_DR_31_24_GPIO_DR_27_BF_WID ( 2)
#define TIMER_GPIO_DR_31_24_GPIO_DR_27_BF_MSK (0x000000C0)
#define TIMER_GPIO_DR_31_24_GPIO_DR_27_BF_DEF (0x00000040)

///< Output Impedance for GPIO n, see encoding values in gpio_dr_0_7
#define TIMER_GPIO_DR_31_24_GPIO_DR_28_BF_OFF ( 8)
#define TIMER_GPIO_DR_31_24_GPIO_DR_28_BF_WID ( 2)
#define TIMER_GPIO_DR_31_24_GPIO_DR_28_BF_MSK (0x00000300)
#define TIMER_GPIO_DR_31_24_GPIO_DR_28_BF_DEF (0x00000100)

///< Output Impedance for GPIO n, see encoding values in gpio_dr_0_7
#define TIMER_GPIO_DR_31_24_GPIO_DR_29_BF_OFF (10)
#define TIMER_GPIO_DR_31_24_GPIO_DR_29_BF_WID ( 2)
#define TIMER_GPIO_DR_31_24_GPIO_DR_29_BF_MSK (0x00000C00)
#define TIMER_GPIO_DR_31_24_GPIO_DR_29_BF_DEF (0x00000400)

///< Output Impedance for GPIO n, see encoding values in gpio_dr_0_7
#define TIMER_GPIO_DR_31_24_GPIO_DR_30_BF_OFF (12)
#define TIMER_GPIO_DR_31_24_GPIO_DR_30_BF_WID ( 2)
#define TIMER_GPIO_DR_31_24_GPIO_DR_30_BF_MSK (0x00003000)
#define TIMER_GPIO_DR_31_24_GPIO_DR_30_BF_DEF (0x00001000)

///< Output Impedance for GPIO n, see encoding values in gpio_dr_0_7
#define TIMER_GPIO_DR_31_24_GPIO_DR_31_BF_OFF (14)
#define TIMER_GPIO_DR_31_24_GPIO_DR_31_BF_WID ( 2)
#define TIMER_GPIO_DR_31_24_GPIO_DR_31_BF_MSK (0x0000C000)
#define TIMER_GPIO_DR_31_24_GPIO_DR_31_BF_DEF (0x00004000)
#define TIMER_GPIO_DR_31_24_MASK_BF_OFF (16)
#define TIMER_GPIO_DR_31_24_MASK_BF_WID (16)
#define TIMER_GPIO_DR_31_24_MASK_BF_MSK (0xFFFF0000)


/** @brief TIMER_GPIO_COM_REG_GPIO_LPR_15_0 register description at address offset 0x240
  *
  * Register default value:        0x00000000
  * Register full path in IP: timer_gpio_com/reg/gpio_lpr_15_0
  * GPIO Low Power
  */

typedef union {
  struct {
    uint32_t GPIO_LPR : 16;
    ///< When set to 1, the receiver of each GPIO is powered down. For GPIO
    ///< 0 to 15
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t MASK : 16;
    ///< Maskable
    ///< AccessType="WO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} timer_gpio_lpr_15_0_reg_t;

#define TIMER_GPIO_LPR_15_0_DEFAULT (0x00000000U)
#define TIMER_GPIO_LPR_15_0_RD_MASK (0x0000ffffU)
#define TIMER_GPIO_LPR_15_0_WR_MASK (0xffffffffU)


///< When set to 1, the receiver of each GPIO is powered down. For GPIO
///< 0 to 15
#define TIMER_GPIO_LPR_15_0_GPIO_LPR_BF_OFF ( 0)
#define TIMER_GPIO_LPR_15_0_GPIO_LPR_BF_WID (16)
#define TIMER_GPIO_LPR_15_0_GPIO_LPR_BF_MSK (0x0000FFFF)
#define TIMER_GPIO_LPR_15_0_GPIO_LPR_BF_DEF (0x00000000)
#define TIMER_GPIO_LPR_15_0_MASK_BF_OFF (16)
#define TIMER_GPIO_LPR_15_0_MASK_BF_WID (16)
#define TIMER_GPIO_LPR_15_0_MASK_BF_MSK (0xFFFF0000)


/** @brief TIMER_GPIO_COM_REG_GPIO_LPR_31_16 register description at address offset 0x244
  *
  * Register default value:        0x00000000
  * Register full path in IP: timer_gpio_com/reg/gpio_lpr_31_16
  * GPIO Low Power
  */

typedef union {
  struct {
    uint32_t GPIO_LPR : 16;
    ///< When set to 1, the receiver of each GPIO is powered down. For GPIO
    ///< 0 to 15
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t MASK : 16;
    ///< Maskable
    ///< AccessType="WO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} timer_gpio_lpr_31_16_reg_t;

#define TIMER_GPIO_LPR_31_16_DEFAULT (0x00000000U)
#define TIMER_GPIO_LPR_31_16_RD_MASK (0x0000ffffU)
#define TIMER_GPIO_LPR_31_16_WR_MASK (0xffffffffU)


///< When set to 1, the receiver of each GPIO is powered down. For GPIO
///< 0 to 15
#define TIMER_GPIO_LPR_31_16_GPIO_LPR_BF_OFF ( 0)
#define TIMER_GPIO_LPR_31_16_GPIO_LPR_BF_WID (16)
#define TIMER_GPIO_LPR_31_16_GPIO_LPR_BF_MSK (0x0000FFFF)
#define TIMER_GPIO_LPR_31_16_GPIO_LPR_BF_DEF (0x00000000)
#define TIMER_GPIO_LPR_31_16_MASK_BF_OFF (16)
#define TIMER_GPIO_LPR_31_16_MASK_BF_WID (16)
#define TIMER_GPIO_LPR_31_16_MASK_BF_MSK (0xFFFF0000)


/** @brief TIMER_GPIO_COM_REG_GPIO_PDE_15_0 register description at address offset 0x248
  *
  * Register default value:        0x0000FFFF
  * Register full path in IP: timer_gpio_com/reg/gpio_pde_15_0
  * GPIO Buffer Control
  */

typedef union {
  struct {
    uint32_t GPIO_WKPDE : 16;
    ///< Enables weak pull-down on the GPIO pin when set to 1. This should
    ///< not be enabled at the same time as GPIO_WKPUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0xFFFF"
    uint32_t MASK : 16;
    ///< Maskable
    ///< AccessType="WO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} timer_gpio_pde_15_0_reg_t;

#define TIMER_GPIO_PDE_15_0_DEFAULT (0x0000ffffU)
#define TIMER_GPIO_PDE_15_0_RD_MASK (0x0000ffffU)
#define TIMER_GPIO_PDE_15_0_WR_MASK (0xffffffffU)


///< Enables weak pull-down on the GPIO pin when set to 1. This should
///< not be enabled at the same time as GPIO_WKPUE.
#define TIMER_GPIO_PDE_15_0_GPIO_WKPDE_BF_OFF ( 0)
#define TIMER_GPIO_PDE_15_0_GPIO_WKPDE_BF_WID (16)
#define TIMER_GPIO_PDE_15_0_GPIO_WKPDE_BF_MSK (0x0000FFFF)
#define TIMER_GPIO_PDE_15_0_GPIO_WKPDE_BF_DEF (0x0000FFFF)
#define TIMER_GPIO_PDE_15_0_MASK_BF_OFF (16)
#define TIMER_GPIO_PDE_15_0_MASK_BF_WID (16)
#define TIMER_GPIO_PDE_15_0_MASK_BF_MSK (0xFFFF0000)


/** @brief TIMER_GPIO_COM_REG_GPIO_PDE_31_16 register description at address offset 0x24c
  *
  * Register default value:        0x0000FFFF
  * Register full path in IP: timer_gpio_com/reg/gpio_pde_31_16
  * GPIO Buffer Control
  */

typedef union {
  struct {
    uint32_t GPIO_WKPDE : 16;
    ///< Enables weak pull-down on the GPIO pin when set to 1. This should
    ///< not be enabled at the same time as GPIO_WKPUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0xFFFF"
    uint32_t MASK : 16;
    ///< Maskable
    ///< AccessType="WO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} timer_gpio_pde_31_16_reg_t;

#define TIMER_GPIO_PDE_31_16_DEFAULT (0x0000ffffU)
#define TIMER_GPIO_PDE_31_16_RD_MASK (0x0000ffffU)
#define TIMER_GPIO_PDE_31_16_WR_MASK (0xffffffffU)


///< Enables weak pull-down on the GPIO pin when set to 1. This should
///< not be enabled at the same time as GPIO_WKPUE.
#define TIMER_GPIO_PDE_31_16_GPIO_WKPDE_BF_OFF ( 0)
#define TIMER_GPIO_PDE_31_16_GPIO_WKPDE_BF_WID (16)
#define TIMER_GPIO_PDE_31_16_GPIO_WKPDE_BF_MSK (0x0000FFFF)
#define TIMER_GPIO_PDE_31_16_GPIO_WKPDE_BF_DEF (0x0000FFFF)
#define TIMER_GPIO_PDE_31_16_MASK_BF_OFF (16)
#define TIMER_GPIO_PDE_31_16_MASK_BF_WID (16)
#define TIMER_GPIO_PDE_31_16_MASK_BF_MSK (0xFFFF0000)


/** @brief TIMER_GPIO_COM_REG_GPIO_PUE_15_0 register description at address offset 0x250
  *
  * Register default value:        0x00000000
  * Register full path in IP: timer_gpio_com/reg/gpio_pue_15_0
  * GPIO Buffer Control
  */

typedef union {
  struct {
    uint32_t GPIO_WKPUE : 16;
    ///< Enables weak pull-up on the GPIO pin when set to 1. This should not
    ///< be enabled at the same time as GPIO_WKPDE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t MASK : 16;
    ///< Maskable
    ///< AccessType="WO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} timer_gpio_pue_15_0_reg_t;

#define TIMER_GPIO_PUE_15_0_DEFAULT (0x00000000U)
#define TIMER_GPIO_PUE_15_0_RD_MASK (0x0000ffffU)
#define TIMER_GPIO_PUE_15_0_WR_MASK (0xffffffffU)


///< Enables weak pull-up on the GPIO pin when set to 1. This should not
///< be enabled at the same time as GPIO_WKPDE.
#define TIMER_GPIO_PUE_15_0_GPIO_WKPUE_BF_OFF ( 0)
#define TIMER_GPIO_PUE_15_0_GPIO_WKPUE_BF_WID (16)
#define TIMER_GPIO_PUE_15_0_GPIO_WKPUE_BF_MSK (0x0000FFFF)
#define TIMER_GPIO_PUE_15_0_GPIO_WKPUE_BF_DEF (0x00000000)
#define TIMER_GPIO_PUE_15_0_MASK_BF_OFF (16)
#define TIMER_GPIO_PUE_15_0_MASK_BF_WID (16)
#define TIMER_GPIO_PUE_15_0_MASK_BF_MSK (0xFFFF0000)


/** @brief TIMER_GPIO_COM_REG_GPIO_PUE_31_16 register description at address offset 0x254
  *
  * Register default value:        0x00000000
  * Register full path in IP: timer_gpio_com/reg/gpio_pue_31_16
  * GPIO Buffer Control
  */

typedef union {
  struct {
    uint32_t GPIO_WKPUE : 16;
    ///< Enables weak pull-up on the GPIO pin when set to 1. This should not
    ///< be enabled at the same time as GPIO_WKPDE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t MASK : 16;
    ///< Maskable
    ///< AccessType="WO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} timer_gpio_pue_31_16_reg_t;

#define TIMER_GPIO_PUE_31_16_DEFAULT (0x00000000U)
#define TIMER_GPIO_PUE_31_16_RD_MASK (0x0000ffffU)
#define TIMER_GPIO_PUE_31_16_WR_MASK (0xffffffffU)


///< Enables weak pull-up on the GPIO pin when set to 1. This should not
///< be enabled at the same time as GPIO_WKPDE.
#define TIMER_GPIO_PUE_31_16_GPIO_WKPUE_BF_OFF ( 0)
#define TIMER_GPIO_PUE_31_16_GPIO_WKPUE_BF_WID (16)
#define TIMER_GPIO_PUE_31_16_GPIO_WKPUE_BF_MSK (0x0000FFFF)
#define TIMER_GPIO_PUE_31_16_GPIO_WKPUE_BF_DEF (0x00000000)
#define TIMER_GPIO_PUE_31_16_MASK_BF_OFF (16)
#define TIMER_GPIO_PUE_31_16_MASK_BF_WID (16)
#define TIMER_GPIO_PUE_31_16_MASK_BF_MSK (0xFFFF0000)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define TIMER_GPIO_CFG_REG(_BASE) ((timer_gpio_cfg_reg_t*) TIMER_GPIO_CFG_ADR(_BASE))
#define TIMER_GPIO_DEB_CNT_SEL_REG(_BASE) ((timer_gpio_deb_cnt_sel_reg_t*) TIMER_GPIO_DEB_CNT_SEL_ADR(_BASE))
#define TIMER_GPIO_POLARITY_REG(_BASE) ((timer_gpio_polarity_reg_t*) TIMER_GPIO_POLARITY_ADR(_BASE))
#define TIMER_GPIO_INOUT_REG(_BASE) ((timer_gpio_inout_reg_t*) TIMER_GPIO_INOUT_ADR(_BASE))
#define TIMER_GPIO_CURR_OUT_REG(_BASE) ((timer_gpio_curr_out_reg_t*) TIMER_GPIO_CURR_OUT_ADR(_BASE))
#define TIMER_GPIO_CURR_IN_REG(_BASE) ((timer_gpio_curr_in_reg_t*) TIMER_GPIO_CURR_IN_ADR(_BASE))
#define TIMER_GPIO_SET_VAL_15_0_REG(_BASE) ((timer_gpio_set_val_15_0_reg_t*) TIMER_GPIO_SET_VAL_15_0_ADR(_BASE))
#define TIMER_GPIO_SET_VAL_31_16_REG(_BASE) ((timer_gpio_set_val_31_16_reg_t*) TIMER_GPIO_SET_VAL_31_16_ADR(_BASE))
#define TIMER_GPIO_IN_DELTA_REG(_BASE) ((timer_gpio_in_delta_reg_t*) TIMER_GPIO_IN_DELTA_ADR(_BASE))
#define TIMER_GPIO_IN_MASK_REG(_BASE) ((timer_gpio_in_mask_reg_t*) TIMER_GPIO_IN_MASK_ADR(_BASE))
#define TIMER_GPIO_IN_MASKED_DELTA_REG(_BASE) ((timer_gpio_in_masked_delta_reg_t*) TIMER_GPIO_IN_MASKED_DELTA_ADR(_BASE))
#define TIMER_GPIO_DR_7_0_REG(_BASE) ((timer_gpio_dr_7_0_reg_t*) TIMER_GPIO_DR_7_0_ADR(_BASE))
#define TIMER_GPIO_DR_15_8_REG(_BASE) ((timer_gpio_dr_15_8_reg_t*) TIMER_GPIO_DR_15_8_ADR(_BASE))
#define TIMER_GPIO_DR_23_16_REG(_BASE) ((timer_gpio_dr_23_16_reg_t*) TIMER_GPIO_DR_23_16_ADR(_BASE))
#define TIMER_GPIO_DR_31_24_REG(_BASE) ((timer_gpio_dr_31_24_reg_t*) TIMER_GPIO_DR_31_24_ADR(_BASE))
#define TIMER_GPIO_LPR_15_0_REG(_BASE) ((timer_gpio_lpr_15_0_reg_t*) TIMER_GPIO_LPR_15_0_ADR(_BASE))
#define TIMER_GPIO_LPR_31_16_REG(_BASE) ((timer_gpio_lpr_31_16_reg_t*) TIMER_GPIO_LPR_31_16_ADR(_BASE))
#define TIMER_GPIO_PDE_15_0_REG(_BASE) ((timer_gpio_pde_15_0_reg_t*) TIMER_GPIO_PDE_15_0_ADR(_BASE))
#define TIMER_GPIO_PDE_31_16_REG(_BASE) ((timer_gpio_pde_31_16_reg_t*) TIMER_GPIO_PDE_31_16_ADR(_BASE))
#define TIMER_GPIO_PUE_15_0_REG(_BASE) ((timer_gpio_pue_15_0_reg_t*) TIMER_GPIO_PUE_15_0_ADR(_BASE))
#define TIMER_GPIO_PUE_31_16_REG(_BASE) ((timer_gpio_pue_31_16_reg_t*) TIMER_GPIO_PUE_31_16_ADR(_BASE))

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    const uint8_t        reservedArea0 [512]; /*< Address offset = 0x0 */
    timer_gpio_cfg_reg_t GPIO_CFG;        /*< Address offset = 0x200 */
    timer_gpio_deb_cnt_sel_reg_t GPIO_DEB_CNT_SEL; /*< Address offset = 0x204 */
    timer_gpio_polarity_reg_t GPIO_POLARITY;   /*< Address offset = 0x208 */
    const uint8_t        reservedArea1 [4];   /*< Address offset = 0x20c */
    timer_gpio_inout_reg_t GPIO_INOUT;      /*< Address offset = 0x210 */
    timer_gpio_curr_out_reg_t GPIO_CURR_OUT;   /*< Address offset = 0x214 */
    timer_gpio_curr_in_reg_t GPIO_CURR_IN;    /*< Address offset = 0x218 */
    timer_gpio_set_val_15_0_reg_t GPIO_SET_VAL_15_0; /*< Address offset = 0x21c */
    timer_gpio_set_val_31_16_reg_t GPIO_SET_VAL_31_16; /*< Address offset = 0x220 */
    timer_gpio_in_delta_reg_t GPIO_IN_DELTA;   /*< Address offset = 0x224 */
    timer_gpio_in_mask_reg_t GPIO_IN_MASK;    /*< Address offset = 0x228 */
    timer_gpio_in_masked_delta_reg_t GPIO_IN_MASKED_DELTA; /*< Address offset = 0x22c */
    timer_gpio_dr_7_0_reg_t GPIO_DR_7_0;     /*< Address offset = 0x230 */
    timer_gpio_dr_15_8_reg_t GPIO_DR_15_8;    /*< Address offset = 0x234 */
    timer_gpio_dr_23_16_reg_t GPIO_DR_23_16;   /*< Address offset = 0x238 */
    timer_gpio_dr_31_24_reg_t GPIO_DR_31_24;   /*< Address offset = 0x23c */
    timer_gpio_lpr_15_0_reg_t GPIO_LPR_15_0;   /*< Address offset = 0x240 */
    timer_gpio_lpr_31_16_reg_t GPIO_LPR_31_16;  /*< Address offset = 0x244 */
    timer_gpio_pde_15_0_reg_t GPIO_PDE_15_0;   /*< Address offset = 0x248 */
    timer_gpio_pde_31_16_reg_t GPIO_PDE_31_16;  /*< Address offset = 0x24c */
    timer_gpio_pue_15_0_reg_t GPIO_PUE_15_0;   /*< Address offset = 0x250 */
    timer_gpio_pue_31_16_reg_t GPIO_PUE_31_16;  /*< Address offset = 0x254 */
} timer_gpio_t;     // size: 0x0054

// AddressSpace struct pointer
//
#define RCS_TIMER_GRP0_GPIO  ((timer_gpio_t*) RCS_TIMER_GRP0_GPIO_BASE)
#define RCS_TIMER_GRP1_GPIO  ((timer_gpio_t*) RCS_TIMER_GRP1_GPIO_BASE)

// ******************************************* /Address Space

#endif      // _TIMER_GPIO_H_

