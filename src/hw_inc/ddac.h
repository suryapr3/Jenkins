#ifndef _DDAC_H_
#define _DDAC_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#if (CPU_ANA) // from ADC view
#include "adc_addr_offset.h"
#define ANT0_DDAC0_BASE        ( 0x04803000 - WRP_ADC_DIGRF_BASE - WRP_ADC_ANT0_OFFSET + WRP_ADC_DIGRF_OFFSET )
#define ANT0_DDAC1_BASE        ( 0x04883000 - WRP_ADC_DIGRF_BASE - WRP_ADC_ANT0_OFFSET + WRP_ADC_DIGRF_OFFSET )
#define ANT0_DDAC2_BASE        ( 0x04903000 - WRP_ADC_DIGRF_BASE - WRP_ADC_ANT0_OFFSET + WRP_ADC_DIGRF_OFFSET )
#define ANT0_DDAC3_BASE        ( 0x04983000 - WRP_ADC_DIGRF_BASE - WRP_ADC_ANT0_OFFSET + WRP_ADC_DIGRF_OFFSET )
#define ANT1_DDAC0_BASE        ( 0x04a03000 - WRP_ADC_DIGRF_BASE - WRP_ADC_ANT1_OFFSET + WRP_ADC_DIGRF_OFFSET )
#define ANT1_DDAC1_BASE        ( 0x04a83000 - WRP_ADC_DIGRF_BASE - WRP_ADC_ANT1_OFFSET + WRP_ADC_DIGRF_OFFSET )
#define ANT1_DDAC2_BASE        ( 0x04b03000 - WRP_ADC_DIGRF_BASE - WRP_ADC_ANT1_OFFSET + WRP_ADC_DIGRF_OFFSET )
#define ANT1_DDAC3_BASE        ( 0x04b83000 - WRP_ADC_DIGRF_BASE - WRP_ADC_ANT1_OFFSET + WRP_ADC_DIGRF_OFFSET )
#define ANT2_DDAC0_BASE        ( 0x04c03000 - WRP_ADC_DIGRF_BASE - WRP_ADC_ANT2_OFFSET + WRP_ADC_DIGRF_OFFSET )
#define ANT2_DDAC1_BASE        ( 0x04c83000 - WRP_ADC_DIGRF_BASE - WRP_ADC_ANT2_OFFSET + WRP_ADC_DIGRF_OFFSET )
#define ANT2_DDAC2_BASE        ( 0x04d03000 - WRP_ADC_DIGRF_BASE - WRP_ADC_ANT2_OFFSET + WRP_ADC_DIGRF_OFFSET )
#define ANT2_DDAC3_BASE        ( 0x04d83000 - WRP_ADC_DIGRF_BASE - WRP_ADC_ANT2_OFFSET + WRP_ADC_DIGRF_OFFSET )
#define ANT3_DDAC0_BASE        ( 0x04e03000 - WRP_ADC_DIGRF_BASE - WRP_ADC_ANT3_OFFSET + WRP_ADC_DIGRF_OFFSET )
#define ANT3_DDAC1_BASE        ( 0x04e83000 - WRP_ADC_DIGRF_BASE - WRP_ADC_ANT3_OFFSET + WRP_ADC_DIGRF_OFFSET )
#define ANT3_DDAC2_BASE        ( 0x04f03000 - WRP_ADC_DIGRF_BASE - WRP_ADC_ANT3_OFFSET + WRP_ADC_DIGRF_OFFSET )
#define ANT3_DDAC3_BASE        ( 0x04f83000 - WRP_ADC_DIGRF_BASE - WRP_ADC_ANT3_OFFSET + WRP_ADC_DIGRF_OFFSET )
#define FB_ANT0_DDAC_TOP_BASE  ( 0x05022000 - WRP_ADC_DIGRF_BASE - WRP_ADC_ANT0_OFFSET + WRP_ADC_DIGRF_OFFSET )
#define FB_ANT0_DDAC_BOT_BASE  ( 0x05062000 - WRP_ADC_DIGRF_BASE - WRP_ADC_ANT0_OFFSET + WRP_ADC_DIGRF_OFFSET )
#define FB_ANT1_DDAC_TOP_BASE  ( 0x050a2000 - WRP_ADC_DIGRF_BASE - WRP_ADC_ANT1_OFFSET + WRP_ADC_DIGRF_OFFSET )
#define FB_ANT1_DDAC_BOT_BASE  ( 0x050e2000 - WRP_ADC_DIGRF_BASE - WRP_ADC_ANT1_OFFSET + WRP_ADC_DIGRF_OFFSET )
#else // from digRF view
#define ANT0_DDAC0_BASE        ( 0x04803000 )
#define ANT0_DDAC1_BASE        ( 0x04883000 )
#define ANT0_DDAC2_BASE        ( 0x04903000 )
#define ANT0_DDAC3_BASE        ( 0x04983000 )
#define ANT1_DDAC0_BASE        ( 0x04a03000 )
#define ANT1_DDAC1_BASE        ( 0x04a83000 )
#define ANT1_DDAC2_BASE        ( 0x04b03000 )
#define ANT1_DDAC3_BASE        ( 0x04b83000 )
#define ANT2_DDAC0_BASE        ( 0x04c03000 )
#define ANT2_DDAC1_BASE        ( 0x04c83000 )
#define ANT2_DDAC2_BASE        ( 0x04d03000 )
#define ANT2_DDAC3_BASE        ( 0x04d83000 )
#define ANT3_DDAC0_BASE        ( 0x04e03000 )
#define ANT3_DDAC1_BASE        ( 0x04e83000 )
#define ANT3_DDAC2_BASE        ( 0x04f03000 )
#define ANT3_DDAC3_BASE        ( 0x04f83000 )
#define FB_ANT0_DDAC_TOP_BASE  ( 0x05022000 )
#define FB_ANT0_DDAC_BOT_BASE  ( 0x05062000 )
#define FB_ANT1_DDAC_TOP_BASE  ( 0x050a2000 )
#define FB_ANT1_DDAC_BOT_BASE  ( 0x050e2000 )
#endif // CPU_ANA

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define DDAC_SCRATCH_OFFSET      ( 0x00000000U )
#define DDAC_SEQ0_CTRL_OFFSET    ( 0x00000004U )
#define DDAC_SEQ0_ITER_OFFSET    ( 0x00000008U )
#define DDAC_SEQ0_STAT_OFFSET    ( 0x0000000cU )
#define DDAC_SEQ1_CTRL_OFFSET    ( 0x00000010U )
#define DDAC_SEQ1_ITER_OFFSET    ( 0x00000014U )
#define DDAC_SEQ1_STAT_OFFSET    ( 0x00000018U )
#define DDAC_SL_TCTL_OFFSET      ( 0x0000001cU )
#define DDAC_TX_ENCX_CONF0_OFFSET ( 0x00000020U )
#define DDAC_TX_ENCX_CONF1_OFFSET ( 0x00000024U )
#define DDAC_TX_ENCX_CONF2_OFFSET ( 0x00000028U )
#define DDAC_TX_ENCX_CONF3_OFFSET ( 0x0000002cU )
#define DDAC_TX_ENCX_CONF4_OFFSET ( 0x00000030U )
#define DDAC_TX_ENCX_CONF5_OFFSET ( 0x00000034U )
#define DDAC_TX_ENCX_CONF6_OFFSET ( 0x00000038U )
#define DDAC_TX_ENCX_CONF7_OFFSET ( 0x0000003cU )
#define DDAC_TX_ENCX_CONF8_OFFSET ( 0x00000040U )
#define DDAC_TX_DAC_CONF0_OFFSET ( 0x00000044U )
#define DDAC_TX_DAC_CONF1_OFFSET ( 0x00000048U )
#define DDAC_TX_DAC_CONF2_OFFSET ( 0x0000004cU )
#define DDAC_TX_DAC_CONF3_OFFSET ( 0x00000050U )
#define DDAC_TX_DAC_CONF4_OFFSET ( 0x00000054U )
#define DDAC_TX_DAC_CONF5_OFFSET ( 0x00000058U )
#define DDAC_TX_DAC_CONF6_OFFSET ( 0x0000005cU )
#define DDAC_CSAPI0_OFFSET       ( 0x00000060U )
#define DDAC_CSAPI1_OFFSET       ( 0x00000064U )
#define DDAC_CSAPI2_OFFSET       ( 0x00000068U )
#define DDAC_CSAPI3_OFFSET       ( 0x0000006cU )
#define DDAC_CSAPI4_OFFSET       ( 0x00000070U )
#define DDAC_CSAPI5_OFFSET       ( 0x00000074U )
#define DDAC_CSAPO0_OFFSET       ( 0x00000078U )
#define DDAC_CSAPO1_OFFSET       ( 0x0000007cU )
#define DDAC_CSAPO2_OFFSET       ( 0x00000080U )
#define DDAC_CSAPO3_OFFSET       ( 0x00000084U )
#define DDAC_CSAPO4_OFFSET       ( 0x00000088U )
#define DDAC_CSAPO5_OFFSET       ( 0x0000008cU )
#define DDAC_DSAS_OFFSET         ( 0x00000090U )
#define DDAC_DSAL_OFFSET         ( 0x00000094U )
#define DDAC_DSA_FG_OFFSET       ( 0x00000098U )
#define DDAC_STAT_OFFSET         ( 0x0000009cU )
#define DDAC_SEQ00_SEQ0_CMD_DATA_OFFSET ( 0x000000a0U )
#define DDAC_SEQ00_SEQ0_CMD_AW_OFFSET ( 0x000000a4U )
#define DDAC_SEQ01_SEQ0_CMD_DATA_OFFSET ( 0x000000a8U )
#define DDAC_SEQ01_SEQ0_CMD_AW_OFFSET ( 0x000000acU )
#define DDAC_SEQ02_SEQ0_CMD_DATA_OFFSET ( 0x000000b0U )
#define DDAC_SEQ02_SEQ0_CMD_AW_OFFSET ( 0x000000b4U )
#define DDAC_SEQ03_SEQ0_CMD_DATA_OFFSET ( 0x000000b8U )
#define DDAC_SEQ03_SEQ0_CMD_AW_OFFSET ( 0x000000bcU )
#define DDAC_SEQ04_SEQ0_CMD_DATA_OFFSET ( 0x000000c0U )
#define DDAC_SEQ04_SEQ0_CMD_AW_OFFSET ( 0x000000c4U )
#define DDAC_SEQ05_SEQ0_CMD_DATA_OFFSET ( 0x000000c8U )
#define DDAC_SEQ05_SEQ0_CMD_AW_OFFSET ( 0x000000ccU )
#define DDAC_SEQ06_SEQ0_CMD_DATA_OFFSET ( 0x000000d0U )
#define DDAC_SEQ06_SEQ0_CMD_AW_OFFSET ( 0x000000d4U )
#define DDAC_SEQ07_SEQ0_CMD_DATA_OFFSET ( 0x000000d8U )
#define DDAC_SEQ07_SEQ0_CMD_AW_OFFSET ( 0x000000dcU )
#define DDAC_SEQ08_SEQ0_CMD_DATA_OFFSET ( 0x000000e0U )
#define DDAC_SEQ08_SEQ0_CMD_AW_OFFSET ( 0x000000e4U )
#define DDAC_SEQ09_SEQ0_CMD_DATA_OFFSET ( 0x000000e8U )
#define DDAC_SEQ09_SEQ0_CMD_AW_OFFSET ( 0x000000ecU )
#define DDAC_SEQ010_SEQ0_CMD_DATA_OFFSET ( 0x000000f0U )
#define DDAC_SEQ010_SEQ0_CMD_AW_OFFSET ( 0x000000f4U )
#define DDAC_SEQ011_SEQ0_CMD_DATA_OFFSET ( 0x000000f8U )
#define DDAC_SEQ011_SEQ0_CMD_AW_OFFSET ( 0x000000fcU )
#define DDAC_SEQ012_SEQ0_CMD_DATA_OFFSET ( 0x00000100U )
#define DDAC_SEQ012_SEQ0_CMD_AW_OFFSET ( 0x00000104U )
#define DDAC_SEQ013_SEQ0_CMD_DATA_OFFSET ( 0x00000108U )
#define DDAC_SEQ013_SEQ0_CMD_AW_OFFSET ( 0x0000010cU )
#define DDAC_SEQ014_SEQ0_CMD_DATA_OFFSET ( 0x00000110U )
#define DDAC_SEQ014_SEQ0_CMD_AW_OFFSET ( 0x00000114U )
#define DDAC_SEQ015_SEQ0_CMD_DATA_OFFSET ( 0x00000118U )
#define DDAC_SEQ015_SEQ0_CMD_AW_OFFSET ( 0x0000011cU )
#define DDAC_SEQ016_SEQ0_CMD_DATA_OFFSET ( 0x00000120U )
#define DDAC_SEQ016_SEQ0_CMD_AW_OFFSET ( 0x00000124U )
#define DDAC_SEQ017_SEQ0_CMD_DATA_OFFSET ( 0x00000128U )
#define DDAC_SEQ017_SEQ0_CMD_AW_OFFSET ( 0x0000012cU )
#define DDAC_SEQ018_SEQ0_CMD_DATA_OFFSET ( 0x00000130U )
#define DDAC_SEQ018_SEQ0_CMD_AW_OFFSET ( 0x00000134U )
#define DDAC_SEQ019_SEQ0_CMD_DATA_OFFSET ( 0x00000138U )
#define DDAC_SEQ019_SEQ0_CMD_AW_OFFSET ( 0x0000013cU )
#define DDAC_SEQ10_SEQ1_CMD_DATA_OFFSET ( 0x00000140U )
#define DDAC_SEQ10_SEQ1_CMD_AW_OFFSET ( 0x00000144U )
#define DDAC_SEQ11_SEQ1_CMD_DATA_OFFSET ( 0x00000148U )
#define DDAC_SEQ11_SEQ1_CMD_AW_OFFSET ( 0x0000014cU )
#define DDAC_SEQ12_SEQ1_CMD_DATA_OFFSET ( 0x00000150U )
#define DDAC_SEQ12_SEQ1_CMD_AW_OFFSET ( 0x00000154U )
#define DDAC_SEQ13_SEQ1_CMD_DATA_OFFSET ( 0x00000158U )
#define DDAC_SEQ13_SEQ1_CMD_AW_OFFSET ( 0x0000015cU )
#define DDAC_SEQ14_SEQ1_CMD_DATA_OFFSET ( 0x00000160U )
#define DDAC_SEQ14_SEQ1_CMD_AW_OFFSET ( 0x00000164U )
#define DDAC_SEQ15_SEQ1_CMD_DATA_OFFSET ( 0x00000168U )
#define DDAC_SEQ15_SEQ1_CMD_AW_OFFSET ( 0x0000016cU )
#define DDAC_SEQ16_SEQ1_CMD_DATA_OFFSET ( 0x00000170U )
#define DDAC_SEQ16_SEQ1_CMD_AW_OFFSET ( 0x00000174U )
#define DDAC_SEQ17_SEQ1_CMD_DATA_OFFSET ( 0x00000178U )
#define DDAC_SEQ17_SEQ1_CMD_AW_OFFSET ( 0x0000017cU )
#define DDAC_SEQ18_SEQ1_CMD_DATA_OFFSET ( 0x00000180U )
#define DDAC_SEQ18_SEQ1_CMD_AW_OFFSET ( 0x00000184U )
#define DDAC_SEQ19_SEQ1_CMD_DATA_OFFSET ( 0x00000188U )
#define DDAC_SEQ19_SEQ1_CMD_AW_OFFSET ( 0x0000018cU )
#define DDAC_SEQ110_SEQ1_CMD_DATA_OFFSET ( 0x00000190U )
#define DDAC_SEQ110_SEQ1_CMD_AW_OFFSET ( 0x00000194U )
#define DDAC_SEQ111_SEQ1_CMD_DATA_OFFSET ( 0x00000198U )
#define DDAC_SEQ111_SEQ1_CMD_AW_OFFSET ( 0x0000019cU )
#define DDAC_SEQ112_SEQ1_CMD_DATA_OFFSET ( 0x000001a0U )
#define DDAC_SEQ112_SEQ1_CMD_AW_OFFSET ( 0x000001a4U )
#define DDAC_SEQ113_SEQ1_CMD_DATA_OFFSET ( 0x000001a8U )
#define DDAC_SEQ113_SEQ1_CMD_AW_OFFSET ( 0x000001acU )
#define DDAC_SEQ114_SEQ1_CMD_DATA_OFFSET ( 0x000001b0U )
#define DDAC_SEQ114_SEQ1_CMD_AW_OFFSET ( 0x000001b4U )
#define DDAC_SEQ115_SEQ1_CMD_DATA_OFFSET ( 0x000001b8U )
#define DDAC_SEQ115_SEQ1_CMD_AW_OFFSET ( 0x000001bcU )
#define DDAC_SEQ116_SEQ1_CMD_DATA_OFFSET ( 0x000001c0U )
#define DDAC_SEQ116_SEQ1_CMD_AW_OFFSET ( 0x000001c4U )
#define DDAC_SEQ117_SEQ1_CMD_DATA_OFFSET ( 0x000001c8U )
#define DDAC_SEQ117_SEQ1_CMD_AW_OFFSET ( 0x000001ccU )
#define DDAC_SEQ118_SEQ1_CMD_DATA_OFFSET ( 0x000001d0U )
#define DDAC_SEQ118_SEQ1_CMD_AW_OFFSET ( 0x000001d4U )
#define DDAC_SEQ119_SEQ1_CMD_DATA_OFFSET ( 0x000001d8U )
#define DDAC_SEQ119_SEQ1_CMD_AW_OFFSET ( 0x000001dcU )
#define DDAC_SL_TSTAT_OFFSET     ( 0x000001e8U )
#define DDAC_COLL_STAT_OFFSET    ( 0x000001ecU )
#define DDAC_PAR_ERR_SEQ0A_OFFSET ( 0x000001f0U )
#define DDAC_PAR_ERR_SEQ0D_OFFSET ( 0x000001f4U )
#define DDAC_PAR_ERR_SEQ1A_OFFSET ( 0x000001f8U )
#define DDAC_PAR_ERR_SEQ1D_OFFSET ( 0x000001fcU )
#define DDAC_PAR_ERR_CSAPI_OFFSET ( 0x00000200U )
#define DDAC_PAR_ERR_CSAPO_OFFSET ( 0x00000204U )
#define DDAC_PAR_ERR_TX_ENCX_OFFSET ( 0x00000208U )
#define DDAC_PAR_ERR_TX_DAC_OFFSET ( 0x0000020cU )
#define DDAC_INT_STAT_OFFSET   ( 0x00000220U )
#define DDAC_INT_HI_EN_OFFSET    ( 0x00000224U )
#define DDAC_INT_LO_EN_OFFSET    ( 0x00000228U )
#define DDAC_INT_CLR_OFFSET    ( 0x0000022cU )
#define DDAC_INT_FORCE_OFFSET    ( 0x00000230U )
#define DDAC_APB_BRDG_STAT_OFFSET ( 0x00000234U )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define DDAC_SCRATCH_ADR(_BASE)         (( ( _BASE ) + ( DDAC_SCRATCH_OFFSET ) ))
#define DDAC_SEQ0_CTRL_ADR(_BASE)       (( ( _BASE ) + ( DDAC_SEQ0_CTRL_OFFSET ) ))
#define DDAC_SEQ0_ITER_ADR(_BASE)       (( ( _BASE ) + ( DDAC_SEQ0_ITER_OFFSET ) ))
#define DDAC_SEQ0_STAT_ADR(_BASE)       (( ( _BASE ) + ( DDAC_SEQ0_STAT_OFFSET ) ))
#define DDAC_SEQ1_CTRL_ADR(_BASE)       (( ( _BASE ) + ( DDAC_SEQ1_CTRL_OFFSET ) ))
#define DDAC_SEQ1_ITER_ADR(_BASE)       (( ( _BASE ) + ( DDAC_SEQ1_ITER_OFFSET ) ))
#define DDAC_SEQ1_STAT_ADR(_BASE)       (( ( _BASE ) + ( DDAC_SEQ1_STAT_OFFSET ) ))
#define DDAC_SL_TCTL_ADR(_BASE)         (( ( _BASE ) + ( DDAC_SL_TCTL_OFFSET ) ))
#define DDAC_TX_ENCX_CONF0_ADR(_BASE)   (( ( _BASE ) + ( DDAC_TX_ENCX_CONF0_OFFSET ) ))
#define DDAC_TX_ENCX_CONF1_ADR(_BASE)   (( ( _BASE ) + ( DDAC_TX_ENCX_CONF1_OFFSET ) ))
#define DDAC_TX_ENCX_CONF2_ADR(_BASE)   (( ( _BASE ) + ( DDAC_TX_ENCX_CONF2_OFFSET ) ))
#define DDAC_TX_ENCX_CONF3_ADR(_BASE)   (( ( _BASE ) + ( DDAC_TX_ENCX_CONF3_OFFSET ) ))
#define DDAC_TX_ENCX_CONF4_ADR(_BASE)   (( ( _BASE ) + ( DDAC_TX_ENCX_CONF4_OFFSET ) ))
#define DDAC_TX_ENCX_CONF5_ADR(_BASE)   (( ( _BASE ) + ( DDAC_TX_ENCX_CONF5_OFFSET ) ))
#define DDAC_TX_ENCX_CONF6_ADR(_BASE)   (( ( _BASE ) + ( DDAC_TX_ENCX_CONF6_OFFSET ) ))
#define DDAC_TX_ENCX_CONF7_ADR(_BASE)   (( ( _BASE ) + ( DDAC_TX_ENCX_CONF7_OFFSET ) ))
#define DDAC_TX_ENCX_CONF8_ADR(_BASE)   (( ( _BASE ) + ( DDAC_TX_ENCX_CONF8_OFFSET ) ))
#define DDAC_TX_DAC_CONF0_ADR(_BASE)    (( ( _BASE ) + ( DDAC_TX_DAC_CONF0_OFFSET ) ))
#define DDAC_TX_DAC_CONF1_ADR(_BASE)    (( ( _BASE ) + ( DDAC_TX_DAC_CONF1_OFFSET ) ))
#define DDAC_TX_DAC_CONF2_ADR(_BASE)    (( ( _BASE ) + ( DDAC_TX_DAC_CONF2_OFFSET ) ))
#define DDAC_TX_DAC_CONF3_ADR(_BASE)    (( ( _BASE ) + ( DDAC_TX_DAC_CONF3_OFFSET ) ))
#define DDAC_TX_DAC_CONF4_ADR(_BASE)    (( ( _BASE ) + ( DDAC_TX_DAC_CONF4_OFFSET ) ))
#define DDAC_TX_DAC_CONF5_ADR(_BASE)    (( ( _BASE ) + ( DDAC_TX_DAC_CONF5_OFFSET ) ))
#define DDAC_TX_DAC_CONF6_ADR(_BASE)    (( ( _BASE ) + ( DDAC_TX_DAC_CONF6_OFFSET ) ))
#define DDAC_CSAPI0_ADR(_BASE)          (( ( _BASE ) + ( DDAC_CSAPI0_OFFSET ) ))
#define DDAC_CSAPI1_ADR(_BASE)          (( ( _BASE ) + ( DDAC_CSAPI1_OFFSET ) ))
#define DDAC_CSAPI2_ADR(_BASE)          (( ( _BASE ) + ( DDAC_CSAPI2_OFFSET ) ))
#define DDAC_CSAPI3_ADR(_BASE)          (( ( _BASE ) + ( DDAC_CSAPI3_OFFSET ) ))
#define DDAC_CSAPI4_ADR(_BASE)          (( ( _BASE ) + ( DDAC_CSAPI4_OFFSET ) ))
#define DDAC_CSAPI5_ADR(_BASE)          (( ( _BASE ) + ( DDAC_CSAPI5_OFFSET ) ))
#define DDAC_CSAPO0_ADR(_BASE)          (( ( _BASE ) + ( DDAC_CSAPO0_OFFSET ) ))
#define DDAC_CSAPO1_ADR(_BASE)          (( ( _BASE ) + ( DDAC_CSAPO1_OFFSET ) ))
#define DDAC_CSAPO2_ADR(_BASE)          (( ( _BASE ) + ( DDAC_CSAPO2_OFFSET ) ))
#define DDAC_CSAPO3_ADR(_BASE)          (( ( _BASE ) + ( DDAC_CSAPO3_OFFSET ) ))
#define DDAC_CSAPO4_ADR(_BASE)          (( ( _BASE ) + ( DDAC_CSAPO4_OFFSET ) ))
#define DDAC_CSAPO5_ADR(_BASE)          (( ( _BASE ) + ( DDAC_CSAPO5_OFFSET ) ))
#define DDAC_DSAS_ADR(_BASE)            (( ( _BASE ) + ( DDAC_DSAS_OFFSET ) ))
#define DDAC_DSAL_ADR(_BASE)            (( ( _BASE ) + ( DDAC_DSAL_OFFSET ) ))
#define DDAC_DSA_FG_ADR(_BASE)          (( ( _BASE ) + ( DDAC_DSA_FG_OFFSET ) ))
#define DDAC_STAT_ADR(_BASE)            (( ( _BASE ) + ( DDAC_STAT_OFFSET ) ))
#define DDAC_SEQ00_SEQ0_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ00_SEQ0_CMD_DATA_OFFSET ) ))
#define DDAC_SEQ00_SEQ0_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ00_SEQ0_CMD_AW_OFFSET ) ))
#define DDAC_SEQ01_SEQ0_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ01_SEQ0_CMD_DATA_OFFSET ) ))
#define DDAC_SEQ01_SEQ0_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ01_SEQ0_CMD_AW_OFFSET ) ))
#define DDAC_SEQ02_SEQ0_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ02_SEQ0_CMD_DATA_OFFSET ) ))
#define DDAC_SEQ02_SEQ0_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ02_SEQ0_CMD_AW_OFFSET ) ))
#define DDAC_SEQ03_SEQ0_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ03_SEQ0_CMD_DATA_OFFSET ) ))
#define DDAC_SEQ03_SEQ0_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ03_SEQ0_CMD_AW_OFFSET ) ))
#define DDAC_SEQ04_SEQ0_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ04_SEQ0_CMD_DATA_OFFSET ) ))
#define DDAC_SEQ04_SEQ0_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ04_SEQ0_CMD_AW_OFFSET ) ))
#define DDAC_SEQ05_SEQ0_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ05_SEQ0_CMD_DATA_OFFSET ) ))
#define DDAC_SEQ05_SEQ0_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ05_SEQ0_CMD_AW_OFFSET ) ))
#define DDAC_SEQ06_SEQ0_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ06_SEQ0_CMD_DATA_OFFSET ) ))
#define DDAC_SEQ06_SEQ0_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ06_SEQ0_CMD_AW_OFFSET ) ))
#define DDAC_SEQ07_SEQ0_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ07_SEQ0_CMD_DATA_OFFSET ) ))
#define DDAC_SEQ07_SEQ0_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ07_SEQ0_CMD_AW_OFFSET ) ))
#define DDAC_SEQ08_SEQ0_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ08_SEQ0_CMD_DATA_OFFSET ) ))
#define DDAC_SEQ08_SEQ0_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ08_SEQ0_CMD_AW_OFFSET ) ))
#define DDAC_SEQ09_SEQ0_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ09_SEQ0_CMD_DATA_OFFSET ) ))
#define DDAC_SEQ09_SEQ0_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ09_SEQ0_CMD_AW_OFFSET ) ))
#define DDAC_SEQ010_SEQ0_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ010_SEQ0_CMD_DATA_OFFSET ) ))
#define DDAC_SEQ010_SEQ0_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ010_SEQ0_CMD_AW_OFFSET ) ))
#define DDAC_SEQ011_SEQ0_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ011_SEQ0_CMD_DATA_OFFSET ) ))
#define DDAC_SEQ011_SEQ0_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ011_SEQ0_CMD_AW_OFFSET ) ))
#define DDAC_SEQ012_SEQ0_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ012_SEQ0_CMD_DATA_OFFSET ) ))
#define DDAC_SEQ012_SEQ0_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ012_SEQ0_CMD_AW_OFFSET ) ))
#define DDAC_SEQ013_SEQ0_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ013_SEQ0_CMD_DATA_OFFSET ) ))
#define DDAC_SEQ013_SEQ0_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ013_SEQ0_CMD_AW_OFFSET ) ))
#define DDAC_SEQ014_SEQ0_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ014_SEQ0_CMD_DATA_OFFSET ) ))
#define DDAC_SEQ014_SEQ0_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ014_SEQ0_CMD_AW_OFFSET ) ))
#define DDAC_SEQ015_SEQ0_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ015_SEQ0_CMD_DATA_OFFSET ) ))
#define DDAC_SEQ015_SEQ0_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ015_SEQ0_CMD_AW_OFFSET ) ))
#define DDAC_SEQ016_SEQ0_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ016_SEQ0_CMD_DATA_OFFSET ) ))
#define DDAC_SEQ016_SEQ0_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ016_SEQ0_CMD_AW_OFFSET ) ))
#define DDAC_SEQ017_SEQ0_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ017_SEQ0_CMD_DATA_OFFSET ) ))
#define DDAC_SEQ017_SEQ0_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ017_SEQ0_CMD_AW_OFFSET ) ))
#define DDAC_SEQ018_SEQ0_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ018_SEQ0_CMD_DATA_OFFSET ) ))
#define DDAC_SEQ018_SEQ0_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ018_SEQ0_CMD_AW_OFFSET ) ))
#define DDAC_SEQ019_SEQ0_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ019_SEQ0_CMD_DATA_OFFSET ) ))
#define DDAC_SEQ019_SEQ0_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ019_SEQ0_CMD_AW_OFFSET ) ))
#define DDAC_SEQ10_SEQ1_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ10_SEQ1_CMD_DATA_OFFSET ) ))
#define DDAC_SEQ10_SEQ1_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ10_SEQ1_CMD_AW_OFFSET ) ))
#define DDAC_SEQ11_SEQ1_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ11_SEQ1_CMD_DATA_OFFSET ) ))
#define DDAC_SEQ11_SEQ1_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ11_SEQ1_CMD_AW_OFFSET ) ))
#define DDAC_SEQ12_SEQ1_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ12_SEQ1_CMD_DATA_OFFSET ) ))
#define DDAC_SEQ12_SEQ1_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ12_SEQ1_CMD_AW_OFFSET ) ))
#define DDAC_SEQ13_SEQ1_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ13_SEQ1_CMD_DATA_OFFSET ) ))
#define DDAC_SEQ13_SEQ1_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ13_SEQ1_CMD_AW_OFFSET ) ))
#define DDAC_SEQ14_SEQ1_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ14_SEQ1_CMD_DATA_OFFSET ) ))
#define DDAC_SEQ14_SEQ1_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ14_SEQ1_CMD_AW_OFFSET ) ))
#define DDAC_SEQ15_SEQ1_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ15_SEQ1_CMD_DATA_OFFSET ) ))
#define DDAC_SEQ15_SEQ1_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ15_SEQ1_CMD_AW_OFFSET ) ))
#define DDAC_SEQ16_SEQ1_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ16_SEQ1_CMD_DATA_OFFSET ) ))
#define DDAC_SEQ16_SEQ1_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ16_SEQ1_CMD_AW_OFFSET ) ))
#define DDAC_SEQ17_SEQ1_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ17_SEQ1_CMD_DATA_OFFSET ) ))
#define DDAC_SEQ17_SEQ1_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ17_SEQ1_CMD_AW_OFFSET ) ))
#define DDAC_SEQ18_SEQ1_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ18_SEQ1_CMD_DATA_OFFSET ) ))
#define DDAC_SEQ18_SEQ1_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ18_SEQ1_CMD_AW_OFFSET ) ))
#define DDAC_SEQ19_SEQ1_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ19_SEQ1_CMD_DATA_OFFSET ) ))
#define DDAC_SEQ19_SEQ1_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ19_SEQ1_CMD_AW_OFFSET ) ))
#define DDAC_SEQ110_SEQ1_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ110_SEQ1_CMD_DATA_OFFSET ) ))
#define DDAC_SEQ110_SEQ1_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ110_SEQ1_CMD_AW_OFFSET ) ))
#define DDAC_SEQ111_SEQ1_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ111_SEQ1_CMD_DATA_OFFSET ) ))
#define DDAC_SEQ111_SEQ1_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ111_SEQ1_CMD_AW_OFFSET ) ))
#define DDAC_SEQ112_SEQ1_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ112_SEQ1_CMD_DATA_OFFSET ) ))
#define DDAC_SEQ112_SEQ1_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ112_SEQ1_CMD_AW_OFFSET ) ))
#define DDAC_SEQ113_SEQ1_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ113_SEQ1_CMD_DATA_OFFSET ) ))
#define DDAC_SEQ113_SEQ1_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ113_SEQ1_CMD_AW_OFFSET ) ))
#define DDAC_SEQ114_SEQ1_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ114_SEQ1_CMD_DATA_OFFSET ) ))
#define DDAC_SEQ114_SEQ1_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ114_SEQ1_CMD_AW_OFFSET ) ))
#define DDAC_SEQ115_SEQ1_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ115_SEQ1_CMD_DATA_OFFSET ) ))
#define DDAC_SEQ115_SEQ1_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ115_SEQ1_CMD_AW_OFFSET ) ))
#define DDAC_SEQ116_SEQ1_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ116_SEQ1_CMD_DATA_OFFSET ) ))
#define DDAC_SEQ116_SEQ1_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ116_SEQ1_CMD_AW_OFFSET ) ))
#define DDAC_SEQ117_SEQ1_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ117_SEQ1_CMD_DATA_OFFSET ) ))
#define DDAC_SEQ117_SEQ1_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ117_SEQ1_CMD_AW_OFFSET ) ))
#define DDAC_SEQ118_SEQ1_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ118_SEQ1_CMD_DATA_OFFSET ) ))
#define DDAC_SEQ118_SEQ1_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ118_SEQ1_CMD_AW_OFFSET ) ))
#define DDAC_SEQ119_SEQ1_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ119_SEQ1_CMD_DATA_OFFSET ) ))
#define DDAC_SEQ119_SEQ1_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( DDAC_SEQ119_SEQ1_CMD_AW_OFFSET ) ))
#define DDAC_SL_TSTAT_ADR(_BASE)        (( ( _BASE ) + ( DDAC_SL_TSTAT_OFFSET ) ))
#define DDAC_COLL_STAT_ADR(_BASE)       (( ( _BASE ) + ( DDAC_COLL_STAT_OFFSET ) ))
#define DDAC_PAR_ERR_SEQ0A_ADR(_BASE)   (( ( _BASE ) + ( DDAC_PAR_ERR_SEQ0A_OFFSET ) ))
#define DDAC_PAR_ERR_SEQ0D_ADR(_BASE)   (( ( _BASE ) + ( DDAC_PAR_ERR_SEQ0D_OFFSET ) ))
#define DDAC_PAR_ERR_SEQ1A_ADR(_BASE)   (( ( _BASE ) + ( DDAC_PAR_ERR_SEQ1A_OFFSET ) ))
#define DDAC_PAR_ERR_SEQ1D_ADR(_BASE)   (( ( _BASE ) + ( DDAC_PAR_ERR_SEQ1D_OFFSET ) ))
#define DDAC_PAR_ERR_CSAPI_ADR(_BASE)   (( ( _BASE ) + ( DDAC_PAR_ERR_CSAPI_OFFSET ) ))
#define DDAC_PAR_ERR_CSAPO_ADR(_BASE)   (( ( _BASE ) + ( DDAC_PAR_ERR_CSAPO_OFFSET ) ))
#define DDAC_PAR_ERR_TX_ENCX_ADR(_BASE) (( ( _BASE ) + ( DDAC_PAR_ERR_TX_ENCX_OFFSET ) ))
#define DDAC_PAR_ERR_TX_DAC_ADR(_BASE)  (( ( _BASE ) + ( DDAC_PAR_ERR_TX_DAC_OFFSET ) ))
#define DDAC_INT_STAT_ADR(_BASE)      (( ( _BASE ) + ( DDAC_INT_STAT_OFFSET ) ))
#define DDAC_INT_HI_EN_ADR(_BASE)       (( ( _BASE ) + ( DDAC_INT_HI_EN_OFFSET ) ))
#define DDAC_INT_LO_EN_ADR(_BASE)       (( ( _BASE ) + ( DDAC_INT_LO_EN_OFFSET ) ))
#define DDAC_INT_CLR_ADR(_BASE)       (( ( _BASE ) + ( DDAC_INT_CLR_OFFSET ) ))
#define DDAC_INT_FORCE_ADR(_BASE)       (( ( _BASE ) + ( DDAC_INT_FORCE_OFFSET ) ))
#define DDAC_APB_BRDG_STAT_ADR(_BASE) (( ( _BASE ) + ( DDAC_APB_BRDG_STAT_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief DDAC_MAP_REG_SCRATCH register description at address offset 0x0
  *
  * Register default value:        0x00000000
  * Register full path in IP: ddac_map/reg/SCRATCH
  * DDAC scratchpad register.
  */

typedef union {
  struct {
    uint32_t SCRATCHPAD : 32;
    ///< Do anything with this field.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} ddac_scratch_reg_t;

#define DDAC_SCRATCH_DEFAULT (0x00000000U)
#define DDAC_SCRATCH_RD_MASK (0xffffffffU)
#define DDAC_SCRATCH_WR_MASK (0xffffffffU)


///< Do anything with this field.
#define DDAC_SCRATCH_SCRATCHPAD_BF_OFF ( 0)
#define DDAC_SCRATCH_SCRATCHPAD_BF_WID (32)
#define DDAC_SCRATCH_SCRATCHPAD_BF_MSK (0xFFFFFFFF)
#define DDAC_SCRATCH_SCRATCHPAD_BF_DEF (0x00000000)


/** @brief DDAC_MAP_REG_SEQ0_CTRL register description at address offset 0x4
  *
  * Register default value:        0x00000002
  * Register full path in IP: ddac_map/reg/SEQ0_CTRL
  * Sequencer control register.
  */

typedef union {
  struct {
    uint32_t ENABLE : 1;
    ///< 0: sequencer disabled, 1: sequencer enabled.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t EXT_CTRL : 1;
    ///< 0: external control (BFN) disabled, 1: external control (BFN) enabled.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x1"
    uint32_t START_ADDR : 5;
    ///< Sequencer start address.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t LOOP_START_ADDR : 5;
    ///< Sequencer loop start address.
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t LOOP_END_ADDR : 5;
    ///< Sequencer loop end address.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t END_ADDR : 5;
    ///< Sequencer end address.
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} ddac_seq0_ctrl_reg_t;

#define DDAC_SEQ0_CTRL_DEFAULT (0x00000002U)
#define DDAC_SEQ0_CTRL_RD_MASK (0x003fffffU)
#define DDAC_SEQ0_CTRL_WR_MASK (0x003fffffU)


///< 0: sequencer disabled, 1: sequencer enabled.
#define DDAC_SEQ0_CTRL_EN_BF_OFF ( 0)
#define DDAC_SEQ0_CTRL_EN_BF_WID ( 1)
#define DDAC_SEQ0_CTRL_EN_BF_MSK (0x00000001)
#define DDAC_SEQ0_CTRL_EN_BF_DEF (0x00000000)

///< 0: external control (BFN) disabled, 1: external control (BFN) enabled.
#define DDAC_SEQ0_CTRL_EXT_CTRL_BF_OFF ( 1)
#define DDAC_SEQ0_CTRL_EXT_CTRL_BF_WID ( 1)
#define DDAC_SEQ0_CTRL_EXT_CTRL_BF_MSK (0x00000002)
#define DDAC_SEQ0_CTRL_EXT_CTRL_BF_DEF (0x00000002)

///< Sequencer start address.
#define DDAC_SEQ0_CTRL_START_ADDR_BF_OFF ( 2)
#define DDAC_SEQ0_CTRL_START_ADDR_BF_WID ( 5)
#define DDAC_SEQ0_CTRL_START_ADDR_BF_MSK (0x0000007C)
#define DDAC_SEQ0_CTRL_START_ADDR_BF_DEF (0x00000000)

///< Sequencer loop start address.
#define DDAC_SEQ0_CTRL_LOOP_START_ADDR_BF_OFF ( 7)
#define DDAC_SEQ0_CTRL_LOOP_START_ADDR_BF_WID ( 5)
#define DDAC_SEQ0_CTRL_LOOP_START_ADDR_BF_MSK (0x00000F80)
#define DDAC_SEQ0_CTRL_LOOP_START_ADDR_BF_DEF (0x00000000)

///< Sequencer loop end address.
#define DDAC_SEQ0_CTRL_LOOP_END_ADDR_BF_OFF (12)
#define DDAC_SEQ0_CTRL_LOOP_END_ADDR_BF_WID ( 5)
#define DDAC_SEQ0_CTRL_LOOP_END_ADDR_BF_MSK (0x0001F000)
#define DDAC_SEQ0_CTRL_LOOP_END_ADDR_BF_DEF (0x00000000)

///< Sequencer end address.
#define DDAC_SEQ0_CTRL_END_ADDR_BF_OFF (17)
#define DDAC_SEQ0_CTRL_END_ADDR_BF_WID ( 5)
#define DDAC_SEQ0_CTRL_END_ADDR_BF_MSK (0x003E0000)
#define DDAC_SEQ0_CTRL_END_ADDR_BF_DEF (0x00000000)


/** @brief DDAC_MAP_REG_SEQ0_ITER register description at address offset 0x8
  *
  * Register default value:        0x00000000
  * Register full path in IP: ddac_map/reg/SEQ0_ITER
  * Sequencer iteration control register.
  */

typedef union {
  struct {
    uint32_t ITER : 14;
    ///< Sequencer number of iterations.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 18;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
  } ;
  uint32_t value;
} ddac_seq0_iter_reg_t;

#define DDAC_SEQ0_ITER_DEFAULT (0x00000000U)
#define DDAC_SEQ0_ITER_RD_MASK (0x00003fffU)
#define DDAC_SEQ0_ITER_WR_MASK (0x00003fffU)


///< Sequencer number of iterations.
#define DDAC_SEQ0_ITER_BF_OFF ( 0)
#define DDAC_SEQ0_ITER_BF_WID (14)
#define DDAC_SEQ0_ITER_BF_MSK (0x00003FFF)
#define DDAC_SEQ0_ITER_BF_DEF (0x00000000)


/** @brief DDAC_MAP_REG_SEQ0_STAT register description at address offset 0xc
  *
  * Register default value:        0x00000000
  * Register full path in IP: ddac_map/reg/SEQ0_STAT
  * Sequencer status register.
  */

typedef union {
  struct {
    uint32_t RUNNING : 1;
    ///< Sequencer is running.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t DONE : 1;
    ///< Sequencer is done.
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t PC : 5;
    ///< Sequencer program count.
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t WAIT_CNT : 12;
    ///< Sequencer wait count.
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} ddac_seq0_stat_reg_t;

#define DDAC_SEQ0_STAT_DEFAULT (0x00000000U)
#define DDAC_SEQ0_STAT_RD_MASK (0x0007ffffU)
#define DDAC_SEQ0_STAT_WR_MASK (0x00000000U)


///< Sequencer is running.
#define DDAC_SEQ0_STAT_RUNNING_BF_OFF ( 0)
#define DDAC_SEQ0_STAT_RUNNING_BF_WID ( 1)
#define DDAC_SEQ0_STAT_RUNNING_BF_MSK (0x00000001)
#define DDAC_SEQ0_STAT_RUNNING_BF_DEF (0x00000000)

///< Sequencer is done.
#define DDAC_SEQ0_STAT_DONE_BF_OFF ( 1)
#define DDAC_SEQ0_STAT_DONE_BF_WID ( 1)
#define DDAC_SEQ0_STAT_DONE_BF_MSK (0x00000002)
#define DDAC_SEQ0_STAT_DONE_BF_DEF (0x00000000)

///< Sequencer program count.
#define DDAC_SEQ0_STAT_PC_BF_OFF ( 2)
#define DDAC_SEQ0_STAT_PC_BF_WID ( 5)
#define DDAC_SEQ0_STAT_PC_BF_MSK (0x0000007C)
#define DDAC_SEQ0_STAT_PC_BF_DEF (0x00000000)

///< Sequencer wait count.
#define DDAC_SEQ0_STAT_WAIT_CNT_BF_OFF ( 7)
#define DDAC_SEQ0_STAT_WAIT_CNT_BF_WID (12)
#define DDAC_SEQ0_STAT_WAIT_CNT_BF_MSK (0x0007FF80)
#define DDAC_SEQ0_STAT_WAIT_CNT_BF_DEF (0x00000000)


/** @brief DDAC_MAP_REG_SEQ1_CTRL register description at address offset 0x10
  *
  * Register default value:        0x00000002
  * Register full path in IP: ddac_map/reg/SEQ1_CTRL
  * Sequencer control register.
  */

typedef union {
  struct {
    uint32_t ENABLE : 1;
    ///< 0: sequencer disabled, 1: sequencer enabled.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t EXT_CTRL : 1;
    ///< 0: external control (BFN) disabled, 1: external control (BFN) enabled.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x1"
    uint32_t START_ADDR : 5;
    ///< Sequencer start address.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t LOOP_START_ADDR : 5;
    ///< Sequencer loop start address.
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t LOOP_END_ADDR : 5;
    ///< Sequencer loop end address.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t END_ADDR : 5;
    ///< Sequencer end address.
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} ddac_seq1_ctrl_reg_t;

#define DDAC_SEQ1_CTRL_DEFAULT (0x00000002U)
#define DDAC_SEQ1_CTRL_RD_MASK (0x003fffffU)
#define DDAC_SEQ1_CTRL_WR_MASK (0x003fffffU)


///< 0: sequencer disabled, 1: sequencer enabled.
#define DDAC_SEQ1_CTRL_EN_BF_OFF ( 0)
#define DDAC_SEQ1_CTRL_EN_BF_WID ( 1)
#define DDAC_SEQ1_CTRL_EN_BF_MSK (0x00000001)
#define DDAC_SEQ1_CTRL_EN_BF_DEF (0x00000000)

///< 0: external control (BFN) disabled, 1: external control (BFN) enabled.
#define DDAC_SEQ1_CTRL_EXT_CTRL_BF_OFF ( 1)
#define DDAC_SEQ1_CTRL_EXT_CTRL_BF_WID ( 1)
#define DDAC_SEQ1_CTRL_EXT_CTRL_BF_MSK (0x00000002)
#define DDAC_SEQ1_CTRL_EXT_CTRL_BF_DEF (0x00000002)

///< Sequencer start address.
#define DDAC_SEQ1_CTRL_START_ADDR_BF_OFF ( 2)
#define DDAC_SEQ1_CTRL_START_ADDR_BF_WID ( 5)
#define DDAC_SEQ1_CTRL_START_ADDR_BF_MSK (0x0000007C)
#define DDAC_SEQ1_CTRL_START_ADDR_BF_DEF (0x00000000)

///< Sequencer loop start address.
#define DDAC_SEQ1_CTRL_LOOP_START_ADDR_BF_OFF ( 7)
#define DDAC_SEQ1_CTRL_LOOP_START_ADDR_BF_WID ( 5)
#define DDAC_SEQ1_CTRL_LOOP_START_ADDR_BF_MSK (0x00000F80)
#define DDAC_SEQ1_CTRL_LOOP_START_ADDR_BF_DEF (0x00000000)

///< Sequencer loop end address.
#define DDAC_SEQ1_CTRL_LOOP_END_ADDR_BF_OFF (12)
#define DDAC_SEQ1_CTRL_LOOP_END_ADDR_BF_WID ( 5)
#define DDAC_SEQ1_CTRL_LOOP_END_ADDR_BF_MSK (0x0001F000)
#define DDAC_SEQ1_CTRL_LOOP_END_ADDR_BF_DEF (0x00000000)

///< Sequencer end address.
#define DDAC_SEQ1_CTRL_END_ADDR_BF_OFF (17)
#define DDAC_SEQ1_CTRL_END_ADDR_BF_WID ( 5)
#define DDAC_SEQ1_CTRL_END_ADDR_BF_MSK (0x003E0000)
#define DDAC_SEQ1_CTRL_END_ADDR_BF_DEF (0x00000000)


/** @brief DDAC_MAP_REG_SEQ1_ITER register description at address offset 0x14
  *
  * Register default value:        0x00000000
  * Register full path in IP: ddac_map/reg/SEQ1_ITER
  * Sequencer iteration control register.
  */

typedef union {
  struct {
    uint32_t ITER : 14;
    ///< Sequencer number of iterations.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 18;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
  } ;
  uint32_t value;
} ddac_seq1_iter_reg_t;

#define DDAC_SEQ1_ITER_DEFAULT (0x00000000U)
#define DDAC_SEQ1_ITER_RD_MASK (0x00003fffU)
#define DDAC_SEQ1_ITER_WR_MASK (0x00003fffU)


///< Sequencer number of iterations.
#define DDAC_SEQ1_ITER_BF_OFF ( 0)
#define DDAC_SEQ1_ITER_BF_WID (14)
#define DDAC_SEQ1_ITER_BF_MSK (0x00003FFF)
#define DDAC_SEQ1_ITER_BF_DEF (0x00000000)


/** @brief DDAC_MAP_REG_SEQ1_STAT register description at address offset 0x18
  *
  * Register default value:        0x00000000
  * Register full path in IP: ddac_map/reg/SEQ1_STAT
  * Sequencer status register.
  */

typedef union {
  struct {
    uint32_t RUNNING : 1;
    ///< Sequencer is running.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t DONE : 1;
    ///< Sequencer is done.
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t PC : 5;
    ///< Sequencer program count.
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t WAIT_CNT : 12;
    ///< Sequencer wait count.
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} ddac_seq1_stat_reg_t;

#define DDAC_SEQ1_STAT_DEFAULT (0x00000000U)
#define DDAC_SEQ1_STAT_RD_MASK (0x0007ffffU)
#define DDAC_SEQ1_STAT_WR_MASK (0x00000000U)


///< Sequencer is running.
#define DDAC_SEQ1_STAT_RUNNING_BF_OFF ( 0)
#define DDAC_SEQ1_STAT_RUNNING_BF_WID ( 1)
#define DDAC_SEQ1_STAT_RUNNING_BF_MSK (0x00000001)
#define DDAC_SEQ1_STAT_RUNNING_BF_DEF (0x00000000)

///< Sequencer is done.
#define DDAC_SEQ1_STAT_DONE_BF_OFF ( 1)
#define DDAC_SEQ1_STAT_DONE_BF_WID ( 1)
#define DDAC_SEQ1_STAT_DONE_BF_MSK (0x00000002)
#define DDAC_SEQ1_STAT_DONE_BF_DEF (0x00000000)

///< Sequencer program count.
#define DDAC_SEQ1_STAT_PC_BF_OFF ( 2)
#define DDAC_SEQ1_STAT_PC_BF_WID ( 5)
#define DDAC_SEQ1_STAT_PC_BF_MSK (0x0000007C)
#define DDAC_SEQ1_STAT_PC_BF_DEF (0x00000000)

///< Sequencer wait count.
#define DDAC_SEQ1_STAT_WAIT_CNT_BF_OFF ( 7)
#define DDAC_SEQ1_STAT_WAIT_CNT_BF_WID (12)
#define DDAC_SEQ1_STAT_WAIT_CNT_BF_MSK (0x0007FF80)
#define DDAC_SEQ1_STAT_WAIT_CNT_BF_DEF (0x00000000)


/** @brief DDAC_MAP_REG_SL_TCTL register description at address offset 0x1c
  *
  * Register default value:        0x00000000
  * Register full path in IP: ddac_map/reg/SL_TCTL
  * DDAC TX seq0 seq1 CSA-ping-pong  and DSA-shadow-live test control register
  */

typedef union {
  struct {
    uint32_t DSA_CTRL : 1;
    ///< DSA shadow test control.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CSA_SEL : 1;
    ///< CSA ping-pong select control.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t BYP_BFN_CSA : 1;
    ///< Bypass BFN csa ping-pong control.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t SEQ0A_CTRL : 1;
    ///< seq0 address test control.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t SEQ0D_CTRL : 1;
    ///< seq0 data test control.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t SEQ1A_CTRL : 1;
    ///< seq1 address test control.
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t SEQ1D_CTRL : 1;
    ///< seq1 data test control.
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t CSAPI_CTRL : 1;
    ///< csa ping test control.
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t CSAPO_CTRL : 1;
    ///< csa pong test control.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t TX_ENCX_CTRL : 1;
    ///< tx_encx_conf test control.
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t TX_DAC_CTRL : 1;
    ///< tx_dac_conf test control.
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t  : 21;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
  } ;
  uint32_t value;
} ddac_sl_tctl_reg_t;

#define DDAC_SL_TCTL_DEFAULT (0x00000000U)
#define DDAC_SL_TCTL_RD_MASK (0x000007ffU)
#define DDAC_SL_TCTL_WR_MASK (0x000007ffU)


///< DSA shadow test control.
#define DDAC_SL_TCTL_DSA_CTRL_BF_OFF ( 0)
#define DDAC_SL_TCTL_DSA_CTRL_BF_WID ( 1)
#define DDAC_SL_TCTL_DSA_CTRL_BF_MSK (0x00000001)
#define DDAC_SL_TCTL_DSA_CTRL_BF_DEF (0x00000000)

///< CSA ping-pong select control.
#define DDAC_SL_TCTL_CSA_SEL_BF_OFF ( 1)
#define DDAC_SL_TCTL_CSA_SEL_BF_WID ( 1)
#define DDAC_SL_TCTL_CSA_SEL_BF_MSK (0x00000002)
#define DDAC_SL_TCTL_CSA_SEL_BF_DEF (0x00000000)

///< Bypass BFN csa ping-pong control.
#define DDAC_SL_TCTL_BYP_BFN_CSA_BF_OFF ( 2)
#define DDAC_SL_TCTL_BYP_BFN_CSA_BF_WID ( 1)
#define DDAC_SL_TCTL_BYP_BFN_CSA_BF_MSK (0x00000004)
#define DDAC_SL_TCTL_BYP_BFN_CSA_BF_DEF (0x00000000)

///< seq0 address test control.
#define DDAC_SL_TCTL_SEQ0A_CTRL_BF_OFF ( 3)
#define DDAC_SL_TCTL_SEQ0A_CTRL_BF_WID ( 1)
#define DDAC_SL_TCTL_SEQ0A_CTRL_BF_MSK (0x00000008)
#define DDAC_SL_TCTL_SEQ0A_CTRL_BF_DEF (0x00000000)

///< seq0 data test control.
#define DDAC_SL_TCTL_SEQ0D_CTRL_BF_OFF ( 4)
#define DDAC_SL_TCTL_SEQ0D_CTRL_BF_WID ( 1)
#define DDAC_SL_TCTL_SEQ0D_CTRL_BF_MSK (0x00000010)
#define DDAC_SL_TCTL_SEQ0D_CTRL_BF_DEF (0x00000000)

///< seq1 address test control.
#define DDAC_SL_TCTL_SEQ1A_CTRL_BF_OFF ( 5)
#define DDAC_SL_TCTL_SEQ1A_CTRL_BF_WID ( 1)
#define DDAC_SL_TCTL_SEQ1A_CTRL_BF_MSK (0x00000020)
#define DDAC_SL_TCTL_SEQ1A_CTRL_BF_DEF (0x00000000)

///< seq1 data test control.
#define DDAC_SL_TCTL_SEQ1D_CTRL_BF_OFF ( 6)
#define DDAC_SL_TCTL_SEQ1D_CTRL_BF_WID ( 1)
#define DDAC_SL_TCTL_SEQ1D_CTRL_BF_MSK (0x00000040)
#define DDAC_SL_TCTL_SEQ1D_CTRL_BF_DEF (0x00000000)

///< csa ping test control.
#define DDAC_SL_TCTL_CSAPI_CTRL_BF_OFF ( 7)
#define DDAC_SL_TCTL_CSAPI_CTRL_BF_WID ( 1)
#define DDAC_SL_TCTL_CSAPI_CTRL_BF_MSK (0x00000080)
#define DDAC_SL_TCTL_CSAPI_CTRL_BF_DEF (0x00000000)

///< csa pong test control.
#define DDAC_SL_TCTL_CSAPO_CTRL_BF_OFF ( 8)
#define DDAC_SL_TCTL_CSAPO_CTRL_BF_WID ( 1)
#define DDAC_SL_TCTL_CSAPO_CTRL_BF_MSK (0x00000100)
#define DDAC_SL_TCTL_CSAPO_CTRL_BF_DEF (0x00000000)

///< tx_encx_conf test control.
#define DDAC_SL_TCTL_TX_ENCX_CTRL_BF_OFF ( 9)
#define DDAC_SL_TCTL_TX_ENCX_CTRL_BF_WID ( 1)
#define DDAC_SL_TCTL_TX_ENCX_CTRL_BF_MSK (0x00000200)
#define DDAC_SL_TCTL_TX_ENCX_CTRL_BF_DEF (0x00000000)

///< tx_dac_conf test control.
#define DDAC_SL_TCTL_TX_DAC_CTRL_BF_OFF (10)
#define DDAC_SL_TCTL_TX_DAC_CTRL_BF_WID ( 1)
#define DDAC_SL_TCTL_TX_DAC_CTRL_BF_MSK (0x00000400)
#define DDAC_SL_TCTL_TX_DAC_CTRL_BF_DEF (0x00000000)


/** @brief DDAC_MAP_REG_TX_ENCX_CONF0 register description at address offset 0x20
  *
  * Register default value:        0x00000000
  * Register full path in IP: ddac_map/reg/TX_ENCX_CONF0
  * Seq addr = 0x0
  */

typedef union {
  struct {
    uint32_t RST_N : 1;
    ///< Encoder reset (asynchronous). Active low.
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t NUM_PHASES : 3;
    ///< Sets the number of active encoder phases. (0x0 = 16; 0x1 = 12; 0x2
    ///< = 8; 0x3 = 6; 0x4 = 4; 0x6 = 2)
    ///< AccessType="RW/V" BitOffset="1" ResetValue="0x0"
    uint32_t ENABLE_SQUAREWAVEGEN : 1;
    ///< Activate the squarewave generator for test signal generation.
    ///< AccessType="RW/V" BitOffset="4" ResetValue="0x0"
    uint32_t LFSR_LOAD : 2;
    ///< Activate to load the LFSR seed values.
    ///< AccessType="RW/V" BitOffset="5" ResetValue="0x0"
    uint32_t HOLD2MODE : 1;
    ///< Enable  data replication for slow modes to double DAC data rate.
    ///< AccessType="RW/V" BitOffset="7" ResetValue="0x0"
    uint32_t ENABLE_SKEW_CORRECTION : 1;
    ///< Enable skew correction. Not compatible with DEM physical shifts.
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t ENABLE_SKEW_CORRECTION_PROGRAMMING : 1;
    ///< Enable the programming mode of the skew correction.
    ///< AccessType="RW/V" BitOffset="9" ResetValue="0x0"
    uint32_t SQUARE_PERIOD : 6;
    ///< Square wave generator period. The effective period is 2*(square_period+1)*Tclk.
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x0"
    uint32_t RESERVED : 16;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} ddac_tx_encx_conf0_reg_t;

#define DDAC_TX_ENCX_CONF0_DEFAULT (0x00000000U)
#define DDAC_TX_ENCX_CONF0_RD_MASK (0xffffffffU)
#define DDAC_TX_ENCX_CONF0_WR_MASK (0xffffffffU)


///< Encoder reset (asynchronous). Active low.
#define DDAC_TX_ENCX_CONF0_RST_N_BF_OFF ( 0)
#define DDAC_TX_ENCX_CONF0_RST_N_BF_WID ( 1)
#define DDAC_TX_ENCX_CONF0_RST_N_BF_MSK (0x00000001)
#define DDAC_TX_ENCX_CONF0_RST_N_BF_DEF (0x00000000)

///< Sets the number of active encoder phases. (0x0 = 16; 0x1 = 12; 0x2
///< = 8; 0x3 = 6; 0x4 = 4; 0x6 = 2)
#define DDAC_TX_ENCX_CONF0_NUM_PHASES_BF_OFF ( 1)
#define DDAC_TX_ENCX_CONF0_NUM_PHASES_BF_WID ( 3)
#define DDAC_TX_ENCX_CONF0_NUM_PHASES_BF_MSK (0x0000000E)
#define DDAC_TX_ENCX_CONF0_NUM_PHASES_BF_DEF (0x00000000)

///< Activate the squarewave generator for test signal generation.
#define DDAC_TX_ENCX_CONF0_EN_SQUAREWAVEGEN_BF_OFF ( 4)
#define DDAC_TX_ENCX_CONF0_EN_SQUAREWAVEGEN_BF_WID ( 1)
#define DDAC_TX_ENCX_CONF0_EN_SQUAREWAVEGEN_BF_MSK (0x00000010)
#define DDAC_TX_ENCX_CONF0_EN_SQUAREWAVEGEN_BF_DEF (0x00000000)

///< Activate to load the LFSR seed values.
#define DDAC_TX_ENCX_CONF0_LFSR_LOAD_BF_OFF ( 5)
#define DDAC_TX_ENCX_CONF0_LFSR_LOAD_BF_WID ( 2)
#define DDAC_TX_ENCX_CONF0_LFSR_LOAD_BF_MSK (0x00000060)
#define DDAC_TX_ENCX_CONF0_LFSR_LOAD_BF_DEF (0x00000000)

///< Enable  data replication for slow modes to double DAC data rate.
#define DDAC_TX_ENCX_CONF0_HOLD2MODE_BF_OFF ( 7)
#define DDAC_TX_ENCX_CONF0_HOLD2MODE_BF_WID ( 1)
#define DDAC_TX_ENCX_CONF0_HOLD2MODE_BF_MSK (0x00000080)
#define DDAC_TX_ENCX_CONF0_HOLD2MODE_BF_DEF (0x00000000)

///< Enable skew correction. Not compatible with DEM physical shifts.
#define DDAC_TX_ENCX_CONF0_EN_SKEW_CORRECTION_BF_OFF ( 8)
#define DDAC_TX_ENCX_CONF0_EN_SKEW_CORRECTION_BF_WID ( 1)
#define DDAC_TX_ENCX_CONF0_EN_SKEW_CORRECTION_BF_MSK (0x00000100)
#define DDAC_TX_ENCX_CONF0_EN_SKEW_CORRECTION_BF_DEF (0x00000000)

///< Enable the programming mode of the skew correction.
#define DDAC_TX_ENCX_CONF0_EN_SKEW_CORRECTION_PROGRAMMING_BF_OFF ( 9)
#define DDAC_TX_ENCX_CONF0_EN_SKEW_CORRECTION_PROGRAMMING_BF_WID ( 1)
#define DDAC_TX_ENCX_CONF0_EN_SKEW_CORRECTION_PROGRAMMING_BF_MSK (0x00000200)
#define DDAC_TX_ENCX_CONF0_EN_SKEW_CORRECTION_PROGRAMMING_BF_DEF (0x00000000)

///< Square wave generator period. The effective period is 2*(square_period+1)*Tclk.
#define DDAC_TX_ENCX_CONF0_SQUARE_PERIOD_BF_OFF (10)
#define DDAC_TX_ENCX_CONF0_SQUARE_PERIOD_BF_WID ( 6)
#define DDAC_TX_ENCX_CONF0_SQUARE_PERIOD_BF_MSK (0x0000FC00)
#define DDAC_TX_ENCX_CONF0_SQUARE_PERIOD_BF_DEF (0x00000000)

///< RESERVED
#define DDAC_TX_ENCX_CONF0_RESERVED_BF_OFF (16)
#define DDAC_TX_ENCX_CONF0_RESERVED_BF_WID (16)
#define DDAC_TX_ENCX_CONF0_RESERVED_BF_MSK (0xFFFF0000)
#define DDAC_TX_ENCX_CONF0_RESERVED_BF_DEF (0x00000000)


/** @brief DDAC_MAP_REG_TX_ENCX_CONF1 register description at address offset 0x24
  *
  * Register default value:        0x00000000
  * Register full path in IP: ddac_map/reg/TX_ENCX_CONF1
  * Seq addr = 0x1
  */

typedef union {
  struct {
    uint32_t DEM_SELECT_MSB : 3;
    ///< MSB DEM mode select. 0x0 = Off, 0x1 = Static, 0x2 = Pseudo-random,
    ///< 0x3 = CTRP, 0x4 = CSA.
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t DEM_PTR_MSB : 5;
    ///< MSB DEM pointer for static mode. Additive offset for other DEM modes.
    ///< AccessType="RW/V" BitOffset="3" ResetValue="0x0"
    uint32_t DEM_RRANGE_MSB : 3;
    ///< Number of (additive) random bits.
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t DEM_FORCE_DIRECTION_MSB : 1;
    ///< Force direction of MSB CTRP DEM.
    ///< AccessType="RW/V" BitOffset="11" ResetValue="0x0"
    uint32_t DEM_DIRECTION_MSB : 1;
    ///< Forced direction of MSB CTRP DEM. Effective only if dem_force_direction_msb
    ///< is active.
    ///< AccessType="RW/V" BitOffset="12" ResetValue="0x0"
    uint32_t DEM_SWTARGET_MSB : 5;
    ///< MSB DEM switching target for CSA DEM. To be implemented.
    ///< AccessType="RW/V" BitOffset="13" ResetValue="0x0"
    uint32_t SHIFT_MSB_PHYSICAL : 1;
    ///< Use barrel rotator instead of logical shift for MSB segment.
    ///< AccessType="RW/V" BitOffset="18" ResetValue="0x0"
    uint32_t RESERVED : 13;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="19" ResetValue="0x0"
  } ;
  uint32_t value;
} ddac_tx_encx_conf1_reg_t;

#define DDAC_TX_ENCX_CONF1_DEFAULT (0x00000000U)
#define DDAC_TX_ENCX_CONF1_RD_MASK (0xffffffffU)
#define DDAC_TX_ENCX_CONF1_WR_MASK (0xffffffffU)


///< MSB DEM mode select. 0x0 = Off, 0x1 = Static, 0x2 = Pseudo-random,
///< 0x3 = CTRP, 0x4 = CSA.
#define DDAC_TX_ENCX_CONF1_DEM_SEL_MSB_BF_OFF ( 0)
#define DDAC_TX_ENCX_CONF1_DEM_SEL_MSB_BF_WID ( 3)
#define DDAC_TX_ENCX_CONF1_DEM_SEL_MSB_BF_MSK (0x00000007)
#define DDAC_TX_ENCX_CONF1_DEM_SEL_MSB_BF_DEF (0x00000000)

///< MSB DEM pointer for static mode. Additive offset for other DEM modes.
#define DDAC_TX_ENCX_CONF1_DEM_PTR_MSB_BF_OFF ( 3)
#define DDAC_TX_ENCX_CONF1_DEM_PTR_MSB_BF_WID ( 5)
#define DDAC_TX_ENCX_CONF1_DEM_PTR_MSB_BF_MSK (0x000000F8)
#define DDAC_TX_ENCX_CONF1_DEM_PTR_MSB_BF_DEF (0x00000000)

///< Number of (additive) random bits.
#define DDAC_TX_ENCX_CONF1_DEM_RRANGE_MSB_BF_OFF ( 8)
#define DDAC_TX_ENCX_CONF1_DEM_RRANGE_MSB_BF_WID ( 3)
#define DDAC_TX_ENCX_CONF1_DEM_RRANGE_MSB_BF_MSK (0x00000700)
#define DDAC_TX_ENCX_CONF1_DEM_RRANGE_MSB_BF_DEF (0x00000000)

///< Force direction of MSB CTRP DEM.
#define DDAC_TX_ENCX_CONF1_DEM_FORCE_DIRECTION_MSB_BF_OFF (11)
#define DDAC_TX_ENCX_CONF1_DEM_FORCE_DIRECTION_MSB_BF_WID ( 1)
#define DDAC_TX_ENCX_CONF1_DEM_FORCE_DIRECTION_MSB_BF_MSK (0x00000800)
#define DDAC_TX_ENCX_CONF1_DEM_FORCE_DIRECTION_MSB_BF_DEF (0x00000000)

///< Forced direction of MSB CTRP DEM. Effective only if dem_force_direction_msb
///< is active.
#define DDAC_TX_ENCX_CONF1_DEM_DIRECTION_MSB_BF_OFF (12)
#define DDAC_TX_ENCX_CONF1_DEM_DIRECTION_MSB_BF_WID ( 1)
#define DDAC_TX_ENCX_CONF1_DEM_DIRECTION_MSB_BF_MSK (0x00001000)
#define DDAC_TX_ENCX_CONF1_DEM_DIRECTION_MSB_BF_DEF (0x00000000)

///< MSB DEM switching target for CSA DEM. To be implemented.
#define DDAC_TX_ENCX_CONF1_DEM_SWTARGET_MSB_BF_OFF (13)
#define DDAC_TX_ENCX_CONF1_DEM_SWTARGET_MSB_BF_WID ( 5)
#define DDAC_TX_ENCX_CONF1_DEM_SWTARGET_MSB_BF_MSK (0x0003E000)
#define DDAC_TX_ENCX_CONF1_DEM_SWTARGET_MSB_BF_DEF (0x00000000)

///< Use barrel rotator instead of logical shift for MSB segment.
#define DDAC_TX_ENCX_CONF1_SHIFT_MSB_PHYSICAL_BF_OFF (18)
#define DDAC_TX_ENCX_CONF1_SHIFT_MSB_PHYSICAL_BF_WID ( 1)
#define DDAC_TX_ENCX_CONF1_SHIFT_MSB_PHYSICAL_BF_MSK (0x00040000)
#define DDAC_TX_ENCX_CONF1_SHIFT_MSB_PHYSICAL_BF_DEF (0x00000000)

///< RESERVED
#define DDAC_TX_ENCX_CONF1_RESERVED_BF_OFF (19)
#define DDAC_TX_ENCX_CONF1_RESERVED_BF_WID (13)
#define DDAC_TX_ENCX_CONF1_RESERVED_BF_MSK (0xFFF80000)
#define DDAC_TX_ENCX_CONF1_RESERVED_BF_DEF (0x00000000)


/** @brief DDAC_MAP_REG_TX_ENCX_CONF2 register description at address offset 0x28
  *
  * Register default value:        0x00000000
  * Register full path in IP: ddac_map/reg/TX_ENCX_CONF2
  * Seq addr = 0x2
  */

typedef union {
  struct {
    uint32_t DEM_SELECT_ISB : 3;
    ///< ISB DEM mode select. 0x0 = Off, 0x1 = Static, 0x2 = Pseudo-random,
    ///< 0x3 = CTRP, 0x4 = CSA.
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t DEM_PTR_ISB : 3;
    ///< ISB DEM pointer for static mode. Additive offset for other DEM modes.
    ///< AccessType="RW/V" BitOffset="3" ResetValue="0x0"
    uint32_t DEM_RRANGE_ISB : 2;
    ///< Number of (additive) random bits.
    ///< AccessType="RW/V" BitOffset="6" ResetValue="0x0"
    uint32_t DEM_FORCE_DIRECTION_ISB : 1;
    ///< Force direction of ISB CTRP DEM.
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t DEM_DIRECTION_ISB : 1;
    ///< Forced direction of ISB CTRP DEM. Effective only if dem_force_direction_isb
    ///< is active.
    ///< AccessType="RW/V" BitOffset="9" ResetValue="0x0"
    uint32_t DEM_SWTARGET_ISB : 3;
    ///< ISB DEM switching target for CSA DEM. To be implemented.
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x0"
    uint32_t SHIFT_ISB_PHYSICAL : 1;
    ///< Use barrel rotator instead of logical shift for ISB segment.
    ///< AccessType="RW/V" BitOffset="13" ResetValue="0x0"
    uint32_t RESERVED : 18;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="14" ResetValue="0x0"
  } ;
  uint32_t value;
} ddac_tx_encx_conf2_reg_t;

#define DDAC_TX_ENCX_CONF2_DEFAULT (0x00000000U)
#define DDAC_TX_ENCX_CONF2_RD_MASK (0xffffffffU)
#define DDAC_TX_ENCX_CONF2_WR_MASK (0xffffffffU)


///< ISB DEM mode select. 0x0 = Off, 0x1 = Static, 0x2 = Pseudo-random,
///< 0x3 = CTRP, 0x4 = CSA.
#define DDAC_TX_ENCX_CONF2_DEM_SEL_ISB_BF_OFF ( 0)
#define DDAC_TX_ENCX_CONF2_DEM_SEL_ISB_BF_WID ( 3)
#define DDAC_TX_ENCX_CONF2_DEM_SEL_ISB_BF_MSK (0x00000007)
#define DDAC_TX_ENCX_CONF2_DEM_SEL_ISB_BF_DEF (0x00000000)

///< ISB DEM pointer for static mode. Additive offset for other DEM modes.
#define DDAC_TX_ENCX_CONF2_DEM_PTR_ISB_BF_OFF ( 3)
#define DDAC_TX_ENCX_CONF2_DEM_PTR_ISB_BF_WID ( 3)
#define DDAC_TX_ENCX_CONF2_DEM_PTR_ISB_BF_MSK (0x00000038)
#define DDAC_TX_ENCX_CONF2_DEM_PTR_ISB_BF_DEF (0x00000000)

///< Number of (additive) random bits.
#define DDAC_TX_ENCX_CONF2_DEM_RRANGE_ISB_BF_OFF ( 6)
#define DDAC_TX_ENCX_CONF2_DEM_RRANGE_ISB_BF_WID ( 2)
#define DDAC_TX_ENCX_CONF2_DEM_RRANGE_ISB_BF_MSK (0x000000C0)
#define DDAC_TX_ENCX_CONF2_DEM_RRANGE_ISB_BF_DEF (0x00000000)

///< Force direction of ISB CTRP DEM.
#define DDAC_TX_ENCX_CONF2_DEM_FORCE_DIRECTION_ISB_BF_OFF ( 8)
#define DDAC_TX_ENCX_CONF2_DEM_FORCE_DIRECTION_ISB_BF_WID ( 1)
#define DDAC_TX_ENCX_CONF2_DEM_FORCE_DIRECTION_ISB_BF_MSK (0x00000100)
#define DDAC_TX_ENCX_CONF2_DEM_FORCE_DIRECTION_ISB_BF_DEF (0x00000000)

///< Forced direction of ISB CTRP DEM. Effective only if dem_force_direction_isb
///< is active.
#define DDAC_TX_ENCX_CONF2_DEM_DIRECTION_ISB_BF_OFF ( 9)
#define DDAC_TX_ENCX_CONF2_DEM_DIRECTION_ISB_BF_WID ( 1)
#define DDAC_TX_ENCX_CONF2_DEM_DIRECTION_ISB_BF_MSK (0x00000200)
#define DDAC_TX_ENCX_CONF2_DEM_DIRECTION_ISB_BF_DEF (0x00000000)

///< ISB DEM switching target for CSA DEM. To be implemented.
#define DDAC_TX_ENCX_CONF2_DEM_SWTARGET_ISB_BF_OFF (10)
#define DDAC_TX_ENCX_CONF2_DEM_SWTARGET_ISB_BF_WID ( 3)
#define DDAC_TX_ENCX_CONF2_DEM_SWTARGET_ISB_BF_MSK (0x00001C00)
#define DDAC_TX_ENCX_CONF2_DEM_SWTARGET_ISB_BF_DEF (0x00000000)

///< Use barrel rotator instead of logical shift for ISB segment.
#define DDAC_TX_ENCX_CONF2_SHIFT_ISB_PHYSICAL_BF_OFF (13)
#define DDAC_TX_ENCX_CONF2_SHIFT_ISB_PHYSICAL_BF_WID ( 1)
#define DDAC_TX_ENCX_CONF2_SHIFT_ISB_PHYSICAL_BF_MSK (0x00002000)
#define DDAC_TX_ENCX_CONF2_SHIFT_ISB_PHYSICAL_BF_DEF (0x00000000)

///< RESERVED
#define DDAC_TX_ENCX_CONF2_RESERVED_BF_OFF (14)
#define DDAC_TX_ENCX_CONF2_RESERVED_BF_WID (18)
#define DDAC_TX_ENCX_CONF2_RESERVED_BF_MSK (0xFFFFC000)
#define DDAC_TX_ENCX_CONF2_RESERVED_BF_DEF (0x00000000)


/** @brief DDAC_MAP_REG_TX_ENCX_CONF3 register description at address offset 0x2c
  *
  * Register default value:        0x00000000
  * Register full path in IP: ddac_map/reg/TX_ENCX_CONF3
  * Seq addr = 0x3
  */

typedef union {
  struct {
    uint32_t SKEW_SET_STROBE : 1;
    ///< Strobe the skew programming for the selected cell. The skew correction
    ///< programming mode must be active.
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t SKEW_SET_ADDRESS : 5;
    ///< Select the cell to program its skew correction data. Cell 0 is the
    ///< dither cell, if available.
    ///< AccessType="RW/V" BitOffset="1" ResetValue="0x0"
    uint32_t SKEW_SET_RISING : 5;
    ///< The correction data for rising edges.
    ///< AccessType="RW/V" BitOffset="6" ResetValue="0x0"
    uint32_t SKEW_SET_FALLING : 5;
    ///< The correction data for falling edges.
    ///< AccessType="RW/V" BitOffset="11" ResetValue="0x0"
    uint32_t RESERVED : 16;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} ddac_tx_encx_conf3_reg_t;

#define DDAC_TX_ENCX_CONF3_DEFAULT (0x00000000U)
#define DDAC_TX_ENCX_CONF3_RD_MASK (0xffffffffU)
#define DDAC_TX_ENCX_CONF3_WR_MASK (0xffffffffU)


///< Strobe the skew programming for the selected cell. The skew correction
///< programming mode must be active.
#define DDAC_TX_ENCX_CONF3_SKEW_SET_STROBE_BF_OFF ( 0)
#define DDAC_TX_ENCX_CONF3_SKEW_SET_STROBE_BF_WID ( 1)
#define DDAC_TX_ENCX_CONF3_SKEW_SET_STROBE_BF_MSK (0x00000001)
#define DDAC_TX_ENCX_CONF3_SKEW_SET_STROBE_BF_DEF (0x00000000)

///< Select the cell to program its skew correction data. Cell 0 is the
///< dither cell, if available.
#define DDAC_TX_ENCX_CONF3_SKEW_SET_BF_OFF ( 1)
#define DDAC_TX_ENCX_CONF3_SKEW_SET_BF_WID ( 5)
#define DDAC_TX_ENCX_CONF3_SKEW_SET_BF_MSK (0x0000003E)
#define DDAC_TX_ENCX_CONF3_SKEW_SET_BF_DEF (0x00000000)

///< The correction data for rising edges.
#define DDAC_TX_ENCX_CONF3_SKEW_SET_RISING_BF_OFF ( 6)
#define DDAC_TX_ENCX_CONF3_SKEW_SET_RISING_BF_WID ( 5)
#define DDAC_TX_ENCX_CONF3_SKEW_SET_RISING_BF_MSK (0x000007C0)
#define DDAC_TX_ENCX_CONF3_SKEW_SET_RISING_BF_DEF (0x00000000)

///< The correction data for falling edges.
#define DDAC_TX_ENCX_CONF3_SKEW_SET_FALLING_BF_OFF (11)
#define DDAC_TX_ENCX_CONF3_SKEW_SET_FALLING_BF_WID ( 5)
#define DDAC_TX_ENCX_CONF3_SKEW_SET_FALLING_BF_MSK (0x0000F800)
#define DDAC_TX_ENCX_CONF3_SKEW_SET_FALLING_BF_DEF (0x00000000)

///< RESERVED
#define DDAC_TX_ENCX_CONF3_RESERVED_BF_OFF (16)
#define DDAC_TX_ENCX_CONF3_RESERVED_BF_WID (16)
#define DDAC_TX_ENCX_CONF3_RESERVED_BF_MSK (0xFFFF0000)
#define DDAC_TX_ENCX_CONF3_RESERVED_BF_DEF (0x00000000)


/** @brief DDAC_MAP_REG_TX_ENCX_CONF4 register description at address offset 0x30
  *
  * Register default value:        0x00000000
  * Register full path in IP: ddac_map/reg/TX_ENCX_CONF4
  * Seq addr = 0x4
  */

typedef union {
  struct {
    uint32_t RESERVED : 32;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} ddac_tx_encx_conf4_reg_t;

#define DDAC_TX_ENCX_CONF4_DEFAULT (0x00000000U)
#define DDAC_TX_ENCX_CONF4_RD_MASK (0xffffffffU)
#define DDAC_TX_ENCX_CONF4_WR_MASK (0xffffffffU)


///< RESERVED
#define DDAC_TX_ENCX_CONF4_RESERVED_BF_OFF ( 0)
#define DDAC_TX_ENCX_CONF4_RESERVED_BF_WID (32)
#define DDAC_TX_ENCX_CONF4_RESERVED_BF_MSK (0xFFFFFFFF)
#define DDAC_TX_ENCX_CONF4_RESERVED_BF_DEF (0x00000000)


/** @brief DDAC_MAP_REG_TX_ENCX_CONF5 register description at address offset 0x34
  *
  * Register default value:        0x00000000
  * Register full path in IP: ddac_map/reg/TX_ENCX_CONF5
  * Seq addr = 0x5
  */

typedef union {
  struct {
    uint32_t RESERVED : 32;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} ddac_tx_encx_conf5_reg_t;

#define DDAC_TX_ENCX_CONF5_DEFAULT (0x00000000U)
#define DDAC_TX_ENCX_CONF5_RD_MASK (0xffffffffU)
#define DDAC_TX_ENCX_CONF5_WR_MASK (0xffffffffU)


///< RESERVED
#define DDAC_TX_ENCX_CONF5_RESERVED_BF_OFF ( 0)
#define DDAC_TX_ENCX_CONF5_RESERVED_BF_WID (32)
#define DDAC_TX_ENCX_CONF5_RESERVED_BF_MSK (0xFFFFFFFF)
#define DDAC_TX_ENCX_CONF5_RESERVED_BF_DEF (0x00000000)


/** @brief DDAC_MAP_REG_TX_ENCX_CONF6 register description at address offset 0x38
  *
  * Register default value:        0x00000000
  * Register full path in IP: ddac_map/reg/TX_ENCX_CONF6
  * Seq addr = 0x6
  */

typedef union {
  struct {
    uint32_t DATA_SQUARE1 : 14;
    ///< TX encoder data square1
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t DATA_SQUARE2 : 14;
    ///< TX encoder data square2
    ///< AccessType="RW/V" BitOffset="14" ResetValue="0x0"
    uint32_t RESERVED : 4;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} ddac_tx_encx_conf6_reg_t;

#define DDAC_TX_ENCX_CONF6_DEFAULT (0x00000000U)
#define DDAC_TX_ENCX_CONF6_RD_MASK (0xffffffffU)
#define DDAC_TX_ENCX_CONF6_WR_MASK (0xffffffffU)


///< TX encoder data square1
#define DDAC_TX_ENCX_CONF6_DATA_SQUARE1_BF_OFF ( 0)
#define DDAC_TX_ENCX_CONF6_DATA_SQUARE1_BF_WID (14)
#define DDAC_TX_ENCX_CONF6_DATA_SQUARE1_BF_MSK (0x00003FFF)
#define DDAC_TX_ENCX_CONF6_DATA_SQUARE1_BF_DEF (0x00000000)

///< TX encoder data square2
#define DDAC_TX_ENCX_CONF6_DATA_SQUARE2_BF_OFF (14)
#define DDAC_TX_ENCX_CONF6_DATA_SQUARE2_BF_WID (14)
#define DDAC_TX_ENCX_CONF6_DATA_SQUARE2_BF_MSK (0x0FFFC000)
#define DDAC_TX_ENCX_CONF6_DATA_SQUARE2_BF_DEF (0x00000000)

///< RESERVED
#define DDAC_TX_ENCX_CONF6_RESERVED_BF_OFF (28)
#define DDAC_TX_ENCX_CONF6_RESERVED_BF_WID ( 4)
#define DDAC_TX_ENCX_CONF6_RESERVED_BF_MSK (0xF0000000)
#define DDAC_TX_ENCX_CONF6_RESERVED_BF_DEF (0x00000000)


/** @brief DDAC_MAP_REG_TX_ENCX_CONF7 register description at address offset 0x3c
  *
  * Register default value:        0x00000000
  * Register full path in IP: ddac_map/reg/TX_ENCX_CONF7
  * Seq addr = 0x7
  */

typedef union {
  struct {
    uint32_t LFSR_SEED0 : 31;
    ///< TX encoder seed0 value
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t RESERVED : 1;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} ddac_tx_encx_conf7_reg_t;

#define DDAC_TX_ENCX_CONF7_DEFAULT (0x00000000U)
#define DDAC_TX_ENCX_CONF7_RD_MASK (0xffffffffU)
#define DDAC_TX_ENCX_CONF7_WR_MASK (0xffffffffU)


///< TX encoder seed0 value
#define DDAC_TX_ENCX_CONF7_LFSR_SEED0_BF_OFF ( 0)
#define DDAC_TX_ENCX_CONF7_LFSR_SEED0_BF_WID (31)
#define DDAC_TX_ENCX_CONF7_LFSR_SEED0_BF_MSK (0x7FFFFFFF)
#define DDAC_TX_ENCX_CONF7_LFSR_SEED0_BF_DEF (0x00000000)

///< RESERVED
#define DDAC_TX_ENCX_CONF7_RESERVED_BF_OFF (31)
#define DDAC_TX_ENCX_CONF7_RESERVED_BF_WID ( 1)
#define DDAC_TX_ENCX_CONF7_RESERVED_BF_MSK (0x80000000)
#define DDAC_TX_ENCX_CONF7_RESERVED_BF_DEF (0x00000000)


/** @brief DDAC_MAP_REG_TX_ENCX_CONF8 register description at address offset 0x40
  *
  * Register default value:        0x00000000
  * Register full path in IP: ddac_map/reg/TX_ENCX_CONF8
  * Seq addr = 0x8
  */

typedef union {
  struct {
    uint32_t LFSR_SEED1 : 32;
    ///< TX encoder seed1 value
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} ddac_tx_encx_conf8_reg_t;

#define DDAC_TX_ENCX_CONF8_DEFAULT (0x00000000U)
#define DDAC_TX_ENCX_CONF8_RD_MASK (0xffffffffU)
#define DDAC_TX_ENCX_CONF8_WR_MASK (0xffffffffU)


///< TX encoder seed1 value
#define DDAC_TX_ENCX_CONF8_LFSR_SEED1_BF_OFF ( 0)
#define DDAC_TX_ENCX_CONF8_LFSR_SEED1_BF_WID (32)
#define DDAC_TX_ENCX_CONF8_LFSR_SEED1_BF_MSK (0xFFFFFFFF)
#define DDAC_TX_ENCX_CONF8_LFSR_SEED1_BF_DEF (0x00000000)


/** @brief DDAC_MAP_REG_TX_DAC_CONF0 register description at address offset 0x44
  *
  * Register default value:        0x00000000
  * Register full path in IP: ddac_map/reg/TX_DAC_CONF0
  * Seq addr = 0x9
  */

typedef union {
  struct {
    uint32_t LDODRV_ENABLE_BIAS : 1;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t LDODRV_VOUTSEL : 5;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="1" ResetValue="0x0"
    uint32_t LDODRV_ENABLE_EA : 1;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="6" ResetValue="0x0"
    uint32_t LDODRV_EA_PROG : 4;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="7" ResetValue="0x0"
    uint32_t RESERVED0 : 1;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="11" ResetValue="0x0"
    uint32_t LDODRV_PD_RGSHORT : 1;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="12" ResetValue="0x0"
    uint32_t LDODRV_GMB_EN : 1;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="13" ResetValue="0x0"
    uint32_t LDODRV_GMB_PROGBIAS : 3;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="14" ResetValue="0x0"
    uint32_t LDODRV_SHUNT_EN : 1;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="17" ResetValue="0x0"
    uint32_t LDODRV_SHUNT_BIAS : 3;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="18" ResetValue="0x0"
    uint32_t LDODRV_SHUNT1V2_EN : 1;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="21" ResetValue="0x0"
    uint32_t RESERVED1 : 10;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="22" ResetValue="0x0"
  } ;
  uint32_t value;
} ddac_tx_dac_conf0_reg_t;

#define DDAC_TX_DAC_CONF0_DEFAULT (0x00000000U)
#define DDAC_TX_DAC_CONF0_RD_MASK (0xffffffffU)
#define DDAC_TX_DAC_CONF0_WR_MASK (0xffffffffU)


///< To Be Done
#define DDAC_TX_DAC_CONF0_LDODRV_EN_BIAS_BF_OFF ( 0)
#define DDAC_TX_DAC_CONF0_LDODRV_EN_BIAS_BF_WID ( 1)
#define DDAC_TX_DAC_CONF0_LDODRV_EN_BIAS_BF_MSK (0x00000001)
#define DDAC_TX_DAC_CONF0_LDODRV_EN_BIAS_BF_DEF (0x00000000)

///< To Be Done
#define DDAC_TX_DAC_CONF0_LDODRV_VOUTSEL_BF_OFF ( 1)
#define DDAC_TX_DAC_CONF0_LDODRV_VOUTSEL_BF_WID ( 5)
#define DDAC_TX_DAC_CONF0_LDODRV_VOUTSEL_BF_MSK (0x0000003E)
#define DDAC_TX_DAC_CONF0_LDODRV_VOUTSEL_BF_DEF (0x00000000)

///< To Be Done
#define DDAC_TX_DAC_CONF0_LDODRV_EN_EA_BF_OFF ( 6)
#define DDAC_TX_DAC_CONF0_LDODRV_EN_EA_BF_WID ( 1)
#define DDAC_TX_DAC_CONF0_LDODRV_EN_EA_BF_MSK (0x00000040)
#define DDAC_TX_DAC_CONF0_LDODRV_EN_EA_BF_DEF (0x00000000)

///< To Be Done
#define DDAC_TX_DAC_CONF0_LDODRV_EA_PROG_BF_OFF ( 7)
#define DDAC_TX_DAC_CONF0_LDODRV_EA_PROG_BF_WID ( 4)
#define DDAC_TX_DAC_CONF0_LDODRV_EA_PROG_BF_MSK (0x00000780)
#define DDAC_TX_DAC_CONF0_LDODRV_EA_PROG_BF_DEF (0x00000000)

///< RESERVED
#define DDAC_TX_DAC_CONF0_RESERVED0_BF_OFF (11)
#define DDAC_TX_DAC_CONF0_RESERVED0_BF_WID ( 1)
#define DDAC_TX_DAC_CONF0_RESERVED0_BF_MSK (0x00000800)
#define DDAC_TX_DAC_CONF0_RESERVED0_BF_DEF (0x00000000)

///< To Be Done
#define DDAC_TX_DAC_CONF0_LDODRV_PD_RGSHORT_BF_OFF (12)
#define DDAC_TX_DAC_CONF0_LDODRV_PD_RGSHORT_BF_WID ( 1)
#define DDAC_TX_DAC_CONF0_LDODRV_PD_RGSHORT_BF_MSK (0x00001000)
#define DDAC_TX_DAC_CONF0_LDODRV_PD_RGSHORT_BF_DEF (0x00000000)

///< To Be Done
#define DDAC_TX_DAC_CONF0_LDODRV_GMB_EN_BF_OFF (13)
#define DDAC_TX_DAC_CONF0_LDODRV_GMB_EN_BF_WID ( 1)
#define DDAC_TX_DAC_CONF0_LDODRV_GMB_EN_BF_MSK (0x00002000)
#define DDAC_TX_DAC_CONF0_LDODRV_GMB_EN_BF_DEF (0x00000000)

///< To Be Done
#define DDAC_TX_DAC_CONF0_LDODRV_GMB_PROGBIAS_BF_OFF (14)
#define DDAC_TX_DAC_CONF0_LDODRV_GMB_PROGBIAS_BF_WID ( 3)
#define DDAC_TX_DAC_CONF0_LDODRV_GMB_PROGBIAS_BF_MSK (0x0001C000)
#define DDAC_TX_DAC_CONF0_LDODRV_GMB_PROGBIAS_BF_DEF (0x00000000)

///< To Be Done
#define DDAC_TX_DAC_CONF0_LDODRV_SHUNT_EN_BF_OFF (17)
#define DDAC_TX_DAC_CONF0_LDODRV_SHUNT_EN_BF_WID ( 1)
#define DDAC_TX_DAC_CONF0_LDODRV_SHUNT_EN_BF_MSK (0x00020000)
#define DDAC_TX_DAC_CONF0_LDODRV_SHUNT_EN_BF_DEF (0x00000000)

///< To Be Done
#define DDAC_TX_DAC_CONF0_LDODRV_SHUNT_BIAS_BF_OFF (18)
#define DDAC_TX_DAC_CONF0_LDODRV_SHUNT_BIAS_BF_WID ( 3)
#define DDAC_TX_DAC_CONF0_LDODRV_SHUNT_BIAS_BF_MSK (0x001C0000)
#define DDAC_TX_DAC_CONF0_LDODRV_SHUNT_BIAS_BF_DEF (0x00000000)

///< To Be Done
#define DDAC_TX_DAC_CONF0_LDODRV_SHUNT1V2_EN_BF_OFF (21)
#define DDAC_TX_DAC_CONF0_LDODRV_SHUNT1V2_EN_BF_WID ( 1)
#define DDAC_TX_DAC_CONF0_LDODRV_SHUNT1V2_EN_BF_MSK (0x00200000)
#define DDAC_TX_DAC_CONF0_LDODRV_SHUNT1V2_EN_BF_DEF (0x00000000)

///< RESERVED
#define DDAC_TX_DAC_CONF0_RESERVED1_BF_OFF (22)
#define DDAC_TX_DAC_CONF0_RESERVED1_BF_WID (10)
#define DDAC_TX_DAC_CONF0_RESERVED1_BF_MSK (0xFFC00000)
#define DDAC_TX_DAC_CONF0_RESERVED1_BF_DEF (0x00000000)


/** @brief DDAC_MAP_REG_TX_DAC_CONF1 register description at address offset 0x48
  *
  * Register default value:        0x00000000
  * Register full path in IP: ddac_map/reg/TX_DAC_CONF1
  * Seq addr = 0xa
  */

typedef union {
  struct {
    uint32_t LDOCLK_ENABLE_BIAS : 1;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t LDOCLK_VOUTSEL : 5;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="1" ResetValue="0x0"
    uint32_t LDOCLK_ENABLE_EA : 1;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="6" ResetValue="0x0"
    uint32_t LDOCLK_EA_PROG : 4;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="7" ResetValue="0x0"
    uint32_t RESERVED0 : 1;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="11" ResetValue="0x0"
    uint32_t LDOCLK_PD_RGSHORT : 1;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="12" ResetValue="0x0"
    uint32_t LDOCLK_GMB_EN : 1;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="13" ResetValue="0x0"
    uint32_t LDOCLK_GMB_PROGBIAS : 3;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="14" ResetValue="0x0"
    uint32_t LDOCLK_SHUNT_EN : 1;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="17" ResetValue="0x0"
    uint32_t LDOCLK_SHUNT_BIAS : 3;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="18" ResetValue="0x0"
    uint32_t LDOCLK_SHUNT1V2_EN : 1;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="21" ResetValue="0x0"
    uint32_t RESERVED1 : 10;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="22" ResetValue="0x0"
  } ;
  uint32_t value;
} ddac_tx_dac_conf1_reg_t;

#define DDAC_TX_DAC_CONF1_DEFAULT (0x00000000U)
#define DDAC_TX_DAC_CONF1_RD_MASK (0xffffffffU)
#define DDAC_TX_DAC_CONF1_WR_MASK (0xffffffffU)


///< To Be Done
#define DDAC_TX_DAC_CONF1_LDOCLK_EN_BIAS_BF_OFF ( 0)
#define DDAC_TX_DAC_CONF1_LDOCLK_EN_BIAS_BF_WID ( 1)
#define DDAC_TX_DAC_CONF1_LDOCLK_EN_BIAS_BF_MSK (0x00000001)
#define DDAC_TX_DAC_CONF1_LDOCLK_EN_BIAS_BF_DEF (0x00000000)

///< To Be Done
#define DDAC_TX_DAC_CONF1_LDOCLK_VOUTSEL_BF_OFF ( 1)
#define DDAC_TX_DAC_CONF1_LDOCLK_VOUTSEL_BF_WID ( 5)
#define DDAC_TX_DAC_CONF1_LDOCLK_VOUTSEL_BF_MSK (0x0000003E)
#define DDAC_TX_DAC_CONF1_LDOCLK_VOUTSEL_BF_DEF (0x00000000)

///< To Be Done
#define DDAC_TX_DAC_CONF1_LDOCLK_EN_EA_BF_OFF ( 6)
#define DDAC_TX_DAC_CONF1_LDOCLK_EN_EA_BF_WID ( 1)
#define DDAC_TX_DAC_CONF1_LDOCLK_EN_EA_BF_MSK (0x00000040)
#define DDAC_TX_DAC_CONF1_LDOCLK_EN_EA_BF_DEF (0x00000000)

///< To Be Done
#define DDAC_TX_DAC_CONF1_LDOCLK_EA_PROG_BF_OFF ( 7)
#define DDAC_TX_DAC_CONF1_LDOCLK_EA_PROG_BF_WID ( 4)
#define DDAC_TX_DAC_CONF1_LDOCLK_EA_PROG_BF_MSK (0x00000780)
#define DDAC_TX_DAC_CONF1_LDOCLK_EA_PROG_BF_DEF (0x00000000)

///< RESERVED
#define DDAC_TX_DAC_CONF1_RESERVED0_BF_OFF (11)
#define DDAC_TX_DAC_CONF1_RESERVED0_BF_WID ( 1)
#define DDAC_TX_DAC_CONF1_RESERVED0_BF_MSK (0x00000800)
#define DDAC_TX_DAC_CONF1_RESERVED0_BF_DEF (0x00000000)

///< To Be Done
#define DDAC_TX_DAC_CONF1_LDOCLK_PD_RGSHORT_BF_OFF (12)
#define DDAC_TX_DAC_CONF1_LDOCLK_PD_RGSHORT_BF_WID ( 1)
#define DDAC_TX_DAC_CONF1_LDOCLK_PD_RGSHORT_BF_MSK (0x00001000)
#define DDAC_TX_DAC_CONF1_LDOCLK_PD_RGSHORT_BF_DEF (0x00000000)

///< To Be Done
#define DDAC_TX_DAC_CONF1_LDOCLK_GMB_EN_BF_OFF (13)
#define DDAC_TX_DAC_CONF1_LDOCLK_GMB_EN_BF_WID ( 1)
#define DDAC_TX_DAC_CONF1_LDOCLK_GMB_EN_BF_MSK (0x00002000)
#define DDAC_TX_DAC_CONF1_LDOCLK_GMB_EN_BF_DEF (0x00000000)

///< To Be Done
#define DDAC_TX_DAC_CONF1_LDOCLK_GMB_PROGBIAS_BF_OFF (14)
#define DDAC_TX_DAC_CONF1_LDOCLK_GMB_PROGBIAS_BF_WID ( 3)
#define DDAC_TX_DAC_CONF1_LDOCLK_GMB_PROGBIAS_BF_MSK (0x0001C000)
#define DDAC_TX_DAC_CONF1_LDOCLK_GMB_PROGBIAS_BF_DEF (0x00000000)

///< To Be Done
#define DDAC_TX_DAC_CONF1_LDOCLK_SHUNT_EN_BF_OFF (17)
#define DDAC_TX_DAC_CONF1_LDOCLK_SHUNT_EN_BF_WID ( 1)
#define DDAC_TX_DAC_CONF1_LDOCLK_SHUNT_EN_BF_MSK (0x00020000)
#define DDAC_TX_DAC_CONF1_LDOCLK_SHUNT_EN_BF_DEF (0x00000000)

///< To Be Done
#define DDAC_TX_DAC_CONF1_LDOCLK_SHUNT_BIAS_BF_OFF (18)
#define DDAC_TX_DAC_CONF1_LDOCLK_SHUNT_BIAS_BF_WID ( 3)
#define DDAC_TX_DAC_CONF1_LDOCLK_SHUNT_BIAS_BF_MSK (0x001C0000)
#define DDAC_TX_DAC_CONF1_LDOCLK_SHUNT_BIAS_BF_DEF (0x00000000)

///< To Be Done
#define DDAC_TX_DAC_CONF1_LDOCLK_SHUNT1V2_EN_BF_OFF (21)
#define DDAC_TX_DAC_CONF1_LDOCLK_SHUNT1V2_EN_BF_WID ( 1)
#define DDAC_TX_DAC_CONF1_LDOCLK_SHUNT1V2_EN_BF_MSK (0x00200000)
#define DDAC_TX_DAC_CONF1_LDOCLK_SHUNT1V2_EN_BF_DEF (0x00000000)

///< RESERVED
#define DDAC_TX_DAC_CONF1_RESERVED1_BF_OFF (22)
#define DDAC_TX_DAC_CONF1_RESERVED1_BF_WID (10)
#define DDAC_TX_DAC_CONF1_RESERVED1_BF_MSK (0xFFC00000)
#define DDAC_TX_DAC_CONF1_RESERVED1_BF_DEF (0x00000000)


/** @brief DDAC_MAP_REG_TX_DAC_CONF2 register description at address offset 0x4c
  *
  * Register default value:        0x00000000
  * Register full path in IP: ddac_map/reg/TX_DAC_CONF2
  * Seq addr = 0xb
  */

typedef union {
  struct {
    uint32_t LDOSER_ENABLE_BIAS : 1;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t LDOSER_VOUTSEL : 5;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="1" ResetValue="0x0"
    uint32_t LDOSER_ENABLE_EA : 1;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="6" ResetValue="0x0"
    uint32_t LDOSER_EA_PROG : 4;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="7" ResetValue="0x0"
    uint32_t RESERVED0 : 1;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="11" ResetValue="0x0"
    uint32_t LDOSER_PD_RGSHORT : 1;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="12" ResetValue="0x0"
    uint32_t LDOSER_GMB_EN : 1;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="13" ResetValue="0x0"
    uint32_t LDOSER_GMB_PROGBIAS : 3;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="14" ResetValue="0x0"
    uint32_t LDOSER_SHUNT_EN : 1;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="17" ResetValue="0x0"
    uint32_t LDOSER_SHUNT_BIAS : 3;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="18" ResetValue="0x0"
    uint32_t LDOSER_SHUNT1V2_EN : 1;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="21" ResetValue="0x0"
    uint32_t RESERVED1 : 10;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="22" ResetValue="0x0"
  } ;
  uint32_t value;
} ddac_tx_dac_conf2_reg_t;

#define DDAC_TX_DAC_CONF2_DEFAULT (0x00000000U)
#define DDAC_TX_DAC_CONF2_RD_MASK (0xffffffffU)
#define DDAC_TX_DAC_CONF2_WR_MASK (0xffffffffU)


///< To Be Done
#define DDAC_TX_DAC_CONF2_LDOSER_EN_BIAS_BF_OFF ( 0)
#define DDAC_TX_DAC_CONF2_LDOSER_EN_BIAS_BF_WID ( 1)
#define DDAC_TX_DAC_CONF2_LDOSER_EN_BIAS_BF_MSK (0x00000001)
#define DDAC_TX_DAC_CONF2_LDOSER_EN_BIAS_BF_DEF (0x00000000)

///< To Be Done
#define DDAC_TX_DAC_CONF2_LDOSER_VOUTSEL_BF_OFF ( 1)
#define DDAC_TX_DAC_CONF2_LDOSER_VOUTSEL_BF_WID ( 5)
#define DDAC_TX_DAC_CONF2_LDOSER_VOUTSEL_BF_MSK (0x0000003E)
#define DDAC_TX_DAC_CONF2_LDOSER_VOUTSEL_BF_DEF (0x00000000)

///< To Be Done
#define DDAC_TX_DAC_CONF2_LDOSER_EN_EA_BF_OFF ( 6)
#define DDAC_TX_DAC_CONF2_LDOSER_EN_EA_BF_WID ( 1)
#define DDAC_TX_DAC_CONF2_LDOSER_EN_EA_BF_MSK (0x00000040)
#define DDAC_TX_DAC_CONF2_LDOSER_EN_EA_BF_DEF (0x00000000)

///< To Be Done
#define DDAC_TX_DAC_CONF2_LDOSER_EA_PROG_BF_OFF ( 7)
#define DDAC_TX_DAC_CONF2_LDOSER_EA_PROG_BF_WID ( 4)
#define DDAC_TX_DAC_CONF2_LDOSER_EA_PROG_BF_MSK (0x00000780)
#define DDAC_TX_DAC_CONF2_LDOSER_EA_PROG_BF_DEF (0x00000000)

///< RESERVED
#define DDAC_TX_DAC_CONF2_RESERVED0_BF_OFF (11)
#define DDAC_TX_DAC_CONF2_RESERVED0_BF_WID ( 1)
#define DDAC_TX_DAC_CONF2_RESERVED0_BF_MSK (0x00000800)
#define DDAC_TX_DAC_CONF2_RESERVED0_BF_DEF (0x00000000)

///< To Be Done
#define DDAC_TX_DAC_CONF2_LDOSER_PD_RGSHORT_BF_OFF (12)
#define DDAC_TX_DAC_CONF2_LDOSER_PD_RGSHORT_BF_WID ( 1)
#define DDAC_TX_DAC_CONF2_LDOSER_PD_RGSHORT_BF_MSK (0x00001000)
#define DDAC_TX_DAC_CONF2_LDOSER_PD_RGSHORT_BF_DEF (0x00000000)

///< To Be Done
#define DDAC_TX_DAC_CONF2_LDOSER_GMB_EN_BF_OFF (13)
#define DDAC_TX_DAC_CONF2_LDOSER_GMB_EN_BF_WID ( 1)
#define DDAC_TX_DAC_CONF2_LDOSER_GMB_EN_BF_MSK (0x00002000)
#define DDAC_TX_DAC_CONF2_LDOSER_GMB_EN_BF_DEF (0x00000000)

///< To Be Done
#define DDAC_TX_DAC_CONF2_LDOSER_GMB_PROGBIAS_BF_OFF (14)
#define DDAC_TX_DAC_CONF2_LDOSER_GMB_PROGBIAS_BF_WID ( 3)
#define DDAC_TX_DAC_CONF2_LDOSER_GMB_PROGBIAS_BF_MSK (0x0001C000)
#define DDAC_TX_DAC_CONF2_LDOSER_GMB_PROGBIAS_BF_DEF (0x00000000)

///< To Be Done
#define DDAC_TX_DAC_CONF2_LDOSER_SHUNT_EN_BF_OFF (17)
#define DDAC_TX_DAC_CONF2_LDOSER_SHUNT_EN_BF_WID ( 1)
#define DDAC_TX_DAC_CONF2_LDOSER_SHUNT_EN_BF_MSK (0x00020000)
#define DDAC_TX_DAC_CONF2_LDOSER_SHUNT_EN_BF_DEF (0x00000000)

///< To Be Done
#define DDAC_TX_DAC_CONF2_LDOSER_SHUNT_BIAS_BF_OFF (18)
#define DDAC_TX_DAC_CONF2_LDOSER_SHUNT_BIAS_BF_WID ( 3)
#define DDAC_TX_DAC_CONF2_LDOSER_SHUNT_BIAS_BF_MSK (0x001C0000)
#define DDAC_TX_DAC_CONF2_LDOSER_SHUNT_BIAS_BF_DEF (0x00000000)

///< To Be Done
#define DDAC_TX_DAC_CONF2_LDOSER_SHUNT1V2_EN_BF_OFF (21)
#define DDAC_TX_DAC_CONF2_LDOSER_SHUNT1V2_EN_BF_WID ( 1)
#define DDAC_TX_DAC_CONF2_LDOSER_SHUNT1V2_EN_BF_MSK (0x00200000)
#define DDAC_TX_DAC_CONF2_LDOSER_SHUNT1V2_EN_BF_DEF (0x00000000)

///< RESERVED
#define DDAC_TX_DAC_CONF2_RESERVED1_BF_OFF (22)
#define DDAC_TX_DAC_CONF2_RESERVED1_BF_WID (10)
#define DDAC_TX_DAC_CONF2_RESERVED1_BF_MSK (0xFFC00000)
#define DDAC_TX_DAC_CONF2_RESERVED1_BF_DEF (0x00000000)


/** @brief DDAC_MAP_REG_TX_DAC_CONF3 register description at address offset 0x50
  *
  * Register default value:        0x00000000
  * Register full path in IP: ddac_map/reg/TX_DAC_CONF3
  * Seq addr = 0xc
  */

typedef union {
  struct {
    uint32_t CLKRX_ENABLE : 1;
    ///< Enable TX clock receiver.
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CLKMUX_DIV : 1;
    ///< Enable TX clock multiplexer divided path (e.g. for 8 GHz mode).
    ///< AccessType="RW/V" BitOffset="1" ResetValue="0x0"
    uint32_t CLKMUX_DISABLE : 1;
    ///< Disables RF clock multiplexer (debug only).
    ///< AccessType="RW/V" BitOffset="2" ResetValue="0x0"
    uint32_t CLKDIV_RSTN : 1;
    ///< Pseudo-asynchronous reset of the TX clock divider.
    ///< AccessType="RW/V" BitOffset="3" ResetValue="0x0"
    uint32_t CLKDIV_MODE3Q : 1;
    ///< Clock divider three quarter mode. Refer to programming table for individual
    ///< modes.
    ///< AccessType="RW/V" BitOffset="4" ResetValue="0x0"
    uint32_t CLKDIV_DIV6 : 1;
    ///< Clock divider divide by six mode. Refer to programming table for individual
    ///< modes.
    ///< AccessType="RW/V" BitOffset="5" ResetValue="0x0"
    uint32_t CLKDIV_DISABLE_SYNC : 1;
    ///< Disable clock divider synchronization without loosing phase relation.
    ///< Sync clock must be present for several cycles after activation.
    ///< AccessType="RW/V" BitOffset="6" ResetValue="0x0"
    uint32_t CLKDIV_DISABLE_SYNC_FORCE : 1;
    ///< Force disable of clock divider synchronization. Can loose phase if
    ///< sync clock is still present.
    ///< AccessType="RW/V" BitOffset="7" ResetValue="0x0"
    uint32_t CLKDIV_INVERT_SYNC_SAMPLING : 1;
    ///< Invert the RF clock phase used to sample the synchronization clock.
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CLKDIV_PROG_DELAY_SYNC : 4;
    ///< Program delay of synchronization clock in RF clock periods. Effectively
    ///< sets the TX phase relative to the sync clock.
    ///< AccessType="RW/V" BitOffset="9" ResetValue="0x0"
    uint32_t CLKDIV_DISABLE_RF : 1;
    ///< Disables the divided RF output to the clock multiplexer. Saves power
    ///< when the RF clock is direcctly used.
    ///< AccessType="RW/V" BitOffset="13" ResetValue="0x0"
    uint32_t CLKDIV_RF_PROG : 2;
    ///< Chooses the divider output to the clock multiplexer. Refer to programming
    ///< table for individual modes.
    ///< AccessType="RW/V" BitOffset="14" ResetValue="0x0"
    uint32_t CLKDIV_DISABLE_SERHI : 1;
    ///< Disables the divided output to the high-rate serializer.
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CLKDIV_SERHI_PROG : 2;
    ///< Chooses the high-rate serializer output of the divider. Refer to programming
    ///< table for individual modes.
    ///< AccessType="RW/V" BitOffset="17" ResetValue="0x0"
    uint32_t CLKDIV_DISABLE_SERLO : 1;
    ///< Disables the divided output to the low-rate serializer.
    ///< AccessType="RW/V" BitOffset="19" ResetValue="0x0"
    uint32_t CLKDIV_SERLO_PROG : 2;
    ///< Chooses the low-rate serializer output of the divider. Refer to programming
    ///< table for individual modes.
    ///< AccessType="RW/V" BitOffset="20" ResetValue="0x0"
    uint32_t CLKDIV_DISABLE_ENC : 1;
    ///< Disables the divided output to the base-rate serializer.
    ///< AccessType="RW/V" BitOffset="22" ResetValue="0x0"
    uint32_t CLKDIV_DISABLE_DIG : 1;
    ///< Disables the divided output to the DFE and TX encoder.
    ///< AccessType="RW/V" BitOffset="23" ResetValue="0x0"
    uint32_t CLKDIV_INVERT_DIG : 1;
    ///< Inverts the divided output to the DFE and TX encoder.
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t CLKDIV_PROG_BTICOMP : 4;
    ///< Selects the BTI compensation frequency.
    ///< AccessType="RW/V" BitOffset="25" ResetValue="0x0"
    uint32_t SER_BYPASS16TO4 : 1;
    ///< Bypass the base rate serializer. Refer to programming table for individual
    ///< modes.
    ///< AccessType="RW/V" BitOffset="29" ResetValue="0x0"
    uint32_t SER_BYPASS4TO2 : 1;
    ///< Bypass the low-rate serializer. Refer to programming table for individual
    ///< modes.
    ///< AccessType="RW/V" BitOffset="30" ResetValue="0x0"
    uint32_t RESERVED : 1;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} ddac_tx_dac_conf3_reg_t;

#define DDAC_TX_DAC_CONF3_DEFAULT (0x00000000U)
#define DDAC_TX_DAC_CONF3_RD_MASK (0xffffffffU)
#define DDAC_TX_DAC_CONF3_WR_MASK (0xffffffffU)


///< Enable TX clock receiver.
#define DDAC_TX_DAC_CONF3_CLKRX_EN_BF_OFF ( 0)
#define DDAC_TX_DAC_CONF3_CLKRX_EN_BF_WID ( 1)
#define DDAC_TX_DAC_CONF3_CLKRX_EN_BF_MSK (0x00000001)
#define DDAC_TX_DAC_CONF3_CLKRX_EN_BF_DEF (0x00000000)

///< Enable TX clock multiplexer divided path (e.g. for 8 GHz mode).
#define DDAC_TX_DAC_CONF3_CLKMUX_DIV_BF_OFF ( 1)
#define DDAC_TX_DAC_CONF3_CLKMUX_DIV_BF_WID ( 1)
#define DDAC_TX_DAC_CONF3_CLKMUX_DIV_BF_MSK (0x00000002)
#define DDAC_TX_DAC_CONF3_CLKMUX_DIV_BF_DEF (0x00000000)

///< Disables RF clock multiplexer (debug only).
#define DDAC_TX_DAC_CONF3_CLKMUX_DIS_BF_OFF ( 2)
#define DDAC_TX_DAC_CONF3_CLKMUX_DIS_BF_WID ( 1)
#define DDAC_TX_DAC_CONF3_CLKMUX_DIS_BF_MSK (0x00000004)
#define DDAC_TX_DAC_CONF3_CLKMUX_DIS_BF_DEF (0x00000000)

///< Pseudo-asynchronous reset of the TX clock divider.
#define DDAC_TX_DAC_CONF3_CLKDIV_RSTN_BF_OFF ( 3)
#define DDAC_TX_DAC_CONF3_CLKDIV_RSTN_BF_WID ( 1)
#define DDAC_TX_DAC_CONF3_CLKDIV_RSTN_BF_MSK (0x00000008)
#define DDAC_TX_DAC_CONF3_CLKDIV_RSTN_BF_DEF (0x00000000)

///< Clock divider three quarter mode. Refer to programming table for individual
///< modes.
#define DDAC_TX_DAC_CONF3_CLKDIV_MODE3Q_BF_OFF ( 4)
#define DDAC_TX_DAC_CONF3_CLKDIV_MODE3Q_BF_WID ( 1)
#define DDAC_TX_DAC_CONF3_CLKDIV_MODE3Q_BF_MSK (0x00000010)
#define DDAC_TX_DAC_CONF3_CLKDIV_MODE3Q_BF_DEF (0x00000000)

///< Clock divider divide by six mode. Refer to programming table for individual
///< modes.
#define DDAC_TX_DAC_CONF3_CLKDIV_DIV6_BF_OFF ( 5)
#define DDAC_TX_DAC_CONF3_CLKDIV_DIV6_BF_WID ( 1)
#define DDAC_TX_DAC_CONF3_CLKDIV_DIV6_BF_MSK (0x00000020)
#define DDAC_TX_DAC_CONF3_CLKDIV_DIV6_BF_DEF (0x00000000)

///< Disable clock divider synchronization without loosing phase relation.
///< Sync clock must be present for several cycles after activation.
#define DDAC_TX_DAC_CONF3_CLKDIV_DIS_SYNC_BF_OFF ( 6)
#define DDAC_TX_DAC_CONF3_CLKDIV_DIS_SYNC_BF_WID ( 1)
#define DDAC_TX_DAC_CONF3_CLKDIV_DIS_SYNC_BF_MSK (0x00000040)
#define DDAC_TX_DAC_CONF3_CLKDIV_DIS_SYNC_BF_DEF (0x00000000)

///< Force disable of clock divider synchronization. Can loose phase if
///< sync clock is still present.
#define DDAC_TX_DAC_CONF3_CLKDIV_DIS_SYNC_FORCE_BF_OFF ( 7)
#define DDAC_TX_DAC_CONF3_CLKDIV_DIS_SYNC_FORCE_BF_WID ( 1)
#define DDAC_TX_DAC_CONF3_CLKDIV_DIS_SYNC_FORCE_BF_MSK (0x00000080)
#define DDAC_TX_DAC_CONF3_CLKDIV_DIS_SYNC_FORCE_BF_DEF (0x00000000)

///< Invert the RF clock phase used to sample the synchronization clock.
#define DDAC_TX_DAC_CONF3_CLKDIV_INVERT_SYNC_SAMPLING_BF_OFF ( 8)
#define DDAC_TX_DAC_CONF3_CLKDIV_INVERT_SYNC_SAMPLING_BF_WID ( 1)
#define DDAC_TX_DAC_CONF3_CLKDIV_INVERT_SYNC_SAMPLING_BF_MSK (0x00000100)
#define DDAC_TX_DAC_CONF3_CLKDIV_INVERT_SYNC_SAMPLING_BF_DEF (0x00000000)

///< Program delay of synchronization clock in RF clock periods. Effectively
///< sets the TX phase relative to the sync clock.
#define DDAC_TX_DAC_CONF3_CLKDIV_PROG_DELAY_SYNC_BF_OFF ( 9)
#define DDAC_TX_DAC_CONF3_CLKDIV_PROG_DELAY_SYNC_BF_WID ( 4)
#define DDAC_TX_DAC_CONF3_CLKDIV_PROG_DELAY_SYNC_BF_MSK (0x00001E00)
#define DDAC_TX_DAC_CONF3_CLKDIV_PROG_DELAY_SYNC_BF_DEF (0x00000000)

///< Disables the divided RF output to the clock multiplexer. Saves power
///< when the RF clock is direcctly used.
#define DDAC_TX_DAC_CONF3_CLKDIV_DIS_RF_BF_OFF (13)
#define DDAC_TX_DAC_CONF3_CLKDIV_DIS_RF_BF_WID ( 1)
#define DDAC_TX_DAC_CONF3_CLKDIV_DIS_RF_BF_MSK (0x00002000)
#define DDAC_TX_DAC_CONF3_CLKDIV_DIS_RF_BF_DEF (0x00000000)

///< Chooses the divider output to the clock multiplexer. Refer to programming
///< table for individual modes.
#define DDAC_TX_DAC_CONF3_CLKDIV_RF_PROG_BF_OFF (14)
#define DDAC_TX_DAC_CONF3_CLKDIV_RF_PROG_BF_WID ( 2)
#define DDAC_TX_DAC_CONF3_CLKDIV_RF_PROG_BF_MSK (0x0000C000)
#define DDAC_TX_DAC_CONF3_CLKDIV_RF_PROG_BF_DEF (0x00000000)

///< Disables the divided output to the high-rate serializer.
#define DDAC_TX_DAC_CONF3_CLKDIV_DIS_SERHI_BF_OFF (16)
#define DDAC_TX_DAC_CONF3_CLKDIV_DIS_SERHI_BF_WID ( 1)
#define DDAC_TX_DAC_CONF3_CLKDIV_DIS_SERHI_BF_MSK (0x00010000)
#define DDAC_TX_DAC_CONF3_CLKDIV_DIS_SERHI_BF_DEF (0x00000000)

///< Chooses the high-rate serializer output of the divider. Refer to programming
///< table for individual modes.
#define DDAC_TX_DAC_CONF3_CLKDIV_SERHI_PROG_BF_OFF (17)
#define DDAC_TX_DAC_CONF3_CLKDIV_SERHI_PROG_BF_WID ( 2)
#define DDAC_TX_DAC_CONF3_CLKDIV_SERHI_PROG_BF_MSK (0x00060000)
#define DDAC_TX_DAC_CONF3_CLKDIV_SERHI_PROG_BF_DEF (0x00000000)

///< Disables the divided output to the low-rate serializer.
#define DDAC_TX_DAC_CONF3_CLKDIV_DIS_SERLO_BF_OFF (19)
#define DDAC_TX_DAC_CONF3_CLKDIV_DIS_SERLO_BF_WID ( 1)
#define DDAC_TX_DAC_CONF3_CLKDIV_DIS_SERLO_BF_MSK (0x00080000)
#define DDAC_TX_DAC_CONF3_CLKDIV_DIS_SERLO_BF_DEF (0x00000000)

///< Chooses the low-rate serializer output of the divider. Refer to programming
///< table for individual modes.
#define DDAC_TX_DAC_CONF3_CLKDIV_SERLO_PROG_BF_OFF (20)
#define DDAC_TX_DAC_CONF3_CLKDIV_SERLO_PROG_BF_WID ( 2)
#define DDAC_TX_DAC_CONF3_CLKDIV_SERLO_PROG_BF_MSK (0x00300000)
#define DDAC_TX_DAC_CONF3_CLKDIV_SERLO_PROG_BF_DEF (0x00000000)

///< Disables the divided output to the base-rate serializer.
#define DDAC_TX_DAC_CONF3_CLKDIV_DIS_ENC_BF_OFF (22)
#define DDAC_TX_DAC_CONF3_CLKDIV_DIS_ENC_BF_WID ( 1)
#define DDAC_TX_DAC_CONF3_CLKDIV_DIS_ENC_BF_MSK (0x00400000)
#define DDAC_TX_DAC_CONF3_CLKDIV_DIS_ENC_BF_DEF (0x00000000)

///< Disables the divided output to the DFE and TX encoder.
#define DDAC_TX_DAC_CONF3_CLKDIV_DIS_DIG_BF_OFF (23)
#define DDAC_TX_DAC_CONF3_CLKDIV_DIS_DIG_BF_WID ( 1)
#define DDAC_TX_DAC_CONF3_CLKDIV_DIS_DIG_BF_MSK (0x00800000)
#define DDAC_TX_DAC_CONF3_CLKDIV_DIS_DIG_BF_DEF (0x00000000)

///< Inverts the divided output to the DFE and TX encoder.
#define DDAC_TX_DAC_CONF3_CLKDIV_INVERT_DIG_BF_OFF (24)
#define DDAC_TX_DAC_CONF3_CLKDIV_INVERT_DIG_BF_WID ( 1)
#define DDAC_TX_DAC_CONF3_CLKDIV_INVERT_DIG_BF_MSK (0x01000000)
#define DDAC_TX_DAC_CONF3_CLKDIV_INVERT_DIG_BF_DEF (0x00000000)

///< Selects the BTI compensation frequency.
#define DDAC_TX_DAC_CONF3_CLKDIV_PROG_BTICOMP_BF_OFF (25)
#define DDAC_TX_DAC_CONF3_CLKDIV_PROG_BTICOMP_BF_WID ( 4)
#define DDAC_TX_DAC_CONF3_CLKDIV_PROG_BTICOMP_BF_MSK (0x1E000000)
#define DDAC_TX_DAC_CONF3_CLKDIV_PROG_BTICOMP_BF_DEF (0x00000000)

///< Bypass the base rate serializer. Refer to programming table for individual
///< modes.
#define DDAC_TX_DAC_CONF3_SER_BYP16TO4_BF_OFF (29)
#define DDAC_TX_DAC_CONF3_SER_BYP16TO4_BF_WID ( 1)
#define DDAC_TX_DAC_CONF3_SER_BYP16TO4_BF_MSK (0x20000000)
#define DDAC_TX_DAC_CONF3_SER_BYP16TO4_BF_DEF (0x00000000)

///< Bypass the low-rate serializer. Refer to programming table for individual
///< modes.
#define DDAC_TX_DAC_CONF3_SER_BYP4TO2_BF_OFF (30)
#define DDAC_TX_DAC_CONF3_SER_BYP4TO2_BF_WID ( 1)
#define DDAC_TX_DAC_CONF3_SER_BYP4TO2_BF_MSK (0x40000000)
#define DDAC_TX_DAC_CONF3_SER_BYP4TO2_BF_DEF (0x00000000)

///< RESERVED
#define DDAC_TX_DAC_CONF3_RESERVED_BF_OFF (31)
#define DDAC_TX_DAC_CONF3_RESERVED_BF_WID ( 1)
#define DDAC_TX_DAC_CONF3_RESERVED_BF_MSK (0x80000000)
#define DDAC_TX_DAC_CONF3_RESERVED_BF_DEF (0x00000000)


/** @brief DDAC_MAP_REG_TX_DAC_CONF4 register description at address offset 0x54
  *
  * Register default value:        0x00000000
  * Register full path in IP: ddac_map/reg/TX_DAC_CONF4
  * Seq addr = 0xd
  */

typedef union {
  struct {
    uint32_t SER_ENABLE_DATA : 1;
    ///< Enables the serializer data output. (debug only)
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CLKDIV_BTICOMP_ENABLE : 1;
    ///< Enables the BTI compensation of the TX.
    ///< AccessType="RW/V" BitOffset="1" ResetValue="0x0"
    uint32_t DSA_MAX_AT_EN : 1;
    ///< Overwrite DSA setting and set maximum attenuation.
    ///< AccessType="RW/V" BitOffset="2" ResetValue="0x0"
    uint32_t RESERVED : 17;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="3" ResetValue="0x0"
    uint32_t ENABLE_CLK_DMY : 12;
    ///< Enable DSW data and clock for cells [27:16] (ISB and LSB cells).
    ///< AccessType="RW/V" BitOffset="20" ResetValue="0x0"
  } ;
  uint32_t value;
} ddac_tx_dac_conf4_reg_t;

#define DDAC_TX_DAC_CONF4_DEFAULT (0x00000000U)
#define DDAC_TX_DAC_CONF4_RD_MASK (0xffffffffU)
#define DDAC_TX_DAC_CONF4_WR_MASK (0xffffffffU)


///< Enables the serializer data output. (debug only)
#define DDAC_TX_DAC_CONF4_SER_EN_DATA_BF_OFF ( 0)
#define DDAC_TX_DAC_CONF4_SER_EN_DATA_BF_WID ( 1)
#define DDAC_TX_DAC_CONF4_SER_EN_DATA_BF_MSK (0x00000001)
#define DDAC_TX_DAC_CONF4_SER_EN_DATA_BF_DEF (0x00000000)

///< Enables the BTI compensation of the TX.
#define DDAC_TX_DAC_CONF4_CLKDIV_BTICOMP_EN_BF_OFF ( 1)
#define DDAC_TX_DAC_CONF4_CLKDIV_BTICOMP_EN_BF_WID ( 1)
#define DDAC_TX_DAC_CONF4_CLKDIV_BTICOMP_EN_BF_MSK (0x00000002)
#define DDAC_TX_DAC_CONF4_CLKDIV_BTICOMP_EN_BF_DEF (0x00000000)

///< Overwrite DSA setting and set maximum attenuation.
#define DDAC_TX_DAC_CONF4_DSA_MAX_AT_EN_BF_OFF ( 2)
#define DDAC_TX_DAC_CONF4_DSA_MAX_AT_EN_BF_WID ( 1)
#define DDAC_TX_DAC_CONF4_DSA_MAX_AT_EN_BF_MSK (0x00000004)
#define DDAC_TX_DAC_CONF4_DSA_MAX_AT_EN_BF_DEF (0x00000000)

///< RESERVED
#define DDAC_TX_DAC_CONF4_RESERVED_BF_OFF ( 3)
#define DDAC_TX_DAC_CONF4_RESERVED_BF_WID (17)
#define DDAC_TX_DAC_CONF4_RESERVED_BF_MSK (0x000FFFF8)
#define DDAC_TX_DAC_CONF4_RESERVED_BF_DEF (0x00000000)

///< Enable DSW data and clock for cells [27:16] (ISB and LSB cells).
#define DDAC_TX_DAC_CONF4_EN_CLK_DMY_BF_OFF (20)
#define DDAC_TX_DAC_CONF4_EN_CLK_DMY_BF_WID (12)
#define DDAC_TX_DAC_CONF4_EN_CLK_DMY_BF_MSK (0xFFF00000)
#define DDAC_TX_DAC_CONF4_EN_CLK_DMY_BF_DEF (0x00000000)


/** @brief DDAC_MAP_REG_TX_DAC_CONF5 register description at address offset 0x58
  *
  * Register default value:        0x00000000
  * Register full path in IP: ddac_map/reg/TX_DAC_CONF5
  * Seq addr = 0xe
  */

typedef union {
  struct {
    uint32_t ENABLE_CLK_DMY : 32;
    ///< Enable DSW data and clock for cells [43:28,15:0] (MSB cells).
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} ddac_tx_dac_conf5_reg_t;

#define DDAC_TX_DAC_CONF5_DEFAULT (0x00000000U)
#define DDAC_TX_DAC_CONF5_RD_MASK (0xffffffffU)
#define DDAC_TX_DAC_CONF5_WR_MASK (0xffffffffU)


///< Enable DSW data and clock for cells [43:28,15:0] (MSB cells).
#define DDAC_TX_DAC_CONF5_EN_CLK_DMY_BF_OFF ( 0)
#define DDAC_TX_DAC_CONF5_EN_CLK_DMY_BF_WID (32)
#define DDAC_TX_DAC_CONF5_EN_CLK_DMY_BF_MSK (0xFFFFFFFF)
#define DDAC_TX_DAC_CONF5_EN_CLK_DMY_BF_DEF (0x00000000)


/** @brief DDAC_MAP_REG_TX_DAC_CONF6 register description at address offset 0x5c
  *
  * Register default value:        0x00000000
  * Register full path in IP: ddac_map/reg/TX_DAC_CONF6
  * Seq addr = 0xf
  */

typedef union {
  struct {
    uint32_t DSA_BIAS_VCM_ENABLE : 1;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t DSA_BIAS_VCM_SEL : 5;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="1" ResetValue="0x0"
    uint32_t DSA_BIAS_VHI_ENABLE : 1;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="6" ResetValue="0x0"
    uint32_t DSA_BIAS_VHI_SEL : 5;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="7" ResetValue="0x0"
    uint32_t RESERVED : 20;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="12" ResetValue="0x0"
  } ;
  uint32_t value;
} ddac_tx_dac_conf6_reg_t;

#define DDAC_TX_DAC_CONF6_DEFAULT (0x00000000U)
#define DDAC_TX_DAC_CONF6_RD_MASK (0xffffffffU)
#define DDAC_TX_DAC_CONF6_WR_MASK (0xffffffffU)


///< To Be Done
#define DDAC_TX_DAC_CONF6_DSA_BIAS_VCM_EN_BF_OFF ( 0)
#define DDAC_TX_DAC_CONF6_DSA_BIAS_VCM_EN_BF_WID ( 1)
#define DDAC_TX_DAC_CONF6_DSA_BIAS_VCM_EN_BF_MSK (0x00000001)
#define DDAC_TX_DAC_CONF6_DSA_BIAS_VCM_EN_BF_DEF (0x00000000)

///< To Be Done
#define DDAC_TX_DAC_CONF6_DSA_BIAS_VCM_SEL_BF_OFF ( 1)
#define DDAC_TX_DAC_CONF6_DSA_BIAS_VCM_SEL_BF_WID ( 5)
#define DDAC_TX_DAC_CONF6_DSA_BIAS_VCM_SEL_BF_MSK (0x0000003E)
#define DDAC_TX_DAC_CONF6_DSA_BIAS_VCM_SEL_BF_DEF (0x00000000)

///< To Be Done
#define DDAC_TX_DAC_CONF6_DSA_BIAS_VHI_EN_BF_OFF ( 6)
#define DDAC_TX_DAC_CONF6_DSA_BIAS_VHI_EN_BF_WID ( 1)
#define DDAC_TX_DAC_CONF6_DSA_BIAS_VHI_EN_BF_MSK (0x00000040)
#define DDAC_TX_DAC_CONF6_DSA_BIAS_VHI_EN_BF_DEF (0x00000000)

///< To Be Done
#define DDAC_TX_DAC_CONF6_DSA_BIAS_VHI_SEL_BF_OFF ( 7)
#define DDAC_TX_DAC_CONF6_DSA_BIAS_VHI_SEL_BF_WID ( 5)
#define DDAC_TX_DAC_CONF6_DSA_BIAS_VHI_SEL_BF_MSK (0x00000F80)
#define DDAC_TX_DAC_CONF6_DSA_BIAS_VHI_SEL_BF_DEF (0x00000000)

///< RESERVED
#define DDAC_TX_DAC_CONF6_RESERVED_BF_OFF (12)
#define DDAC_TX_DAC_CONF6_RESERVED_BF_WID (20)
#define DDAC_TX_DAC_CONF6_RESERVED_BF_MSK (0xFFFFF000)
#define DDAC_TX_DAC_CONF6_RESERVED_BF_DEF (0x00000000)


/** @brief DDAC_MAP_REG_CSAPI[6] register description at address offset 0x60
  *
  * Register default value:        0x00000000
  * Register full path in IP: ddac_map/reg/CSAPI
  * DDAC CSA ping control register.
  */

typedef union {
  struct {
    uint32_t CSAPI_CTRL : 32;
    ///< CSA ping register.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} ddac_csapi_reg_t;

#define DDAC_CSAPI_DEFAULT (0x00000000U)
#define DDAC_CSAPI_RD_MASK (0xffffffffU)
#define DDAC_CSAPI_WR_MASK (0xffffffffU)


///< CSA ping register.
#define DDAC_CSAPI_CTRL_BF_OFF ( 0)
#define DDAC_CSAPI_CTRL_BF_WID (32)
#define DDAC_CSAPI_CTRL_BF_MSK (0xFFFFFFFF)
#define DDAC_CSAPI_CTRL_BF_DEF (0x00000000)
#define DDAC_CSAPI_ARR_SZ0 (6)
#define DDAC_CSAPI_ARRAY_STRIDE0 (0x0004)


/** @brief DDAC_MAP_REG_CSAPO[6] register description at address offset 0x78
  *
  * Register default value:        0x00000000
  * Register full path in IP: ddac_map/reg/CSAPO
  * DDAC CSA pong control register.
  */

typedef union {
  struct {
    uint32_t CSAPO_CTRL : 32;
    ///< CSA pong register.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} ddac_csapo_reg_t;

#define DDAC_CSAPO_DEFAULT (0x00000000U)
#define DDAC_CSAPO_RD_MASK (0xffffffffU)
#define DDAC_CSAPO_WR_MASK (0xffffffffU)


///< CSA pong register.
#define DDAC_CSAPO_CTRL_BF_OFF ( 0)
#define DDAC_CSAPO_CTRL_BF_WID (32)
#define DDAC_CSAPO_CTRL_BF_MSK (0xFFFFFFFF)
#define DDAC_CSAPO_CTRL_BF_DEF (0x00000000)
#define DDAC_CSAPO_ARR_SZ0 (6)
#define DDAC_CSAPO_ARRAY_STRIDE0 (0x0004)


/** @brief DDAC_MAP_REG_DSAS register description at address offset 0x90
  *
  * Register default value:        0x00000000
  * Register full path in IP: ddac_map/reg/DSAS
  * DDAC DSA shadow control register.
  */

typedef union {
  struct {
    uint32_t DSAS_CTRL : 16;
    ///< DSA shadow register.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} ddac_dsas_reg_t;

#define DDAC_DSAS_DEFAULT (0x00000000U)
#define DDAC_DSAS_RD_MASK (0x0000ffffU)
#define DDAC_DSAS_WR_MASK (0x0000ffffU)


///< DSA shadow register.
#define DDAC_DSAS_CTRL_BF_OFF ( 0)
#define DDAC_DSAS_CTRL_BF_WID (16)
#define DDAC_DSAS_CTRL_BF_MSK (0x0000FFFF)
#define DDAC_DSAS_CTRL_BF_DEF (0x00000000)


/** @brief DDAC_MAP_REG_DSAL register description at address offset 0x94
  *
  * Register default value:        0x00000000
  * Register full path in IP: ddac_map/reg/DSAL
  * DDAC DSA live control register.
  */

typedef union {
  struct {
    uint32_t DSAL_CTRL : 16;
    ///< DSA live register.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} ddac_dsal_reg_t;

#define DDAC_DSAL_DEFAULT (0x00000000U)
#define DDAC_DSAL_RD_MASK (0x0000ffffU)
#define DDAC_DSAL_WR_MASK (0x0000ffffU)


///< DSA live register.
#define DDAC_DSAL_CTRL_BF_OFF ( 0)
#define DDAC_DSAL_CTRL_BF_WID (16)
#define DDAC_DSAL_CTRL_BF_MSK (0x0000FFFF)
#define DDAC_DSAL_CTRL_BF_DEF (0x00000000)


/** @brief DDAC_MAP_REG_DSA_FG register description at address offset 0x98
  *
  * Register default value:        0x00000000
  * Register full path in IP: ddac_map/reg/DSA_FG
  * DDAC DSA fast gain control register.
  */

typedef union {
  struct {
    uint32_t DSA_FAST_GAIN : 16;
    ///< DSA fast gain.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t DSA_FAST_GAIN_EN : 1;
    ///< DSA fast gain enable.  Note that this bit is reset by dp_init.
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} ddac_dsa_fg_reg_t;

#define DDAC_DSA_FG_DEFAULT (0x00000000U)
#define DDAC_DSA_FG_RD_MASK (0x0001ffffU)
#define DDAC_DSA_FG_WR_MASK (0x0001ffffU)


///< DSA fast gain.
#define DDAC_DSA_FG_DSA_FAST_GAIN_BF_OFF ( 0)
#define DDAC_DSA_FG_DSA_FAST_GAIN_BF_WID (16)
#define DDAC_DSA_FG_DSA_FAST_GAIN_BF_MSK (0x0000FFFF)
#define DDAC_DSA_FG_DSA_FAST_GAIN_BF_DEF (0x00000000)

///< DSA fast gain enable.  Note that this bit is reset by dp_init.
#define DDAC_DSA_FG_DSA_FAST_GAIN_EN_BF_OFF (16)
#define DDAC_DSA_FG_DSA_FAST_GAIN_EN_BF_WID ( 1)
#define DDAC_DSA_FG_DSA_FAST_GAIN_EN_BF_MSK (0x00010000)
#define DDAC_DSA_FG_DSA_FAST_GAIN_EN_BF_DEF (0x00000000)


/** @brief DDAC_MAP_REG_STAT register description at address offset 0x9c
  *
  * Register default value:        0x00000000
  * Register full path in IP: ddac_map/reg/STAT
  * TX status
  */

typedef union {
  struct {
    uint32_t RESERVED : 32;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} ddac_stat_reg_t;

#define DDAC_STAT_DEFAULT (0x00000000U)
#define DDAC_STAT_RD_MASK (0xffffffffU)
#define DDAC_STAT_WR_MASK (0x00000000U)


///< RESERVED
#define DDAC_STAT_RESERVED_BF_OFF ( 0)
#define DDAC_STAT_RESERVED_BF_WID (32)
#define DDAC_STAT_RESERVED_BF_MSK (0xFFFFFFFF)
#define DDAC_STAT_RESERVED_BF_DEF (0x00000000)


/** @brief DDAC_MAP_REG_SEQ00_SEQ0_CMD_DATA[20] register description at address offset 0xa0
  *
  * Register default value:        0x00000000
  * Register full path in IP: ddac_map/reg/SEQ00/SEQ0_CMD_DATA
  * Sequencer Command Data Register
  */

typedef union {
  struct {
    uint32_t WDATA : 32;
    ///< Analog control register data to use for this command.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} ddac_seq0_cmd_data_reg_t;

#define DDAC_SEQ0_CMD_DATA_DEFAULT (0x00000000U)
#define DDAC_SEQ0_CMD_DATA_RD_MASK (0xffffffffU)
#define DDAC_SEQ0_CMD_DATA_WR_MASK (0xffffffffU)


///< Analog control register data to use for this command.
#define DDAC_SEQ0_CMD_DATA_WDATA_BF_OFF ( 0)
#define DDAC_SEQ0_CMD_DATA_WDATA_BF_WID (32)
#define DDAC_SEQ0_CMD_DATA_WDATA_BF_MSK (0xFFFFFFFF)
#define DDAC_SEQ0_CMD_DATA_WDATA_BF_DEF (0x00000000)
#define DDAC_SEQ0_CMD_DATA_ARR_SZ0 (20)
#define DDAC_SEQ0_CMD_DATA_ARRAY_STRIDE0 (0x0008)


/** @brief DDAC_MAP_REG_SEQ00_SEQ0_CMD_AW[20] register description at address offset 0xa4
  *
  * Register default value:        0x00000000
  * Register full path in IP: ddac_map/reg/SEQ00/SEQ0_CMD_AW
  * Sequencer Command Address Register
  */

typedef union {
  struct {
    uint32_t WAIT_CNT : 12;
    ///< Number of clock cycles to wait after executing this command before
    ///< moving</br> to the next command.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t WADDR : 5;
    ///< Analog control register offset to use for this command.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} ddac_seq0_cmd_aw_reg_t;

#define DDAC_SEQ0_CMD_AW_DEFAULT (0x00000000U)
#define DDAC_SEQ0_CMD_AW_RD_MASK (0x0001ffffU)
#define DDAC_SEQ0_CMD_AW_WR_MASK (0x0001ffffU)


///< Number of clock cycles to wait after executing this command before
///< moving</br> to the next command.
#define DDAC_SEQ0_CMD_AW_WAIT_CNT_BF_OFF ( 0)
#define DDAC_SEQ0_CMD_AW_WAIT_CNT_BF_WID (12)
#define DDAC_SEQ0_CMD_AW_WAIT_CNT_BF_MSK (0x00000FFF)
#define DDAC_SEQ0_CMD_AW_WAIT_CNT_BF_DEF (0x00000000)

///< Analog control register offset to use for this command.
#define DDAC_SEQ0_CMD_AW_WADDR_BF_OFF (12)
#define DDAC_SEQ0_CMD_AW_WADDR_BF_WID ( 5)
#define DDAC_SEQ0_CMD_AW_WADDR_BF_MSK (0x0001F000)
#define DDAC_SEQ0_CMD_AW_WADDR_BF_DEF (0x00000000)
#define DDAC_SEQ0_CMD_AW_ARR_SZ0 (20)
#define DDAC_SEQ0_CMD_AW_ARRAY_STRIDE0 (0x0008)


/** @brief DDAC_MAP_REG_SEQ10_SEQ1_CMD_DATA[20] register description at address offset 0x140
  *
  * Register default value:        0x00000000
  * Register full path in IP: ddac_map/reg/SEQ10/SEQ1_CMD_DATA
  * Sequencer Command Data Register
  */

typedef union {
  struct {
    uint32_t WDATA : 32;
    ///< Analog control register data to use for this command.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} ddac_seq1_cmd_data_reg_t;

#define DDAC_SEQ1_CMD_DATA_DEFAULT (0x00000000U)
#define DDAC_SEQ1_CMD_DATA_RD_MASK (0xffffffffU)
#define DDAC_SEQ1_CMD_DATA_WR_MASK (0xffffffffU)


///< Analog control register data to use for this command.
#define DDAC_SEQ1_CMD_DATA_WDATA_BF_OFF ( 0)
#define DDAC_SEQ1_CMD_DATA_WDATA_BF_WID (32)
#define DDAC_SEQ1_CMD_DATA_WDATA_BF_MSK (0xFFFFFFFF)
#define DDAC_SEQ1_CMD_DATA_WDATA_BF_DEF (0x00000000)
#define DDAC_SEQ1_CMD_DATA_ARR_SZ0 (20)
#define DDAC_SEQ1_CMD_DATA_ARRAY_STRIDE0 (0x0008)


/** @brief DDAC_MAP_REG_SEQ10_SEQ1_CMD_AW[20] register description at address offset 0x144
  *
  * Register default value:        0x00000000
  * Register full path in IP: ddac_map/reg/SEQ10/SEQ1_CMD_AW
  * Sequencer Command Address Register
  */

typedef union {
  struct {
    uint32_t WAIT_CNT : 12;
    ///< Number of clock cycles to wait after executing this command before
    ///< moving</br> to the next command.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t WADDR : 5;
    ///< Analog control register offset to use for this command.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} ddac_seq1_cmd_aw_reg_t;

#define DDAC_SEQ1_CMD_AW_DEFAULT (0x00000000U)
#define DDAC_SEQ1_CMD_AW_RD_MASK (0x0001ffffU)
#define DDAC_SEQ1_CMD_AW_WR_MASK (0x0001ffffU)


///< Number of clock cycles to wait after executing this command before
///< moving</br> to the next command.
#define DDAC_SEQ1_CMD_AW_WAIT_CNT_BF_OFF ( 0)
#define DDAC_SEQ1_CMD_AW_WAIT_CNT_BF_WID (12)
#define DDAC_SEQ1_CMD_AW_WAIT_CNT_BF_MSK (0x00000FFF)
#define DDAC_SEQ1_CMD_AW_WAIT_CNT_BF_DEF (0x00000000)

///< Analog control register offset to use for this command.
#define DDAC_SEQ1_CMD_AW_WADDR_BF_OFF (12)
#define DDAC_SEQ1_CMD_AW_WADDR_BF_WID ( 5)
#define DDAC_SEQ1_CMD_AW_WADDR_BF_MSK (0x0001F000)
#define DDAC_SEQ1_CMD_AW_WADDR_BF_DEF (0x00000000)
#define DDAC_SEQ1_CMD_AW_ARR_SZ0 (20)
#define DDAC_SEQ1_CMD_AW_ARRAY_STRIDE0 (0x0008)


/** @brief DDAC_MAP_REG_SL_TSTAT register description at address offset 0x1e8
  *
  * Register default value:        0x00000000
  * Register full path in IP: ddac_map/reg/SL_TSTAT
  * DDAC DSA shadow live test status register
  */

typedef union {
  struct {
    uint32_t DSA_ERR_L : 1;
    ///< DSA live register error.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t DSA_ERR_S : 1;
    ///< DSA shadow register error.
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} ddac_sl_tstat_reg_t;

#define DDAC_SL_TSTAT_DEFAULT (0x00000000U)
#define DDAC_SL_TSTAT_RD_MASK (0x00000003U)
#define DDAC_SL_TSTAT_WR_MASK (0x00000000U)


///< DSA live register error.
#define DDAC_SL_TSTAT_DSA_ERR_L_BF_OFF ( 0)
#define DDAC_SL_TSTAT_DSA_ERR_L_BF_WID ( 1)
#define DDAC_SL_TSTAT_DSA_ERR_L_BF_MSK (0x00000001)
#define DDAC_SL_TSTAT_DSA_ERR_L_BF_DEF (0x00000000)

///< DSA shadow register error.
#define DDAC_SL_TSTAT_DSA_ERR_S_BF_OFF ( 1)
#define DDAC_SL_TSTAT_DSA_ERR_S_BF_WID ( 1)
#define DDAC_SL_TSTAT_DSA_ERR_S_BF_MSK (0x00000002)
#define DDAC_SL_TSTAT_DSA_ERR_S_BF_DEF (0x00000000)


/** @brief DDAC_MAP_REG_COLL_STAT register description at address offset 0x1ec
  *
  * Register default value:        0x00000000
  * Register full path in IP: ddac_map/reg/COLL_STAT
  * DDAC SEQ collision status register.
  */

typedef union {
  struct {
    uint32_t ADDRESS : 4;
    ///< Collision address
    ///< AccessType="RW/1C/V" BitOffset="0" ResetValue="0x0"
    uint32_t APB_ACCESS : 1;
    ///< APB was one of the colliding initiators.
    ///< AccessType="RW/1C/V" BitOffset="4" ResetValue="0x0"
    uint32_t SEQ_ACCESS : 2;
    ///< The respective sequencer was one of the colliding initiators.
    ///< AccessType="RW/1C/V" BitOffset="5" ResetValue="0x0"
    uint32_t  : 25;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
  } ;
  uint32_t value;
} ddac_coll_stat_reg_t;

#define DDAC_COLL_STAT_DEFAULT (0x00000000U)
#define DDAC_COLL_STAT_RD_MASK (0x0000007fU)
#define DDAC_COLL_STAT_WR_MASK (0x0000007fU)


///< Collision address
#define DDAC_COLL_STAT_BF_OFF ( 0)
#define DDAC_COLL_STAT_BF_WID ( 4)
#define DDAC_COLL_STAT_BF_MSK (0x0000000F)
#define DDAC_COLL_STAT_BF_DEF (0x00000000)

///< APB was one of the colliding initiators.
#define DDAC_COLL_STAT_APB_ACCESS_BF_OFF ( 4)
#define DDAC_COLL_STAT_APB_ACCESS_BF_WID ( 1)
#define DDAC_COLL_STAT_APB_ACCESS_BF_MSK (0x00000010)
#define DDAC_COLL_STAT_APB_ACCESS_BF_DEF (0x00000000)

///< The respective sequencer was one of the colliding initiators.
#define DDAC_COLL_STAT_SEQ_ACCESS_BF_OFF ( 5)
#define DDAC_COLL_STAT_SEQ_ACCESS_BF_WID ( 2)
#define DDAC_COLL_STAT_SEQ_ACCESS_BF_MSK (0x00000060)
#define DDAC_COLL_STAT_SEQ_ACCESS_BF_DEF (0x00000000)


/** @brief DDAC_MAP_REG_PAR_ERR_SEQ0A register description at address offset 0x1f0
  *
  * Register default value:        0x00000000
  * Register full path in IP: ddac_map/reg/PAR_ERR_SEQ0A
  * DDAC parrity error seq0 address register.
  */

typedef union {
  struct {
    uint32_t PESEQ0A : 20;
    ///< parity error for seq0 address
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} ddac_par_err_seq0a_reg_t;

#define DDAC_PAR_ERR_SEQ0A_DEFAULT (0x00000000U)
#define DDAC_PAR_ERR_SEQ0A_RD_MASK (0x000fffffU)
#define DDAC_PAR_ERR_SEQ0A_WR_MASK (0x00000000U)


///< parity error for seq0 address
#define DDAC_PAR_ERR_SEQ0A_PESEQ0A_BF_OFF ( 0)
#define DDAC_PAR_ERR_SEQ0A_PESEQ0A_BF_WID (20)
#define DDAC_PAR_ERR_SEQ0A_PESEQ0A_BF_MSK (0x000FFFFF)
#define DDAC_PAR_ERR_SEQ0A_PESEQ0A_BF_DEF (0x00000000)


/** @brief DDAC_MAP_REG_PAR_ERR_SEQ0D register description at address offset 0x1f4
  *
  * Register default value:        0x00000000
  * Register full path in IP: ddac_map/reg/PAR_ERR_SEQ0D
  * DDAC parrity error seq0 data register.
  */

typedef union {
  struct {
    uint32_t PESEQ0D : 20;
    ///< parity error for seq0 data
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} ddac_par_err_seq0d_reg_t;

#define DDAC_PAR_ERR_SEQ0D_DEFAULT (0x00000000U)
#define DDAC_PAR_ERR_SEQ0D_RD_MASK (0x000fffffU)
#define DDAC_PAR_ERR_SEQ0D_WR_MASK (0x00000000U)


///< parity error for seq0 data
#define DDAC_PAR_ERR_SEQ0D_PESEQ0D_BF_OFF ( 0)
#define DDAC_PAR_ERR_SEQ0D_PESEQ0D_BF_WID (20)
#define DDAC_PAR_ERR_SEQ0D_PESEQ0D_BF_MSK (0x000FFFFF)
#define DDAC_PAR_ERR_SEQ0D_PESEQ0D_BF_DEF (0x00000000)


/** @brief DDAC_MAP_REG_PAR_ERR_SEQ1A register description at address offset 0x1f8
  *
  * Register default value:        0x00000000
  * Register full path in IP: ddac_map/reg/PAR_ERR_SEQ1A
  * DDAC parrity error seq1 address register.
  */

typedef union {
  struct {
    uint32_t PESEQ1A : 20;
    ///< parity error for seq0 address
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} ddac_par_err_seq1a_reg_t;

#define DDAC_PAR_ERR_SEQ1A_DEFAULT (0x00000000U)
#define DDAC_PAR_ERR_SEQ1A_RD_MASK (0x000fffffU)
#define DDAC_PAR_ERR_SEQ1A_WR_MASK (0x00000000U)


///< parity error for seq0 address
#define DDAC_PAR_ERR_SEQ1A_PESEQ1A_BF_OFF ( 0)
#define DDAC_PAR_ERR_SEQ1A_PESEQ1A_BF_WID (20)
#define DDAC_PAR_ERR_SEQ1A_PESEQ1A_BF_MSK (0x000FFFFF)
#define DDAC_PAR_ERR_SEQ1A_PESEQ1A_BF_DEF (0x00000000)


/** @brief DDAC_MAP_REG_PAR_ERR_SEQ1D register description at address offset 0x1fc
  *
  * Register default value:        0x00000000
  * Register full path in IP: ddac_map/reg/PAR_ERR_SEQ1D
  * DDAC parrity error seq1 data register.
  */

typedef union {
  struct {
    uint32_t PESEQ1D : 20;
    ///< parity error for seq1 data
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} ddac_par_err_seq1d_reg_t;

#define DDAC_PAR_ERR_SEQ1D_DEFAULT (0x00000000U)
#define DDAC_PAR_ERR_SEQ1D_RD_MASK (0x000fffffU)
#define DDAC_PAR_ERR_SEQ1D_WR_MASK (0x00000000U)


///< parity error for seq1 data
#define DDAC_PAR_ERR_SEQ1D_PESEQ1D_BF_OFF ( 0)
#define DDAC_PAR_ERR_SEQ1D_PESEQ1D_BF_WID (20)
#define DDAC_PAR_ERR_SEQ1D_PESEQ1D_BF_MSK (0x000FFFFF)
#define DDAC_PAR_ERR_SEQ1D_PESEQ1D_BF_DEF (0x00000000)


/** @brief DDAC_MAP_REG_PAR_ERR_CSAPI register description at address offset 0x200
  *
  * Register default value:        0x00000000
  * Register full path in IP: ddac_map/reg/PAR_ERR_CSAPI
  * DDAC parrity error csa ping data register.
  */

typedef union {
  struct {
    uint32_t PECSAPI : 6;
    ///< parity error for csa ping data
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} ddac_par_err_csapi_reg_t;

#define DDAC_PAR_ERR_CSAPI_DEFAULT (0x00000000U)
#define DDAC_PAR_ERR_CSAPI_RD_MASK (0x0000003fU)
#define DDAC_PAR_ERR_CSAPI_WR_MASK (0x00000000U)


///< parity error for csa ping data
#define DDAC_PAR_ERR_CSAPI_PECSAPI_BF_OFF ( 0)
#define DDAC_PAR_ERR_CSAPI_PECSAPI_BF_WID ( 6)
#define DDAC_PAR_ERR_CSAPI_PECSAPI_BF_MSK (0x0000003F)
#define DDAC_PAR_ERR_CSAPI_PECSAPI_BF_DEF (0x00000000)


/** @brief DDAC_MAP_REG_PAR_ERR_CSAPO register description at address offset 0x204
  *
  * Register default value:        0x00000000
  * Register full path in IP: ddac_map/reg/PAR_ERR_CSAPO
  * DDAC parrity error csa pong data register.
  */

typedef union {
  struct {
    uint32_t PECSAPO : 6;
    ///< parity error for csa pong data
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} ddac_par_err_csapo_reg_t;

#define DDAC_PAR_ERR_CSAPO_DEFAULT (0x00000000U)
#define DDAC_PAR_ERR_CSAPO_RD_MASK (0x0000003fU)
#define DDAC_PAR_ERR_CSAPO_WR_MASK (0x00000000U)


///< parity error for csa pong data
#define DDAC_PAR_ERR_CSAPO_PECSAPO_BF_OFF ( 0)
#define DDAC_PAR_ERR_CSAPO_PECSAPO_BF_WID ( 6)
#define DDAC_PAR_ERR_CSAPO_PECSAPO_BF_MSK (0x0000003F)
#define DDAC_PAR_ERR_CSAPO_PECSAPO_BF_DEF (0x00000000)


/** @brief DDAC_MAP_REG_PAR_ERR_TX_ENCX register description at address offset 0x208
  *
  * Register default value:        0x00000000
  * Register full path in IP: ddac_map/reg/PAR_ERR_TX_ENCX
  * DDAC parrity error tx encx conf register.
  */

typedef union {
  struct {
    uint32_t PEENCX : 9;
    ///< parity error for tx encx conf
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} ddac_par_err_tx_encx_reg_t;

#define DDAC_PAR_ERR_TX_ENCX_DEFAULT (0x00000000U)
#define DDAC_PAR_ERR_TX_ENCX_RD_MASK (0x000001ffU)
#define DDAC_PAR_ERR_TX_ENCX_WR_MASK (0x00000000U)


///< parity error for tx encx conf
#define DDAC_PAR_ERR_TX_ENCX_PEENCX_BF_OFF ( 0)
#define DDAC_PAR_ERR_TX_ENCX_PEENCX_BF_WID ( 9)
#define DDAC_PAR_ERR_TX_ENCX_PEENCX_BF_MSK (0x000001FF)
#define DDAC_PAR_ERR_TX_ENCX_PEENCX_BF_DEF (0x00000000)


/** @brief DDAC_MAP_REG_PAR_ERR_TX_DAC register description at address offset 0x20c
  *
  * Register default value:        0x00000000
  * Register full path in IP: ddac_map/reg/PAR_ERR_TX_DAC
  * DDAC parrity error tx dac conf register.
  */

typedef union {
  struct {
    uint32_t PEDAC : 7;
    ///< parity error for tx dac conf
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 25;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
  } ;
  uint32_t value;
} ddac_par_err_tx_dac_reg_t;

#define DDAC_PAR_ERR_TX_DAC_DEFAULT (0x00000000U)
#define DDAC_PAR_ERR_TX_DAC_RD_MASK (0x0000007fU)
#define DDAC_PAR_ERR_TX_DAC_WR_MASK (0x00000000U)


///< parity error for tx dac conf
#define DDAC_PAR_ERR_TX_DAC_PEDAC_BF_OFF ( 0)
#define DDAC_PAR_ERR_TX_DAC_PEDAC_BF_WID ( 7)
#define DDAC_PAR_ERR_TX_DAC_PEDAC_BF_MSK (0x0000007F)
#define DDAC_PAR_ERR_TX_DAC_PEDAC_BF_DEF (0x00000000)


/** @brief DDAC_MAP_REG_INT_STATUS register description at address offset 0x220
  *
  * Register default value:        0x00000000
  * Register full path in IP: ddac_map/reg/INT_STATUS
  * DDAC Interrupt Status Register
  */

typedef union {
  struct {
    uint32_t INT_STAT0 : 1;
    ///< Seq and/or APB write collision error
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t INT_STAT1 : 1;
    ///< Indicates seq0 cmd write parity error
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t INT_STAT2 : 1;
    ///< Indicates seq0 data write parity error
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t INT_STAT3 : 1;
    ///< Indicates seq1 cmd write parity error
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t INT_STAT4 : 1;
    ///< Indicates seq1 data write parity error
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t INT_STAT5 : 1;
    ///< Indicates csa ping write parity error
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t INT_STAT6 : 1;
    ///< Indicates csa pong write parity error
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t INT_STAT7 : 1;
    ///< Indicates tx_encx_conf write parity error
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t INT_STAT8 : 1;
    ///< Indicates tx_dac_conf write parity error
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t INT_STAT9 : 1;
    ///< Indicates dsa live write parity error
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t INT_STAT10 : 1;
    ///< Indicates dsa shadow write parity error
    ///< AccessType="RO/V" BitOffset="10" ResetValue="0x0"
    uint32_t  : 21;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
  } ;
  uint32_t value;
} ddac_int_stat_reg_t;

#define DDAC_INT_STAT_DEFAULT (0x00000000U)
#define DDAC_INT_STAT_RD_MASK (0x000007ffU)
#define DDAC_INT_STAT_WR_MASK (0x00000000U)


///< Seq and/or APB write collision error
#define DDAC_INT_STAT_INT_STAT0_BF_OFF ( 0)
#define DDAC_INT_STAT_INT_STAT0_BF_WID ( 1)
#define DDAC_INT_STAT_INT_STAT0_BF_MSK (0x00000001)
#define DDAC_INT_STAT_INT_STAT0_BF_DEF (0x00000000)

///< Indicates seq0 cmd write parity error
#define DDAC_INT_STAT_INT_STAT1_BF_OFF ( 1)
#define DDAC_INT_STAT_INT_STAT1_BF_WID ( 1)
#define DDAC_INT_STAT_INT_STAT1_BF_MSK (0x00000002)
#define DDAC_INT_STAT_INT_STAT1_BF_DEF (0x00000000)

///< Indicates seq0 data write parity error
#define DDAC_INT_STAT_INT_STAT2_BF_OFF ( 2)
#define DDAC_INT_STAT_INT_STAT2_BF_WID ( 1)
#define DDAC_INT_STAT_INT_STAT2_BF_MSK (0x00000004)
#define DDAC_INT_STAT_INT_STAT2_BF_DEF (0x00000000)

///< Indicates seq1 cmd write parity error
#define DDAC_INT_STAT_INT_STAT3_BF_OFF ( 3)
#define DDAC_INT_STAT_INT_STAT3_BF_WID ( 1)
#define DDAC_INT_STAT_INT_STAT3_BF_MSK (0x00000008)
#define DDAC_INT_STAT_INT_STAT3_BF_DEF (0x00000000)

///< Indicates seq1 data write parity error
#define DDAC_INT_STAT_INT_STAT4_BF_OFF ( 4)
#define DDAC_INT_STAT_INT_STAT4_BF_WID ( 1)
#define DDAC_INT_STAT_INT_STAT4_BF_MSK (0x00000010)
#define DDAC_INT_STAT_INT_STAT4_BF_DEF (0x00000000)

///< Indicates csa ping write parity error
#define DDAC_INT_STAT_INT_STAT5_BF_OFF ( 5)
#define DDAC_INT_STAT_INT_STAT5_BF_WID ( 1)
#define DDAC_INT_STAT_INT_STAT5_BF_MSK (0x00000020)
#define DDAC_INT_STAT_INT_STAT5_BF_DEF (0x00000000)

///< Indicates csa pong write parity error
#define DDAC_INT_STAT_INT_STAT6_BF_OFF ( 6)
#define DDAC_INT_STAT_INT_STAT6_BF_WID ( 1)
#define DDAC_INT_STAT_INT_STAT6_BF_MSK (0x00000040)
#define DDAC_INT_STAT_INT_STAT6_BF_DEF (0x00000000)

///< Indicates tx_encx_conf write parity error
#define DDAC_INT_STAT_INT_STAT7_BF_OFF ( 7)
#define DDAC_INT_STAT_INT_STAT7_BF_WID ( 1)
#define DDAC_INT_STAT_INT_STAT7_BF_MSK (0x00000080)
#define DDAC_INT_STAT_INT_STAT7_BF_DEF (0x00000000)

///< Indicates tx_dac_conf write parity error
#define DDAC_INT_STAT_INT_STAT8_BF_OFF ( 8)
#define DDAC_INT_STAT_INT_STAT8_BF_WID ( 1)
#define DDAC_INT_STAT_INT_STAT8_BF_MSK (0x00000100)
#define DDAC_INT_STAT_INT_STAT8_BF_DEF (0x00000000)

///< Indicates dsa live write parity error
#define DDAC_INT_STAT_INT_STAT9_BF_OFF ( 9)
#define DDAC_INT_STAT_INT_STAT9_BF_WID ( 1)
#define DDAC_INT_STAT_INT_STAT9_BF_MSK (0x00000200)
#define DDAC_INT_STAT_INT_STAT9_BF_DEF (0x00000000)

///< Indicates dsa shadow write parity error
#define DDAC_INT_STAT_INT_STAT10_BF_OFF (10)
#define DDAC_INT_STAT_INT_STAT10_BF_WID ( 1)
#define DDAC_INT_STAT_INT_STAT10_BF_MSK (0x00000400)
#define DDAC_INT_STAT_INT_STAT10_BF_DEF (0x00000000)


/** @brief DDAC_MAP_REG_INT_HI_EN register description at address offset 0x224
  *
  * Register default value:        0x00000000
  * Register full path in IP: ddac_map/reg/INT_HI_EN
  * DDAC Interrupt High Enable Register
  */

typedef union {
  struct {
    uint32_t INT_HI_EN : 11;
    ///< Register error interrupt high enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 21;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
  } ;
  uint32_t value;
} ddac_int_hi_en_reg_t;

#define DDAC_INT_HI_EN_DEFAULT (0x00000000U)
#define DDAC_INT_HI_EN_RD_MASK (0x000007ffU)
#define DDAC_INT_HI_EN_WR_MASK (0x000007ffU)


///< Register error interrupt high enable
#define DDAC_INT_HI_EN_INT_HI_EN_BF_OFF ( 0)
#define DDAC_INT_HI_EN_INT_HI_EN_BF_WID (11)
#define DDAC_INT_HI_EN_INT_HI_EN_BF_MSK (0x000007FF)
#define DDAC_INT_HI_EN_INT_HI_EN_BF_DEF (0x00000000)


/** @brief DDAC_MAP_REG_INT_LO_EN register description at address offset 0x228
  *
  * Register default value:        0x00000000
  * Register full path in IP: ddac_map/reg/INT_LO_EN
  * DDAC Interrupt Low Enable Register
  */

typedef union {
  struct {
    uint32_t INT_LO_EN : 11;
    ///< Register error interrupt low enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 21;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
  } ;
  uint32_t value;
} ddac_int_lo_en_reg_t;

#define DDAC_INT_LO_EN_DEFAULT (0x00000000U)
#define DDAC_INT_LO_EN_RD_MASK (0x000007ffU)
#define DDAC_INT_LO_EN_WR_MASK (0x000007ffU)


///< Register error interrupt low enable
#define DDAC_INT_LO_EN_INT_LO_EN_BF_OFF ( 0)
#define DDAC_INT_LO_EN_INT_LO_EN_BF_WID (11)
#define DDAC_INT_LO_EN_INT_LO_EN_BF_MSK (0x000007FF)
#define DDAC_INT_LO_EN_INT_LO_EN_BF_DEF (0x00000000)


/** @brief DDAC_MAP_REG_INT_CLEAR register description at address offset 0x22c
  *
  * Register default value:        0x00000000
  * Register full path in IP: ddac_map/reg/INT_CLEAR
  * DDAC Interrupt Clear Register
  */

typedef union {
  struct {
    uint32_t INT_CLR : 11;
    ///< Register error interrupt clear
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 21;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
  } ;
  uint32_t value;
} ddac_int_clr_reg_t;

#define DDAC_INT_CLR_DEFAULT (0x00000000U)
#define DDAC_INT_CLR_RD_MASK (0x000007ffU)
#define DDAC_INT_CLR_WR_MASK (0x000007ffU)


///< Register error interrupt clear
#define DDAC_INT_CLR_INT_CLR_BF_OFF ( 0)
#define DDAC_INT_CLR_INT_CLR_BF_WID (11)
#define DDAC_INT_CLR_INT_CLR_BF_MSK (0x000007FF)
#define DDAC_INT_CLR_INT_CLR_BF_DEF (0x00000000)


/** @brief DDAC_MAP_REG_INT_FORCE register description at address offset 0x230
  *
  * Register default value:        0x00000000
  * Register full path in IP: ddac_map/reg/INT_FORCE
  * DDAC Interrupt Force Register
  */

typedef union {
  struct {
    uint32_t INT_FORCE : 11;
    ///< Register error interrupt force
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 21;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
  } ;
  uint32_t value;
} ddac_int_force_reg_t;

#define DDAC_INT_FORCE_DEFAULT (0x00000000U)
#define DDAC_INT_FORCE_RD_MASK (0x000007ffU)
#define DDAC_INT_FORCE_WR_MASK (0x000007ffU)


///< Register error interrupt force
#define DDAC_INT_FORCE_INT_FORCE_BF_OFF ( 0)
#define DDAC_INT_FORCE_INT_FORCE_BF_WID (11)
#define DDAC_INT_FORCE_INT_FORCE_BF_MSK (0x000007FF)
#define DDAC_INT_FORCE_INT_FORCE_BF_DEF (0x00000000)


/** @brief DDAC_MAP_REG_APB_BRIDGE_STATUS register description at address offset 0x234
  *
  * Register default value:        0x00010000
  * Register full path in IP: ddac_map/reg/APB_BRIDGE_STATUS
  * APB Bridge Status Register
  */

typedef union {
  struct {
    uint32_t TIMEOUT_VALUE : 20;
    ///< Number of core clocks to wait before timing out an APB request
    ///< AccessType="RW/L" BitOffset="0" ResetValue="0x10000"
    uint32_t REVISION : 8;
    ///< Module Revision Number
    ///< AccessType="RO" BitOffset="20" ResetValue="0x0"
    uint32_t SW_LOCK_CTRL : 1;
    ///< Block software writes to timeout_value if set
    ///< AccessType="RW/1S/V/L" BitOffset="28" ResetValue="0x0"
    uint32_t UNSOL_ACK : 1;
    ///< An unsolicited acknowledge was received
    ///< AccessType="RW/1C/V" BitOffset="29" ResetValue="0x0"
    uint32_t ACK_ERROR : 1;
    ///< Acknowledgement had error bit set
    ///< AccessType="RW/1C/V" BitOffset="30" ResetValue="0x0"
    uint32_t TIMEOUT : 1;
    ///< An APB request has timed out
    ///< AccessType="RW/1C/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} ddac_apb_brdg_stat_reg_t;

#define DDAC_APB_BRDG_STAT_DEFAULT (0x00010000U)
#define DDAC_APB_BRDG_STAT_RD_MASK (0xffffffffU)
#define DDAC_APB_BRDG_STAT_WR_MASK (0xf00fffffU)


///< Number of core clocks to wait before timing out an APB request
#define DDAC_APB_BRDG_STAT_TIMEOUT_VAL_BF_OFF ( 0)
#define DDAC_APB_BRDG_STAT_TIMEOUT_VAL_BF_WID (20)
#define DDAC_APB_BRDG_STAT_TIMEOUT_VAL_BF_MSK (0x000FFFFF)
#define DDAC_APB_BRDG_STAT_TIMEOUT_VAL_BF_DEF (0x00010000)

///< Module Revision Number
#define DDAC_APB_BRDG_STAT_REVISION_BF_OFF (20)
#define DDAC_APB_BRDG_STAT_REVISION_BF_WID ( 8)
#define DDAC_APB_BRDG_STAT_REVISION_BF_MSK (0x0FF00000)
#define DDAC_APB_BRDG_STAT_REVISION_BF_DEF (0x00000000)

///< Block software writes to timeout_value if set
#define DDAC_APB_BRDG_STAT_SW_LOCK_CTRL_BF_OFF (28)
#define DDAC_APB_BRDG_STAT_SW_LOCK_CTRL_BF_WID ( 1)
#define DDAC_APB_BRDG_STAT_SW_LOCK_CTRL_BF_MSK (0x10000000)
#define DDAC_APB_BRDG_STAT_SW_LOCK_CTRL_BF_DEF (0x00000000)

///< An unsolicited acknowledge was received
#define DDAC_APB_BRDG_STAT_UNSOL_ACK_BF_OFF (29)
#define DDAC_APB_BRDG_STAT_UNSOL_ACK_BF_WID ( 1)
#define DDAC_APB_BRDG_STAT_UNSOL_ACK_BF_MSK (0x20000000)
#define DDAC_APB_BRDG_STAT_UNSOL_ACK_BF_DEF (0x00000000)

///< Acknowledgement had error bit set
#define DDAC_APB_BRDG_STAT_ACK_ERR_BF_OFF (30)
#define DDAC_APB_BRDG_STAT_ACK_ERR_BF_WID ( 1)
#define DDAC_APB_BRDG_STAT_ACK_ERR_BF_MSK (0x40000000)
#define DDAC_APB_BRDG_STAT_ACK_ERR_BF_DEF (0x00000000)

///< An APB request has timed out
#define DDAC_APB_BRDG_STAT_TIMEOUT_BF_OFF (31)
#define DDAC_APB_BRDG_STAT_TIMEOUT_BF_WID ( 1)
#define DDAC_APB_BRDG_STAT_TIMEOUT_BF_MSK (0x80000000)
#define DDAC_APB_BRDG_STAT_TIMEOUT_BF_DEF (0x00000000)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define DDAC_SCRATCH_REG(_BASE) ((ddac_scratch_reg_t*) DDAC_SCRATCH_ADR(_BASE))
#define DDAC_SEQ0_CTRL_REG(_BASE) ((ddac_seq0_ctrl_reg_t*) DDAC_SEQ0_CTRL_ADR(_BASE))
#define DDAC_SEQ0_ITER_REG(_BASE) ((ddac_seq0_iter_reg_t*) DDAC_SEQ0_ITER_ADR(_BASE))
#define DDAC_SEQ0_STAT_REG(_BASE) ((ddac_seq0_stat_reg_t*) DDAC_SEQ0_STAT_ADR(_BASE))
#define DDAC_SEQ1_CTRL_REG(_BASE) ((ddac_seq1_ctrl_reg_t*) DDAC_SEQ1_CTRL_ADR(_BASE))
#define DDAC_SEQ1_ITER_REG(_BASE) ((ddac_seq1_iter_reg_t*) DDAC_SEQ1_ITER_ADR(_BASE))
#define DDAC_SEQ1_STAT_REG(_BASE) ((ddac_seq1_stat_reg_t*) DDAC_SEQ1_STAT_ADR(_BASE))
#define DDAC_SL_TCTL_REG(_BASE) ((ddac_sl_tctl_reg_t*) DDAC_SL_TCTL_ADR(_BASE))
#define DDAC_TX_ENCX_CONF0_REG(_BASE) ((ddac_tx_encx_conf0_reg_t*) DDAC_TX_ENCX_CONF0_ADR(_BASE))
#define DDAC_TX_ENCX_CONF1_REG(_BASE) ((ddac_tx_encx_conf1_reg_t*) DDAC_TX_ENCX_CONF1_ADR(_BASE))
#define DDAC_TX_ENCX_CONF2_REG(_BASE) ((ddac_tx_encx_conf2_reg_t*) DDAC_TX_ENCX_CONF2_ADR(_BASE))
#define DDAC_TX_ENCX_CONF3_REG(_BASE) ((ddac_tx_encx_conf3_reg_t*) DDAC_TX_ENCX_CONF3_ADR(_BASE))
#define DDAC_TX_ENCX_CONF4_REG(_BASE) ((ddac_tx_encx_conf4_reg_t*) DDAC_TX_ENCX_CONF4_ADR(_BASE))
#define DDAC_TX_ENCX_CONF5_REG(_BASE) ((ddac_tx_encx_conf5_reg_t*) DDAC_TX_ENCX_CONF5_ADR(_BASE))
#define DDAC_TX_ENCX_CONF6_REG(_BASE) ((ddac_tx_encx_conf6_reg_t*) DDAC_TX_ENCX_CONF6_ADR(_BASE))
#define DDAC_TX_ENCX_CONF7_REG(_BASE) ((ddac_tx_encx_conf7_reg_t*) DDAC_TX_ENCX_CONF7_ADR(_BASE))
#define DDAC_TX_ENCX_CONF8_REG(_BASE) ((ddac_tx_encx_conf8_reg_t*) DDAC_TX_ENCX_CONF8_ADR(_BASE))
#define DDAC_TX_DAC_CONF0_REG(_BASE) ((ddac_tx_dac_conf0_reg_t*) DDAC_TX_DAC_CONF0_ADR(_BASE))
#define DDAC_TX_DAC_CONF1_REG(_BASE) ((ddac_tx_dac_conf1_reg_t*) DDAC_TX_DAC_CONF1_ADR(_BASE))
#define DDAC_TX_DAC_CONF2_REG(_BASE) ((ddac_tx_dac_conf2_reg_t*) DDAC_TX_DAC_CONF2_ADR(_BASE))
#define DDAC_TX_DAC_CONF3_REG(_BASE) ((ddac_tx_dac_conf3_reg_t*) DDAC_TX_DAC_CONF3_ADR(_BASE))
#define DDAC_TX_DAC_CONF4_REG(_BASE) ((ddac_tx_dac_conf4_reg_t*) DDAC_TX_DAC_CONF4_ADR(_BASE))
#define DDAC_TX_DAC_CONF5_REG(_BASE) ((ddac_tx_dac_conf5_reg_t*) DDAC_TX_DAC_CONF5_ADR(_BASE))
#define DDAC_TX_DAC_CONF6_REG(_BASE) ((ddac_tx_dac_conf6_reg_t*) DDAC_TX_DAC_CONF6_ADR(_BASE))
#define DDAC_CSAPI0_REG(_BASE) ((ddac_csapi_reg_t*) DDAC_CSAPI0_ADR(_BASE))
#define DDAC_CSAPI1_REG(_BASE) ((ddac_csapi_reg_t*) DDAC_CSAPI1_ADR(_BASE))
#define DDAC_CSAPI2_REG(_BASE) ((ddac_csapi_reg_t*) DDAC_CSAPI2_ADR(_BASE))
#define DDAC_CSAPI3_REG(_BASE) ((ddac_csapi_reg_t*) DDAC_CSAPI3_ADR(_BASE))
#define DDAC_CSAPI4_REG(_BASE) ((ddac_csapi_reg_t*) DDAC_CSAPI4_ADR(_BASE))
#define DDAC_CSAPI5_REG(_BASE) ((ddac_csapi_reg_t*) DDAC_CSAPI5_ADR(_BASE))
#define DDAC_CSAPO0_REG(_BASE) ((ddac_csapo_reg_t*) DDAC_CSAPO0_ADR(_BASE))
#define DDAC_CSAPO1_REG(_BASE) ((ddac_csapo_reg_t*) DDAC_CSAPO1_ADR(_BASE))
#define DDAC_CSAPO2_REG(_BASE) ((ddac_csapo_reg_t*) DDAC_CSAPO2_ADR(_BASE))
#define DDAC_CSAPO3_REG(_BASE) ((ddac_csapo_reg_t*) DDAC_CSAPO3_ADR(_BASE))
#define DDAC_CSAPO4_REG(_BASE) ((ddac_csapo_reg_t*) DDAC_CSAPO4_ADR(_BASE))
#define DDAC_CSAPO5_REG(_BASE) ((ddac_csapo_reg_t*) DDAC_CSAPO5_ADR(_BASE))
#define DDAC_DSAS_REG(_BASE) ((ddac_dsas_reg_t*) DDAC_DSAS_ADR(_BASE))
#define DDAC_DSAL_REG(_BASE) ((ddac_dsal_reg_t*) DDAC_DSAL_ADR(_BASE))
#define DDAC_DSA_FG_REG(_BASE) ((ddac_dsa_fg_reg_t*) DDAC_DSA_FG_ADR(_BASE))
#define DDAC_STAT_REG(_BASE) ((ddac_stat_reg_t*) DDAC_STAT_ADR(_BASE))
#define DDAC_SEQ00_SEQ0_CMD_DATA_REG(_BASE) ((ddac_seq0_cmd_data_reg_t*) DDAC_SEQ00_SEQ0_CMD_DATA_ADR(_BASE))
#define DDAC_SEQ00_SEQ0_CMD_AW_REG(_BASE) ((ddac_seq0_cmd_aw_reg_t*) DDAC_SEQ00_SEQ0_CMD_AW_ADR(_BASE))
#define DDAC_SEQ01_SEQ0_CMD_DATA_REG(_BASE) ((ddac_seq0_cmd_data_reg_t*) DDAC_SEQ01_SEQ0_CMD_DATA_ADR(_BASE))
#define DDAC_SEQ01_SEQ0_CMD_AW_REG(_BASE) ((ddac_seq0_cmd_aw_reg_t*) DDAC_SEQ01_SEQ0_CMD_AW_ADR(_BASE))
#define DDAC_SEQ02_SEQ0_CMD_DATA_REG(_BASE) ((ddac_seq0_cmd_data_reg_t*) DDAC_SEQ02_SEQ0_CMD_DATA_ADR(_BASE))
#define DDAC_SEQ02_SEQ0_CMD_AW_REG(_BASE) ((ddac_seq0_cmd_aw_reg_t*) DDAC_SEQ02_SEQ0_CMD_AW_ADR(_BASE))
#define DDAC_SEQ03_SEQ0_CMD_DATA_REG(_BASE) ((ddac_seq0_cmd_data_reg_t*) DDAC_SEQ03_SEQ0_CMD_DATA_ADR(_BASE))
#define DDAC_SEQ03_SEQ0_CMD_AW_REG(_BASE) ((ddac_seq0_cmd_aw_reg_t*) DDAC_SEQ03_SEQ0_CMD_AW_ADR(_BASE))
#define DDAC_SEQ04_SEQ0_CMD_DATA_REG(_BASE) ((ddac_seq0_cmd_data_reg_t*) DDAC_SEQ04_SEQ0_CMD_DATA_ADR(_BASE))
#define DDAC_SEQ04_SEQ0_CMD_AW_REG(_BASE) ((ddac_seq0_cmd_aw_reg_t*) DDAC_SEQ04_SEQ0_CMD_AW_ADR(_BASE))
#define DDAC_SEQ05_SEQ0_CMD_DATA_REG(_BASE) ((ddac_seq0_cmd_data_reg_t*) DDAC_SEQ05_SEQ0_CMD_DATA_ADR(_BASE))
#define DDAC_SEQ05_SEQ0_CMD_AW_REG(_BASE) ((ddac_seq0_cmd_aw_reg_t*) DDAC_SEQ05_SEQ0_CMD_AW_ADR(_BASE))
#define DDAC_SEQ06_SEQ0_CMD_DATA_REG(_BASE) ((ddac_seq0_cmd_data_reg_t*) DDAC_SEQ06_SEQ0_CMD_DATA_ADR(_BASE))
#define DDAC_SEQ06_SEQ0_CMD_AW_REG(_BASE) ((ddac_seq0_cmd_aw_reg_t*) DDAC_SEQ06_SEQ0_CMD_AW_ADR(_BASE))
#define DDAC_SEQ07_SEQ0_CMD_DATA_REG(_BASE) ((ddac_seq0_cmd_data_reg_t*) DDAC_SEQ07_SEQ0_CMD_DATA_ADR(_BASE))
#define DDAC_SEQ07_SEQ0_CMD_AW_REG(_BASE) ((ddac_seq0_cmd_aw_reg_t*) DDAC_SEQ07_SEQ0_CMD_AW_ADR(_BASE))
#define DDAC_SEQ08_SEQ0_CMD_DATA_REG(_BASE) ((ddac_seq0_cmd_data_reg_t*) DDAC_SEQ08_SEQ0_CMD_DATA_ADR(_BASE))
#define DDAC_SEQ08_SEQ0_CMD_AW_REG(_BASE) ((ddac_seq0_cmd_aw_reg_t*) DDAC_SEQ08_SEQ0_CMD_AW_ADR(_BASE))
#define DDAC_SEQ09_SEQ0_CMD_DATA_REG(_BASE) ((ddac_seq0_cmd_data_reg_t*) DDAC_SEQ09_SEQ0_CMD_DATA_ADR(_BASE))
#define DDAC_SEQ09_SEQ0_CMD_AW_REG(_BASE) ((ddac_seq0_cmd_aw_reg_t*) DDAC_SEQ09_SEQ0_CMD_AW_ADR(_BASE))
#define DDAC_SEQ010_SEQ0_CMD_DATA_REG(_BASE) ((ddac_seq0_cmd_data_reg_t*) DDAC_SEQ010_SEQ0_CMD_DATA_ADR(_BASE))
#define DDAC_SEQ010_SEQ0_CMD_AW_REG(_BASE) ((ddac_seq0_cmd_aw_reg_t*) DDAC_SEQ010_SEQ0_CMD_AW_ADR(_BASE))
#define DDAC_SEQ011_SEQ0_CMD_DATA_REG(_BASE) ((ddac_seq0_cmd_data_reg_t*) DDAC_SEQ011_SEQ0_CMD_DATA_ADR(_BASE))
#define DDAC_SEQ011_SEQ0_CMD_AW_REG(_BASE) ((ddac_seq0_cmd_aw_reg_t*) DDAC_SEQ011_SEQ0_CMD_AW_ADR(_BASE))
#define DDAC_SEQ012_SEQ0_CMD_DATA_REG(_BASE) ((ddac_seq0_cmd_data_reg_t*) DDAC_SEQ012_SEQ0_CMD_DATA_ADR(_BASE))
#define DDAC_SEQ012_SEQ0_CMD_AW_REG(_BASE) ((ddac_seq0_cmd_aw_reg_t*) DDAC_SEQ012_SEQ0_CMD_AW_ADR(_BASE))
#define DDAC_SEQ013_SEQ0_CMD_DATA_REG(_BASE) ((ddac_seq0_cmd_data_reg_t*) DDAC_SEQ013_SEQ0_CMD_DATA_ADR(_BASE))
#define DDAC_SEQ013_SEQ0_CMD_AW_REG(_BASE) ((ddac_seq0_cmd_aw_reg_t*) DDAC_SEQ013_SEQ0_CMD_AW_ADR(_BASE))
#define DDAC_SEQ014_SEQ0_CMD_DATA_REG(_BASE) ((ddac_seq0_cmd_data_reg_t*) DDAC_SEQ014_SEQ0_CMD_DATA_ADR(_BASE))
#define DDAC_SEQ014_SEQ0_CMD_AW_REG(_BASE) ((ddac_seq0_cmd_aw_reg_t*) DDAC_SEQ014_SEQ0_CMD_AW_ADR(_BASE))
#define DDAC_SEQ015_SEQ0_CMD_DATA_REG(_BASE) ((ddac_seq0_cmd_data_reg_t*) DDAC_SEQ015_SEQ0_CMD_DATA_ADR(_BASE))
#define DDAC_SEQ015_SEQ0_CMD_AW_REG(_BASE) ((ddac_seq0_cmd_aw_reg_t*) DDAC_SEQ015_SEQ0_CMD_AW_ADR(_BASE))
#define DDAC_SEQ016_SEQ0_CMD_DATA_REG(_BASE) ((ddac_seq0_cmd_data_reg_t*) DDAC_SEQ016_SEQ0_CMD_DATA_ADR(_BASE))
#define DDAC_SEQ016_SEQ0_CMD_AW_REG(_BASE) ((ddac_seq0_cmd_aw_reg_t*) DDAC_SEQ016_SEQ0_CMD_AW_ADR(_BASE))
#define DDAC_SEQ017_SEQ0_CMD_DATA_REG(_BASE) ((ddac_seq0_cmd_data_reg_t*) DDAC_SEQ017_SEQ0_CMD_DATA_ADR(_BASE))
#define DDAC_SEQ017_SEQ0_CMD_AW_REG(_BASE) ((ddac_seq0_cmd_aw_reg_t*) DDAC_SEQ017_SEQ0_CMD_AW_ADR(_BASE))
#define DDAC_SEQ018_SEQ0_CMD_DATA_REG(_BASE) ((ddac_seq0_cmd_data_reg_t*) DDAC_SEQ018_SEQ0_CMD_DATA_ADR(_BASE))
#define DDAC_SEQ018_SEQ0_CMD_AW_REG(_BASE) ((ddac_seq0_cmd_aw_reg_t*) DDAC_SEQ018_SEQ0_CMD_AW_ADR(_BASE))
#define DDAC_SEQ019_SEQ0_CMD_DATA_REG(_BASE) ((ddac_seq0_cmd_data_reg_t*) DDAC_SEQ019_SEQ0_CMD_DATA_ADR(_BASE))
#define DDAC_SEQ019_SEQ0_CMD_AW_REG(_BASE) ((ddac_seq0_cmd_aw_reg_t*) DDAC_SEQ019_SEQ0_CMD_AW_ADR(_BASE))
#define DDAC_SEQ10_SEQ1_CMD_DATA_REG(_BASE) ((ddac_seq1_cmd_data_reg_t*) DDAC_SEQ10_SEQ1_CMD_DATA_ADR(_BASE))
#define DDAC_SEQ10_SEQ1_CMD_AW_REG(_BASE) ((ddac_seq1_cmd_aw_reg_t*) DDAC_SEQ10_SEQ1_CMD_AW_ADR(_BASE))
#define DDAC_SEQ11_SEQ1_CMD_DATA_REG(_BASE) ((ddac_seq1_cmd_data_reg_t*) DDAC_SEQ11_SEQ1_CMD_DATA_ADR(_BASE))
#define DDAC_SEQ11_SEQ1_CMD_AW_REG(_BASE) ((ddac_seq1_cmd_aw_reg_t*) DDAC_SEQ11_SEQ1_CMD_AW_ADR(_BASE))
#define DDAC_SEQ12_SEQ1_CMD_DATA_REG(_BASE) ((ddac_seq1_cmd_data_reg_t*) DDAC_SEQ12_SEQ1_CMD_DATA_ADR(_BASE))
#define DDAC_SEQ12_SEQ1_CMD_AW_REG(_BASE) ((ddac_seq1_cmd_aw_reg_t*) DDAC_SEQ12_SEQ1_CMD_AW_ADR(_BASE))
#define DDAC_SEQ13_SEQ1_CMD_DATA_REG(_BASE) ((ddac_seq1_cmd_data_reg_t*) DDAC_SEQ13_SEQ1_CMD_DATA_ADR(_BASE))
#define DDAC_SEQ13_SEQ1_CMD_AW_REG(_BASE) ((ddac_seq1_cmd_aw_reg_t*) DDAC_SEQ13_SEQ1_CMD_AW_ADR(_BASE))
#define DDAC_SEQ14_SEQ1_CMD_DATA_REG(_BASE) ((ddac_seq1_cmd_data_reg_t*) DDAC_SEQ14_SEQ1_CMD_DATA_ADR(_BASE))
#define DDAC_SEQ14_SEQ1_CMD_AW_REG(_BASE) ((ddac_seq1_cmd_aw_reg_t*) DDAC_SEQ14_SEQ1_CMD_AW_ADR(_BASE))
#define DDAC_SEQ15_SEQ1_CMD_DATA_REG(_BASE) ((ddac_seq1_cmd_data_reg_t*) DDAC_SEQ15_SEQ1_CMD_DATA_ADR(_BASE))
#define DDAC_SEQ15_SEQ1_CMD_AW_REG(_BASE) ((ddac_seq1_cmd_aw_reg_t*) DDAC_SEQ15_SEQ1_CMD_AW_ADR(_BASE))
#define DDAC_SEQ16_SEQ1_CMD_DATA_REG(_BASE) ((ddac_seq1_cmd_data_reg_t*) DDAC_SEQ16_SEQ1_CMD_DATA_ADR(_BASE))
#define DDAC_SEQ16_SEQ1_CMD_AW_REG(_BASE) ((ddac_seq1_cmd_aw_reg_t*) DDAC_SEQ16_SEQ1_CMD_AW_ADR(_BASE))
#define DDAC_SEQ17_SEQ1_CMD_DATA_REG(_BASE) ((ddac_seq1_cmd_data_reg_t*) DDAC_SEQ17_SEQ1_CMD_DATA_ADR(_BASE))
#define DDAC_SEQ17_SEQ1_CMD_AW_REG(_BASE) ((ddac_seq1_cmd_aw_reg_t*) DDAC_SEQ17_SEQ1_CMD_AW_ADR(_BASE))
#define DDAC_SEQ18_SEQ1_CMD_DATA_REG(_BASE) ((ddac_seq1_cmd_data_reg_t*) DDAC_SEQ18_SEQ1_CMD_DATA_ADR(_BASE))
#define DDAC_SEQ18_SEQ1_CMD_AW_REG(_BASE) ((ddac_seq1_cmd_aw_reg_t*) DDAC_SEQ18_SEQ1_CMD_AW_ADR(_BASE))
#define DDAC_SEQ19_SEQ1_CMD_DATA_REG(_BASE) ((ddac_seq1_cmd_data_reg_t*) DDAC_SEQ19_SEQ1_CMD_DATA_ADR(_BASE))
#define DDAC_SEQ19_SEQ1_CMD_AW_REG(_BASE) ((ddac_seq1_cmd_aw_reg_t*) DDAC_SEQ19_SEQ1_CMD_AW_ADR(_BASE))
#define DDAC_SEQ110_SEQ1_CMD_DATA_REG(_BASE) ((ddac_seq1_cmd_data_reg_t*) DDAC_SEQ110_SEQ1_CMD_DATA_ADR(_BASE))
#define DDAC_SEQ110_SEQ1_CMD_AW_REG(_BASE) ((ddac_seq1_cmd_aw_reg_t*) DDAC_SEQ110_SEQ1_CMD_AW_ADR(_BASE))
#define DDAC_SEQ111_SEQ1_CMD_DATA_REG(_BASE) ((ddac_seq1_cmd_data_reg_t*) DDAC_SEQ111_SEQ1_CMD_DATA_ADR(_BASE))
#define DDAC_SEQ111_SEQ1_CMD_AW_REG(_BASE) ((ddac_seq1_cmd_aw_reg_t*) DDAC_SEQ111_SEQ1_CMD_AW_ADR(_BASE))
#define DDAC_SEQ112_SEQ1_CMD_DATA_REG(_BASE) ((ddac_seq1_cmd_data_reg_t*) DDAC_SEQ112_SEQ1_CMD_DATA_ADR(_BASE))
#define DDAC_SEQ112_SEQ1_CMD_AW_REG(_BASE) ((ddac_seq1_cmd_aw_reg_t*) DDAC_SEQ112_SEQ1_CMD_AW_ADR(_BASE))
#define DDAC_SEQ113_SEQ1_CMD_DATA_REG(_BASE) ((ddac_seq1_cmd_data_reg_t*) DDAC_SEQ113_SEQ1_CMD_DATA_ADR(_BASE))
#define DDAC_SEQ113_SEQ1_CMD_AW_REG(_BASE) ((ddac_seq1_cmd_aw_reg_t*) DDAC_SEQ113_SEQ1_CMD_AW_ADR(_BASE))
#define DDAC_SEQ114_SEQ1_CMD_DATA_REG(_BASE) ((ddac_seq1_cmd_data_reg_t*) DDAC_SEQ114_SEQ1_CMD_DATA_ADR(_BASE))
#define DDAC_SEQ114_SEQ1_CMD_AW_REG(_BASE) ((ddac_seq1_cmd_aw_reg_t*) DDAC_SEQ114_SEQ1_CMD_AW_ADR(_BASE))
#define DDAC_SEQ115_SEQ1_CMD_DATA_REG(_BASE) ((ddac_seq1_cmd_data_reg_t*) DDAC_SEQ115_SEQ1_CMD_DATA_ADR(_BASE))
#define DDAC_SEQ115_SEQ1_CMD_AW_REG(_BASE) ((ddac_seq1_cmd_aw_reg_t*) DDAC_SEQ115_SEQ1_CMD_AW_ADR(_BASE))
#define DDAC_SEQ116_SEQ1_CMD_DATA_REG(_BASE) ((ddac_seq1_cmd_data_reg_t*) DDAC_SEQ116_SEQ1_CMD_DATA_ADR(_BASE))
#define DDAC_SEQ116_SEQ1_CMD_AW_REG(_BASE) ((ddac_seq1_cmd_aw_reg_t*) DDAC_SEQ116_SEQ1_CMD_AW_ADR(_BASE))
#define DDAC_SEQ117_SEQ1_CMD_DATA_REG(_BASE) ((ddac_seq1_cmd_data_reg_t*) DDAC_SEQ117_SEQ1_CMD_DATA_ADR(_BASE))
#define DDAC_SEQ117_SEQ1_CMD_AW_REG(_BASE) ((ddac_seq1_cmd_aw_reg_t*) DDAC_SEQ117_SEQ1_CMD_AW_ADR(_BASE))
#define DDAC_SEQ118_SEQ1_CMD_DATA_REG(_BASE) ((ddac_seq1_cmd_data_reg_t*) DDAC_SEQ118_SEQ1_CMD_DATA_ADR(_BASE))
#define DDAC_SEQ118_SEQ1_CMD_AW_REG(_BASE) ((ddac_seq1_cmd_aw_reg_t*) DDAC_SEQ118_SEQ1_CMD_AW_ADR(_BASE))
#define DDAC_SEQ119_SEQ1_CMD_DATA_REG(_BASE) ((ddac_seq1_cmd_data_reg_t*) DDAC_SEQ119_SEQ1_CMD_DATA_ADR(_BASE))
#define DDAC_SEQ119_SEQ1_CMD_AW_REG(_BASE) ((ddac_seq1_cmd_aw_reg_t*) DDAC_SEQ119_SEQ1_CMD_AW_ADR(_BASE))
#define DDAC_SL_TSTAT_REG(_BASE) ((ddac_sl_tstat_reg_t*) DDAC_SL_TSTAT_ADR(_BASE))
#define DDAC_COLL_STAT_REG(_BASE) ((ddac_coll_stat_reg_t*) DDAC_COLL_STAT_ADR(_BASE))
#define DDAC_PAR_ERR_SEQ0A_REG(_BASE) ((ddac_par_err_seq0a_reg_t*) DDAC_PAR_ERR_SEQ0A_ADR(_BASE))
#define DDAC_PAR_ERR_SEQ0D_REG(_BASE) ((ddac_par_err_seq0d_reg_t*) DDAC_PAR_ERR_SEQ0D_ADR(_BASE))
#define DDAC_PAR_ERR_SEQ1A_REG(_BASE) ((ddac_par_err_seq1a_reg_t*) DDAC_PAR_ERR_SEQ1A_ADR(_BASE))
#define DDAC_PAR_ERR_SEQ1D_REG(_BASE) ((ddac_par_err_seq1d_reg_t*) DDAC_PAR_ERR_SEQ1D_ADR(_BASE))
#define DDAC_PAR_ERR_CSAPI_REG(_BASE) ((ddac_par_err_csapi_reg_t*) DDAC_PAR_ERR_CSAPI_ADR(_BASE))
#define DDAC_PAR_ERR_CSAPO_REG(_BASE) ((ddac_par_err_csapo_reg_t*) DDAC_PAR_ERR_CSAPO_ADR(_BASE))
#define DDAC_PAR_ERR_TX_ENCX_REG(_BASE) ((ddac_par_err_tx_encx_reg_t*) DDAC_PAR_ERR_TX_ENCX_ADR(_BASE))
#define DDAC_PAR_ERR_TX_DAC_REG(_BASE) ((ddac_par_err_tx_dac_reg_t*) DDAC_PAR_ERR_TX_DAC_ADR(_BASE))
#define DDAC_INT_STAT_REG(_BASE) ((ddac_int_stat_reg_t*) DDAC_INT_STAT_ADR(_BASE))
#define DDAC_INT_HI_EN_REG(_BASE) ((ddac_int_hi_en_reg_t*) DDAC_INT_HI_EN_ADR(_BASE))
#define DDAC_INT_LO_EN_REG(_BASE) ((ddac_int_lo_en_reg_t*) DDAC_INT_LO_EN_ADR(_BASE))
#define DDAC_INT_CLR_REG(_BASE) ((ddac_int_clr_reg_t*) DDAC_INT_CLR_ADR(_BASE))
#define DDAC_INT_FORCE_REG(_BASE) ((ddac_int_force_reg_t*) DDAC_INT_FORCE_ADR(_BASE))
#define DDAC_APB_BRDG_STAT_REG(_BASE) ((ddac_apb_brdg_stat_reg_t*) DDAC_APB_BRDG_STAT_ADR(_BASE))

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    ddac_scratch_reg_t SCRATCH;         /*< Address offset = 0x0 */
    ddac_seq0_ctrl_reg_t SEQ0_CTRL;       /*< Address offset = 0x4 */
    ddac_seq0_iter_reg_t SEQ0_ITER;       /*< Address offset = 0x8 */
    ddac_seq0_stat_reg_t SEQ0_STAT;       /*< Address offset = 0xc */
    ddac_seq1_ctrl_reg_t SEQ1_CTRL;       /*< Address offset = 0x10 */
    ddac_seq1_iter_reg_t SEQ1_ITER;       /*< Address offset = 0x14 */
    ddac_seq1_stat_reg_t SEQ1_STAT;       /*< Address offset = 0x18 */
    ddac_sl_tctl_reg_t SL_TCTL;         /*< Address offset = 0x1c */
    ddac_tx_encx_conf0_reg_t TX_ENCX_CONF0;   /*< Address offset = 0x20 */
    ddac_tx_encx_conf1_reg_t TX_ENCX_CONF1;   /*< Address offset = 0x24 */
    ddac_tx_encx_conf2_reg_t TX_ENCX_CONF2;   /*< Address offset = 0x28 */
    ddac_tx_encx_conf3_reg_t TX_ENCX_CONF3;   /*< Address offset = 0x2c */
    ddac_tx_encx_conf4_reg_t TX_ENCX_CONF4;   /*< Address offset = 0x30 */
    ddac_tx_encx_conf5_reg_t TX_ENCX_CONF5;   /*< Address offset = 0x34 */
    ddac_tx_encx_conf6_reg_t TX_ENCX_CONF6;   /*< Address offset = 0x38 */
    ddac_tx_encx_conf7_reg_t TX_ENCX_CONF7;   /*< Address offset = 0x3c */
    ddac_tx_encx_conf8_reg_t TX_ENCX_CONF8;   /*< Address offset = 0x40 */
    ddac_tx_dac_conf0_reg_t TX_DAC_CONF0;    /*< Address offset = 0x44 */
    ddac_tx_dac_conf1_reg_t TX_DAC_CONF1;    /*< Address offset = 0x48 */
    ddac_tx_dac_conf2_reg_t TX_DAC_CONF2;    /*< Address offset = 0x4c */
    ddac_tx_dac_conf3_reg_t TX_DAC_CONF3;    /*< Address offset = 0x50 */
    ddac_tx_dac_conf4_reg_t TX_DAC_CONF4;    /*< Address offset = 0x54 */
    ddac_tx_dac_conf5_reg_t TX_DAC_CONF5;    /*< Address offset = 0x58 */
    ddac_tx_dac_conf6_reg_t TX_DAC_CONF6;    /*< Address offset = 0x5c */
    ddac_csapi_reg_t CSAPI[6];        /*< Address offset = 0x60 */
    ddac_csapo_reg_t CSAPO[6];        /*< Address offset = 0x78 */
    ddac_dsas_reg_t DSAS;            /*< Address offset = 0x90 */
    ddac_dsal_reg_t DSAL;            /*< Address offset = 0x94 */
    ddac_dsa_fg_reg_t DSA_FG;          /*< Address offset = 0x98 */
    ddac_stat_reg_t STAT;            /*< Address offset = 0x9c */
    ddac_seq0_cmd_data_reg_t SEQ00_SEQ0_CMD_DATA; /*< Address offset = 0xa0 */
    ddac_seq0_cmd_aw_reg_t SEQ00_SEQ0_CMD_AW; /*< Address offset = 0xa4 */
    ddac_seq0_cmd_data_reg_t SEQ01_SEQ0_CMD_DATA; /*< Address offset = 0xa8 */
    ddac_seq0_cmd_aw_reg_t SEQ01_SEQ0_CMD_AW; /*< Address offset = 0xac */
    ddac_seq0_cmd_data_reg_t SEQ02_SEQ0_CMD_DATA; /*< Address offset = 0xb0 */
    ddac_seq0_cmd_aw_reg_t SEQ02_SEQ0_CMD_AW; /*< Address offset = 0xb4 */
    ddac_seq0_cmd_data_reg_t SEQ03_SEQ0_CMD_DATA; /*< Address offset = 0xb8 */
    ddac_seq0_cmd_aw_reg_t SEQ03_SEQ0_CMD_AW; /*< Address offset = 0xbc */
    ddac_seq0_cmd_data_reg_t SEQ04_SEQ0_CMD_DATA; /*< Address offset = 0xc0 */
    ddac_seq0_cmd_aw_reg_t SEQ04_SEQ0_CMD_AW; /*< Address offset = 0xc4 */
    ddac_seq0_cmd_data_reg_t SEQ05_SEQ0_CMD_DATA; /*< Address offset = 0xc8 */
    ddac_seq0_cmd_aw_reg_t SEQ05_SEQ0_CMD_AW; /*< Address offset = 0xcc */
    ddac_seq0_cmd_data_reg_t SEQ06_SEQ0_CMD_DATA; /*< Address offset = 0xd0 */
    ddac_seq0_cmd_aw_reg_t SEQ06_SEQ0_CMD_AW; /*< Address offset = 0xd4 */
    ddac_seq0_cmd_data_reg_t SEQ07_SEQ0_CMD_DATA; /*< Address offset = 0xd8 */
    ddac_seq0_cmd_aw_reg_t SEQ07_SEQ0_CMD_AW; /*< Address offset = 0xdc */
    ddac_seq0_cmd_data_reg_t SEQ08_SEQ0_CMD_DATA; /*< Address offset = 0xe0 */
    ddac_seq0_cmd_aw_reg_t SEQ08_SEQ0_CMD_AW; /*< Address offset = 0xe4 */
    ddac_seq0_cmd_data_reg_t SEQ09_SEQ0_CMD_DATA; /*< Address offset = 0xe8 */
    ddac_seq0_cmd_aw_reg_t SEQ09_SEQ0_CMD_AW; /*< Address offset = 0xec */
    ddac_seq0_cmd_data_reg_t SEQ010_SEQ0_CMD_DATA; /*< Address offset = 0xf0 */
    ddac_seq0_cmd_aw_reg_t SEQ010_SEQ0_CMD_AW; /*< Address offset = 0xf4 */
    ddac_seq0_cmd_data_reg_t SEQ011_SEQ0_CMD_DATA; /*< Address offset = 0xf8 */
    ddac_seq0_cmd_aw_reg_t SEQ011_SEQ0_CMD_AW; /*< Address offset = 0xfc */
    ddac_seq0_cmd_data_reg_t SEQ012_SEQ0_CMD_DATA; /*< Address offset = 0x100 */
    ddac_seq0_cmd_aw_reg_t SEQ012_SEQ0_CMD_AW; /*< Address offset = 0x104 */
    ddac_seq0_cmd_data_reg_t SEQ013_SEQ0_CMD_DATA; /*< Address offset = 0x108 */
    ddac_seq0_cmd_aw_reg_t SEQ013_SEQ0_CMD_AW; /*< Address offset = 0x10c */
    ddac_seq0_cmd_data_reg_t SEQ014_SEQ0_CMD_DATA; /*< Address offset = 0x110 */
    ddac_seq0_cmd_aw_reg_t SEQ014_SEQ0_CMD_AW; /*< Address offset = 0x114 */
    ddac_seq0_cmd_data_reg_t SEQ015_SEQ0_CMD_DATA; /*< Address offset = 0x118 */
    ddac_seq0_cmd_aw_reg_t SEQ015_SEQ0_CMD_AW; /*< Address offset = 0x11c */
    ddac_seq0_cmd_data_reg_t SEQ016_SEQ0_CMD_DATA; /*< Address offset = 0x120 */
    ddac_seq0_cmd_aw_reg_t SEQ016_SEQ0_CMD_AW; /*< Address offset = 0x124 */
    ddac_seq0_cmd_data_reg_t SEQ017_SEQ0_CMD_DATA; /*< Address offset = 0x128 */
    ddac_seq0_cmd_aw_reg_t SEQ017_SEQ0_CMD_AW; /*< Address offset = 0x12c */
    ddac_seq0_cmd_data_reg_t SEQ018_SEQ0_CMD_DATA; /*< Address offset = 0x130 */
    ddac_seq0_cmd_aw_reg_t SEQ018_SEQ0_CMD_AW; /*< Address offset = 0x134 */
    ddac_seq0_cmd_data_reg_t SEQ019_SEQ0_CMD_DATA; /*< Address offset = 0x138 */
    ddac_seq0_cmd_aw_reg_t SEQ019_SEQ0_CMD_AW; /*< Address offset = 0x13c */
    ddac_seq1_cmd_data_reg_t SEQ10_SEQ1_CMD_DATA; /*< Address offset = 0x140 */
    ddac_seq1_cmd_aw_reg_t SEQ10_SEQ1_CMD_AW; /*< Address offset = 0x144 */
    ddac_seq1_cmd_data_reg_t SEQ11_SEQ1_CMD_DATA; /*< Address offset = 0x148 */
    ddac_seq1_cmd_aw_reg_t SEQ11_SEQ1_CMD_AW; /*< Address offset = 0x14c */
    ddac_seq1_cmd_data_reg_t SEQ12_SEQ1_CMD_DATA; /*< Address offset = 0x150 */
    ddac_seq1_cmd_aw_reg_t SEQ12_SEQ1_CMD_AW; /*< Address offset = 0x154 */
    ddac_seq1_cmd_data_reg_t SEQ13_SEQ1_CMD_DATA; /*< Address offset = 0x158 */
    ddac_seq1_cmd_aw_reg_t SEQ13_SEQ1_CMD_AW; /*< Address offset = 0x15c */
    ddac_seq1_cmd_data_reg_t SEQ14_SEQ1_CMD_DATA; /*< Address offset = 0x160 */
    ddac_seq1_cmd_aw_reg_t SEQ14_SEQ1_CMD_AW; /*< Address offset = 0x164 */
    ddac_seq1_cmd_data_reg_t SEQ15_SEQ1_CMD_DATA; /*< Address offset = 0x168 */
    ddac_seq1_cmd_aw_reg_t SEQ15_SEQ1_CMD_AW; /*< Address offset = 0x16c */
    ddac_seq1_cmd_data_reg_t SEQ16_SEQ1_CMD_DATA; /*< Address offset = 0x170 */
    ddac_seq1_cmd_aw_reg_t SEQ16_SEQ1_CMD_AW; /*< Address offset = 0x174 */
    ddac_seq1_cmd_data_reg_t SEQ17_SEQ1_CMD_DATA; /*< Address offset = 0x178 */
    ddac_seq1_cmd_aw_reg_t SEQ17_SEQ1_CMD_AW; /*< Address offset = 0x17c */
    ddac_seq1_cmd_data_reg_t SEQ18_SEQ1_CMD_DATA; /*< Address offset = 0x180 */
    ddac_seq1_cmd_aw_reg_t SEQ18_SEQ1_CMD_AW; /*< Address offset = 0x184 */
    ddac_seq1_cmd_data_reg_t SEQ19_SEQ1_CMD_DATA; /*< Address offset = 0x188 */
    ddac_seq1_cmd_aw_reg_t SEQ19_SEQ1_CMD_AW; /*< Address offset = 0x18c */
    ddac_seq1_cmd_data_reg_t SEQ110_SEQ1_CMD_DATA; /*< Address offset = 0x190 */
    ddac_seq1_cmd_aw_reg_t SEQ110_SEQ1_CMD_AW; /*< Address offset = 0x194 */
    ddac_seq1_cmd_data_reg_t SEQ111_SEQ1_CMD_DATA; /*< Address offset = 0x198 */
    ddac_seq1_cmd_aw_reg_t SEQ111_SEQ1_CMD_AW; /*< Address offset = 0x19c */
    ddac_seq1_cmd_data_reg_t SEQ112_SEQ1_CMD_DATA; /*< Address offset = 0x1a0 */
    ddac_seq1_cmd_aw_reg_t SEQ112_SEQ1_CMD_AW; /*< Address offset = 0x1a4 */
    ddac_seq1_cmd_data_reg_t SEQ113_SEQ1_CMD_DATA; /*< Address offset = 0x1a8 */
    ddac_seq1_cmd_aw_reg_t SEQ113_SEQ1_CMD_AW; /*< Address offset = 0x1ac */
    ddac_seq1_cmd_data_reg_t SEQ114_SEQ1_CMD_DATA; /*< Address offset = 0x1b0 */
    ddac_seq1_cmd_aw_reg_t SEQ114_SEQ1_CMD_AW; /*< Address offset = 0x1b4 */
    ddac_seq1_cmd_data_reg_t SEQ115_SEQ1_CMD_DATA; /*< Address offset = 0x1b8 */
    ddac_seq1_cmd_aw_reg_t SEQ115_SEQ1_CMD_AW; /*< Address offset = 0x1bc */
    ddac_seq1_cmd_data_reg_t SEQ116_SEQ1_CMD_DATA; /*< Address offset = 0x1c0 */
    ddac_seq1_cmd_aw_reg_t SEQ116_SEQ1_CMD_AW; /*< Address offset = 0x1c4 */
    ddac_seq1_cmd_data_reg_t SEQ117_SEQ1_CMD_DATA; /*< Address offset = 0x1c8 */
    ddac_seq1_cmd_aw_reg_t SEQ117_SEQ1_CMD_AW; /*< Address offset = 0x1cc */
    ddac_seq1_cmd_data_reg_t SEQ118_SEQ1_CMD_DATA; /*< Address offset = 0x1d0 */
    ddac_seq1_cmd_aw_reg_t SEQ118_SEQ1_CMD_AW; /*< Address offset = 0x1d4 */
    ddac_seq1_cmd_data_reg_t SEQ119_SEQ1_CMD_DATA; /*< Address offset = 0x1d8 */
    ddac_seq1_cmd_aw_reg_t SEQ119_SEQ1_CMD_AW; /*< Address offset = 0x1dc */
    const uint8_t        reservedArea0 [8];   /*< Address offset = 0x1e0 */
    ddac_sl_tstat_reg_t SL_TSTAT;        /*< Address offset = 0x1e8 */
    ddac_coll_stat_reg_t COLL_STAT;       /*< Address offset = 0x1ec */
    ddac_par_err_seq0a_reg_t PAR_ERR_SEQ0A;   /*< Address offset = 0x1f0 */
    ddac_par_err_seq0d_reg_t PAR_ERR_SEQ0D;   /*< Address offset = 0x1f4 */
    ddac_par_err_seq1a_reg_t PAR_ERR_SEQ1A;   /*< Address offset = 0x1f8 */
    ddac_par_err_seq1d_reg_t PAR_ERR_SEQ1D;   /*< Address offset = 0x1fc */
    ddac_par_err_csapi_reg_t PAR_ERR_CSAPI;   /*< Address offset = 0x200 */
    ddac_par_err_csapo_reg_t PAR_ERR_CSAPO;   /*< Address offset = 0x204 */
    ddac_par_err_tx_encx_reg_t PAR_ERR_TX_ENCX; /*< Address offset = 0x208 */
    ddac_par_err_tx_dac_reg_t PAR_ERR_TX_DAC;  /*< Address offset = 0x20c */
    const uint8_t        reservedArea1 [16];  /*< Address offset = 0x210 */
    ddac_int_stat_reg_t INT_STAT;      /*< Address offset = 0x220 */
    ddac_int_hi_en_reg_t INT_HI_EN;       /*< Address offset = 0x224 */
    ddac_int_lo_en_reg_t INT_LO_EN;       /*< Address offset = 0x228 */
    ddac_int_clr_reg_t INT_CLR;       /*< Address offset = 0x22c */
    ddac_int_force_reg_t INT_FORCE;       /*< Address offset = 0x230 */
    ddac_apb_brdg_stat_reg_t APB_BRDG_STAT; /*< Address offset = 0x234 */
} ddac_t;     // size: 0x01f8

// AddressSpace struct pointer
//
#define ANT0_DDAC0        ((ddac_t*) ANT0_DDAC0_BASE)
#define ANT0_DDAC1        ((ddac_t*) ANT0_DDAC1_BASE)
#define ANT0_DDAC2        ((ddac_t*) ANT0_DDAC2_BASE)
#define ANT0_DDAC3        ((ddac_t*) ANT0_DDAC3_BASE)
#define ANT1_DDAC0        ((ddac_t*) ANT1_DDAC0_BASE)
#define ANT1_DDAC1        ((ddac_t*) ANT1_DDAC1_BASE)
#define ANT1_DDAC2        ((ddac_t*) ANT1_DDAC2_BASE)
#define ANT1_DDAC3        ((ddac_t*) ANT1_DDAC3_BASE)
#define ANT2_DDAC0        ((ddac_t*) ANT2_DDAC0_BASE)
#define ANT2_DDAC1        ((ddac_t*) ANT2_DDAC1_BASE)
#define ANT2_DDAC2        ((ddac_t*) ANT2_DDAC2_BASE)
#define ANT2_DDAC3        ((ddac_t*) ANT2_DDAC3_BASE)
#define ANT3_DDAC0        ((ddac_t*) ANT3_DDAC0_BASE)
#define ANT3_DDAC1        ((ddac_t*) ANT3_DDAC1_BASE)
#define ANT3_DDAC2        ((ddac_t*) ANT3_DDAC2_BASE)
#define ANT3_DDAC3        ((ddac_t*) ANT3_DDAC3_BASE)
#define FB_ANT0_DDAC_TOP  ((ddac_t*) FB_ANT0_DDAC_TOP_BASE)
#define FB_ANT0_DDAC_BOT  ((ddac_t*) FB_ANT0_DDAC_BOT_BASE)
#define FB_ANT1_DDAC_TOP  ((ddac_t*) FB_ANT1_DDAC_TOP_BASE)
#define FB_ANT1_DDAC_BOT  ((ddac_t*) FB_ANT1_DDAC_BOT_BASE)

// ******************************************* /Address Space

#endif      // _DDAC_H_

