#ifndef _DWC_PCIE_IDE_UAES_GCMP_H_
#define _DWC_PCIE_IDE_UAES_GCMP_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE  ( 0x01a02000 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CORE_VER_NUM_OFFSET ( 0x00000000U )
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CORE_VER_TYPE_OFFSET ( 0x00000004U )
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_EN_OFFSET ( 0x00000008U )
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_STAT_OFFSET ( 0x0000000cU )
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CTRL_OFFSET ( 0x00000014U )
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_STAT_OFFSET ( 0x00000018U )
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_0_OFFSET ( 0x00000020U )
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_1_OFFSET ( 0x00000024U )
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_2_OFFSET ( 0x00000028U )
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_3_OFFSET ( 0x0000002cU )
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_4_OFFSET ( 0x00000030U )
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_5_OFFSET ( 0x00000034U )
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_6_OFFSET ( 0x00000038U )
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_7_OFFSET ( 0x0000003cU )
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_INITIAL_IV_LSW_OFFSET ( 0x00000040U )
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_INITIAL_IV_MSW_OFFSET ( 0x00000044U )
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_LINK_DIS_STRM_KEYS_OFFSET ( 0x000001c0U )
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_SELIVE_DIS_STRM_KEYS_OFFSET ( 0x000001c4U )
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_SOP_OFFSET ( 0x00000400U )
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_EOP_OFFSET ( 0x00000404U )
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_AAD_OFFSET ( 0x00000408U )
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_MSG_OFFSET ( 0x0000040cU )
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CTR_IV_IDX_OFFSET ( 0x00000410U )
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CTR_IV_CHUNK_OFFSET ( 0x00000414U )
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_AAD_SIZE_OFFSET ( 0x00000424U )
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_MSG_SIZE_OFFSET ( 0x00000428U )
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_CTX_OFFSET ( 0x0000042cU )
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_VALID_OFFSET ( 0x00000430U )
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_READY_OFFSET ( 0x00000434U )
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_TEST_MODE_CFG_OFFSET ( 0x0000044cU )
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_IN_DATA_IDX_OFFSET ( 0x00000450U )
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_IN_DATA_OFFSET ( 0x00000454U )
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_DATA_VALID_OFFSET ( 0x00000458U )
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_DATA_READY_OFFSET ( 0x0000045cU )
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_READY_OFFSET ( 0x00000500U )
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_VALID_OFFSET ( 0x00000504U )
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_SOP_OFFSET ( 0x00000508U )
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_EOP_OFFSET ( 0x0000050cU )
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_AAD_OFFSET ( 0x00000514U )
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MSG_OFFSET ( 0x00000518U )
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_AAD_SIZE_OFFSET ( 0x0000051cU )
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MSG_SIZE_OFFSET ( 0x00000520U )
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_DATA_IDX_OFFSET ( 0x00000524U )
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_DATA_CHUNK_OFFSET ( 0x00000528U )
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MAC_IDX_OFFSET ( 0x00000530U )
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MAC_CHUNK_OFFSET ( 0x00000534U )
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_SEL_AES_TX_SEL_OFFSET ( 0x000005fcU )
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CORE_VER_NUM_OFFSET ( 0x00000800U )
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CORE_VER_TYPE_OFFSET ( 0x00000804U )
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_EN_OFFSET ( 0x00000808U )
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_STAT_OFFSET ( 0x0000080cU )
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CTRL_OFFSET ( 0x00000814U )
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_STAT_OFFSET ( 0x00000818U )
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_0_OFFSET ( 0x00000820U )
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_1_OFFSET ( 0x00000824U )
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_2_OFFSET ( 0x00000828U )
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_3_OFFSET ( 0x0000082cU )
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_4_OFFSET ( 0x00000830U )
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_5_OFFSET ( 0x00000834U )
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_6_OFFSET ( 0x00000838U )
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_7_OFFSET ( 0x0000083cU )
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_INITIAL_IV_LSW_OFFSET ( 0x00000840U )
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_INITIAL_IV_MSW_OFFSET ( 0x00000844U )
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_LINK_DIS_STRM_KEYS_OFFSET ( 0x000009c0U )
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_SELIVE_DIS_STRM_KEYS_OFFSET ( 0x000009c4U )
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_SOP_OFFSET ( 0x00000c00U )
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_EOP_OFFSET ( 0x00000c04U )
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_AAD_OFFSET ( 0x00000c08U )
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_MSG_OFFSET ( 0x00000c0cU )
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CTR_IV_IDX_OFFSET ( 0x00000c10U )
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CTR_IV_CHUNK_OFFSET ( 0x00000c14U )
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_AAD_SIZE_OFFSET ( 0x00000c24U )
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_MSG_SIZE_OFFSET ( 0x00000c28U )
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_CTX_OFFSET ( 0x00000c2cU )
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_VALID_OFFSET ( 0x00000c30U )
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_READY_OFFSET ( 0x00000c34U )
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_TEST_MODE_CFG_OFFSET ( 0x00000c4cU )
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_IN_DATA_IDX_OFFSET ( 0x00000c50U )
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_IN_DATA_OFFSET ( 0x00000c54U )
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_DATA_VALID_OFFSET ( 0x00000c58U )
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_DATA_READY_OFFSET ( 0x00000c5cU )
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_READY_OFFSET ( 0x00000d00U )
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_VALID_OFFSET ( 0x00000d04U )
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_SOP_OFFSET ( 0x00000d08U )
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_EOP_OFFSET ( 0x00000d0cU )
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_AAD_OFFSET ( 0x00000d14U )
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MSG_OFFSET ( 0x00000d18U )
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_AAD_SIZE_OFFSET ( 0x00000d1cU )
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MSG_SIZE_OFFSET ( 0x00000d20U )
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_DATA_IDX_OFFSET ( 0x00000d24U )
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_DATA_CHUNK_OFFSET ( 0x00000d28U )
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MAC_IDX_OFFSET ( 0x00000d30U )
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MAC_CHUNK_OFFSET ( 0x00000d34U )
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_SEL_AES_RX_SEL_OFFSET ( 0x00000dfcU )
#define PCIE_IDE_UAES_GCMP_ID_BIST_CTRL_OFFSET ( 0x00000e00U )
#define PCIE_IDE_UAES_GCMP_ID_BIST_STAT_OFFSET ( 0x00000e04U )
#define PCIE_IDE_UAES_GCMP_ID_BIST_TIMESTAMP_TX_0_31_OFFSET ( 0x00000e08U )
#define PCIE_IDE_UAES_GCMP_ID_BIST_TIMESTAMP_TX_32_63_OFFSET ( 0x00000e0cU )
#define PCIE_IDE_UAES_GCMP_ID_BIST_TIMESTAMP_RX1_0_31_OFFSET ( 0x00000e10U )
#define PCIE_IDE_UAES_GCMP_ID_BIST_TIMESTAMP_RX1_32_63_OFFSET ( 0x00000e14U )
#define PCIE_IDE_UAES_GCMP_ID_BIST_ERR_LOG_OFFSET ( 0x00000e20U )
#define PCIE_IDE_UAES_GCMP_ID_BIST_LOG_TIMESTAMP_TX_0_31_OFFSET ( 0x00000e24U )
#define PCIE_IDE_UAES_GCMP_ID_BIST_LOG_TIMESTAMP_TX_32_63_OFFSET ( 0x00000e28U )
#define PCIE_IDE_UAES_GCMP_ID_BIST_LOG_TIMESTAMP_RX1_0_31_OFFSET ( 0x00000e2cU )
#define PCIE_IDE_UAES_GCMP_ID_BIST_LOG_TIMESTAMP_RX1_32_63_OFFSET ( 0x00000e30U )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CORE_VER_NUM_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CORE_VER_NUM_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CORE_VER_TYPE_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CORE_VER_TYPE_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_EN_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_EN_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_STAT_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_STAT_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CTRL_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CTRL_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_STAT_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_STAT_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_0_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_0_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_1_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_1_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_2_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_2_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_3_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_3_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_4_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_4_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_5_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_5_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_6_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_6_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_7_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_7_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_INITIAL_IV_LSW_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_INITIAL_IV_LSW_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_INITIAL_IV_MSW_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_INITIAL_IV_MSW_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_LINK_DIS_STRM_KEYS_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_LINK_DIS_STRM_KEYS_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_SELIVE_DIS_STRM_KEYS_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_SELIVE_DIS_STRM_KEYS_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_SOP_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_SOP_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_EOP_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_EOP_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_AAD_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_AAD_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_MSG_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_MSG_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CTR_IV_IDX_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CTR_IV_IDX_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CTR_IV_CHUNK_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CTR_IV_CHUNK_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_AAD_SIZE_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_AAD_SIZE_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_MSG_SIZE_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_MSG_SIZE_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_CTX_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_CTX_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_VALID_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_VALID_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_READY_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_READY_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_TEST_MODE_CFG_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_TEST_MODE_CFG_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_IN_DATA_IDX_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_IN_DATA_IDX_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_IN_DATA_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_IN_DATA_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_DATA_VALID_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_DATA_VALID_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_DATA_READY_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_DATA_READY_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_READY_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_READY_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_VALID_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_VALID_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_SOP_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_SOP_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_EOP_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_EOP_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_AAD_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_AAD_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MSG_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MSG_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_AAD_SIZE_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_AAD_SIZE_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MSG_SIZE_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MSG_SIZE_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_DATA_IDX_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_DATA_IDX_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_DATA_CHUNK_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_DATA_CHUNK_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MAC_IDX_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MAC_IDX_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MAC_CHUNK_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MAC_CHUNK_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_SEL_AES_TX_SEL_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_SEL_AES_TX_SEL_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CORE_VER_NUM_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CORE_VER_NUM_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CORE_VER_TYPE_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CORE_VER_TYPE_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_EN_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_EN_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_STAT_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_STAT_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CTRL_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CTRL_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_STAT_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_STAT_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_0_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_0_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_1_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_1_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_2_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_2_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_3_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_3_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_4_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_4_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_5_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_5_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_6_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_6_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_7_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_7_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_INITIAL_IV_LSW_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_INITIAL_IV_LSW_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_INITIAL_IV_MSW_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_INITIAL_IV_MSW_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_LINK_DIS_STRM_KEYS_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_LINK_DIS_STRM_KEYS_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_SELIVE_DIS_STRM_KEYS_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_SELIVE_DIS_STRM_KEYS_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_SOP_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_SOP_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_EOP_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_EOP_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_AAD_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_AAD_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_MSG_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_MSG_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CTR_IV_IDX_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CTR_IV_IDX_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CTR_IV_CHUNK_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CTR_IV_CHUNK_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_AAD_SIZE_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_AAD_SIZE_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_MSG_SIZE_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_MSG_SIZE_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_CTX_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_CTX_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_VALID_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_VALID_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_READY_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_READY_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_TEST_MODE_CFG_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_TEST_MODE_CFG_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_IN_DATA_IDX_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_IN_DATA_IDX_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_IN_DATA_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_IN_DATA_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_DATA_VALID_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_DATA_VALID_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_DATA_READY_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_DATA_READY_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_READY_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_READY_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_VALID_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_VALID_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_SOP_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_SOP_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_EOP_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_EOP_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_AAD_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_AAD_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MSG_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MSG_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_AAD_SIZE_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_AAD_SIZE_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MSG_SIZE_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MSG_SIZE_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_DATA_IDX_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_DATA_IDX_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_DATA_CHUNK_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_DATA_CHUNK_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MAC_IDX_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MAC_IDX_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MAC_CHUNK_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MAC_CHUNK_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_SEL_AES_RX_SEL_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_SEL_AES_RX_SEL_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_BIST_CTRL_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_BIST_CTRL_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_BIST_STAT_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_BIST_STAT_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_BIST_TIMESTAMP_TX_0_31_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_BIST_TIMESTAMP_TX_0_31_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_BIST_TIMESTAMP_TX_32_63_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_BIST_TIMESTAMP_TX_32_63_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_BIST_TIMESTAMP_RX1_0_31_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_BIST_TIMESTAMP_RX1_0_31_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_BIST_TIMESTAMP_RX1_32_63_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_BIST_TIMESTAMP_RX1_32_63_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_BIST_ERR_LOG_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_BIST_ERR_LOG_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_BIST_LOG_TIMESTAMP_TX_0_31_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_BIST_LOG_TIMESTAMP_TX_0_31_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_BIST_LOG_TIMESTAMP_TX_32_63_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_BIST_LOG_TIMESTAMP_TX_32_63_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_BIST_LOG_TIMESTAMP_RX1_0_31_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_BIST_LOG_TIMESTAMP_RX1_0_31_OFFSET ) ))
#define PCIE_IDE_UAES_GCMP_ID_BIST_LOG_TIMESTAMP_RX1_32_63_ADR (( ( DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE ) + ( PCIE_IDE_UAES_GCMP_ID_BIST_LOG_TIMESTAMP_RX1_32_63_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_TX_HOST_AES_TX_CORE_VER_NUM register description at address offset 0x0
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_tx_host/AES_TX_CORE_VER_NUM
  * AES TX : IP Version Number Register.
  */

typedef union {
  struct {
    uint32_t VERSION_NUM : 16;
    ///< Indicates the coreKit release version number in BCD format. For example,
    ///< Release number `1.70a` is represented as 0x0170.       Release number
    ///< `12.41a` is represented as 0x1241.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_core_ver_num_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CORE_VER_NUM_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CORE_VER_NUM_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CORE_VER_NUM_WR_MASK (0x00000000U)


///< Indicates the coreKit release version number in BCD format. For example,
///< Release number `1.70a` is represented as 0x0170.       Release number
///< `12.41a` is represented as 0x1241.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CORE_VER_NUM_VER_NUM_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CORE_VER_NUM_VER_NUM_BF_WID (16)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CORE_VER_NUM_VER_NUM_BF_MSK (0x0000FFFF)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CORE_VER_NUM_VER_NUM_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CORE_VER_NUM_RESERVED_31_16_BF_OFF (16)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CORE_VER_NUM_RESERVED_31_16_BF_WID (16)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CORE_VER_NUM_RESERVED_31_16_BF_MSK (0xFFFF0000)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CORE_VER_NUM_RESERVED_31_16_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_TX_HOST_AES_TX_CORE_VER_TYPE register description at address offset 0x4
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_tx_host/AES_TX_CORE_VER_TYPE
  * AES TX : IP Version Type Register.
  */

typedef union {
  struct {
    uint32_t TYPE_NUM : 8;
    ///< Indicates the coreKit release version type number in BCD format. For
    ///< example,        Release number `1.70a-lp04` is represented as 0x04.
    ///< GA releases have a value of 0.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t PKG_NUM : 4;
    ///< Indicates the alphabetical packaging number of coreKit ID. Values,
    ///< 4'b1010: 'a'       4'b1011: 'b'        4'b1100: 'c'        4'b1101:
    ///< 'd'       4'b1110: 'e'        4'b1111: 'f'        4'b0000: 'g'
    ///< --------        4'b1000: 'o'        4'b1001: 'p'        NOTE: PKG_NUM
    ///< can have a value from 'a' to 'p' only.
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
    uint32_t TYPE_ENUM : 4;
    ///< Indicates the coreKit release type. Values,        0x0 (TYPE_ENUM_GA):
    ///< GA release        0x1 (TYPE_ENUM_LCA): LCA release        0x2 (TYPE_ENUM_EA):
    ///< EA release        0x3 (TYPE_ENUM_LP): LP release        0x4 reserved
    ///< 0x5 (TYPE_ENUM_SOW): SOW release        0x6 (TYPE_ENUM_EC): EC release
    ///< others: reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_core_ver_type_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CORE_VER_TYPE_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CORE_VER_TYPE_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CORE_VER_TYPE_WR_MASK (0x00000000U)


///< Indicates the coreKit release version type number in BCD format. For
///< example,        Release number `1.70a-lp04` is represented as 0x04.
///< GA releases have a value of 0.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CORE_VER_TYPE_NUM_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CORE_VER_TYPE_NUM_BF_WID ( 8)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CORE_VER_TYPE_NUM_BF_MSK (0x000000FF)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CORE_VER_TYPE_NUM_BF_DEF (0x00000000)

///< Indicates the alphabetical packaging number of coreKit ID. Values,
///< 4'b1010: 'a'       4'b1011: 'b'        4'b1100: 'c'        4'b1101:
///< 'd'       4'b1110: 'e'        4'b1111: 'f'        4'b0000: 'g'
///< --------        4'b1000: 'o'        4'b1001: 'p'        NOTE: PKG_NUM
///< can have a value from 'a' to 'p' only.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CORE_VER_TYPE_PKG_NUM_BF_OFF ( 8)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CORE_VER_TYPE_PKG_NUM_BF_WID ( 4)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CORE_VER_TYPE_PKG_NUM_BF_MSK (0x00000F00)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CORE_VER_TYPE_PKG_NUM_BF_DEF (0x00000000)

///< Indicates the coreKit release type. Values,        0x0 (TYPE_ENUM_GA):
///< GA release        0x1 (TYPE_ENUM_LCA): LCA release        0x2 (TYPE_ENUM_EA):
///< EA release        0x3 (TYPE_ENUM_LP): LP release        0x4 reserved
///< 0x5 (TYPE_ENUM_SOW): SOW release        0x6 (TYPE_ENUM_EC): EC release
///< others: reserved
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CORE_VER_TYPE_ENUM_BF_OFF (12)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CORE_VER_TYPE_ENUM_BF_WID ( 4)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CORE_VER_TYPE_ENUM_BF_MSK (0x0000F000)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CORE_VER_TYPE_ENUM_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CORE_VER_TYPE_RESERVED_31_16_BF_OFF (16)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CORE_VER_TYPE_RESERVED_31_16_BF_WID (16)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CORE_VER_TYPE_RESERVED_31_16_BF_MSK (0xFFFF0000)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CORE_VER_TYPE_RESERVED_31_16_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_TX_HOST_AES_TX_IRQ_EN register description at address offset 0x8
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_tx_host/AES_TX_IRQ_EN
  * AES TX : Interrupt Enable Register.
  */

typedef union {
  struct {
    uint32_t KEY_DONE : 1;
    ///< Enables interrupt indicating that a key load has completed
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="2" ResetValue="0x0"
    uint32_t CTX_IDX_ERR : 1;
    ///< Enables interrupt indicating that a context index error has been detected.
    ///< The corresponding IRQ_STAT field can only be asserted if this field
    ///< is set.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="5" ResetValue="0x0"
    uint32_t REG_PAR_ERR : 1;
    ///< Enables interrupt indicating that a register parity error has been
    ///< detected. The corresponding IRQ_STAT field can only be asserted if
    ///< this field is set.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t FSM_PAR_ERR : 1;
    ///< Enables interrupt indicating that an FSM parity error has been detected.
    ///< The corresponding IRQ_STAT field can only be asserted if this field
    ///< is set.
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="18" ResetValue="0x0"
    uint32_t OUTPUT : 1;
    ///< Enables O_cfg_irq output
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_irq_en_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_EN_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_EN_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_EN_WR_MASK (0x80030011U)


///< Enables interrupt indicating that a key load has completed
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_EN_KEY_DONE_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_EN_KEY_DONE_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_EN_KEY_DONE_BF_MSK (0x00000001)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_EN_KEY_DONE_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_EN_RESERVED_1_BF_OFF ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_EN_RESERVED_1_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_EN_RESERVED_1_BF_MSK (0x00000002)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_EN_RESERVED_1_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_EN_RESERVED_3_2_BF_OFF ( 2)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_EN_RESERVED_3_2_BF_WID ( 2)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_EN_RESERVED_3_2_BF_MSK (0x0000000C)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_EN_RESERVED_3_2_BF_DEF (0x00000000)

///< Enables interrupt indicating that a context index error has been detected.
///< The corresponding IRQ_STAT field can only be asserted if this field
///< is set.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_EN_CTX_IDX_ERR_BF_OFF ( 4)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_EN_CTX_IDX_ERR_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_EN_CTX_IDX_ERR_BF_MSK (0x00000010)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_EN_CTX_IDX_ERR_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_EN_RESERVED_15_5_BF_OFF ( 5)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_EN_RESERVED_15_5_BF_WID (11)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_EN_RESERVED_15_5_BF_MSK (0x0000FFE0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_EN_RESERVED_15_5_BF_DEF (0x00000000)

///< Enables interrupt indicating that a register parity error has been
///< detected. The corresponding IRQ_STAT field can only be asserted if
///< this field is set.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_EN_PAR_ERR_BF_OFF (16)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_EN_PAR_ERR_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_EN_PAR_ERR_BF_MSK (0x00010000)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_EN_PAR_ERR_BF_DEF (0x00000000)

///< Enables interrupt indicating that an FSM parity error has been detected.
///< The corresponding IRQ_STAT field can only be asserted if this field
///< is set.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_EN_FSM_PAR_ERR_BF_OFF (17)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_EN_FSM_PAR_ERR_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_EN_FSM_PAR_ERR_BF_MSK (0x00020000)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_EN_FSM_PAR_ERR_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_EN_RESERVED_31_18_BF_OFF (18)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_EN_RESERVED_31_18_BF_WID (13)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_EN_RESERVED_31_18_BF_MSK (0x7FFC0000)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_EN_RESERVED_31_18_BF_DEF (0x00000000)

///< Enables O_cfg_irq output
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_EN_OUTPUT_BF_OFF (31)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_EN_OUTPUT_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_EN_OUTPUT_BF_MSK (0x80000000)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_EN_OUTPUT_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_TX_HOST_AES_TX_IRQ_STAT register description at address offset 0xc
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_tx_host/AES_TX_IRQ_STAT
  * AES TX : Interrupt Status Register.
  */

typedef union {
  struct {
    uint32_t KEY_DONE : 1;
    ///< Status of interrupt indicating that a key load has completed
    ///< AccessType="RW/1C" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="2" ResetValue="0x0"
    uint32_t CTX_IDX_ERR : 1;
    ///< Status of interrupt indicating that a context index error has been
    ///< detected
    ///< AccessType="RW/1C" BitOffset="4" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="5" ResetValue="0x0"
    uint32_t REG_PAR_ERR : 1;
    ///< Status of interrupt indicating that a register parity error has been
    ///< detected
    ///< AccessType="RW/1C" BitOffset="16" ResetValue="0x0"
    uint32_t FSM_PAR_ERR : 1;
    ///< Status of interrupt indicating that an FSM parity error has been detected
    ///< AccessType="RW/1C" BitOffset="17" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="18" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_irq_stat_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_STAT_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_STAT_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_STAT_WR_MASK (0x00030011U)


///< Status of interrupt indicating that a key load has completed
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_STAT_KEY_DONE_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_STAT_KEY_DONE_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_STAT_KEY_DONE_BF_MSK (0x00000001)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_STAT_KEY_DONE_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_STAT_RESERVED_1_BF_OFF ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_STAT_RESERVED_1_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_STAT_RESERVED_1_BF_MSK (0x00000002)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_STAT_RESERVED_1_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_STAT_RESERVED_3_2_BF_OFF ( 2)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_STAT_RESERVED_3_2_BF_WID ( 2)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_STAT_RESERVED_3_2_BF_MSK (0x0000000C)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_STAT_RESERVED_3_2_BF_DEF (0x00000000)

///< Status of interrupt indicating that a context index error has been
///< detected
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_STAT_CTX_IDX_ERR_BF_OFF ( 4)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_STAT_CTX_IDX_ERR_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_STAT_CTX_IDX_ERR_BF_MSK (0x00000010)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_STAT_CTX_IDX_ERR_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_STAT_RESERVED_15_5_BF_OFF ( 5)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_STAT_RESERVED_15_5_BF_WID (11)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_STAT_RESERVED_15_5_BF_MSK (0x0000FFE0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_STAT_RESERVED_15_5_BF_DEF (0x00000000)

///< Status of interrupt indicating that a register parity error has been
///< detected
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_STAT_PAR_ERR_BF_OFF (16)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_STAT_PAR_ERR_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_STAT_PAR_ERR_BF_MSK (0x00010000)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_STAT_PAR_ERR_BF_DEF (0x00000000)

///< Status of interrupt indicating that an FSM parity error has been detected
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_STAT_FSM_PAR_ERR_BF_OFF (17)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_STAT_FSM_PAR_ERR_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_STAT_FSM_PAR_ERR_BF_MSK (0x00020000)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_STAT_FSM_PAR_ERR_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_STAT_RESERVED_31_18_BF_OFF (18)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_STAT_RESERVED_31_18_BF_WID (14)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_STAT_RESERVED_31_18_BF_MSK (0xFFFC0000)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_STAT_RESERVED_31_18_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_TX_HOST_AES_TX_CTRL register description at address offset 0x14
  *
  * Register default value:        0x00050000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_tx_host/AES_TX_CTRL
  * AES TX : Control register.
  */

typedef union {
  struct {
    uint32_t CTX_IDX : 4;
    ///< Key context index to load the key into.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="4" ResetValue="0x0"
    uint32_t KEY_SZ : 1;
    ///< Size of the key:   - 0:128-bit   - 1: 256-bit       For the purposes
    ///< of IDE, this field is, by default, set to a 256-bit key size.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="17" ResetValue="0x0"
    uint32_t ENCRYPT : 1;
    ///< Encrypt/Decrypt selector for the key.                  For the purposes
    ///< of IDE Tx, this field is, by default, set to encrypt.
    ///< AccessType="RW" BitOffset="18" ResetValue="0x1"
    uint32_t  : 13;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="19" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_ctrl_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CTRL_DEFAULT (0x00050000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CTRL_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CTRL_WR_MASK (0x0005000fU)


///< Key context index to load the key into.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CTRL_CTX_IDX_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CTRL_CTX_IDX_BF_WID ( 4)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CTRL_CTX_IDX_BF_MSK (0x0000000F)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CTRL_CTX_IDX_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CTRL_RESERVED_15_4_BF_OFF ( 4)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CTRL_RESERVED_15_4_BF_WID (12)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CTRL_RESERVED_15_4_BF_MSK (0x0000FFF0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CTRL_RESERVED_15_4_BF_DEF (0x00000000)

///< Size of the key:   - 0:128-bit   - 1: 256-bit       For the purposes
///< of IDE, this field is, by default, set to a 256-bit key size.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CTRL_KEY_SZ_BF_OFF (16)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CTRL_KEY_SZ_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CTRL_KEY_SZ_BF_MSK (0x00010000)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CTRL_KEY_SZ_BF_DEF (0x00010000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CTRL_RESERVED_17_BF_OFF (17)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CTRL_RESERVED_17_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CTRL_RESERVED_17_BF_MSK (0x00020000)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CTRL_RESERVED_17_BF_DEF (0x00000000)

///< Encrypt/Decrypt selector for the key.                  For the purposes
///< of IDE Tx, this field is, by default, set to encrypt.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CTRL_ENCRYPT_BF_OFF (18)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CTRL_ENCRYPT_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CTRL_ENCRYPT_BF_MSK (0x00040000)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CTRL_ENCRYPT_BF_DEF (0x00040000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CTRL_RESERVED_31_19_BF_OFF (19)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CTRL_RESERVED_31_19_BF_WID (13)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CTRL_RESERVED_31_19_BF_MSK (0xFFF80000)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CTRL_RESERVED_31_19_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_TX_HOST_AES_TX_STAT register description at address offset 0x18
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_tx_host/AES_TX_STAT
  * AES TX : Status Register.
  */

typedef union {
  struct {
    uint32_t BUSY : 1;
    ///< Indicates that the core is busy installing a key. All other registers
    ///< must not be written while this field indicates a 1.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="2" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_stat_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_STAT_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_STAT_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_STAT_WR_MASK (0x00000000U)


///< Indicates that the core is busy installing a key. All other registers
///< must not be written while this field indicates a 1.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_STAT_BUSY_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_STAT_BUSY_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_STAT_BUSY_BF_MSK (0x00000001)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_STAT_BUSY_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_STAT_RESERVED_1_BF_OFF ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_STAT_RESERVED_1_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_STAT_RESERVED_1_BF_MSK (0x00000002)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_STAT_RESERVED_1_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_STAT_RESERVED_31_2_BF_OFF ( 2)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_STAT_RESERVED_31_2_BF_WID (30)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_STAT_RESERVED_31_2_BF_MSK (0xFFFFFFFC)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_STAT_RESERVED_31_2_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_TX_HOST_AES_TX_KEY_0 register description at address offset 0x20
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_tx_host/AES_TX_KEY_0
  * AES TX : Key 0 Register.
  */

typedef union {
  struct {
    uint32_t KEY : 32;
    ///< Key bytes:  00, 01, 02, 03
    ///< AccessType="WS" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_key_0_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_0_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_0_RD_MASK (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_0_WR_MASK (0xffffffffU)


///< Key bytes:  00, 01, 02, 03
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_0_KEY_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_0_KEY_BF_WID (32)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_0_KEY_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_0_KEY_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_TX_HOST_AES_TX_KEY_1 register description at address offset 0x24
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_tx_host/AES_TX_KEY_1
  * AES TX : Key 1 Register.
  */

typedef union {
  struct {
    uint32_t KEY : 32;
    ///< Key bytes:  04, 05, 06, 07
    ///< AccessType="WS" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_key_1_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_1_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_1_RD_MASK (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_1_WR_MASK (0xffffffffU)


///< Key bytes:  04, 05, 06, 07
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_1_KEY_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_1_KEY_BF_WID (32)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_1_KEY_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_1_KEY_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_TX_HOST_AES_TX_KEY_2 register description at address offset 0x28
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_tx_host/AES_TX_KEY_2
  * AES TX : Key 2 Register.
  */

typedef union {
  struct {
    uint32_t KEY : 32;
    ///< Key bytes:  08, 09, 10, 11
    ///< AccessType="WS" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_key_2_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_2_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_2_RD_MASK (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_2_WR_MASK (0xffffffffU)


///< Key bytes:  08, 09, 10, 11
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_2_KEY_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_2_KEY_BF_WID (32)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_2_KEY_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_2_KEY_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_TX_HOST_AES_TX_KEY_3 register description at address offset 0x2c
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_tx_host/AES_TX_KEY_3
  * AES TX : Key 3 Register.
  */

typedef union {
  struct {
    uint32_t KEY : 32;
    ///< Key bytes:  12, 13, 14, 15
    ///< AccessType="WS" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_key_3_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_3_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_3_RD_MASK (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_3_WR_MASK (0xffffffffU)


///< Key bytes:  12, 13, 14, 15
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_3_KEY_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_3_KEY_BF_WID (32)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_3_KEY_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_3_KEY_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_TX_HOST_AES_TX_KEY_4 register description at address offset 0x30
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_tx_host/AES_TX_KEY_4
  * AES TX : Key 4 Register.
  */

typedef union {
  struct {
    uint32_t KEY : 32;
    ///< Key bytes:  16, 17, 18, 19  (256-bit key only)
    ///< AccessType="WS" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_key_4_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_4_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_4_RD_MASK (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_4_WR_MASK (0xffffffffU)


///< Key bytes:  16, 17, 18, 19  (256-bit key only)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_4_KEY_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_4_KEY_BF_WID (32)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_4_KEY_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_4_KEY_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_TX_HOST_AES_TX_KEY_5 register description at address offset 0x34
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_tx_host/AES_TX_KEY_5
  * AES TX : Key 5 Register.
  */

typedef union {
  struct {
    uint32_t KEY : 32;
    ///< Key bytes:  20, 21, 22, 23  (256-bit key only)
    ///< AccessType="WS" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_key_5_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_5_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_5_RD_MASK (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_5_WR_MASK (0xffffffffU)


///< Key bytes:  20, 21, 22, 23  (256-bit key only)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_5_KEY_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_5_KEY_BF_WID (32)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_5_KEY_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_5_KEY_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_TX_HOST_AES_TX_KEY_6 register description at address offset 0x38
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_tx_host/AES_TX_KEY_6
  * AES TX : Key 6 Register.
  */

typedef union {
  struct {
    uint32_t KEY : 32;
    ///< Key bytes:  24, 25, 26, 27  (256-bit key only)
    ///< AccessType="WS" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_key_6_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_6_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_6_RD_MASK (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_6_WR_MASK (0xffffffffU)


///< Key bytes:  24, 25, 26, 27  (256-bit key only)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_6_KEY_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_6_KEY_BF_WID (32)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_6_KEY_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_6_KEY_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_TX_HOST_AES_TX_KEY_7 register description at address offset 0x3c
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_tx_host/AES_TX_KEY_7
  * AES TX : Key 7 Register.
  */

typedef union {
  struct {
    uint32_t KEY : 32;
    ///< Key bytes:  28, 29, 30, 31  (256-bit key only)
    ///< AccessType="WS" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_key_7_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_7_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_7_RD_MASK (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_7_WR_MASK (0xffffffffU)


///< Key bytes:  28, 29, 30, 31  (256-bit key only)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_7_KEY_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_7_KEY_BF_WID (32)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_7_KEY_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_7_KEY_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_TX_HOST_AES_TX_INITIAL_IV_LSW register description at address offset 0x40
  *
  * Register default value:        0x00000001
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_tx_host/AES_TX_INITIAL_IV_LSW
  * AES TX : INITIAL_IV_LSW.
  */

typedef union {
  struct {
    uint32_t INITIAL_IV_LSW : 32;
    ///< Initial IV configuration value (least-significant word) Configures
    ///< the LSW value of the Initial IV for the CTRL. CTX_IDX context index
    ///< Note: Update of internal IV value is only effective when the CTRL
    ///< register is written
    ///< AccessType="WS" BitOffset="0" ResetValue="0x1"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_initial_iv_lsw_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_INITIAL_IV_LSW_DEFAULT (0x00000001U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_INITIAL_IV_LSW_RD_MASK (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_INITIAL_IV_LSW_WR_MASK (0xffffffffU)


///< Initial IV configuration value (least-significant word) Configures
///< the LSW value of the Initial IV for the CTRL. CTX_IDX context index
///< Note: Update of internal IV value is only effective when the CTRL
///< register is written
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_INITIAL_IV_LSW_INITIAL_IV_LSW_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_INITIAL_IV_LSW_INITIAL_IV_LSW_BF_WID (32)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_INITIAL_IV_LSW_INITIAL_IV_LSW_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_INITIAL_IV_LSW_INITIAL_IV_LSW_BF_DEF (0x00000001)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_TX_HOST_AES_TX_INITIAL_IV_MSW register description at address offset 0x44
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_tx_host/AES_TX_INITIAL_IV_MSW
  * AES TX : INITIAL_IV_MSW.
  */

typedef union {
  struct {
    uint32_t INITIAL_IV_MSW : 32;
    ///< Initial IV configuration value (most-significant word) Configures
    ///< the MSW value of the Initial IV for the CTRL. CTX_IDX context index
    ///< Note: Update of internal IV value is only effective when the CTRL
    ///< register is written
    ///< AccessType="WS" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_initial_iv_msw_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_INITIAL_IV_MSW_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_INITIAL_IV_MSW_RD_MASK (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_INITIAL_IV_MSW_WR_MASK (0xffffffffU)


///< Initial IV configuration value (most-significant word) Configures
///< the MSW value of the Initial IV for the CTRL. CTX_IDX context index
///< Note: Update of internal IV value is only effective when the CTRL
///< register is written
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_INITIAL_IV_MSW_INITIAL_IV_MSW_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_INITIAL_IV_MSW_INITIAL_IV_MSW_BF_WID (32)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_INITIAL_IV_MSW_INITIAL_IV_MSW_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_INITIAL_IV_MSW_INITIAL_IV_MSW_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_TX_HOST_AES_TX_LINK_DISABLE_STREAM_KEYS register description at address offset 0x1c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_tx_host/AES_TX_LINK_DISABLE_STREAM_KEYS
  * AES TX : Invalidates the Link Stream Keys for TX.
  */

typedef union {
  struct {
    uint32_t LINK_DISABLE_KEY_S0_PR : 1;
    ///< Setting this bit to 1 invalidates the KEY for Post Request (PR) sub-stream
    ///< from Link stream 0 in the TX data path.
    ///< AccessType="WS" BitOffset="0" ResetValue="0x0"
    uint32_t LINK_DISABLE_KEY_S0_NPR : 1;
    ///< Setting this bit to 1 invalidates the KEY for Non-Post Request (NPR)
    ///< sub-stream from Link stream 0 in the TX data path.
    ///< AccessType="WS" BitOffset="1" ResetValue="0x0"
    uint32_t LINK_DISABLE_KEY_S0_CPL : 1;
    ///< Setting this bit to 1 invalidates the KEYs for Completion (CPL) sub-stream
    ///< from Link stream 0 in the TX data path.
    ///< AccessType="WS" BitOffset="2" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="3" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_link_dis_strm_keys_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_LINK_DIS_STRM_KEYS_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_LINK_DIS_STRM_KEYS_RD_MASK (0xfffffff8U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_LINK_DIS_STRM_KEYS_WR_MASK (0x00000007U)


///< Setting this bit to 1 invalidates the KEY for Post Request (PR) sub-stream
///< from Link stream 0 in the TX data path.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_LINK_DIS_STRM_KEYS_LINK_DIS_KEY_S0_PR_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_LINK_DIS_STRM_KEYS_LINK_DIS_KEY_S0_PR_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_LINK_DIS_STRM_KEYS_LINK_DIS_KEY_S0_PR_BF_MSK (0x00000001)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_LINK_DIS_STRM_KEYS_LINK_DIS_KEY_S0_PR_BF_DEF (0x00000000)

///< Setting this bit to 1 invalidates the KEY for Non-Post Request (NPR)
///< sub-stream from Link stream 0 in the TX data path.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_LINK_DIS_STRM_KEYS_LINK_DIS_KEY_S0_NPR_BF_OFF ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_LINK_DIS_STRM_KEYS_LINK_DIS_KEY_S0_NPR_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_LINK_DIS_STRM_KEYS_LINK_DIS_KEY_S0_NPR_BF_MSK (0x00000002)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_LINK_DIS_STRM_KEYS_LINK_DIS_KEY_S0_NPR_BF_DEF (0x00000000)

///< Setting this bit to 1 invalidates the KEYs for Completion (CPL) sub-stream
///< from Link stream 0 in the TX data path.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_LINK_DIS_STRM_KEYS_LINK_DIS_KEY_S0_CPL_BF_OFF ( 2)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_LINK_DIS_STRM_KEYS_LINK_DIS_KEY_S0_CPL_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_LINK_DIS_STRM_KEYS_LINK_DIS_KEY_S0_CPL_BF_MSK (0x00000004)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_LINK_DIS_STRM_KEYS_LINK_DIS_KEY_S0_CPL_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_LINK_DIS_STRM_KEYS_RESERVED_31_3_BF_OFF ( 3)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_LINK_DIS_STRM_KEYS_RESERVED_31_3_BF_WID (29)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_LINK_DIS_STRM_KEYS_RESERVED_31_3_BF_MSK (0xFFFFFFF8)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_LINK_DIS_STRM_KEYS_RESERVED_31_3_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_TX_HOST_AES_TX_SELECTIVE_DISABLE_STREAM_KEYS register description at address offset 0x1c4
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_tx_host/AES_TX_SELECTIVE_DISABLE_STREAM_KEYS
  * AES TX : Invalidates the Selective Stream Keys for TX.
  */

typedef union {
  struct {
    uint32_t SELECTIVE_DISABLE_KEY_S0_PR : 1;
    ///< Setting this bit to 1 invalidates the KEY for Post Request (PR) sub-stream
    ///< from Selective stream 0 in the TX data path.
    ///< AccessType="WS" BitOffset="0" ResetValue="0x0"
    uint32_t SELECTIVE_DISABLE_KEY_S0_NPR : 1;
    ///< Setting this bit to 1 invalidates the KEY for Non-Post Request (NPR)
    ///< sub-stream from Selective stream 0 in the TX data path.
    ///< AccessType="WS" BitOffset="1" ResetValue="0x0"
    uint32_t SELECTIVE_DISABLE_KEY_S0_CPL : 1;
    ///< Setting this bit to 1 invalidates the KEYs for Completion (CPL) sub-stream
    ///< from Selective stream 0 in the TX data path.
    ///< AccessType="WS" BitOffset="2" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="3" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_selive_dis_strm_keys_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_SELIVE_DIS_STRM_KEYS_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_SELIVE_DIS_STRM_KEYS_RD_MASK (0xfffffff8U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_SELIVE_DIS_STRM_KEYS_WR_MASK (0x00000007U)


///< Setting this bit to 1 invalidates the KEY for Post Request (PR) sub-stream
///< from Selective stream 0 in the TX data path.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_SELIVE_DIS_STRM_KEYS_SELIVE_DIS_KEY_S0_PR_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_SELIVE_DIS_STRM_KEYS_SELIVE_DIS_KEY_S0_PR_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_SELIVE_DIS_STRM_KEYS_SELIVE_DIS_KEY_S0_PR_BF_MSK (0x00000001)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_SELIVE_DIS_STRM_KEYS_SELIVE_DIS_KEY_S0_PR_BF_DEF (0x00000000)

///< Setting this bit to 1 invalidates the KEY for Non-Post Request (NPR)
///< sub-stream from Selective stream 0 in the TX data path.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_SELIVE_DIS_STRM_KEYS_SELIVE_DIS_KEY_S0_NPR_BF_OFF ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_SELIVE_DIS_STRM_KEYS_SELIVE_DIS_KEY_S0_NPR_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_SELIVE_DIS_STRM_KEYS_SELIVE_DIS_KEY_S0_NPR_BF_MSK (0x00000002)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_SELIVE_DIS_STRM_KEYS_SELIVE_DIS_KEY_S0_NPR_BF_DEF (0x00000000)

///< Setting this bit to 1 invalidates the KEYs for Completion (CPL) sub-stream
///< from Selective stream 0 in the TX data path.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_SELIVE_DIS_STRM_KEYS_SELIVE_DIS_KEY_S0_CPL_BF_OFF ( 2)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_SELIVE_DIS_STRM_KEYS_SELIVE_DIS_KEY_S0_CPL_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_SELIVE_DIS_STRM_KEYS_SELIVE_DIS_KEY_S0_CPL_BF_MSK (0x00000004)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_SELIVE_DIS_STRM_KEYS_SELIVE_DIS_KEY_S0_CPL_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_SELIVE_DIS_STRM_KEYS_RESERVED_31_3_BF_OFF ( 3)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_SELIVE_DIS_STRM_KEYS_RESERVED_31_3_BF_WID (29)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_SELIVE_DIS_STRM_KEYS_RESERVED_31_3_BF_MSK (0xFFFFFFF8)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_SELIVE_DIS_STRM_KEYS_RESERVED_31_3_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_TX_FIPS_COMMAND_AES_TX_CMD_SOP register description at address offset 0x400
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_tx_fips_command/AES_TX_CMD_SOP
  * AES TX : FIPS Command - CMD SOP Register.
  */

typedef union {
  struct {
    uint32_t CMD_SOP : 1;
    ///< Indicates that this command is the first of the packet.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_tx_fips_cmd_aes_tx_cmd_sop_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_SOP_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_SOP_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_SOP_WR_MASK (0x00000001U)


///< Indicates that this command is the first of the packet.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_SOP_CMD_SOP_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_SOP_CMD_SOP_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_SOP_CMD_SOP_BF_MSK (0x00000001)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_SOP_CMD_SOP_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_SOP_RESERVED_31_1_BF_OFF ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_SOP_RESERVED_31_1_BF_WID (31)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_SOP_RESERVED_31_1_BF_MSK (0xFFFFFFFE)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_SOP_RESERVED_31_1_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_TX_FIPS_COMMAND_AES_TX_CMD_EOP register description at address offset 0x404
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_tx_fips_command/AES_TX_CMD_EOP
  * AES TX : FIPS Command - CMD EOP Register.
  */

typedef union {
  struct {
    uint32_t CMD_EOP : 1;
    ///< Indicates that this command is the last of the packet.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_tx_fips_cmd_aes_tx_cmd_eop_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_EOP_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_EOP_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_EOP_WR_MASK (0x00000001U)


///< Indicates that this command is the last of the packet.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_EOP_CMD_EOP_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_EOP_CMD_EOP_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_EOP_CMD_EOP_BF_MSK (0x00000001)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_EOP_CMD_EOP_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_EOP_RESERVED_31_1_BF_OFF ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_EOP_RESERVED_31_1_BF_WID (31)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_EOP_RESERVED_31_1_BF_MSK (0xFFFFFFFE)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_EOP_RESERVED_31_1_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_TX_FIPS_COMMAND_AES_TX_CMD_AAD register description at address offset 0x408
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_tx_fips_command/AES_TX_CMD_AAD
  * AES TX : FIPS Command - CMD AAD Register.
  */

typedef union {
  struct {
    uint32_t CMD_AAD : 1;
    ///< Additional Authentication Data (AAD) present in the input data.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_tx_fips_cmd_aes_tx_cmd_aad_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_AAD_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_AAD_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_AAD_WR_MASK (0x00000001U)


///< Additional Authentication Data (AAD) present in the input data.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_AAD_CMD_AAD_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_AAD_CMD_AAD_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_AAD_CMD_AAD_BF_MSK (0x00000001)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_AAD_CMD_AAD_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_AAD_RESERVED_31_1_BF_OFF ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_AAD_RESERVED_31_1_BF_WID (31)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_AAD_RESERVED_31_1_BF_MSK (0xFFFFFFFE)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_AAD_RESERVED_31_1_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_TX_FIPS_COMMAND_AES_TX_CMD_MSG register description at address offset 0x40c
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_tx_fips_command/AES_TX_CMD_MSG
  * AES TX : FIPS Command - CMD MSG Register.
  */

typedef union {
  struct {
    uint32_t CMD_MSG : 1;
    ///< Message (MSG) present in the input data.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_tx_fips_cmd_aes_tx_cmd_msg_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_MSG_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_MSG_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_MSG_WR_MASK (0x00000001U)


///< Message (MSG) present in the input data.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_MSG_CMD_MSG_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_MSG_CMD_MSG_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_MSG_CMD_MSG_BF_MSK (0x00000001)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_MSG_CMD_MSG_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_MSG_RESERVED_31_1_BF_OFF ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_MSG_RESERVED_31_1_BF_WID (31)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_MSG_RESERVED_31_1_BF_MSK (0xFFFFFFFE)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_MSG_RESERVED_31_1_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_TX_FIPS_COMMAND_AES_TX_CTR_IV_IDX register description at address offset 0x410
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_tx_fips_command/AES_TX_CTR_IV_IDX
  * AES TX : FIPS Command - CTR IV IDX Register.
  */

typedef union {
  struct {
    uint32_t CTR_IV_IDX : 2;
    ///< Index of the 32-bit IV chunk constructing the Initial counter value
    ///< (IV). IV is in Big Endian Byte order
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="2" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_tx_fips_cmd_aes_tx_ctr_iv_idx_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CTR_IV_IDX_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CTR_IV_IDX_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CTR_IV_IDX_WR_MASK (0x00000003U)


///< Index of the 32-bit IV chunk constructing the Initial counter value
///< (IV). IV is in Big Endian Byte order
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CTR_IV_IDX_CTR_IV_IDX_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CTR_IV_IDX_CTR_IV_IDX_BF_WID ( 2)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CTR_IV_IDX_CTR_IV_IDX_BF_MSK (0x00000003)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CTR_IV_IDX_CTR_IV_IDX_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CTR_IV_IDX_RESERVED_31_2_BF_OFF ( 2)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CTR_IV_IDX_RESERVED_31_2_BF_WID (30)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CTR_IV_IDX_RESERVED_31_2_BF_MSK (0xFFFFFFFC)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CTR_IV_IDX_RESERVED_31_2_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_TX_FIPS_COMMAND_AES_TX_CTR_IV_CHUNK register description at address offset 0x414
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_tx_fips_command/AES_TX_CTR_IV_CHUNK
  * AES TX : FIPS Command - CTR IV chunk Register.
  */

typedef union {
  struct {
    uint32_t CTR_IV_CHUNK : 32;
    ///< 32-bit chunk of the Initial counter value (IV).
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_tx_fips_cmd_aes_tx_ctr_iv_chunk_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CTR_IV_CHUNK_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CTR_IV_CHUNK_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CTR_IV_CHUNK_WR_MASK (0xffffffffU)


///< 32-bit chunk of the Initial counter value (IV).
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CTR_IV_CHUNK_CTR_IV_CHUNK_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CTR_IV_CHUNK_CTR_IV_CHUNK_BF_WID (32)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CTR_IV_CHUNK_CTR_IV_CHUNK_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CTR_IV_CHUNK_CTR_IV_CHUNK_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_TX_FIPS_COMMAND_AES_TX_CMD_AAD_SIZE register description at address offset 0x424
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_tx_fips_command/AES_TX_CMD_AAD_SIZE
  * AES TX : FIPS Command - CMD AAD SIZE Register.
  */

typedef union {
  struct {
    uint32_t CMD_AAD_SIZE : 6;
    ///< Byte mask of the Additional Authentication Data (AAD) in the input
    ///< data.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="6" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_tx_fips_cmd_aes_tx_cmd_aad_size_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_AAD_SIZE_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_AAD_SIZE_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_AAD_SIZE_WR_MASK (0x0000003fU)


///< Byte mask of the Additional Authentication Data (AAD) in the input
///< data.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_AAD_SIZE_CMD_AAD_SIZE_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_AAD_SIZE_CMD_AAD_SIZE_BF_WID ( 6)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_AAD_SIZE_CMD_AAD_SIZE_BF_MSK (0x0000003F)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_AAD_SIZE_CMD_AAD_SIZE_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_AAD_SIZE_RESERVED_31_6_BF_OFF ( 6)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_AAD_SIZE_RESERVED_31_6_BF_WID (26)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_AAD_SIZE_RESERVED_31_6_BF_MSK (0xFFFFFFC0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_AAD_SIZE_RESERVED_31_6_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_TX_FIPS_COMMAND_AES_TX_CMD_MSG_SIZE register description at address offset 0x428
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_tx_fips_command/AES_TX_CMD_MSG_SIZE
  * AES TX : FIPS Command - CMD MSG SIZE Register.
  */

typedef union {
  struct {
    uint32_t CMD_MSG_SIZE : 6;
    ///< Byte mask of the message (MSG) in the MAC input data.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="6" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_tx_fips_cmd_aes_tx_cmd_msg_size_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_MSG_SIZE_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_MSG_SIZE_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_MSG_SIZE_WR_MASK (0x0000003fU)


///< Byte mask of the message (MSG) in the MAC input data.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_MSG_SIZE_CMD_MSG_SIZE_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_MSG_SIZE_CMD_MSG_SIZE_BF_WID ( 6)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_MSG_SIZE_CMD_MSG_SIZE_BF_MSK (0x0000003F)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_MSG_SIZE_CMD_MSG_SIZE_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_MSG_SIZE_RESERVED_31_6_BF_OFF ( 6)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_MSG_SIZE_RESERVED_31_6_BF_WID (26)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_MSG_SIZE_RESERVED_31_6_BF_MSK (0xFFFFFFC0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_MSG_SIZE_RESERVED_31_6_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_TX_FIPS_COMMAND_AES_TX_CMD_CTX register description at address offset 0x42c
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_tx_fips_command/AES_TX_CMD_CTX
  * AES TX : FIPS Command - Ctx Register.
  */

typedef union {
  struct {
    uint32_t CMD_CTX : 4;
    ///< Command context index.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="4" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_tx_fips_cmd_aes_tx_cmd_ctx_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_CTX_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_CTX_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_CTX_WR_MASK (0x0000000fU)


///< Command context index.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_CTX_CMD_CTX_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_CTX_CMD_CTX_BF_WID ( 4)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_CTX_CMD_CTX_BF_MSK (0x0000000F)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_CTX_CMD_CTX_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_CTX_RESERVED_31_4_BF_OFF ( 4)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_CTX_RESERVED_31_4_BF_WID (28)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_CTX_RESERVED_31_4_BF_MSK (0xFFFFFFF0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_CTX_RESERVED_31_4_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_TX_FIPS_COMMAND_AES_TX_CMD_VALID register description at address offset 0x430
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_tx_fips_command/AES_TX_CMD_VALID
  * AES TX : FIPS Command - CMD Valid Register.
  */

typedef union {
  struct {
    uint32_t CMD_VALID : 1;
    ///< AXI like valid/ready handshake.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_tx_fips_cmd_aes_tx_cmd_valid_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_VALID_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_VALID_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_VALID_WR_MASK (0x00000001U)


///< AXI like valid/ready handshake.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_VALID_CMD_VALID_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_VALID_CMD_VALID_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_VALID_CMD_VALID_BF_MSK (0x00000001)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_VALID_CMD_VALID_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_VALID_RESERVED_31_1_BF_OFF ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_VALID_RESERVED_31_1_BF_WID (31)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_VALID_RESERVED_31_1_BF_MSK (0xFFFFFFFE)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_VALID_RESERVED_31_1_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_TX_FIPS_COMMAND_AES_TX_CMD_READY register description at address offset 0x434
  *
  * Register default value:        0x00000001
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_tx_fips_command/AES_TX_CMD_READY
  * AES TX : FIPS Command - CMD Ready Register.
  */

typedef union {
  struct {
    uint32_t CMD_READY : 1;
    ///< AXI like valid/ready handshake.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x1"
    uint32_t  : 31;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_tx_fips_cmd_aes_tx_cmd_ready_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_READY_DEFAULT (0x00000001U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_READY_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_READY_WR_MASK (0x00000000U)


///< AXI like valid/ready handshake.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_READY_CMD_READY_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_READY_CMD_READY_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_READY_CMD_READY_BF_MSK (0x00000001)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_READY_CMD_READY_BF_DEF (0x00000001)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_READY_RESERVED_31_1_BF_OFF ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_READY_RESERVED_31_1_BF_WID (31)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_READY_RESERVED_31_1_BF_MSK (0xFFFFFFFE)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_READY_RESERVED_31_1_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_TX_FIPS_COMMAND_AES_TX_TEST_MODE_CFG register description at address offset 0x44c
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_tx_fips_command/AES_TX_TEST_MODE_CFG
  * AES TX : FIPS Test mode cfg.
  */

typedef union {
  struct {
    uint32_t TEST_MODE_CFG : 2;
    ///< FIPS Test mode cfg: 0 GCM - 1 Rsv - 2 CTR - 3 ECB.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="2" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_tx_fips_cmd_aes_tx_test_mode_cfg_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_TEST_MODE_CFG_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_TEST_MODE_CFG_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_TEST_MODE_CFG_WR_MASK (0x00000003U)


///< FIPS Test mode cfg: 0 GCM - 1 Rsv - 2 CTR - 3 ECB.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_TEST_MODE_CFG_TEST_MODE_CFG_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_TEST_MODE_CFG_TEST_MODE_CFG_BF_WID ( 2)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_TEST_MODE_CFG_TEST_MODE_CFG_BF_MSK (0x00000003)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_TEST_MODE_CFG_TEST_MODE_CFG_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_TEST_MODE_CFG_RESERVED_31_2_BF_OFF ( 2)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_TEST_MODE_CFG_RESERVED_31_2_BF_WID (30)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_TEST_MODE_CFG_RESERVED_31_2_BF_MSK (0xFFFFFFFC)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_TEST_MODE_CFG_RESERVED_31_2_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_TX_FIPS_INPUT_AES_TX_IN_DATA_IDX register description at address offset 0x450
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_tx_fips_input/AES_TX_IN_DATA_IDX
  * AES TX : FIPS Input - Input Data IDX Register.
  */

typedef union {
  struct {
    uint32_t IN_DATA_IDX : 4;
    ///< Index of the 32-bit data chunk constructing the word to process.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="4" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_tx_fips_input_aes_tx_in_data_idx_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_IN_DATA_IDX_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_IN_DATA_IDX_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_IN_DATA_IDX_WR_MASK (0x0000000fU)


///< Index of the 32-bit data chunk constructing the word to process.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_IN_DATA_IDX_IN_DATA_IDX_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_IN_DATA_IDX_IN_DATA_IDX_BF_WID ( 4)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_IN_DATA_IDX_IN_DATA_IDX_BF_MSK (0x0000000F)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_IN_DATA_IDX_IN_DATA_IDX_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_IN_DATA_IDX_RESERVED_31_4_BF_OFF ( 4)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_IN_DATA_IDX_RESERVED_31_4_BF_WID (28)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_IN_DATA_IDX_RESERVED_31_4_BF_MSK (0xFFFFFFF0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_IN_DATA_IDX_RESERVED_31_4_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_TX_FIPS_INPUT_AES_TX_IN_DATA register description at address offset 0x454
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_tx_fips_input/AES_TX_IN_DATA
  * AES TX : FIPS Input - Input Data Register.
  */

typedef union {
  struct {
    uint32_t IN_DATA : 32;
    ///< 32-bit chunk of the word to process. A partial word must be left justified
    ///< on the signal.
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_tx_fips_input_aes_tx_in_data_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_IN_DATA_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_IN_DATA_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_IN_DATA_WR_MASK (0xffffffffU)


///< 32-bit chunk of the word to process. A partial word must be left justified
///< on the signal.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_IN_DATA_IN_DATA_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_IN_DATA_IN_DATA_BF_WID (32)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_IN_DATA_IN_DATA_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_IN_DATA_IN_DATA_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_TX_FIPS_INPUT_AES_TX_DATA_VALID register description at address offset 0x458
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_tx_fips_input/AES_TX_DATA_VALID
  * AES TX : FIPS Input - Data Valid Register.
  */

typedef union {
  struct {
    uint32_t DATA_VALID : 1;
    ///< AXI like valid/ready(!stall) handshake.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_tx_fips_input_aes_tx_data_valid_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_DATA_VALID_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_DATA_VALID_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_DATA_VALID_WR_MASK (0x00000001U)


///< AXI like valid/ready(!stall) handshake.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_DATA_VALID_DATA_VALID_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_DATA_VALID_DATA_VALID_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_DATA_VALID_DATA_VALID_BF_MSK (0x00000001)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_DATA_VALID_DATA_VALID_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_DATA_VALID_RESERVED_31_1_BF_OFF ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_DATA_VALID_RESERVED_31_1_BF_WID (31)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_DATA_VALID_RESERVED_31_1_BF_MSK (0xFFFFFFFE)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_DATA_VALID_RESERVED_31_1_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_TX_FIPS_INPUT_AES_TX_DATA_READY register description at address offset 0x45c
  *
  * Register default value:        0x00000001
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_tx_fips_input/AES_TX_DATA_READY
  * AES TX : FIPS Input - Data Ready Register.
  */

typedef union {
  struct {
    uint32_t DATA_READY : 1;
    ///< AXI like valid/ready(!stall) handshake.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x1"
    uint32_t  : 31;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_tx_fips_input_aes_tx_data_ready_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_DATA_READY_DEFAULT (0x00000001U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_DATA_READY_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_DATA_READY_WR_MASK (0x00000000U)


///< AXI like valid/ready(!stall) handshake.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_DATA_READY_DATA_READY_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_DATA_READY_DATA_READY_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_DATA_READY_DATA_READY_BF_MSK (0x00000001)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_DATA_READY_DATA_READY_BF_DEF (0x00000001)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_DATA_READY_RESERVED_31_1_BF_OFF ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_DATA_READY_RESERVED_31_1_BF_WID (31)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_DATA_READY_RESERVED_31_1_BF_MSK (0xFFFFFFFE)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_DATA_READY_RESERVED_31_1_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_READY register description at address offset 0x500
  *
  * Register default value:        0x00000001
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_tx_fips_output/AES_TX_OUT_READY
  * AES TX : FIPS Output - Ready Register.
  */

typedef union {
  struct {
    uint32_t OUT_READY : 1;
    ///< AXI like valid/ready(!stall) handshake. Out_valid assertion deasserts
    ///< it. A fresh write-one request re-asserts it.
    ///< AccessType="RW/1S" BitOffset="0" ResetValue="0x1"
    uint32_t  : 31;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_tx_fips_output_aes_tx_out_ready_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_READY_DEFAULT (0x00000001U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_READY_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_READY_WR_MASK (0x00000001U)


///< AXI like valid/ready(!stall) handshake. Out_valid assertion deasserts
///< it. A fresh write-one request re-asserts it.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_READY_OUT_READY_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_READY_OUT_READY_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_READY_OUT_READY_BF_MSK (0x00000001)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_READY_OUT_READY_BF_DEF (0x00000001)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_READY_RESERVED_31_1_BF_OFF ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_READY_RESERVED_31_1_BF_WID (31)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_READY_RESERVED_31_1_BF_MSK (0xFFFFFFFE)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_READY_RESERVED_31_1_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_VALID register description at address offset 0x504
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_tx_fips_output/AES_TX_OUT_VALID
  * AES TX : FIPS Output - Valid Register.
  */

typedef union {
  struct {
    uint32_t OUT_VALID : 1;
    ///< AXI like valid/ready(!stall) handshake.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_tx_fips_output_aes_tx_out_valid_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_VALID_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_VALID_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_VALID_WR_MASK (0x00000000U)


///< AXI like valid/ready(!stall) handshake.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_VALID_OUT_VALID_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_VALID_OUT_VALID_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_VALID_OUT_VALID_BF_MSK (0x00000001)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_VALID_OUT_VALID_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_VALID_RESERVED_31_1_BF_OFF ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_VALID_RESERVED_31_1_BF_WID (31)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_VALID_RESERVED_31_1_BF_MSK (0xFFFFFFFE)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_VALID_RESERVED_31_1_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_SOP register description at address offset 0x508
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_tx_fips_output/AES_TX_OUT_SOP
  * AES TX : FIPS Output - SOP Indication Register.
  */

typedef union {
  struct {
    uint32_t OUT_SOP : 1;
    ///< Indicates that this command is the first of the packet.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_tx_fips_output_aes_tx_out_sop_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_SOP_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_SOP_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_SOP_WR_MASK (0x00000000U)


///< Indicates that this command is the first of the packet.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_SOP_OUT_SOP_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_SOP_OUT_SOP_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_SOP_OUT_SOP_BF_MSK (0x00000001)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_SOP_OUT_SOP_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_SOP_RESERVED_31_1_BF_OFF ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_SOP_RESERVED_31_1_BF_WID (31)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_SOP_RESERVED_31_1_BF_MSK (0xFFFFFFFE)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_SOP_RESERVED_31_1_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_EOP register description at address offset 0x50c
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_tx_fips_output/AES_TX_OUT_EOP
  * AES TX : FIPS Output - EOP Indication Register Register.
  */

typedef union {
  struct {
    uint32_t OUT_EOP : 1;
    ///< Reflect the equivalent signal on the Command interface. The value
    ///< on the output has an identical value as sent on the Input.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_tx_fips_output_aes_tx_out_eop_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_EOP_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_EOP_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_EOP_WR_MASK (0x00000000U)


///< Reflect the equivalent signal on the Command interface. The value
///< on the output has an identical value as sent on the Input.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_EOP_OUT_EOP_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_EOP_OUT_EOP_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_EOP_OUT_EOP_BF_MSK (0x00000001)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_EOP_OUT_EOP_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_EOP_RESERVED_31_1_BF_OFF ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_EOP_RESERVED_31_1_BF_WID (31)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_EOP_RESERVED_31_1_BF_MSK (0xFFFFFFFE)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_EOP_RESERVED_31_1_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_AAD register description at address offset 0x514
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_tx_fips_output/AES_TX_OUT_AAD
  * AES TX : FIPS Output - OUT AAD Register.
  */

typedef union {
  struct {
    uint32_t OUT_AAD : 1;
    ///< Additional Authentication Data (AAD) present in the output data.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_tx_fips_output_aes_tx_out_aad_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_AAD_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_AAD_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_AAD_WR_MASK (0x00000000U)


///< Additional Authentication Data (AAD) present in the output data.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_AAD_OUT_AAD_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_AAD_OUT_AAD_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_AAD_OUT_AAD_BF_MSK (0x00000001)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_AAD_OUT_AAD_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_AAD_RESERVED_31_1_BF_OFF ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_AAD_RESERVED_31_1_BF_WID (31)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_AAD_RESERVED_31_1_BF_MSK (0xFFFFFFFE)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_AAD_RESERVED_31_1_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MSG register description at address offset 0x518
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_tx_fips_output/AES_TX_OUT_MSG
  * AES TX : FIPS Output - OUT MSG Register.
  */

typedef union {
  struct {
    uint32_t OUT_MSG : 1;
    ///< Message (MSG) present in the output data.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_tx_fips_output_aes_tx_out_msg_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MSG_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MSG_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MSG_WR_MASK (0x00000000U)


///< Message (MSG) present in the output data.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MSG_OUT_MSG_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MSG_OUT_MSG_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MSG_OUT_MSG_BF_MSK (0x00000001)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MSG_OUT_MSG_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MSG_RESERVED_31_1_BF_OFF ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MSG_RESERVED_31_1_BF_WID (31)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MSG_RESERVED_31_1_BF_MSK (0xFFFFFFFE)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MSG_RESERVED_31_1_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_AAD_SIZE register description at address offset 0x51c
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_tx_fips_output/AES_TX_OUT_AAD_SIZE
  * AES TX : FIPS Output - OUT AAD SIZE Register.
  */

typedef union {
  struct {
    uint32_t OUT_AAD_SIZE : 6;
    ///< Byte mask of the Additional Authentication Data (AAD) in the output
    ///< data.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="6" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_tx_fips_output_aes_tx_out_aad_size_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_AAD_SIZE_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_AAD_SIZE_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_AAD_SIZE_WR_MASK (0x00000000U)


///< Byte mask of the Additional Authentication Data (AAD) in the output
///< data.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_AAD_SIZE_OUT_AAD_SIZE_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_AAD_SIZE_OUT_AAD_SIZE_BF_WID ( 6)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_AAD_SIZE_OUT_AAD_SIZE_BF_MSK (0x0000003F)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_AAD_SIZE_OUT_AAD_SIZE_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_AAD_SIZE_RESERVED_31_6_BF_OFF ( 6)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_AAD_SIZE_RESERVED_31_6_BF_WID (26)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_AAD_SIZE_RESERVED_31_6_BF_MSK (0xFFFFFFC0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_AAD_SIZE_RESERVED_31_6_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MSG_SIZE register description at address offset 0x520
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_tx_fips_output/AES_TX_OUT_MSG_SIZE
  * AES TX : FIPS Output - OUT MSG SIZE Register.
  */

typedef union {
  struct {
    uint32_t OUT_MSG_SIZE : 6;
    ///< Byte mask of the message (MSG) in the MAC output data.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="6" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_tx_fips_output_aes_tx_out_msg_size_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MSG_SIZE_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MSG_SIZE_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MSG_SIZE_WR_MASK (0x00000000U)


///< Byte mask of the message (MSG) in the MAC output data.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MSG_SIZE_OUT_MSG_SIZE_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MSG_SIZE_OUT_MSG_SIZE_BF_WID ( 6)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MSG_SIZE_OUT_MSG_SIZE_BF_MSK (0x0000003F)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MSG_SIZE_OUT_MSG_SIZE_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MSG_SIZE_RESERVED_31_6_BF_OFF ( 6)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MSG_SIZE_RESERVED_31_6_BF_WID (26)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MSG_SIZE_RESERVED_31_6_BF_MSK (0xFFFFFFC0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MSG_SIZE_RESERVED_31_6_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_DATA_IDX register description at address offset 0x524
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_tx_fips_output/AES_TX_OUT_DATA_IDX
  * AES TX : FIPS Output - Output Data IDX Register.
  */

typedef union {
  struct {
    uint32_t OUT_DATA_IDX : 4;
    ///< Index of the 32-bit MSG chunk constructing the Message word, post
    ///< encryption/decryption. A partial word is left justified on the signal.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="4" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_tx_fips_output_aes_tx_out_data_idx_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_DATA_IDX_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_DATA_IDX_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_DATA_IDX_WR_MASK (0x0000000fU)


///< Index of the 32-bit MSG chunk constructing the Message word, post
///< encryption/decryption. A partial word is left justified on the signal.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_DATA_IDX_OUT_DATA_IDX_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_DATA_IDX_OUT_DATA_IDX_BF_WID ( 4)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_DATA_IDX_OUT_DATA_IDX_BF_MSK (0x0000000F)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_DATA_IDX_OUT_DATA_IDX_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_DATA_IDX_RESERVED_31_4_BF_OFF ( 4)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_DATA_IDX_RESERVED_31_4_BF_WID (28)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_DATA_IDX_RESERVED_31_4_BF_MSK (0xFFFFFFF0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_DATA_IDX_RESERVED_31_4_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_DATA_CHUNK register description at address offset 0x528
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_tx_fips_output/AES_TX_OUT_DATA_CHUNK
  * AES TX : FIPS Output - Output Data Chunk Register.
  */

typedef union {
  struct {
    uint32_t OUT_DATA_CHUNK : 32;
    ///< 32-bit chunk of the calculated message.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_tx_fips_output_aes_tx_out_data_chunk_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_DATA_CHUNK_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_DATA_CHUNK_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_DATA_CHUNK_WR_MASK (0x00000000U)


///< 32-bit chunk of the calculated message.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_DATA_CHUNK_OUT_DATA_CHUNK_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_DATA_CHUNK_OUT_DATA_CHUNK_BF_WID (32)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_DATA_CHUNK_OUT_DATA_CHUNK_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_DATA_CHUNK_OUT_DATA_CHUNK_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MAC_IDX register description at address offset 0x530
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_tx_fips_output/AES_TX_OUT_MAC_IDX
  * AES TX : FIPS Output - MAC Index Register.
  */

typedef union {
  struct {
    uint32_t OUT_MAC_IDX : 2;
    ///< Index of the 32-bit MAC chunk constructing the calculated MAC. MAC
    ///< is in Big Endian Byte order
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="2" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_tx_fips_output_aes_tx_out_mac_idx_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MAC_IDX_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MAC_IDX_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MAC_IDX_WR_MASK (0x00000003U)


///< Index of the 32-bit MAC chunk constructing the calculated MAC. MAC
///< is in Big Endian Byte order
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MAC_IDX_OUT_MAC_IDX_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MAC_IDX_OUT_MAC_IDX_BF_WID ( 2)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MAC_IDX_OUT_MAC_IDX_BF_MSK (0x00000003)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MAC_IDX_OUT_MAC_IDX_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MAC_IDX_RESERVED_31_2_BF_OFF ( 2)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MAC_IDX_RESERVED_31_2_BF_WID (30)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MAC_IDX_RESERVED_31_2_BF_MSK (0xFFFFFFFC)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MAC_IDX_RESERVED_31_2_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MAC_CHUNK register description at address offset 0x534
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_tx_fips_output/AES_TX_OUT_MAC_CHUNK
  * AES TX : FIPS Output - MAC Chunk Register.
  */

typedef union {
  struct {
    uint32_t OUT_MAC_CHUNK : 32;
    ///< 32-bit chunk of the calculated MAC value .
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_tx_fips_output_aes_tx_out_mac_chunk_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MAC_CHUNK_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MAC_CHUNK_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MAC_CHUNK_WR_MASK (0x00000000U)


///< 32-bit chunk of the calculated MAC value .
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MAC_CHUNK_OUT_MAC_CHUNK_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MAC_CHUNK_OUT_MAC_CHUNK_BF_WID (32)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MAC_CHUNK_OUT_MAC_CHUNK_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MAC_CHUNK_OUT_MAC_CHUNK_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_TX_FIPS_SEL_AES_TX_SEL register description at address offset 0x5fc
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_tx_fips_sel/AES_TX_SEL
  * AES TX : FIPS - AES Selection Register.
  */

typedef union {
  struct {
    uint32_t AES_TX_SEL : 1;
    ///< Selects which AES to be served by the FIPS 140-3 test mode.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_tx_fips_sel_aes_tx_sel_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_SEL_AES_TX_SEL_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_SEL_AES_TX_SEL_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_SEL_AES_TX_SEL_WR_MASK (0x00000001U)


///< Selects which AES to be served by the FIPS 140-3 test mode.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_SEL_AES_TX_SEL_AES_TX_SEL_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_SEL_AES_TX_SEL_AES_TX_SEL_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_SEL_AES_TX_SEL_AES_TX_SEL_BF_MSK (0x00000001)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_SEL_AES_TX_SEL_AES_TX_SEL_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_SEL_AES_TX_SEL_RESERVED_31_1_BF_OFF ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_SEL_AES_TX_SEL_RESERVED_31_1_BF_WID (31)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_SEL_AES_TX_SEL_RESERVED_31_1_BF_MSK (0xFFFFFFFE)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_SEL_AES_TX_SEL_RESERVED_31_1_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_RX_HOST_AES_RX_CORE_VER_NUM register description at address offset 0x800
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_rx_host/AES_RX_CORE_VER_NUM
  * AES RX : IP Version Number Register.
  */

typedef union {
  struct {
    uint32_t VERSION_NUM : 16;
    ///< Indicates the coreKit release version number in BCD format. For example,
    ///< Release number `1.70a` is represented as 0x0170.       Release number
    ///< `12.41a` is represented as 0x1241.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_core_ver_num_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CORE_VER_NUM_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CORE_VER_NUM_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CORE_VER_NUM_WR_MASK (0x00000000U)


///< Indicates the coreKit release version number in BCD format. For example,
///< Release number `1.70a` is represented as 0x0170.       Release number
///< `12.41a` is represented as 0x1241.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CORE_VER_NUM_VER_NUM_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CORE_VER_NUM_VER_NUM_BF_WID (16)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CORE_VER_NUM_VER_NUM_BF_MSK (0x0000FFFF)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CORE_VER_NUM_VER_NUM_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CORE_VER_NUM_RESERVED_31_16_BF_OFF (16)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CORE_VER_NUM_RESERVED_31_16_BF_WID (16)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CORE_VER_NUM_RESERVED_31_16_BF_MSK (0xFFFF0000)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CORE_VER_NUM_RESERVED_31_16_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_RX_HOST_AES_RX_CORE_VER_TYPE register description at address offset 0x804
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_rx_host/AES_RX_CORE_VER_TYPE
  * AES RX : IP Version Type Register.
  */

typedef union {
  struct {
    uint32_t TYPE_NUM : 8;
    ///< Indicates the coreKit release version type number in BCD format. For
    ///< example,        Release number `1.70a-lp04` is represented as 0x04.
    ///< GA releases will have a value of 0.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t PKG_NUM : 4;
    ///< Indicates the alphabetical packaging number of coreKit ID. Values,
    ///< 4'b1010: 'a'       4'b1011: 'b'        4'b1100: 'c'        4'b1101:
    ///< 'd'       4'b1110: 'e'        4'b1111: 'f'        4'b0000: 'g'
    ///< --------        4'b1000: 'o'        4'b1001: 'p'        NOTE: PKG_NUM
    ///< can have a value from 'a' to 'p' only.
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
    uint32_t TYPE_ENUM : 4;
    ///< Indicates the coreKit release type. Values,        0x0 (TYPE_ENUM_GA):
    ///< GA release        0x1 (TYPE_ENUM_LCA): LCA release        0x2 (TYPE_ENUM_EA):
    ///< EA release        0x3 (TYPE_ENUM_LP): LP release        0x4 reserved
    ///< 0x5 (TYPE_ENUM_SOW): SOW release        0x6 (TYPE_ENUM_EC): EC release
    ///< others: reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_core_ver_type_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CORE_VER_TYPE_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CORE_VER_TYPE_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CORE_VER_TYPE_WR_MASK (0x00000000U)


///< Indicates the coreKit release version type number in BCD format. For
///< example,        Release number `1.70a-lp04` is represented as 0x04.
///< GA releases will have a value of 0.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CORE_VER_TYPE_NUM_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CORE_VER_TYPE_NUM_BF_WID ( 8)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CORE_VER_TYPE_NUM_BF_MSK (0x000000FF)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CORE_VER_TYPE_NUM_BF_DEF (0x00000000)

///< Indicates the alphabetical packaging number of coreKit ID. Values,
///< 4'b1010: 'a'       4'b1011: 'b'        4'b1100: 'c'        4'b1101:
///< 'd'       4'b1110: 'e'        4'b1111: 'f'        4'b0000: 'g'
///< --------        4'b1000: 'o'        4'b1001: 'p'        NOTE: PKG_NUM
///< can have a value from 'a' to 'p' only.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CORE_VER_TYPE_PKG_NUM_BF_OFF ( 8)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CORE_VER_TYPE_PKG_NUM_BF_WID ( 4)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CORE_VER_TYPE_PKG_NUM_BF_MSK (0x00000F00)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CORE_VER_TYPE_PKG_NUM_BF_DEF (0x00000000)

///< Indicates the coreKit release type. Values,        0x0 (TYPE_ENUM_GA):
///< GA release        0x1 (TYPE_ENUM_LCA): LCA release        0x2 (TYPE_ENUM_EA):
///< EA release        0x3 (TYPE_ENUM_LP): LP release        0x4 reserved
///< 0x5 (TYPE_ENUM_SOW): SOW release        0x6 (TYPE_ENUM_EC): EC release
///< others: reserved
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CORE_VER_TYPE_ENUM_BF_OFF (12)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CORE_VER_TYPE_ENUM_BF_WID ( 4)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CORE_VER_TYPE_ENUM_BF_MSK (0x0000F000)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CORE_VER_TYPE_ENUM_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CORE_VER_TYPE_RESERVED_31_16_BF_OFF (16)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CORE_VER_TYPE_RESERVED_31_16_BF_WID (16)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CORE_VER_TYPE_RESERVED_31_16_BF_MSK (0xFFFF0000)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CORE_VER_TYPE_RESERVED_31_16_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_RX_HOST_AES_RX_IRQ_EN register description at address offset 0x808
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_rx_host/AES_RX_IRQ_EN
  * AES RX : Interrupt Enable Register.
  */

typedef union {
  struct {
    uint32_t KEY_DONE : 1;
    ///< Enables interrupt indicating that a key load has completed
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="2" ResetValue="0x0"
    uint32_t CTX_IDX_ERR : 1;
    ///< Enables interrupt indicating that a context index error has been detected.
    ///< The corresponding IRQ_STAT field can only be asserted if this field
    ///< is set.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="5" ResetValue="0x0"
    uint32_t REG_PAR_ERR : 1;
    ///< Enables interrupt indicating that a register parity error has been
    ///< detected. The corresponding IRQ_STAT field can only be asserted if
    ///< this field is set.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t FSM_PAR_ERR : 1;
    ///< Enables interrupt indicating that an FSM parity error has been detected.
    ///< The corresponding IRQ_STAT field can only be asserted if this field
    ///< is set.
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="18" ResetValue="0x0"
    uint32_t OUTPUT : 1;
    ///< Enables O_cfg_irq output
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_irq_en_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_EN_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_EN_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_EN_WR_MASK (0x80030011U)


///< Enables interrupt indicating that a key load has completed
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_EN_KEY_DONE_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_EN_KEY_DONE_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_EN_KEY_DONE_BF_MSK (0x00000001)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_EN_KEY_DONE_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_EN_RESERVED_1_BF_OFF ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_EN_RESERVED_1_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_EN_RESERVED_1_BF_MSK (0x00000002)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_EN_RESERVED_1_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_EN_RESERVED_3_2_BF_OFF ( 2)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_EN_RESERVED_3_2_BF_WID ( 2)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_EN_RESERVED_3_2_BF_MSK (0x0000000C)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_EN_RESERVED_3_2_BF_DEF (0x00000000)

///< Enables interrupt indicating that a context index error has been detected.
///< The corresponding IRQ_STAT field can only be asserted if this field
///< is set.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_EN_CTX_IDX_ERR_BF_OFF ( 4)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_EN_CTX_IDX_ERR_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_EN_CTX_IDX_ERR_BF_MSK (0x00000010)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_EN_CTX_IDX_ERR_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_EN_RESERVED_15_5_BF_OFF ( 5)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_EN_RESERVED_15_5_BF_WID (11)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_EN_RESERVED_15_5_BF_MSK (0x0000FFE0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_EN_RESERVED_15_5_BF_DEF (0x00000000)

///< Enables interrupt indicating that a register parity error has been
///< detected. The corresponding IRQ_STAT field can only be asserted if
///< this field is set.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_EN_PAR_ERR_BF_OFF (16)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_EN_PAR_ERR_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_EN_PAR_ERR_BF_MSK (0x00010000)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_EN_PAR_ERR_BF_DEF (0x00000000)

///< Enables interrupt indicating that an FSM parity error has been detected.
///< The corresponding IRQ_STAT field can only be asserted if this field
///< is set.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_EN_FSM_PAR_ERR_BF_OFF (17)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_EN_FSM_PAR_ERR_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_EN_FSM_PAR_ERR_BF_MSK (0x00020000)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_EN_FSM_PAR_ERR_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_EN_RESERVED_31_18_BF_OFF (18)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_EN_RESERVED_31_18_BF_WID (13)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_EN_RESERVED_31_18_BF_MSK (0x7FFC0000)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_EN_RESERVED_31_18_BF_DEF (0x00000000)

///< Enables O_cfg_irq output
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_EN_OUTPUT_BF_OFF (31)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_EN_OUTPUT_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_EN_OUTPUT_BF_MSK (0x80000000)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_EN_OUTPUT_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_RX_HOST_AES_RX_IRQ_STAT register description at address offset 0x80c
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_rx_host/AES_RX_IRQ_STAT
  * AES RX : Interrupt Status Register.
  */

typedef union {
  struct {
    uint32_t KEY_DONE : 1;
    ///< Status of interrupt indicating that a key load has completed
    ///< AccessType="RW/1C" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="2" ResetValue="0x0"
    uint32_t CTX_IDX_ERR : 1;
    ///< Status of interrupt indicating that a context index error has been
    ///< detected
    ///< AccessType="RW/1C" BitOffset="4" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="5" ResetValue="0x0"
    uint32_t REG_PAR_ERR : 1;
    ///< Status of interrupt indicating that a register parity error has been
    ///< detected
    ///< AccessType="RW/1C" BitOffset="16" ResetValue="0x0"
    uint32_t FSM_PAR_ERR : 1;
    ///< Status of interrupt indicating that an FSM parity error has been detected
    ///< AccessType="RW/1C" BitOffset="17" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="18" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_irq_stat_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_STAT_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_STAT_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_STAT_WR_MASK (0x00030011U)


///< Status of interrupt indicating that a key load has completed
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_STAT_KEY_DONE_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_STAT_KEY_DONE_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_STAT_KEY_DONE_BF_MSK (0x00000001)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_STAT_KEY_DONE_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_STAT_RESERVED_1_BF_OFF ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_STAT_RESERVED_1_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_STAT_RESERVED_1_BF_MSK (0x00000002)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_STAT_RESERVED_1_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_STAT_RESERVED_3_2_BF_OFF ( 2)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_STAT_RESERVED_3_2_BF_WID ( 2)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_STAT_RESERVED_3_2_BF_MSK (0x0000000C)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_STAT_RESERVED_3_2_BF_DEF (0x00000000)

///< Status of interrupt indicating that a context index error has been
///< detected
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_STAT_CTX_IDX_ERR_BF_OFF ( 4)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_STAT_CTX_IDX_ERR_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_STAT_CTX_IDX_ERR_BF_MSK (0x00000010)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_STAT_CTX_IDX_ERR_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_STAT_RESERVED_15_5_BF_OFF ( 5)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_STAT_RESERVED_15_5_BF_WID (11)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_STAT_RESERVED_15_5_BF_MSK (0x0000FFE0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_STAT_RESERVED_15_5_BF_DEF (0x00000000)

///< Status of interrupt indicating that a register parity error has been
///< detected
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_STAT_PAR_ERR_BF_OFF (16)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_STAT_PAR_ERR_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_STAT_PAR_ERR_BF_MSK (0x00010000)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_STAT_PAR_ERR_BF_DEF (0x00000000)

///< Status of interrupt indicating that an FSM parity error has been detected
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_STAT_FSM_PAR_ERR_BF_OFF (17)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_STAT_FSM_PAR_ERR_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_STAT_FSM_PAR_ERR_BF_MSK (0x00020000)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_STAT_FSM_PAR_ERR_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_STAT_RESERVED_31_18_BF_OFF (18)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_STAT_RESERVED_31_18_BF_WID (14)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_STAT_RESERVED_31_18_BF_MSK (0xFFFC0000)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_STAT_RESERVED_31_18_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_RX_HOST_AES_RX_CTRL register description at address offset 0x814
  *
  * Register default value:        0x00010000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_rx_host/AES_RX_CTRL
  * AES RX : Control register.
  */

typedef union {
  struct {
    uint32_t CTX_IDX : 4;
    ///< Key context index to load the key into.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="4" ResetValue="0x0"
    uint32_t KEY_SZ : 1;
    ///< Size of the key:   - 0:128-bit   - 1: 256-bit       For the purposes
    ///< of IDE, this field is, by default, set to a 256-bit key size.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="17" ResetValue="0x0"
    uint32_t ENCRYPT : 1;
    ///< Encrypt/Decrypt selector for the key.                  For the purposes
    ///< of IDE Rx, this field is, by default, set to decrypt.
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="19" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_ctrl_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CTRL_DEFAULT (0x00010000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CTRL_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CTRL_WR_MASK (0x0005000fU)


///< Key context index to load the key into.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CTRL_CTX_IDX_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CTRL_CTX_IDX_BF_WID ( 4)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CTRL_CTX_IDX_BF_MSK (0x0000000F)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CTRL_CTX_IDX_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CTRL_RESERVED_15_4_BF_OFF ( 4)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CTRL_RESERVED_15_4_BF_WID (12)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CTRL_RESERVED_15_4_BF_MSK (0x0000FFF0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CTRL_RESERVED_15_4_BF_DEF (0x00000000)

///< Size of the key:   - 0:128-bit   - 1: 256-bit       For the purposes
///< of IDE, this field is, by default, set to a 256-bit key size.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CTRL_KEY_SZ_BF_OFF (16)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CTRL_KEY_SZ_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CTRL_KEY_SZ_BF_MSK (0x00010000)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CTRL_KEY_SZ_BF_DEF (0x00010000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CTRL_RESERVED_17_BF_OFF (17)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CTRL_RESERVED_17_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CTRL_RESERVED_17_BF_MSK (0x00020000)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CTRL_RESERVED_17_BF_DEF (0x00000000)

///< Encrypt/Decrypt selector for the key.                  For the purposes
///< of IDE Rx, this field is, by default, set to decrypt.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CTRL_ENCRYPT_BF_OFF (18)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CTRL_ENCRYPT_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CTRL_ENCRYPT_BF_MSK (0x00040000)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CTRL_ENCRYPT_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CTRL_RESERVED_31_19_BF_OFF (19)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CTRL_RESERVED_31_19_BF_WID (13)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CTRL_RESERVED_31_19_BF_MSK (0xFFF80000)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CTRL_RESERVED_31_19_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_RX_HOST_AES_RX_STAT register description at address offset 0x818
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_rx_host/AES_RX_STAT
  * AES RX : Status Register.
  */

typedef union {
  struct {
    uint32_t BUSY : 1;
    ///< Indicates that the core is busy installing a key. All other registers
    ///< must not be written while this field indicates a 1.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="2" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_stat_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_STAT_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_STAT_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_STAT_WR_MASK (0x00000000U)


///< Indicates that the core is busy installing a key. All other registers
///< must not be written while this field indicates a 1.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_STAT_BUSY_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_STAT_BUSY_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_STAT_BUSY_BF_MSK (0x00000001)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_STAT_BUSY_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_STAT_RESERVED_1_BF_OFF ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_STAT_RESERVED_1_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_STAT_RESERVED_1_BF_MSK (0x00000002)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_STAT_RESERVED_1_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_STAT_RESERVED_31_2_BF_OFF ( 2)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_STAT_RESERVED_31_2_BF_WID (30)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_STAT_RESERVED_31_2_BF_MSK (0xFFFFFFFC)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_STAT_RESERVED_31_2_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_RX_HOST_AES_RX_KEY_0 register description at address offset 0x820
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_rx_host/AES_RX_KEY_0
  * AES RX : Key 0 Register.
  */

typedef union {
  struct {
    uint32_t KEY : 32;
    ///< Key bytes:  00, 01, 02, 03
    ///< AccessType="WS" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_key_0_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_0_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_0_RD_MASK (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_0_WR_MASK (0xffffffffU)


///< Key bytes:  00, 01, 02, 03
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_0_KEY_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_0_KEY_BF_WID (32)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_0_KEY_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_0_KEY_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_RX_HOST_AES_RX_KEY_1 register description at address offset 0x824
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_rx_host/AES_RX_KEY_1
  * AES RX : Key 1 Register.
  */

typedef union {
  struct {
    uint32_t KEY : 32;
    ///< Key bytes:  04, 05, 06, 07
    ///< AccessType="WS" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_key_1_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_1_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_1_RD_MASK (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_1_WR_MASK (0xffffffffU)


///< Key bytes:  04, 05, 06, 07
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_1_KEY_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_1_KEY_BF_WID (32)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_1_KEY_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_1_KEY_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_RX_HOST_AES_RX_KEY_2 register description at address offset 0x828
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_rx_host/AES_RX_KEY_2
  * AES RX : Key 2 Register.
  */

typedef union {
  struct {
    uint32_t KEY : 32;
    ///< Key bytes:  08, 09, 10, 11
    ///< AccessType="WS" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_key_2_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_2_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_2_RD_MASK (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_2_WR_MASK (0xffffffffU)


///< Key bytes:  08, 09, 10, 11
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_2_KEY_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_2_KEY_BF_WID (32)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_2_KEY_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_2_KEY_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_RX_HOST_AES_RX_KEY_3 register description at address offset 0x82c
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_rx_host/AES_RX_KEY_3
  * AES RX : Key 3 Register.
  */

typedef union {
  struct {
    uint32_t KEY : 32;
    ///< Key bytes:  12, 13, 14, 15
    ///< AccessType="WS" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_key_3_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_3_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_3_RD_MASK (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_3_WR_MASK (0xffffffffU)


///< Key bytes:  12, 13, 14, 15
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_3_KEY_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_3_KEY_BF_WID (32)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_3_KEY_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_3_KEY_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_RX_HOST_AES_RX_KEY_4 register description at address offset 0x830
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_rx_host/AES_RX_KEY_4
  * AES RX : Key 4 Register.
  */

typedef union {
  struct {
    uint32_t KEY : 32;
    ///< Key bytes:  16, 17, 18, 19  (256-bit key only)
    ///< AccessType="WS" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_key_4_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_4_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_4_RD_MASK (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_4_WR_MASK (0xffffffffU)


///< Key bytes:  16, 17, 18, 19  (256-bit key only)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_4_KEY_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_4_KEY_BF_WID (32)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_4_KEY_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_4_KEY_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_RX_HOST_AES_RX_KEY_5 register description at address offset 0x834
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_rx_host/AES_RX_KEY_5
  * AES RX : Key 5 Register.
  */

typedef union {
  struct {
    uint32_t KEY : 32;
    ///< Key bytes:  20, 21, 22, 23  (256-bit key only)
    ///< AccessType="WS" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_key_5_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_5_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_5_RD_MASK (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_5_WR_MASK (0xffffffffU)


///< Key bytes:  20, 21, 22, 23  (256-bit key only)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_5_KEY_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_5_KEY_BF_WID (32)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_5_KEY_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_5_KEY_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_RX_HOST_AES_RX_KEY_6 register description at address offset 0x838
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_rx_host/AES_RX_KEY_6
  * AES RX : Key 6 Register.
  */

typedef union {
  struct {
    uint32_t KEY : 32;
    ///< Key bytes:  24, 25, 26, 27  (256-bit key only)
    ///< AccessType="WS" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_key_6_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_6_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_6_RD_MASK (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_6_WR_MASK (0xffffffffU)


///< Key bytes:  24, 25, 26, 27  (256-bit key only)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_6_KEY_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_6_KEY_BF_WID (32)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_6_KEY_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_6_KEY_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_RX_HOST_AES_RX_KEY_7 register description at address offset 0x83c
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_rx_host/AES_RX_KEY_7
  * AES RX : Key 7 Register.
  */

typedef union {
  struct {
    uint32_t KEY : 32;
    ///< Key bytes:  28, 29, 30, 31  (256-bit key only)
    ///< AccessType="WS" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_key_7_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_7_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_7_RD_MASK (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_7_WR_MASK (0xffffffffU)


///< Key bytes:  28, 29, 30, 31  (256-bit key only)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_7_KEY_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_7_KEY_BF_WID (32)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_7_KEY_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_7_KEY_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_RX_HOST_AES_RX_INITIAL_IV_LSW register description at address offset 0x840
  *
  * Register default value:        0x00000001
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_rx_host/AES_RX_INITIAL_IV_LSW
  * AES RX : INITIAL_IV_LSW.
  */

typedef union {
  struct {
    uint32_t INITIAL_IV_LSW : 32;
    ///< Initial IV configuration value (least-significant word) Configures
    ///< the LSW value of the Initial IV for the CTRL.CTX_IDX context index
    ///< Note: Update of internal IV value is only effective when the CTRL
    ///< register is written
    ///< AccessType="WS" BitOffset="0" ResetValue="0x1"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_initial_iv_lsw_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_INITIAL_IV_LSW_DEFAULT (0x00000001U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_INITIAL_IV_LSW_RD_MASK (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_INITIAL_IV_LSW_WR_MASK (0xffffffffU)


///< Initial IV configuration value (least-significant word) Configures
///< the LSW value of the Initial IV for the CTRL.CTX_IDX context index
///< Note: Update of internal IV value is only effective when the CTRL
///< register is written
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_INITIAL_IV_LSW_INITIAL_IV_LSW_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_INITIAL_IV_LSW_INITIAL_IV_LSW_BF_WID (32)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_INITIAL_IV_LSW_INITIAL_IV_LSW_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_INITIAL_IV_LSW_INITIAL_IV_LSW_BF_DEF (0x00000001)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_RX_HOST_AES_RX_INITIAL_IV_MSW register description at address offset 0x844
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_rx_host/AES_RX_INITIAL_IV_MSW
  * AES RX : INITIAL_IV_MSW.
  */

typedef union {
  struct {
    uint32_t INITIAL_IV_MSW : 32;
    ///< Initial IV configuration value (most-significant word) Configures
    ///< the MSW value of the Initial IV for the CTRL.CTX_IDX context index
    ///< Note: Update of internal IV value is only effective when the CTRL
    ///< register is written
    ///< AccessType="WS" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_initial_iv_msw_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_INITIAL_IV_MSW_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_INITIAL_IV_MSW_RD_MASK (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_INITIAL_IV_MSW_WR_MASK (0xffffffffU)


///< Initial IV configuration value (most-significant word) Configures
///< the MSW value of the Initial IV for the CTRL.CTX_IDX context index
///< Note: Update of internal IV value is only effective when the CTRL
///< register is written
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_INITIAL_IV_MSW_INITIAL_IV_MSW_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_INITIAL_IV_MSW_INITIAL_IV_MSW_BF_WID (32)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_INITIAL_IV_MSW_INITIAL_IV_MSW_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_INITIAL_IV_MSW_INITIAL_IV_MSW_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_RX_HOST_AES_RX_LINK_DISABLE_STREAM_KEYS register description at address offset 0x9c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_rx_host/AES_RX_LINK_DISABLE_STREAM_KEYS
  * AES RX : Invalidates the Link Stream Keys for RX.
  */

typedef union {
  struct {
    uint32_t LINK_DISABLE_KEY_S0_PR : 1;
    ///< Setting this bit to 1 invalidates the KEY for Post Request (PR) sub-stream
    ///< from Link stream 0 in the RX data path.
    ///< AccessType="WS" BitOffset="0" ResetValue="0x0"
    uint32_t LINK_DISABLE_KEY_S0_NPR : 1;
    ///< Setting this bit to 1 invalidates the KEY for Non-Post Request (NPR)
    ///< sub-stream from Link stream 0 in the RX data path.
    ///< AccessType="WS" BitOffset="1" ResetValue="0x0"
    uint32_t LINK_DISABLE_KEY_S0_CPL : 1;
    ///< Setting this bit to 1 invalidates the KEYs for Completion (CPL) sub-stream
    ///< from Link stream 0 in the RX data path.
    ///< AccessType="WS" BitOffset="2" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="3" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_link_dis_strm_keys_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_LINK_DIS_STRM_KEYS_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_LINK_DIS_STRM_KEYS_RD_MASK (0xfffffff8U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_LINK_DIS_STRM_KEYS_WR_MASK (0x00000007U)


///< Setting this bit to 1 invalidates the KEY for Post Request (PR) sub-stream
///< from Link stream 0 in the RX data path.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_LINK_DIS_STRM_KEYS_LINK_DIS_KEY_S0_PR_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_LINK_DIS_STRM_KEYS_LINK_DIS_KEY_S0_PR_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_LINK_DIS_STRM_KEYS_LINK_DIS_KEY_S0_PR_BF_MSK (0x00000001)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_LINK_DIS_STRM_KEYS_LINK_DIS_KEY_S0_PR_BF_DEF (0x00000000)

///< Setting this bit to 1 invalidates the KEY for Non-Post Request (NPR)
///< sub-stream from Link stream 0 in the RX data path.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_LINK_DIS_STRM_KEYS_LINK_DIS_KEY_S0_NPR_BF_OFF ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_LINK_DIS_STRM_KEYS_LINK_DIS_KEY_S0_NPR_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_LINK_DIS_STRM_KEYS_LINK_DIS_KEY_S0_NPR_BF_MSK (0x00000002)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_LINK_DIS_STRM_KEYS_LINK_DIS_KEY_S0_NPR_BF_DEF (0x00000000)

///< Setting this bit to 1 invalidates the KEYs for Completion (CPL) sub-stream
///< from Link stream 0 in the RX data path.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_LINK_DIS_STRM_KEYS_LINK_DIS_KEY_S0_CPL_BF_OFF ( 2)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_LINK_DIS_STRM_KEYS_LINK_DIS_KEY_S0_CPL_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_LINK_DIS_STRM_KEYS_LINK_DIS_KEY_S0_CPL_BF_MSK (0x00000004)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_LINK_DIS_STRM_KEYS_LINK_DIS_KEY_S0_CPL_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_LINK_DIS_STRM_KEYS_RESERVED_31_3_BF_OFF ( 3)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_LINK_DIS_STRM_KEYS_RESERVED_31_3_BF_WID (29)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_LINK_DIS_STRM_KEYS_RESERVED_31_3_BF_MSK (0xFFFFFFF8)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_LINK_DIS_STRM_KEYS_RESERVED_31_3_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_RX_HOST_AES_RX_SELECTIVE_DISABLE_STREAM_KEYS register description at address offset 0x9c4
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_rx_host/AES_RX_SELECTIVE_DISABLE_STREAM_KEYS
  * AES RX : Invalidates the Selective Stream Keys for RX.
  */

typedef union {
  struct {
    uint32_t SELECTIVE_DISABLE_KEY_S0_PR : 1;
    ///< Setting this bit to 1 invalidates the KEY for Post Request (PR) sub-stream
    ///< from Selective stream 0 in the RX data path.
    ///< AccessType="WS" BitOffset="0" ResetValue="0x0"
    uint32_t SELECTIVE_DISABLE_KEY_S0_NPR : 1;
    ///< Setting this bit to 1 invalidates the KEY for Non-Post Request (NPR)
    ///< sub-stream from Selective stream 0 in the RX data path.
    ///< AccessType="WS" BitOffset="1" ResetValue="0x0"
    uint32_t SELECTIVE_DISABLE_KEY_S0_CPL : 1;
    ///< Setting this bit to 1 invalidates the KEYs for Completion (CPL) sub-stream
    ///< from Selective stream 0 in the RX data path.
    ///< AccessType="WS" BitOffset="2" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="3" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_selive_dis_strm_keys_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_SELIVE_DIS_STRM_KEYS_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_SELIVE_DIS_STRM_KEYS_RD_MASK (0xfffffff8U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_SELIVE_DIS_STRM_KEYS_WR_MASK (0x00000007U)


///< Setting this bit to 1 invalidates the KEY for Post Request (PR) sub-stream
///< from Selective stream 0 in the RX data path.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_SELIVE_DIS_STRM_KEYS_SELIVE_DIS_KEY_S0_PR_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_SELIVE_DIS_STRM_KEYS_SELIVE_DIS_KEY_S0_PR_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_SELIVE_DIS_STRM_KEYS_SELIVE_DIS_KEY_S0_PR_BF_MSK (0x00000001)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_SELIVE_DIS_STRM_KEYS_SELIVE_DIS_KEY_S0_PR_BF_DEF (0x00000000)

///< Setting this bit to 1 invalidates the KEY for Non-Post Request (NPR)
///< sub-stream from Selective stream 0 in the RX data path.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_SELIVE_DIS_STRM_KEYS_SELIVE_DIS_KEY_S0_NPR_BF_OFF ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_SELIVE_DIS_STRM_KEYS_SELIVE_DIS_KEY_S0_NPR_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_SELIVE_DIS_STRM_KEYS_SELIVE_DIS_KEY_S0_NPR_BF_MSK (0x00000002)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_SELIVE_DIS_STRM_KEYS_SELIVE_DIS_KEY_S0_NPR_BF_DEF (0x00000000)

///< Setting this bit to 1 invalidates the KEYs for Completion (CPL) sub-stream
///< from Selective stream 0 in the RX data path.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_SELIVE_DIS_STRM_KEYS_SELIVE_DIS_KEY_S0_CPL_BF_OFF ( 2)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_SELIVE_DIS_STRM_KEYS_SELIVE_DIS_KEY_S0_CPL_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_SELIVE_DIS_STRM_KEYS_SELIVE_DIS_KEY_S0_CPL_BF_MSK (0x00000004)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_SELIVE_DIS_STRM_KEYS_SELIVE_DIS_KEY_S0_CPL_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_SELIVE_DIS_STRM_KEYS_RESERVED_31_3_BF_OFF ( 3)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_SELIVE_DIS_STRM_KEYS_RESERVED_31_3_BF_WID (29)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_SELIVE_DIS_STRM_KEYS_RESERVED_31_3_BF_MSK (0xFFFFFFF8)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_SELIVE_DIS_STRM_KEYS_RESERVED_31_3_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_RX_FIPS_COMMAND_AES_RX_CMD_SOP register description at address offset 0xc00
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_rx_fips_command/AES_RX_CMD_SOP
  * AES RX : FIPS Command - CMD SOP Register.
  */

typedef union {
  struct {
    uint32_t CMD_SOP : 1;
    ///< Indicates that this command is the first of the packet.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_rx_fips_cmd_aes_rx_cmd_sop_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_SOP_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_SOP_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_SOP_WR_MASK (0x00000001U)


///< Indicates that this command is the first of the packet.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_SOP_CMD_SOP_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_SOP_CMD_SOP_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_SOP_CMD_SOP_BF_MSK (0x00000001)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_SOP_CMD_SOP_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_SOP_RESERVED_31_1_BF_OFF ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_SOP_RESERVED_31_1_BF_WID (31)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_SOP_RESERVED_31_1_BF_MSK (0xFFFFFFFE)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_SOP_RESERVED_31_1_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_RX_FIPS_COMMAND_AES_RX_CMD_EOP register description at address offset 0xc04
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_rx_fips_command/AES_RX_CMD_EOP
  * AES RX : FIPS Command - CMD EOP Register.
  */

typedef union {
  struct {
    uint32_t CMD_EOP : 1;
    ///< Indicates that this command is the last of the packet.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_rx_fips_cmd_aes_rx_cmd_eop_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_EOP_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_EOP_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_EOP_WR_MASK (0x00000001U)


///< Indicates that this command is the last of the packet.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_EOP_CMD_EOP_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_EOP_CMD_EOP_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_EOP_CMD_EOP_BF_MSK (0x00000001)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_EOP_CMD_EOP_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_EOP_RESERVED_31_1_BF_OFF ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_EOP_RESERVED_31_1_BF_WID (31)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_EOP_RESERVED_31_1_BF_MSK (0xFFFFFFFE)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_EOP_RESERVED_31_1_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_RX_FIPS_COMMAND_AES_RX_CMD_AAD register description at address offset 0xc08
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_rx_fips_command/AES_RX_CMD_AAD
  * AES RX : FIPS Command - CMD AAD Register.
  */

typedef union {
  struct {
    uint32_t CMD_AAD : 1;
    ///< Additional Authentication Data (AAD) present in the input data.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_rx_fips_cmd_aes_rx_cmd_aad_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_AAD_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_AAD_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_AAD_WR_MASK (0x00000001U)


///< Additional Authentication Data (AAD) present in the input data.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_AAD_CMD_AAD_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_AAD_CMD_AAD_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_AAD_CMD_AAD_BF_MSK (0x00000001)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_AAD_CMD_AAD_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_AAD_RESERVED_31_1_BF_OFF ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_AAD_RESERVED_31_1_BF_WID (31)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_AAD_RESERVED_31_1_BF_MSK (0xFFFFFFFE)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_AAD_RESERVED_31_1_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_RX_FIPS_COMMAND_AES_RX_CMD_MSG register description at address offset 0xc0c
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_rx_fips_command/AES_RX_CMD_MSG
  * AES RX : FIPS Command - CMD MSG Register.
  */

typedef union {
  struct {
    uint32_t CMD_MSG : 1;
    ///< Message (MSG) present in the input data.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_rx_fips_cmd_aes_rx_cmd_msg_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_MSG_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_MSG_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_MSG_WR_MASK (0x00000001U)


///< Message (MSG) present in the input data.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_MSG_CMD_MSG_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_MSG_CMD_MSG_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_MSG_CMD_MSG_BF_MSK (0x00000001)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_MSG_CMD_MSG_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_MSG_RESERVED_31_1_BF_OFF ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_MSG_RESERVED_31_1_BF_WID (31)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_MSG_RESERVED_31_1_BF_MSK (0xFFFFFFFE)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_MSG_RESERVED_31_1_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_RX_FIPS_COMMAND_AES_RX_CTR_IV_IDX register description at address offset 0xc10
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_rx_fips_command/AES_RX_CTR_IV_IDX
  * AES RX : FIPS Command - CTR IV IDX Register.
  */

typedef union {
  struct {
    uint32_t CTR_IV_IDX : 2;
    ///< Index of the 32b iv chunk constructing the Initial counter value (IV).
    ///< IV is in Big Endian Byte order
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="2" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_rx_fips_cmd_aes_rx_ctr_iv_idx_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CTR_IV_IDX_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CTR_IV_IDX_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CTR_IV_IDX_WR_MASK (0x00000003U)


///< Index of the 32b iv chunk constructing the Initial counter value (IV).
///< IV is in Big Endian Byte order
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CTR_IV_IDX_CTR_IV_IDX_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CTR_IV_IDX_CTR_IV_IDX_BF_WID ( 2)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CTR_IV_IDX_CTR_IV_IDX_BF_MSK (0x00000003)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CTR_IV_IDX_CTR_IV_IDX_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CTR_IV_IDX_RESERVED_31_2_BF_OFF ( 2)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CTR_IV_IDX_RESERVED_31_2_BF_WID (30)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CTR_IV_IDX_RESERVED_31_2_BF_MSK (0xFFFFFFFC)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CTR_IV_IDX_RESERVED_31_2_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_RX_FIPS_COMMAND_AES_RX_CTR_IV_CHUNK register description at address offset 0xc14
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_rx_fips_command/AES_RX_CTR_IV_CHUNK
  * AES RX : FIPS Command - CTR IV chunk Register.
  */

typedef union {
  struct {
    uint32_t CTR_IV_CHUNK : 32;
    ///< 32b chunk of the Initial counter value (IV).
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_rx_fips_cmd_aes_rx_ctr_iv_chunk_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CTR_IV_CHUNK_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CTR_IV_CHUNK_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CTR_IV_CHUNK_WR_MASK (0xffffffffU)


///< 32b chunk of the Initial counter value (IV).
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CTR_IV_CHUNK_CTR_IV_CHUNK_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CTR_IV_CHUNK_CTR_IV_CHUNK_BF_WID (32)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CTR_IV_CHUNK_CTR_IV_CHUNK_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CTR_IV_CHUNK_CTR_IV_CHUNK_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_RX_FIPS_COMMAND_AES_RX_CMD_AAD_SIZE register description at address offset 0xc24
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_rx_fips_command/AES_RX_CMD_AAD_SIZE
  * AES RX : FIPS Command - CMD AAD SIZE Register.
  */

typedef union {
  struct {
    uint32_t CMD_AAD_SIZE : 6;
    ///< Byte mask of the Additional Authentication Data (AAD) in the input
    ///< data.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="6" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_rx_fips_cmd_aes_rx_cmd_aad_size_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_AAD_SIZE_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_AAD_SIZE_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_AAD_SIZE_WR_MASK (0x0000003fU)


///< Byte mask of the Additional Authentication Data (AAD) in the input
///< data.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_AAD_SIZE_CMD_AAD_SIZE_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_AAD_SIZE_CMD_AAD_SIZE_BF_WID ( 6)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_AAD_SIZE_CMD_AAD_SIZE_BF_MSK (0x0000003F)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_AAD_SIZE_CMD_AAD_SIZE_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_AAD_SIZE_RESERVED_31_6_BF_OFF ( 6)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_AAD_SIZE_RESERVED_31_6_BF_WID (26)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_AAD_SIZE_RESERVED_31_6_BF_MSK (0xFFFFFFC0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_AAD_SIZE_RESERVED_31_6_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_RX_FIPS_COMMAND_AES_RX_CMD_MSG_SIZE register description at address offset 0xc28
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_rx_fips_command/AES_RX_CMD_MSG_SIZE
  * AES RX : FIPS Command - CMD MSG SIZE Register.
  */

typedef union {
  struct {
    uint32_t CMD_MSG_SIZE : 6;
    ///< Byte mask of the message (MSG) in the MAC input data.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="6" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_rx_fips_cmd_aes_rx_cmd_msg_size_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_MSG_SIZE_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_MSG_SIZE_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_MSG_SIZE_WR_MASK (0x0000003fU)


///< Byte mask of the message (MSG) in the MAC input data.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_MSG_SIZE_CMD_MSG_SIZE_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_MSG_SIZE_CMD_MSG_SIZE_BF_WID ( 6)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_MSG_SIZE_CMD_MSG_SIZE_BF_MSK (0x0000003F)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_MSG_SIZE_CMD_MSG_SIZE_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_MSG_SIZE_RESERVED_31_6_BF_OFF ( 6)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_MSG_SIZE_RESERVED_31_6_BF_WID (26)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_MSG_SIZE_RESERVED_31_6_BF_MSK (0xFFFFFFC0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_MSG_SIZE_RESERVED_31_6_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_RX_FIPS_COMMAND_AES_RX_CMD_CTX register description at address offset 0xc2c
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_rx_fips_command/AES_RX_CMD_CTX
  * AES RX : FIPS Command - Ctx Register.
  */

typedef union {
  struct {
    uint32_t CMD_CTX : 4;
    ///< Command context index.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="4" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_rx_fips_cmd_aes_rx_cmd_ctx_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_CTX_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_CTX_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_CTX_WR_MASK (0x0000000fU)


///< Command context index.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_CTX_CMD_CTX_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_CTX_CMD_CTX_BF_WID ( 4)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_CTX_CMD_CTX_BF_MSK (0x0000000F)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_CTX_CMD_CTX_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_CTX_RESERVED_31_4_BF_OFF ( 4)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_CTX_RESERVED_31_4_BF_WID (28)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_CTX_RESERVED_31_4_BF_MSK (0xFFFFFFF0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_CTX_RESERVED_31_4_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_RX_FIPS_COMMAND_AES_RX_CMD_VALID register description at address offset 0xc30
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_rx_fips_command/AES_RX_CMD_VALID
  * AES RX : FIPS Command - CMD Valid Register.
  */

typedef union {
  struct {
    uint32_t CMD_VALID : 1;
    ///< AXI like valid/ready handshake.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_rx_fips_cmd_aes_rx_cmd_valid_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_VALID_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_VALID_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_VALID_WR_MASK (0x00000001U)


///< AXI like valid/ready handshake.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_VALID_CMD_VALID_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_VALID_CMD_VALID_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_VALID_CMD_VALID_BF_MSK (0x00000001)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_VALID_CMD_VALID_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_VALID_RESERVED_31_1_BF_OFF ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_VALID_RESERVED_31_1_BF_WID (31)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_VALID_RESERVED_31_1_BF_MSK (0xFFFFFFFE)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_VALID_RESERVED_31_1_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_RX_FIPS_COMMAND_AES_RX_CMD_READY register description at address offset 0xc34
  *
  * Register default value:        0x00000001
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_rx_fips_command/AES_RX_CMD_READY
  * AES RX : FIPS Command - CMD Ready Register.
  */

typedef union {
  struct {
    uint32_t CMD_READY : 1;
    ///< AXI like valid/ready handshake.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x1"
    uint32_t  : 31;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_rx_fips_cmd_aes_rx_cmd_ready_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_READY_DEFAULT (0x00000001U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_READY_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_READY_WR_MASK (0x00000000U)


///< AXI like valid/ready handshake.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_READY_CMD_READY_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_READY_CMD_READY_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_READY_CMD_READY_BF_MSK (0x00000001)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_READY_CMD_READY_BF_DEF (0x00000001)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_READY_RESERVED_31_1_BF_OFF ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_READY_RESERVED_31_1_BF_WID (31)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_READY_RESERVED_31_1_BF_MSK (0xFFFFFFFE)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_READY_RESERVED_31_1_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_RX_FIPS_COMMAND_AES_RX_TEST_MODE_CFG register description at address offset 0xc4c
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_rx_fips_command/AES_RX_TEST_MODE_CFG
  * AES RX : FIPS Test mode cfg.
  */

typedef union {
  struct {
    uint32_t TEST_MODE_CFG : 2;
    ///< FIPS Test mode cfg: 0 GCM - 1 Rsv - 2 CTR - 3 ECB.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="2" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_rx_fips_cmd_aes_rx_test_mode_cfg_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_TEST_MODE_CFG_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_TEST_MODE_CFG_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_TEST_MODE_CFG_WR_MASK (0x00000003U)


///< FIPS Test mode cfg: 0 GCM - 1 Rsv - 2 CTR - 3 ECB.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_TEST_MODE_CFG_TEST_MODE_CFG_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_TEST_MODE_CFG_TEST_MODE_CFG_BF_WID ( 2)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_TEST_MODE_CFG_TEST_MODE_CFG_BF_MSK (0x00000003)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_TEST_MODE_CFG_TEST_MODE_CFG_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_TEST_MODE_CFG_RESERVED_31_2_BF_OFF ( 2)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_TEST_MODE_CFG_RESERVED_31_2_BF_WID (30)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_TEST_MODE_CFG_RESERVED_31_2_BF_MSK (0xFFFFFFFC)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_TEST_MODE_CFG_RESERVED_31_2_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_RX_FIPS_INPUT_AES_RX_IN_DATA_IDX register description at address offset 0xc50
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_rx_fips_input/AES_RX_IN_DATA_IDX
  * AES RX : FIPS Input - Input Data IDX Register.
  */

typedef union {
  struct {
    uint32_t IN_DATA_IDX : 4;
    ///< Index of the 32b data chunk constructing the word to process.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="4" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_rx_fips_input_aes_rx_in_data_idx_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_IN_DATA_IDX_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_IN_DATA_IDX_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_IN_DATA_IDX_WR_MASK (0x0000000fU)


///< Index of the 32b data chunk constructing the word to process.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_IN_DATA_IDX_IN_DATA_IDX_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_IN_DATA_IDX_IN_DATA_IDX_BF_WID ( 4)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_IN_DATA_IDX_IN_DATA_IDX_BF_MSK (0x0000000F)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_IN_DATA_IDX_IN_DATA_IDX_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_IN_DATA_IDX_RESERVED_31_4_BF_OFF ( 4)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_IN_DATA_IDX_RESERVED_31_4_BF_WID (28)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_IN_DATA_IDX_RESERVED_31_4_BF_MSK (0xFFFFFFF0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_IN_DATA_IDX_RESERVED_31_4_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_RX_FIPS_INPUT_AES_RX_IN_DATA register description at address offset 0xc54
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_rx_fips_input/AES_RX_IN_DATA
  * AES RX : FIPS Input - Input Data Register.
  */

typedef union {
  struct {
    uint32_t IN_DATA : 32;
    ///< 32b chunk of the word to process. A partial word must be left justified
    ///< on the signal.
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_rx_fips_input_aes_rx_in_data_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_IN_DATA_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_IN_DATA_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_IN_DATA_WR_MASK (0xffffffffU)


///< 32b chunk of the word to process. A partial word must be left justified
///< on the signal.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_IN_DATA_IN_DATA_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_IN_DATA_IN_DATA_BF_WID (32)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_IN_DATA_IN_DATA_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_IN_DATA_IN_DATA_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_RX_FIPS_INPUT_AES_RX_DATA_VALID register description at address offset 0xc58
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_rx_fips_input/AES_RX_DATA_VALID
  * AES RX : FIPS Input - Data Valid Register.
  */

typedef union {
  struct {
    uint32_t DATA_VALID : 1;
    ///< AXI like valid/ready(!stall) handshake.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_rx_fips_input_aes_rx_data_valid_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_DATA_VALID_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_DATA_VALID_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_DATA_VALID_WR_MASK (0x00000001U)


///< AXI like valid/ready(!stall) handshake.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_DATA_VALID_DATA_VALID_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_DATA_VALID_DATA_VALID_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_DATA_VALID_DATA_VALID_BF_MSK (0x00000001)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_DATA_VALID_DATA_VALID_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_DATA_VALID_RESERVED_31_1_BF_OFF ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_DATA_VALID_RESERVED_31_1_BF_WID (31)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_DATA_VALID_RESERVED_31_1_BF_MSK (0xFFFFFFFE)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_DATA_VALID_RESERVED_31_1_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_RX_FIPS_INPUT_AES_RX_DATA_READY register description at address offset 0xc5c
  *
  * Register default value:        0x00000001
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_rx_fips_input/AES_RX_DATA_READY
  * AES RX : FIPS Input - Data Ready Register.
  */

typedef union {
  struct {
    uint32_t DATA_READY : 1;
    ///< AXI like valid/ready(!stall) handshake.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x1"
    uint32_t  : 31;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_rx_fips_input_aes_rx_data_ready_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_DATA_READY_DEFAULT (0x00000001U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_DATA_READY_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_DATA_READY_WR_MASK (0x00000000U)


///< AXI like valid/ready(!stall) handshake.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_DATA_READY_DATA_READY_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_DATA_READY_DATA_READY_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_DATA_READY_DATA_READY_BF_MSK (0x00000001)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_DATA_READY_DATA_READY_BF_DEF (0x00000001)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_DATA_READY_RESERVED_31_1_BF_OFF ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_DATA_READY_RESERVED_31_1_BF_WID (31)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_DATA_READY_RESERVED_31_1_BF_MSK (0xFFFFFFFE)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_DATA_READY_RESERVED_31_1_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_READY register description at address offset 0xd00
  *
  * Register default value:        0x00000001
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_rx_fips_output/AES_RX_OUT_READY
  * AES RX : FIPS Output - Ready Register.
  */

typedef union {
  struct {
    uint32_t OUT_READY : 1;
    ///< AXI like valid/ready(!stall) handshake. Out_valid assertion deasserts
    ///< it. A fresh write-one request re-asserts it.
    ///< AccessType="RW/1S" BitOffset="0" ResetValue="0x1"
    uint32_t  : 31;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_rx_fips_output_aes_rx_out_ready_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_READY_DEFAULT (0x00000001U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_READY_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_READY_WR_MASK (0x00000001U)


///< AXI like valid/ready(!stall) handshake. Out_valid assertion deasserts
///< it. A fresh write-one request re-asserts it.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_READY_OUT_READY_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_READY_OUT_READY_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_READY_OUT_READY_BF_MSK (0x00000001)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_READY_OUT_READY_BF_DEF (0x00000001)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_READY_RESERVED_31_1_BF_OFF ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_READY_RESERVED_31_1_BF_WID (31)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_READY_RESERVED_31_1_BF_MSK (0xFFFFFFFE)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_READY_RESERVED_31_1_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_VALID register description at address offset 0xd04
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_rx_fips_output/AES_RX_OUT_VALID
  * AES RX : FIPS Output - Valid Register.
  */

typedef union {
  struct {
    uint32_t OUT_VALID : 1;
    ///< AXI like valid/ready(!stall) handshake.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_rx_fips_output_aes_rx_out_valid_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_VALID_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_VALID_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_VALID_WR_MASK (0x00000000U)


///< AXI like valid/ready(!stall) handshake.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_VALID_OUT_VALID_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_VALID_OUT_VALID_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_VALID_OUT_VALID_BF_MSK (0x00000001)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_VALID_OUT_VALID_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_VALID_RESERVED_31_1_BF_OFF ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_VALID_RESERVED_31_1_BF_WID (31)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_VALID_RESERVED_31_1_BF_MSK (0xFFFFFFFE)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_VALID_RESERVED_31_1_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_SOP register description at address offset 0xd08
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_rx_fips_output/AES_RX_OUT_SOP
  * AES RX : FIPS Output - SOP Indication Register.
  */

typedef union {
  struct {
    uint32_t OUT_SOP : 1;
    ///< Indicates that this command is the first of the packet.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_rx_fips_output_aes_rx_out_sop_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_SOP_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_SOP_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_SOP_WR_MASK (0x00000000U)


///< Indicates that this command is the first of the packet.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_SOP_OUT_SOP_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_SOP_OUT_SOP_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_SOP_OUT_SOP_BF_MSK (0x00000001)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_SOP_OUT_SOP_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_SOP_RESERVED_31_1_BF_OFF ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_SOP_RESERVED_31_1_BF_WID (31)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_SOP_RESERVED_31_1_BF_MSK (0xFFFFFFFE)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_SOP_RESERVED_31_1_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_EOP register description at address offset 0xd0c
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_rx_fips_output/AES_RX_OUT_EOP
  * AES RX : FIPS Output - EOP Indication Register Register.
  */

typedef union {
  struct {
    uint32_t OUT_EOP : 1;
    ///< Reflect the equivalent signal on the Command interface. The value
    ///< on the output has an identical value as sent on the Input.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_rx_fips_output_aes_rx_out_eop_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_EOP_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_EOP_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_EOP_WR_MASK (0x00000000U)


///< Reflect the equivalent signal on the Command interface. The value
///< on the output has an identical value as sent on the Input.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_EOP_OUT_EOP_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_EOP_OUT_EOP_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_EOP_OUT_EOP_BF_MSK (0x00000001)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_EOP_OUT_EOP_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_EOP_RESERVED_31_1_BF_OFF ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_EOP_RESERVED_31_1_BF_WID (31)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_EOP_RESERVED_31_1_BF_MSK (0xFFFFFFFE)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_EOP_RESERVED_31_1_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_AAD register description at address offset 0xd14
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_rx_fips_output/AES_RX_OUT_AAD
  * AES RX : FIPS Output - OUT AAD Register.
  */

typedef union {
  struct {
    uint32_t OUT_AAD : 1;
    ///< Additional Authentication Data (AAD) present in the output data.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_rx_fips_output_aes_rx_out_aad_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_AAD_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_AAD_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_AAD_WR_MASK (0x00000000U)


///< Additional Authentication Data (AAD) present in the output data.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_AAD_OUT_AAD_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_AAD_OUT_AAD_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_AAD_OUT_AAD_BF_MSK (0x00000001)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_AAD_OUT_AAD_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_AAD_RESERVED_31_1_BF_OFF ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_AAD_RESERVED_31_1_BF_WID (31)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_AAD_RESERVED_31_1_BF_MSK (0xFFFFFFFE)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_AAD_RESERVED_31_1_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MSG register description at address offset 0xd18
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_rx_fips_output/AES_RX_OUT_MSG
  * AES RX : FIPS Output - OUT MSG Register.
  */

typedef union {
  struct {
    uint32_t OUT_MSG : 1;
    ///< Message (MSG) present in the output data.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_rx_fips_output_aes_rx_out_msg_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MSG_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MSG_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MSG_WR_MASK (0x00000000U)


///< Message (MSG) present in the output data.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MSG_OUT_MSG_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MSG_OUT_MSG_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MSG_OUT_MSG_BF_MSK (0x00000001)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MSG_OUT_MSG_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MSG_RESERVED_31_1_BF_OFF ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MSG_RESERVED_31_1_BF_WID (31)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MSG_RESERVED_31_1_BF_MSK (0xFFFFFFFE)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MSG_RESERVED_31_1_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_AAD_SIZE register description at address offset 0xd1c
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_rx_fips_output/AES_RX_OUT_AAD_SIZE
  * AES RX : FIPS Output - OUT AAD SIZE Register.
  */

typedef union {
  struct {
    uint32_t OUT_AAD_SIZE : 6;
    ///< Byte mask of the Additional Authentication Data (AAD) in the output
    ///< data.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="6" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_rx_fips_output_aes_rx_out_aad_size_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_AAD_SIZE_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_AAD_SIZE_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_AAD_SIZE_WR_MASK (0x00000000U)


///< Byte mask of the Additional Authentication Data (AAD) in the output
///< data.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_AAD_SIZE_OUT_AAD_SIZE_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_AAD_SIZE_OUT_AAD_SIZE_BF_WID ( 6)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_AAD_SIZE_OUT_AAD_SIZE_BF_MSK (0x0000003F)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_AAD_SIZE_OUT_AAD_SIZE_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_AAD_SIZE_RESERVED_31_6_BF_OFF ( 6)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_AAD_SIZE_RESERVED_31_6_BF_WID (26)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_AAD_SIZE_RESERVED_31_6_BF_MSK (0xFFFFFFC0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_AAD_SIZE_RESERVED_31_6_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MSG_SIZE register description at address offset 0xd20
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_rx_fips_output/AES_RX_OUT_MSG_SIZE
  * AES RX : FIPS Output - OUT MSG SIZE Register.
  */

typedef union {
  struct {
    uint32_t OUT_MSG_SIZE : 6;
    ///< Byte mask of the message (MSG) in the MAC output data.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="6" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_rx_fips_output_aes_rx_out_msg_size_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MSG_SIZE_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MSG_SIZE_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MSG_SIZE_WR_MASK (0x00000000U)


///< Byte mask of the message (MSG) in the MAC output data.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MSG_SIZE_OUT_MSG_SIZE_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MSG_SIZE_OUT_MSG_SIZE_BF_WID ( 6)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MSG_SIZE_OUT_MSG_SIZE_BF_MSK (0x0000003F)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MSG_SIZE_OUT_MSG_SIZE_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MSG_SIZE_RESERVED_31_6_BF_OFF ( 6)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MSG_SIZE_RESERVED_31_6_BF_WID (26)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MSG_SIZE_RESERVED_31_6_BF_MSK (0xFFFFFFC0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MSG_SIZE_RESERVED_31_6_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_DATA_IDX register description at address offset 0xd24
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_rx_fips_output/AES_RX_OUT_DATA_IDX
  * AES RX : FIPS Output - Output Data IDX Register.
  */

typedef union {
  struct {
    uint32_t OUT_DATA_IDX : 4;
    ///< Index of the 32-bit msg chunk constructing the Message word , post
    ///< encryption/decryption.  A partial word is left justified on the signal.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="4" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_rx_fips_output_aes_rx_out_data_idx_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_DATA_IDX_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_DATA_IDX_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_DATA_IDX_WR_MASK (0x0000000fU)


///< Index of the 32-bit msg chunk constructing the Message word , post
///< encryption/decryption.  A partial word is left justified on the signal.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_DATA_IDX_OUT_DATA_IDX_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_DATA_IDX_OUT_DATA_IDX_BF_WID ( 4)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_DATA_IDX_OUT_DATA_IDX_BF_MSK (0x0000000F)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_DATA_IDX_OUT_DATA_IDX_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_DATA_IDX_RESERVED_31_4_BF_OFF ( 4)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_DATA_IDX_RESERVED_31_4_BF_WID (28)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_DATA_IDX_RESERVED_31_4_BF_MSK (0xFFFFFFF0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_DATA_IDX_RESERVED_31_4_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_DATA_CHUNK register description at address offset 0xd28
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_rx_fips_output/AES_RX_OUT_DATA_CHUNK
  * AES RX : FIPS Output - Output Data Chunk Register.
  */

typedef union {
  struct {
    uint32_t OUT_DATA_CHUNK : 32;
    ///< 32-bit chunk of the calculated message.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_rx_fips_output_aes_rx_out_data_chunk_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_DATA_CHUNK_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_DATA_CHUNK_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_DATA_CHUNK_WR_MASK (0x00000000U)


///< 32-bit chunk of the calculated message.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_DATA_CHUNK_OUT_DATA_CHUNK_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_DATA_CHUNK_OUT_DATA_CHUNK_BF_WID (32)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_DATA_CHUNK_OUT_DATA_CHUNK_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_DATA_CHUNK_OUT_DATA_CHUNK_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MAC_IDX register description at address offset 0xd30
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_rx_fips_output/AES_RX_OUT_MAC_IDX
  * AES RX : FIPS Output - MAC Index Register.
  */

typedef union {
  struct {
    uint32_t OUT_MAC_IDX : 2;
    ///< Index of the 32-bit MAC chunk constructing the calculated mac. MAC
    ///< is in Big Endian Byte order
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="2" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_rx_fips_output_aes_rx_out_mac_idx_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MAC_IDX_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MAC_IDX_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MAC_IDX_WR_MASK (0x00000003U)


///< Index of the 32-bit MAC chunk constructing the calculated mac. MAC
///< is in Big Endian Byte order
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MAC_IDX_OUT_MAC_IDX_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MAC_IDX_OUT_MAC_IDX_BF_WID ( 2)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MAC_IDX_OUT_MAC_IDX_BF_MSK (0x00000003)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MAC_IDX_OUT_MAC_IDX_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MAC_IDX_RESERVED_31_2_BF_OFF ( 2)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MAC_IDX_RESERVED_31_2_BF_WID (30)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MAC_IDX_RESERVED_31_2_BF_MSK (0xFFFFFFFC)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MAC_IDX_RESERVED_31_2_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MAC_CHUNK register description at address offset 0xd34
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_rx_fips_output/AES_RX_OUT_MAC_CHUNK
  * AES RX : FIPS Output - MAC Chunk Register.
  */

typedef union {
  struct {
    uint32_t OUT_MAC_CHUNK : 32;
    ///< 32-bit chunk of the calculated MAC value .
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_rx_fips_output_aes_rx_out_mac_chunk_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MAC_CHUNK_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MAC_CHUNK_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MAC_CHUNK_WR_MASK (0x00000000U)


///< 32-bit chunk of the calculated MAC value .
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MAC_CHUNK_OUT_MAC_CHUNK_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MAC_CHUNK_OUT_MAC_CHUNK_BF_WID (32)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MAC_CHUNK_OUT_MAC_CHUNK_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MAC_CHUNK_OUT_MAC_CHUNK_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_AES_RX_FIPS_SEL_AES_RX_SEL register description at address offset 0xdfc
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_aes_rx_fips_sel/AES_RX_SEL
  * AES RX : FIPS - AES Selection Register.
  */

typedef union {
  struct {
    uint32_t AES_SEL : 1;
    ///< Selects which AES to be served by the FIPS 140-3 test mode.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_aes_rx_fips_sel_aes_rx_sel_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_SEL_AES_RX_SEL_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_SEL_AES_RX_SEL_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_SEL_AES_RX_SEL_WR_MASK (0x00000001U)


///< Selects which AES to be served by the FIPS 140-3 test mode.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_SEL_AES_RX_SEL_AES_SEL_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_SEL_AES_RX_SEL_AES_SEL_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_SEL_AES_RX_SEL_AES_SEL_BF_MSK (0x00000001)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_SEL_AES_RX_SEL_AES_SEL_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_SEL_AES_RX_SEL_RESERVED_31_1_BF_OFF ( 1)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_SEL_AES_RX_SEL_RESERVED_31_1_BF_WID (31)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_SEL_AES_RX_SEL_RESERVED_31_1_BF_MSK (0xFFFFFFFE)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_SEL_AES_RX_SEL_RESERVED_31_1_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_BIST_BIST_CTRL register description at address offset 0xe00
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_bist/BIST_CTRL
  * BIST - Control Register.
  */

typedef union {
  struct {
    uint32_t BIST_START : 1;
    ///< When asserted, starts an On-Demand self-testing operation if ide_test_enable
    ///< is asserted. In the following cycle after being asserted, this bit
    ///< will be cleared.
    ///< AccessType="WS" BitOffset="0" ResetValue="0x0"
    uint32_t BIST_TEST_MODE : 4;
    ///< When BIST_START is asserted, this indicates the test mode that is
    ///< run by the BIST. 0001 -> Batch Mode 0010 -> ECB 0100 -> GCM 1000 ->
    ///< Bypass If any other encoding is used then the BIST behaviour is unexpected.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="5" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_bist_ctrl_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_BIST_CTRL_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_BIST_CTRL_RD_MASK (0xfffffffeU)
#define PCIE_IDE_UAES_GCMP_ID_BIST_CTRL_WR_MASK (0x0000001fU)


///< When asserted, starts an On-Demand self-testing operation if ide_test_enable
///< is asserted. In the following cycle after being asserted, this bit
///< will be cleared.
#define PCIE_IDE_UAES_GCMP_ID_BIST_CTRL_BIST_START_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_BIST_CTRL_BIST_START_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_BIST_CTRL_BIST_START_BF_MSK (0x00000001)
#define PCIE_IDE_UAES_GCMP_ID_BIST_CTRL_BIST_START_BF_DEF (0x00000000)

///< When BIST_START is asserted, this indicates the test mode that is
///< run by the BIST. 0001 -> Batch Mode 0010 -> ECB 0100 -> GCM 1000 ->
///< Bypass If any other encoding is used then the BIST behaviour is unexpected.
#define PCIE_IDE_UAES_GCMP_ID_BIST_CTRL_BIST_TEST_MODE_BF_OFF ( 1)
#define PCIE_IDE_UAES_GCMP_ID_BIST_CTRL_BIST_TEST_MODE_BF_WID ( 4)
#define PCIE_IDE_UAES_GCMP_ID_BIST_CTRL_BIST_TEST_MODE_BF_MSK (0x0000001E)
#define PCIE_IDE_UAES_GCMP_ID_BIST_CTRL_BIST_TEST_MODE_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_BIST_CTRL_RESERVED_27_5_BF_OFF ( 5)
#define PCIE_IDE_UAES_GCMP_ID_BIST_CTRL_RESERVED_27_5_BF_WID (27)
#define PCIE_IDE_UAES_GCMP_ID_BIST_CTRL_RESERVED_27_5_BF_MSK (0xFFFFFFE0)
#define PCIE_IDE_UAES_GCMP_ID_BIST_CTRL_RESERVED_27_5_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_BIST_BIST_STATUS register description at address offset 0xe04
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_bist/BIST_STATUS
  * BIST - Status Register.
  */

typedef union {
  struct {
    uint32_t BIST_DONE : 1;
    ///< When asserted, indicates that the BIST operation is finished and the
    ///< results are ready.
    ///< AccessType="RW/1C" BitOffset="0" ResetValue="0x0"
    uint32_t BIST_FAIL : 1;
    ///< Indicates if the BIST operation passed or failed (1 if failed). Only
    ///< valid when BIST_DONE is asserted.
    ///< AccessType="RW/1C" BitOffset="1" ResetValue="0x0"
    uint32_t BIST_ERR_TEST_TYPE_TX : 3;
    ///< Indicates which test failed for the TX core. 000/001 -> Bypass  010/011
    ///< -> ECB  100/101 -> GCM  Only valid when BIST_DONE is asserted.
    ///< AccessType="RO" BitOffset="2" ResetValue="0x0"
    uint32_t BIST_ERR_TEST_TYPE_RX1 : 3;
    ///< Indicates which test failed for the RX core. 000/001 -> Bypass  010/011
    ///< -> ECB  100/101 -> GCM  Only valid when BIST_DONE is asserted.
    ///< AccessType="RO" BitOffset="5" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
    uint32_t ERR_CORE : 3;
    ///< The assertion of the bit position corresponding to each core represents
    ///< failure. The least significant bit represents failure for the TX core,
    ///< the second least significant bit represents failure for the first
    ///< RX core and, if it exists, the most significant bit represents failure
    ///< for the second RX (RX2) core (otherwise this bit remains 0). Only
    ///< valid when BIST_DONE is asserted.
    ///< AccessType="RO" BitOffset="11" ResetValue="0x0"
    uint32_t  : 18;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="14" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_bist_stat_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_BIST_STAT_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_BIST_STAT_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_BIST_STAT_WR_MASK (0x00000003U)


///< When asserted, indicates that the BIST operation is finished and the
///< results are ready.
#define PCIE_IDE_UAES_GCMP_ID_BIST_STAT_BIST_DONE_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_BIST_STAT_BIST_DONE_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_BIST_STAT_BIST_DONE_BF_MSK (0x00000001)
#define PCIE_IDE_UAES_GCMP_ID_BIST_STAT_BIST_DONE_BF_DEF (0x00000000)

///< Indicates if the BIST operation passed or failed (1 if failed). Only
///< valid when BIST_DONE is asserted.
#define PCIE_IDE_UAES_GCMP_ID_BIST_STAT_BIST_FAIL_BF_OFF ( 1)
#define PCIE_IDE_UAES_GCMP_ID_BIST_STAT_BIST_FAIL_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_BIST_STAT_BIST_FAIL_BF_MSK (0x00000002)
#define PCIE_IDE_UAES_GCMP_ID_BIST_STAT_BIST_FAIL_BF_DEF (0x00000000)

///< Indicates which test failed for the TX core. 000/001 -> Bypass  010/011
///< -> ECB  100/101 -> GCM  Only valid when BIST_DONE is asserted.
#define PCIE_IDE_UAES_GCMP_ID_BIST_STAT_BIST_ERR_TEST_TYPE_TX_BF_OFF ( 2)
#define PCIE_IDE_UAES_GCMP_ID_BIST_STAT_BIST_ERR_TEST_TYPE_TX_BF_WID ( 3)
#define PCIE_IDE_UAES_GCMP_ID_BIST_STAT_BIST_ERR_TEST_TYPE_TX_BF_MSK (0x0000001C)
#define PCIE_IDE_UAES_GCMP_ID_BIST_STAT_BIST_ERR_TEST_TYPE_TX_BF_DEF (0x00000000)

///< Indicates which test failed for the RX core. 000/001 -> Bypass  010/011
///< -> ECB  100/101 -> GCM  Only valid when BIST_DONE is asserted.
#define PCIE_IDE_UAES_GCMP_ID_BIST_STAT_BIST_ERR_TEST_TYPE_RX1_BF_OFF ( 5)
#define PCIE_IDE_UAES_GCMP_ID_BIST_STAT_BIST_ERR_TEST_TYPE_RX1_BF_WID ( 3)
#define PCIE_IDE_UAES_GCMP_ID_BIST_STAT_BIST_ERR_TEST_TYPE_RX1_BF_MSK (0x000000E0)
#define PCIE_IDE_UAES_GCMP_ID_BIST_STAT_BIST_ERR_TEST_TYPE_RX1_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_BIST_STAT_RESERVED_10_8_BF_OFF ( 8)
#define PCIE_IDE_UAES_GCMP_ID_BIST_STAT_RESERVED_10_8_BF_WID ( 3)
#define PCIE_IDE_UAES_GCMP_ID_BIST_STAT_RESERVED_10_8_BF_MSK (0x00000700)
#define PCIE_IDE_UAES_GCMP_ID_BIST_STAT_RESERVED_10_8_BF_DEF (0x00000000)

///< The assertion of the bit position corresponding to each core represents
///< failure. The least significant bit represents failure for the TX core,
///< the second least significant bit represents failure for the first
///< RX core and, if it exists, the most significant bit represents failure
///< for the second RX (RX2) core (otherwise this bit remains 0). Only
///< valid when BIST_DONE is asserted.
#define PCIE_IDE_UAES_GCMP_ID_BIST_STAT_ERR_CORE_BF_OFF (11)
#define PCIE_IDE_UAES_GCMP_ID_BIST_STAT_ERR_CORE_BF_WID ( 3)
#define PCIE_IDE_UAES_GCMP_ID_BIST_STAT_ERR_CORE_BF_MSK (0x00003800)
#define PCIE_IDE_UAES_GCMP_ID_BIST_STAT_ERR_CORE_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_BIST_STAT_RESERVED_18_14_BF_OFF (14)
#define PCIE_IDE_UAES_GCMP_ID_BIST_STAT_RESERVED_18_14_BF_WID (18)
#define PCIE_IDE_UAES_GCMP_ID_BIST_STAT_RESERVED_18_14_BF_MSK (0xFFFFC000)
#define PCIE_IDE_UAES_GCMP_ID_BIST_STAT_RESERVED_18_14_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_BIST_BIST_TIMESTAMP_TX_0_31 register description at address offset 0xe08
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_bist/BIST_TIMESTAMP_TX_0_31
  * BIST - Least significant 32 bits of TX Timestamp Register.
  */

typedef union {
  struct {
    uint32_t BIST_TIMESTAMP_TX_0_31 : 32;
    ///< Indicates the least significant 32 bits of the number of clock cycles
    ///< since the last BIST failure or since startup, if this is the first
    ///< BIST execution, for the TX core. Only valid when BIST_DONE is asserted.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_bist_timestamp_tx_0_31_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_BIST_TIMESTAMP_TX_0_31_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_BIST_TIMESTAMP_TX_0_31_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_BIST_TIMESTAMP_TX_0_31_WR_MASK (0x00000000U)


///< Indicates the least significant 32 bits of the number of clock cycles
///< since the last BIST failure or since startup, if this is the first
///< BIST execution, for the TX core. Only valid when BIST_DONE is asserted.
#define PCIE_IDE_UAES_GCMP_ID_BIST_TIMESTAMP_TX_0_31_BIST_TIMESTAMP_TX_0_31_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_BIST_TIMESTAMP_TX_0_31_BIST_TIMESTAMP_TX_0_31_BF_WID (32)
#define PCIE_IDE_UAES_GCMP_ID_BIST_TIMESTAMP_TX_0_31_BIST_TIMESTAMP_TX_0_31_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_UAES_GCMP_ID_BIST_TIMESTAMP_TX_0_31_BIST_TIMESTAMP_TX_0_31_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_BIST_BIST_TIMESTAMP_TX_32_63 register description at address offset 0xe0c
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_bist/BIST_TIMESTAMP_TX_32_63
  * BIST - Most significant 32 bits of TX Timestamp Register.
  */

typedef union {
  struct {
    uint32_t BIST_TIMESTAMP_TX_32_63 : 32;
    ///< Indicates the most significant 32 bits of the number of clock cycles
    ///< since the last BIST failure or since startup, if this is the first
    ///< BIST execution, for the TX core. Only valid when BIST_DONE is asserted.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_bist_timestamp_tx_32_63_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_BIST_TIMESTAMP_TX_32_63_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_BIST_TIMESTAMP_TX_32_63_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_BIST_TIMESTAMP_TX_32_63_WR_MASK (0x00000000U)


///< Indicates the most significant 32 bits of the number of clock cycles
///< since the last BIST failure or since startup, if this is the first
///< BIST execution, for the TX core. Only valid when BIST_DONE is asserted.
#define PCIE_IDE_UAES_GCMP_ID_BIST_TIMESTAMP_TX_32_63_BIST_TIMESTAMP_TX_32_63_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_BIST_TIMESTAMP_TX_32_63_BIST_TIMESTAMP_TX_32_63_BF_WID (32)
#define PCIE_IDE_UAES_GCMP_ID_BIST_TIMESTAMP_TX_32_63_BIST_TIMESTAMP_TX_32_63_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_UAES_GCMP_ID_BIST_TIMESTAMP_TX_32_63_BIST_TIMESTAMP_TX_32_63_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_BIST_BIST_TIMESTAMP_RX1_0_31 register description at address offset 0xe10
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_bist/BIST_TIMESTAMP_RX1_0_31
  * BIST - Least significant 32 bits of RX Timestamp Register.
  */

typedef union {
  struct {
    uint32_t BIST_TIMESTAMP_RX1_0_31 : 32;
    ///< Indicates the least significant 32 bits of the number of clock cycles
    ///< since the last BIST failure or since startup, if this is the first
    ///< BIST execution, for the first RX core. Only valid when BIST_DONE is
    ///< asserted.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_bist_timestamp_rx1_0_31_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_BIST_TIMESTAMP_RX1_0_31_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_BIST_TIMESTAMP_RX1_0_31_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_BIST_TIMESTAMP_RX1_0_31_WR_MASK (0x00000000U)


///< Indicates the least significant 32 bits of the number of clock cycles
///< since the last BIST failure or since startup, if this is the first
///< BIST execution, for the first RX core. Only valid when BIST_DONE is
///< asserted.
#define PCIE_IDE_UAES_GCMP_ID_BIST_TIMESTAMP_RX1_0_31_BIST_TIMESTAMP_RX1_0_31_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_BIST_TIMESTAMP_RX1_0_31_BIST_TIMESTAMP_RX1_0_31_BF_WID (32)
#define PCIE_IDE_UAES_GCMP_ID_BIST_TIMESTAMP_RX1_0_31_BIST_TIMESTAMP_RX1_0_31_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_UAES_GCMP_ID_BIST_TIMESTAMP_RX1_0_31_BIST_TIMESTAMP_RX1_0_31_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_BIST_BIST_TIMESTAMP_RX1_32_63 register description at address offset 0xe14
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_bist/BIST_TIMESTAMP_RX1_32_63
  * BIST - Most significant 32 bits of RX Timestamp Register.
  */

typedef union {
  struct {
    uint32_t BIST_TIMESTAMP_RX1_32_63 : 32;
    ///< Indicates the most significant 32 bits of the number of clock cycles
    ///< since the last BIST failure or since startup, if this is the first
    ///< BIST execution, for the first RX core. Only valid when BIST_DONE is
    ///< asserted.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_bist_timestamp_rx1_32_63_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_BIST_TIMESTAMP_RX1_32_63_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_BIST_TIMESTAMP_RX1_32_63_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_BIST_TIMESTAMP_RX1_32_63_WR_MASK (0x00000000U)


///< Indicates the most significant 32 bits of the number of clock cycles
///< since the last BIST failure or since startup, if this is the first
///< BIST execution, for the first RX core. Only valid when BIST_DONE is
///< asserted.
#define PCIE_IDE_UAES_GCMP_ID_BIST_TIMESTAMP_RX1_32_63_BIST_TIMESTAMP_RX1_32_63_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_BIST_TIMESTAMP_RX1_32_63_BIST_TIMESTAMP_RX1_32_63_BF_WID (32)
#define PCIE_IDE_UAES_GCMP_ID_BIST_TIMESTAMP_RX1_32_63_BIST_TIMESTAMP_RX1_32_63_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_UAES_GCMP_ID_BIST_TIMESTAMP_RX1_32_63_BIST_TIMESTAMP_RX1_32_63_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_BIST_BIST_ERROR_LOG register description at address offset 0xe20
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_bist/BIST_ERROR_LOG
  * BIST Error Log.
  */

typedef union {
  struct {
    uint32_t BIST_LOG_FAIL : 1;
    ///< Indicates if there was a BIST failure. If asserted, then a BIST failure
    ///< already happened.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t BIST_LOG_TEST_TYPE_TX : 3;
    ///< Indicates which test failed for the TX core for the last failed BIST
    ///< execution. 000/001->Bypass  010/011->ECB  100/101->GCM  Only valid
    ///< when BIST_LOG_FAIL is asserted.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
    uint32_t BIST_LOG_TEST_TYPE_RX1 : 3;
    ///< Indicates which test failed for the RX core for the last failed BIST
    ///< execution. 000/001->Bypass  010/011->ECB  100/101->GCM  Only valid
    ///< when BIST_LOG_FAIL is asserted.
    ///< AccessType="RO" BitOffset="4" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="7" ResetValue="0x0"
    uint32_t BIST_LOG_CORE : 3;
    ///< Indicates which cores failed for the last failed BIST execution. The
    ///< assertion of the bit position corresponding to each core represents
    ///< failure. The least significant bit represents failure for the TX core,
    ///< the second least significant bit represents failure for the first
    ///< RX (RX) core and, if it exists, the most significant bit represents
    ///< failure for the second RX (RX2) core (if not implemented, remains
    ///< 0).  Only valid when BIST_LOG_FAIL is asserted.
    ///< AccessType="RO" BitOffset="10" ResetValue="0x0"
    uint32_t  : 19;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="13" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_bist_err_log_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_BIST_ERR_LOG_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_BIST_ERR_LOG_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_BIST_ERR_LOG_WR_MASK (0x00000000U)


///< Indicates if there was a BIST failure. If asserted, then a BIST failure
///< already happened.
#define PCIE_IDE_UAES_GCMP_ID_BIST_ERR_LOG_BIST_LOG_FAIL_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_BIST_ERR_LOG_BIST_LOG_FAIL_BF_WID ( 1)
#define PCIE_IDE_UAES_GCMP_ID_BIST_ERR_LOG_BIST_LOG_FAIL_BF_MSK (0x00000001)
#define PCIE_IDE_UAES_GCMP_ID_BIST_ERR_LOG_BIST_LOG_FAIL_BF_DEF (0x00000000)

///< Indicates which test failed for the TX core for the last failed BIST
///< execution. 000/001->Bypass  010/011->ECB  100/101->GCM  Only valid
///< when BIST_LOG_FAIL is asserted.
#define PCIE_IDE_UAES_GCMP_ID_BIST_ERR_LOG_BIST_LOG_TEST_TYPE_TX_BF_OFF ( 1)
#define PCIE_IDE_UAES_GCMP_ID_BIST_ERR_LOG_BIST_LOG_TEST_TYPE_TX_BF_WID ( 3)
#define PCIE_IDE_UAES_GCMP_ID_BIST_ERR_LOG_BIST_LOG_TEST_TYPE_TX_BF_MSK (0x0000000E)
#define PCIE_IDE_UAES_GCMP_ID_BIST_ERR_LOG_BIST_LOG_TEST_TYPE_TX_BF_DEF (0x00000000)

///< Indicates which test failed for the RX core for the last failed BIST
///< execution. 000/001->Bypass  010/011->ECB  100/101->GCM  Only valid
///< when BIST_LOG_FAIL is asserted.
#define PCIE_IDE_UAES_GCMP_ID_BIST_ERR_LOG_BIST_LOG_TEST_TYPE_RX1_BF_OFF ( 4)
#define PCIE_IDE_UAES_GCMP_ID_BIST_ERR_LOG_BIST_LOG_TEST_TYPE_RX1_BF_WID ( 3)
#define PCIE_IDE_UAES_GCMP_ID_BIST_ERR_LOG_BIST_LOG_TEST_TYPE_RX1_BF_MSK (0x00000070)
#define PCIE_IDE_UAES_GCMP_ID_BIST_ERR_LOG_BIST_LOG_TEST_TYPE_RX1_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_BIST_ERR_LOG_RESERVED_9_7_BF_OFF ( 7)
#define PCIE_IDE_UAES_GCMP_ID_BIST_ERR_LOG_RESERVED_9_7_BF_WID ( 3)
#define PCIE_IDE_UAES_GCMP_ID_BIST_ERR_LOG_RESERVED_9_7_BF_MSK (0x00000380)
#define PCIE_IDE_UAES_GCMP_ID_BIST_ERR_LOG_RESERVED_9_7_BF_DEF (0x00000000)

///< Indicates which cores failed for the last failed BIST execution. The
///< assertion of the bit position corresponding to each core represents
///< failure. The least significant bit represents failure for the TX core,
///< the second least significant bit represents failure for the first
///< RX (RX) core and, if it exists, the most significant bit represents
///< failure for the second RX (RX2) core (if not implemented, remains
///< 0).  Only valid when BIST_LOG_FAIL is asserted.
#define PCIE_IDE_UAES_GCMP_ID_BIST_ERR_LOG_BIST_LOG_CORE_BF_OFF (10)
#define PCIE_IDE_UAES_GCMP_ID_BIST_ERR_LOG_BIST_LOG_CORE_BF_WID ( 3)
#define PCIE_IDE_UAES_GCMP_ID_BIST_ERR_LOG_BIST_LOG_CORE_BF_MSK (0x00001C00)
#define PCIE_IDE_UAES_GCMP_ID_BIST_ERR_LOG_BIST_LOG_CORE_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_UAES_GCMP_ID_BIST_ERR_LOG_RESERVED_19_13_BF_OFF (13)
#define PCIE_IDE_UAES_GCMP_ID_BIST_ERR_LOG_RESERVED_19_13_BF_WID (19)
#define PCIE_IDE_UAES_GCMP_ID_BIST_ERR_LOG_RESERVED_19_13_BF_MSK (0xFFFFE000)
#define PCIE_IDE_UAES_GCMP_ID_BIST_ERR_LOG_RESERVED_19_13_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_BIST_BIST_LOG_TIMESTAMP_TX_0_31 register description at address offset 0xe24
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_bist/BIST_LOG_TIMESTAMP_TX_0_31
  * BIST Error Log - Least significant 32 bits of TX Timestamp Register.
  */

typedef union {
  struct {
    uint32_t BIST_LOG_TIMESTAMP_TX_0_31 : 32;
    ///< Indicates the least significant 32 bits of the number of clock cycles
    ///< between the last two BIST failures for the TX core. In case only one
    ///< failure happened, it indicates the number of cycles up until that
    ///< failure happened. Only valid when BIST_DONE is asserted.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_bist_log_timestamp_tx_0_31_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_BIST_LOG_TIMESTAMP_TX_0_31_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_BIST_LOG_TIMESTAMP_TX_0_31_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_BIST_LOG_TIMESTAMP_TX_0_31_WR_MASK (0x00000000U)


///< Indicates the least significant 32 bits of the number of clock cycles
///< between the last two BIST failures for the TX core. In case only one
///< failure happened, it indicates the number of cycles up until that
///< failure happened. Only valid when BIST_DONE is asserted.
#define PCIE_IDE_UAES_GCMP_ID_BIST_LOG_TIMESTAMP_TX_0_31_BIST_LOG_TIMESTAMP_TX_0_31_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_BIST_LOG_TIMESTAMP_TX_0_31_BIST_LOG_TIMESTAMP_TX_0_31_BF_WID (32)
#define PCIE_IDE_UAES_GCMP_ID_BIST_LOG_TIMESTAMP_TX_0_31_BIST_LOG_TIMESTAMP_TX_0_31_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_UAES_GCMP_ID_BIST_LOG_TIMESTAMP_TX_0_31_BIST_LOG_TIMESTAMP_TX_0_31_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_BIST_BIST_LOG_TIMESTAMP_TX_32_63 register description at address offset 0xe28
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_bist/BIST_LOG_TIMESTAMP_TX_32_63
  * BIST Error Log - Most significant 32 bits of TX Timestamp Register.
  */

typedef union {
  struct {
    uint32_t BIST_LOG_TIMESTAMP_TX_32_63 : 32;
    ///< Indicates the most significant 32 bits of the number of clock cycles
    ///< between the last two BIST failures for the TX core. In case only one
    ///< failure happened, it indicates the number of cycles up until that
    ///< failure happened. Only valid when BIST_DONE is asserted.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_bist_log_timestamp_tx_32_63_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_BIST_LOG_TIMESTAMP_TX_32_63_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_BIST_LOG_TIMESTAMP_TX_32_63_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_BIST_LOG_TIMESTAMP_TX_32_63_WR_MASK (0x00000000U)


///< Indicates the most significant 32 bits of the number of clock cycles
///< between the last two BIST failures for the TX core. In case only one
///< failure happened, it indicates the number of cycles up until that
///< failure happened. Only valid when BIST_DONE is asserted.
#define PCIE_IDE_UAES_GCMP_ID_BIST_LOG_TIMESTAMP_TX_32_63_BIST_LOG_TIMESTAMP_TX_32_63_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_BIST_LOG_TIMESTAMP_TX_32_63_BIST_LOG_TIMESTAMP_TX_32_63_BF_WID (32)
#define PCIE_IDE_UAES_GCMP_ID_BIST_LOG_TIMESTAMP_TX_32_63_BIST_LOG_TIMESTAMP_TX_32_63_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_UAES_GCMP_ID_BIST_LOG_TIMESTAMP_TX_32_63_BIST_LOG_TIMESTAMP_TX_32_63_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_BIST_BIST_LOG_TIMESTAMP_RX1_0_31 register description at address offset 0xe2c
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_bist/BIST_LOG_TIMESTAMP_RX1_0_31
  * BIST Error Log - Least significant 32 bits of RX Timestamp Register.
  */

typedef union {
  struct {
    uint32_t BIST_LOG_TIMESTAMP_RX1_0_31 : 32;
    ///< Indicates the least significant 32 bits of the number of clock cycles
    ///< between the last two BIST failures for the RX core. In case only one
    ///< failure happened, it indicates the number of cycles up until that
    ///< failure happened. Only valid when BIST_DONE is asserted.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_bist_log_timestamp_rx1_0_31_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_BIST_LOG_TIMESTAMP_RX1_0_31_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_BIST_LOG_TIMESTAMP_RX1_0_31_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_BIST_LOG_TIMESTAMP_RX1_0_31_WR_MASK (0x00000000U)


///< Indicates the least significant 32 bits of the number of clock cycles
///< between the last two BIST failures for the RX core. In case only one
///< failure happened, it indicates the number of cycles up until that
///< failure happened. Only valid when BIST_DONE is asserted.
#define PCIE_IDE_UAES_GCMP_ID_BIST_LOG_TIMESTAMP_RX1_0_31_BIST_LOG_TIMESTAMP_RX1_0_31_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_BIST_LOG_TIMESTAMP_RX1_0_31_BIST_LOG_TIMESTAMP_RX1_0_31_BF_WID (32)
#define PCIE_IDE_UAES_GCMP_ID_BIST_LOG_TIMESTAMP_RX1_0_31_BIST_LOG_TIMESTAMP_RX1_0_31_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_UAES_GCMP_ID_BIST_LOG_TIMESTAMP_RX1_0_31_BIST_LOG_TIMESTAMP_RX1_0_31_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_UAES_GCMP_DWC_PCIE_IDE_UAES_GCMP_APB_ID_BIST_BIST_LOG_TIMESTAMP_RX1_32_63 register description at address offset 0xe30
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide_uaes_gcmp/DWC_pcie_ide_uaes_gcmp_apb/id_bist/BIST_LOG_TIMESTAMP_RX1_32_63
  * BIST Error Log - Most significant 32 bits of RX1 Timestamp Register.
  */

typedef union {
  struct {
    uint32_t BIST_LOG_TIMESTAMP_RX1_32_63 : 32;
    ///< Indicates the most significant 32 bits of the number of clock cycles
    ///< between the last two BIST failures for the RX core. In case only one
    ///< failure happened, it indicates the number of cycles up until that
    ///< failure happened. Only valid when BIST_DONE is asserted.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_uaes_gcmp_id_bist_log_timestamp_rx1_32_63_reg_t;

#define PCIE_IDE_UAES_GCMP_ID_BIST_LOG_TIMESTAMP_RX1_32_63_DEFAULT (0x00000000U)
#define PCIE_IDE_UAES_GCMP_ID_BIST_LOG_TIMESTAMP_RX1_32_63_RD_MASK (0xffffffffU)
#define PCIE_IDE_UAES_GCMP_ID_BIST_LOG_TIMESTAMP_RX1_32_63_WR_MASK (0x00000000U)


///< Indicates the most significant 32 bits of the number of clock cycles
///< between the last two BIST failures for the RX core. In case only one
///< failure happened, it indicates the number of cycles up until that
///< failure happened. Only valid when BIST_DONE is asserted.
#define PCIE_IDE_UAES_GCMP_ID_BIST_LOG_TIMESTAMP_RX1_32_63_BIST_LOG_TIMESTAMP_RX1_32_63_BF_OFF ( 0)
#define PCIE_IDE_UAES_GCMP_ID_BIST_LOG_TIMESTAMP_RX1_32_63_BIST_LOG_TIMESTAMP_RX1_32_63_BF_WID (32)
#define PCIE_IDE_UAES_GCMP_ID_BIST_LOG_TIMESTAMP_RX1_32_63_BIST_LOG_TIMESTAMP_RX1_32_63_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_UAES_GCMP_ID_BIST_LOG_TIMESTAMP_RX1_32_63_BIST_LOG_TIMESTAMP_RX1_32_63_BF_DEF (0x00000000)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CORE_VER_NUM_REG ((pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_core_ver_num_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CORE_VER_NUM_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CORE_VER_TYPE_REG ((pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_core_ver_type_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CORE_VER_TYPE_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_EN_REG ((pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_irq_en_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_EN_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_STAT_REG ((pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_irq_stat_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_IRQ_STAT_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CTRL_REG ((pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_ctrl_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_CTRL_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_STAT_REG ((pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_stat_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_STAT_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_0_REG ((pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_key_0_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_0_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_1_REG ((pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_key_1_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_1_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_2_REG ((pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_key_2_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_2_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_3_REG ((pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_key_3_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_3_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_4_REG ((pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_key_4_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_4_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_5_REG ((pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_key_5_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_5_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_6_REG ((pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_key_6_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_6_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_7_REG ((pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_key_7_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_KEY_7_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_INITIAL_IV_LSW_REG ((pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_initial_iv_lsw_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_INITIAL_IV_LSW_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_INITIAL_IV_MSW_REG ((pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_initial_iv_msw_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_INITIAL_IV_MSW_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_LINK_DIS_STRM_KEYS_REG ((pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_link_dis_strm_keys_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_LINK_DIS_STRM_KEYS_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_SELIVE_DIS_STRM_KEYS_REG ((pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_selive_dis_strm_keys_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_TX_HOST_AES_TX_SELIVE_DIS_STRM_KEYS_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_SOP_REG ((pcie_ide_uaes_gcmp_id_aes_tx_fips_cmd_aes_tx_cmd_sop_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_SOP_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_EOP_REG ((pcie_ide_uaes_gcmp_id_aes_tx_fips_cmd_aes_tx_cmd_eop_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_EOP_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_AAD_REG ((pcie_ide_uaes_gcmp_id_aes_tx_fips_cmd_aes_tx_cmd_aad_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_AAD_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_MSG_REG ((pcie_ide_uaes_gcmp_id_aes_tx_fips_cmd_aes_tx_cmd_msg_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_MSG_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CTR_IV_IDX_REG ((pcie_ide_uaes_gcmp_id_aes_tx_fips_cmd_aes_tx_ctr_iv_idx_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CTR_IV_IDX_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CTR_IV_CHUNK_REG ((pcie_ide_uaes_gcmp_id_aes_tx_fips_cmd_aes_tx_ctr_iv_chunk_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CTR_IV_CHUNK_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_AAD_SIZE_REG ((pcie_ide_uaes_gcmp_id_aes_tx_fips_cmd_aes_tx_cmd_aad_size_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_AAD_SIZE_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_MSG_SIZE_REG ((pcie_ide_uaes_gcmp_id_aes_tx_fips_cmd_aes_tx_cmd_msg_size_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_MSG_SIZE_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_CTX_REG ((pcie_ide_uaes_gcmp_id_aes_tx_fips_cmd_aes_tx_cmd_ctx_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_CTX_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_VALID_REG ((pcie_ide_uaes_gcmp_id_aes_tx_fips_cmd_aes_tx_cmd_valid_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_VALID_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_READY_REG ((pcie_ide_uaes_gcmp_id_aes_tx_fips_cmd_aes_tx_cmd_ready_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_CMD_READY_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_TEST_MODE_CFG_REG ((pcie_ide_uaes_gcmp_id_aes_tx_fips_cmd_aes_tx_test_mode_cfg_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_CMD_AES_TX_TEST_MODE_CFG_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_IN_DATA_IDX_REG ((pcie_ide_uaes_gcmp_id_aes_tx_fips_input_aes_tx_in_data_idx_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_IN_DATA_IDX_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_IN_DATA_REG ((pcie_ide_uaes_gcmp_id_aes_tx_fips_input_aes_tx_in_data_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_IN_DATA_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_DATA_VALID_REG ((pcie_ide_uaes_gcmp_id_aes_tx_fips_input_aes_tx_data_valid_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_DATA_VALID_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_DATA_READY_REG ((pcie_ide_uaes_gcmp_id_aes_tx_fips_input_aes_tx_data_ready_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_INPUT_AES_TX_DATA_READY_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_READY_REG ((pcie_ide_uaes_gcmp_id_aes_tx_fips_output_aes_tx_out_ready_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_READY_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_VALID_REG ((pcie_ide_uaes_gcmp_id_aes_tx_fips_output_aes_tx_out_valid_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_VALID_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_SOP_REG ((pcie_ide_uaes_gcmp_id_aes_tx_fips_output_aes_tx_out_sop_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_SOP_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_EOP_REG ((pcie_ide_uaes_gcmp_id_aes_tx_fips_output_aes_tx_out_eop_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_EOP_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_AAD_REG ((pcie_ide_uaes_gcmp_id_aes_tx_fips_output_aes_tx_out_aad_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_AAD_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MSG_REG ((pcie_ide_uaes_gcmp_id_aes_tx_fips_output_aes_tx_out_msg_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MSG_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_AAD_SIZE_REG ((pcie_ide_uaes_gcmp_id_aes_tx_fips_output_aes_tx_out_aad_size_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_AAD_SIZE_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MSG_SIZE_REG ((pcie_ide_uaes_gcmp_id_aes_tx_fips_output_aes_tx_out_msg_size_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MSG_SIZE_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_DATA_IDX_REG ((pcie_ide_uaes_gcmp_id_aes_tx_fips_output_aes_tx_out_data_idx_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_DATA_IDX_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_DATA_CHUNK_REG ((pcie_ide_uaes_gcmp_id_aes_tx_fips_output_aes_tx_out_data_chunk_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_DATA_CHUNK_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MAC_IDX_REG ((pcie_ide_uaes_gcmp_id_aes_tx_fips_output_aes_tx_out_mac_idx_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MAC_IDX_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MAC_CHUNK_REG ((pcie_ide_uaes_gcmp_id_aes_tx_fips_output_aes_tx_out_mac_chunk_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MAC_CHUNK_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_SEL_AES_TX_SEL_REG ((pcie_ide_uaes_gcmp_id_aes_tx_fips_sel_aes_tx_sel_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_TX_FIPS_SEL_AES_TX_SEL_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CORE_VER_NUM_REG ((pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_core_ver_num_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CORE_VER_NUM_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CORE_VER_TYPE_REG ((pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_core_ver_type_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CORE_VER_TYPE_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_EN_REG ((pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_irq_en_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_EN_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_STAT_REG ((pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_irq_stat_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_IRQ_STAT_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CTRL_REG ((pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_ctrl_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_CTRL_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_STAT_REG ((pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_stat_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_STAT_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_0_REG ((pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_key_0_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_0_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_1_REG ((pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_key_1_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_1_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_2_REG ((pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_key_2_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_2_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_3_REG ((pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_key_3_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_3_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_4_REG ((pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_key_4_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_4_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_5_REG ((pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_key_5_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_5_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_6_REG ((pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_key_6_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_6_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_7_REG ((pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_key_7_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_KEY_7_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_INITIAL_IV_LSW_REG ((pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_initial_iv_lsw_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_INITIAL_IV_LSW_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_INITIAL_IV_MSW_REG ((pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_initial_iv_msw_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_INITIAL_IV_MSW_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_LINK_DIS_STRM_KEYS_REG ((pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_link_dis_strm_keys_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_LINK_DIS_STRM_KEYS_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_SELIVE_DIS_STRM_KEYS_REG ((pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_selive_dis_strm_keys_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_RX_HOST_AES_RX_SELIVE_DIS_STRM_KEYS_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_SOP_REG ((pcie_ide_uaes_gcmp_id_aes_rx_fips_cmd_aes_rx_cmd_sop_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_SOP_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_EOP_REG ((pcie_ide_uaes_gcmp_id_aes_rx_fips_cmd_aes_rx_cmd_eop_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_EOP_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_AAD_REG ((pcie_ide_uaes_gcmp_id_aes_rx_fips_cmd_aes_rx_cmd_aad_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_AAD_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_MSG_REG ((pcie_ide_uaes_gcmp_id_aes_rx_fips_cmd_aes_rx_cmd_msg_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_MSG_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CTR_IV_IDX_REG ((pcie_ide_uaes_gcmp_id_aes_rx_fips_cmd_aes_rx_ctr_iv_idx_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CTR_IV_IDX_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CTR_IV_CHUNK_REG ((pcie_ide_uaes_gcmp_id_aes_rx_fips_cmd_aes_rx_ctr_iv_chunk_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CTR_IV_CHUNK_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_AAD_SIZE_REG ((pcie_ide_uaes_gcmp_id_aes_rx_fips_cmd_aes_rx_cmd_aad_size_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_AAD_SIZE_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_MSG_SIZE_REG ((pcie_ide_uaes_gcmp_id_aes_rx_fips_cmd_aes_rx_cmd_msg_size_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_MSG_SIZE_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_CTX_REG ((pcie_ide_uaes_gcmp_id_aes_rx_fips_cmd_aes_rx_cmd_ctx_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_CTX_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_VALID_REG ((pcie_ide_uaes_gcmp_id_aes_rx_fips_cmd_aes_rx_cmd_valid_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_VALID_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_READY_REG ((pcie_ide_uaes_gcmp_id_aes_rx_fips_cmd_aes_rx_cmd_ready_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_CMD_READY_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_TEST_MODE_CFG_REG ((pcie_ide_uaes_gcmp_id_aes_rx_fips_cmd_aes_rx_test_mode_cfg_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_CMD_AES_RX_TEST_MODE_CFG_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_IN_DATA_IDX_REG ((pcie_ide_uaes_gcmp_id_aes_rx_fips_input_aes_rx_in_data_idx_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_IN_DATA_IDX_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_IN_DATA_REG ((pcie_ide_uaes_gcmp_id_aes_rx_fips_input_aes_rx_in_data_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_IN_DATA_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_DATA_VALID_REG ((pcie_ide_uaes_gcmp_id_aes_rx_fips_input_aes_rx_data_valid_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_DATA_VALID_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_DATA_READY_REG ((pcie_ide_uaes_gcmp_id_aes_rx_fips_input_aes_rx_data_ready_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_INPUT_AES_RX_DATA_READY_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_READY_REG ((pcie_ide_uaes_gcmp_id_aes_rx_fips_output_aes_rx_out_ready_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_READY_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_VALID_REG ((pcie_ide_uaes_gcmp_id_aes_rx_fips_output_aes_rx_out_valid_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_VALID_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_SOP_REG ((pcie_ide_uaes_gcmp_id_aes_rx_fips_output_aes_rx_out_sop_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_SOP_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_EOP_REG ((pcie_ide_uaes_gcmp_id_aes_rx_fips_output_aes_rx_out_eop_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_EOP_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_AAD_REG ((pcie_ide_uaes_gcmp_id_aes_rx_fips_output_aes_rx_out_aad_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_AAD_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MSG_REG ((pcie_ide_uaes_gcmp_id_aes_rx_fips_output_aes_rx_out_msg_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MSG_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_AAD_SIZE_REG ((pcie_ide_uaes_gcmp_id_aes_rx_fips_output_aes_rx_out_aad_size_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_AAD_SIZE_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MSG_SIZE_REG ((pcie_ide_uaes_gcmp_id_aes_rx_fips_output_aes_rx_out_msg_size_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MSG_SIZE_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_DATA_IDX_REG ((pcie_ide_uaes_gcmp_id_aes_rx_fips_output_aes_rx_out_data_idx_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_DATA_IDX_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_DATA_CHUNK_REG ((pcie_ide_uaes_gcmp_id_aes_rx_fips_output_aes_rx_out_data_chunk_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_DATA_CHUNK_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MAC_IDX_REG ((pcie_ide_uaes_gcmp_id_aes_rx_fips_output_aes_rx_out_mac_idx_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MAC_IDX_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MAC_CHUNK_REG ((pcie_ide_uaes_gcmp_id_aes_rx_fips_output_aes_rx_out_mac_chunk_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MAC_CHUNK_ADR)
#define PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_SEL_AES_RX_SEL_REG ((pcie_ide_uaes_gcmp_id_aes_rx_fips_sel_aes_rx_sel_reg_t*) PCIE_IDE_UAES_GCMP_ID_AES_RX_FIPS_SEL_AES_RX_SEL_ADR)
#define PCIE_IDE_UAES_GCMP_ID_BIST_CTRL_REG ((pcie_ide_uaes_gcmp_id_bist_ctrl_reg_t*) PCIE_IDE_UAES_GCMP_ID_BIST_CTRL_ADR)
#define PCIE_IDE_UAES_GCMP_ID_BIST_STAT_REG ((pcie_ide_uaes_gcmp_id_bist_stat_reg_t*) PCIE_IDE_UAES_GCMP_ID_BIST_STAT_ADR)
#define PCIE_IDE_UAES_GCMP_ID_BIST_TIMESTAMP_TX_0_31_REG ((pcie_ide_uaes_gcmp_id_bist_timestamp_tx_0_31_reg_t*) PCIE_IDE_UAES_GCMP_ID_BIST_TIMESTAMP_TX_0_31_ADR)
#define PCIE_IDE_UAES_GCMP_ID_BIST_TIMESTAMP_TX_32_63_REG ((pcie_ide_uaes_gcmp_id_bist_timestamp_tx_32_63_reg_t*) PCIE_IDE_UAES_GCMP_ID_BIST_TIMESTAMP_TX_32_63_ADR)
#define PCIE_IDE_UAES_GCMP_ID_BIST_TIMESTAMP_RX1_0_31_REG ((pcie_ide_uaes_gcmp_id_bist_timestamp_rx1_0_31_reg_t*) PCIE_IDE_UAES_GCMP_ID_BIST_TIMESTAMP_RX1_0_31_ADR)
#define PCIE_IDE_UAES_GCMP_ID_BIST_TIMESTAMP_RX1_32_63_REG ((pcie_ide_uaes_gcmp_id_bist_timestamp_rx1_32_63_reg_t*) PCIE_IDE_UAES_GCMP_ID_BIST_TIMESTAMP_RX1_32_63_ADR)
#define PCIE_IDE_UAES_GCMP_ID_BIST_ERR_LOG_REG ((pcie_ide_uaes_gcmp_id_bist_err_log_reg_t*) PCIE_IDE_UAES_GCMP_ID_BIST_ERR_LOG_ADR)
#define PCIE_IDE_UAES_GCMP_ID_BIST_LOG_TIMESTAMP_TX_0_31_REG ((pcie_ide_uaes_gcmp_id_bist_log_timestamp_tx_0_31_reg_t*) PCIE_IDE_UAES_GCMP_ID_BIST_LOG_TIMESTAMP_TX_0_31_ADR)
#define PCIE_IDE_UAES_GCMP_ID_BIST_LOG_TIMESTAMP_TX_32_63_REG ((pcie_ide_uaes_gcmp_id_bist_log_timestamp_tx_32_63_reg_t*) PCIE_IDE_UAES_GCMP_ID_BIST_LOG_TIMESTAMP_TX_32_63_ADR)
#define PCIE_IDE_UAES_GCMP_ID_BIST_LOG_TIMESTAMP_RX1_0_31_REG ((pcie_ide_uaes_gcmp_id_bist_log_timestamp_rx1_0_31_reg_t*) PCIE_IDE_UAES_GCMP_ID_BIST_LOG_TIMESTAMP_RX1_0_31_ADR)
#define PCIE_IDE_UAES_GCMP_ID_BIST_LOG_TIMESTAMP_RX1_32_63_REG ((pcie_ide_uaes_gcmp_id_bist_log_timestamp_rx1_32_63_reg_t*) PCIE_IDE_UAES_GCMP_ID_BIST_LOG_TIMESTAMP_RX1_32_63_ADR)

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_core_ver_num_reg_t ID_AES_TX_HOST_AES_TX_CORE_VER_NUM; /*< Address offset = 0x0 */
    pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_core_ver_type_reg_t ID_AES_TX_HOST_AES_TX_CORE_VER_TYPE; /*< Address offset = 0x4 */
    pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_irq_en_reg_t ID_AES_TX_HOST_AES_TX_IRQ_EN; /*< Address offset = 0x8 */
    pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_irq_stat_reg_t ID_AES_TX_HOST_AES_TX_IRQ_STAT; /*< Address offset = 0xc */
    const uint8_t        reservedArea0 [4];   /*< Address offset = 0x10 */
    pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_ctrl_reg_t ID_AES_TX_HOST_AES_TX_CTRL; /*< Address offset = 0x14 */
    pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_stat_reg_t ID_AES_TX_HOST_AES_TX_STAT; /*< Address offset = 0x18 */
    const uint8_t        reservedArea1 [4];   /*< Address offset = 0x1c */
    pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_key_0_reg_t ID_AES_TX_HOST_AES_TX_KEY_0; /*< Address offset = 0x20 */
    pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_key_1_reg_t ID_AES_TX_HOST_AES_TX_KEY_1; /*< Address offset = 0x24 */
    pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_key_2_reg_t ID_AES_TX_HOST_AES_TX_KEY_2; /*< Address offset = 0x28 */
    pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_key_3_reg_t ID_AES_TX_HOST_AES_TX_KEY_3; /*< Address offset = 0x2c */
    pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_key_4_reg_t ID_AES_TX_HOST_AES_TX_KEY_4; /*< Address offset = 0x30 */
    pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_key_5_reg_t ID_AES_TX_HOST_AES_TX_KEY_5; /*< Address offset = 0x34 */
    pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_key_6_reg_t ID_AES_TX_HOST_AES_TX_KEY_6; /*< Address offset = 0x38 */
    pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_key_7_reg_t ID_AES_TX_HOST_AES_TX_KEY_7; /*< Address offset = 0x3c */
    pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_initial_iv_lsw_reg_t ID_AES_TX_HOST_AES_TX_INITIAL_IV_LSW; /*< Address offset = 0x40 */
    pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_initial_iv_msw_reg_t ID_AES_TX_HOST_AES_TX_INITIAL_IV_MSW; /*< Address offset = 0x44 */
    const uint8_t        reservedArea2 [376]; /*< Address offset = 0x48 */
    pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_link_dis_strm_keys_reg_t ID_AES_TX_HOST_AES_TX_LINK_DIS_STRM_KEYS; /*< Address offset = 0x1c0 */
    pcie_ide_uaes_gcmp_id_aes_tx_host_aes_tx_selive_dis_strm_keys_reg_t ID_AES_TX_HOST_AES_TX_SELIVE_DIS_STRM_KEYS; /*< Address offset = 0x1c4 */
    const uint8_t        reservedArea3 [568]; /*< Address offset = 0x1c8 */
    pcie_ide_uaes_gcmp_id_aes_tx_fips_cmd_aes_tx_cmd_sop_reg_t ID_AES_TX_FIPS_CMD_AES_TX_CMD_SOP; /*< Address offset = 0x400 */
    pcie_ide_uaes_gcmp_id_aes_tx_fips_cmd_aes_tx_cmd_eop_reg_t ID_AES_TX_FIPS_CMD_AES_TX_CMD_EOP; /*< Address offset = 0x404 */
    pcie_ide_uaes_gcmp_id_aes_tx_fips_cmd_aes_tx_cmd_aad_reg_t ID_AES_TX_FIPS_CMD_AES_TX_CMD_AAD; /*< Address offset = 0x408 */
    pcie_ide_uaes_gcmp_id_aes_tx_fips_cmd_aes_tx_cmd_msg_reg_t ID_AES_TX_FIPS_CMD_AES_TX_CMD_MSG; /*< Address offset = 0x40c */
    pcie_ide_uaes_gcmp_id_aes_tx_fips_cmd_aes_tx_ctr_iv_idx_reg_t ID_AES_TX_FIPS_CMD_AES_TX_CTR_IV_IDX; /*< Address offset = 0x410 */
    pcie_ide_uaes_gcmp_id_aes_tx_fips_cmd_aes_tx_ctr_iv_chunk_reg_t ID_AES_TX_FIPS_CMD_AES_TX_CTR_IV_CHUNK; /*< Address offset = 0x414 */
    const uint8_t        reservedArea4 [12];  /*< Address offset = 0x418 */
    pcie_ide_uaes_gcmp_id_aes_tx_fips_cmd_aes_tx_cmd_aad_size_reg_t ID_AES_TX_FIPS_CMD_AES_TX_CMD_AAD_SIZE; /*< Address offset = 0x424 */
    pcie_ide_uaes_gcmp_id_aes_tx_fips_cmd_aes_tx_cmd_msg_size_reg_t ID_AES_TX_FIPS_CMD_AES_TX_CMD_MSG_SIZE; /*< Address offset = 0x428 */
    pcie_ide_uaes_gcmp_id_aes_tx_fips_cmd_aes_tx_cmd_ctx_reg_t ID_AES_TX_FIPS_CMD_AES_TX_CMD_CTX; /*< Address offset = 0x42c */
    pcie_ide_uaes_gcmp_id_aes_tx_fips_cmd_aes_tx_cmd_valid_reg_t ID_AES_TX_FIPS_CMD_AES_TX_CMD_VALID; /*< Address offset = 0x430 */
    pcie_ide_uaes_gcmp_id_aes_tx_fips_cmd_aes_tx_cmd_ready_reg_t ID_AES_TX_FIPS_CMD_AES_TX_CMD_READY; /*< Address offset = 0x434 */
    const uint8_t        reservedArea5 [20];  /*< Address offset = 0x438 */
    pcie_ide_uaes_gcmp_id_aes_tx_fips_cmd_aes_tx_test_mode_cfg_reg_t ID_AES_TX_FIPS_CMD_AES_TX_TEST_MODE_CFG; /*< Address offset = 0x44c */
    pcie_ide_uaes_gcmp_id_aes_tx_fips_input_aes_tx_in_data_idx_reg_t ID_AES_TX_FIPS_INPUT_AES_TX_IN_DATA_IDX; /*< Address offset = 0x450 */
    pcie_ide_uaes_gcmp_id_aes_tx_fips_input_aes_tx_in_data_reg_t ID_AES_TX_FIPS_INPUT_AES_TX_IN_DATA; /*< Address offset = 0x454 */
    pcie_ide_uaes_gcmp_id_aes_tx_fips_input_aes_tx_data_valid_reg_t ID_AES_TX_FIPS_INPUT_AES_TX_DATA_VALID; /*< Address offset = 0x458 */
    pcie_ide_uaes_gcmp_id_aes_tx_fips_input_aes_tx_data_ready_reg_t ID_AES_TX_FIPS_INPUT_AES_TX_DATA_READY; /*< Address offset = 0x45c */
    const uint8_t        reservedArea6 [160]; /*< Address offset = 0x460 */
    pcie_ide_uaes_gcmp_id_aes_tx_fips_output_aes_tx_out_ready_reg_t ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_READY; /*< Address offset = 0x500 */
    pcie_ide_uaes_gcmp_id_aes_tx_fips_output_aes_tx_out_valid_reg_t ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_VALID; /*< Address offset = 0x504 */
    pcie_ide_uaes_gcmp_id_aes_tx_fips_output_aes_tx_out_sop_reg_t ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_SOP; /*< Address offset = 0x508 */
    pcie_ide_uaes_gcmp_id_aes_tx_fips_output_aes_tx_out_eop_reg_t ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_EOP; /*< Address offset = 0x50c */
    const uint8_t        reservedArea7 [4];   /*< Address offset = 0x510 */
    pcie_ide_uaes_gcmp_id_aes_tx_fips_output_aes_tx_out_aad_reg_t ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_AAD; /*< Address offset = 0x514 */
    pcie_ide_uaes_gcmp_id_aes_tx_fips_output_aes_tx_out_msg_reg_t ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MSG; /*< Address offset = 0x518 */
    pcie_ide_uaes_gcmp_id_aes_tx_fips_output_aes_tx_out_aad_size_reg_t ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_AAD_SIZE; /*< Address offset = 0x51c */
    pcie_ide_uaes_gcmp_id_aes_tx_fips_output_aes_tx_out_msg_size_reg_t ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MSG_SIZE; /*< Address offset = 0x520 */
    pcie_ide_uaes_gcmp_id_aes_tx_fips_output_aes_tx_out_data_idx_reg_t ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_DATA_IDX; /*< Address offset = 0x524 */
    pcie_ide_uaes_gcmp_id_aes_tx_fips_output_aes_tx_out_data_chunk_reg_t ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_DATA_CHUNK; /*< Address offset = 0x528 */
    const uint8_t        reservedArea8 [4];   /*< Address offset = 0x52c */
    pcie_ide_uaes_gcmp_id_aes_tx_fips_output_aes_tx_out_mac_idx_reg_t ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MAC_IDX; /*< Address offset = 0x530 */
    pcie_ide_uaes_gcmp_id_aes_tx_fips_output_aes_tx_out_mac_chunk_reg_t ID_AES_TX_FIPS_OUTPUT_AES_TX_OUT_MAC_CHUNK; /*< Address offset = 0x534 */
    const uint8_t        reservedArea9 [196]; /*< Address offset = 0x538 */
    pcie_ide_uaes_gcmp_id_aes_tx_fips_sel_aes_tx_sel_reg_t ID_AES_TX_FIPS_SEL_AES_TX_SEL; /*< Address offset = 0x5fc */
    const uint8_t        reservedArea10 [512]; /*< Address offset = 0x600 */
    pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_core_ver_num_reg_t ID_AES_RX_HOST_AES_RX_CORE_VER_NUM; /*< Address offset = 0x800 */
    pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_core_ver_type_reg_t ID_AES_RX_HOST_AES_RX_CORE_VER_TYPE; /*< Address offset = 0x804 */
    pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_irq_en_reg_t ID_AES_RX_HOST_AES_RX_IRQ_EN; /*< Address offset = 0x808 */
    pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_irq_stat_reg_t ID_AES_RX_HOST_AES_RX_IRQ_STAT; /*< Address offset = 0x80c */
    const uint8_t        reservedArea11 [4];  /*< Address offset = 0x810 */
    pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_ctrl_reg_t ID_AES_RX_HOST_AES_RX_CTRL; /*< Address offset = 0x814 */
    pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_stat_reg_t ID_AES_RX_HOST_AES_RX_STAT; /*< Address offset = 0x818 */
    const uint8_t        reservedArea12 [4];  /*< Address offset = 0x81c */
    pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_key_0_reg_t ID_AES_RX_HOST_AES_RX_KEY_0; /*< Address offset = 0x820 */
    pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_key_1_reg_t ID_AES_RX_HOST_AES_RX_KEY_1; /*< Address offset = 0x824 */
    pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_key_2_reg_t ID_AES_RX_HOST_AES_RX_KEY_2; /*< Address offset = 0x828 */
    pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_key_3_reg_t ID_AES_RX_HOST_AES_RX_KEY_3; /*< Address offset = 0x82c */
    pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_key_4_reg_t ID_AES_RX_HOST_AES_RX_KEY_4; /*< Address offset = 0x830 */
    pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_key_5_reg_t ID_AES_RX_HOST_AES_RX_KEY_5; /*< Address offset = 0x834 */
    pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_key_6_reg_t ID_AES_RX_HOST_AES_RX_KEY_6; /*< Address offset = 0x838 */
    pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_key_7_reg_t ID_AES_RX_HOST_AES_RX_KEY_7; /*< Address offset = 0x83c */
    pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_initial_iv_lsw_reg_t ID_AES_RX_HOST_AES_RX_INITIAL_IV_LSW; /*< Address offset = 0x840 */
    pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_initial_iv_msw_reg_t ID_AES_RX_HOST_AES_RX_INITIAL_IV_MSW; /*< Address offset = 0x844 */
    const uint8_t        reservedArea13 [376]; /*< Address offset = 0x848 */
    pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_link_dis_strm_keys_reg_t ID_AES_RX_HOST_AES_RX_LINK_DIS_STRM_KEYS; /*< Address offset = 0x9c0 */
    pcie_ide_uaes_gcmp_id_aes_rx_host_aes_rx_selive_dis_strm_keys_reg_t ID_AES_RX_HOST_AES_RX_SELIVE_DIS_STRM_KEYS; /*< Address offset = 0x9c4 */
    const uint8_t        reservedArea14 [568]; /*< Address offset = 0x9c8 */
    pcie_ide_uaes_gcmp_id_aes_rx_fips_cmd_aes_rx_cmd_sop_reg_t ID_AES_RX_FIPS_CMD_AES_RX_CMD_SOP; /*< Address offset = 0xc00 */
    pcie_ide_uaes_gcmp_id_aes_rx_fips_cmd_aes_rx_cmd_eop_reg_t ID_AES_RX_FIPS_CMD_AES_RX_CMD_EOP; /*< Address offset = 0xc04 */
    pcie_ide_uaes_gcmp_id_aes_rx_fips_cmd_aes_rx_cmd_aad_reg_t ID_AES_RX_FIPS_CMD_AES_RX_CMD_AAD; /*< Address offset = 0xc08 */
    pcie_ide_uaes_gcmp_id_aes_rx_fips_cmd_aes_rx_cmd_msg_reg_t ID_AES_RX_FIPS_CMD_AES_RX_CMD_MSG; /*< Address offset = 0xc0c */
    pcie_ide_uaes_gcmp_id_aes_rx_fips_cmd_aes_rx_ctr_iv_idx_reg_t ID_AES_RX_FIPS_CMD_AES_RX_CTR_IV_IDX; /*< Address offset = 0xc10 */
    pcie_ide_uaes_gcmp_id_aes_rx_fips_cmd_aes_rx_ctr_iv_chunk_reg_t ID_AES_RX_FIPS_CMD_AES_RX_CTR_IV_CHUNK; /*< Address offset = 0xc14 */
    const uint8_t        reservedArea15 [12]; /*< Address offset = 0xc18 */
    pcie_ide_uaes_gcmp_id_aes_rx_fips_cmd_aes_rx_cmd_aad_size_reg_t ID_AES_RX_FIPS_CMD_AES_RX_CMD_AAD_SIZE; /*< Address offset = 0xc24 */
    pcie_ide_uaes_gcmp_id_aes_rx_fips_cmd_aes_rx_cmd_msg_size_reg_t ID_AES_RX_FIPS_CMD_AES_RX_CMD_MSG_SIZE; /*< Address offset = 0xc28 */
    pcie_ide_uaes_gcmp_id_aes_rx_fips_cmd_aes_rx_cmd_ctx_reg_t ID_AES_RX_FIPS_CMD_AES_RX_CMD_CTX; /*< Address offset = 0xc2c */
    pcie_ide_uaes_gcmp_id_aes_rx_fips_cmd_aes_rx_cmd_valid_reg_t ID_AES_RX_FIPS_CMD_AES_RX_CMD_VALID; /*< Address offset = 0xc30 */
    pcie_ide_uaes_gcmp_id_aes_rx_fips_cmd_aes_rx_cmd_ready_reg_t ID_AES_RX_FIPS_CMD_AES_RX_CMD_READY; /*< Address offset = 0xc34 */
    const uint8_t        reservedArea16 [20]; /*< Address offset = 0xc38 */
    pcie_ide_uaes_gcmp_id_aes_rx_fips_cmd_aes_rx_test_mode_cfg_reg_t ID_AES_RX_FIPS_CMD_AES_RX_TEST_MODE_CFG; /*< Address offset = 0xc4c */
    pcie_ide_uaes_gcmp_id_aes_rx_fips_input_aes_rx_in_data_idx_reg_t ID_AES_RX_FIPS_INPUT_AES_RX_IN_DATA_IDX; /*< Address offset = 0xc50 */
    pcie_ide_uaes_gcmp_id_aes_rx_fips_input_aes_rx_in_data_reg_t ID_AES_RX_FIPS_INPUT_AES_RX_IN_DATA; /*< Address offset = 0xc54 */
    pcie_ide_uaes_gcmp_id_aes_rx_fips_input_aes_rx_data_valid_reg_t ID_AES_RX_FIPS_INPUT_AES_RX_DATA_VALID; /*< Address offset = 0xc58 */
    pcie_ide_uaes_gcmp_id_aes_rx_fips_input_aes_rx_data_ready_reg_t ID_AES_RX_FIPS_INPUT_AES_RX_DATA_READY; /*< Address offset = 0xc5c */
    const uint8_t        reservedArea17 [160]; /*< Address offset = 0xc60 */
    pcie_ide_uaes_gcmp_id_aes_rx_fips_output_aes_rx_out_ready_reg_t ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_READY; /*< Address offset = 0xd00 */
    pcie_ide_uaes_gcmp_id_aes_rx_fips_output_aes_rx_out_valid_reg_t ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_VALID; /*< Address offset = 0xd04 */
    pcie_ide_uaes_gcmp_id_aes_rx_fips_output_aes_rx_out_sop_reg_t ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_SOP; /*< Address offset = 0xd08 */
    pcie_ide_uaes_gcmp_id_aes_rx_fips_output_aes_rx_out_eop_reg_t ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_EOP; /*< Address offset = 0xd0c */
    const uint8_t        reservedArea18 [4];  /*< Address offset = 0xd10 */
    pcie_ide_uaes_gcmp_id_aes_rx_fips_output_aes_rx_out_aad_reg_t ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_AAD; /*< Address offset = 0xd14 */
    pcie_ide_uaes_gcmp_id_aes_rx_fips_output_aes_rx_out_msg_reg_t ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MSG; /*< Address offset = 0xd18 */
    pcie_ide_uaes_gcmp_id_aes_rx_fips_output_aes_rx_out_aad_size_reg_t ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_AAD_SIZE; /*< Address offset = 0xd1c */
    pcie_ide_uaes_gcmp_id_aes_rx_fips_output_aes_rx_out_msg_size_reg_t ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MSG_SIZE; /*< Address offset = 0xd20 */
    pcie_ide_uaes_gcmp_id_aes_rx_fips_output_aes_rx_out_data_idx_reg_t ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_DATA_IDX; /*< Address offset = 0xd24 */
    pcie_ide_uaes_gcmp_id_aes_rx_fips_output_aes_rx_out_data_chunk_reg_t ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_DATA_CHUNK; /*< Address offset = 0xd28 */
    const uint8_t        reservedArea19 [4];  /*< Address offset = 0xd2c */
    pcie_ide_uaes_gcmp_id_aes_rx_fips_output_aes_rx_out_mac_idx_reg_t ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MAC_IDX; /*< Address offset = 0xd30 */
    pcie_ide_uaes_gcmp_id_aes_rx_fips_output_aes_rx_out_mac_chunk_reg_t ID_AES_RX_FIPS_OUTPUT_AES_RX_OUT_MAC_CHUNK; /*< Address offset = 0xd34 */
    const uint8_t        reservedArea20 [196]; /*< Address offset = 0xd38 */
    pcie_ide_uaes_gcmp_id_aes_rx_fips_sel_aes_rx_sel_reg_t ID_AES_RX_FIPS_SEL_AES_RX_SEL; /*< Address offset = 0xdfc */
    pcie_ide_uaes_gcmp_id_bist_ctrl_reg_t ID_BIST_CTRL; /*< Address offset = 0xe00 */
    pcie_ide_uaes_gcmp_id_bist_stat_reg_t ID_BIST_STAT; /*< Address offset = 0xe04 */
    pcie_ide_uaes_gcmp_id_bist_timestamp_tx_0_31_reg_t ID_BIST_TIMESTAMP_TX_0_31; /*< Address offset = 0xe08 */
    pcie_ide_uaes_gcmp_id_bist_timestamp_tx_32_63_reg_t ID_BIST_TIMESTAMP_TX_32_63; /*< Address offset = 0xe0c */
    pcie_ide_uaes_gcmp_id_bist_timestamp_rx1_0_31_reg_t ID_BIST_TIMESTAMP_RX1_0_31; /*< Address offset = 0xe10 */
    pcie_ide_uaes_gcmp_id_bist_timestamp_rx1_32_63_reg_t ID_BIST_TIMESTAMP_RX1_32_63; /*< Address offset = 0xe14 */
    const uint8_t        reservedArea21 [8];  /*< Address offset = 0xe18 */
    pcie_ide_uaes_gcmp_id_bist_err_log_reg_t ID_BIST_ERR_LOG; /*< Address offset = 0xe20 */
    pcie_ide_uaes_gcmp_id_bist_log_timestamp_tx_0_31_reg_t ID_BIST_LOG_TIMESTAMP_TX_0_31; /*< Address offset = 0xe24 */
    pcie_ide_uaes_gcmp_id_bist_log_timestamp_tx_32_63_reg_t ID_BIST_LOG_TIMESTAMP_TX_32_63; /*< Address offset = 0xe28 */
    pcie_ide_uaes_gcmp_id_bist_log_timestamp_rx1_0_31_reg_t ID_BIST_LOG_TIMESTAMP_RX1_0_31; /*< Address offset = 0xe2c */
    pcie_ide_uaes_gcmp_id_bist_log_timestamp_rx1_32_63_reg_t ID_BIST_LOG_TIMESTAMP_RX1_32_63; /*< Address offset = 0xe30 */
} dwc_pcie_ide_uaes_gcmp_t;     // size: 0x01a4

// AddressSpace struct pointer
//
#define DLNK_PCIE_DWC_IDE_UAES_GCMP_APB  ((dwc_pcie_ide_uaes_gcmp_t*) DLNK_PCIE_DWC_IDE_UAES_GCMP_APB_BASE)

// ******************************************* /Address Space

#endif      // _DWC_PCIE_IDE_UAES_GCMP_H_

