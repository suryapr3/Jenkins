#ifndef _RXG_H_
#define _RXG_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define FB_SYS0_RXG0_BASE     ( 0x05100000 )
#define FB_SYS0_RXG1_BASE     ( 0x05108000 )
#define FB_SYS1_RXG0_BASE     ( 0x05110000 )
#define FB_SYS1_RXG1_BASE     ( 0x05118000 )
#define TRX_SYS0_RXG0_BASE    ( 0x05260000 )
#define TRX_SYS0_RXG1_BASE    ( 0x05270000 )
#define TRX_SYS1_RXG0_BASE    ( 0x05280000 )
#define TRX_SYS1_RXG1_BASE    ( 0x05290000 )
#define TRX_SYS2_RXG0_BASE    ( 0x052a0000 )
#define TRX_SYS2_RXG1_BASE    ( 0x052b0000 )
#define TRX_SYS3_RXG0_BASE    ( 0x052c0000 )
#define TRX_SYS3_RXG1_BASE    ( 0x052d0000 )
#define TRX_SYS4_RXG0_BASE    ( 0x052e0000 )
#define TRX_SYS4_RXG1_BASE    ( 0x052f0000 )
#define TRX_SYS5_RXG0_BASE    ( 0x05300000 )
#define TRX_SYS5_RXG1_BASE    ( 0x05310000 )
#define TRX_SYS6_RXG0_BASE    ( 0x05320000 )
#define TRX_SYS6_RXG1_BASE    ( 0x05330000 )
#define TRX_SYS7_RXG0_BASE    ( 0x05340000 )
#define TRX_SYS7_RXG1_BASE    ( 0x05350000 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define RXG_GAIN_COEFF_SHDW_OFFSET ( 0x00000000U )
#define RXG_GAIN_COEFF_LIVE_OFFSET ( 0x00000004U )
#define RXG_SCRATCH_OFFSET       ( 0x00000008U )
#define RXG_BFN_UPDATE_OFFSET    ( 0x0000000cU )
#define RXG_SEL_OFFSET    ( 0x00000010U )
#define RXG_SWITCH_OFFSET    ( 0x00000014U )
#define RXG_CSR_CFG_OFFSET    ( 0x00000018U )
#define RXG_CSR_ERR_OFFSET     ( 0x0000001cU )
#define RXG_INT_STAT_OFFSET    ( 0x00000020U )
#define RXG_INT_HIGH_EN_OFFSET   ( 0x00000024U )
#define RXG_INT_LOW_EN_OFFSET    ( 0x00000028U )
#define RXG_INT_CLR_OFFSET     ( 0x0000002cU )
#define RXG_INT_FORCE_OFFSET     ( 0x00000030U )
#define RXG_APB_BRDG_STAT_OFFSET ( 0x00000034U )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define RXG_GAIN_COEFF_SHDW_ADR(_BASE)  (( ( _BASE ) + ( RXG_GAIN_COEFF_SHDW_OFFSET ) ))
#define RXG_GAIN_COEFF_LIVE_ADR(_BASE)  (( ( _BASE ) + ( RXG_GAIN_COEFF_LIVE_OFFSET ) ))
#define RXG_SCRATCH_ADR(_BASE)          (( ( _BASE ) + ( RXG_SCRATCH_OFFSET ) ))
#define RXG_BFN_UPDATE_ADR(_BASE)       (( ( _BASE ) + ( RXG_BFN_UPDATE_OFFSET ) ))
#define RXG_SEL_ADR(_BASE)       (( ( _BASE ) + ( RXG_SEL_OFFSET ) ))
#define RXG_SWITCH_ADR(_BASE)       (( ( _BASE ) + ( RXG_SWITCH_OFFSET ) ))
#define RXG_CSR_CFG_ADR(_BASE)       (( ( _BASE ) + ( RXG_CSR_CFG_OFFSET ) ))
#define RXG_CSR_ERR_ADR(_BASE)        (( ( _BASE ) + ( RXG_CSR_ERR_OFFSET ) ))
#define RXG_INT_STAT_ADR(_BASE)       (( ( _BASE ) + ( RXG_INT_STAT_OFFSET ) ))
#define RXG_INT_HIGH_EN_ADR(_BASE)      (( ( _BASE ) + ( RXG_INT_HIGH_EN_OFFSET ) ))
#define RXG_INT_LOW_EN_ADR(_BASE)       (( ( _BASE ) + ( RXG_INT_LOW_EN_OFFSET ) ))
#define RXG_INT_CLR_ADR(_BASE)        (( ( _BASE ) + ( RXG_INT_CLR_OFFSET ) ))
#define RXG_INT_FORCE_ADR(_BASE)        (( ( _BASE ) + ( RXG_INT_FORCE_OFFSET ) ))
#define RXG_APB_BRDG_STAT_ADR(_BASE) (( ( _BASE ) + ( RXG_APB_BRDG_STAT_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief RXG_MAP_REG_GAIN_COEFF_SHDW register description at address offset 0x0
  *
  * Register default value:        0x00000000
  * Register full path in IP: rxg_map/reg/GAIN_COEFF_SHDW
  * Gain Coefficients SHDW Register
  */

typedef union {
  struct {
    uint32_t GAIN : 16;
    ///< Gain parameter. 16b signed number.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t SHIFT : 4;
    ///< Shift parameter. 4b unsigned number.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} rxg_gain_coeff_shdw_reg_t;

#define RXG_GAIN_COEFF_SHDW_DEFAULT (0x00000000U)
#define RXG_GAIN_COEFF_SHDW_RD_MASK (0x000fffffU)
#define RXG_GAIN_COEFF_SHDW_WR_MASK (0x000fffffU)


///< Gain parameter. 16b signed number.
#define RXG_GAIN_COEFF_SHDW_GAIN_BF_OFF ( 0)
#define RXG_GAIN_COEFF_SHDW_GAIN_BF_WID (16)
#define RXG_GAIN_COEFF_SHDW_GAIN_BF_MSK (0x0000FFFF)
#define RXG_GAIN_COEFF_SHDW_GAIN_BF_DEF (0x00000000)

///< Shift parameter. 4b unsigned number.
#define RXG_GAIN_COEFF_SHDW_SHIFT_BF_OFF (16)
#define RXG_GAIN_COEFF_SHDW_SHIFT_BF_WID ( 4)
#define RXG_GAIN_COEFF_SHDW_SHIFT_BF_MSK (0x000F0000)
#define RXG_GAIN_COEFF_SHDW_SHIFT_BF_DEF (0x00000000)


/** @brief RXG_MAP_REG_GAIN_COEFF_LIVE register description at address offset 0x4
  *
  * Register default value:        0x00000000
  * Register full path in IP: rxg_map/reg/GAIN_COEFF_LIVE
  * Gain Value Register
  */

typedef union {
  struct {
    uint32_t GAIN : 16;
    ///< Gain parameter. 16b signed number.
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t SHIFT : 4;
    ///< Shift parameter. 4b unsigned number.
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} rxg_gain_coeff_live_reg_t;

#define RXG_GAIN_COEFF_LIVE_DEFAULT (0x00000000U)
#define RXG_GAIN_COEFF_LIVE_RD_MASK (0x000fffffU)
#define RXG_GAIN_COEFF_LIVE_WR_MASK (0x000fffffU)


///< Gain parameter. 16b signed number.
#define RXG_GAIN_COEFF_LIVE_GAIN_BF_OFF ( 0)
#define RXG_GAIN_COEFF_LIVE_GAIN_BF_WID (16)
#define RXG_GAIN_COEFF_LIVE_GAIN_BF_MSK (0x0000FFFF)
#define RXG_GAIN_COEFF_LIVE_GAIN_BF_DEF (0x00000000)

///< Shift parameter. 4b unsigned number.
#define RXG_GAIN_COEFF_LIVE_SHIFT_BF_OFF (16)
#define RXG_GAIN_COEFF_LIVE_SHIFT_BF_WID ( 4)
#define RXG_GAIN_COEFF_LIVE_SHIFT_BF_MSK (0x000F0000)
#define RXG_GAIN_COEFF_LIVE_SHIFT_BF_DEF (0x00000000)


/** @brief RXG_MAP_REG_SCRATCH register description at address offset 0x8
  *
  * Register default value:        0x00000000
  * Register full path in IP: rxg_map/reg/SCRATCH
  * Scratch Register
  */

typedef union {
  struct {
    uint32_t SCRATCHPAD : 32;
    ///< Do anything with this field
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rxg_scratch_reg_t;

#define RXG_SCRATCH_DEFAULT (0x00000000U)
#define RXG_SCRATCH_RD_MASK (0xffffffffU)
#define RXG_SCRATCH_WR_MASK (0xffffffffU)


///< Do anything with this field
#define RXG_SCRATCH_SCRATCHPAD_BF_OFF ( 0)
#define RXG_SCRATCH_SCRATCHPAD_BF_WID (32)
#define RXG_SCRATCH_SCRATCHPAD_BF_MSK (0xFFFFFFFF)
#define RXG_SCRATCH_SCRATCHPAD_BF_DEF (0x00000000)


/** @brief RXG_MAP_REG_BFN_UPDATE register description at address offset 0xc
  *
  * Register default value:        0x00000000
  * Register full path in IP: rxg_map/reg/BFN_UPDATE
  * BFN Reg Select
  */

typedef union {
  struct {
    uint32_t BFN_UPDATE : 1;
    ///< RXG BFN Select
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} rxg_bfn_update_reg_t;

#define RXG_BFN_UPDATE_DEFAULT (0x00000000U)
#define RXG_BFN_UPDATE_RD_MASK (0x00000001U)
#define RXG_BFN_UPDATE_WR_MASK (0x00000000U)


///< RXG BFN Select
#define RXG_BFN_UPDATE_BFN_UPDATE_BF_OFF ( 0)
#define RXG_BFN_UPDATE_BFN_UPDATE_BF_WID ( 1)
#define RXG_BFN_UPDATE_BFN_UPDATE_BF_MSK (0x00000001)
#define RXG_BFN_UPDATE_BFN_UPDATE_BF_DEF (0x00000000)


/** @brief RXG_MAP_REG_REG_SELECT register description at address offset 0x10
  *
  * Register default value:        0x00000000
  * Register full path in IP: rxg_map/reg/REG_SELECT
  * Reg Select
  */

typedef union {
  struct {
    uint32_t BYP_BFN : 1;
    ///< Bypass BFN Register, program to '1' in order to bypass BFN functionality
    ///< and use REG_SELECT control.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t REG_SELECT : 1;
    ///< RXG Reg Select (Used when bypassing BFN) Programming this bitfield
    ///< with a '1' selects LIVE coefficients, while programming with a '0'
    ///< selects SHADOW coefficients.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} rxg_sel_reg_t;

#define RXG_SEL_DEFAULT (0x00000000U)
#define RXG_SEL_RD_MASK (0x00000003U)
#define RXG_SEL_WR_MASK (0x00000003U)


///< Bypass BFN Register, program to '1' in order to bypass BFN functionality
///< and use REG_SELECT control.
#define RXG_SEL_BYP_BFN_BF_OFF ( 0)
#define RXG_SEL_BYP_BFN_BF_WID ( 1)
#define RXG_SEL_BYP_BFN_BF_MSK (0x00000001)
#define RXG_SEL_BYP_BFN_BF_DEF (0x00000000)

///< RXG Reg Select (Used when bypassing BFN) Programming this bitfield
///< with a '1' selects LIVE coefficients, while programming with a '0'
///< selects SHADOW coefficients.
#define RXG_SEL_BF_OFF ( 1)
#define RXG_SEL_BF_WID ( 1)
#define RXG_SEL_BF_MSK (0x00000002)
#define RXG_SEL_BF_DEF (0x00000000)


/** @brief RXG_MAP_REG_REG_SWITCH register description at address offset 0x14
  *
  * Register default value:        0x00000000
  * Register full path in IP: rxg_map/reg/REG_SWITCH
  * Register Switch
  */

typedef union {
  struct {
    uint32_t REG_SWITCH : 1;
    ///< RXG Reg Switch
    ///< AccessType="RW/1C/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} rxg_switch_reg_t;

#define RXG_SWITCH_DEFAULT (0x00000000U)
#define RXG_SWITCH_RD_MASK (0x00000001U)
#define RXG_SWITCH_WR_MASK (0x00000001U)


///< RXG Reg Switch
#define RXG_SWITCH_BF_OFF ( 0)
#define RXG_SWITCH_BF_WID ( 1)
#define RXG_SWITCH_BF_MSK (0x00000001)
#define RXG_SWITCH_BF_DEF (0x00000000)


/** @brief RXG_MAP_REG_CSR_CONFIG register description at address offset 0x18
  *
  * Register default value:        0x00000000
  * Register full path in IP: rxg_map/reg/CSR_CONFIG
  * RXG CSR Configuration Register
  */

typedef union {
  struct {
    uint32_t TEST_CTRL : 1;
    ///< Test Control: 0: generate correct parity when writing (default behavior)
    ///< 1: generate incorrect parity when writing (causes a parity error)
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} rxg_csr_cfg_reg_t;

#define RXG_CSR_CFG_DEFAULT (0x00000000U)
#define RXG_CSR_CFG_RD_MASK (0x00000001U)
#define RXG_CSR_CFG_WR_MASK (0x00000001U)


///< Test Control: 0: generate correct parity when writing (default behavior)
///< 1: generate incorrect parity when writing (causes a parity error)
#define RXG_CSR_CFG_TEST_CTRL_BF_OFF ( 0)
#define RXG_CSR_CFG_TEST_CTRL_BF_WID ( 1)
#define RXG_CSR_CFG_TEST_CTRL_BF_MSK (0x00000001)
#define RXG_CSR_CFG_TEST_CTRL_BF_DEF (0x00000000)


/** @brief RXG_MAP_REG_CSR_ERROR register description at address offset 0x1c
  *
  * Register default value:        0x00000000
  * Register full path in IP: rxg_map/reg/CSR_ERROR
  * RXG CSR Error Register
  */

typedef union {
  struct {
    uint32_t GAIN_COEFF_SHDW : 1;
    ///< Parity Error for Shadow Register for Gain/Shift values
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t GAIN_COEFF_LIVE : 1;
    ///< Parity Error for Live Register for Gain/Shift Values
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} rxg_csr_err_reg_t;

#define RXG_CSR_ERR_DEFAULT (0x00000000U)
#define RXG_CSR_ERR_RD_MASK (0x00000003U)
#define RXG_CSR_ERR_WR_MASK (0x00000000U)


///< Parity Error for Shadow Register for Gain/Shift values
#define RXG_CSR_ERR_GAIN_COEFF_SHDW_BF_OFF ( 0)
#define RXG_CSR_ERR_GAIN_COEFF_SHDW_BF_WID ( 1)
#define RXG_CSR_ERR_GAIN_COEFF_SHDW_BF_MSK (0x00000001)
#define RXG_CSR_ERR_GAIN_COEFF_SHDW_BF_DEF (0x00000000)

///< Parity Error for Live Register for Gain/Shift Values
#define RXG_CSR_ERR_GAIN_COEFF_LIVE_BF_OFF ( 1)
#define RXG_CSR_ERR_GAIN_COEFF_LIVE_BF_WID ( 1)
#define RXG_CSR_ERR_GAIN_COEFF_LIVE_BF_MSK (0x00000002)
#define RXG_CSR_ERR_GAIN_COEFF_LIVE_BF_DEF (0x00000000)


/** @brief RXG_MAP_REG_INT_STATUS register description at address offset 0x20
  *
  * Register default value:        0x00000000
  * Register full path in IP: rxg_map/reg/INT_STATUS
  * Interrupt Status
  */

typedef union {
  struct {
    uint32_t REG_SWITCH : 1;
    ///< Interrupt Status Register - Based on Reg Switch
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t CSR_ERROR : 1;
    ///< Interrupt Status Register - Based on CSR Parity Errorr
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} rxg_int_stat_reg_t;

#define RXG_INT_STAT_DEFAULT (0x00000000U)
#define RXG_INT_STAT_RD_MASK (0x00000003U)
#define RXG_INT_STAT_WR_MASK (0x00000000U)


///< Interrupt Status Register - Based on Reg Switch
#define RXG_INT_STAT_SWITCH_BF_OFF ( 0)
#define RXG_INT_STAT_SWITCH_BF_WID ( 1)
#define RXG_INT_STAT_SWITCH_BF_MSK (0x00000001)
#define RXG_INT_STAT_SWITCH_BF_DEF (0x00000000)

///< Interrupt Status Register - Based on CSR Parity Errorr
#define RXG_INT_STAT_CSR_ERR_BF_OFF ( 1)
#define RXG_INT_STAT_CSR_ERR_BF_WID ( 1)
#define RXG_INT_STAT_CSR_ERR_BF_MSK (0x00000002)
#define RXG_INT_STAT_CSR_ERR_BF_DEF (0x00000000)


/** @brief RXG_MAP_REG_INT_HIGH_EN register description at address offset 0x24
  *
  * Register default value:        0x00000000
  * Register full path in IP: rxg_map/reg/INT_HIGH_EN
  * Interrupt High Enable
  */

typedef union {
  struct {
    uint32_t REG_SWITCH : 1;
    ///< Reg Switch Interrupt High Priority Enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CSR_ERROR : 1;
    ///< CSR Error Parity High Priority Enable
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} rxg_int_high_en_reg_t;

#define RXG_INT_HIGH_EN_DEFAULT (0x00000000U)
#define RXG_INT_HIGH_EN_RD_MASK (0x00000003U)
#define RXG_INT_HIGH_EN_WR_MASK (0x00000003U)


///< Reg Switch Interrupt High Priority Enable
#define RXG_INT_HIGH_EN_SWITCH_BF_OFF ( 0)
#define RXG_INT_HIGH_EN_SWITCH_BF_WID ( 1)
#define RXG_INT_HIGH_EN_SWITCH_BF_MSK (0x00000001)
#define RXG_INT_HIGH_EN_SWITCH_BF_DEF (0x00000000)

///< CSR Error Parity High Priority Enable
#define RXG_INT_HIGH_EN_CSR_ERR_BF_OFF ( 1)
#define RXG_INT_HIGH_EN_CSR_ERR_BF_WID ( 1)
#define RXG_INT_HIGH_EN_CSR_ERR_BF_MSK (0x00000002)
#define RXG_INT_HIGH_EN_CSR_ERR_BF_DEF (0x00000000)


/** @brief RXG_MAP_REG_INT_LOW_EN register description at address offset 0x28
  *
  * Register default value:        0x00000000
  * Register full path in IP: rxg_map/reg/INT_LOW_EN
  * Interrupt Low Enable
  */

typedef union {
  struct {
    uint32_t REG_SWITCH : 1;
    ///< Reg Switch Interrupt Low Priority Enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CSR_ERROR : 1;
    ///< CSR Error Parity Low Priority Enable
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} rxg_int_low_en_reg_t;

#define RXG_INT_LOW_EN_DEFAULT (0x00000000U)
#define RXG_INT_LOW_EN_RD_MASK (0x00000003U)
#define RXG_INT_LOW_EN_WR_MASK (0x00000003U)


///< Reg Switch Interrupt Low Priority Enable
#define RXG_INT_LOW_EN_SWITCH_BF_OFF ( 0)
#define RXG_INT_LOW_EN_SWITCH_BF_WID ( 1)
#define RXG_INT_LOW_EN_SWITCH_BF_MSK (0x00000001)
#define RXG_INT_LOW_EN_SWITCH_BF_DEF (0x00000000)

///< CSR Error Parity Low Priority Enable
#define RXG_INT_LOW_EN_CSR_ERR_BF_OFF ( 1)
#define RXG_INT_LOW_EN_CSR_ERR_BF_WID ( 1)
#define RXG_INT_LOW_EN_CSR_ERR_BF_MSK (0x00000002)
#define RXG_INT_LOW_EN_CSR_ERR_BF_DEF (0x00000000)


/** @brief RXG_MAP_REG_INT_CLEAR register description at address offset 0x2c
  *
  * Register default value:        0x00000000
  * Register full path in IP: rxg_map/reg/INT_CLEAR
  * Interrupt Clear Register
  */

typedef union {
  struct {
    uint32_t REG_SWITCH : 1;
    ///< Register switch interrupt clear
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CSR_ERROR : 1;
    ///< CSR ERROR interrupt clear
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} rxg_int_clr_reg_t;

#define RXG_INT_CLR_DEFAULT (0x00000000U)
#define RXG_INT_CLR_RD_MASK (0x00000003U)
#define RXG_INT_CLR_WR_MASK (0x00000003U)


///< Register switch interrupt clear
#define RXG_INT_CLR_SWITCH_BF_OFF ( 0)
#define RXG_INT_CLR_SWITCH_BF_WID ( 1)
#define RXG_INT_CLR_SWITCH_BF_MSK (0x00000001)
#define RXG_INT_CLR_SWITCH_BF_DEF (0x00000000)

///< CSR ERROR interrupt clear
#define RXG_INT_CLR_CSR_ERR_BF_OFF ( 1)
#define RXG_INT_CLR_CSR_ERR_BF_WID ( 1)
#define RXG_INT_CLR_CSR_ERR_BF_MSK (0x00000002)
#define RXG_INT_CLR_CSR_ERR_BF_DEF (0x00000000)


/** @brief RXG_MAP_REG_INT_FORCE register description at address offset 0x30
  *
  * Register default value:        0x00000000
  * Register full path in IP: rxg_map/reg/INT_FORCE
  * Interrupt Force Register
  */

typedef union {
  struct {
    uint32_t REG_SWITCH : 1;
    ///< Register switch interrupt force
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CSR_ERROR : 1;
    ///< CSR ERROR interrupt force
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} rxg_int_force_reg_t;

#define RXG_INT_FORCE_DEFAULT (0x00000000U)
#define RXG_INT_FORCE_RD_MASK (0x00000003U)
#define RXG_INT_FORCE_WR_MASK (0x00000003U)


///< Register switch interrupt force
#define RXG_INT_FORCE_SWITCH_BF_OFF ( 0)
#define RXG_INT_FORCE_SWITCH_BF_WID ( 1)
#define RXG_INT_FORCE_SWITCH_BF_MSK (0x00000001)
#define RXG_INT_FORCE_SWITCH_BF_DEF (0x00000000)

///< CSR ERROR interrupt force
#define RXG_INT_FORCE_CSR_ERR_BF_OFF ( 1)
#define RXG_INT_FORCE_CSR_ERR_BF_WID ( 1)
#define RXG_INT_FORCE_CSR_ERR_BF_MSK (0x00000002)
#define RXG_INT_FORCE_CSR_ERR_BF_DEF (0x00000000)


/** @brief RXG_MAP_REG_APB_BRIDGE_STATUS register description at address offset 0x34
  *
  * Register default value:        0x00010000
  * Register full path in IP: rxg_map/reg/APB_BRIDGE_STATUS
  * Status of APB Bridge
  */

typedef union {
  struct {
    uint32_t TIMEOUT_VALUE : 20;
    ///< Number of core clocks to wait before timing out an APB request
    ///< AccessType="RW/L" BitOffset="0" ResetValue="0x10000"
    uint32_t REVISION : 8;
    ///< Module Revision Number
    ///< AccessType="RO" BitOffset="20" ResetValue="0x0"
    uint32_t SW_LOCK_CTRL : 1;
    ///< Block software writes to timeout_value if set
    ///< AccessType="RW/1S/V/L" BitOffset="28" ResetValue="0x0"
    uint32_t UNSOL_ACK : 1;
    ///< An unsolicited acknowledge was received
    ///< AccessType="RW/1C/V" BitOffset="29" ResetValue="0x0"
    uint32_t ACK_ERROR : 1;
    ///< Acknowledgement had error bit set
    ///< AccessType="RW/1C/V" BitOffset="30" ResetValue="0x0"
    uint32_t TIMEOUT : 1;
    ///< An APB request has timed out
    ///< AccessType="RW/1C/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} rxg_apb_brdg_stat_reg_t;

#define RXG_APB_BRDG_STAT_DEFAULT (0x00010000U)
#define RXG_APB_BRDG_STAT_RD_MASK (0xffffffffU)
#define RXG_APB_BRDG_STAT_WR_MASK (0xf00fffffU)


///< Number of core clocks to wait before timing out an APB request
#define RXG_APB_BRDG_STAT_TIMEOUT_VAL_BF_OFF ( 0)
#define RXG_APB_BRDG_STAT_TIMEOUT_VAL_BF_WID (20)
#define RXG_APB_BRDG_STAT_TIMEOUT_VAL_BF_MSK (0x000FFFFF)
#define RXG_APB_BRDG_STAT_TIMEOUT_VAL_BF_DEF (0x00010000)

///< Module Revision Number
#define RXG_APB_BRDG_STAT_REVISION_BF_OFF (20)
#define RXG_APB_BRDG_STAT_REVISION_BF_WID ( 8)
#define RXG_APB_BRDG_STAT_REVISION_BF_MSK (0x0FF00000)
#define RXG_APB_BRDG_STAT_REVISION_BF_DEF (0x00000000)

///< Block software writes to timeout_value if set
#define RXG_APB_BRDG_STAT_SW_LOCK_CTRL_BF_OFF (28)
#define RXG_APB_BRDG_STAT_SW_LOCK_CTRL_BF_WID ( 1)
#define RXG_APB_BRDG_STAT_SW_LOCK_CTRL_BF_MSK (0x10000000)
#define RXG_APB_BRDG_STAT_SW_LOCK_CTRL_BF_DEF (0x00000000)

///< An unsolicited acknowledge was received
#define RXG_APB_BRDG_STAT_UNSOL_ACK_BF_OFF (29)
#define RXG_APB_BRDG_STAT_UNSOL_ACK_BF_WID ( 1)
#define RXG_APB_BRDG_STAT_UNSOL_ACK_BF_MSK (0x20000000)
#define RXG_APB_BRDG_STAT_UNSOL_ACK_BF_DEF (0x00000000)

///< Acknowledgement had error bit set
#define RXG_APB_BRDG_STAT_ACK_ERR_BF_OFF (30)
#define RXG_APB_BRDG_STAT_ACK_ERR_BF_WID ( 1)
#define RXG_APB_BRDG_STAT_ACK_ERR_BF_MSK (0x40000000)
#define RXG_APB_BRDG_STAT_ACK_ERR_BF_DEF (0x00000000)

///< An APB request has timed out
#define RXG_APB_BRDG_STAT_TIMEOUT_BF_OFF (31)
#define RXG_APB_BRDG_STAT_TIMEOUT_BF_WID ( 1)
#define RXG_APB_BRDG_STAT_TIMEOUT_BF_MSK (0x80000000)
#define RXG_APB_BRDG_STAT_TIMEOUT_BF_DEF (0x00000000)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define RXG_GAIN_COEFF_SHDW_REG(_BASE) ((rxg_gain_coeff_shdw_reg_t*) RXG_GAIN_COEFF_SHDW_ADR(_BASE))
#define RXG_GAIN_COEFF_LIVE_REG(_BASE) ((rxg_gain_coeff_live_reg_t*) RXG_GAIN_COEFF_LIVE_ADR(_BASE))
#define RXG_SCRATCH_REG(_BASE) ((rxg_scratch_reg_t*) RXG_SCRATCH_ADR(_BASE))
#define RXG_BFN_UPDATE_REG(_BASE) ((rxg_bfn_update_reg_t*) RXG_BFN_UPDATE_ADR(_BASE))
#define RXG_SEL_REG(_BASE) ((rxg_sel_reg_t*) RXG_SEL_ADR(_BASE))
#define RXG_SWITCH_REG(_BASE) ((rxg_switch_reg_t*) RXG_SWITCH_ADR(_BASE))
#define RXG_CSR_CFG_REG(_BASE) ((rxg_csr_cfg_reg_t*) RXG_CSR_CFG_ADR(_BASE))
#define RXG_CSR_ERR_REG(_BASE) ((rxg_csr_err_reg_t*) RXG_CSR_ERR_ADR(_BASE))
#define RXG_INT_STAT_REG(_BASE) ((rxg_int_stat_reg_t*) RXG_INT_STAT_ADR(_BASE))
#define RXG_INT_HIGH_EN_REG(_BASE) ((rxg_int_high_en_reg_t*) RXG_INT_HIGH_EN_ADR(_BASE))
#define RXG_INT_LOW_EN_REG(_BASE) ((rxg_int_low_en_reg_t*) RXG_INT_LOW_EN_ADR(_BASE))
#define RXG_INT_CLR_REG(_BASE) ((rxg_int_clr_reg_t*) RXG_INT_CLR_ADR(_BASE))
#define RXG_INT_FORCE_REG(_BASE) ((rxg_int_force_reg_t*) RXG_INT_FORCE_ADR(_BASE))
#define RXG_APB_BRDG_STAT_REG(_BASE) ((rxg_apb_brdg_stat_reg_t*) RXG_APB_BRDG_STAT_ADR(_BASE))

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    rxg_gain_coeff_shdw_reg_t GAIN_COEFF_SHDW; /*< Address offset = 0x0 */
    rxg_gain_coeff_live_reg_t GAIN_COEFF_LIVE; /*< Address offset = 0x4 */
    rxg_scratch_reg_t SCRATCH;         /*< Address offset = 0x8 */
    rxg_bfn_update_reg_t BFN_UPDATE;      /*< Address offset = 0xc */
    rxg_sel_reg_t SEL;      /*< Address offset = 0x10 */
    rxg_switch_reg_t SWITCH;      /*< Address offset = 0x14 */
    rxg_csr_cfg_reg_t CSR_CFG;      /*< Address offset = 0x18 */
    rxg_csr_err_reg_t CSR_ERR;       /*< Address offset = 0x1c */
    rxg_int_stat_reg_t INT_STAT;      /*< Address offset = 0x20 */
    rxg_int_high_en_reg_t INT_HIGH_EN;     /*< Address offset = 0x24 */
    rxg_int_low_en_reg_t INT_LOW_EN;      /*< Address offset = 0x28 */
    rxg_int_clr_reg_t INT_CLR;       /*< Address offset = 0x2c */
    rxg_int_force_reg_t INT_FORCE;       /*< Address offset = 0x30 */
    rxg_apb_brdg_stat_reg_t APB_BRDG_STAT; /*< Address offset = 0x34 */
} rxg_t;     // size: 0x0038

// AddressSpace struct pointer
//
#define FB_SYS0_RXG0     ((rxg_t*) FB_SYS0_RXG0_BASE)
#define FB_SYS0_RXG1     ((rxg_t*) FB_SYS0_RXG1_BASE)
#define FB_SYS1_RXG0     ((rxg_t*) FB_SYS1_RXG0_BASE)
#define FB_SYS1_RXG1     ((rxg_t*) FB_SYS1_RXG1_BASE)
#define TRX_SYS0_RXG0    ((rxg_t*) TRX_SYS0_RXG0_BASE)
#define TRX_SYS0_RXG1    ((rxg_t*) TRX_SYS0_RXG1_BASE)
#define TRX_SYS1_RXG0    ((rxg_t*) TRX_SYS1_RXG0_BASE)
#define TRX_SYS1_RXG1    ((rxg_t*) TRX_SYS1_RXG1_BASE)
#define TRX_SYS2_RXG0    ((rxg_t*) TRX_SYS2_RXG0_BASE)
#define TRX_SYS2_RXG1    ((rxg_t*) TRX_SYS2_RXG1_BASE)
#define TRX_SYS3_RXG0    ((rxg_t*) TRX_SYS3_RXG0_BASE)
#define TRX_SYS3_RXG1    ((rxg_t*) TRX_SYS3_RXG1_BASE)
#define TRX_SYS4_RXG0    ((rxg_t*) TRX_SYS4_RXG0_BASE)
#define TRX_SYS4_RXG1    ((rxg_t*) TRX_SYS4_RXG1_BASE)
#define TRX_SYS5_RXG0    ((rxg_t*) TRX_SYS5_RXG0_BASE)
#define TRX_SYS5_RXG1    ((rxg_t*) TRX_SYS5_RXG1_BASE)
#define TRX_SYS6_RXG0    ((rxg_t*) TRX_SYS6_RXG0_BASE)
#define TRX_SYS6_RXG1    ((rxg_t*) TRX_SYS6_RXG1_BASE)
#define TRX_SYS7_RXG0    ((rxg_t*) TRX_SYS7_RXG0_BASE)
#define TRX_SYS7_RXG1    ((rxg_t*) TRX_SYS7_RXG1_BASE)

// ******************************************* /Address Space

#endif      // _RXG_H_

