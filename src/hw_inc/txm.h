#ifndef _TXM_H_
#define _TXM_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define TRX_ANT0_TXM0_BASE    ( 0x05129000 )
#define TRX_ANT0_TXM1_BASE    ( 0x05139000 )
#define TRX_ANT1_TXM0_BASE    ( 0x05149000 )
#define TRX_ANT1_TXM1_BASE    ( 0x05159000 )
#define TRX_ANT2_TXM0_BASE    ( 0x05169000 )
#define TRX_ANT2_TXM1_BASE    ( 0x05179000 )
#define TRX_ANT3_TXM0_BASE    ( 0x05189000 )
#define TRX_ANT3_TXM1_BASE    ( 0x05199000 )
#define TRX_ANT4_TXM0_BASE    ( 0x051a9000 )
#define TRX_ANT4_TXM1_BASE    ( 0x051b9000 )
#define TRX_ANT5_TXM0_BASE    ( 0x051c9000 )
#define TRX_ANT5_TXM1_BASE    ( 0x051d9000 )
#define TRX_ANT6_TXM0_BASE    ( 0x051e9000 )
#define TRX_ANT6_TXM1_BASE    ( 0x051f9000 )
#define TRX_ANT7_TXM0_BASE    ( 0x05209000 )
#define TRX_ANT7_TXM1_BASE    ( 0x05219000 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define TXM_SCRATCH_OFFSET       ( 0x00000000U )
#define TXM_PEAK_VAL_INTERVAL_OFFSET ( 0x00000004U )
#define TXM_PEAK_VAL_LIMIT_OFFSET ( 0x00000008U )
#define TXM_EN_OFFSET        ( 0x0000000cU )
#define TXM_PEAK_VAL_MEAS_OUT_OFFSET ( 0x00000010U )
#define TXM_PEAK_VAL_ALARM_CNT_OFFSET ( 0x00000014U )
#define TXM_GLOBAL_PEAK_CLR_OFFSET ( 0x00000018U )
#define TXM_GLOBAL_PEAK_VAL_MEAS_OFFSET ( 0x0000001cU )
#define TXM_GLOBAL_PEAK_BFN_CNT_OFFSET ( 0x00000020U )
#define TXM_PEAK_DBG_OFFSET    ( 0x00000024U )
#define TXM_INT_STAT_OFFSET    ( 0x00000028U )
#define TXM_INT_HI_EN_OFFSET     ( 0x0000002cU )
#define TXM_INT_LO_EN_OFFSET     ( 0x00000030U )
#define TXM_INT_CLR_OFFSET     ( 0x00000034U )
#define TXM_INT_FORCE_OFFSET     ( 0x00000038U )
#define TXM_APB_BRDG_STAT_OFFSET ( 0x0000003cU )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define TXM_SCRATCH_ADR(_BASE)          (( ( _BASE ) + ( TXM_SCRATCH_OFFSET ) ))
#define TXM_PEAK_VAL_INTERVAL_ADR(_BASE) (( ( _BASE ) + ( TXM_PEAK_VAL_INTERVAL_OFFSET ) ))
#define TXM_PEAK_VAL_LIMIT_ADR(_BASE) (( ( _BASE ) + ( TXM_PEAK_VAL_LIMIT_OFFSET ) ))
#define TXM_EN_ADR(_BASE)           (( ( _BASE ) + ( TXM_EN_OFFSET ) ))
#define TXM_PEAK_VAL_MEAS_OUT_ADR(_BASE) (( ( _BASE ) + ( TXM_PEAK_VAL_MEAS_OUT_OFFSET ) ))
#define TXM_PEAK_VAL_ALARM_CNT_ADR(_BASE) (( ( _BASE ) + ( TXM_PEAK_VAL_ALARM_CNT_OFFSET ) ))
#define TXM_GLOBAL_PEAK_CLR_ADR(_BASE) (( ( _BASE ) + ( TXM_GLOBAL_PEAK_CLR_OFFSET ) ))
#define TXM_GLOBAL_PEAK_VAL_MEAS_ADR(_BASE) (( ( _BASE ) + ( TXM_GLOBAL_PEAK_VAL_MEAS_OFFSET ) ))
#define TXM_GLOBAL_PEAK_BFN_CNT_ADR(_BASE) (( ( _BASE ) + ( TXM_GLOBAL_PEAK_BFN_CNT_OFFSET ) ))
#define TXM_PEAK_DBG_ADR(_BASE)       (( ( _BASE ) + ( TXM_PEAK_DBG_OFFSET ) ))
#define TXM_INT_STAT_ADR(_BASE)       (( ( _BASE ) + ( TXM_INT_STAT_OFFSET ) ))
#define TXM_INT_HI_EN_ADR(_BASE)        (( ( _BASE ) + ( TXM_INT_HI_EN_OFFSET ) ))
#define TXM_INT_LO_EN_ADR(_BASE)        (( ( _BASE ) + ( TXM_INT_LO_EN_OFFSET ) ))
#define TXM_INT_CLR_ADR(_BASE)        (( ( _BASE ) + ( TXM_INT_CLR_OFFSET ) ))
#define TXM_INT_FORCE_ADR(_BASE)        (( ( _BASE ) + ( TXM_INT_FORCE_OFFSET ) ))
#define TXM_APB_BRDG_STAT_ADR(_BASE) (( ( _BASE ) + ( TXM_APB_BRDG_STAT_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief TXM_REG_TXM_SCRATCH register description at address offset 0x0
  *
  * Register default value:        0x00000000
  * Register full path in IP: txm/reg/TXM_SCRATCH
  * RXM Scratch Register
  */

typedef union {
  struct {
    uint32_t SCRATCHPAD : 32;
    ///< Scratch register can be used by software to verify reads/writes to
    ///< this address space.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} txm_scratch_reg_t;

#define TXM_SCRATCH_DEFAULT (0x00000000U)
#define TXM_SCRATCH_RD_MASK (0xffffffffU)
#define TXM_SCRATCH_WR_MASK (0xffffffffU)


///< Scratch register can be used by software to verify reads/writes to
///< this address space.
#define TXM_SCRATCH_SCRATCHPAD_BF_OFF ( 0)
#define TXM_SCRATCH_SCRATCHPAD_BF_WID (32)
#define TXM_SCRATCH_SCRATCHPAD_BF_MSK (0xFFFFFFFF)
#define TXM_SCRATCH_SCRATCHPAD_BF_DEF (0x00000000)


/** @brief TXM_REG_TXM_PEAK_VALUE_INTERVAL register description at address offset 0x4
  *
  * Register default value:        0x00000008
  * Register full path in IP: txm/reg/TXM_PEAK_VALUE_INTERVAL
  * Peak Value Measurement Interval n1 Register
  */

typedef union {
  struct {
    uint32_t N1_PVAL : 17;
    ///< Usre selects the size of the measurement window from 8 to 131,071
    ///< valid clock or blocks. Note:  If the user mistakenly programs the
    ///< value to less than 8, it will be forced to 8.  If this mistake occurs
    ///< the register will read 8 when read.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x8"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} txm_peak_val_interval_reg_t;

#define TXM_PEAK_VAL_INTERVAL_DEFAULT (0x00000008U)
#define TXM_PEAK_VAL_INTERVAL_RD_MASK (0x0001ffffU)
#define TXM_PEAK_VAL_INTERVAL_WR_MASK (0x0001ffffU)


///< Usre selects the size of the measurement window from 8 to 131,071
///< valid clock or blocks. Note:  If the user mistakenly programs the
///< value to less than 8, it will be forced to 8.  If this mistake occurs
///< the register will read 8 when read.
#define TXM_PEAK_VAL_INTERVAL_N1_PVAL_BF_OFF ( 0)
#define TXM_PEAK_VAL_INTERVAL_N1_PVAL_BF_WID (17)
#define TXM_PEAK_VAL_INTERVAL_N1_PVAL_BF_MSK (0x0001FFFF)
#define TXM_PEAK_VAL_INTERVAL_N1_PVAL_BF_DEF (0x00000008)


/** @brief TXM_REG_TXM_PEAK_VALUE_LIMIT register description at address offset 0x8
  *
  * Register default value:        0x00000FFE
  * Register full path in IP: txm/reg/TXM_PEAK_VALUE_LIMIT
  * Peak Value Limit
  */

typedef union {
  struct {
    uint32_t PVAL_LIMIT : 12;
    ///< Set limit for the peak value measurement.
    ///< AccessType="RW" BitOffset="0" ResetValue="0xFFE"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} txm_peak_val_limit_reg_t;

#define TXM_PEAK_VAL_LIMIT_DEFAULT (0x00000ffeU)
#define TXM_PEAK_VAL_LIMIT_RD_MASK (0x00000fffU)
#define TXM_PEAK_VAL_LIMIT_WR_MASK (0x00000fffU)


///< Set limit for the peak value measurement.
#define TXM_PEAK_VAL_LIMIT_PVAL_LIMIT_BF_OFF ( 0)
#define TXM_PEAK_VAL_LIMIT_PVAL_LIMIT_BF_WID (12)
#define TXM_PEAK_VAL_LIMIT_PVAL_LIMIT_BF_MSK (0x00000FFF)
#define TXM_PEAK_VAL_LIMIT_PVAL_LIMIT_BF_DEF (0x00000FFE)


/** @brief TXM_REG_TXM_ENABLE register description at address offset 0xc
  *
  * Register default value:        0x00000000
  * Register full path in IP: txm/reg/TXM_ENABLE
  * Measurement Unit Enable Register
  */

typedef union {
  struct {
    uint32_t EN_UNIT : 1;
    ///< Enable Measurement Unit Note: This bit is Write Masked by setting
    ///< Bit 16 to a 1 to prevent this bit (bit0) from being written.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t EN_PVAL_ALARM : 1;
    ///< Enables Peak Value Measurment Alarm Note: This bit is Write Masked
    ///< by setting Bit 17 to a 1 to prevent this bit (bit 1) from being written.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t TDD_NA_INIT : 1;
    ///< When  asserted (1) and TDD is not active,</br> clears all in progress
    ///< mesaurements and </br> returns to Initial State until TDD Active.</br>
    ///< Else hold state until TDD active.</br> Only effects TDD mode  Note:
    ///< This bit is Write Masked by setting Bit 18 to a 1 to prevent this
    ///< bit (bit2) from being written too.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t GLOBAL_PEAK_AND_BFN_ENABLE : 1;
    ///< When this bit is asserted the Global Peak and Global BFN functions
    ///< are enabled. Bit 19 to a 1 to prevent this bit (bit 1) from being
    ///< written.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t TDD_GLOBAL_PEAK_BFN_INIT : 1;
    ///< When  asserted (1) and TDD is not active,</br> clears global peak
    ///< and BFN in progress mesaurements and </br> returns to Initial State
    ///< until TDD Active.</br> Else if bit == 0 (default) hold state until
    ///< TDD active.</br> Only effects TDD mode  Note: This bit is Write Masked
    ///< by setting Bit 20 to a 1 to prevent this bit (bit4) from being written
    ///< too.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
    uint32_t MASK : 16;
    ///< Maskable
    ///< AccessType="WO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} txm_en_reg_t;

#define TXM_EN_DEFAULT (0x00000000U)
#define TXM_EN_RD_MASK (0x0000001fU)
#define TXM_EN_WR_MASK (0xffff001fU)


///< Enable Measurement Unit Note: This bit is Write Masked by setting
///< Bit 16 to a 1 to prevent this bit (bit0) from being written.
#define TXM_EN_UNIT_BF_OFF ( 0)
#define TXM_EN_UNIT_BF_WID ( 1)
#define TXM_EN_UNIT_BF_MSK (0x00000001)
#define TXM_EN_UNIT_BF_DEF (0x00000000)

///< Enables Peak Value Measurment Alarm Note: This bit is Write Masked
///< by setting Bit 17 to a 1 to prevent this bit (bit 1) from being written.
#define TXM_EN_PVAL_ALARM_BF_OFF ( 1)
#define TXM_EN_PVAL_ALARM_BF_WID ( 1)
#define TXM_EN_PVAL_ALARM_BF_MSK (0x00000002)
#define TXM_EN_PVAL_ALARM_BF_DEF (0x00000000)

///< When  asserted (1) and TDD is not active,</br> clears all in progress
///< mesaurements and </br> returns to Initial State until TDD Active.</br>
///< Else hold state until TDD active.</br> Only effects TDD mode  Note:
///< This bit is Write Masked by setting Bit 18 to a 1 to prevent this
///< bit (bit2) from being written too.
#define TXM_EN_TDD_NA_INIT_BF_OFF ( 2)
#define TXM_EN_TDD_NA_INIT_BF_WID ( 1)
#define TXM_EN_TDD_NA_INIT_BF_MSK (0x00000004)
#define TXM_EN_TDD_NA_INIT_BF_DEF (0x00000000)

///< When this bit is asserted the Global Peak and Global BFN functions
///< are enabled. Bit 19 to a 1 to prevent this bit (bit 1) from being
///< written.
#define TXM_EN_GLOBAL_PEAK_AND_BFN_EN_BF_OFF ( 3)
#define TXM_EN_GLOBAL_PEAK_AND_BFN_EN_BF_WID ( 1)
#define TXM_EN_GLOBAL_PEAK_AND_BFN_EN_BF_MSK (0x00000008)
#define TXM_EN_GLOBAL_PEAK_AND_BFN_EN_BF_DEF (0x00000000)

///< When  asserted (1) and TDD is not active,</br> clears global peak
///< and BFN in progress mesaurements and </br> returns to Initial State
///< until TDD Active.</br> Else if bit == 0 (default) hold state until
///< TDD active.</br> Only effects TDD mode  Note: This bit is Write Masked
///< by setting Bit 20 to a 1 to prevent this bit (bit4) from being written
///< too.
#define TXM_EN_TDD_GLOBAL_PEAK_BFN_INIT_BF_OFF ( 4)
#define TXM_EN_TDD_GLOBAL_PEAK_BFN_INIT_BF_WID ( 1)
#define TXM_EN_TDD_GLOBAL_PEAK_BFN_INIT_BF_MSK (0x00000010)
#define TXM_EN_TDD_GLOBAL_PEAK_BFN_INIT_BF_DEF (0x00000000)
#define TXM_EN_MASK_BF_OFF (16)
#define TXM_EN_MASK_BF_WID (16)
#define TXM_EN_MASK_BF_MSK (0xFFFF0000)


/** @brief TXM_REG_TXM_PEAK_VALUE_MEAS_OUT register description at address offset 0x10
  *
  * Register default value:        0x00000000
  * Register full path in IP: txm/reg/TXM_PEAK_VALUE_MEAS_OUT
  * Peak Value Measurement Output
  */

typedef union {
  struct {
    uint32_t PEAK_VALUE_N1 : 12;
    ///< Peak Value Measurement
    ///< AccessType="RO/C/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
    uint32_t PK_VAL_VALID_N1 : 1;
    ///< Peak Value n1 Valid
    ///< AccessType="RO/C/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} txm_peak_val_meas_out_reg_t;

#define TXM_PEAK_VAL_MEAS_OUT_DEFAULT (0x00000000U)
#define TXM_PEAK_VAL_MEAS_OUT_RD_MASK (0x00010fffU)
#define TXM_PEAK_VAL_MEAS_OUT_WR_MASK (0x00000000U)


///< Peak Value Measurement
#define TXM_PEAK_VAL_MEAS_OUT_PEAK_VAL_N1_BF_OFF ( 0)
#define TXM_PEAK_VAL_MEAS_OUT_PEAK_VAL_N1_BF_WID (12)
#define TXM_PEAK_VAL_MEAS_OUT_PEAK_VAL_N1_BF_MSK (0x00000FFF)
#define TXM_PEAK_VAL_MEAS_OUT_PEAK_VAL_N1_BF_DEF (0x00000000)

///< Peak Value n1 Valid
#define TXM_PEAK_VAL_MEAS_OUT_PK_VAL_VALID_N1_BF_OFF (16)
#define TXM_PEAK_VAL_MEAS_OUT_PK_VAL_VALID_N1_BF_WID ( 1)
#define TXM_PEAK_VAL_MEAS_OUT_PK_VAL_VALID_N1_BF_MSK (0x00010000)
#define TXM_PEAK_VAL_MEAS_OUT_PK_VAL_VALID_N1_BF_DEF (0x00000000)


/** @brief TXM_REG_TXM_PEAK_VALUE_ALARM_COUNT register description at address offset 0x14
  *
  * Register default value:        0x00000000
  * Register full path in IP: txm/reg/TXM_PEAK_VALUE_ALARM_COUNT
  * PEAK VALUE ALARM COUNT
  */

typedef union {
  struct {
    uint32_t PVAL_ALARM_CNT : 32;
    ///< Number of times  that the peak value limit was exceeded
    ///< AccessType="RO/C/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} txm_peak_val_alarm_cnt_reg_t;

#define TXM_PEAK_VAL_ALARM_CNT_DEFAULT (0x00000000U)
#define TXM_PEAK_VAL_ALARM_CNT_RD_MASK (0xffffffffU)
#define TXM_PEAK_VAL_ALARM_CNT_WR_MASK (0x00000000U)


///< Number of times  that the peak value limit was exceeded
#define TXM_PEAK_VAL_ALARM_CNT_PVAL_ALARM_CNT_BF_OFF ( 0)
#define TXM_PEAK_VAL_ALARM_CNT_PVAL_ALARM_CNT_BF_WID (32)
#define TXM_PEAK_VAL_ALARM_CNT_PVAL_ALARM_CNT_BF_MSK (0xFFFFFFFF)
#define TXM_PEAK_VAL_ALARM_CNT_PVAL_ALARM_CNT_BF_DEF (0x00000000)


/** @brief TXM_REG_TXM_GLOBAL_PEAK_CLEAR register description at address offset 0x18
  *
  * Register default value:        0x00000000
  * Register full path in IP: txm/reg/TXM_GLOBAL_PEAK_CLEAR
  * Global_Peak Clear
  */

typedef union {
  struct {
    uint32_t GLOBAL_PEAK_CLEAR : 1;
    ///< Assert this bit to clear the Global Peak and assoiated BFN value and
    ///< any in progress values.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} txm_global_peak_clr_reg_t;

#define TXM_GLOBAL_PEAK_CLR_DEFAULT (0x00000000U)
#define TXM_GLOBAL_PEAK_CLR_RD_MASK (0x00000001U)
#define TXM_GLOBAL_PEAK_CLR_WR_MASK (0x00000001U)


///< Assert this bit to clear the Global Peak and assoiated BFN value and
///< any in progress values.
#define TXM_GLOBAL_PEAK_CLR_GLOBAL_PEAK_CLR_BF_OFF ( 0)
#define TXM_GLOBAL_PEAK_CLR_GLOBAL_PEAK_CLR_BF_WID ( 1)
#define TXM_GLOBAL_PEAK_CLR_GLOBAL_PEAK_CLR_BF_MSK (0x00000001)
#define TXM_GLOBAL_PEAK_CLR_GLOBAL_PEAK_CLR_BF_DEF (0x00000000)


/** @brief TXM_REG_TXM_GLOBAL_PEAK_VALUE_MEAS register description at address offset 0x1c
  *
  * Register default value:        0x00000000
  * Register full path in IP: txm/reg/TXM_GLOBAL_PEAK_VALUE_MEAS
  * Global_Peak Value
  */

typedef union {
  struct {
    uint32_t GLOBAL_PEAK_VALUE_MEAS : 12;
    ///< Represents the Global Peak Value collected from time 0 forward. Data
    ///< for the Global Peak Value is collected over a constant window size
    ///< of eight valid clocks (i.e. blocks).
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} txm_global_peak_val_meas_reg_t;

#define TXM_GLOBAL_PEAK_VAL_MEAS_DEFAULT (0x00000000U)
#define TXM_GLOBAL_PEAK_VAL_MEAS_RD_MASK (0x00000fffU)
#define TXM_GLOBAL_PEAK_VAL_MEAS_WR_MASK (0x00000000U)


///< Represents the Global Peak Value collected from time 0 forward. Data
///< for the Global Peak Value is collected over a constant window size
///< of eight valid clocks (i.e. blocks).
#define TXM_GLOBAL_PEAK_VAL_MEAS_GLOBAL_PEAK_VAL_MEAS_BF_OFF ( 0)
#define TXM_GLOBAL_PEAK_VAL_MEAS_GLOBAL_PEAK_VAL_MEAS_BF_WID (12)
#define TXM_GLOBAL_PEAK_VAL_MEAS_GLOBAL_PEAK_VAL_MEAS_BF_MSK (0x00000FFF)
#define TXM_GLOBAL_PEAK_VAL_MEAS_GLOBAL_PEAK_VAL_MEAS_BF_DEF (0x00000000)


/** @brief TXM_REG_TXM_GLOBAL_PEAK_BFN_CNT register description at address offset 0x20
  *
  * Register default value:        0x00000000
  * Register full path in IP: txm/reg/TXM_GLOBAL_PEAK_BFN_CNT
  * Global Peak BFN Count
  */

typedef union {
  struct {
    uint32_t GLOBAL_PEAK_BFN_CNT : 32;
    ///< The Gobal BFN Counter represenstthe BFN counter value that occurred
    ///< with the maximum peak value. Global Peak value and the associated
    ///< BFN Count is collected over a sample window size of eight clocks (Block)
    ///< and over multiple sample windows starting from time reset or any reinitializations.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} txm_global_peak_bfn_cnt_reg_t;

#define TXM_GLOBAL_PEAK_BFN_CNT_DEFAULT (0x00000000U)
#define TXM_GLOBAL_PEAK_BFN_CNT_RD_MASK (0xffffffffU)
#define TXM_GLOBAL_PEAK_BFN_CNT_WR_MASK (0x00000000U)


///< The Gobal BFN Counter represenstthe BFN counter value that occurred
///< with the maximum peak value. Global Peak value and the associated
///< BFN Count is collected over a sample window size of eight clocks (Block)
///< and over multiple sample windows starting from time reset or any reinitializations.
#define TXM_GLOBAL_PEAK_BFN_CNT_GLOBAL_PEAK_BFN_CNT_BF_OFF ( 0)
#define TXM_GLOBAL_PEAK_BFN_CNT_GLOBAL_PEAK_BFN_CNT_BF_WID (32)
#define TXM_GLOBAL_PEAK_BFN_CNT_GLOBAL_PEAK_BFN_CNT_BF_MSK (0xFFFFFFFF)
#define TXM_GLOBAL_PEAK_BFN_CNT_GLOBAL_PEAK_BFN_CNT_BF_DEF (0x00000000)


/** @brief TXM_REG_TXM_PEAK_DEBUG register description at address offset 0x24
  *
  * Register default value:        0x00000000
  * Register full path in IP: txm/reg/TXM_PEAK_DEBUG
  * Debug Peak Status
  */

typedef union {
  struct {
    uint32_t TXM_PK_CNT_N1 : 17;
    ///< Peak Value Counter N1
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t TXM_PK_ST_N1 : 1;
    ///< Peak State Counter N1
    ///< AccessType="RO/V" BitOffset="17" ResetValue="0x0"
    uint32_t TXM_MEAS_LINK_STAT : 1;
    ///< TDD Meas Link Status 1== Active
    ///< AccessType="RO/V" BitOffset="18" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} txm_peak_dbg_reg_t;

#define TXM_PEAK_DBG_DEFAULT (0x00000000U)
#define TXM_PEAK_DBG_RD_MASK (0x0007ffffU)
#define TXM_PEAK_DBG_WR_MASK (0x00000000U)


///< Peak Value Counter N1
#define TXM_PEAK_DBG_TXM_PK_CNT_N1_BF_OFF ( 0)
#define TXM_PEAK_DBG_TXM_PK_CNT_N1_BF_WID (17)
#define TXM_PEAK_DBG_TXM_PK_CNT_N1_BF_MSK (0x0001FFFF)
#define TXM_PEAK_DBG_TXM_PK_CNT_N1_BF_DEF (0x00000000)

///< Peak State Counter N1
#define TXM_PEAK_DBG_TXM_PK_ST_N1_BF_OFF (17)
#define TXM_PEAK_DBG_TXM_PK_ST_N1_BF_WID ( 1)
#define TXM_PEAK_DBG_TXM_PK_ST_N1_BF_MSK (0x00020000)
#define TXM_PEAK_DBG_TXM_PK_ST_N1_BF_DEF (0x00000000)

///< TDD Meas Link Status 1== Active
#define TXM_PEAK_DBG_TXM_MEAS_LINK_STAT_BF_OFF (18)
#define TXM_PEAK_DBG_TXM_MEAS_LINK_STAT_BF_WID ( 1)
#define TXM_PEAK_DBG_TXM_MEAS_LINK_STAT_BF_MSK (0x00040000)
#define TXM_PEAK_DBG_TXM_MEAS_LINK_STAT_BF_DEF (0x00000000)


/** @brief TXM_REG_TXM_INT_STATUS register description at address offset 0x28
  *
  * Register default value:        0x00000000
  * Register full path in IP: txm/reg/TXM_INT_STATUS
  * TXM Interrupt Status Register
  */

typedef union {
  struct {
    uint32_t PEAK_VALUE_ALARM : 1;
    ///< Indicates that the peak value  measurment exceed the user defined
    ///< limit.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} txm_int_stat_reg_t;

#define TXM_INT_STAT_DEFAULT (0x00000000U)
#define TXM_INT_STAT_RD_MASK (0x00000001U)
#define TXM_INT_STAT_WR_MASK (0x00000000U)


///< Indicates that the peak value  measurment exceed the user defined
///< limit.
#define TXM_INT_STAT_PEAK_VAL_ALARM_BF_OFF ( 0)
#define TXM_INT_STAT_PEAK_VAL_ALARM_BF_WID ( 1)
#define TXM_INT_STAT_PEAK_VAL_ALARM_BF_MSK (0x00000001)
#define TXM_INT_STAT_PEAK_VAL_ALARM_BF_DEF (0x00000000)


/** @brief TXM_REG_TXM_INT_HI_EN register description at address offset 0x2c
  *
  * Register default value:        0x00000000
  * Register full path in IP: txm/reg/TXM_INT_HI_EN
  * TXM Interrupt High Enable Register
  */

typedef union {
  struct {
    uint32_t PEAK_VALUE : 1;
    ///< Register error interrupt high enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} txm_int_hi_en_reg_t;

#define TXM_INT_HI_EN_DEFAULT (0x00000000U)
#define TXM_INT_HI_EN_RD_MASK (0x00000001U)
#define TXM_INT_HI_EN_WR_MASK (0x00000001U)


///< Register error interrupt high enable
#define TXM_INT_HI_EN_PEAK_VAL_BF_OFF ( 0)
#define TXM_INT_HI_EN_PEAK_VAL_BF_WID ( 1)
#define TXM_INT_HI_EN_PEAK_VAL_BF_MSK (0x00000001)
#define TXM_INT_HI_EN_PEAK_VAL_BF_DEF (0x00000000)


/** @brief TXM_REG_TXM_INT_LO_EN register description at address offset 0x30
  *
  * Register default value:        0x00000000
  * Register full path in IP: txm/reg/TXM_INT_LO_EN
  * TXM Interrupt Low Enable Register
  */

typedef union {
  struct {
    uint32_t PEAK_VALUE : 1;
    ///< Register error interrupt low enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} txm_int_lo_en_reg_t;

#define TXM_INT_LO_EN_DEFAULT (0x00000000U)
#define TXM_INT_LO_EN_RD_MASK (0x00000001U)
#define TXM_INT_LO_EN_WR_MASK (0x00000001U)


///< Register error interrupt low enable
#define TXM_INT_LO_EN_PEAK_VAL_BF_OFF ( 0)
#define TXM_INT_LO_EN_PEAK_VAL_BF_WID ( 1)
#define TXM_INT_LO_EN_PEAK_VAL_BF_MSK (0x00000001)
#define TXM_INT_LO_EN_PEAK_VAL_BF_DEF (0x00000000)


/** @brief TXM_REG_TXM_INT_CLEAR register description at address offset 0x34
  *
  * Register default value:        0x00000000
  * Register full path in IP: txm/reg/TXM_INT_CLEAR
  * TXM_Interrupt Clear Register
  */

typedef union {
  struct {
    uint32_t PEAK_VALUE : 1;
    ///< Register error interrupt clear
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} txm_int_clr_reg_t;

#define TXM_INT_CLR_DEFAULT (0x00000000U)
#define TXM_INT_CLR_RD_MASK (0x00000001U)
#define TXM_INT_CLR_WR_MASK (0x00000001U)


///< Register error interrupt clear
#define TXM_INT_CLR_PEAK_VAL_BF_OFF ( 0)
#define TXM_INT_CLR_PEAK_VAL_BF_WID ( 1)
#define TXM_INT_CLR_PEAK_VAL_BF_MSK (0x00000001)
#define TXM_INT_CLR_PEAK_VAL_BF_DEF (0x00000000)


/** @brief TXM_REG_TXM_INT_FORCE register description at address offset 0x38
  *
  * Register default value:        0x00000000
  * Register full path in IP: txm/reg/TXM_INT_FORCE
  * TXM Interrupt Force Register
  */

typedef union {
  struct {
    uint32_t PEAK_VALUE : 1;
    ///< Register error interrupt force
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} txm_int_force_reg_t;

#define TXM_INT_FORCE_DEFAULT (0x00000000U)
#define TXM_INT_FORCE_RD_MASK (0x00000001U)
#define TXM_INT_FORCE_WR_MASK (0x00000001U)


///< Register error interrupt force
#define TXM_INT_FORCE_PEAK_VAL_BF_OFF ( 0)
#define TXM_INT_FORCE_PEAK_VAL_BF_WID ( 1)
#define TXM_INT_FORCE_PEAK_VAL_BF_MSK (0x00000001)
#define TXM_INT_FORCE_PEAK_VAL_BF_DEF (0x00000000)


/** @brief TXM_REG_TXM_APB_BRIDGE_STATUS register description at address offset 0x3c
  *
  * Register default value:        0x00010000
  * Register full path in IP: txm/reg/TXM_APB_BRIDGE_STATUS
  * APB Bridge Status Register
  */

typedef union {
  struct {
    uint32_t TIMEOUT_VALUE : 20;
    ///< Number of core clocks to wait before timing out an APB request
    ///< AccessType="RW/L" BitOffset="0" ResetValue="0x10000"
    uint32_t REVISION : 8;
    ///< Module Revision Number
    ///< AccessType="RO" BitOffset="20" ResetValue="0x0"
    uint32_t SW_LOCK_CTRL : 1;
    ///< Block software writes to timeout_value if set
    ///< AccessType="RW/1S/V/L" BitOffset="28" ResetValue="0x0"
    uint32_t UNSOL_ACK : 1;
    ///< An unsolicited acknowledge was received
    ///< AccessType="RW/1C/V" BitOffset="29" ResetValue="0x0"
    uint32_t ACK_ERROR : 1;
    ///< Acknowledgement had error bit set
    ///< AccessType="RW/1C/V" BitOffset="30" ResetValue="0x0"
    uint32_t TIMEOUT : 1;
    ///< An APB request has timed out
    ///< AccessType="RW/1C/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} txm_apb_brdg_stat_reg_t;

#define TXM_APB_BRDG_STAT_DEFAULT (0x00010000U)
#define TXM_APB_BRDG_STAT_RD_MASK (0xffffffffU)
#define TXM_APB_BRDG_STAT_WR_MASK (0xf00fffffU)


///< Number of core clocks to wait before timing out an APB request
#define TXM_APB_BRDG_STAT_TIMEOUT_VAL_BF_OFF ( 0)
#define TXM_APB_BRDG_STAT_TIMEOUT_VAL_BF_WID (20)
#define TXM_APB_BRDG_STAT_TIMEOUT_VAL_BF_MSK (0x000FFFFF)
#define TXM_APB_BRDG_STAT_TIMEOUT_VAL_BF_DEF (0x00010000)

///< Module Revision Number
#define TXM_APB_BRDG_STAT_REVISION_BF_OFF (20)
#define TXM_APB_BRDG_STAT_REVISION_BF_WID ( 8)
#define TXM_APB_BRDG_STAT_REVISION_BF_MSK (0x0FF00000)
#define TXM_APB_BRDG_STAT_REVISION_BF_DEF (0x00000000)

///< Block software writes to timeout_value if set
#define TXM_APB_BRDG_STAT_SW_LOCK_CTRL_BF_OFF (28)
#define TXM_APB_BRDG_STAT_SW_LOCK_CTRL_BF_WID ( 1)
#define TXM_APB_BRDG_STAT_SW_LOCK_CTRL_BF_MSK (0x10000000)
#define TXM_APB_BRDG_STAT_SW_LOCK_CTRL_BF_DEF (0x00000000)

///< An unsolicited acknowledge was received
#define TXM_APB_BRDG_STAT_UNSOL_ACK_BF_OFF (29)
#define TXM_APB_BRDG_STAT_UNSOL_ACK_BF_WID ( 1)
#define TXM_APB_BRDG_STAT_UNSOL_ACK_BF_MSK (0x20000000)
#define TXM_APB_BRDG_STAT_UNSOL_ACK_BF_DEF (0x00000000)

///< Acknowledgement had error bit set
#define TXM_APB_BRDG_STAT_ACK_ERR_BF_OFF (30)
#define TXM_APB_BRDG_STAT_ACK_ERR_BF_WID ( 1)
#define TXM_APB_BRDG_STAT_ACK_ERR_BF_MSK (0x40000000)
#define TXM_APB_BRDG_STAT_ACK_ERR_BF_DEF (0x00000000)

///< An APB request has timed out
#define TXM_APB_BRDG_STAT_TIMEOUT_BF_OFF (31)
#define TXM_APB_BRDG_STAT_TIMEOUT_BF_WID ( 1)
#define TXM_APB_BRDG_STAT_TIMEOUT_BF_MSK (0x80000000)
#define TXM_APB_BRDG_STAT_TIMEOUT_BF_DEF (0x00000000)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define TXM_SCRATCH_REG(_BASE) ((txm_scratch_reg_t*) TXM_SCRATCH_ADR(_BASE))
#define TXM_PEAK_VAL_INTERVAL_REG(_BASE) ((txm_peak_val_interval_reg_t*) TXM_PEAK_VAL_INTERVAL_ADR(_BASE))
#define TXM_PEAK_VAL_LIMIT_REG(_BASE) ((txm_peak_val_limit_reg_t*) TXM_PEAK_VAL_LIMIT_ADR(_BASE))
#define TXM_EN_REG(_BASE) ((txm_en_reg_t*) TXM_EN_ADR(_BASE))
#define TXM_PEAK_VAL_MEAS_OUT_REG(_BASE) ((txm_peak_val_meas_out_reg_t*) TXM_PEAK_VAL_MEAS_OUT_ADR(_BASE))
#define TXM_PEAK_VAL_ALARM_CNT_REG(_BASE) ((txm_peak_val_alarm_cnt_reg_t*) TXM_PEAK_VAL_ALARM_CNT_ADR(_BASE))
#define TXM_GLOBAL_PEAK_CLR_REG(_BASE) ((txm_global_peak_clr_reg_t*) TXM_GLOBAL_PEAK_CLR_ADR(_BASE))
#define TXM_GLOBAL_PEAK_VAL_MEAS_REG(_BASE) ((txm_global_peak_val_meas_reg_t*) TXM_GLOBAL_PEAK_VAL_MEAS_ADR(_BASE))
#define TXM_GLOBAL_PEAK_BFN_CNT_REG(_BASE) ((txm_global_peak_bfn_cnt_reg_t*) TXM_GLOBAL_PEAK_BFN_CNT_ADR(_BASE))
#define TXM_PEAK_DBG_REG(_BASE) ((txm_peak_dbg_reg_t*) TXM_PEAK_DBG_ADR(_BASE))
#define TXM_INT_STAT_REG(_BASE) ((txm_int_stat_reg_t*) TXM_INT_STAT_ADR(_BASE))
#define TXM_INT_HI_EN_REG(_BASE) ((txm_int_hi_en_reg_t*) TXM_INT_HI_EN_ADR(_BASE))
#define TXM_INT_LO_EN_REG(_BASE) ((txm_int_lo_en_reg_t*) TXM_INT_LO_EN_ADR(_BASE))
#define TXM_INT_CLR_REG(_BASE) ((txm_int_clr_reg_t*) TXM_INT_CLR_ADR(_BASE))
#define TXM_INT_FORCE_REG(_BASE) ((txm_int_force_reg_t*) TXM_INT_FORCE_ADR(_BASE))
#define TXM_APB_BRDG_STAT_REG(_BASE) ((txm_apb_brdg_stat_reg_t*) TXM_APB_BRDG_STAT_ADR(_BASE))

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    txm_scratch_reg_t TXM_SCRATCH;     /*< Address offset = 0x0 */
    txm_peak_val_interval_reg_t TXM_PEAK_VAL_INTERVAL; /*< Address offset = 0x4 */
    txm_peak_val_limit_reg_t TXM_PEAK_VAL_LIMIT; /*< Address offset = 0x8 */
    txm_en_reg_t TXM_EN;      /*< Address offset = 0xc */
    txm_peak_val_meas_out_reg_t TXM_PEAK_VAL_MEAS_OUT; /*< Address offset = 0x10 */
    txm_peak_val_alarm_cnt_reg_t TXM_PEAK_VAL_ALARM_CNT; /*< Address offset = 0x14 */
    txm_global_peak_clr_reg_t TXM_GLOBAL_PEAK_CLR; /*< Address offset = 0x18 */
    txm_global_peak_val_meas_reg_t TXM_GLOBAL_PEAK_VAL_MEAS; /*< Address offset = 0x1c */
    txm_global_peak_bfn_cnt_reg_t TXM_GLOBAL_PEAK_BFN_CNT; /*< Address offset = 0x20 */
    txm_peak_dbg_reg_t TXM_PEAK_DBG;  /*< Address offset = 0x24 */
    txm_int_stat_reg_t TXM_INT_STAT;  /*< Address offset = 0x28 */
    txm_int_hi_en_reg_t TXM_INT_HI_EN;   /*< Address offset = 0x2c */
    txm_int_lo_en_reg_t TXM_INT_LO_EN;   /*< Address offset = 0x30 */
    txm_int_clr_reg_t TXM_INT_CLR;   /*< Address offset = 0x34 */
    txm_int_force_reg_t TXM_INT_FORCE;   /*< Address offset = 0x38 */
    txm_apb_brdg_stat_reg_t TXM_APB_BRDG_STAT; /*< Address offset = 0x3c */
} txm_t;     // size: 0x0040

// AddressSpace struct pointer
//
#define TRX_ANT0_TXM0    ((txm_t*) TRX_ANT0_TXM0_BASE)
#define TRX_ANT0_TXM1    ((txm_t*) TRX_ANT0_TXM1_BASE)
#define TRX_ANT1_TXM0    ((txm_t*) TRX_ANT1_TXM0_BASE)
#define TRX_ANT1_TXM1    ((txm_t*) TRX_ANT1_TXM1_BASE)
#define TRX_ANT2_TXM0    ((txm_t*) TRX_ANT2_TXM0_BASE)
#define TRX_ANT2_TXM1    ((txm_t*) TRX_ANT2_TXM1_BASE)
#define TRX_ANT3_TXM0    ((txm_t*) TRX_ANT3_TXM0_BASE)
#define TRX_ANT3_TXM1    ((txm_t*) TRX_ANT3_TXM1_BASE)
#define TRX_ANT4_TXM0    ((txm_t*) TRX_ANT4_TXM0_BASE)
#define TRX_ANT4_TXM1    ((txm_t*) TRX_ANT4_TXM1_BASE)
#define TRX_ANT5_TXM0    ((txm_t*) TRX_ANT5_TXM0_BASE)
#define TRX_ANT5_TXM1    ((txm_t*) TRX_ANT5_TXM1_BASE)
#define TRX_ANT6_TXM0    ((txm_t*) TRX_ANT6_TXM0_BASE)
#define TRX_ANT6_TXM1    ((txm_t*) TRX_ANT6_TXM1_BASE)
#define TRX_ANT7_TXM0    ((txm_t*) TRX_ANT7_TXM0_BASE)
#define TRX_ANT7_TXM1    ((txm_t*) TRX_ANT7_TXM1_BASE)

// ******************************************* /Address Space

#endif      // _TXM_H_

