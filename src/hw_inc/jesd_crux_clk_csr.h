#ifndef _JESD_CRUX_CLK_CSR_H_
#define _JESD_CRUX_CLK_CSR_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define DLNK_JESD0_CRUX_CLK_CSR_BASE  ( 0x0670c000 )
#define DLNK_JESD1_CRUX_CLK_CSR_BASE  ( 0x06f0c000 )
#define DLNK_JESD2_CRUX_CLK_CSR_BASE  ( 0x0770c000 )
#define DLNK_JESD3_CRUX_CLK_CSR_BASE  ( 0x07f0c000 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define JESD_CRUX_CLK_CSR_SCRATCH_OFFSET ( 0x00000000U )
#define JESD_CRUX_CLK_CSR_APB_BRDG_STAT_OFFSET ( 0x00000004U )
#define JESD_CRUX_CLK_CSR_RX_STRM_CFG_OFFSET ( 0x00000010U )
#define JESD_CRUX_CLK_CSR_RX_MEM_STRM_CFG_OFFSET ( 0x00000014U )
#define JESD_CRUX_CLK_CSR_RX_DECOMP_TOP_CTL_OFFSET ( 0x00000018U )
#define JESD_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL_OFFSET ( 0x0000001cU )
#define JESD_CRUX_CLK_CSR_RSB_DATA_SRC_CFG_OFFSET ( 0x00000020U )
#define JESD_CRUX_CLK_CSR_RSB_DATA_SRC_TIMER_OFFSET ( 0x00000024U )
#define JESD_CRUX_CLK_CSR_RSB_DATA_SRC_START_OFFSET ( 0x00000028U )
#define JESD_CRUX_CLK_CSR_RSB_FILL_LVL_CLR_OFFSET ( 0x0000002cU )
#define JESD_CRUX_CLK_CSR_RSB_DATA_CAP_FRZ_EN_OFFSET ( 0x00000030U )
#define JESD_CRUX_CLK_CSR_RSB_OVRFLW_STICKY_STS_OFFSET ( 0x00000034U )
#define JESD_CRUX_CLK_CSR_RSB_UNDERFLW_STICKY_STS_OFFSET ( 0x00000038U )
#define JESD_CRUX_CLK_CSR_RSB_INDIR_ADDR_OFFSET ( 0x00000040U )
#define JESD_CRUX_CLK_CSR_RSB_WR_RD_CTL_OFFSET ( 0x00000044U )
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA0_OFFSET ( 0x00000100U )
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA1_OFFSET ( 0x00000104U )
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA2_OFFSET ( 0x00000108U )
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA3_OFFSET ( 0x0000010cU )
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA4_OFFSET ( 0x00000110U )
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA5_OFFSET ( 0x00000114U )
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA6_OFFSET ( 0x00000118U )
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA7_OFFSET ( 0x0000011cU )
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA8_OFFSET ( 0x00000120U )
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA9_OFFSET ( 0x00000124U )
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA10_OFFSET ( 0x00000128U )
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA11_OFFSET ( 0x0000012cU )
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA12_OFFSET ( 0x00000130U )
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA13_OFFSET ( 0x00000134U )
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA14_OFFSET ( 0x00000138U )
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA15_OFFSET ( 0x0000013cU )
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA0_OFFSET ( 0x00000140U )
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA1_OFFSET ( 0x00000144U )
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA2_OFFSET ( 0x00000148U )
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA3_OFFSET ( 0x0000014cU )
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA4_OFFSET ( 0x00000150U )
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA5_OFFSET ( 0x00000154U )
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA6_OFFSET ( 0x00000158U )
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA7_OFFSET ( 0x0000015cU )
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA8_OFFSET ( 0x00000160U )
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA9_OFFSET ( 0x00000164U )
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA10_OFFSET ( 0x00000168U )
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA11_OFFSET ( 0x0000016cU )
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA12_OFFSET ( 0x00000170U )
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA13_OFFSET ( 0x00000174U )
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA14_OFFSET ( 0x00000178U )
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA15_OFFSET ( 0x0000017cU )
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL0_OFFSET ( 0x00000180U )
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL1_OFFSET ( 0x00000184U )
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL2_OFFSET ( 0x00000188U )
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL3_OFFSET ( 0x0000018cU )
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL4_OFFSET ( 0x00000190U )
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL5_OFFSET ( 0x00000194U )
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL6_OFFSET ( 0x00000198U )
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL7_OFFSET ( 0x0000019cU )
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL8_OFFSET ( 0x000001a0U )
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL9_OFFSET ( 0x000001a4U )
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL10_OFFSET ( 0x000001a8U )
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL11_OFFSET ( 0x000001acU )
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL12_OFFSET ( 0x000001b0U )
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL13_OFFSET ( 0x000001b4U )
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL14_OFFSET ( 0x000001b8U )
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL15_OFFSET ( 0x000001bcU )
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL0_OFFSET ( 0x000001c0U )
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL1_OFFSET ( 0x000001c4U )
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL2_OFFSET ( 0x000001c8U )
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL3_OFFSET ( 0x000001ccU )
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL4_OFFSET ( 0x000001d0U )
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL5_OFFSET ( 0x000001d4U )
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL6_OFFSET ( 0x000001d8U )
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL7_OFFSET ( 0x000001dcU )
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL8_OFFSET ( 0x000001e0U )
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL9_OFFSET ( 0x000001e4U )
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL10_OFFSET ( 0x000001e8U )
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL11_OFFSET ( 0x000001ecU )
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL12_OFFSET ( 0x000001f0U )
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL13_OFFSET ( 0x000001f4U )
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL14_OFFSET ( 0x000001f8U )
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL15_OFFSET ( 0x000001fcU )
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL0_OFFSET ( 0x00000200U )
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL1_OFFSET ( 0x00000204U )
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL2_OFFSET ( 0x00000208U )
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL3_OFFSET ( 0x0000020cU )
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL4_OFFSET ( 0x00000210U )
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL5_OFFSET ( 0x00000214U )
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL6_OFFSET ( 0x00000218U )
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL7_OFFSET ( 0x0000021cU )
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL8_OFFSET ( 0x00000220U )
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL9_OFFSET ( 0x00000224U )
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL10_OFFSET ( 0x00000228U )
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL11_OFFSET ( 0x0000022cU )
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL12_OFFSET ( 0x00000230U )
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL13_OFFSET ( 0x00000234U )
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL14_OFFSET ( 0x00000238U )
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL15_OFFSET ( 0x0000023cU )
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL0_OFFSET ( 0x00000240U )
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL1_OFFSET ( 0x00000244U )
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL2_OFFSET ( 0x00000248U )
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL3_OFFSET ( 0x0000024cU )
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL4_OFFSET ( 0x00000250U )
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL5_OFFSET ( 0x00000254U )
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL6_OFFSET ( 0x00000258U )
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL7_OFFSET ( 0x0000025cU )
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL8_OFFSET ( 0x00000260U )
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL9_OFFSET ( 0x00000264U )
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL10_OFFSET ( 0x00000268U )
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL11_OFFSET ( 0x0000026cU )
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL12_OFFSET ( 0x00000270U )
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL13_OFFSET ( 0x00000274U )
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL14_OFFSET ( 0x00000278U )
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL15_OFFSET ( 0x0000027cU )
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS0_OFFSET ( 0x00000280U )
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS1_OFFSET ( 0x00000284U )
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS2_OFFSET ( 0x00000288U )
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS3_OFFSET ( 0x0000028cU )
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS4_OFFSET ( 0x00000290U )
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS5_OFFSET ( 0x00000294U )
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS6_OFFSET ( 0x00000298U )
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS7_OFFSET ( 0x0000029cU )
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS8_OFFSET ( 0x000002a0U )
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS9_OFFSET ( 0x000002a4U )
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS10_OFFSET ( 0x000002a8U )
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS11_OFFSET ( 0x000002acU )
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS12_OFFSET ( 0x000002b0U )
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS13_OFFSET ( 0x000002b4U )
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS14_OFFSET ( 0x000002b8U )
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS15_OFFSET ( 0x000002bcU )
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL0_OFFSET ( 0x00000300U )
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL1_OFFSET ( 0x00000304U )
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL2_OFFSET ( 0x00000308U )
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL3_OFFSET ( 0x0000030cU )
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL4_OFFSET ( 0x00000310U )
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL5_OFFSET ( 0x00000314U )
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL6_OFFSET ( 0x00000318U )
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL7_OFFSET ( 0x0000031cU )
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL8_OFFSET ( 0x00000320U )
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL9_OFFSET ( 0x00000324U )
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL10_OFFSET ( 0x00000328U )
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL11_OFFSET ( 0x0000032cU )
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL12_OFFSET ( 0x00000330U )
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL13_OFFSET ( 0x00000334U )
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL14_OFFSET ( 0x00000338U )
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL15_OFFSET ( 0x0000033cU )
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL16_OFFSET ( 0x00000340U )
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL17_OFFSET ( 0x00000344U )
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL18_OFFSET ( 0x00000348U )
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL19_OFFSET ( 0x0000034cU )
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL20_OFFSET ( 0x00000350U )
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL21_OFFSET ( 0x00000354U )
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL22_OFFSET ( 0x00000358U )
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL23_OFFSET ( 0x0000035cU )
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL24_OFFSET ( 0x00000360U )
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL25_OFFSET ( 0x00000364U )
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL26_OFFSET ( 0x00000368U )
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL27_OFFSET ( 0x0000036cU )
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL28_OFFSET ( 0x00000370U )
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL29_OFFSET ( 0x00000374U )
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL30_OFFSET ( 0x00000378U )
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL31_OFFSET ( 0x0000037cU )
#define JESD_CRUX_CLK_CSR_RX_DECOMP_EXP_CTL0_OFFSET ( 0x00000380U )
#define JESD_CRUX_CLK_CSR_RX_DECOMP_EXP_CTL1_OFFSET ( 0x00000384U )
#define JESD_CRUX_CLK_CSR_RX_DECOMP_EXP_CTL2_OFFSET ( 0x00000388U )
#define JESD_CRUX_CLK_CSR_RX_DECOMP_EXP_CTL3_OFFSET ( 0x0000038cU )
#define JESD_CRUX_CLK_CSR_RX_DECOMP_EXP_CTL4_OFFSET ( 0x00000390U )
#define JESD_CRUX_CLK_CSR_RX_DECOMP_EXP_CTL5_OFFSET ( 0x00000394U )
#define JESD_CRUX_CLK_CSR_RX_DECOMP_EXP_CTL6_OFFSET ( 0x00000398U )
#define JESD_CRUX_CLK_CSR_RX_DECOMP_EXP_CTL7_OFFSET ( 0x0000039cU )
#define JESD_CRUX_CLK_CSR_TX_VMLGA_OFFSET ( 0x00001000U )
#define JESD_CRUX_CLK_CSR_TX_VNSH_OFFSET ( 0x00001004U )
#define JESD_CRUX_CLK_CSR_TX_TOP_OFFSET ( 0x00001008U )
#define JESD_CRUX_CLK_CSR_TX_NUM_VALID_STR_OFFSET ( 0x0000100cU )
#define JESD_CRUX_CLK_CSR_TX_TSB_TRIG_EN_OFFSET ( 0x00001010U )
#define JESD_CRUX_CLK_CSR_TX_TSB_BUF_FILL_STAT_OFFSET ( 0x00001014U )
#define JESD_CRUX_CLK_CSR_TX_TSB_BUF_OVERFLOW_STAT_OFFSET ( 0x00001018U )
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WR_OFFSET ( 0x00001020U )
#define JESD_CRUX_CLK_CSR_TX_APB_MEM_WADDR_OFFSET ( 0x00001024U )
#define JESD_CRUX_CLK_CSR_TX_TSB_FULL_WATER_MARK_OFFSET ( 0x00001030U )
#define JESD_CRUX_CLK_CSR_TX_TSB_FULL_STAT_OFFSET ( 0x00001034U )
#define JESD_CRUX_CLK_CSR_TX_TSB_CFG_OFFSET ( 0x00001038U )
#define JESD_CRUX_CLK_CSR_TX_ECC_GEN_DIS_OFFSET ( 0x0000103cU )
#define JESD_CRUX_CLK_CSR_TX_TSB_CAP_MODE_CLR_WRPTR_OFFSET ( 0x00001040U )
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL0_OFFSET ( 0x00001100U )
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL1_OFFSET ( 0x00001104U )
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL2_OFFSET ( 0x00001108U )
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL3_OFFSET ( 0x0000110cU )
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL4_OFFSET ( 0x00001110U )
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL5_OFFSET ( 0x00001114U )
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL6_OFFSET ( 0x00001118U )
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL7_OFFSET ( 0x0000111cU )
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL8_OFFSET ( 0x00001120U )
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL9_OFFSET ( 0x00001124U )
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL10_OFFSET ( 0x00001128U )
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL11_OFFSET ( 0x0000112cU )
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL12_OFFSET ( 0x00001130U )
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL13_OFFSET ( 0x00001134U )
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL14_OFFSET ( 0x00001138U )
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL15_OFFSET ( 0x0000113cU )
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL16_OFFSET ( 0x00001140U )
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL17_OFFSET ( 0x00001144U )
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL18_OFFSET ( 0x00001148U )
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL19_OFFSET ( 0x0000114cU )
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL20_OFFSET ( 0x00001150U )
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL21_OFFSET ( 0x00001154U )
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL22_OFFSET ( 0x00001158U )
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL23_OFFSET ( 0x0000115cU )
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL24_OFFSET ( 0x00001160U )
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL25_OFFSET ( 0x00001164U )
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL26_OFFSET ( 0x00001168U )
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL27_OFFSET ( 0x0000116cU )
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL28_OFFSET ( 0x00001170U )
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL29_OFFSET ( 0x00001174U )
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL30_OFFSET ( 0x00001178U )
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL31_OFFSET ( 0x0000117cU )
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR0_OFFSET ( 0x00001200U )
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR1_OFFSET ( 0x00001204U )
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR2_OFFSET ( 0x00001208U )
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR3_OFFSET ( 0x0000120cU )
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR4_OFFSET ( 0x00001210U )
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR5_OFFSET ( 0x00001214U )
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR6_OFFSET ( 0x00001218U )
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR7_OFFSET ( 0x0000121cU )
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR8_OFFSET ( 0x00001220U )
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR9_OFFSET ( 0x00001224U )
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR10_OFFSET ( 0x00001228U )
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR11_OFFSET ( 0x0000122cU )
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR12_OFFSET ( 0x00001230U )
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR13_OFFSET ( 0x00001234U )
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR14_OFFSET ( 0x00001238U )
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR15_OFFSET ( 0x0000123cU )
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE0_OFFSET ( 0x00001240U )
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE1_OFFSET ( 0x00001244U )
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE2_OFFSET ( 0x00001248U )
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE3_OFFSET ( 0x0000124cU )
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE4_OFFSET ( 0x00001250U )
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE5_OFFSET ( 0x00001254U )
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE6_OFFSET ( 0x00001258U )
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE7_OFFSET ( 0x0000125cU )
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE8_OFFSET ( 0x00001260U )
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE9_OFFSET ( 0x00001264U )
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE10_OFFSET ( 0x00001268U )
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE11_OFFSET ( 0x0000126cU )
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE12_OFFSET ( 0x00001270U )
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE13_OFFSET ( 0x00001274U )
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE14_OFFSET ( 0x00001278U )
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE15_OFFSET ( 0x0000127cU )
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR0_OFFSET ( 0x00001280U )
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR1_OFFSET ( 0x00001284U )
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR2_OFFSET ( 0x00001288U )
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR3_OFFSET ( 0x0000128cU )
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR4_OFFSET ( 0x00001290U )
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR5_OFFSET ( 0x00001294U )
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR6_OFFSET ( 0x00001298U )
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR7_OFFSET ( 0x0000129cU )
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR8_OFFSET ( 0x000012a0U )
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR9_OFFSET ( 0x000012a4U )
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR10_OFFSET ( 0x000012a8U )
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR11_OFFSET ( 0x000012acU )
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR12_OFFSET ( 0x000012b0U )
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR13_OFFSET ( 0x000012b4U )
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR14_OFFSET ( 0x000012b8U )
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR15_OFFSET ( 0x000012bcU )
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA0_OFFSET ( 0x000012c0U )
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA1_OFFSET ( 0x000012c4U )
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA2_OFFSET ( 0x000012c8U )
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA3_OFFSET ( 0x000012ccU )
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA4_OFFSET ( 0x000012d0U )
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA5_OFFSET ( 0x000012d4U )
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA6_OFFSET ( 0x000012d8U )
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA7_OFFSET ( 0x000012dcU )
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA8_OFFSET ( 0x000012e0U )
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA9_OFFSET ( 0x000012e4U )
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA10_OFFSET ( 0x000012e8U )
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA11_OFFSET ( 0x000012ecU )
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA12_OFFSET ( 0x000012f0U )
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA13_OFFSET ( 0x000012f4U )
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA14_OFFSET ( 0x000012f8U )
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA15_OFFSET ( 0x000012fcU )
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL0_OFFSET ( 0x00001300U )
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL1_OFFSET ( 0x00001304U )
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL2_OFFSET ( 0x00001308U )
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL3_OFFSET ( 0x0000130cU )
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL4_OFFSET ( 0x00001310U )
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL5_OFFSET ( 0x00001314U )
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL6_OFFSET ( 0x00001318U )
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL7_OFFSET ( 0x0000131cU )
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL8_OFFSET ( 0x00001320U )
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL9_OFFSET ( 0x00001324U )
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL10_OFFSET ( 0x00001328U )
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL11_OFFSET ( 0x0000132cU )
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL12_OFFSET ( 0x00001330U )
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL13_OFFSET ( 0x00001334U )
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL14_OFFSET ( 0x00001338U )
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL15_OFFSET ( 0x0000133cU )
#define JESD_CRUX_CLK_CSR_NSIP_HALT_OFFSET ( 0x00002000U )
#define JESD_CRUX_CLK_CSR_LPBK_CTL_OFFSET ( 0x00002004U )
#define JESD_CRUX_CLK_CSR_NSIP_HALT_DONE_OFFSET ( 0x00002008U )
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MEA_EN_OFFSET ( 0x00002010U )
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MEA_WNDW_OFFSET ( 0x00002014U )
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MIN_ERR_THRSH_OFFSET ( 0x00002018U )
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MAX_ERR_THRSH_OFFSET ( 0x0000201cU )
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MEA_TIMER_OFFSET ( 0x00002020U )
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_CNT_OFFSET ( 0x00002024U )
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MIN_CNT_OFFSET ( 0x00002028U )
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MAX_CNT_OFFSET ( 0x0000202cU )
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MEA_EN_OFFSET ( 0x00002030U )
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MEA_WNDW_OFFSET ( 0x00002034U )
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MAX_ERR_THRSH_OFFSET ( 0x00002038U )
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_PEAK_MAX_ERR_THRSH_OFFSET ( 0x0000203cU )
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MEA_TIMER_OFFSET ( 0x00002040U )
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_CNT_OFFSET ( 0x00002050U )
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MAX_CNT_OFFSET ( 0x00002054U )
#define JESD_CRUX_CLK_CSR_RX_CRUX_PEAK_STALL_CNT_OFFSET ( 0x00002058U )
#define JESD_CRUX_CLK_CSR_RX_CRUX_PEAK_STALL_MAX_CNT_OFFSET ( 0x0000205cU )
#define JESD_CRUX_CLK_CSR_RX_STRM_RCV_FLIT_CNT_OFFSET ( 0x00002060U )
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MEA_EN_OFFSET ( 0x00002070U )
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MEA_WNDW_OFFSET ( 0x00002074U )
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MIN_ERR_THRSH_OFFSET ( 0x00002078U )
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MAX_ERR_THRSH_OFFSET ( 0x0000207cU )
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MEA_TIMER_OFFSET ( 0x00002080U )
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_CNT_OFFSET ( 0x00002084U )
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MIN_CNT_OFFSET ( 0x00002088U )
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MAX_CNT_OFFSET ( 0x0000208cU )
#define JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_EN_OFFSET ( 0x00002090U )
#define JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_CAP_EN_OFFSET ( 0x00002094U )
#define JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_STS_CLR_OFFSET ( 0x00002098U )
#define JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_CFG_OFFSET ( 0x0000209cU )
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_SIG_SEL_OFFSET ( 0x000020a0U )
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_VLD_OFFSET ( 0x000020a4U )
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_ERR_STS_OFFSET ( 0x000020b0U )
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_INTR_HIGH_EN_OFFSET ( 0x000020b4U )
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_INTR_LOW_EN_OFFSET ( 0x000020b8U )
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_ALM_EN_OFFSET ( 0x000020bcU )
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_ERR_CLR_OFFSET ( 0x000020c0U )
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_ERR_FRC_OFFSET ( 0x000020c4U )
#define JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_ERR_STS_OFFSET ( 0x000020d0U )
#define JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_INTR_HIGH_EN_OFFSET ( 0x000020d4U )
#define JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_INTR_LOW_EN_OFFSET ( 0x000020d8U )
#define JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_ERR_CLR_OFFSET ( 0x000020dcU )
#define JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_ERR_FRC_OFFSET ( 0x000020e0U )
#define JESD_CRUX_CLK_CSR_CRUX_CLK_NSIP_ALRM_EN_OFFSET ( 0x000020f0U )
#define JESD_CRUX_CLK_CSR_CRUX_CLK_RSB_ECC_ERR_CFG_OFFSET ( 0x000020f4U )
#define JESD_CRUX_CLK_CSR_CRUX_CLK_RSB_ECC_ERR_FRC_OFFSET ( 0x000020f8U )
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_EN_OFFSET ( 0x00002100U )
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_CLR_OFFSET ( 0x00002104U )
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_IDX_OFFSET ( 0x00002108U )
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_RDATA_OFFSET ( 0x0000210cU )
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT0_OFFSET ( 0x00002200U )
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT1_OFFSET ( 0x00002204U )
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT2_OFFSET ( 0x00002208U )
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT3_OFFSET ( 0x0000220cU )
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT4_OFFSET ( 0x00002210U )
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT5_OFFSET ( 0x00002214U )
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT6_OFFSET ( 0x00002218U )
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT7_OFFSET ( 0x0000221cU )
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT8_OFFSET ( 0x00002220U )
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT9_OFFSET ( 0x00002224U )
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT10_OFFSET ( 0x00002228U )
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT11_OFFSET ( 0x0000222cU )
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT12_OFFSET ( 0x00002230U )
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT13_OFFSET ( 0x00002234U )
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT14_OFFSET ( 0x00002238U )
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT15_OFFSET ( 0x0000223cU )
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT0_OFFSET ( 0x00002240U )
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT1_OFFSET ( 0x00002244U )
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT2_OFFSET ( 0x00002248U )
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT3_OFFSET ( 0x0000224cU )
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT4_OFFSET ( 0x00002250U )
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT5_OFFSET ( 0x00002254U )
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT6_OFFSET ( 0x00002258U )
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT7_OFFSET ( 0x0000225cU )
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT8_OFFSET ( 0x00002260U )
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT9_OFFSET ( 0x00002264U )
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT10_OFFSET ( 0x00002268U )
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT11_OFFSET ( 0x0000226cU )
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT12_OFFSET ( 0x00002270U )
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT13_OFFSET ( 0x00002274U )
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT14_OFFSET ( 0x00002278U )
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT15_OFFSET ( 0x0000227cU )
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_THRSH0_OFFSET ( 0x00002280U )
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_THRSH1_OFFSET ( 0x00002284U )
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_WNDW_NUM0_OFFSET ( 0x00002290U )
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_WNDW_NUM1_OFFSET ( 0x00002294U )
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_WNDW_TIMER0_OFFSET ( 0x000022a0U )
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_WNDW_TIMER1_OFFSET ( 0x000022a4U )
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG00_OFFSET ( 0x00002300U )
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG01_OFFSET ( 0x00002304U )
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG02_OFFSET ( 0x00002308U )
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG03_OFFSET ( 0x0000230cU )
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG10_OFFSET ( 0x00002310U )
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG11_OFFSET ( 0x00002314U )
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG12_OFFSET ( 0x00002318U )
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG13_OFFSET ( 0x0000231cU )
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG20_OFFSET ( 0x00002320U )
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG21_OFFSET ( 0x00002324U )
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG22_OFFSET ( 0x00002328U )
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG23_OFFSET ( 0x0000232cU )
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG30_OFFSET ( 0x00002330U )
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG31_OFFSET ( 0x00002334U )
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG32_OFFSET ( 0x00002338U )
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG33_OFFSET ( 0x0000233cU )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define JESD_CRUX_CLK_CSR_SCRATCH_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_SCRATCH_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_APB_BRDG_STAT_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_APB_BRDG_STAT_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_STRM_CFG_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_STRM_CFG_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_MEM_STRM_CFG_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_MEM_STRM_CFG_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_TOP_CTL_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_DECOMP_TOP_CTL_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RSB_DATA_SRC_CFG_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RSB_DATA_SRC_CFG_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RSB_DATA_SRC_TIMER_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RSB_DATA_SRC_TIMER_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RSB_DATA_SRC_START_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RSB_DATA_SRC_START_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RSB_FILL_LVL_CLR_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RSB_FILL_LVL_CLR_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RSB_DATA_CAP_FRZ_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RSB_DATA_CAP_FRZ_EN_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RSB_OVRFLW_STICKY_STS_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RSB_OVRFLW_STICKY_STS_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RSB_UNDERFLW_STICKY_STS_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RSB_UNDERFLW_STICKY_STS_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RSB_INDIR_ADDR_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RSB_INDIR_ADDR_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RSB_WR_RD_CTL_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RSB_WR_RD_CTL_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA0_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RSB_WR_DATA0_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA1_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RSB_WR_DATA1_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA2_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RSB_WR_DATA2_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA3_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RSB_WR_DATA3_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA4_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RSB_WR_DATA4_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA5_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RSB_WR_DATA5_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA6_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RSB_WR_DATA6_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA7_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RSB_WR_DATA7_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA8_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RSB_WR_DATA8_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA9_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RSB_WR_DATA9_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA10_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RSB_WR_DATA10_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA11_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RSB_WR_DATA11_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA12_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RSB_WR_DATA12_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA13_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RSB_WR_DATA13_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA14_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RSB_WR_DATA14_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA15_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RSB_WR_DATA15_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA0_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RSB_RD_DATA0_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA1_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RSB_RD_DATA1_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA2_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RSB_RD_DATA2_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA3_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RSB_RD_DATA3_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA4_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RSB_RD_DATA4_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA5_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RSB_RD_DATA5_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA6_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RSB_RD_DATA6_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA7_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RSB_RD_DATA7_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA8_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RSB_RD_DATA8_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA9_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RSB_RD_DATA9_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA10_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RSB_RD_DATA10_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA11_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RSB_RD_DATA11_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA12_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RSB_RD_DATA12_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA13_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RSB_RD_DATA13_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA14_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RSB_RD_DATA14_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA15_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RSB_RD_DATA15_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL0_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL0_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL1_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL1_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL2_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL2_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL3_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL3_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL4_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL4_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL5_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL5_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL6_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL6_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL7_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL7_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL8_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL8_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL9_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL9_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL10_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL10_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL11_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL11_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL12_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL12_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL13_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL13_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL14_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL14_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL15_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL15_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL0_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL0_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL1_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL1_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL2_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL2_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL3_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL3_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL4_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL4_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL5_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL5_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL6_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL6_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL7_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL7_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL8_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL8_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL9_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL9_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL10_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL10_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL11_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL11_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL12_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL12_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL13_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL13_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL14_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL14_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL15_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL15_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL0_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL0_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL1_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL1_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL2_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL2_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL3_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL3_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL4_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL4_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL5_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL5_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL6_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL6_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL7_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL7_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL8_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL8_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL9_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL9_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL10_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL10_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL11_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL11_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL12_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL12_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL13_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL13_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL14_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL14_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL15_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL15_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL0_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL0_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL1_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL1_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL2_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL2_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL3_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL3_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL4_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL4_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL5_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL5_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL6_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL6_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL7_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL7_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL8_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL8_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL9_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL9_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL10_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL10_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL11_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL11_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL12_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL12_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL13_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL13_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL14_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL14_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL15_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL15_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS0_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS0_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS1_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS1_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS2_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS2_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS3_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS3_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS4_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS4_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS5_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS5_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS6_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS6_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS7_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS7_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS8_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS8_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS9_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS9_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS10_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS10_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS11_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS11_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS12_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS12_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS13_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS13_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS14_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS14_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS15_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS15_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL0_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL0_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL1_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL1_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL2_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL2_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL3_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL3_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL4_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL4_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL5_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL5_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL6_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL6_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL7_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL7_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL8_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL8_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL9_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL9_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL10_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL10_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL11_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL11_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL12_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL12_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL13_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL13_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL14_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL14_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL15_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL15_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL16_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL16_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL17_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL17_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL18_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL18_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL19_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL19_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL20_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL20_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL21_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL21_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL22_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL22_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL23_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL23_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL24_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL24_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL25_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL25_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL26_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL26_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL27_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL27_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL28_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL28_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL29_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL29_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL30_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL30_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL31_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL31_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_EXP_CTL0_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_DECOMP_EXP_CTL0_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_EXP_CTL1_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_DECOMP_EXP_CTL1_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_EXP_CTL2_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_DECOMP_EXP_CTL2_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_EXP_CTL3_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_DECOMP_EXP_CTL3_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_EXP_CTL4_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_DECOMP_EXP_CTL4_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_EXP_CTL5_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_DECOMP_EXP_CTL5_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_EXP_CTL6_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_DECOMP_EXP_CTL6_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_EXP_CTL7_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_DECOMP_EXP_CTL7_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_VMLGA_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_VMLGA_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_VNSH_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_VNSH_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_TOP_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_TOP_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_NUM_VALID_STR_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_NUM_VALID_STR_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_TSB_TRIG_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_TSB_TRIG_EN_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_TSB_BUF_FILL_STAT_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_TSB_BUF_FILL_STAT_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_TSB_BUF_OVERFLOW_STAT_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_TSB_BUF_OVERFLOW_STAT_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WR_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_MEM_APB_WR_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_APB_MEM_WADDR_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_APB_MEM_WADDR_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_TSB_FULL_WATER_MARK_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_TSB_FULL_WATER_MARK_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_TSB_FULL_STAT_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_TSB_FULL_STAT_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_TSB_CFG_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_TSB_CFG_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_ECC_GEN_DIS_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_ECC_GEN_DIS_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_TSB_CAP_MODE_CLR_WRPTR_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_TSB_CAP_MODE_CLR_WRPTR_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL0_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL0_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL1_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL1_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL2_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL2_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL3_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL3_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL4_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL4_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL5_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL5_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL6_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL6_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL7_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL7_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL8_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL8_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL9_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL9_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL10_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL10_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL11_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL11_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL12_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL12_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL13_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL13_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL14_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL14_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL15_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL15_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL16_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL16_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL17_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL17_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL18_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL18_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL19_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL19_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL20_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL20_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL21_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL21_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL22_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL22_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL23_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL23_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL24_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL24_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL25_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL25_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL26_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL26_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL27_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL27_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL28_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL28_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL29_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL29_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL30_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL30_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL31_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL31_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR0_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR0_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR1_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR1_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR2_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR2_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR3_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR3_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR4_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR4_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR5_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR5_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR6_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR6_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR7_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR7_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR8_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR8_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR9_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR9_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR10_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR10_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR11_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR11_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR12_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR12_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR13_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR13_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR14_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR14_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR15_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR15_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE0_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE0_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE1_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE1_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE2_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE2_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE3_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE3_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE4_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE4_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE5_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE5_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE6_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE6_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE7_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE7_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE8_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE8_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE9_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE9_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE10_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE10_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE11_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE11_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE12_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE12_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE13_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE13_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE14_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE14_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE15_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE15_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR0_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR0_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR1_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR1_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR2_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR2_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR3_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR3_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR4_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR4_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR5_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR5_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR6_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR6_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR7_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR7_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR8_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR8_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR9_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR9_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR10_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR10_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR11_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR11_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR12_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR12_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR13_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR13_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR14_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR14_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR15_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR15_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA0_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA0_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA1_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA1_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA2_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA2_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA3_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA3_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA4_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA4_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA5_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA5_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA6_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA6_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA7_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA7_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA8_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA8_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA9_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA9_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA10_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA10_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA11_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA11_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA12_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA12_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA13_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA13_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA14_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA14_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA15_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA15_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL0_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL0_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL1_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL1_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL2_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL2_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL3_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL3_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL4_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL4_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL5_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL5_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL6_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL6_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL7_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL7_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL8_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL8_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL9_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL9_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL10_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL10_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL11_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL11_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL12_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL12_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL13_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL13_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL14_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL14_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL15_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL15_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_NSIP_HALT_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_NSIP_HALT_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_LPBK_CTL_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_LPBK_CTL_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_NSIP_HALT_DONE_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_NSIP_HALT_DONE_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MEA_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MEA_EN_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MEA_WNDW_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MEA_WNDW_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MIN_ERR_THRSH_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MIN_ERR_THRSH_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MAX_ERR_THRSH_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MAX_ERR_THRSH_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MEA_TIMER_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MEA_TIMER_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_CNT_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_CNT_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MIN_CNT_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MIN_CNT_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MAX_CNT_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MAX_CNT_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MEA_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MEA_EN_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MEA_WNDW_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MEA_WNDW_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MAX_ERR_THRSH_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MAX_ERR_THRSH_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_PEAK_MAX_ERR_THRSH_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_CRUX_STALL_PEAK_MAX_ERR_THRSH_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MEA_TIMER_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MEA_TIMER_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_CNT_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_CRUX_STALL_CNT_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MAX_CNT_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MAX_CNT_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_CRUX_PEAK_STALL_CNT_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_CRUX_PEAK_STALL_CNT_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_CRUX_PEAK_STALL_MAX_CNT_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_CRUX_PEAK_STALL_MAX_CNT_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_STRM_RCV_FLIT_CNT_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_STRM_RCV_FLIT_CNT_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MEA_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MEA_EN_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MEA_WNDW_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MEA_WNDW_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MIN_ERR_THRSH_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MIN_ERR_THRSH_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MAX_ERR_THRSH_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MAX_ERR_THRSH_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MEA_TIMER_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MEA_TIMER_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_CNT_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_CNT_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MIN_CNT_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MIN_CNT_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MAX_CNT_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MAX_CNT_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_EN_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_CAP_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_CAP_EN_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_STS_CLR_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_STS_CLR_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_CFG_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_CFG_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_SIG_SEL_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_SIG_SEL_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_VLD_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_VLD_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_ERR_STS_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_ERR_STS_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_INTR_HIGH_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_INTR_HIGH_EN_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_INTR_LOW_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_INTR_LOW_EN_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_ALM_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_ALM_EN_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_ERR_CLR_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_ERR_CLR_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_ERR_FRC_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_ERR_FRC_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_ERR_STS_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_ERR_STS_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_INTR_HIGH_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_INTR_HIGH_EN_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_INTR_LOW_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_INTR_LOW_EN_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_ERR_CLR_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_ERR_CLR_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_ERR_FRC_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_ERR_FRC_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_NSIP_ALRM_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_CRUX_CLK_NSIP_ALRM_EN_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_RSB_ECC_ERR_CFG_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_CRUX_CLK_RSB_ECC_ERR_CFG_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_RSB_ECC_ERR_FRC_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_CRUX_CLK_RSB_ECC_ERR_FRC_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_EN_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_CLR_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_CLR_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_IDX_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_IDX_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_RDATA_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_RDATA_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT0_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT0_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT1_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT1_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT2_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT2_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT3_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT3_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT4_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT4_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT5_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT5_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT6_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT6_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT7_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT7_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT8_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT8_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT9_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT9_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT10_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT10_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT11_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT11_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT12_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT12_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT13_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT13_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT14_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT14_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT15_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT15_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT0_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT0_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT1_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT1_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT2_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT2_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT3_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT3_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT4_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT4_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT5_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT5_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT6_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT6_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT7_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT7_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT8_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT8_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT9_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT9_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT10_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT10_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT11_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT11_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT12_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT12_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT13_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT13_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT14_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT14_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT15_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT15_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_THRSH0_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_THRSH0_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_THRSH1_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_THRSH1_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_WNDW_NUM0_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_WNDW_NUM0_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_WNDW_NUM1_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_WNDW_NUM1_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_WNDW_TIMER0_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_WNDW_TIMER0_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_WNDW_TIMER1_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_WNDW_TIMER1_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG00_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG00_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG01_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG01_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG02_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG02_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG03_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG03_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG10_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG10_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG11_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG11_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG12_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG12_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG13_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG13_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG20_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG20_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG21_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG21_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG22_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG22_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG23_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG23_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG30_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG30_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG31_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG31_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG32_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG32_OFFSET ) ))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG33_ADR(_BASE) (( ( _BASE ) + ( JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG33_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_SCRATCH register description at address offset 0x0
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/SCRATCH
  * Scratch Register
  */

typedef union {
  struct {
    uint32_t SCRATCHPAD : 32;
    ///< Scratch pad
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_scratch_reg_t;

#define JESD_CRUX_CLK_CSR_SCRATCH_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_SCRATCH_RD_MASK (0xffffffffU)
#define JESD_CRUX_CLK_CSR_SCRATCH_WR_MASK (0xffffffffU)


///< Scratch pad
#define JESD_CRUX_CLK_CSR_SCRATCH_SCRATCHPAD_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_SCRATCH_SCRATCHPAD_BF_WID (32)
#define JESD_CRUX_CLK_CSR_SCRATCH_SCRATCHPAD_BF_MSK (0xFFFFFFFF)
#define JESD_CRUX_CLK_CSR_SCRATCH_SCRATCHPAD_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_APB_BRIDGE_STATUS register description at address offset 0x4
  *
  * Register default value:        0x00010000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/APB_BRIDGE_STATUS
  * APB Bridge Status Register
  */

typedef union {
  struct {
    uint32_t TIMEOUT_VALUE : 20;
    ///< Number of core clocks to wait before timing out an APB request
    ///< AccessType="RW" BitOffset="0" ResetValue="0x10000"
    uint32_t REVISION : 8;
    ///< Module Revision Number
    ///< AccessType="RO" BitOffset="20" ResetValue="0x0"
    uint32_t SW_LOCK_CTRL : 1;
    ///< Block software writes to timeout_value if set
    ///< AccessType="RW/1S" BitOffset="28" ResetValue="0x0"
    uint32_t UNSOL_ACK : 1;
    ///< An unsolicited acknowledge was received
    ///< AccessType="RW/1C/V" BitOffset="29" ResetValue="0x0"
    uint32_t ACK_ERROR : 1;
    ///< Acknowledgement had error bit set
    ///< AccessType="RW/1C/V" BitOffset="30" ResetValue="0x0"
    uint32_t TIMEOUT : 1;
    ///< An APB request has timed out
    ///< AccessType="RW/1C/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_apb_brdg_stat_reg_t;

#define JESD_CRUX_CLK_CSR_APB_BRDG_STAT_DEFAULT (0x00010000U)
#define JESD_CRUX_CLK_CSR_APB_BRDG_STAT_RD_MASK (0xffffffffU)
#define JESD_CRUX_CLK_CSR_APB_BRDG_STAT_WR_MASK (0xf00fffffU)


///< Number of core clocks to wait before timing out an APB request
#define JESD_CRUX_CLK_CSR_APB_BRDG_STAT_TIMEOUT_VAL_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_APB_BRDG_STAT_TIMEOUT_VAL_BF_WID (20)
#define JESD_CRUX_CLK_CSR_APB_BRDG_STAT_TIMEOUT_VAL_BF_MSK (0x000FFFFF)
#define JESD_CRUX_CLK_CSR_APB_BRDG_STAT_TIMEOUT_VAL_BF_DEF (0x00010000)

///< Module Revision Number
#define JESD_CRUX_CLK_CSR_APB_BRDG_STAT_REVISION_BF_OFF (20)
#define JESD_CRUX_CLK_CSR_APB_BRDG_STAT_REVISION_BF_WID ( 8)
#define JESD_CRUX_CLK_CSR_APB_BRDG_STAT_REVISION_BF_MSK (0x0FF00000)
#define JESD_CRUX_CLK_CSR_APB_BRDG_STAT_REVISION_BF_DEF (0x00000000)

///< Block software writes to timeout_value if set
#define JESD_CRUX_CLK_CSR_APB_BRDG_STAT_SW_LOCK_CTRL_BF_OFF (28)
#define JESD_CRUX_CLK_CSR_APB_BRDG_STAT_SW_LOCK_CTRL_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_APB_BRDG_STAT_SW_LOCK_CTRL_BF_MSK (0x10000000)
#define JESD_CRUX_CLK_CSR_APB_BRDG_STAT_SW_LOCK_CTRL_BF_DEF (0x00000000)

///< An unsolicited acknowledge was received
#define JESD_CRUX_CLK_CSR_APB_BRDG_STAT_UNSOL_ACK_BF_OFF (29)
#define JESD_CRUX_CLK_CSR_APB_BRDG_STAT_UNSOL_ACK_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_APB_BRDG_STAT_UNSOL_ACK_BF_MSK (0x20000000)
#define JESD_CRUX_CLK_CSR_APB_BRDG_STAT_UNSOL_ACK_BF_DEF (0x00000000)

///< Acknowledgement had error bit set
#define JESD_CRUX_CLK_CSR_APB_BRDG_STAT_ACK_ERR_BF_OFF (30)
#define JESD_CRUX_CLK_CSR_APB_BRDG_STAT_ACK_ERR_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_APB_BRDG_STAT_ACK_ERR_BF_MSK (0x40000000)
#define JESD_CRUX_CLK_CSR_APB_BRDG_STAT_ACK_ERR_BF_DEF (0x00000000)

///< An APB request has timed out
#define JESD_CRUX_CLK_CSR_APB_BRDG_STAT_TIMEOUT_BF_OFF (31)
#define JESD_CRUX_CLK_CSR_APB_BRDG_STAT_TIMEOUT_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_APB_BRDG_STAT_TIMEOUT_BF_MSK (0x80000000)
#define JESD_CRUX_CLK_CSR_APB_BRDG_STAT_TIMEOUT_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RX_STRM_CFG register description at address offset 0x10
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RX_STRM_CFG
  * RX Stream configuration register
  */

typedef union {
  struct {
    uint32_t NUM_STRM : 5;
    ///< Number of streams enabled for crux port.
    ///< t                                        The value of 0 represents
    ///< no streams are mapped to the crux port.
    ///< t                                 valid values are from 0 to 16
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FLITS_PER_STRM : 9;
    ///< Specifies the no. of 512 bits which needs to be prefilled per stream
    ///< to enable read for Mem of crux port.
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t  : 18;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_rx_strm_cfg_reg_t;

#define JESD_CRUX_CLK_CSR_RX_STRM_CFG_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_RX_STRM_CFG_RD_MASK (0x00003fffU)
#define JESD_CRUX_CLK_CSR_RX_STRM_CFG_WR_MASK (0x00003fffU)


///< Number of streams enabled for crux port.
///< t                                        The value of 0 represents
///< no streams are mapped to the crux port.
///< t                                 valid values are from 0 to 16
#define JESD_CRUX_CLK_CSR_RX_STRM_CFG_NUM_STRM_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_RX_STRM_CFG_NUM_STRM_BF_WID ( 5)
#define JESD_CRUX_CLK_CSR_RX_STRM_CFG_NUM_STRM_BF_MSK (0x0000001F)
#define JESD_CRUX_CLK_CSR_RX_STRM_CFG_NUM_STRM_BF_DEF (0x00000000)

///< Specifies the no. of 512 bits which needs to be prefilled per stream
///< to enable read for Mem of crux port.
#define JESD_CRUX_CLK_CSR_RX_STRM_CFG_FLITS_PER_STRM_BF_OFF ( 5)
#define JESD_CRUX_CLK_CSR_RX_STRM_CFG_FLITS_PER_STRM_BF_WID ( 9)
#define JESD_CRUX_CLK_CSR_RX_STRM_CFG_FLITS_PER_STRM_BF_MSK (0x00003FE0)
#define JESD_CRUX_CLK_CSR_RX_STRM_CFG_FLITS_PER_STRM_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RX_MEM_STREAM_CFG register description at address offset 0x14
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RX_MEM_STREAM_CFG
  * RX memory streams allocation configuration register
  */

typedef union {
  struct {
    uint32_t MEM_DEPTH_PER_STR : 9;
    ///< number of max flits/depth allocated to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_rx_mem_strm_cfg_reg_t;

#define JESD_CRUX_CLK_CSR_RX_MEM_STRM_CFG_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_RX_MEM_STRM_CFG_RD_MASK (0x000001ffU)
#define JESD_CRUX_CLK_CSR_RX_MEM_STRM_CFG_WR_MASK (0x000001ffU)


///< number of max flits/depth allocated to memory.
#define JESD_CRUX_CLK_CSR_RX_MEM_STRM_CFG_MEM_DEPTH_PER_STR_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_RX_MEM_STRM_CFG_MEM_DEPTH_PER_STR_BF_WID ( 9)
#define JESD_CRUX_CLK_CSR_RX_MEM_STRM_CFG_MEM_DEPTH_PER_STR_BF_MSK (0x000001FF)
#define JESD_CRUX_CLK_CSR_RX_MEM_STRM_CFG_MEM_DEPTH_PER_STR_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RX_DECOMP_TOP_CTL register description at address offset 0x18
  *
  * Register default value:        0x00000002
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RX_DECOMP_TOP_CTL
  * JESD RX  decompression top level control
  */

typedef union {
  struct {
    uint32_t CFG_MODE_SEL : 2;
    ///< Control to select the mode of decompression
    ///< AccessType="RW" BitOffset="0" ResetValue="0x2"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
    uint32_t CFG_IPFMT_SEL : 1;
    ///< Shows the vin input forma
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_rx_decomp_top_ctl_reg_t;

#define JESD_CRUX_CLK_CSR_RX_DECOMP_TOP_CTL_DEFAULT (0x00000002U)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_TOP_CTL_RD_MASK (0x0000000bU)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_TOP_CTL_WR_MASK (0x0000000bU)


///< Control to select the mode of decompression
#define JESD_CRUX_CLK_CSR_RX_DECOMP_TOP_CTL_CFG_MODE_SEL_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_TOP_CTL_CFG_MODE_SEL_BF_WID ( 2)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_TOP_CTL_CFG_MODE_SEL_BF_MSK (0x00000003)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_TOP_CTL_CFG_MODE_SEL_BF_DEF (0x00000002)

///< Shows the vin input forma
#define JESD_CRUX_CLK_CSR_RX_DECOMP_TOP_CTL_CFG_IPFMT_SEL_BF_OFF ( 3)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_TOP_CTL_CFG_IPFMT_SEL_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_TOP_CTL_CFG_IPFMT_SEL_BF_MSK (0x00000008)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_TOP_CTL_CFG_IPFMT_SEL_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL register description at address offset 0x1c
  *
  * Register default value:        0x1F005206
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RX_DECOMP_VNSH_CTL
  * RX VNSH Control input to JESD decompression
  */

typedef union {
  struct {
    uint32_t CFG_VNSH_IELEMSIZE : 2;
    ///< The size of each element at the vnsh block input. 00=8bit, 01=16bit,
    ///< 10=32bit, 11=rsvd.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x2"
    uint32_t CFG_VNSH_OELEMSIZE : 2;
    ///< Output Element size. 00=8bit elements.2'b01=16 bit elements. 2'b10=32
    ///< bit elements. 2'b11 = Reserved.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x1"
    uint32_t CFG_ROUNDMODE : 1;
    ///< Rounding Mode.0=Round-away-from-0. 1=Bankers rounding.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t CFG_EXPADJ : 2;
    ///< Exponent Adjust selection. This selects the adjustment to be made
    ///< to the shift values.
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t CFG_WIDTH : 6;
    ///< Saturation width of output sample
    ///< AccessType="RW" BitOffset="8" ResetValue="0x12"
    uint32_t CFG_VNSH_AGCA_SE : 1;
    ///< Sign Extend for AGC-Abit. If this bit is set, the input elements are
    ///< sign extended from bit 27.
    ///< AccessType="RW" BitOffset="14" ResetValue="0x1"
    uint32_t CFG_AGCA_EXPADJ : 1;
    ///< Exponent Adjustment for AGC Abit.if set, add bit 7 of the exponent
    ///< element in IV2 to the 5 LSB bits of exponent.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t CFG_FSHIFT : 6;
    ///< All elements of IV2 are incremented by this value if expadj=01.This
    ///< field is signed
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t CFG_MAXSHIFT : 5;
    ///< Maximum shift value. This defines the maximum value of the shift that
    ///< is permitted on the input samples.
    ///< AccessType="RW" BitOffset="24" ResetValue="0x1F"
    uint32_t CFG_AGCA_INSERTABIT : 2;
    ///< Insert IV0, IV1 input elements bit (Abit, selected from 31:29 based
    ///< on top_ctl[13:12]) into bit 15 of corresponding shifted output element
    ///< in OV0, OV1. 00,01,10 = do nothing, 11= replace output element bit
    ///< 15 with Abit
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
    uint32_t CFG_OV2SEL : 1;
    ///< Select exponent values to be output on OV2, 0 = Unadjusted exponents,1
    ///< = Adjusted exponents.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_rx_decomp_vnsh_ctl_reg_t;

#define JESD_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL_DEFAULT (0x1f005206U)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL_RD_MASK (0xff3fff7fU)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL_WR_MASK (0xff3fff7fU)


///< The size of each element at the vnsh block input. 00=8bit, 01=16bit,
///< 10=32bit, 11=rsvd.
#define JESD_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL_CFG_VNSH_IELEMSIZE_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL_CFG_VNSH_IELEMSIZE_BF_WID ( 2)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL_CFG_VNSH_IELEMSIZE_BF_MSK (0x00000003)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL_CFG_VNSH_IELEMSIZE_BF_DEF (0x00000002)

///< Output Element size. 00=8bit elements.2'b01=16 bit elements. 2'b10=32
///< bit elements. 2'b11 = Reserved.
#define JESD_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL_CFG_VNSH_OELEMSIZE_BF_OFF ( 2)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL_CFG_VNSH_OELEMSIZE_BF_WID ( 2)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL_CFG_VNSH_OELEMSIZE_BF_MSK (0x0000000C)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL_CFG_VNSH_OELEMSIZE_BF_DEF (0x00000004)

///< Rounding Mode.0=Round-away-from-0. 1=Bankers rounding.
#define JESD_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL_CFG_ROUNDMODE_BF_OFF ( 4)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL_CFG_ROUNDMODE_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL_CFG_ROUNDMODE_BF_MSK (0x00000010)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL_CFG_ROUNDMODE_BF_DEF (0x00000000)

///< Exponent Adjust selection. This selects the adjustment to be made
///< to the shift values.
#define JESD_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL_CFG_EXPADJ_BF_OFF ( 5)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL_CFG_EXPADJ_BF_WID ( 2)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL_CFG_EXPADJ_BF_MSK (0x00000060)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL_CFG_EXPADJ_BF_DEF (0x00000000)

///< Saturation width of output sample
#define JESD_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL_CFG_WIDTH_BF_OFF ( 8)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL_CFG_WIDTH_BF_WID ( 6)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL_CFG_WIDTH_BF_MSK (0x00003F00)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL_CFG_WIDTH_BF_DEF (0x00001200)

///< Sign Extend for AGC-Abit. If this bit is set, the input elements are
///< sign extended from bit 27.
#define JESD_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL_CFG_VNSH_AGCA_SE_BF_OFF (14)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL_CFG_VNSH_AGCA_SE_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL_CFG_VNSH_AGCA_SE_BF_MSK (0x00004000)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL_CFG_VNSH_AGCA_SE_BF_DEF (0x00004000)

///< Exponent Adjustment for AGC Abit.if set, add bit 7 of the exponent
///< element in IV2 to the 5 LSB bits of exponent.
#define JESD_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL_CFG_AGCA_EXPADJ_BF_OFF (15)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL_CFG_AGCA_EXPADJ_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL_CFG_AGCA_EXPADJ_BF_MSK (0x00008000)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL_CFG_AGCA_EXPADJ_BF_DEF (0x00000000)

///< All elements of IV2 are incremented by this value if expadj=01.This
///< field is signed
#define JESD_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL_CFG_FSHIFT_BF_OFF (16)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL_CFG_FSHIFT_BF_WID ( 6)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL_CFG_FSHIFT_BF_MSK (0x003F0000)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL_CFG_FSHIFT_BF_DEF (0x00000000)

///< Maximum shift value. This defines the maximum value of the shift that
///< is permitted on the input samples.
#define JESD_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL_CFG_MAXSHIFT_BF_OFF (24)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL_CFG_MAXSHIFT_BF_WID ( 5)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL_CFG_MAXSHIFT_BF_MSK (0x1F000000)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL_CFG_MAXSHIFT_BF_DEF (0x1F000000)

///< Insert IV0, IV1 input elements bit (Abit, selected from 31:29 based
///< on top_ctl[13:12]) into bit 15 of corresponding shifted output element
///< in OV0, OV1. 00,01,10 = do nothing, 11= replace output element bit
///< 15 with Abit
#define JESD_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL_CFG_AGCA_INSERTABIT_BF_OFF (29)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL_CFG_AGCA_INSERTABIT_BF_WID ( 2)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL_CFG_AGCA_INSERTABIT_BF_MSK (0x60000000)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL_CFG_AGCA_INSERTABIT_BF_DEF (0x00000000)

///< Select exponent values to be output on OV2, 0 = Unadjusted exponents,1
///< = Adjusted exponents.
#define JESD_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL_CFG_OV2SEL_BF_OFF (31)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL_CFG_OV2SEL_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL_CFG_OV2SEL_BF_MSK (0x80000000)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL_CFG_OV2SEL_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RSB_DATA_SRC_CFG register description at address offset 0x20
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RSB_DATA_SRC_CFG
  * JESD  RSB Data Source Mode configuration
  */

typedef union {
  struct {
    uint32_t RSB_DATA_SRC_EN : 1;
    ///< Enables RSB Data source mode, where RSB is loded through APB and data
    ///< is sent repititively on Crux interface.            The write from
    ///< JESD IP are ignored in this mode, when set to 1.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RSB_DATA_SRC_MODE : 1;
    ///< This determines mode of RSB data source operation.       1'b0 : Single
    ///< shot mode - RSB Data is sent only once.       1'b1 : Continous data
    ///< mode - RSB data is sent periodically, the period is determined by
    ///< the timer register value.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_rsb_data_src_cfg_reg_t;

#define JESD_CRUX_CLK_CSR_RSB_DATA_SRC_CFG_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_RSB_DATA_SRC_CFG_RD_MASK (0x00000003U)
#define JESD_CRUX_CLK_CSR_RSB_DATA_SRC_CFG_WR_MASK (0x00000003U)


///< Enables RSB Data source mode, where RSB is loded through APB and data
///< is sent repititively on Crux interface.            The write from
///< JESD IP are ignored in this mode, when set to 1.
#define JESD_CRUX_CLK_CSR_RSB_DATA_SRC_CFG_RSB_DATA_SRC_EN_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_RSB_DATA_SRC_CFG_RSB_DATA_SRC_EN_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_RSB_DATA_SRC_CFG_RSB_DATA_SRC_EN_BF_MSK (0x00000001)
#define JESD_CRUX_CLK_CSR_RSB_DATA_SRC_CFG_RSB_DATA_SRC_EN_BF_DEF (0x00000000)

///< This determines mode of RSB data source operation.       1'b0 : Single
///< shot mode - RSB Data is sent only once.       1'b1 : Continous data
///< mode - RSB data is sent periodically, the period is determined by
///< the timer register value.
#define JESD_CRUX_CLK_CSR_RSB_DATA_SRC_CFG_RSB_DATA_SRC_MODE_BF_OFF ( 1)
#define JESD_CRUX_CLK_CSR_RSB_DATA_SRC_CFG_RSB_DATA_SRC_MODE_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_RSB_DATA_SRC_CFG_RSB_DATA_SRC_MODE_BF_MSK (0x00000002)
#define JESD_CRUX_CLK_CSR_RSB_DATA_SRC_CFG_RSB_DATA_SRC_MODE_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RSB_DATA_SRC_TIMER register description at address offset 0x24
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RSB_DATA_SRC_TIMER
  * JESD  RSB Data Source timer
  */

typedef union {
  struct {
    uint32_t RSB_DATA_SRC_TIMER : 32;
    ///< The timer value that determines the periodicity of RSB data repitition
    ///< in data source mode.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_rsb_data_src_timer_reg_t;

#define JESD_CRUX_CLK_CSR_RSB_DATA_SRC_TIMER_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_RSB_DATA_SRC_TIMER_RD_MASK (0xffffffffU)
#define JESD_CRUX_CLK_CSR_RSB_DATA_SRC_TIMER_WR_MASK (0xffffffffU)


///< The timer value that determines the periodicity of RSB data repitition
///< in data source mode.
#define JESD_CRUX_CLK_CSR_RSB_DATA_SRC_TIMER_RSB_DATA_SRC_TIMER_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_RSB_DATA_SRC_TIMER_RSB_DATA_SRC_TIMER_BF_WID (32)
#define JESD_CRUX_CLK_CSR_RSB_DATA_SRC_TIMER_RSB_DATA_SRC_TIMER_BF_MSK (0xFFFFFFFF)
#define JESD_CRUX_CLK_CSR_RSB_DATA_SRC_TIMER_RSB_DATA_SRC_TIMER_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RSB_DATA_SRC_START register description at address offset 0x28
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RSB_DATA_SRC_START
  * JESD  RSB Data Source start
  */

typedef union {
  struct {
    uint32_t RSB_DATA_SRC_EN : 1;
    ///< This register will trigger the RSB read logic to send data loaded
    ///< in RSB to crux interface in RSB data source mode, when set to 1.
    ///< Setting this bit also gates any further APB writes to RSB.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_rsb_data_src_start_reg_t;

#define JESD_CRUX_CLK_CSR_RSB_DATA_SRC_START_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_RSB_DATA_SRC_START_RD_MASK (0x00000001U)
#define JESD_CRUX_CLK_CSR_RSB_DATA_SRC_START_WR_MASK (0x00000001U)


///< This register will trigger the RSB read logic to send data loaded
///< in RSB to crux interface in RSB data source mode, when set to 1.
///< Setting this bit also gates any further APB writes to RSB.
#define JESD_CRUX_CLK_CSR_RSB_DATA_SRC_START_RSB_DATA_SRC_EN_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_RSB_DATA_SRC_START_RSB_DATA_SRC_EN_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_RSB_DATA_SRC_START_RSB_DATA_SRC_EN_BF_MSK (0x00000001)
#define JESD_CRUX_CLK_CSR_RSB_DATA_SRC_START_RSB_DATA_SRC_EN_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RSB_FILL_LVL_CLR register description at address offset 0x2c
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RSB_FILL_LVL_CLR
  * JESD  RSB fill level clear
  */

typedef union {
  struct {
    uint32_t RSB_FILL_LVL_CLR : 1;
    ///< Writing 1  to this register will clear the Fill level status for RSB
    ///< buffers for all streams.            This is one cycle operation and
    ///< register retains its previous written value.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_rsb_fill_lvl_clr_reg_t;

#define JESD_CRUX_CLK_CSR_RSB_FILL_LVL_CLR_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_RSB_FILL_LVL_CLR_RD_MASK (0x00000001U)
#define JESD_CRUX_CLK_CSR_RSB_FILL_LVL_CLR_WR_MASK (0x00000001U)


///< Writing 1  to this register will clear the Fill level status for RSB
///< buffers for all streams.            This is one cycle operation and
///< register retains its previous written value.
#define JESD_CRUX_CLK_CSR_RSB_FILL_LVL_CLR_RSB_FILL_LVL_CLR_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_RSB_FILL_LVL_CLR_RSB_FILL_LVL_CLR_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_RSB_FILL_LVL_CLR_RSB_FILL_LVL_CLR_BF_MSK (0x00000001)
#define JESD_CRUX_CLK_CSR_RSB_FILL_LVL_CLR_RSB_FILL_LVL_CLR_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RSB_DATA_CAP_FRZ_EN register description at address offset 0x30
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RSB_DATA_CAP_FRZ_EN
  * JESD  RSB Capture Freeze mode
  */

typedef union {
  struct {
    uint32_t RSB_DATA_CAP_FRZ_MODE : 1;
    ///< This register will enable RSB capture freeze mode, when set to 1.
    ///< Rata from JESD IP will be captured in the RSB until it is full. The
    ///< data to crux interface from RSB is disabled.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_rsb_data_cap_frz_en_reg_t;

#define JESD_CRUX_CLK_CSR_RSB_DATA_CAP_FRZ_EN_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_RSB_DATA_CAP_FRZ_EN_RD_MASK (0x00000001U)
#define JESD_CRUX_CLK_CSR_RSB_DATA_CAP_FRZ_EN_WR_MASK (0x00000001U)


///< This register will enable RSB capture freeze mode, when set to 1.
///< Rata from JESD IP will be captured in the RSB until it is full. The
///< data to crux interface from RSB is disabled.
#define JESD_CRUX_CLK_CSR_RSB_DATA_CAP_FRZ_EN_RSB_DATA_CAP_FRZ_MODE_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_RSB_DATA_CAP_FRZ_EN_RSB_DATA_CAP_FRZ_MODE_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_RSB_DATA_CAP_FRZ_EN_RSB_DATA_CAP_FRZ_MODE_BF_MSK (0x00000001)
#define JESD_CRUX_CLK_CSR_RSB_DATA_CAP_FRZ_EN_RSB_DATA_CAP_FRZ_MODE_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RSB_OVRFLW_STICKY_STS register description at address offset 0x34
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RSB_OVRFLW_STICKY_STS
  * JESD  RSB Overflow sticky status
  */

typedef union {
  struct {
    uint32_t RSB_OVRFLW : 16;
    ///< Indicates the sticky overflow status of RSB per stream buffers.
    ///< Bit 0 - 1'b1 : Stream 0 RSB overflow happened.               Bit 1
    ///< - 1'b1 : Stream 1 RSB overflow happened.               Bit 2 - 1'b1
    ///< : Stream 2 RSB overflow happened and so on.               Writing
    ///< 0 to the register clears all status bits.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_rsb_ovrflw_sticky_sts_reg_t;

#define JESD_CRUX_CLK_CSR_RSB_OVRFLW_STICKY_STS_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_RSB_OVRFLW_STICKY_STS_RD_MASK (0x0000ffffU)
#define JESD_CRUX_CLK_CSR_RSB_OVRFLW_STICKY_STS_WR_MASK (0x0000ffffU)


///< Indicates the sticky overflow status of RSB per stream buffers.
///< Bit 0 - 1'b1 : Stream 0 RSB overflow happened.               Bit 1
///< - 1'b1 : Stream 1 RSB overflow happened.               Bit 2 - 1'b1
///< : Stream 2 RSB overflow happened and so on.               Writing
///< 0 to the register clears all status bits.
#define JESD_CRUX_CLK_CSR_RSB_OVRFLW_STICKY_STS_RSB_OVRFLW_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_RSB_OVRFLW_STICKY_STS_RSB_OVRFLW_BF_WID (16)
#define JESD_CRUX_CLK_CSR_RSB_OVRFLW_STICKY_STS_RSB_OVRFLW_BF_MSK (0x0000FFFF)
#define JESD_CRUX_CLK_CSR_RSB_OVRFLW_STICKY_STS_RSB_OVRFLW_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RSB_UNDERFLW_STICKY_STS register description at address offset 0x38
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RSB_UNDERFLW_STICKY_STS
  * JESD  RSB Underflow sticky status
  */

typedef union {
  struct {
    uint32_t RSB_UNDERFLW : 16;
    ///< Indicates the sticky underflow status of RSB per stream buffers.
    ///< Bit 0 - 1'b1 : Stream 0 RSB underflow happened.               Bit
    ///< 1 - 1'b1 : Stream 1 RSB underflow happened.               Bit 2 -
    ///< 1'b1 : Stream 2 RSB underflow happened and so on.               Writing
    ///< 0 to the register clears all status bits.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_rsb_underflw_sticky_sts_reg_t;

#define JESD_CRUX_CLK_CSR_RSB_UNDERFLW_STICKY_STS_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_RSB_UNDERFLW_STICKY_STS_RD_MASK (0x0000ffffU)
#define JESD_CRUX_CLK_CSR_RSB_UNDERFLW_STICKY_STS_WR_MASK (0x0000ffffU)


///< Indicates the sticky underflow status of RSB per stream buffers.
///< Bit 0 - 1'b1 : Stream 0 RSB underflow happened.               Bit
///< 1 - 1'b1 : Stream 1 RSB underflow happened.               Bit 2 -
///< 1'b1 : Stream 2 RSB underflow happened and so on.               Writing
///< 0 to the register clears all status bits.
#define JESD_CRUX_CLK_CSR_RSB_UNDERFLW_STICKY_STS_RSB_UNDERFLW_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_RSB_UNDERFLW_STICKY_STS_RSB_UNDERFLW_BF_WID (16)
#define JESD_CRUX_CLK_CSR_RSB_UNDERFLW_STICKY_STS_RSB_UNDERFLW_BF_MSK (0x0000FFFF)
#define JESD_CRUX_CLK_CSR_RSB_UNDERFLW_STICKY_STS_RSB_UNDERFLW_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RSB_INDIR_ADDR register description at address offset 0x40
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RSB_INDIR_ADDR
  * JESD  RSB Indirect address
  */

typedef union {
  struct {
    uint32_t RSB_INDIR_ADDR : 32;
    ///< Contains the 256-bit aligned address location of the RSB buffer to
    ///< be written/read.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_rsb_indir_addr_reg_t;

#define JESD_CRUX_CLK_CSR_RSB_INDIR_ADDR_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_RSB_INDIR_ADDR_RD_MASK (0xffffffffU)
#define JESD_CRUX_CLK_CSR_RSB_INDIR_ADDR_WR_MASK (0xffffffffU)


///< Contains the 256-bit aligned address location of the RSB buffer to
///< be written/read.
#define JESD_CRUX_CLK_CSR_RSB_INDIR_ADDR_RSB_INDIR_ADDR_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_RSB_INDIR_ADDR_RSB_INDIR_ADDR_BF_WID (32)
#define JESD_CRUX_CLK_CSR_RSB_INDIR_ADDR_RSB_INDIR_ADDR_BF_MSK (0xFFFFFFFF)
#define JESD_CRUX_CLK_CSR_RSB_INDIR_ADDR_RSB_INDIR_ADDR_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RSB_WR_RD_CTL register description at address offset 0x44
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RSB_WR_RD_CTL
  * JESD  RSB read/write control
  */

typedef union {
  struct {
    uint32_t RSB_RD_WR_CTRL : 1;
    ///< Writing to this register will trigger RSB read/write operation.
    ///< 1'b0 : Triggers RSB write.                   1'b1 : Triggers RSB read.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_rsb_wr_rd_ctl_reg_t;

#define JESD_CRUX_CLK_CSR_RSB_WR_RD_CTL_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_RSB_WR_RD_CTL_RD_MASK (0x00000001U)
#define JESD_CRUX_CLK_CSR_RSB_WR_RD_CTL_WR_MASK (0x00000001U)


///< Writing to this register will trigger RSB read/write operation.
///< 1'b0 : Triggers RSB write.                   1'b1 : Triggers RSB read.
#define JESD_CRUX_CLK_CSR_RSB_WR_RD_CTL_RSB_RD_WR_CTRL_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_RSB_WR_RD_CTL_RSB_RD_WR_CTRL_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_RSB_WR_RD_CTL_RSB_RD_WR_CTRL_BF_MSK (0x00000001)
#define JESD_CRUX_CLK_CSR_RSB_WR_RD_CTL_RSB_RD_WR_CTRL_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RSB_WR_DATA[16] register description at address offset 0x100
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RSB_WR_DATA
  * JESD  RSB write data Word
  */

typedef union {
  struct {
    uint32_t RSB_WR_DATA_WORD : 32;
    ///< Receiver Buffer write data word
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_rsb_wr_data_reg_t;

#define JESD_CRUX_CLK_CSR_RSB_WR_DATA_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA_RD_MASK (0xffffffffU)
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA_WR_MASK (0xffffffffU)


///< Receiver Buffer write data word
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA_RSB_WR_DATA_WORD_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA_RSB_WR_DATA_WORD_BF_WID (32)
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA_RSB_WR_DATA_WORD_BF_MSK (0xFFFFFFFF)
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA_RSB_WR_DATA_WORD_BF_DEF (0x00000000)
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA_ARR_SZ0 (16)
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RSB_RD_DATA[16] register description at address offset 0x140
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RSB_RD_DATA
  * JESD  RSB read data Word
  */

typedef union {
  struct {
    uint32_t RSB_RD_DATA_WORD : 32;
    ///< Receiver Buffer read data word
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_rsb_rd_data_reg_t;

#define JESD_CRUX_CLK_CSR_RSB_RD_DATA_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA_RD_MASK (0xffffffffU)
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA_WR_MASK (0x00000000U)


///< Receiver Buffer read data word
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA_RSB_RD_DATA_WORD_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA_RSB_RD_DATA_WORD_BF_WID (32)
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA_RSB_RD_DATA_WORD_BF_MSK (0xFFFFFFFF)
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA_RSB_RD_DATA_WORD_BF_DEF (0x00000000)
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA_ARR_SZ0 (16)
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RX_WR_MEM_TBL[16] register description at address offset 0x180
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RX_WR_MEM_TBL
  * JESD RSB wr mem config table
  */

typedef union {
  struct {
    uint32_t RX_MEM_BASE_ADDR : 9;
    ///< Rx memory base address.
    ///< The start address location corrsponding to each stream for the 512
    ///< bit wide write bus  to be writtten in the memory for crux port 0.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_rx_wr_mem_tbl_reg_t;

#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL_RD_MASK (0x000001ffU)
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL_WR_MASK (0x000001ffU)


///< Rx memory base address.
///< The start address location corrsponding to each stream for the 512
///< bit wide write bus  to be writtten in the memory for crux port 0.
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL_RX_MEM_BASE_ADDR_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL_RX_MEM_BASE_ADDR_BF_WID ( 9)
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL_RX_MEM_BASE_ADDR_BF_MSK (0x000001FF)
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL_RX_MEM_BASE_ADDR_BF_DEF (0x00000000)
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL_ARR_SZ0 (16)
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RX_RD_MEM_TBL[16] register description at address offset 0x1c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RX_RD_MEM_TBL
  * JESD RSB rd mem config table
  */

typedef union {
  struct {
    uint32_t RX_MEM_BASE_ADDR : 9;
    ///< Rx memory base address for read.
    ///< The start address location corrsponding to each stream for the 512
    ///< bit wide read bus  to be read from the memory for crux port 0.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t STREAM_ID : 4;
    ///< Stream Id .
    ///< The value of stream id  corrsponding to the rd base address.
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t  : 19;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_rx_rd_mem_tbl_reg_t;

#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL_RD_MASK (0x00001fffU)
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL_WR_MASK (0x00001fffU)


///< Rx memory base address for read.
///< The start address location corrsponding to each stream for the 512
///< bit wide read bus  to be read from the memory for crux port 0.
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL_RX_MEM_BASE_ADDR_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL_RX_MEM_BASE_ADDR_BF_WID ( 9)
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL_RX_MEM_BASE_ADDR_BF_MSK (0x000001FF)
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL_RX_MEM_BASE_ADDR_BF_DEF (0x00000000)

///< Stream Id .
///< The value of stream id  corrsponding to the rd base address.
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL_STRM_ID_BF_OFF ( 9)
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL_STRM_ID_BF_WID ( 4)
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL_STRM_ID_BF_MSK (0x00001E00)
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL_STRM_ID_BF_DEF (0x00000000)
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL_ARR_SZ0 (16)
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RX_WR_POINTER_TBL[16] register description at address offset 0x200
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RX_WR_POINTER_TBL
  * JESD Rx memory pointer Register
  */

typedef union {
  struct {
    uint32_t RX_MEM_PTR : 9;
    ///< Rx memory write/Read pointer for crux port.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_rx_wr_ptr_tbl_reg_t;

#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL_RD_MASK (0x000001ffU)
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL_WR_MASK (0x000001ffU)


///< Rx memory write/Read pointer for crux port.
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL_RX_MEM_PTR_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL_RX_MEM_PTR_BF_WID ( 9)
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL_RX_MEM_PTR_BF_MSK (0x000001FF)
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL_RX_MEM_PTR_BF_DEF (0x00000000)
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL_ARR_SZ0 (16)
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RX_RD_POINTER_TBL[16] register description at address offset 0x240
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RX_RD_POINTER_TBL
  * JESD Rx memory pointer Register
  */

typedef union {
  struct {
    uint32_t RX_MEM_PTR : 9;
    ///< Rx memory write/Read pointer for crux port.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_rx_rd_ptr_tbl_reg_t;

#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL_RD_MASK (0x000001ffU)
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL_WR_MASK (0x000001ffU)


///< Rx memory write/Read pointer for crux port.
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL_RX_MEM_PTR_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL_RX_MEM_PTR_BF_WID ( 9)
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL_RX_MEM_PTR_BF_MSK (0x000001FF)
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL_RX_MEM_PTR_BF_DEF (0x00000000)
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL_ARR_SZ0 (16)
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RX_STRM_MEM_STS[16] register description at address offset 0x280
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RX_STRM_MEM_STS
  * JESD Rx Stream Buffer Status Register
  */

typedef union {
  struct {
    uint32_t RSB_FILL_LEVEL : 10;
    ///< Rx buffer current occupancy status. Each count corresponds to one
    ///< flit or one 512 bit location.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t RSB_FILL_FULL : 1;
    ///< Indicates RSB is full when set to 1.
    ///< AccessType="RO" BitOffset="10" ResetValue="0x0"
    uint32_t RSB_FILL_EMPTY : 1;
    ///< Indicates RSB is empty when set to 1.
    ///< AccessType="RO" BitOffset="11" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_rx_strm_mem_sts_reg_t;

#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS_RD_MASK (0x00000fffU)
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS_WR_MASK (0x00000000U)


///< Rx buffer current occupancy status. Each count corresponds to one
///< flit or one 512 bit location.
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS_RSB_FILL_LVL_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS_RSB_FILL_LVL_BF_WID (10)
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS_RSB_FILL_LVL_BF_MSK (0x000003FF)
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS_RSB_FILL_LVL_BF_DEF (0x00000000)

///< Indicates RSB is full when set to 1.
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS_RSB_FILL_FULL_BF_OFF (10)
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS_RSB_FILL_FULL_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS_RSB_FILL_FULL_BF_MSK (0x00000400)
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS_RSB_FILL_FULL_BF_DEF (0x00000000)

///< Indicates RSB is empty when set to 1.
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS_RSB_FILL_EMPTY_BF_OFF (11)
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS_RSB_FILL_EMPTY_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS_RSB_FILL_EMPTY_BF_MSK (0x00000800)
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS_RSB_FILL_EMPTY_BF_DEF (0x00000000)
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS_ARR_SZ0 (16)
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL[32] register description at address offset 0x300
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RX_DECOMP_MANTISSA_CTL
  * JESD RX  decompression mantissa control
  */

typedef union {
  struct {
    uint32_t CFG_MANTISSA_SEL : 6;
    ///< Control to select the mantissa bits from the compressed data packet.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_rx_decomp_mantissa_ctl_reg_t;

#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL_RD_MASK (0x0000003fU)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL_WR_MASK (0x0000003fU)


///< Control to select the mantissa bits from the compressed data packet.
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL_CFG_MANTISSA_SEL_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL_CFG_MANTISSA_SEL_BF_WID ( 6)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL_CFG_MANTISSA_SEL_BF_MSK (0x0000003F)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL_CFG_MANTISSA_SEL_BF_DEF (0x00000000)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL_ARR_SZ0 (32)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RX_DECOMP_EXP_CTL[8] register description at address offset 0x380
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RX_DECOMP_EXP_CTL
  * JESD RX  decompression exponent control
  */

typedef union {
  struct {
    uint32_t CFG_EXPONENT_SEL : 6;
    ///< Control to select the exponent bits from the compressed data packet
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_rx_decomp_exp_ctl_reg_t;

#define JESD_CRUX_CLK_CSR_RX_DECOMP_EXP_CTL_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_EXP_CTL_RD_MASK (0x0000003fU)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_EXP_CTL_WR_MASK (0x0000003fU)


///< Control to select the exponent bits from the compressed data packet
#define JESD_CRUX_CLK_CSR_RX_DECOMP_EXP_CTL_CFG_EXPONENT_SEL_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_EXP_CTL_CFG_EXPONENT_SEL_BF_WID ( 6)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_EXP_CTL_CFG_EXPONENT_SEL_BF_MSK (0x0000003F)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_EXP_CTL_CFG_EXPONENT_SEL_BF_DEF (0x00000000)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_EXP_CTL_ARR_SZ0 (8)
#define JESD_CRUX_CLK_CSR_RX_DECOMP_EXP_CTL_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_TX_COMP_VMLGA_REG register description at address offset 0x1000
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/TX_COMP_VMLGA_REG
  * TX vmlga control for compression
  */

typedef union {
  struct {
    uint32_t CFG_GRP : 1;
    ///< VMLGA group select.This field select the group size of compression
    ///< block .
    ///< t 0 : Group size is 1 element.
    ///< t 1 :Group size is 2 elements.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 7;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
    uint32_t CFG_VMLGA_IELEMSIZE : 2;
    ///< The size of each element at the compression block input.
    ///< t Input element size. 00=rsvd; 01=16bit; 10=32bit; 11=rsvd
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
    uint32_t CFG_AGCA_SE27 : 1;
    ///< Sign Extend for AGC-Abit. If this bit is set, the input elements are
    ///< sign extended from bit 27
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t CFG_AGCA_ORCLONEABIT : 1;
    ///< Clone ORred AGC-Abit. If 1, the Abits (Bit 29) from each element of
    ///< a group are Orred, and the output bit of this OR operation is cloned
    ///< and inserted into bit 7 of all output elements.
    ///< AccessType="RW" BitOffset="25" ResetValue="0x0"
    uint32_t CFG_EXPADJ : 1;
    ///< For twos complement output format set this bit to 1.For signed magnitude
    ///< output this bit should be 0.
    ///< AccessType="RW" BitOffset="26" ResetValue="0x0"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="27" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_tx_vmlga_reg_t;

#define JESD_CRUX_CLK_CSR_TX_VMLGA_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_TX_VMLGA_RD_MASK (0x07000301U)
#define JESD_CRUX_CLK_CSR_TX_VMLGA_WR_MASK (0x07000301U)


///< VMLGA group select.This field select the group size of compression
///< block .
///< t 0 : Group size is 1 element.
///< t 1 :Group size is 2 elements.
#define JESD_CRUX_CLK_CSR_TX_VMLGA_CFG_GRP_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_TX_VMLGA_CFG_GRP_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_TX_VMLGA_CFG_GRP_BF_MSK (0x00000001)
#define JESD_CRUX_CLK_CSR_TX_VMLGA_CFG_GRP_BF_DEF (0x00000000)

///< The size of each element at the compression block input.
///< t Input element size. 00=rsvd; 01=16bit; 10=32bit; 11=rsvd
#define JESD_CRUX_CLK_CSR_TX_VMLGA_CFG_VMLGA_IELEMSIZE_BF_OFF ( 8)
#define JESD_CRUX_CLK_CSR_TX_VMLGA_CFG_VMLGA_IELEMSIZE_BF_WID ( 2)
#define JESD_CRUX_CLK_CSR_TX_VMLGA_CFG_VMLGA_IELEMSIZE_BF_MSK (0x00000300)
#define JESD_CRUX_CLK_CSR_TX_VMLGA_CFG_VMLGA_IELEMSIZE_BF_DEF (0x00000000)

///< Sign Extend for AGC-Abit. If this bit is set, the input elements are
///< sign extended from bit 27
#define JESD_CRUX_CLK_CSR_TX_VMLGA_CFG_AGCA_SE27_BF_OFF (24)
#define JESD_CRUX_CLK_CSR_TX_VMLGA_CFG_AGCA_SE27_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_TX_VMLGA_CFG_AGCA_SE27_BF_MSK (0x01000000)
#define JESD_CRUX_CLK_CSR_TX_VMLGA_CFG_AGCA_SE27_BF_DEF (0x00000000)

///< Clone ORred AGC-Abit. If 1, the Abits (Bit 29) from each element of
///< a group are Orred, and the output bit of this OR operation is cloned
///< and inserted into bit 7 of all output elements.
#define JESD_CRUX_CLK_CSR_TX_VMLGA_CFG_AGCA_ORCLONEABIT_BF_OFF (25)
#define JESD_CRUX_CLK_CSR_TX_VMLGA_CFG_AGCA_ORCLONEABIT_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_TX_VMLGA_CFG_AGCA_ORCLONEABIT_BF_MSK (0x02000000)
#define JESD_CRUX_CLK_CSR_TX_VMLGA_CFG_AGCA_ORCLONEABIT_BF_DEF (0x00000000)

///< For twos complement output format set this bit to 1.For signed magnitude
///< output this bit should be 0.
#define JESD_CRUX_CLK_CSR_TX_VMLGA_CFG_EXPADJ_BF_OFF (26)
#define JESD_CRUX_CLK_CSR_TX_VMLGA_CFG_EXPADJ_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_TX_VMLGA_CFG_EXPADJ_BF_MSK (0x04000000)
#define JESD_CRUX_CLK_CSR_TX_VMLGA_CFG_EXPADJ_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_TX_COMP_VNSH_REG register description at address offset 0x1004
  *
  * Register default value:        0x1F004C06
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/TX_COMP_VNSH_REG
  * TX VNSH Control input to compression
  */

typedef union {
  struct {
    uint32_t CFG_VNSH_IELEMSIZE : 2;
    ///< The size of each element at the vnsh block input.
    ///< t Input element size. 00=8bit, 01=16bit, 10=32bit, 11=rsvd
    ///< AccessType="RW" BitOffset="0" ResetValue="0x2"
    uint32_t CFG_VNSH_OELEMSIZE : 2;
    ///< Output Element size.
    ///< t 00=8bit elements. 2'b01=16 bit elements, 2'b10=32 bit elements,
    ///< 2'b11 = Reserved.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x1"
    uint32_t CFG_ROUNDMODE : 1;
    ///< Rounding Mode.
    ///< t 0=Round-away-from-0
    ///< t 1=Bankers rounding.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t CFG_EXPADJ : 2;
    ///< Exponent Adjust selection.
    ///< t 00 : No adjustment.
    ///< t 01 : Add fshift to bits[4:0] of each element of IV2 and use the
    ///< result to shift
    ///< t 10 : Override values of all elements in IV2 with fshift
    ///< t 11 : Use shift values from IV2 elements bits[7:0].
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t CFG_WIDTH : 6;
    ///< Saturation width of output sample.
    ///< AccessType="RW" BitOffset="8" ResetValue="0xC"
    uint32_t CFG_VNSH_AGCA_SE : 1;
    ///< Sign Extend for AGC-Abit. If this bit is set, the input elements are
    ///< sign extended from bit 27.
    ///< AccessType="RW" BitOffset="14" ResetValue="0x1"
    uint32_t CFG_AGCA_EXPADJ : 1;
    ///< Exponent Adjustment for AGC Abit. if set, add bit 7 of the exponent
    ///< element in IV2 to the 5 LSB bits of exponent.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t CFG_FSHIFT : 6;
    ///< All elements of IV2 are overridden by this value if expadj==10.
    ///< t All elements of IV2 are incremented by this value if expadj=01.This
    ///< field is signed.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t CFG_MAXSHIFT : 5;
    ///< Maximum shift value. This defines the maximum value of the shift that
    ///< is permitted on the input samples..
    ///< AccessType="RW" BitOffset="24" ResetValue="0x1F"
    uint32_t CFG_AGCA_INSERTABIT : 2;
    ///< Insert IV0, IV1 input elements bit 29 (Abit) into bit 13,14 or 15
    ///< of corresponding shifted output element in OV0 OV1 00, 01, 10= do
    ///< nothing.  11= replace output elem bit 15 with Abit.
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
    uint32_t CFG_OV2SEL : 1;
    ///< Select exponent values to be output on OV2.
    ///< t 0 = Unadjusted exponents.
    ///< t 1 = Adjusted exponents .
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_tx_vnsh_reg_t;

#define JESD_CRUX_CLK_CSR_TX_VNSH_DEFAULT (0x1f004c06U)
#define JESD_CRUX_CLK_CSR_TX_VNSH_RD_MASK (0xff3fff7fU)
#define JESD_CRUX_CLK_CSR_TX_VNSH_WR_MASK (0xff3fff7fU)


///< The size of each element at the vnsh block input.
///< t Input element size. 00=8bit, 01=16bit, 10=32bit, 11=rsvd
#define JESD_CRUX_CLK_CSR_TX_VNSH_CFG_VNSH_IELEMSIZE_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_TX_VNSH_CFG_VNSH_IELEMSIZE_BF_WID ( 2)
#define JESD_CRUX_CLK_CSR_TX_VNSH_CFG_VNSH_IELEMSIZE_BF_MSK (0x00000003)
#define JESD_CRUX_CLK_CSR_TX_VNSH_CFG_VNSH_IELEMSIZE_BF_DEF (0x00000002)

///< Output Element size.
///< t 00=8bit elements. 2'b01=16 bit elements, 2'b10=32 bit elements,
///< 2'b11 = Reserved.
#define JESD_CRUX_CLK_CSR_TX_VNSH_CFG_VNSH_OELEMSIZE_BF_OFF ( 2)
#define JESD_CRUX_CLK_CSR_TX_VNSH_CFG_VNSH_OELEMSIZE_BF_WID ( 2)
#define JESD_CRUX_CLK_CSR_TX_VNSH_CFG_VNSH_OELEMSIZE_BF_MSK (0x0000000C)
#define JESD_CRUX_CLK_CSR_TX_VNSH_CFG_VNSH_OELEMSIZE_BF_DEF (0x00000004)

///< Rounding Mode.
///< t 0=Round-away-from-0
///< t 1=Bankers rounding.
#define JESD_CRUX_CLK_CSR_TX_VNSH_CFG_ROUNDMODE_BF_OFF ( 4)
#define JESD_CRUX_CLK_CSR_TX_VNSH_CFG_ROUNDMODE_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_TX_VNSH_CFG_ROUNDMODE_BF_MSK (0x00000010)
#define JESD_CRUX_CLK_CSR_TX_VNSH_CFG_ROUNDMODE_BF_DEF (0x00000000)

///< Exponent Adjust selection.
///< t 00 : No adjustment.
///< t 01 : Add fshift to bits[4:0] of each element of IV2 and use the
///< result to shift
///< t 10 : Override values of all elements in IV2 with fshift
///< t 11 : Use shift values from IV2 elements bits[7:0].
#define JESD_CRUX_CLK_CSR_TX_VNSH_CFG_EXPADJ_BF_OFF ( 5)
#define JESD_CRUX_CLK_CSR_TX_VNSH_CFG_EXPADJ_BF_WID ( 2)
#define JESD_CRUX_CLK_CSR_TX_VNSH_CFG_EXPADJ_BF_MSK (0x00000060)
#define JESD_CRUX_CLK_CSR_TX_VNSH_CFG_EXPADJ_BF_DEF (0x00000000)

///< Saturation width of output sample.
#define JESD_CRUX_CLK_CSR_TX_VNSH_CFG_WIDTH_BF_OFF ( 8)
#define JESD_CRUX_CLK_CSR_TX_VNSH_CFG_WIDTH_BF_WID ( 6)
#define JESD_CRUX_CLK_CSR_TX_VNSH_CFG_WIDTH_BF_MSK (0x00003F00)
#define JESD_CRUX_CLK_CSR_TX_VNSH_CFG_WIDTH_BF_DEF (0x00000C00)

///< Sign Extend for AGC-Abit. If this bit is set, the input elements are
///< sign extended from bit 27.
#define JESD_CRUX_CLK_CSR_TX_VNSH_CFG_VNSH_AGCA_SE_BF_OFF (14)
#define JESD_CRUX_CLK_CSR_TX_VNSH_CFG_VNSH_AGCA_SE_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_TX_VNSH_CFG_VNSH_AGCA_SE_BF_MSK (0x00004000)
#define JESD_CRUX_CLK_CSR_TX_VNSH_CFG_VNSH_AGCA_SE_BF_DEF (0x00004000)

///< Exponent Adjustment for AGC Abit. if set, add bit 7 of the exponent
///< element in IV2 to the 5 LSB bits of exponent.
#define JESD_CRUX_CLK_CSR_TX_VNSH_CFG_AGCA_EXPADJ_BF_OFF (15)
#define JESD_CRUX_CLK_CSR_TX_VNSH_CFG_AGCA_EXPADJ_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_TX_VNSH_CFG_AGCA_EXPADJ_BF_MSK (0x00008000)
#define JESD_CRUX_CLK_CSR_TX_VNSH_CFG_AGCA_EXPADJ_BF_DEF (0x00000000)

///< All elements of IV2 are overridden by this value if expadj==10.
///< t All elements of IV2 are incremented by this value if expadj=01.This
///< field is signed.
#define JESD_CRUX_CLK_CSR_TX_VNSH_CFG_FSHIFT_BF_OFF (16)
#define JESD_CRUX_CLK_CSR_TX_VNSH_CFG_FSHIFT_BF_WID ( 6)
#define JESD_CRUX_CLK_CSR_TX_VNSH_CFG_FSHIFT_BF_MSK (0x003F0000)
#define JESD_CRUX_CLK_CSR_TX_VNSH_CFG_FSHIFT_BF_DEF (0x00000000)

///< Maximum shift value. This defines the maximum value of the shift that
///< is permitted on the input samples..
#define JESD_CRUX_CLK_CSR_TX_VNSH_CFG_MAXSHIFT_BF_OFF (24)
#define JESD_CRUX_CLK_CSR_TX_VNSH_CFG_MAXSHIFT_BF_WID ( 5)
#define JESD_CRUX_CLK_CSR_TX_VNSH_CFG_MAXSHIFT_BF_MSK (0x1F000000)
#define JESD_CRUX_CLK_CSR_TX_VNSH_CFG_MAXSHIFT_BF_DEF (0x1F000000)

///< Insert IV0, IV1 input elements bit 29 (Abit) into bit 13,14 or 15
///< of corresponding shifted output element in OV0 OV1 00, 01, 10= do
///< nothing.  11= replace output elem bit 15 with Abit.
#define JESD_CRUX_CLK_CSR_TX_VNSH_CFG_AGCA_INSERTABIT_BF_OFF (29)
#define JESD_CRUX_CLK_CSR_TX_VNSH_CFG_AGCA_INSERTABIT_BF_WID ( 2)
#define JESD_CRUX_CLK_CSR_TX_VNSH_CFG_AGCA_INSERTABIT_BF_MSK (0x60000000)
#define JESD_CRUX_CLK_CSR_TX_VNSH_CFG_AGCA_INSERTABIT_BF_DEF (0x00000000)

///< Select exponent values to be output on OV2.
///< t 0 = Unadjusted exponents.
///< t 1 = Adjusted exponents .
#define JESD_CRUX_CLK_CSR_TX_VNSH_CFG_OV2SEL_BF_OFF (31)
#define JESD_CRUX_CLK_CSR_TX_VNSH_CFG_OV2SEL_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_TX_VNSH_CFG_OV2SEL_BF_MSK (0x80000000)
#define JESD_CRUX_CLK_CSR_TX_VNSH_CFG_OV2SEL_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_TX_COMP_TOP_REG register description at address offset 0x1008
  *
  * Register default value:        0x000230A0
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/TX_COMP_TOP_REG
  * TX Compression module top level controls
  */

typedef union {
  struct {
    uint32_t CFG_VMLGA_EN : 1;
    ///< VMLGA enable.
    ///< t 1'b1 - Enable VMLGA
    ///< t 1'b0 - Disable VMLGA
    ///< t If compression is disabled, VMLGA will be internally disabled irrespective
    ///< of this field.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_VNSH_EN : 1;
    ///< VNSH enable.
    ///< t 1'b1 - Enable VNSH
    ///< t 1'b0 - Disable VNSH
    ///< t If compression is disabled, VNSH will be internally disabled irrespective
    ///< of this field.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t CFG_COMPRESSION_EN : 1;
    ///< Compression enable.
    ///< t 1'b1 - Enable compression
    ///< t 1'b0 - Disable compression
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t CFG_OPFMT_CTL : 1;
    ///< Selects output format. 1b0 = VNSH output is passed unchanged (2s complement
    ///< format).  1b1 =VNSH output is converted to sign magnitude format.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t CFG_MW_CTL : 5;
    ///< Width of the mantissa, used to subtract from logarithmic output. set
    ///< to output mantissa width-2 for shared  and individual exponent.
    ///< AccessType="RW" BitOffset="4" ResetValue="0xA"
    uint32_t CFG_RSVD1 : 3;
    ///< Reserved.Program to zero.
    ///< AccessType="RO" BitOffset="9" ResetValue="0x0"
    uint32_t CFG_AGC_SEL : 2;
    ///< Selects the AGC bit from bits 31:28 of each element. 2'b00 = bit 28
    ///< is selected as AGC bit.  2'b01 = bit 29 is selected as AGC bit. 2'b10
    ///< =bit 30 is selected as AGC 2'b11 =bit 31 is selected as AGC bit.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x3"
    uint32_t CFG_RSVD2 : 2;
    ///< Reserved.Program to zero.
    ///< AccessType="RO" BitOffset="14" ResetValue="0x0"
    uint32_t CFG_BF_OUT_SEL : 1;
    ///< 1'b0 - Bit formatter output is taken directly to generate Vout  1'b1
    ///< - Select lower [15:0] from each bit formatter slice to form vout.
    ///< If compression is disabled, this field internally sets to 0
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t CFG_OUT_WIDTH_SEL : 1;
    ///< 1'b0 - Bit formatter output [255:0] is cloned to vout [511:256] 1'b1
    ///< = Bit formatter output [511:256] is cloned to   vout[511:256]
    ///< AccessType="RW" BitOffset="17" ResetValue="0x1"
    uint32_t CFG_RSVD3 : 14;
    ///< Reserved.Program to zero.
    ///< AccessType="RO" BitOffset="18" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_tx_top_reg_t;

#define JESD_CRUX_CLK_CSR_TX_TOP_DEFAULT (0x000230a0U)
#define JESD_CRUX_CLK_CSR_TX_TOP_RD_MASK (0xffffffffU)
#define JESD_CRUX_CLK_CSR_TX_TOP_WR_MASK (0x000331ffU)


///< VMLGA enable.
///< t 1'b1 - Enable VMLGA
///< t 1'b0 - Disable VMLGA
///< t If compression is disabled, VMLGA will be internally disabled irrespective
///< of this field.
#define JESD_CRUX_CLK_CSR_TX_TOP_CFG_VMLGA_EN_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_TX_TOP_CFG_VMLGA_EN_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_TX_TOP_CFG_VMLGA_EN_BF_MSK (0x00000001)
#define JESD_CRUX_CLK_CSR_TX_TOP_CFG_VMLGA_EN_BF_DEF (0x00000000)

///< VNSH enable.
///< t 1'b1 - Enable VNSH
///< t 1'b0 - Disable VNSH
///< t If compression is disabled, VNSH will be internally disabled irrespective
///< of this field.
#define JESD_CRUX_CLK_CSR_TX_TOP_CFG_VNSH_EN_BF_OFF ( 1)
#define JESD_CRUX_CLK_CSR_TX_TOP_CFG_VNSH_EN_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_TX_TOP_CFG_VNSH_EN_BF_MSK (0x00000002)
#define JESD_CRUX_CLK_CSR_TX_TOP_CFG_VNSH_EN_BF_DEF (0x00000000)

///< Compression enable.
///< t 1'b1 - Enable compression
///< t 1'b0 - Disable compression
#define JESD_CRUX_CLK_CSR_TX_TOP_CFG_COMPRESSION_EN_BF_OFF ( 2)
#define JESD_CRUX_CLK_CSR_TX_TOP_CFG_COMPRESSION_EN_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_TX_TOP_CFG_COMPRESSION_EN_BF_MSK (0x00000004)
#define JESD_CRUX_CLK_CSR_TX_TOP_CFG_COMPRESSION_EN_BF_DEF (0x00000000)

///< Selects output format. 1b0 = VNSH output is passed unchanged (2s complement
///< format).  1b1 =VNSH output is converted to sign magnitude format.
#define JESD_CRUX_CLK_CSR_TX_TOP_CFG_OPFMT_CTL_BF_OFF ( 3)
#define JESD_CRUX_CLK_CSR_TX_TOP_CFG_OPFMT_CTL_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_TX_TOP_CFG_OPFMT_CTL_BF_MSK (0x00000008)
#define JESD_CRUX_CLK_CSR_TX_TOP_CFG_OPFMT_CTL_BF_DEF (0x00000000)

///< Width of the mantissa, used to subtract from logarithmic output. set
///< to output mantissa width-2 for shared  and individual exponent.
#define JESD_CRUX_CLK_CSR_TX_TOP_CFG_MW_CTL_BF_OFF ( 4)
#define JESD_CRUX_CLK_CSR_TX_TOP_CFG_MW_CTL_BF_WID ( 5)
#define JESD_CRUX_CLK_CSR_TX_TOP_CFG_MW_CTL_BF_MSK (0x000001F0)
#define JESD_CRUX_CLK_CSR_TX_TOP_CFG_MW_CTL_BF_DEF (0x000000A0)

///< Reserved.Program to zero.
#define JESD_CRUX_CLK_CSR_TX_TOP_CFG_RSVD1_BF_OFF ( 9)
#define JESD_CRUX_CLK_CSR_TX_TOP_CFG_RSVD1_BF_WID ( 3)
#define JESD_CRUX_CLK_CSR_TX_TOP_CFG_RSVD1_BF_MSK (0x00000E00)
#define JESD_CRUX_CLK_CSR_TX_TOP_CFG_RSVD1_BF_DEF (0x00000000)

///< Selects the AGC bit from bits 31:28 of each element. 2'b00 = bit 28
///< is selected as AGC bit.  2'b01 = bit 29 is selected as AGC bit. 2'b10
///< =bit 30 is selected as AGC 2'b11 =bit 31 is selected as AGC bit.
#define JESD_CRUX_CLK_CSR_TX_TOP_CFG_AGC_SEL_BF_OFF (12)
#define JESD_CRUX_CLK_CSR_TX_TOP_CFG_AGC_SEL_BF_WID ( 2)
#define JESD_CRUX_CLK_CSR_TX_TOP_CFG_AGC_SEL_BF_MSK (0x00003000)
#define JESD_CRUX_CLK_CSR_TX_TOP_CFG_AGC_SEL_BF_DEF (0x00003000)

///< Reserved.Program to zero.
#define JESD_CRUX_CLK_CSR_TX_TOP_CFG_RSVD2_BF_OFF (14)
#define JESD_CRUX_CLK_CSR_TX_TOP_CFG_RSVD2_BF_WID ( 2)
#define JESD_CRUX_CLK_CSR_TX_TOP_CFG_RSVD2_BF_MSK (0x0000C000)
#define JESD_CRUX_CLK_CSR_TX_TOP_CFG_RSVD2_BF_DEF (0x00000000)

///< 1'b0 - Bit formatter output is taken directly to generate Vout  1'b1
///< - Select lower [15:0] from each bit formatter slice to form vout.
///< If compression is disabled, this field internally sets to 0
#define JESD_CRUX_CLK_CSR_TX_TOP_CFG_BF_OUT_SEL_BF_OFF (16)
#define JESD_CRUX_CLK_CSR_TX_TOP_CFG_BF_OUT_SEL_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_TX_TOP_CFG_BF_OUT_SEL_BF_MSK (0x00010000)
#define JESD_CRUX_CLK_CSR_TX_TOP_CFG_BF_OUT_SEL_BF_DEF (0x00000000)

///< 1'b0 - Bit formatter output [255:0] is cloned to vout [511:256] 1'b1
///< = Bit formatter output [511:256] is cloned to   vout[511:256]
#define JESD_CRUX_CLK_CSR_TX_TOP_CFG_OUT_WIDTH_SEL_BF_OFF (17)
#define JESD_CRUX_CLK_CSR_TX_TOP_CFG_OUT_WIDTH_SEL_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_TX_TOP_CFG_OUT_WIDTH_SEL_BF_MSK (0x00020000)
#define JESD_CRUX_CLK_CSR_TX_TOP_CFG_OUT_WIDTH_SEL_BF_DEF (0x00020000)

///< Reserved.Program to zero.
#define JESD_CRUX_CLK_CSR_TX_TOP_CFG_RSVD3_BF_OFF (18)
#define JESD_CRUX_CLK_CSR_TX_TOP_CFG_RSVD3_BF_WID (14)
#define JESD_CRUX_CLK_CSR_TX_TOP_CFG_RSVD3_BF_MSK (0xFFFC0000)
#define JESD_CRUX_CLK_CSR_TX_TOP_CFG_RSVD3_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_TX_NUM_VALID_STR register description at address offset 0x100c
  *
  * Register default value:        0xFFFFFFFF
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/TX_NUM_VALID_STR
  * JESD TX NUM VALID STREAM
  */

typedef union {
  struct {
    uint32_t TX_NUM_VALID_STR : 16;
    ///< JESD TX number of valid stream out of 16 streams , each bit represent
    ///< one stream          ex 16'h0001 = one  valid stream
    ///< 16'h0003    = two valid stream
    ///< AccessType="RW" BitOffset="0" ResetValue="0xFFFF"
    uint32_t TX_NUM_VALID_BUFF : 16;
    ///< JESD TX number of valid buffers out of 16 buffers , each bit represents
    ///< each buffer          ex 16'h0001 = buf 0 is valid               16'h0003
    ///< = buf 0 and 1 are valid
    ///< AccessType="RW" BitOffset="16" ResetValue="0xFFFF"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_tx_num_valid_str_reg_t;

#define JESD_CRUX_CLK_CSR_TX_NUM_VALID_STR_DEFAULT (0xffffffffU)
#define JESD_CRUX_CLK_CSR_TX_NUM_VALID_STR_RD_MASK (0xffffffffU)
#define JESD_CRUX_CLK_CSR_TX_NUM_VALID_STR_WR_MASK (0xffffffffU)


///< JESD TX number of valid stream out of 16 streams , each bit represent
///< one stream          ex 16'h0001 = one  valid stream
///< 16'h0003    = two valid stream
#define JESD_CRUX_CLK_CSR_TX_NUM_VALID_STR_TX_NUM_VALID_STR_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_TX_NUM_VALID_STR_TX_NUM_VALID_STR_BF_WID (16)
#define JESD_CRUX_CLK_CSR_TX_NUM_VALID_STR_TX_NUM_VALID_STR_BF_MSK (0x0000FFFF)
#define JESD_CRUX_CLK_CSR_TX_NUM_VALID_STR_TX_NUM_VALID_STR_BF_DEF (0x0000FFFF)

///< JESD TX number of valid buffers out of 16 buffers , each bit represents
///< each buffer          ex 16'h0001 = buf 0 is valid               16'h0003
///< = buf 0 and 1 are valid
#define JESD_CRUX_CLK_CSR_TX_NUM_VALID_STR_TX_NUM_VALID_BUFF_BF_OFF (16)
#define JESD_CRUX_CLK_CSR_TX_NUM_VALID_STR_TX_NUM_VALID_BUFF_BF_WID (16)
#define JESD_CRUX_CLK_CSR_TX_NUM_VALID_STR_TX_NUM_VALID_BUFF_BF_MSK (0xFFFF0000)
#define JESD_CRUX_CLK_CSR_TX_NUM_VALID_STR_TX_NUM_VALID_BUFF_BF_DEF (0xFFFF0000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_TX_TSB_TRIG_EN_REG register description at address offset 0x1010
  *
  * Register default value:        0x0001FFFF
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/TX_TSB_TRIG_EN_REG
  * TSB read request trigger configuration
  */

typedef union {
  struct {
    uint32_t TSB_RD_TRIG_FILL_LVL : 16;
    ///< Indicates the Tsb fill level at which the read trig should be generated
    ///< max (64KB)
    ///< AccessType="RW" BitOffset="0" ResetValue="0xFFFF"
    uint32_t TSB_RD_TRIG_ON_HALF_FILL : 1;
    ///< enables the trigger if all valid buffers are half filled
    ///< AccessType="RW" BitOffset="16" ResetValue="0x1"
    uint32_t TSB_RD_TRIG_EN : 1;
    ///< enables the trigger based on size mentioned in field [16:0]
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_tx_tsb_trig_en_reg_t;

#define JESD_CRUX_CLK_CSR_TX_TSB_TRIG_EN_DEFAULT (0x0001ffffU)
#define JESD_CRUX_CLK_CSR_TX_TSB_TRIG_EN_RD_MASK (0x0003ffffU)
#define JESD_CRUX_CLK_CSR_TX_TSB_TRIG_EN_WR_MASK (0x0003ffffU)


///< Indicates the Tsb fill level at which the read trig should be generated
///< max (64KB)
#define JESD_CRUX_CLK_CSR_TX_TSB_TRIG_EN_TSB_RD_TRIG_FILL_LVL_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_TX_TSB_TRIG_EN_TSB_RD_TRIG_FILL_LVL_BF_WID (16)
#define JESD_CRUX_CLK_CSR_TX_TSB_TRIG_EN_TSB_RD_TRIG_FILL_LVL_BF_MSK (0x0000FFFF)
#define JESD_CRUX_CLK_CSR_TX_TSB_TRIG_EN_TSB_RD_TRIG_FILL_LVL_BF_DEF (0x0000FFFF)

///< enables the trigger if all valid buffers are half filled
#define JESD_CRUX_CLK_CSR_TX_TSB_TRIG_EN_TSB_RD_TRIG_ON_HALF_FILL_BF_OFF (16)
#define JESD_CRUX_CLK_CSR_TX_TSB_TRIG_EN_TSB_RD_TRIG_ON_HALF_FILL_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_TX_TSB_TRIG_EN_TSB_RD_TRIG_ON_HALF_FILL_BF_MSK (0x00010000)
#define JESD_CRUX_CLK_CSR_TX_TSB_TRIG_EN_TSB_RD_TRIG_ON_HALF_FILL_BF_DEF (0x00010000)

///< enables the trigger based on size mentioned in field [16:0]
#define JESD_CRUX_CLK_CSR_TX_TSB_TRIG_EN_TSB_RD_TRIG_EN_BF_OFF (17)
#define JESD_CRUX_CLK_CSR_TX_TSB_TRIG_EN_TSB_RD_TRIG_EN_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_TX_TSB_TRIG_EN_TSB_RD_TRIG_EN_BF_MSK (0x00020000)
#define JESD_CRUX_CLK_CSR_TX_TSB_TRIG_EN_TSB_RD_TRIG_EN_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_TX_TSB_BUF_FILL_STATUS register description at address offset 0x1014
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/TX_TSB_BUF_FILL_STATUS
  * TSB Buffer fill status
  */

typedef union {
  struct {
    uint32_t TSB_HALF_FILL_STATUS : 1;
    ///< This bit indicates all valid tsb buffers have reached half mark.
    ///< The bit set when TSB initially reaches this mark after traffic starts
    ///< and is sticky after that irrespective of the TSB level change.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t TSB_FILL_STATUS : 1;
    ///< This bit indicates all valid buffers have reached programmed fill
    ///< level.                   The bit set when TSB initially reaches this
    ///< mark after traffic starts and is sticky after that irrespective of
    ///< the TSB level change.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_tx_tsb_buf_fill_stat_reg_t;

#define JESD_CRUX_CLK_CSR_TX_TSB_BUF_FILL_STAT_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_TX_TSB_BUF_FILL_STAT_RD_MASK (0x00000003U)
#define JESD_CRUX_CLK_CSR_TX_TSB_BUF_FILL_STAT_WR_MASK (0x00000000U)


///< This bit indicates all valid tsb buffers have reached half mark.
///< The bit set when TSB initially reaches this mark after traffic starts
///< and is sticky after that irrespective of the TSB level change.
#define JESD_CRUX_CLK_CSR_TX_TSB_BUF_FILL_STAT_TSB_HALF_FILL_STAT_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_TX_TSB_BUF_FILL_STAT_TSB_HALF_FILL_STAT_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_TX_TSB_BUF_FILL_STAT_TSB_HALF_FILL_STAT_BF_MSK (0x00000001)
#define JESD_CRUX_CLK_CSR_TX_TSB_BUF_FILL_STAT_TSB_HALF_FILL_STAT_BF_DEF (0x00000000)

///< This bit indicates all valid buffers have reached programmed fill
///< level.                   The bit set when TSB initially reaches this
///< mark after traffic starts and is sticky after that irrespective of
///< the TSB level change.
#define JESD_CRUX_CLK_CSR_TX_TSB_BUF_FILL_STAT_TSB_FILL_STAT_BF_OFF ( 1)
#define JESD_CRUX_CLK_CSR_TX_TSB_BUF_FILL_STAT_TSB_FILL_STAT_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_TX_TSB_BUF_FILL_STAT_TSB_FILL_STAT_BF_MSK (0x00000002)
#define JESD_CRUX_CLK_CSR_TX_TSB_BUF_FILL_STAT_TSB_FILL_STAT_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_TX_TSB_BUF_OVERFLOW_STATUS register description at address offset 0x1018
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/TX_TSB_BUF_OVERFLOW_STATUS
  * JESD TX TSB overflow status
  */

typedef union {
  struct {
    uint32_t TX_BUF_OVERFLOW : 16;
    ///< set for the tsb buffers overflow
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_tx_tsb_buf_overflow_stat_reg_t;

#define JESD_CRUX_CLK_CSR_TX_TSB_BUF_OVERFLOW_STAT_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_TX_TSB_BUF_OVERFLOW_STAT_RD_MASK (0x0000ffffU)
#define JESD_CRUX_CLK_CSR_TX_TSB_BUF_OVERFLOW_STAT_WR_MASK (0x0000ffffU)


///< set for the tsb buffers overflow
#define JESD_CRUX_CLK_CSR_TX_TSB_BUF_OVERFLOW_STAT_TX_BUF_OVERFLOW_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_TX_TSB_BUF_OVERFLOW_STAT_TX_BUF_OVERFLOW_BF_WID (16)
#define JESD_CRUX_CLK_CSR_TX_TSB_BUF_OVERFLOW_STAT_TX_BUF_OVERFLOW_BF_MSK (0x0000FFFF)
#define JESD_CRUX_CLK_CSR_TX_TSB_BUF_OVERFLOW_STAT_TX_BUF_OVERFLOW_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_TX_MEM_APB_WR register description at address offset 0x1020
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/TX_MEM_APB_WR
  * TX Memory APB writes
  */

typedef union {
  struct {
    uint32_t TRIG_DEBUG_WRITE_TO_MEM : 1;
    ///< Triggers a write to  the memory on address present  tx_mem_apb_addr
    ///< register. The write is valid only  when TSB  data source mode in enabled
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_tx_mem_apb_wr_reg_t;

#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WR_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WR_RD_MASK (0x00000001U)
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WR_MASK (0x00000001U)


///< Triggers a write to  the memory on address present  tx_mem_apb_addr
///< register. The write is valid only  when TSB  data source mode in enabled
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WR_TRIG_DBG_WRITE_TO_MEM_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WR_TRIG_DBG_WRITE_TO_MEM_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WR_TRIG_DBG_WRITE_TO_MEM_BF_MSK (0x00000001)
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WR_TRIG_DBG_WRITE_TO_MEM_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_TX_APB_MEM_WADDR register description at address offset 0x1024
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/TX_APB_MEM_WADDR
  * TX Memory APB Write access address
  */

typedef union {
  struct {
    uint32_t TX_MEM_WADDR : 6;
    ///< TX memory write address to be written.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TX_MEM_SEL : 16;
    ///< Inidactes the buffers selected to be written.        Bit 0 : Buf0
    ///< enabled for write and so on.             Multiple buffers can be selected
    ///< to written at once.
    ///< Example 16'b0000_0000_0000_0011   -  buffer 0,1 are selected
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_tx_apb_mem_waddr_reg_t;

#define JESD_CRUX_CLK_CSR_TX_APB_MEM_WADDR_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_TX_APB_MEM_WADDR_RD_MASK (0x003fffffU)
#define JESD_CRUX_CLK_CSR_TX_APB_MEM_WADDR_WR_MASK (0x003fffffU)


///< TX memory write address to be written.
#define JESD_CRUX_CLK_CSR_TX_APB_MEM_WADDR_TX_MEM_WADDR_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_TX_APB_MEM_WADDR_TX_MEM_WADDR_BF_WID ( 6)
#define JESD_CRUX_CLK_CSR_TX_APB_MEM_WADDR_TX_MEM_WADDR_BF_MSK (0x0000003F)
#define JESD_CRUX_CLK_CSR_TX_APB_MEM_WADDR_TX_MEM_WADDR_BF_DEF (0x00000000)

///< Inidactes the buffers selected to be written.        Bit 0 : Buf0
///< enabled for write and so on.             Multiple buffers can be selected
///< to written at once.
///< Example 16'b0000_0000_0000_0011   -  buffer 0,1 are selected
#define JESD_CRUX_CLK_CSR_TX_APB_MEM_WADDR_TX_MEM_SEL_BF_OFF ( 6)
#define JESD_CRUX_CLK_CSR_TX_APB_MEM_WADDR_TX_MEM_SEL_BF_WID (16)
#define JESD_CRUX_CLK_CSR_TX_APB_MEM_WADDR_TX_MEM_SEL_BF_MSK (0x003FFFC0)
#define JESD_CRUX_CLK_CSR_TX_APB_MEM_WADDR_TX_MEM_SEL_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_TX_TSB_FULL_WATER_MARK register description at address offset 0x1030
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/TX_TSB_FULL_WATER_MARK
  * JESD TX  TSB buffers full water mark
  */

typedef union {
  struct {
    uint32_t TX_BUF_FULL_WATER_MARK : 10;
    ///< Indicates the tsb buffer  full water mark 512 bits aligned
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_tx_tsb_full_water_mark_reg_t;

#define JESD_CRUX_CLK_CSR_TX_TSB_FULL_WATER_MARK_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_TX_TSB_FULL_WATER_MARK_RD_MASK (0x000003ffU)
#define JESD_CRUX_CLK_CSR_TX_TSB_FULL_WATER_MARK_WR_MASK (0x000003ffU)


///< Indicates the tsb buffer  full water mark 512 bits aligned
#define JESD_CRUX_CLK_CSR_TX_TSB_FULL_WATER_MARK_TX_BUF_FULL_WATER_MARK_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_TX_TSB_FULL_WATER_MARK_TX_BUF_FULL_WATER_MARK_BF_WID (10)
#define JESD_CRUX_CLK_CSR_TX_TSB_FULL_WATER_MARK_TX_BUF_FULL_WATER_MARK_BF_MSK (0x000003FF)
#define JESD_CRUX_CLK_CSR_TX_TSB_FULL_WATER_MARK_TX_BUF_FULL_WATER_MARK_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_TX_TSB_FULL_STATUS register description at address offset 0x1034
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/TX_TSB_FULL_STATUS
  * JESD TX TSB full and almost full  Status
  */

typedef union {
  struct {
    uint32_t TX_BUF_FULL : 16;
    ///< set if tsb buffers are full , each bit corresponds to each stream
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t TX_BUF_ALMOST_FULL : 16;
    ///< set if tsb buffers are almost full , each bit corresponds to each
    ///< stream
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_tx_tsb_full_stat_reg_t;

#define JESD_CRUX_CLK_CSR_TX_TSB_FULL_STAT_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_TX_TSB_FULL_STAT_RD_MASK (0xffffffffU)
#define JESD_CRUX_CLK_CSR_TX_TSB_FULL_STAT_WR_MASK (0x00000000U)


///< set if tsb buffers are full , each bit corresponds to each stream
#define JESD_CRUX_CLK_CSR_TX_TSB_FULL_STAT_TX_BUF_FULL_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_TX_TSB_FULL_STAT_TX_BUF_FULL_BF_WID (16)
#define JESD_CRUX_CLK_CSR_TX_TSB_FULL_STAT_TX_BUF_FULL_BF_MSK (0x0000FFFF)
#define JESD_CRUX_CLK_CSR_TX_TSB_FULL_STAT_TX_BUF_FULL_BF_DEF (0x00000000)

///< set if tsb buffers are almost full , each bit corresponds to each
///< stream
#define JESD_CRUX_CLK_CSR_TX_TSB_FULL_STAT_TX_BUF_ALMOST_FULL_BF_OFF (16)
#define JESD_CRUX_CLK_CSR_TX_TSB_FULL_STAT_TX_BUF_ALMOST_FULL_BF_WID (16)
#define JESD_CRUX_CLK_CSR_TX_TSB_FULL_STAT_TX_BUF_ALMOST_FULL_BF_MSK (0xFFFF0000)
#define JESD_CRUX_CLK_CSR_TX_TSB_FULL_STAT_TX_BUF_ALMOST_FULL_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_TX_TSB_CFG register description at address offset 0x1038
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/TX_TSB_CFG
  * JESD TX TSB config
  */

typedef union {
  struct {
    uint32_t TX_OP_MODE_WHEN_FULL : 2;
    ///< indicates the mode of write operation when tsb buffer is full
    ///< 2'b00 = override the tsb locations ,
    ///< 2'b01 = drop the writes to the TSB
    ///< 2'b10 = block the writes to TSB , this will back pressure NSIP
    ///< 2'b11 = override the TSB location ( same like 'b00)
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_tx_tsb_cfg_reg_t;

#define JESD_CRUX_CLK_CSR_TX_TSB_CFG_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_TX_TSB_CFG_RD_MASK (0x00000003U)
#define JESD_CRUX_CLK_CSR_TX_TSB_CFG_WR_MASK (0x00000003U)


///< indicates the mode of write operation when tsb buffer is full
///< 2'b00 = override the tsb locations ,
///< 2'b01 = drop the writes to the TSB
///< 2'b10 = block the writes to TSB , this will back pressure NSIP
///< 2'b11 = override the TSB location ( same like 'b00)
#define JESD_CRUX_CLK_CSR_TX_TSB_CFG_TX_OP_MODE_WHEN_FULL_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_TX_TSB_CFG_TX_OP_MODE_WHEN_FULL_BF_WID ( 2)
#define JESD_CRUX_CLK_CSR_TX_TSB_CFG_TX_OP_MODE_WHEN_FULL_BF_MSK (0x00000003)
#define JESD_CRUX_CLK_CSR_TX_TSB_CFG_TX_OP_MODE_WHEN_FULL_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_TX_ECC_GEN_DIS register description at address offset 0x103c
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/TX_ECC_GEN_DIS
  * TX ECC gen disable register
  */

typedef union {
  struct {
    uint32_t ECC_GEN_DIS : 1;
    ///< set 1 to diable the ecc generation while writing into TSB's .
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_tx_ecc_gen_dis_reg_t;

#define JESD_CRUX_CLK_CSR_TX_ECC_GEN_DIS_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_TX_ECC_GEN_DIS_RD_MASK (0x00000001U)
#define JESD_CRUX_CLK_CSR_TX_ECC_GEN_DIS_WR_MASK (0x00000001U)


///< set 1 to diable the ecc generation while writing into TSB's .
#define JESD_CRUX_CLK_CSR_TX_ECC_GEN_DIS_ECC_GEN_DIS_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_TX_ECC_GEN_DIS_ECC_GEN_DIS_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_TX_ECC_GEN_DIS_ECC_GEN_DIS_BF_MSK (0x00000001)
#define JESD_CRUX_CLK_CSR_TX_ECC_GEN_DIS_ECC_GEN_DIS_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_TX_TSB_CAPTURE_MODE_CLR_WRPTR register description at address offset 0x1040
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/TX_TSB_CAPTURE_MODE_CLR_WRPTR
  * JESD TX clear TSB wrptr when in capturemode
  */

typedef union {
  struct {
    uint32_t TX_TSB_CLR_WRPTR : 1;
    ///< JESD TX clear TSB wrptr when in capturemode , write one to clear
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_tx_tsb_cap_mode_clr_wrptr_reg_t;

#define JESD_CRUX_CLK_CSR_TX_TSB_CAP_MODE_CLR_WRPTR_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_TX_TSB_CAP_MODE_CLR_WRPTR_RD_MASK (0x00000001U)
#define JESD_CRUX_CLK_CSR_TX_TSB_CAP_MODE_CLR_WRPTR_WR_MASK (0x00000001U)


///< JESD TX clear TSB wrptr when in capturemode , write one to clear
#define JESD_CRUX_CLK_CSR_TX_TSB_CAP_MODE_CLR_WRPTR_TX_TSB_CLR_WRPTR_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_TX_TSB_CAP_MODE_CLR_WRPTR_TX_TSB_CLR_WRPTR_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_TX_TSB_CAP_MODE_CLR_WRPTR_TX_TSB_CLR_WRPTR_BF_MSK (0x00000001)
#define JESD_CRUX_CLK_CSR_TX_TSB_CAP_MODE_CLR_WRPTR_TX_TSB_CLR_WRPTR_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_TX_COMP_BITFORMAT_CTL[32] register description at address offset 0x1100
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/TX_COMP_BITFORMAT_CTL
  * TX Copression bit format register
  */

typedef union {
  struct {
    uint32_t CFG_MUX_SEL : 6;
    ///< This register controls the bit position of the compressed JESD IQ
    ///< output.             Its value will be different for different compression
    ///< use cases. This value is determined by the output compressed word
    ///< format.            The value of this register can be ranged from 0
    ///< to 47.Rest of the values (48-63) are reserved. This register is used
    ///< only if the compression is enabled.            If compression is disabled,
    ///< this register can be programmed to any value. Each of this register
    ///< goes to the select line of a 48x1 mux used in the design.
    ///< The 48 bit data input of the 48x1 mux consists of the mantissa and
    ///< exponent obtained as the results of compression.            If we
    ///< program this register to 0, 0th bit will be selected from the 48 bit
    ///< input as the mux output.            Similarly, if we program this
    ///< register to value n ,bit [n] of the data input will be selected as
    ///< mux output.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_tx_bitformat_ctl_reg_t;

#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL_RD_MASK (0x0000003fU)
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL_WR_MASK (0x0000003fU)


///< This register controls the bit position of the compressed JESD IQ
///< output.             Its value will be different for different compression
///< use cases. This value is determined by the output compressed word
///< format.            The value of this register can be ranged from 0
///< to 47.Rest of the values (48-63) are reserved. This register is used
///< only if the compression is enabled.            If compression is disabled,
///< this register can be programmed to any value. Each of this register
///< goes to the select line of a 48x1 mux used in the design.
///< The 48 bit data input of the 48x1 mux consists of the mantissa and
///< exponent obtained as the results of compression.            If we
///< program this register to 0, 0th bit will be selected from the 48 bit
///< input as the mux output.            Similarly, if we program this
///< register to value n ,bit [n] of the data input will be selected as
///< mux output.
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL_CFG_MUX_SEL_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL_CFG_MUX_SEL_BF_WID ( 6)
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL_CFG_MUX_SEL_BF_MSK (0x0000003F)
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL_CFG_MUX_SEL_BF_DEF (0x00000000)
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL_ARR_SZ0 (32)
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_TX_STRM_MEM_ADDR[16] register description at address offset 0x1200
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/TX_STRM_MEM_ADDR
  * JESD TX Stream Memory Address configuratio Register
  */

typedef union {
  struct {
    uint32_t TX_MEM_BASE_ADDR : 16;
    ///< Tx memory Base address.
    ///< The 512 bit start address offset aligned to 4KB boundary in the TX
    ///< memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_tx_strm_mem_addr_reg_t;

#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR_RD_MASK (0x0000ffffU)
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR_WR_MASK (0x0000ffffU)


///< Tx memory Base address.
///< The 512 bit start address offset aligned to 4KB boundary in the TX
///< memory.
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR_TX_MEM_BASE_ADDR_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR_TX_MEM_BASE_ADDR_BF_WID (16)
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR_TX_MEM_BASE_ADDR_BF_MSK (0x0000FFFF)
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR_TX_MEM_BASE_ADDR_BF_DEF (0x00000000)
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR_ARR_SZ0 (16)
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_TX_STRM_MEM_SIZE[16] register description at address offset 0x1240
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/TX_STRM_MEM_SIZE
  * JESD Stream MEmory Size Configuration
  */

typedef union {
  struct {
    uint32_t TX_MEM_SIZE : 16;
    ///< Tx memory size.
    ///< The total memory locations allocated to the Stream byte aligned
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_tx_strm_mem_size_reg_t;

#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE_RD_MASK (0x0000ffffU)
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE_WR_MASK (0x0000ffffU)


///< Tx memory size.
///< The total memory locations allocated to the Stream byte aligned
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE_TX_MEM_SIZE_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE_TX_MEM_SIZE_BF_WID (16)
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE_TX_MEM_SIZE_BF_MSK (0x0000FFFF)
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE_TX_MEM_SIZE_BF_DEF (0x00000000)
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE_ARR_SZ0 (16)
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_TX_STRM_MEM_WPTR[16] register description at address offset 0x1280
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/TX_STRM_MEM_WPTR
  * JESD TX Stream Memory Write Pointer
  */

typedef union {
  struct {
    uint32_t TX_MEM_WR_PTR : 16;
    ///< Tx memory write pointer.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_tx_strm_mem_wptr_reg_t;

#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR_RD_MASK (0x0000ffffU)
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR_WR_MASK (0x0000ffffU)


///< Tx memory write pointer.
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR_TX_MEM_WR_PTR_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR_TX_MEM_WR_PTR_BF_WID (16)
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR_TX_MEM_WR_PTR_BF_MSK (0x0000FFFF)
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR_TX_MEM_WR_PTR_BF_DEF (0x00000000)
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR_ARR_SZ0 (16)
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_TX_MEM_APB_WDATA[16] register description at address offset 0x12c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/TX_MEM_APB_WDATA
  * TX memory write data word
  */

typedef union {
  struct {
    uint32_t TX_MEM_WDATA_WORD : 32;
    ///< Holds the 32 bit write data to be written in to the memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_tx_mem_apb_wdata_reg_t;

#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA_RD_MASK (0xffffffffU)
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA_WR_MASK (0xffffffffU)


///< Holds the 32 bit write data to be written in to the memory.
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA_TX_MEM_WDATA_WORD_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA_TX_MEM_WDATA_WORD_BF_WID (32)
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA_TX_MEM_WDATA_WORD_BF_MSK (0xFFFFFFFF)
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA_TX_MEM_WDATA_WORD_BF_DEF (0x00000000)
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA_ARR_SZ0 (16)
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL[16] register description at address offset 0x1300
  *
  * Register default value:        0x0000FFFF
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/TX_STRM_TSB_RD_TRIG_LVL
  * indicates TSB fill level when read trigger is triggered
  */

typedef union {
  struct {
    uint32_t TX_TSB_RD_TRIG_FILL_LVL : 16;
    ///< indicates TSB fill level when read trigger is triggered
    ///< AccessType="RW" BitOffset="0" ResetValue="0xFFFF"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_tx_strm_tsb_rd_trig_lvl_reg_t;

#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL_DEFAULT (0x0000ffffU)
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL_RD_MASK (0x0000ffffU)
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL_WR_MASK (0x0000ffffU)


///< indicates TSB fill level when read trigger is triggered
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL_TX_TSB_RD_TRIG_FILL_LVL_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL_TX_TSB_RD_TRIG_FILL_LVL_BF_WID (16)
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL_TX_TSB_RD_TRIG_FILL_LVL_BF_MSK (0x0000FFFF)
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL_TX_TSB_RD_TRIG_FILL_LVL_BF_DEF (0x0000FFFF)
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL_ARR_SZ0 (16)
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_NSIP_HALT register description at address offset 0x2000
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/NSIP_HALT
  * NSIP HALT register
  */

typedef union {
  struct {
    uint32_t NSIP_HALT : 1;
    ///< When set to 1 indicates NSIP to complete sending pending data on crux
    ///< interface and stop accepting data from RX glue.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_nsip_halt_reg_t;

#define JESD_CRUX_CLK_CSR_NSIP_HALT_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_NSIP_HALT_RD_MASK (0x00000001U)
#define JESD_CRUX_CLK_CSR_NSIP_HALT_WR_MASK (0x00000001U)


///< When set to 1 indicates NSIP to complete sending pending data on crux
///< interface and stop accepting data from RX glue.
#define JESD_CRUX_CLK_CSR_NSIP_HALT_NSIP_HALT_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_NSIP_HALT_NSIP_HALT_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_NSIP_HALT_NSIP_HALT_BF_MSK (0x00000001)
#define JESD_CRUX_CLK_CSR_NSIP_HALT_NSIP_HALT_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_LPBK_CTL register description at address offset 0x2004
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/LPBK_CTL
  * JESD SS Loopback Control registers
  */

typedef union {
  struct {
    uint32_t NSIP_OUT_TO_NSIP_IN_LPBK_EN : 1;
    ///< Enables the loopback connection between  NSIP output to TX Glue and
    ///< NSIP input from RX glue, if set to 1.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_GLUE_TO_TX_GLUE_LPBK_EN : 1;
    ///< Enables the loopback connection between RX glue output to NSIP and
    ///< Tx Glue input from NSIP, if set to 1.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t TX_GLUE_TO_RX_GLUE_LPBK_EN : 1;
    ///< Enables the loopback connection between TX glue output to JESD IP
    ///< and Rx Glue input from JESD IP, if set to 1.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t JESD_RXIP_TO_TXIP_LOOP_EN : 1;
    ///< Enables the loopback connection between JESD RX IP sample interface
    ///< output and JESD TX IP sample interface input, if set to 1.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t JESD_TXIP_TO_RXIP_LOOP_EN : 1;
    ///< Enables the loopback connection between JESD TX IP serdes interface
    ///< output and JESD RX IP serdes interface input, if set to 1.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_lpbk_ctl_reg_t;

#define JESD_CRUX_CLK_CSR_LPBK_CTL_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_LPBK_CTL_RD_MASK (0x0000001fU)
#define JESD_CRUX_CLK_CSR_LPBK_CTL_WR_MASK (0x0000001fU)


///< Enables the loopback connection between  NSIP output to TX Glue and
///< NSIP input from RX glue, if set to 1.
#define JESD_CRUX_CLK_CSR_LPBK_CTL_NSIP_OUT_TO_NSIP_IN_LPBK_EN_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_LPBK_CTL_NSIP_OUT_TO_NSIP_IN_LPBK_EN_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_LPBK_CTL_NSIP_OUT_TO_NSIP_IN_LPBK_EN_BF_MSK (0x00000001)
#define JESD_CRUX_CLK_CSR_LPBK_CTL_NSIP_OUT_TO_NSIP_IN_LPBK_EN_BF_DEF (0x00000000)

///< Enables the loopback connection between RX glue output to NSIP and
///< Tx Glue input from NSIP, if set to 1.
#define JESD_CRUX_CLK_CSR_LPBK_CTL_RX_GLUE_TO_TX_GLUE_LPBK_EN_BF_OFF ( 1)
#define JESD_CRUX_CLK_CSR_LPBK_CTL_RX_GLUE_TO_TX_GLUE_LPBK_EN_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_LPBK_CTL_RX_GLUE_TO_TX_GLUE_LPBK_EN_BF_MSK (0x00000002)
#define JESD_CRUX_CLK_CSR_LPBK_CTL_RX_GLUE_TO_TX_GLUE_LPBK_EN_BF_DEF (0x00000000)

///< Enables the loopback connection between TX glue output to JESD IP
///< and Rx Glue input from JESD IP, if set to 1.
#define JESD_CRUX_CLK_CSR_LPBK_CTL_TX_GLUE_TO_RX_GLUE_LPBK_EN_BF_OFF ( 2)
#define JESD_CRUX_CLK_CSR_LPBK_CTL_TX_GLUE_TO_RX_GLUE_LPBK_EN_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_LPBK_CTL_TX_GLUE_TO_RX_GLUE_LPBK_EN_BF_MSK (0x00000004)
#define JESD_CRUX_CLK_CSR_LPBK_CTL_TX_GLUE_TO_RX_GLUE_LPBK_EN_BF_DEF (0x00000000)

///< Enables the loopback connection between JESD RX IP sample interface
///< output and JESD TX IP sample interface input, if set to 1.
#define JESD_CRUX_CLK_CSR_LPBK_CTL_JESD_RXIP_TO_TXIP_LOOP_EN_BF_OFF ( 3)
#define JESD_CRUX_CLK_CSR_LPBK_CTL_JESD_RXIP_TO_TXIP_LOOP_EN_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_LPBK_CTL_JESD_RXIP_TO_TXIP_LOOP_EN_BF_MSK (0x00000008)
#define JESD_CRUX_CLK_CSR_LPBK_CTL_JESD_RXIP_TO_TXIP_LOOP_EN_BF_DEF (0x00000000)

///< Enables the loopback connection between JESD TX IP serdes interface
///< output and JESD RX IP serdes interface input, if set to 1.
#define JESD_CRUX_CLK_CSR_LPBK_CTL_JESD_TXIP_TO_RXIP_LOOP_EN_BF_OFF ( 4)
#define JESD_CRUX_CLK_CSR_LPBK_CTL_JESD_TXIP_TO_RXIP_LOOP_EN_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_LPBK_CTL_JESD_TXIP_TO_RXIP_LOOP_EN_BF_MSK (0x00000010)
#define JESD_CRUX_CLK_CSR_LPBK_CTL_JESD_TXIP_TO_RXIP_LOOP_EN_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_NSIP_HALT_DONE register description at address offset 0x2008
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/NSIP_HALT_DONE
  * NSIP HALT DONE register
  */

typedef union {
  struct {
    uint32_t NSIP_HALT_DONE : 1;
    ///< When set to 1 indicates NSIP completed sending pending data on crux
    ///< interface after assrtion of halt input.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_nsip_halt_done_reg_t;

#define JESD_CRUX_CLK_CSR_NSIP_HALT_DONE_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_NSIP_HALT_DONE_RD_MASK (0x00000001U)
#define JESD_CRUX_CLK_CSR_NSIP_HALT_DONE_WR_MASK (0x00000000U)


///< When set to 1 indicates NSIP completed sending pending data on crux
///< interface after assrtion of halt input.
#define JESD_CRUX_CLK_CSR_NSIP_HALT_DONE_NSIP_HALT_DONE_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_NSIP_HALT_DONE_NSIP_HALT_DONE_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_NSIP_HALT_DONE_NSIP_HALT_DONE_BF_MSK (0x00000001)
#define JESD_CRUX_CLK_CSR_NSIP_HALT_DONE_NSIP_HALT_DONE_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RX_CRUX_DATARATE_MEA_EN register description at address offset 0x2010
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RX_CRUX_DATARATE_MEA_EN
  * RX Crux datarate measurement Enable
  */

typedef union {
  struct {
    uint32_t MEA_ENABLE : 1;
    ///< This bit when set to 1 enables Crux datarate measurement counters.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_rx_crux_datarate_mea_en_reg_t;

#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MEA_EN_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MEA_EN_RD_MASK (0x00000001U)
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MEA_EN_WR_MASK (0x00000001U)


///< This bit when set to 1 enables Crux datarate measurement counters.
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MEA_EN_MEA_EN_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MEA_EN_MEA_EN_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MEA_EN_MEA_EN_BF_MSK (0x00000001)
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MEA_EN_MEA_EN_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RX_CRUX_DATARATE_MEA_WNDW register description at address offset 0x2014
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RX_CRUX_DATARATE_MEA_WNDW
  * RX Crux Datarate measurement window
  */

typedef union {
  struct {
    uint32_t MEA_WNDW : 32;
    ///< This register defines the width of CRux datarate measurement window
    ///< in crux clock cycles.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_rx_crux_datarate_mea_wndw_reg_t;

#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MEA_WNDW_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MEA_WNDW_RD_MASK (0xffffffffU)
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MEA_WNDW_WR_MASK (0xffffffffU)


///< This register defines the width of CRux datarate measurement window
///< in crux clock cycles.
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MEA_WNDW_MEA_WNDW_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MEA_WNDW_MEA_WNDW_BF_WID (32)
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MEA_WNDW_MEA_WNDW_BF_MSK (0xFFFFFFFF)
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MEA_WNDW_MEA_WNDW_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RX_CRUX_DATARATE_MIN_ERR_THRSH register description at address offset 0x2018
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RX_CRUX_DATARATE_MIN_ERR_THRSH
  * RX Crux Datarate minimum error Threshold
  */

typedef union {
  struct {
    uint32_t ERR_THRSH : 32;
    ///< This register defines the threshold for minimum Crux datarate in a
    ///< given window.             An interrupt is generated if data sent to
    ///< NSIP is less than this threshold.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_rx_crux_datarate_min_err_thrsh_reg_t;

#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MIN_ERR_THRSH_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MIN_ERR_THRSH_RD_MASK (0xffffffffU)
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MIN_ERR_THRSH_WR_MASK (0xffffffffU)


///< This register defines the threshold for minimum Crux datarate in a
///< given window.             An interrupt is generated if data sent to
///< NSIP is less than this threshold.
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MIN_ERR_THRSH_ERR_THRSH_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MIN_ERR_THRSH_ERR_THRSH_BF_WID (32)
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MIN_ERR_THRSH_ERR_THRSH_BF_MSK (0xFFFFFFFF)
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MIN_ERR_THRSH_ERR_THRSH_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RX_CRUX_DATARATE_MAX_ERR_THRSH register description at address offset 0x201c
  *
  * Register default value:        0xFFFFFFFF
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RX_CRUX_DATARATE_MAX_ERR_THRSH
  * RX Crux Datarate maximum error Threshold
  */

typedef union {
  struct {
    uint32_t ERR_THRSH : 32;
    ///< This register defines the threshold for maximum Crux datarate in a
    ///< given window.             An interrupt is generated if data sent to
    ///< NSIP is greater than this threshold.
    ///< AccessType="RW" BitOffset="0" ResetValue="0xFFFFFFFF"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_rx_crux_datarate_max_err_thrsh_reg_t;

#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MAX_ERR_THRSH_DEFAULT (0xffffffffU)
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MAX_ERR_THRSH_RD_MASK (0xffffffffU)
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MAX_ERR_THRSH_WR_MASK (0xffffffffU)


///< This register defines the threshold for maximum Crux datarate in a
///< given window.             An interrupt is generated if data sent to
///< NSIP is greater than this threshold.
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MAX_ERR_THRSH_ERR_THRSH_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MAX_ERR_THRSH_ERR_THRSH_BF_WID (32)
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MAX_ERR_THRSH_ERR_THRSH_BF_MSK (0xFFFFFFFF)
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MAX_ERR_THRSH_ERR_THRSH_BF_DEF (0xFFFFFFFF)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RX_CRUX_DATARATE_MEA_TIMER register description at address offset 0x2020
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RX_CRUX_DATARATE_MEA_TIMER
  * RX Crux Datarate Timer Counter
  */

typedef union {
  struct {
    uint32_t COUNT : 32;
    ///< Timer Counter used for Crux Datarate counters.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_rx_crux_datarate_mea_timer_reg_t;

#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MEA_TIMER_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MEA_TIMER_RD_MASK (0xffffffffU)
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MEA_TIMER_WR_MASK (0xffffffffU)


///< Timer Counter used for Crux Datarate counters.
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MEA_TIMER_CNT_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MEA_TIMER_CNT_BF_WID (32)
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MEA_TIMER_CNT_BF_MSK (0xFFFFFFFF)
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MEA_TIMER_CNT_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RX_CRUX_DATARATE_CNT register description at address offset 0x2024
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RX_CRUX_DATARATE_CNT
  * RX Crux Datarate Counter
  */

typedef union {
  struct {
    uint32_t COUNT : 32;
    ///< This register counts number of flits sent to NSIP in the programmble
    ///< window time.             The counter saturates at maximum value (
    ///< 32'hFFFF_FFFF) and restes when timer window counter is reset to new
    ///< window.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_rx_crux_datarate_cnt_reg_t;

#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_CNT_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_CNT_RD_MASK (0xffffffffU)
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_CNT_WR_MASK (0xffffffffU)


///< This register counts number of flits sent to NSIP in the programmble
///< window time.             The counter saturates at maximum value (
///< 32'hFFFF_FFFF) and restes when timer window counter is reset to new
///< window.
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_CNT_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_CNT_BF_WID (32)
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_CNT_BF_MSK (0xFFFFFFFF)
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_CNT_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RX_CRUX_DATARATE_MIN_CNT register description at address offset 0x2028
  *
  * Register default value:        0xFFFFFFFF
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RX_CRUX_DATARATE_MIN_CNT
  * RX Crux Minimum Datarate Counter
  */

typedef union {
  struct {
    uint32_t COUNT : 32;
    ///< This register store the minimum Datarate sent to crux interface Since
    ///< measurement is enabled.             This register is updated at end
    ///< of every window when Datarate counter in that window is less than
    ///< current Minimum datarate.
    ///< AccessType="RW" BitOffset="0" ResetValue="0xFFFFFFFF"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_rx_crux_datarate_min_cnt_reg_t;

#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MIN_CNT_DEFAULT (0xffffffffU)
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MIN_CNT_RD_MASK (0xffffffffU)
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MIN_CNT_WR_MASK (0xffffffffU)


///< This register store the minimum Datarate sent to crux interface Since
///< measurement is enabled.             This register is updated at end
///< of every window when Datarate counter in that window is less than
///< current Minimum datarate.
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MIN_CNT_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MIN_CNT_BF_WID (32)
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MIN_CNT_BF_MSK (0xFFFFFFFF)
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MIN_CNT_BF_DEF (0xFFFFFFFF)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RX_CRUX_DATARATE_MAX_CNT register description at address offset 0x202c
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RX_CRUX_DATARATE_MAX_CNT
  * RX Crux Maximum Datarate Counter
  */

typedef union {
  struct {
    uint32_t COUNT : 32;
    ///< This register store the Maximum Datarate sent to crux interface Since
    ///< measurement is enabled.             This register is updated at end
    ///< of every window when Datarate counter in that window is greater than
    ///< current Maximum datarate.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_rx_crux_datarate_max_cnt_reg_t;

#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MAX_CNT_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MAX_CNT_RD_MASK (0xffffffffU)
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MAX_CNT_WR_MASK (0xffffffffU)


///< This register store the Maximum Datarate sent to crux interface Since
///< measurement is enabled.             This register is updated at end
///< of every window when Datarate counter in that window is greater than
///< current Maximum datarate.
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MAX_CNT_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MAX_CNT_BF_WID (32)
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MAX_CNT_BF_MSK (0xFFFFFFFF)
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MAX_CNT_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RX_CRUX_STALL_MEA_EN register description at address offset 0x2030
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RX_CRUX_STALL_MEA_EN
  * RX Crux NSIP Stall measurement Enable
  */

typedef union {
  struct {
    uint32_t MEA_ENABLE : 1;
    ///< This bit when set to 1 enables Crux stall/backressure measurement
    ///< counters.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_rx_crux_stall_mea_en_reg_t;

#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MEA_EN_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MEA_EN_RD_MASK (0x00000001U)
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MEA_EN_WR_MASK (0x00000001U)


///< This bit when set to 1 enables Crux stall/backressure measurement
///< counters.
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MEA_EN_MEA_EN_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MEA_EN_MEA_EN_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MEA_EN_MEA_EN_BF_MSK (0x00000001)
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MEA_EN_MEA_EN_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RX_CRUX_STALL_MEA_WNDW register description at address offset 0x2034
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RX_CRUX_STALL_MEA_WNDW
  * RX Crux backpressure/Stall measurement window
  */

typedef union {
  struct {
    uint32_t MEA_WNDW : 32;
    ///< This register defines the width of Crux backpressure/Stall measurement
    ///< window in crux clock cycles.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_rx_crux_stall_mea_wndw_reg_t;

#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MEA_WNDW_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MEA_WNDW_RD_MASK (0xffffffffU)
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MEA_WNDW_WR_MASK (0xffffffffU)


///< This register defines the width of Crux backpressure/Stall measurement
///< window in crux clock cycles.
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MEA_WNDW_MEA_WNDW_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MEA_WNDW_MEA_WNDW_BF_WID (32)
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MEA_WNDW_MEA_WNDW_BF_MSK (0xFFFFFFFF)
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MEA_WNDW_MEA_WNDW_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RX_CRUX_STALL_MAX_ERR_THRSH register description at address offset 0x2038
  *
  * Register default value:        0xFFFFFFFF
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RX_CRUX_STALL_MAX_ERR_THRSH
  * RX Crux maximum Stall error Threshold
  */

typedef union {
  struct {
    uint32_t ERR_THRSH : 32;
    ///< This register defines the threshold for average Crux backpressure/Stall
    ///< in a given window.             An interrupt is generated if backpressure
    ///< is greater than this threshold.
    ///< AccessType="RW" BitOffset="0" ResetValue="0xFFFFFFFF"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_rx_crux_stall_max_err_thrsh_reg_t;

#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MAX_ERR_THRSH_DEFAULT (0xffffffffU)
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MAX_ERR_THRSH_RD_MASK (0xffffffffU)
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MAX_ERR_THRSH_WR_MASK (0xffffffffU)


///< This register defines the threshold for average Crux backpressure/Stall
///< in a given window.             An interrupt is generated if backpressure
///< is greater than this threshold.
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MAX_ERR_THRSH_ERR_THRSH_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MAX_ERR_THRSH_ERR_THRSH_BF_WID (32)
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MAX_ERR_THRSH_ERR_THRSH_BF_MSK (0xFFFFFFFF)
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MAX_ERR_THRSH_ERR_THRSH_BF_DEF (0xFFFFFFFF)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RX_CRUX_STALL_PEAK_MAX_ERR_THRSH register description at address offset 0x203c
  *
  * Register default value:        0xFFFFFFFF
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RX_CRUX_STALL_PEAK_MAX_ERR_THRSH
  * RX Crux maximum Peak Stall error Threshold
  */

typedef union {
  struct {
    uint32_t ERR_THRSH : 32;
    ///< This register defines the threshold for Peak(continous stall for N
    ///< cycles) Crux backpressure/Stall irespective of window length.
    ///< An interrupt is generated if backpressure is greater than this threshold.
    ///< AccessType="RW" BitOffset="0" ResetValue="0xFFFFFFFF"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_rx_crux_stall_peak_max_err_thrsh_reg_t;

#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_PEAK_MAX_ERR_THRSH_DEFAULT (0xffffffffU)
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_PEAK_MAX_ERR_THRSH_RD_MASK (0xffffffffU)
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_PEAK_MAX_ERR_THRSH_WR_MASK (0xffffffffU)


///< This register defines the threshold for Peak(continous stall for N
///< cycles) Crux backpressure/Stall irespective of window length.
///< An interrupt is generated if backpressure is greater than this threshold.
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_PEAK_MAX_ERR_THRSH_ERR_THRSH_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_PEAK_MAX_ERR_THRSH_ERR_THRSH_BF_WID (32)
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_PEAK_MAX_ERR_THRSH_ERR_THRSH_BF_MSK (0xFFFFFFFF)
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_PEAK_MAX_ERR_THRSH_ERR_THRSH_BF_DEF (0xFFFFFFFF)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RX_CRUX_STALL_MEA_TIMER register description at address offset 0x2040
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RX_CRUX_STALL_MEA_TIMER
  * RX Crux Backpressure Timer Counter
  */

typedef union {
  struct {
    uint32_t COUNT : 32;
    ///< Timer Counter used for Crux backpressure counters.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_rx_crux_stall_mea_timer_reg_t;

#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MEA_TIMER_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MEA_TIMER_RD_MASK (0xffffffffU)
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MEA_TIMER_WR_MASK (0xffffffffU)


///< Timer Counter used for Crux backpressure counters.
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MEA_TIMER_CNT_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MEA_TIMER_CNT_BF_WID (32)
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MEA_TIMER_CNT_BF_MSK (0xFFFFFFFF)
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MEA_TIMER_CNT_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RX_CRUX_STALL_CNT register description at address offset 0x2050
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RX_CRUX_STALL_CNT
  * RX Crux Average Stall Counter
  */

typedef union {
  struct {
    uint32_t COUNT : 32;
    ///< This register counts number of cycles in RX glue is stalled by NSIP
    ///< in the programmble window time.             The counter saturates
    ///< at maximum value ( 32'hFFFF_FFFF) and restes when timer window counter
    ///< is reset to new window.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_rx_crux_stall_cnt_reg_t;

#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_CNT_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_CNT_RD_MASK (0xffffffffU)
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_CNT_WR_MASK (0xffffffffU)


///< This register counts number of cycles in RX glue is stalled by NSIP
///< in the programmble window time.             The counter saturates
///< at maximum value ( 32'hFFFF_FFFF) and restes when timer window counter
///< is reset to new window.
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_CNT_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_CNT_BF_WID (32)
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_CNT_BF_MSK (0xFFFFFFFF)
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_CNT_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RX_CRUX_STALL_MAX_CNT register description at address offset 0x2054
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RX_CRUX_STALL_MAX_CNT
  * RX Crux maximum Average Stall Counter
  */

typedef union {
  struct {
    uint32_t COUNT : 32;
    ///< This register stores the maximum average stall count in a programmable
    ///< window since measurement is enabled.                   This register
    ///< is updated at end of every window when average stall counter in that
    ///< window is greater than current Maximum stall count.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_rx_crux_stall_max_cnt_reg_t;

#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MAX_CNT_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MAX_CNT_RD_MASK (0xffffffffU)
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MAX_CNT_WR_MASK (0xffffffffU)


///< This register stores the maximum average stall count in a programmable
///< window since measurement is enabled.                   This register
///< is updated at end of every window when average stall counter in that
///< window is greater than current Maximum stall count.
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MAX_CNT_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MAX_CNT_BF_WID (32)
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MAX_CNT_BF_MSK (0xFFFFFFFF)
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MAX_CNT_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RX_CRUX_PEAK_STALL_CNT register description at address offset 0x2058
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RX_CRUX_PEAK_STALL_CNT
  * RX Crux Peak Stall Counter
  */

typedef union {
  struct {
    uint32_t COUNT : 32;
    ///< This register counts number of cycles in RX glue is stalled cotinuosly
    ///< by NSIP.             The counter sarts counting when there is stall
    ///< and gets cleared when stall is removed by NSIP.             The counter
    ///< value is compared to previous maximum peak stall counter value to
    ///< update it.            The counter saturates at maximum value ( 32'hFFFF_FFFF).
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_rx_crux_peak_stall_cnt_reg_t;

#define JESD_CRUX_CLK_CSR_RX_CRUX_PEAK_STALL_CNT_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_RX_CRUX_PEAK_STALL_CNT_RD_MASK (0xffffffffU)
#define JESD_CRUX_CLK_CSR_RX_CRUX_PEAK_STALL_CNT_WR_MASK (0xffffffffU)


///< This register counts number of cycles in RX glue is stalled cotinuosly
///< by NSIP.             The counter sarts counting when there is stall
///< and gets cleared when stall is removed by NSIP.             The counter
///< value is compared to previous maximum peak stall counter value to
///< update it.            The counter saturates at maximum value ( 32'hFFFF_FFFF).
#define JESD_CRUX_CLK_CSR_RX_CRUX_PEAK_STALL_CNT_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_RX_CRUX_PEAK_STALL_CNT_BF_WID (32)
#define JESD_CRUX_CLK_CSR_RX_CRUX_PEAK_STALL_CNT_BF_MSK (0xFFFFFFFF)
#define JESD_CRUX_CLK_CSR_RX_CRUX_PEAK_STALL_CNT_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RX_CRUX_PEAK_STALL_MAX_CNT register description at address offset 0x205c
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RX_CRUX_PEAK_STALL_MAX_CNT
  * RX Crux maximum Peak Stall Counter
  */

typedef union {
  struct {
    uint32_t COUNT : 32;
    ///< This register stores the maximum peak stall count since measurement
    ///< is enabled.                   This register is updated when peak stall
    ///< counter resets and its value is greater than current Maximum stall
    ///< count.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_rx_crux_peak_stall_max_cnt_reg_t;

#define JESD_CRUX_CLK_CSR_RX_CRUX_PEAK_STALL_MAX_CNT_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_RX_CRUX_PEAK_STALL_MAX_CNT_RD_MASK (0xffffffffU)
#define JESD_CRUX_CLK_CSR_RX_CRUX_PEAK_STALL_MAX_CNT_WR_MASK (0xffffffffU)


///< This register stores the maximum peak stall count since measurement
///< is enabled.                   This register is updated when peak stall
///< counter resets and its value is greater than current Maximum stall
///< count.
#define JESD_CRUX_CLK_CSR_RX_CRUX_PEAK_STALL_MAX_CNT_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_RX_CRUX_PEAK_STALL_MAX_CNT_BF_WID (32)
#define JESD_CRUX_CLK_CSR_RX_CRUX_PEAK_STALL_MAX_CNT_BF_MSK (0xFFFFFFFF)
#define JESD_CRUX_CLK_CSR_RX_CRUX_PEAK_STALL_MAX_CNT_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RX_STRM_RCV_FLIT_CNT register description at address offset 0x2060
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RX_STRM_RCV_FLIT_CNT
  * RX Stream received Flit Count
  */

typedef union {
  struct {
    uint32_t RCV_FLIT_CNT : 32;
    ///< This counter indicates number of flits received for each stream on
    ///< JESD IP interface.             There is only one counter since all
    ///< streams receive equal amount of dat aevery clock cycle friom IP.
    ///< The counter saturates at Max value(32'hFFFF_FFFF).
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_rx_strm_rcv_flit_cnt_reg_t;

#define JESD_CRUX_CLK_CSR_RX_STRM_RCV_FLIT_CNT_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_RX_STRM_RCV_FLIT_CNT_RD_MASK (0xffffffffU)
#define JESD_CRUX_CLK_CSR_RX_STRM_RCV_FLIT_CNT_WR_MASK (0xffffffffU)


///< This counter indicates number of flits received for each stream on
///< JESD IP interface.             There is only one counter since all
///< streams receive equal amount of dat aevery clock cycle friom IP.
///< The counter saturates at Max value(32'hFFFF_FFFF).
#define JESD_CRUX_CLK_CSR_RX_STRM_RCV_FLIT_CNT_RCV_FLIT_CNT_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_RX_STRM_RCV_FLIT_CNT_RCV_FLIT_CNT_BF_WID (32)
#define JESD_CRUX_CLK_CSR_RX_STRM_RCV_FLIT_CNT_RCV_FLIT_CNT_BF_MSK (0xFFFFFFFF)
#define JESD_CRUX_CLK_CSR_RX_STRM_RCV_FLIT_CNT_RCV_FLIT_CNT_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_TX_CRUX_DATARATE_MEA_EN register description at address offset 0x2070
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/TX_CRUX_DATARATE_MEA_EN
  * TX Crux datarate measurement Enable
  */

typedef union {
  struct {
    uint32_t MEA_ENABLE : 1;
    ///< This bit when set to 1 enables Crux datarate measurement counters.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_tx_crux_datarate_mea_en_reg_t;

#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MEA_EN_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MEA_EN_RD_MASK (0x00000001U)
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MEA_EN_WR_MASK (0x00000001U)


///< This bit when set to 1 enables Crux datarate measurement counters.
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MEA_EN_MEA_EN_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MEA_EN_MEA_EN_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MEA_EN_MEA_EN_BF_MSK (0x00000001)
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MEA_EN_MEA_EN_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_TX_CRUX_DATARATE_MEA_WNDW register description at address offset 0x2074
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/TX_CRUX_DATARATE_MEA_WNDW
  * TX Crux Datarate measurement window
  */

typedef union {
  struct {
    uint32_t MEA_WNDW : 32;
    ///< This register defines the width of CRux datarate measurement window
    ///< in crux clock cycles.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_tx_crux_datarate_mea_wndw_reg_t;

#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MEA_WNDW_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MEA_WNDW_RD_MASK (0xffffffffU)
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MEA_WNDW_WR_MASK (0xffffffffU)


///< This register defines the width of CRux datarate measurement window
///< in crux clock cycles.
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MEA_WNDW_MEA_WNDW_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MEA_WNDW_MEA_WNDW_BF_WID (32)
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MEA_WNDW_MEA_WNDW_BF_MSK (0xFFFFFFFF)
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MEA_WNDW_MEA_WNDW_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_TX_CRUX_DATARATE_MIN_ERR_THRSH register description at address offset 0x2078
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/TX_CRUX_DATARATE_MIN_ERR_THRSH
  * TX Crux Datarate minimum error Threshold
  */

typedef union {
  struct {
    uint32_t ERR_THRSH : 32;
    ///< This register defines the threshold for minimum Crux datarate in a
    ///< given window.             An interrupt is generated if data sent from
    ///< NSIP is less than this threshold.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_tx_crux_datarate_min_err_thrsh_reg_t;

#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MIN_ERR_THRSH_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MIN_ERR_THRSH_RD_MASK (0xffffffffU)
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MIN_ERR_THRSH_WR_MASK (0xffffffffU)


///< This register defines the threshold for minimum Crux datarate in a
///< given window.             An interrupt is generated if data sent from
///< NSIP is less than this threshold.
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MIN_ERR_THRSH_ERR_THRSH_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MIN_ERR_THRSH_ERR_THRSH_BF_WID (32)
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MIN_ERR_THRSH_ERR_THRSH_BF_MSK (0xFFFFFFFF)
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MIN_ERR_THRSH_ERR_THRSH_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_TX_CRUX_DATARATE_MAX_ERR_THRSH register description at address offset 0x207c
  *
  * Register default value:        0xFFFFFFFF
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/TX_CRUX_DATARATE_MAX_ERR_THRSH
  * TX Crux Datarate maximum error Threshold
  */

typedef union {
  struct {
    uint32_t ERR_THRSH : 32;
    ///< This register defines the threshold for maximum Crux datarate in a
    ///< given window.             An interrupt is generated if data sent from
    ///< NSIP is greater than this threshold.
    ///< AccessType="RW" BitOffset="0" ResetValue="0xFFFFFFFF"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_tx_crux_datarate_max_err_thrsh_reg_t;

#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MAX_ERR_THRSH_DEFAULT (0xffffffffU)
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MAX_ERR_THRSH_RD_MASK (0xffffffffU)
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MAX_ERR_THRSH_WR_MASK (0xffffffffU)


///< This register defines the threshold for maximum Crux datarate in a
///< given window.             An interrupt is generated if data sent from
///< NSIP is greater than this threshold.
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MAX_ERR_THRSH_ERR_THRSH_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MAX_ERR_THRSH_ERR_THRSH_BF_WID (32)
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MAX_ERR_THRSH_ERR_THRSH_BF_MSK (0xFFFFFFFF)
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MAX_ERR_THRSH_ERR_THRSH_BF_DEF (0xFFFFFFFF)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_TX_CRUX_DATARATE_MEA_TIMER register description at address offset 0x2080
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/TX_CRUX_DATARATE_MEA_TIMER
  * TX Crux Datarate Timer Counter
  */

typedef union {
  struct {
    uint32_t COUNT : 32;
    ///< Timer Counter used for Crux Datarate counters.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_tx_crux_datarate_mea_timer_reg_t;

#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MEA_TIMER_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MEA_TIMER_RD_MASK (0xffffffffU)
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MEA_TIMER_WR_MASK (0xffffffffU)


///< Timer Counter used for Crux Datarate counters.
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MEA_TIMER_CNT_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MEA_TIMER_CNT_BF_WID (32)
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MEA_TIMER_CNT_BF_MSK (0xFFFFFFFF)
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MEA_TIMER_CNT_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_TX_CRUX_DATARATE_CNT register description at address offset 0x2084
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/TX_CRUX_DATARATE_CNT
  * TX Crux Datarate Counter
  */

typedef union {
  struct {
    uint32_t COUNT : 32;
    ///< This register counts number of flits received from NSIP in the programmble
    ///< window time.             The counter saturates at maximum value (
    ///< 32'hFFFF_FFFF) and restes when timer window counter is reset to new
    ///< window.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_tx_crux_datarate_cnt_reg_t;

#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_CNT_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_CNT_RD_MASK (0xffffffffU)
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_CNT_WR_MASK (0xffffffffU)


///< This register counts number of flits received from NSIP in the programmble
///< window time.             The counter saturates at maximum value (
///< 32'hFFFF_FFFF) and restes when timer window counter is reset to new
///< window.
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_CNT_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_CNT_BF_WID (32)
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_CNT_BF_MSK (0xFFFFFFFF)
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_CNT_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_TX_CRUX_DATARATE_MIN_CNT register description at address offset 0x2088
  *
  * Register default value:        0xFFFFFFFF
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/TX_CRUX_DATARATE_MIN_CNT
  * TX Crux Minimum Datarate Counter
  */

typedef union {
  struct {
    uint32_t COUNT : 32;
    ///< This register store the minimum Datarate received at crux interface
    ///< Since measurement is enabled.             This register is updated
    ///< at end of every window when Datarate counter in that window is less
    ///< than current Minimum datarate.
    ///< AccessType="RW" BitOffset="0" ResetValue="0xFFFFFFFF"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_tx_crux_datarate_min_cnt_reg_t;

#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MIN_CNT_DEFAULT (0xffffffffU)
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MIN_CNT_RD_MASK (0xffffffffU)
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MIN_CNT_WR_MASK (0xffffffffU)


///< This register store the minimum Datarate received at crux interface
///< Since measurement is enabled.             This register is updated
///< at end of every window when Datarate counter in that window is less
///< than current Minimum datarate.
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MIN_CNT_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MIN_CNT_BF_WID (32)
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MIN_CNT_BF_MSK (0xFFFFFFFF)
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MIN_CNT_BF_DEF (0xFFFFFFFF)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_TX_CRUX_DATARATE_MAX_CNT register description at address offset 0x208c
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/TX_CRUX_DATARATE_MAX_CNT
  * TX Crux Maximum Datarate Counter
  */

typedef union {
  struct {
    uint32_t COUNT : 32;
    ///< This register store the Maximum Datarate received at crux interface
    ///< Since measurement is enabled.             This register is updated
    ///< at end of every window when Datarate counter in that window is greater
    ///< than current Maximum datarate.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_tx_crux_datarate_max_cnt_reg_t;

#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MAX_CNT_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MAX_CNT_RD_MASK (0xffffffffU)
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MAX_CNT_WR_MASK (0xffffffffU)


///< This register store the Maximum Datarate received at crux interface
///< Since measurement is enabled.             This register is updated
///< at end of every window when Datarate counter in that window is greater
///< than current Maximum datarate.
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MAX_CNT_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MAX_CNT_BF_WID (32)
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MAX_CNT_BF_MSK (0xFFFFFFFF)
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MAX_CNT_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_EN register description at address offset 0x2090
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/CRUX_CLK_SIG_MON_EN
  * Crux clock signal Monitor enable
  */

typedef union {
  struct {
    uint32_t MON_EN : 1;
    ///< When set to 1 enables the signals monitor used to capture debug signals
    ///< in crux_clock domain.                   This signal is used as clock
    ///< gating signal.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_crux_clk_sig_mon_en_reg_t;

#define JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_EN_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_EN_RD_MASK (0x00000001U)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_EN_WR_MASK (0x00000001U)


///< When set to 1 enables the signals monitor used to capture debug signals
///< in crux_clock domain.                   This signal is used as clock
///< gating signal.
#define JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_EN_MON_EN_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_EN_MON_EN_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_EN_MON_EN_BF_MSK (0x00000001)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_EN_MON_EN_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_CAP_EN register description at address offset 0x2094
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/CRUX_CLK_SIG_MON_CAP_EN
  * Crux clock signal Monitor capture enable
  */

typedef union {
  struct {
    uint32_t CAP_EN : 1;
    ///< When set to 1 enables the signal capture by the monitor depending
    ///< on the mode.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_crux_clk_sig_mon_cap_en_reg_t;

#define JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_CAP_EN_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_CAP_EN_RD_MASK (0x00000001U)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_CAP_EN_WR_MASK (0x00000001U)


///< When set to 1 enables the signal capture by the monitor depending
///< on the mode.
#define JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_CAP_EN_CAP_EN_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_CAP_EN_CAP_EN_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_CAP_EN_CAP_EN_BF_MSK (0x00000001)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_CAP_EN_CAP_EN_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_STS_CLR register description at address offset 0x2098
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/CRUX_CLK_SIG_MON_STS_CLR
  * Crux clock signal Monitor status clear
  */

typedef union {
  struct {
    uint32_t STS_CLR : 1;
    ///< Writing 1 willclear the status and capture registers. The clear opertaion
    ///< is for one cycle and register holds the last written value.
    ///< Clearing status when capture enable is set will cause the signal to
    ///< be re-captured.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_crux_clk_sig_mon_sts_clr_reg_t;

#define JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_STS_CLR_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_STS_CLR_RD_MASK (0x00000001U)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_STS_CLR_WR_MASK (0x00000001U)


///< Writing 1 willclear the status and capture registers. The clear opertaion
///< is for one cycle and register holds the last written value.
///< Clearing status when capture enable is set will cause the signal to
///< be re-captured.
#define JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_STS_CLR_STS_CLR_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_STS_CLR_STS_CLR_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_STS_CLR_STS_CLR_BF_MSK (0x00000001)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_STS_CLR_STS_CLR_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_CFG register description at address offset 0x209c
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/CRUX_CLK_SIG_MON_CFG
  * Crux clock signal Monitor configuration
  */

typedef union {
  struct {
    uint32_t REL_CAP_EN : 1;
    ///< 0- All the signals are captured individually based on the trigger
    ///< event.            1- relative capture mode: Event on signal 0 will
    ///< trigger the capture of all signals.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TRIG_MODE : 2;
    ///< 2'b00- Signals are captured next cycle after capture enable is set
    ///< to 1.            2'b01- Reserved.            2'b10- Signal capture
    ///< is triggered by rising  edge of signal after capture enable is set
    ///< to 1.            2'b11- Signal capture is triggered by falling edge
    ///< of signal after capture enable is set to 1.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t CAP_CYCLES : 7;
    ///< Specifes the number of clock cycles the signal values are acaptured
    ///< after capture event.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_crux_clk_sig_mon_cfg_reg_t;

#define JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_CFG_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_CFG_RD_MASK (0x000003ffU)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_CFG_WR_MASK (0x000003ffU)


///< 0- All the signals are captured individually based on the trigger
///< event.            1- relative capture mode: Event on signal 0 will
///< trigger the capture of all signals.
#define JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_CFG_REL_CAP_EN_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_CFG_REL_CAP_EN_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_CFG_REL_CAP_EN_BF_MSK (0x00000001)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_CFG_REL_CAP_EN_BF_DEF (0x00000000)

///< 2'b00- Signals are captured next cycle after capture enable is set
///< to 1.            2'b01- Reserved.            2'b10- Signal capture
///< is triggered by rising  edge of signal after capture enable is set
///< to 1.            2'b11- Signal capture is triggered by falling edge
///< of signal after capture enable is set to 1.
#define JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_CFG_TRIG_MODE_BF_OFF ( 1)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_CFG_TRIG_MODE_BF_WID ( 2)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_CFG_TRIG_MODE_BF_MSK (0x00000006)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_CFG_TRIG_MODE_BF_DEF (0x00000000)

///< Specifes the number of clock cycles the signal values are acaptured
///< after capture event.
#define JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_CFG_CAP_CYCLES_BF_OFF ( 3)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_CFG_CAP_CYCLES_BF_WID ( 7)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_CFG_CAP_CYCLES_BF_MSK (0x000003F8)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_CFG_CAP_CYCLES_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_CRUX_CLK_DBG_SIG_SEL register description at address offset 0x20a0
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/CRUX_CLK_DBG_SIG_SEL
  * Crux clock debug mux select
  */

typedef union {
  struct {
    uint32_t SIG0_MUX_SEL : 4;
    ///< Selects the signal to be monitered. TBD.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t SIG1_MUX_SEL : 4;
    ///< Selects the signal to be monitered. TBD.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t SIG2_MUX_SEL : 4;
    ///< Selects the signal to be monitered. TBD.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t SIG3_MUX_SEL : 4;
    ///< Selects the signal to be monitered. TBD.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_crux_clk_dbg_sig_sel_reg_t;

#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_SIG_SEL_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_SIG_SEL_RD_MASK (0x0000ffffU)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_SIG_SEL_WR_MASK (0x0000ffffU)


///< Selects the signal to be monitered. TBD.
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_SIG_SEL_SIG0_MUX_SEL_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_SIG_SEL_SIG0_MUX_SEL_BF_WID ( 4)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_SIG_SEL_SIG0_MUX_SEL_BF_MSK (0x0000000F)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_SIG_SEL_SIG0_MUX_SEL_BF_DEF (0x00000000)

///< Selects the signal to be monitered. TBD.
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_SIG_SEL_SIG1_MUX_SEL_BF_OFF ( 4)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_SIG_SEL_SIG1_MUX_SEL_BF_WID ( 4)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_SIG_SEL_SIG1_MUX_SEL_BF_MSK (0x000000F0)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_SIG_SEL_SIG1_MUX_SEL_BF_DEF (0x00000000)

///< Selects the signal to be monitered. TBD.
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_SIG_SEL_SIG2_MUX_SEL_BF_OFF ( 8)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_SIG_SEL_SIG2_MUX_SEL_BF_WID ( 4)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_SIG_SEL_SIG2_MUX_SEL_BF_MSK (0x00000F00)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_SIG_SEL_SIG2_MUX_SEL_BF_DEF (0x00000000)

///< Selects the signal to be monitered. TBD.
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_SIG_SEL_SIG3_MUX_SEL_BF_OFF (12)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_SIG_SEL_SIG3_MUX_SEL_BF_WID ( 4)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_SIG_SEL_SIG3_MUX_SEL_BF_MSK (0x0000F000)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_SIG_SEL_SIG3_MUX_SEL_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_VLD register description at address offset 0x20a4
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/CRUX_CLK_DBG_CAP_VLD
  * Crux clock debug signal capture valid
  */

typedef union {
  struct {
    uint32_t SIG0_CAP_VLD : 1;
    ///< Indicates the signal 0 capture is complete.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t SIG1_CAP_VLD : 1;
    ///< Indicates the signal 1 capture is complete.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
    uint32_t SIG2_CAP_VLD : 1;
    ///< Indicates the signal 2 capture is complete.
    ///< AccessType="RO" BitOffset="2" ResetValue="0x0"
    uint32_t SIG3_CAP_VLD : 1;
    ///< Indicates the signal 3 capture is complete.
    ///< AccessType="RO" BitOffset="3" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_crux_clk_dbg_cap_vld_reg_t;

#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_VLD_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_VLD_RD_MASK (0x0000000fU)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_VLD_WR_MASK (0x00000000U)


///< Indicates the signal 0 capture is complete.
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_VLD_SIG0_CAP_VLD_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_VLD_SIG0_CAP_VLD_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_VLD_SIG0_CAP_VLD_BF_MSK (0x00000001)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_VLD_SIG0_CAP_VLD_BF_DEF (0x00000000)

///< Indicates the signal 1 capture is complete.
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_VLD_SIG1_CAP_VLD_BF_OFF ( 1)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_VLD_SIG1_CAP_VLD_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_VLD_SIG1_CAP_VLD_BF_MSK (0x00000002)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_VLD_SIG1_CAP_VLD_BF_DEF (0x00000000)

///< Indicates the signal 2 capture is complete.
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_VLD_SIG2_CAP_VLD_BF_OFF ( 2)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_VLD_SIG2_CAP_VLD_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_VLD_SIG2_CAP_VLD_BF_MSK (0x00000004)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_VLD_SIG2_CAP_VLD_BF_DEF (0x00000000)

///< Indicates the signal 3 capture is complete.
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_VLD_SIG3_CAP_VLD_BF_OFF ( 3)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_VLD_SIG3_CAP_VLD_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_VLD_SIG3_CAP_VLD_BF_MSK (0x00000008)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_VLD_SIG3_CAP_VLD_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_CRUX_CLK_CMN_ERR_STS register description at address offset 0x20b0
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/CRUX_CLK_CMN_ERR_STS
  * Status register for  errors that generate alarams and interrupts, detected in Crux clock domain
  */

typedef union {
  struct {
    uint32_t CMN_ERR_STS : 7;
    ///< Status register for errors detected in Crux clock domain which sets
    ///< both alarms  and interrupts.            The register value is sticky
    ///< once set and only cleared upon writing to corresponding error clear
    ///< register.             This register is set if the corresponding erro
    ///< is detected irrespective of the value of the error generation enable.
    ///< The mapping of individual bits is shown below.           [0]  - RSB
    ///< FIFO overflow.         [1]  - RSB  FIFO underflow.         [2]  -
    ///< TSB  FIFO overflow.         [3]  - PHM0 FIFO overflow.         [4]
    ///< - PHM1 FIFO overflow.         [5]  - RSB Single Bit ECC Error.
    ///< [6]  - RSB Double Bit ECC Error.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 25;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_crux_clk_cmn_err_sts_reg_t;

#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_ERR_STS_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_ERR_STS_RD_MASK (0x0000007fU)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_ERR_STS_WR_MASK (0x00000000U)


///< Status register for errors detected in Crux clock domain which sets
///< both alarms  and interrupts.            The register value is sticky
///< once set and only cleared upon writing to corresponding error clear
///< register.             This register is set if the corresponding erro
///< is detected irrespective of the value of the error generation enable.
///< The mapping of individual bits is shown below.           [0]  - RSB
///< FIFO overflow.         [1]  - RSB  FIFO underflow.         [2]  -
///< TSB  FIFO overflow.         [3]  - PHM0 FIFO overflow.         [4]
///< - PHM1 FIFO overflow.         [5]  - RSB Single Bit ECC Error.
///< [6]  - RSB Double Bit ECC Error.
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_ERR_STS_CMN_ERR_STS_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_ERR_STS_CMN_ERR_STS_BF_WID ( 7)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_ERR_STS_CMN_ERR_STS_BF_MSK (0x0000007F)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_ERR_STS_CMN_ERR_STS_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_CRUX_CLK_CMN_INTR_HIGH_EN register description at address offset 0x20b4
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/CRUX_CLK_CMN_INTR_HIGH_EN
  * High Priority Enable register for errors that generate alarams and interrupts, detected in Crux clock domain
  */

typedef union {
  struct {
    uint32_t CMN_INTR_HIGH_EN : 7;
    ///< This register contains corresponding high priority Interrupt enable
    ///< bits for all the Interrupt conditions detected in Crux clock common
    ///< error Status register.             Each bit of this register enable
    ///< High priority Interrupt for corresponding error in the status register.
    ///< The mapping of bits is same as Crux clock common error Status register.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 25;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_crux_clk_cmn_intr_high_en_reg_t;

#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_INTR_HIGH_EN_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_INTR_HIGH_EN_RD_MASK (0x0000007fU)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_INTR_HIGH_EN_WR_MASK (0x0000007fU)


///< This register contains corresponding high priority Interrupt enable
///< bits for all the Interrupt conditions detected in Crux clock common
///< error Status register.             Each bit of this register enable
///< High priority Interrupt for corresponding error in the status register.
///< The mapping of bits is same as Crux clock common error Status register.
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_INTR_HIGH_EN_CMN_INTR_HIGH_EN_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_INTR_HIGH_EN_CMN_INTR_HIGH_EN_BF_WID ( 7)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_INTR_HIGH_EN_CMN_INTR_HIGH_EN_BF_MSK (0x0000007F)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_INTR_HIGH_EN_CMN_INTR_HIGH_EN_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_CRUX_CLK_CMN_INTR_LOW_EN register description at address offset 0x20b8
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/CRUX_CLK_CMN_INTR_LOW_EN
  * Low Priority Enable register for errors that generate alarams and interrupts, detected in Crux clock domain
  */

typedef union {
  struct {
    uint32_t CMN_INTR_LOW_EN : 7;
    ///< This register contains corresponding Low priority Interrupt enable
    ///< bits for all the Interrupt conditions detected in Crux clock common
    ///< error Status register.             Each bit of this register enable
    ///< Low priority Interrupt for corresponding error in the status register.
    ///< The mapping of bits is same as Crux clock common error Status register.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 25;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_crux_clk_cmn_intr_low_en_reg_t;

#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_INTR_LOW_EN_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_INTR_LOW_EN_RD_MASK (0x0000007fU)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_INTR_LOW_EN_WR_MASK (0x0000007fU)


///< This register contains corresponding Low priority Interrupt enable
///< bits for all the Interrupt conditions detected in Crux clock common
///< error Status register.             Each bit of this register enable
///< Low priority Interrupt for corresponding error in the status register.
///< The mapping of bits is same as Crux clock common error Status register.
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_INTR_LOW_EN_CMN_INTR_LOW_EN_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_INTR_LOW_EN_CMN_INTR_LOW_EN_BF_WID ( 7)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_INTR_LOW_EN_CMN_INTR_LOW_EN_BF_MSK (0x0000007F)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_INTR_LOW_EN_CMN_INTR_LOW_EN_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_CRUX_CLK_CMN_ALM_EN register description at address offset 0x20bc
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/CRUX_CLK_CMN_ALM_EN
  * Enable register for Alarms errors that generate alarams and interrupts, detected in Crux clock domain
  */

typedef union {
  struct {
    uint32_t CMN_ALM_EN : 7;
    ///< This register contains corresponding enable bits for all the error
    ///< conditions detected in Crux clock common error Status register.
    ///< Each bit of this register enable alarm for corresponding error in
    ///< the status register.             The mapping of bits is same as Crux
    ///< clock error Status register.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 25;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_crux_clk_cmn_alm_en_reg_t;

#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_ALM_EN_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_ALM_EN_RD_MASK (0x0000007fU)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_ALM_EN_WR_MASK (0x0000007fU)


///< This register contains corresponding enable bits for all the error
///< conditions detected in Crux clock common error Status register.
///< Each bit of this register enable alarm for corresponding error in
///< the status register.             The mapping of bits is same as Crux
///< clock error Status register.
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_ALM_EN_CMN_ALM_EN_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_ALM_EN_CMN_ALM_EN_BF_WID ( 7)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_ALM_EN_CMN_ALM_EN_BF_MSK (0x0000007F)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_ALM_EN_CMN_ALM_EN_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_CRUX_CLK_CMN_ERR_CLR register description at address offset 0x20c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/CRUX_CLK_CMN_ERR_CLR
  * Clear register for errors that generate alarams and interrupts, detected in Crux clock domain
  */

typedef union {
  struct {
    uint32_t CMN_ERR_CLR : 7;
    ///< This register contains clear bits for all the error conditions detected
    ///< in Crux clock common error Status register.             Each bit of
    ///< this register when written clears the corresponding bit in the error
    ///< status status register.            The clear operation is done for
    ///< only one cycle and subsequent error bits can set the status registers.
    ///< The mapping of bits is same as Crux clock common error Status register.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 25;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_crux_clk_cmn_err_clr_reg_t;

#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_ERR_CLR_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_ERR_CLR_RD_MASK (0x0000007fU)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_ERR_CLR_WR_MASK (0x0000007fU)


///< This register contains clear bits for all the error conditions detected
///< in Crux clock common error Status register.             Each bit of
///< this register when written clears the corresponding bit in the error
///< status status register.            The clear operation is done for
///< only one cycle and subsequent error bits can set the status registers.
///< The mapping of bits is same as Crux clock common error Status register.
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_ERR_CLR_CMN_ERR_CLR_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_ERR_CLR_CMN_ERR_CLR_BF_WID ( 7)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_ERR_CLR_CMN_ERR_CLR_BF_MSK (0x0000007F)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_ERR_CLR_CMN_ERR_CLR_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_CRUX_CLK_CMN_ERR_FRC register description at address offset 0x20c4
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/CRUX_CLK_CMN_ERR_FRC
  * Force register for errors that generate alarams and interrupts, detected in Crux clock domain
  */

typedef union {
  struct {
    uint32_t CMN_ERR_FRC : 7;
    ///< This register contains forcr bits for all the error conditions detected
    ///< in Crux clock common error Status register.             Each bit of
    ///< this register when written force the corresponding bit in the error
    ///< status register to 1 irrespective of the error condition (active value
    ///< of the error) until written back to 0.                         The
    ///< mapping of bits is same as Crux clock common error Status register.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 25;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_crux_clk_cmn_err_frc_reg_t;

#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_ERR_FRC_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_ERR_FRC_RD_MASK (0x0000007fU)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_ERR_FRC_WR_MASK (0x0000007fU)


///< This register contains forcr bits for all the error conditions detected
///< in Crux clock common error Status register.             Each bit of
///< this register when written force the corresponding bit in the error
///< status register to 1 irrespective of the error condition (active value
///< of the error) until written back to 0.                         The
///< mapping of bits is same as Crux clock common error Status register.
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_ERR_FRC_CMN_ERR_FRC_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_ERR_FRC_CMN_ERR_FRC_BF_WID ( 7)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_ERR_FRC_CMN_ERR_FRC_BF_MSK (0x0000007F)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_ERR_FRC_CMN_ERR_FRC_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_ERR_STS register description at address offset 0x20d0
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/CRUX_CLK_INTR_ONLY_ERR_STS
  * Status register for  errors that generate only interrupts detected in Crux clock domain
  */

typedef union {
  struct {
    uint32_t INTR_STS : 7;
    ///< Status register for errors that generate only interrupts but not alarms
    ///< in Crux clock domain.            The register value is sticky once
    ///< set and only cleared upon writing to corresponding error clear register.
    ///< This register is set if the corresponding erro is detected irrespective
    ///< of the value of the interrupt generation enable.            The mapping
    ///< of individual bits is shown below.          [0]  - RX first sample
    ///< received.         [1]  - RX Crux Data rate minimum Threshold error.
    ///< [2]  - RX Crux Data rate maximum Threshold error.         [3]  - RX
    ///< Crux average stall threshold error.         [4]  - RX Crux peak stall
    ///< threshold error.         [5]  - TX Crux Data rate minimum Threshold
    ///< error         [6]  - TX Crux Data rate maximum Threshold error
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 25;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_crux_clk_intr_only_err_sts_reg_t;

#define JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_ERR_STS_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_ERR_STS_RD_MASK (0x0000007fU)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_ERR_STS_WR_MASK (0x00000000U)


///< Status register for errors that generate only interrupts but not alarms
///< in Crux clock domain.            The register value is sticky once
///< set and only cleared upon writing to corresponding error clear register.
///< This register is set if the corresponding erro is detected irrespective
///< of the value of the interrupt generation enable.            The mapping
///< of individual bits is shown below.          [0]  - RX first sample
///< received.         [1]  - RX Crux Data rate minimum Threshold error.
///< [2]  - RX Crux Data rate maximum Threshold error.         [3]  - RX
///< Crux average stall threshold error.         [4]  - RX Crux peak stall
///< threshold error.         [5]  - TX Crux Data rate minimum Threshold
///< error         [6]  - TX Crux Data rate maximum Threshold error
#define JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_ERR_STS_INTR_STS_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_ERR_STS_INTR_STS_BF_WID ( 7)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_ERR_STS_INTR_STS_BF_MSK (0x0000007F)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_ERR_STS_INTR_STS_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_INTR_HIGH_EN register description at address offset 0x20d4
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/CRUX_CLK_INTR_ONLY_INTR_HIGH_EN
  * High Priority Interrupt Enable register for errors that generate only interruptsdetected in Crux clock domain
  */

typedef union {
  struct {
    uint32_t INTR_HIGH_EN : 5;
    ///< This register contains corresponding High Priority Interrupt enable
    ///< bits for all the error conditions detected in Crux clock interrupt
    ///< only error Status register.             Each bit of this register
    ///< enable High Priority Interrupt for corresponding error in the status
    ///< register.             The mapping of bits is same as Crux clock interrupt
    ///< only error Status register.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_crux_clk_intr_only_intr_high_en_reg_t;

#define JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_INTR_HIGH_EN_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_INTR_HIGH_EN_RD_MASK (0x0000001fU)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_INTR_HIGH_EN_WR_MASK (0x0000001fU)


///< This register contains corresponding High Priority Interrupt enable
///< bits for all the error conditions detected in Crux clock interrupt
///< only error Status register.             Each bit of this register
///< enable High Priority Interrupt for corresponding error in the status
///< register.             The mapping of bits is same as Crux clock interrupt
///< only error Status register.
#define JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_INTR_HIGH_EN_INTR_HIGH_EN_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_INTR_HIGH_EN_INTR_HIGH_EN_BF_WID ( 5)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_INTR_HIGH_EN_INTR_HIGH_EN_BF_MSK (0x0000001F)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_INTR_HIGH_EN_INTR_HIGH_EN_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_INTR_LOW_EN register description at address offset 0x20d8
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/CRUX_CLK_INTR_ONLY_INTR_LOW_EN
  * Low Priority Interrupt Enable register for RX Interrupts for windowed Counter Threshold errors detected in Crux clock domain
  */

typedef union {
  struct {
    uint32_t INTR_LOW_EN : 5;
    ///< This register contains corresponding Low Priority Interrupt enable
    ///< bits for all the error conditions detected in Crux clock interrupt
    ///< only error Status register.             Each bit of this register
    ///< enable Low Priority Interrupt for corresponding error in the status
    ///< register.             The mapping of bits is same as Crux clock interrupt
    ///< only error Status register.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_crux_clk_intr_only_intr_low_en_reg_t;

#define JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_INTR_LOW_EN_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_INTR_LOW_EN_RD_MASK (0x0000001fU)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_INTR_LOW_EN_WR_MASK (0x0000001fU)


///< This register contains corresponding Low Priority Interrupt enable
///< bits for all the error conditions detected in Crux clock interrupt
///< only error Status register.             Each bit of this register
///< enable Low Priority Interrupt for corresponding error in the status
///< register.             The mapping of bits is same as Crux clock interrupt
///< only error Status register.
#define JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_INTR_LOW_EN_INTR_LOW_EN_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_INTR_LOW_EN_INTR_LOW_EN_BF_WID ( 5)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_INTR_LOW_EN_INTR_LOW_EN_BF_MSK (0x0000001F)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_INTR_LOW_EN_INTR_LOW_EN_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_ERR_CLR register description at address offset 0x20dc
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/CRUX_CLK_INTR_ONLY_ERR_CLR
  * Clear register for RX Interrupts for windowed Counter Threshold errors detected in Crux clock domain
  */

typedef union {
  struct {
    uint32_t INTR_CLR : 5;
    ///< This register contains clear bits for all the error conditions detected
    ///< in Crux clock interruplt only error Status register.             Each
    ///< bit of this register when written clears the corresponding bit in
    ///< the error status status register.            The clear operation is
    ///< done for only one cycle and subsequent error bits can set the status
    ///< registers.             The mapping of bits is same as Crux clock interrupt
    ///< only error Status register.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_crux_clk_intr_only_err_clr_reg_t;

#define JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_ERR_CLR_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_ERR_CLR_RD_MASK (0x0000001fU)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_ERR_CLR_WR_MASK (0x0000001fU)


///< This register contains clear bits for all the error conditions detected
///< in Crux clock interruplt only error Status register.             Each
///< bit of this register when written clears the corresponding bit in
///< the error status status register.            The clear operation is
///< done for only one cycle and subsequent error bits can set the status
///< registers.             The mapping of bits is same as Crux clock interrupt
///< only error Status register.
#define JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_ERR_CLR_INTR_CLR_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_ERR_CLR_INTR_CLR_BF_WID ( 5)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_ERR_CLR_INTR_CLR_BF_MSK (0x0000001F)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_ERR_CLR_INTR_CLR_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_ERR_FRC register description at address offset 0x20e0
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/CRUX_CLK_INTR_ONLY_ERR_FRC
  * Force register for errors detected in Crux clock domain
  */

typedef union {
  struct {
    uint32_t INTR_FRC : 5;
    ///< This register contains forcr bits for all the error conditions detected
    ///< in Crux clock interrupt only error Status register.             Each
    ///< bit of this register when written force the corresponding bit in the
    ///< error status register to 1 irrespective of the error condition (active
    ///< value of the error) until written back to 0.
    ///< The mapping of bits is same as Crux clock interrupt only error Status
    ///< register.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_crux_clk_intr_only_err_frc_reg_t;

#define JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_ERR_FRC_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_ERR_FRC_RD_MASK (0x0000001fU)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_ERR_FRC_WR_MASK (0x0000001fU)


///< This register contains forcr bits for all the error conditions detected
///< in Crux clock interrupt only error Status register.             Each
///< bit of this register when written force the corresponding bit in the
///< error status register to 1 irrespective of the error condition (active
///< value of the error) until written back to 0.
///< The mapping of bits is same as Crux clock interrupt only error Status
///< register.
#define JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_ERR_FRC_INTR_FRC_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_ERR_FRC_INTR_FRC_BF_WID ( 5)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_ERR_FRC_INTR_FRC_BF_MSK (0x0000001F)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_ERR_FRC_INTR_FRC_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_CRUX_CLK_NSIP_ALRM_EN register description at address offset 0x20f0
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/CRUX_CLK_NSIP_ALRM_EN
  * Enable register for NSIP Alarm
  */

typedef union {
  struct {
    uint32_t ALM_EN : 1;
    ///< When set to 1, this bit enables alarm generation if High priority
    ///< enable from NSIP module is set.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_crux_clk_nsip_alrm_en_reg_t;

#define JESD_CRUX_CLK_CSR_CRUX_CLK_NSIP_ALRM_EN_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_NSIP_ALRM_EN_RD_MASK (0x00000001U)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_NSIP_ALRM_EN_WR_MASK (0x00000001U)


///< When set to 1, this bit enables alarm generation if High priority
///< enable from NSIP module is set.
#define JESD_CRUX_CLK_CSR_CRUX_CLK_NSIP_ALRM_EN_ALM_EN_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_NSIP_ALRM_EN_ALM_EN_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_NSIP_ALRM_EN_ALM_EN_BF_MSK (0x00000001)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_NSIP_ALRM_EN_ALM_EN_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_CRUX_CLK_RSB_ECC_ERR_CFG register description at address offset 0x20f4
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/CRUX_CLK_RSB_ECC_ERR_CFG
  * RSB ECC Error Configuration
  */

typedef union {
  struct {
    uint32_t B0_ECC_ERR_CFG : 3;
    ///< Configures the ECC error generation/detection controls for RSB 256-bit
    ///< bank 0.        Bit 0 - When set, this bit disables ECC generation.
    ///< Used for debug and testing purpose.       Bit 1 - When set, this bit
    ///< disables ECC generation. Used for debug and testing purpose.
    ///< Bit 2 - This bit controls either SBE or DBE to be inserted. 1 = DBE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t B1_ECC_ERR_CFG : 3;
    ///< Configures the ECC error generation/detection controls for RSB 256-bit
    ///< bank 1.        Bit 0 - When set, this bit disables ECC generation.
    ///< Used for debug and testing purpose.       Bit 1 - When set, this bit
    ///< disables ECC generation. Used for debug and testing purpose.
    ///< Bit 2 - This bit controls either SBE or DBE to be inserted. 1 = DBE.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_crux_clk_rsb_ecc_err_cfg_reg_t;

#define JESD_CRUX_CLK_CSR_CRUX_CLK_RSB_ECC_ERR_CFG_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_RSB_ECC_ERR_CFG_RD_MASK (0x0000003fU)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_RSB_ECC_ERR_CFG_WR_MASK (0x0000003fU)


///< Configures the ECC error generation/detection controls for RSB 256-bit
///< bank 0.        Bit 0 - When set, this bit disables ECC generation.
///< Used for debug and testing purpose.       Bit 1 - When set, this bit
///< disables ECC generation. Used for debug and testing purpose.
///< Bit 2 - This bit controls either SBE or DBE to be inserted. 1 = DBE.
#define JESD_CRUX_CLK_CSR_CRUX_CLK_RSB_ECC_ERR_CFG_B0_ECC_ERR_CFG_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_RSB_ECC_ERR_CFG_B0_ECC_ERR_CFG_BF_WID ( 3)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_RSB_ECC_ERR_CFG_B0_ECC_ERR_CFG_BF_MSK (0x00000007)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_RSB_ECC_ERR_CFG_B0_ECC_ERR_CFG_BF_DEF (0x00000000)

///< Configures the ECC error generation/detection controls for RSB 256-bit
///< bank 1.        Bit 0 - When set, this bit disables ECC generation.
///< Used for debug and testing purpose.       Bit 1 - When set, this bit
///< disables ECC generation. Used for debug and testing purpose.
///< Bit 2 - This bit controls either SBE or DBE to be inserted. 1 = DBE.
#define JESD_CRUX_CLK_CSR_CRUX_CLK_RSB_ECC_ERR_CFG_B1_ECC_ERR_CFG_BF_OFF ( 3)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_RSB_ECC_ERR_CFG_B1_ECC_ERR_CFG_BF_WID ( 3)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_RSB_ECC_ERR_CFG_B1_ECC_ERR_CFG_BF_MSK (0x00000038)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_RSB_ECC_ERR_CFG_B1_ECC_ERR_CFG_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_CRUX_CLK_RSB_ECC_ERR_FRC register description at address offset 0x20f8
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/CRUX_CLK_RSB_ECC_ERR_FRC
  * RSB ECC Error Force
  */

typedef union {
  struct {
    uint32_t B0_ECC_ERR_FRC : 1;
    ///< When set to 1, this bit enables to insert one ECC error in RSB 256-bit
    ///< bank 0 determined by ECC_ERR_FORCE type. It is self clearing and cleared
    ///< when the expected ECC error is seen.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t B1_ECC_ERR_FRC : 1;
    ///< When set to 1, this bit enables to insert one ECC error in RSB 256-bit
    ///< bank 1 determined by ECC_ERR_FORCE type. It is self clearing and cleared
    ///< when the expected ECC error is seen.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_crux_clk_rsb_ecc_err_frc_reg_t;

#define JESD_CRUX_CLK_CSR_CRUX_CLK_RSB_ECC_ERR_FRC_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_RSB_ECC_ERR_FRC_RD_MASK (0x00000003U)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_RSB_ECC_ERR_FRC_WR_MASK (0x00000003U)


///< When set to 1, this bit enables to insert one ECC error in RSB 256-bit
///< bank 0 determined by ECC_ERR_FORCE type. It is self clearing and cleared
///< when the expected ECC error is seen.
#define JESD_CRUX_CLK_CSR_CRUX_CLK_RSB_ECC_ERR_FRC_B0_ECC_ERR_FRC_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_RSB_ECC_ERR_FRC_B0_ECC_ERR_FRC_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_RSB_ECC_ERR_FRC_B0_ECC_ERR_FRC_BF_MSK (0x00000001)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_RSB_ECC_ERR_FRC_B0_ECC_ERR_FRC_BF_DEF (0x00000000)

///< When set to 1, this bit enables to insert one ECC error in RSB 256-bit
///< bank 1 determined by ECC_ERR_FORCE type. It is self clearing and cleared
///< when the expected ECC error is seen.
#define JESD_CRUX_CLK_CSR_CRUX_CLK_RSB_ECC_ERR_FRC_B1_ECC_ERR_FRC_BF_OFF ( 1)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_RSB_ECC_ERR_FRC_B1_ECC_ERR_FRC_BF_WID ( 1)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_RSB_ECC_ERR_FRC_B1_ECC_ERR_FRC_BF_MSK (0x00000002)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_RSB_ECC_ERR_FRC_B1_ECC_ERR_FRC_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_EN register description at address offset 0x2100
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/CRUX_CLK_WNDW_ERR_CNT_EN
  * Enable Register for  Error window Counters.
  */

typedef union {
  struct {
    uint32_t WNDW_CNT_EN : 2;
    ///< Enable register for  Error window counters for windowed Counter Threshold
    ///< errors detected in Crux clock domain.            Each bit will enable
    ///< counters which will generate error signals once counters reach programmable
    ///< threshold.        The mapping of indivbsual bits is shown below.
    ///< [0]  - TSB Single Bit ECC Error window counter Enable.          [1]
    ///< - TSB Double Bit ECC Error window counter Enable.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_crux_clk_wndw_err_cnt_en_reg_t;

#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_EN_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_EN_RD_MASK (0x00000003U)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_EN_WR_MASK (0x00000003U)


///< Enable register for  Error window counters for windowed Counter Threshold
///< errors detected in Crux clock domain.            Each bit will enable
///< counters which will generate error signals once counters reach programmable
///< threshold.        The mapping of indivbsual bits is shown below.
///< [0]  - TSB Single Bit ECC Error window counter Enable.          [1]
///< - TSB Double Bit ECC Error window counter Enable.
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_EN_WNDW_CNT_EN_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_EN_WNDW_CNT_EN_BF_WID ( 2)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_EN_WNDW_CNT_EN_BF_MSK (0x00000003)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_EN_WNDW_CNT_EN_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_CLR register description at address offset 0x2104
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/CRUX_CLK_WNDW_ERR_CNT_CLR
  * Clear Register for  Error window Counters.
  */

typedef union {
  struct {
    uint32_t WNDW_CNT_CLR : 2;
    ///< Clear register for Per Lane Error window counters for windowed Counter
    ///< Threshold errors detected in Crux clock domain.            Each bit
    ///< will clear all the counters corresponding per lane window based error.
    ///< The mapping of bits is same as Per Lane error counter enable register.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_crux_clk_wndw_err_cnt_clr_reg_t;

#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_CLR_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_CLR_RD_MASK (0x00000003U)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_CLR_WR_MASK (0x00000003U)


///< Clear register for Per Lane Error window counters for windowed Counter
///< Threshold errors detected in Crux clock domain.            Each bit
///< will clear all the counters corresponding per lane window based error.
///< The mapping of bits is same as Per Lane error counter enable register.
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_CLR_WNDW_CNT_CLR_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_CLR_WNDW_CNT_CLR_BF_WID ( 2)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_CLR_WNDW_CNT_CLR_BF_MSK (0x00000003)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_CLR_WNDW_CNT_CLR_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_IDX register description at address offset 0x2108
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/CRUX_CLK_WNDW_ERR_CNT_IDX
  * Per Lane Error window Counters Read Index.
  */

typedef union {
  struct {
    uint32_t CNTR_TYPE : 4;
    ///< Selects the counter type for the selected error type.       4'd0 -
    ///< Sub Window 0 Error Counter.       4'd1 - Sub Window 1 Error Counter.
    ///< 4'd2 - Sub Window 2 Error Counter.       4'd3 - Sub Window 3 Error
    ///< Counter.       4'd4 - Sub Window 4 Error Counter.       4'd5 - Sub
    ///< Window 5 Error Counter.       4'd6 - Sub Window 6 Error Counter.
    ///< 4'd7 - Sub Window 7 Error Counter.       4'd8 - Sub window Timer Value.
    ///< 4'd9 - Cumulative Error count.       4'd10-15 - Reserved.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t ERR_TYPE : 4;
    ///< Selects the error type.             4'd0 - RSB Single bit Error counter.
    ///< 4'd1 - RSB DOuble bit Error counter.             4'd2-15 - Reserved.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_crux_clk_wndw_err_cnt_idx_reg_t;

#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_IDX_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_IDX_RD_MASK (0x000000ffU)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_IDX_WR_MASK (0x000000ffU)


///< Selects the counter type for the selected error type.       4'd0 -
///< Sub Window 0 Error Counter.       4'd1 - Sub Window 1 Error Counter.
///< 4'd2 - Sub Window 2 Error Counter.       4'd3 - Sub Window 3 Error
///< Counter.       4'd4 - Sub Window 4 Error Counter.       4'd5 - Sub
///< Window 5 Error Counter.       4'd6 - Sub Window 6 Error Counter.
///< 4'd7 - Sub Window 7 Error Counter.       4'd8 - Sub window Timer Value.
///< 4'd9 - Cumulative Error count.       4'd10-15 - Reserved.
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_IDX_CNTR_TYPE_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_IDX_CNTR_TYPE_BF_WID ( 4)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_IDX_CNTR_TYPE_BF_MSK (0x0000000F)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_IDX_CNTR_TYPE_BF_DEF (0x00000000)

///< Selects the error type.             4'd0 - RSB Single bit Error counter.
///< 4'd1 - RSB DOuble bit Error counter.             4'd2-15 - Reserved.
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_IDX_ERR_TYPE_BF_OFF ( 4)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_IDX_ERR_TYPE_BF_WID ( 4)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_IDX_ERR_TYPE_BF_MSK (0x000000F0)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_IDX_ERR_TYPE_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_RDATA register description at address offset 0x210c
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/CRUX_CLK_WNDW_ERR_CNT_RDATA
  * Per Lane Error window Counters Read Data
  */

typedef union {
  struct {
    uint32_t READ_DATA : 19;
    ///< Read Data corresponding to the counter selected by read index.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_crux_clk_wndw_err_cnt_rdata_reg_t;

#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_RDATA_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_RDATA_RD_MASK (0x0007ffffU)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_RDATA_WR_MASK (0x00000000U)


///< Read Data corresponding to the counter selected by read index.
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_RDATA_READ_DATA_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_RDATA_READ_DATA_BF_WID (19)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_RDATA_READ_DATA_BF_MSK (0x0007FFFF)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_RDATA_READ_DATA_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT[16] register description at address offset 0x2200
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RX_STRM_SENT_FLIT_CNT
  * RX Stream sent Flit Count
  */

typedef union {
  struct {
    uint32_t SENT_FLIT_CNT : 32;
    ///< This counter indicates number of flits sent for each stream on JESD
    ///< IP interface.             Each stream has dedicated counter for flits
    ///< sent to NSIP.            The counter saturates at Max value(32'hFFFF_FFFF).
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_rx_strm_sent_flit_cnt_reg_t;

#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT_RD_MASK (0xffffffffU)
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT_WR_MASK (0xffffffffU)


///< This counter indicates number of flits sent for each stream on JESD
///< IP interface.             Each stream has dedicated counter for flits
///< sent to NSIP.            The counter saturates at Max value(32'hFFFF_FFFF).
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT_SENT_FLIT_CNT_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT_SENT_FLIT_CNT_BF_WID (32)
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT_SENT_FLIT_CNT_BF_MSK (0xFFFFFFFF)
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT_SENT_FLIT_CNT_BF_DEF (0x00000000)
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT_ARR_SZ0 (16)
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT[16] register description at address offset 0x2240
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/TX_STRM_RCV_FLIT_CNT
  * TX Stream Received to TSB Flit Count
  */

typedef union {
  struct {
    uint32_t RCV_FLIT_CNT : 32;
    ///< This counter indicates number of flits received for each stream on
    ///< JESD TX glue interface.             Each stream has dedicated counter
    ///< for flits sent from NSIP to tx_glue.            The counter saturates
    ///< at Max value(32'hFFFF_FFFF).
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_tx_strm_rcv_flit_cnt_reg_t;

#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT_RD_MASK (0xffffffffU)
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT_WR_MASK (0xffffffffU)


///< This counter indicates number of flits received for each stream on
///< JESD TX glue interface.             Each stream has dedicated counter
///< for flits sent from NSIP to tx_glue.            The counter saturates
///< at Max value(32'hFFFF_FFFF).
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT_RCV_FLIT_CNT_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT_RCV_FLIT_CNT_BF_WID (32)
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT_RCV_FLIT_CNT_BF_MSK (0xFFFFFFFF)
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT_RCV_FLIT_CNT_BF_DEF (0x00000000)
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT_ARR_SZ0 (16)
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_THRSH[2] register description at address offset 0x2280
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/CRUX_CLK_WNDW_ERR_THRSH
  * Error Threshold Value for windowed counter based errors
  */

typedef union {
  struct {
    uint32_t ERR_THRSH : 19;
    ///< Error count Threshold value. Error is generated the current accumulated
    ///< count from alll enabled sub windows matches or exceeds this value.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_crux_clk_wndw_err_thrsh_reg_t;

#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_THRSH_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_THRSH_RD_MASK (0x0007ffffU)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_THRSH_WR_MASK (0x0007ffffU)


///< Error count Threshold value. Error is generated the current accumulated
///< count from alll enabled sub windows matches or exceeds this value.
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_THRSH_ERR_THRSH_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_THRSH_ERR_THRSH_BF_WID (19)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_THRSH_ERR_THRSH_BF_MSK (0x0007FFFF)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_THRSH_ERR_THRSH_BF_DEF (0x00000000)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_THRSH_ARR_SZ0 (2)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_THRSH_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_WNDW_NUM[2] register description at address offset 0x2290
  *
  * Register default value:        0x00000007
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/CRUX_CLK_WNDW_ERR_WNDW_NUM
  * Error sub window count for windowed counter based errors
  */

typedef union {
  struct {
    uint32_t WNDW_CNT : 3;
    ///< Each window based error implements 8 16-bit error windows to calculate
    ///< sliding window error count.             This register selects number
    ///< of sub windows enabled for aparticular error type.       3'd0 - Single
    ///< sub window.       3'd1 - 2 sub windows.       3'd2 - 3 sub windows.
    ///< 3'd3 - 4 sub windows.       3'd4 - 5 sub windows.       3'd5 - 6 sub
    ///< windows.       3'd6 - 7 sub windows.       3'd7 - 8 sub windows.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x7"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_crux_clk_wndw_err_wndw_num_reg_t;

#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_WNDW_NUM_DEFAULT (0x00000007U)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_WNDW_NUM_RD_MASK (0x00000007U)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_WNDW_NUM_WR_MASK (0x00000007U)


///< Each window based error implements 8 16-bit error windows to calculate
///< sliding window error count.             This register selects number
///< of sub windows enabled for aparticular error type.       3'd0 - Single
///< sub window.       3'd1 - 2 sub windows.       3'd2 - 3 sub windows.
///< 3'd3 - 4 sub windows.       3'd4 - 5 sub windows.       3'd5 - 6 sub
///< windows.       3'd6 - 7 sub windows.       3'd7 - 8 sub windows.
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_WNDW_NUM_WNDW_CNT_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_WNDW_NUM_WNDW_CNT_BF_WID ( 3)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_WNDW_NUM_WNDW_CNT_BF_MSK (0x00000007)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_WNDW_NUM_WNDW_CNT_BF_DEF (0x00000007)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_WNDW_NUM_ARR_SZ0 (2)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_WNDW_NUM_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_WNDW_TIMER[2] register description at address offset 0x22a0
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/CRUX_CLK_WNDW_ERR_WNDW_TIMER
  * Error sub window Timer Value for windowed counter based errors
  */

typedef union {
  struct {
    uint32_t ERR_TIMER : 16;
    ///< Timer count value for sub error windows. When timer reaches this value
    ///< all sub windows will be updated with previous error window value i.e
    ///< window count slides.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_crux_clk_wndw_err_wndw_timer_reg_t;

#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_WNDW_TIMER_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_WNDW_TIMER_RD_MASK (0x0000ffffU)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_WNDW_TIMER_WR_MASK (0x0000ffffU)


///< Timer count value for sub error windows. When timer reaches this value
///< all sub windows will be updated with previous error window value i.e
///< window count slides.
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_WNDW_TIMER_ERR_TIMER_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_WNDW_TIMER_ERR_TIMER_BF_WID (16)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_WNDW_TIMER_ERR_TIMER_BF_MSK (0x0000FFFF)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_WNDW_TIMER_ERR_TIMER_BF_DEF (0x00000000)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_WNDW_TIMER_ARR_SZ0 (2)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_WNDW_TIMER_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG0[4] register description at address offset 0x2300
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/CRUX_CLK_DBG_CAP_REG0
  * Crux clock debug signal capture value
  */

typedef union {
  struct {
    uint32_t CAP_DATA : 32;
    ///< 32-bit signal capture value.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_crux_clk_dbg_cap_reg0_reg_t;

#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG0_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG0_RD_MASK (0xffffffffU)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG0_WR_MASK (0x00000000U)


///< 32-bit signal capture value.
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG0_CAP_DATA_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG0_CAP_DATA_BF_WID (32)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG0_CAP_DATA_BF_MSK (0xFFFFFFFF)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG0_CAP_DATA_BF_DEF (0x00000000)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG0_ARR_SZ0 (4)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG0_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG1[4] register description at address offset 0x2310
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/CRUX_CLK_DBG_CAP_REG1
  * Crux clock debug signal capture value
  */

typedef union {
  struct {
    uint32_t CAP_DATA : 32;
    ///< 32-bit signal capture value.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_crux_clk_dbg_cap_reg1_reg_t;

#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG1_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG1_RD_MASK (0xffffffffU)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG1_WR_MASK (0x00000000U)


///< 32-bit signal capture value.
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG1_CAP_DATA_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG1_CAP_DATA_BF_WID (32)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG1_CAP_DATA_BF_MSK (0xFFFFFFFF)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG1_CAP_DATA_BF_DEF (0x00000000)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG1_ARR_SZ0 (4)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG1_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG2[4] register description at address offset 0x2320
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/CRUX_CLK_DBG_CAP_REG2
  * Crux clock debug signal capture value
  */

typedef union {
  struct {
    uint32_t CAP_DATA : 32;
    ///< 32-bit signal capture value.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_crux_clk_dbg_cap_reg2_reg_t;

#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG2_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG2_RD_MASK (0xffffffffU)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG2_WR_MASK (0x00000000U)


///< 32-bit signal capture value.
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG2_CAP_DATA_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG2_CAP_DATA_BF_WID (32)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG2_CAP_DATA_BF_MSK (0xFFFFFFFF)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG2_CAP_DATA_BF_DEF (0x00000000)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG2_ARR_SZ0 (4)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG2_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG3[4] register description at address offset 0x2330
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/CRUX_CLK_DBG_CAP_REG3
  * Crux clock debug signal capture value
  */

typedef union {
  struct {
    uint32_t CAP_DATA : 32;
    ///< 32-bit signal capture value.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_crux_clk_csr_crux_clk_dbg_cap_reg3_reg_t;

#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG3_DEFAULT (0x00000000U)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG3_RD_MASK (0xffffffffU)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG3_WR_MASK (0x00000000U)


///< 32-bit signal capture value.
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG3_CAP_DATA_BF_OFF ( 0)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG3_CAP_DATA_BF_WID (32)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG3_CAP_DATA_BF_MSK (0xFFFFFFFF)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG3_CAP_DATA_BF_DEF (0x00000000)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG3_ARR_SZ0 (4)
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG3_ARRAY_STRIDE0 (0x0004)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define JESD_CRUX_CLK_CSR_SCRATCH_REG(_BASE) ((jesd_crux_clk_csr_scratch_reg_t*) JESD_CRUX_CLK_CSR_SCRATCH_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_APB_BRDG_STAT_REG(_BASE) ((jesd_crux_clk_csr_apb_brdg_stat_reg_t*) JESD_CRUX_CLK_CSR_APB_BRDG_STAT_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_STRM_CFG_REG(_BASE) ((jesd_crux_clk_csr_rx_strm_cfg_reg_t*) JESD_CRUX_CLK_CSR_RX_STRM_CFG_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_MEM_STRM_CFG_REG(_BASE) ((jesd_crux_clk_csr_rx_mem_strm_cfg_reg_t*) JESD_CRUX_CLK_CSR_RX_MEM_STRM_CFG_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_TOP_CTL_REG(_BASE) ((jesd_crux_clk_csr_rx_decomp_top_ctl_reg_t*) JESD_CRUX_CLK_CSR_RX_DECOMP_TOP_CTL_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL_REG(_BASE) ((jesd_crux_clk_csr_rx_decomp_vnsh_ctl_reg_t*) JESD_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RSB_DATA_SRC_CFG_REG(_BASE) ((jesd_crux_clk_csr_rsb_data_src_cfg_reg_t*) JESD_CRUX_CLK_CSR_RSB_DATA_SRC_CFG_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RSB_DATA_SRC_TIMER_REG(_BASE) ((jesd_crux_clk_csr_rsb_data_src_timer_reg_t*) JESD_CRUX_CLK_CSR_RSB_DATA_SRC_TIMER_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RSB_DATA_SRC_START_REG(_BASE) ((jesd_crux_clk_csr_rsb_data_src_start_reg_t*) JESD_CRUX_CLK_CSR_RSB_DATA_SRC_START_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RSB_FILL_LVL_CLR_REG(_BASE) ((jesd_crux_clk_csr_rsb_fill_lvl_clr_reg_t*) JESD_CRUX_CLK_CSR_RSB_FILL_LVL_CLR_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RSB_DATA_CAP_FRZ_EN_REG(_BASE) ((jesd_crux_clk_csr_rsb_data_cap_frz_en_reg_t*) JESD_CRUX_CLK_CSR_RSB_DATA_CAP_FRZ_EN_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RSB_OVRFLW_STICKY_STS_REG(_BASE) ((jesd_crux_clk_csr_rsb_ovrflw_sticky_sts_reg_t*) JESD_CRUX_CLK_CSR_RSB_OVRFLW_STICKY_STS_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RSB_UNDERFLW_STICKY_STS_REG(_BASE) ((jesd_crux_clk_csr_rsb_underflw_sticky_sts_reg_t*) JESD_CRUX_CLK_CSR_RSB_UNDERFLW_STICKY_STS_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RSB_INDIR_ADDR_REG(_BASE) ((jesd_crux_clk_csr_rsb_indir_addr_reg_t*) JESD_CRUX_CLK_CSR_RSB_INDIR_ADDR_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RSB_WR_RD_CTL_REG(_BASE) ((jesd_crux_clk_csr_rsb_wr_rd_ctl_reg_t*) JESD_CRUX_CLK_CSR_RSB_WR_RD_CTL_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA0_REG(_BASE) ((jesd_crux_clk_csr_rsb_wr_data_reg_t*) JESD_CRUX_CLK_CSR_RSB_WR_DATA0_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA1_REG(_BASE) ((jesd_crux_clk_csr_rsb_wr_data_reg_t*) JESD_CRUX_CLK_CSR_RSB_WR_DATA1_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA2_REG(_BASE) ((jesd_crux_clk_csr_rsb_wr_data_reg_t*) JESD_CRUX_CLK_CSR_RSB_WR_DATA2_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA3_REG(_BASE) ((jesd_crux_clk_csr_rsb_wr_data_reg_t*) JESD_CRUX_CLK_CSR_RSB_WR_DATA3_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA4_REG(_BASE) ((jesd_crux_clk_csr_rsb_wr_data_reg_t*) JESD_CRUX_CLK_CSR_RSB_WR_DATA4_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA5_REG(_BASE) ((jesd_crux_clk_csr_rsb_wr_data_reg_t*) JESD_CRUX_CLK_CSR_RSB_WR_DATA5_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA6_REG(_BASE) ((jesd_crux_clk_csr_rsb_wr_data_reg_t*) JESD_CRUX_CLK_CSR_RSB_WR_DATA6_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA7_REG(_BASE) ((jesd_crux_clk_csr_rsb_wr_data_reg_t*) JESD_CRUX_CLK_CSR_RSB_WR_DATA7_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA8_REG(_BASE) ((jesd_crux_clk_csr_rsb_wr_data_reg_t*) JESD_CRUX_CLK_CSR_RSB_WR_DATA8_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA9_REG(_BASE) ((jesd_crux_clk_csr_rsb_wr_data_reg_t*) JESD_CRUX_CLK_CSR_RSB_WR_DATA9_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA10_REG(_BASE) ((jesd_crux_clk_csr_rsb_wr_data_reg_t*) JESD_CRUX_CLK_CSR_RSB_WR_DATA10_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA11_REG(_BASE) ((jesd_crux_clk_csr_rsb_wr_data_reg_t*) JESD_CRUX_CLK_CSR_RSB_WR_DATA11_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA12_REG(_BASE) ((jesd_crux_clk_csr_rsb_wr_data_reg_t*) JESD_CRUX_CLK_CSR_RSB_WR_DATA12_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA13_REG(_BASE) ((jesd_crux_clk_csr_rsb_wr_data_reg_t*) JESD_CRUX_CLK_CSR_RSB_WR_DATA13_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA14_REG(_BASE) ((jesd_crux_clk_csr_rsb_wr_data_reg_t*) JESD_CRUX_CLK_CSR_RSB_WR_DATA14_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RSB_WR_DATA15_REG(_BASE) ((jesd_crux_clk_csr_rsb_wr_data_reg_t*) JESD_CRUX_CLK_CSR_RSB_WR_DATA15_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA0_REG(_BASE) ((jesd_crux_clk_csr_rsb_rd_data_reg_t*) JESD_CRUX_CLK_CSR_RSB_RD_DATA0_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA1_REG(_BASE) ((jesd_crux_clk_csr_rsb_rd_data_reg_t*) JESD_CRUX_CLK_CSR_RSB_RD_DATA1_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA2_REG(_BASE) ((jesd_crux_clk_csr_rsb_rd_data_reg_t*) JESD_CRUX_CLK_CSR_RSB_RD_DATA2_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA3_REG(_BASE) ((jesd_crux_clk_csr_rsb_rd_data_reg_t*) JESD_CRUX_CLK_CSR_RSB_RD_DATA3_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA4_REG(_BASE) ((jesd_crux_clk_csr_rsb_rd_data_reg_t*) JESD_CRUX_CLK_CSR_RSB_RD_DATA4_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA5_REG(_BASE) ((jesd_crux_clk_csr_rsb_rd_data_reg_t*) JESD_CRUX_CLK_CSR_RSB_RD_DATA5_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA6_REG(_BASE) ((jesd_crux_clk_csr_rsb_rd_data_reg_t*) JESD_CRUX_CLK_CSR_RSB_RD_DATA6_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA7_REG(_BASE) ((jesd_crux_clk_csr_rsb_rd_data_reg_t*) JESD_CRUX_CLK_CSR_RSB_RD_DATA7_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA8_REG(_BASE) ((jesd_crux_clk_csr_rsb_rd_data_reg_t*) JESD_CRUX_CLK_CSR_RSB_RD_DATA8_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA9_REG(_BASE) ((jesd_crux_clk_csr_rsb_rd_data_reg_t*) JESD_CRUX_CLK_CSR_RSB_RD_DATA9_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA10_REG(_BASE) ((jesd_crux_clk_csr_rsb_rd_data_reg_t*) JESD_CRUX_CLK_CSR_RSB_RD_DATA10_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA11_REG(_BASE) ((jesd_crux_clk_csr_rsb_rd_data_reg_t*) JESD_CRUX_CLK_CSR_RSB_RD_DATA11_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA12_REG(_BASE) ((jesd_crux_clk_csr_rsb_rd_data_reg_t*) JESD_CRUX_CLK_CSR_RSB_RD_DATA12_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA13_REG(_BASE) ((jesd_crux_clk_csr_rsb_rd_data_reg_t*) JESD_CRUX_CLK_CSR_RSB_RD_DATA13_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA14_REG(_BASE) ((jesd_crux_clk_csr_rsb_rd_data_reg_t*) JESD_CRUX_CLK_CSR_RSB_RD_DATA14_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RSB_RD_DATA15_REG(_BASE) ((jesd_crux_clk_csr_rsb_rd_data_reg_t*) JESD_CRUX_CLK_CSR_RSB_RD_DATA15_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL0_REG(_BASE) ((jesd_crux_clk_csr_rx_wr_mem_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL0_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL1_REG(_BASE) ((jesd_crux_clk_csr_rx_wr_mem_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL1_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL2_REG(_BASE) ((jesd_crux_clk_csr_rx_wr_mem_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL2_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL3_REG(_BASE) ((jesd_crux_clk_csr_rx_wr_mem_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL3_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL4_REG(_BASE) ((jesd_crux_clk_csr_rx_wr_mem_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL4_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL5_REG(_BASE) ((jesd_crux_clk_csr_rx_wr_mem_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL5_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL6_REG(_BASE) ((jesd_crux_clk_csr_rx_wr_mem_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL6_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL7_REG(_BASE) ((jesd_crux_clk_csr_rx_wr_mem_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL7_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL8_REG(_BASE) ((jesd_crux_clk_csr_rx_wr_mem_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL8_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL9_REG(_BASE) ((jesd_crux_clk_csr_rx_wr_mem_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL9_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL10_REG(_BASE) ((jesd_crux_clk_csr_rx_wr_mem_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL10_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL11_REG(_BASE) ((jesd_crux_clk_csr_rx_wr_mem_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL11_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL12_REG(_BASE) ((jesd_crux_clk_csr_rx_wr_mem_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL12_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL13_REG(_BASE) ((jesd_crux_clk_csr_rx_wr_mem_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL13_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL14_REG(_BASE) ((jesd_crux_clk_csr_rx_wr_mem_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL14_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL15_REG(_BASE) ((jesd_crux_clk_csr_rx_wr_mem_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_WR_MEM_TBL15_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL0_REG(_BASE) ((jesd_crux_clk_csr_rx_rd_mem_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL0_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL1_REG(_BASE) ((jesd_crux_clk_csr_rx_rd_mem_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL1_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL2_REG(_BASE) ((jesd_crux_clk_csr_rx_rd_mem_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL2_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL3_REG(_BASE) ((jesd_crux_clk_csr_rx_rd_mem_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL3_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL4_REG(_BASE) ((jesd_crux_clk_csr_rx_rd_mem_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL4_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL5_REG(_BASE) ((jesd_crux_clk_csr_rx_rd_mem_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL5_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL6_REG(_BASE) ((jesd_crux_clk_csr_rx_rd_mem_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL6_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL7_REG(_BASE) ((jesd_crux_clk_csr_rx_rd_mem_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL7_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL8_REG(_BASE) ((jesd_crux_clk_csr_rx_rd_mem_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL8_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL9_REG(_BASE) ((jesd_crux_clk_csr_rx_rd_mem_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL9_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL10_REG(_BASE) ((jesd_crux_clk_csr_rx_rd_mem_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL10_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL11_REG(_BASE) ((jesd_crux_clk_csr_rx_rd_mem_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL11_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL12_REG(_BASE) ((jesd_crux_clk_csr_rx_rd_mem_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL12_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL13_REG(_BASE) ((jesd_crux_clk_csr_rx_rd_mem_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL13_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL14_REG(_BASE) ((jesd_crux_clk_csr_rx_rd_mem_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL14_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL15_REG(_BASE) ((jesd_crux_clk_csr_rx_rd_mem_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_RD_MEM_TBL15_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL0_REG(_BASE) ((jesd_crux_clk_csr_rx_wr_ptr_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL0_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL1_REG(_BASE) ((jesd_crux_clk_csr_rx_wr_ptr_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL1_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL2_REG(_BASE) ((jesd_crux_clk_csr_rx_wr_ptr_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL2_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL3_REG(_BASE) ((jesd_crux_clk_csr_rx_wr_ptr_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL3_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL4_REG(_BASE) ((jesd_crux_clk_csr_rx_wr_ptr_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL4_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL5_REG(_BASE) ((jesd_crux_clk_csr_rx_wr_ptr_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL5_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL6_REG(_BASE) ((jesd_crux_clk_csr_rx_wr_ptr_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL6_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL7_REG(_BASE) ((jesd_crux_clk_csr_rx_wr_ptr_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL7_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL8_REG(_BASE) ((jesd_crux_clk_csr_rx_wr_ptr_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL8_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL9_REG(_BASE) ((jesd_crux_clk_csr_rx_wr_ptr_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL9_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL10_REG(_BASE) ((jesd_crux_clk_csr_rx_wr_ptr_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL10_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL11_REG(_BASE) ((jesd_crux_clk_csr_rx_wr_ptr_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL11_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL12_REG(_BASE) ((jesd_crux_clk_csr_rx_wr_ptr_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL12_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL13_REG(_BASE) ((jesd_crux_clk_csr_rx_wr_ptr_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL13_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL14_REG(_BASE) ((jesd_crux_clk_csr_rx_wr_ptr_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL14_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL15_REG(_BASE) ((jesd_crux_clk_csr_rx_wr_ptr_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_WR_PTR_TBL15_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL0_REG(_BASE) ((jesd_crux_clk_csr_rx_rd_ptr_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL0_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL1_REG(_BASE) ((jesd_crux_clk_csr_rx_rd_ptr_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL1_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL2_REG(_BASE) ((jesd_crux_clk_csr_rx_rd_ptr_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL2_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL3_REG(_BASE) ((jesd_crux_clk_csr_rx_rd_ptr_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL3_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL4_REG(_BASE) ((jesd_crux_clk_csr_rx_rd_ptr_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL4_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL5_REG(_BASE) ((jesd_crux_clk_csr_rx_rd_ptr_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL5_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL6_REG(_BASE) ((jesd_crux_clk_csr_rx_rd_ptr_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL6_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL7_REG(_BASE) ((jesd_crux_clk_csr_rx_rd_ptr_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL7_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL8_REG(_BASE) ((jesd_crux_clk_csr_rx_rd_ptr_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL8_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL9_REG(_BASE) ((jesd_crux_clk_csr_rx_rd_ptr_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL9_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL10_REG(_BASE) ((jesd_crux_clk_csr_rx_rd_ptr_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL10_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL11_REG(_BASE) ((jesd_crux_clk_csr_rx_rd_ptr_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL11_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL12_REG(_BASE) ((jesd_crux_clk_csr_rx_rd_ptr_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL12_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL13_REG(_BASE) ((jesd_crux_clk_csr_rx_rd_ptr_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL13_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL14_REG(_BASE) ((jesd_crux_clk_csr_rx_rd_ptr_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL14_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL15_REG(_BASE) ((jesd_crux_clk_csr_rx_rd_ptr_tbl_reg_t*) JESD_CRUX_CLK_CSR_RX_RD_PTR_TBL15_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS0_REG(_BASE) ((jesd_crux_clk_csr_rx_strm_mem_sts_reg_t*) JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS0_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS1_REG(_BASE) ((jesd_crux_clk_csr_rx_strm_mem_sts_reg_t*) JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS1_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS2_REG(_BASE) ((jesd_crux_clk_csr_rx_strm_mem_sts_reg_t*) JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS2_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS3_REG(_BASE) ((jesd_crux_clk_csr_rx_strm_mem_sts_reg_t*) JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS3_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS4_REG(_BASE) ((jesd_crux_clk_csr_rx_strm_mem_sts_reg_t*) JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS4_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS5_REG(_BASE) ((jesd_crux_clk_csr_rx_strm_mem_sts_reg_t*) JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS5_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS6_REG(_BASE) ((jesd_crux_clk_csr_rx_strm_mem_sts_reg_t*) JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS6_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS7_REG(_BASE) ((jesd_crux_clk_csr_rx_strm_mem_sts_reg_t*) JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS7_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS8_REG(_BASE) ((jesd_crux_clk_csr_rx_strm_mem_sts_reg_t*) JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS8_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS9_REG(_BASE) ((jesd_crux_clk_csr_rx_strm_mem_sts_reg_t*) JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS9_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS10_REG(_BASE) ((jesd_crux_clk_csr_rx_strm_mem_sts_reg_t*) JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS10_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS11_REG(_BASE) ((jesd_crux_clk_csr_rx_strm_mem_sts_reg_t*) JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS11_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS12_REG(_BASE) ((jesd_crux_clk_csr_rx_strm_mem_sts_reg_t*) JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS12_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS13_REG(_BASE) ((jesd_crux_clk_csr_rx_strm_mem_sts_reg_t*) JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS13_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS14_REG(_BASE) ((jesd_crux_clk_csr_rx_strm_mem_sts_reg_t*) JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS14_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS15_REG(_BASE) ((jesd_crux_clk_csr_rx_strm_mem_sts_reg_t*) JESD_CRUX_CLK_CSR_RX_STRM_MEM_STS15_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL0_REG(_BASE) ((jesd_crux_clk_csr_rx_decomp_mantissa_ctl_reg_t*) JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL0_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL1_REG(_BASE) ((jesd_crux_clk_csr_rx_decomp_mantissa_ctl_reg_t*) JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL1_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL2_REG(_BASE) ((jesd_crux_clk_csr_rx_decomp_mantissa_ctl_reg_t*) JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL2_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL3_REG(_BASE) ((jesd_crux_clk_csr_rx_decomp_mantissa_ctl_reg_t*) JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL3_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL4_REG(_BASE) ((jesd_crux_clk_csr_rx_decomp_mantissa_ctl_reg_t*) JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL4_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL5_REG(_BASE) ((jesd_crux_clk_csr_rx_decomp_mantissa_ctl_reg_t*) JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL5_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL6_REG(_BASE) ((jesd_crux_clk_csr_rx_decomp_mantissa_ctl_reg_t*) JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL6_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL7_REG(_BASE) ((jesd_crux_clk_csr_rx_decomp_mantissa_ctl_reg_t*) JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL7_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL8_REG(_BASE) ((jesd_crux_clk_csr_rx_decomp_mantissa_ctl_reg_t*) JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL8_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL9_REG(_BASE) ((jesd_crux_clk_csr_rx_decomp_mantissa_ctl_reg_t*) JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL9_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL10_REG(_BASE) ((jesd_crux_clk_csr_rx_decomp_mantissa_ctl_reg_t*) JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL10_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL11_REG(_BASE) ((jesd_crux_clk_csr_rx_decomp_mantissa_ctl_reg_t*) JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL11_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL12_REG(_BASE) ((jesd_crux_clk_csr_rx_decomp_mantissa_ctl_reg_t*) JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL12_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL13_REG(_BASE) ((jesd_crux_clk_csr_rx_decomp_mantissa_ctl_reg_t*) JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL13_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL14_REG(_BASE) ((jesd_crux_clk_csr_rx_decomp_mantissa_ctl_reg_t*) JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL14_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL15_REG(_BASE) ((jesd_crux_clk_csr_rx_decomp_mantissa_ctl_reg_t*) JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL15_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL16_REG(_BASE) ((jesd_crux_clk_csr_rx_decomp_mantissa_ctl_reg_t*) JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL16_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL17_REG(_BASE) ((jesd_crux_clk_csr_rx_decomp_mantissa_ctl_reg_t*) JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL17_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL18_REG(_BASE) ((jesd_crux_clk_csr_rx_decomp_mantissa_ctl_reg_t*) JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL18_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL19_REG(_BASE) ((jesd_crux_clk_csr_rx_decomp_mantissa_ctl_reg_t*) JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL19_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL20_REG(_BASE) ((jesd_crux_clk_csr_rx_decomp_mantissa_ctl_reg_t*) JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL20_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL21_REG(_BASE) ((jesd_crux_clk_csr_rx_decomp_mantissa_ctl_reg_t*) JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL21_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL22_REG(_BASE) ((jesd_crux_clk_csr_rx_decomp_mantissa_ctl_reg_t*) JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL22_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL23_REG(_BASE) ((jesd_crux_clk_csr_rx_decomp_mantissa_ctl_reg_t*) JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL23_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL24_REG(_BASE) ((jesd_crux_clk_csr_rx_decomp_mantissa_ctl_reg_t*) JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL24_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL25_REG(_BASE) ((jesd_crux_clk_csr_rx_decomp_mantissa_ctl_reg_t*) JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL25_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL26_REG(_BASE) ((jesd_crux_clk_csr_rx_decomp_mantissa_ctl_reg_t*) JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL26_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL27_REG(_BASE) ((jesd_crux_clk_csr_rx_decomp_mantissa_ctl_reg_t*) JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL27_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL28_REG(_BASE) ((jesd_crux_clk_csr_rx_decomp_mantissa_ctl_reg_t*) JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL28_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL29_REG(_BASE) ((jesd_crux_clk_csr_rx_decomp_mantissa_ctl_reg_t*) JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL29_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL30_REG(_BASE) ((jesd_crux_clk_csr_rx_decomp_mantissa_ctl_reg_t*) JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL30_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL31_REG(_BASE) ((jesd_crux_clk_csr_rx_decomp_mantissa_ctl_reg_t*) JESD_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL31_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_EXP_CTL0_REG(_BASE) ((jesd_crux_clk_csr_rx_decomp_exp_ctl_reg_t*) JESD_CRUX_CLK_CSR_RX_DECOMP_EXP_CTL0_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_EXP_CTL1_REG(_BASE) ((jesd_crux_clk_csr_rx_decomp_exp_ctl_reg_t*) JESD_CRUX_CLK_CSR_RX_DECOMP_EXP_CTL1_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_EXP_CTL2_REG(_BASE) ((jesd_crux_clk_csr_rx_decomp_exp_ctl_reg_t*) JESD_CRUX_CLK_CSR_RX_DECOMP_EXP_CTL2_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_EXP_CTL3_REG(_BASE) ((jesd_crux_clk_csr_rx_decomp_exp_ctl_reg_t*) JESD_CRUX_CLK_CSR_RX_DECOMP_EXP_CTL3_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_EXP_CTL4_REG(_BASE) ((jesd_crux_clk_csr_rx_decomp_exp_ctl_reg_t*) JESD_CRUX_CLK_CSR_RX_DECOMP_EXP_CTL4_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_EXP_CTL5_REG(_BASE) ((jesd_crux_clk_csr_rx_decomp_exp_ctl_reg_t*) JESD_CRUX_CLK_CSR_RX_DECOMP_EXP_CTL5_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_EXP_CTL6_REG(_BASE) ((jesd_crux_clk_csr_rx_decomp_exp_ctl_reg_t*) JESD_CRUX_CLK_CSR_RX_DECOMP_EXP_CTL6_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_DECOMP_EXP_CTL7_REG(_BASE) ((jesd_crux_clk_csr_rx_decomp_exp_ctl_reg_t*) JESD_CRUX_CLK_CSR_RX_DECOMP_EXP_CTL7_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_VMLGA_REG(_BASE) ((jesd_crux_clk_csr_tx_vmlga_reg_t*) JESD_CRUX_CLK_CSR_TX_VMLGA_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_VNSH_REG(_BASE) ((jesd_crux_clk_csr_tx_vnsh_reg_t*) JESD_CRUX_CLK_CSR_TX_VNSH_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_TOP_REG(_BASE) ((jesd_crux_clk_csr_tx_top_reg_t*) JESD_CRUX_CLK_CSR_TX_TOP_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_NUM_VALID_STR_REG(_BASE) ((jesd_crux_clk_csr_tx_num_valid_str_reg_t*) JESD_CRUX_CLK_CSR_TX_NUM_VALID_STR_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_TSB_TRIG_EN_REG(_BASE) ((jesd_crux_clk_csr_tx_tsb_trig_en_reg_t*) JESD_CRUX_CLK_CSR_TX_TSB_TRIG_EN_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_TSB_BUF_FILL_STAT_REG(_BASE) ((jesd_crux_clk_csr_tx_tsb_buf_fill_stat_reg_t*) JESD_CRUX_CLK_CSR_TX_TSB_BUF_FILL_STAT_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_TSB_BUF_OVERFLOW_STAT_REG(_BASE) ((jesd_crux_clk_csr_tx_tsb_buf_overflow_stat_reg_t*) JESD_CRUX_CLK_CSR_TX_TSB_BUF_OVERFLOW_STAT_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WR_REG(_BASE) ((jesd_crux_clk_csr_tx_mem_apb_wr_reg_t*) JESD_CRUX_CLK_CSR_TX_MEM_APB_WR_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_APB_MEM_WADDR_REG(_BASE) ((jesd_crux_clk_csr_tx_apb_mem_waddr_reg_t*) JESD_CRUX_CLK_CSR_TX_APB_MEM_WADDR_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_TSB_FULL_WATER_MARK_REG(_BASE) ((jesd_crux_clk_csr_tx_tsb_full_water_mark_reg_t*) JESD_CRUX_CLK_CSR_TX_TSB_FULL_WATER_MARK_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_TSB_FULL_STAT_REG(_BASE) ((jesd_crux_clk_csr_tx_tsb_full_stat_reg_t*) JESD_CRUX_CLK_CSR_TX_TSB_FULL_STAT_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_TSB_CFG_REG(_BASE) ((jesd_crux_clk_csr_tx_tsb_cfg_reg_t*) JESD_CRUX_CLK_CSR_TX_TSB_CFG_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_ECC_GEN_DIS_REG(_BASE) ((jesd_crux_clk_csr_tx_ecc_gen_dis_reg_t*) JESD_CRUX_CLK_CSR_TX_ECC_GEN_DIS_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_TSB_CAP_MODE_CLR_WRPTR_REG(_BASE) ((jesd_crux_clk_csr_tx_tsb_cap_mode_clr_wrptr_reg_t*) JESD_CRUX_CLK_CSR_TX_TSB_CAP_MODE_CLR_WRPTR_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL0_REG(_BASE) ((jesd_crux_clk_csr_tx_bitformat_ctl_reg_t*) JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL0_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL1_REG(_BASE) ((jesd_crux_clk_csr_tx_bitformat_ctl_reg_t*) JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL1_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL2_REG(_BASE) ((jesd_crux_clk_csr_tx_bitformat_ctl_reg_t*) JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL2_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL3_REG(_BASE) ((jesd_crux_clk_csr_tx_bitformat_ctl_reg_t*) JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL3_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL4_REG(_BASE) ((jesd_crux_clk_csr_tx_bitformat_ctl_reg_t*) JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL4_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL5_REG(_BASE) ((jesd_crux_clk_csr_tx_bitformat_ctl_reg_t*) JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL5_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL6_REG(_BASE) ((jesd_crux_clk_csr_tx_bitformat_ctl_reg_t*) JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL6_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL7_REG(_BASE) ((jesd_crux_clk_csr_tx_bitformat_ctl_reg_t*) JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL7_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL8_REG(_BASE) ((jesd_crux_clk_csr_tx_bitformat_ctl_reg_t*) JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL8_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL9_REG(_BASE) ((jesd_crux_clk_csr_tx_bitformat_ctl_reg_t*) JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL9_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL10_REG(_BASE) ((jesd_crux_clk_csr_tx_bitformat_ctl_reg_t*) JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL10_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL11_REG(_BASE) ((jesd_crux_clk_csr_tx_bitformat_ctl_reg_t*) JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL11_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL12_REG(_BASE) ((jesd_crux_clk_csr_tx_bitformat_ctl_reg_t*) JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL12_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL13_REG(_BASE) ((jesd_crux_clk_csr_tx_bitformat_ctl_reg_t*) JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL13_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL14_REG(_BASE) ((jesd_crux_clk_csr_tx_bitformat_ctl_reg_t*) JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL14_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL15_REG(_BASE) ((jesd_crux_clk_csr_tx_bitformat_ctl_reg_t*) JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL15_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL16_REG(_BASE) ((jesd_crux_clk_csr_tx_bitformat_ctl_reg_t*) JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL16_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL17_REG(_BASE) ((jesd_crux_clk_csr_tx_bitformat_ctl_reg_t*) JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL17_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL18_REG(_BASE) ((jesd_crux_clk_csr_tx_bitformat_ctl_reg_t*) JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL18_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL19_REG(_BASE) ((jesd_crux_clk_csr_tx_bitformat_ctl_reg_t*) JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL19_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL20_REG(_BASE) ((jesd_crux_clk_csr_tx_bitformat_ctl_reg_t*) JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL20_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL21_REG(_BASE) ((jesd_crux_clk_csr_tx_bitformat_ctl_reg_t*) JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL21_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL22_REG(_BASE) ((jesd_crux_clk_csr_tx_bitformat_ctl_reg_t*) JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL22_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL23_REG(_BASE) ((jesd_crux_clk_csr_tx_bitformat_ctl_reg_t*) JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL23_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL24_REG(_BASE) ((jesd_crux_clk_csr_tx_bitformat_ctl_reg_t*) JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL24_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL25_REG(_BASE) ((jesd_crux_clk_csr_tx_bitformat_ctl_reg_t*) JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL25_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL26_REG(_BASE) ((jesd_crux_clk_csr_tx_bitformat_ctl_reg_t*) JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL26_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL27_REG(_BASE) ((jesd_crux_clk_csr_tx_bitformat_ctl_reg_t*) JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL27_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL28_REG(_BASE) ((jesd_crux_clk_csr_tx_bitformat_ctl_reg_t*) JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL28_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL29_REG(_BASE) ((jesd_crux_clk_csr_tx_bitformat_ctl_reg_t*) JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL29_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL30_REG(_BASE) ((jesd_crux_clk_csr_tx_bitformat_ctl_reg_t*) JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL30_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL31_REG(_BASE) ((jesd_crux_clk_csr_tx_bitformat_ctl_reg_t*) JESD_CRUX_CLK_CSR_TX_BITFORMAT_CTL31_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR0_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_mem_addr_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR0_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR1_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_mem_addr_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR1_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR2_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_mem_addr_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR2_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR3_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_mem_addr_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR3_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR4_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_mem_addr_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR4_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR5_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_mem_addr_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR5_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR6_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_mem_addr_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR6_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR7_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_mem_addr_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR7_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR8_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_mem_addr_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR8_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR9_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_mem_addr_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR9_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR10_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_mem_addr_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR10_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR11_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_mem_addr_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR11_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR12_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_mem_addr_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR12_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR13_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_mem_addr_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR13_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR14_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_mem_addr_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR14_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR15_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_mem_addr_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_MEM_ADDR15_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE0_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_mem_size_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE0_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE1_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_mem_size_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE1_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE2_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_mem_size_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE2_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE3_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_mem_size_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE3_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE4_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_mem_size_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE4_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE5_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_mem_size_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE5_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE6_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_mem_size_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE6_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE7_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_mem_size_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE7_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE8_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_mem_size_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE8_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE9_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_mem_size_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE9_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE10_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_mem_size_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE10_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE11_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_mem_size_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE11_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE12_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_mem_size_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE12_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE13_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_mem_size_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE13_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE14_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_mem_size_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE14_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE15_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_mem_size_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_MEM_SIZE15_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR0_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_mem_wptr_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR0_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR1_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_mem_wptr_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR1_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR2_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_mem_wptr_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR2_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR3_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_mem_wptr_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR3_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR4_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_mem_wptr_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR4_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR5_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_mem_wptr_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR5_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR6_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_mem_wptr_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR6_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR7_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_mem_wptr_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR7_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR8_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_mem_wptr_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR8_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR9_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_mem_wptr_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR9_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR10_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_mem_wptr_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR10_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR11_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_mem_wptr_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR11_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR12_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_mem_wptr_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR12_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR13_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_mem_wptr_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR13_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR14_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_mem_wptr_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR14_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR15_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_mem_wptr_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_MEM_WPTR15_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA0_REG(_BASE) ((jesd_crux_clk_csr_tx_mem_apb_wdata_reg_t*) JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA0_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA1_REG(_BASE) ((jesd_crux_clk_csr_tx_mem_apb_wdata_reg_t*) JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA1_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA2_REG(_BASE) ((jesd_crux_clk_csr_tx_mem_apb_wdata_reg_t*) JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA2_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA3_REG(_BASE) ((jesd_crux_clk_csr_tx_mem_apb_wdata_reg_t*) JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA3_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA4_REG(_BASE) ((jesd_crux_clk_csr_tx_mem_apb_wdata_reg_t*) JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA4_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA5_REG(_BASE) ((jesd_crux_clk_csr_tx_mem_apb_wdata_reg_t*) JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA5_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA6_REG(_BASE) ((jesd_crux_clk_csr_tx_mem_apb_wdata_reg_t*) JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA6_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA7_REG(_BASE) ((jesd_crux_clk_csr_tx_mem_apb_wdata_reg_t*) JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA7_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA8_REG(_BASE) ((jesd_crux_clk_csr_tx_mem_apb_wdata_reg_t*) JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA8_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA9_REG(_BASE) ((jesd_crux_clk_csr_tx_mem_apb_wdata_reg_t*) JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA9_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA10_REG(_BASE) ((jesd_crux_clk_csr_tx_mem_apb_wdata_reg_t*) JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA10_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA11_REG(_BASE) ((jesd_crux_clk_csr_tx_mem_apb_wdata_reg_t*) JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA11_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA12_REG(_BASE) ((jesd_crux_clk_csr_tx_mem_apb_wdata_reg_t*) JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA12_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA13_REG(_BASE) ((jesd_crux_clk_csr_tx_mem_apb_wdata_reg_t*) JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA13_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA14_REG(_BASE) ((jesd_crux_clk_csr_tx_mem_apb_wdata_reg_t*) JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA14_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA15_REG(_BASE) ((jesd_crux_clk_csr_tx_mem_apb_wdata_reg_t*) JESD_CRUX_CLK_CSR_TX_MEM_APB_WDATA15_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL0_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_tsb_rd_trig_lvl_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL0_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL1_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_tsb_rd_trig_lvl_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL1_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL2_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_tsb_rd_trig_lvl_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL2_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL3_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_tsb_rd_trig_lvl_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL3_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL4_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_tsb_rd_trig_lvl_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL4_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL5_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_tsb_rd_trig_lvl_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL5_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL6_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_tsb_rd_trig_lvl_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL6_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL7_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_tsb_rd_trig_lvl_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL7_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL8_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_tsb_rd_trig_lvl_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL8_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL9_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_tsb_rd_trig_lvl_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL9_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL10_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_tsb_rd_trig_lvl_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL10_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL11_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_tsb_rd_trig_lvl_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL11_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL12_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_tsb_rd_trig_lvl_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL12_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL13_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_tsb_rd_trig_lvl_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL13_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL14_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_tsb_rd_trig_lvl_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL14_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL15_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_tsb_rd_trig_lvl_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_TSB_RD_TRIG_LVL15_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_NSIP_HALT_REG(_BASE) ((jesd_crux_clk_csr_nsip_halt_reg_t*) JESD_CRUX_CLK_CSR_NSIP_HALT_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_LPBK_CTL_REG(_BASE) ((jesd_crux_clk_csr_lpbk_ctl_reg_t*) JESD_CRUX_CLK_CSR_LPBK_CTL_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_NSIP_HALT_DONE_REG(_BASE) ((jesd_crux_clk_csr_nsip_halt_done_reg_t*) JESD_CRUX_CLK_CSR_NSIP_HALT_DONE_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MEA_EN_REG(_BASE) ((jesd_crux_clk_csr_rx_crux_datarate_mea_en_reg_t*) JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MEA_EN_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MEA_WNDW_REG(_BASE) ((jesd_crux_clk_csr_rx_crux_datarate_mea_wndw_reg_t*) JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MEA_WNDW_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MIN_ERR_THRSH_REG(_BASE) ((jesd_crux_clk_csr_rx_crux_datarate_min_err_thrsh_reg_t*) JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MIN_ERR_THRSH_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MAX_ERR_THRSH_REG(_BASE) ((jesd_crux_clk_csr_rx_crux_datarate_max_err_thrsh_reg_t*) JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MAX_ERR_THRSH_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MEA_TIMER_REG(_BASE) ((jesd_crux_clk_csr_rx_crux_datarate_mea_timer_reg_t*) JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MEA_TIMER_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_CNT_REG(_BASE) ((jesd_crux_clk_csr_rx_crux_datarate_cnt_reg_t*) JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_CNT_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MIN_CNT_REG(_BASE) ((jesd_crux_clk_csr_rx_crux_datarate_min_cnt_reg_t*) JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MIN_CNT_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MAX_CNT_REG(_BASE) ((jesd_crux_clk_csr_rx_crux_datarate_max_cnt_reg_t*) JESD_CRUX_CLK_CSR_RX_CRUX_DATARATE_MAX_CNT_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MEA_EN_REG(_BASE) ((jesd_crux_clk_csr_rx_crux_stall_mea_en_reg_t*) JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MEA_EN_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MEA_WNDW_REG(_BASE) ((jesd_crux_clk_csr_rx_crux_stall_mea_wndw_reg_t*) JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MEA_WNDW_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MAX_ERR_THRSH_REG(_BASE) ((jesd_crux_clk_csr_rx_crux_stall_max_err_thrsh_reg_t*) JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MAX_ERR_THRSH_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_PEAK_MAX_ERR_THRSH_REG(_BASE) ((jesd_crux_clk_csr_rx_crux_stall_peak_max_err_thrsh_reg_t*) JESD_CRUX_CLK_CSR_RX_CRUX_STALL_PEAK_MAX_ERR_THRSH_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MEA_TIMER_REG(_BASE) ((jesd_crux_clk_csr_rx_crux_stall_mea_timer_reg_t*) JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MEA_TIMER_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_CNT_REG(_BASE) ((jesd_crux_clk_csr_rx_crux_stall_cnt_reg_t*) JESD_CRUX_CLK_CSR_RX_CRUX_STALL_CNT_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MAX_CNT_REG(_BASE) ((jesd_crux_clk_csr_rx_crux_stall_max_cnt_reg_t*) JESD_CRUX_CLK_CSR_RX_CRUX_STALL_MAX_CNT_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_CRUX_PEAK_STALL_CNT_REG(_BASE) ((jesd_crux_clk_csr_rx_crux_peak_stall_cnt_reg_t*) JESD_CRUX_CLK_CSR_RX_CRUX_PEAK_STALL_CNT_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_CRUX_PEAK_STALL_MAX_CNT_REG(_BASE) ((jesd_crux_clk_csr_rx_crux_peak_stall_max_cnt_reg_t*) JESD_CRUX_CLK_CSR_RX_CRUX_PEAK_STALL_MAX_CNT_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_STRM_RCV_FLIT_CNT_REG(_BASE) ((jesd_crux_clk_csr_rx_strm_rcv_flit_cnt_reg_t*) JESD_CRUX_CLK_CSR_RX_STRM_RCV_FLIT_CNT_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MEA_EN_REG(_BASE) ((jesd_crux_clk_csr_tx_crux_datarate_mea_en_reg_t*) JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MEA_EN_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MEA_WNDW_REG(_BASE) ((jesd_crux_clk_csr_tx_crux_datarate_mea_wndw_reg_t*) JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MEA_WNDW_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MIN_ERR_THRSH_REG(_BASE) ((jesd_crux_clk_csr_tx_crux_datarate_min_err_thrsh_reg_t*) JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MIN_ERR_THRSH_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MAX_ERR_THRSH_REG(_BASE) ((jesd_crux_clk_csr_tx_crux_datarate_max_err_thrsh_reg_t*) JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MAX_ERR_THRSH_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MEA_TIMER_REG(_BASE) ((jesd_crux_clk_csr_tx_crux_datarate_mea_timer_reg_t*) JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MEA_TIMER_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_CNT_REG(_BASE) ((jesd_crux_clk_csr_tx_crux_datarate_cnt_reg_t*) JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_CNT_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MIN_CNT_REG(_BASE) ((jesd_crux_clk_csr_tx_crux_datarate_min_cnt_reg_t*) JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MIN_CNT_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MAX_CNT_REG(_BASE) ((jesd_crux_clk_csr_tx_crux_datarate_max_cnt_reg_t*) JESD_CRUX_CLK_CSR_TX_CRUX_DATARATE_MAX_CNT_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_EN_REG(_BASE) ((jesd_crux_clk_csr_crux_clk_sig_mon_en_reg_t*) JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_EN_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_CAP_EN_REG(_BASE) ((jesd_crux_clk_csr_crux_clk_sig_mon_cap_en_reg_t*) JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_CAP_EN_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_STS_CLR_REG(_BASE) ((jesd_crux_clk_csr_crux_clk_sig_mon_sts_clr_reg_t*) JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_STS_CLR_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_CFG_REG(_BASE) ((jesd_crux_clk_csr_crux_clk_sig_mon_cfg_reg_t*) JESD_CRUX_CLK_CSR_CRUX_CLK_SIG_MON_CFG_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_SIG_SEL_REG(_BASE) ((jesd_crux_clk_csr_crux_clk_dbg_sig_sel_reg_t*) JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_SIG_SEL_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_VLD_REG(_BASE) ((jesd_crux_clk_csr_crux_clk_dbg_cap_vld_reg_t*) JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_VLD_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_ERR_STS_REG(_BASE) ((jesd_crux_clk_csr_crux_clk_cmn_err_sts_reg_t*) JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_ERR_STS_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_INTR_HIGH_EN_REG(_BASE) ((jesd_crux_clk_csr_crux_clk_cmn_intr_high_en_reg_t*) JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_INTR_HIGH_EN_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_INTR_LOW_EN_REG(_BASE) ((jesd_crux_clk_csr_crux_clk_cmn_intr_low_en_reg_t*) JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_INTR_LOW_EN_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_ALM_EN_REG(_BASE) ((jesd_crux_clk_csr_crux_clk_cmn_alm_en_reg_t*) JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_ALM_EN_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_ERR_CLR_REG(_BASE) ((jesd_crux_clk_csr_crux_clk_cmn_err_clr_reg_t*) JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_ERR_CLR_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_ERR_FRC_REG(_BASE) ((jesd_crux_clk_csr_crux_clk_cmn_err_frc_reg_t*) JESD_CRUX_CLK_CSR_CRUX_CLK_CMN_ERR_FRC_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_ERR_STS_REG(_BASE) ((jesd_crux_clk_csr_crux_clk_intr_only_err_sts_reg_t*) JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_ERR_STS_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_INTR_HIGH_EN_REG(_BASE) ((jesd_crux_clk_csr_crux_clk_intr_only_intr_high_en_reg_t*) JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_INTR_HIGH_EN_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_INTR_LOW_EN_REG(_BASE) ((jesd_crux_clk_csr_crux_clk_intr_only_intr_low_en_reg_t*) JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_INTR_LOW_EN_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_ERR_CLR_REG(_BASE) ((jesd_crux_clk_csr_crux_clk_intr_only_err_clr_reg_t*) JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_ERR_CLR_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_ERR_FRC_REG(_BASE) ((jesd_crux_clk_csr_crux_clk_intr_only_err_frc_reg_t*) JESD_CRUX_CLK_CSR_CRUX_CLK_INTR_ONLY_ERR_FRC_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_NSIP_ALRM_EN_REG(_BASE) ((jesd_crux_clk_csr_crux_clk_nsip_alrm_en_reg_t*) JESD_CRUX_CLK_CSR_CRUX_CLK_NSIP_ALRM_EN_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_RSB_ECC_ERR_CFG_REG(_BASE) ((jesd_crux_clk_csr_crux_clk_rsb_ecc_err_cfg_reg_t*) JESD_CRUX_CLK_CSR_CRUX_CLK_RSB_ECC_ERR_CFG_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_RSB_ECC_ERR_FRC_REG(_BASE) ((jesd_crux_clk_csr_crux_clk_rsb_ecc_err_frc_reg_t*) JESD_CRUX_CLK_CSR_CRUX_CLK_RSB_ECC_ERR_FRC_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_EN_REG(_BASE) ((jesd_crux_clk_csr_crux_clk_wndw_err_cnt_en_reg_t*) JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_EN_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_CLR_REG(_BASE) ((jesd_crux_clk_csr_crux_clk_wndw_err_cnt_clr_reg_t*) JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_CLR_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_IDX_REG(_BASE) ((jesd_crux_clk_csr_crux_clk_wndw_err_cnt_idx_reg_t*) JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_IDX_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_RDATA_REG(_BASE) ((jesd_crux_clk_csr_crux_clk_wndw_err_cnt_rdata_reg_t*) JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_CNT_RDATA_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT0_REG(_BASE) ((jesd_crux_clk_csr_rx_strm_sent_flit_cnt_reg_t*) JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT0_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT1_REG(_BASE) ((jesd_crux_clk_csr_rx_strm_sent_flit_cnt_reg_t*) JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT1_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT2_REG(_BASE) ((jesd_crux_clk_csr_rx_strm_sent_flit_cnt_reg_t*) JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT2_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT3_REG(_BASE) ((jesd_crux_clk_csr_rx_strm_sent_flit_cnt_reg_t*) JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT3_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT4_REG(_BASE) ((jesd_crux_clk_csr_rx_strm_sent_flit_cnt_reg_t*) JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT4_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT5_REG(_BASE) ((jesd_crux_clk_csr_rx_strm_sent_flit_cnt_reg_t*) JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT5_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT6_REG(_BASE) ((jesd_crux_clk_csr_rx_strm_sent_flit_cnt_reg_t*) JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT6_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT7_REG(_BASE) ((jesd_crux_clk_csr_rx_strm_sent_flit_cnt_reg_t*) JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT7_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT8_REG(_BASE) ((jesd_crux_clk_csr_rx_strm_sent_flit_cnt_reg_t*) JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT8_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT9_REG(_BASE) ((jesd_crux_clk_csr_rx_strm_sent_flit_cnt_reg_t*) JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT9_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT10_REG(_BASE) ((jesd_crux_clk_csr_rx_strm_sent_flit_cnt_reg_t*) JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT10_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT11_REG(_BASE) ((jesd_crux_clk_csr_rx_strm_sent_flit_cnt_reg_t*) JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT11_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT12_REG(_BASE) ((jesd_crux_clk_csr_rx_strm_sent_flit_cnt_reg_t*) JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT12_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT13_REG(_BASE) ((jesd_crux_clk_csr_rx_strm_sent_flit_cnt_reg_t*) JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT13_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT14_REG(_BASE) ((jesd_crux_clk_csr_rx_strm_sent_flit_cnt_reg_t*) JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT14_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT15_REG(_BASE) ((jesd_crux_clk_csr_rx_strm_sent_flit_cnt_reg_t*) JESD_CRUX_CLK_CSR_RX_STRM_SENT_FLIT_CNT15_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT0_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_rcv_flit_cnt_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT0_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT1_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_rcv_flit_cnt_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT1_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT2_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_rcv_flit_cnt_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT2_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT3_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_rcv_flit_cnt_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT3_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT4_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_rcv_flit_cnt_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT4_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT5_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_rcv_flit_cnt_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT5_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT6_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_rcv_flit_cnt_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT6_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT7_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_rcv_flit_cnt_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT7_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT8_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_rcv_flit_cnt_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT8_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT9_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_rcv_flit_cnt_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT9_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT10_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_rcv_flit_cnt_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT10_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT11_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_rcv_flit_cnt_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT11_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT12_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_rcv_flit_cnt_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT12_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT13_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_rcv_flit_cnt_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT13_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT14_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_rcv_flit_cnt_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT14_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT15_REG(_BASE) ((jesd_crux_clk_csr_tx_strm_rcv_flit_cnt_reg_t*) JESD_CRUX_CLK_CSR_TX_STRM_RCV_FLIT_CNT15_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_THRSH0_REG(_BASE) ((jesd_crux_clk_csr_crux_clk_wndw_err_thrsh_reg_t*) JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_THRSH0_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_THRSH1_REG(_BASE) ((jesd_crux_clk_csr_crux_clk_wndw_err_thrsh_reg_t*) JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_THRSH1_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_WNDW_NUM0_REG(_BASE) ((jesd_crux_clk_csr_crux_clk_wndw_err_wndw_num_reg_t*) JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_WNDW_NUM0_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_WNDW_NUM1_REG(_BASE) ((jesd_crux_clk_csr_crux_clk_wndw_err_wndw_num_reg_t*) JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_WNDW_NUM1_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_WNDW_TIMER0_REG(_BASE) ((jesd_crux_clk_csr_crux_clk_wndw_err_wndw_timer_reg_t*) JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_WNDW_TIMER0_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_WNDW_TIMER1_REG(_BASE) ((jesd_crux_clk_csr_crux_clk_wndw_err_wndw_timer_reg_t*) JESD_CRUX_CLK_CSR_CRUX_CLK_WNDW_ERR_WNDW_TIMER1_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG00_REG(_BASE) ((jesd_crux_clk_csr_crux_clk_dbg_cap_reg0_reg_t*) JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG00_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG01_REG(_BASE) ((jesd_crux_clk_csr_crux_clk_dbg_cap_reg0_reg_t*) JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG01_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG02_REG(_BASE) ((jesd_crux_clk_csr_crux_clk_dbg_cap_reg0_reg_t*) JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG02_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG03_REG(_BASE) ((jesd_crux_clk_csr_crux_clk_dbg_cap_reg0_reg_t*) JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG03_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG10_REG(_BASE) ((jesd_crux_clk_csr_crux_clk_dbg_cap_reg1_reg_t*) JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG10_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG11_REG(_BASE) ((jesd_crux_clk_csr_crux_clk_dbg_cap_reg1_reg_t*) JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG11_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG12_REG(_BASE) ((jesd_crux_clk_csr_crux_clk_dbg_cap_reg1_reg_t*) JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG12_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG13_REG(_BASE) ((jesd_crux_clk_csr_crux_clk_dbg_cap_reg1_reg_t*) JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG13_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG20_REG(_BASE) ((jesd_crux_clk_csr_crux_clk_dbg_cap_reg2_reg_t*) JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG20_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG21_REG(_BASE) ((jesd_crux_clk_csr_crux_clk_dbg_cap_reg2_reg_t*) JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG21_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG22_REG(_BASE) ((jesd_crux_clk_csr_crux_clk_dbg_cap_reg2_reg_t*) JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG22_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG23_REG(_BASE) ((jesd_crux_clk_csr_crux_clk_dbg_cap_reg2_reg_t*) JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG23_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG30_REG(_BASE) ((jesd_crux_clk_csr_crux_clk_dbg_cap_reg3_reg_t*) JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG30_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG31_REG(_BASE) ((jesd_crux_clk_csr_crux_clk_dbg_cap_reg3_reg_t*) JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG31_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG32_REG(_BASE) ((jesd_crux_clk_csr_crux_clk_dbg_cap_reg3_reg_t*) JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG32_ADR(_BASE))
#define JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG33_REG(_BASE) ((jesd_crux_clk_csr_crux_clk_dbg_cap_reg3_reg_t*) JESD_CRUX_CLK_CSR_CRUX_CLK_DBG_CAP_REG33_ADR(_BASE))

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    jesd_crux_clk_csr_scratch_reg_t SCRATCH; /*< Address offset = 0x0 */
    jesd_crux_clk_csr_apb_brdg_stat_reg_t APB_BRDG_STAT; /*< Address offset = 0x4 */
    const uint8_t        reservedArea0 [8];   /*< Address offset = 0x8 */
    jesd_crux_clk_csr_rx_strm_cfg_reg_t RX_STRM_CFG; /*< Address offset = 0x10 */
    jesd_crux_clk_csr_rx_mem_strm_cfg_reg_t RX_MEM_STRM_CFG; /*< Address offset = 0x14 */
    jesd_crux_clk_csr_rx_decomp_top_ctl_reg_t RX_DECOMP_TOP_CTL; /*< Address offset = 0x18 */
    jesd_crux_clk_csr_rx_decomp_vnsh_ctl_reg_t RX_DECOMP_VNSH_CTL; /*< Address offset = 0x1c */
    jesd_crux_clk_csr_rsb_data_src_cfg_reg_t RSB_DATA_SRC_CFG; /*< Address offset = 0x20 */
    jesd_crux_clk_csr_rsb_data_src_timer_reg_t RSB_DATA_SRC_TIMER; /*< Address offset = 0x24 */
    jesd_crux_clk_csr_rsb_data_src_start_reg_t RSB_DATA_SRC_START; /*< Address offset = 0x28 */
    jesd_crux_clk_csr_rsb_fill_lvl_clr_reg_t RSB_FILL_LVL_CLR; /*< Address offset = 0x2c */
    jesd_crux_clk_csr_rsb_data_cap_frz_en_reg_t RSB_DATA_CAP_FRZ_EN; /*< Address offset = 0x30 */
    jesd_crux_clk_csr_rsb_ovrflw_sticky_sts_reg_t RSB_OVRFLW_STICKY_STS; /*< Address offset = 0x34 */
    jesd_crux_clk_csr_rsb_underflw_sticky_sts_reg_t RSB_UNDERFLW_STICKY_STS; /*< Address offset = 0x38 */
    const uint8_t        reservedArea1 [4];   /*< Address offset = 0x3c */
    jesd_crux_clk_csr_rsb_indir_addr_reg_t RSB_INDIR_ADDR; /*< Address offset = 0x40 */
    jesd_crux_clk_csr_rsb_wr_rd_ctl_reg_t RSB_WR_RD_CTL; /*< Address offset = 0x44 */
    const uint8_t        reservedArea2 [184]; /*< Address offset = 0x48 */
    jesd_crux_clk_csr_rsb_wr_data_reg_t RSB_WR_DATA[16]; /*< Address offset = 0x100 */
    jesd_crux_clk_csr_rsb_rd_data_reg_t RSB_RD_DATA[16]; /*< Address offset = 0x140 */
    jesd_crux_clk_csr_rx_wr_mem_tbl_reg_t RX_WR_MEM_TBL[16]; /*< Address offset = 0x180 */
    jesd_crux_clk_csr_rx_rd_mem_tbl_reg_t RX_RD_MEM_TBL[16]; /*< Address offset = 0x1c0 */
    jesd_crux_clk_csr_rx_wr_ptr_tbl_reg_t RX_WR_PTR_TBL[16]; /*< Address offset = 0x200 */
    jesd_crux_clk_csr_rx_rd_ptr_tbl_reg_t RX_RD_PTR_TBL[16]; /*< Address offset = 0x240 */
    jesd_crux_clk_csr_rx_strm_mem_sts_reg_t RX_STRM_MEM_STS[16]; /*< Address offset = 0x280 */
    const uint8_t        reservedArea3 [64];  /*< Address offset = 0x2c0 */
    jesd_crux_clk_csr_rx_decomp_mantissa_ctl_reg_t RX_DECOMP_MANTISSA_CTL[32]; /*< Address offset = 0x300 */
    jesd_crux_clk_csr_rx_decomp_exp_ctl_reg_t RX_DECOMP_EXP_CTL[8]; /*< Address offset = 0x380 */
    const uint8_t        reservedArea4 [3168]; /*< Address offset = 0x3a0 */
    jesd_crux_clk_csr_tx_vmlga_reg_t TX_VMLGA; /*< Address offset = 0x1000 */
    jesd_crux_clk_csr_tx_vnsh_reg_t TX_VNSH; /*< Address offset = 0x1004 */
    jesd_crux_clk_csr_tx_top_reg_t TX_TOP; /*< Address offset = 0x1008 */
    jesd_crux_clk_csr_tx_num_valid_str_reg_t TX_NUM_VALID_STR; /*< Address offset = 0x100c */
    jesd_crux_clk_csr_tx_tsb_trig_en_reg_t TX_TSB_TRIG_EN; /*< Address offset = 0x1010 */
    jesd_crux_clk_csr_tx_tsb_buf_fill_stat_reg_t TX_TSB_BUF_FILL_STAT; /*< Address offset = 0x1014 */
    jesd_crux_clk_csr_tx_tsb_buf_overflow_stat_reg_t TX_TSB_BUF_OVERFLOW_STAT; /*< Address offset = 0x1018 */
    const uint8_t        reservedArea5 [4];   /*< Address offset = 0x101c */
    jesd_crux_clk_csr_tx_mem_apb_wr_reg_t TX_MEM_APB_WR; /*< Address offset = 0x1020 */
    jesd_crux_clk_csr_tx_apb_mem_waddr_reg_t TX_APB_MEM_WADDR; /*< Address offset = 0x1024 */
    const uint8_t        reservedArea6 [8];   /*< Address offset = 0x1028 */
    jesd_crux_clk_csr_tx_tsb_full_water_mark_reg_t TX_TSB_FULL_WATER_MARK; /*< Address offset = 0x1030 */
    jesd_crux_clk_csr_tx_tsb_full_stat_reg_t TX_TSB_FULL_STAT; /*< Address offset = 0x1034 */
    jesd_crux_clk_csr_tx_tsb_cfg_reg_t TX_TSB_CFG; /*< Address offset = 0x1038 */
    jesd_crux_clk_csr_tx_ecc_gen_dis_reg_t TX_ECC_GEN_DIS; /*< Address offset = 0x103c */
    jesd_crux_clk_csr_tx_tsb_cap_mode_clr_wrptr_reg_t TX_TSB_CAP_MODE_CLR_WRPTR; /*< Address offset = 0x1040 */
    const uint8_t        reservedArea7 [188]; /*< Address offset = 0x1044 */
    jesd_crux_clk_csr_tx_bitformat_ctl_reg_t TX_BITFORMAT_CTL[32]; /*< Address offset = 0x1100 */
    const uint8_t        reservedArea8 [128]; /*< Address offset = 0x1180 */
    jesd_crux_clk_csr_tx_strm_mem_addr_reg_t TX_STRM_MEM_ADDR[16]; /*< Address offset = 0x1200 */
    jesd_crux_clk_csr_tx_strm_mem_size_reg_t TX_STRM_MEM_SIZE[16]; /*< Address offset = 0x1240 */
    jesd_crux_clk_csr_tx_strm_mem_wptr_reg_t TX_STRM_MEM_WPTR[16]; /*< Address offset = 0x1280 */
    jesd_crux_clk_csr_tx_mem_apb_wdata_reg_t TX_MEM_APB_WDATA[16]; /*< Address offset = 0x12c0 */
    jesd_crux_clk_csr_tx_strm_tsb_rd_trig_lvl_reg_t TX_STRM_TSB_RD_TRIG_LVL[16]; /*< Address offset = 0x1300 */
    const uint8_t        reservedArea9 [3264]; /*< Address offset = 0x1340 */
    jesd_crux_clk_csr_nsip_halt_reg_t NSIP_HALT; /*< Address offset = 0x2000 */
    jesd_crux_clk_csr_lpbk_ctl_reg_t LPBK_CTL; /*< Address offset = 0x2004 */
    jesd_crux_clk_csr_nsip_halt_done_reg_t NSIP_HALT_DONE; /*< Address offset = 0x2008 */
    const uint8_t        reservedArea10 [4];  /*< Address offset = 0x200c */
    jesd_crux_clk_csr_rx_crux_datarate_mea_en_reg_t RX_CRUX_DATARATE_MEA_EN; /*< Address offset = 0x2010 */
    jesd_crux_clk_csr_rx_crux_datarate_mea_wndw_reg_t RX_CRUX_DATARATE_MEA_WNDW; /*< Address offset = 0x2014 */
    jesd_crux_clk_csr_rx_crux_datarate_min_err_thrsh_reg_t RX_CRUX_DATARATE_MIN_ERR_THRSH; /*< Address offset = 0x2018 */
    jesd_crux_clk_csr_rx_crux_datarate_max_err_thrsh_reg_t RX_CRUX_DATARATE_MAX_ERR_THRSH; /*< Address offset = 0x201c */
    jesd_crux_clk_csr_rx_crux_datarate_mea_timer_reg_t RX_CRUX_DATARATE_MEA_TIMER; /*< Address offset = 0x2020 */
    jesd_crux_clk_csr_rx_crux_datarate_cnt_reg_t RX_CRUX_DATARATE_CNT; /*< Address offset = 0x2024 */
    jesd_crux_clk_csr_rx_crux_datarate_min_cnt_reg_t RX_CRUX_DATARATE_MIN_CNT; /*< Address offset = 0x2028 */
    jesd_crux_clk_csr_rx_crux_datarate_max_cnt_reg_t RX_CRUX_DATARATE_MAX_CNT; /*< Address offset = 0x202c */
    jesd_crux_clk_csr_rx_crux_stall_mea_en_reg_t RX_CRUX_STALL_MEA_EN; /*< Address offset = 0x2030 */
    jesd_crux_clk_csr_rx_crux_stall_mea_wndw_reg_t RX_CRUX_STALL_MEA_WNDW; /*< Address offset = 0x2034 */
    jesd_crux_clk_csr_rx_crux_stall_max_err_thrsh_reg_t RX_CRUX_STALL_MAX_ERR_THRSH; /*< Address offset = 0x2038 */
    jesd_crux_clk_csr_rx_crux_stall_peak_max_err_thrsh_reg_t RX_CRUX_STALL_PEAK_MAX_ERR_THRSH; /*< Address offset = 0x203c */
    jesd_crux_clk_csr_rx_crux_stall_mea_timer_reg_t RX_CRUX_STALL_MEA_TIMER; /*< Address offset = 0x2040 */
    const uint8_t        reservedArea11 [12]; /*< Address offset = 0x2044 */
    jesd_crux_clk_csr_rx_crux_stall_cnt_reg_t RX_CRUX_STALL_CNT; /*< Address offset = 0x2050 */
    jesd_crux_clk_csr_rx_crux_stall_max_cnt_reg_t RX_CRUX_STALL_MAX_CNT; /*< Address offset = 0x2054 */
    jesd_crux_clk_csr_rx_crux_peak_stall_cnt_reg_t RX_CRUX_PEAK_STALL_CNT; /*< Address offset = 0x2058 */
    jesd_crux_clk_csr_rx_crux_peak_stall_max_cnt_reg_t RX_CRUX_PEAK_STALL_MAX_CNT; /*< Address offset = 0x205c */
    jesd_crux_clk_csr_rx_strm_rcv_flit_cnt_reg_t RX_STRM_RCV_FLIT_CNT; /*< Address offset = 0x2060 */
    const uint8_t        reservedArea12 [12]; /*< Address offset = 0x2064 */
    jesd_crux_clk_csr_tx_crux_datarate_mea_en_reg_t TX_CRUX_DATARATE_MEA_EN; /*< Address offset = 0x2070 */
    jesd_crux_clk_csr_tx_crux_datarate_mea_wndw_reg_t TX_CRUX_DATARATE_MEA_WNDW; /*< Address offset = 0x2074 */
    jesd_crux_clk_csr_tx_crux_datarate_min_err_thrsh_reg_t TX_CRUX_DATARATE_MIN_ERR_THRSH; /*< Address offset = 0x2078 */
    jesd_crux_clk_csr_tx_crux_datarate_max_err_thrsh_reg_t TX_CRUX_DATARATE_MAX_ERR_THRSH; /*< Address offset = 0x207c */
    jesd_crux_clk_csr_tx_crux_datarate_mea_timer_reg_t TX_CRUX_DATARATE_MEA_TIMER; /*< Address offset = 0x2080 */
    jesd_crux_clk_csr_tx_crux_datarate_cnt_reg_t TX_CRUX_DATARATE_CNT; /*< Address offset = 0x2084 */
    jesd_crux_clk_csr_tx_crux_datarate_min_cnt_reg_t TX_CRUX_DATARATE_MIN_CNT; /*< Address offset = 0x2088 */
    jesd_crux_clk_csr_tx_crux_datarate_max_cnt_reg_t TX_CRUX_DATARATE_MAX_CNT; /*< Address offset = 0x208c */
    jesd_crux_clk_csr_crux_clk_sig_mon_en_reg_t CRUX_CLK_SIG_MON_EN; /*< Address offset = 0x2090 */
    jesd_crux_clk_csr_crux_clk_sig_mon_cap_en_reg_t CRUX_CLK_SIG_MON_CAP_EN; /*< Address offset = 0x2094 */
    jesd_crux_clk_csr_crux_clk_sig_mon_sts_clr_reg_t CRUX_CLK_SIG_MON_STS_CLR; /*< Address offset = 0x2098 */
    jesd_crux_clk_csr_crux_clk_sig_mon_cfg_reg_t CRUX_CLK_SIG_MON_CFG; /*< Address offset = 0x209c */
    jesd_crux_clk_csr_crux_clk_dbg_sig_sel_reg_t CRUX_CLK_DBG_SIG_SEL; /*< Address offset = 0x20a0 */
    jesd_crux_clk_csr_crux_clk_dbg_cap_vld_reg_t CRUX_CLK_DBG_CAP_VLD; /*< Address offset = 0x20a4 */
    const uint8_t        reservedArea13 [8];  /*< Address offset = 0x20a8 */
    jesd_crux_clk_csr_crux_clk_cmn_err_sts_reg_t CRUX_CLK_CMN_ERR_STS; /*< Address offset = 0x20b0 */
    jesd_crux_clk_csr_crux_clk_cmn_intr_high_en_reg_t CRUX_CLK_CMN_INTR_HIGH_EN; /*< Address offset = 0x20b4 */
    jesd_crux_clk_csr_crux_clk_cmn_intr_low_en_reg_t CRUX_CLK_CMN_INTR_LOW_EN; /*< Address offset = 0x20b8 */
    jesd_crux_clk_csr_crux_clk_cmn_alm_en_reg_t CRUX_CLK_CMN_ALM_EN; /*< Address offset = 0x20bc */
    jesd_crux_clk_csr_crux_clk_cmn_err_clr_reg_t CRUX_CLK_CMN_ERR_CLR; /*< Address offset = 0x20c0 */
    jesd_crux_clk_csr_crux_clk_cmn_err_frc_reg_t CRUX_CLK_CMN_ERR_FRC; /*< Address offset = 0x20c4 */
    const uint8_t        reservedArea14 [8];  /*< Address offset = 0x20c8 */
    jesd_crux_clk_csr_crux_clk_intr_only_err_sts_reg_t CRUX_CLK_INTR_ONLY_ERR_STS; /*< Address offset = 0x20d0 */
    jesd_crux_clk_csr_crux_clk_intr_only_intr_high_en_reg_t CRUX_CLK_INTR_ONLY_INTR_HIGH_EN; /*< Address offset = 0x20d4 */
    jesd_crux_clk_csr_crux_clk_intr_only_intr_low_en_reg_t CRUX_CLK_INTR_ONLY_INTR_LOW_EN; /*< Address offset = 0x20d8 */
    jesd_crux_clk_csr_crux_clk_intr_only_err_clr_reg_t CRUX_CLK_INTR_ONLY_ERR_CLR; /*< Address offset = 0x20dc */
    jesd_crux_clk_csr_crux_clk_intr_only_err_frc_reg_t CRUX_CLK_INTR_ONLY_ERR_FRC; /*< Address offset = 0x20e0 */
    const uint8_t        reservedArea15 [12]; /*< Address offset = 0x20e4 */
    jesd_crux_clk_csr_crux_clk_nsip_alrm_en_reg_t CRUX_CLK_NSIP_ALRM_EN; /*< Address offset = 0x20f0 */
    jesd_crux_clk_csr_crux_clk_rsb_ecc_err_cfg_reg_t CRUX_CLK_RSB_ECC_ERR_CFG; /*< Address offset = 0x20f4 */
    jesd_crux_clk_csr_crux_clk_rsb_ecc_err_frc_reg_t CRUX_CLK_RSB_ECC_ERR_FRC; /*< Address offset = 0x20f8 */
    const uint8_t        reservedArea16 [4];  /*< Address offset = 0x20fc */
    jesd_crux_clk_csr_crux_clk_wndw_err_cnt_en_reg_t CRUX_CLK_WNDW_ERR_CNT_EN; /*< Address offset = 0x2100 */
    jesd_crux_clk_csr_crux_clk_wndw_err_cnt_clr_reg_t CRUX_CLK_WNDW_ERR_CNT_CLR; /*< Address offset = 0x2104 */
    jesd_crux_clk_csr_crux_clk_wndw_err_cnt_idx_reg_t CRUX_CLK_WNDW_ERR_CNT_IDX; /*< Address offset = 0x2108 */
    jesd_crux_clk_csr_crux_clk_wndw_err_cnt_rdata_reg_t CRUX_CLK_WNDW_ERR_CNT_RDATA; /*< Address offset = 0x210c */
    const uint8_t        reservedArea17 [240]; /*< Address offset = 0x2110 */
    jesd_crux_clk_csr_rx_strm_sent_flit_cnt_reg_t RX_STRM_SENT_FLIT_CNT[16]; /*< Address offset = 0x2200 */
    jesd_crux_clk_csr_tx_strm_rcv_flit_cnt_reg_t TX_STRM_RCV_FLIT_CNT[16]; /*< Address offset = 0x2240 */
    jesd_crux_clk_csr_crux_clk_wndw_err_thrsh_reg_t CRUX_CLK_WNDW_ERR_THRSH[2]; /*< Address offset = 0x2280 */
    const uint8_t        reservedArea18 [8];  /*< Address offset = 0x2288 */
    jesd_crux_clk_csr_crux_clk_wndw_err_wndw_num_reg_t CRUX_CLK_WNDW_ERR_WNDW_NUM[2]; /*< Address offset = 0x2290 */
    const uint8_t        reservedArea19 [8];  /*< Address offset = 0x2298 */
    jesd_crux_clk_csr_crux_clk_wndw_err_wndw_timer_reg_t CRUX_CLK_WNDW_ERR_WNDW_TIMER[2]; /*< Address offset = 0x22a0 */
    const uint8_t        reservedArea20 [88]; /*< Address offset = 0x22a8 */
    jesd_crux_clk_csr_crux_clk_dbg_cap_reg0_reg_t CRUX_CLK_DBG_CAP_REG0[4]; /*< Address offset = 0x2300 */
    jesd_crux_clk_csr_crux_clk_dbg_cap_reg1_reg_t CRUX_CLK_DBG_CAP_REG1[4]; /*< Address offset = 0x2310 */
    jesd_crux_clk_csr_crux_clk_dbg_cap_reg2_reg_t CRUX_CLK_DBG_CAP_REG2[4]; /*< Address offset = 0x2320 */
    jesd_crux_clk_csr_crux_clk_dbg_cap_reg3_reg_t CRUX_CLK_DBG_CAP_REG3[4]; /*< Address offset = 0x2330 */
} jesd_crux_clk_csr_t;     // size: 0x01a8

// AddressSpace struct pointer
//
#define DLNK_JESD0_CRUX_CLK_CSR  ((jesd_crux_clk_csr_t*) DLNK_JESD0_CRUX_CLK_CSR_BASE)
#define DLNK_JESD1_CRUX_CLK_CSR  ((jesd_crux_clk_csr_t*) DLNK_JESD1_CRUX_CLK_CSR_BASE)
#define DLNK_JESD2_CRUX_CLK_CSR  ((jesd_crux_clk_csr_t*) DLNK_JESD2_CRUX_CLK_CSR_BASE)
#define DLNK_JESD3_CRUX_CLK_CSR  ((jesd_crux_clk_csr_t*) DLNK_JESD3_CRUX_CLK_CSR_BASE)

// ******************************************* /Address Space

#endif      // _JESD_CRUX_CLK_CSR_H_

