#ifndef _HUB_DRF_APB_H_
#define _HUB_DRF_APB_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define HUB_DRF0_APB_BASE     ( 0x01b03000 )
#define HUB_DRF1_APB_BASE     ( 0x01b04000 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define HUB_DRF_APB_HUB_SCRATCH_OFFSET ( 0x00000000U )
#define HUB_DRF_APB_HUB_CLK_EN_OFFSET ( 0x00000004U )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define HUB_DRF_APB_HUB_SCRATCH_ADR(_BASE) (( ( _BASE ) + ( HUB_DRF_APB_HUB_SCRATCH_OFFSET ) ))
#define HUB_DRF_APB_HUB_CLK_EN_ADR(_BASE) (( ( _BASE ) + ( HUB_DRF_APB_HUB_CLK_EN_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief HUB_DRF_APB_REG_HUB_MAP_SCRATCH register description at address offset 0x0
  *
  * Register default value:        0x00000000
  * Register full path in IP: hub_drf_apb/reg/HUB_MAP/Scratch
  * Scratchpad register.
  */

typedef union {
  struct {
    uint32_t SCRATCHPAD_L : 8;
    ///< Scratchpad low (warm reset)
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t SCRATCHPAD_M : 8;
    ///< Scratchpad low (cold reset)
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t SCRATCHPAD_H : 16;
    ///< Scratchpad high (sticky, power-up reset)
    ///< AccessType="RW/P" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} hub_drf_apb_hub_scratch_reg_t;

#define HUB_DRF_APB_HUB_SCRATCH_DEFAULT (0x00000000U)
#define HUB_DRF_APB_HUB_SCRATCH_RD_MASK (0xffffffffU)
#define HUB_DRF_APB_HUB_SCRATCH_WR_MASK (0xffffffffU)


///< Scratchpad low (warm reset)
#define HUB_DRF_APB_HUB_SCRATCH_SCRATCHPAD_L_BF_OFF ( 0)
#define HUB_DRF_APB_HUB_SCRATCH_SCRATCHPAD_L_BF_WID ( 8)
#define HUB_DRF_APB_HUB_SCRATCH_SCRATCHPAD_L_BF_MSK (0x000000FF)
#define HUB_DRF_APB_HUB_SCRATCH_SCRATCHPAD_L_BF_DEF (0x00000000)

///< Scratchpad low (cold reset)
#define HUB_DRF_APB_HUB_SCRATCH_SCRATCHPAD_M_BF_OFF ( 8)
#define HUB_DRF_APB_HUB_SCRATCH_SCRATCHPAD_M_BF_WID ( 8)
#define HUB_DRF_APB_HUB_SCRATCH_SCRATCHPAD_M_BF_MSK (0x0000FF00)
#define HUB_DRF_APB_HUB_SCRATCH_SCRATCHPAD_M_BF_DEF (0x00000000)

///< Scratchpad high (sticky, power-up reset)
#define HUB_DRF_APB_HUB_SCRATCH_SCRATCHPAD_H_BF_OFF (16)
#define HUB_DRF_APB_HUB_SCRATCH_SCRATCHPAD_H_BF_WID (16)
#define HUB_DRF_APB_HUB_SCRATCH_SCRATCHPAD_H_BF_MSK (0xFFFF0000)
#define HUB_DRF_APB_HUB_SCRATCH_SCRATCHPAD_H_BF_DEF (0x00000000)


/** @brief HUB_DRF_APB_REG_HUB_MAP_CLK_EN register description at address offset 0x4
  *
  * Register default value:        0x00000000
  * Register full path in IP: hub_drf_apb/reg/HUB_MAP/CLK_EN
  * Clock Enables
  */

typedef union {
  struct {
    uint32_t VWRAP_CLK_DRF_EN : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TRX_ANT_CLK_DRF_EN : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t TRX_SYS_CLK_DRF_EN : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t ANT_CLK_DRF_EN : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t FB_ANT_CLK_DRF_EN : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t FB_SYS_CLK_DRF_EN : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t MEM_CAP_CLK_DRF_EN : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t MEM_FB_CLK_DRF_EN : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t HUB_DRF_CLK_DRF_EN : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
    uint32_t MEM_FB_CLK_CRUX_EN : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t  : 7;
    ///< Reserved
    ///< AccessType="RO" BitOffset="25" ResetValue="None"
  } ;
  uint32_t value;
} hub_drf_apb_hub_clk_en_reg_t;

#define HUB_DRF_APB_HUB_CLK_EN_DEFAULT (0x00000000U)
#define HUB_DRF_APB_HUB_CLK_EN_RD_MASK (0x011f3fffU)
#define HUB_DRF_APB_HUB_CLK_EN_WR_MASK (0x011f3fffU)


#define HUB_DRF_APB_HUB_CLK_EN_VWRAP_CLK_DRF_EN_BF_OFF ( 0)
#define HUB_DRF_APB_HUB_CLK_EN_VWRAP_CLK_DRF_EN_BF_WID ( 4)
#define HUB_DRF_APB_HUB_CLK_EN_VWRAP_CLK_DRF_EN_BF_MSK (0x0000000F)
#define HUB_DRF_APB_HUB_CLK_EN_VWRAP_CLK_DRF_EN_BF_DEF (0x00000000)

#define HUB_DRF_APB_HUB_CLK_EN_TRX_ANT_CLK_DRF_EN_BF_OFF ( 4)
#define HUB_DRF_APB_HUB_CLK_EN_TRX_ANT_CLK_DRF_EN_BF_WID ( 4)
#define HUB_DRF_APB_HUB_CLK_EN_TRX_ANT_CLK_DRF_EN_BF_MSK (0x000000F0)
#define HUB_DRF_APB_HUB_CLK_EN_TRX_ANT_CLK_DRF_EN_BF_DEF (0x00000000)

#define HUB_DRF_APB_HUB_CLK_EN_TRX_SYS_CLK_DRF_EN_BF_OFF ( 8)
#define HUB_DRF_APB_HUB_CLK_EN_TRX_SYS_CLK_DRF_EN_BF_WID ( 4)
#define HUB_DRF_APB_HUB_CLK_EN_TRX_SYS_CLK_DRF_EN_BF_MSK (0x00000F00)
#define HUB_DRF_APB_HUB_CLK_EN_TRX_SYS_CLK_DRF_EN_BF_DEF (0x00000000)

#define HUB_DRF_APB_HUB_CLK_EN_ANT_CLK_DRF_EN_BF_OFF (12)
#define HUB_DRF_APB_HUB_CLK_EN_ANT_CLK_DRF_EN_BF_WID ( 2)
#define HUB_DRF_APB_HUB_CLK_EN_ANT_CLK_DRF_EN_BF_MSK (0x00003000)
#define HUB_DRF_APB_HUB_CLK_EN_ANT_CLK_DRF_EN_BF_DEF (0x00000000)

#define HUB_DRF_APB_HUB_CLK_EN_FB_ANT_CLK_DRF_EN_BF_OFF (16)
#define HUB_DRF_APB_HUB_CLK_EN_FB_ANT_CLK_DRF_EN_BF_WID ( 1)
#define HUB_DRF_APB_HUB_CLK_EN_FB_ANT_CLK_DRF_EN_BF_MSK (0x00010000)
#define HUB_DRF_APB_HUB_CLK_EN_FB_ANT_CLK_DRF_EN_BF_DEF (0x00000000)

#define HUB_DRF_APB_HUB_CLK_EN_FB_SYS_CLK_DRF_EN_BF_OFF (17)
#define HUB_DRF_APB_HUB_CLK_EN_FB_SYS_CLK_DRF_EN_BF_WID ( 1)
#define HUB_DRF_APB_HUB_CLK_EN_FB_SYS_CLK_DRF_EN_BF_MSK (0x00020000)
#define HUB_DRF_APB_HUB_CLK_EN_FB_SYS_CLK_DRF_EN_BF_DEF (0x00000000)

#define HUB_DRF_APB_HUB_CLK_EN_MEM_CAP_CLK_DRF_EN_BF_OFF (18)
#define HUB_DRF_APB_HUB_CLK_EN_MEM_CAP_CLK_DRF_EN_BF_WID ( 1)
#define HUB_DRF_APB_HUB_CLK_EN_MEM_CAP_CLK_DRF_EN_BF_MSK (0x00040000)
#define HUB_DRF_APB_HUB_CLK_EN_MEM_CAP_CLK_DRF_EN_BF_DEF (0x00000000)

#define HUB_DRF_APB_HUB_CLK_EN_MEM_FB_CLK_DRF_EN_BF_OFF (19)
#define HUB_DRF_APB_HUB_CLK_EN_MEM_FB_CLK_DRF_EN_BF_WID ( 1)
#define HUB_DRF_APB_HUB_CLK_EN_MEM_FB_CLK_DRF_EN_BF_MSK (0x00080000)
#define HUB_DRF_APB_HUB_CLK_EN_MEM_FB_CLK_DRF_EN_BF_DEF (0x00000000)

#define HUB_DRF_APB_HUB_CLK_EN_HUB_DRF_CLK_DRF_EN_BF_OFF (20)
#define HUB_DRF_APB_HUB_CLK_EN_HUB_DRF_CLK_DRF_EN_BF_WID ( 1)
#define HUB_DRF_APB_HUB_CLK_EN_HUB_DRF_CLK_DRF_EN_BF_MSK (0x00100000)
#define HUB_DRF_APB_HUB_CLK_EN_HUB_DRF_CLK_DRF_EN_BF_DEF (0x00000000)

#define HUB_DRF_APB_HUB_CLK_EN_MEM_FB_CLK_CRUX_EN_BF_OFF (24)
#define HUB_DRF_APB_HUB_CLK_EN_MEM_FB_CLK_CRUX_EN_BF_WID ( 1)
#define HUB_DRF_APB_HUB_CLK_EN_MEM_FB_CLK_CRUX_EN_BF_MSK (0x01000000)
#define HUB_DRF_APB_HUB_CLK_EN_MEM_FB_CLK_CRUX_EN_BF_DEF (0x00000000)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define HUB_DRF_APB_HUB_SCRATCH_REG(_BASE) ((hub_drf_apb_hub_scratch_reg_t*) HUB_DRF_APB_HUB_SCRATCH_ADR(_BASE))
#define HUB_DRF_APB_HUB_CLK_EN_REG(_BASE) ((hub_drf_apb_hub_clk_en_reg_t*) HUB_DRF_APB_HUB_CLK_EN_ADR(_BASE))

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    hub_drf_apb_hub_scratch_reg_t HUB_SCRATCH; /*< Address offset = 0x0 */
    hub_drf_apb_hub_clk_en_reg_t HUB_CLK_EN;  /*< Address offset = 0x4 */
} hub_drf_apb_t;     // size: 0x0008

// AddressSpace struct pointer
//
#define HUB_DRF0_APB     ((hub_drf_apb_t*) HUB_DRF0_APB_BASE)
#define HUB_DRF1_APB     ((hub_drf_apb_t*) HUB_DRF1_APB_BASE)

// ******************************************* /Address Space

#endif      // _HUB_DRF_APB_H_

