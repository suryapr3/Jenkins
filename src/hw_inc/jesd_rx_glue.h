#ifndef _JESD_RX_GLUE_H_
#define _JESD_RX_GLUE_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define DLNK_JESD0_RX_GLUE_BASE  ( 0x06707000 )
#define DLNK_JESD1_RX_GLUE_BASE  ( 0x06f07000 )
#define DLNK_JESD2_RX_GLUE_BASE  ( 0x07707000 )
#define DLNK_JESD3_RX_GLUE_BASE  ( 0x07f07000 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define JESD_RX_GLUE_SCRATCH_OFFSET ( 0x00000000U )
#define JESD_RX_GLUE_APB_BRDG_STAT_OFFSET ( 0x00000004U )
#define JESD_RX_GLUE_SONI_OFFSET ( 0x00000010U )
#define JESD_RX_GLUE_DATAPATH_GATE_SEL_OFFSET ( 0x00000014U )
#define JESD_RX_GLUE_DATAPATH_SW_EN_OFFSET ( 0x00000018U )
#define JESD_RX_GLUE_DATAPATH_INIT_CYC_CNT_OFFSET ( 0x0000001cU )
#define JESD_RX_GLUE_DP_START_SYNC_DLY_OFFSET ( 0x00000020U )
#define JESD_RX_GLUE_DL_EN_EVENT_DLY_OFFSET ( 0x00000024U )
#define JESD_RX_GLUE_ZERO_INS_EN_OFFSET ( 0x00000028U )
#define JESD_RX_GLUE_START_SYNC_BYP_OFFSET ( 0x0000002cU )
#define JESD_RX_GLUE_CONV_SMPL_INTRLV_CTRL_OFFSET ( 0x00000030U )
#define JESD_RX_GLUE_SMPL_VLD_MON_CFG_OFFSET ( 0x00000040U )
#define JESD_RX_GLUE_SMPL_VLD_MON_PERIOD_OFFSET ( 0x00000044U )
#define JESD_RX_GLUE_SMPL_VLD_MON_ERR_THRSH_OFFSET ( 0x0000004cU )
#define JESD_RX_GLUE_SMPL_INTF_CAP_EN_OFFSET ( 0x00000050U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_STS_OFFSET ( 0x00000054U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_CLR_OFFSET ( 0x0000005cU )
#define JESD_RX_GLUE_SMPL_CLK_ERR_STS_OFFSET ( 0x00000060U )
#define JESD_RX_GLUE_SMPL_CLK_INTR_HIGH_EN_OFFSET ( 0x00000064U )
#define JESD_RX_GLUE_SMPL_CLK_INTR_LOW_EN_OFFSET ( 0x00000068U )
#define JESD_RX_GLUE_SMPL_CLK_ALM_EN_OFFSET ( 0x0000006cU )
#define JESD_RX_GLUE_SMPL_CLK_ERR_CLR_OFFSET ( 0x00000070U )
#define JESD_RX_GLUE_SMPL_CLK_ERR_FRC_OFFSET ( 0x00000074U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA0_OFFSET ( 0x00000200U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA1_OFFSET ( 0x00000204U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA2_OFFSET ( 0x00000208U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA3_OFFSET ( 0x0000020cU )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA4_OFFSET ( 0x00000210U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA5_OFFSET ( 0x00000214U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA6_OFFSET ( 0x00000218U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA7_OFFSET ( 0x0000021cU )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA8_OFFSET ( 0x00000220U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA9_OFFSET ( 0x00000224U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA10_OFFSET ( 0x00000228U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA11_OFFSET ( 0x0000022cU )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA12_OFFSET ( 0x00000230U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA13_OFFSET ( 0x00000234U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA14_OFFSET ( 0x00000238U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA15_OFFSET ( 0x0000023cU )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA16_OFFSET ( 0x00000240U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA17_OFFSET ( 0x00000244U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA18_OFFSET ( 0x00000248U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA19_OFFSET ( 0x0000024cU )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA20_OFFSET ( 0x00000250U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA21_OFFSET ( 0x00000254U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA22_OFFSET ( 0x00000258U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA23_OFFSET ( 0x0000025cU )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA24_OFFSET ( 0x00000260U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA25_OFFSET ( 0x00000264U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA26_OFFSET ( 0x00000268U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA27_OFFSET ( 0x0000026cU )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA28_OFFSET ( 0x00000270U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA29_OFFSET ( 0x00000274U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA30_OFFSET ( 0x00000278U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA31_OFFSET ( 0x0000027cU )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA32_OFFSET ( 0x00000280U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA33_OFFSET ( 0x00000284U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA34_OFFSET ( 0x00000288U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA35_OFFSET ( 0x0000028cU )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA36_OFFSET ( 0x00000290U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA37_OFFSET ( 0x00000294U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA38_OFFSET ( 0x00000298U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA39_OFFSET ( 0x0000029cU )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA40_OFFSET ( 0x000002a0U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA41_OFFSET ( 0x000002a4U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA42_OFFSET ( 0x000002a8U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA43_OFFSET ( 0x000002acU )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA44_OFFSET ( 0x000002b0U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA45_OFFSET ( 0x000002b4U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA46_OFFSET ( 0x000002b8U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA47_OFFSET ( 0x000002bcU )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA48_OFFSET ( 0x000002c0U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA49_OFFSET ( 0x000002c4U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA50_OFFSET ( 0x000002c8U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA51_OFFSET ( 0x000002ccU )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA52_OFFSET ( 0x000002d0U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA53_OFFSET ( 0x000002d4U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA54_OFFSET ( 0x000002d8U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA55_OFFSET ( 0x000002dcU )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA56_OFFSET ( 0x000002e0U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA57_OFFSET ( 0x000002e4U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA58_OFFSET ( 0x000002e8U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA59_OFFSET ( 0x000002ecU )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA60_OFFSET ( 0x000002f0U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA61_OFFSET ( 0x000002f4U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA62_OFFSET ( 0x000002f8U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA63_OFFSET ( 0x000002fcU )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA64_OFFSET ( 0x00000300U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA65_OFFSET ( 0x00000304U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA66_OFFSET ( 0x00000308U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA67_OFFSET ( 0x0000030cU )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA68_OFFSET ( 0x00000310U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA69_OFFSET ( 0x00000314U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA70_OFFSET ( 0x00000318U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA71_OFFSET ( 0x0000031cU )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA72_OFFSET ( 0x00000320U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA73_OFFSET ( 0x00000324U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA74_OFFSET ( 0x00000328U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA75_OFFSET ( 0x0000032cU )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA76_OFFSET ( 0x00000330U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA77_OFFSET ( 0x00000334U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA78_OFFSET ( 0x00000338U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA79_OFFSET ( 0x0000033cU )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA80_OFFSET ( 0x00000340U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA81_OFFSET ( 0x00000344U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA82_OFFSET ( 0x00000348U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA83_OFFSET ( 0x0000034cU )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA84_OFFSET ( 0x00000350U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA85_OFFSET ( 0x00000354U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA86_OFFSET ( 0x00000358U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA87_OFFSET ( 0x0000035cU )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA88_OFFSET ( 0x00000360U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA89_OFFSET ( 0x00000364U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA90_OFFSET ( 0x00000368U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA91_OFFSET ( 0x0000036cU )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA92_OFFSET ( 0x00000370U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA93_OFFSET ( 0x00000374U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA94_OFFSET ( 0x00000378U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA95_OFFSET ( 0x0000037cU )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA96_OFFSET ( 0x00000380U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA97_OFFSET ( 0x00000384U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA98_OFFSET ( 0x00000388U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA99_OFFSET ( 0x0000038cU )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA100_OFFSET ( 0x00000390U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA101_OFFSET ( 0x00000394U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA102_OFFSET ( 0x00000398U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA103_OFFSET ( 0x0000039cU )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA104_OFFSET ( 0x000003a0U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA105_OFFSET ( 0x000003a4U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA106_OFFSET ( 0x000003a8U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA107_OFFSET ( 0x000003acU )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA108_OFFSET ( 0x000003b0U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA109_OFFSET ( 0x000003b4U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA110_OFFSET ( 0x000003b8U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA111_OFFSET ( 0x000003bcU )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA112_OFFSET ( 0x000003c0U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA113_OFFSET ( 0x000003c4U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA114_OFFSET ( 0x000003c8U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA115_OFFSET ( 0x000003ccU )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA116_OFFSET ( 0x000003d0U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA117_OFFSET ( 0x000003d4U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA118_OFFSET ( 0x000003d8U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA119_OFFSET ( 0x000003dcU )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA120_OFFSET ( 0x000003e0U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA121_OFFSET ( 0x000003e4U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA122_OFFSET ( 0x000003e8U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA123_OFFSET ( 0x000003ecU )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA124_OFFSET ( 0x000003f0U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA125_OFFSET ( 0x000003f4U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA126_OFFSET ( 0x000003f8U )
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA127_OFFSET ( 0x000003fcU )
#define JESD_RX_GLUE_SMPL_CLK_SIG_MON_EN_OFFSET ( 0x00000400U )
#define JESD_RX_GLUE_SMPL_CLK_SIG_MON_CAP_EN_OFFSET ( 0x00000404U )
#define JESD_RX_GLUE_SMPL_CLK_SIG_MON_STS_CLR_OFFSET ( 0x00000408U )
#define JESD_RX_GLUE_SMPL_CLK_SIG_MON_CFG_OFFSET ( 0x0000040cU )
#define JESD_RX_GLUE_SMPL_CLK_DBG_SIG_SEL_OFFSET ( 0x00000410U )
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_VLD_OFFSET ( 0x00000414U )
#define JESD_RX_GLUE_SP_MON_CAP_VLD_OFFSET ( 0x00000420U )
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG00_OFFSET ( 0x00000500U )
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG01_OFFSET ( 0x00000504U )
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG02_OFFSET ( 0x00000508U )
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG03_OFFSET ( 0x0000050cU )
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG10_OFFSET ( 0x00000510U )
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG11_OFFSET ( 0x00000514U )
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG12_OFFSET ( 0x00000518U )
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG13_OFFSET ( 0x0000051cU )
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG20_OFFSET ( 0x00000520U )
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG21_OFFSET ( 0x00000524U )
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG22_OFFSET ( 0x00000528U )
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG23_OFFSET ( 0x0000052cU )
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG30_OFFSET ( 0x00000530U )
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG31_OFFSET ( 0x00000534U )
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG32_OFFSET ( 0x00000538U )
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG33_OFFSET ( 0x0000053cU )
#define JESD_RX_GLUE_SP_MON_CAP_REG00_OFFSET ( 0x00000540U )
#define JESD_RX_GLUE_SP_MON_CAP_REG01_OFFSET ( 0x00000544U )
#define JESD_RX_GLUE_SP_MON_CAP_REG02_OFFSET ( 0x00000548U )
#define JESD_RX_GLUE_SP_MON_CAP_REG03_OFFSET ( 0x0000054cU )
#define JESD_RX_GLUE_SP_MON_CAP_REG10_OFFSET ( 0x00000550U )
#define JESD_RX_GLUE_SP_MON_CAP_REG11_OFFSET ( 0x00000554U )
#define JESD_RX_GLUE_SP_MON_CAP_REG12_OFFSET ( 0x00000558U )
#define JESD_RX_GLUE_SP_MON_CAP_REG13_OFFSET ( 0x0000055cU )
#define JESD_RX_GLUE_SP_MON_CAP_REG20_OFFSET ( 0x00000560U )
#define JESD_RX_GLUE_SP_MON_CAP_REG21_OFFSET ( 0x00000564U )
#define JESD_RX_GLUE_SP_MON_CAP_REG22_OFFSET ( 0x00000568U )
#define JESD_RX_GLUE_SP_MON_CAP_REG23_OFFSET ( 0x0000056cU )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define JESD_RX_GLUE_SCRATCH_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SCRATCH_OFFSET ) ))
#define JESD_RX_GLUE_APB_BRDG_STAT_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_APB_BRDG_STAT_OFFSET ) ))
#define JESD_RX_GLUE_SONI_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SONI_OFFSET ) ))
#define JESD_RX_GLUE_DATAPATH_GATE_SEL_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_DATAPATH_GATE_SEL_OFFSET ) ))
#define JESD_RX_GLUE_DATAPATH_SW_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_DATAPATH_SW_EN_OFFSET ) ))
#define JESD_RX_GLUE_DATAPATH_INIT_CYC_CNT_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_DATAPATH_INIT_CYC_CNT_OFFSET ) ))
#define JESD_RX_GLUE_DP_START_SYNC_DLY_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_DP_START_SYNC_DLY_OFFSET ) ))
#define JESD_RX_GLUE_DL_EN_EVENT_DLY_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_DL_EN_EVENT_DLY_OFFSET ) ))
#define JESD_RX_GLUE_ZERO_INS_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_ZERO_INS_EN_OFFSET ) ))
#define JESD_RX_GLUE_START_SYNC_BYP_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_START_SYNC_BYP_OFFSET ) ))
#define JESD_RX_GLUE_CONV_SMPL_INTRLV_CTRL_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_CONV_SMPL_INTRLV_CTRL_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_VLD_MON_CFG_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_VLD_MON_CFG_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_VLD_MON_PERIOD_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_VLD_MON_PERIOD_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_VLD_MON_ERR_THRSH_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_VLD_MON_ERR_THRSH_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_EN_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_STS_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_STS_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_CLR_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_CLR_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_CLK_ERR_STS_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_CLK_ERR_STS_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_CLK_INTR_HIGH_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_CLK_INTR_HIGH_EN_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_CLK_INTR_LOW_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_CLK_INTR_LOW_EN_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_CLK_ALM_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_CLK_ALM_EN_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_CLK_ERR_CLR_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_CLK_ERR_CLR_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_CLK_ERR_FRC_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_CLK_ERR_FRC_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA0_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA0_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA1_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA1_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA2_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA2_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA3_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA3_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA4_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA4_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA5_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA5_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA6_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA6_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA7_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA7_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA8_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA8_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA9_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA9_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA10_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA10_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA11_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA11_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA12_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA12_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA13_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA13_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA14_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA14_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA15_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA15_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA16_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA16_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA17_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA17_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA18_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA18_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA19_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA19_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA20_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA20_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA21_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA21_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA22_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA22_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA23_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA23_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA24_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA24_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA25_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA25_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA26_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA26_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA27_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA27_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA28_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA28_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA29_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA29_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA30_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA30_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA31_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA31_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA32_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA32_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA33_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA33_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA34_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA34_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA35_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA35_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA36_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA36_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA37_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA37_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA38_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA38_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA39_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA39_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA40_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA40_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA41_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA41_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA42_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA42_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA43_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA43_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA44_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA44_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA45_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA45_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA46_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA46_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA47_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA47_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA48_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA48_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA49_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA49_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA50_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA50_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA51_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA51_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA52_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA52_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA53_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA53_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA54_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA54_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA55_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA55_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA56_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA56_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA57_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA57_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA58_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA58_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA59_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA59_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA60_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA60_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA61_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA61_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA62_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA62_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA63_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA63_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA64_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA64_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA65_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA65_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA66_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA66_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA67_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA67_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA68_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA68_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA69_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA69_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA70_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA70_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA71_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA71_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA72_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA72_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA73_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA73_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA74_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA74_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA75_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA75_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA76_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA76_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA77_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA77_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA78_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA78_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA79_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA79_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA80_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA80_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA81_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA81_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA82_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA82_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA83_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA83_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA84_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA84_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA85_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA85_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA86_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA86_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA87_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA87_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA88_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA88_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA89_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA89_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA90_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA90_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA91_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA91_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA92_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA92_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA93_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA93_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA94_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA94_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA95_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA95_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA96_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA96_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA97_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA97_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA98_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA98_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA99_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA99_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA100_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA100_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA101_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA101_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA102_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA102_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA103_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA103_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA104_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA104_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA105_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA105_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA106_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA106_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA107_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA107_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA108_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA108_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA109_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA109_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA110_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA110_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA111_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA111_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA112_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA112_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA113_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA113_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA114_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA114_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA115_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA115_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA116_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA116_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA117_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA117_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA118_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA118_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA119_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA119_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA120_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA120_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA121_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA121_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA122_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA122_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA123_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA123_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA124_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA124_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA125_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA125_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA126_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA126_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA127_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_INTF_CAP_DATA127_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_CLK_SIG_MON_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_CLK_SIG_MON_EN_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_CLK_SIG_MON_CAP_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_CLK_SIG_MON_CAP_EN_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_CLK_SIG_MON_STS_CLR_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_CLK_SIG_MON_STS_CLR_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_CLK_SIG_MON_CFG_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_CLK_SIG_MON_CFG_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_CLK_DBG_SIG_SEL_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_CLK_DBG_SIG_SEL_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_VLD_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_CLK_DBG_CAP_VLD_OFFSET ) ))
#define JESD_RX_GLUE_SP_MON_CAP_VLD_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SP_MON_CAP_VLD_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG00_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG00_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG01_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG01_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG02_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG02_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG03_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG03_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG10_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG10_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG11_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG11_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG12_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG12_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG13_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG13_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG20_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG20_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG21_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG21_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG22_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG22_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG23_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG23_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG30_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG30_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG31_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG31_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG32_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG32_OFFSET ) ))
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG33_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG33_OFFSET ) ))
#define JESD_RX_GLUE_SP_MON_CAP_REG00_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SP_MON_CAP_REG00_OFFSET ) ))
#define JESD_RX_GLUE_SP_MON_CAP_REG01_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SP_MON_CAP_REG01_OFFSET ) ))
#define JESD_RX_GLUE_SP_MON_CAP_REG02_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SP_MON_CAP_REG02_OFFSET ) ))
#define JESD_RX_GLUE_SP_MON_CAP_REG03_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SP_MON_CAP_REG03_OFFSET ) ))
#define JESD_RX_GLUE_SP_MON_CAP_REG10_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SP_MON_CAP_REG10_OFFSET ) ))
#define JESD_RX_GLUE_SP_MON_CAP_REG11_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SP_MON_CAP_REG11_OFFSET ) ))
#define JESD_RX_GLUE_SP_MON_CAP_REG12_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SP_MON_CAP_REG12_OFFSET ) ))
#define JESD_RX_GLUE_SP_MON_CAP_REG13_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SP_MON_CAP_REG13_OFFSET ) ))
#define JESD_RX_GLUE_SP_MON_CAP_REG20_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SP_MON_CAP_REG20_OFFSET ) ))
#define JESD_RX_GLUE_SP_MON_CAP_REG21_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SP_MON_CAP_REG21_OFFSET ) ))
#define JESD_RX_GLUE_SP_MON_CAP_REG22_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SP_MON_CAP_REG22_OFFSET ) ))
#define JESD_RX_GLUE_SP_MON_CAP_REG23_ADR(_BASE) (( ( _BASE ) + ( JESD_RX_GLUE_SP_MON_CAP_REG23_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief JESDABC_RX_GLUE_MEM_JESDABC_RX_GLUE_SCRATCH register description at address offset 0x0
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_glue_MEM/jesdabc_rx_glue/SCRATCH
  * Scratch Register
  */

typedef union {
  struct {
    uint32_t SCRATCHPAD : 32;
    ///< Scratch pad
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_rx_glue_scratch_reg_t;

#define JESD_RX_GLUE_SCRATCH_DEFAULT (0x00000000U)
#define JESD_RX_GLUE_SCRATCH_RD_MASK (0xffffffffU)
#define JESD_RX_GLUE_SCRATCH_WR_MASK (0xffffffffU)


///< Scratch pad
#define JESD_RX_GLUE_SCRATCH_SCRATCHPAD_BF_OFF ( 0)
#define JESD_RX_GLUE_SCRATCH_SCRATCHPAD_BF_WID (32)
#define JESD_RX_GLUE_SCRATCH_SCRATCHPAD_BF_MSK (0xFFFFFFFF)
#define JESD_RX_GLUE_SCRATCH_SCRATCHPAD_BF_DEF (0x00000000)


/** @brief JESDABC_RX_GLUE_MEM_JESDABC_RX_GLUE_APB_BRIDGE_STATUS register description at address offset 0x4
  *
  * Register default value:        0x00010000
  * Register full path in IP: jesdabc_rx_glue_MEM/jesdabc_rx_glue/APB_BRIDGE_STATUS
  * APB Bridge Status Register
  */

typedef union {
  struct {
    uint32_t TIMEOUT_VALUE : 20;
    ///< Number of core clocks to wait before timing out an APB request
    ///< AccessType="RW" BitOffset="0" ResetValue="0x10000"
    uint32_t REVISION : 8;
    ///< Module Revision Number
    ///< AccessType="RO" BitOffset="20" ResetValue="0x0"
    uint32_t SW_LOCK_CTRL : 1;
    ///< Block software writes to timeout_value if set
    ///< AccessType="RW/1S" BitOffset="28" ResetValue="0x0"
    uint32_t UNSOL_ACK : 1;
    ///< An unsolicited acknowledge was received
    ///< AccessType="RW/1C/V" BitOffset="29" ResetValue="0x0"
    uint32_t ACK_ERROR : 1;
    ///< Acknowledgement had error bit set
    ///< AccessType="RW/1C/V" BitOffset="30" ResetValue="0x0"
    uint32_t TIMEOUT : 1;
    ///< An APB request has timed out
    ///< AccessType="RW/1C/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_rx_glue_apb_brdg_stat_reg_t;

#define JESD_RX_GLUE_APB_BRDG_STAT_DEFAULT (0x00010000U)
#define JESD_RX_GLUE_APB_BRDG_STAT_RD_MASK (0xffffffffU)
#define JESD_RX_GLUE_APB_BRDG_STAT_WR_MASK (0xf00fffffU)


///< Number of core clocks to wait before timing out an APB request
#define JESD_RX_GLUE_APB_BRDG_STAT_TIMEOUT_VAL_BF_OFF ( 0)
#define JESD_RX_GLUE_APB_BRDG_STAT_TIMEOUT_VAL_BF_WID (20)
#define JESD_RX_GLUE_APB_BRDG_STAT_TIMEOUT_VAL_BF_MSK (0x000FFFFF)
#define JESD_RX_GLUE_APB_BRDG_STAT_TIMEOUT_VAL_BF_DEF (0x00010000)

///< Module Revision Number
#define JESD_RX_GLUE_APB_BRDG_STAT_REVISION_BF_OFF (20)
#define JESD_RX_GLUE_APB_BRDG_STAT_REVISION_BF_WID ( 8)
#define JESD_RX_GLUE_APB_BRDG_STAT_REVISION_BF_MSK (0x0FF00000)
#define JESD_RX_GLUE_APB_BRDG_STAT_REVISION_BF_DEF (0x00000000)

///< Block software writes to timeout_value if set
#define JESD_RX_GLUE_APB_BRDG_STAT_SW_LOCK_CTRL_BF_OFF (28)
#define JESD_RX_GLUE_APB_BRDG_STAT_SW_LOCK_CTRL_BF_WID ( 1)
#define JESD_RX_GLUE_APB_BRDG_STAT_SW_LOCK_CTRL_BF_MSK (0x10000000)
#define JESD_RX_GLUE_APB_BRDG_STAT_SW_LOCK_CTRL_BF_DEF (0x00000000)

///< An unsolicited acknowledge was received
#define JESD_RX_GLUE_APB_BRDG_STAT_UNSOL_ACK_BF_OFF (29)
#define JESD_RX_GLUE_APB_BRDG_STAT_UNSOL_ACK_BF_WID ( 1)
#define JESD_RX_GLUE_APB_BRDG_STAT_UNSOL_ACK_BF_MSK (0x20000000)
#define JESD_RX_GLUE_APB_BRDG_STAT_UNSOL_ACK_BF_DEF (0x00000000)

///< Acknowledgement had error bit set
#define JESD_RX_GLUE_APB_BRDG_STAT_ACK_ERR_BF_OFF (30)
#define JESD_RX_GLUE_APB_BRDG_STAT_ACK_ERR_BF_WID ( 1)
#define JESD_RX_GLUE_APB_BRDG_STAT_ACK_ERR_BF_MSK (0x40000000)
#define JESD_RX_GLUE_APB_BRDG_STAT_ACK_ERR_BF_DEF (0x00000000)

///< An APB request has timed out
#define JESD_RX_GLUE_APB_BRDG_STAT_TIMEOUT_BF_OFF (31)
#define JESD_RX_GLUE_APB_BRDG_STAT_TIMEOUT_BF_WID ( 1)
#define JESD_RX_GLUE_APB_BRDG_STAT_TIMEOUT_BF_MSK (0x80000000)
#define JESD_RX_GLUE_APB_BRDG_STAT_TIMEOUT_BF_DEF (0x00000000)


/** @brief JESDABC_RX_GLUE_MEM_JESDABC_RX_GLUE_RX_GLUE_SONI register description at address offset 0x10
  *
  * Register default value:        0x00000001
  * Register full path in IP: jesdabc_rx_glue_MEM/jesdabc_rx_glue/RX_GLUE_SONI
  * RX Converter datapath configuration register
  */

typedef union {
  struct {
    uint32_t RX_SONI : 4;
    ///< Number of samples avaiable per converter  in single sample clock cycle
    ///< from RX IP.       Only Soni values of 1,2,4 and 8 are supported.
    ///< 1 - 1 sample  per cycle.        2 - 2 samples per cycle.        3
    ///< - 3 samples per cycle and so on.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} jesd_rx_glue_soni_reg_t;

#define JESD_RX_GLUE_SONI_DEFAULT (0x00000001U)
#define JESD_RX_GLUE_SONI_RD_MASK (0x0000000fU)
#define JESD_RX_GLUE_SONI_WR_MASK (0x0000000fU)


///< Number of samples avaiable per converter  in single sample clock cycle
///< from RX IP.       Only Soni values of 1,2,4 and 8 are supported.
///< 1 - 1 sample  per cycle.        2 - 2 samples per cycle.        3
///< - 3 samples per cycle and so on.
#define JESD_RX_GLUE_SONI_RX_SONI_BF_OFF ( 0)
#define JESD_RX_GLUE_SONI_RX_SONI_BF_WID ( 4)
#define JESD_RX_GLUE_SONI_RX_SONI_BF_MSK (0x0000000F)
#define JESD_RX_GLUE_SONI_RX_SONI_BF_DEF (0x00000001)


/** @brief JESDABC_RX_GLUE_MEM_JESDABC_RX_GLUE_RX_DATAPATH_GATE_SEL register description at address offset 0x14
  *
  * Register default value:        0x00000001
  * Register full path in IP: jesdabc_rx_glue_MEM/jesdabc_rx_glue/RX_DATAPATH_GATE_SEL
  * RX Datapath valid Gating logic control
  */

typedef union {
  struct {
    uint32_t RX_DP_GATE_SEL : 3;
    ///< RX Datapath valid Gating logic control.        3'b0 : First valid
    ///< sample from RX IP enables the datapath.       3'b1 : First non zero
    ///< valid sample from RX IP enables the datapath.       3'b2 : Programmble
    ///< sample clock cycles after first SYSREF pulse to IP enables the datapath.
    ///< 3'b3 : BFN Trigger  enables the datapath.       3'b4 : Software register
    ///< bit enables the datapath.       3'b5-3'b7 : Reserved. Behaviour same
    ///< as 3'b0.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} jesd_rx_glue_datapath_gate_sel_reg_t;

#define JESD_RX_GLUE_DATAPATH_GATE_SEL_DEFAULT (0x00000001U)
#define JESD_RX_GLUE_DATAPATH_GATE_SEL_RD_MASK (0x00000007U)
#define JESD_RX_GLUE_DATAPATH_GATE_SEL_WR_MASK (0x00000007U)


///< RX Datapath valid Gating logic control.        3'b0 : First valid
///< sample from RX IP enables the datapath.       3'b1 : First non zero
///< valid sample from RX IP enables the datapath.       3'b2 : Programmble
///< sample clock cycles after first SYSREF pulse to IP enables the datapath.
///< 3'b3 : BFN Trigger  enables the datapath.       3'b4 : Software register
///< bit enables the datapath.       3'b5-3'b7 : Reserved. Behaviour same
///< as 3'b0.
#define JESD_RX_GLUE_DATAPATH_GATE_SEL_RX_DP_GATE_SEL_BF_OFF ( 0)
#define JESD_RX_GLUE_DATAPATH_GATE_SEL_RX_DP_GATE_SEL_BF_WID ( 3)
#define JESD_RX_GLUE_DATAPATH_GATE_SEL_RX_DP_GATE_SEL_BF_MSK (0x00000007)
#define JESD_RX_GLUE_DATAPATH_GATE_SEL_RX_DP_GATE_SEL_BF_DEF (0x00000001)


/** @brief JESDABC_RX_GLUE_MEM_JESDABC_RX_GLUE_RX_DATAPATH_SW_EN register description at address offset 0x18
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_glue_MEM/jesdabc_rx_glue/RX_DATAPATH_SW_EN
  * RX Datapath Software enabler
  */

typedef union {
  struct {
    uint32_t RX_DP_SW_EN : 1;
    ///< Enables rx datapath when set to 1 and this option is selected by register
    ///< rx_dp_gate_sel
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_rx_glue_datapath_sw_en_reg_t;

#define JESD_RX_GLUE_DATAPATH_SW_EN_DEFAULT (0x00000000U)
#define JESD_RX_GLUE_DATAPATH_SW_EN_RD_MASK (0x00000001U)
#define JESD_RX_GLUE_DATAPATH_SW_EN_WR_MASK (0x00000001U)


///< Enables rx datapath when set to 1 and this option is selected by register
///< rx_dp_gate_sel
#define JESD_RX_GLUE_DATAPATH_SW_EN_RX_DP_SW_EN_BF_OFF ( 0)
#define JESD_RX_GLUE_DATAPATH_SW_EN_RX_DP_SW_EN_BF_WID ( 1)
#define JESD_RX_GLUE_DATAPATH_SW_EN_RX_DP_SW_EN_BF_MSK (0x00000001)
#define JESD_RX_GLUE_DATAPATH_SW_EN_RX_DP_SW_EN_BF_DEF (0x00000000)


/** @brief JESDABC_RX_GLUE_MEM_JESDABC_RX_GLUE_RX_DATAPATH_INIT_CYC_CNT register description at address offset 0x1c
  *
  * Register default value:        0x00000080
  * Register full path in IP: jesdabc_rx_glue_MEM/jesdabc_rx_glue/RX_DATAPATH_INIT_CYC_CNT
  * RX DP Init Cycle Count
  */

typedef union {
  struct {
    uint32_t RX_DP_INIT_CNT : 32;
    ///< Sets sample cycle count value after first SYSREF pulse to IP to enable
    ///< RX datapath when this option is selected by register rx_dp_gate_sel
    ///< AccessType="RW" BitOffset="0" ResetValue="0x80"
  } ;
  uint32_t value;
} jesd_rx_glue_datapath_init_cyc_cnt_reg_t;

#define JESD_RX_GLUE_DATAPATH_INIT_CYC_CNT_DEFAULT (0x00000080U)
#define JESD_RX_GLUE_DATAPATH_INIT_CYC_CNT_RD_MASK (0xffffffffU)
#define JESD_RX_GLUE_DATAPATH_INIT_CYC_CNT_WR_MASK (0xffffffffU)


///< Sets sample cycle count value after first SYSREF pulse to IP to enable
///< RX datapath when this option is selected by register rx_dp_gate_sel
#define JESD_RX_GLUE_DATAPATH_INIT_CYC_CNT_RX_DP_INIT_CNT_BF_OFF ( 0)
#define JESD_RX_GLUE_DATAPATH_INIT_CYC_CNT_RX_DP_INIT_CNT_BF_WID (32)
#define JESD_RX_GLUE_DATAPATH_INIT_CYC_CNT_RX_DP_INIT_CNT_BF_MSK (0xFFFFFFFF)
#define JESD_RX_GLUE_DATAPATH_INIT_CYC_CNT_RX_DP_INIT_CNT_BF_DEF (0x00000080)


/** @brief JESDABC_RX_GLUE_MEM_JESDABC_RX_GLUE_RX_DP_START_SYNC_DLY register description at address offset 0x20
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_glue_MEM/jesdabc_rx_glue/RX_DP_START_SYNC_DLY
  * RX Datapath Start to SYNC POINT Delay register
  */

typedef union {
  struct {
    uint32_t RX_DP_START_SYNC_DLY : 16;
    ///< Indicates the Nunber of RX IP sample clock cycles from RX first sample
    ///< to next sync point.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t RX_STARTED : 1;
    ///< Sticky status that indicates RX logic received  data from IP.
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
    uint32_t RX_STARTED_SYNC : 1;
    ///< Sticky status that indicates RX logic started signal synced to next
    ///< sample clock syncpoint.
    ///< AccessType="RO" BitOffset="17" ResetValue="0x0"
    uint32_t RX_STARTED_BFN_SYNC : 1;
    ///< Sticky status that indicates RX logic started signal synced to next
    ///< bfn clock syncpoint.
    ///< AccessType="RO" BitOffset="18" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} jesd_rx_glue_dp_start_sync_dly_reg_t;

#define JESD_RX_GLUE_DP_START_SYNC_DLY_DEFAULT (0x00000000U)
#define JESD_RX_GLUE_DP_START_SYNC_DLY_RD_MASK (0x0007ffffU)
#define JESD_RX_GLUE_DP_START_SYNC_DLY_WR_MASK (0x00000000U)


///< Indicates the Nunber of RX IP sample clock cycles from RX first sample
///< to next sync point.
#define JESD_RX_GLUE_DP_START_SYNC_DLY_RX_DP_START_SYNC_DLY_BF_OFF ( 0)
#define JESD_RX_GLUE_DP_START_SYNC_DLY_RX_DP_START_SYNC_DLY_BF_WID (16)
#define JESD_RX_GLUE_DP_START_SYNC_DLY_RX_DP_START_SYNC_DLY_BF_MSK (0x0000FFFF)
#define JESD_RX_GLUE_DP_START_SYNC_DLY_RX_DP_START_SYNC_DLY_BF_DEF (0x00000000)

///< Sticky status that indicates RX logic received  data from IP.
#define JESD_RX_GLUE_DP_START_SYNC_DLY_RX_STARTED_BF_OFF (16)
#define JESD_RX_GLUE_DP_START_SYNC_DLY_RX_STARTED_BF_WID ( 1)
#define JESD_RX_GLUE_DP_START_SYNC_DLY_RX_STARTED_BF_MSK (0x00010000)
#define JESD_RX_GLUE_DP_START_SYNC_DLY_RX_STARTED_BF_DEF (0x00000000)

///< Sticky status that indicates RX logic started signal synced to next
///< sample clock syncpoint.
#define JESD_RX_GLUE_DP_START_SYNC_DLY_RX_STARTED_SYNC_BF_OFF (17)
#define JESD_RX_GLUE_DP_START_SYNC_DLY_RX_STARTED_SYNC_BF_WID ( 1)
#define JESD_RX_GLUE_DP_START_SYNC_DLY_RX_STARTED_SYNC_BF_MSK (0x00020000)
#define JESD_RX_GLUE_DP_START_SYNC_DLY_RX_STARTED_SYNC_BF_DEF (0x00000000)

///< Sticky status that indicates RX logic started signal synced to next
///< bfn clock syncpoint.
#define JESD_RX_GLUE_DP_START_SYNC_DLY_RX_STARTED_BFN_SYNC_BF_OFF (18)
#define JESD_RX_GLUE_DP_START_SYNC_DLY_RX_STARTED_BFN_SYNC_BF_WID ( 1)
#define JESD_RX_GLUE_DP_START_SYNC_DLY_RX_STARTED_BFN_SYNC_BF_MSK (0x00040000)
#define JESD_RX_GLUE_DP_START_SYNC_DLY_RX_STARTED_BFN_SYNC_BF_DEF (0x00000000)


/** @brief JESDABC_RX_GLUE_MEM_JESDABC_RX_GLUE_RX_DL_EN_EVENT_DLY register description at address offset 0x24
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_glue_MEM/jesdabc_rx_glue/RX_DL_EN_EVENT_DLY
  * RX DL Enable event delay
  */

typedef union {
  struct {
    uint32_t RISE_DLY : 16;
    ///< The 16-bit value that delays rising edge of DL enable signal by programmed
    ///< value of RX IP sample clock.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FALL_DLY : 16;
    ///< The 16-bit value that delays falling edge of DL enable signal by programmed
    ///< value of RX IP sample clock.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_rx_glue_dl_en_event_dly_reg_t;

#define JESD_RX_GLUE_DL_EN_EVENT_DLY_DEFAULT (0x00000000U)
#define JESD_RX_GLUE_DL_EN_EVENT_DLY_RD_MASK (0xffffffffU)
#define JESD_RX_GLUE_DL_EN_EVENT_DLY_WR_MASK (0xffffffffU)


///< The 16-bit value that delays rising edge of DL enable signal by programmed
///< value of RX IP sample clock.
#define JESD_RX_GLUE_DL_EN_EVENT_DLY_RISE_DLY_BF_OFF ( 0)
#define JESD_RX_GLUE_DL_EN_EVENT_DLY_RISE_DLY_BF_WID (16)
#define JESD_RX_GLUE_DL_EN_EVENT_DLY_RISE_DLY_BF_MSK (0x0000FFFF)
#define JESD_RX_GLUE_DL_EN_EVENT_DLY_RISE_DLY_BF_DEF (0x00000000)

///< The 16-bit value that delays falling edge of DL enable signal by programmed
///< value of RX IP sample clock.
#define JESD_RX_GLUE_DL_EN_EVENT_DLY_FALL_DLY_BF_OFF (16)
#define JESD_RX_GLUE_DL_EN_EVENT_DLY_FALL_DLY_BF_WID (16)
#define JESD_RX_GLUE_DL_EN_EVENT_DLY_FALL_DLY_BF_MSK (0xFFFF0000)
#define JESD_RX_GLUE_DL_EN_EVENT_DLY_FALL_DLY_BF_DEF (0x00000000)


/** @brief JESDABC_RX_GLUE_MEM_JESDABC_RX_GLUE_RX_ZERO_INS_EN register description at address offset 0x28
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_glue_MEM/jesdabc_rx_glue/RX_ZERO_INS_EN
  * RX ZERO insert enable
  */

typedef union {
  struct {
    uint32_t RX_ZERO_INS_EN : 1;
    ///< 1'b1 : Enables insertion of zeros n datapath to save power in JESD
    ///< RX path when UL enable is diabled in TDD mode.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_rx_glue_zero_ins_en_reg_t;

#define JESD_RX_GLUE_ZERO_INS_EN_DEFAULT (0x00000000U)
#define JESD_RX_GLUE_ZERO_INS_EN_RD_MASK (0x00000001U)
#define JESD_RX_GLUE_ZERO_INS_EN_WR_MASK (0x00000001U)


///< 1'b1 : Enables insertion of zeros n datapath to save power in JESD
///< RX path when UL enable is diabled in TDD mode.
#define JESD_RX_GLUE_ZERO_INS_EN_RX_ZERO_INS_EN_BF_OFF ( 0)
#define JESD_RX_GLUE_ZERO_INS_EN_RX_ZERO_INS_EN_BF_WID ( 1)
#define JESD_RX_GLUE_ZERO_INS_EN_RX_ZERO_INS_EN_BF_MSK (0x00000001)
#define JESD_RX_GLUE_ZERO_INS_EN_RX_ZERO_INS_EN_BF_DEF (0x00000000)


/** @brief JESDABC_RX_GLUE_MEM_JESDABC_RX_GLUE_RX_START_SYNC_BYP register description at address offset 0x2c
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_glue_MEM/jesdabc_rx_glue/RX_START_SYNC_BYP
  * RX Datapath Start Sync Bypass
  */

typedef union {
  struct {
    uint32_t RX_DP_START_SYNC_BYP : 1;
    ///< 1'b1 : Bypasses the logic that aligns JESD RX started signal to RX
    ///< sample clock and DRF clock Sync points.            The RX started
    ///< signal is directly synchronised to DRF clock domain.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_rx_glue_start_sync_byp_reg_t;

#define JESD_RX_GLUE_START_SYNC_BYP_DEFAULT (0x00000000U)
#define JESD_RX_GLUE_START_SYNC_BYP_RD_MASK (0x00000001U)
#define JESD_RX_GLUE_START_SYNC_BYP_WR_MASK (0x00000001U)


///< 1'b1 : Bypasses the logic that aligns JESD RX started signal to RX
///< sample clock and DRF clock Sync points.            The RX started
///< signal is directly synchronised to DRF clock domain.
#define JESD_RX_GLUE_START_SYNC_BYP_RX_DP_START_SYNC_BYP_BF_OFF ( 0)
#define JESD_RX_GLUE_START_SYNC_BYP_RX_DP_START_SYNC_BYP_BF_WID ( 1)
#define JESD_RX_GLUE_START_SYNC_BYP_RX_DP_START_SYNC_BYP_BF_MSK (0x00000001)
#define JESD_RX_GLUE_START_SYNC_BYP_RX_DP_START_SYNC_BYP_BF_DEF (0x00000000)


/** @brief JESDABC_RX_GLUE_MEM_JESDABC_RX_GLUE_RX_CONV_SMPL_INTRLV_CTRL register description at address offset 0x30
  *
  * Register default value:        0x00FAC688
  * Register full path in IP: jesdabc_rx_glue_MEM/jesdabc_rx_glue/RX_CONV_SMPL_INTRLV_CTRL
  * RX Convereter Sample interleaving control
  */

typedef union {
  struct {
    uint32_t CONV0_SMPL0_SEL : 3;
    ///< Selects sample 0 of converter 0 data to shift register from IP sample
    ///< interface.        3'b0 : IP sample interface Converter 0 sample 0.
    ///< 3'b1 : IP sample interface Converter 0 sample 1.       3'b2 : IP sample
    ///< interface Converter 1 sample 0.       3'b3 : IP sample interface Converter
    ///< 1 sample 1.       3'b4 : IP sample interface Converter 2 sample 0.
    ///< 3'b5 : IP sample interface Converter 2 sample 1.       3'b6 : IP sample
    ///< interface Converter 3 sample 0.       3'b7 : IP sample interface Converter
    ///< 3 sample 1.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CONV0_SMPL1_SEL : 3;
    ///< Selects sample 1 of converter 0 data to shift register from IP sample
    ///< interface.                    Sample mapping same as converter 0 sample
    ///< 0.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x1"
    uint32_t CONV1_SMPL0_SEL : 3;
    ///< Selects sample 0 of converter 1 data to shift register from IP sample
    ///< interface.                    Sample mapping same as converter 0 sample
    ///< 0.
    ///< AccessType="RW" BitOffset="6" ResetValue="0x2"
    uint32_t CONV1_SMPL1_SEL : 3;
    ///< Selects sample 1 of converter 1 data to shift register from IP sample
    ///< interface.                    Sample mapping same as converter 0 sample
    ///< 0.
    ///< AccessType="RW" BitOffset="9" ResetValue="0x3"
    uint32_t CONV2_SMPL0_SEL : 3;
    ///< Selects sample 0 of converter 2 data to shift register from IP sample
    ///< interface.                    Sample mapping same as converter 0 sample
    ///< 0.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x4"
    uint32_t CONV2_SMPL1_SEL : 3;
    ///< Selects sample 1 of converter 2 data to shift register from IP sample
    ///< interface.                    Sample mapping same as converter 0 sample
    ///< 0.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x5"
    uint32_t CONV3_SMPL0_SEL : 3;
    ///< Selects sample 0 of converter 3 data to shift register from IP sample
    ///< interface.                    Sample mapping same as converter 0 sample
    ///< 0.
    ///< AccessType="RW" BitOffset="18" ResetValue="0x6"
    uint32_t CONV3_SMPL1_SEL : 3;
    ///< Selects sample 1 of converter 3 data to shift register from IP sample
    ///< interface.                    Sample mapping same as converter 0 sample
    ///< 0.
    ///< AccessType="RW" BitOffset="21" ResetValue="0x7"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} jesd_rx_glue_conv_smpl_intrlv_ctrl_reg_t;

#define JESD_RX_GLUE_CONV_SMPL_INTRLV_CTRL_DEFAULT (0x00fac688U)
#define JESD_RX_GLUE_CONV_SMPL_INTRLV_CTRL_RD_MASK (0x00ffffffU)
#define JESD_RX_GLUE_CONV_SMPL_INTRLV_CTRL_WR_MASK (0x00ffffffU)


///< Selects sample 0 of converter 0 data to shift register from IP sample
///< interface.        3'b0 : IP sample interface Converter 0 sample 0.
///< 3'b1 : IP sample interface Converter 0 sample 1.       3'b2 : IP sample
///< interface Converter 1 sample 0.       3'b3 : IP sample interface Converter
///< 1 sample 1.       3'b4 : IP sample interface Converter 2 sample 0.
///< 3'b5 : IP sample interface Converter 2 sample 1.       3'b6 : IP sample
///< interface Converter 3 sample 0.       3'b7 : IP sample interface Converter
///< 3 sample 1.
#define JESD_RX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV0_SMPL0_SEL_BF_OFF ( 0)
#define JESD_RX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV0_SMPL0_SEL_BF_WID ( 3)
#define JESD_RX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV0_SMPL0_SEL_BF_MSK (0x00000007)
#define JESD_RX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV0_SMPL0_SEL_BF_DEF (0x00000000)

///< Selects sample 1 of converter 0 data to shift register from IP sample
///< interface.                    Sample mapping same as converter 0 sample
///< 0.
#define JESD_RX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV0_SMPL1_SEL_BF_OFF ( 3)
#define JESD_RX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV0_SMPL1_SEL_BF_WID ( 3)
#define JESD_RX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV0_SMPL1_SEL_BF_MSK (0x00000038)
#define JESD_RX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV0_SMPL1_SEL_BF_DEF (0x00000008)

///< Selects sample 0 of converter 1 data to shift register from IP sample
///< interface.                    Sample mapping same as converter 0 sample
///< 0.
#define JESD_RX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV1_SMPL0_SEL_BF_OFF ( 6)
#define JESD_RX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV1_SMPL0_SEL_BF_WID ( 3)
#define JESD_RX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV1_SMPL0_SEL_BF_MSK (0x000001C0)
#define JESD_RX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV1_SMPL0_SEL_BF_DEF (0x00000080)

///< Selects sample 1 of converter 1 data to shift register from IP sample
///< interface.                    Sample mapping same as converter 0 sample
///< 0.
#define JESD_RX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV1_SMPL1_SEL_BF_OFF ( 9)
#define JESD_RX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV1_SMPL1_SEL_BF_WID ( 3)
#define JESD_RX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV1_SMPL1_SEL_BF_MSK (0x00000E00)
#define JESD_RX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV1_SMPL1_SEL_BF_DEF (0x00000600)

///< Selects sample 0 of converter 2 data to shift register from IP sample
///< interface.                    Sample mapping same as converter 0 sample
///< 0.
#define JESD_RX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV2_SMPL0_SEL_BF_OFF (12)
#define JESD_RX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV2_SMPL0_SEL_BF_WID ( 3)
#define JESD_RX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV2_SMPL0_SEL_BF_MSK (0x00007000)
#define JESD_RX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV2_SMPL0_SEL_BF_DEF (0x00004000)

///< Selects sample 1 of converter 2 data to shift register from IP sample
///< interface.                    Sample mapping same as converter 0 sample
///< 0.
#define JESD_RX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV2_SMPL1_SEL_BF_OFF (15)
#define JESD_RX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV2_SMPL1_SEL_BF_WID ( 3)
#define JESD_RX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV2_SMPL1_SEL_BF_MSK (0x00038000)
#define JESD_RX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV2_SMPL1_SEL_BF_DEF (0x00028000)

///< Selects sample 0 of converter 3 data to shift register from IP sample
///< interface.                    Sample mapping same as converter 0 sample
///< 0.
#define JESD_RX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV3_SMPL0_SEL_BF_OFF (18)
#define JESD_RX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV3_SMPL0_SEL_BF_WID ( 3)
#define JESD_RX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV3_SMPL0_SEL_BF_MSK (0x001C0000)
#define JESD_RX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV3_SMPL0_SEL_BF_DEF (0x00180000)

///< Selects sample 1 of converter 3 data to shift register from IP sample
///< interface.                    Sample mapping same as converter 0 sample
///< 0.
#define JESD_RX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV3_SMPL1_SEL_BF_OFF (21)
#define JESD_RX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV3_SMPL1_SEL_BF_WID ( 3)
#define JESD_RX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV3_SMPL1_SEL_BF_MSK (0x00E00000)
#define JESD_RX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV3_SMPL1_SEL_BF_DEF (0x00E00000)


/** @brief JESDABC_RX_GLUE_MEM_JESDABC_RX_GLUE_RX_SMPL_VLD_MON_CFG register description at address offset 0x40
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_glue_MEM/jesdabc_rx_glue/RX_SMPL_VLD_MON_CFG
  * RX sample interface valid monitor configuration
  */

typedef union {
  struct {
    uint32_t RX_SMPL_VLD_MON_EN : 1;
    ///< When set to 1, enables logic to monitor RX sample valid pattern and
    ///< generate error.            In case of link down this enables monitor
    ///< logic to insert data til software resets link.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_VLD_ERR_MODE : 1;
    ///< 0 : Error is generated only if the valid count in a monitoring period
    ///< mismatches. Any pattern mismatch is ignored.             1 : Error
    ///< is generated  either the valid count in a monitoring period mismatches
    ///< or valid pattern mismatchess.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} jesd_rx_glue_smpl_vld_mon_cfg_reg_t;

#define JESD_RX_GLUE_SMPL_VLD_MON_CFG_DEFAULT (0x00000000U)
#define JESD_RX_GLUE_SMPL_VLD_MON_CFG_RD_MASK (0x00000003U)
#define JESD_RX_GLUE_SMPL_VLD_MON_CFG_WR_MASK (0x00000003U)


///< When set to 1, enables logic to monitor RX sample valid pattern and
///< generate error.            In case of link down this enables monitor
///< logic to insert data til software resets link.
#define JESD_RX_GLUE_SMPL_VLD_MON_CFG_RX_SMPL_VLD_MON_EN_BF_OFF ( 0)
#define JESD_RX_GLUE_SMPL_VLD_MON_CFG_RX_SMPL_VLD_MON_EN_BF_WID ( 1)
#define JESD_RX_GLUE_SMPL_VLD_MON_CFG_RX_SMPL_VLD_MON_EN_BF_MSK (0x00000001)
#define JESD_RX_GLUE_SMPL_VLD_MON_CFG_RX_SMPL_VLD_MON_EN_BF_DEF (0x00000000)

///< 0 : Error is generated only if the valid count in a monitoring period
///< mismatches. Any pattern mismatch is ignored.             1 : Error
///< is generated  either the valid count in a monitoring period mismatches
///< or valid pattern mismatchess.
#define JESD_RX_GLUE_SMPL_VLD_MON_CFG_RX_VLD_ERR_MODE_BF_OFF ( 1)
#define JESD_RX_GLUE_SMPL_VLD_MON_CFG_RX_VLD_ERR_MODE_BF_WID ( 1)
#define JESD_RX_GLUE_SMPL_VLD_MON_CFG_RX_VLD_ERR_MODE_BF_MSK (0x00000002)
#define JESD_RX_GLUE_SMPL_VLD_MON_CFG_RX_VLD_ERR_MODE_BF_DEF (0x00000000)


/** @brief JESDABC_RX_GLUE_MEM_JESDABC_RX_GLUE_RX_SMPL_VLD_MON_PERIOD register description at address offset 0x44
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_glue_MEM/jesdabc_rx_glue/RX_SMPL_VLD_MON_PERIOD
  * RX sample interface valid monitor period
  */

typedef union {
  struct {
    uint32_t RX_SMPL_VLD_MON_PERIOD : 7;
    ///< The sample valid from RX IP follows a periodic pattern of high and
    ///< low cycles of Rx sample clock.            This field indiactes periodicity
    ///< in terms of sample clocks and is dependant on IP configuration.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 25;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
  } ;
  uint32_t value;
} jesd_rx_glue_smpl_vld_mon_period_reg_t;

#define JESD_RX_GLUE_SMPL_VLD_MON_PERIOD_DEFAULT (0x00000000U)
#define JESD_RX_GLUE_SMPL_VLD_MON_PERIOD_RD_MASK (0x0000007fU)
#define JESD_RX_GLUE_SMPL_VLD_MON_PERIOD_WR_MASK (0x0000007fU)


///< The sample valid from RX IP follows a periodic pattern of high and
///< low cycles of Rx sample clock.            This field indiactes periodicity
///< in terms of sample clocks and is dependant on IP configuration.
#define JESD_RX_GLUE_SMPL_VLD_MON_PERIOD_RX_SMPL_VLD_MON_PERIOD_BF_OFF ( 0)
#define JESD_RX_GLUE_SMPL_VLD_MON_PERIOD_RX_SMPL_VLD_MON_PERIOD_BF_WID ( 7)
#define JESD_RX_GLUE_SMPL_VLD_MON_PERIOD_RX_SMPL_VLD_MON_PERIOD_BF_MSK (0x0000007F)
#define JESD_RX_GLUE_SMPL_VLD_MON_PERIOD_RX_SMPL_VLD_MON_PERIOD_BF_DEF (0x00000000)


/** @brief JESDABC_RX_GLUE_MEM_JESDABC_RX_GLUE_RX_SMPL_VLD_MON_ERR_THRSH register description at address offset 0x4c
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_glue_MEM/jesdabc_rx_glue/RX_SMPL_VLD_MON_ERR_THRSH
  * RX sample interface valid monitor err thrshold
  */

typedef union {
  struct {
    uint32_t RX_SMPL_VLD_MON_ERR_THRSH : 16;
    ///< The threshold value of mismatches detected which will trigger link
    ///< error generation.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} jesd_rx_glue_smpl_vld_mon_err_thrsh_reg_t;

#define JESD_RX_GLUE_SMPL_VLD_MON_ERR_THRSH_DEFAULT (0x00000000U)
#define JESD_RX_GLUE_SMPL_VLD_MON_ERR_THRSH_RD_MASK (0x0000ffffU)
#define JESD_RX_GLUE_SMPL_VLD_MON_ERR_THRSH_WR_MASK (0x0000ffffU)


///< The threshold value of mismatches detected which will trigger link
///< error generation.
#define JESD_RX_GLUE_SMPL_VLD_MON_ERR_THRSH_RX_SMPL_VLD_MON_ERR_THRSH_BF_OFF ( 0)
#define JESD_RX_GLUE_SMPL_VLD_MON_ERR_THRSH_RX_SMPL_VLD_MON_ERR_THRSH_BF_WID (16)
#define JESD_RX_GLUE_SMPL_VLD_MON_ERR_THRSH_RX_SMPL_VLD_MON_ERR_THRSH_BF_MSK (0x0000FFFF)
#define JESD_RX_GLUE_SMPL_VLD_MON_ERR_THRSH_RX_SMPL_VLD_MON_ERR_THRSH_BF_DEF (0x00000000)


/** @brief JESDABC_RX_GLUE_MEM_JESDABC_RX_GLUE_RX_SMPL_INTF_CAP_EN register description at address offset 0x50
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_glue_MEM/jesdabc_rx_glue/RX_SMPL_INTF_CAP_EN
  * RX sample interface data capture enable
  */

typedef union {
  struct {
    uint32_t RX_SMPL_INTF_CAP_EN : 1;
    ///< When set to 1 enables capturing the RXIP sample data. This is a debug
    ///< feature and will not affect funcationality ox JESD RX path.
    ///< The next valid data after this bit is set is captured and retained
    ///< in seperate registers which can be accessed.        Status bit is
    ///< set after capturing data. The data can be captured multiple times
    ///< by clearing teh status bit after reading data.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_rx_glue_smpl_intf_cap_en_reg_t;

#define JESD_RX_GLUE_SMPL_INTF_CAP_EN_DEFAULT (0x00000000U)
#define JESD_RX_GLUE_SMPL_INTF_CAP_EN_RD_MASK (0x00000001U)
#define JESD_RX_GLUE_SMPL_INTF_CAP_EN_WR_MASK (0x00000001U)


///< When set to 1 enables capturing the RXIP sample data. This is a debug
///< feature and will not affect funcationality ox JESD RX path.
///< The next valid data after this bit is set is captured and retained
///< in seperate registers which can be accessed.        Status bit is
///< set after capturing data. The data can be captured multiple times
///< by clearing teh status bit after reading data.
#define JESD_RX_GLUE_SMPL_INTF_CAP_EN_RX_SMPL_INTF_CAP_EN_BF_OFF ( 0)
#define JESD_RX_GLUE_SMPL_INTF_CAP_EN_RX_SMPL_INTF_CAP_EN_BF_WID ( 1)
#define JESD_RX_GLUE_SMPL_INTF_CAP_EN_RX_SMPL_INTF_CAP_EN_BF_MSK (0x00000001)
#define JESD_RX_GLUE_SMPL_INTF_CAP_EN_RX_SMPL_INTF_CAP_EN_BF_DEF (0x00000000)


/** @brief JESDABC_RX_GLUE_MEM_JESDABC_RX_GLUE_RX_SMPL_INTF_CAP_STS register description at address offset 0x54
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_glue_MEM/jesdabc_rx_glue/RX_SMPL_INTF_CAP_STS
  * RX sample interface data capture status
  */

typedef union {
  struct {
    uint32_t RX_SMPL_INTF_CAP_STS : 1;
    ///< This bit indicates that RXIP sample interface data is captured and
    ///< ready to be accessed if the capture is enabled.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_rx_glue_smpl_intf_cap_sts_reg_t;

#define JESD_RX_GLUE_SMPL_INTF_CAP_STS_DEFAULT (0x00000000U)
#define JESD_RX_GLUE_SMPL_INTF_CAP_STS_RD_MASK (0x00000001U)
#define JESD_RX_GLUE_SMPL_INTF_CAP_STS_WR_MASK (0x00000000U)


///< This bit indicates that RXIP sample interface data is captured and
///< ready to be accessed if the capture is enabled.
#define JESD_RX_GLUE_SMPL_INTF_CAP_STS_RX_SMPL_INTF_CAP_STS_BF_OFF ( 0)
#define JESD_RX_GLUE_SMPL_INTF_CAP_STS_RX_SMPL_INTF_CAP_STS_BF_WID ( 1)
#define JESD_RX_GLUE_SMPL_INTF_CAP_STS_RX_SMPL_INTF_CAP_STS_BF_MSK (0x00000001)
#define JESD_RX_GLUE_SMPL_INTF_CAP_STS_RX_SMPL_INTF_CAP_STS_BF_DEF (0x00000000)


/** @brief JESDABC_RX_GLUE_MEM_JESDABC_RX_GLUE_RX_SMPL_INTF_CAP_CLR register description at address offset 0x5c
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_glue_MEM/jesdabc_rx_glue/RX_SMPL_INTF_CAP_CLR
  * RX sample interface data capture clear
  */

typedef union {
  struct {
    uint32_t RX_SMPL_INTF_CAP_CLR : 1;
    ///< When set to clears the data capture status bit which enables capturing
    ///< nect set of data if enabled.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_rx_glue_smpl_intf_cap_clr_reg_t;

#define JESD_RX_GLUE_SMPL_INTF_CAP_CLR_DEFAULT (0x00000000U)
#define JESD_RX_GLUE_SMPL_INTF_CAP_CLR_RD_MASK (0x00000001U)
#define JESD_RX_GLUE_SMPL_INTF_CAP_CLR_WR_MASK (0x00000001U)


///< When set to clears the data capture status bit which enables capturing
///< nect set of data if enabled.
#define JESD_RX_GLUE_SMPL_INTF_CAP_CLR_RX_SMPL_INTF_CAP_CLR_BF_OFF ( 0)
#define JESD_RX_GLUE_SMPL_INTF_CAP_CLR_RX_SMPL_INTF_CAP_CLR_BF_WID ( 1)
#define JESD_RX_GLUE_SMPL_INTF_CAP_CLR_RX_SMPL_INTF_CAP_CLR_BF_MSK (0x00000001)
#define JESD_RX_GLUE_SMPL_INTF_CAP_CLR_RX_SMPL_INTF_CAP_CLR_BF_DEF (0x00000000)


/** @brief JESDABC_RX_GLUE_MEM_JESDABC_RX_GLUE_RX_SMPL_CLK_ERR_STS register description at address offset 0x60
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_glue_MEM/jesdabc_rx_glue/RX_SMPL_CLK_ERR_STS
  * Status register for errors detected in  Rx Sample Clock domain
  */

typedef union {
  struct {
    uint32_t ERR_STS : 2;
    ///< Status register for  errors detected in JESD glue logic in crux clock
    ///< domain which needs to set alarms/interrupts.            The register
    ///< value is sticky once set and only cleared upon writing to corresponding
    ///< error clear register.             This register is set if the corresponding
    ///< erro is detected irrespective of the value of the error generation
    ///< enable.            The mapping of individual bits is shown below.
    ///< [0]  - RX link error.               [1]  - RX pre buffer overflow.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} jesd_rx_glue_smpl_clk_err_sts_reg_t;

#define JESD_RX_GLUE_SMPL_CLK_ERR_STS_DEFAULT (0x00000000U)
#define JESD_RX_GLUE_SMPL_CLK_ERR_STS_RD_MASK (0x00000003U)
#define JESD_RX_GLUE_SMPL_CLK_ERR_STS_WR_MASK (0x00000000U)


///< Status register for  errors detected in JESD glue logic in crux clock
///< domain which needs to set alarms/interrupts.            The register
///< value is sticky once set and only cleared upon writing to corresponding
///< error clear register.             This register is set if the corresponding
///< erro is detected irrespective of the value of the error generation
///< enable.            The mapping of individual bits is shown below.
///< [0]  - RX link error.               [1]  - RX pre buffer overflow.
#define JESD_RX_GLUE_SMPL_CLK_ERR_STS_ERR_STS_BF_OFF ( 0)
#define JESD_RX_GLUE_SMPL_CLK_ERR_STS_ERR_STS_BF_WID ( 2)
#define JESD_RX_GLUE_SMPL_CLK_ERR_STS_ERR_STS_BF_MSK (0x00000003)
#define JESD_RX_GLUE_SMPL_CLK_ERR_STS_ERR_STS_BF_DEF (0x00000000)


/** @brief JESDABC_RX_GLUE_MEM_JESDABC_RX_GLUE_RX_SMPL_CLK_INTR_HIGH_EN register description at address offset 0x64
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_glue_MEM/jesdabc_rx_glue/RX_SMPL_CLK_INTR_HIGH_EN
  * High Priority Enable register for RX Interrupts for windowed Counter Threshold errors detected in RX Sample clock domain
  */

typedef union {
  struct {
    uint32_t WNDW_INTR_HIGH_EN : 2;
    ///< This register contains corresponding High Priority Interrupt enable
    ///< bits for all the error conditions detected in RX Sample clock windowed
    ///< counter threshold error Status register.             Each bit of this
    ///< register enable High Priority Interrupt for corresponding error in
    ///< the status register.             The mapping of bits is same as RX
    ///< RSFEC clock windowed counter threshold error Status register.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} jesd_rx_glue_smpl_clk_intr_high_en_reg_t;

#define JESD_RX_GLUE_SMPL_CLK_INTR_HIGH_EN_DEFAULT (0x00000000U)
#define JESD_RX_GLUE_SMPL_CLK_INTR_HIGH_EN_RD_MASK (0x00000003U)
#define JESD_RX_GLUE_SMPL_CLK_INTR_HIGH_EN_WR_MASK (0x00000003U)


///< This register contains corresponding High Priority Interrupt enable
///< bits for all the error conditions detected in RX Sample clock windowed
///< counter threshold error Status register.             Each bit of this
///< register enable High Priority Interrupt for corresponding error in
///< the status register.             The mapping of bits is same as RX
///< RSFEC clock windowed counter threshold error Status register.
#define JESD_RX_GLUE_SMPL_CLK_INTR_HIGH_EN_WNDW_INTR_HIGH_EN_BF_OFF ( 0)
#define JESD_RX_GLUE_SMPL_CLK_INTR_HIGH_EN_WNDW_INTR_HIGH_EN_BF_WID ( 2)
#define JESD_RX_GLUE_SMPL_CLK_INTR_HIGH_EN_WNDW_INTR_HIGH_EN_BF_MSK (0x00000003)
#define JESD_RX_GLUE_SMPL_CLK_INTR_HIGH_EN_WNDW_INTR_HIGH_EN_BF_DEF (0x00000000)


/** @brief JESDABC_RX_GLUE_MEM_JESDABC_RX_GLUE_RX_SMPL_CLK_INTR_LOW_EN register description at address offset 0x68
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_glue_MEM/jesdabc_rx_glue/RX_SMPL_CLK_INTR_LOW_EN
  * Low Priority Enable register for RX Interrupts for windowed Counter Threshold errors detected in RX Sample clock domain
  */

typedef union {
  struct {
    uint32_t WNDW_INTR_LOW_EN : 2;
    ///< This register contains corresponding Low Priority Interrupt enable
    ///< bits for all the error conditions detected in RX Sample clock windowed
    ///< counter threshold error Status register.             Each bit of this
    ///< register enable Low Priority Interrupt for corresponding error in
    ///< the status register.             The mapping of bits is same as RX
    ///< RSFEC clock windowed counter threshold error Status register.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} jesd_rx_glue_smpl_clk_intr_low_en_reg_t;

#define JESD_RX_GLUE_SMPL_CLK_INTR_LOW_EN_DEFAULT (0x00000000U)
#define JESD_RX_GLUE_SMPL_CLK_INTR_LOW_EN_RD_MASK (0x00000003U)
#define JESD_RX_GLUE_SMPL_CLK_INTR_LOW_EN_WR_MASK (0x00000003U)


///< This register contains corresponding Low Priority Interrupt enable
///< bits for all the error conditions detected in RX Sample clock windowed
///< counter threshold error Status register.             Each bit of this
///< register enable Low Priority Interrupt for corresponding error in
///< the status register.             The mapping of bits is same as RX
///< RSFEC clock windowed counter threshold error Status register.
#define JESD_RX_GLUE_SMPL_CLK_INTR_LOW_EN_WNDW_INTR_LOW_EN_BF_OFF ( 0)
#define JESD_RX_GLUE_SMPL_CLK_INTR_LOW_EN_WNDW_INTR_LOW_EN_BF_WID ( 2)
#define JESD_RX_GLUE_SMPL_CLK_INTR_LOW_EN_WNDW_INTR_LOW_EN_BF_MSK (0x00000003)
#define JESD_RX_GLUE_SMPL_CLK_INTR_LOW_EN_WNDW_INTR_LOW_EN_BF_DEF (0x00000000)


/** @brief JESDABC_RX_GLUE_MEM_JESDABC_RX_GLUE_RX_SMPL_CLK_ALM_EN register description at address offset 0x6c
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_glue_MEM/jesdabc_rx_glue/RX_SMPL_CLK_ALM_EN
  * Enable register for Alarms for errors detected in  Rx Sample Clock domain
  */

typedef union {
  struct {
    uint32_t ALM_EN : 2;
    ///< This register contains corresponding enable bits for all the Alarm
    ///< conditions detected in  Rx Sample Clock  error Status register.
    ///< Each bit of this register enable alarm for corresponding error in
    ///< the status register.             The mapping of bits is same as  Rx
    ///< Sample Clock  error Status register.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} jesd_rx_glue_smpl_clk_alm_en_reg_t;

#define JESD_RX_GLUE_SMPL_CLK_ALM_EN_DEFAULT (0x00000000U)
#define JESD_RX_GLUE_SMPL_CLK_ALM_EN_RD_MASK (0x00000003U)
#define JESD_RX_GLUE_SMPL_CLK_ALM_EN_WR_MASK (0x00000003U)


///< This register contains corresponding enable bits for all the Alarm
///< conditions detected in  Rx Sample Clock  error Status register.
///< Each bit of this register enable alarm for corresponding error in
///< the status register.             The mapping of bits is same as  Rx
///< Sample Clock  error Status register.
#define JESD_RX_GLUE_SMPL_CLK_ALM_EN_ALM_EN_BF_OFF ( 0)
#define JESD_RX_GLUE_SMPL_CLK_ALM_EN_ALM_EN_BF_WID ( 2)
#define JESD_RX_GLUE_SMPL_CLK_ALM_EN_ALM_EN_BF_MSK (0x00000003)
#define JESD_RX_GLUE_SMPL_CLK_ALM_EN_ALM_EN_BF_DEF (0x00000000)


/** @brief JESDABC_RX_GLUE_MEM_JESDABC_RX_GLUE_RX_SMPL_CLK_ERR_CLR register description at address offset 0x70
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_glue_MEM/jesdabc_rx_glue/RX_SMPL_CLK_ERR_CLR
  * Clear register for errors detected in  Rx Sample Clock domain
  */

typedef union {
  struct {
    uint32_t ERR_CLR : 2;
    ///< This register contains clear bits for all the error conditions detected
    ///< in  Rx Sample Clock  error Status register.             Each bit of
    ///< this register when written clears the corresponding bit in the error
    ///< status status register.            The clear operation is done for
    ///< only one cycle and subsequent error bits can set the status registers.
    ///< The mapping of bits is same as  Rx Sample Clock  error Status register.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} jesd_rx_glue_smpl_clk_err_clr_reg_t;

#define JESD_RX_GLUE_SMPL_CLK_ERR_CLR_DEFAULT (0x00000000U)
#define JESD_RX_GLUE_SMPL_CLK_ERR_CLR_RD_MASK (0x00000003U)
#define JESD_RX_GLUE_SMPL_CLK_ERR_CLR_WR_MASK (0x00000003U)


///< This register contains clear bits for all the error conditions detected
///< in  Rx Sample Clock  error Status register.             Each bit of
///< this register when written clears the corresponding bit in the error
///< status status register.            The clear operation is done for
///< only one cycle and subsequent error bits can set the status registers.
///< The mapping of bits is same as  Rx Sample Clock  error Status register.
#define JESD_RX_GLUE_SMPL_CLK_ERR_CLR_ERR_CLR_BF_OFF ( 0)
#define JESD_RX_GLUE_SMPL_CLK_ERR_CLR_ERR_CLR_BF_WID ( 2)
#define JESD_RX_GLUE_SMPL_CLK_ERR_CLR_ERR_CLR_BF_MSK (0x00000003)
#define JESD_RX_GLUE_SMPL_CLK_ERR_CLR_ERR_CLR_BF_DEF (0x00000000)


/** @brief JESDABC_RX_GLUE_MEM_JESDABC_RX_GLUE_RX_SMPL_CLK_ERR_FRC register description at address offset 0x74
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_glue_MEM/jesdabc_rx_glue/RX_SMPL_CLK_ERR_FRC
  * Force register for errors detected in  Rx Sample Clock domain
  */

typedef union {
  struct {
    uint32_t ERR_FRC : 2;
    ///< This register contains forcr bits for all the error conditions detected
    ///< in  Rx Sample Clock  error Status register.             Each bit of
    ///< this register when written force the corresponding bit in the error
    ///< status register to 1 irrespective of the error condition (active value
    ///< of the error) until written back to 0.                         The
    ///< mapping of bits is same as  Rx Sample Clock  error Status register.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} jesd_rx_glue_smpl_clk_err_frc_reg_t;

#define JESD_RX_GLUE_SMPL_CLK_ERR_FRC_DEFAULT (0x00000000U)
#define JESD_RX_GLUE_SMPL_CLK_ERR_FRC_RD_MASK (0x00000003U)
#define JESD_RX_GLUE_SMPL_CLK_ERR_FRC_WR_MASK (0x00000003U)


///< This register contains forcr bits for all the error conditions detected
///< in  Rx Sample Clock  error Status register.             Each bit of
///< this register when written force the corresponding bit in the error
///< status register to 1 irrespective of the error condition (active value
///< of the error) until written back to 0.                         The
///< mapping of bits is same as  Rx Sample Clock  error Status register.
#define JESD_RX_GLUE_SMPL_CLK_ERR_FRC_ERR_FRC_BF_OFF ( 0)
#define JESD_RX_GLUE_SMPL_CLK_ERR_FRC_ERR_FRC_BF_WID ( 2)
#define JESD_RX_GLUE_SMPL_CLK_ERR_FRC_ERR_FRC_BF_MSK (0x00000003)
#define JESD_RX_GLUE_SMPL_CLK_ERR_FRC_ERR_FRC_BF_DEF (0x00000000)


/** @brief JESDABC_RX_GLUE_MEM_JESDABC_RX_GLUE_RX_SMPL_INTF_CAP_DATA[128] register description at address offset 0x200
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_glue_MEM/jesdabc_rx_glue/RX_SMPL_INTF_CAP_DATA
  * RX sample interface capture data
  */

typedef union {
  struct {
    uint32_t RX_SMPL_INTF_CAP_DATA : 32;
    ///< RXIP sammple interface data. The interface is 4096 bit wide and 128
    ///< 32-bit registers hold the total sample interface data.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_rx_glue_smpl_intf_cap_data_reg_t;

#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA_DEFAULT (0x00000000U)
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA_RD_MASK (0xffffffffU)
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA_WR_MASK (0x00000000U)


///< RXIP sammple interface data. The interface is 4096 bit wide and 128
///< 32-bit registers hold the total sample interface data.
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA_RX_SMPL_INTF_CAP_DATA_BF_OFF ( 0)
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA_RX_SMPL_INTF_CAP_DATA_BF_WID (32)
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA_RX_SMPL_INTF_CAP_DATA_BF_MSK (0xFFFFFFFF)
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA_RX_SMPL_INTF_CAP_DATA_BF_DEF (0x00000000)
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA_ARR_SZ0 (128)
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_RX_GLUE_MEM_JESDABC_RX_GLUE_RX_SMPL_CLK_SIG_MON_EN register description at address offset 0x400
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_glue_MEM/jesdabc_rx_glue/RX_SMPL_CLK_SIG_MON_EN
  * Rx Sample clock signal Monitor enable
  */

typedef union {
  struct {
    uint32_t MON_EN : 1;
    ///< When set to 1 enables the signals monitor used to capture debug signals
    ///< in crux_clock domain.                   This signal is used as clock
    ///< gating signal.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_rx_glue_smpl_clk_sig_mon_en_reg_t;

#define JESD_RX_GLUE_SMPL_CLK_SIG_MON_EN_DEFAULT (0x00000000U)
#define JESD_RX_GLUE_SMPL_CLK_SIG_MON_EN_RD_MASK (0x00000001U)
#define JESD_RX_GLUE_SMPL_CLK_SIG_MON_EN_WR_MASK (0x00000001U)


///< When set to 1 enables the signals monitor used to capture debug signals
///< in crux_clock domain.                   This signal is used as clock
///< gating signal.
#define JESD_RX_GLUE_SMPL_CLK_SIG_MON_EN_MON_EN_BF_OFF ( 0)
#define JESD_RX_GLUE_SMPL_CLK_SIG_MON_EN_MON_EN_BF_WID ( 1)
#define JESD_RX_GLUE_SMPL_CLK_SIG_MON_EN_MON_EN_BF_MSK (0x00000001)
#define JESD_RX_GLUE_SMPL_CLK_SIG_MON_EN_MON_EN_BF_DEF (0x00000000)


/** @brief JESDABC_RX_GLUE_MEM_JESDABC_RX_GLUE_RX_SMPL_CLK_SIG_MON_CAP_EN register description at address offset 0x404
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_glue_MEM/jesdabc_rx_glue/RX_SMPL_CLK_SIG_MON_CAP_EN
  * Rx Sample clock signal Monitor capture enable
  */

typedef union {
  struct {
    uint32_t CAP_EN : 1;
    ///< When set to 1 enables the signal capture by the monitor depending
    ///< on the mode.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_rx_glue_smpl_clk_sig_mon_cap_en_reg_t;

#define JESD_RX_GLUE_SMPL_CLK_SIG_MON_CAP_EN_DEFAULT (0x00000000U)
#define JESD_RX_GLUE_SMPL_CLK_SIG_MON_CAP_EN_RD_MASK (0x00000001U)
#define JESD_RX_GLUE_SMPL_CLK_SIG_MON_CAP_EN_WR_MASK (0x00000001U)


///< When set to 1 enables the signal capture by the monitor depending
///< on the mode.
#define JESD_RX_GLUE_SMPL_CLK_SIG_MON_CAP_EN_CAP_EN_BF_OFF ( 0)
#define JESD_RX_GLUE_SMPL_CLK_SIG_MON_CAP_EN_CAP_EN_BF_WID ( 1)
#define JESD_RX_GLUE_SMPL_CLK_SIG_MON_CAP_EN_CAP_EN_BF_MSK (0x00000001)
#define JESD_RX_GLUE_SMPL_CLK_SIG_MON_CAP_EN_CAP_EN_BF_DEF (0x00000000)


/** @brief JESDABC_RX_GLUE_MEM_JESDABC_RX_GLUE_RX_SMPL_CLK_SIG_MON_STS_CLR register description at address offset 0x408
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_glue_MEM/jesdabc_rx_glue/RX_SMPL_CLK_SIG_MON_STS_CLR
  * Rx Sample clock signal Monitor status clear
  */

typedef union {
  struct {
    uint32_t STS_CLR : 1;
    ///< Writing 1 willclear the status and capture registers. The clear opertaion
    ///< is for one cycle and register holds the last written value.
    ///< Clearing status when capture enable is set will cause the signal to
    ///< be re-captured.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_rx_glue_smpl_clk_sig_mon_sts_clr_reg_t;

#define JESD_RX_GLUE_SMPL_CLK_SIG_MON_STS_CLR_DEFAULT (0x00000000U)
#define JESD_RX_GLUE_SMPL_CLK_SIG_MON_STS_CLR_RD_MASK (0x00000001U)
#define JESD_RX_GLUE_SMPL_CLK_SIG_MON_STS_CLR_WR_MASK (0x00000001U)


///< Writing 1 willclear the status and capture registers. The clear opertaion
///< is for one cycle and register holds the last written value.
///< Clearing status when capture enable is set will cause the signal to
///< be re-captured.
#define JESD_RX_GLUE_SMPL_CLK_SIG_MON_STS_CLR_STS_CLR_BF_OFF ( 0)
#define JESD_RX_GLUE_SMPL_CLK_SIG_MON_STS_CLR_STS_CLR_BF_WID ( 1)
#define JESD_RX_GLUE_SMPL_CLK_SIG_MON_STS_CLR_STS_CLR_BF_MSK (0x00000001)
#define JESD_RX_GLUE_SMPL_CLK_SIG_MON_STS_CLR_STS_CLR_BF_DEF (0x00000000)


/** @brief JESDABC_RX_GLUE_MEM_JESDABC_RX_GLUE_RX_SMPL_CLK_SIG_MON_CFG register description at address offset 0x40c
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_glue_MEM/jesdabc_rx_glue/RX_SMPL_CLK_SIG_MON_CFG
  * Rx Sample clock signal Monitor configuration
  */

typedef union {
  struct {
    uint32_t REL_CAP_EN : 1;
    ///< 0- All the signals are captured individually based on the trigger
    ///< event.            1- relative capture mode: Event on signal 0 will
    ///< trigger the capture of all signals.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TRIG_MODE : 2;
    ///< 2'b00- Signals are captured next cycle after capture enable is set
    ///< to 1.            2'b01- Reserved.            2'b10- Signal capture
    ///< is triggered by rising  edge of signal after capture enable is set
    ///< to 1.            2'b11- Signal capture is triggered by falling edge
    ///< of signal after capture enable is set to 1.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t CAP_CYCLES : 7;
    ///< Specifes the number of clock cycles the signal values are acaptured
    ///< after capture event.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} jesd_rx_glue_smpl_clk_sig_mon_cfg_reg_t;

#define JESD_RX_GLUE_SMPL_CLK_SIG_MON_CFG_DEFAULT (0x00000000U)
#define JESD_RX_GLUE_SMPL_CLK_SIG_MON_CFG_RD_MASK (0x000003ffU)
#define JESD_RX_GLUE_SMPL_CLK_SIG_MON_CFG_WR_MASK (0x000003ffU)


///< 0- All the signals are captured individually based on the trigger
///< event.            1- relative capture mode: Event on signal 0 will
///< trigger the capture of all signals.
#define JESD_RX_GLUE_SMPL_CLK_SIG_MON_CFG_REL_CAP_EN_BF_OFF ( 0)
#define JESD_RX_GLUE_SMPL_CLK_SIG_MON_CFG_REL_CAP_EN_BF_WID ( 1)
#define JESD_RX_GLUE_SMPL_CLK_SIG_MON_CFG_REL_CAP_EN_BF_MSK (0x00000001)
#define JESD_RX_GLUE_SMPL_CLK_SIG_MON_CFG_REL_CAP_EN_BF_DEF (0x00000000)

///< 2'b00- Signals are captured next cycle after capture enable is set
///< to 1.            2'b01- Reserved.            2'b10- Signal capture
///< is triggered by rising  edge of signal after capture enable is set
///< to 1.            2'b11- Signal capture is triggered by falling edge
///< of signal after capture enable is set to 1.
#define JESD_RX_GLUE_SMPL_CLK_SIG_MON_CFG_TRIG_MODE_BF_OFF ( 1)
#define JESD_RX_GLUE_SMPL_CLK_SIG_MON_CFG_TRIG_MODE_BF_WID ( 2)
#define JESD_RX_GLUE_SMPL_CLK_SIG_MON_CFG_TRIG_MODE_BF_MSK (0x00000006)
#define JESD_RX_GLUE_SMPL_CLK_SIG_MON_CFG_TRIG_MODE_BF_DEF (0x00000000)

///< Specifes the number of clock cycles the signal values are acaptured
///< after capture event.
#define JESD_RX_GLUE_SMPL_CLK_SIG_MON_CFG_CAP_CYCLES_BF_OFF ( 3)
#define JESD_RX_GLUE_SMPL_CLK_SIG_MON_CFG_CAP_CYCLES_BF_WID ( 7)
#define JESD_RX_GLUE_SMPL_CLK_SIG_MON_CFG_CAP_CYCLES_BF_MSK (0x000003F8)
#define JESD_RX_GLUE_SMPL_CLK_SIG_MON_CFG_CAP_CYCLES_BF_DEF (0x00000000)


/** @brief JESDABC_RX_GLUE_MEM_JESDABC_RX_GLUE_RX_SMPL_CLK_DBG_SIG_SEL register description at address offset 0x410
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_glue_MEM/jesdabc_rx_glue/RX_SMPL_CLK_DBG_SIG_SEL
  * Rx Sample clock debug mux select
  */

typedef union {
  struct {
    uint32_t SIG0_MUX_SEL : 4;
    ///< Selects the signal to be monitered. TBD.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t SIG1_MUX_SEL : 4;
    ///< Selects the signal to be monitered. TBD.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t SIG2_MUX_SEL : 4;
    ///< Selects the signal to be monitered. TBD.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t SIG3_MUX_SEL : 4;
    ///< Selects the signal to be monitered. TBD.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} jesd_rx_glue_smpl_clk_dbg_sig_sel_reg_t;

#define JESD_RX_GLUE_SMPL_CLK_DBG_SIG_SEL_DEFAULT (0x00000000U)
#define JESD_RX_GLUE_SMPL_CLK_DBG_SIG_SEL_RD_MASK (0x0000ffffU)
#define JESD_RX_GLUE_SMPL_CLK_DBG_SIG_SEL_WR_MASK (0x0000ffffU)


///< Selects the signal to be monitered. TBD.
#define JESD_RX_GLUE_SMPL_CLK_DBG_SIG_SEL_SIG0_MUX_SEL_BF_OFF ( 0)
#define JESD_RX_GLUE_SMPL_CLK_DBG_SIG_SEL_SIG0_MUX_SEL_BF_WID ( 4)
#define JESD_RX_GLUE_SMPL_CLK_DBG_SIG_SEL_SIG0_MUX_SEL_BF_MSK (0x0000000F)
#define JESD_RX_GLUE_SMPL_CLK_DBG_SIG_SEL_SIG0_MUX_SEL_BF_DEF (0x00000000)

///< Selects the signal to be monitered. TBD.
#define JESD_RX_GLUE_SMPL_CLK_DBG_SIG_SEL_SIG1_MUX_SEL_BF_OFF ( 4)
#define JESD_RX_GLUE_SMPL_CLK_DBG_SIG_SEL_SIG1_MUX_SEL_BF_WID ( 4)
#define JESD_RX_GLUE_SMPL_CLK_DBG_SIG_SEL_SIG1_MUX_SEL_BF_MSK (0x000000F0)
#define JESD_RX_GLUE_SMPL_CLK_DBG_SIG_SEL_SIG1_MUX_SEL_BF_DEF (0x00000000)

///< Selects the signal to be monitered. TBD.
#define JESD_RX_GLUE_SMPL_CLK_DBG_SIG_SEL_SIG2_MUX_SEL_BF_OFF ( 8)
#define JESD_RX_GLUE_SMPL_CLK_DBG_SIG_SEL_SIG2_MUX_SEL_BF_WID ( 4)
#define JESD_RX_GLUE_SMPL_CLK_DBG_SIG_SEL_SIG2_MUX_SEL_BF_MSK (0x00000F00)
#define JESD_RX_GLUE_SMPL_CLK_DBG_SIG_SEL_SIG2_MUX_SEL_BF_DEF (0x00000000)

///< Selects the signal to be monitered. TBD.
#define JESD_RX_GLUE_SMPL_CLK_DBG_SIG_SEL_SIG3_MUX_SEL_BF_OFF (12)
#define JESD_RX_GLUE_SMPL_CLK_DBG_SIG_SEL_SIG3_MUX_SEL_BF_WID ( 4)
#define JESD_RX_GLUE_SMPL_CLK_DBG_SIG_SEL_SIG3_MUX_SEL_BF_MSK (0x0000F000)
#define JESD_RX_GLUE_SMPL_CLK_DBG_SIG_SEL_SIG3_MUX_SEL_BF_DEF (0x00000000)


/** @brief JESDABC_RX_GLUE_MEM_JESDABC_RX_GLUE_RX_SMPL_CLK_DBG_CAP_VLD register description at address offset 0x414
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_glue_MEM/jesdabc_rx_glue/RX_SMPL_CLK_DBG_CAP_VLD
  * Rx Sample clock debug signal capture valid
  */

typedef union {
  struct {
    uint32_t SIG0_CAP_VLD : 1;
    ///< Indicates the signal 0 capture is complete.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t SIG1_CAP_VLD : 1;
    ///< Indicates the signal 1 capture is complete.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
    uint32_t SIG2_CAP_VLD : 1;
    ///< Indicates the signal 2 capture is complete.
    ///< AccessType="RO" BitOffset="2" ResetValue="0x0"
    uint32_t SIG3_CAP_VLD : 1;
    ///< Indicates the signal 3 capture is complete.
    ///< AccessType="RO" BitOffset="3" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} jesd_rx_glue_smpl_clk_dbg_cap_vld_reg_t;

#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_VLD_DEFAULT (0x00000000U)
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_VLD_RD_MASK (0x0000000fU)
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_VLD_WR_MASK (0x00000000U)


///< Indicates the signal 0 capture is complete.
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_VLD_SIG0_CAP_VLD_BF_OFF ( 0)
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_VLD_SIG0_CAP_VLD_BF_WID ( 1)
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_VLD_SIG0_CAP_VLD_BF_MSK (0x00000001)
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_VLD_SIG0_CAP_VLD_BF_DEF (0x00000000)

///< Indicates the signal 1 capture is complete.
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_VLD_SIG1_CAP_VLD_BF_OFF ( 1)
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_VLD_SIG1_CAP_VLD_BF_WID ( 1)
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_VLD_SIG1_CAP_VLD_BF_MSK (0x00000002)
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_VLD_SIG1_CAP_VLD_BF_DEF (0x00000000)

///< Indicates the signal 2 capture is complete.
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_VLD_SIG2_CAP_VLD_BF_OFF ( 2)
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_VLD_SIG2_CAP_VLD_BF_WID ( 1)
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_VLD_SIG2_CAP_VLD_BF_MSK (0x00000004)
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_VLD_SIG2_CAP_VLD_BF_DEF (0x00000000)

///< Indicates the signal 3 capture is complete.
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_VLD_SIG3_CAP_VLD_BF_OFF ( 3)
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_VLD_SIG3_CAP_VLD_BF_WID ( 1)
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_VLD_SIG3_CAP_VLD_BF_MSK (0x00000008)
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_VLD_SIG3_CAP_VLD_BF_DEF (0x00000000)


/** @brief JESDABC_RX_GLUE_MEM_JESDABC_RX_GLUE_RX_SP_MON_CAP_VLD register description at address offset 0x420
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_glue_MEM/jesdabc_rx_glue/RX_SP_MON_CAP_VLD
  * Sync point debug signal capture valid
  */

typedef union {
  struct {
    uint32_t SIG0_CAP_VLD : 1;
    ///< Indicates the signal 0 capture is complete.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t SIG1_CAP_VLD : 1;
    ///< Indicates the signal 1 capture is complete.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
    uint32_t SIG2_CAP_VLD : 1;
    ///< Indicates the signal 2 capture is complete.
    ///< AccessType="RO" BitOffset="2" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} jesd_rx_glue_sp_mon_cap_vld_reg_t;

#define JESD_RX_GLUE_SP_MON_CAP_VLD_DEFAULT (0x00000000U)
#define JESD_RX_GLUE_SP_MON_CAP_VLD_RD_MASK (0x00000007U)
#define JESD_RX_GLUE_SP_MON_CAP_VLD_WR_MASK (0x00000000U)


///< Indicates the signal 0 capture is complete.
#define JESD_RX_GLUE_SP_MON_CAP_VLD_SIG0_CAP_VLD_BF_OFF ( 0)
#define JESD_RX_GLUE_SP_MON_CAP_VLD_SIG0_CAP_VLD_BF_WID ( 1)
#define JESD_RX_GLUE_SP_MON_CAP_VLD_SIG0_CAP_VLD_BF_MSK (0x00000001)
#define JESD_RX_GLUE_SP_MON_CAP_VLD_SIG0_CAP_VLD_BF_DEF (0x00000000)

///< Indicates the signal 1 capture is complete.
#define JESD_RX_GLUE_SP_MON_CAP_VLD_SIG1_CAP_VLD_BF_OFF ( 1)
#define JESD_RX_GLUE_SP_MON_CAP_VLD_SIG1_CAP_VLD_BF_WID ( 1)
#define JESD_RX_GLUE_SP_MON_CAP_VLD_SIG1_CAP_VLD_BF_MSK (0x00000002)
#define JESD_RX_GLUE_SP_MON_CAP_VLD_SIG1_CAP_VLD_BF_DEF (0x00000000)

///< Indicates the signal 2 capture is complete.
#define JESD_RX_GLUE_SP_MON_CAP_VLD_SIG2_CAP_VLD_BF_OFF ( 2)
#define JESD_RX_GLUE_SP_MON_CAP_VLD_SIG2_CAP_VLD_BF_WID ( 1)
#define JESD_RX_GLUE_SP_MON_CAP_VLD_SIG2_CAP_VLD_BF_MSK (0x00000004)
#define JESD_RX_GLUE_SP_MON_CAP_VLD_SIG2_CAP_VLD_BF_DEF (0x00000000)


/** @brief JESDABC_RX_GLUE_MEM_JESDABC_RX_GLUE_RX_SMPL_CLK_DBG_CAP_REG0[4] register description at address offset 0x500
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_glue_MEM/jesdabc_rx_glue/RX_SMPL_CLK_DBG_CAP_REG0
  * Rx Sample clock debug signal capture value
  */

typedef union {
  struct {
    uint32_t CAP_DATA : 32;
    ///< 32-bit signal capture value.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_rx_glue_smpl_clk_dbg_cap_reg0_reg_t;

#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG0_DEFAULT (0x00000000U)
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG0_RD_MASK (0xffffffffU)
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG0_WR_MASK (0x00000000U)


///< 32-bit signal capture value.
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG0_CAP_DATA_BF_OFF ( 0)
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG0_CAP_DATA_BF_WID (32)
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG0_CAP_DATA_BF_MSK (0xFFFFFFFF)
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG0_CAP_DATA_BF_DEF (0x00000000)
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG0_ARR_SZ0 (4)
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG0_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_RX_GLUE_MEM_JESDABC_RX_GLUE_RX_SMPL_CLK_DBG_CAP_REG1[4] register description at address offset 0x510
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_glue_MEM/jesdabc_rx_glue/RX_SMPL_CLK_DBG_CAP_REG1
  * Rx Sample clock debug signal capture value
  */

typedef union {
  struct {
    uint32_t CAP_DATA : 32;
    ///< 32-bit signal capture value.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_rx_glue_smpl_clk_dbg_cap_reg1_reg_t;

#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG1_DEFAULT (0x00000000U)
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG1_RD_MASK (0xffffffffU)
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG1_WR_MASK (0x00000000U)


///< 32-bit signal capture value.
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG1_CAP_DATA_BF_OFF ( 0)
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG1_CAP_DATA_BF_WID (32)
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG1_CAP_DATA_BF_MSK (0xFFFFFFFF)
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG1_CAP_DATA_BF_DEF (0x00000000)
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG1_ARR_SZ0 (4)
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG1_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_RX_GLUE_MEM_JESDABC_RX_GLUE_RX_SMPL_CLK_DBG_CAP_REG2[4] register description at address offset 0x520
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_glue_MEM/jesdabc_rx_glue/RX_SMPL_CLK_DBG_CAP_REG2
  * Rx Sample clock debug signal capture value
  */

typedef union {
  struct {
    uint32_t CAP_DATA : 32;
    ///< 32-bit signal capture value.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_rx_glue_smpl_clk_dbg_cap_reg2_reg_t;

#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG2_DEFAULT (0x00000000U)
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG2_RD_MASK (0xffffffffU)
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG2_WR_MASK (0x00000000U)


///< 32-bit signal capture value.
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG2_CAP_DATA_BF_OFF ( 0)
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG2_CAP_DATA_BF_WID (32)
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG2_CAP_DATA_BF_MSK (0xFFFFFFFF)
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG2_CAP_DATA_BF_DEF (0x00000000)
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG2_ARR_SZ0 (4)
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG2_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_RX_GLUE_MEM_JESDABC_RX_GLUE_RX_SMPL_CLK_DBG_CAP_REG3[4] register description at address offset 0x530
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_glue_MEM/jesdabc_rx_glue/RX_SMPL_CLK_DBG_CAP_REG3
  * Rx Sample clock debug signal capture value
  */

typedef union {
  struct {
    uint32_t CAP_DATA : 32;
    ///< 32-bit signal capture value.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_rx_glue_smpl_clk_dbg_cap_reg3_reg_t;

#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG3_DEFAULT (0x00000000U)
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG3_RD_MASK (0xffffffffU)
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG3_WR_MASK (0x00000000U)


///< 32-bit signal capture value.
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG3_CAP_DATA_BF_OFF ( 0)
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG3_CAP_DATA_BF_WID (32)
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG3_CAP_DATA_BF_MSK (0xFFFFFFFF)
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG3_CAP_DATA_BF_DEF (0x00000000)
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG3_ARR_SZ0 (4)
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG3_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_RX_GLUE_MEM_JESDABC_RX_GLUE_RX_SP_MON_CAP_REG0[4] register description at address offset 0x540
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_glue_MEM/jesdabc_rx_glue/RX_SP_MON_CAP_REG0
  * Sync Point signal capture value
  */

typedef union {
  struct {
    uint32_t CAP_DATA : 32;
    ///< 32-bit signal capture value.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_rx_glue_sp_mon_cap_reg0_reg_t;

#define JESD_RX_GLUE_SP_MON_CAP_REG0_DEFAULT (0x00000000U)
#define JESD_RX_GLUE_SP_MON_CAP_REG0_RD_MASK (0xffffffffU)
#define JESD_RX_GLUE_SP_MON_CAP_REG0_WR_MASK (0x00000000U)


///< 32-bit signal capture value.
#define JESD_RX_GLUE_SP_MON_CAP_REG0_CAP_DATA_BF_OFF ( 0)
#define JESD_RX_GLUE_SP_MON_CAP_REG0_CAP_DATA_BF_WID (32)
#define JESD_RX_GLUE_SP_MON_CAP_REG0_CAP_DATA_BF_MSK (0xFFFFFFFF)
#define JESD_RX_GLUE_SP_MON_CAP_REG0_CAP_DATA_BF_DEF (0x00000000)
#define JESD_RX_GLUE_SP_MON_CAP_REG0_ARR_SZ0 (4)
#define JESD_RX_GLUE_SP_MON_CAP_REG0_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_RX_GLUE_MEM_JESDABC_RX_GLUE_RX_SP_MON_CAP_REG1[4] register description at address offset 0x550
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_glue_MEM/jesdabc_rx_glue/RX_SP_MON_CAP_REG1
  * Sync Point signal capture value
  */

typedef union {
  struct {
    uint32_t CAP_DATA : 32;
    ///< 32-bit signal capture value.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_rx_glue_sp_mon_cap_reg1_reg_t;

#define JESD_RX_GLUE_SP_MON_CAP_REG1_DEFAULT (0x00000000U)
#define JESD_RX_GLUE_SP_MON_CAP_REG1_RD_MASK (0xffffffffU)
#define JESD_RX_GLUE_SP_MON_CAP_REG1_WR_MASK (0x00000000U)


///< 32-bit signal capture value.
#define JESD_RX_GLUE_SP_MON_CAP_REG1_CAP_DATA_BF_OFF ( 0)
#define JESD_RX_GLUE_SP_MON_CAP_REG1_CAP_DATA_BF_WID (32)
#define JESD_RX_GLUE_SP_MON_CAP_REG1_CAP_DATA_BF_MSK (0xFFFFFFFF)
#define JESD_RX_GLUE_SP_MON_CAP_REG1_CAP_DATA_BF_DEF (0x00000000)
#define JESD_RX_GLUE_SP_MON_CAP_REG1_ARR_SZ0 (4)
#define JESD_RX_GLUE_SP_MON_CAP_REG1_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_RX_GLUE_MEM_JESDABC_RX_GLUE_RX_SP_MON_CAP_REG2[4] register description at address offset 0x560
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_glue_MEM/jesdabc_rx_glue/RX_SP_MON_CAP_REG2
  * Sync Point signal capture value
  */

typedef union {
  struct {
    uint32_t CAP_DATA : 32;
    ///< 32-bit signal capture value.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_rx_glue_sp_mon_cap_reg2_reg_t;

#define JESD_RX_GLUE_SP_MON_CAP_REG2_DEFAULT (0x00000000U)
#define JESD_RX_GLUE_SP_MON_CAP_REG2_RD_MASK (0xffffffffU)
#define JESD_RX_GLUE_SP_MON_CAP_REG2_WR_MASK (0x00000000U)


///< 32-bit signal capture value.
#define JESD_RX_GLUE_SP_MON_CAP_REG2_CAP_DATA_BF_OFF ( 0)
#define JESD_RX_GLUE_SP_MON_CAP_REG2_CAP_DATA_BF_WID (32)
#define JESD_RX_GLUE_SP_MON_CAP_REG2_CAP_DATA_BF_MSK (0xFFFFFFFF)
#define JESD_RX_GLUE_SP_MON_CAP_REG2_CAP_DATA_BF_DEF (0x00000000)
#define JESD_RX_GLUE_SP_MON_CAP_REG2_ARR_SZ0 (4)
#define JESD_RX_GLUE_SP_MON_CAP_REG2_ARRAY_STRIDE0 (0x0004)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define JESD_RX_GLUE_SCRATCH_REG(_BASE) ((jesd_rx_glue_scratch_reg_t*) JESD_RX_GLUE_SCRATCH_ADR(_BASE))
#define JESD_RX_GLUE_APB_BRDG_STAT_REG(_BASE) ((jesd_rx_glue_apb_brdg_stat_reg_t*) JESD_RX_GLUE_APB_BRDG_STAT_ADR(_BASE))
#define JESD_RX_GLUE_SONI_REG(_BASE) ((jesd_rx_glue_soni_reg_t*) JESD_RX_GLUE_SONI_ADR(_BASE))
#define JESD_RX_GLUE_DATAPATH_GATE_SEL_REG(_BASE) ((jesd_rx_glue_datapath_gate_sel_reg_t*) JESD_RX_GLUE_DATAPATH_GATE_SEL_ADR(_BASE))
#define JESD_RX_GLUE_DATAPATH_SW_EN_REG(_BASE) ((jesd_rx_glue_datapath_sw_en_reg_t*) JESD_RX_GLUE_DATAPATH_SW_EN_ADR(_BASE))
#define JESD_RX_GLUE_DATAPATH_INIT_CYC_CNT_REG(_BASE) ((jesd_rx_glue_datapath_init_cyc_cnt_reg_t*) JESD_RX_GLUE_DATAPATH_INIT_CYC_CNT_ADR(_BASE))
#define JESD_RX_GLUE_DP_START_SYNC_DLY_REG(_BASE) ((jesd_rx_glue_dp_start_sync_dly_reg_t*) JESD_RX_GLUE_DP_START_SYNC_DLY_ADR(_BASE))
#define JESD_RX_GLUE_DL_EN_EVENT_DLY_REG(_BASE) ((jesd_rx_glue_dl_en_event_dly_reg_t*) JESD_RX_GLUE_DL_EN_EVENT_DLY_ADR(_BASE))
#define JESD_RX_GLUE_ZERO_INS_EN_REG(_BASE) ((jesd_rx_glue_zero_ins_en_reg_t*) JESD_RX_GLUE_ZERO_INS_EN_ADR(_BASE))
#define JESD_RX_GLUE_START_SYNC_BYP_REG(_BASE) ((jesd_rx_glue_start_sync_byp_reg_t*) JESD_RX_GLUE_START_SYNC_BYP_ADR(_BASE))
#define JESD_RX_GLUE_CONV_SMPL_INTRLV_CTRL_REG(_BASE) ((jesd_rx_glue_conv_smpl_intrlv_ctrl_reg_t*) JESD_RX_GLUE_CONV_SMPL_INTRLV_CTRL_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_VLD_MON_CFG_REG(_BASE) ((jesd_rx_glue_smpl_vld_mon_cfg_reg_t*) JESD_RX_GLUE_SMPL_VLD_MON_CFG_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_VLD_MON_PERIOD_REG(_BASE) ((jesd_rx_glue_smpl_vld_mon_period_reg_t*) JESD_RX_GLUE_SMPL_VLD_MON_PERIOD_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_VLD_MON_ERR_THRSH_REG(_BASE) ((jesd_rx_glue_smpl_vld_mon_err_thrsh_reg_t*) JESD_RX_GLUE_SMPL_VLD_MON_ERR_THRSH_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_EN_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_en_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_EN_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_STS_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_sts_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_STS_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_CLR_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_clr_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_CLR_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_CLK_ERR_STS_REG(_BASE) ((jesd_rx_glue_smpl_clk_err_sts_reg_t*) JESD_RX_GLUE_SMPL_CLK_ERR_STS_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_CLK_INTR_HIGH_EN_REG(_BASE) ((jesd_rx_glue_smpl_clk_intr_high_en_reg_t*) JESD_RX_GLUE_SMPL_CLK_INTR_HIGH_EN_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_CLK_INTR_LOW_EN_REG(_BASE) ((jesd_rx_glue_smpl_clk_intr_low_en_reg_t*) JESD_RX_GLUE_SMPL_CLK_INTR_LOW_EN_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_CLK_ALM_EN_REG(_BASE) ((jesd_rx_glue_smpl_clk_alm_en_reg_t*) JESD_RX_GLUE_SMPL_CLK_ALM_EN_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_CLK_ERR_CLR_REG(_BASE) ((jesd_rx_glue_smpl_clk_err_clr_reg_t*) JESD_RX_GLUE_SMPL_CLK_ERR_CLR_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_CLK_ERR_FRC_REG(_BASE) ((jesd_rx_glue_smpl_clk_err_frc_reg_t*) JESD_RX_GLUE_SMPL_CLK_ERR_FRC_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA0_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA0_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA1_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA1_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA2_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA2_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA3_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA3_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA4_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA4_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA5_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA5_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA6_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA6_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA7_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA7_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA8_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA8_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA9_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA9_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA10_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA10_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA11_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA11_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA12_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA12_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA13_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA13_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA14_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA14_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA15_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA15_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA16_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA16_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA17_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA17_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA18_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA18_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA19_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA19_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA20_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA20_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA21_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA21_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA22_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA22_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA23_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA23_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA24_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA24_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA25_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA25_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA26_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA26_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA27_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA27_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA28_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA28_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA29_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA29_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA30_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA30_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA31_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA31_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA32_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA32_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA33_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA33_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA34_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA34_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA35_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA35_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA36_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA36_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA37_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA37_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA38_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA38_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA39_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA39_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA40_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA40_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA41_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA41_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA42_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA42_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA43_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA43_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA44_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA44_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA45_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA45_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA46_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA46_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA47_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA47_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA48_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA48_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA49_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA49_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA50_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA50_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA51_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA51_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA52_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA52_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA53_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA53_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA54_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA54_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA55_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA55_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA56_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA56_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA57_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA57_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA58_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA58_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA59_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA59_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA60_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA60_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA61_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA61_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA62_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA62_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA63_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA63_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA64_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA64_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA65_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA65_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA66_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA66_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA67_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA67_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA68_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA68_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA69_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA69_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA70_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA70_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA71_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA71_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA72_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA72_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA73_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA73_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA74_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA74_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA75_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA75_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA76_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA76_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA77_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA77_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA78_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA78_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA79_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA79_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA80_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA80_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA81_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA81_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA82_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA82_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA83_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA83_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA84_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA84_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA85_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA85_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA86_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA86_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA87_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA87_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA88_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA88_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA89_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA89_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA90_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA90_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA91_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA91_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA92_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA92_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA93_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA93_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA94_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA94_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA95_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA95_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA96_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA96_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA97_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA97_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA98_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA98_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA99_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA99_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA100_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA100_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA101_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA101_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA102_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA102_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA103_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA103_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA104_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA104_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA105_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA105_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA106_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA106_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA107_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA107_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA108_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA108_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA109_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA109_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA110_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA110_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA111_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA111_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA112_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA112_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA113_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA113_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA114_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA114_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA115_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA115_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA116_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA116_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA117_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA117_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA118_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA118_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA119_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA119_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA120_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA120_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA121_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA121_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA122_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA122_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA123_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA123_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA124_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA124_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA125_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA125_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA126_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA126_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_INTF_CAP_DATA127_REG(_BASE) ((jesd_rx_glue_smpl_intf_cap_data_reg_t*) JESD_RX_GLUE_SMPL_INTF_CAP_DATA127_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_CLK_SIG_MON_EN_REG(_BASE) ((jesd_rx_glue_smpl_clk_sig_mon_en_reg_t*) JESD_RX_GLUE_SMPL_CLK_SIG_MON_EN_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_CLK_SIG_MON_CAP_EN_REG(_BASE) ((jesd_rx_glue_smpl_clk_sig_mon_cap_en_reg_t*) JESD_RX_GLUE_SMPL_CLK_SIG_MON_CAP_EN_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_CLK_SIG_MON_STS_CLR_REG(_BASE) ((jesd_rx_glue_smpl_clk_sig_mon_sts_clr_reg_t*) JESD_RX_GLUE_SMPL_CLK_SIG_MON_STS_CLR_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_CLK_SIG_MON_CFG_REG(_BASE) ((jesd_rx_glue_smpl_clk_sig_mon_cfg_reg_t*) JESD_RX_GLUE_SMPL_CLK_SIG_MON_CFG_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_CLK_DBG_SIG_SEL_REG(_BASE) ((jesd_rx_glue_smpl_clk_dbg_sig_sel_reg_t*) JESD_RX_GLUE_SMPL_CLK_DBG_SIG_SEL_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_VLD_REG(_BASE) ((jesd_rx_glue_smpl_clk_dbg_cap_vld_reg_t*) JESD_RX_GLUE_SMPL_CLK_DBG_CAP_VLD_ADR(_BASE))
#define JESD_RX_GLUE_SP_MON_CAP_VLD_REG(_BASE) ((jesd_rx_glue_sp_mon_cap_vld_reg_t*) JESD_RX_GLUE_SP_MON_CAP_VLD_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG00_REG(_BASE) ((jesd_rx_glue_smpl_clk_dbg_cap_reg0_reg_t*) JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG00_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG01_REG(_BASE) ((jesd_rx_glue_smpl_clk_dbg_cap_reg0_reg_t*) JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG01_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG02_REG(_BASE) ((jesd_rx_glue_smpl_clk_dbg_cap_reg0_reg_t*) JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG02_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG03_REG(_BASE) ((jesd_rx_glue_smpl_clk_dbg_cap_reg0_reg_t*) JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG03_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG10_REG(_BASE) ((jesd_rx_glue_smpl_clk_dbg_cap_reg1_reg_t*) JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG10_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG11_REG(_BASE) ((jesd_rx_glue_smpl_clk_dbg_cap_reg1_reg_t*) JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG11_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG12_REG(_BASE) ((jesd_rx_glue_smpl_clk_dbg_cap_reg1_reg_t*) JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG12_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG13_REG(_BASE) ((jesd_rx_glue_smpl_clk_dbg_cap_reg1_reg_t*) JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG13_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG20_REG(_BASE) ((jesd_rx_glue_smpl_clk_dbg_cap_reg2_reg_t*) JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG20_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG21_REG(_BASE) ((jesd_rx_glue_smpl_clk_dbg_cap_reg2_reg_t*) JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG21_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG22_REG(_BASE) ((jesd_rx_glue_smpl_clk_dbg_cap_reg2_reg_t*) JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG22_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG23_REG(_BASE) ((jesd_rx_glue_smpl_clk_dbg_cap_reg2_reg_t*) JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG23_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG30_REG(_BASE) ((jesd_rx_glue_smpl_clk_dbg_cap_reg3_reg_t*) JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG30_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG31_REG(_BASE) ((jesd_rx_glue_smpl_clk_dbg_cap_reg3_reg_t*) JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG31_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG32_REG(_BASE) ((jesd_rx_glue_smpl_clk_dbg_cap_reg3_reg_t*) JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG32_ADR(_BASE))
#define JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG33_REG(_BASE) ((jesd_rx_glue_smpl_clk_dbg_cap_reg3_reg_t*) JESD_RX_GLUE_SMPL_CLK_DBG_CAP_REG33_ADR(_BASE))
#define JESD_RX_GLUE_SP_MON_CAP_REG00_REG(_BASE) ((jesd_rx_glue_sp_mon_cap_reg0_reg_t*) JESD_RX_GLUE_SP_MON_CAP_REG00_ADR(_BASE))
#define JESD_RX_GLUE_SP_MON_CAP_REG01_REG(_BASE) ((jesd_rx_glue_sp_mon_cap_reg0_reg_t*) JESD_RX_GLUE_SP_MON_CAP_REG01_ADR(_BASE))
#define JESD_RX_GLUE_SP_MON_CAP_REG02_REG(_BASE) ((jesd_rx_glue_sp_mon_cap_reg0_reg_t*) JESD_RX_GLUE_SP_MON_CAP_REG02_ADR(_BASE))
#define JESD_RX_GLUE_SP_MON_CAP_REG03_REG(_BASE) ((jesd_rx_glue_sp_mon_cap_reg0_reg_t*) JESD_RX_GLUE_SP_MON_CAP_REG03_ADR(_BASE))
#define JESD_RX_GLUE_SP_MON_CAP_REG10_REG(_BASE) ((jesd_rx_glue_sp_mon_cap_reg1_reg_t*) JESD_RX_GLUE_SP_MON_CAP_REG10_ADR(_BASE))
#define JESD_RX_GLUE_SP_MON_CAP_REG11_REG(_BASE) ((jesd_rx_glue_sp_mon_cap_reg1_reg_t*) JESD_RX_GLUE_SP_MON_CAP_REG11_ADR(_BASE))
#define JESD_RX_GLUE_SP_MON_CAP_REG12_REG(_BASE) ((jesd_rx_glue_sp_mon_cap_reg1_reg_t*) JESD_RX_GLUE_SP_MON_CAP_REG12_ADR(_BASE))
#define JESD_RX_GLUE_SP_MON_CAP_REG13_REG(_BASE) ((jesd_rx_glue_sp_mon_cap_reg1_reg_t*) JESD_RX_GLUE_SP_MON_CAP_REG13_ADR(_BASE))
#define JESD_RX_GLUE_SP_MON_CAP_REG20_REG(_BASE) ((jesd_rx_glue_sp_mon_cap_reg2_reg_t*) JESD_RX_GLUE_SP_MON_CAP_REG20_ADR(_BASE))
#define JESD_RX_GLUE_SP_MON_CAP_REG21_REG(_BASE) ((jesd_rx_glue_sp_mon_cap_reg2_reg_t*) JESD_RX_GLUE_SP_MON_CAP_REG21_ADR(_BASE))
#define JESD_RX_GLUE_SP_MON_CAP_REG22_REG(_BASE) ((jesd_rx_glue_sp_mon_cap_reg2_reg_t*) JESD_RX_GLUE_SP_MON_CAP_REG22_ADR(_BASE))
#define JESD_RX_GLUE_SP_MON_CAP_REG23_REG(_BASE) ((jesd_rx_glue_sp_mon_cap_reg2_reg_t*) JESD_RX_GLUE_SP_MON_CAP_REG23_ADR(_BASE))

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    jesd_rx_glue_scratch_reg_t SCRATCH; /*< Address offset = 0x0 */
    jesd_rx_glue_apb_brdg_stat_reg_t APB_BRDG_STAT; /*< Address offset = 0x4 */
    const uint8_t        reservedArea0 [8];   /*< Address offset = 0x8 */
    jesd_rx_glue_soni_reg_t RX_GLUE_SONI; /*< Address offset = 0x10 */
    jesd_rx_glue_datapath_gate_sel_reg_t RX_DATAPATH_GATE_SEL; /*< Address offset = 0x14 */
    jesd_rx_glue_datapath_sw_en_reg_t RX_DATAPATH_SW_EN; /*< Address offset = 0x18 */
    jesd_rx_glue_datapath_init_cyc_cnt_reg_t RX_DATAPATH_INIT_CYC_CNT; /*< Address offset = 0x1c */
    jesd_rx_glue_dp_start_sync_dly_reg_t RX_DP_START_SYNC_DLY; /*< Address offset = 0x20 */
    jesd_rx_glue_dl_en_event_dly_reg_t RX_DL_EN_EVENT_DLY; /*< Address offset = 0x24 */
    jesd_rx_glue_zero_ins_en_reg_t RX_ZERO_INS_EN; /*< Address offset = 0x28 */
    jesd_rx_glue_start_sync_byp_reg_t RX_START_SYNC_BYP; /*< Address offset = 0x2c */
    jesd_rx_glue_conv_smpl_intrlv_ctrl_reg_t RX_CONV_SMPL_INTRLV_CTRL; /*< Address offset = 0x30 */
    const uint8_t        reservedArea1 [12];  /*< Address offset = 0x34 */
    jesd_rx_glue_smpl_vld_mon_cfg_reg_t RX_SMPL_VLD_MON_CFG; /*< Address offset = 0x40 */
    jesd_rx_glue_smpl_vld_mon_period_reg_t RX_SMPL_VLD_MON_PERIOD; /*< Address offset = 0x44 */
    const uint8_t        reservedArea2 [4];   /*< Address offset = 0x48 */
    jesd_rx_glue_smpl_vld_mon_err_thrsh_reg_t RX_SMPL_VLD_MON_ERR_THRSH; /*< Address offset = 0x4c */
    jesd_rx_glue_smpl_intf_cap_en_reg_t RX_SMPL_INTF_CAP_EN; /*< Address offset = 0x50 */
    jesd_rx_glue_smpl_intf_cap_sts_reg_t RX_SMPL_INTF_CAP_STS; /*< Address offset = 0x54 */
    const uint8_t        reservedArea3 [4];   /*< Address offset = 0x58 */
    jesd_rx_glue_smpl_intf_cap_clr_reg_t RX_SMPL_INTF_CAP_CLR; /*< Address offset = 0x5c */
    jesd_rx_glue_smpl_clk_err_sts_reg_t RX_SMPL_CLK_ERR_STS; /*< Address offset = 0x60 */
    jesd_rx_glue_smpl_clk_intr_high_en_reg_t RX_SMPL_CLK_INTR_HIGH_EN; /*< Address offset = 0x64 */
    jesd_rx_glue_smpl_clk_intr_low_en_reg_t RX_SMPL_CLK_INTR_LOW_EN; /*< Address offset = 0x68 */
    jesd_rx_glue_smpl_clk_alm_en_reg_t RX_SMPL_CLK_ALM_EN; /*< Address offset = 0x6c */
    jesd_rx_glue_smpl_clk_err_clr_reg_t RX_SMPL_CLK_ERR_CLR; /*< Address offset = 0x70 */
    jesd_rx_glue_smpl_clk_err_frc_reg_t RX_SMPL_CLK_ERR_FRC; /*< Address offset = 0x74 */
    const uint8_t        reservedArea4 [392]; /*< Address offset = 0x78 */
    jesd_rx_glue_smpl_intf_cap_data_reg_t RX_SMPL_INTF_CAP_DATA[128]; /*< Address offset = 0x200 */
    jesd_rx_glue_smpl_clk_sig_mon_en_reg_t RX_SMPL_CLK_SIG_MON_EN; /*< Address offset = 0x400 */
    jesd_rx_glue_smpl_clk_sig_mon_cap_en_reg_t RX_SMPL_CLK_SIG_MON_CAP_EN; /*< Address offset = 0x404 */
    jesd_rx_glue_smpl_clk_sig_mon_sts_clr_reg_t RX_SMPL_CLK_SIG_MON_STS_CLR; /*< Address offset = 0x408 */
    jesd_rx_glue_smpl_clk_sig_mon_cfg_reg_t RX_SMPL_CLK_SIG_MON_CFG; /*< Address offset = 0x40c */
    jesd_rx_glue_smpl_clk_dbg_sig_sel_reg_t RX_SMPL_CLK_DBG_SIG_SEL; /*< Address offset = 0x410 */
    jesd_rx_glue_smpl_clk_dbg_cap_vld_reg_t RX_SMPL_CLK_DBG_CAP_VLD; /*< Address offset = 0x414 */
    const uint8_t        reservedArea5 [8];   /*< Address offset = 0x418 */
    jesd_rx_glue_sp_mon_cap_vld_reg_t RX_SP_MON_CAP_VLD; /*< Address offset = 0x420 */
    const uint8_t        reservedArea6 [220]; /*< Address offset = 0x424 */
    jesd_rx_glue_smpl_clk_dbg_cap_reg0_reg_t RX_SMPL_CLK_DBG_CAP_REG0[4]; /*< Address offset = 0x500 */
    jesd_rx_glue_smpl_clk_dbg_cap_reg1_reg_t RX_SMPL_CLK_DBG_CAP_REG1[4]; /*< Address offset = 0x510 */
    jesd_rx_glue_smpl_clk_dbg_cap_reg2_reg_t RX_SMPL_CLK_DBG_CAP_REG2[4]; /*< Address offset = 0x520 */
    jesd_rx_glue_smpl_clk_dbg_cap_reg3_reg_t RX_SMPL_CLK_DBG_CAP_REG3[4]; /*< Address offset = 0x530 */
    jesd_rx_glue_sp_mon_cap_reg0_reg_t RX_SP_MON_CAP_REG0[4]; /*< Address offset = 0x540 */
    jesd_rx_glue_sp_mon_cap_reg1_reg_t RX_SP_MON_CAP_REG1[4]; /*< Address offset = 0x550 */
    jesd_rx_glue_sp_mon_cap_reg2_reg_t RX_SP_MON_CAP_REG2[4]; /*< Address offset = 0x560 */
} jesd_rx_glue_t;     // size: 0x0098

// AddressSpace struct pointer
//
#define DLNK_JESD0_RX_GLUE  ((jesd_rx_glue_t*) DLNK_JESD0_RX_GLUE_BASE)
#define DLNK_JESD1_RX_GLUE  ((jesd_rx_glue_t*) DLNK_JESD1_RX_GLUE_BASE)
#define DLNK_JESD2_RX_GLUE  ((jesd_rx_glue_t*) DLNK_JESD2_RX_GLUE_BASE)
#define DLNK_JESD3_RX_GLUE  ((jesd_rx_glue_t*) DLNK_JESD3_RX_GLUE_BASE)

// ******************************************* /Address Space

#endif      // _JESD_RX_GLUE_H_

