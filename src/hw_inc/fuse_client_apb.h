#ifndef _FUSE_CLIENT_APB_H_
#define _FUSE_CLIENT_APB_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define SYSCON_FUSE_CLIENT_APB_BASE  ( 0x01f80000 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define FUSE_CLIENT_APB_ABCSOC_FUSE_REGISTER_0_OFFSET ( 0x00000000U )
#define FUSE_CLIENT_APB_ABCSOC_FUSE_REGISTER_1_OFFSET ( 0x00000004U )
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_0_OFFSET ( 0x00000008U )
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_1_OFFSET ( 0x0000000cU )
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_2_OFFSET ( 0x00000010U )
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_3_OFFSET ( 0x00000014U )
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_4_OFFSET ( 0x00000018U )
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_5_OFFSET ( 0x0000001cU )
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_6_OFFSET ( 0x00000020U )
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_7_OFFSET ( 0x00000024U )
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_8_OFFSET ( 0x00000028U )
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_9_OFFSET ( 0x0000002cU )
#define FUSE_CLIENT_APB_ANALOG_REGISTER_0_OFFSET ( 0x00000100U )
#define FUSE_CLIENT_APB_ANALOG_REGISTER_1_OFFSET ( 0x00000104U )
#define FUSE_CLIENT_APB_ANALOG_REGISTER_2_OFFSET ( 0x00000108U )
#define FUSE_CLIENT_APB_ANALOG_REGISTER_3_OFFSET ( 0x0000010cU )
#define FUSE_CLIENT_APB_ANALOG_REGISTER_4_OFFSET ( 0x00000110U )
#define FUSE_CLIENT_APB_ANALOG_REGISTER_5_OFFSET ( 0x00000114U )
#define FUSE_CLIENT_APB_ANALOG_REGISTER_6_OFFSET ( 0x00000118U )
#define FUSE_CLIENT_APB_ANALOG_REGISTER_7_OFFSET ( 0x0000011cU )
#define FUSE_CLIENT_APB_ANALOG_REGISTER_8_OFFSET ( 0x00000120U )
#define FUSE_CLIENT_APB_ANALOG_REGISTER_9_OFFSET ( 0x00000124U )
#define FUSE_CLIENT_APB_ANALOG_REGISTER_10_OFFSET ( 0x00000128U )
#define FUSE_CLIENT_APB_ANALOG_REGISTER_11_OFFSET ( 0x0000012cU )
#define FUSE_CLIENT_APB_ANALOG_REGISTER_12_OFFSET ( 0x00000130U )
#define FUSE_CLIENT_APB_ANALOG_REGISTER_13_OFFSET ( 0x00000134U )
#define FUSE_CLIENT_APB_ANALOG_REGISTER_14_OFFSET ( 0x00000138U )
#define FUSE_CLIENT_APB_ANALOG_REGISTER_15_OFFSET ( 0x0000013cU )
#define FUSE_CLIENT_APB_ANALOG_REGISTER_16_OFFSET ( 0x00000140U )
#define FUSE_CLIENT_APB_ANALOG_REGISTER_17_OFFSET ( 0x00000144U )
#define FUSE_CLIENT_APB_ANALOG_REGISTER_18_OFFSET ( 0x00000148U )
#define FUSE_CLIENT_APB_ANALOG_REGISTER_19_OFFSET ( 0x0000014cU )
#define FUSE_CLIENT_APB_ANALOG_REGISTER_20_OFFSET ( 0x00000150U )
#define FUSE_CLIENT_APB_ANALOG_REGISTER_21_OFFSET ( 0x00000154U )
#define FUSE_CLIENT_APB_ANALOG_REGISTER_22_OFFSET ( 0x00000158U )
#define FUSE_CLIENT_APB_ANALOG_BG_TRIM_0_OFFSET ( 0x0000015cU )
#define FUSE_CLIENT_APB_ANALOG_BG_TRIM_1_OFFSET ( 0x00000160U )
#define FUSE_CLIENT_APB_ANALOG_RESERVE_00_OFFSET ( 0x00000164U )
#define FUSE_CLIENT_APB_ANALOG_RESERVE_01_OFFSET ( 0x00000168U )
#define FUSE_CLIENT_APB_ANALOG_RESERVE_02_OFFSET ( 0x0000016cU )
#define FUSE_CLIENT_APB_ANALOG_RESERVE_03_OFFSET ( 0x00000170U )
#define FUSE_CLIENT_APB_ANALOG_RESERVE_04_OFFSET ( 0x00000174U )
#define FUSE_CLIENT_APB_ANALOG_ANA0_HWC4016C_0_OFFSET ( 0x00000180U )
#define FUSE_CLIENT_APB_ANALOG_ANA0_HWC4016C_1_OFFSET ( 0x00000184U )
#define FUSE_CLIENT_APB_ANALOG_ANA0_HWC4016C_2_OFFSET ( 0x00000188U )
#define FUSE_CLIENT_APB_ANALOG_ANA0_HWC4016C_3_OFFSET ( 0x0000018cU )
#define FUSE_CLIENT_APB_ANALOG_ANA1_HWC4016C_0_OFFSET ( 0x00000190U )
#define FUSE_CLIENT_APB_ANALOG_ANA1_HWC4016C_1_OFFSET ( 0x00000194U )
#define FUSE_CLIENT_APB_ANALOG_ANA1_HWC4016C_2_OFFSET ( 0x00000198U )
#define FUSE_CLIENT_APB_ANALOG_ANA1_HWC4016C_3_OFFSET ( 0x0000019cU )
#define FUSE_CLIENT_APB_SERDES_REGISTER_0_OFFSET ( 0x00000200U )
#define FUSE_CLIENT_APB_SERDES_REGISTER_1_OFFSET ( 0x00000204U )
#define FUSE_CLIENT_APB_SERDES_REGISTER_2_OFFSET ( 0x00000208U )
#define FUSE_CLIENT_APB_SERDES_REGISTER_3_OFFSET ( 0x0000020cU )
#define FUSE_CLIENT_APB_SERDES_REGISTER_4_OFFSET ( 0x00000210U )
#define FUSE_CLIENT_APB_SERDES_REGISTER_5_OFFSET ( 0x00000214U )
#define FUSE_CLIENT_APB_SERDES_REGISTER_6_OFFSET ( 0x00000218U )
#define FUSE_CLIENT_APB_SERDES_REGISTER_7_OFFSET ( 0x0000021cU )
#define FUSE_CLIENT_APB_SERDES_REGISTER_8_OFFSET ( 0x00000220U )
#define FUSE_CLIENT_APB_SERDES_REGISTER_9_OFFSET ( 0x00000224U )
#define FUSE_CLIENT_APB_SERDES_REGISTER_10_OFFSET ( 0x00000228U )
#define FUSE_CLIENT_APB_SERDES_REGISTER_11_OFFSET ( 0x0000022cU )
#define FUSE_CLIENT_APB_SERDES_REGISTER_12_OFFSET ( 0x00000230U )
#define FUSE_CLIENT_APB_SERDES_REGISTER_13_OFFSET ( 0x00000234U )
#define FUSE_CLIENT_APB_SERDES_REGISTER_14_OFFSET ( 0x00000238U )
#define FUSE_CLIENT_APB_SERDES_REGISTER_15_OFFSET ( 0x0000023cU )
#define FUSE_CLIENT_APB_SERDES_REGISTER_16_OFFSET ( 0x00000240U )
#define FUSE_CLIENT_APB_SERDES_REGISTER_17_OFFSET ( 0x00000244U )
#define FUSE_CLIENT_APB_SERDES_REGISTER_18_OFFSET ( 0x00000248U )
#define FUSE_CLIENT_APB_SERDES_REGISTER_19_OFFSET ( 0x0000024cU )
#define FUSE_CLIENT_APB_SERDES_REGISTER_20_OFFSET ( 0x00000250U )
#define FUSE_CLIENT_APB_SERDES_REGISTER_21_OFFSET ( 0x00000254U )
#define FUSE_CLIENT_APB_SERDES_REGISTER_22_OFFSET ( 0x00000258U )
#define FUSE_CLIENT_APB_SERDES_REGISTER_23_OFFSET ( 0x0000025cU )
#define FUSE_CLIENT_APB_SERDES_REGISTER_24_OFFSET ( 0x00000260U )
#define FUSE_CLIENT_APB_SERDES_REGISTER_25_OFFSET ( 0x00000264U )
#define FUSE_CLIENT_APB_SERDES_REGISTER_26_OFFSET ( 0x00000268U )
#define FUSE_CLIENT_APB_SERDES_REGISTER_27_OFFSET ( 0x0000026cU )
#define FUSE_CLIENT_APB_SERDES_REGISTER_28_OFFSET ( 0x00000270U )
#define FUSE_CLIENT_APB_SERDES_REGISTER_29_OFFSET ( 0x00000274U )
#define FUSE_CLIENT_APB_SERDES_REGISTER_30_OFFSET ( 0x00000278U )
#define FUSE_CLIENT_APB_SERDES_REGISTER_31_OFFSET ( 0x0000027cU )
#define FUSE_CLIENT_APB_SERDES_REGISTER_32_OFFSET ( 0x00000280U )
#define FUSE_CLIENT_APB_SERDES_REGISTER_33_OFFSET ( 0x00000284U )
#define FUSE_CLIENT_APB_SERDES_REGISTER_34_OFFSET ( 0x00000288U )
#define FUSE_CLIENT_APB_SERDES_REGISTER_35_OFFSET ( 0x0000028cU )
#define FUSE_CLIENT_APB_SERDES_REGISTER_36_OFFSET ( 0x00000290U )
#define FUSE_CLIENT_APB_SERDES_REGISTER_37_OFFSET ( 0x00000294U )
#define FUSE_CLIENT_APB_SERDES_REGISTER_38_OFFSET ( 0x00000298U )
#define FUSE_CLIENT_APB_SERDES_REGISTER_39_OFFSET ( 0x0000029cU )
#define FUSE_CLIENT_APB_SERDES_REGISTER_40_OFFSET ( 0x000002a0U )
#define FUSE_CLIENT_APB_SERDES_REGISTER_41_OFFSET ( 0x000002a4U )
#define FUSE_CLIENT_APB_SERDES_REGISTER_42_OFFSET ( 0x000002a8U )
#define FUSE_CLIENT_APB_SERDES_REGISTER_43_OFFSET ( 0x000002acU )
#define FUSE_CLIENT_APB_SERDES_REGISTER_44_OFFSET ( 0x000002b0U )
#define FUSE_CLIENT_APB_SERDES_REGISTER_45_OFFSET ( 0x000002b4U )
#define FUSE_CLIENT_APB_SERDES_REGISTER_46_OFFSET ( 0x000002b8U )
#define FUSE_CLIENT_APB_SERDES_REGISTER_47_OFFSET ( 0x000002bcU )
#define FUSE_CLIENT_APB_SERDES_REGISTER_48_OFFSET ( 0x000002c0U )
#define FUSE_CLIENT_APB_SERDES_REGISTER_49_OFFSET ( 0x000002c4U )
#define FUSE_CLIENT_APB_SERDES_REGISTER_50_OFFSET ( 0x000002c8U )
#define FUSE_CLIENT_APB_SERDES_REGISTER_51_OFFSET ( 0x000002ccU )
#define FUSE_CLIENT_APB_SERDES_REGISTER_52_OFFSET ( 0x000002d0U )
#define FUSE_CLIENT_APB_SERDES_REGISTER_53_OFFSET ( 0x000002d4U )
#define FUSE_CLIENT_APB_SERDES_REGISTER_54_OFFSET ( 0x000002d8U )
#define FUSE_CLIENT_APB_SERDES_REGISTER_55_OFFSET ( 0x000002dcU )
#define FUSE_CLIENT_APB_SERDES_REGISTER_56_OFFSET ( 0x000002e0U )
#define FUSE_CLIENT_APB_SERDES_REGISTER_57_OFFSET ( 0x000002e4U )
#define FUSE_CLIENT_APB_SERDES_REGISTER_58_OFFSET ( 0x000002e8U )
#define FUSE_CLIENT_APB_SERDES_REGISTER_59_OFFSET ( 0x000002ecU )
#define FUSE_CLIENT_APB_SERDES_REGISTER_60_OFFSET ( 0x000002f0U )
#define FUSE_CLIENT_APB_SERDES_REGISTER_61_OFFSET ( 0x000002f4U )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define FUSE_CLIENT_APB_ABCSOC_FUSE_REGISTER_0_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_ABCSOC_FUSE_REGISTER_0_OFFSET ) ))
#define FUSE_CLIENT_APB_ABCSOC_FUSE_REGISTER_1_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_ABCSOC_FUSE_REGISTER_1_OFFSET ) ))
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_0_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_0_OFFSET ) ))
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_1_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_1_OFFSET ) ))
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_2_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_2_OFFSET ) ))
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_3_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_3_OFFSET ) ))
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_4_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_4_OFFSET ) ))
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_5_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_5_OFFSET ) ))
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_6_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_6_OFFSET ) ))
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_7_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_7_OFFSET ) ))
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_8_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_8_OFFSET ) ))
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_9_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_9_OFFSET ) ))
#define FUSE_CLIENT_APB_ANALOG_REGISTER_0_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_ANALOG_REGISTER_0_OFFSET ) ))
#define FUSE_CLIENT_APB_ANALOG_REGISTER_1_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_ANALOG_REGISTER_1_OFFSET ) ))
#define FUSE_CLIENT_APB_ANALOG_REGISTER_2_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_ANALOG_REGISTER_2_OFFSET ) ))
#define FUSE_CLIENT_APB_ANALOG_REGISTER_3_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_ANALOG_REGISTER_3_OFFSET ) ))
#define FUSE_CLIENT_APB_ANALOG_REGISTER_4_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_ANALOG_REGISTER_4_OFFSET ) ))
#define FUSE_CLIENT_APB_ANALOG_REGISTER_5_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_ANALOG_REGISTER_5_OFFSET ) ))
#define FUSE_CLIENT_APB_ANALOG_REGISTER_6_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_ANALOG_REGISTER_6_OFFSET ) ))
#define FUSE_CLIENT_APB_ANALOG_REGISTER_7_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_ANALOG_REGISTER_7_OFFSET ) ))
#define FUSE_CLIENT_APB_ANALOG_REGISTER_8_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_ANALOG_REGISTER_8_OFFSET ) ))
#define FUSE_CLIENT_APB_ANALOG_REGISTER_9_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_ANALOG_REGISTER_9_OFFSET ) ))
#define FUSE_CLIENT_APB_ANALOG_REGISTER_10_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_ANALOG_REGISTER_10_OFFSET ) ))
#define FUSE_CLIENT_APB_ANALOG_REGISTER_11_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_ANALOG_REGISTER_11_OFFSET ) ))
#define FUSE_CLIENT_APB_ANALOG_REGISTER_12_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_ANALOG_REGISTER_12_OFFSET ) ))
#define FUSE_CLIENT_APB_ANALOG_REGISTER_13_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_ANALOG_REGISTER_13_OFFSET ) ))
#define FUSE_CLIENT_APB_ANALOG_REGISTER_14_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_ANALOG_REGISTER_14_OFFSET ) ))
#define FUSE_CLIENT_APB_ANALOG_REGISTER_15_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_ANALOG_REGISTER_15_OFFSET ) ))
#define FUSE_CLIENT_APB_ANALOG_REGISTER_16_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_ANALOG_REGISTER_16_OFFSET ) ))
#define FUSE_CLIENT_APB_ANALOG_REGISTER_17_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_ANALOG_REGISTER_17_OFFSET ) ))
#define FUSE_CLIENT_APB_ANALOG_REGISTER_18_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_ANALOG_REGISTER_18_OFFSET ) ))
#define FUSE_CLIENT_APB_ANALOG_REGISTER_19_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_ANALOG_REGISTER_19_OFFSET ) ))
#define FUSE_CLIENT_APB_ANALOG_REGISTER_20_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_ANALOG_REGISTER_20_OFFSET ) ))
#define FUSE_CLIENT_APB_ANALOG_REGISTER_21_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_ANALOG_REGISTER_21_OFFSET ) ))
#define FUSE_CLIENT_APB_ANALOG_REGISTER_22_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_ANALOG_REGISTER_22_OFFSET ) ))
#define FUSE_CLIENT_APB_ANALOG_BG_TRIM_0_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_ANALOG_BG_TRIM_0_OFFSET ) ))
#define FUSE_CLIENT_APB_ANALOG_BG_TRIM_1_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_ANALOG_BG_TRIM_1_OFFSET ) ))
#define FUSE_CLIENT_APB_ANALOG_RESERVE_00_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_ANALOG_RESERVE_00_OFFSET ) ))
#define FUSE_CLIENT_APB_ANALOG_RESERVE_01_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_ANALOG_RESERVE_01_OFFSET ) ))
#define FUSE_CLIENT_APB_ANALOG_RESERVE_02_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_ANALOG_RESERVE_02_OFFSET ) ))
#define FUSE_CLIENT_APB_ANALOG_RESERVE_03_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_ANALOG_RESERVE_03_OFFSET ) ))
#define FUSE_CLIENT_APB_ANALOG_RESERVE_04_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_ANALOG_RESERVE_04_OFFSET ) ))
#define FUSE_CLIENT_APB_ANALOG_ANA0_HWC4016C_0_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_ANALOG_ANA0_HWC4016C_0_OFFSET ) ))
#define FUSE_CLIENT_APB_ANALOG_ANA0_HWC4016C_1_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_ANALOG_ANA0_HWC4016C_1_OFFSET ) ))
#define FUSE_CLIENT_APB_ANALOG_ANA0_HWC4016C_2_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_ANALOG_ANA0_HWC4016C_2_OFFSET ) ))
#define FUSE_CLIENT_APB_ANALOG_ANA0_HWC4016C_3_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_ANALOG_ANA0_HWC4016C_3_OFFSET ) ))
#define FUSE_CLIENT_APB_ANALOG_ANA1_HWC4016C_0_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_ANALOG_ANA1_HWC4016C_0_OFFSET ) ))
#define FUSE_CLIENT_APB_ANALOG_ANA1_HWC4016C_1_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_ANALOG_ANA1_HWC4016C_1_OFFSET ) ))
#define FUSE_CLIENT_APB_ANALOG_ANA1_HWC4016C_2_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_ANALOG_ANA1_HWC4016C_2_OFFSET ) ))
#define FUSE_CLIENT_APB_ANALOG_ANA1_HWC4016C_3_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_ANALOG_ANA1_HWC4016C_3_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_0_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_0_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_1_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_1_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_2_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_2_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_3_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_3_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_4_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_4_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_5_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_5_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_6_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_6_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_7_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_7_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_8_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_8_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_9_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_9_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_10_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_10_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_11_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_11_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_12_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_12_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_13_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_13_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_14_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_14_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_15_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_15_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_16_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_16_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_17_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_17_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_18_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_18_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_19_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_19_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_20_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_20_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_21_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_21_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_22_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_22_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_23_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_23_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_24_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_24_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_25_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_25_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_26_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_26_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_27_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_27_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_28_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_28_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_29_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_29_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_30_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_30_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_31_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_31_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_32_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_32_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_33_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_33_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_34_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_34_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_35_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_35_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_36_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_36_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_37_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_37_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_38_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_38_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_39_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_39_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_40_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_40_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_41_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_41_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_42_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_42_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_43_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_43_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_44_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_44_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_45_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_45_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_46_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_46_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_47_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_47_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_48_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_48_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_49_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_49_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_50_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_50_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_51_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_51_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_52_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_52_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_53_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_53_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_54_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_54_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_55_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_55_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_56_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_56_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_57_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_57_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_58_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_58_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_59_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_59_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_60_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_60_OFFSET ) ))
#define FUSE_CLIENT_APB_SERDES_REGISTER_61_ADR (( ( SYSCON_FUSE_CLIENT_APB_BASE ) + ( FUSE_CLIENT_APB_SERDES_REGISTER_61_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief FUSE_CLIENT_APB_REG_ABCSOC_REG_ABCSOC_FUSE_REGISTER_0 register description at address offset 0x0
  *
  * Register default value:        0xAAAA0000
  * Register full path in IP: fuse_client_apb/reg/ABCSOC_reg/abcsoc_fuse_register_0
  * ABCSOC_FUSE::reg_0_S
  */

typedef union {
  struct {
    uint32_t FUSE_VALID : 1;
    ///< Fuse Valid Indication
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
    uint32_t INT_ID : 16;
    ///< Interface ID - APB
    ///< AccessType="RO" BitOffset="16" ResetValue="0xAAAA"
  } ;
  uint32_t value;
} fuse_client_apb_abcsoc_fuse_register_0_reg_t;

#define FUSE_CLIENT_APB_ABCSOC_FUSE_REGISTER_0_DEFAULT (0xaaaa0000U)
#define FUSE_CLIENT_APB_ABCSOC_FUSE_REGISTER_0_RD_MASK (0xffff0001U)
#define FUSE_CLIENT_APB_ABCSOC_FUSE_REGISTER_0_WR_MASK (0x00000000U)


///< Fuse Valid Indication
#define FUSE_CLIENT_APB_ABCSOC_FUSE_REGISTER_0_FUSE_VALID_BF_OFF ( 0)
#define FUSE_CLIENT_APB_ABCSOC_FUSE_REGISTER_0_FUSE_VALID_BF_WID ( 1)
#define FUSE_CLIENT_APB_ABCSOC_FUSE_REGISTER_0_FUSE_VALID_BF_MSK (0x00000001)
#define FUSE_CLIENT_APB_ABCSOC_FUSE_REGISTER_0_FUSE_VALID_BF_DEF (0x00000000)

///< Interface ID - APB
#define FUSE_CLIENT_APB_ABCSOC_FUSE_REGISTER_0_INT_ID_BF_OFF (16)
#define FUSE_CLIENT_APB_ABCSOC_FUSE_REGISTER_0_INT_ID_BF_WID (16)
#define FUSE_CLIENT_APB_ABCSOC_FUSE_REGISTER_0_INT_ID_BF_MSK (0xFFFF0000)
#define FUSE_CLIENT_APB_ABCSOC_FUSE_REGISTER_0_INT_ID_BF_DEF (0xAAAA0000)


/** @brief FUSE_CLIENT_APB_REG_ABCSOC_REG_ABCSOC_FUSE_REGISTER_1 register description at address offset 0x4
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/ABCSOC_reg/abcsoc_fuse_register_1
  * ABCSOC_FUSE::reg_1_S
  */

typedef union {
  struct {
    uint32_t CHIP_VARIANT_ID : 32;
    ///< Reserved for Chip Variant ID - Format not defined
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_abcsoc_fuse_register_1_reg_t;

#define FUSE_CLIENT_APB_ABCSOC_FUSE_REGISTER_1_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_ABCSOC_FUSE_REGISTER_1_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_ABCSOC_FUSE_REGISTER_1_WR_MASK (0x00000000U)


///< Reserved for Chip Variant ID - Format not defined
#define FUSE_CLIENT_APB_ABCSOC_FUSE_REGISTER_1_CHIP_VARIANT_ID_BF_OFF ( 0)
#define FUSE_CLIENT_APB_ABCSOC_FUSE_REGISTER_1_CHIP_VARIANT_ID_BF_WID (32)
#define FUSE_CLIENT_APB_ABCSOC_FUSE_REGISTER_1_CHIP_VARIANT_ID_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_ABCSOC_FUSE_REGISTER_1_CHIP_VARIANT_ID_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_ABCSOC_REG_ABCSOC_HVM_SPARE_FUSE_REGISTER_0 register description at address offset 0x8
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/ABCSOC_reg/abcsoc_hvm_spare_fuse_register_0
  * ABCSOC_HVM_SPARE_FUSE::reg_0_S
  */

typedef union {
  struct {
    uint32_t SOC_HVM_SPARE_0 : 32;
    ///< Reserved for SERDES
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_abcsoc_hvm_spare_fuse_register_0_reg_t;

#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_0_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_0_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_0_WR_MASK (0x00000000U)


///< Reserved for SERDES
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_0_SOC_HVM_SPARE_0_BF_OFF ( 0)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_0_SOC_HVM_SPARE_0_BF_WID (32)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_0_SOC_HVM_SPARE_0_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_0_SOC_HVM_SPARE_0_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_ABCSOC_REG_ABCSOC_HVM_SPARE_FUSE_REGISTER_1 register description at address offset 0xc
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/ABCSOC_reg/abcsoc_hvm_spare_fuse_register_1
  * ABCSOC_HVM_SPARE_FUSE::reg_1_S
  */

typedef union {
  struct {
    uint32_t SOC_HVM_SPARE_1 : 32;
    ///< Reserved for SERDES
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_abcsoc_hvm_spare_fuse_register_1_reg_t;

#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_1_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_1_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_1_WR_MASK (0x00000000U)


///< Reserved for SERDES
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_1_SOC_HVM_SPARE_1_BF_OFF ( 0)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_1_SOC_HVM_SPARE_1_BF_WID (32)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_1_SOC_HVM_SPARE_1_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_1_SOC_HVM_SPARE_1_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_ABCSOC_REG_ABCSOC_HVM_SPARE_FUSE_REGISTER_2 register description at address offset 0x10
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/ABCSOC_reg/abcsoc_hvm_spare_fuse_register_2
  * ABCSOC_HVM_SPARE_FUSE::reg_2_S
  */

typedef union {
  struct {
    uint32_t SOC_HVM_SPARE_2 : 32;
    ///< Reserved for SERDES
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_abcsoc_hvm_spare_fuse_register_2_reg_t;

#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_2_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_2_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_2_WR_MASK (0x00000000U)


///< Reserved for SERDES
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_2_SOC_HVM_SPARE_2_BF_OFF ( 0)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_2_SOC_HVM_SPARE_2_BF_WID (32)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_2_SOC_HVM_SPARE_2_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_2_SOC_HVM_SPARE_2_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_ABCSOC_REG_ABCSOC_HVM_SPARE_FUSE_REGISTER_3 register description at address offset 0x14
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/ABCSOC_reg/abcsoc_hvm_spare_fuse_register_3
  * ABCSOC_HVM_SPARE_FUSE::reg_3_S
  */

typedef union {
  struct {
    uint32_t SOC_HVM_SPARE_3 : 32;
    ///< Reserved for SERDES
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_abcsoc_hvm_spare_fuse_register_3_reg_t;

#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_3_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_3_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_3_WR_MASK (0x00000000U)


///< Reserved for SERDES
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_3_SOC_HVM_SPARE_3_BF_OFF ( 0)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_3_SOC_HVM_SPARE_3_BF_WID (32)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_3_SOC_HVM_SPARE_3_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_3_SOC_HVM_SPARE_3_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_ABCSOC_REG_ABCSOC_HVM_SPARE_FUSE_REGISTER_4 register description at address offset 0x18
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/ABCSOC_reg/abcsoc_hvm_spare_fuse_register_4
  * ABCSOC_HVM_SPARE_FUSE::reg_4_S
  */

typedef union {
  struct {
    uint32_t SOC_HVM_SPARE_4 : 32;
    ///< Reserved for SERDES
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_abcsoc_hvm_spare_fuse_register_4_reg_t;

#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_4_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_4_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_4_WR_MASK (0x00000000U)


///< Reserved for SERDES
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_4_SOC_HVM_SPARE_4_BF_OFF ( 0)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_4_SOC_HVM_SPARE_4_BF_WID (32)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_4_SOC_HVM_SPARE_4_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_4_SOC_HVM_SPARE_4_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_ABCSOC_REG_ABCSOC_HVM_SPARE_FUSE_REGISTER_5 register description at address offset 0x1c
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/ABCSOC_reg/abcsoc_hvm_spare_fuse_register_5
  * ABCSOC_HVM_SPARE_FUSE::reg_5_S
  */

typedef union {
  struct {
    uint32_t SOC_HVM_SPARE_5 : 32;
    ///< Reserved for SERDES
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_abcsoc_hvm_spare_fuse_register_5_reg_t;

#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_5_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_5_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_5_WR_MASK (0x00000000U)


///< Reserved for SERDES
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_5_SOC_HVM_SPARE_5_BF_OFF ( 0)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_5_SOC_HVM_SPARE_5_BF_WID (32)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_5_SOC_HVM_SPARE_5_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_5_SOC_HVM_SPARE_5_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_ABCSOC_REG_ABCSOC_HVM_SPARE_FUSE_REGISTER_6 register description at address offset 0x20
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/ABCSOC_reg/abcsoc_hvm_spare_fuse_register_6
  * ABCSOC_HVM_SPARE_FUSE::reg_6_S
  */

typedef union {
  struct {
    uint32_t SOC_HVM_SPARE_6 : 32;
    ///< Reserved for SERDES
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_abcsoc_hvm_spare_fuse_register_6_reg_t;

#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_6_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_6_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_6_WR_MASK (0x00000000U)


///< Reserved for SERDES
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_6_SOC_HVM_SPARE_6_BF_OFF ( 0)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_6_SOC_HVM_SPARE_6_BF_WID (32)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_6_SOC_HVM_SPARE_6_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_6_SOC_HVM_SPARE_6_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_ABCSOC_REG_ABCSOC_HVM_SPARE_FUSE_REGISTER_7 register description at address offset 0x24
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/ABCSOC_reg/abcsoc_hvm_spare_fuse_register_7
  * ABCSOC_HVM_SPARE_FUSE::reg_7_S
  */

typedef union {
  struct {
    uint32_t SOC_HVM_SPARE_7 : 32;
    ///< Reserved for SERDES
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_abcsoc_hvm_spare_fuse_register_7_reg_t;

#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_7_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_7_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_7_WR_MASK (0x00000000U)


///< Reserved for SERDES
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_7_SOC_HVM_SPARE_7_BF_OFF ( 0)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_7_SOC_HVM_SPARE_7_BF_WID (32)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_7_SOC_HVM_SPARE_7_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_7_SOC_HVM_SPARE_7_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_ABCSOC_REG_ABCSOC_HVM_SPARE_FUSE_REGISTER_8 register description at address offset 0x28
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/ABCSOC_reg/abcsoc_hvm_spare_fuse_register_8
  * ABCSOC_HVM_SPARE_FUSE::reg_8_S
  */

typedef union {
  struct {
    uint32_t SOC_HVM_SPARE_8 : 32;
    ///< Reserved for SERDES
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_abcsoc_hvm_spare_fuse_register_8_reg_t;

#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_8_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_8_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_8_WR_MASK (0x00000000U)


///< Reserved for SERDES
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_8_SOC_HVM_SPARE_8_BF_OFF ( 0)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_8_SOC_HVM_SPARE_8_BF_WID (32)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_8_SOC_HVM_SPARE_8_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_8_SOC_HVM_SPARE_8_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_ABCSOC_REG_ABCSOC_HVM_SPARE_FUSE_REGISTER_9 register description at address offset 0x2c
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/ABCSOC_reg/abcsoc_hvm_spare_fuse_register_9
  * ABCSOC_HVM_SPARE_FUSE::reg_9_S
  */

typedef union {
  struct {
    uint32_t SOC_HVM_SPARE_9 : 32;
    ///< Reserved for SERDES
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_abcsoc_hvm_spare_fuse_register_9_reg_t;

#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_9_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_9_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_9_WR_MASK (0x00000000U)


///< Reserved for SERDES
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_9_SOC_HVM_SPARE_9_BF_OFF ( 0)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_9_SOC_HVM_SPARE_9_BF_WID (32)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_9_SOC_HVM_SPARE_9_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_9_SOC_HVM_SPARE_9_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_ANALOG_REGS_ANALOG_REGISTER_0 register description at address offset 0x100
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/ANALOG_regs/analog_register_0
  * ANALOG_FUSE::reg_0_S
  */

typedef union {
  struct {
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="0" ResetValue="None"
    uint32_t ANA0_TX0_3GHZ : 4;
    ///< Measure the output amplitude of the TX signal at two different frequencies
    ///< to give information about the substrate variation and absolute amplitude.
    ///< Step 0.5dBm, default 0dBm= 0000, 0000
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t ANA0_TX0_6GHZ : 4;
    ///< Measure the output amplitude of the TX signal at two different frequencies
    ///< to give information about the substrate variation and absolute amplitude.
    ///< Step 0.5dBm, default 0dBm= 0000, 0000
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t ANA0_TX1_3GHZ : 4;
    ///< Measure the output amplitude of the TX signal at two different frequencies
    ///< to give information about the substrate variation and absolute amplitude.
    ///< Step 0.5dBm, default 0dBm= 0000, 0000
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t ANA0_TX1_6GHZ : 4;
    ///< Measure the output amplitude of the TX signal at two different frequencies
    ///< to give information about the substrate variation and absolute amplitude.
    ///< Step 0.5dBm, default 0dBm= 0000, 0000
    ///< AccessType="RO/V" BitOffset="20" ResetValue="0x0"
    uint32_t ANA0_TX2_3GHZ : 4;
    ///< Measure the output amplitude of the TX signal at two different frequencies
    ///< to give information about the substrate variation and absolute amplitude.
    ///< Step 0.5dBm, default 0dBm= 0000, 0000
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t ANA0_TX2_6GHZ : 4;
    ///< Measure the output amplitude of the TX signal at two different frequencies
    ///< to give information about the substrate variation and absolute amplitude.
    ///< Step 0.5dBm, default 0dBm= 0000, 0000
    ///< AccessType="RO/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_analog_register_0_reg_t;

#define FUSE_CLIENT_APB_ANALOG_REGISTER_0_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_0_RD_MASK (0xffffff00U)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_0_WR_MASK (0x00000000U)


///< Measure the output amplitude of the TX signal at two different frequencies
///< to give information about the substrate variation and absolute amplitude.
///< Step 0.5dBm, default 0dBm= 0000, 0000
#define FUSE_CLIENT_APB_ANALOG_REGISTER_0_ANA0_TX0_3GHZ_BF_OFF ( 8)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_0_ANA0_TX0_3GHZ_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_0_ANA0_TX0_3GHZ_BF_MSK (0x00000F00)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_0_ANA0_TX0_3GHZ_BF_DEF (0x00000000)

///< Measure the output amplitude of the TX signal at two different frequencies
///< to give information about the substrate variation and absolute amplitude.
///< Step 0.5dBm, default 0dBm= 0000, 0000
#define FUSE_CLIENT_APB_ANALOG_REGISTER_0_ANA0_TX0_6GHZ_BF_OFF (12)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_0_ANA0_TX0_6GHZ_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_0_ANA0_TX0_6GHZ_BF_MSK (0x0000F000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_0_ANA0_TX0_6GHZ_BF_DEF (0x00000000)

///< Measure the output amplitude of the TX signal at two different frequencies
///< to give information about the substrate variation and absolute amplitude.
///< Step 0.5dBm, default 0dBm= 0000, 0000
#define FUSE_CLIENT_APB_ANALOG_REGISTER_0_ANA0_TX1_3GHZ_BF_OFF (16)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_0_ANA0_TX1_3GHZ_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_0_ANA0_TX1_3GHZ_BF_MSK (0x000F0000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_0_ANA0_TX1_3GHZ_BF_DEF (0x00000000)

///< Measure the output amplitude of the TX signal at two different frequencies
///< to give information about the substrate variation and absolute amplitude.
///< Step 0.5dBm, default 0dBm= 0000, 0000
#define FUSE_CLIENT_APB_ANALOG_REGISTER_0_ANA0_TX1_6GHZ_BF_OFF (20)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_0_ANA0_TX1_6GHZ_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_0_ANA0_TX1_6GHZ_BF_MSK (0x00F00000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_0_ANA0_TX1_6GHZ_BF_DEF (0x00000000)

///< Measure the output amplitude of the TX signal at two different frequencies
///< to give information about the substrate variation and absolute amplitude.
///< Step 0.5dBm, default 0dBm= 0000, 0000
#define FUSE_CLIENT_APB_ANALOG_REGISTER_0_ANA0_TX2_3GHZ_BF_OFF (24)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_0_ANA0_TX2_3GHZ_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_0_ANA0_TX2_3GHZ_BF_MSK (0x0F000000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_0_ANA0_TX2_3GHZ_BF_DEF (0x00000000)

///< Measure the output amplitude of the TX signal at two different frequencies
///< to give information about the substrate variation and absolute amplitude.
///< Step 0.5dBm, default 0dBm= 0000, 0000
#define FUSE_CLIENT_APB_ANALOG_REGISTER_0_ANA0_TX2_6GHZ_BF_OFF (28)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_0_ANA0_TX2_6GHZ_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_0_ANA0_TX2_6GHZ_BF_MSK (0xF0000000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_0_ANA0_TX2_6GHZ_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_ANALOG_REGS_ANALOG_REGISTER_1 register description at address offset 0x104
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/ANALOG_regs/analog_register_1
  * ANALOG_FUSE::reg_1_S
  */

typedef union {
  struct {
    uint32_t ANA0_TX3_3GHZ : 4;
    ///< Measure the output amplitude of the TX signal at two different frequencies
    ///< to give information about the substrate variation and absolute amplitude.
    ///< Step 0.5dBm, default 0dBm= 0000, 0000
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t ANA0_TX3_6GHZ : 4;
    ///< Measure the output amplitude of the TX signal at two different frequencies
    ///< to give information about the substrate variation and absolute amplitude.
    ///< Step 0.5dBm, default 0dBm= 0000, 0000
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t ANA0_TX4_3GHZ : 4;
    ///< Measure the output amplitude of the TX signal at two different frequencies
    ///< to give information about the substrate variation and absolute amplitude.
    ///< Step 0.5dBm, default 0dBm= 0000, 0000
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t ANA0_TX4_6GHZ : 4;
    ///< Measure the output amplitude of the TX signal at two different frequencies
    ///< to give information about the substrate variation and absolute amplitude.
    ///< Step 0.5dBm, default 0dBm= 0000, 0000
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t ANA0_TX5_3GHZ : 4;
    ///< Measure the output amplitude of the TX signal at two different frequencies
    ///< to give information about the substrate variation and absolute amplitude.
    ///< Step 0.5dBm, default 0dBm= 0000, 0000
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t ANA0_TX5_6GHZ : 4;
    ///< Measure the output amplitude of the TX signal at two different frequencies
    ///< to give information about the substrate variation and absolute amplitude.
    ///< Step 0.5dBm, default 0dBm= 0000, 0000
    ///< AccessType="RO/V" BitOffset="20" ResetValue="0x0"
    uint32_t ANA0_TX6_3GHZ : 4;
    ///< Measure the output amplitude of the TX signal at two different frequencies
    ///< to give information about the substrate variation and absolute amplitude.
    ///< Step 0.5dBm, default 0dBm= 0000, 0000
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t ANA0_TX6_6GHZ : 4;
    ///< Measure the output amplitude of the TX signal at two different frequencies
    ///< to give information about the substrate variation and absolute amplitude.
    ///< Step 0.5dBm, default 0dBm= 0000, 0000
    ///< AccessType="RO/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_analog_register_1_reg_t;

#define FUSE_CLIENT_APB_ANALOG_REGISTER_1_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_1_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_1_WR_MASK (0x00000000U)


///< Measure the output amplitude of the TX signal at two different frequencies
///< to give information about the substrate variation and absolute amplitude.
///< Step 0.5dBm, default 0dBm= 0000, 0000
#define FUSE_CLIENT_APB_ANALOG_REGISTER_1_ANA0_TX3_3GHZ_BF_OFF ( 0)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_1_ANA0_TX3_3GHZ_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_1_ANA0_TX3_3GHZ_BF_MSK (0x0000000F)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_1_ANA0_TX3_3GHZ_BF_DEF (0x00000000)

///< Measure the output amplitude of the TX signal at two different frequencies
///< to give information about the substrate variation and absolute amplitude.
///< Step 0.5dBm, default 0dBm= 0000, 0000
#define FUSE_CLIENT_APB_ANALOG_REGISTER_1_ANA0_TX3_6GHZ_BF_OFF ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_1_ANA0_TX3_6GHZ_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_1_ANA0_TX3_6GHZ_BF_MSK (0x000000F0)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_1_ANA0_TX3_6GHZ_BF_DEF (0x00000000)

///< Measure the output amplitude of the TX signal at two different frequencies
///< to give information about the substrate variation and absolute amplitude.
///< Step 0.5dBm, default 0dBm= 0000, 0000
#define FUSE_CLIENT_APB_ANALOG_REGISTER_1_ANA0_TX4_3GHZ_BF_OFF ( 8)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_1_ANA0_TX4_3GHZ_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_1_ANA0_TX4_3GHZ_BF_MSK (0x00000F00)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_1_ANA0_TX4_3GHZ_BF_DEF (0x00000000)

///< Measure the output amplitude of the TX signal at two different frequencies
///< to give information about the substrate variation and absolute amplitude.
///< Step 0.5dBm, default 0dBm= 0000, 0000
#define FUSE_CLIENT_APB_ANALOG_REGISTER_1_ANA0_TX4_6GHZ_BF_OFF (12)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_1_ANA0_TX4_6GHZ_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_1_ANA0_TX4_6GHZ_BF_MSK (0x0000F000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_1_ANA0_TX4_6GHZ_BF_DEF (0x00000000)

///< Measure the output amplitude of the TX signal at two different frequencies
///< to give information about the substrate variation and absolute amplitude.
///< Step 0.5dBm, default 0dBm= 0000, 0000
#define FUSE_CLIENT_APB_ANALOG_REGISTER_1_ANA0_TX5_3GHZ_BF_OFF (16)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_1_ANA0_TX5_3GHZ_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_1_ANA0_TX5_3GHZ_BF_MSK (0x000F0000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_1_ANA0_TX5_3GHZ_BF_DEF (0x00000000)

///< Measure the output amplitude of the TX signal at two different frequencies
///< to give information about the substrate variation and absolute amplitude.
///< Step 0.5dBm, default 0dBm= 0000, 0000
#define FUSE_CLIENT_APB_ANALOG_REGISTER_1_ANA0_TX5_6GHZ_BF_OFF (20)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_1_ANA0_TX5_6GHZ_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_1_ANA0_TX5_6GHZ_BF_MSK (0x00F00000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_1_ANA0_TX5_6GHZ_BF_DEF (0x00000000)

///< Measure the output amplitude of the TX signal at two different frequencies
///< to give information about the substrate variation and absolute amplitude.
///< Step 0.5dBm, default 0dBm= 0000, 0000
#define FUSE_CLIENT_APB_ANALOG_REGISTER_1_ANA0_TX6_3GHZ_BF_OFF (24)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_1_ANA0_TX6_3GHZ_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_1_ANA0_TX6_3GHZ_BF_MSK (0x0F000000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_1_ANA0_TX6_3GHZ_BF_DEF (0x00000000)

///< Measure the output amplitude of the TX signal at two different frequencies
///< to give information about the substrate variation and absolute amplitude.
///< Step 0.5dBm, default 0dBm= 0000, 0000
#define FUSE_CLIENT_APB_ANALOG_REGISTER_1_ANA0_TX6_6GHZ_BF_OFF (28)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_1_ANA0_TX6_6GHZ_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_1_ANA0_TX6_6GHZ_BF_MSK (0xF0000000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_1_ANA0_TX6_6GHZ_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_ANALOG_REGS_ANALOG_REGISTER_2 register description at address offset 0x108
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/ANALOG_regs/analog_register_2
  * ANALOG_FUSE::reg_2_S
  */

typedef union {
  struct {
    uint32_t ANA0_TX7_3GHZ : 4;
    ///< Measure the output amplitude of the TX signal at two different frequencies
    ///< to give information about the substrate variation and absolute amplitude.
    ///< Step 0.5dBm, default 0dBm= 0000, 0000
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t ANA0_TX7_6GHZ : 4;
    ///< Measure the output amplitude of the TX signal at two different frequencies
    ///< to give information about the substrate variation and absolute amplitude.
    ///< Step 0.5dBm, default 0dBm= 0000, 0000
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t ANA0_TX8_3GHZ : 4;
    ///< Measure the output amplitude of the TX signal at two different frequencies
    ///< to give information about the substrate variation and absolute amplitude.
    ///< Step 0.5dBm, default 0dBm= 0000, 0000
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t ANA0_TX8_6GHZ : 4;
    ///< Measure the output amplitude of the TX signal at two different frequencies
    ///< to give information about the substrate variation and absolute amplitude.
    ///< Step 0.5dBm, default 0dBm= 0000, 0000
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t ANA1_TX0_3GHZ : 4;
    ///< Measure the output amplitude of the TX signal at two different frequencies
    ///< to give information about the substrate variation and absolute amplitude.
    ///< Step 0.5dBm, default 0dBm= 0000, 0000
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t ANA1_TX0_6GHZ : 4;
    ///< Measure the output amplitude of the TX signal at two different frequencies
    ///< to give information about the substrate variation and absolute amplitude.
    ///< Step 0.5dBm, default 0dBm= 0000, 0000
    ///< AccessType="RO/V" BitOffset="20" ResetValue="0x0"
    uint32_t ANA1_TX1_3GHZ : 4;
    ///< Measure the output amplitude of the TX signal at two different frequencies
    ///< to give information about the substrate variation and absolute amplitude.
    ///< Step 0.5dBm, default 0dBm= 0000, 0000
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t ANA1_TX1_6GHZ : 4;
    ///< Measure the output amplitude of the TX signal at two different frequencies
    ///< to give information about the substrate variation and absolute amplitude.
    ///< Step 0.5dBm, default 0dBm= 0000, 0000
    ///< AccessType="RO/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_analog_register_2_reg_t;

#define FUSE_CLIENT_APB_ANALOG_REGISTER_2_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_2_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_2_WR_MASK (0x00000000U)


///< Measure the output amplitude of the TX signal at two different frequencies
///< to give information about the substrate variation and absolute amplitude.
///< Step 0.5dBm, default 0dBm= 0000, 0000
#define FUSE_CLIENT_APB_ANALOG_REGISTER_2_ANA0_TX7_3GHZ_BF_OFF ( 0)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_2_ANA0_TX7_3GHZ_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_2_ANA0_TX7_3GHZ_BF_MSK (0x0000000F)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_2_ANA0_TX7_3GHZ_BF_DEF (0x00000000)

///< Measure the output amplitude of the TX signal at two different frequencies
///< to give information about the substrate variation and absolute amplitude.
///< Step 0.5dBm, default 0dBm= 0000, 0000
#define FUSE_CLIENT_APB_ANALOG_REGISTER_2_ANA0_TX7_6GHZ_BF_OFF ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_2_ANA0_TX7_6GHZ_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_2_ANA0_TX7_6GHZ_BF_MSK (0x000000F0)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_2_ANA0_TX7_6GHZ_BF_DEF (0x00000000)

///< Measure the output amplitude of the TX signal at two different frequencies
///< to give information about the substrate variation and absolute amplitude.
///< Step 0.5dBm, default 0dBm= 0000, 0000
#define FUSE_CLIENT_APB_ANALOG_REGISTER_2_ANA0_TX8_3GHZ_BF_OFF ( 8)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_2_ANA0_TX8_3GHZ_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_2_ANA0_TX8_3GHZ_BF_MSK (0x00000F00)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_2_ANA0_TX8_3GHZ_BF_DEF (0x00000000)

///< Measure the output amplitude of the TX signal at two different frequencies
///< to give information about the substrate variation and absolute amplitude.
///< Step 0.5dBm, default 0dBm= 0000, 0000
#define FUSE_CLIENT_APB_ANALOG_REGISTER_2_ANA0_TX8_6GHZ_BF_OFF (12)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_2_ANA0_TX8_6GHZ_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_2_ANA0_TX8_6GHZ_BF_MSK (0x0000F000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_2_ANA0_TX8_6GHZ_BF_DEF (0x00000000)

///< Measure the output amplitude of the TX signal at two different frequencies
///< to give information about the substrate variation and absolute amplitude.
///< Step 0.5dBm, default 0dBm= 0000, 0000
#define FUSE_CLIENT_APB_ANALOG_REGISTER_2_ANA1_TX0_3GHZ_BF_OFF (16)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_2_ANA1_TX0_3GHZ_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_2_ANA1_TX0_3GHZ_BF_MSK (0x000F0000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_2_ANA1_TX0_3GHZ_BF_DEF (0x00000000)

///< Measure the output amplitude of the TX signal at two different frequencies
///< to give information about the substrate variation and absolute amplitude.
///< Step 0.5dBm, default 0dBm= 0000, 0000
#define FUSE_CLIENT_APB_ANALOG_REGISTER_2_ANA1_TX0_6GHZ_BF_OFF (20)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_2_ANA1_TX0_6GHZ_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_2_ANA1_TX0_6GHZ_BF_MSK (0x00F00000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_2_ANA1_TX0_6GHZ_BF_DEF (0x00000000)

///< Measure the output amplitude of the TX signal at two different frequencies
///< to give information about the substrate variation and absolute amplitude.
///< Step 0.5dBm, default 0dBm= 0000, 0000
#define FUSE_CLIENT_APB_ANALOG_REGISTER_2_ANA1_TX1_3GHZ_BF_OFF (24)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_2_ANA1_TX1_3GHZ_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_2_ANA1_TX1_3GHZ_BF_MSK (0x0F000000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_2_ANA1_TX1_3GHZ_BF_DEF (0x00000000)

///< Measure the output amplitude of the TX signal at two different frequencies
///< to give information about the substrate variation and absolute amplitude.
///< Step 0.5dBm, default 0dBm= 0000, 0000
#define FUSE_CLIENT_APB_ANALOG_REGISTER_2_ANA1_TX1_6GHZ_BF_OFF (28)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_2_ANA1_TX1_6GHZ_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_2_ANA1_TX1_6GHZ_BF_MSK (0xF0000000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_2_ANA1_TX1_6GHZ_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_ANALOG_REGS_ANALOG_REGISTER_3 register description at address offset 0x10c
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/ANALOG_regs/analog_register_3
  * ANALOG_FUSE::reg_3_S
  */

typedef union {
  struct {
    uint32_t ANA1_TX2_3GHZ : 4;
    ///< Measure the output amplitude of the TX signal at two different frequencies
    ///< to give information about the substrate variation and absolute amplitude.
    ///< Step 0.5dBm, default 0dBm= 0000, 0000
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t ANA1_TX2_6GHZ : 4;
    ///< Measure the output amplitude of the TX signal at two different frequencies
    ///< to give information about the substrate variation and absolute amplitude.
    ///< Step 0.5dBm, default 0dBm= 0000, 0000
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t ANA1_TX3_3GHZ : 4;
    ///< Measure the output amplitude of the TX signal at two different frequencies
    ///< to give information about the substrate variation and absolute amplitude.
    ///< Step 0.5dBm, default 0dBm= 0000, 0000
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t ANA1_TX3_6GHZ : 4;
    ///< Measure the output amplitude of the TX signal at two different frequencies
    ///< to give information about the substrate variation and absolute amplitude.
    ///< Step 0.5dBm, default 0dBm= 0000, 0000
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t ANA1_TX4_3GHZ : 4;
    ///< Measure the output amplitude of the TX signal at two different frequencies
    ///< to give information about the substrate variation and absolute amplitude.
    ///< Step 0.5dBm, default 0dBm= 0000, 0000
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t ANA1_TX4_6GHZ : 4;
    ///< Measure the output amplitude of the TX signal at two different frequencies
    ///< to give information about the substrate variation and absolute amplitude.
    ///< Step 0.5dBm, default 0dBm= 0000, 0000
    ///< AccessType="RO/V" BitOffset="20" ResetValue="0x0"
    uint32_t ANA1_TX5_3GHZ : 4;
    ///< Measure the output amplitude of the TX signal at two different frequencies
    ///< to give information about the substrate variation and absolute amplitude.
    ///< Step 0.5dBm, default 0dBm= 0000, 0000
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t ANA1_TX5_6GHZ : 4;
    ///< Measure the output amplitude of the TX signal at two different frequencies
    ///< to give information about the substrate variation and absolute amplitude.
    ///< Step 0.5dBm, default 0dBm= 0000, 0000
    ///< AccessType="RO/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_analog_register_3_reg_t;

#define FUSE_CLIENT_APB_ANALOG_REGISTER_3_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_3_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_3_WR_MASK (0x00000000U)


///< Measure the output amplitude of the TX signal at two different frequencies
///< to give information about the substrate variation and absolute amplitude.
///< Step 0.5dBm, default 0dBm= 0000, 0000
#define FUSE_CLIENT_APB_ANALOG_REGISTER_3_ANA1_TX2_3GHZ_BF_OFF ( 0)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_3_ANA1_TX2_3GHZ_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_3_ANA1_TX2_3GHZ_BF_MSK (0x0000000F)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_3_ANA1_TX2_3GHZ_BF_DEF (0x00000000)

///< Measure the output amplitude of the TX signal at two different frequencies
///< to give information about the substrate variation and absolute amplitude.
///< Step 0.5dBm, default 0dBm= 0000, 0000
#define FUSE_CLIENT_APB_ANALOG_REGISTER_3_ANA1_TX2_6GHZ_BF_OFF ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_3_ANA1_TX2_6GHZ_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_3_ANA1_TX2_6GHZ_BF_MSK (0x000000F0)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_3_ANA1_TX2_6GHZ_BF_DEF (0x00000000)

///< Measure the output amplitude of the TX signal at two different frequencies
///< to give information about the substrate variation and absolute amplitude.
///< Step 0.5dBm, default 0dBm= 0000, 0000
#define FUSE_CLIENT_APB_ANALOG_REGISTER_3_ANA1_TX3_3GHZ_BF_OFF ( 8)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_3_ANA1_TX3_3GHZ_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_3_ANA1_TX3_3GHZ_BF_MSK (0x00000F00)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_3_ANA1_TX3_3GHZ_BF_DEF (0x00000000)

///< Measure the output amplitude of the TX signal at two different frequencies
///< to give information about the substrate variation and absolute amplitude.
///< Step 0.5dBm, default 0dBm= 0000, 0000
#define FUSE_CLIENT_APB_ANALOG_REGISTER_3_ANA1_TX3_6GHZ_BF_OFF (12)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_3_ANA1_TX3_6GHZ_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_3_ANA1_TX3_6GHZ_BF_MSK (0x0000F000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_3_ANA1_TX3_6GHZ_BF_DEF (0x00000000)

///< Measure the output amplitude of the TX signal at two different frequencies
///< to give information about the substrate variation and absolute amplitude.
///< Step 0.5dBm, default 0dBm= 0000, 0000
#define FUSE_CLIENT_APB_ANALOG_REGISTER_3_ANA1_TX4_3GHZ_BF_OFF (16)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_3_ANA1_TX4_3GHZ_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_3_ANA1_TX4_3GHZ_BF_MSK (0x000F0000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_3_ANA1_TX4_3GHZ_BF_DEF (0x00000000)

///< Measure the output amplitude of the TX signal at two different frequencies
///< to give information about the substrate variation and absolute amplitude.
///< Step 0.5dBm, default 0dBm= 0000, 0000
#define FUSE_CLIENT_APB_ANALOG_REGISTER_3_ANA1_TX4_6GHZ_BF_OFF (20)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_3_ANA1_TX4_6GHZ_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_3_ANA1_TX4_6GHZ_BF_MSK (0x00F00000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_3_ANA1_TX4_6GHZ_BF_DEF (0x00000000)

///< Measure the output amplitude of the TX signal at two different frequencies
///< to give information about the substrate variation and absolute amplitude.
///< Step 0.5dBm, default 0dBm= 0000, 0000
#define FUSE_CLIENT_APB_ANALOG_REGISTER_3_ANA1_TX5_3GHZ_BF_OFF (24)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_3_ANA1_TX5_3GHZ_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_3_ANA1_TX5_3GHZ_BF_MSK (0x0F000000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_3_ANA1_TX5_3GHZ_BF_DEF (0x00000000)

///< Measure the output amplitude of the TX signal at two different frequencies
///< to give information about the substrate variation and absolute amplitude.
///< Step 0.5dBm, default 0dBm= 0000, 0000
#define FUSE_CLIENT_APB_ANALOG_REGISTER_3_ANA1_TX5_6GHZ_BF_OFF (28)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_3_ANA1_TX5_6GHZ_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_3_ANA1_TX5_6GHZ_BF_MSK (0xF0000000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_3_ANA1_TX5_6GHZ_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_ANALOG_REGS_ANALOG_REGISTER_4 register description at address offset 0x110
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/ANALOG_regs/analog_register_4
  * ANALOG_FUSE::reg_4_S
  */

typedef union {
  struct {
    uint32_t ANA1_TX6_3GHZ : 4;
    ///< Measure the output amplitude of the TX signal at two different frequencies
    ///< to give information about the substrate variation and absolute amplitude.
    ///< Step 0.5dBm, default 0dBm= 0000, 0000
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t ANA1_TX6_6GHZ : 4;
    ///< Measure the output amplitude of the TX signal at two different frequencies
    ///< to give information about the substrate variation and absolute amplitude.
    ///< Step 0.5dBm, default 0dBm= 0000, 0000
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t ANA1_TX7_3GHZ : 4;
    ///< Measure the output amplitude of the TX signal at two different frequencies
    ///< to give information about the substrate variation and absolute amplitude.
    ///< Step 0.5dBm, default 0dBm= 0000, 0000
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t ANA1_TX7_6GHZ : 4;
    ///< Measure the output amplitude of the TX signal at two different frequencies
    ///< to give information about the substrate variation and absolute amplitude.
    ///< Step 0.5dBm, default 0dBm= 0000, 0000
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t ANA1_TX8_3GHZ : 4;
    ///< Measure the output amplitude of the TX signal at two different frequencies
    ///< to give information about the substrate variation and absolute amplitude.
    ///< Step 0.5dBm, default 0dBm= 0000, 0000
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t ANA1_TX8_6GHZ : 4;
    ///< Measure the output amplitude of the TX signal at two different frequencies
    ///< to give information about the substrate variation and absolute amplitude.
    ///< Step 0.5dBm, default 0dBm= 0000, 0000
    ///< AccessType="RO/V" BitOffset="20" ResetValue="0x0"
    uint32_t ANA0_RX0_LDO0 : 4;
    ///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t ANA0_RX0_LDO2 : 4;
    ///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_analog_register_4_reg_t;

#define FUSE_CLIENT_APB_ANALOG_REGISTER_4_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_4_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_4_WR_MASK (0x00000000U)


///< Measure the output amplitude of the TX signal at two different frequencies
///< to give information about the substrate variation and absolute amplitude.
///< Step 0.5dBm, default 0dBm= 0000, 0000
#define FUSE_CLIENT_APB_ANALOG_REGISTER_4_ANA1_TX6_3GHZ_BF_OFF ( 0)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_4_ANA1_TX6_3GHZ_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_4_ANA1_TX6_3GHZ_BF_MSK (0x0000000F)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_4_ANA1_TX6_3GHZ_BF_DEF (0x00000000)

///< Measure the output amplitude of the TX signal at two different frequencies
///< to give information about the substrate variation and absolute amplitude.
///< Step 0.5dBm, default 0dBm= 0000, 0000
#define FUSE_CLIENT_APB_ANALOG_REGISTER_4_ANA1_TX6_6GHZ_BF_OFF ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_4_ANA1_TX6_6GHZ_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_4_ANA1_TX6_6GHZ_BF_MSK (0x000000F0)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_4_ANA1_TX6_6GHZ_BF_DEF (0x00000000)

///< Measure the output amplitude of the TX signal at two different frequencies
///< to give information about the substrate variation and absolute amplitude.
///< Step 0.5dBm, default 0dBm= 0000, 0000
#define FUSE_CLIENT_APB_ANALOG_REGISTER_4_ANA1_TX7_3GHZ_BF_OFF ( 8)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_4_ANA1_TX7_3GHZ_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_4_ANA1_TX7_3GHZ_BF_MSK (0x00000F00)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_4_ANA1_TX7_3GHZ_BF_DEF (0x00000000)

///< Measure the output amplitude of the TX signal at two different frequencies
///< to give information about the substrate variation and absolute amplitude.
///< Step 0.5dBm, default 0dBm= 0000, 0000
#define FUSE_CLIENT_APB_ANALOG_REGISTER_4_ANA1_TX7_6GHZ_BF_OFF (12)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_4_ANA1_TX7_6GHZ_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_4_ANA1_TX7_6GHZ_BF_MSK (0x0000F000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_4_ANA1_TX7_6GHZ_BF_DEF (0x00000000)

///< Measure the output amplitude of the TX signal at two different frequencies
///< to give information about the substrate variation and absolute amplitude.
///< Step 0.5dBm, default 0dBm= 0000, 0000
#define FUSE_CLIENT_APB_ANALOG_REGISTER_4_ANA1_TX8_3GHZ_BF_OFF (16)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_4_ANA1_TX8_3GHZ_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_4_ANA1_TX8_3GHZ_BF_MSK (0x000F0000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_4_ANA1_TX8_3GHZ_BF_DEF (0x00000000)

///< Measure the output amplitude of the TX signal at two different frequencies
///< to give information about the substrate variation and absolute amplitude.
///< Step 0.5dBm, default 0dBm= 0000, 0000
#define FUSE_CLIENT_APB_ANALOG_REGISTER_4_ANA1_TX8_6GHZ_BF_OFF (20)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_4_ANA1_TX8_6GHZ_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_4_ANA1_TX8_6GHZ_BF_MSK (0x00F00000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_4_ANA1_TX8_6GHZ_BF_DEF (0x00000000)

///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_4_ANA0_RX0_LDO0_BF_OFF (24)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_4_ANA0_RX0_LDO0_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_4_ANA0_RX0_LDO0_BF_MSK (0x0F000000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_4_ANA0_RX0_LDO0_BF_DEF (0x00000000)

///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_4_ANA0_RX0_LDO2_BF_OFF (28)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_4_ANA0_RX0_LDO2_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_4_ANA0_RX0_LDO2_BF_MSK (0xF0000000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_4_ANA0_RX0_LDO2_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_ANALOG_REGS_ANALOG_REGISTER_5 register description at address offset 0x114
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/ANALOG_regs/analog_register_5
  * ANALOG_FUSE::reg_5_S
  */

typedef union {
  struct {
    uint32_t ANA0_RX1_LDO0 : 4;
    ///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t ANA0_RX1_LDO2 : 4;
    ///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t ANA0_RX2_LDO0 : 4;
    ///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t ANA0_RX2_LDO2 : 4;
    ///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t ANA0_RX3_LDO0 : 4;
    ///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t ANA0_RX3_LDO2 : 4;
    ///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="20" ResetValue="0x0"
    uint32_t ANA0_RX4_LDO0 : 4;
    ///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t ANA0_RX4_LDO2 : 4;
    ///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_analog_register_5_reg_t;

#define FUSE_CLIENT_APB_ANALOG_REGISTER_5_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_5_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_5_WR_MASK (0x00000000U)


///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_5_ANA0_RX1_LDO0_BF_OFF ( 0)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_5_ANA0_RX1_LDO0_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_5_ANA0_RX1_LDO0_BF_MSK (0x0000000F)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_5_ANA0_RX1_LDO0_BF_DEF (0x00000000)

///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_5_ANA0_RX1_LDO2_BF_OFF ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_5_ANA0_RX1_LDO2_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_5_ANA0_RX1_LDO2_BF_MSK (0x000000F0)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_5_ANA0_RX1_LDO2_BF_DEF (0x00000000)

///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_5_ANA0_RX2_LDO0_BF_OFF ( 8)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_5_ANA0_RX2_LDO0_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_5_ANA0_RX2_LDO0_BF_MSK (0x00000F00)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_5_ANA0_RX2_LDO0_BF_DEF (0x00000000)

///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_5_ANA0_RX2_LDO2_BF_OFF (12)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_5_ANA0_RX2_LDO2_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_5_ANA0_RX2_LDO2_BF_MSK (0x0000F000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_5_ANA0_RX2_LDO2_BF_DEF (0x00000000)

///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_5_ANA0_RX3_LDO0_BF_OFF (16)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_5_ANA0_RX3_LDO0_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_5_ANA0_RX3_LDO0_BF_MSK (0x000F0000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_5_ANA0_RX3_LDO0_BF_DEF (0x00000000)

///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_5_ANA0_RX3_LDO2_BF_OFF (20)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_5_ANA0_RX3_LDO2_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_5_ANA0_RX3_LDO2_BF_MSK (0x00F00000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_5_ANA0_RX3_LDO2_BF_DEF (0x00000000)

///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_5_ANA0_RX4_LDO0_BF_OFF (24)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_5_ANA0_RX4_LDO0_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_5_ANA0_RX4_LDO0_BF_MSK (0x0F000000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_5_ANA0_RX4_LDO0_BF_DEF (0x00000000)

///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_5_ANA0_RX4_LDO2_BF_OFF (28)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_5_ANA0_RX4_LDO2_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_5_ANA0_RX4_LDO2_BF_MSK (0xF0000000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_5_ANA0_RX4_LDO2_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_ANALOG_REGS_ANALOG_REGISTER_6 register description at address offset 0x118
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/ANALOG_regs/analog_register_6
  * ANALOG_FUSE::reg_6_S
  */

typedef union {
  struct {
    uint32_t ANA0_RX5_LDO0 : 4;
    ///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t ANA0_RX5_LDO2 : 4;
    ///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t ANA0_RX6_LDO0 : 4;
    ///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t ANA0_RX6_LDO2 : 4;
    ///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t ANA0_RX7_LDO0 : 4;
    ///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t ANA0_RX7_LDO2 : 4;
    ///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="20" ResetValue="0x0"
    uint32_t ANA1_RX0_LDO0 : 4;
    ///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t ANA1_RX0_LDO2 : 4;
    ///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_analog_register_6_reg_t;

#define FUSE_CLIENT_APB_ANALOG_REGISTER_6_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_6_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_6_WR_MASK (0x00000000U)


///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_6_ANA0_RX5_LDO0_BF_OFF ( 0)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_6_ANA0_RX5_LDO0_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_6_ANA0_RX5_LDO0_BF_MSK (0x0000000F)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_6_ANA0_RX5_LDO0_BF_DEF (0x00000000)

///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_6_ANA0_RX5_LDO2_BF_OFF ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_6_ANA0_RX5_LDO2_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_6_ANA0_RX5_LDO2_BF_MSK (0x000000F0)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_6_ANA0_RX5_LDO2_BF_DEF (0x00000000)

///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_6_ANA0_RX6_LDO0_BF_OFF ( 8)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_6_ANA0_RX6_LDO0_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_6_ANA0_RX6_LDO0_BF_MSK (0x00000F00)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_6_ANA0_RX6_LDO0_BF_DEF (0x00000000)

///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_6_ANA0_RX6_LDO2_BF_OFF (12)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_6_ANA0_RX6_LDO2_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_6_ANA0_RX6_LDO2_BF_MSK (0x0000F000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_6_ANA0_RX6_LDO2_BF_DEF (0x00000000)

///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_6_ANA0_RX7_LDO0_BF_OFF (16)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_6_ANA0_RX7_LDO0_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_6_ANA0_RX7_LDO0_BF_MSK (0x000F0000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_6_ANA0_RX7_LDO0_BF_DEF (0x00000000)

///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_6_ANA0_RX7_LDO2_BF_OFF (20)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_6_ANA0_RX7_LDO2_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_6_ANA0_RX7_LDO2_BF_MSK (0x00F00000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_6_ANA0_RX7_LDO2_BF_DEF (0x00000000)

///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_6_ANA1_RX0_LDO0_BF_OFF (24)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_6_ANA1_RX0_LDO0_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_6_ANA1_RX0_LDO0_BF_MSK (0x0F000000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_6_ANA1_RX0_LDO0_BF_DEF (0x00000000)

///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_6_ANA1_RX0_LDO2_BF_OFF (28)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_6_ANA1_RX0_LDO2_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_6_ANA1_RX0_LDO2_BF_MSK (0xF0000000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_6_ANA1_RX0_LDO2_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_ANALOG_REGS_ANALOG_REGISTER_7 register description at address offset 0x11c
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/ANALOG_regs/analog_register_7
  * ANALOG_FUSE::reg_7_S
  */

typedef union {
  struct {
    uint32_t ANA1_RX1_LDO0 : 4;
    ///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t ANA1_RX1_LDO2 : 4;
    ///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t ANA1_RX2_LDO0 : 4;
    ///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t ANA1_RX2_LDO2 : 4;
    ///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t ANA1_RX3_LDO0 : 4;
    ///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t ANA1_RX3_LDO2 : 4;
    ///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="20" ResetValue="0x0"
    uint32_t ANA1_RX4_LDO0 : 4;
    ///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t ANA1_RX4_LDO2 : 4;
    ///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_analog_register_7_reg_t;

#define FUSE_CLIENT_APB_ANALOG_REGISTER_7_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_7_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_7_WR_MASK (0x00000000U)


///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_7_ANA1_RX1_LDO0_BF_OFF ( 0)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_7_ANA1_RX1_LDO0_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_7_ANA1_RX1_LDO0_BF_MSK (0x0000000F)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_7_ANA1_RX1_LDO0_BF_DEF (0x00000000)

///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_7_ANA1_RX1_LDO2_BF_OFF ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_7_ANA1_RX1_LDO2_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_7_ANA1_RX1_LDO2_BF_MSK (0x000000F0)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_7_ANA1_RX1_LDO2_BF_DEF (0x00000000)

///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_7_ANA1_RX2_LDO0_BF_OFF ( 8)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_7_ANA1_RX2_LDO0_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_7_ANA1_RX2_LDO0_BF_MSK (0x00000F00)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_7_ANA1_RX2_LDO0_BF_DEF (0x00000000)

///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_7_ANA1_RX2_LDO2_BF_OFF (12)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_7_ANA1_RX2_LDO2_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_7_ANA1_RX2_LDO2_BF_MSK (0x0000F000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_7_ANA1_RX2_LDO2_BF_DEF (0x00000000)

///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_7_ANA1_RX3_LDO0_BF_OFF (16)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_7_ANA1_RX3_LDO0_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_7_ANA1_RX3_LDO0_BF_MSK (0x000F0000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_7_ANA1_RX3_LDO0_BF_DEF (0x00000000)

///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_7_ANA1_RX3_LDO2_BF_OFF (20)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_7_ANA1_RX3_LDO2_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_7_ANA1_RX3_LDO2_BF_MSK (0x00F00000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_7_ANA1_RX3_LDO2_BF_DEF (0x00000000)

///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_7_ANA1_RX4_LDO0_BF_OFF (24)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_7_ANA1_RX4_LDO0_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_7_ANA1_RX4_LDO0_BF_MSK (0x0F000000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_7_ANA1_RX4_LDO0_BF_DEF (0x00000000)

///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_7_ANA1_RX4_LDO2_BF_OFF (28)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_7_ANA1_RX4_LDO2_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_7_ANA1_RX4_LDO2_BF_MSK (0xF0000000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_7_ANA1_RX4_LDO2_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_ANALOG_REGS_ANALOG_REGISTER_8 register description at address offset 0x120
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/ANALOG_regs/analog_register_8
  * ANALOG_FUSE::reg_8_S
  */

typedef union {
  struct {
    uint32_t ANA1_RX5_LDO0 : 4;
    ///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t ANA1_RX5_LDO2 : 4;
    ///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t ANA1_RX6_LDO0 : 4;
    ///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t ANA1_RX6_LDO2 : 4;
    ///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t ANA1_RX7_LDO0 : 4;
    ///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t ANA1_RX7_LDO2 : 4;
    ///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="20" ResetValue="0x0"
    uint32_t ANA0_RXFB0_LDO0 : 4;
    ///< Measure thefeedback RX core supply domain 0 and 1 and store the value.
    ///< Nominal 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t ANA0_RXFB0_LDO1 : 4;
    ///< Measure thefeedback RX core supply domain 0 and 1 and store the value.
    ///< Nominal 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_analog_register_8_reg_t;

#define FUSE_CLIENT_APB_ANALOG_REGISTER_8_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_8_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_8_WR_MASK (0x00000000U)


///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_8_ANA1_RX5_LDO0_BF_OFF ( 0)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_8_ANA1_RX5_LDO0_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_8_ANA1_RX5_LDO0_BF_MSK (0x0000000F)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_8_ANA1_RX5_LDO0_BF_DEF (0x00000000)

///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_8_ANA1_RX5_LDO2_BF_OFF ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_8_ANA1_RX5_LDO2_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_8_ANA1_RX5_LDO2_BF_MSK (0x000000F0)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_8_ANA1_RX5_LDO2_BF_DEF (0x00000000)

///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_8_ANA1_RX6_LDO0_BF_OFF ( 8)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_8_ANA1_RX6_LDO0_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_8_ANA1_RX6_LDO0_BF_MSK (0x00000F00)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_8_ANA1_RX6_LDO0_BF_DEF (0x00000000)

///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_8_ANA1_RX6_LDO2_BF_OFF (12)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_8_ANA1_RX6_LDO2_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_8_ANA1_RX6_LDO2_BF_MSK (0x0000F000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_8_ANA1_RX6_LDO2_BF_DEF (0x00000000)

///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_8_ANA1_RX7_LDO0_BF_OFF (16)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_8_ANA1_RX7_LDO0_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_8_ANA1_RX7_LDO0_BF_MSK (0x000F0000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_8_ANA1_RX7_LDO0_BF_DEF (0x00000000)

///< Measure the rx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_8_ANA1_RX7_LDO2_BF_OFF (20)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_8_ANA1_RX7_LDO2_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_8_ANA1_RX7_LDO2_BF_MSK (0x00F00000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_8_ANA1_RX7_LDO2_BF_DEF (0x00000000)

///< Measure thefeedback RX core supply domain 0 and 1 and store the value.
///< Nominal 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_8_ANA0_RXFB0_LDO0_BF_OFF (24)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_8_ANA0_RXFB0_LDO0_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_8_ANA0_RXFB0_LDO0_BF_MSK (0x0F000000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_8_ANA0_RXFB0_LDO0_BF_DEF (0x00000000)

///< Measure thefeedback RX core supply domain 0 and 1 and store the value.
///< Nominal 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_8_ANA0_RXFB0_LDO1_BF_OFF (28)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_8_ANA0_RXFB0_LDO1_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_8_ANA0_RXFB0_LDO1_BF_MSK (0xF0000000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_8_ANA0_RXFB0_LDO1_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_ANALOG_REGS_ANALOG_REGISTER_9 register description at address offset 0x124
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/ANALOG_regs/analog_register_9
  * ANALOG_FUSE::reg_9_S
  */

typedef union {
  struct {
    uint32_t ANA0_RXFB0_LDO2 : 4;
    ///< Measure thefeedback RX core supply domain 0 and 1 and store the value.
    ///< Nominal 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t ANA0_RXFB0_LDO3 : 4;
    ///< Measure thefeedback RX core supply domain 0 and 1 and store the value.
    ///< Nominal 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t ANA1_RXFB1_LDO0 : 4;
    ///< Measure thefeedback RX core supply domain 0 and 1 and store the value.
    ///< Nominal 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t ANA1_RXFB1_LDO1 : 4;
    ///< Measure thefeedback RX core supply domain 0 and 1 and store the value.
    ///< Nominal 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t ANA1_RXFB1_LDO2 : 4;
    ///< Measure thefeedback RX core supply domain 0 and 1 and store the value.
    ///< Nominal 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t ANA1_RXFB1_LDO3 : 4;
    ///< Measure thefeedback RX core supply domain 0 and 1 and store the value.
    ///< Nominal 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="20" ResetValue="0x0"
    uint32_t ANA0_TX0_LDO0 : 4;
    ///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t ANA0_TX0_LDO2 : 4;
    ///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_analog_register_9_reg_t;

#define FUSE_CLIENT_APB_ANALOG_REGISTER_9_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_9_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_9_WR_MASK (0x00000000U)


///< Measure thefeedback RX core supply domain 0 and 1 and store the value.
///< Nominal 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_9_ANA0_RXFB0_LDO2_BF_OFF ( 0)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_9_ANA0_RXFB0_LDO2_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_9_ANA0_RXFB0_LDO2_BF_MSK (0x0000000F)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_9_ANA0_RXFB0_LDO2_BF_DEF (0x00000000)

///< Measure thefeedback RX core supply domain 0 and 1 and store the value.
///< Nominal 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_9_ANA0_RXFB0_LDO3_BF_OFF ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_9_ANA0_RXFB0_LDO3_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_9_ANA0_RXFB0_LDO3_BF_MSK (0x000000F0)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_9_ANA0_RXFB0_LDO3_BF_DEF (0x00000000)

///< Measure thefeedback RX core supply domain 0 and 1 and store the value.
///< Nominal 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_9_ANA1_RXFB1_LDO0_BF_OFF ( 8)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_9_ANA1_RXFB1_LDO0_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_9_ANA1_RXFB1_LDO0_BF_MSK (0x00000F00)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_9_ANA1_RXFB1_LDO0_BF_DEF (0x00000000)

///< Measure thefeedback RX core supply domain 0 and 1 and store the value.
///< Nominal 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_9_ANA1_RXFB1_LDO1_BF_OFF (12)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_9_ANA1_RXFB1_LDO1_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_9_ANA1_RXFB1_LDO1_BF_MSK (0x0000F000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_9_ANA1_RXFB1_LDO1_BF_DEF (0x00000000)

///< Measure thefeedback RX core supply domain 0 and 1 and store the value.
///< Nominal 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_9_ANA1_RXFB1_LDO2_BF_OFF (16)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_9_ANA1_RXFB1_LDO2_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_9_ANA1_RXFB1_LDO2_BF_MSK (0x000F0000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_9_ANA1_RXFB1_LDO2_BF_DEF (0x00000000)

///< Measure thefeedback RX core supply domain 0 and 1 and store the value.
///< Nominal 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_9_ANA1_RXFB1_LDO3_BF_OFF (20)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_9_ANA1_RXFB1_LDO3_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_9_ANA1_RXFB1_LDO3_BF_MSK (0x00F00000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_9_ANA1_RXFB1_LDO3_BF_DEF (0x00000000)

///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_9_ANA0_TX0_LDO0_BF_OFF (24)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_9_ANA0_TX0_LDO0_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_9_ANA0_TX0_LDO0_BF_MSK (0x0F000000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_9_ANA0_TX0_LDO0_BF_DEF (0x00000000)

///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_9_ANA0_TX0_LDO2_BF_OFF (28)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_9_ANA0_TX0_LDO2_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_9_ANA0_TX0_LDO2_BF_MSK (0xF0000000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_9_ANA0_TX0_LDO2_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_ANALOG_REGS_ANALOG_REGISTER_10 register description at address offset 0x128
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/ANALOG_regs/analog_register_10
  * ANALOG_FUSE::reg_10_S
  */

typedef union {
  struct {
    uint32_t ANA0_TX1_LDO0 : 4;
    ///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t ANA0_TX1_LDO2 : 4;
    ///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t ANA0_TX2_LDO0 : 4;
    ///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t ANA0_TX2_LDO2 : 4;
    ///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t ANA0_TX3_LDO0 : 4;
    ///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t ANA0_TX3_LDO2 : 4;
    ///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="20" ResetValue="0x0"
    uint32_t ANA0_TX4_LDO0 : 4;
    ///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t ANA0_TX4_LDO2 : 4;
    ///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_analog_register_10_reg_t;

#define FUSE_CLIENT_APB_ANALOG_REGISTER_10_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_10_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_10_WR_MASK (0x00000000U)


///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_10_ANA0_TX1_LDO0_BF_OFF ( 0)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_10_ANA0_TX1_LDO0_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_10_ANA0_TX1_LDO0_BF_MSK (0x0000000F)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_10_ANA0_TX1_LDO0_BF_DEF (0x00000000)

///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_10_ANA0_TX1_LDO2_BF_OFF ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_10_ANA0_TX1_LDO2_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_10_ANA0_TX1_LDO2_BF_MSK (0x000000F0)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_10_ANA0_TX1_LDO2_BF_DEF (0x00000000)

///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_10_ANA0_TX2_LDO0_BF_OFF ( 8)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_10_ANA0_TX2_LDO0_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_10_ANA0_TX2_LDO0_BF_MSK (0x00000F00)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_10_ANA0_TX2_LDO0_BF_DEF (0x00000000)

///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_10_ANA0_TX2_LDO2_BF_OFF (12)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_10_ANA0_TX2_LDO2_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_10_ANA0_TX2_LDO2_BF_MSK (0x0000F000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_10_ANA0_TX2_LDO2_BF_DEF (0x00000000)

///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_10_ANA0_TX3_LDO0_BF_OFF (16)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_10_ANA0_TX3_LDO0_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_10_ANA0_TX3_LDO0_BF_MSK (0x000F0000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_10_ANA0_TX3_LDO0_BF_DEF (0x00000000)

///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_10_ANA0_TX3_LDO2_BF_OFF (20)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_10_ANA0_TX3_LDO2_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_10_ANA0_TX3_LDO2_BF_MSK (0x00F00000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_10_ANA0_TX3_LDO2_BF_DEF (0x00000000)

///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_10_ANA0_TX4_LDO0_BF_OFF (24)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_10_ANA0_TX4_LDO0_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_10_ANA0_TX4_LDO0_BF_MSK (0x0F000000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_10_ANA0_TX4_LDO0_BF_DEF (0x00000000)

///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_10_ANA0_TX4_LDO2_BF_OFF (28)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_10_ANA0_TX4_LDO2_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_10_ANA0_TX4_LDO2_BF_MSK (0xF0000000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_10_ANA0_TX4_LDO2_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_ANALOG_REGS_ANALOG_REGISTER_11 register description at address offset 0x12c
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/ANALOG_regs/analog_register_11
  * ANALOG_FUSE::reg_11_S
  */

typedef union {
  struct {
    uint32_t ANA0_TX5_LDO0 : 4;
    ///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t ANA0_TX5_LDO2 : 4;
    ///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t ANA0_TX6_LDO0 : 4;
    ///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t ANA0_TX6_LDO2 : 4;
    ///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t ANA0_TX7_LDO0 : 4;
    ///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t ANA0_TX7_LDO2 : 4;
    ///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="20" ResetValue="0x0"
    uint32_t ANA1_TX0_LDO0 : 4;
    ///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t ANA1_TX0_LDO2 : 4;
    ///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_analog_register_11_reg_t;

#define FUSE_CLIENT_APB_ANALOG_REGISTER_11_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_11_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_11_WR_MASK (0x00000000U)


///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_11_ANA0_TX5_LDO0_BF_OFF ( 0)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_11_ANA0_TX5_LDO0_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_11_ANA0_TX5_LDO0_BF_MSK (0x0000000F)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_11_ANA0_TX5_LDO0_BF_DEF (0x00000000)

///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_11_ANA0_TX5_LDO2_BF_OFF ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_11_ANA0_TX5_LDO2_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_11_ANA0_TX5_LDO2_BF_MSK (0x000000F0)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_11_ANA0_TX5_LDO2_BF_DEF (0x00000000)

///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_11_ANA0_TX6_LDO0_BF_OFF ( 8)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_11_ANA0_TX6_LDO0_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_11_ANA0_TX6_LDO0_BF_MSK (0x00000F00)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_11_ANA0_TX6_LDO0_BF_DEF (0x00000000)

///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_11_ANA0_TX6_LDO2_BF_OFF (12)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_11_ANA0_TX6_LDO2_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_11_ANA0_TX6_LDO2_BF_MSK (0x0000F000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_11_ANA0_TX6_LDO2_BF_DEF (0x00000000)

///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_11_ANA0_TX7_LDO0_BF_OFF (16)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_11_ANA0_TX7_LDO0_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_11_ANA0_TX7_LDO0_BF_MSK (0x000F0000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_11_ANA0_TX7_LDO0_BF_DEF (0x00000000)

///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_11_ANA0_TX7_LDO2_BF_OFF (20)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_11_ANA0_TX7_LDO2_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_11_ANA0_TX7_LDO2_BF_MSK (0x00F00000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_11_ANA0_TX7_LDO2_BF_DEF (0x00000000)

///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_11_ANA1_TX0_LDO0_BF_OFF (24)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_11_ANA1_TX0_LDO0_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_11_ANA1_TX0_LDO0_BF_MSK (0x0F000000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_11_ANA1_TX0_LDO0_BF_DEF (0x00000000)

///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_11_ANA1_TX0_LDO2_BF_OFF (28)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_11_ANA1_TX0_LDO2_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_11_ANA1_TX0_LDO2_BF_MSK (0xF0000000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_11_ANA1_TX0_LDO2_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_ANALOG_REGS_ANALOG_REGISTER_12 register description at address offset 0x130
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/ANALOG_regs/analog_register_12
  * ANALOG_FUSE::reg_12_S
  */

typedef union {
  struct {
    uint32_t ANA1_TX1_LDO0 : 4;
    ///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t ANA1_TX1_LDO2 : 4;
    ///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t ANA1_TX2_LDO0 : 4;
    ///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t ANA1_TX2_LDO2 : 4;
    ///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t ANA1_TX3_LDO0 : 4;
    ///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t ANA1_TX3_LDO2 : 4;
    ///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="20" ResetValue="0x0"
    uint32_t ANA1_TX4_LDO0 : 4;
    ///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t ANA1_TX4_LDO2 : 4;
    ///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_analog_register_12_reg_t;

#define FUSE_CLIENT_APB_ANALOG_REGISTER_12_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_12_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_12_WR_MASK (0x00000000U)


///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_12_ANA1_TX1_LDO0_BF_OFF ( 0)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_12_ANA1_TX1_LDO0_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_12_ANA1_TX1_LDO0_BF_MSK (0x0000000F)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_12_ANA1_TX1_LDO0_BF_DEF (0x00000000)

///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_12_ANA1_TX1_LDO2_BF_OFF ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_12_ANA1_TX1_LDO2_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_12_ANA1_TX1_LDO2_BF_MSK (0x000000F0)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_12_ANA1_TX1_LDO2_BF_DEF (0x00000000)

///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_12_ANA1_TX2_LDO0_BF_OFF ( 8)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_12_ANA1_TX2_LDO0_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_12_ANA1_TX2_LDO0_BF_MSK (0x00000F00)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_12_ANA1_TX2_LDO0_BF_DEF (0x00000000)

///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_12_ANA1_TX2_LDO2_BF_OFF (12)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_12_ANA1_TX2_LDO2_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_12_ANA1_TX2_LDO2_BF_MSK (0x0000F000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_12_ANA1_TX2_LDO2_BF_DEF (0x00000000)

///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_12_ANA1_TX3_LDO0_BF_OFF (16)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_12_ANA1_TX3_LDO0_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_12_ANA1_TX3_LDO0_BF_MSK (0x000F0000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_12_ANA1_TX3_LDO0_BF_DEF (0x00000000)

///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_12_ANA1_TX3_LDO2_BF_OFF (20)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_12_ANA1_TX3_LDO2_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_12_ANA1_TX3_LDO2_BF_MSK (0x00F00000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_12_ANA1_TX3_LDO2_BF_DEF (0x00000000)

///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_12_ANA1_TX4_LDO0_BF_OFF (24)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_12_ANA1_TX4_LDO0_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_12_ANA1_TX4_LDO0_BF_MSK (0x0F000000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_12_ANA1_TX4_LDO0_BF_DEF (0x00000000)

///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_12_ANA1_TX4_LDO2_BF_OFF (28)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_12_ANA1_TX4_LDO2_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_12_ANA1_TX4_LDO2_BF_MSK (0xF0000000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_12_ANA1_TX4_LDO2_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_ANALOG_REGS_ANALOG_REGISTER_13 register description at address offset 0x134
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/ANALOG_regs/analog_register_13
  * ANALOG_FUSE::reg_13_S
  */

typedef union {
  struct {
    uint32_t ANA1_TX5_LDO0 : 4;
    ///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t ANA1_TX5_LDO2 : 4;
    ///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t ANA1_TX6_LDO0 : 4;
    ///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t ANA1_TX6_LDO2 : 4;
    ///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t ANA1_TX7_LDO0 : 4;
    ///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t ANA1_TX7_LDO2 : 4;
    ///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
    ///< 0.8V (0000) steps of 25mV
    ///< AccessType="RO/V" BitOffset="20" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} fuse_client_apb_analog_register_13_reg_t;

#define FUSE_CLIENT_APB_ANALOG_REGISTER_13_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_13_RD_MASK (0x00ffffffU)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_13_WR_MASK (0x00000000U)


///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_13_ANA1_TX5_LDO0_BF_OFF ( 0)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_13_ANA1_TX5_LDO0_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_13_ANA1_TX5_LDO0_BF_MSK (0x0000000F)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_13_ANA1_TX5_LDO0_BF_DEF (0x00000000)

///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_13_ANA1_TX5_LDO2_BF_OFF ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_13_ANA1_TX5_LDO2_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_13_ANA1_TX5_LDO2_BF_MSK (0x000000F0)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_13_ANA1_TX5_LDO2_BF_DEF (0x00000000)

///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_13_ANA1_TX6_LDO0_BF_OFF ( 8)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_13_ANA1_TX6_LDO0_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_13_ANA1_TX6_LDO0_BF_MSK (0x00000F00)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_13_ANA1_TX6_LDO0_BF_DEF (0x00000000)

///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_13_ANA1_TX6_LDO2_BF_OFF (12)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_13_ANA1_TX6_LDO2_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_13_ANA1_TX6_LDO2_BF_MSK (0x0000F000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_13_ANA1_TX6_LDO2_BF_DEF (0x00000000)

///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_13_ANA1_TX7_LDO0_BF_OFF (16)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_13_ANA1_TX7_LDO0_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_13_ANA1_TX7_LDO0_BF_MSK (0x000F0000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_13_ANA1_TX7_LDO0_BF_DEF (0x00000000)

///< Measure the tx core supply domain 2 and 3 and store the value. Nominal
///< 0.8V (0000) steps of 25mV
#define FUSE_CLIENT_APB_ANALOG_REGISTER_13_ANA1_TX7_LDO2_BF_OFF (20)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_13_ANA1_TX7_LDO2_BF_WID ( 4)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_13_ANA1_TX7_LDO2_BF_MSK (0x00F00000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_13_ANA1_TX7_LDO2_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_ANALOG_REGS_ANALOG_REGISTER_14 register description at address offset 0x138
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/ANALOG_regs/analog_register_14
  * ANALOG_FUSE::reg_14_S
  */

typedef union {
  struct {
    uint32_t ANA0_RX0_OVLDTHRES : 5;
    ///< Measure the RX level at which the overload protection attenuator will
    ///< be triggered.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
    uint32_t ANA0_RX1_OVLDTHRES : 5;
    ///< Measure the RX level at which the overload protection attenuator will
    ///< be triggered.
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
    uint32_t ANA0_RX2_OVLDTHRES : 5;
    ///< Measure the RX level at which the overload protection attenuator will
    ///< be triggered.
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
    uint32_t ANA0_RX3_OVLDTHRES : 5;
    ///< Measure the RX level at which the overload protection attenuator will
    ///< be triggered.
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} fuse_client_apb_analog_register_14_reg_t;

#define FUSE_CLIENT_APB_ANALOG_REGISTER_14_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_14_RD_MASK (0x1f1f1f1fU)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_14_WR_MASK (0x00000000U)


///< Measure the RX level at which the overload protection attenuator will
///< be triggered.
#define FUSE_CLIENT_APB_ANALOG_REGISTER_14_ANA0_RX0_OVLDTHRES_BF_OFF ( 0)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_14_ANA0_RX0_OVLDTHRES_BF_WID ( 5)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_14_ANA0_RX0_OVLDTHRES_BF_MSK (0x0000001F)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_14_ANA0_RX0_OVLDTHRES_BF_DEF (0x00000000)

///< Measure the RX level at which the overload protection attenuator will
///< be triggered.
#define FUSE_CLIENT_APB_ANALOG_REGISTER_14_ANA0_RX1_OVLDTHRES_BF_OFF ( 8)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_14_ANA0_RX1_OVLDTHRES_BF_WID ( 5)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_14_ANA0_RX1_OVLDTHRES_BF_MSK (0x00001F00)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_14_ANA0_RX1_OVLDTHRES_BF_DEF (0x00000000)

///< Measure the RX level at which the overload protection attenuator will
///< be triggered.
#define FUSE_CLIENT_APB_ANALOG_REGISTER_14_ANA0_RX2_OVLDTHRES_BF_OFF (16)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_14_ANA0_RX2_OVLDTHRES_BF_WID ( 5)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_14_ANA0_RX2_OVLDTHRES_BF_MSK (0x001F0000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_14_ANA0_RX2_OVLDTHRES_BF_DEF (0x00000000)

///< Measure the RX level at which the overload protection attenuator will
///< be triggered.
#define FUSE_CLIENT_APB_ANALOG_REGISTER_14_ANA0_RX3_OVLDTHRES_BF_OFF (24)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_14_ANA0_RX3_OVLDTHRES_BF_WID ( 5)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_14_ANA0_RX3_OVLDTHRES_BF_MSK (0x1F000000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_14_ANA0_RX3_OVLDTHRES_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_ANALOG_REGS_ANALOG_REGISTER_15 register description at address offset 0x13c
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/ANALOG_regs/analog_register_15
  * ANALOG_FUSE::reg_15_S
  */

typedef union {
  struct {
    uint32_t ANA0_RX4_OVLDTHRES : 5;
    ///< Measure the RX level at which the overload protection attenuator will
    ///< be triggered.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
    uint32_t ANA0_RX5_OVLDTHRES : 5;
    ///< Measure the RX level at which the overload protection attenuator will
    ///< be triggered.
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
    uint32_t ANA0_RX6_OVLDTHRES : 5;
    ///< Measure the RX level at which the overload protection attenuator will
    ///< be triggered.
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
    uint32_t ANA0_RX7_OVLDTHRES : 5;
    ///< Measure the RX level at which the overload protection attenuator will
    ///< be triggered.
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} fuse_client_apb_analog_register_15_reg_t;

#define FUSE_CLIENT_APB_ANALOG_REGISTER_15_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_15_RD_MASK (0x1f1f1f1fU)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_15_WR_MASK (0x00000000U)


///< Measure the RX level at which the overload protection attenuator will
///< be triggered.
#define FUSE_CLIENT_APB_ANALOG_REGISTER_15_ANA0_RX4_OVLDTHRES_BF_OFF ( 0)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_15_ANA0_RX4_OVLDTHRES_BF_WID ( 5)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_15_ANA0_RX4_OVLDTHRES_BF_MSK (0x0000001F)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_15_ANA0_RX4_OVLDTHRES_BF_DEF (0x00000000)

///< Measure the RX level at which the overload protection attenuator will
///< be triggered.
#define FUSE_CLIENT_APB_ANALOG_REGISTER_15_ANA0_RX5_OVLDTHRES_BF_OFF ( 8)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_15_ANA0_RX5_OVLDTHRES_BF_WID ( 5)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_15_ANA0_RX5_OVLDTHRES_BF_MSK (0x00001F00)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_15_ANA0_RX5_OVLDTHRES_BF_DEF (0x00000000)

///< Measure the RX level at which the overload protection attenuator will
///< be triggered.
#define FUSE_CLIENT_APB_ANALOG_REGISTER_15_ANA0_RX6_OVLDTHRES_BF_OFF (16)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_15_ANA0_RX6_OVLDTHRES_BF_WID ( 5)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_15_ANA0_RX6_OVLDTHRES_BF_MSK (0x001F0000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_15_ANA0_RX6_OVLDTHRES_BF_DEF (0x00000000)

///< Measure the RX level at which the overload protection attenuator will
///< be triggered.
#define FUSE_CLIENT_APB_ANALOG_REGISTER_15_ANA0_RX7_OVLDTHRES_BF_OFF (24)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_15_ANA0_RX7_OVLDTHRES_BF_WID ( 5)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_15_ANA0_RX7_OVLDTHRES_BF_MSK (0x1F000000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_15_ANA0_RX7_OVLDTHRES_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_ANALOG_REGS_ANALOG_REGISTER_16 register description at address offset 0x140
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/ANALOG_regs/analog_register_16
  * ANALOG_FUSE::reg_16_S
  */

typedef union {
  struct {
    uint32_t ANA1_RX0_OVLDTHRES : 5;
    ///< Measure the RX level at which the overload protection attenuator will
    ///< be triggered.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
    uint32_t ANA1_RX1_OVLDTHRES : 5;
    ///< Measure the RX level at which the overload protection attenuator will
    ///< be triggered.
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
    uint32_t ANA1_RX2_OVLDTHRES : 5;
    ///< Measure the RX level at which the overload protection attenuator will
    ///< be triggered.
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
    uint32_t ANA1_RX3_OVLDTHRES : 5;
    ///< Measure the RX level at which the overload protection attenuator will
    ///< be triggered.
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} fuse_client_apb_analog_register_16_reg_t;

#define FUSE_CLIENT_APB_ANALOG_REGISTER_16_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_16_RD_MASK (0x1f1f1f1fU)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_16_WR_MASK (0x00000000U)


///< Measure the RX level at which the overload protection attenuator will
///< be triggered.
#define FUSE_CLIENT_APB_ANALOG_REGISTER_16_ANA1_RX0_OVLDTHRES_BF_OFF ( 0)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_16_ANA1_RX0_OVLDTHRES_BF_WID ( 5)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_16_ANA1_RX0_OVLDTHRES_BF_MSK (0x0000001F)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_16_ANA1_RX0_OVLDTHRES_BF_DEF (0x00000000)

///< Measure the RX level at which the overload protection attenuator will
///< be triggered.
#define FUSE_CLIENT_APB_ANALOG_REGISTER_16_ANA1_RX1_OVLDTHRES_BF_OFF ( 8)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_16_ANA1_RX1_OVLDTHRES_BF_WID ( 5)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_16_ANA1_RX1_OVLDTHRES_BF_MSK (0x00001F00)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_16_ANA1_RX1_OVLDTHRES_BF_DEF (0x00000000)

///< Measure the RX level at which the overload protection attenuator will
///< be triggered.
#define FUSE_CLIENT_APB_ANALOG_REGISTER_16_ANA1_RX2_OVLDTHRES_BF_OFF (16)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_16_ANA1_RX2_OVLDTHRES_BF_WID ( 5)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_16_ANA1_RX2_OVLDTHRES_BF_MSK (0x001F0000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_16_ANA1_RX2_OVLDTHRES_BF_DEF (0x00000000)

///< Measure the RX level at which the overload protection attenuator will
///< be triggered.
#define FUSE_CLIENT_APB_ANALOG_REGISTER_16_ANA1_RX3_OVLDTHRES_BF_OFF (24)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_16_ANA1_RX3_OVLDTHRES_BF_WID ( 5)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_16_ANA1_RX3_OVLDTHRES_BF_MSK (0x1F000000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_16_ANA1_RX3_OVLDTHRES_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_ANALOG_REGS_ANALOG_REGISTER_17 register description at address offset 0x144
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/ANALOG_regs/analog_register_17
  * ANALOG_FUSE::reg_17_S
  */

typedef union {
  struct {
    uint32_t ANA1_RX4_OVLDTHRES : 5;
    ///< Measure the RX level at which the overload protection attenuator will
    ///< be triggered.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
    uint32_t ANA1_RX5_OVLDTHRES : 5;
    ///< Measure the RX level at which the overload protection attenuator will
    ///< be triggered.
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
    uint32_t ANA1_RX6_OVLDTHRES : 5;
    ///< Measure the RX level at which the overload protection attenuator will
    ///< be triggered.
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
    uint32_t ANA1_RX7_OVLDTHRES : 5;
    ///< Measure the RX level at which the overload protection attenuator will
    ///< be triggered.
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} fuse_client_apb_analog_register_17_reg_t;

#define FUSE_CLIENT_APB_ANALOG_REGISTER_17_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_17_RD_MASK (0x1f1f1f1fU)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_17_WR_MASK (0x00000000U)


///< Measure the RX level at which the overload protection attenuator will
///< be triggered.
#define FUSE_CLIENT_APB_ANALOG_REGISTER_17_ANA1_RX4_OVLDTHRES_BF_OFF ( 0)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_17_ANA1_RX4_OVLDTHRES_BF_WID ( 5)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_17_ANA1_RX4_OVLDTHRES_BF_MSK (0x0000001F)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_17_ANA1_RX4_OVLDTHRES_BF_DEF (0x00000000)

///< Measure the RX level at which the overload protection attenuator will
///< be triggered.
#define FUSE_CLIENT_APB_ANALOG_REGISTER_17_ANA1_RX5_OVLDTHRES_BF_OFF ( 8)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_17_ANA1_RX5_OVLDTHRES_BF_WID ( 5)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_17_ANA1_RX5_OVLDTHRES_BF_MSK (0x00001F00)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_17_ANA1_RX5_OVLDTHRES_BF_DEF (0x00000000)

///< Measure the RX level at which the overload protection attenuator will
///< be triggered.
#define FUSE_CLIENT_APB_ANALOG_REGISTER_17_ANA1_RX6_OVLDTHRES_BF_OFF (16)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_17_ANA1_RX6_OVLDTHRES_BF_WID ( 5)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_17_ANA1_RX6_OVLDTHRES_BF_MSK (0x001F0000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_17_ANA1_RX6_OVLDTHRES_BF_DEF (0x00000000)

///< Measure the RX level at which the overload protection attenuator will
///< be triggered.
#define FUSE_CLIENT_APB_ANALOG_REGISTER_17_ANA1_RX7_OVLDTHRES_BF_OFF (24)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_17_ANA1_RX7_OVLDTHRES_BF_WID ( 5)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_17_ANA1_RX7_OVLDTHRES_BF_MSK (0x1F000000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_17_ANA1_RX7_OVLDTHRES_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_ANALOG_REGS_ANALOG_REGISTER_18 register description at address offset 0x148
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/ANALOG_regs/analog_register_18
  * ANALOG_FUSE::reg_18_S
  */

typedef union {
  struct {
    uint32_t ANA0_RX0_VCM : 6;
    ///< Measure the RX buffer input VCM level. Nominal 0.7V, programmable
    ///< in step of 25mV from 0.2V-0.8V
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ANA0_RX1_VCM : 6;
    ///< Measure the RX buffer input VCM level. Nominal 0.7V, programmable
    ///< in step of 25mV from 0.2V-0.8V
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t ANA0_RX2_VCM : 6;
    ///< Measure the RX buffer input VCM level. Nominal 0.7V, programmable
    ///< in step of 25mV from 0.2V-0.8V
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t ANA0_RX3_VCM : 6;
    ///< Measure the RX buffer input VCM level. Nominal 0.7V, programmable
    ///< in step of 25mV from 0.2V-0.8V
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} fuse_client_apb_analog_register_18_reg_t;

#define FUSE_CLIENT_APB_ANALOG_REGISTER_18_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_18_RD_MASK (0x3f3f3f3fU)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_18_WR_MASK (0x00000000U)


///< Measure the RX buffer input VCM level. Nominal 0.7V, programmable
///< in step of 25mV from 0.2V-0.8V
#define FUSE_CLIENT_APB_ANALOG_REGISTER_18_ANA0_RX0_VCM_BF_OFF ( 0)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_18_ANA0_RX0_VCM_BF_WID ( 6)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_18_ANA0_RX0_VCM_BF_MSK (0x0000003F)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_18_ANA0_RX0_VCM_BF_DEF (0x00000000)

///< Measure the RX buffer input VCM level. Nominal 0.7V, programmable
///< in step of 25mV from 0.2V-0.8V
#define FUSE_CLIENT_APB_ANALOG_REGISTER_18_ANA0_RX1_VCM_BF_OFF ( 8)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_18_ANA0_RX1_VCM_BF_WID ( 6)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_18_ANA0_RX1_VCM_BF_MSK (0x00003F00)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_18_ANA0_RX1_VCM_BF_DEF (0x00000000)

///< Measure the RX buffer input VCM level. Nominal 0.7V, programmable
///< in step of 25mV from 0.2V-0.8V
#define FUSE_CLIENT_APB_ANALOG_REGISTER_18_ANA0_RX2_VCM_BF_OFF (16)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_18_ANA0_RX2_VCM_BF_WID ( 6)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_18_ANA0_RX2_VCM_BF_MSK (0x003F0000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_18_ANA0_RX2_VCM_BF_DEF (0x00000000)

///< Measure the RX buffer input VCM level. Nominal 0.7V, programmable
///< in step of 25mV from 0.2V-0.8V
#define FUSE_CLIENT_APB_ANALOG_REGISTER_18_ANA0_RX3_VCM_BF_OFF (24)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_18_ANA0_RX3_VCM_BF_WID ( 6)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_18_ANA0_RX3_VCM_BF_MSK (0x3F000000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_18_ANA0_RX3_VCM_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_ANALOG_REGS_ANALOG_REGISTER_19 register description at address offset 0x14c
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/ANALOG_regs/analog_register_19
  * ANALOG_FUSE::reg_19_S
  */

typedef union {
  struct {
    uint32_t ANA0_RX4_VCM : 6;
    ///< Measure the RX buffer input VCM level. Nominal 0.7V, programmable
    ///< in step of 25mV from 0.2V-0.8V
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ANA0_RX5_VCM : 6;
    ///< Measure the RX buffer input VCM level. Nominal 0.7V, programmable
    ///< in step of 25mV from 0.2V-0.8V
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t ANA0_RX6_VCM : 6;
    ///< Measure the RX buffer input VCM level. Nominal 0.7V, programmable
    ///< in step of 25mV from 0.2V-0.8V
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t ANA0_RX7_VCM : 6;
    ///< Measure the RX buffer input VCM level. Nominal 0.7V, programmable
    ///< in step of 25mV from 0.2V-0.8V
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} fuse_client_apb_analog_register_19_reg_t;

#define FUSE_CLIENT_APB_ANALOG_REGISTER_19_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_19_RD_MASK (0x3f3f3f3fU)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_19_WR_MASK (0x00000000U)


///< Measure the RX buffer input VCM level. Nominal 0.7V, programmable
///< in step of 25mV from 0.2V-0.8V
#define FUSE_CLIENT_APB_ANALOG_REGISTER_19_ANA0_RX4_VCM_BF_OFF ( 0)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_19_ANA0_RX4_VCM_BF_WID ( 6)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_19_ANA0_RX4_VCM_BF_MSK (0x0000003F)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_19_ANA0_RX4_VCM_BF_DEF (0x00000000)

///< Measure the RX buffer input VCM level. Nominal 0.7V, programmable
///< in step of 25mV from 0.2V-0.8V
#define FUSE_CLIENT_APB_ANALOG_REGISTER_19_ANA0_RX5_VCM_BF_OFF ( 8)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_19_ANA0_RX5_VCM_BF_WID ( 6)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_19_ANA0_RX5_VCM_BF_MSK (0x00003F00)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_19_ANA0_RX5_VCM_BF_DEF (0x00000000)

///< Measure the RX buffer input VCM level. Nominal 0.7V, programmable
///< in step of 25mV from 0.2V-0.8V
#define FUSE_CLIENT_APB_ANALOG_REGISTER_19_ANA0_RX6_VCM_BF_OFF (16)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_19_ANA0_RX6_VCM_BF_WID ( 6)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_19_ANA0_RX6_VCM_BF_MSK (0x003F0000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_19_ANA0_RX6_VCM_BF_DEF (0x00000000)

///< Measure the RX buffer input VCM level. Nominal 0.7V, programmable
///< in step of 25mV from 0.2V-0.8V
#define FUSE_CLIENT_APB_ANALOG_REGISTER_19_ANA0_RX7_VCM_BF_OFF (24)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_19_ANA0_RX7_VCM_BF_WID ( 6)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_19_ANA0_RX7_VCM_BF_MSK (0x3F000000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_19_ANA0_RX7_VCM_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_ANALOG_REGS_ANALOG_REGISTER_20 register description at address offset 0x150
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/ANALOG_regs/analog_register_20
  * ANALOG_FUSE::reg_20_S
  */

typedef union {
  struct {
    uint32_t ANA1_RX0_VCM : 6;
    ///< Measure the RX buffer input VCM level. Nominal 0.7V, programmable
    ///< in step of 25mV from 0.2V-0.8V
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ANA1_RX1_VCM : 6;
    ///< Measure the RX buffer input VCM level. Nominal 0.7V, programmable
    ///< in step of 25mV from 0.2V-0.8V
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t ANA1_RX2_VCM : 6;
    ///< Measure the RX buffer input VCM level. Nominal 0.7V, programmable
    ///< in step of 25mV from 0.2V-0.8V
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t ANA1_RX3_VCM : 6;
    ///< Measure the RX buffer input VCM level. Nominal 0.7V, programmable
    ///< in step of 25mV from 0.2V-0.8V
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} fuse_client_apb_analog_register_20_reg_t;

#define FUSE_CLIENT_APB_ANALOG_REGISTER_20_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_20_RD_MASK (0x3f3f3f3fU)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_20_WR_MASK (0x00000000U)


///< Measure the RX buffer input VCM level. Nominal 0.7V, programmable
///< in step of 25mV from 0.2V-0.8V
#define FUSE_CLIENT_APB_ANALOG_REGISTER_20_ANA1_RX0_VCM_BF_OFF ( 0)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_20_ANA1_RX0_VCM_BF_WID ( 6)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_20_ANA1_RX0_VCM_BF_MSK (0x0000003F)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_20_ANA1_RX0_VCM_BF_DEF (0x00000000)

///< Measure the RX buffer input VCM level. Nominal 0.7V, programmable
///< in step of 25mV from 0.2V-0.8V
#define FUSE_CLIENT_APB_ANALOG_REGISTER_20_ANA1_RX1_VCM_BF_OFF ( 8)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_20_ANA1_RX1_VCM_BF_WID ( 6)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_20_ANA1_RX1_VCM_BF_MSK (0x00003F00)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_20_ANA1_RX1_VCM_BF_DEF (0x00000000)

///< Measure the RX buffer input VCM level. Nominal 0.7V, programmable
///< in step of 25mV from 0.2V-0.8V
#define FUSE_CLIENT_APB_ANALOG_REGISTER_20_ANA1_RX2_VCM_BF_OFF (16)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_20_ANA1_RX2_VCM_BF_WID ( 6)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_20_ANA1_RX2_VCM_BF_MSK (0x003F0000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_20_ANA1_RX2_VCM_BF_DEF (0x00000000)

///< Measure the RX buffer input VCM level. Nominal 0.7V, programmable
///< in step of 25mV from 0.2V-0.8V
#define FUSE_CLIENT_APB_ANALOG_REGISTER_20_ANA1_RX3_VCM_BF_OFF (24)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_20_ANA1_RX3_VCM_BF_WID ( 6)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_20_ANA1_RX3_VCM_BF_MSK (0x3F000000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_20_ANA1_RX3_VCM_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_ANALOG_REGS_ANALOG_REGISTER_21 register description at address offset 0x154
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/ANALOG_regs/analog_register_21
  * ANALOG_FUSE::reg_21_S
  */

typedef union {
  struct {
    uint32_t ANA1_RX4_VCM : 6;
    ///< Measure the RX buffer input VCM level. Nominal 0.7V, programmable
    ///< in step of 25mV from 0.2V-0.8V
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ANA1_RX5_VCM : 6;
    ///< Measure the RX buffer input VCM level. Nominal 0.7V, programmable
    ///< in step of 25mV from 0.2V-0.8V
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t ANA1_RX6_VCM : 6;
    ///< Measure the RX buffer input VCM level. Nominal 0.7V, programmable
    ///< in step of 25mV from 0.2V-0.8V
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t ANA1_RX7_VCM : 6;
    ///< Measure the RX buffer input VCM level. Nominal 0.7V, programmable
    ///< in step of 25mV from 0.2V-0.8V
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} fuse_client_apb_analog_register_21_reg_t;

#define FUSE_CLIENT_APB_ANALOG_REGISTER_21_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_21_RD_MASK (0x3f3f3f3fU)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_21_WR_MASK (0x00000000U)


///< Measure the RX buffer input VCM level. Nominal 0.7V, programmable
///< in step of 25mV from 0.2V-0.8V
#define FUSE_CLIENT_APB_ANALOG_REGISTER_21_ANA1_RX4_VCM_BF_OFF ( 0)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_21_ANA1_RX4_VCM_BF_WID ( 6)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_21_ANA1_RX4_VCM_BF_MSK (0x0000003F)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_21_ANA1_RX4_VCM_BF_DEF (0x00000000)

///< Measure the RX buffer input VCM level. Nominal 0.7V, programmable
///< in step of 25mV from 0.2V-0.8V
#define FUSE_CLIENT_APB_ANALOG_REGISTER_21_ANA1_RX5_VCM_BF_OFF ( 8)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_21_ANA1_RX5_VCM_BF_WID ( 6)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_21_ANA1_RX5_VCM_BF_MSK (0x00003F00)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_21_ANA1_RX5_VCM_BF_DEF (0x00000000)

///< Measure the RX buffer input VCM level. Nominal 0.7V, programmable
///< in step of 25mV from 0.2V-0.8V
#define FUSE_CLIENT_APB_ANALOG_REGISTER_21_ANA1_RX6_VCM_BF_OFF (16)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_21_ANA1_RX6_VCM_BF_WID ( 6)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_21_ANA1_RX6_VCM_BF_MSK (0x003F0000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_21_ANA1_RX6_VCM_BF_DEF (0x00000000)

///< Measure the RX buffer input VCM level. Nominal 0.7V, programmable
///< in step of 25mV from 0.2V-0.8V
#define FUSE_CLIENT_APB_ANALOG_REGISTER_21_ANA1_RX7_VCM_BF_OFF (24)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_21_ANA1_RX7_VCM_BF_WID ( 6)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_21_ANA1_RX7_VCM_BF_MSK (0x3F000000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_21_ANA1_RX7_VCM_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_ANALOG_REGS_ANALOG_REGISTER_22 register description at address offset 0x158
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/ANALOG_regs/analog_register_22
  * ANALOG_FUSE::reg_22_S
  */

typedef union {
  struct {
    uint32_t ANA0_RXFB0_VCM : 6;
    ///< Measure the RXFB buffer input VCM level. Nominal 0.7V, programmable
    ///< in step of 25mV from 0.2V-0.8V
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ANA0_RXFB1_VCM : 6;
    ///< Measure the RXFB buffer input VCM level. Nominal 0.7V, programmable
    ///< in step of 25mV from 0.2V-0.8V
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t ANA1_RXFB0_VCM : 6;
    ///< Measure the RXFB buffer input VCM level. Nominal 0.7V, programmable
    ///< in step of 25mV from 0.2V-0.8V
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t ANA1_RXFB1_VCM : 6;
    ///< Measure the RXFB buffer input VCM level. Nominal 0.7V, programmable
    ///< in step of 25mV from 0.2V-0.8V
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} fuse_client_apb_analog_register_22_reg_t;

#define FUSE_CLIENT_APB_ANALOG_REGISTER_22_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_22_RD_MASK (0x3f3f3f3fU)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_22_WR_MASK (0x00000000U)


///< Measure the RXFB buffer input VCM level. Nominal 0.7V, programmable
///< in step of 25mV from 0.2V-0.8V
#define FUSE_CLIENT_APB_ANALOG_REGISTER_22_ANA0_RXFB0_VCM_BF_OFF ( 0)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_22_ANA0_RXFB0_VCM_BF_WID ( 6)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_22_ANA0_RXFB0_VCM_BF_MSK (0x0000003F)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_22_ANA0_RXFB0_VCM_BF_DEF (0x00000000)

///< Measure the RXFB buffer input VCM level. Nominal 0.7V, programmable
///< in step of 25mV from 0.2V-0.8V
#define FUSE_CLIENT_APB_ANALOG_REGISTER_22_ANA0_RXFB1_VCM_BF_OFF ( 8)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_22_ANA0_RXFB1_VCM_BF_WID ( 6)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_22_ANA0_RXFB1_VCM_BF_MSK (0x00003F00)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_22_ANA0_RXFB1_VCM_BF_DEF (0x00000000)

///< Measure the RXFB buffer input VCM level. Nominal 0.7V, programmable
///< in step of 25mV from 0.2V-0.8V
#define FUSE_CLIENT_APB_ANALOG_REGISTER_22_ANA1_RXFB0_VCM_BF_OFF (16)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_22_ANA1_RXFB0_VCM_BF_WID ( 6)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_22_ANA1_RXFB0_VCM_BF_MSK (0x003F0000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_22_ANA1_RXFB0_VCM_BF_DEF (0x00000000)

///< Measure the RXFB buffer input VCM level. Nominal 0.7V, programmable
///< in step of 25mV from 0.2V-0.8V
#define FUSE_CLIENT_APB_ANALOG_REGISTER_22_ANA1_RXFB1_VCM_BF_OFF (24)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_22_ANA1_RXFB1_VCM_BF_WID ( 6)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_22_ANA1_RXFB1_VCM_BF_MSK (0x3F000000)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_22_ANA1_RXFB1_VCM_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_ANALOG_REGS_ANALOG_BG_TRIM_0 register description at address offset 0x15c
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/ANALOG_regs/analog_bg_trim_0
  * ANALOG_FUSE::ANA0 Bandgap Trim
  */

typedef union {
  struct {
    uint32_t ANA_BG_TRIM : 16;
    ///< Analog Bandgap Trim
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} fuse_client_apb_analog_bg_trim_0_reg_t;

#define FUSE_CLIENT_APB_ANALOG_BG_TRIM_0_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_ANALOG_BG_TRIM_0_RD_MASK (0x0000ffffU)
#define FUSE_CLIENT_APB_ANALOG_BG_TRIM_0_WR_MASK (0x00000000U)


///< Analog Bandgap Trim
#define FUSE_CLIENT_APB_ANALOG_BG_TRIM_0_ANA_BG_TRIM_BF_OFF ( 0)
#define FUSE_CLIENT_APB_ANALOG_BG_TRIM_0_ANA_BG_TRIM_BF_WID (16)
#define FUSE_CLIENT_APB_ANALOG_BG_TRIM_0_ANA_BG_TRIM_BF_MSK (0x0000FFFF)
#define FUSE_CLIENT_APB_ANALOG_BG_TRIM_0_ANA_BG_TRIM_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_ANALOG_REGS_ANALOG_BG_TRIM_1 register description at address offset 0x160
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/ANALOG_regs/analog_bg_trim_1
  * ANALOG_FUSE::ANA1 Bandgap Trim
  */

typedef union {
  struct {
    uint32_t ANA_BG_TRIM : 16;
    ///< Analog Bandgap Trim
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} fuse_client_apb_analog_bg_trim_1_reg_t;

#define FUSE_CLIENT_APB_ANALOG_BG_TRIM_1_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_ANALOG_BG_TRIM_1_RD_MASK (0x0000ffffU)
#define FUSE_CLIENT_APB_ANALOG_BG_TRIM_1_WR_MASK (0x00000000U)


///< Analog Bandgap Trim
#define FUSE_CLIENT_APB_ANALOG_BG_TRIM_1_ANA_BG_TRIM_BF_OFF ( 0)
#define FUSE_CLIENT_APB_ANALOG_BG_TRIM_1_ANA_BG_TRIM_BF_WID (16)
#define FUSE_CLIENT_APB_ANALOG_BG_TRIM_1_ANA_BG_TRIM_BF_MSK (0x0000FFFF)
#define FUSE_CLIENT_APB_ANALOG_BG_TRIM_1_ANA_BG_TRIM_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_ANALOG_REGS_ANALOG_RESERVE_00 register description at address offset 0x164
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/ANALOG_regs/analog_reserve_00
  * ANALOG_FUSE::reserve_00_S
  */

typedef union {
  struct {
    uint32_t ANA_RESERVE : 32;
    ///< Analog reserve fuses
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_analog_reserve_00_reg_t;

#define FUSE_CLIENT_APB_ANALOG_RESERVE_00_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_ANALOG_RESERVE_00_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_ANALOG_RESERVE_00_WR_MASK (0x00000000U)


///< Analog reserve fuses
#define FUSE_CLIENT_APB_ANALOG_RESERVE_00_ANA_RESERVE_BF_OFF ( 0)
#define FUSE_CLIENT_APB_ANALOG_RESERVE_00_ANA_RESERVE_BF_WID (32)
#define FUSE_CLIENT_APB_ANALOG_RESERVE_00_ANA_RESERVE_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_ANALOG_RESERVE_00_ANA_RESERVE_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_ANALOG_REGS_ANALOG_RESERVE_01 register description at address offset 0x168
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/ANALOG_regs/analog_reserve_01
  * ANALOG_FUSE::reserve_01_S
  */

typedef union {
  struct {
    uint32_t ANA_RESERVE : 32;
    ///< Analog reserve fuses
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_analog_reserve_01_reg_t;

#define FUSE_CLIENT_APB_ANALOG_RESERVE_01_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_ANALOG_RESERVE_01_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_ANALOG_RESERVE_01_WR_MASK (0x00000000U)


///< Analog reserve fuses
#define FUSE_CLIENT_APB_ANALOG_RESERVE_01_ANA_RESERVE_BF_OFF ( 0)
#define FUSE_CLIENT_APB_ANALOG_RESERVE_01_ANA_RESERVE_BF_WID (32)
#define FUSE_CLIENT_APB_ANALOG_RESERVE_01_ANA_RESERVE_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_ANALOG_RESERVE_01_ANA_RESERVE_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_ANALOG_REGS_ANALOG_RESERVE_02 register description at address offset 0x16c
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/ANALOG_regs/analog_reserve_02
  * ANALOG_FUSE::reserve_02_S
  */

typedef union {
  struct {
    uint32_t ANA_RESERVE : 32;
    ///< Analog reserve fuses
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_analog_reserve_02_reg_t;

#define FUSE_CLIENT_APB_ANALOG_RESERVE_02_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_ANALOG_RESERVE_02_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_ANALOG_RESERVE_02_WR_MASK (0x00000000U)


///< Analog reserve fuses
#define FUSE_CLIENT_APB_ANALOG_RESERVE_02_ANA_RESERVE_BF_OFF ( 0)
#define FUSE_CLIENT_APB_ANALOG_RESERVE_02_ANA_RESERVE_BF_WID (32)
#define FUSE_CLIENT_APB_ANALOG_RESERVE_02_ANA_RESERVE_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_ANALOG_RESERVE_02_ANA_RESERVE_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_ANALOG_REGS_ANALOG_RESERVE_03 register description at address offset 0x170
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/ANALOG_regs/analog_reserve_03
  * ANALOG_FUSE::reserve_03_S
  */

typedef union {
  struct {
    uint32_t ANA_RESERVE : 32;
    ///< Analog reserve fuses
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_analog_reserve_03_reg_t;

#define FUSE_CLIENT_APB_ANALOG_RESERVE_03_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_ANALOG_RESERVE_03_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_ANALOG_RESERVE_03_WR_MASK (0x00000000U)


///< Analog reserve fuses
#define FUSE_CLIENT_APB_ANALOG_RESERVE_03_ANA_RESERVE_BF_OFF ( 0)
#define FUSE_CLIENT_APB_ANALOG_RESERVE_03_ANA_RESERVE_BF_WID (32)
#define FUSE_CLIENT_APB_ANALOG_RESERVE_03_ANA_RESERVE_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_ANALOG_RESERVE_03_ANA_RESERVE_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_ANALOG_REGS_ANALOG_RESERVE_04 register description at address offset 0x174
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/ANALOG_regs/analog_reserve_04
  * ANALOG_FUSE::reserve_04_S
  */

typedef union {
  struct {
    uint32_t ANA_RESERVE : 32;
    ///< Analog reserve fuses
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_analog_reserve_04_reg_t;

#define FUSE_CLIENT_APB_ANALOG_RESERVE_04_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_ANALOG_RESERVE_04_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_ANALOG_RESERVE_04_WR_MASK (0x00000000U)


///< Analog reserve fuses
#define FUSE_CLIENT_APB_ANALOG_RESERVE_04_ANA_RESERVE_BF_OFF ( 0)
#define FUSE_CLIENT_APB_ANALOG_RESERVE_04_ANA_RESERVE_BF_WID (32)
#define FUSE_CLIENT_APB_ANALOG_RESERVE_04_ANA_RESERVE_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_ANALOG_RESERVE_04_ANA_RESERVE_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_ANALOG_REGS_ANA0_HWC4016C_0 register description at address offset 0x180
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/ANALOG_regs/ana0_hwc4016c_0
  * ANALOG_FUSE::ana0_hwc4016c_0_S
  */

typedef union {
  struct {
    uint32_t ANA_HWC4016C : 32;
    ///< 8 channels each 16bit control for LO feedthrough and bias control
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_analog_ana0_hwc4016c_0_reg_t;

#define FUSE_CLIENT_APB_ANALOG_ANA0_HWC4016C_0_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_ANALOG_ANA0_HWC4016C_0_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_ANALOG_ANA0_HWC4016C_0_WR_MASK (0x00000000U)


///< 8 channels each 16bit control for LO feedthrough and bias control
#define FUSE_CLIENT_APB_ANALOG_ANA0_HWC4016C_0_ANA_HWC4016C_BF_OFF ( 0)
#define FUSE_CLIENT_APB_ANALOG_ANA0_HWC4016C_0_ANA_HWC4016C_BF_WID (32)
#define FUSE_CLIENT_APB_ANALOG_ANA0_HWC4016C_0_ANA_HWC4016C_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_ANALOG_ANA0_HWC4016C_0_ANA_HWC4016C_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_ANALOG_REGS_ANA0_HWC4016C_1 register description at address offset 0x184
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/ANALOG_regs/ana0_hwc4016c_1
  * ANALOG_FUSE::ana0_hwc4016c_1_S
  */

typedef union {
  struct {
    uint32_t ANA_HWC4016C : 32;
    ///< 8 channels each 16bit control for LO feedthrough and bias control
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_analog_ana0_hwc4016c_1_reg_t;

#define FUSE_CLIENT_APB_ANALOG_ANA0_HWC4016C_1_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_ANALOG_ANA0_HWC4016C_1_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_ANALOG_ANA0_HWC4016C_1_WR_MASK (0x00000000U)


///< 8 channels each 16bit control for LO feedthrough and bias control
#define FUSE_CLIENT_APB_ANALOG_ANA0_HWC4016C_1_ANA_HWC4016C_BF_OFF ( 0)
#define FUSE_CLIENT_APB_ANALOG_ANA0_HWC4016C_1_ANA_HWC4016C_BF_WID (32)
#define FUSE_CLIENT_APB_ANALOG_ANA0_HWC4016C_1_ANA_HWC4016C_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_ANALOG_ANA0_HWC4016C_1_ANA_HWC4016C_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_ANALOG_REGS_ANA0_HWC4016C_2 register description at address offset 0x188
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/ANALOG_regs/ana0_hwc4016c_2
  * ANALOG_FUSE::ana0_hwc4016c_2_S
  */

typedef union {
  struct {
    uint32_t ANA_HWC4016C : 32;
    ///< 8 channels each 16bit control for LO feedthrough and bias control
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_analog_ana0_hwc4016c_2_reg_t;

#define FUSE_CLIENT_APB_ANALOG_ANA0_HWC4016C_2_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_ANALOG_ANA0_HWC4016C_2_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_ANALOG_ANA0_HWC4016C_2_WR_MASK (0x00000000U)


///< 8 channels each 16bit control for LO feedthrough and bias control
#define FUSE_CLIENT_APB_ANALOG_ANA0_HWC4016C_2_ANA_HWC4016C_BF_OFF ( 0)
#define FUSE_CLIENT_APB_ANALOG_ANA0_HWC4016C_2_ANA_HWC4016C_BF_WID (32)
#define FUSE_CLIENT_APB_ANALOG_ANA0_HWC4016C_2_ANA_HWC4016C_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_ANALOG_ANA0_HWC4016C_2_ANA_HWC4016C_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_ANALOG_REGS_ANA0_HWC4016C_3 register description at address offset 0x18c
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/ANALOG_regs/ana0_hwc4016c_3
  * ANALOG_FUSE::ana0_hwc4016c_3_S
  */

typedef union {
  struct {
    uint32_t ANA_HWC4016C : 32;
    ///< 8 channels each 16bit control for LO feedthrough and bias control
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_analog_ana0_hwc4016c_3_reg_t;

#define FUSE_CLIENT_APB_ANALOG_ANA0_HWC4016C_3_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_ANALOG_ANA0_HWC4016C_3_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_ANALOG_ANA0_HWC4016C_3_WR_MASK (0x00000000U)


///< 8 channels each 16bit control for LO feedthrough and bias control
#define FUSE_CLIENT_APB_ANALOG_ANA0_HWC4016C_3_ANA_HWC4016C_BF_OFF ( 0)
#define FUSE_CLIENT_APB_ANALOG_ANA0_HWC4016C_3_ANA_HWC4016C_BF_WID (32)
#define FUSE_CLIENT_APB_ANALOG_ANA0_HWC4016C_3_ANA_HWC4016C_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_ANALOG_ANA0_HWC4016C_3_ANA_HWC4016C_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_ANALOG_REGS_ANA1_HWC4016C_0 register description at address offset 0x190
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/ANALOG_regs/ana1_hwc4016c_0
  * ANALOG_FUSE::ana1_hwc4016c_0_S
  */

typedef union {
  struct {
    uint32_t ANA_HWC4016C : 32;
    ///< 8 channels each 16bit control for LO feedthrough and bias control
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_analog_ana1_hwc4016c_0_reg_t;

#define FUSE_CLIENT_APB_ANALOG_ANA1_HWC4016C_0_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_ANALOG_ANA1_HWC4016C_0_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_ANALOG_ANA1_HWC4016C_0_WR_MASK (0x00000000U)


///< 8 channels each 16bit control for LO feedthrough and bias control
#define FUSE_CLIENT_APB_ANALOG_ANA1_HWC4016C_0_ANA_HWC4016C_BF_OFF ( 0)
#define FUSE_CLIENT_APB_ANALOG_ANA1_HWC4016C_0_ANA_HWC4016C_BF_WID (32)
#define FUSE_CLIENT_APB_ANALOG_ANA1_HWC4016C_0_ANA_HWC4016C_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_ANALOG_ANA1_HWC4016C_0_ANA_HWC4016C_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_ANALOG_REGS_ANA1_HWC4016C_1 register description at address offset 0x194
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/ANALOG_regs/ana1_hwc4016c_1
  * ANALOG_FUSE::ana1_hwc4016c_1_S
  */

typedef union {
  struct {
    uint32_t ANA_HWC4016C : 32;
    ///< 8 channels each 16bit control for LO feedthrough and bias control
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_analog_ana1_hwc4016c_1_reg_t;

#define FUSE_CLIENT_APB_ANALOG_ANA1_HWC4016C_1_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_ANALOG_ANA1_HWC4016C_1_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_ANALOG_ANA1_HWC4016C_1_WR_MASK (0x00000000U)


///< 8 channels each 16bit control for LO feedthrough and bias control
#define FUSE_CLIENT_APB_ANALOG_ANA1_HWC4016C_1_ANA_HWC4016C_BF_OFF ( 0)
#define FUSE_CLIENT_APB_ANALOG_ANA1_HWC4016C_1_ANA_HWC4016C_BF_WID (32)
#define FUSE_CLIENT_APB_ANALOG_ANA1_HWC4016C_1_ANA_HWC4016C_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_ANALOG_ANA1_HWC4016C_1_ANA_HWC4016C_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_ANALOG_REGS_ANA1_HWC4016C_2 register description at address offset 0x198
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/ANALOG_regs/ana1_hwc4016c_2
  * ANALOG_FUSE::ana1_hwc4016c_2_S
  */

typedef union {
  struct {
    uint32_t ANA_HWC4016C : 32;
    ///< 8 channels each 16bit control for LO feedthrough and bias control
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_analog_ana1_hwc4016c_2_reg_t;

#define FUSE_CLIENT_APB_ANALOG_ANA1_HWC4016C_2_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_ANALOG_ANA1_HWC4016C_2_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_ANALOG_ANA1_HWC4016C_2_WR_MASK (0x00000000U)


///< 8 channels each 16bit control for LO feedthrough and bias control
#define FUSE_CLIENT_APB_ANALOG_ANA1_HWC4016C_2_ANA_HWC4016C_BF_OFF ( 0)
#define FUSE_CLIENT_APB_ANALOG_ANA1_HWC4016C_2_ANA_HWC4016C_BF_WID (32)
#define FUSE_CLIENT_APB_ANALOG_ANA1_HWC4016C_2_ANA_HWC4016C_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_ANALOG_ANA1_HWC4016C_2_ANA_HWC4016C_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_ANALOG_REGS_ANA1_HWC4016C_3 register description at address offset 0x19c
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/ANALOG_regs/ana1_hwc4016c_3
  * ANALOG_FUSE::ana1_hwc4016c_3_S
  */

typedef union {
  struct {
    uint32_t ANA_HWC4016C : 32;
    ///< 8 channels each 16bit control for LO feedthrough and bias control
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_analog_ana1_hwc4016c_3_reg_t;

#define FUSE_CLIENT_APB_ANALOG_ANA1_HWC4016C_3_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_ANALOG_ANA1_HWC4016C_3_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_ANALOG_ANA1_HWC4016C_3_WR_MASK (0x00000000U)


///< 8 channels each 16bit control for LO feedthrough and bias control
#define FUSE_CLIENT_APB_ANALOG_ANA1_HWC4016C_3_ANA_HWC4016C_BF_OFF ( 0)
#define FUSE_CLIENT_APB_ANALOG_ANA1_HWC4016C_3_ANA_HWC4016C_BF_WID (32)
#define FUSE_CLIENT_APB_ANALOG_ANA1_HWC4016C_3_ANA_HWC4016C_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_ANALOG_ANA1_HWC4016C_3_ANA_HWC4016C_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_0 register description at address offset 0x200
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_0
  * SERDES_FUSE::reg_0_S
  */

typedef union {
  struct {
    uint32_t PMA_CMN_FUSE : 32;
    ///< Common Lane - Shared by all Instances
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_0_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_0_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_0_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_0_WR_MASK (0x00000000U)


///< Common Lane - Shared by all Instances
#define FUSE_CLIENT_APB_SERDES_REGISTER_0_PMA_CMN_FUSE_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_0_PMA_CMN_FUSE_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_0_PMA_CMN_FUSE_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_0_PMA_CMN_FUSE_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_1 register description at address offset 0x204
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_1
  * SERDES_FUSE::reg_1_S
  */

typedef union {
  struct {
    uint32_t UC_PRODUCT_SKU : 32;
    ///< Register populated with fuse representing product sku, stepping and
    ///< manufacturing process version. Secure write register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_1_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_1_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_1_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_1_WR_MASK (0x00000000U)


///< Register populated with fuse representing product sku, stepping and
///< manufacturing process version. Secure write register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_1_UC_PRODUCT_SKU_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_1_UC_PRODUCT_SKU_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_1_UC_PRODUCT_SKU_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_1_UC_PRODUCT_SKU_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_2 register description at address offset 0x208
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_2
  * SERDES_FUSE::reg_2_S
  */

typedef union {
  struct {
    uint32_t PMA_PMU_IRANGE_I0 : 32;
    ///< Bias Trim (aka RCOMP). Secure write register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_2_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_2_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_2_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_2_WR_MASK (0x00000000U)


///< Bias Trim (aka RCOMP). Secure write register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_2_PMA_PMU_IRANGE_I0_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_2_PMA_PMU_IRANGE_I0_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_2_PMA_PMU_IRANGE_I0_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_2_PMA_PMU_IRANGE_I0_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_3 register description at address offset 0x20c
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_3
  * SERDES_FUSE::reg_3_S
  */

typedef union {
  struct {
    uint32_t PMA_PMU_VFORCE_I0 : 32;
    ///< Bias Trim (aka RCOMP). Secure write register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_3_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_3_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_3_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_3_WR_MASK (0x00000000U)


///< Bias Trim (aka RCOMP). Secure write register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_3_PMA_PMU_VFORCE_I0_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_3_PMA_PMU_VFORCE_I0_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_3_PMA_PMU_VFORCE_I0_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_3_PMA_PMU_VFORCE_I0_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_4 register description at address offset 0x210
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_4
  * SERDES_FUSE::reg_4_S
  */

typedef union {
  struct {
    uint32_t PMA_PMU_IRANGE_I1 : 32;
    ///< Bias Trim (aka RCOMP). Secure write register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_4_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_4_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_4_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_4_WR_MASK (0x00000000U)


///< Bias Trim (aka RCOMP). Secure write register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_4_PMA_PMU_IRANGE_I1_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_4_PMA_PMU_IRANGE_I1_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_4_PMA_PMU_IRANGE_I1_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_4_PMA_PMU_IRANGE_I1_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_5 register description at address offset 0x214
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_5
  * SERDES_FUSE::reg_5_S
  */

typedef union {
  struct {
    uint32_t PMA_PMU_VFORCE_I1 : 32;
    ///< Bias Trim (aka RCOMP). Secure write register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_5_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_5_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_5_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_5_WR_MASK (0x00000000U)


///< Bias Trim (aka RCOMP). Secure write register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_5_PMA_PMU_VFORCE_I1_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_5_PMA_PMU_VFORCE_I1_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_5_PMA_PMU_VFORCE_I1_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_5_PMA_PMU_VFORCE_I1_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_6 register description at address offset 0x218
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_6
  * SERDES_FUSE::reg_6_S
  */

typedef union {
  struct {
    uint32_t PMA_PMU_IRANGE_I2 : 32;
    ///< Bias Trim (aka RCOMP). Secure write register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_6_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_6_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_6_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_6_WR_MASK (0x00000000U)


///< Bias Trim (aka RCOMP). Secure write register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_6_PMA_PMU_IRANGE_I2_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_6_PMA_PMU_IRANGE_I2_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_6_PMA_PMU_IRANGE_I2_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_6_PMA_PMU_IRANGE_I2_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_7 register description at address offset 0x21c
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_7
  * SERDES_FUSE::reg_7_S
  */

typedef union {
  struct {
    uint32_t PMA_PMU_VFORCE_I2 : 32;
    ///< Bias Trim (aka RCOMP). Secure write register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_7_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_7_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_7_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_7_WR_MASK (0x00000000U)


///< Bias Trim (aka RCOMP). Secure write register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_7_PMA_PMU_VFORCE_I2_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_7_PMA_PMU_VFORCE_I2_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_7_PMA_PMU_VFORCE_I2_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_7_PMA_PMU_VFORCE_I2_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_8 register description at address offset 0x220
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_8
  * SERDES_FUSE::reg_8_S
  */

typedef union {
  struct {
    uint32_t PMA_PMU_IRANGE_I3 : 32;
    ///< Bias Trim (aka RCOMP). Secure write register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_8_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_8_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_8_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_8_WR_MASK (0x00000000U)


///< Bias Trim (aka RCOMP). Secure write register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_8_PMA_PMU_IRANGE_I3_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_8_PMA_PMU_IRANGE_I3_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_8_PMA_PMU_IRANGE_I3_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_8_PMA_PMU_IRANGE_I3_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_9 register description at address offset 0x224
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_9
  * SERDES_FUSE::reg_9_S
  */

typedef union {
  struct {
    uint32_t PMA_PMU_VFORCE_I3 : 32;
    ///< Bias Trim (aka RCOMP). Secure write register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_9_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_9_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_9_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_9_WR_MASK (0x00000000U)


///< Bias Trim (aka RCOMP). Secure write register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_9_PMA_PMU_VFORCE_I3_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_9_PMA_PMU_VFORCE_I3_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_9_PMA_PMU_VFORCE_I3_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_9_PMA_PMU_VFORCE_I3_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_10 register description at address offset 0x228
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_10
  * SERDES_FUSE::reg_10_S
  */

typedef union {
  struct {
    uint32_t UC_RATE_LIMIT_LANE_0_I0 : 32;
    ///< Used for programming lane rate limits based on sku. 8b for each TX
    ///< and 8b for each RX.  Secure write register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_10_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_10_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_10_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_10_WR_MASK (0x00000000U)


///< Used for programming lane rate limits based on sku. 8b for each TX
///< and 8b for each RX.  Secure write register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_10_UC_RATE_LIMIT_LANE_0_I0_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_10_UC_RATE_LIMIT_LANE_0_I0_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_10_UC_RATE_LIMIT_LANE_0_I0_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_10_UC_RATE_LIMIT_LANE_0_I0_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_11 register description at address offset 0x22c
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_11
  * SERDES_FUSE::reg_11_S
  */

typedef union {
  struct {
    uint32_t UC_RATE_LIMIT_LANE_1_I0 : 32;
    ///< Used for programming lane rate limits based on sku. 8b for each TX
    ///< and 8b for each RX.  Secure write register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_11_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_11_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_11_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_11_WR_MASK (0x00000000U)


///< Used for programming lane rate limits based on sku. 8b for each TX
///< and 8b for each RX.  Secure write register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_11_UC_RATE_LIMIT_LANE_1_I0_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_11_UC_RATE_LIMIT_LANE_1_I0_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_11_UC_RATE_LIMIT_LANE_1_I0_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_11_UC_RATE_LIMIT_LANE_1_I0_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_12 register description at address offset 0x230
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_12
  * SERDES_FUSE::reg_12_S
  */

typedef union {
  struct {
    uint32_t UC_RATE_LIMIT_LANE_2_I0 : 32;
    ///< Used for programming lane rate limits based on sku. 8b for each TX
    ///< and 8b for each RX.  Secure write register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_12_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_12_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_12_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_12_WR_MASK (0x00000000U)


///< Used for programming lane rate limits based on sku. 8b for each TX
///< and 8b for each RX.  Secure write register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_12_UC_RATE_LIMIT_LANE_2_I0_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_12_UC_RATE_LIMIT_LANE_2_I0_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_12_UC_RATE_LIMIT_LANE_2_I0_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_12_UC_RATE_LIMIT_LANE_2_I0_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_13 register description at address offset 0x234
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_13
  * SERDES_FUSE::reg_13_S
  */

typedef union {
  struct {
    uint32_t UC_RATE_LIMIT_LANE_3_I0 : 32;
    ///< Used for programming lane rate limits based on sku. 8b for each TX
    ///< and 8b for each RX.  Secure write register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_13_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_13_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_13_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_13_WR_MASK (0x00000000U)


///< Used for programming lane rate limits based on sku. 8b for each TX
///< and 8b for each RX.  Secure write register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_13_UC_RATE_LIMIT_LANE_3_I0_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_13_UC_RATE_LIMIT_LANE_3_I0_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_13_UC_RATE_LIMIT_LANE_3_I0_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_13_UC_RATE_LIMIT_LANE_3_I0_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_14 register description at address offset 0x238
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_14
  * SERDES_FUSE::reg_14_S
  */

typedef union {
  struct {
    uint32_t UC_RATE_LIMIT_LANE_4_I0 : 32;
    ///< Used for programming lane rate limits based on sku. 8b for each TX
    ///< and 8b for each RX.  Secure write register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_14_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_14_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_14_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_14_WR_MASK (0x00000000U)


///< Used for programming lane rate limits based on sku. 8b for each TX
///< and 8b for each RX.  Secure write register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_14_UC_RATE_LIMIT_LANE_4_I0_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_14_UC_RATE_LIMIT_LANE_4_I0_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_14_UC_RATE_LIMIT_LANE_4_I0_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_14_UC_RATE_LIMIT_LANE_4_I0_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_15 register description at address offset 0x23c
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_15
  * SERDES_FUSE::reg_15_S
  */

typedef union {
  struct {
    uint32_t UC_REF_CLK_FREQ_0_I0 : 32;
    ///< Tells the FW the reference clock frequency for each source (max).
    ///< Secure write register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_15_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_15_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_15_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_15_WR_MASK (0x00000000U)


///< Tells the FW the reference clock frequency for each source (max).
///< Secure write register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_15_UC_REF_CLK_FREQ_0_I0_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_15_UC_REF_CLK_FREQ_0_I0_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_15_UC_REF_CLK_FREQ_0_I0_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_15_UC_REF_CLK_FREQ_0_I0_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_16 register description at address offset 0x240
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_16
  * SERDES_FUSE::reg_16_S
  */

typedef union {
  struct {
    uint32_t UC_REF_CLK_FREQ_1_I0 : 32;
    ///< Tells the FW the reference clock frequency for each source (max).
    ///< Secure write register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_16_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_16_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_16_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_16_WR_MASK (0x00000000U)


///< Tells the FW the reference clock frequency for each source (max).
///< Secure write register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_16_UC_REF_CLK_FREQ_1_I0_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_16_UC_REF_CLK_FREQ_1_I0_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_16_UC_REF_CLK_FREQ_1_I0_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_16_UC_REF_CLK_FREQ_1_I0_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_17 register description at address offset 0x244
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_17
  * SERDES_FUSE::reg_17_S
  */

typedef union {
  struct {
    uint32_t UC_REF_CLK_FREQ_2_I0 : 32;
    ///< Tells the FW the reference clock frequency for each source (max).
    ///< Secure write register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_17_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_17_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_17_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_17_WR_MASK (0x00000000U)


///< Tells the FW the reference clock frequency for each source (max).
///< Secure write register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_17_UC_REF_CLK_FREQ_2_I0_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_17_UC_REF_CLK_FREQ_2_I0_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_17_UC_REF_CLK_FREQ_2_I0_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_17_UC_REF_CLK_FREQ_2_I0_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_18 register description at address offset 0x248
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_18
  * SERDES_FUSE::reg_18_S
  */

typedef union {
  struct {
    uint32_t UC_REF_CLK_FREQ_3_I0 : 32;
    ///< Tells the FW the reference clock frequency for each source (max).
    ///< Secure write register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_18_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_18_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_18_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_18_WR_MASK (0x00000000U)


///< Tells the FW the reference clock frequency for each source (max).
///< Secure write register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_18_UC_REF_CLK_FREQ_3_I0_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_18_UC_REF_CLK_FREQ_3_I0_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_18_UC_REF_CLK_FREQ_3_I0_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_18_UC_REF_CLK_FREQ_3_I0_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_19 register description at address offset 0x24c
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_19
  * SERDES_FUSE::reg_19_S
  */

typedef union {
  struct {
    uint32_t UC_FUSE_0_I0 : 32;
    ///< Other capabilities governed by the uC/FW based on sku. Secure write
    ///< register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_19_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_19_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_19_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_19_WR_MASK (0x00000000U)


///< Other capabilities governed by the uC/FW based on sku. Secure write
///< register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_19_UC_FUSE_0_I0_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_19_UC_FUSE_0_I0_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_19_UC_FUSE_0_I0_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_19_UC_FUSE_0_I0_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_20 register description at address offset 0x250
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_20
  * SERDES_FUSE::reg_20_S
  */

typedef union {
  struct {
    uint32_t UC_FUSE_1_I0 : 32;
    ///< Other capabilities governed by the uC/FW based on sku. Secure write
    ///< register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_20_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_20_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_20_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_20_WR_MASK (0x00000000U)


///< Other capabilities governed by the uC/FW based on sku. Secure write
///< register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_20_UC_FUSE_1_I0_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_20_UC_FUSE_1_I0_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_20_UC_FUSE_1_I0_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_20_UC_FUSE_1_I0_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_21 register description at address offset 0x254
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_21
  * SERDES_FUSE::reg_21_S
  */

typedef union {
  struct {
    uint32_t UC_FUSE_2_I0 : 32;
    ///< Other capabilities governed by the uC/FW based on sku. Secure write
    ///< register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_21_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_21_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_21_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_21_WR_MASK (0x00000000U)


///< Other capabilities governed by the uC/FW based on sku. Secure write
///< register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_21_UC_FUSE_2_I0_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_21_UC_FUSE_2_I0_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_21_UC_FUSE_2_I0_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_21_UC_FUSE_2_I0_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_22 register description at address offset 0x258
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_22
  * SERDES_FUSE::reg_22_S
  */

typedef union {
  struct {
    uint32_t UC_FUSE_3_I0 : 32;
    ///< Other capabilities governed by the uC/FW based on sku. Secure write
    ///< register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_22_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_22_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_22_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_22_WR_MASK (0x00000000U)


///< Other capabilities governed by the uC/FW based on sku. Secure write
///< register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_22_UC_FUSE_3_I0_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_22_UC_FUSE_3_I0_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_22_UC_FUSE_3_I0_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_22_UC_FUSE_3_I0_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_23 register description at address offset 0x25c
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_23
  * SERDES_FUSE::reg_23_S
  */

typedef union {
  struct {
    uint32_t UC_RATE_LIMIT_LANE_0_I1 : 32;
    ///< Used for programming lane rate limits based on sku. 8b for each TX
    ///< and 8b for each RX.  Secure write register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_23_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_23_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_23_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_23_WR_MASK (0x00000000U)


///< Used for programming lane rate limits based on sku. 8b for each TX
///< and 8b for each RX.  Secure write register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_23_UC_RATE_LIMIT_LANE_0_I1_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_23_UC_RATE_LIMIT_LANE_0_I1_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_23_UC_RATE_LIMIT_LANE_0_I1_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_23_UC_RATE_LIMIT_LANE_0_I1_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_24 register description at address offset 0x260
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_24
  * SERDES_FUSE::reg_24_S
  */

typedef union {
  struct {
    uint32_t UC_RATE_LIMIT_LANE_1_I1 : 32;
    ///< Used for programming lane rate limits based on sku. 8b for each TX
    ///< and 8b for each RX.  Secure write register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_24_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_24_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_24_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_24_WR_MASK (0x00000000U)


///< Used for programming lane rate limits based on sku. 8b for each TX
///< and 8b for each RX.  Secure write register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_24_UC_RATE_LIMIT_LANE_1_I1_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_24_UC_RATE_LIMIT_LANE_1_I1_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_24_UC_RATE_LIMIT_LANE_1_I1_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_24_UC_RATE_LIMIT_LANE_1_I1_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_25 register description at address offset 0x264
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_25
  * SERDES_FUSE::reg_25_S
  */

typedef union {
  struct {
    uint32_t UC_RATE_LIMIT_LANE_2_I1 : 32;
    ///< Used for programming lane rate limits based on sku. 8b for each TX
    ///< and 8b for each RX.  Secure write register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_25_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_25_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_25_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_25_WR_MASK (0x00000000U)


///< Used for programming lane rate limits based on sku. 8b for each TX
///< and 8b for each RX.  Secure write register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_25_UC_RATE_LIMIT_LANE_2_I1_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_25_UC_RATE_LIMIT_LANE_2_I1_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_25_UC_RATE_LIMIT_LANE_2_I1_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_25_UC_RATE_LIMIT_LANE_2_I1_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_26 register description at address offset 0x268
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_26
  * SERDES_FUSE::reg_26_S
  */

typedef union {
  struct {
    uint32_t UC_RATE_LIMIT_LANE_3_I1 : 32;
    ///< Used for programming lane rate limits based on sku. 8b for each TX
    ///< and 8b for each RX.  Secure write register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_26_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_26_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_26_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_26_WR_MASK (0x00000000U)


///< Used for programming lane rate limits based on sku. 8b for each TX
///< and 8b for each RX.  Secure write register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_26_UC_RATE_LIMIT_LANE_3_I1_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_26_UC_RATE_LIMIT_LANE_3_I1_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_26_UC_RATE_LIMIT_LANE_3_I1_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_26_UC_RATE_LIMIT_LANE_3_I1_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_27 register description at address offset 0x26c
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_27
  * SERDES_FUSE::reg_27_S
  */

typedef union {
  struct {
    uint32_t UC_RATE_LIMIT_LANE_4_I1 : 32;
    ///< Used for programming lane rate limits based on sku. 8b for each TX
    ///< and 8b for each RX.  Secure write register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_27_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_27_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_27_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_27_WR_MASK (0x00000000U)


///< Used for programming lane rate limits based on sku. 8b for each TX
///< and 8b for each RX.  Secure write register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_27_UC_RATE_LIMIT_LANE_4_I1_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_27_UC_RATE_LIMIT_LANE_4_I1_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_27_UC_RATE_LIMIT_LANE_4_I1_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_27_UC_RATE_LIMIT_LANE_4_I1_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_28 register description at address offset 0x270
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_28
  * SERDES_FUSE::reg_28_S
  */

typedef union {
  struct {
    uint32_t UC_REF_CLK_FREQ_0_I1 : 32;
    ///< Tells the FW the reference clock frequency for each source (max).
    ///< Secure write register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_28_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_28_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_28_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_28_WR_MASK (0x00000000U)


///< Tells the FW the reference clock frequency for each source (max).
///< Secure write register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_28_UC_REF_CLK_FREQ_0_I1_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_28_UC_REF_CLK_FREQ_0_I1_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_28_UC_REF_CLK_FREQ_0_I1_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_28_UC_REF_CLK_FREQ_0_I1_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_29 register description at address offset 0x274
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_29
  * SERDES_FUSE::reg_29_S
  */

typedef union {
  struct {
    uint32_t UC_REF_CLK_FREQ_1_I1 : 32;
    ///< Tells the FW the reference clock frequency for each source (max).
    ///< Secure write register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_29_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_29_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_29_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_29_WR_MASK (0x00000000U)


///< Tells the FW the reference clock frequency for each source (max).
///< Secure write register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_29_UC_REF_CLK_FREQ_1_I1_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_29_UC_REF_CLK_FREQ_1_I1_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_29_UC_REF_CLK_FREQ_1_I1_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_29_UC_REF_CLK_FREQ_1_I1_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_30 register description at address offset 0x278
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_30
  * SERDES_FUSE::reg_30_S
  */

typedef union {
  struct {
    uint32_t UC_REF_CLK_FREQ_2_I1 : 32;
    ///< Tells the FW the reference clock frequency for each source (max).
    ///< Secure write register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_30_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_30_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_30_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_30_WR_MASK (0x00000000U)


///< Tells the FW the reference clock frequency for each source (max).
///< Secure write register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_30_UC_REF_CLK_FREQ_2_I1_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_30_UC_REF_CLK_FREQ_2_I1_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_30_UC_REF_CLK_FREQ_2_I1_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_30_UC_REF_CLK_FREQ_2_I1_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_31 register description at address offset 0x27c
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_31
  * SERDES_FUSE::reg_31_S
  */

typedef union {
  struct {
    uint32_t UC_REF_CLK_FREQ_3_I1 : 32;
    ///< Tells the FW the reference clock frequency for each source (max).
    ///< Secure write register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_31_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_31_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_31_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_31_WR_MASK (0x00000000U)


///< Tells the FW the reference clock frequency for each source (max).
///< Secure write register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_31_UC_REF_CLK_FREQ_3_I1_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_31_UC_REF_CLK_FREQ_3_I1_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_31_UC_REF_CLK_FREQ_3_I1_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_31_UC_REF_CLK_FREQ_3_I1_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_32 register description at address offset 0x280
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_32
  * SERDES_FUSE::reg_32_S
  */

typedef union {
  struct {
    uint32_t UC_FUSE_0_I1 : 32;
    ///< Other capabilities governed by the uC/FW based on sku. Secure write
    ///< register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_32_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_32_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_32_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_32_WR_MASK (0x00000000U)


///< Other capabilities governed by the uC/FW based on sku. Secure write
///< register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_32_UC_FUSE_0_I1_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_32_UC_FUSE_0_I1_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_32_UC_FUSE_0_I1_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_32_UC_FUSE_0_I1_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_33 register description at address offset 0x284
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_33
  * SERDES_FUSE::reg_33_S
  */

typedef union {
  struct {
    uint32_t UC_FUSE_1_I1 : 32;
    ///< Other capabilities governed by the uC/FW based on sku. Secure write
    ///< register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_33_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_33_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_33_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_33_WR_MASK (0x00000000U)


///< Other capabilities governed by the uC/FW based on sku. Secure write
///< register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_33_UC_FUSE_1_I1_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_33_UC_FUSE_1_I1_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_33_UC_FUSE_1_I1_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_33_UC_FUSE_1_I1_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_34 register description at address offset 0x288
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_34
  * SERDES_FUSE::reg_34_S
  */

typedef union {
  struct {
    uint32_t UC_FUSE_2_I1 : 32;
    ///< Other capabilities governed by the uC/FW based on sku. Secure write
    ///< register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_34_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_34_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_34_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_34_WR_MASK (0x00000000U)


///< Other capabilities governed by the uC/FW based on sku. Secure write
///< register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_34_UC_FUSE_2_I1_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_34_UC_FUSE_2_I1_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_34_UC_FUSE_2_I1_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_34_UC_FUSE_2_I1_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_35 register description at address offset 0x28c
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_35
  * SERDES_FUSE::reg_35_S
  */

typedef union {
  struct {
    uint32_t UC_FUSE_3_I1 : 32;
    ///< Other capabilities governed by the uC/FW based on sku. Secure write
    ///< register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_35_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_35_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_35_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_35_WR_MASK (0x00000000U)


///< Other capabilities governed by the uC/FW based on sku. Secure write
///< register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_35_UC_FUSE_3_I1_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_35_UC_FUSE_3_I1_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_35_UC_FUSE_3_I1_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_35_UC_FUSE_3_I1_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_36 register description at address offset 0x290
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_36
  * SERDES_FUSE::reg_36_S
  */

typedef union {
  struct {
    uint32_t UC_RATE_LIMIT_LANE_0_I2 : 32;
    ///< Used for programming lane rate limits based on sku. 8b for each TX
    ///< and 8b for each RX.  Secure write register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_36_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_36_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_36_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_36_WR_MASK (0x00000000U)


///< Used for programming lane rate limits based on sku. 8b for each TX
///< and 8b for each RX.  Secure write register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_36_UC_RATE_LIMIT_LANE_0_I2_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_36_UC_RATE_LIMIT_LANE_0_I2_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_36_UC_RATE_LIMIT_LANE_0_I2_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_36_UC_RATE_LIMIT_LANE_0_I2_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_37 register description at address offset 0x294
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_37
  * SERDES_FUSE::reg_37_S
  */

typedef union {
  struct {
    uint32_t UC_RATE_LIMIT_LANE_1_I2 : 32;
    ///< Used for programming lane rate limits based on sku. 8b for each TX
    ///< and 8b for each RX.  Secure write register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_37_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_37_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_37_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_37_WR_MASK (0x00000000U)


///< Used for programming lane rate limits based on sku. 8b for each TX
///< and 8b for each RX.  Secure write register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_37_UC_RATE_LIMIT_LANE_1_I2_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_37_UC_RATE_LIMIT_LANE_1_I2_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_37_UC_RATE_LIMIT_LANE_1_I2_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_37_UC_RATE_LIMIT_LANE_1_I2_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_38 register description at address offset 0x298
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_38
  * SERDES_FUSE::reg_38_S
  */

typedef union {
  struct {
    uint32_t UC_RATE_LIMIT_LANE_2_I2 : 32;
    ///< Used for programming lane rate limits based on sku. 8b for each TX
    ///< and 8b for each RX.  Secure write register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_38_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_38_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_38_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_38_WR_MASK (0x00000000U)


///< Used for programming lane rate limits based on sku. 8b for each TX
///< and 8b for each RX.  Secure write register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_38_UC_RATE_LIMIT_LANE_2_I2_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_38_UC_RATE_LIMIT_LANE_2_I2_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_38_UC_RATE_LIMIT_LANE_2_I2_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_38_UC_RATE_LIMIT_LANE_2_I2_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_39 register description at address offset 0x29c
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_39
  * SERDES_FUSE::reg_39_S
  */

typedef union {
  struct {
    uint32_t UC_RATE_LIMIT_LANE_3_I2 : 32;
    ///< Used for programming lane rate limits based on sku. 8b for each TX
    ///< and 8b for each RX.  Secure write register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_39_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_39_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_39_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_39_WR_MASK (0x00000000U)


///< Used for programming lane rate limits based on sku. 8b for each TX
///< and 8b for each RX.  Secure write register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_39_UC_RATE_LIMIT_LANE_3_I2_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_39_UC_RATE_LIMIT_LANE_3_I2_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_39_UC_RATE_LIMIT_LANE_3_I2_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_39_UC_RATE_LIMIT_LANE_3_I2_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_40 register description at address offset 0x2a0
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_40
  * SERDES_FUSE::reg_40_S
  */

typedef union {
  struct {
    uint32_t UC_RATE_LIMIT_LANE_4_I2 : 32;
    ///< Used for programming lane rate limits based on sku. 8b for each TX
    ///< and 8b for each RX.  Secure write register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_40_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_40_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_40_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_40_WR_MASK (0x00000000U)


///< Used for programming lane rate limits based on sku. 8b for each TX
///< and 8b for each RX.  Secure write register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_40_UC_RATE_LIMIT_LANE_4_I2_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_40_UC_RATE_LIMIT_LANE_4_I2_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_40_UC_RATE_LIMIT_LANE_4_I2_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_40_UC_RATE_LIMIT_LANE_4_I2_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_41 register description at address offset 0x2a4
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_41
  * SERDES_FUSE::reg_41_S
  */

typedef union {
  struct {
    uint32_t UC_REF_CLK_FREQ_0_I2 : 32;
    ///< Tells the FW the reference clock frequency for each source (max).
    ///< Secure write register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_41_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_41_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_41_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_41_WR_MASK (0x00000000U)


///< Tells the FW the reference clock frequency for each source (max).
///< Secure write register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_41_UC_REF_CLK_FREQ_0_I2_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_41_UC_REF_CLK_FREQ_0_I2_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_41_UC_REF_CLK_FREQ_0_I2_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_41_UC_REF_CLK_FREQ_0_I2_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_42 register description at address offset 0x2a8
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_42
  * SERDES_FUSE::reg_42_S
  */

typedef union {
  struct {
    uint32_t UC_REF_CLK_FREQ_1_I2 : 32;
    ///< Tells the FW the reference clock frequency for each source (max).
    ///< Secure write register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_42_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_42_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_42_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_42_WR_MASK (0x00000000U)


///< Tells the FW the reference clock frequency for each source (max).
///< Secure write register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_42_UC_REF_CLK_FREQ_1_I2_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_42_UC_REF_CLK_FREQ_1_I2_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_42_UC_REF_CLK_FREQ_1_I2_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_42_UC_REF_CLK_FREQ_1_I2_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_43 register description at address offset 0x2ac
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_43
  * SERDES_FUSE::reg_43_S
  */

typedef union {
  struct {
    uint32_t UC_REF_CLK_FREQ_2_I2 : 32;
    ///< Tells the FW the reference clock frequency for each source (max).
    ///< Secure write register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_43_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_43_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_43_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_43_WR_MASK (0x00000000U)


///< Tells the FW the reference clock frequency for each source (max).
///< Secure write register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_43_UC_REF_CLK_FREQ_2_I2_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_43_UC_REF_CLK_FREQ_2_I2_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_43_UC_REF_CLK_FREQ_2_I2_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_43_UC_REF_CLK_FREQ_2_I2_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_44 register description at address offset 0x2b0
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_44
  * SERDES_FUSE::reg_44_S
  */

typedef union {
  struct {
    uint32_t UC_REF_CLK_FREQ_3_I2 : 32;
    ///< Tells the FW the reference clock frequency for each source (max).
    ///< Secure write register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_44_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_44_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_44_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_44_WR_MASK (0x00000000U)


///< Tells the FW the reference clock frequency for each source (max).
///< Secure write register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_44_UC_REF_CLK_FREQ_3_I2_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_44_UC_REF_CLK_FREQ_3_I2_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_44_UC_REF_CLK_FREQ_3_I2_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_44_UC_REF_CLK_FREQ_3_I2_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_45 register description at address offset 0x2b4
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_45
  * SERDES_FUSE::reg_45_S
  */

typedef union {
  struct {
    uint32_t UC_FUSE_0_I2 : 32;
    ///< Other capabilities governed by the uC/FW based on sku. Secure write
    ///< register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_45_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_45_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_45_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_45_WR_MASK (0x00000000U)


///< Other capabilities governed by the uC/FW based on sku. Secure write
///< register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_45_UC_FUSE_0_I2_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_45_UC_FUSE_0_I2_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_45_UC_FUSE_0_I2_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_45_UC_FUSE_0_I2_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_46 register description at address offset 0x2b8
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_46
  * SERDES_FUSE::reg_46_S
  */

typedef union {
  struct {
    uint32_t UC_FUSE_1_I2 : 32;
    ///< Other capabilities governed by the uC/FW based on sku. Secure write
    ///< register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_46_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_46_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_46_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_46_WR_MASK (0x00000000U)


///< Other capabilities governed by the uC/FW based on sku. Secure write
///< register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_46_UC_FUSE_1_I2_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_46_UC_FUSE_1_I2_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_46_UC_FUSE_1_I2_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_46_UC_FUSE_1_I2_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_47 register description at address offset 0x2bc
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_47
  * SERDES_FUSE::reg_47_S
  */

typedef union {
  struct {
    uint32_t UC_FUSE_2_I2 : 32;
    ///< Other capabilities governed by the uC/FW based on sku. Secure write
    ///< register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_47_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_47_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_47_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_47_WR_MASK (0x00000000U)


///< Other capabilities governed by the uC/FW based on sku. Secure write
///< register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_47_UC_FUSE_2_I2_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_47_UC_FUSE_2_I2_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_47_UC_FUSE_2_I2_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_47_UC_FUSE_2_I2_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_48 register description at address offset 0x2c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_48
  * SERDES_FUSE::reg_48_S
  */

typedef union {
  struct {
    uint32_t UC_FUSE_3_I2 : 32;
    ///< Other capabilities governed by the uC/FW based on sku. Secure write
    ///< register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_48_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_48_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_48_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_48_WR_MASK (0x00000000U)


///< Other capabilities governed by the uC/FW based on sku. Secure write
///< register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_48_UC_FUSE_3_I2_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_48_UC_FUSE_3_I2_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_48_UC_FUSE_3_I2_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_48_UC_FUSE_3_I2_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_49 register description at address offset 0x2c4
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_49
  * SERDES_FUSE::reg_49_S
  */

typedef union {
  struct {
    uint32_t UC_RATE_LIMIT_LANE_0_I3 : 32;
    ///< Used for programming lane rate limits based on sku. 8b for each TX
    ///< and 8b for each RX.  Secure write register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_49_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_49_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_49_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_49_WR_MASK (0x00000000U)


///< Used for programming lane rate limits based on sku. 8b for each TX
///< and 8b for each RX.  Secure write register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_49_UC_RATE_LIMIT_LANE_0_I3_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_49_UC_RATE_LIMIT_LANE_0_I3_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_49_UC_RATE_LIMIT_LANE_0_I3_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_49_UC_RATE_LIMIT_LANE_0_I3_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_50 register description at address offset 0x2c8
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_50
  * SERDES_FUSE::reg_50_S
  */

typedef union {
  struct {
    uint32_t UC_RATE_LIMIT_LANE_1_I3 : 32;
    ///< Used for programming lane rate limits based on sku. 8b for each TX
    ///< and 8b for each RX.  Secure write register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_50_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_50_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_50_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_50_WR_MASK (0x00000000U)


///< Used for programming lane rate limits based on sku. 8b for each TX
///< and 8b for each RX.  Secure write register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_50_UC_RATE_LIMIT_LANE_1_I3_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_50_UC_RATE_LIMIT_LANE_1_I3_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_50_UC_RATE_LIMIT_LANE_1_I3_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_50_UC_RATE_LIMIT_LANE_1_I3_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_51 register description at address offset 0x2cc
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_51
  * SERDES_FUSE::reg_51_S
  */

typedef union {
  struct {
    uint32_t UC_RATE_LIMIT_LANE_2_I3 : 32;
    ///< Used for programming lane rate limits based on sku. 8b for each TX
    ///< and 8b for each RX.  Secure write register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_51_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_51_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_51_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_51_WR_MASK (0x00000000U)


///< Used for programming lane rate limits based on sku. 8b for each TX
///< and 8b for each RX.  Secure write register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_51_UC_RATE_LIMIT_LANE_2_I3_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_51_UC_RATE_LIMIT_LANE_2_I3_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_51_UC_RATE_LIMIT_LANE_2_I3_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_51_UC_RATE_LIMIT_LANE_2_I3_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_52 register description at address offset 0x2d0
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_52
  * SERDES_FUSE::reg_52_S
  */

typedef union {
  struct {
    uint32_t UC_RATE_LIMIT_LANE_3_I3 : 32;
    ///< Used for programming lane rate limits based on sku. 8b for each TX
    ///< and 8b for each RX.  Secure write register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_52_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_52_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_52_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_52_WR_MASK (0x00000000U)


///< Used for programming lane rate limits based on sku. 8b for each TX
///< and 8b for each RX.  Secure write register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_52_UC_RATE_LIMIT_LANE_3_I3_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_52_UC_RATE_LIMIT_LANE_3_I3_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_52_UC_RATE_LIMIT_LANE_3_I3_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_52_UC_RATE_LIMIT_LANE_3_I3_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_53 register description at address offset 0x2d4
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_53
  * SERDES_FUSE::reg_53_S
  */

typedef union {
  struct {
    uint32_t UC_RATE_LIMIT_LANE_4_I3 : 32;
    ///< Used for programming lane rate limits based on sku. 8b for each TX
    ///< and 8b for each RX.  Secure write register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_53_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_53_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_53_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_53_WR_MASK (0x00000000U)


///< Used for programming lane rate limits based on sku. 8b for each TX
///< and 8b for each RX.  Secure write register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_53_UC_RATE_LIMIT_LANE_4_I3_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_53_UC_RATE_LIMIT_LANE_4_I3_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_53_UC_RATE_LIMIT_LANE_4_I3_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_53_UC_RATE_LIMIT_LANE_4_I3_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_54 register description at address offset 0x2d8
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_54
  * SERDES_FUSE::reg_54_S
  */

typedef union {
  struct {
    uint32_t UC_REF_CLK_FREQ_0_I3 : 32;
    ///< Tells the FW the reference clock frequency for each source (max).
    ///< Secure write register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_54_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_54_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_54_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_54_WR_MASK (0x00000000U)


///< Tells the FW the reference clock frequency for each source (max).
///< Secure write register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_54_UC_REF_CLK_FREQ_0_I3_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_54_UC_REF_CLK_FREQ_0_I3_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_54_UC_REF_CLK_FREQ_0_I3_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_54_UC_REF_CLK_FREQ_0_I3_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_55 register description at address offset 0x2dc
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_55
  * SERDES_FUSE::reg_55_S
  */

typedef union {
  struct {
    uint32_t UC_REF_CLK_FREQ_1_I3 : 32;
    ///< Tells the FW the reference clock frequency for each source (max).
    ///< Secure write register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_55_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_55_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_55_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_55_WR_MASK (0x00000000U)


///< Tells the FW the reference clock frequency for each source (max).
///< Secure write register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_55_UC_REF_CLK_FREQ_1_I3_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_55_UC_REF_CLK_FREQ_1_I3_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_55_UC_REF_CLK_FREQ_1_I3_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_55_UC_REF_CLK_FREQ_1_I3_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_56 register description at address offset 0x2e0
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_56
  * SERDES_FUSE::reg_56_S
  */

typedef union {
  struct {
    uint32_t UC_REF_CLK_FREQ_2_I3 : 32;
    ///< Tells the FW the reference clock frequency for each source (max).
    ///< Secure write register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_56_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_56_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_56_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_56_WR_MASK (0x00000000U)


///< Tells the FW the reference clock frequency for each source (max).
///< Secure write register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_56_UC_REF_CLK_FREQ_2_I3_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_56_UC_REF_CLK_FREQ_2_I3_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_56_UC_REF_CLK_FREQ_2_I3_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_56_UC_REF_CLK_FREQ_2_I3_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_57 register description at address offset 0x2e4
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_57
  * SERDES_FUSE::reg_57_S
  */

typedef union {
  struct {
    uint32_t UC_REF_CLK_FREQ_3_I3 : 32;
    ///< Tells the FW the reference clock frequency for each source (max).
    ///< Secure write register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_57_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_57_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_57_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_57_WR_MASK (0x00000000U)


///< Tells the FW the reference clock frequency for each source (max).
///< Secure write register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_57_UC_REF_CLK_FREQ_3_I3_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_57_UC_REF_CLK_FREQ_3_I3_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_57_UC_REF_CLK_FREQ_3_I3_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_57_UC_REF_CLK_FREQ_3_I3_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_58 register description at address offset 0x2e8
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_58
  * SERDES_FUSE::reg_58_S
  */

typedef union {
  struct {
    uint32_t UC_FUSE_0_I3 : 32;
    ///< Other capabilities governed by the uC/FW based on sku. Secure write
    ///< register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_58_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_58_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_58_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_58_WR_MASK (0x00000000U)


///< Other capabilities governed by the uC/FW based on sku. Secure write
///< register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_58_UC_FUSE_0_I3_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_58_UC_FUSE_0_I3_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_58_UC_FUSE_0_I3_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_58_UC_FUSE_0_I3_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_59 register description at address offset 0x2ec
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_59
  * SERDES_FUSE::reg_59_S
  */

typedef union {
  struct {
    uint32_t UC_FUSE_1_I3 : 32;
    ///< Other capabilities governed by the uC/FW based on sku. Secure write
    ///< register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_59_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_59_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_59_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_59_WR_MASK (0x00000000U)


///< Other capabilities governed by the uC/FW based on sku. Secure write
///< register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_59_UC_FUSE_1_I3_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_59_UC_FUSE_1_I3_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_59_UC_FUSE_1_I3_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_59_UC_FUSE_1_I3_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_60 register description at address offset 0x2f0
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_60
  * SERDES_FUSE::reg_60_S
  */

typedef union {
  struct {
    uint32_t UC_FUSE_2_I3 : 32;
    ///< Other capabilities governed by the uC/FW based on sku. Secure write
    ///< register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_60_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_60_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_60_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_60_WR_MASK (0x00000000U)


///< Other capabilities governed by the uC/FW based on sku. Secure write
///< register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_60_UC_FUSE_2_I3_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_60_UC_FUSE_2_I3_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_60_UC_FUSE_2_I3_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_60_UC_FUSE_2_I3_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_APB_REG_SERDES_REGS_SERDES_REGISTER_61 register description at address offset 0x2f4
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_apb/reg/SERDES_regs/serdes_register_61
  * SERDES_FUSE::reg_61_S
  */

typedef union {
  struct {
    uint32_t UC_FUSE_3_I3 : 32;
    ///< Other capabilities governed by the uC/FW based on sku. Secure write
    ///< register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_apb_serdes_register_61_reg_t;

#define FUSE_CLIENT_APB_SERDES_REGISTER_61_DEFAULT (0x00000000U)
#define FUSE_CLIENT_APB_SERDES_REGISTER_61_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_APB_SERDES_REGISTER_61_WR_MASK (0x00000000U)


///< Other capabilities governed by the uC/FW based on sku. Secure write
///< register.
#define FUSE_CLIENT_APB_SERDES_REGISTER_61_UC_FUSE_3_I3_BF_OFF ( 0)
#define FUSE_CLIENT_APB_SERDES_REGISTER_61_UC_FUSE_3_I3_BF_WID (32)
#define FUSE_CLIENT_APB_SERDES_REGISTER_61_UC_FUSE_3_I3_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_APB_SERDES_REGISTER_61_UC_FUSE_3_I3_BF_DEF (0x00000000)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define FUSE_CLIENT_APB_ABCSOC_FUSE_REGISTER_0_REG ((fuse_client_apb_abcsoc_fuse_register_0_reg_t*) FUSE_CLIENT_APB_ABCSOC_FUSE_REGISTER_0_ADR)
#define FUSE_CLIENT_APB_ABCSOC_FUSE_REGISTER_1_REG ((fuse_client_apb_abcsoc_fuse_register_1_reg_t*) FUSE_CLIENT_APB_ABCSOC_FUSE_REGISTER_1_ADR)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_0_REG ((fuse_client_apb_abcsoc_hvm_spare_fuse_register_0_reg_t*) FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_0_ADR)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_1_REG ((fuse_client_apb_abcsoc_hvm_spare_fuse_register_1_reg_t*) FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_1_ADR)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_2_REG ((fuse_client_apb_abcsoc_hvm_spare_fuse_register_2_reg_t*) FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_2_ADR)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_3_REG ((fuse_client_apb_abcsoc_hvm_spare_fuse_register_3_reg_t*) FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_3_ADR)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_4_REG ((fuse_client_apb_abcsoc_hvm_spare_fuse_register_4_reg_t*) FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_4_ADR)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_5_REG ((fuse_client_apb_abcsoc_hvm_spare_fuse_register_5_reg_t*) FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_5_ADR)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_6_REG ((fuse_client_apb_abcsoc_hvm_spare_fuse_register_6_reg_t*) FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_6_ADR)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_7_REG ((fuse_client_apb_abcsoc_hvm_spare_fuse_register_7_reg_t*) FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_7_ADR)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_8_REG ((fuse_client_apb_abcsoc_hvm_spare_fuse_register_8_reg_t*) FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_8_ADR)
#define FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_9_REG ((fuse_client_apb_abcsoc_hvm_spare_fuse_register_9_reg_t*) FUSE_CLIENT_APB_ABCSOC_HVM_SPARE_FUSE_REGISTER_9_ADR)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_0_REG ((fuse_client_apb_analog_register_0_reg_t*) FUSE_CLIENT_APB_ANALOG_REGISTER_0_ADR)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_1_REG ((fuse_client_apb_analog_register_1_reg_t*) FUSE_CLIENT_APB_ANALOG_REGISTER_1_ADR)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_2_REG ((fuse_client_apb_analog_register_2_reg_t*) FUSE_CLIENT_APB_ANALOG_REGISTER_2_ADR)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_3_REG ((fuse_client_apb_analog_register_3_reg_t*) FUSE_CLIENT_APB_ANALOG_REGISTER_3_ADR)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_4_REG ((fuse_client_apb_analog_register_4_reg_t*) FUSE_CLIENT_APB_ANALOG_REGISTER_4_ADR)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_5_REG ((fuse_client_apb_analog_register_5_reg_t*) FUSE_CLIENT_APB_ANALOG_REGISTER_5_ADR)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_6_REG ((fuse_client_apb_analog_register_6_reg_t*) FUSE_CLIENT_APB_ANALOG_REGISTER_6_ADR)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_7_REG ((fuse_client_apb_analog_register_7_reg_t*) FUSE_CLIENT_APB_ANALOG_REGISTER_7_ADR)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_8_REG ((fuse_client_apb_analog_register_8_reg_t*) FUSE_CLIENT_APB_ANALOG_REGISTER_8_ADR)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_9_REG ((fuse_client_apb_analog_register_9_reg_t*) FUSE_CLIENT_APB_ANALOG_REGISTER_9_ADR)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_10_REG ((fuse_client_apb_analog_register_10_reg_t*) FUSE_CLIENT_APB_ANALOG_REGISTER_10_ADR)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_11_REG ((fuse_client_apb_analog_register_11_reg_t*) FUSE_CLIENT_APB_ANALOG_REGISTER_11_ADR)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_12_REG ((fuse_client_apb_analog_register_12_reg_t*) FUSE_CLIENT_APB_ANALOG_REGISTER_12_ADR)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_13_REG ((fuse_client_apb_analog_register_13_reg_t*) FUSE_CLIENT_APB_ANALOG_REGISTER_13_ADR)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_14_REG ((fuse_client_apb_analog_register_14_reg_t*) FUSE_CLIENT_APB_ANALOG_REGISTER_14_ADR)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_15_REG ((fuse_client_apb_analog_register_15_reg_t*) FUSE_CLIENT_APB_ANALOG_REGISTER_15_ADR)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_16_REG ((fuse_client_apb_analog_register_16_reg_t*) FUSE_CLIENT_APB_ANALOG_REGISTER_16_ADR)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_17_REG ((fuse_client_apb_analog_register_17_reg_t*) FUSE_CLIENT_APB_ANALOG_REGISTER_17_ADR)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_18_REG ((fuse_client_apb_analog_register_18_reg_t*) FUSE_CLIENT_APB_ANALOG_REGISTER_18_ADR)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_19_REG ((fuse_client_apb_analog_register_19_reg_t*) FUSE_CLIENT_APB_ANALOG_REGISTER_19_ADR)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_20_REG ((fuse_client_apb_analog_register_20_reg_t*) FUSE_CLIENT_APB_ANALOG_REGISTER_20_ADR)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_21_REG ((fuse_client_apb_analog_register_21_reg_t*) FUSE_CLIENT_APB_ANALOG_REGISTER_21_ADR)
#define FUSE_CLIENT_APB_ANALOG_REGISTER_22_REG ((fuse_client_apb_analog_register_22_reg_t*) FUSE_CLIENT_APB_ANALOG_REGISTER_22_ADR)
#define FUSE_CLIENT_APB_ANALOG_BG_TRIM_0_REG ((fuse_client_apb_analog_bg_trim_0_reg_t*) FUSE_CLIENT_APB_ANALOG_BG_TRIM_0_ADR)
#define FUSE_CLIENT_APB_ANALOG_BG_TRIM_1_REG ((fuse_client_apb_analog_bg_trim_1_reg_t*) FUSE_CLIENT_APB_ANALOG_BG_TRIM_1_ADR)
#define FUSE_CLIENT_APB_ANALOG_RESERVE_00_REG ((fuse_client_apb_analog_reserve_00_reg_t*) FUSE_CLIENT_APB_ANALOG_RESERVE_00_ADR)
#define FUSE_CLIENT_APB_ANALOG_RESERVE_01_REG ((fuse_client_apb_analog_reserve_01_reg_t*) FUSE_CLIENT_APB_ANALOG_RESERVE_01_ADR)
#define FUSE_CLIENT_APB_ANALOG_RESERVE_02_REG ((fuse_client_apb_analog_reserve_02_reg_t*) FUSE_CLIENT_APB_ANALOG_RESERVE_02_ADR)
#define FUSE_CLIENT_APB_ANALOG_RESERVE_03_REG ((fuse_client_apb_analog_reserve_03_reg_t*) FUSE_CLIENT_APB_ANALOG_RESERVE_03_ADR)
#define FUSE_CLIENT_APB_ANALOG_RESERVE_04_REG ((fuse_client_apb_analog_reserve_04_reg_t*) FUSE_CLIENT_APB_ANALOG_RESERVE_04_ADR)
#define FUSE_CLIENT_APB_ANALOG_ANA0_HWC4016C_0_REG ((fuse_client_apb_analog_ana0_hwc4016c_0_reg_t*) FUSE_CLIENT_APB_ANALOG_ANA0_HWC4016C_0_ADR)
#define FUSE_CLIENT_APB_ANALOG_ANA0_HWC4016C_1_REG ((fuse_client_apb_analog_ana0_hwc4016c_1_reg_t*) FUSE_CLIENT_APB_ANALOG_ANA0_HWC4016C_1_ADR)
#define FUSE_CLIENT_APB_ANALOG_ANA0_HWC4016C_2_REG ((fuse_client_apb_analog_ana0_hwc4016c_2_reg_t*) FUSE_CLIENT_APB_ANALOG_ANA0_HWC4016C_2_ADR)
#define FUSE_CLIENT_APB_ANALOG_ANA0_HWC4016C_3_REG ((fuse_client_apb_analog_ana0_hwc4016c_3_reg_t*) FUSE_CLIENT_APB_ANALOG_ANA0_HWC4016C_3_ADR)
#define FUSE_CLIENT_APB_ANALOG_ANA1_HWC4016C_0_REG ((fuse_client_apb_analog_ana1_hwc4016c_0_reg_t*) FUSE_CLIENT_APB_ANALOG_ANA1_HWC4016C_0_ADR)
#define FUSE_CLIENT_APB_ANALOG_ANA1_HWC4016C_1_REG ((fuse_client_apb_analog_ana1_hwc4016c_1_reg_t*) FUSE_CLIENT_APB_ANALOG_ANA1_HWC4016C_1_ADR)
#define FUSE_CLIENT_APB_ANALOG_ANA1_HWC4016C_2_REG ((fuse_client_apb_analog_ana1_hwc4016c_2_reg_t*) FUSE_CLIENT_APB_ANALOG_ANA1_HWC4016C_2_ADR)
#define FUSE_CLIENT_APB_ANALOG_ANA1_HWC4016C_3_REG ((fuse_client_apb_analog_ana1_hwc4016c_3_reg_t*) FUSE_CLIENT_APB_ANALOG_ANA1_HWC4016C_3_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_0_REG ((fuse_client_apb_serdes_register_0_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_0_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_1_REG ((fuse_client_apb_serdes_register_1_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_1_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_2_REG ((fuse_client_apb_serdes_register_2_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_2_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_3_REG ((fuse_client_apb_serdes_register_3_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_3_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_4_REG ((fuse_client_apb_serdes_register_4_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_4_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_5_REG ((fuse_client_apb_serdes_register_5_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_5_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_6_REG ((fuse_client_apb_serdes_register_6_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_6_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_7_REG ((fuse_client_apb_serdes_register_7_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_7_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_8_REG ((fuse_client_apb_serdes_register_8_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_8_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_9_REG ((fuse_client_apb_serdes_register_9_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_9_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_10_REG ((fuse_client_apb_serdes_register_10_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_10_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_11_REG ((fuse_client_apb_serdes_register_11_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_11_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_12_REG ((fuse_client_apb_serdes_register_12_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_12_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_13_REG ((fuse_client_apb_serdes_register_13_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_13_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_14_REG ((fuse_client_apb_serdes_register_14_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_14_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_15_REG ((fuse_client_apb_serdes_register_15_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_15_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_16_REG ((fuse_client_apb_serdes_register_16_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_16_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_17_REG ((fuse_client_apb_serdes_register_17_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_17_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_18_REG ((fuse_client_apb_serdes_register_18_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_18_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_19_REG ((fuse_client_apb_serdes_register_19_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_19_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_20_REG ((fuse_client_apb_serdes_register_20_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_20_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_21_REG ((fuse_client_apb_serdes_register_21_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_21_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_22_REG ((fuse_client_apb_serdes_register_22_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_22_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_23_REG ((fuse_client_apb_serdes_register_23_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_23_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_24_REG ((fuse_client_apb_serdes_register_24_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_24_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_25_REG ((fuse_client_apb_serdes_register_25_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_25_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_26_REG ((fuse_client_apb_serdes_register_26_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_26_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_27_REG ((fuse_client_apb_serdes_register_27_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_27_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_28_REG ((fuse_client_apb_serdes_register_28_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_28_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_29_REG ((fuse_client_apb_serdes_register_29_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_29_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_30_REG ((fuse_client_apb_serdes_register_30_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_30_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_31_REG ((fuse_client_apb_serdes_register_31_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_31_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_32_REG ((fuse_client_apb_serdes_register_32_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_32_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_33_REG ((fuse_client_apb_serdes_register_33_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_33_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_34_REG ((fuse_client_apb_serdes_register_34_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_34_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_35_REG ((fuse_client_apb_serdes_register_35_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_35_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_36_REG ((fuse_client_apb_serdes_register_36_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_36_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_37_REG ((fuse_client_apb_serdes_register_37_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_37_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_38_REG ((fuse_client_apb_serdes_register_38_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_38_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_39_REG ((fuse_client_apb_serdes_register_39_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_39_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_40_REG ((fuse_client_apb_serdes_register_40_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_40_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_41_REG ((fuse_client_apb_serdes_register_41_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_41_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_42_REG ((fuse_client_apb_serdes_register_42_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_42_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_43_REG ((fuse_client_apb_serdes_register_43_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_43_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_44_REG ((fuse_client_apb_serdes_register_44_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_44_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_45_REG ((fuse_client_apb_serdes_register_45_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_45_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_46_REG ((fuse_client_apb_serdes_register_46_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_46_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_47_REG ((fuse_client_apb_serdes_register_47_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_47_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_48_REG ((fuse_client_apb_serdes_register_48_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_48_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_49_REG ((fuse_client_apb_serdes_register_49_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_49_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_50_REG ((fuse_client_apb_serdes_register_50_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_50_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_51_REG ((fuse_client_apb_serdes_register_51_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_51_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_52_REG ((fuse_client_apb_serdes_register_52_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_52_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_53_REG ((fuse_client_apb_serdes_register_53_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_53_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_54_REG ((fuse_client_apb_serdes_register_54_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_54_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_55_REG ((fuse_client_apb_serdes_register_55_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_55_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_56_REG ((fuse_client_apb_serdes_register_56_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_56_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_57_REG ((fuse_client_apb_serdes_register_57_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_57_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_58_REG ((fuse_client_apb_serdes_register_58_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_58_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_59_REG ((fuse_client_apb_serdes_register_59_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_59_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_60_REG ((fuse_client_apb_serdes_register_60_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_60_ADR)
#define FUSE_CLIENT_APB_SERDES_REGISTER_61_REG ((fuse_client_apb_serdes_register_61_reg_t*) FUSE_CLIENT_APB_SERDES_REGISTER_61_ADR)

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    fuse_client_apb_abcsoc_fuse_register_0_reg_t ABCSOC_FUSE_REGISTER_0; /*< Address offset = 0x0 */
    fuse_client_apb_abcsoc_fuse_register_1_reg_t ABCSOC_FUSE_REGISTER_1; /*< Address offset = 0x4 */
    fuse_client_apb_abcsoc_hvm_spare_fuse_register_0_reg_t ABCSOC_HVM_SPARE_FUSE_REGISTER_0; /*< Address offset = 0x8 */
    fuse_client_apb_abcsoc_hvm_spare_fuse_register_1_reg_t ABCSOC_HVM_SPARE_FUSE_REGISTER_1; /*< Address offset = 0xc */
    fuse_client_apb_abcsoc_hvm_spare_fuse_register_2_reg_t ABCSOC_HVM_SPARE_FUSE_REGISTER_2; /*< Address offset = 0x10 */
    fuse_client_apb_abcsoc_hvm_spare_fuse_register_3_reg_t ABCSOC_HVM_SPARE_FUSE_REGISTER_3; /*< Address offset = 0x14 */
    fuse_client_apb_abcsoc_hvm_spare_fuse_register_4_reg_t ABCSOC_HVM_SPARE_FUSE_REGISTER_4; /*< Address offset = 0x18 */
    fuse_client_apb_abcsoc_hvm_spare_fuse_register_5_reg_t ABCSOC_HVM_SPARE_FUSE_REGISTER_5; /*< Address offset = 0x1c */
    fuse_client_apb_abcsoc_hvm_spare_fuse_register_6_reg_t ABCSOC_HVM_SPARE_FUSE_REGISTER_6; /*< Address offset = 0x20 */
    fuse_client_apb_abcsoc_hvm_spare_fuse_register_7_reg_t ABCSOC_HVM_SPARE_FUSE_REGISTER_7; /*< Address offset = 0x24 */
    fuse_client_apb_abcsoc_hvm_spare_fuse_register_8_reg_t ABCSOC_HVM_SPARE_FUSE_REGISTER_8; /*< Address offset = 0x28 */
    fuse_client_apb_abcsoc_hvm_spare_fuse_register_9_reg_t ABCSOC_HVM_SPARE_FUSE_REGISTER_9; /*< Address offset = 0x2c */
    const uint8_t        reservedArea0 [208]; /*< Address offset = 0x30 */
    fuse_client_apb_analog_register_0_reg_t ANALOG_REGISTER_0; /*< Address offset = 0x100 */
    fuse_client_apb_analog_register_1_reg_t ANALOG_REGISTER_1; /*< Address offset = 0x104 */
    fuse_client_apb_analog_register_2_reg_t ANALOG_REGISTER_2; /*< Address offset = 0x108 */
    fuse_client_apb_analog_register_3_reg_t ANALOG_REGISTER_3; /*< Address offset = 0x10c */
    fuse_client_apb_analog_register_4_reg_t ANALOG_REGISTER_4; /*< Address offset = 0x110 */
    fuse_client_apb_analog_register_5_reg_t ANALOG_REGISTER_5; /*< Address offset = 0x114 */
    fuse_client_apb_analog_register_6_reg_t ANALOG_REGISTER_6; /*< Address offset = 0x118 */
    fuse_client_apb_analog_register_7_reg_t ANALOG_REGISTER_7; /*< Address offset = 0x11c */
    fuse_client_apb_analog_register_8_reg_t ANALOG_REGISTER_8; /*< Address offset = 0x120 */
    fuse_client_apb_analog_register_9_reg_t ANALOG_REGISTER_9; /*< Address offset = 0x124 */
    fuse_client_apb_analog_register_10_reg_t ANALOG_REGISTER_10; /*< Address offset = 0x128 */
    fuse_client_apb_analog_register_11_reg_t ANALOG_REGISTER_11; /*< Address offset = 0x12c */
    fuse_client_apb_analog_register_12_reg_t ANALOG_REGISTER_12; /*< Address offset = 0x130 */
    fuse_client_apb_analog_register_13_reg_t ANALOG_REGISTER_13; /*< Address offset = 0x134 */
    fuse_client_apb_analog_register_14_reg_t ANALOG_REGISTER_14; /*< Address offset = 0x138 */
    fuse_client_apb_analog_register_15_reg_t ANALOG_REGISTER_15; /*< Address offset = 0x13c */
    fuse_client_apb_analog_register_16_reg_t ANALOG_REGISTER_16; /*< Address offset = 0x140 */
    fuse_client_apb_analog_register_17_reg_t ANALOG_REGISTER_17; /*< Address offset = 0x144 */
    fuse_client_apb_analog_register_18_reg_t ANALOG_REGISTER_18; /*< Address offset = 0x148 */
    fuse_client_apb_analog_register_19_reg_t ANALOG_REGISTER_19; /*< Address offset = 0x14c */
    fuse_client_apb_analog_register_20_reg_t ANALOG_REGISTER_20; /*< Address offset = 0x150 */
    fuse_client_apb_analog_register_21_reg_t ANALOG_REGISTER_21; /*< Address offset = 0x154 */
    fuse_client_apb_analog_register_22_reg_t ANALOG_REGISTER_22; /*< Address offset = 0x158 */
    fuse_client_apb_analog_bg_trim_0_reg_t ANALOG_BG_TRIM_0; /*< Address offset = 0x15c */
    fuse_client_apb_analog_bg_trim_1_reg_t ANALOG_BG_TRIM_1; /*< Address offset = 0x160 */
    fuse_client_apb_analog_reserve_00_reg_t ANALOG_RESERVE_00; /*< Address offset = 0x164 */
    fuse_client_apb_analog_reserve_01_reg_t ANALOG_RESERVE_01; /*< Address offset = 0x168 */
    fuse_client_apb_analog_reserve_02_reg_t ANALOG_RESERVE_02; /*< Address offset = 0x16c */
    fuse_client_apb_analog_reserve_03_reg_t ANALOG_RESERVE_03; /*< Address offset = 0x170 */
    fuse_client_apb_analog_reserve_04_reg_t ANALOG_RESERVE_04; /*< Address offset = 0x174 */
    const uint8_t        reservedArea1 [8];   /*< Address offset = 0x178 */
    fuse_client_apb_analog_ana0_hwc4016c_0_reg_t ANALOG_ANA0_HWC4016C_0; /*< Address offset = 0x180 */
    fuse_client_apb_analog_ana0_hwc4016c_1_reg_t ANALOG_ANA0_HWC4016C_1; /*< Address offset = 0x184 */
    fuse_client_apb_analog_ana0_hwc4016c_2_reg_t ANALOG_ANA0_HWC4016C_2; /*< Address offset = 0x188 */
    fuse_client_apb_analog_ana0_hwc4016c_3_reg_t ANALOG_ANA0_HWC4016C_3; /*< Address offset = 0x18c */
    fuse_client_apb_analog_ana1_hwc4016c_0_reg_t ANALOG_ANA1_HWC4016C_0; /*< Address offset = 0x190 */
    fuse_client_apb_analog_ana1_hwc4016c_1_reg_t ANALOG_ANA1_HWC4016C_1; /*< Address offset = 0x194 */
    fuse_client_apb_analog_ana1_hwc4016c_2_reg_t ANALOG_ANA1_HWC4016C_2; /*< Address offset = 0x198 */
    fuse_client_apb_analog_ana1_hwc4016c_3_reg_t ANALOG_ANA1_HWC4016C_3; /*< Address offset = 0x19c */
    const uint8_t        reservedArea2 [96];  /*< Address offset = 0x1a0 */
    fuse_client_apb_serdes_register_0_reg_t SERDES_REGISTER_0; /*< Address offset = 0x200 */
    fuse_client_apb_serdes_register_1_reg_t SERDES_REGISTER_1; /*< Address offset = 0x204 */
    fuse_client_apb_serdes_register_2_reg_t SERDES_REGISTER_2; /*< Address offset = 0x208 */
    fuse_client_apb_serdes_register_3_reg_t SERDES_REGISTER_3; /*< Address offset = 0x20c */
    fuse_client_apb_serdes_register_4_reg_t SERDES_REGISTER_4; /*< Address offset = 0x210 */
    fuse_client_apb_serdes_register_5_reg_t SERDES_REGISTER_5; /*< Address offset = 0x214 */
    fuse_client_apb_serdes_register_6_reg_t SERDES_REGISTER_6; /*< Address offset = 0x218 */
    fuse_client_apb_serdes_register_7_reg_t SERDES_REGISTER_7; /*< Address offset = 0x21c */
    fuse_client_apb_serdes_register_8_reg_t SERDES_REGISTER_8; /*< Address offset = 0x220 */
    fuse_client_apb_serdes_register_9_reg_t SERDES_REGISTER_9; /*< Address offset = 0x224 */
    fuse_client_apb_serdes_register_10_reg_t SERDES_REGISTER_10; /*< Address offset = 0x228 */
    fuse_client_apb_serdes_register_11_reg_t SERDES_REGISTER_11; /*< Address offset = 0x22c */
    fuse_client_apb_serdes_register_12_reg_t SERDES_REGISTER_12; /*< Address offset = 0x230 */
    fuse_client_apb_serdes_register_13_reg_t SERDES_REGISTER_13; /*< Address offset = 0x234 */
    fuse_client_apb_serdes_register_14_reg_t SERDES_REGISTER_14; /*< Address offset = 0x238 */
    fuse_client_apb_serdes_register_15_reg_t SERDES_REGISTER_15; /*< Address offset = 0x23c */
    fuse_client_apb_serdes_register_16_reg_t SERDES_REGISTER_16; /*< Address offset = 0x240 */
    fuse_client_apb_serdes_register_17_reg_t SERDES_REGISTER_17; /*< Address offset = 0x244 */
    fuse_client_apb_serdes_register_18_reg_t SERDES_REGISTER_18; /*< Address offset = 0x248 */
    fuse_client_apb_serdes_register_19_reg_t SERDES_REGISTER_19; /*< Address offset = 0x24c */
    fuse_client_apb_serdes_register_20_reg_t SERDES_REGISTER_20; /*< Address offset = 0x250 */
    fuse_client_apb_serdes_register_21_reg_t SERDES_REGISTER_21; /*< Address offset = 0x254 */
    fuse_client_apb_serdes_register_22_reg_t SERDES_REGISTER_22; /*< Address offset = 0x258 */
    fuse_client_apb_serdes_register_23_reg_t SERDES_REGISTER_23; /*< Address offset = 0x25c */
    fuse_client_apb_serdes_register_24_reg_t SERDES_REGISTER_24; /*< Address offset = 0x260 */
    fuse_client_apb_serdes_register_25_reg_t SERDES_REGISTER_25; /*< Address offset = 0x264 */
    fuse_client_apb_serdes_register_26_reg_t SERDES_REGISTER_26; /*< Address offset = 0x268 */
    fuse_client_apb_serdes_register_27_reg_t SERDES_REGISTER_27; /*< Address offset = 0x26c */
    fuse_client_apb_serdes_register_28_reg_t SERDES_REGISTER_28; /*< Address offset = 0x270 */
    fuse_client_apb_serdes_register_29_reg_t SERDES_REGISTER_29; /*< Address offset = 0x274 */
    fuse_client_apb_serdes_register_30_reg_t SERDES_REGISTER_30; /*< Address offset = 0x278 */
    fuse_client_apb_serdes_register_31_reg_t SERDES_REGISTER_31; /*< Address offset = 0x27c */
    fuse_client_apb_serdes_register_32_reg_t SERDES_REGISTER_32; /*< Address offset = 0x280 */
    fuse_client_apb_serdes_register_33_reg_t SERDES_REGISTER_33; /*< Address offset = 0x284 */
    fuse_client_apb_serdes_register_34_reg_t SERDES_REGISTER_34; /*< Address offset = 0x288 */
    fuse_client_apb_serdes_register_35_reg_t SERDES_REGISTER_35; /*< Address offset = 0x28c */
    fuse_client_apb_serdes_register_36_reg_t SERDES_REGISTER_36; /*< Address offset = 0x290 */
    fuse_client_apb_serdes_register_37_reg_t SERDES_REGISTER_37; /*< Address offset = 0x294 */
    fuse_client_apb_serdes_register_38_reg_t SERDES_REGISTER_38; /*< Address offset = 0x298 */
    fuse_client_apb_serdes_register_39_reg_t SERDES_REGISTER_39; /*< Address offset = 0x29c */
    fuse_client_apb_serdes_register_40_reg_t SERDES_REGISTER_40; /*< Address offset = 0x2a0 */
    fuse_client_apb_serdes_register_41_reg_t SERDES_REGISTER_41; /*< Address offset = 0x2a4 */
    fuse_client_apb_serdes_register_42_reg_t SERDES_REGISTER_42; /*< Address offset = 0x2a8 */
    fuse_client_apb_serdes_register_43_reg_t SERDES_REGISTER_43; /*< Address offset = 0x2ac */
    fuse_client_apb_serdes_register_44_reg_t SERDES_REGISTER_44; /*< Address offset = 0x2b0 */
    fuse_client_apb_serdes_register_45_reg_t SERDES_REGISTER_45; /*< Address offset = 0x2b4 */
    fuse_client_apb_serdes_register_46_reg_t SERDES_REGISTER_46; /*< Address offset = 0x2b8 */
    fuse_client_apb_serdes_register_47_reg_t SERDES_REGISTER_47; /*< Address offset = 0x2bc */
    fuse_client_apb_serdes_register_48_reg_t SERDES_REGISTER_48; /*< Address offset = 0x2c0 */
    fuse_client_apb_serdes_register_49_reg_t SERDES_REGISTER_49; /*< Address offset = 0x2c4 */
    fuse_client_apb_serdes_register_50_reg_t SERDES_REGISTER_50; /*< Address offset = 0x2c8 */
    fuse_client_apb_serdes_register_51_reg_t SERDES_REGISTER_51; /*< Address offset = 0x2cc */
    fuse_client_apb_serdes_register_52_reg_t SERDES_REGISTER_52; /*< Address offset = 0x2d0 */
    fuse_client_apb_serdes_register_53_reg_t SERDES_REGISTER_53; /*< Address offset = 0x2d4 */
    fuse_client_apb_serdes_register_54_reg_t SERDES_REGISTER_54; /*< Address offset = 0x2d8 */
    fuse_client_apb_serdes_register_55_reg_t SERDES_REGISTER_55; /*< Address offset = 0x2dc */
    fuse_client_apb_serdes_register_56_reg_t SERDES_REGISTER_56; /*< Address offset = 0x2e0 */
    fuse_client_apb_serdes_register_57_reg_t SERDES_REGISTER_57; /*< Address offset = 0x2e4 */
    fuse_client_apb_serdes_register_58_reg_t SERDES_REGISTER_58; /*< Address offset = 0x2e8 */
    fuse_client_apb_serdes_register_59_reg_t SERDES_REGISTER_59; /*< Address offset = 0x2ec */
    fuse_client_apb_serdes_register_60_reg_t SERDES_REGISTER_60; /*< Address offset = 0x2f0 */
    fuse_client_apb_serdes_register_61_reg_t SERDES_REGISTER_61; /*< Address offset = 0x2f4 */
} fuse_client_apb_t;     // size: 0x01c0

// AddressSpace struct pointer
//
#define SYSCON_FUSE_CLIENT_APB  ((fuse_client_apb_t*) SYSCON_FUSE_CLIENT_APB_BASE)

// ******************************************* /Address Space

#endif      // _FUSE_CLIENT_APB_H_

