#ifndef _PMA_RXWORD_MSG_H_
#define _PMA_RXWORD_MSG_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define DLNK_JESD0_PHY_PMA0_RXWORD_GLOBAL_BASE  ( 0x06026000 )
#define DLNK_JESD0_PHY_PMA0_RXWORD_Q0_BASE      ( 0x0602a000 )
#define DLNK_JESD0_PHY_PMA0_RXWORD_Q1_BASE      ( 0x0602e000 )
#define DLNK_JESD0_PHY_PMA0_RXWORD_Q2_BASE      ( 0x06032000 )
#define DLNK_JESD0_PHY_PMA0_RXWORD_Q3_BASE      ( 0x06036000 )
#define DLNK_JESD1_PHY_PMA0_RXWORD_GLOBAL_BASE  ( 0x06826000 )
#define DLNK_JESD1_PHY_PMA0_RXWORD_Q0_BASE      ( 0x0682a000 )
#define DLNK_JESD1_PHY_PMA0_RXWORD_Q1_BASE      ( 0x0682e000 )
#define DLNK_JESD1_PHY_PMA0_RXWORD_Q2_BASE      ( 0x06832000 )
#define DLNK_JESD1_PHY_PMA0_RXWORD_Q3_BASE      ( 0x06836000 )
#define DLNK_JESD2_PHY_PMA0_RXWORD_GLOBAL_BASE  ( 0x07026000 )
#define DLNK_JESD2_PHY_PMA0_RXWORD_Q0_BASE      ( 0x0702a000 )
#define DLNK_JESD2_PHY_PMA0_RXWORD_Q1_BASE      ( 0x0702e000 )
#define DLNK_JESD2_PHY_PMA0_RXWORD_Q2_BASE      ( 0x07032000 )
#define DLNK_JESD2_PHY_PMA0_RXWORD_Q3_BASE      ( 0x07036000 )
#define DLNK_JESD3_PHY_PMA0_RXWORD_GLOBAL_BASE  ( 0x07826000 )
#define DLNK_JESD3_PHY_PMA0_RXWORD_Q0_BASE      ( 0x0782a000 )
#define DLNK_JESD3_PHY_PMA0_RXWORD_Q1_BASE      ( 0x0782e000 )
#define DLNK_JESD3_PHY_PMA0_RXWORD_Q2_BASE      ( 0x07832000 )
#define DLNK_JESD3_PHY_PMA0_RXWORD_Q3_BASE      ( 0x07836000 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define PMA_RXWORD_MSG_FFE_COEFF_SET0_0_OFFSET ( 0x00000000U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_1_OFFSET ( 0x00000004U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_2_OFFSET ( 0x00000008U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_3_OFFSET ( 0x0000000cU )
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_4_OFFSET ( 0x00000010U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_0_OFFSET ( 0x00000014U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_1_OFFSET ( 0x00000018U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_2_OFFSET ( 0x0000001cU )
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_3_OFFSET ( 0x00000020U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_4_OFFSET ( 0x00000024U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_0_OFFSET ( 0x00000028U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_1_OFFSET ( 0x0000002cU )
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_2_OFFSET ( 0x00000030U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_3_OFFSET ( 0x00000034U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_4_OFFSET ( 0x00000038U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_0_OFFSET ( 0x0000003cU )
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_1_OFFSET ( 0x00000040U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_2_OFFSET ( 0x00000044U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_3_OFFSET ( 0x00000048U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_4_OFFSET ( 0x0000004cU )
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_0_OFFSET ( 0x00000050U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_1_OFFSET ( 0x00000054U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_2_OFFSET ( 0x00000058U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_3_OFFSET ( 0x0000005cU )
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_4_OFFSET ( 0x00000060U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_0_OFFSET ( 0x00000064U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_1_OFFSET ( 0x00000068U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_2_OFFSET ( 0x0000006cU )
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_3_OFFSET ( 0x00000070U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_4_OFFSET ( 0x00000074U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_0_OFFSET ( 0x00000078U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_1_OFFSET ( 0x0000007cU )
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_2_OFFSET ( 0x00000080U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_3_OFFSET ( 0x00000084U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_4_OFFSET ( 0x00000088U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_0_OFFSET ( 0x0000008cU )
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_1_OFFSET ( 0x00000090U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_2_OFFSET ( 0x00000094U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_3_OFFSET ( 0x00000098U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_4_OFFSET ( 0x0000009cU )
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_0_OFFSET ( 0x000000a0U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_1_OFFSET ( 0x000000a4U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_2_OFFSET ( 0x000000a8U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_3_OFFSET ( 0x000000acU )
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_4_OFFSET ( 0x000000b0U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_0_OFFSET ( 0x000000b4U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_1_OFFSET ( 0x000000b8U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_2_OFFSET ( 0x000000bcU )
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_3_OFFSET ( 0x000000c0U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_4_OFFSET ( 0x000000c4U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_0_OFFSET ( 0x000000ccU )
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_1_OFFSET ( 0x000000d0U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_2_OFFSET ( 0x000000d4U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_3_OFFSET ( 0x000000d8U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_4_OFFSET ( 0x000000dcU )
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_0_OFFSET ( 0x000000e0U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_1_OFFSET ( 0x000000e4U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_2_OFFSET ( 0x000000e8U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_3_OFFSET ( 0x000000ecU )
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_4_OFFSET ( 0x000000f0U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_0_OFFSET ( 0x000000f4U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_1_OFFSET ( 0x000000f8U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_2_OFFSET ( 0x000000fcU )
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_3_OFFSET ( 0x00000100U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_4_OFFSET ( 0x00000104U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_0_OFFSET ( 0x00000108U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_1_OFFSET ( 0x0000010cU )
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_2_OFFSET ( 0x00000110U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_3_OFFSET ( 0x00000114U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_4_OFFSET ( 0x00000118U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_0_OFFSET ( 0x0000011cU )
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_1_OFFSET ( 0x00000120U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_2_OFFSET ( 0x00000124U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_3_OFFSET ( 0x00000128U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_4_OFFSET ( 0x0000012cU )
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_0_OFFSET ( 0x00000130U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_1_OFFSET ( 0x00000134U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_2_OFFSET ( 0x00000138U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_3_OFFSET ( 0x0000013cU )
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_4_OFFSET ( 0x00000140U )
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET0_OFFSET ( 0x00000148U )
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET1_OFFSET ( 0x0000014cU )
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET2_OFFSET ( 0x00000150U )
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET3_OFFSET ( 0x00000154U )
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET4_OFFSET ( 0x00000158U )
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET5_OFFSET ( 0x0000015cU )
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET6_OFFSET ( 0x00000160U )
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET7_OFFSET ( 0x00000164U )
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET8_OFFSET ( 0x00000168U )
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET9_OFFSET ( 0x0000016cU )
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET10_OFFSET ( 0x00000170U )
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET11_OFFSET ( 0x00000174U )
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET12_OFFSET ( 0x00000178U )
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET13_OFFSET ( 0x0000017cU )
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET14_OFFSET ( 0x00000180U )
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET15_OFFSET ( 0x00000184U )
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET0_OFFSET ( 0x00000188U )
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET0_OFFSET ( 0x0000018cU )
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET1_OFFSET ( 0x00000190U )
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET1_OFFSET ( 0x00000194U )
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET2_OFFSET ( 0x00000198U )
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET2_OFFSET ( 0x0000019cU )
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET3_OFFSET ( 0x000001a0U )
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET3_OFFSET ( 0x000001a4U )
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET4_OFFSET ( 0x000001a8U )
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET4_OFFSET ( 0x000001acU )
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET5_OFFSET ( 0x000001b0U )
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET5_OFFSET ( 0x000001b4U )
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET6_OFFSET ( 0x000001b8U )
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET6_OFFSET ( 0x000001bcU )
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET7_OFFSET ( 0x000001c0U )
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET7_OFFSET ( 0x000001c4U )
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET8_OFFSET ( 0x000001c8U )
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET8_OFFSET ( 0x000001ccU )
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET9_OFFSET ( 0x000001d0U )
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET9_OFFSET ( 0x000001d4U )
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET10_OFFSET ( 0x000001d8U )
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET10_OFFSET ( 0x000001dcU )
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET11_OFFSET ( 0x000001e0U )
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET11_OFFSET ( 0x000001e4U )
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET12_OFFSET ( 0x000001e8U )
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET12_OFFSET ( 0x000001ecU )
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET13_OFFSET ( 0x000001f0U )
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET13_OFFSET ( 0x000001f4U )
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET14_OFFSET ( 0x000001f8U )
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET14_OFFSET ( 0x000001fcU )
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET15_OFFSET ( 0x00000200U )
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET15_OFFSET ( 0x00000204U )
#define PMA_RXWORD_MSG_RX_DUMP_MEM_CTRL_OFFSET ( 0x00000208U )
#define PMA_RXWORD_MSG_RX_DUMP_MEM_APB_RD_DATA_OFFSET ( 0x0000020cU )
#define PMA_RXWORD_MSG_RX_DUMP_MEM_APB_RD_EN_OFFSET ( 0x00000210U )
#define PMA_RXWORD_MSG_RX_DUMP_MEM_APB_EN_OFFSET ( 0x00000214U )
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_OFFSET ( 0x00000218U )
#define PMA_RXWORD_MSG_ADP_MSB_LSB_SWAP_CTRL_OFFSET ( 0x0000021cU )
#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION1_OFFSET ( 0x00000220U )
#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION2_OFFSET ( 0x00000224U )
#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION3_OFFSET ( 0x00000228U )
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_0_OFFSET ( 0x0000022cU )
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_1_OFFSET ( 0x00000230U )
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_2_OFFSET ( 0x00000234U )
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_3_OFFSET ( 0x00000238U )
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_4_OFFSET ( 0x0000023cU )
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_6_OFFSET ( 0x00000240U )
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_7_OFFSET ( 0x00000244U )
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_8_OFFSET ( 0x00000248U )
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET0_CTRL_OFFSET ( 0x0000028cU )
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET1_CTRL_OFFSET ( 0x00000290U )
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET2_CTRL_OFFSET ( 0x00000294U )
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET3_CTRL_OFFSET ( 0x00000298U )
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET4_CTRL_OFFSET ( 0x0000029cU )
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET5_CTRL_OFFSET ( 0x000002a0U )
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET6_CTRL_OFFSET ( 0x000002a4U )
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET7_CTRL_OFFSET ( 0x000002a8U )
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET8_CTRL_OFFSET ( 0x000002acU )
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET9_CTRL_OFFSET ( 0x000002b0U )
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET10_CTRL_OFFSET ( 0x000002b4U )
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET11_CTRL_OFFSET ( 0x000002b8U )
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET12_CTRL_OFFSET ( 0x000002bcU )
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET13_CTRL_OFFSET ( 0x000002c0U )
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET14_CTRL_OFFSET ( 0x000002c4U )
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET15_CTRL_OFFSET ( 0x000002c8U )
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET0_CTRL_OFFSET ( 0x000002ccU )
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET1_CTRL_OFFSET ( 0x000002d0U )
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET2_CTRL_OFFSET ( 0x000002d4U )
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET3_CTRL_OFFSET ( 0x000002d8U )
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET4_CTRL_OFFSET ( 0x000002dcU )
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET5_CTRL_OFFSET ( 0x000002e0U )
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET6_CTRL_OFFSET ( 0x000002e4U )
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET7_CTRL_OFFSET ( 0x000002e8U )
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET8_CTRL_OFFSET ( 0x000002ecU )
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET9_CTRL_OFFSET ( 0x000002f0U )
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET10_CTRL_OFFSET ( 0x000002f4U )
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET11_CTRL_OFFSET ( 0x000002f8U )
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET12_CTRL_OFFSET ( 0x000002fcU )
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET13_CTRL_OFFSET ( 0x00000300U )
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET14_CTRL_OFFSET ( 0x00000304U )
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET15_CTRL_OFFSET ( 0x00000308U )
#define PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_CTRL0_OFFSET ( 0x0000030cU )
#define PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_CTRL1_OFFSET ( 0x00000310U )
#define PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_CTRL2_OFFSET ( 0x00000314U )
#define PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_STAT_OFFSET ( 0x00000318U )
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_CTRL_OFFSET ( 0x0000031cU )
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_STAT_OFFSET ( 0x00000320U )
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_6_OFFSET ( 0x000003ecU )
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_0_OFFSET ( 0x000003f0U )
#define PMA_RXWORD_MSG_MAIN_FSM_STAT_0_OFFSET ( 0x000003f4U )
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_1_OFFSET ( 0x000003f8U )
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_2_OFFSET ( 0x000003fcU )
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_OFFSET ( 0x00000400U )
#define PMA_RXWORD_MSG_TAPS_SET_CTRL_OFFSET ( 0x00000404U )
#define PMA_RXWORD_MSG_RX_GEARBOX_CTRL_OFFSET ( 0x00000408U )
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_4_OFFSET ( 0x0000040cU )
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_5_OFFSET ( 0x00000410U )
#define PMA_RXWORD_MSG_VREF_CTRL_1_OFFSET ( 0x00000414U )
#define PMA_RXWORD_MSG_VREF_CTRL_2_OFFSET ( 0x00000418U )
#define PMA_RXWORD_MSG_VREF_CTRL_3_OFFSET ( 0x0000041cU )
#define PMA_RXWORD_MSG_VREF_CTRL_4_OFFSET ( 0x00000420U )
#define PMA_RXWORD_MSG_VREF_CTRL_5_OFFSET ( 0x00000424U )
#define PMA_RXWORD_MSG_VREF_CTRL_6_OFFSET ( 0x00000428U )
#define PMA_RXWORD_MSG_VREF_STAT_0_OFFSET ( 0x00000430U )
#define PMA_RXWORD_MSG_VGA_CTRL_6_OFFSET ( 0x00000434U )
#define PMA_RXWORD_MSG_VGA_CTRL_5_OFFSET ( 0x00000438U )
#define PMA_RXWORD_MSG_VGA_CTRL_4_OFFSET ( 0x0000043cU )
#define PMA_RXWORD_MSG_VGA_CTRL_0_OFFSET ( 0x00000440U )
#define PMA_RXWORD_MSG_VGA_CTRL_1_OFFSET ( 0x00000444U )
#define PMA_RXWORD_MSG_VGA_CTRL_2_OFFSET ( 0x00000448U )
#define PMA_RXWORD_MSG_VGA_CTRL_3_OFFSET ( 0x0000044cU )
#define PMA_RXWORD_MSG_VGA_STAT_0_OFFSET ( 0x00000450U )
#define PMA_RXWORD_MSG_JPP_CTRL_1_OFFSET ( 0x00000454U )
#define PMA_RXWORD_MSG_JPP_CTRL_2_OFFSET ( 0x00000458U )
#define PMA_RXWORD_MSG_FFE_CTRL_0_OFFSET ( 0x00000460U )
#define PMA_RXWORD_MSG_FFE_CTRL_1_OFFSET ( 0x00000464U )
#define PMA_RXWORD_MSG_FFE_CTRL_2_OFFSET ( 0x00000468U )
#define PMA_RXWORD_MSG_FFE_CTRL_3_OFFSET ( 0x0000046cU )
#define PMA_RXWORD_MSG_FFE_CTRL_4_OFFSET ( 0x00000470U )
#define PMA_RXWORD_MSG_FFE_CTRL_5_OFFSET ( 0x00000474U )
#define PMA_RXWORD_MSG_FFE_STAT_0_OFFSET ( 0x0000047cU )
#define PMA_RXWORD_MSG_HIST_CTRL_0_OFFSET ( 0x00000490U )
#define PMA_RXWORD_MSG_HIST_CTRL_1_OFFSET ( 0x00000494U )
#define PMA_RXWORD_MSG_HIST_CTRL_2_OFFSET ( 0x00000498U )
#define PMA_RXWORD_MSG_HIST_CTRL_3_OFFSET ( 0x0000049cU )
#define PMA_RXWORD_MSG_HIST_CTRL_4_OFFSET ( 0x000004a0U )
#define PMA_RXWORD_MSG_HIST_CTRL_5_OFFSET ( 0x000004a4U )
#define PMA_RXWORD_MSG_HIST_CTRL_6_OFFSET ( 0x000004a8U )
#define PMA_RXWORD_MSG_HIST_CTRL_7_OFFSET ( 0x000004acU )
#define PMA_RXWORD_MSG_HIST_CTRL_8_OFFSET ( 0x000004b0U )
#define PMA_RXWORD_MSG_HIST_CTRL_9_OFFSET ( 0x000004b4U )
#define PMA_RXWORD_MSG_HIST_CTRL_10_OFFSET ( 0x000004b8U )
#define PMA_RXWORD_MSG_HIST_CTRL_11_OFFSET ( 0x000004bcU )
#define PMA_RXWORD_MSG_HIST_CTRL_12_OFFSET ( 0x000004c0U )
#define PMA_RXWORD_MSG_HIST_CTRL_13_OFFSET ( 0x000004c4U )
#define PMA_RXWORD_MSG_HIST_STAT_0_OFFSET ( 0x000004c8U )
#define PMA_RXWORD_MSG_HIST_STAT_1_OFFSET ( 0x000004ccU )
#define PMA_RXWORD_MSG_HIST_STAT_2_OFFSET ( 0x000004d0U )
#define PMA_RXWORD_MSG_HIST_STAT_3_OFFSET ( 0x000004d4U )
#define PMA_RXWORD_MSG_HIST_STAT_4_OFFSET ( 0x000004d8U )
#define PMA_RXWORD_MSG_HIST_STAT_5_OFFSET ( 0x000004e0U )
#define PMA_RXWORD_MSG_HIST_STAT_6_OFFSET ( 0x000004e4U )
#define PMA_RXWORD_MSG_HIST_STAT_7_OFFSET ( 0x000004e8U )
#define PMA_RXWORD_MSG_HIST_STAT_8_OFFSET ( 0x000004ecU )
#define PMA_RXWORD_MSG_HIST_STAT_9_OFFSET ( 0x000004f0U )
#define PMA_RXWORD_MSG_HIST_STAT_10_OFFSET ( 0x000004f4U )
#define PMA_RXWORD_MSG_HIST_STAT_11_OFFSET ( 0x000004f8U )
#define PMA_RXWORD_MSG_HIST_STAT_12_OFFSET ( 0x000004fcU )
#define PMA_RXWORD_MSG_HIST_STAT_13_OFFSET ( 0x00000500U )
#define PMA_RXWORD_MSG_HIST_STAT_14_OFFSET ( 0x00000510U )
#define PMA_RXWORD_MSG_HIST_STAT_15_OFFSET ( 0x00000514U )
#define PMA_RXWORD_MSG_OPS_CTRL_1_OFFSET ( 0x00000518U )
#define PMA_RXWORD_MSG_OPS_CTRL_2_OFFSET ( 0x0000051cU )
#define PMA_RXWORD_MSG_OPS_CTRL_3_OFFSET ( 0x00000520U )
#define PMA_RXWORD_MSG_OPS_CTRL_4_OFFSET ( 0x00000524U )
#define PMA_RXWORD_MSG_OPS_STAT_1_OFFSET ( 0x0000052cU )
#define PMA_RXWORD_MSG_OPS_STAT_2_OFFSET ( 0x00000534U )
#define PMA_RXWORD_MSG_ADCVREF_CTRL_1_OFFSET ( 0x00000538U )
#define PMA_RXWORD_MSG_ADCVREF_CTRL_2_OFFSET ( 0x0000053cU )
#define PMA_RXWORD_MSG_ADCVREF_CTRL_3_OFFSET ( 0x00000540U )
#define PMA_RXWORD_MSG_ADCVREF_CTRL_4_OFFSET ( 0x00000544U )
#define PMA_RXWORD_MSG_ADCVREF_CTRL_5_OFFSET ( 0x00000548U )
#define PMA_RXWORD_MSG_ADCVREF_CTRL_6_OFFSET ( 0x0000054cU )
#define PMA_RXWORD_MSG_ADCVREF_STAT_0_OFFSET ( 0x00000550U )
#define PMA_RXWORD_MSG_AFFE_CTRL_0_OFFSET ( 0x00000560U )
#define PMA_RXWORD_MSG_AFFE_CTRL_1_OFFSET ( 0x00000564U )
#define PMA_RXWORD_MSG_AFFE_CTRL_2_OFFSET ( 0x00000568U )
#define PMA_RXWORD_MSG_AFFE_CTRL_3_OFFSET ( 0x0000056cU )
#define PMA_RXWORD_MSG_AFFE_STAT_0_OFFSET ( 0x00000570U )
#define PMA_RXWORD_MSG_OFC_CTRL_0_OFFSET ( 0x0000057cU )
#define PMA_RXWORD_MSG_OFC_CTRL_1A_OFFSET ( 0x00000580U )
#define PMA_RXWORD_MSG_OFC_CTRL_1B_OFFSET ( 0x00000584U )
#define PMA_RXWORD_MSG_OFC_CTRL_2_OFFSET ( 0x00000588U )
#define PMA_RXWORD_MSG_OFC_CTRL_3_OFFSET ( 0x0000058cU )
#define PMA_RXWORD_MSG_OFC_STAT_0_OFFSET ( 0x00000590U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_0_OFFSET ( 0x00000594U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_1_OFFSET ( 0x00000598U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_2_OFFSET ( 0x0000059cU )
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_3_OFFSET ( 0x000005a0U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_4_OFFSET ( 0x000005a4U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_5_OFFSET ( 0x000005a8U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_0_OFFSET ( 0x000005acU )
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_1_OFFSET ( 0x000005b0U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_2_OFFSET ( 0x000005b4U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_3_OFFSET ( 0x000005b8U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_4_OFFSET ( 0x000005bcU )
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_5_OFFSET ( 0x000005c0U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_0_OFFSET ( 0x000005c4U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_1_OFFSET ( 0x000005c8U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_2_OFFSET ( 0x000005ccU )
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_3_OFFSET ( 0x000005d0U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_4_OFFSET ( 0x000005d4U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_5_OFFSET ( 0x000005d8U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_0_OFFSET ( 0x000005dcU )
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_1_OFFSET ( 0x000005e0U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_2_OFFSET ( 0x000005e4U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_3_OFFSET ( 0x000005e8U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_4_OFFSET ( 0x000005ecU )
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_5_OFFSET ( 0x000005f0U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_0_OFFSET ( 0x000005f4U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_1_OFFSET ( 0x000005f8U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_2_OFFSET ( 0x000005fcU )
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_3_OFFSET ( 0x00000600U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_4_OFFSET ( 0x00000604U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_5_OFFSET ( 0x00000608U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_0_OFFSET ( 0x0000060cU )
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_1_OFFSET ( 0x00000610U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_2_OFFSET ( 0x00000614U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_3_OFFSET ( 0x00000618U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_4_OFFSET ( 0x0000061cU )
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_5_OFFSET ( 0x00000620U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_0_OFFSET ( 0x00000624U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_1_OFFSET ( 0x00000628U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_2_OFFSET ( 0x0000062cU )
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_3_OFFSET ( 0x00000630U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_4_OFFSET ( 0x00000634U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_5_OFFSET ( 0x00000638U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_0_OFFSET ( 0x0000063cU )
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_1_OFFSET ( 0x00000640U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_2_OFFSET ( 0x00000644U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_3_OFFSET ( 0x00000648U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_4_OFFSET ( 0x0000064cU )
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_5_OFFSET ( 0x00000650U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_0_OFFSET ( 0x00000654U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_1_OFFSET ( 0x00000658U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_2_OFFSET ( 0x0000065cU )
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_3_OFFSET ( 0x00000660U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_4_OFFSET ( 0x00000664U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_5_OFFSET ( 0x00000668U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_0_OFFSET ( 0x0000066cU )
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_1_OFFSET ( 0x00000670U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_2_OFFSET ( 0x00000674U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_3_OFFSET ( 0x00000678U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_4_OFFSET ( 0x0000067cU )
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_5_OFFSET ( 0x00000680U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_0_OFFSET ( 0x00000684U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_1_OFFSET ( 0x00000688U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_2_OFFSET ( 0x0000068cU )
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_3_OFFSET ( 0x00000690U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_4_OFFSET ( 0x00000694U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_5_OFFSET ( 0x00000698U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_0_OFFSET ( 0x0000069cU )
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_1_OFFSET ( 0x000006a0U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_2_OFFSET ( 0x000006a4U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_3_OFFSET ( 0x000006a8U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_4_OFFSET ( 0x000006acU )
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_5_OFFSET ( 0x000006b0U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_0_OFFSET ( 0x000006b4U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_1_OFFSET ( 0x000006b8U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_2_OFFSET ( 0x000006bcU )
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_3_OFFSET ( 0x000006c0U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_4_OFFSET ( 0x000006c4U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_5_OFFSET ( 0x000006c8U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_0_OFFSET ( 0x000006ccU )
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_1_OFFSET ( 0x000006d0U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_2_OFFSET ( 0x000006d4U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_3_OFFSET ( 0x000006d8U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_4_OFFSET ( 0x000006dcU )
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_5_OFFSET ( 0x000006e0U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_0_OFFSET ( 0x000006e4U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_1_OFFSET ( 0x000006e8U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_2_OFFSET ( 0x000006ecU )
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_3_OFFSET ( 0x000006f0U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_4_OFFSET ( 0x000006f4U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_5_OFFSET ( 0x000006f8U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_0_OFFSET ( 0x000006fcU )
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_1_OFFSET ( 0x00000700U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_2_OFFSET ( 0x00000704U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_3_OFFSET ( 0x00000708U )
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_4_OFFSET ( 0x0000070cU )
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_5_OFFSET ( 0x00000710U )
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET0_0_OFFSET ( 0x00000714U )
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET1_0_OFFSET ( 0x00000718U )
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET2_0_OFFSET ( 0x0000071cU )
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET3_0_OFFSET ( 0x00000720U )
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET4_0_OFFSET ( 0x00000724U )
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET5_0_OFFSET ( 0x00000728U )
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET6_0_OFFSET ( 0x0000072cU )
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET7_0_OFFSET ( 0x00000730U )
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET8_0_OFFSET ( 0x00000734U )
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET9_0_OFFSET ( 0x00000738U )
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET10_0_OFFSET ( 0x0000073cU )
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET11_0_OFFSET ( 0x00000740U )
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET12_0_OFFSET ( 0x00000744U )
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET13_0_OFFSET ( 0x00000748U )
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET14_0_OFFSET ( 0x0000074cU )
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET15_0_OFFSET ( 0x00000750U )
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET0_0_OFFSET ( 0x00000754U )
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET1_0_OFFSET ( 0x00000758U )
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET2_0_OFFSET ( 0x0000075cU )
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET3_0_OFFSET ( 0x00000760U )
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET4_0_OFFSET ( 0x00000764U )
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET5_0_OFFSET ( 0x00000768U )
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET6_0_OFFSET ( 0x0000076cU )
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET7_0_OFFSET ( 0x00000770U )
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET8_0_OFFSET ( 0x00000774U )
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET9_0_OFFSET ( 0x00000778U )
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET10_0_OFFSET ( 0x0000077cU )
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET11_0_OFFSET ( 0x00000780U )
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET12_0_OFFSET ( 0x00000784U )
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET13_0_OFFSET ( 0x00000788U )
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET14_0_OFFSET ( 0x0000078cU )
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET15_0_OFFSET ( 0x00000790U )
#define PMA_RXWORD_MSG_AFFE_LMS_SET0_OFFSET ( 0x00000794U )
#define PMA_RXWORD_MSG_AFFE_LMS_SET1_OFFSET ( 0x00000798U )
#define PMA_RXWORD_MSG_AFFE_LMS_SET2_OFFSET ( 0x0000079cU )
#define PMA_RXWORD_MSG_AFFE_LMS_SET3_OFFSET ( 0x000007a0U )
#define PMA_RXWORD_MSG_AFFE_LMS_SET4_OFFSET ( 0x000007a4U )
#define PMA_RXWORD_MSG_AFFE_LMS_SET5_OFFSET ( 0x000007a8U )
#define PMA_RXWORD_MSG_AFFE_LMS_SET6_OFFSET ( 0x000007acU )
#define PMA_RXWORD_MSG_AFFE_LMS_SET7_OFFSET ( 0x000007b0U )
#define PMA_RXWORD_MSG_AFFE_LMS_SET8_OFFSET ( 0x000007b4U )
#define PMA_RXWORD_MSG_AFFE_LMS_SET9_OFFSET ( 0x000007b8U )
#define PMA_RXWORD_MSG_AFFE_LMS_SET10_OFFSET ( 0x000007bcU )
#define PMA_RXWORD_MSG_AFFE_LMS_SET11_OFFSET ( 0x000007c0U )
#define PMA_RXWORD_MSG_AFFE_LMS_SET12_OFFSET ( 0x000007c4U )
#define PMA_RXWORD_MSG_AFFE_LMS_SET13_OFFSET ( 0x000007c8U )
#define PMA_RXWORD_MSG_AFFE_LMS_SET14_OFFSET ( 0x000007ccU )
#define PMA_RXWORD_MSG_AFFE_LMS_SET15_OFFSET ( 0x000007d0U )
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET0_OFFSET ( 0x000007d4U )
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET1_OFFSET ( 0x000007d8U )
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET2_OFFSET ( 0x000007dcU )
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET3_OFFSET ( 0x000007e0U )
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET4_OFFSET ( 0x000007e4U )
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET5_OFFSET ( 0x000007e8U )
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET6_OFFSET ( 0x000007ecU )
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET7_OFFSET ( 0x000007f0U )
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET8_OFFSET ( 0x000007f4U )
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET9_OFFSET ( 0x000007f8U )
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET10_OFFSET ( 0x000007fcU )
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET11_OFFSET ( 0x00000800U )
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET12_OFFSET ( 0x00000804U )
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET13_OFFSET ( 0x00000808U )
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET14_OFFSET ( 0x0000080cU )
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET15_OFFSET ( 0x00000810U )
#define PMA_RXWORD_MSG_SATURATION_STAT_0_OFFSET ( 0x00000814U )
#define PMA_RXWORD_MSG_SATURATION_STAT_1_OFFSET ( 0x00000818U )
#define PMA_RXWORD_MSG_SATURATION_STAT_3_OFFSET ( 0x00000820U )
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_OFFSET ( 0x00000824U )
#define PMA_RXWORD_MSG_ZEROAVG_STAT_1_OFFSET ( 0x00000828U )
#define PMA_RXWORD_MSG_ZEROAVG_STAT_3_OFFSET ( 0x00000830U )
#define PMA_RXWORD_MSG_ADCOFC_CTRL_0_OFFSET ( 0x00000834U )
#define PMA_RXWORD_MSG_ADCOFC_CTRL_1_OFFSET ( 0x00000838U )
#define PMA_RXWORD_MSG_ADCOFC_CTRL_2_OFFSET ( 0x0000083cU )
#define PMA_RXWORD_MSG_ADCOFC_CTRL_3_OFFSET ( 0x00000840U )
#define PMA_RXWORD_MSG_ADCOFC_STAT_0_OFFSET ( 0x00000844U )
#define PMA_RXWORD_MSG_EDG_SLICE_CTRL_0_OFFSET ( 0x00000848U )
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET0_CTRL_OFFSET ( 0x0000084cU )
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET1_CTRL_OFFSET ( 0x00000850U )
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET2_CTRL_OFFSET ( 0x00000854U )
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET3_CTRL_OFFSET ( 0x00000858U )
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET4_CTRL_OFFSET ( 0x0000085cU )
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET5_CTRL_OFFSET ( 0x00000860U )
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET6_CTRL_OFFSET ( 0x00000864U )
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET7_CTRL_OFFSET ( 0x00000868U )
#define PMA_RXWORD_MSG_EDGVREF_CTRL_1_OFFSET ( 0x0000086cU )
#define PMA_RXWORD_MSG_EDGVREF_CTRL_2_OFFSET ( 0x00000870U )
#define PMA_RXWORD_MSG_EDGVREF_CTRL_3_OFFSET ( 0x00000874U )
#define PMA_RXWORD_MSG_EDGVREF_CTRL_4_OFFSET ( 0x00000878U )
#define PMA_RXWORD_MSG_EDGVREF_CTRL_5_OFFSET ( 0x0000087cU )
#define PMA_RXWORD_MSG_EDGVREF_CTRL_6_OFFSET ( 0x00000880U )
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET0_OFFSET ( 0x00000884U )
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET1_OFFSET ( 0x00000888U )
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET2_OFFSET ( 0x0000088cU )
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET3_OFFSET ( 0x00000890U )
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET4_OFFSET ( 0x00000894U )
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET5_OFFSET ( 0x00000898U )
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET6_OFFSET ( 0x0000089cU )
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET7_OFFSET ( 0x000008a0U )
#define PMA_RXWORD_MSG_JPP_CTRL_0_OFFSET ( 0x000008a4U )
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_0_OFFSET ( 0x000008a8U )
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_1_OFFSET ( 0x000008acU )
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_2_OFFSET ( 0x000008b0U )
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_3_OFFSET ( 0x000008b4U )
#define PMA_RXWORD_MSG_DFE_LMS_STAT_0_OFFSET ( 0x000008b8U )
#define PMA_RXWORD_MSG_DFE_LMS_SET0TO3_OFFSET ( 0x000008bcU )
#define PMA_RXWORD_MSG_DFE_LMS_SET4TO7_OFFSET ( 0x000008c0U )
#define PMA_RXWORD_MSG_DFE_LMS_SET8TO11_OFFSET ( 0x000008c4U )
#define PMA_RXWORD_MSG_DFE_LMS_SET12TO15_OFFSET ( 0x000008c8U )
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET0TO3_OFFSET ( 0x000008ccU )
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET4TO7_OFFSET ( 0x000008d0U )
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET8TO11_OFFSET ( 0x000008d4U )
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET12TO15_OFFSET ( 0x000008d8U )
#define PMA_RXWORD_MSG_DFE_CTRL_0_OFFSET ( 0x000008dcU )
#define PMA_RXWORD_MSG_RX_SARARRAY_VALID_0_OFFSET ( 0x000008e0U )
#define PMA_RXWORD_MSG_RX_SARARRAY_VALID_1_OFFSET ( 0x000008e4U )
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET0TO3_OFFSET ( 0x000008e8U )
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET4TO7_OFFSET ( 0x000008ecU )
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET8TO11_OFFSET ( 0x000008f0U )
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET12TO15_OFFSET ( 0x000008f4U )
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET0_CTRL_OFFSET ( 0x000008f8U )
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET1_CTRL_OFFSET ( 0x000008fcU )
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET2_CTRL_OFFSET ( 0x00000900U )
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET3_CTRL_OFFSET ( 0x00000904U )
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET4_CTRL_OFFSET ( 0x0000090cU )
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET5_CTRL_OFFSET ( 0x00000910U )
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET6_CTRL_OFFSET ( 0x00000914U )
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET7_CTRL_OFFSET ( 0x00000918U )
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET8_CTRL_OFFSET ( 0x0000091cU )
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET9_CTRL_OFFSET ( 0x00000920U )
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET10_CTRL_OFFSET ( 0x00000924U )
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET11_CTRL_OFFSET ( 0x00000928U )
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET12_CTRL_OFFSET ( 0x0000092cU )
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET13_CTRL_OFFSET ( 0x00000930U )
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET14_CTRL_OFFSET ( 0x00000934U )
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET15_CTRL_OFFSET ( 0x00000938U )
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET0_OFFSET ( 0x00000940U )
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET0_OFFSET ( 0x00000944U )
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET1_OFFSET ( 0x00000948U )
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET1_OFFSET ( 0x0000094cU )
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET2_OFFSET ( 0x00000950U )
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET2_OFFSET ( 0x00000954U )
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET3_OFFSET ( 0x00000958U )
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET3_OFFSET ( 0x0000095cU )
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET4_OFFSET ( 0x00000960U )
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET4_OFFSET ( 0x00000964U )
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET5_OFFSET ( 0x00000968U )
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET5_OFFSET ( 0x0000096cU )
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET6_OFFSET ( 0x00000970U )
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET6_OFFSET ( 0x00000974U )
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET7_OFFSET ( 0x00000978U )
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET7_OFFSET ( 0x0000097cU )
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET8_OFFSET ( 0x00000980U )
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET8_OFFSET ( 0x00000984U )
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET9_OFFSET ( 0x00000988U )
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET9_OFFSET ( 0x0000098cU )
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET10_OFFSET ( 0x00000990U )
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET10_OFFSET ( 0x00000994U )
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET11_OFFSET ( 0x00000998U )
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET11_OFFSET ( 0x0000099cU )
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET12_OFFSET ( 0x000009a0U )
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET12_OFFSET ( 0x000009a4U )
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET13_OFFSET ( 0x000009a8U )
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET13_OFFSET ( 0x000009acU )
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET14_OFFSET ( 0x000009b0U )
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET14_OFFSET ( 0x000009b4U )
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET15_OFFSET ( 0x000009b8U )
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET15_OFFSET ( 0x000009c0U )
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET0TO3_OFFSET ( 0x000009c8U )
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET4TO7_OFFSET ( 0x000009ccU )
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET8TO11_OFFSET ( 0x000009d0U )
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET12TO15_OFFSET ( 0x000009d4U )
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_0_OFFSET ( 0x000009d8U )
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_1_OFFSET ( 0x000009dcU )
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_2_OFFSET ( 0x000009e0U )
#define PMA_RXWORD_MSG_LMS_AVG_UPDN_STAT_0_OFFSET ( 0x000009e4U )
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_1_OFFSET ( 0x000009e8U )
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_2_OFFSET ( 0x000009ecU )
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_3_OFFSET ( 0x000009f0U )
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_4_OFFSET ( 0x000009f4U )
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_5_OFFSET ( 0x000009f8U )
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_6_OFFSET ( 0x000009fcU )
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_0_OFFSET ( 0x00000a04U )
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_1A_OFFSET ( 0x00000a08U )
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_1B_OFFSET ( 0x00000a0cU )
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_2_OFFSET ( 0x00000a10U )
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_3_OFFSET ( 0x00000a14U )
#define PMA_RXWORD_MSG_CDR_FFE_OFC_STAT_0_OFFSET ( 0x00000a18U )
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET0TO3_FRAC_OFFSET ( 0x00000a1cU )
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET4TO7_FRAC_OFFSET ( 0x00000a20U )
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET8TO11_FRAC_OFFSET ( 0x00000a24U )
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET12TO15_FRAC_OFFSET ( 0x00000a28U )
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET0TO3_FRAC_OFFSET ( 0x00000a2cU )
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET4TO7_FRAC_OFFSET ( 0x00000a30U )
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET8TO11_FRAC_OFFSET ( 0x00000a34U )
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET12TO15_FRAC_OFFSET ( 0x00000a38U )
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET0_0_OFFSET ( 0x00000a3cU )
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET1_0_OFFSET ( 0x00000a40U )
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET2_0_OFFSET ( 0x00000a44U )
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET3_0_OFFSET ( 0x00000a48U )
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET4_0_OFFSET ( 0x00000a4cU )
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET5_0_OFFSET ( 0x00000a50U )
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET6_0_OFFSET ( 0x00000a54U )
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET7_0_OFFSET ( 0x00000a58U )
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET8_0_OFFSET ( 0x00000a5cU )
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET9_0_OFFSET ( 0x00000a60U )
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET10_0_OFFSET ( 0x00000a64U )
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET11_0_OFFSET ( 0x00000a68U )
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET12_0_OFFSET ( 0x00000a6cU )
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET13_0_OFFSET ( 0x00000a70U )
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET14_0_OFFSET ( 0x00000a74U )
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET15_0_OFFSET ( 0x00000a78U )
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_3_OFFSET ( 0x00000a7cU )
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET0TO3_OFFSET ( 0x00000a80U )
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET4TO7_OFFSET ( 0x00000a84U )
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET8TO11_OFFSET ( 0x00000a88U )
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET12TO15_OFFSET ( 0x00000a8cU )
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET0TO3_OFFSET ( 0x00000a90U )
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET4TO7_OFFSET ( 0x00000a94U )
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET8TO11_OFFSET ( 0x00000a98U )
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET12TO15_OFFSET ( 0x00000a9cU )
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET0TO3_OFFSET ( 0x00000aa0U )
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET4TO7_OFFSET ( 0x00000aa4U )
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET8TO11_OFFSET ( 0x00000aa8U )
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET12TO15_OFFSET ( 0x00000aacU )
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET0TO3_OFFSET ( 0x00000ab0U )
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET4TO7_OFFSET ( 0x00000ab4U )
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET8TO11_OFFSET ( 0x00000ab8U )
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET12TO15_OFFSET ( 0x00000abcU )
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET0TO3_OFFSET ( 0x00000ac0U )
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET4TO7_OFFSET ( 0x00000ac4U )
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET8TO11_OFFSET ( 0x00000ac8U )
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET12TO15_OFFSET ( 0x00000accU )
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET0TO3_FRAC_OFFSET ( 0x00000ad0U )
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET4TO7_FRAC_OFFSET ( 0x00000ad4U )
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET8TO11_FRAC_OFFSET ( 0x00000ad8U )
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET12TO15_FRAC_OFFSET ( 0x00000adcU )
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET0TO3_FRAC_OFFSET ( 0x00000ae0U )
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET4TO7_FRAC_OFFSET ( 0x00000ae4U )
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET8TO11_FRAC_OFFSET ( 0x00000ae8U )
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET12TO15_FRAC_OFFSET ( 0x00000aecU )
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET0TO3_FRAC_OFFSET ( 0x00000af0U )
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET4TO7_FRAC_OFFSET ( 0x00000af4U )
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET8TO11_FRAC_OFFSET ( 0x00000af8U )
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET12TO15_FRAC_OFFSET ( 0x00000afcU )
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET0TO3_FRAC_OFFSET ( 0x00000b00U )
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET4TO7_FRAC_OFFSET ( 0x00000b04U )
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET8TO11_FRAC_OFFSET ( 0x00000b08U )
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET12TO15_FRAC_OFFSET ( 0x00000b0cU )
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET0TO3_FRAC_OFFSET ( 0x00000b10U )
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET4TO7_FRAC_OFFSET ( 0x00000b14U )
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET8TO11_FRAC_OFFSET ( 0x00000b18U )
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET12TO15_FRAC_OFFSET ( 0x00000b1cU )
#define PMA_RXWORD_MSG_SATURATION_STAT_4_OFFSET ( 0x00000b20U )
#define PMA_RXWORD_MSG_AFFE_IF_CTRL_0_OFFSET ( 0x00000b24U )
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_0TO3_OFFSET ( 0x00000b28U )
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_4TO7_OFFSET ( 0x00000b2cU )
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_8TO11_OFFSET ( 0x00000b30U )
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_12TO15_OFFSET ( 0x00000b34U )
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_16TO19_OFFSET ( 0x00000b38U )
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_20TO23_OFFSET ( 0x00000b3cU )
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_24TO27_OFFSET ( 0x00000b40U )
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_28TO31_OFFSET ( 0x00000b44U )
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_32TO35_OFFSET ( 0x00000b48U )
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_36TO39_OFFSET ( 0x00000b4cU )
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_40TO43_OFFSET ( 0x00000b50U )
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_44TO47_OFFSET ( 0x00000b54U )
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_48TO51_OFFSET ( 0x00000b58U )
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_52TO55_OFFSET ( 0x00000b5cU )
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_56TO59_OFFSET ( 0x00000b60U )
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_60TO63_OFFSET ( 0x00000b64U )
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_0TO3_OFFSET ( 0x00000b68U )
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_4TO7_OFFSET ( 0x00000b6cU )
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_8TO11_OFFSET ( 0x00000b70U )
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_12TO15_OFFSET ( 0x00000b74U )
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_16TO19_OFFSET ( 0x00000b78U )
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_20TO23_OFFSET ( 0x00000b7cU )
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_24TO27_OFFSET ( 0x00000b80U )
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_28TO31_OFFSET ( 0x00000b84U )
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_32TO35_OFFSET ( 0x00000b88U )
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_36TO39_OFFSET ( 0x00000b8cU )
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_40TO43_OFFSET ( 0x00000b90U )
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_44TO47_OFFSET ( 0x00000b94U )
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_48TO51_OFFSET ( 0x00000b98U )
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_52TO55_OFFSET ( 0x00000b9cU )
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_56TO59_OFFSET ( 0x00000ba0U )
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_60TO63_OFFSET ( 0x00000ba4U )
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_0TO3_OFFSET ( 0x00000ba8U )
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_4TO7_OFFSET ( 0x00000bacU )
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_8TO11_OFFSET ( 0x00000bb0U )
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_12TO15_OFFSET ( 0x00000bb4U )
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_16TO19_OFFSET ( 0x00000bb8U )
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_20TO23_OFFSET ( 0x00000bbcU )
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_24TO27_OFFSET ( 0x00000bc0U )
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_28TO31_OFFSET ( 0x00000bc4U )
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_32TO35_OFFSET ( 0x00000bc8U )
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_36TO39_OFFSET ( 0x00000bccU )
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_40TO43_OFFSET ( 0x00000bd0U )
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_44TO47_OFFSET ( 0x00000bd4U )
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_48TO51_OFFSET ( 0x00000bd8U )
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_52TO55_OFFSET ( 0x00000bdcU )
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_56TO59_OFFSET ( 0x00000be0U )
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_60TO63_OFFSET ( 0x00000be4U )
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_0TO3_OFFSET ( 0x00000be8U )
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_4TO7_OFFSET ( 0x00000becU )
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_8TO11_OFFSET ( 0x00000bf0U )
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_12TO15_OFFSET ( 0x00000bf4U )
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_16TO19_OFFSET ( 0x00000bf8U )
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_20TO23_OFFSET ( 0x00000bfcU )
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_24TO27_OFFSET ( 0x00000c00U )
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_28TO31_OFFSET ( 0x00000c04U )
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_32TO35_OFFSET ( 0x00000c08U )
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_36TO39_OFFSET ( 0x00000c0cU )
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_40TO43_OFFSET ( 0x00000c10U )
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_44TO47_OFFSET ( 0x00000c14U )
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_48TO51_OFFSET ( 0x00000c18U )
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_52TO55_OFFSET ( 0x00000c1cU )
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_56TO59_OFFSET ( 0x00000c20U )
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_60TO63_OFFSET ( 0x00000c24U )
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_0TO3_OFFSET ( 0x00000c28U )
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_4TO7_OFFSET ( 0x00000c2cU )
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_8TO11_OFFSET ( 0x00000c30U )
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_12TO15_OFFSET ( 0x00000c34U )
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_16TO19_OFFSET ( 0x00000c38U )
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_20TO23_OFFSET ( 0x00000c3cU )
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_24TO27_OFFSET ( 0x00000c40U )
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_28TO31_OFFSET ( 0x00000c44U )
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_32TO35_OFFSET ( 0x00000c48U )
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_36TO39_OFFSET ( 0x00000c4cU )
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_40TO43_OFFSET ( 0x00000c50U )
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_44TO47_OFFSET ( 0x00000c54U )
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_48TO51_OFFSET ( 0x00000c58U )
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_52TO55_OFFSET ( 0x00000c5cU )
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_56TO59_OFFSET ( 0x00000c60U )
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_60TO63_OFFSET ( 0x00000c64U )
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_0TO3_OFFSET ( 0x00000c68U )
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_4TO7_OFFSET ( 0x00000c6cU )
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_8TO11_OFFSET ( 0x00000c70U )
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_12TO15_OFFSET ( 0x00000c74U )
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_16TO19_OFFSET ( 0x00000c78U )
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_20TO23_OFFSET ( 0x00000c7cU )
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_24TO27_OFFSET ( 0x00000c80U )
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_28TO31_OFFSET ( 0x00000c84U )
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_32TO35_OFFSET ( 0x00000c88U )
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_36TO39_OFFSET ( 0x00000c8cU )
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_40TO43_OFFSET ( 0x00000c90U )
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_44TO47_OFFSET ( 0x00000c94U )
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_48TO51_OFFSET ( 0x00000c98U )
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_52TO55_OFFSET ( 0x00000c9cU )
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_56TO59_OFFSET ( 0x00000ca0U )
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_60TO63_OFFSET ( 0x00000ca4U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_0TO3_OFFSET ( 0x00000ca8U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_4TO7_OFFSET ( 0x00000cacU )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_8TO11_OFFSET ( 0x00000cb0U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_12TO15_OFFSET ( 0x00000cb4U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_16TO19_OFFSET ( 0x00000cb8U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_20TO23_OFFSET ( 0x00000cbcU )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_24TO27_OFFSET ( 0x00000cc0U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_28TO31_OFFSET ( 0x00000cc4U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_32TO35_OFFSET ( 0x00000cc8U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_36TO39_OFFSET ( 0x00000cccU )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_40TO43_OFFSET ( 0x00000cd0U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_44TO47_OFFSET ( 0x00000cd4U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_48TO51_OFFSET ( 0x00000cd8U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_52TO55_OFFSET ( 0x00000cdcU )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_56TO59_OFFSET ( 0x00000ce0U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_60TO63_OFFSET ( 0x00000ce4U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_0TO3_OFFSET ( 0x00000ce8U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_4TO7_OFFSET ( 0x00000cecU )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_8TO11_OFFSET ( 0x00000cf0U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_12TO15_OFFSET ( 0x00000cf4U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_16TO19_OFFSET ( 0x00000cf8U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_20TO23_OFFSET ( 0x00000cfcU )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_24TO27_OFFSET ( 0x00000d00U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_28TO31_OFFSET ( 0x00000d04U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_32TO35_OFFSET ( 0x00000d08U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_36TO39_OFFSET ( 0x00000d0cU )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_40TO43_OFFSET ( 0x00000d10U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_44TO47_OFFSET ( 0x00000d14U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_48TO51_OFFSET ( 0x00000d18U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_52TO55_OFFSET ( 0x00000d1cU )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_56TO59_OFFSET ( 0x00000d20U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_60TO63_OFFSET ( 0x00000d24U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_0TO3_OFFSET ( 0x00000d28U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_4TO7_OFFSET ( 0x00000d2cU )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_8TO11_OFFSET ( 0x00000d30U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_12TO15_OFFSET ( 0x00000d34U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_16TO19_OFFSET ( 0x00000d38U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_20TO23_OFFSET ( 0x00000d3cU )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_24TO27_OFFSET ( 0x00000d40U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_28TO31_OFFSET ( 0x00000d44U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_32TO35_OFFSET ( 0x00000d48U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_36TO39_OFFSET ( 0x00000d4cU )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_40TO43_OFFSET ( 0x00000d50U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_44TO47_OFFSET ( 0x00000d54U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_48TO51_OFFSET ( 0x00000d58U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_52TO55_OFFSET ( 0x00000d5cU )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_56TO59_OFFSET ( 0x00000d60U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_60TO63_OFFSET ( 0x00000d64U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_0TO3_OFFSET ( 0x00000d68U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_4TO7_OFFSET ( 0x00000d6cU )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_8TO11_OFFSET ( 0x00000d70U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_12TO15_OFFSET ( 0x00000d74U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_16TO19_OFFSET ( 0x00000d78U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_20TO23_OFFSET ( 0x00000d7cU )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_24TO27_OFFSET ( 0x00000d80U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_28TO31_OFFSET ( 0x00000d84U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_32TO35_OFFSET ( 0x00000d88U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_36TO39_OFFSET ( 0x00000d8cU )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_40TO43_OFFSET ( 0x00000d90U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_44TO47_OFFSET ( 0x00000d94U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_48TO51_OFFSET ( 0x00000d98U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_52TO55_OFFSET ( 0x00000d9cU )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_56TO59_OFFSET ( 0x00000da0U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_60TO63_OFFSET ( 0x00000da4U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_0TO3_OFFSET ( 0x00000da8U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_4TO7_OFFSET ( 0x00000dacU )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_8TO11_OFFSET ( 0x00000db0U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_12TO15_OFFSET ( 0x00000db4U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_16TO19_OFFSET ( 0x00000db8U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_20TO23_OFFSET ( 0x00000dbcU )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_24TO27_OFFSET ( 0x00000dc0U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_28TO31_OFFSET ( 0x00000dc4U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_32TO35_OFFSET ( 0x00000dc8U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_36TO39_OFFSET ( 0x00000dccU )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_40TO43_OFFSET ( 0x00000dd0U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_44TO47_OFFSET ( 0x00000dd4U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_48TO51_OFFSET ( 0x00000dd8U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_52TO55_OFFSET ( 0x00000ddcU )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_56TO59_OFFSET ( 0x00000de0U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_60TO63_OFFSET ( 0x00000de4U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_0TO3_OFFSET ( 0x00000de8U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_4TO7_OFFSET ( 0x00000decU )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_8TO11_OFFSET ( 0x00000df0U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_12TO15_OFFSET ( 0x00000df4U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_16TO19_OFFSET ( 0x00000df8U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_20TO23_OFFSET ( 0x00000dfcU )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_24TO27_OFFSET ( 0x00000e00U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_28TO31_OFFSET ( 0x00000e04U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_32TO35_OFFSET ( 0x00000e08U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_36TO39_OFFSET ( 0x00000e0cU )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_40TO43_OFFSET ( 0x00000e10U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_44TO47_OFFSET ( 0x00000e14U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_48TO51_OFFSET ( 0x00000e18U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_52TO55_OFFSET ( 0x00000e1cU )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_56TO59_OFFSET ( 0x00000e20U )
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_60TO63_OFFSET ( 0x00000e24U )
#define PMA_RXWORD_MSG_OFC_CTRL_4_OFFSET ( 0x00000e28U )
#define PMA_RXWORD_MSG_OFC_CTRL_5_OFFSET ( 0x00000e2cU )
#define PMA_RXWORD_MSG_OFC_CTRL_6_OFFSET ( 0x00000e30U )
#define PMA_RXWORD_MSG_OFC_CTRL_7_OFFSET ( 0x00000e34U )
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_4_OFFSET ( 0x00000e38U )
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_5_OFFSET ( 0x00000e3cU )
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_6_OFFSET ( 0x00000e40U )
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_7_OFFSET ( 0x00000e44U )
#define PMA_RXWORD_MSG_ADCOFC_CTRL_4_OFFSET ( 0x00000e48U )
#define PMA_RXWORD_MSG_ADCOFC_CTRL_5_OFFSET ( 0x00000e4cU )
#define PMA_RXWORD_MSG_ADCOFC_CTRL_6_OFFSET ( 0x00000e50U )
#define PMA_RXWORD_MSG_ADCOFC_CTRL_7_OFFSET ( 0x00000e54U )
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_OFFSET ( 0x00000ef8U )
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL2_OFFSET ( 0x00000efcU )
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL3_OFFSET ( 0x00000f00U )
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_STAT_OFFSET ( 0x00000f04U )
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_STAT_CLR_OFFSET ( 0x00000f08U )
#define PMA_RXWORD_MSG_RXWORD_RW_SPARE_0_OFFSET ( 0x00000fd8U )
#define PMA_RXWORD_MSG_RXWORD_RW_SPARE_1_OFFSET ( 0x00000fdcU )
#define PMA_RXWORD_MSG_RXWORD_RW_SPARE_2_OFFSET ( 0x00000fe0U )
#define PMA_RXWORD_MSG_RXWORD_RW_SPARE_3_OFFSET ( 0x00000fe4U )
#define PMA_RXWORD_MSG_RXWORD_RO_SPARE_0_OFFSET ( 0x00000fe8U )
#define PMA_RXWORD_MSG_RXWORD_RO_SPARE_1_OFFSET ( 0x00000fecU )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET0_0_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET0_1_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET0_2_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET0_3_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET0_4_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET1_0_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET1_1_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET1_2_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET1_3_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET1_4_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET2_0_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET2_1_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET2_2_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET2_3_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET2_4_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET3_0_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET3_1_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET3_2_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET3_3_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET3_4_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET4_0_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET4_1_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET4_2_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET4_3_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET4_4_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET5_0_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET5_1_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET5_2_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET5_3_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET5_4_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET6_0_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET6_1_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET6_2_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET6_3_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET6_4_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET7_0_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET7_1_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET7_2_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET7_3_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET7_4_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET8_0_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET8_1_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET8_2_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET8_3_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET8_4_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET9_0_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET9_1_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET9_2_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET9_3_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET9_4_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET10_0_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET10_1_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET10_2_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET10_3_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET10_4_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET11_0_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET11_1_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET11_2_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET11_3_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET11_4_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET12_0_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET12_1_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET12_2_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET12_3_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET12_4_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET13_0_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET13_1_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET13_2_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET13_3_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET13_4_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET14_0_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET14_1_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET14_2_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET14_3_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET14_4_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET15_0_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET15_1_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET15_2_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET15_3_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET15_4_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_SLICE_LVL_SET0_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_SLICE_LVL_SET1_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_SLICE_LVL_SET2_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_SLICE_LVL_SET3_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_SLICE_LVL_SET4_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET5_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_SLICE_LVL_SET5_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET6_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_SLICE_LVL_SET6_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET7_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_SLICE_LVL_SET7_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET8_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_SLICE_LVL_SET8_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET9_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_SLICE_LVL_SET9_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET10_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_SLICE_LVL_SET10_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET11_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_SLICE_LVL_SET11_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET12_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_SLICE_LVL_SET12_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET13_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_SLICE_LVL_SET13_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET14_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_SLICE_LVL_SET14_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET15_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_SLICE_LVL_SET15_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET0_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET0_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET1_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET1_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET2_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET2_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET3_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET3_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET4_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET4_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET5_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET5_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET5_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET5_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET6_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET6_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET6_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET6_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET7_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET7_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET7_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET7_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET8_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET8_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET8_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET8_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET9_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET9_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET9_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET9_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET10_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET10_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET10_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET10_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET11_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET11_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET11_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET11_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET12_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET12_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET12_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET12_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET13_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET13_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET13_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET13_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET14_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET14_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET14_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET14_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET15_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET15_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET15_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET15_OFFSET ) ))
#define PMA_RXWORD_MSG_RX_DUMP_MEM_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_RX_DUMP_MEM_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_RX_DUMP_MEM_APB_RD_DATA_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_RX_DUMP_MEM_APB_RD_DATA_OFFSET ) ))
#define PMA_RXWORD_MSG_RX_DUMP_MEM_APB_RD_EN_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_RX_DUMP_MEM_APB_RD_EN_OFFSET ) ))
#define PMA_RXWORD_MSG_RX_DUMP_MEM_APB_EN_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_RX_DUMP_MEM_APB_EN_OFFSET ) ))
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_OFFSET ) ))
#define PMA_RXWORD_MSG_ADP_MSB_LSB_SWAP_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADP_MSB_LSB_SWAP_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION1_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION2_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION3_OFFSET ) ))
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_0_OFFSET ) ))
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_1_OFFSET ) ))
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_2_OFFSET ) ))
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_3_OFFSET ) ))
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_4_OFFSET ) ))
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_6_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_6_OFFSET ) ))
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_7_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_7_OFFSET ) ))
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_8_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_8_OFFSET ) ))
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET0_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADC_SLICER_LVL_SET0_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET1_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADC_SLICER_LVL_SET1_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET2_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADC_SLICER_LVL_SET2_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET3_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADC_SLICER_LVL_SET3_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET4_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADC_SLICER_LVL_SET4_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET5_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADC_SLICER_LVL_SET5_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET6_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADC_SLICER_LVL_SET6_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET7_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADC_SLICER_LVL_SET7_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET8_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADC_SLICER_LVL_SET8_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET9_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADC_SLICER_LVL_SET9_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET10_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADC_SLICER_LVL_SET10_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET11_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADC_SLICER_LVL_SET11_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET12_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADC_SLICER_LVL_SET12_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET13_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADC_SLICER_LVL_SET13_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET14_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADC_SLICER_LVL_SET14_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET15_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADC_SLICER_LVL_SET15_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET0_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADC_ERR_LVL_SET0_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET1_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADC_ERR_LVL_SET1_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET2_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADC_ERR_LVL_SET2_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET3_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADC_ERR_LVL_SET3_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET4_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADC_ERR_LVL_SET4_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET5_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADC_ERR_LVL_SET5_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET6_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADC_ERR_LVL_SET6_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET7_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADC_ERR_LVL_SET7_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET8_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADC_ERR_LVL_SET8_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET9_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADC_ERR_LVL_SET9_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET10_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADC_ERR_LVL_SET10_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET11_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADC_ERR_LVL_SET11_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET12_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADC_ERR_LVL_SET12_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET13_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADC_ERR_LVL_SET13_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET14_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADC_ERR_LVL_SET14_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET15_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADC_ERR_LVL_SET15_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_CTRL0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_CTRL0_OFFSET ) ))
#define PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_CTRL1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_CTRL1_OFFSET ) ))
#define PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_CTRL2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_CTRL2_OFFSET ) ))
#define PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_STAT_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_STAT_OFFSET ) ))
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_RXSAR_CALASSIST_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_STAT_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_RXSAR_CALASSIST_STAT_OFFSET ) ))
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_6_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_MAIN_FSM_CTRL_6_OFFSET ) ))
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_MAIN_FSM_CTRL_0_OFFSET ) ))
#define PMA_RXWORD_MSG_MAIN_FSM_STAT_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_MAIN_FSM_STAT_0_OFFSET ) ))
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_MAIN_FSM_CTRL_1_OFFSET ) ))
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_MAIN_FSM_CTRL_2_OFFSET ) ))
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_OFFSET ) ))
#define PMA_RXWORD_MSG_TAPS_SET_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_TAPS_SET_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_RX_GEARBOX_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_RX_GEARBOX_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_MAIN_FSM_CTRL_4_OFFSET ) ))
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_5_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_MAIN_FSM_CTRL_5_OFFSET ) ))
#define PMA_RXWORD_MSG_VREF_CTRL_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_VREF_CTRL_1_OFFSET ) ))
#define PMA_RXWORD_MSG_VREF_CTRL_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_VREF_CTRL_2_OFFSET ) ))
#define PMA_RXWORD_MSG_VREF_CTRL_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_VREF_CTRL_3_OFFSET ) ))
#define PMA_RXWORD_MSG_VREF_CTRL_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_VREF_CTRL_4_OFFSET ) ))
#define PMA_RXWORD_MSG_VREF_CTRL_5_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_VREF_CTRL_5_OFFSET ) ))
#define PMA_RXWORD_MSG_VREF_CTRL_6_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_VREF_CTRL_6_OFFSET ) ))
#define PMA_RXWORD_MSG_VREF_STAT_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_VREF_STAT_0_OFFSET ) ))
#define PMA_RXWORD_MSG_VGA_CTRL_6_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_VGA_CTRL_6_OFFSET ) ))
#define PMA_RXWORD_MSG_VGA_CTRL_5_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_VGA_CTRL_5_OFFSET ) ))
#define PMA_RXWORD_MSG_VGA_CTRL_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_VGA_CTRL_4_OFFSET ) ))
#define PMA_RXWORD_MSG_VGA_CTRL_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_VGA_CTRL_0_OFFSET ) ))
#define PMA_RXWORD_MSG_VGA_CTRL_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_VGA_CTRL_1_OFFSET ) ))
#define PMA_RXWORD_MSG_VGA_CTRL_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_VGA_CTRL_2_OFFSET ) ))
#define PMA_RXWORD_MSG_VGA_CTRL_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_VGA_CTRL_3_OFFSET ) ))
#define PMA_RXWORD_MSG_VGA_STAT_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_VGA_STAT_0_OFFSET ) ))
#define PMA_RXWORD_MSG_JPP_CTRL_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_JPP_CTRL_1_OFFSET ) ))
#define PMA_RXWORD_MSG_JPP_CTRL_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_JPP_CTRL_2_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_CTRL_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_CTRL_0_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_CTRL_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_CTRL_1_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_CTRL_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_CTRL_2_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_CTRL_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_CTRL_3_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_CTRL_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_CTRL_4_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_CTRL_5_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_CTRL_5_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_STAT_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_STAT_0_OFFSET ) ))
#define PMA_RXWORD_MSG_HIST_CTRL_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_HIST_CTRL_0_OFFSET ) ))
#define PMA_RXWORD_MSG_HIST_CTRL_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_HIST_CTRL_1_OFFSET ) ))
#define PMA_RXWORD_MSG_HIST_CTRL_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_HIST_CTRL_2_OFFSET ) ))
#define PMA_RXWORD_MSG_HIST_CTRL_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_HIST_CTRL_3_OFFSET ) ))
#define PMA_RXWORD_MSG_HIST_CTRL_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_HIST_CTRL_4_OFFSET ) ))
#define PMA_RXWORD_MSG_HIST_CTRL_5_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_HIST_CTRL_5_OFFSET ) ))
#define PMA_RXWORD_MSG_HIST_CTRL_6_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_HIST_CTRL_6_OFFSET ) ))
#define PMA_RXWORD_MSG_HIST_CTRL_7_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_HIST_CTRL_7_OFFSET ) ))
#define PMA_RXWORD_MSG_HIST_CTRL_8_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_HIST_CTRL_8_OFFSET ) ))
#define PMA_RXWORD_MSG_HIST_CTRL_9_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_HIST_CTRL_9_OFFSET ) ))
#define PMA_RXWORD_MSG_HIST_CTRL_10_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_HIST_CTRL_10_OFFSET ) ))
#define PMA_RXWORD_MSG_HIST_CTRL_11_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_HIST_CTRL_11_OFFSET ) ))
#define PMA_RXWORD_MSG_HIST_CTRL_12_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_HIST_CTRL_12_OFFSET ) ))
#define PMA_RXWORD_MSG_HIST_CTRL_13_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_HIST_CTRL_13_OFFSET ) ))
#define PMA_RXWORD_MSG_HIST_STAT_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_HIST_STAT_0_OFFSET ) ))
#define PMA_RXWORD_MSG_HIST_STAT_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_HIST_STAT_1_OFFSET ) ))
#define PMA_RXWORD_MSG_HIST_STAT_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_HIST_STAT_2_OFFSET ) ))
#define PMA_RXWORD_MSG_HIST_STAT_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_HIST_STAT_3_OFFSET ) ))
#define PMA_RXWORD_MSG_HIST_STAT_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_HIST_STAT_4_OFFSET ) ))
#define PMA_RXWORD_MSG_HIST_STAT_5_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_HIST_STAT_5_OFFSET ) ))
#define PMA_RXWORD_MSG_HIST_STAT_6_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_HIST_STAT_6_OFFSET ) ))
#define PMA_RXWORD_MSG_HIST_STAT_7_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_HIST_STAT_7_OFFSET ) ))
#define PMA_RXWORD_MSG_HIST_STAT_8_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_HIST_STAT_8_OFFSET ) ))
#define PMA_RXWORD_MSG_HIST_STAT_9_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_HIST_STAT_9_OFFSET ) ))
#define PMA_RXWORD_MSG_HIST_STAT_10_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_HIST_STAT_10_OFFSET ) ))
#define PMA_RXWORD_MSG_HIST_STAT_11_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_HIST_STAT_11_OFFSET ) ))
#define PMA_RXWORD_MSG_HIST_STAT_12_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_HIST_STAT_12_OFFSET ) ))
#define PMA_RXWORD_MSG_HIST_STAT_13_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_HIST_STAT_13_OFFSET ) ))
#define PMA_RXWORD_MSG_HIST_STAT_14_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_HIST_STAT_14_OFFSET ) ))
#define PMA_RXWORD_MSG_HIST_STAT_15_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_HIST_STAT_15_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_CTRL_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_CTRL_1_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_CTRL_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_CTRL_2_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_CTRL_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_CTRL_3_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_CTRL_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_CTRL_4_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_STAT_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_STAT_1_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_STAT_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_STAT_2_OFFSET ) ))
#define PMA_RXWORD_MSG_ADCVREF_CTRL_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADCVREF_CTRL_1_OFFSET ) ))
#define PMA_RXWORD_MSG_ADCVREF_CTRL_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADCVREF_CTRL_2_OFFSET ) ))
#define PMA_RXWORD_MSG_ADCVREF_CTRL_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADCVREF_CTRL_3_OFFSET ) ))
#define PMA_RXWORD_MSG_ADCVREF_CTRL_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADCVREF_CTRL_4_OFFSET ) ))
#define PMA_RXWORD_MSG_ADCVREF_CTRL_5_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADCVREF_CTRL_5_OFFSET ) ))
#define PMA_RXWORD_MSG_ADCVREF_CTRL_6_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADCVREF_CTRL_6_OFFSET ) ))
#define PMA_RXWORD_MSG_ADCVREF_STAT_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADCVREF_STAT_0_OFFSET ) ))
#define PMA_RXWORD_MSG_AFFE_CTRL_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_AFFE_CTRL_0_OFFSET ) ))
#define PMA_RXWORD_MSG_AFFE_CTRL_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_AFFE_CTRL_1_OFFSET ) ))
#define PMA_RXWORD_MSG_AFFE_CTRL_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_AFFE_CTRL_2_OFFSET ) ))
#define PMA_RXWORD_MSG_AFFE_CTRL_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_AFFE_CTRL_3_OFFSET ) ))
#define PMA_RXWORD_MSG_AFFE_STAT_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_AFFE_STAT_0_OFFSET ) ))
#define PMA_RXWORD_MSG_OFC_CTRL_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OFC_CTRL_0_OFFSET ) ))
#define PMA_RXWORD_MSG_OFC_CTRL_1A_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OFC_CTRL_1A_OFFSET ) ))
#define PMA_RXWORD_MSG_OFC_CTRL_1B_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OFC_CTRL_1B_OFFSET ) ))
#define PMA_RXWORD_MSG_OFC_CTRL_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OFC_CTRL_2_OFFSET ) ))
#define PMA_RXWORD_MSG_OFC_CTRL_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OFC_CTRL_3_OFFSET ) ))
#define PMA_RXWORD_MSG_OFC_STAT_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OFC_STAT_0_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_0_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_1_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_2_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_3_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_4_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_5_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_5_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_0_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_1_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_2_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_3_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_4_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_5_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_5_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_0_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_1_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_2_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_3_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_4_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_5_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_5_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_0_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_1_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_2_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_3_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_4_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_5_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_5_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_0_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_1_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_2_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_3_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_4_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_5_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_5_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_0_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_1_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_2_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_3_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_4_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_5_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_5_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_0_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_1_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_2_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_3_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_4_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_5_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_5_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_0_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_1_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_2_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_3_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_4_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_5_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_5_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_0_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_1_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_2_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_3_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_4_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_5_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_5_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_0_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_1_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_2_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_3_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_4_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_5_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_5_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_0_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_1_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_2_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_3_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_4_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_5_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_5_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_0_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_1_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_2_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_3_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_4_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_5_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_5_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_0_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_1_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_2_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_3_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_4_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_5_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_5_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_0_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_1_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_2_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_3_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_4_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_5_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_5_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_0_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_1_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_2_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_3_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_4_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_5_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_5_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_0_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_1_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_2_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_3_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_4_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_5_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_5_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET0_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET0_0_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET1_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET1_0_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET2_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET2_0_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET3_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET3_0_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET4_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET4_0_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET5_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET5_0_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET6_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET6_0_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET7_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET7_0_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET8_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET8_0_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET9_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET9_0_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET10_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET10_0_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET11_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET11_0_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET12_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET12_0_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET13_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET13_0_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET14_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET14_0_OFFSET ) ))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET15_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET15_0_OFFSET ) ))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET0_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET0_0_OFFSET ) ))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET1_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET1_0_OFFSET ) ))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET2_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET2_0_OFFSET ) ))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET3_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET3_0_OFFSET ) ))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET4_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET4_0_OFFSET ) ))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET5_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET5_0_OFFSET ) ))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET6_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET6_0_OFFSET ) ))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET7_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET7_0_OFFSET ) ))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET8_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET8_0_OFFSET ) ))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET9_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET9_0_OFFSET ) ))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET10_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET10_0_OFFSET ) ))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET11_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET11_0_OFFSET ) ))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET12_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET12_0_OFFSET ) ))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET13_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET13_0_OFFSET ) ))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET14_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET14_0_OFFSET ) ))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET15_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET15_0_OFFSET ) ))
#define PMA_RXWORD_MSG_AFFE_LMS_SET0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_AFFE_LMS_SET0_OFFSET ) ))
#define PMA_RXWORD_MSG_AFFE_LMS_SET1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_AFFE_LMS_SET1_OFFSET ) ))
#define PMA_RXWORD_MSG_AFFE_LMS_SET2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_AFFE_LMS_SET2_OFFSET ) ))
#define PMA_RXWORD_MSG_AFFE_LMS_SET3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_AFFE_LMS_SET3_OFFSET ) ))
#define PMA_RXWORD_MSG_AFFE_LMS_SET4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_AFFE_LMS_SET4_OFFSET ) ))
#define PMA_RXWORD_MSG_AFFE_LMS_SET5_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_AFFE_LMS_SET5_OFFSET ) ))
#define PMA_RXWORD_MSG_AFFE_LMS_SET6_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_AFFE_LMS_SET6_OFFSET ) ))
#define PMA_RXWORD_MSG_AFFE_LMS_SET7_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_AFFE_LMS_SET7_OFFSET ) ))
#define PMA_RXWORD_MSG_AFFE_LMS_SET8_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_AFFE_LMS_SET8_OFFSET ) ))
#define PMA_RXWORD_MSG_AFFE_LMS_SET9_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_AFFE_LMS_SET9_OFFSET ) ))
#define PMA_RXWORD_MSG_AFFE_LMS_SET10_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_AFFE_LMS_SET10_OFFSET ) ))
#define PMA_RXWORD_MSG_AFFE_LMS_SET11_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_AFFE_LMS_SET11_OFFSET ) ))
#define PMA_RXWORD_MSG_AFFE_LMS_SET12_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_AFFE_LMS_SET12_OFFSET ) ))
#define PMA_RXWORD_MSG_AFFE_LMS_SET13_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_AFFE_LMS_SET13_OFFSET ) ))
#define PMA_RXWORD_MSG_AFFE_LMS_SET14_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_AFFE_LMS_SET14_OFFSET ) ))
#define PMA_RXWORD_MSG_AFFE_LMS_SET15_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_AFFE_LMS_SET15_OFFSET ) ))
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET0_OFFSET ) ))
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET1_OFFSET ) ))
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET2_OFFSET ) ))
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET3_OFFSET ) ))
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET4_OFFSET ) ))
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET5_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET5_OFFSET ) ))
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET6_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET6_OFFSET ) ))
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET7_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET7_OFFSET ) ))
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET8_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET8_OFFSET ) ))
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET9_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET9_OFFSET ) ))
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET10_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET10_OFFSET ) ))
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET11_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET11_OFFSET ) ))
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET12_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET12_OFFSET ) ))
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET13_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET13_OFFSET ) ))
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET14_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET14_OFFSET ) ))
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET15_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET15_OFFSET ) ))
#define PMA_RXWORD_MSG_SATURATION_STAT_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_SATURATION_STAT_0_OFFSET ) ))
#define PMA_RXWORD_MSG_SATURATION_STAT_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_SATURATION_STAT_1_OFFSET ) ))
#define PMA_RXWORD_MSG_SATURATION_STAT_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_SATURATION_STAT_3_OFFSET ) ))
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ZEROAVG_STAT_0_OFFSET ) ))
#define PMA_RXWORD_MSG_ZEROAVG_STAT_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ZEROAVG_STAT_1_OFFSET ) ))
#define PMA_RXWORD_MSG_ZEROAVG_STAT_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ZEROAVG_STAT_3_OFFSET ) ))
#define PMA_RXWORD_MSG_ADCOFC_CTRL_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADCOFC_CTRL_0_OFFSET ) ))
#define PMA_RXWORD_MSG_ADCOFC_CTRL_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADCOFC_CTRL_1_OFFSET ) ))
#define PMA_RXWORD_MSG_ADCOFC_CTRL_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADCOFC_CTRL_2_OFFSET ) ))
#define PMA_RXWORD_MSG_ADCOFC_CTRL_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADCOFC_CTRL_3_OFFSET ) ))
#define PMA_RXWORD_MSG_ADCOFC_STAT_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADCOFC_STAT_0_OFFSET ) ))
#define PMA_RXWORD_MSG_EDG_SLICE_CTRL_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_EDG_SLICE_CTRL_0_OFFSET ) ))
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET0_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_EDG_SLICER_LVL_SET0_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET1_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_EDG_SLICER_LVL_SET1_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET2_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_EDG_SLICER_LVL_SET2_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET3_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_EDG_SLICER_LVL_SET3_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET4_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_EDG_SLICER_LVL_SET4_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET5_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_EDG_SLICER_LVL_SET5_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET6_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_EDG_SLICER_LVL_SET6_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET7_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_EDG_SLICER_LVL_SET7_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_EDGVREF_CTRL_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_EDGVREF_CTRL_1_OFFSET ) ))
#define PMA_RXWORD_MSG_EDGVREF_CTRL_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_EDGVREF_CTRL_2_OFFSET ) ))
#define PMA_RXWORD_MSG_EDGVREF_CTRL_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_EDGVREF_CTRL_3_OFFSET ) ))
#define PMA_RXWORD_MSG_EDGVREF_CTRL_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_EDGVREF_CTRL_4_OFFSET ) ))
#define PMA_RXWORD_MSG_EDGVREF_CTRL_5_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_EDGVREF_CTRL_5_OFFSET ) ))
#define PMA_RXWORD_MSG_EDGVREF_CTRL_6_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_EDGVREF_CTRL_6_OFFSET ) ))
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_EDGVREF_FRAC_SET0_OFFSET ) ))
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_EDGVREF_FRAC_SET1_OFFSET ) ))
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_EDGVREF_FRAC_SET2_OFFSET ) ))
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_EDGVREF_FRAC_SET3_OFFSET ) ))
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_EDGVREF_FRAC_SET4_OFFSET ) ))
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET5_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_EDGVREF_FRAC_SET5_OFFSET ) ))
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET6_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_EDGVREF_FRAC_SET6_OFFSET ) ))
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET7_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_EDGVREF_FRAC_SET7_OFFSET ) ))
#define PMA_RXWORD_MSG_JPP_CTRL_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_JPP_CTRL_0_OFFSET ) ))
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_DFE_LMS_CTRL_0_OFFSET ) ))
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_DFE_LMS_CTRL_1_OFFSET ) ))
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_DFE_LMS_CTRL_2_OFFSET ) ))
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_DFE_LMS_CTRL_3_OFFSET ) ))
#define PMA_RXWORD_MSG_DFE_LMS_STAT_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_DFE_LMS_STAT_0_OFFSET ) ))
#define PMA_RXWORD_MSG_DFE_LMS_SET0TO3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_DFE_LMS_SET0TO3_OFFSET ) ))
#define PMA_RXWORD_MSG_DFE_LMS_SET4TO7_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_DFE_LMS_SET4TO7_OFFSET ) ))
#define PMA_RXWORD_MSG_DFE_LMS_SET8TO11_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_DFE_LMS_SET8TO11_OFFSET ) ))
#define PMA_RXWORD_MSG_DFE_LMS_SET12TO15_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_DFE_LMS_SET12TO15_OFFSET ) ))
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET0TO3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_DFE_LMS_FRAC_SET0TO3_OFFSET ) ))
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET4TO7_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_DFE_LMS_FRAC_SET4TO7_OFFSET ) ))
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET8TO11_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_DFE_LMS_FRAC_SET8TO11_OFFSET ) ))
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET12TO15_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_DFE_LMS_FRAC_SET12TO15_OFFSET ) ))
#define PMA_RXWORD_MSG_DFE_CTRL_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_DFE_CTRL_0_OFFSET ) ))
#define PMA_RXWORD_MSG_RX_SARARRAY_VALID_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_RX_SARARRAY_VALID_0_OFFSET ) ))
#define PMA_RXWORD_MSG_RX_SARARRAY_VALID_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_RX_SARARRAY_VALID_1_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET0TO3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_PRE1_SET0TO3_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET4TO7_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_PRE1_SET4TO7_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET8TO11_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_PRE1_SET8TO11_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET12TO15_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_PRE1_SET12TO15_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET0_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET0_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET1_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET1_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET2_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET2_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET3_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET3_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET4_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET4_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET5_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET5_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET6_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET6_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET7_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET7_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET8_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET8_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET9_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET9_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET10_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET10_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET11_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET11_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET12_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET12_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET13_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET13_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET14_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET14_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET15_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET15_CTRL_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET0_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET0_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET1_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET1_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET2_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET2_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET3_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET3_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET4_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET4_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET5_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET5_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET5_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET5_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET6_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET6_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET6_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET6_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET7_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET7_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET7_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET7_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET8_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET8_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET8_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET8_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET9_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET9_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET9_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET9_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET10_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET10_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET10_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET10_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET11_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET11_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET11_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET11_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET12_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET12_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET12_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET12_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET13_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET13_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET13_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET13_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET14_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET14_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET14_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET14_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET15_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET15_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET15_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET15_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET0TO3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_POST1_SET0TO3_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET4TO7_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_POST1_SET4TO7_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET8TO11_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_POST1_SET8TO11_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET12TO15_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_POST1_SET12TO15_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_CTRL_0_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_CTRL_1_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_CTRL_2_OFFSET ) ))
#define PMA_RXWORD_MSG_LMS_AVG_UPDN_STAT_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_LMS_AVG_UPDN_STAT_0_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_1_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_2_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_3_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_4_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_5_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_5_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_6_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_6_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_0_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_1A_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_1A_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_1B_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_1B_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_2_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_3_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_OFC_STAT_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_OFC_STAT_0_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET0TO3_FRAC_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_PRE1_SET0TO3_FRAC_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET4TO7_FRAC_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_PRE1_SET4TO7_FRAC_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET8TO11_FRAC_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_PRE1_SET8TO11_FRAC_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET12TO15_FRAC_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_PRE1_SET12TO15_FRAC_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET0TO3_FRAC_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_POST1_SET0TO3_FRAC_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET4TO7_FRAC_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_POST1_SET4TO7_FRAC_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET8TO11_FRAC_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_POST1_SET8TO11_FRAC_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET12TO15_FRAC_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_POST1_SET12TO15_FRAC_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET0_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET0_0_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET1_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET1_0_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET2_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET2_0_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET3_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET3_0_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET4_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET4_0_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET5_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET5_0_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET6_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET6_0_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET7_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET7_0_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET8_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET8_0_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET9_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET9_0_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET10_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET10_0_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET11_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET11_0_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET12_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET12_0_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET13_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET13_0_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET14_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET14_0_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET15_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET15_0_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_CTRL_3_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET0TO3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_PRE3_SET0TO3_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET4TO7_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_PRE3_SET4TO7_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET8TO11_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_PRE3_SET8TO11_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET12TO15_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_PRE3_SET12TO15_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET0TO3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_PRE2_SET0TO3_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET4TO7_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_PRE2_SET4TO7_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET8TO11_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_PRE2_SET8TO11_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET12TO15_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_PRE2_SET12TO15_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET0TO3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_POST2_SET0TO3_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET4TO7_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_POST2_SET4TO7_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET8TO11_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_POST2_SET8TO11_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET12TO15_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_POST2_SET12TO15_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET0TO3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_POST3_SET0TO3_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET4TO7_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_POST3_SET4TO7_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET8TO11_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_POST3_SET8TO11_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET12TO15_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_POST3_SET12TO15_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET0TO3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_POST4_SET0TO3_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET4TO7_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_POST4_SET4TO7_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET8TO11_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_POST4_SET8TO11_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET12TO15_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_POST4_SET12TO15_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET0TO3_FRAC_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_PRE3_SET0TO3_FRAC_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET4TO7_FRAC_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_PRE3_SET4TO7_FRAC_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET8TO11_FRAC_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_PRE3_SET8TO11_FRAC_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET12TO15_FRAC_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_PRE3_SET12TO15_FRAC_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET0TO3_FRAC_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_PRE2_SET0TO3_FRAC_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET4TO7_FRAC_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_PRE2_SET4TO7_FRAC_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET8TO11_FRAC_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_PRE2_SET8TO11_FRAC_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET12TO15_FRAC_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_PRE2_SET12TO15_FRAC_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET0TO3_FRAC_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_POST2_SET0TO3_FRAC_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET4TO7_FRAC_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_POST2_SET4TO7_FRAC_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET8TO11_FRAC_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_POST2_SET8TO11_FRAC_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET12TO15_FRAC_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_POST2_SET12TO15_FRAC_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET0TO3_FRAC_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_POST3_SET0TO3_FRAC_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET4TO7_FRAC_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_POST3_SET4TO7_FRAC_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET8TO11_FRAC_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_POST3_SET8TO11_FRAC_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET12TO15_FRAC_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_POST3_SET12TO15_FRAC_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET0TO3_FRAC_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_POST4_SET0TO3_FRAC_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET4TO7_FRAC_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_POST4_SET4TO7_FRAC_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET8TO11_FRAC_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_POST4_SET8TO11_FRAC_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET12TO15_FRAC_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_POST4_SET12TO15_FRAC_OFFSET ) ))
#define PMA_RXWORD_MSG_SATURATION_STAT_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_SATURATION_STAT_4_OFFSET ) ))
#define PMA_RXWORD_MSG_AFFE_IF_CTRL_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_AFFE_IF_CTRL_0_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_0TO3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_0TO3_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_4TO7_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_4TO7_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_8TO11_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_8TO11_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_12TO15_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_12TO15_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_16TO19_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_16TO19_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_20TO23_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_20TO23_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_24TO27_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_24TO27_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_28TO31_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_28TO31_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_32TO35_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_32TO35_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_36TO39_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_36TO39_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_40TO43_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_40TO43_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_44TO47_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_44TO47_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_48TO51_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_48TO51_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_52TO55_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_52TO55_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_56TO59_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_56TO59_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_60TO63_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_60TO63_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_0TO3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_0TO3_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_4TO7_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_4TO7_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_8TO11_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_8TO11_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_12TO15_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_12TO15_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_16TO19_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_16TO19_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_20TO23_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_20TO23_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_24TO27_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_24TO27_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_28TO31_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_28TO31_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_32TO35_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_32TO35_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_36TO39_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_36TO39_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_40TO43_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_40TO43_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_44TO47_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_44TO47_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_48TO51_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_48TO51_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_52TO55_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_52TO55_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_56TO59_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_56TO59_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_60TO63_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_60TO63_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_0TO3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_0TO3_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_4TO7_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_4TO7_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_8TO11_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_8TO11_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_12TO15_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_12TO15_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_16TO19_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_16TO19_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_20TO23_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_20TO23_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_24TO27_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_24TO27_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_28TO31_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_28TO31_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_32TO35_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_32TO35_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_36TO39_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_36TO39_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_40TO43_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_40TO43_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_44TO47_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_44TO47_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_48TO51_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_48TO51_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_52TO55_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_52TO55_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_56TO59_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_56TO59_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_60TO63_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_60TO63_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_0TO3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_0TO3_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_4TO7_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_4TO7_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_8TO11_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_8TO11_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_12TO15_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_12TO15_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_16TO19_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_16TO19_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_20TO23_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_20TO23_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_24TO27_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_24TO27_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_28TO31_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_28TO31_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_32TO35_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_32TO35_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_36TO39_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_36TO39_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_40TO43_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_40TO43_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_44TO47_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_44TO47_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_48TO51_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_48TO51_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_52TO55_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_52TO55_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_56TO59_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_56TO59_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_60TO63_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_60TO63_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_0TO3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_0TO3_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_4TO7_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_4TO7_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_8TO11_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_8TO11_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_12TO15_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_12TO15_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_16TO19_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_16TO19_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_20TO23_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_20TO23_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_24TO27_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_24TO27_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_28TO31_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_28TO31_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_32TO35_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_32TO35_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_36TO39_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_36TO39_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_40TO43_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_40TO43_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_44TO47_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_44TO47_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_48TO51_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_48TO51_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_52TO55_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_52TO55_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_56TO59_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_56TO59_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_60TO63_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_60TO63_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_0TO3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_0TO3_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_4TO7_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_4TO7_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_8TO11_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_8TO11_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_12TO15_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_12TO15_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_16TO19_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_16TO19_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_20TO23_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_20TO23_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_24TO27_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_24TO27_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_28TO31_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_28TO31_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_32TO35_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_32TO35_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_36TO39_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_36TO39_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_40TO43_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_40TO43_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_44TO47_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_44TO47_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_48TO51_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_48TO51_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_52TO55_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_52TO55_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_56TO59_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_56TO59_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_60TO63_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_60TO63_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_0TO3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_0TO3_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_4TO7_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_4TO7_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_8TO11_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_8TO11_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_12TO15_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_12TO15_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_16TO19_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_16TO19_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_20TO23_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_20TO23_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_24TO27_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_24TO27_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_28TO31_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_28TO31_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_32TO35_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_32TO35_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_36TO39_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_36TO39_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_40TO43_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_40TO43_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_44TO47_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_44TO47_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_48TO51_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_48TO51_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_52TO55_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_52TO55_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_56TO59_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_56TO59_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_60TO63_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_60TO63_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_0TO3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_0TO3_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_4TO7_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_4TO7_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_8TO11_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_8TO11_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_12TO15_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_12TO15_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_16TO19_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_16TO19_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_20TO23_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_20TO23_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_24TO27_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_24TO27_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_28TO31_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_28TO31_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_32TO35_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_32TO35_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_36TO39_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_36TO39_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_40TO43_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_40TO43_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_44TO47_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_44TO47_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_48TO51_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_48TO51_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_52TO55_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_52TO55_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_56TO59_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_56TO59_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_60TO63_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_60TO63_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_0TO3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_0TO3_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_4TO7_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_4TO7_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_8TO11_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_8TO11_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_12TO15_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_12TO15_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_16TO19_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_16TO19_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_20TO23_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_20TO23_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_24TO27_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_24TO27_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_28TO31_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_28TO31_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_32TO35_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_32TO35_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_36TO39_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_36TO39_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_40TO43_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_40TO43_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_44TO47_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_44TO47_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_48TO51_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_48TO51_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_52TO55_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_52TO55_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_56TO59_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_56TO59_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_60TO63_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_60TO63_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_0TO3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_0TO3_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_4TO7_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_4TO7_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_8TO11_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_8TO11_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_12TO15_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_12TO15_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_16TO19_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_16TO19_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_20TO23_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_20TO23_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_24TO27_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_24TO27_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_28TO31_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_28TO31_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_32TO35_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_32TO35_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_36TO39_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_36TO39_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_40TO43_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_40TO43_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_44TO47_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_44TO47_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_48TO51_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_48TO51_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_52TO55_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_52TO55_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_56TO59_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_56TO59_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_60TO63_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_60TO63_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_0TO3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_0TO3_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_4TO7_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_4TO7_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_8TO11_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_8TO11_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_12TO15_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_12TO15_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_16TO19_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_16TO19_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_20TO23_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_20TO23_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_24TO27_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_24TO27_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_28TO31_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_28TO31_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_32TO35_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_32TO35_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_36TO39_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_36TO39_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_40TO43_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_40TO43_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_44TO47_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_44TO47_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_48TO51_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_48TO51_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_52TO55_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_52TO55_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_56TO59_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_56TO59_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_60TO63_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_60TO63_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_0TO3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_0TO3_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_4TO7_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_4TO7_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_8TO11_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_8TO11_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_12TO15_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_12TO15_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_16TO19_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_16TO19_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_20TO23_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_20TO23_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_24TO27_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_24TO27_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_28TO31_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_28TO31_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_32TO35_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_32TO35_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_36TO39_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_36TO39_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_40TO43_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_40TO43_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_44TO47_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_44TO47_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_48TO51_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_48TO51_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_52TO55_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_52TO55_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_56TO59_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_56TO59_OFFSET ) ))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_60TO63_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_60TO63_OFFSET ) ))
#define PMA_RXWORD_MSG_OFC_CTRL_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OFC_CTRL_4_OFFSET ) ))
#define PMA_RXWORD_MSG_OFC_CTRL_5_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OFC_CTRL_5_OFFSET ) ))
#define PMA_RXWORD_MSG_OFC_CTRL_6_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OFC_CTRL_6_OFFSET ) ))
#define PMA_RXWORD_MSG_OFC_CTRL_7_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_OFC_CTRL_7_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_4_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_5_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_5_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_6_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_6_OFFSET ) ))
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_7_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_7_OFFSET ) ))
#define PMA_RXWORD_MSG_ADCOFC_CTRL_4_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADCOFC_CTRL_4_OFFSET ) ))
#define PMA_RXWORD_MSG_ADCOFC_CTRL_5_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADCOFC_CTRL_5_OFFSET ) ))
#define PMA_RXWORD_MSG_ADCOFC_CTRL_6_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADCOFC_CTRL_6_OFFSET ) ))
#define PMA_RXWORD_MSG_ADCOFC_CTRL_7_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_ADCOFC_CTRL_7_OFFSET ) ))
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_OFFSET ) ))
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL2_OFFSET ) ))
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL3_OFFSET ) ))
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_STAT_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_RX_SIGDET_VENV_STAT_OFFSET ) ))
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_STAT_CLR_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_RX_SIGDET_VENV_STAT_CLR_OFFSET ) ))
#define PMA_RXWORD_MSG_RXWORD_RW_SPARE_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_RXWORD_RW_SPARE_0_OFFSET ) ))
#define PMA_RXWORD_MSG_RXWORD_RW_SPARE_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_RXWORD_RW_SPARE_1_OFFSET ) ))
#define PMA_RXWORD_MSG_RXWORD_RW_SPARE_2_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_RXWORD_RW_SPARE_2_OFFSET ) ))
#define PMA_RXWORD_MSG_RXWORD_RW_SPARE_3_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_RXWORD_RW_SPARE_3_OFFSET ) ))
#define PMA_RXWORD_MSG_RXWORD_RO_SPARE_0_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_RXWORD_RO_SPARE_0_OFFSET ) ))
#define PMA_RXWORD_MSG_RXWORD_RO_SPARE_1_ADR(_BASE) (( ( _BASE ) + ( PMA_RXWORD_MSG_RXWORD_RO_SPARE_1_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET0_0 register description at address offset 0x0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set0_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET0_COEFF_PRE3 : 6;
    ///< set0 ffe pre cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t FFE_COEFF_SET0_COEFF_PRE2 : 6;
    ///< set0 ffe pre cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t FFE_COEFF_SET0_COEFF_PRE1 : 8;
    ///< set0 ffe pre cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET0_COEFF_POST1 : 8;
    ///< set0 ffe post cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set0_0_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET0_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_0_RD_MASK (0xffff3f3fU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_0_WR_MASK (0xffff3f3fU)


///< set0 ffe pre cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_0_FFE_COEFF_SET0_COEFF_PRE3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_0_FFE_COEFF_SET0_COEFF_PRE3_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_0_FFE_COEFF_SET0_COEFF_PRE3_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_0_FFE_COEFF_SET0_COEFF_PRE3_BF_DEF (0x00000000)

///< set0 ffe pre cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_0_FFE_COEFF_SET0_COEFF_PRE2_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_0_FFE_COEFF_SET0_COEFF_PRE2_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_0_FFE_COEFF_SET0_COEFF_PRE2_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_0_FFE_COEFF_SET0_COEFF_PRE2_BF_DEF (0x00000000)

///< set0 ffe pre cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_0_FFE_COEFF_SET0_COEFF_PRE1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_0_FFE_COEFF_SET0_COEFF_PRE1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_0_FFE_COEFF_SET0_COEFF_PRE1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_0_FFE_COEFF_SET0_COEFF_PRE1_BF_DEF (0x00000000)

///< set0 ffe post cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_0_FFE_COEFF_SET0_COEFF_POST1_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_0_FFE_COEFF_SET0_COEFF_POST1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_0_FFE_COEFF_SET0_COEFF_POST1_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_0_FFE_COEFF_SET0_COEFF_POST1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET0_1 register description at address offset 0x4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set0_1
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET0_COEFF_POST2 : 8;
    ///< set0 ffe post cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET0_COEFF_POST3 : 6;
    ///< set0 ffe post cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t FFE_COEFF_SET0_COEFF_POST4 : 6;
    ///< set0 ffe post cursor 4 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t FFE_COEFF_SET0_COEFF_POST5 : 6;
    ///< set0 ffe post cursor 5 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set0_1_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET0_1_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_1_RD_MASK (0x3f3f3fffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_1_WR_MASK (0x3f3f3fffU)


///< set0 ffe post cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_1_FFE_COEFF_SET0_COEFF_POST2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_1_FFE_COEFF_SET0_COEFF_POST2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_1_FFE_COEFF_SET0_COEFF_POST2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_1_FFE_COEFF_SET0_COEFF_POST2_BF_DEF (0x00000000)

///< set0 ffe post cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_1_FFE_COEFF_SET0_COEFF_POST3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_1_FFE_COEFF_SET0_COEFF_POST3_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_1_FFE_COEFF_SET0_COEFF_POST3_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_1_FFE_COEFF_SET0_COEFF_POST3_BF_DEF (0x00000000)

///< set0 ffe post cursor 4 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_1_FFE_COEFF_SET0_COEFF_POST4_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_1_FFE_COEFF_SET0_COEFF_POST4_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_1_FFE_COEFF_SET0_COEFF_POST4_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_1_FFE_COEFF_SET0_COEFF_POST4_BF_DEF (0x00000000)

///< set0 ffe post cursor 5 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_1_FFE_COEFF_SET0_COEFF_POST5_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_1_FFE_COEFF_SET0_COEFF_POST5_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_1_FFE_COEFF_SET0_COEFF_POST5_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_1_FFE_COEFF_SET0_COEFF_POST5_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET0_2 register description at address offset 0x8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set0_2
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET0_COEFF_POST6 : 6;
    ///< set0 ffe post cursor 6 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t FFE_COEFF_SET0_COEFF_POST7 : 6;
    ///< set0 ffe post cursor 7 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t FFE_COEFF_SET0_COEFF_POST8 : 6;
    ///< set0 ffe post cursor 8 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t FFE_COEFF_SET0_COEFF_POST9 : 4;
    ///< set0 ffe post cursor 9 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t FFE_COEFF_SET0_COEFF_POST10 : 4;
    ///< set0 ffe post cursor 10 coeff
    ///< AccessType="RW/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set0_2_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET0_2_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_2_RD_MASK (0xff3f3f3fU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_2_WR_MASK (0xff3f3f3fU)


///< set0 ffe post cursor 6 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_2_FFE_COEFF_SET0_COEFF_POST6_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_2_FFE_COEFF_SET0_COEFF_POST6_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_2_FFE_COEFF_SET0_COEFF_POST6_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_2_FFE_COEFF_SET0_COEFF_POST6_BF_DEF (0x00000000)

///< set0 ffe post cursor 7 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_2_FFE_COEFF_SET0_COEFF_POST7_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_2_FFE_COEFF_SET0_COEFF_POST7_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_2_FFE_COEFF_SET0_COEFF_POST7_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_2_FFE_COEFF_SET0_COEFF_POST7_BF_DEF (0x00000000)

///< set0 ffe post cursor 8 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_2_FFE_COEFF_SET0_COEFF_POST8_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_2_FFE_COEFF_SET0_COEFF_POST8_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_2_FFE_COEFF_SET0_COEFF_POST8_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_2_FFE_COEFF_SET0_COEFF_POST8_BF_DEF (0x00000000)

///< set0 ffe post cursor 9 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_2_FFE_COEFF_SET0_COEFF_POST9_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_2_FFE_COEFF_SET0_COEFF_POST9_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_2_FFE_COEFF_SET0_COEFF_POST9_BF_MSK (0x0F000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_2_FFE_COEFF_SET0_COEFF_POST9_BF_DEF (0x00000000)

///< set0 ffe post cursor 10 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_2_FFE_COEFF_SET0_COEFF_POST10_BF_OFF (28)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_2_FFE_COEFF_SET0_COEFF_POST10_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_2_FFE_COEFF_SET0_COEFF_POST10_BF_MSK (0xF0000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_2_FFE_COEFF_SET0_COEFF_POST10_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET0_3 register description at address offset 0xc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set0_3
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET0_COEFF_POST11 : 4;
    ///< set0 ffe post cursor 11 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET0_COEFF_POST12 : 4;
    ///< set0 ffe post cursor 12 coeff
    ///< AccessType="RW/V" BitOffset="4" ResetValue="0x0"
    uint32_t FFE_COEFF_SET0_BANKA_FLOAT1 : 4;
    ///< set0 ffe bankA floating 1 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET0_BANKA_FLOAT2 : 4;
    ///< set0 ffe bankA floating 2 coeff
    ///< AccessType="RW/V" BitOffset="12" ResetValue="0x0"
    uint32_t FFE_COEFF_SET0_BANKA_FLOAT3 : 4;
    ///< set0 ffe bankA floating 3 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET0_BANKB_FLOAT1 : 4;
    ///< set0 ffe bankB floating 1 coeff
    ///< AccessType="RW/V" BitOffset="20" ResetValue="0x0"
    uint32_t FFE_COEFF_SET0_BANKB_FLOAT2 : 4;
    ///< set0 ffe bankB floating 2 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t FFE_COEFF_SET0_BANKB_FLOAT3 : 4;
    ///< set0 ffe bankB floating 3 coeff
    ///< AccessType="RW/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set0_3_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET0_3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_3_WR_MASK (0xffffffffU)


///< set0 ffe post cursor 11 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_3_FFE_COEFF_SET0_COEFF_POST11_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_3_FFE_COEFF_SET0_COEFF_POST11_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_3_FFE_COEFF_SET0_COEFF_POST11_BF_MSK (0x0000000F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_3_FFE_COEFF_SET0_COEFF_POST11_BF_DEF (0x00000000)

///< set0 ffe post cursor 12 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_3_FFE_COEFF_SET0_COEFF_POST12_BF_OFF ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_3_FFE_COEFF_SET0_COEFF_POST12_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_3_FFE_COEFF_SET0_COEFF_POST12_BF_MSK (0x000000F0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_3_FFE_COEFF_SET0_COEFF_POST12_BF_DEF (0x00000000)

///< set0 ffe bankA floating 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_3_FFE_COEFF_SET0_BANKA_FLOAT1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_3_FFE_COEFF_SET0_BANKA_FLOAT1_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_3_FFE_COEFF_SET0_BANKA_FLOAT1_BF_MSK (0x00000F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_3_FFE_COEFF_SET0_BANKA_FLOAT1_BF_DEF (0x00000000)

///< set0 ffe bankA floating 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_3_FFE_COEFF_SET0_BANKA_FLOAT2_BF_OFF (12)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_3_FFE_COEFF_SET0_BANKA_FLOAT2_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_3_FFE_COEFF_SET0_BANKA_FLOAT2_BF_MSK (0x0000F000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_3_FFE_COEFF_SET0_BANKA_FLOAT2_BF_DEF (0x00000000)

///< set0 ffe bankA floating 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_3_FFE_COEFF_SET0_BANKA_FLOAT3_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_3_FFE_COEFF_SET0_BANKA_FLOAT3_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_3_FFE_COEFF_SET0_BANKA_FLOAT3_BF_MSK (0x000F0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_3_FFE_COEFF_SET0_BANKA_FLOAT3_BF_DEF (0x00000000)

///< set0 ffe bankB floating 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_3_FFE_COEFF_SET0_BANKB_FLOAT1_BF_OFF (20)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_3_FFE_COEFF_SET0_BANKB_FLOAT1_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_3_FFE_COEFF_SET0_BANKB_FLOAT1_BF_MSK (0x00F00000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_3_FFE_COEFF_SET0_BANKB_FLOAT1_BF_DEF (0x00000000)

///< set0 ffe bankB floating 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_3_FFE_COEFF_SET0_BANKB_FLOAT2_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_3_FFE_COEFF_SET0_BANKB_FLOAT2_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_3_FFE_COEFF_SET0_BANKB_FLOAT2_BF_MSK (0x0F000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_3_FFE_COEFF_SET0_BANKB_FLOAT2_BF_DEF (0x00000000)

///< set0 ffe bankB floating 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_3_FFE_COEFF_SET0_BANKB_FLOAT3_BF_OFF (28)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_3_FFE_COEFF_SET0_BANKB_FLOAT3_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_3_FFE_COEFF_SET0_BANKB_FLOAT3_BF_MSK (0xF0000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_3_FFE_COEFF_SET0_BANKB_FLOAT3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET0_4 register description at address offset 0x10
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set0_4
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET0_BANKC_FLOAT1 : 4;
    ///< set0 ffe bankC floating 1 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET0_BANKC_FLOAT2 : 4;
    ///< set0 ffe bankC floating 2 coeff
    ///< AccessType="RW/V" BitOffset="4" ResetValue="0x0"
    uint32_t FFE_COEFF_SET0_BANKC_FLOAT3 : 4;
    ///< set0 ffe bankC floating 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set0_4_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET0_4_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_4_RD_MASK (0x00000fffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_4_WR_MASK (0x00000fffU)


///< set0 ffe bankC floating 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_4_FFE_COEFF_SET0_BANKC_FLOAT1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_4_FFE_COEFF_SET0_BANKC_FLOAT1_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_4_FFE_COEFF_SET0_BANKC_FLOAT1_BF_MSK (0x0000000F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_4_FFE_COEFF_SET0_BANKC_FLOAT1_BF_DEF (0x00000000)

///< set0 ffe bankC floating 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_4_FFE_COEFF_SET0_BANKC_FLOAT2_BF_OFF ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_4_FFE_COEFF_SET0_BANKC_FLOAT2_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_4_FFE_COEFF_SET0_BANKC_FLOAT2_BF_MSK (0x000000F0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_4_FFE_COEFF_SET0_BANKC_FLOAT2_BF_DEF (0x00000000)

///< set0 ffe bankC floating 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_4_FFE_COEFF_SET0_BANKC_FLOAT3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_4_FFE_COEFF_SET0_BANKC_FLOAT3_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_4_FFE_COEFF_SET0_BANKC_FLOAT3_BF_MSK (0x00000F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_4_FFE_COEFF_SET0_BANKC_FLOAT3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET1_0 register description at address offset 0x14
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set1_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET1_COEFF_PRE3 : 6;
    ///< set1 ffe pre cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t FFE_COEFF_SET1_COEFF_PRE2 : 6;
    ///< set1 ffe pre cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t FFE_COEFF_SET1_COEFF_PRE1 : 8;
    ///< set1 ffe pre cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET1_COEFF_POST1 : 8;
    ///< set1 ffe post cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set1_0_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET1_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_0_RD_MASK (0xffff3f3fU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_0_WR_MASK (0xffff3f3fU)


///< set1 ffe pre cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_0_FFE_COEFF_SET1_COEFF_PRE3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_0_FFE_COEFF_SET1_COEFF_PRE3_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_0_FFE_COEFF_SET1_COEFF_PRE3_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_0_FFE_COEFF_SET1_COEFF_PRE3_BF_DEF (0x00000000)

///< set1 ffe pre cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_0_FFE_COEFF_SET1_COEFF_PRE2_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_0_FFE_COEFF_SET1_COEFF_PRE2_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_0_FFE_COEFF_SET1_COEFF_PRE2_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_0_FFE_COEFF_SET1_COEFF_PRE2_BF_DEF (0x00000000)

///< set1 ffe pre cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_0_FFE_COEFF_SET1_COEFF_PRE1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_0_FFE_COEFF_SET1_COEFF_PRE1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_0_FFE_COEFF_SET1_COEFF_PRE1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_0_FFE_COEFF_SET1_COEFF_PRE1_BF_DEF (0x00000000)

///< set1 ffe post cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_0_FFE_COEFF_SET1_COEFF_POST1_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_0_FFE_COEFF_SET1_COEFF_POST1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_0_FFE_COEFF_SET1_COEFF_POST1_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_0_FFE_COEFF_SET1_COEFF_POST1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET1_1 register description at address offset 0x18
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set1_1
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET1_COEFF_POST2 : 8;
    ///< set1 ffe post cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET1_COEFF_POST3 : 6;
    ///< set1 ffe post cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t FFE_COEFF_SET1_COEFF_POST4 : 6;
    ///< set1 ffe post cursor 4 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t FFE_COEFF_SET1_COEFF_POST5 : 6;
    ///< set1 ffe post cursor 5 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set1_1_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET1_1_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_1_RD_MASK (0x3f3f3fffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_1_WR_MASK (0x3f3f3fffU)


///< set1 ffe post cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_1_FFE_COEFF_SET1_COEFF_POST2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_1_FFE_COEFF_SET1_COEFF_POST2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_1_FFE_COEFF_SET1_COEFF_POST2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_1_FFE_COEFF_SET1_COEFF_POST2_BF_DEF (0x00000000)

///< set1 ffe post cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_1_FFE_COEFF_SET1_COEFF_POST3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_1_FFE_COEFF_SET1_COEFF_POST3_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_1_FFE_COEFF_SET1_COEFF_POST3_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_1_FFE_COEFF_SET1_COEFF_POST3_BF_DEF (0x00000000)

///< set1 ffe post cursor 4 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_1_FFE_COEFF_SET1_COEFF_POST4_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_1_FFE_COEFF_SET1_COEFF_POST4_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_1_FFE_COEFF_SET1_COEFF_POST4_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_1_FFE_COEFF_SET1_COEFF_POST4_BF_DEF (0x00000000)

///< set1 ffe post cursor 5 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_1_FFE_COEFF_SET1_COEFF_POST5_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_1_FFE_COEFF_SET1_COEFF_POST5_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_1_FFE_COEFF_SET1_COEFF_POST5_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_1_FFE_COEFF_SET1_COEFF_POST5_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET1_2 register description at address offset 0x1c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set1_2
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET1_COEFF_POST6 : 6;
    ///< set1 ffe post cursor 6 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t FFE_COEFF_SET1_COEFF_POST7 : 6;
    ///< set1 ffe post cursor 7 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t FFE_COEFF_SET1_COEFF_POST8 : 6;
    ///< set1 ffe post cursor 8 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t FFE_COEFF_SET1_COEFF_POST9 : 4;
    ///< set1 ffe post cursor 9 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t FFE_COEFF_SET1_COEFF_POST10 : 4;
    ///< set1 ffe post cursor 10 coeff
    ///< AccessType="RW/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set1_2_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET1_2_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_2_RD_MASK (0xff3f3f3fU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_2_WR_MASK (0xff3f3f3fU)


///< set1 ffe post cursor 6 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_2_FFE_COEFF_SET1_COEFF_POST6_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_2_FFE_COEFF_SET1_COEFF_POST6_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_2_FFE_COEFF_SET1_COEFF_POST6_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_2_FFE_COEFF_SET1_COEFF_POST6_BF_DEF (0x00000000)

///< set1 ffe post cursor 7 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_2_FFE_COEFF_SET1_COEFF_POST7_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_2_FFE_COEFF_SET1_COEFF_POST7_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_2_FFE_COEFF_SET1_COEFF_POST7_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_2_FFE_COEFF_SET1_COEFF_POST7_BF_DEF (0x00000000)

///< set1 ffe post cursor 8 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_2_FFE_COEFF_SET1_COEFF_POST8_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_2_FFE_COEFF_SET1_COEFF_POST8_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_2_FFE_COEFF_SET1_COEFF_POST8_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_2_FFE_COEFF_SET1_COEFF_POST8_BF_DEF (0x00000000)

///< set1 ffe post cursor 9 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_2_FFE_COEFF_SET1_COEFF_POST9_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_2_FFE_COEFF_SET1_COEFF_POST9_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_2_FFE_COEFF_SET1_COEFF_POST9_BF_MSK (0x0F000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_2_FFE_COEFF_SET1_COEFF_POST9_BF_DEF (0x00000000)

///< set1 ffe post cursor 10 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_2_FFE_COEFF_SET1_COEFF_POST10_BF_OFF (28)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_2_FFE_COEFF_SET1_COEFF_POST10_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_2_FFE_COEFF_SET1_COEFF_POST10_BF_MSK (0xF0000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_2_FFE_COEFF_SET1_COEFF_POST10_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET1_3 register description at address offset 0x20
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set1_3
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET1_COEFF_POST11 : 4;
    ///< set1 ffe post cursor 11 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET1_COEFF_POST12 : 4;
    ///< set1 ffe post cursor 12 coeff
    ///< AccessType="RW/V" BitOffset="4" ResetValue="0x0"
    uint32_t FFE_COEFF_SET1_BANKA_FLOAT1 : 4;
    ///< set1 ffe bankA floating 1 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET1_BANKA_FLOAT2 : 4;
    ///< set1 ffe bankA floating 2 coeff
    ///< AccessType="RW/V" BitOffset="12" ResetValue="0x0"
    uint32_t FFE_COEFF_SET1_BANKA_FLOAT3 : 4;
    ///< set1 ffe bankA floating 3 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET1_BANKB_FLOAT1 : 4;
    ///< set1 ffe bankB floating 1 coeff
    ///< AccessType="RW/V" BitOffset="20" ResetValue="0x0"
    uint32_t FFE_COEFF_SET1_BANKB_FLOAT2 : 4;
    ///< set1 ffe bankB floating 2 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t FFE_COEFF_SET1_BANKB_FLOAT3 : 4;
    ///< set1 ffe bankB floating 3 coeff
    ///< AccessType="RW/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set1_3_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET1_3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_3_WR_MASK (0xffffffffU)


///< set1 ffe post cursor 11 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_3_FFE_COEFF_SET1_COEFF_POST11_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_3_FFE_COEFF_SET1_COEFF_POST11_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_3_FFE_COEFF_SET1_COEFF_POST11_BF_MSK (0x0000000F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_3_FFE_COEFF_SET1_COEFF_POST11_BF_DEF (0x00000000)

///< set1 ffe post cursor 12 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_3_FFE_COEFF_SET1_COEFF_POST12_BF_OFF ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_3_FFE_COEFF_SET1_COEFF_POST12_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_3_FFE_COEFF_SET1_COEFF_POST12_BF_MSK (0x000000F0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_3_FFE_COEFF_SET1_COEFF_POST12_BF_DEF (0x00000000)

///< set1 ffe bankA floating 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_3_FFE_COEFF_SET1_BANKA_FLOAT1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_3_FFE_COEFF_SET1_BANKA_FLOAT1_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_3_FFE_COEFF_SET1_BANKA_FLOAT1_BF_MSK (0x00000F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_3_FFE_COEFF_SET1_BANKA_FLOAT1_BF_DEF (0x00000000)

///< set1 ffe bankA floating 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_3_FFE_COEFF_SET1_BANKA_FLOAT2_BF_OFF (12)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_3_FFE_COEFF_SET1_BANKA_FLOAT2_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_3_FFE_COEFF_SET1_BANKA_FLOAT2_BF_MSK (0x0000F000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_3_FFE_COEFF_SET1_BANKA_FLOAT2_BF_DEF (0x00000000)

///< set1 ffe bankA floating 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_3_FFE_COEFF_SET1_BANKA_FLOAT3_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_3_FFE_COEFF_SET1_BANKA_FLOAT3_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_3_FFE_COEFF_SET1_BANKA_FLOAT3_BF_MSK (0x000F0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_3_FFE_COEFF_SET1_BANKA_FLOAT3_BF_DEF (0x00000000)

///< set1 ffe bankB floating 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_3_FFE_COEFF_SET1_BANKB_FLOAT1_BF_OFF (20)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_3_FFE_COEFF_SET1_BANKB_FLOAT1_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_3_FFE_COEFF_SET1_BANKB_FLOAT1_BF_MSK (0x00F00000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_3_FFE_COEFF_SET1_BANKB_FLOAT1_BF_DEF (0x00000000)

///< set1 ffe bankB floating 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_3_FFE_COEFF_SET1_BANKB_FLOAT2_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_3_FFE_COEFF_SET1_BANKB_FLOAT2_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_3_FFE_COEFF_SET1_BANKB_FLOAT2_BF_MSK (0x0F000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_3_FFE_COEFF_SET1_BANKB_FLOAT2_BF_DEF (0x00000000)

///< set1 ffe bankB floating 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_3_FFE_COEFF_SET1_BANKB_FLOAT3_BF_OFF (28)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_3_FFE_COEFF_SET1_BANKB_FLOAT3_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_3_FFE_COEFF_SET1_BANKB_FLOAT3_BF_MSK (0xF0000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_3_FFE_COEFF_SET1_BANKB_FLOAT3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET1_4 register description at address offset 0x24
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set1_4
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET1_BANKC_FLOAT1 : 4;
    ///< set1 ffe bankC floating 1 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET1_BANKC_FLOAT2 : 4;
    ///< set1 ffe bankC floating 2 coeff
    ///< AccessType="RW/V" BitOffset="4" ResetValue="0x0"
    uint32_t FFE_COEFF_SET1_BANKC_FLOAT3 : 4;
    ///< set1 ffe bankC floating 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set1_4_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET1_4_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_4_RD_MASK (0x00000fffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_4_WR_MASK (0x00000fffU)


///< set1 ffe bankC floating 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_4_FFE_COEFF_SET1_BANKC_FLOAT1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_4_FFE_COEFF_SET1_BANKC_FLOAT1_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_4_FFE_COEFF_SET1_BANKC_FLOAT1_BF_MSK (0x0000000F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_4_FFE_COEFF_SET1_BANKC_FLOAT1_BF_DEF (0x00000000)

///< set1 ffe bankC floating 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_4_FFE_COEFF_SET1_BANKC_FLOAT2_BF_OFF ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_4_FFE_COEFF_SET1_BANKC_FLOAT2_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_4_FFE_COEFF_SET1_BANKC_FLOAT2_BF_MSK (0x000000F0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_4_FFE_COEFF_SET1_BANKC_FLOAT2_BF_DEF (0x00000000)

///< set1 ffe bankC floating 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_4_FFE_COEFF_SET1_BANKC_FLOAT3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_4_FFE_COEFF_SET1_BANKC_FLOAT3_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_4_FFE_COEFF_SET1_BANKC_FLOAT3_BF_MSK (0x00000F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_4_FFE_COEFF_SET1_BANKC_FLOAT3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET2_0 register description at address offset 0x28
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set2_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET2_COEFF_PRE3 : 6;
    ///< set2 ffe pre cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t FFE_COEFF_SET2_COEFF_PRE2 : 6;
    ///< set2 ffe pre cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t FFE_COEFF_SET2_COEFF_PRE1 : 8;
    ///< set2 ffe pre cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET2_COEFF_POST1 : 8;
    ///< set2 ffe post cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set2_0_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET2_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_0_RD_MASK (0xffff3f3fU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_0_WR_MASK (0xffff3f3fU)


///< set2 ffe pre cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_0_FFE_COEFF_SET2_COEFF_PRE3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_0_FFE_COEFF_SET2_COEFF_PRE3_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_0_FFE_COEFF_SET2_COEFF_PRE3_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_0_FFE_COEFF_SET2_COEFF_PRE3_BF_DEF (0x00000000)

///< set2 ffe pre cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_0_FFE_COEFF_SET2_COEFF_PRE2_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_0_FFE_COEFF_SET2_COEFF_PRE2_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_0_FFE_COEFF_SET2_COEFF_PRE2_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_0_FFE_COEFF_SET2_COEFF_PRE2_BF_DEF (0x00000000)

///< set2 ffe pre cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_0_FFE_COEFF_SET2_COEFF_PRE1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_0_FFE_COEFF_SET2_COEFF_PRE1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_0_FFE_COEFF_SET2_COEFF_PRE1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_0_FFE_COEFF_SET2_COEFF_PRE1_BF_DEF (0x00000000)

///< set2 ffe post cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_0_FFE_COEFF_SET2_COEFF_POST1_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_0_FFE_COEFF_SET2_COEFF_POST1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_0_FFE_COEFF_SET2_COEFF_POST1_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_0_FFE_COEFF_SET2_COEFF_POST1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET2_1 register description at address offset 0x2c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set2_1
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET2_COEFF_POST2 : 8;
    ///< set2 ffe post cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET2_COEFF_POST3 : 6;
    ///< set2 ffe post cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t FFE_COEFF_SET2_COEFF_POST4 : 6;
    ///< set2 ffe post cursor 4 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t FFE_COEFF_SET2_COEFF_POST5 : 6;
    ///< set2 ffe post cursor 5 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set2_1_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET2_1_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_1_RD_MASK (0x3f3f3fffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_1_WR_MASK (0x3f3f3fffU)


///< set2 ffe post cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_1_FFE_COEFF_SET2_COEFF_POST2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_1_FFE_COEFF_SET2_COEFF_POST2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_1_FFE_COEFF_SET2_COEFF_POST2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_1_FFE_COEFF_SET2_COEFF_POST2_BF_DEF (0x00000000)

///< set2 ffe post cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_1_FFE_COEFF_SET2_COEFF_POST3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_1_FFE_COEFF_SET2_COEFF_POST3_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_1_FFE_COEFF_SET2_COEFF_POST3_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_1_FFE_COEFF_SET2_COEFF_POST3_BF_DEF (0x00000000)

///< set2 ffe post cursor 4 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_1_FFE_COEFF_SET2_COEFF_POST4_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_1_FFE_COEFF_SET2_COEFF_POST4_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_1_FFE_COEFF_SET2_COEFF_POST4_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_1_FFE_COEFF_SET2_COEFF_POST4_BF_DEF (0x00000000)

///< set2 ffe post cursor 5 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_1_FFE_COEFF_SET2_COEFF_POST5_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_1_FFE_COEFF_SET2_COEFF_POST5_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_1_FFE_COEFF_SET2_COEFF_POST5_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_1_FFE_COEFF_SET2_COEFF_POST5_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET2_2 register description at address offset 0x30
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set2_2
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET2_COEFF_POST6 : 6;
    ///< set2 ffe post cursor 6 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t FFE_COEFF_SET2_COEFF_POST7 : 6;
    ///< set2 ffe post cursor 7 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t FFE_COEFF_SET2_COEFF_POST8 : 6;
    ///< set2 ffe post cursor 8 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t FFE_COEFF_SET2_COEFF_POST9 : 4;
    ///< set2 ffe post cursor 9 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t FFE_COEFF_SET2_COEFF_POST10 : 4;
    ///< set2 ffe post cursor 10 coeff
    ///< AccessType="RW/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set2_2_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET2_2_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_2_RD_MASK (0xff3f3f3fU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_2_WR_MASK (0xff3f3f3fU)


///< set2 ffe post cursor 6 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_2_FFE_COEFF_SET2_COEFF_POST6_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_2_FFE_COEFF_SET2_COEFF_POST6_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_2_FFE_COEFF_SET2_COEFF_POST6_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_2_FFE_COEFF_SET2_COEFF_POST6_BF_DEF (0x00000000)

///< set2 ffe post cursor 7 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_2_FFE_COEFF_SET2_COEFF_POST7_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_2_FFE_COEFF_SET2_COEFF_POST7_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_2_FFE_COEFF_SET2_COEFF_POST7_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_2_FFE_COEFF_SET2_COEFF_POST7_BF_DEF (0x00000000)

///< set2 ffe post cursor 8 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_2_FFE_COEFF_SET2_COEFF_POST8_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_2_FFE_COEFF_SET2_COEFF_POST8_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_2_FFE_COEFF_SET2_COEFF_POST8_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_2_FFE_COEFF_SET2_COEFF_POST8_BF_DEF (0x00000000)

///< set2 ffe post cursor 9 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_2_FFE_COEFF_SET2_COEFF_POST9_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_2_FFE_COEFF_SET2_COEFF_POST9_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_2_FFE_COEFF_SET2_COEFF_POST9_BF_MSK (0x0F000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_2_FFE_COEFF_SET2_COEFF_POST9_BF_DEF (0x00000000)

///< set2 ffe post cursor 10 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_2_FFE_COEFF_SET2_COEFF_POST10_BF_OFF (28)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_2_FFE_COEFF_SET2_COEFF_POST10_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_2_FFE_COEFF_SET2_COEFF_POST10_BF_MSK (0xF0000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_2_FFE_COEFF_SET2_COEFF_POST10_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET2_3 register description at address offset 0x34
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set2_3
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET2_COEFF_POST11 : 4;
    ///< set2 ffe post cursor 11 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET2_COEFF_POST12 : 4;
    ///< set2 ffe post cursor 12 coeff
    ///< AccessType="RW/V" BitOffset="4" ResetValue="0x0"
    uint32_t FFE_COEFF_SET2_BANKA_FLOAT1 : 4;
    ///< set2 ffe bankA floating 1 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET2_BANKA_FLOAT2 : 4;
    ///< set2 ffe bankA floating 2 coeff
    ///< AccessType="RW/V" BitOffset="12" ResetValue="0x0"
    uint32_t FFE_COEFF_SET2_BANKA_FLOAT3 : 4;
    ///< set2 ffe bankA floating 3 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET2_BANKB_FLOAT1 : 4;
    ///< set2 ffe bankB floating 1 coeff
    ///< AccessType="RW/V" BitOffset="20" ResetValue="0x0"
    uint32_t FFE_COEFF_SET2_BANKB_FLOAT2 : 4;
    ///< set2 ffe bankB floating 2 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t FFE_COEFF_SET2_BANKB_FLOAT3 : 4;
    ///< set2 ffe bankB floating 3 coeff
    ///< AccessType="RW/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set2_3_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET2_3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_3_WR_MASK (0xffffffffU)


///< set2 ffe post cursor 11 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_3_FFE_COEFF_SET2_COEFF_POST11_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_3_FFE_COEFF_SET2_COEFF_POST11_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_3_FFE_COEFF_SET2_COEFF_POST11_BF_MSK (0x0000000F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_3_FFE_COEFF_SET2_COEFF_POST11_BF_DEF (0x00000000)

///< set2 ffe post cursor 12 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_3_FFE_COEFF_SET2_COEFF_POST12_BF_OFF ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_3_FFE_COEFF_SET2_COEFF_POST12_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_3_FFE_COEFF_SET2_COEFF_POST12_BF_MSK (0x000000F0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_3_FFE_COEFF_SET2_COEFF_POST12_BF_DEF (0x00000000)

///< set2 ffe bankA floating 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_3_FFE_COEFF_SET2_BANKA_FLOAT1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_3_FFE_COEFF_SET2_BANKA_FLOAT1_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_3_FFE_COEFF_SET2_BANKA_FLOAT1_BF_MSK (0x00000F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_3_FFE_COEFF_SET2_BANKA_FLOAT1_BF_DEF (0x00000000)

///< set2 ffe bankA floating 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_3_FFE_COEFF_SET2_BANKA_FLOAT2_BF_OFF (12)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_3_FFE_COEFF_SET2_BANKA_FLOAT2_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_3_FFE_COEFF_SET2_BANKA_FLOAT2_BF_MSK (0x0000F000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_3_FFE_COEFF_SET2_BANKA_FLOAT2_BF_DEF (0x00000000)

///< set2 ffe bankA floating 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_3_FFE_COEFF_SET2_BANKA_FLOAT3_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_3_FFE_COEFF_SET2_BANKA_FLOAT3_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_3_FFE_COEFF_SET2_BANKA_FLOAT3_BF_MSK (0x000F0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_3_FFE_COEFF_SET2_BANKA_FLOAT3_BF_DEF (0x00000000)

///< set2 ffe bankB floating 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_3_FFE_COEFF_SET2_BANKB_FLOAT1_BF_OFF (20)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_3_FFE_COEFF_SET2_BANKB_FLOAT1_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_3_FFE_COEFF_SET2_BANKB_FLOAT1_BF_MSK (0x00F00000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_3_FFE_COEFF_SET2_BANKB_FLOAT1_BF_DEF (0x00000000)

///< set2 ffe bankB floating 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_3_FFE_COEFF_SET2_BANKB_FLOAT2_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_3_FFE_COEFF_SET2_BANKB_FLOAT2_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_3_FFE_COEFF_SET2_BANKB_FLOAT2_BF_MSK (0x0F000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_3_FFE_COEFF_SET2_BANKB_FLOAT2_BF_DEF (0x00000000)

///< set2 ffe bankB floating 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_3_FFE_COEFF_SET2_BANKB_FLOAT3_BF_OFF (28)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_3_FFE_COEFF_SET2_BANKB_FLOAT3_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_3_FFE_COEFF_SET2_BANKB_FLOAT3_BF_MSK (0xF0000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_3_FFE_COEFF_SET2_BANKB_FLOAT3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET2_4 register description at address offset 0x38
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set2_4
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET2_BANKC_FLOAT1 : 4;
    ///< set2 ffe bankC floating 1 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET2_BANKC_FLOAT2 : 4;
    ///< set2 ffe bankC floating 2 coeff
    ///< AccessType="RW/V" BitOffset="4" ResetValue="0x0"
    uint32_t FFE_COEFF_SET2_BANKC_FLOAT3 : 4;
    ///< set2 ffe bankC floating 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set2_4_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET2_4_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_4_RD_MASK (0x00000fffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_4_WR_MASK (0x00000fffU)


///< set2 ffe bankC floating 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_4_FFE_COEFF_SET2_BANKC_FLOAT1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_4_FFE_COEFF_SET2_BANKC_FLOAT1_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_4_FFE_COEFF_SET2_BANKC_FLOAT1_BF_MSK (0x0000000F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_4_FFE_COEFF_SET2_BANKC_FLOAT1_BF_DEF (0x00000000)

///< set2 ffe bankC floating 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_4_FFE_COEFF_SET2_BANKC_FLOAT2_BF_OFF ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_4_FFE_COEFF_SET2_BANKC_FLOAT2_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_4_FFE_COEFF_SET2_BANKC_FLOAT2_BF_MSK (0x000000F0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_4_FFE_COEFF_SET2_BANKC_FLOAT2_BF_DEF (0x00000000)

///< set2 ffe bankC floating 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_4_FFE_COEFF_SET2_BANKC_FLOAT3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_4_FFE_COEFF_SET2_BANKC_FLOAT3_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_4_FFE_COEFF_SET2_BANKC_FLOAT3_BF_MSK (0x00000F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_4_FFE_COEFF_SET2_BANKC_FLOAT3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET3_0 register description at address offset 0x3c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set3_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET3_COEFF_PRE3 : 6;
    ///< set3 ffe pre cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t FFE_COEFF_SET3_COEFF_PRE2 : 6;
    ///< set3 ffe pre cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t FFE_COEFF_SET3_COEFF_PRE1 : 8;
    ///< set3 ffe pre cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET3_COEFF_POST1 : 8;
    ///< set3 ffe post cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set3_0_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET3_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_0_RD_MASK (0xffff3f3fU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_0_WR_MASK (0xffff3f3fU)


///< set3 ffe pre cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_0_FFE_COEFF_SET3_COEFF_PRE3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_0_FFE_COEFF_SET3_COEFF_PRE3_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_0_FFE_COEFF_SET3_COEFF_PRE3_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_0_FFE_COEFF_SET3_COEFF_PRE3_BF_DEF (0x00000000)

///< set3 ffe pre cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_0_FFE_COEFF_SET3_COEFF_PRE2_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_0_FFE_COEFF_SET3_COEFF_PRE2_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_0_FFE_COEFF_SET3_COEFF_PRE2_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_0_FFE_COEFF_SET3_COEFF_PRE2_BF_DEF (0x00000000)

///< set3 ffe pre cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_0_FFE_COEFF_SET3_COEFF_PRE1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_0_FFE_COEFF_SET3_COEFF_PRE1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_0_FFE_COEFF_SET3_COEFF_PRE1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_0_FFE_COEFF_SET3_COEFF_PRE1_BF_DEF (0x00000000)

///< set3 ffe post cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_0_FFE_COEFF_SET3_COEFF_POST1_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_0_FFE_COEFF_SET3_COEFF_POST1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_0_FFE_COEFF_SET3_COEFF_POST1_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_0_FFE_COEFF_SET3_COEFF_POST1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET3_1 register description at address offset 0x40
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set3_1
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET3_COEFF_POST2 : 8;
    ///< set3 ffe post cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET3_COEFF_POST3 : 6;
    ///< set3 ffe post cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t FFE_COEFF_SET3_COEFF_POST4 : 6;
    ///< set3 ffe post cursor 4 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t FFE_COEFF_SET3_COEFF_POST5 : 6;
    ///< set3 ffe post cursor 5 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set3_1_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET3_1_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_1_RD_MASK (0x3f3f3fffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_1_WR_MASK (0x3f3f3fffU)


///< set3 ffe post cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_1_FFE_COEFF_SET3_COEFF_POST2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_1_FFE_COEFF_SET3_COEFF_POST2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_1_FFE_COEFF_SET3_COEFF_POST2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_1_FFE_COEFF_SET3_COEFF_POST2_BF_DEF (0x00000000)

///< set3 ffe post cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_1_FFE_COEFF_SET3_COEFF_POST3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_1_FFE_COEFF_SET3_COEFF_POST3_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_1_FFE_COEFF_SET3_COEFF_POST3_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_1_FFE_COEFF_SET3_COEFF_POST3_BF_DEF (0x00000000)

///< set3 ffe post cursor 4 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_1_FFE_COEFF_SET3_COEFF_POST4_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_1_FFE_COEFF_SET3_COEFF_POST4_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_1_FFE_COEFF_SET3_COEFF_POST4_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_1_FFE_COEFF_SET3_COEFF_POST4_BF_DEF (0x00000000)

///< set3 ffe post cursor 5 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_1_FFE_COEFF_SET3_COEFF_POST5_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_1_FFE_COEFF_SET3_COEFF_POST5_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_1_FFE_COEFF_SET3_COEFF_POST5_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_1_FFE_COEFF_SET3_COEFF_POST5_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET3_2 register description at address offset 0x44
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set3_2
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET3_COEFF_POST6 : 6;
    ///< set3 ffe post cursor 6 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t FFE_COEFF_SET3_COEFF_POST7 : 6;
    ///< set3 ffe post cursor 7 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t FFE_COEFF_SET3_COEFF_POST8 : 6;
    ///< set3 ffe post cursor 8 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t FFE_COEFF_SET3_COEFF_POST9 : 4;
    ///< set3 ffe post cursor 9 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t FFE_COEFF_SET3_COEFF_POST10 : 4;
    ///< set3 ffe post cursor 10 coeff
    ///< AccessType="RW/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set3_2_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET3_2_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_2_RD_MASK (0xff3f3f3fU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_2_WR_MASK (0xff3f3f3fU)


///< set3 ffe post cursor 6 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_2_FFE_COEFF_SET3_COEFF_POST6_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_2_FFE_COEFF_SET3_COEFF_POST6_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_2_FFE_COEFF_SET3_COEFF_POST6_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_2_FFE_COEFF_SET3_COEFF_POST6_BF_DEF (0x00000000)

///< set3 ffe post cursor 7 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_2_FFE_COEFF_SET3_COEFF_POST7_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_2_FFE_COEFF_SET3_COEFF_POST7_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_2_FFE_COEFF_SET3_COEFF_POST7_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_2_FFE_COEFF_SET3_COEFF_POST7_BF_DEF (0x00000000)

///< set3 ffe post cursor 8 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_2_FFE_COEFF_SET3_COEFF_POST8_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_2_FFE_COEFF_SET3_COEFF_POST8_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_2_FFE_COEFF_SET3_COEFF_POST8_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_2_FFE_COEFF_SET3_COEFF_POST8_BF_DEF (0x00000000)

///< set3 ffe post cursor 9 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_2_FFE_COEFF_SET3_COEFF_POST9_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_2_FFE_COEFF_SET3_COEFF_POST9_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_2_FFE_COEFF_SET3_COEFF_POST9_BF_MSK (0x0F000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_2_FFE_COEFF_SET3_COEFF_POST9_BF_DEF (0x00000000)

///< set3 ffe post cursor 10 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_2_FFE_COEFF_SET3_COEFF_POST10_BF_OFF (28)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_2_FFE_COEFF_SET3_COEFF_POST10_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_2_FFE_COEFF_SET3_COEFF_POST10_BF_MSK (0xF0000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_2_FFE_COEFF_SET3_COEFF_POST10_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET3_3 register description at address offset 0x48
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set3_3
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET3_COEFF_POST11 : 4;
    ///< set3 ffe post cursor 11 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET3_COEFF_POST12 : 4;
    ///< set3 ffe post cursor 12 coeff
    ///< AccessType="RW/V" BitOffset="4" ResetValue="0x0"
    uint32_t FFE_COEFF_SET3_BANKA_FLOAT1 : 4;
    ///< set3 ffe bankA floating 1 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET3_BANKA_FLOAT2 : 4;
    ///< set3 ffe bankA floating 2 coeff
    ///< AccessType="RW/V" BitOffset="12" ResetValue="0x0"
    uint32_t FFE_COEFF_SET3_BANKA_FLOAT3 : 4;
    ///< set3 ffe bankA floating 3 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET3_BANKB_FLOAT1 : 4;
    ///< set3 ffe bankB floating 1 coeff
    ///< AccessType="RW/V" BitOffset="20" ResetValue="0x0"
    uint32_t FFE_COEFF_SET3_BANKB_FLOAT2 : 4;
    ///< set3 ffe bankB floating 2 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t FFE_COEFF_SET3_BANKB_FLOAT3 : 4;
    ///< set3 ffe bankB floating 3 coeff
    ///< AccessType="RW/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set3_3_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET3_3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_3_WR_MASK (0xffffffffU)


///< set3 ffe post cursor 11 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_3_FFE_COEFF_SET3_COEFF_POST11_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_3_FFE_COEFF_SET3_COEFF_POST11_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_3_FFE_COEFF_SET3_COEFF_POST11_BF_MSK (0x0000000F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_3_FFE_COEFF_SET3_COEFF_POST11_BF_DEF (0x00000000)

///< set3 ffe post cursor 12 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_3_FFE_COEFF_SET3_COEFF_POST12_BF_OFF ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_3_FFE_COEFF_SET3_COEFF_POST12_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_3_FFE_COEFF_SET3_COEFF_POST12_BF_MSK (0x000000F0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_3_FFE_COEFF_SET3_COEFF_POST12_BF_DEF (0x00000000)

///< set3 ffe bankA floating 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_3_FFE_COEFF_SET3_BANKA_FLOAT1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_3_FFE_COEFF_SET3_BANKA_FLOAT1_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_3_FFE_COEFF_SET3_BANKA_FLOAT1_BF_MSK (0x00000F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_3_FFE_COEFF_SET3_BANKA_FLOAT1_BF_DEF (0x00000000)

///< set3 ffe bankA floating 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_3_FFE_COEFF_SET3_BANKA_FLOAT2_BF_OFF (12)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_3_FFE_COEFF_SET3_BANKA_FLOAT2_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_3_FFE_COEFF_SET3_BANKA_FLOAT2_BF_MSK (0x0000F000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_3_FFE_COEFF_SET3_BANKA_FLOAT2_BF_DEF (0x00000000)

///< set3 ffe bankA floating 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_3_FFE_COEFF_SET3_BANKA_FLOAT3_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_3_FFE_COEFF_SET3_BANKA_FLOAT3_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_3_FFE_COEFF_SET3_BANKA_FLOAT3_BF_MSK (0x000F0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_3_FFE_COEFF_SET3_BANKA_FLOAT3_BF_DEF (0x00000000)

///< set3 ffe bankB floating 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_3_FFE_COEFF_SET3_BANKB_FLOAT1_BF_OFF (20)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_3_FFE_COEFF_SET3_BANKB_FLOAT1_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_3_FFE_COEFF_SET3_BANKB_FLOAT1_BF_MSK (0x00F00000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_3_FFE_COEFF_SET3_BANKB_FLOAT1_BF_DEF (0x00000000)

///< set3 ffe bankB floating 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_3_FFE_COEFF_SET3_BANKB_FLOAT2_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_3_FFE_COEFF_SET3_BANKB_FLOAT2_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_3_FFE_COEFF_SET3_BANKB_FLOAT2_BF_MSK (0x0F000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_3_FFE_COEFF_SET3_BANKB_FLOAT2_BF_DEF (0x00000000)

///< set3 ffe bankB floating 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_3_FFE_COEFF_SET3_BANKB_FLOAT3_BF_OFF (28)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_3_FFE_COEFF_SET3_BANKB_FLOAT3_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_3_FFE_COEFF_SET3_BANKB_FLOAT3_BF_MSK (0xF0000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_3_FFE_COEFF_SET3_BANKB_FLOAT3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET3_4 register description at address offset 0x4c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set3_4
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET3_BANKC_FLOAT1 : 4;
    ///< set3 ffe bankC floating 1 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET3_BANKC_FLOAT2 : 4;
    ///< set3 ffe bankC floating 2 coeff
    ///< AccessType="RW/V" BitOffset="4" ResetValue="0x0"
    uint32_t FFE_COEFF_SET3_BANKC_FLOAT3 : 4;
    ///< set3 ffe bankC floating 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set3_4_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET3_4_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_4_RD_MASK (0x00000fffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_4_WR_MASK (0x00000fffU)


///< set3 ffe bankC floating 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_4_FFE_COEFF_SET3_BANKC_FLOAT1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_4_FFE_COEFF_SET3_BANKC_FLOAT1_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_4_FFE_COEFF_SET3_BANKC_FLOAT1_BF_MSK (0x0000000F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_4_FFE_COEFF_SET3_BANKC_FLOAT1_BF_DEF (0x00000000)

///< set3 ffe bankC floating 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_4_FFE_COEFF_SET3_BANKC_FLOAT2_BF_OFF ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_4_FFE_COEFF_SET3_BANKC_FLOAT2_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_4_FFE_COEFF_SET3_BANKC_FLOAT2_BF_MSK (0x000000F0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_4_FFE_COEFF_SET3_BANKC_FLOAT2_BF_DEF (0x00000000)

///< set3 ffe bankC floating 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_4_FFE_COEFF_SET3_BANKC_FLOAT3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_4_FFE_COEFF_SET3_BANKC_FLOAT3_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_4_FFE_COEFF_SET3_BANKC_FLOAT3_BF_MSK (0x00000F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_4_FFE_COEFF_SET3_BANKC_FLOAT3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET4_0 register description at address offset 0x50
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set4_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET4_COEFF_PRE3 : 6;
    ///< set4 ffe pre cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t FFE_COEFF_SET4_COEFF_PRE2 : 6;
    ///< set4 ffe pre cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t FFE_COEFF_SET4_COEFF_PRE1 : 8;
    ///< set4 ffe pre cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET4_COEFF_POST1 : 8;
    ///< set4 ffe post cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set4_0_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET4_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_0_RD_MASK (0xffff3f3fU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_0_WR_MASK (0xffff3f3fU)


///< set4 ffe pre cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_0_FFE_COEFF_SET4_COEFF_PRE3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_0_FFE_COEFF_SET4_COEFF_PRE3_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_0_FFE_COEFF_SET4_COEFF_PRE3_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_0_FFE_COEFF_SET4_COEFF_PRE3_BF_DEF (0x00000000)

///< set4 ffe pre cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_0_FFE_COEFF_SET4_COEFF_PRE2_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_0_FFE_COEFF_SET4_COEFF_PRE2_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_0_FFE_COEFF_SET4_COEFF_PRE2_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_0_FFE_COEFF_SET4_COEFF_PRE2_BF_DEF (0x00000000)

///< set4 ffe pre cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_0_FFE_COEFF_SET4_COEFF_PRE1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_0_FFE_COEFF_SET4_COEFF_PRE1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_0_FFE_COEFF_SET4_COEFF_PRE1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_0_FFE_COEFF_SET4_COEFF_PRE1_BF_DEF (0x00000000)

///< set4 ffe post cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_0_FFE_COEFF_SET4_COEFF_POST1_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_0_FFE_COEFF_SET4_COEFF_POST1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_0_FFE_COEFF_SET4_COEFF_POST1_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_0_FFE_COEFF_SET4_COEFF_POST1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET4_1 register description at address offset 0x54
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set4_1
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET4_COEFF_POST2 : 8;
    ///< set4 ffe post cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET4_COEFF_POST3 : 6;
    ///< set4 ffe post cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t FFE_COEFF_SET4_COEFF_POST4 : 6;
    ///< set4 ffe post cursor 4 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t FFE_COEFF_SET4_COEFF_POST5 : 6;
    ///< set4 ffe post cursor 5 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set4_1_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET4_1_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_1_RD_MASK (0x3f3f3fffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_1_WR_MASK (0x3f3f3fffU)


///< set4 ffe post cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_1_FFE_COEFF_SET4_COEFF_POST2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_1_FFE_COEFF_SET4_COEFF_POST2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_1_FFE_COEFF_SET4_COEFF_POST2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_1_FFE_COEFF_SET4_COEFF_POST2_BF_DEF (0x00000000)

///< set4 ffe post cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_1_FFE_COEFF_SET4_COEFF_POST3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_1_FFE_COEFF_SET4_COEFF_POST3_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_1_FFE_COEFF_SET4_COEFF_POST3_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_1_FFE_COEFF_SET4_COEFF_POST3_BF_DEF (0x00000000)

///< set4 ffe post cursor 4 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_1_FFE_COEFF_SET4_COEFF_POST4_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_1_FFE_COEFF_SET4_COEFF_POST4_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_1_FFE_COEFF_SET4_COEFF_POST4_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_1_FFE_COEFF_SET4_COEFF_POST4_BF_DEF (0x00000000)

///< set4 ffe post cursor 5 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_1_FFE_COEFF_SET4_COEFF_POST5_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_1_FFE_COEFF_SET4_COEFF_POST5_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_1_FFE_COEFF_SET4_COEFF_POST5_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_1_FFE_COEFF_SET4_COEFF_POST5_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET4_2 register description at address offset 0x58
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set4_2
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET4_COEFF_POST6 : 6;
    ///< set4 ffe post cursor 6 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t FFE_COEFF_SET4_COEFF_POST7 : 6;
    ///< set4 ffe post cursor 7 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t FFE_COEFF_SET4_COEFF_POST8 : 6;
    ///< set4 ffe post cursor 8 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t FFE_COEFF_SET4_COEFF_POST9 : 4;
    ///< set4 ffe post cursor 9 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t FFE_COEFF_SET4_COEFF_POST10 : 4;
    ///< set4 ffe post cursor 10 coeff
    ///< AccessType="RW/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set4_2_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET4_2_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_2_RD_MASK (0xff3f3f3fU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_2_WR_MASK (0xff3f3f3fU)


///< set4 ffe post cursor 6 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_2_FFE_COEFF_SET4_COEFF_POST6_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_2_FFE_COEFF_SET4_COEFF_POST6_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_2_FFE_COEFF_SET4_COEFF_POST6_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_2_FFE_COEFF_SET4_COEFF_POST6_BF_DEF (0x00000000)

///< set4 ffe post cursor 7 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_2_FFE_COEFF_SET4_COEFF_POST7_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_2_FFE_COEFF_SET4_COEFF_POST7_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_2_FFE_COEFF_SET4_COEFF_POST7_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_2_FFE_COEFF_SET4_COEFF_POST7_BF_DEF (0x00000000)

///< set4 ffe post cursor 8 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_2_FFE_COEFF_SET4_COEFF_POST8_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_2_FFE_COEFF_SET4_COEFF_POST8_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_2_FFE_COEFF_SET4_COEFF_POST8_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_2_FFE_COEFF_SET4_COEFF_POST8_BF_DEF (0x00000000)

///< set4 ffe post cursor 9 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_2_FFE_COEFF_SET4_COEFF_POST9_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_2_FFE_COEFF_SET4_COEFF_POST9_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_2_FFE_COEFF_SET4_COEFF_POST9_BF_MSK (0x0F000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_2_FFE_COEFF_SET4_COEFF_POST9_BF_DEF (0x00000000)

///< set4 ffe post cursor 10 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_2_FFE_COEFF_SET4_COEFF_POST10_BF_OFF (28)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_2_FFE_COEFF_SET4_COEFF_POST10_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_2_FFE_COEFF_SET4_COEFF_POST10_BF_MSK (0xF0000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_2_FFE_COEFF_SET4_COEFF_POST10_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET4_3 register description at address offset 0x5c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set4_3
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET4_COEFF_POST11 : 4;
    ///< set4 ffe post cursor 11 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET4_COEFF_POST12 : 4;
    ///< set4 ffe post cursor 12 coeff
    ///< AccessType="RW/V" BitOffset="4" ResetValue="0x0"
    uint32_t FFE_COEFF_SET4_BANKA_FLOAT1 : 4;
    ///< set4 ffe bankA floating 1 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET4_BANKA_FLOAT2 : 4;
    ///< set4 ffe bankA floating 2 coeff
    ///< AccessType="RW/V" BitOffset="12" ResetValue="0x0"
    uint32_t FFE_COEFF_SET4_BANKA_FLOAT3 : 4;
    ///< set4 ffe bankA floating 3 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET4_BANKB_FLOAT1 : 4;
    ///< set4 ffe bankB floating 1 coeff
    ///< AccessType="RW/V" BitOffset="20" ResetValue="0x0"
    uint32_t FFE_COEFF_SET4_BANKB_FLOAT2 : 4;
    ///< set4 ffe bankB floating 2 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t FFE_COEFF_SET4_BANKB_FLOAT3 : 4;
    ///< set4 ffe bankB floating 3 coeff
    ///< AccessType="RW/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set4_3_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET4_3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_3_WR_MASK (0xffffffffU)


///< set4 ffe post cursor 11 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_3_FFE_COEFF_SET4_COEFF_POST11_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_3_FFE_COEFF_SET4_COEFF_POST11_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_3_FFE_COEFF_SET4_COEFF_POST11_BF_MSK (0x0000000F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_3_FFE_COEFF_SET4_COEFF_POST11_BF_DEF (0x00000000)

///< set4 ffe post cursor 12 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_3_FFE_COEFF_SET4_COEFF_POST12_BF_OFF ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_3_FFE_COEFF_SET4_COEFF_POST12_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_3_FFE_COEFF_SET4_COEFF_POST12_BF_MSK (0x000000F0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_3_FFE_COEFF_SET4_COEFF_POST12_BF_DEF (0x00000000)

///< set4 ffe bankA floating 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_3_FFE_COEFF_SET4_BANKA_FLOAT1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_3_FFE_COEFF_SET4_BANKA_FLOAT1_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_3_FFE_COEFF_SET4_BANKA_FLOAT1_BF_MSK (0x00000F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_3_FFE_COEFF_SET4_BANKA_FLOAT1_BF_DEF (0x00000000)

///< set4 ffe bankA floating 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_3_FFE_COEFF_SET4_BANKA_FLOAT2_BF_OFF (12)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_3_FFE_COEFF_SET4_BANKA_FLOAT2_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_3_FFE_COEFF_SET4_BANKA_FLOAT2_BF_MSK (0x0000F000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_3_FFE_COEFF_SET4_BANKA_FLOAT2_BF_DEF (0x00000000)

///< set4 ffe bankA floating 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_3_FFE_COEFF_SET4_BANKA_FLOAT3_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_3_FFE_COEFF_SET4_BANKA_FLOAT3_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_3_FFE_COEFF_SET4_BANKA_FLOAT3_BF_MSK (0x000F0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_3_FFE_COEFF_SET4_BANKA_FLOAT3_BF_DEF (0x00000000)

///< set4 ffe bankB floating 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_3_FFE_COEFF_SET4_BANKB_FLOAT1_BF_OFF (20)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_3_FFE_COEFF_SET4_BANKB_FLOAT1_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_3_FFE_COEFF_SET4_BANKB_FLOAT1_BF_MSK (0x00F00000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_3_FFE_COEFF_SET4_BANKB_FLOAT1_BF_DEF (0x00000000)

///< set4 ffe bankB floating 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_3_FFE_COEFF_SET4_BANKB_FLOAT2_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_3_FFE_COEFF_SET4_BANKB_FLOAT2_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_3_FFE_COEFF_SET4_BANKB_FLOAT2_BF_MSK (0x0F000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_3_FFE_COEFF_SET4_BANKB_FLOAT2_BF_DEF (0x00000000)

///< set4 ffe bankB floating 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_3_FFE_COEFF_SET4_BANKB_FLOAT3_BF_OFF (28)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_3_FFE_COEFF_SET4_BANKB_FLOAT3_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_3_FFE_COEFF_SET4_BANKB_FLOAT3_BF_MSK (0xF0000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_3_FFE_COEFF_SET4_BANKB_FLOAT3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET4_4 register description at address offset 0x60
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set4_4
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET4_BANKC_FLOAT1 : 4;
    ///< set4 ffe bankC floating 1 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET4_BANKC_FLOAT2 : 4;
    ///< set4 ffe bankC floating 2 coeff
    ///< AccessType="RW/V" BitOffset="4" ResetValue="0x0"
    uint32_t FFE_COEFF_SET4_BANKC_FLOAT3 : 4;
    ///< set4 ffe bankC floating 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set4_4_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET4_4_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_4_RD_MASK (0x00000fffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_4_WR_MASK (0x00000fffU)


///< set4 ffe bankC floating 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_4_FFE_COEFF_SET4_BANKC_FLOAT1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_4_FFE_COEFF_SET4_BANKC_FLOAT1_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_4_FFE_COEFF_SET4_BANKC_FLOAT1_BF_MSK (0x0000000F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_4_FFE_COEFF_SET4_BANKC_FLOAT1_BF_DEF (0x00000000)

///< set4 ffe bankC floating 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_4_FFE_COEFF_SET4_BANKC_FLOAT2_BF_OFF ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_4_FFE_COEFF_SET4_BANKC_FLOAT2_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_4_FFE_COEFF_SET4_BANKC_FLOAT2_BF_MSK (0x000000F0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_4_FFE_COEFF_SET4_BANKC_FLOAT2_BF_DEF (0x00000000)

///< set4 ffe bankC floating 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_4_FFE_COEFF_SET4_BANKC_FLOAT3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_4_FFE_COEFF_SET4_BANKC_FLOAT3_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_4_FFE_COEFF_SET4_BANKC_FLOAT3_BF_MSK (0x00000F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_4_FFE_COEFF_SET4_BANKC_FLOAT3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET5_0 register description at address offset 0x64
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set5_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET5_COEFF_PRE3 : 6;
    ///< set5 ffe pre cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t FFE_COEFF_SET5_COEFF_PRE2 : 6;
    ///< set5 ffe pre cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t FFE_COEFF_SET5_COEFF_PRE1 : 8;
    ///< set5 ffe pre cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET5_COEFF_POST1 : 8;
    ///< set5 ffe post cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set5_0_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET5_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_0_RD_MASK (0xffff3f3fU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_0_WR_MASK (0xffff3f3fU)


///< set5 ffe pre cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_0_FFE_COEFF_SET5_COEFF_PRE3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_0_FFE_COEFF_SET5_COEFF_PRE3_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_0_FFE_COEFF_SET5_COEFF_PRE3_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_0_FFE_COEFF_SET5_COEFF_PRE3_BF_DEF (0x00000000)

///< set5 ffe pre cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_0_FFE_COEFF_SET5_COEFF_PRE2_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_0_FFE_COEFF_SET5_COEFF_PRE2_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_0_FFE_COEFF_SET5_COEFF_PRE2_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_0_FFE_COEFF_SET5_COEFF_PRE2_BF_DEF (0x00000000)

///< set5 ffe pre cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_0_FFE_COEFF_SET5_COEFF_PRE1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_0_FFE_COEFF_SET5_COEFF_PRE1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_0_FFE_COEFF_SET5_COEFF_PRE1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_0_FFE_COEFF_SET5_COEFF_PRE1_BF_DEF (0x00000000)

///< set5 ffe post cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_0_FFE_COEFF_SET5_COEFF_POST1_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_0_FFE_COEFF_SET5_COEFF_POST1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_0_FFE_COEFF_SET5_COEFF_POST1_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_0_FFE_COEFF_SET5_COEFF_POST1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET5_1 register description at address offset 0x68
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set5_1
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET5_COEFF_POST2 : 8;
    ///< set5 ffe post cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET5_COEFF_POST3 : 6;
    ///< set5 ffe post cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t FFE_COEFF_SET5_COEFF_POST4 : 6;
    ///< set5 ffe post cursor 4 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t FFE_COEFF_SET5_COEFF_POST5 : 6;
    ///< set5 ffe post cursor 5 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set5_1_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET5_1_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_1_RD_MASK (0x3f3f3fffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_1_WR_MASK (0x3f3f3fffU)


///< set5 ffe post cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_1_FFE_COEFF_SET5_COEFF_POST2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_1_FFE_COEFF_SET5_COEFF_POST2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_1_FFE_COEFF_SET5_COEFF_POST2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_1_FFE_COEFF_SET5_COEFF_POST2_BF_DEF (0x00000000)

///< set5 ffe post cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_1_FFE_COEFF_SET5_COEFF_POST3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_1_FFE_COEFF_SET5_COEFF_POST3_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_1_FFE_COEFF_SET5_COEFF_POST3_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_1_FFE_COEFF_SET5_COEFF_POST3_BF_DEF (0x00000000)

///< set5 ffe post cursor 4 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_1_FFE_COEFF_SET5_COEFF_POST4_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_1_FFE_COEFF_SET5_COEFF_POST4_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_1_FFE_COEFF_SET5_COEFF_POST4_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_1_FFE_COEFF_SET5_COEFF_POST4_BF_DEF (0x00000000)

///< set5 ffe post cursor 5 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_1_FFE_COEFF_SET5_COEFF_POST5_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_1_FFE_COEFF_SET5_COEFF_POST5_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_1_FFE_COEFF_SET5_COEFF_POST5_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_1_FFE_COEFF_SET5_COEFF_POST5_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET5_2 register description at address offset 0x6c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set5_2
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET5_COEFF_POST6 : 6;
    ///< set5 ffe post cursor 6 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t FFE_COEFF_SET5_COEFF_POST7 : 6;
    ///< set5 ffe post cursor 7 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t FFE_COEFF_SET5_COEFF_POST8 : 6;
    ///< set5 ffe post cursor 8 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t FFE_COEFF_SET5_COEFF_POST9 : 4;
    ///< set5 ffe post cursor 9 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t FFE_COEFF_SET5_COEFF_POST10 : 4;
    ///< set5 ffe post cursor 10 coeff
    ///< AccessType="RW/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set5_2_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET5_2_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_2_RD_MASK (0xff3f3f3fU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_2_WR_MASK (0xff3f3f3fU)


///< set5 ffe post cursor 6 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_2_FFE_COEFF_SET5_COEFF_POST6_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_2_FFE_COEFF_SET5_COEFF_POST6_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_2_FFE_COEFF_SET5_COEFF_POST6_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_2_FFE_COEFF_SET5_COEFF_POST6_BF_DEF (0x00000000)

///< set5 ffe post cursor 7 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_2_FFE_COEFF_SET5_COEFF_POST7_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_2_FFE_COEFF_SET5_COEFF_POST7_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_2_FFE_COEFF_SET5_COEFF_POST7_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_2_FFE_COEFF_SET5_COEFF_POST7_BF_DEF (0x00000000)

///< set5 ffe post cursor 8 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_2_FFE_COEFF_SET5_COEFF_POST8_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_2_FFE_COEFF_SET5_COEFF_POST8_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_2_FFE_COEFF_SET5_COEFF_POST8_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_2_FFE_COEFF_SET5_COEFF_POST8_BF_DEF (0x00000000)

///< set5 ffe post cursor 9 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_2_FFE_COEFF_SET5_COEFF_POST9_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_2_FFE_COEFF_SET5_COEFF_POST9_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_2_FFE_COEFF_SET5_COEFF_POST9_BF_MSK (0x0F000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_2_FFE_COEFF_SET5_COEFF_POST9_BF_DEF (0x00000000)

///< set5 ffe post cursor 10 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_2_FFE_COEFF_SET5_COEFF_POST10_BF_OFF (28)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_2_FFE_COEFF_SET5_COEFF_POST10_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_2_FFE_COEFF_SET5_COEFF_POST10_BF_MSK (0xF0000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_2_FFE_COEFF_SET5_COEFF_POST10_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET5_3 register description at address offset 0x70
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set5_3
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET5_COEFF_POST11 : 4;
    ///< set5 ffe post cursor 11 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET5_COEFF_POST12 : 4;
    ///< set5 ffe post cursor 12 coeff
    ///< AccessType="RW/V" BitOffset="4" ResetValue="0x0"
    uint32_t FFE_COEFF_SET5_BANKA_FLOAT1 : 4;
    ///< set5 ffe bankA floating 1 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET5_BANKA_FLOAT2 : 4;
    ///< set5 ffe bankA floating 2 coeff
    ///< AccessType="RW/V" BitOffset="12" ResetValue="0x0"
    uint32_t FFE_COEFF_SET5_BANKA_FLOAT3 : 4;
    ///< set5 ffe bankA floating 3 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET5_BANKB_FLOAT1 : 4;
    ///< set5 ffe bankB floating 1 coeff
    ///< AccessType="RW/V" BitOffset="20" ResetValue="0x0"
    uint32_t FFE_COEFF_SET5_BANKB_FLOAT2 : 4;
    ///< set5 ffe bankB floating 2 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t FFE_COEFF_SET5_BANKB_FLOAT3 : 4;
    ///< set5 ffe bankB floating 3 coeff
    ///< AccessType="RW/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set5_3_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET5_3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_3_WR_MASK (0xffffffffU)


///< set5 ffe post cursor 11 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_3_FFE_COEFF_SET5_COEFF_POST11_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_3_FFE_COEFF_SET5_COEFF_POST11_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_3_FFE_COEFF_SET5_COEFF_POST11_BF_MSK (0x0000000F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_3_FFE_COEFF_SET5_COEFF_POST11_BF_DEF (0x00000000)

///< set5 ffe post cursor 12 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_3_FFE_COEFF_SET5_COEFF_POST12_BF_OFF ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_3_FFE_COEFF_SET5_COEFF_POST12_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_3_FFE_COEFF_SET5_COEFF_POST12_BF_MSK (0x000000F0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_3_FFE_COEFF_SET5_COEFF_POST12_BF_DEF (0x00000000)

///< set5 ffe bankA floating 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_3_FFE_COEFF_SET5_BANKA_FLOAT1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_3_FFE_COEFF_SET5_BANKA_FLOAT1_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_3_FFE_COEFF_SET5_BANKA_FLOAT1_BF_MSK (0x00000F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_3_FFE_COEFF_SET5_BANKA_FLOAT1_BF_DEF (0x00000000)

///< set5 ffe bankA floating 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_3_FFE_COEFF_SET5_BANKA_FLOAT2_BF_OFF (12)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_3_FFE_COEFF_SET5_BANKA_FLOAT2_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_3_FFE_COEFF_SET5_BANKA_FLOAT2_BF_MSK (0x0000F000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_3_FFE_COEFF_SET5_BANKA_FLOAT2_BF_DEF (0x00000000)

///< set5 ffe bankA floating 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_3_FFE_COEFF_SET5_BANKA_FLOAT3_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_3_FFE_COEFF_SET5_BANKA_FLOAT3_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_3_FFE_COEFF_SET5_BANKA_FLOAT3_BF_MSK (0x000F0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_3_FFE_COEFF_SET5_BANKA_FLOAT3_BF_DEF (0x00000000)

///< set5 ffe bankB floating 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_3_FFE_COEFF_SET5_BANKB_FLOAT1_BF_OFF (20)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_3_FFE_COEFF_SET5_BANKB_FLOAT1_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_3_FFE_COEFF_SET5_BANKB_FLOAT1_BF_MSK (0x00F00000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_3_FFE_COEFF_SET5_BANKB_FLOAT1_BF_DEF (0x00000000)

///< set5 ffe bankB floating 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_3_FFE_COEFF_SET5_BANKB_FLOAT2_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_3_FFE_COEFF_SET5_BANKB_FLOAT2_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_3_FFE_COEFF_SET5_BANKB_FLOAT2_BF_MSK (0x0F000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_3_FFE_COEFF_SET5_BANKB_FLOAT2_BF_DEF (0x00000000)

///< set5 ffe bankB floating 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_3_FFE_COEFF_SET5_BANKB_FLOAT3_BF_OFF (28)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_3_FFE_COEFF_SET5_BANKB_FLOAT3_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_3_FFE_COEFF_SET5_BANKB_FLOAT3_BF_MSK (0xF0000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_3_FFE_COEFF_SET5_BANKB_FLOAT3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET5_4 register description at address offset 0x74
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set5_4
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET5_BANKC_FLOAT1 : 4;
    ///< set5 ffe bankC floating 1 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET5_BANKC_FLOAT2 : 4;
    ///< set5 ffe bankC floating 2 coeff
    ///< AccessType="RW/V" BitOffset="4" ResetValue="0x0"
    uint32_t FFE_COEFF_SET5_BANKC_FLOAT3 : 4;
    ///< set5 ffe bankC floating 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set5_4_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET5_4_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_4_RD_MASK (0x00000fffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_4_WR_MASK (0x00000fffU)


///< set5 ffe bankC floating 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_4_FFE_COEFF_SET5_BANKC_FLOAT1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_4_FFE_COEFF_SET5_BANKC_FLOAT1_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_4_FFE_COEFF_SET5_BANKC_FLOAT1_BF_MSK (0x0000000F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_4_FFE_COEFF_SET5_BANKC_FLOAT1_BF_DEF (0x00000000)

///< set5 ffe bankC floating 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_4_FFE_COEFF_SET5_BANKC_FLOAT2_BF_OFF ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_4_FFE_COEFF_SET5_BANKC_FLOAT2_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_4_FFE_COEFF_SET5_BANKC_FLOAT2_BF_MSK (0x000000F0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_4_FFE_COEFF_SET5_BANKC_FLOAT2_BF_DEF (0x00000000)

///< set5 ffe bankC floating 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_4_FFE_COEFF_SET5_BANKC_FLOAT3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_4_FFE_COEFF_SET5_BANKC_FLOAT3_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_4_FFE_COEFF_SET5_BANKC_FLOAT3_BF_MSK (0x00000F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_4_FFE_COEFF_SET5_BANKC_FLOAT3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET6_0 register description at address offset 0x78
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set6_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET6_COEFF_PRE3 : 6;
    ///< set6 ffe pre cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t FFE_COEFF_SET6_COEFF_PRE2 : 6;
    ///< set6 ffe pre cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t FFE_COEFF_SET6_COEFF_PRE1 : 8;
    ///< set6 ffe pre cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET6_COEFF_POST1 : 8;
    ///< set6 ffe post cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set6_0_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET6_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_0_RD_MASK (0xffff3f3fU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_0_WR_MASK (0xffff3f3fU)


///< set6 ffe pre cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_0_FFE_COEFF_SET6_COEFF_PRE3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_0_FFE_COEFF_SET6_COEFF_PRE3_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_0_FFE_COEFF_SET6_COEFF_PRE3_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_0_FFE_COEFF_SET6_COEFF_PRE3_BF_DEF (0x00000000)

///< set6 ffe pre cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_0_FFE_COEFF_SET6_COEFF_PRE2_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_0_FFE_COEFF_SET6_COEFF_PRE2_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_0_FFE_COEFF_SET6_COEFF_PRE2_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_0_FFE_COEFF_SET6_COEFF_PRE2_BF_DEF (0x00000000)

///< set6 ffe pre cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_0_FFE_COEFF_SET6_COEFF_PRE1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_0_FFE_COEFF_SET6_COEFF_PRE1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_0_FFE_COEFF_SET6_COEFF_PRE1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_0_FFE_COEFF_SET6_COEFF_PRE1_BF_DEF (0x00000000)

///< set6 ffe post cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_0_FFE_COEFF_SET6_COEFF_POST1_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_0_FFE_COEFF_SET6_COEFF_POST1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_0_FFE_COEFF_SET6_COEFF_POST1_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_0_FFE_COEFF_SET6_COEFF_POST1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET6_1 register description at address offset 0x7c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set6_1
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET6_COEFF_POST2 : 8;
    ///< set6 ffe post cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET6_COEFF_POST3 : 6;
    ///< set6 ffe post cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t FFE_COEFF_SET6_COEFF_POST4 : 6;
    ///< set6 ffe post cursor 4 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t FFE_COEFF_SET6_COEFF_POST5 : 6;
    ///< set6 ffe post cursor 5 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set6_1_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET6_1_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_1_RD_MASK (0x3f3f3fffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_1_WR_MASK (0x3f3f3fffU)


///< set6 ffe post cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_1_FFE_COEFF_SET6_COEFF_POST2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_1_FFE_COEFF_SET6_COEFF_POST2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_1_FFE_COEFF_SET6_COEFF_POST2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_1_FFE_COEFF_SET6_COEFF_POST2_BF_DEF (0x00000000)

///< set6 ffe post cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_1_FFE_COEFF_SET6_COEFF_POST3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_1_FFE_COEFF_SET6_COEFF_POST3_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_1_FFE_COEFF_SET6_COEFF_POST3_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_1_FFE_COEFF_SET6_COEFF_POST3_BF_DEF (0x00000000)

///< set6 ffe post cursor 4 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_1_FFE_COEFF_SET6_COEFF_POST4_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_1_FFE_COEFF_SET6_COEFF_POST4_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_1_FFE_COEFF_SET6_COEFF_POST4_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_1_FFE_COEFF_SET6_COEFF_POST4_BF_DEF (0x00000000)

///< set6 ffe post cursor 5 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_1_FFE_COEFF_SET6_COEFF_POST5_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_1_FFE_COEFF_SET6_COEFF_POST5_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_1_FFE_COEFF_SET6_COEFF_POST5_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_1_FFE_COEFF_SET6_COEFF_POST5_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET6_2 register description at address offset 0x80
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set6_2
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET6_COEFF_POST6 : 6;
    ///< set6 ffe post cursor 6 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t FFE_COEFF_SET6_COEFF_POST7 : 6;
    ///< set6 ffe post cursor 7 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t FFE_COEFF_SET6_COEFF_POST8 : 6;
    ///< set6 ffe post cursor 8 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t FFE_COEFF_SET6_COEFF_POST9 : 4;
    ///< set6 ffe post cursor 9 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t FFE_COEFF_SET6_COEFF_POST10 : 4;
    ///< set6 ffe post cursor 10 coeff
    ///< AccessType="RW/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set6_2_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET6_2_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_2_RD_MASK (0xff3f3f3fU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_2_WR_MASK (0xff3f3f3fU)


///< set6 ffe post cursor 6 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_2_FFE_COEFF_SET6_COEFF_POST6_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_2_FFE_COEFF_SET6_COEFF_POST6_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_2_FFE_COEFF_SET6_COEFF_POST6_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_2_FFE_COEFF_SET6_COEFF_POST6_BF_DEF (0x00000000)

///< set6 ffe post cursor 7 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_2_FFE_COEFF_SET6_COEFF_POST7_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_2_FFE_COEFF_SET6_COEFF_POST7_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_2_FFE_COEFF_SET6_COEFF_POST7_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_2_FFE_COEFF_SET6_COEFF_POST7_BF_DEF (0x00000000)

///< set6 ffe post cursor 8 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_2_FFE_COEFF_SET6_COEFF_POST8_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_2_FFE_COEFF_SET6_COEFF_POST8_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_2_FFE_COEFF_SET6_COEFF_POST8_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_2_FFE_COEFF_SET6_COEFF_POST8_BF_DEF (0x00000000)

///< set6 ffe post cursor 9 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_2_FFE_COEFF_SET6_COEFF_POST9_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_2_FFE_COEFF_SET6_COEFF_POST9_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_2_FFE_COEFF_SET6_COEFF_POST9_BF_MSK (0x0F000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_2_FFE_COEFF_SET6_COEFF_POST9_BF_DEF (0x00000000)

///< set6 ffe post cursor 10 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_2_FFE_COEFF_SET6_COEFF_POST10_BF_OFF (28)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_2_FFE_COEFF_SET6_COEFF_POST10_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_2_FFE_COEFF_SET6_COEFF_POST10_BF_MSK (0xF0000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_2_FFE_COEFF_SET6_COEFF_POST10_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET6_3 register description at address offset 0x84
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set6_3
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET6_COEFF_POST11 : 4;
    ///< set6 ffe post cursor 11 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET6_COEFF_POST12 : 4;
    ///< set6 ffe post cursor 12 coeff
    ///< AccessType="RW/V" BitOffset="4" ResetValue="0x0"
    uint32_t FFE_COEFF_SET6_BANKA_FLOAT1 : 4;
    ///< set6 ffe bankA floating 1 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET6_BANKA_FLOAT2 : 4;
    ///< set6 ffe bankA floating 2 coeff
    ///< AccessType="RW/V" BitOffset="12" ResetValue="0x0"
    uint32_t FFE_COEFF_SET6_BANKA_FLOAT3 : 4;
    ///< set6 ffe bankA floating 3 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET6_BANKB_FLOAT1 : 4;
    ///< set6 ffe bankB floating 1 coeff
    ///< AccessType="RW/V" BitOffset="20" ResetValue="0x0"
    uint32_t FFE_COEFF_SET6_BANKB_FLOAT2 : 4;
    ///< set6 ffe bankB floating 2 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t FFE_COEFF_SET6_BANKB_FLOAT3 : 4;
    ///< set6 ffe bankB floating 3 coeff
    ///< AccessType="RW/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set6_3_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET6_3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_3_WR_MASK (0xffffffffU)


///< set6 ffe post cursor 11 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_3_FFE_COEFF_SET6_COEFF_POST11_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_3_FFE_COEFF_SET6_COEFF_POST11_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_3_FFE_COEFF_SET6_COEFF_POST11_BF_MSK (0x0000000F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_3_FFE_COEFF_SET6_COEFF_POST11_BF_DEF (0x00000000)

///< set6 ffe post cursor 12 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_3_FFE_COEFF_SET6_COEFF_POST12_BF_OFF ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_3_FFE_COEFF_SET6_COEFF_POST12_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_3_FFE_COEFF_SET6_COEFF_POST12_BF_MSK (0x000000F0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_3_FFE_COEFF_SET6_COEFF_POST12_BF_DEF (0x00000000)

///< set6 ffe bankA floating 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_3_FFE_COEFF_SET6_BANKA_FLOAT1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_3_FFE_COEFF_SET6_BANKA_FLOAT1_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_3_FFE_COEFF_SET6_BANKA_FLOAT1_BF_MSK (0x00000F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_3_FFE_COEFF_SET6_BANKA_FLOAT1_BF_DEF (0x00000000)

///< set6 ffe bankA floating 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_3_FFE_COEFF_SET6_BANKA_FLOAT2_BF_OFF (12)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_3_FFE_COEFF_SET6_BANKA_FLOAT2_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_3_FFE_COEFF_SET6_BANKA_FLOAT2_BF_MSK (0x0000F000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_3_FFE_COEFF_SET6_BANKA_FLOAT2_BF_DEF (0x00000000)

///< set6 ffe bankA floating 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_3_FFE_COEFF_SET6_BANKA_FLOAT3_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_3_FFE_COEFF_SET6_BANKA_FLOAT3_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_3_FFE_COEFF_SET6_BANKA_FLOAT3_BF_MSK (0x000F0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_3_FFE_COEFF_SET6_BANKA_FLOAT3_BF_DEF (0x00000000)

///< set6 ffe bankB floating 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_3_FFE_COEFF_SET6_BANKB_FLOAT1_BF_OFF (20)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_3_FFE_COEFF_SET6_BANKB_FLOAT1_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_3_FFE_COEFF_SET6_BANKB_FLOAT1_BF_MSK (0x00F00000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_3_FFE_COEFF_SET6_BANKB_FLOAT1_BF_DEF (0x00000000)

///< set6 ffe bankB floating 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_3_FFE_COEFF_SET6_BANKB_FLOAT2_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_3_FFE_COEFF_SET6_BANKB_FLOAT2_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_3_FFE_COEFF_SET6_BANKB_FLOAT2_BF_MSK (0x0F000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_3_FFE_COEFF_SET6_BANKB_FLOAT2_BF_DEF (0x00000000)

///< set6 ffe bankB floating 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_3_FFE_COEFF_SET6_BANKB_FLOAT3_BF_OFF (28)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_3_FFE_COEFF_SET6_BANKB_FLOAT3_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_3_FFE_COEFF_SET6_BANKB_FLOAT3_BF_MSK (0xF0000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_3_FFE_COEFF_SET6_BANKB_FLOAT3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET6_4 register description at address offset 0x88
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set6_4
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET6_BANKC_FLOAT1 : 4;
    ///< set6 ffe bankC floating 1 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET6_BANKC_FLOAT2 : 4;
    ///< set6 ffe bankC floating 2 coeff
    ///< AccessType="RW/V" BitOffset="4" ResetValue="0x0"
    uint32_t FFE_COEFF_SET6_BANKC_FLOAT3 : 4;
    ///< set6 ffe bankC floating 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set6_4_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET6_4_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_4_RD_MASK (0x00000fffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_4_WR_MASK (0x00000fffU)


///< set6 ffe bankC floating 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_4_FFE_COEFF_SET6_BANKC_FLOAT1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_4_FFE_COEFF_SET6_BANKC_FLOAT1_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_4_FFE_COEFF_SET6_BANKC_FLOAT1_BF_MSK (0x0000000F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_4_FFE_COEFF_SET6_BANKC_FLOAT1_BF_DEF (0x00000000)

///< set6 ffe bankC floating 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_4_FFE_COEFF_SET6_BANKC_FLOAT2_BF_OFF ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_4_FFE_COEFF_SET6_BANKC_FLOAT2_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_4_FFE_COEFF_SET6_BANKC_FLOAT2_BF_MSK (0x000000F0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_4_FFE_COEFF_SET6_BANKC_FLOAT2_BF_DEF (0x00000000)

///< set6 ffe bankC floating 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_4_FFE_COEFF_SET6_BANKC_FLOAT3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_4_FFE_COEFF_SET6_BANKC_FLOAT3_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_4_FFE_COEFF_SET6_BANKC_FLOAT3_BF_MSK (0x00000F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_4_FFE_COEFF_SET6_BANKC_FLOAT3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET7_0 register description at address offset 0x8c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set7_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET7_COEFF_PRE3 : 6;
    ///< set7 ffe pre cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t FFE_COEFF_SET7_COEFF_PRE2 : 6;
    ///< set7 ffe pre cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t FFE_COEFF_SET7_COEFF_PRE1 : 8;
    ///< set7 ffe pre cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET7_COEFF_POST1 : 8;
    ///< set7 ffe post cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set7_0_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET7_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_0_RD_MASK (0xffff3f3fU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_0_WR_MASK (0xffff3f3fU)


///< set7 ffe pre cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_0_FFE_COEFF_SET7_COEFF_PRE3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_0_FFE_COEFF_SET7_COEFF_PRE3_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_0_FFE_COEFF_SET7_COEFF_PRE3_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_0_FFE_COEFF_SET7_COEFF_PRE3_BF_DEF (0x00000000)

///< set7 ffe pre cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_0_FFE_COEFF_SET7_COEFF_PRE2_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_0_FFE_COEFF_SET7_COEFF_PRE2_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_0_FFE_COEFF_SET7_COEFF_PRE2_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_0_FFE_COEFF_SET7_COEFF_PRE2_BF_DEF (0x00000000)

///< set7 ffe pre cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_0_FFE_COEFF_SET7_COEFF_PRE1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_0_FFE_COEFF_SET7_COEFF_PRE1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_0_FFE_COEFF_SET7_COEFF_PRE1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_0_FFE_COEFF_SET7_COEFF_PRE1_BF_DEF (0x00000000)

///< set7 ffe post cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_0_FFE_COEFF_SET7_COEFF_POST1_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_0_FFE_COEFF_SET7_COEFF_POST1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_0_FFE_COEFF_SET7_COEFF_POST1_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_0_FFE_COEFF_SET7_COEFF_POST1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET7_1 register description at address offset 0x90
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set7_1
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET7_COEFF_POST2 : 8;
    ///< set7 ffe post cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET7_COEFF_POST3 : 6;
    ///< set7 ffe post cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t FFE_COEFF_SET7_COEFF_POST4 : 6;
    ///< set7 ffe post cursor 4 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t FFE_COEFF_SET7_COEFF_POST5 : 6;
    ///< set7 ffe post cursor 5 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set7_1_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET7_1_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_1_RD_MASK (0x3f3f3fffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_1_WR_MASK (0x3f3f3fffU)


///< set7 ffe post cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_1_FFE_COEFF_SET7_COEFF_POST2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_1_FFE_COEFF_SET7_COEFF_POST2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_1_FFE_COEFF_SET7_COEFF_POST2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_1_FFE_COEFF_SET7_COEFF_POST2_BF_DEF (0x00000000)

///< set7 ffe post cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_1_FFE_COEFF_SET7_COEFF_POST3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_1_FFE_COEFF_SET7_COEFF_POST3_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_1_FFE_COEFF_SET7_COEFF_POST3_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_1_FFE_COEFF_SET7_COEFF_POST3_BF_DEF (0x00000000)

///< set7 ffe post cursor 4 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_1_FFE_COEFF_SET7_COEFF_POST4_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_1_FFE_COEFF_SET7_COEFF_POST4_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_1_FFE_COEFF_SET7_COEFF_POST4_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_1_FFE_COEFF_SET7_COEFF_POST4_BF_DEF (0x00000000)

///< set7 ffe post cursor 5 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_1_FFE_COEFF_SET7_COEFF_POST5_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_1_FFE_COEFF_SET7_COEFF_POST5_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_1_FFE_COEFF_SET7_COEFF_POST5_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_1_FFE_COEFF_SET7_COEFF_POST5_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET7_2 register description at address offset 0x94
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set7_2
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET7_COEFF_POST6 : 6;
    ///< set7 ffe post cursor 6 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t FFE_COEFF_SET7_COEFF_POST7 : 6;
    ///< set7 ffe post cursor 7 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t FFE_COEFF_SET7_COEFF_POST8 : 6;
    ///< set7 ffe post cursor 8 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t FFE_COEFF_SET7_COEFF_POST9 : 4;
    ///< set7 ffe post cursor 9 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t FFE_COEFF_SET7_COEFF_POST10 : 4;
    ///< set7 ffe post cursor 10 coeff
    ///< AccessType="RW/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set7_2_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET7_2_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_2_RD_MASK (0xff3f3f3fU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_2_WR_MASK (0xff3f3f3fU)


///< set7 ffe post cursor 6 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_2_FFE_COEFF_SET7_COEFF_POST6_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_2_FFE_COEFF_SET7_COEFF_POST6_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_2_FFE_COEFF_SET7_COEFF_POST6_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_2_FFE_COEFF_SET7_COEFF_POST6_BF_DEF (0x00000000)

///< set7 ffe post cursor 7 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_2_FFE_COEFF_SET7_COEFF_POST7_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_2_FFE_COEFF_SET7_COEFF_POST7_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_2_FFE_COEFF_SET7_COEFF_POST7_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_2_FFE_COEFF_SET7_COEFF_POST7_BF_DEF (0x00000000)

///< set7 ffe post cursor 8 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_2_FFE_COEFF_SET7_COEFF_POST8_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_2_FFE_COEFF_SET7_COEFF_POST8_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_2_FFE_COEFF_SET7_COEFF_POST8_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_2_FFE_COEFF_SET7_COEFF_POST8_BF_DEF (0x00000000)

///< set7 ffe post cursor 9 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_2_FFE_COEFF_SET7_COEFF_POST9_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_2_FFE_COEFF_SET7_COEFF_POST9_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_2_FFE_COEFF_SET7_COEFF_POST9_BF_MSK (0x0F000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_2_FFE_COEFF_SET7_COEFF_POST9_BF_DEF (0x00000000)

///< set7 ffe post cursor 10 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_2_FFE_COEFF_SET7_COEFF_POST10_BF_OFF (28)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_2_FFE_COEFF_SET7_COEFF_POST10_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_2_FFE_COEFF_SET7_COEFF_POST10_BF_MSK (0xF0000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_2_FFE_COEFF_SET7_COEFF_POST10_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET7_3 register description at address offset 0x98
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set7_3
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET7_COEFF_POST11 : 4;
    ///< set7 ffe post cursor 11 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET7_COEFF_POST12 : 4;
    ///< set7 ffe post cursor 12 coeff
    ///< AccessType="RW/V" BitOffset="4" ResetValue="0x0"
    uint32_t FFE_COEFF_SET7_BANKA_FLOAT1 : 4;
    ///< set7 ffe bankA floating 1 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET7_BANKA_FLOAT2 : 4;
    ///< set7 ffe bankA floating 2 coeff
    ///< AccessType="RW/V" BitOffset="12" ResetValue="0x0"
    uint32_t FFE_COEFF_SET7_BANKA_FLOAT3 : 4;
    ///< set7 ffe bankA floating 3 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET7_BANKB_FLOAT1 : 4;
    ///< set7 ffe bankB floating 1 coeff
    ///< AccessType="RW/V" BitOffset="20" ResetValue="0x0"
    uint32_t FFE_COEFF_SET7_BANKB_FLOAT2 : 4;
    ///< set7 ffe bankB floating 2 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t FFE_COEFF_SET7_BANKB_FLOAT3 : 4;
    ///< set7 ffe bankB floating 3 coeff
    ///< AccessType="RW/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set7_3_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET7_3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_3_WR_MASK (0xffffffffU)


///< set7 ffe post cursor 11 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_3_FFE_COEFF_SET7_COEFF_POST11_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_3_FFE_COEFF_SET7_COEFF_POST11_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_3_FFE_COEFF_SET7_COEFF_POST11_BF_MSK (0x0000000F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_3_FFE_COEFF_SET7_COEFF_POST11_BF_DEF (0x00000000)

///< set7 ffe post cursor 12 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_3_FFE_COEFF_SET7_COEFF_POST12_BF_OFF ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_3_FFE_COEFF_SET7_COEFF_POST12_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_3_FFE_COEFF_SET7_COEFF_POST12_BF_MSK (0x000000F0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_3_FFE_COEFF_SET7_COEFF_POST12_BF_DEF (0x00000000)

///< set7 ffe bankA floating 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_3_FFE_COEFF_SET7_BANKA_FLOAT1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_3_FFE_COEFF_SET7_BANKA_FLOAT1_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_3_FFE_COEFF_SET7_BANKA_FLOAT1_BF_MSK (0x00000F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_3_FFE_COEFF_SET7_BANKA_FLOAT1_BF_DEF (0x00000000)

///< set7 ffe bankA floating 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_3_FFE_COEFF_SET7_BANKA_FLOAT2_BF_OFF (12)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_3_FFE_COEFF_SET7_BANKA_FLOAT2_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_3_FFE_COEFF_SET7_BANKA_FLOAT2_BF_MSK (0x0000F000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_3_FFE_COEFF_SET7_BANKA_FLOAT2_BF_DEF (0x00000000)

///< set7 ffe bankA floating 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_3_FFE_COEFF_SET7_BANKA_FLOAT3_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_3_FFE_COEFF_SET7_BANKA_FLOAT3_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_3_FFE_COEFF_SET7_BANKA_FLOAT3_BF_MSK (0x000F0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_3_FFE_COEFF_SET7_BANKA_FLOAT3_BF_DEF (0x00000000)

///< set7 ffe bankB floating 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_3_FFE_COEFF_SET7_BANKB_FLOAT1_BF_OFF (20)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_3_FFE_COEFF_SET7_BANKB_FLOAT1_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_3_FFE_COEFF_SET7_BANKB_FLOAT1_BF_MSK (0x00F00000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_3_FFE_COEFF_SET7_BANKB_FLOAT1_BF_DEF (0x00000000)

///< set7 ffe bankB floating 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_3_FFE_COEFF_SET7_BANKB_FLOAT2_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_3_FFE_COEFF_SET7_BANKB_FLOAT2_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_3_FFE_COEFF_SET7_BANKB_FLOAT2_BF_MSK (0x0F000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_3_FFE_COEFF_SET7_BANKB_FLOAT2_BF_DEF (0x00000000)

///< set7 ffe bankB floating 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_3_FFE_COEFF_SET7_BANKB_FLOAT3_BF_OFF (28)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_3_FFE_COEFF_SET7_BANKB_FLOAT3_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_3_FFE_COEFF_SET7_BANKB_FLOAT3_BF_MSK (0xF0000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_3_FFE_COEFF_SET7_BANKB_FLOAT3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET7_4 register description at address offset 0x9c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set7_4
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET7_BANKC_FLOAT1 : 4;
    ///< set7 ffe bankC floating 1 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET7_BANKC_FLOAT2 : 4;
    ///< set7 ffe bankC floating 2 coeff
    ///< AccessType="RW/V" BitOffset="4" ResetValue="0x0"
    uint32_t FFE_COEFF_SET7_BANKC_FLOAT3 : 4;
    ///< set7 ffe bankC floating 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set7_4_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET7_4_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_4_RD_MASK (0x00000fffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_4_WR_MASK (0x00000fffU)


///< set7 ffe bankC floating 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_4_FFE_COEFF_SET7_BANKC_FLOAT1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_4_FFE_COEFF_SET7_BANKC_FLOAT1_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_4_FFE_COEFF_SET7_BANKC_FLOAT1_BF_MSK (0x0000000F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_4_FFE_COEFF_SET7_BANKC_FLOAT1_BF_DEF (0x00000000)

///< set7 ffe bankC floating 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_4_FFE_COEFF_SET7_BANKC_FLOAT2_BF_OFF ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_4_FFE_COEFF_SET7_BANKC_FLOAT2_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_4_FFE_COEFF_SET7_BANKC_FLOAT2_BF_MSK (0x000000F0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_4_FFE_COEFF_SET7_BANKC_FLOAT2_BF_DEF (0x00000000)

///< set7 ffe bankC floating 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_4_FFE_COEFF_SET7_BANKC_FLOAT3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_4_FFE_COEFF_SET7_BANKC_FLOAT3_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_4_FFE_COEFF_SET7_BANKC_FLOAT3_BF_MSK (0x00000F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_4_FFE_COEFF_SET7_BANKC_FLOAT3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET8_0 register description at address offset 0xa0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set8_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET8_COEFF_PRE3 : 6;
    ///< set8 ffe pre cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t FFE_COEFF_SET8_COEFF_PRE2 : 6;
    ///< set8 ffe pre cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t FFE_COEFF_SET8_COEFF_PRE1 : 8;
    ///< set8 ffe pre cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET8_COEFF_POST1 : 8;
    ///< set8 ffe post cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set8_0_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET8_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_0_RD_MASK (0xffff3f3fU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_0_WR_MASK (0xffff3f3fU)


///< set8 ffe pre cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_0_FFE_COEFF_SET8_COEFF_PRE3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_0_FFE_COEFF_SET8_COEFF_PRE3_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_0_FFE_COEFF_SET8_COEFF_PRE3_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_0_FFE_COEFF_SET8_COEFF_PRE3_BF_DEF (0x00000000)

///< set8 ffe pre cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_0_FFE_COEFF_SET8_COEFF_PRE2_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_0_FFE_COEFF_SET8_COEFF_PRE2_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_0_FFE_COEFF_SET8_COEFF_PRE2_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_0_FFE_COEFF_SET8_COEFF_PRE2_BF_DEF (0x00000000)

///< set8 ffe pre cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_0_FFE_COEFF_SET8_COEFF_PRE1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_0_FFE_COEFF_SET8_COEFF_PRE1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_0_FFE_COEFF_SET8_COEFF_PRE1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_0_FFE_COEFF_SET8_COEFF_PRE1_BF_DEF (0x00000000)

///< set8 ffe post cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_0_FFE_COEFF_SET8_COEFF_POST1_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_0_FFE_COEFF_SET8_COEFF_POST1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_0_FFE_COEFF_SET8_COEFF_POST1_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_0_FFE_COEFF_SET8_COEFF_POST1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET8_1 register description at address offset 0xa4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set8_1
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET8_COEFF_POST2 : 8;
    ///< set8 ffe post cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET8_COEFF_POST3 : 6;
    ///< set8 ffe post cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t FFE_COEFF_SET8_COEFF_POST4 : 6;
    ///< set8 ffe post cursor 4 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t FFE_COEFF_SET8_COEFF_POST5 : 6;
    ///< set8 ffe post cursor 5 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set8_1_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET8_1_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_1_RD_MASK (0x3f3f3fffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_1_WR_MASK (0x3f3f3fffU)


///< set8 ffe post cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_1_FFE_COEFF_SET8_COEFF_POST2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_1_FFE_COEFF_SET8_COEFF_POST2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_1_FFE_COEFF_SET8_COEFF_POST2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_1_FFE_COEFF_SET8_COEFF_POST2_BF_DEF (0x00000000)

///< set8 ffe post cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_1_FFE_COEFF_SET8_COEFF_POST3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_1_FFE_COEFF_SET8_COEFF_POST3_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_1_FFE_COEFF_SET8_COEFF_POST3_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_1_FFE_COEFF_SET8_COEFF_POST3_BF_DEF (0x00000000)

///< set8 ffe post cursor 4 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_1_FFE_COEFF_SET8_COEFF_POST4_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_1_FFE_COEFF_SET8_COEFF_POST4_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_1_FFE_COEFF_SET8_COEFF_POST4_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_1_FFE_COEFF_SET8_COEFF_POST4_BF_DEF (0x00000000)

///< set8 ffe post cursor 5 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_1_FFE_COEFF_SET8_COEFF_POST5_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_1_FFE_COEFF_SET8_COEFF_POST5_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_1_FFE_COEFF_SET8_COEFF_POST5_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_1_FFE_COEFF_SET8_COEFF_POST5_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET8_2 register description at address offset 0xa8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set8_2
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET8_COEFF_POST6 : 6;
    ///< set8 ffe post cursor 6 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t FFE_COEFF_SET8_COEFF_POST7 : 6;
    ///< set8 ffe post cursor 7 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t FFE_COEFF_SET8_COEFF_POST8 : 6;
    ///< set8 ffe post cursor 8 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t FFE_COEFF_SET8_COEFF_POST9 : 4;
    ///< set8 ffe post cursor 9 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t FFE_COEFF_SET8_COEFF_POST10 : 4;
    ///< set8 ffe post cursor 10 coeff
    ///< AccessType="RW/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set8_2_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET8_2_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_2_RD_MASK (0xff3f3f3fU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_2_WR_MASK (0xff3f3f3fU)


///< set8 ffe post cursor 6 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_2_FFE_COEFF_SET8_COEFF_POST6_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_2_FFE_COEFF_SET8_COEFF_POST6_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_2_FFE_COEFF_SET8_COEFF_POST6_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_2_FFE_COEFF_SET8_COEFF_POST6_BF_DEF (0x00000000)

///< set8 ffe post cursor 7 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_2_FFE_COEFF_SET8_COEFF_POST7_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_2_FFE_COEFF_SET8_COEFF_POST7_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_2_FFE_COEFF_SET8_COEFF_POST7_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_2_FFE_COEFF_SET8_COEFF_POST7_BF_DEF (0x00000000)

///< set8 ffe post cursor 8 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_2_FFE_COEFF_SET8_COEFF_POST8_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_2_FFE_COEFF_SET8_COEFF_POST8_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_2_FFE_COEFF_SET8_COEFF_POST8_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_2_FFE_COEFF_SET8_COEFF_POST8_BF_DEF (0x00000000)

///< set8 ffe post cursor 9 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_2_FFE_COEFF_SET8_COEFF_POST9_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_2_FFE_COEFF_SET8_COEFF_POST9_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_2_FFE_COEFF_SET8_COEFF_POST9_BF_MSK (0x0F000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_2_FFE_COEFF_SET8_COEFF_POST9_BF_DEF (0x00000000)

///< set8 ffe post cursor 10 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_2_FFE_COEFF_SET8_COEFF_POST10_BF_OFF (28)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_2_FFE_COEFF_SET8_COEFF_POST10_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_2_FFE_COEFF_SET8_COEFF_POST10_BF_MSK (0xF0000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_2_FFE_COEFF_SET8_COEFF_POST10_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET8_3 register description at address offset 0xac
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set8_3
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET8_COEFF_POST11 : 4;
    ///< set8 ffe post cursor 11 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET8_COEFF_POST12 : 4;
    ///< set8 ffe post cursor 12 coeff
    ///< AccessType="RW/V" BitOffset="4" ResetValue="0x0"
    uint32_t FFE_COEFF_SET8_BANKA_FLOAT1 : 4;
    ///< set8 ffe bankA floating 1 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET8_BANKA_FLOAT2 : 4;
    ///< set8 ffe bankA floating 2 coeff
    ///< AccessType="RW/V" BitOffset="12" ResetValue="0x0"
    uint32_t FFE_COEFF_SET8_BANKA_FLOAT3 : 4;
    ///< set8 ffe bankA floating 3 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET8_BANKB_FLOAT1 : 4;
    ///< set8 ffe bankB floating 1 coeff
    ///< AccessType="RW/V" BitOffset="20" ResetValue="0x0"
    uint32_t FFE_COEFF_SET8_BANKB_FLOAT2 : 4;
    ///< set8 ffe bankB floating 2 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t FFE_COEFF_SET8_BANKB_FLOAT3 : 4;
    ///< set8 ffe bankB floating 3 coeff
    ///< AccessType="RW/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set8_3_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET8_3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_3_WR_MASK (0xffffffffU)


///< set8 ffe post cursor 11 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_3_FFE_COEFF_SET8_COEFF_POST11_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_3_FFE_COEFF_SET8_COEFF_POST11_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_3_FFE_COEFF_SET8_COEFF_POST11_BF_MSK (0x0000000F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_3_FFE_COEFF_SET8_COEFF_POST11_BF_DEF (0x00000000)

///< set8 ffe post cursor 12 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_3_FFE_COEFF_SET8_COEFF_POST12_BF_OFF ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_3_FFE_COEFF_SET8_COEFF_POST12_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_3_FFE_COEFF_SET8_COEFF_POST12_BF_MSK (0x000000F0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_3_FFE_COEFF_SET8_COEFF_POST12_BF_DEF (0x00000000)

///< set8 ffe bankA floating 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_3_FFE_COEFF_SET8_BANKA_FLOAT1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_3_FFE_COEFF_SET8_BANKA_FLOAT1_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_3_FFE_COEFF_SET8_BANKA_FLOAT1_BF_MSK (0x00000F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_3_FFE_COEFF_SET8_BANKA_FLOAT1_BF_DEF (0x00000000)

///< set8 ffe bankA floating 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_3_FFE_COEFF_SET8_BANKA_FLOAT2_BF_OFF (12)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_3_FFE_COEFF_SET8_BANKA_FLOAT2_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_3_FFE_COEFF_SET8_BANKA_FLOAT2_BF_MSK (0x0000F000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_3_FFE_COEFF_SET8_BANKA_FLOAT2_BF_DEF (0x00000000)

///< set8 ffe bankA floating 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_3_FFE_COEFF_SET8_BANKA_FLOAT3_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_3_FFE_COEFF_SET8_BANKA_FLOAT3_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_3_FFE_COEFF_SET8_BANKA_FLOAT3_BF_MSK (0x000F0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_3_FFE_COEFF_SET8_BANKA_FLOAT3_BF_DEF (0x00000000)

///< set8 ffe bankB floating 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_3_FFE_COEFF_SET8_BANKB_FLOAT1_BF_OFF (20)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_3_FFE_COEFF_SET8_BANKB_FLOAT1_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_3_FFE_COEFF_SET8_BANKB_FLOAT1_BF_MSK (0x00F00000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_3_FFE_COEFF_SET8_BANKB_FLOAT1_BF_DEF (0x00000000)

///< set8 ffe bankB floating 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_3_FFE_COEFF_SET8_BANKB_FLOAT2_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_3_FFE_COEFF_SET8_BANKB_FLOAT2_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_3_FFE_COEFF_SET8_BANKB_FLOAT2_BF_MSK (0x0F000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_3_FFE_COEFF_SET8_BANKB_FLOAT2_BF_DEF (0x00000000)

///< set8 ffe bankB floating 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_3_FFE_COEFF_SET8_BANKB_FLOAT3_BF_OFF (28)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_3_FFE_COEFF_SET8_BANKB_FLOAT3_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_3_FFE_COEFF_SET8_BANKB_FLOAT3_BF_MSK (0xF0000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_3_FFE_COEFF_SET8_BANKB_FLOAT3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET8_4 register description at address offset 0xb0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set8_4
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET8_BANKC_FLOAT1 : 4;
    ///< set8 ffe bankC floating 1 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET8_BANKC_FLOAT2 : 4;
    ///< set8 ffe bankC floating 2 coeff
    ///< AccessType="RW/V" BitOffset="4" ResetValue="0x0"
    uint32_t FFE_COEFF_SET8_BANKC_FLOAT3 : 4;
    ///< set8 ffe bankC floating 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set8_4_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET8_4_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_4_RD_MASK (0x00000fffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_4_WR_MASK (0x00000fffU)


///< set8 ffe bankC floating 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_4_FFE_COEFF_SET8_BANKC_FLOAT1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_4_FFE_COEFF_SET8_BANKC_FLOAT1_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_4_FFE_COEFF_SET8_BANKC_FLOAT1_BF_MSK (0x0000000F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_4_FFE_COEFF_SET8_BANKC_FLOAT1_BF_DEF (0x00000000)

///< set8 ffe bankC floating 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_4_FFE_COEFF_SET8_BANKC_FLOAT2_BF_OFF ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_4_FFE_COEFF_SET8_BANKC_FLOAT2_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_4_FFE_COEFF_SET8_BANKC_FLOAT2_BF_MSK (0x000000F0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_4_FFE_COEFF_SET8_BANKC_FLOAT2_BF_DEF (0x00000000)

///< set8 ffe bankC floating 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_4_FFE_COEFF_SET8_BANKC_FLOAT3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_4_FFE_COEFF_SET8_BANKC_FLOAT3_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_4_FFE_COEFF_SET8_BANKC_FLOAT3_BF_MSK (0x00000F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_4_FFE_COEFF_SET8_BANKC_FLOAT3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET9_0 register description at address offset 0xb4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set9_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET9_COEFF_PRE3 : 6;
    ///< set9 ffe pre cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t FFE_COEFF_SET9_COEFF_PRE2 : 6;
    ///< set9 ffe pre cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t FFE_COEFF_SET9_COEFF_PRE1 : 8;
    ///< set9 ffe pre cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET9_COEFF_POST1 : 8;
    ///< set9 ffe post cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set9_0_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET9_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_0_RD_MASK (0xffff3f3fU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_0_WR_MASK (0xffff3f3fU)


///< set9 ffe pre cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_0_FFE_COEFF_SET9_COEFF_PRE3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_0_FFE_COEFF_SET9_COEFF_PRE3_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_0_FFE_COEFF_SET9_COEFF_PRE3_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_0_FFE_COEFF_SET9_COEFF_PRE3_BF_DEF (0x00000000)

///< set9 ffe pre cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_0_FFE_COEFF_SET9_COEFF_PRE2_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_0_FFE_COEFF_SET9_COEFF_PRE2_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_0_FFE_COEFF_SET9_COEFF_PRE2_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_0_FFE_COEFF_SET9_COEFF_PRE2_BF_DEF (0x00000000)

///< set9 ffe pre cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_0_FFE_COEFF_SET9_COEFF_PRE1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_0_FFE_COEFF_SET9_COEFF_PRE1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_0_FFE_COEFF_SET9_COEFF_PRE1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_0_FFE_COEFF_SET9_COEFF_PRE1_BF_DEF (0x00000000)

///< set9 ffe post cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_0_FFE_COEFF_SET9_COEFF_POST1_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_0_FFE_COEFF_SET9_COEFF_POST1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_0_FFE_COEFF_SET9_COEFF_POST1_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_0_FFE_COEFF_SET9_COEFF_POST1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET9_1 register description at address offset 0xb8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set9_1
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET9_COEFF_POST2 : 8;
    ///< set9 ffe post cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET9_COEFF_POST3 : 6;
    ///< set9 ffe post cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t FFE_COEFF_SET9_COEFF_POST4 : 6;
    ///< set9 ffe post cursor 4 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t FFE_COEFF_SET9_COEFF_POST5 : 6;
    ///< set9 ffe post cursor 5 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set9_1_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET9_1_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_1_RD_MASK (0x3f3f3fffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_1_WR_MASK (0x3f3f3fffU)


///< set9 ffe post cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_1_FFE_COEFF_SET9_COEFF_POST2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_1_FFE_COEFF_SET9_COEFF_POST2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_1_FFE_COEFF_SET9_COEFF_POST2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_1_FFE_COEFF_SET9_COEFF_POST2_BF_DEF (0x00000000)

///< set9 ffe post cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_1_FFE_COEFF_SET9_COEFF_POST3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_1_FFE_COEFF_SET9_COEFF_POST3_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_1_FFE_COEFF_SET9_COEFF_POST3_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_1_FFE_COEFF_SET9_COEFF_POST3_BF_DEF (0x00000000)

///< set9 ffe post cursor 4 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_1_FFE_COEFF_SET9_COEFF_POST4_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_1_FFE_COEFF_SET9_COEFF_POST4_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_1_FFE_COEFF_SET9_COEFF_POST4_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_1_FFE_COEFF_SET9_COEFF_POST4_BF_DEF (0x00000000)

///< set9 ffe post cursor 5 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_1_FFE_COEFF_SET9_COEFF_POST5_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_1_FFE_COEFF_SET9_COEFF_POST5_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_1_FFE_COEFF_SET9_COEFF_POST5_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_1_FFE_COEFF_SET9_COEFF_POST5_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET9_2 register description at address offset 0xbc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set9_2
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET9_COEFF_POST6 : 6;
    ///< set9 ffe post cursor 6 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t FFE_COEFF_SET9_COEFF_POST7 : 6;
    ///< set9 ffe post cursor 7 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t FFE_COEFF_SET9_COEFF_POST8 : 6;
    ///< set9 ffe post cursor 8 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t FFE_COEFF_SET9_COEFF_POST9 : 4;
    ///< set9 ffe post cursor 9 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t FFE_COEFF_SET9_COEFF_POST10 : 4;
    ///< set9 ffe post cursor 10 coeff
    ///< AccessType="RW/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set9_2_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET9_2_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_2_RD_MASK (0xff3f3f3fU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_2_WR_MASK (0xff3f3f3fU)


///< set9 ffe post cursor 6 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_2_FFE_COEFF_SET9_COEFF_POST6_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_2_FFE_COEFF_SET9_COEFF_POST6_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_2_FFE_COEFF_SET9_COEFF_POST6_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_2_FFE_COEFF_SET9_COEFF_POST6_BF_DEF (0x00000000)

///< set9 ffe post cursor 7 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_2_FFE_COEFF_SET9_COEFF_POST7_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_2_FFE_COEFF_SET9_COEFF_POST7_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_2_FFE_COEFF_SET9_COEFF_POST7_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_2_FFE_COEFF_SET9_COEFF_POST7_BF_DEF (0x00000000)

///< set9 ffe post cursor 8 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_2_FFE_COEFF_SET9_COEFF_POST8_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_2_FFE_COEFF_SET9_COEFF_POST8_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_2_FFE_COEFF_SET9_COEFF_POST8_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_2_FFE_COEFF_SET9_COEFF_POST8_BF_DEF (0x00000000)

///< set9 ffe post cursor 9 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_2_FFE_COEFF_SET9_COEFF_POST9_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_2_FFE_COEFF_SET9_COEFF_POST9_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_2_FFE_COEFF_SET9_COEFF_POST9_BF_MSK (0x0F000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_2_FFE_COEFF_SET9_COEFF_POST9_BF_DEF (0x00000000)

///< set9 ffe post cursor 10 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_2_FFE_COEFF_SET9_COEFF_POST10_BF_OFF (28)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_2_FFE_COEFF_SET9_COEFF_POST10_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_2_FFE_COEFF_SET9_COEFF_POST10_BF_MSK (0xF0000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_2_FFE_COEFF_SET9_COEFF_POST10_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET9_3 register description at address offset 0xc0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set9_3
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET9_COEFF_POST11 : 4;
    ///< set9 ffe post cursor 11 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET9_COEFF_POST12 : 4;
    ///< set9 ffe post cursor 12 coeff
    ///< AccessType="RW/V" BitOffset="4" ResetValue="0x0"
    uint32_t FFE_COEFF_SET9_BANKA_FLOAT1 : 4;
    ///< set9 ffe bankA floating 1 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET9_BANKA_FLOAT2 : 4;
    ///< set9 ffe bankA floating 2 coeff
    ///< AccessType="RW/V" BitOffset="12" ResetValue="0x0"
    uint32_t FFE_COEFF_SET9_BANKA_FLOAT3 : 4;
    ///< set9 ffe bankA floating 3 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET9_BANKB_FLOAT1 : 4;
    ///< set9 ffe bankB floating 1 coeff
    ///< AccessType="RW/V" BitOffset="20" ResetValue="0x0"
    uint32_t FFE_COEFF_SET9_BANKB_FLOAT2 : 4;
    ///< set9 ffe bankB floating 2 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t FFE_COEFF_SET9_BANKB_FLOAT3 : 4;
    ///< set9 ffe bankB floating 3 coeff
    ///< AccessType="RW/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set9_3_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET9_3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_3_WR_MASK (0xffffffffU)


///< set9 ffe post cursor 11 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_3_FFE_COEFF_SET9_COEFF_POST11_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_3_FFE_COEFF_SET9_COEFF_POST11_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_3_FFE_COEFF_SET9_COEFF_POST11_BF_MSK (0x0000000F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_3_FFE_COEFF_SET9_COEFF_POST11_BF_DEF (0x00000000)

///< set9 ffe post cursor 12 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_3_FFE_COEFF_SET9_COEFF_POST12_BF_OFF ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_3_FFE_COEFF_SET9_COEFF_POST12_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_3_FFE_COEFF_SET9_COEFF_POST12_BF_MSK (0x000000F0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_3_FFE_COEFF_SET9_COEFF_POST12_BF_DEF (0x00000000)

///< set9 ffe bankA floating 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_3_FFE_COEFF_SET9_BANKA_FLOAT1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_3_FFE_COEFF_SET9_BANKA_FLOAT1_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_3_FFE_COEFF_SET9_BANKA_FLOAT1_BF_MSK (0x00000F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_3_FFE_COEFF_SET9_BANKA_FLOAT1_BF_DEF (0x00000000)

///< set9 ffe bankA floating 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_3_FFE_COEFF_SET9_BANKA_FLOAT2_BF_OFF (12)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_3_FFE_COEFF_SET9_BANKA_FLOAT2_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_3_FFE_COEFF_SET9_BANKA_FLOAT2_BF_MSK (0x0000F000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_3_FFE_COEFF_SET9_BANKA_FLOAT2_BF_DEF (0x00000000)

///< set9 ffe bankA floating 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_3_FFE_COEFF_SET9_BANKA_FLOAT3_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_3_FFE_COEFF_SET9_BANKA_FLOAT3_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_3_FFE_COEFF_SET9_BANKA_FLOAT3_BF_MSK (0x000F0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_3_FFE_COEFF_SET9_BANKA_FLOAT3_BF_DEF (0x00000000)

///< set9 ffe bankB floating 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_3_FFE_COEFF_SET9_BANKB_FLOAT1_BF_OFF (20)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_3_FFE_COEFF_SET9_BANKB_FLOAT1_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_3_FFE_COEFF_SET9_BANKB_FLOAT1_BF_MSK (0x00F00000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_3_FFE_COEFF_SET9_BANKB_FLOAT1_BF_DEF (0x00000000)

///< set9 ffe bankB floating 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_3_FFE_COEFF_SET9_BANKB_FLOAT2_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_3_FFE_COEFF_SET9_BANKB_FLOAT2_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_3_FFE_COEFF_SET9_BANKB_FLOAT2_BF_MSK (0x0F000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_3_FFE_COEFF_SET9_BANKB_FLOAT2_BF_DEF (0x00000000)

///< set9 ffe bankB floating 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_3_FFE_COEFF_SET9_BANKB_FLOAT3_BF_OFF (28)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_3_FFE_COEFF_SET9_BANKB_FLOAT3_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_3_FFE_COEFF_SET9_BANKB_FLOAT3_BF_MSK (0xF0000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_3_FFE_COEFF_SET9_BANKB_FLOAT3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET9_4 register description at address offset 0xc4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set9_4
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET9_BANKC_FLOAT1 : 4;
    ///< set9 ffe bankC floating 1 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET9_BANKC_FLOAT2 : 4;
    ///< set9 ffe bankC floating 2 coeff
    ///< AccessType="RW/V" BitOffset="4" ResetValue="0x0"
    uint32_t FFE_COEFF_SET9_BANKC_FLOAT3 : 4;
    ///< set9 ffe bankC floating 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set9_4_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET9_4_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_4_RD_MASK (0x00000fffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_4_WR_MASK (0x00000fffU)


///< set9 ffe bankC floating 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_4_FFE_COEFF_SET9_BANKC_FLOAT1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_4_FFE_COEFF_SET9_BANKC_FLOAT1_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_4_FFE_COEFF_SET9_BANKC_FLOAT1_BF_MSK (0x0000000F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_4_FFE_COEFF_SET9_BANKC_FLOAT1_BF_DEF (0x00000000)

///< set9 ffe bankC floating 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_4_FFE_COEFF_SET9_BANKC_FLOAT2_BF_OFF ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_4_FFE_COEFF_SET9_BANKC_FLOAT2_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_4_FFE_COEFF_SET9_BANKC_FLOAT2_BF_MSK (0x000000F0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_4_FFE_COEFF_SET9_BANKC_FLOAT2_BF_DEF (0x00000000)

///< set9 ffe bankC floating 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_4_FFE_COEFF_SET9_BANKC_FLOAT3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_4_FFE_COEFF_SET9_BANKC_FLOAT3_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_4_FFE_COEFF_SET9_BANKC_FLOAT3_BF_MSK (0x00000F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_4_FFE_COEFF_SET9_BANKC_FLOAT3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET10_0 register description at address offset 0xcc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set10_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET10_COEFF_PRE3 : 6;
    ///< set10 ffe pre cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t FFE_COEFF_SET10_COEFF_PRE2 : 6;
    ///< set10 ffe pre cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t FFE_COEFF_SET10_COEFF_PRE1 : 8;
    ///< set10 ffe pre cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET10_COEFF_POST1 : 8;
    ///< set10 ffe post cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set10_0_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET10_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_0_RD_MASK (0xffff3f3fU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_0_WR_MASK (0xffff3f3fU)


///< set10 ffe pre cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_0_FFE_COEFF_SET10_COEFF_PRE3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_0_FFE_COEFF_SET10_COEFF_PRE3_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_0_FFE_COEFF_SET10_COEFF_PRE3_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_0_FFE_COEFF_SET10_COEFF_PRE3_BF_DEF (0x00000000)

///< set10 ffe pre cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_0_FFE_COEFF_SET10_COEFF_PRE2_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_0_FFE_COEFF_SET10_COEFF_PRE2_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_0_FFE_COEFF_SET10_COEFF_PRE2_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_0_FFE_COEFF_SET10_COEFF_PRE2_BF_DEF (0x00000000)

///< set10 ffe pre cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_0_FFE_COEFF_SET10_COEFF_PRE1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_0_FFE_COEFF_SET10_COEFF_PRE1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_0_FFE_COEFF_SET10_COEFF_PRE1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_0_FFE_COEFF_SET10_COEFF_PRE1_BF_DEF (0x00000000)

///< set10 ffe post cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_0_FFE_COEFF_SET10_COEFF_POST1_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_0_FFE_COEFF_SET10_COEFF_POST1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_0_FFE_COEFF_SET10_COEFF_POST1_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_0_FFE_COEFF_SET10_COEFF_POST1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET10_1 register description at address offset 0xd0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set10_1
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET10_COEFF_POST2 : 8;
    ///< set10 ffe post cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET10_COEFF_POST3 : 6;
    ///< set10 ffe post cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t FFE_COEFF_SET10_COEFF_POST4 : 6;
    ///< set10 ffe post cursor 4 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t FFE_COEFF_SET10_COEFF_POST5 : 6;
    ///< set10 ffe post cursor 5 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set10_1_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET10_1_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_1_RD_MASK (0x3f3f3fffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_1_WR_MASK (0x3f3f3fffU)


///< set10 ffe post cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_1_FFE_COEFF_SET10_COEFF_POST2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_1_FFE_COEFF_SET10_COEFF_POST2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_1_FFE_COEFF_SET10_COEFF_POST2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_1_FFE_COEFF_SET10_COEFF_POST2_BF_DEF (0x00000000)

///< set10 ffe post cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_1_FFE_COEFF_SET10_COEFF_POST3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_1_FFE_COEFF_SET10_COEFF_POST3_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_1_FFE_COEFF_SET10_COEFF_POST3_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_1_FFE_COEFF_SET10_COEFF_POST3_BF_DEF (0x00000000)

///< set10 ffe post cursor 4 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_1_FFE_COEFF_SET10_COEFF_POST4_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_1_FFE_COEFF_SET10_COEFF_POST4_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_1_FFE_COEFF_SET10_COEFF_POST4_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_1_FFE_COEFF_SET10_COEFF_POST4_BF_DEF (0x00000000)

///< set10 ffe post cursor 5 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_1_FFE_COEFF_SET10_COEFF_POST5_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_1_FFE_COEFF_SET10_COEFF_POST5_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_1_FFE_COEFF_SET10_COEFF_POST5_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_1_FFE_COEFF_SET10_COEFF_POST5_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET10_2 register description at address offset 0xd4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set10_2
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET10_COEFF_POST6 : 6;
    ///< set10 ffe post cursor 6 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t FFE_COEFF_SET10_COEFF_POST7 : 6;
    ///< set10 ffe post cursor 7 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t FFE_COEFF_SET10_COEFF_POST8 : 6;
    ///< set10 ffe post cursor 8 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t FFE_COEFF_SET10_COEFF_POST9 : 4;
    ///< set10 ffe post cursor 9 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t FFE_COEFF_SET10_COEFF_POST10 : 4;
    ///< set10 ffe post cursor 10 coeff
    ///< AccessType="RW/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set10_2_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET10_2_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_2_RD_MASK (0xff3f3f3fU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_2_WR_MASK (0xff3f3f3fU)


///< set10 ffe post cursor 6 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_2_FFE_COEFF_SET10_COEFF_POST6_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_2_FFE_COEFF_SET10_COEFF_POST6_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_2_FFE_COEFF_SET10_COEFF_POST6_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_2_FFE_COEFF_SET10_COEFF_POST6_BF_DEF (0x00000000)

///< set10 ffe post cursor 7 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_2_FFE_COEFF_SET10_COEFF_POST7_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_2_FFE_COEFF_SET10_COEFF_POST7_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_2_FFE_COEFF_SET10_COEFF_POST7_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_2_FFE_COEFF_SET10_COEFF_POST7_BF_DEF (0x00000000)

///< set10 ffe post cursor 8 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_2_FFE_COEFF_SET10_COEFF_POST8_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_2_FFE_COEFF_SET10_COEFF_POST8_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_2_FFE_COEFF_SET10_COEFF_POST8_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_2_FFE_COEFF_SET10_COEFF_POST8_BF_DEF (0x00000000)

///< set10 ffe post cursor 9 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_2_FFE_COEFF_SET10_COEFF_POST9_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_2_FFE_COEFF_SET10_COEFF_POST9_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_2_FFE_COEFF_SET10_COEFF_POST9_BF_MSK (0x0F000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_2_FFE_COEFF_SET10_COEFF_POST9_BF_DEF (0x00000000)

///< set10 ffe post cursor 10 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_2_FFE_COEFF_SET10_COEFF_POST10_BF_OFF (28)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_2_FFE_COEFF_SET10_COEFF_POST10_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_2_FFE_COEFF_SET10_COEFF_POST10_BF_MSK (0xF0000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_2_FFE_COEFF_SET10_COEFF_POST10_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET10_3 register description at address offset 0xd8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set10_3
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET10_COEFF_POST11 : 4;
    ///< set10 ffe post cursor 11 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET10_COEFF_POST12 : 4;
    ///< set10 ffe post cursor 12 coeff
    ///< AccessType="RW/V" BitOffset="4" ResetValue="0x0"
    uint32_t FFE_COEFF_SET10_BANKA_FLOAT1 : 4;
    ///< set10 ffe bankA floating 1 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET10_BANKA_FLOAT2 : 4;
    ///< set10 ffe bankA floating 2 coeff
    ///< AccessType="RW/V" BitOffset="12" ResetValue="0x0"
    uint32_t FFE_COEFF_SET10_BANKA_FLOAT3 : 4;
    ///< set10 ffe bankA floating 3 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET10_BANKB_FLOAT1 : 4;
    ///< set10 ffe bankB floating 1 coeff
    ///< AccessType="RW/V" BitOffset="20" ResetValue="0x0"
    uint32_t FFE_COEFF_SET10_BANKB_FLOAT2 : 4;
    ///< set10 ffe bankB floating 2 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t FFE_COEFF_SET10_BANKB_FLOAT3 : 4;
    ///< set10 ffe bankB floating 3 coeff
    ///< AccessType="RW/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set10_3_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET10_3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_3_WR_MASK (0xffffffffU)


///< set10 ffe post cursor 11 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_3_FFE_COEFF_SET10_COEFF_POST11_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_3_FFE_COEFF_SET10_COEFF_POST11_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_3_FFE_COEFF_SET10_COEFF_POST11_BF_MSK (0x0000000F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_3_FFE_COEFF_SET10_COEFF_POST11_BF_DEF (0x00000000)

///< set10 ffe post cursor 12 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_3_FFE_COEFF_SET10_COEFF_POST12_BF_OFF ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_3_FFE_COEFF_SET10_COEFF_POST12_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_3_FFE_COEFF_SET10_COEFF_POST12_BF_MSK (0x000000F0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_3_FFE_COEFF_SET10_COEFF_POST12_BF_DEF (0x00000000)

///< set10 ffe bankA floating 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_3_FFE_COEFF_SET10_BANKA_FLOAT1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_3_FFE_COEFF_SET10_BANKA_FLOAT1_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_3_FFE_COEFF_SET10_BANKA_FLOAT1_BF_MSK (0x00000F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_3_FFE_COEFF_SET10_BANKA_FLOAT1_BF_DEF (0x00000000)

///< set10 ffe bankA floating 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_3_FFE_COEFF_SET10_BANKA_FLOAT2_BF_OFF (12)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_3_FFE_COEFF_SET10_BANKA_FLOAT2_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_3_FFE_COEFF_SET10_BANKA_FLOAT2_BF_MSK (0x0000F000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_3_FFE_COEFF_SET10_BANKA_FLOAT2_BF_DEF (0x00000000)

///< set10 ffe bankA floating 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_3_FFE_COEFF_SET10_BANKA_FLOAT3_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_3_FFE_COEFF_SET10_BANKA_FLOAT3_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_3_FFE_COEFF_SET10_BANKA_FLOAT3_BF_MSK (0x000F0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_3_FFE_COEFF_SET10_BANKA_FLOAT3_BF_DEF (0x00000000)

///< set10 ffe bankB floating 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_3_FFE_COEFF_SET10_BANKB_FLOAT1_BF_OFF (20)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_3_FFE_COEFF_SET10_BANKB_FLOAT1_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_3_FFE_COEFF_SET10_BANKB_FLOAT1_BF_MSK (0x00F00000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_3_FFE_COEFF_SET10_BANKB_FLOAT1_BF_DEF (0x00000000)

///< set10 ffe bankB floating 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_3_FFE_COEFF_SET10_BANKB_FLOAT2_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_3_FFE_COEFF_SET10_BANKB_FLOAT2_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_3_FFE_COEFF_SET10_BANKB_FLOAT2_BF_MSK (0x0F000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_3_FFE_COEFF_SET10_BANKB_FLOAT2_BF_DEF (0x00000000)

///< set10 ffe bankB floating 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_3_FFE_COEFF_SET10_BANKB_FLOAT3_BF_OFF (28)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_3_FFE_COEFF_SET10_BANKB_FLOAT3_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_3_FFE_COEFF_SET10_BANKB_FLOAT3_BF_MSK (0xF0000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_3_FFE_COEFF_SET10_BANKB_FLOAT3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET10_4 register description at address offset 0xdc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set10_4
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET10_BANKC_FLOAT1 : 4;
    ///< set10 ffe bankC floating 1 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET10_BANKC_FLOAT2 : 4;
    ///< set10 ffe bankC floating 2 coeff
    ///< AccessType="RW/V" BitOffset="4" ResetValue="0x0"
    uint32_t FFE_COEFF_SET10_BANKC_FLOAT3 : 4;
    ///< set10 ffe bankC floating 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set10_4_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET10_4_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_4_RD_MASK (0x00000fffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_4_WR_MASK (0x00000fffU)


///< set10 ffe bankC floating 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_4_FFE_COEFF_SET10_BANKC_FLOAT1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_4_FFE_COEFF_SET10_BANKC_FLOAT1_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_4_FFE_COEFF_SET10_BANKC_FLOAT1_BF_MSK (0x0000000F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_4_FFE_COEFF_SET10_BANKC_FLOAT1_BF_DEF (0x00000000)

///< set10 ffe bankC floating 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_4_FFE_COEFF_SET10_BANKC_FLOAT2_BF_OFF ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_4_FFE_COEFF_SET10_BANKC_FLOAT2_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_4_FFE_COEFF_SET10_BANKC_FLOAT2_BF_MSK (0x000000F0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_4_FFE_COEFF_SET10_BANKC_FLOAT2_BF_DEF (0x00000000)

///< set10 ffe bankC floating 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_4_FFE_COEFF_SET10_BANKC_FLOAT3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_4_FFE_COEFF_SET10_BANKC_FLOAT3_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_4_FFE_COEFF_SET10_BANKC_FLOAT3_BF_MSK (0x00000F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_4_FFE_COEFF_SET10_BANKC_FLOAT3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET11_0 register description at address offset 0xe0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set11_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET11_COEFF_PRE3 : 6;
    ///< set11 ffe pre cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t FFE_COEFF_SET11_COEFF_PRE2 : 6;
    ///< set11 ffe pre cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t FFE_COEFF_SET11_COEFF_PRE1 : 8;
    ///< set11 ffe pre cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET11_COEFF_POST1 : 8;
    ///< set11 ffe post cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set11_0_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET11_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_0_RD_MASK (0xffff3f3fU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_0_WR_MASK (0xffff3f3fU)


///< set11 ffe pre cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_0_FFE_COEFF_SET11_COEFF_PRE3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_0_FFE_COEFF_SET11_COEFF_PRE3_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_0_FFE_COEFF_SET11_COEFF_PRE3_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_0_FFE_COEFF_SET11_COEFF_PRE3_BF_DEF (0x00000000)

///< set11 ffe pre cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_0_FFE_COEFF_SET11_COEFF_PRE2_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_0_FFE_COEFF_SET11_COEFF_PRE2_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_0_FFE_COEFF_SET11_COEFF_PRE2_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_0_FFE_COEFF_SET11_COEFF_PRE2_BF_DEF (0x00000000)

///< set11 ffe pre cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_0_FFE_COEFF_SET11_COEFF_PRE1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_0_FFE_COEFF_SET11_COEFF_PRE1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_0_FFE_COEFF_SET11_COEFF_PRE1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_0_FFE_COEFF_SET11_COEFF_PRE1_BF_DEF (0x00000000)

///< set11 ffe post cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_0_FFE_COEFF_SET11_COEFF_POST1_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_0_FFE_COEFF_SET11_COEFF_POST1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_0_FFE_COEFF_SET11_COEFF_POST1_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_0_FFE_COEFF_SET11_COEFF_POST1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET11_1 register description at address offset 0xe4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set11_1
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET11_COEFF_POST2 : 8;
    ///< set11 ffe post cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET11_COEFF_POST3 : 6;
    ///< set11 ffe post cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t FFE_COEFF_SET11_COEFF_POST4 : 6;
    ///< set11 ffe post cursor 4 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t FFE_COEFF_SET11_COEFF_POST5 : 6;
    ///< set11 ffe post cursor 5 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set11_1_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET11_1_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_1_RD_MASK (0x3f3f3fffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_1_WR_MASK (0x3f3f3fffU)


///< set11 ffe post cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_1_FFE_COEFF_SET11_COEFF_POST2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_1_FFE_COEFF_SET11_COEFF_POST2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_1_FFE_COEFF_SET11_COEFF_POST2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_1_FFE_COEFF_SET11_COEFF_POST2_BF_DEF (0x00000000)

///< set11 ffe post cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_1_FFE_COEFF_SET11_COEFF_POST3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_1_FFE_COEFF_SET11_COEFF_POST3_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_1_FFE_COEFF_SET11_COEFF_POST3_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_1_FFE_COEFF_SET11_COEFF_POST3_BF_DEF (0x00000000)

///< set11 ffe post cursor 4 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_1_FFE_COEFF_SET11_COEFF_POST4_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_1_FFE_COEFF_SET11_COEFF_POST4_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_1_FFE_COEFF_SET11_COEFF_POST4_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_1_FFE_COEFF_SET11_COEFF_POST4_BF_DEF (0x00000000)

///< set11 ffe post cursor 5 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_1_FFE_COEFF_SET11_COEFF_POST5_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_1_FFE_COEFF_SET11_COEFF_POST5_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_1_FFE_COEFF_SET11_COEFF_POST5_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_1_FFE_COEFF_SET11_COEFF_POST5_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET11_2 register description at address offset 0xe8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set11_2
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET11_COEFF_POST6 : 6;
    ///< set11 ffe post cursor 6 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t FFE_COEFF_SET11_COEFF_POST7 : 6;
    ///< set11 ffe post cursor 7 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t FFE_COEFF_SET11_COEFF_POST8 : 6;
    ///< set11 ffe post cursor 8 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t FFE_COEFF_SET11_COEFF_POST9 : 4;
    ///< set11 ffe post cursor 9 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t FFE_COEFF_SET11_COEFF_POST10 : 4;
    ///< set11 ffe post cursor 10 coeff
    ///< AccessType="RW/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set11_2_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET11_2_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_2_RD_MASK (0xff3f3f3fU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_2_WR_MASK (0xff3f3f3fU)


///< set11 ffe post cursor 6 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_2_FFE_COEFF_SET11_COEFF_POST6_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_2_FFE_COEFF_SET11_COEFF_POST6_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_2_FFE_COEFF_SET11_COEFF_POST6_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_2_FFE_COEFF_SET11_COEFF_POST6_BF_DEF (0x00000000)

///< set11 ffe post cursor 7 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_2_FFE_COEFF_SET11_COEFF_POST7_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_2_FFE_COEFF_SET11_COEFF_POST7_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_2_FFE_COEFF_SET11_COEFF_POST7_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_2_FFE_COEFF_SET11_COEFF_POST7_BF_DEF (0x00000000)

///< set11 ffe post cursor 8 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_2_FFE_COEFF_SET11_COEFF_POST8_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_2_FFE_COEFF_SET11_COEFF_POST8_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_2_FFE_COEFF_SET11_COEFF_POST8_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_2_FFE_COEFF_SET11_COEFF_POST8_BF_DEF (0x00000000)

///< set11 ffe post cursor 9 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_2_FFE_COEFF_SET11_COEFF_POST9_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_2_FFE_COEFF_SET11_COEFF_POST9_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_2_FFE_COEFF_SET11_COEFF_POST9_BF_MSK (0x0F000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_2_FFE_COEFF_SET11_COEFF_POST9_BF_DEF (0x00000000)

///< set11 ffe post cursor 10 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_2_FFE_COEFF_SET11_COEFF_POST10_BF_OFF (28)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_2_FFE_COEFF_SET11_COEFF_POST10_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_2_FFE_COEFF_SET11_COEFF_POST10_BF_MSK (0xF0000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_2_FFE_COEFF_SET11_COEFF_POST10_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET11_3 register description at address offset 0xec
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set11_3
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET11_COEFF_POST11 : 4;
    ///< set11 ffe post cursor 11 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET11_COEFF_POST12 : 4;
    ///< set11 ffe post cursor 12 coeff
    ///< AccessType="RW/V" BitOffset="4" ResetValue="0x0"
    uint32_t FFE_COEFF_SET11_BANKA_FLOAT1 : 4;
    ///< set11 ffe bankA floating 1 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET11_BANKA_FLOAT2 : 4;
    ///< set11 ffe bankA floating 2 coeff
    ///< AccessType="RW/V" BitOffset="12" ResetValue="0x0"
    uint32_t FFE_COEFF_SET11_BANKA_FLOAT3 : 4;
    ///< set11 ffe bankA floating 3 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET11_BANKB_FLOAT1 : 4;
    ///< set11 ffe bankB floating 1 coeff
    ///< AccessType="RW/V" BitOffset="20" ResetValue="0x0"
    uint32_t FFE_COEFF_SET11_BANKB_FLOAT2 : 4;
    ///< set11 ffe bankB floating 2 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t FFE_COEFF_SET11_BANKB_FLOAT3 : 4;
    ///< set11 ffe bankB floating 3 coeff
    ///< AccessType="RW/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set11_3_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET11_3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_3_WR_MASK (0xffffffffU)


///< set11 ffe post cursor 11 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_3_FFE_COEFF_SET11_COEFF_POST11_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_3_FFE_COEFF_SET11_COEFF_POST11_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_3_FFE_COEFF_SET11_COEFF_POST11_BF_MSK (0x0000000F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_3_FFE_COEFF_SET11_COEFF_POST11_BF_DEF (0x00000000)

///< set11 ffe post cursor 12 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_3_FFE_COEFF_SET11_COEFF_POST12_BF_OFF ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_3_FFE_COEFF_SET11_COEFF_POST12_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_3_FFE_COEFF_SET11_COEFF_POST12_BF_MSK (0x000000F0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_3_FFE_COEFF_SET11_COEFF_POST12_BF_DEF (0x00000000)

///< set11 ffe bankA floating 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_3_FFE_COEFF_SET11_BANKA_FLOAT1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_3_FFE_COEFF_SET11_BANKA_FLOAT1_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_3_FFE_COEFF_SET11_BANKA_FLOAT1_BF_MSK (0x00000F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_3_FFE_COEFF_SET11_BANKA_FLOAT1_BF_DEF (0x00000000)

///< set11 ffe bankA floating 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_3_FFE_COEFF_SET11_BANKA_FLOAT2_BF_OFF (12)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_3_FFE_COEFF_SET11_BANKA_FLOAT2_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_3_FFE_COEFF_SET11_BANKA_FLOAT2_BF_MSK (0x0000F000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_3_FFE_COEFF_SET11_BANKA_FLOAT2_BF_DEF (0x00000000)

///< set11 ffe bankA floating 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_3_FFE_COEFF_SET11_BANKA_FLOAT3_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_3_FFE_COEFF_SET11_BANKA_FLOAT3_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_3_FFE_COEFF_SET11_BANKA_FLOAT3_BF_MSK (0x000F0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_3_FFE_COEFF_SET11_BANKA_FLOAT3_BF_DEF (0x00000000)

///< set11 ffe bankB floating 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_3_FFE_COEFF_SET11_BANKB_FLOAT1_BF_OFF (20)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_3_FFE_COEFF_SET11_BANKB_FLOAT1_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_3_FFE_COEFF_SET11_BANKB_FLOAT1_BF_MSK (0x00F00000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_3_FFE_COEFF_SET11_BANKB_FLOAT1_BF_DEF (0x00000000)

///< set11 ffe bankB floating 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_3_FFE_COEFF_SET11_BANKB_FLOAT2_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_3_FFE_COEFF_SET11_BANKB_FLOAT2_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_3_FFE_COEFF_SET11_BANKB_FLOAT2_BF_MSK (0x0F000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_3_FFE_COEFF_SET11_BANKB_FLOAT2_BF_DEF (0x00000000)

///< set11 ffe bankB floating 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_3_FFE_COEFF_SET11_BANKB_FLOAT3_BF_OFF (28)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_3_FFE_COEFF_SET11_BANKB_FLOAT3_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_3_FFE_COEFF_SET11_BANKB_FLOAT3_BF_MSK (0xF0000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_3_FFE_COEFF_SET11_BANKB_FLOAT3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET11_4 register description at address offset 0xf0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set11_4
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET11_BANKC_FLOAT1 : 4;
    ///< set11 ffe bankC floating 1 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET11_BANKC_FLOAT2 : 4;
    ///< set11 ffe bankC floating 2 coeff
    ///< AccessType="RW/V" BitOffset="4" ResetValue="0x0"
    uint32_t FFE_COEFF_SET11_BANKC_FLOAT3 : 4;
    ///< set11 ffe bankC floating 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set11_4_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET11_4_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_4_RD_MASK (0x00000fffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_4_WR_MASK (0x00000fffU)


///< set11 ffe bankC floating 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_4_FFE_COEFF_SET11_BANKC_FLOAT1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_4_FFE_COEFF_SET11_BANKC_FLOAT1_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_4_FFE_COEFF_SET11_BANKC_FLOAT1_BF_MSK (0x0000000F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_4_FFE_COEFF_SET11_BANKC_FLOAT1_BF_DEF (0x00000000)

///< set11 ffe bankC floating 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_4_FFE_COEFF_SET11_BANKC_FLOAT2_BF_OFF ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_4_FFE_COEFF_SET11_BANKC_FLOAT2_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_4_FFE_COEFF_SET11_BANKC_FLOAT2_BF_MSK (0x000000F0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_4_FFE_COEFF_SET11_BANKC_FLOAT2_BF_DEF (0x00000000)

///< set11 ffe bankC floating 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_4_FFE_COEFF_SET11_BANKC_FLOAT3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_4_FFE_COEFF_SET11_BANKC_FLOAT3_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_4_FFE_COEFF_SET11_BANKC_FLOAT3_BF_MSK (0x00000F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_4_FFE_COEFF_SET11_BANKC_FLOAT3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET12_0 register description at address offset 0xf4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set12_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET12_COEFF_PRE3 : 6;
    ///< set12 ffe pre cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t FFE_COEFF_SET12_COEFF_PRE2 : 6;
    ///< set12 ffe pre cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t FFE_COEFF_SET12_COEFF_PRE1 : 8;
    ///< set12 ffe pre cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET12_COEFF_POST1 : 8;
    ///< set12 ffe post cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set12_0_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET12_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_0_RD_MASK (0xffff3f3fU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_0_WR_MASK (0xffff3f3fU)


///< set12 ffe pre cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_0_FFE_COEFF_SET12_COEFF_PRE3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_0_FFE_COEFF_SET12_COEFF_PRE3_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_0_FFE_COEFF_SET12_COEFF_PRE3_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_0_FFE_COEFF_SET12_COEFF_PRE3_BF_DEF (0x00000000)

///< set12 ffe pre cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_0_FFE_COEFF_SET12_COEFF_PRE2_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_0_FFE_COEFF_SET12_COEFF_PRE2_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_0_FFE_COEFF_SET12_COEFF_PRE2_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_0_FFE_COEFF_SET12_COEFF_PRE2_BF_DEF (0x00000000)

///< set12 ffe pre cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_0_FFE_COEFF_SET12_COEFF_PRE1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_0_FFE_COEFF_SET12_COEFF_PRE1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_0_FFE_COEFF_SET12_COEFF_PRE1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_0_FFE_COEFF_SET12_COEFF_PRE1_BF_DEF (0x00000000)

///< set12 ffe post cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_0_FFE_COEFF_SET12_COEFF_POST1_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_0_FFE_COEFF_SET12_COEFF_POST1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_0_FFE_COEFF_SET12_COEFF_POST1_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_0_FFE_COEFF_SET12_COEFF_POST1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET12_1 register description at address offset 0xf8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set12_1
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET12_COEFF_POST2 : 8;
    ///< set12 ffe post cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET12_COEFF_POST3 : 6;
    ///< set12 ffe post cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t FFE_COEFF_SET12_COEFF_POST4 : 6;
    ///< set12 ffe post cursor 4 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t FFE_COEFF_SET12_COEFF_POST5 : 6;
    ///< set12 ffe post cursor 5 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set12_1_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET12_1_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_1_RD_MASK (0x3f3f3fffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_1_WR_MASK (0x3f3f3fffU)


///< set12 ffe post cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_1_FFE_COEFF_SET12_COEFF_POST2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_1_FFE_COEFF_SET12_COEFF_POST2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_1_FFE_COEFF_SET12_COEFF_POST2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_1_FFE_COEFF_SET12_COEFF_POST2_BF_DEF (0x00000000)

///< set12 ffe post cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_1_FFE_COEFF_SET12_COEFF_POST3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_1_FFE_COEFF_SET12_COEFF_POST3_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_1_FFE_COEFF_SET12_COEFF_POST3_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_1_FFE_COEFF_SET12_COEFF_POST3_BF_DEF (0x00000000)

///< set12 ffe post cursor 4 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_1_FFE_COEFF_SET12_COEFF_POST4_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_1_FFE_COEFF_SET12_COEFF_POST4_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_1_FFE_COEFF_SET12_COEFF_POST4_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_1_FFE_COEFF_SET12_COEFF_POST4_BF_DEF (0x00000000)

///< set12 ffe post cursor 5 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_1_FFE_COEFF_SET12_COEFF_POST5_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_1_FFE_COEFF_SET12_COEFF_POST5_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_1_FFE_COEFF_SET12_COEFF_POST5_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_1_FFE_COEFF_SET12_COEFF_POST5_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET12_2 register description at address offset 0xfc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set12_2
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET12_COEFF_POST6 : 6;
    ///< set12 ffe post cursor 6 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t FFE_COEFF_SET12_COEFF_POST7 : 6;
    ///< set12 ffe post cursor 7 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t FFE_COEFF_SET12_COEFF_POST8 : 6;
    ///< set12 ffe post cursor 8 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t FFE_COEFF_SET12_COEFF_POST9 : 4;
    ///< set12 ffe post cursor 9 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t FFE_COEFF_SET12_COEFF_POST10 : 4;
    ///< set12 ffe post cursor 10 coeff
    ///< AccessType="RW/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set12_2_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET12_2_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_2_RD_MASK (0xff3f3f3fU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_2_WR_MASK (0xff3f3f3fU)


///< set12 ffe post cursor 6 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_2_FFE_COEFF_SET12_COEFF_POST6_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_2_FFE_COEFF_SET12_COEFF_POST6_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_2_FFE_COEFF_SET12_COEFF_POST6_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_2_FFE_COEFF_SET12_COEFF_POST6_BF_DEF (0x00000000)

///< set12 ffe post cursor 7 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_2_FFE_COEFF_SET12_COEFF_POST7_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_2_FFE_COEFF_SET12_COEFF_POST7_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_2_FFE_COEFF_SET12_COEFF_POST7_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_2_FFE_COEFF_SET12_COEFF_POST7_BF_DEF (0x00000000)

///< set12 ffe post cursor 8 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_2_FFE_COEFF_SET12_COEFF_POST8_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_2_FFE_COEFF_SET12_COEFF_POST8_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_2_FFE_COEFF_SET12_COEFF_POST8_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_2_FFE_COEFF_SET12_COEFF_POST8_BF_DEF (0x00000000)

///< set12 ffe post cursor 9 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_2_FFE_COEFF_SET12_COEFF_POST9_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_2_FFE_COEFF_SET12_COEFF_POST9_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_2_FFE_COEFF_SET12_COEFF_POST9_BF_MSK (0x0F000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_2_FFE_COEFF_SET12_COEFF_POST9_BF_DEF (0x00000000)

///< set12 ffe post cursor 10 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_2_FFE_COEFF_SET12_COEFF_POST10_BF_OFF (28)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_2_FFE_COEFF_SET12_COEFF_POST10_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_2_FFE_COEFF_SET12_COEFF_POST10_BF_MSK (0xF0000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_2_FFE_COEFF_SET12_COEFF_POST10_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET12_3 register description at address offset 0x100
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set12_3
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET12_COEFF_POST11 : 4;
    ///< set12 ffe post cursor 11 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET12_COEFF_POST12 : 4;
    ///< set12 ffe post cursor 12 coeff
    ///< AccessType="RW/V" BitOffset="4" ResetValue="0x0"
    uint32_t FFE_COEFF_SET12_BANKA_FLOAT1 : 4;
    ///< set12 ffe bankA floating 1 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET12_BANKA_FLOAT2 : 4;
    ///< set12 ffe bankA floating 2 coeff
    ///< AccessType="RW/V" BitOffset="12" ResetValue="0x0"
    uint32_t FFE_COEFF_SET12_BANKA_FLOAT3 : 4;
    ///< set12 ffe bankA floating 3 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET12_BANKB_FLOAT1 : 4;
    ///< set12 ffe bankB floating 1 coeff
    ///< AccessType="RW/V" BitOffset="20" ResetValue="0x0"
    uint32_t FFE_COEFF_SET12_BANKB_FLOAT2 : 4;
    ///< set12 ffe bankB floating 2 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t FFE_COEFF_SET12_BANKB_FLOAT3 : 4;
    ///< set12 ffe bankB floating 3 coeff
    ///< AccessType="RW/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set12_3_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET12_3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_3_WR_MASK (0xffffffffU)


///< set12 ffe post cursor 11 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_3_FFE_COEFF_SET12_COEFF_POST11_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_3_FFE_COEFF_SET12_COEFF_POST11_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_3_FFE_COEFF_SET12_COEFF_POST11_BF_MSK (0x0000000F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_3_FFE_COEFF_SET12_COEFF_POST11_BF_DEF (0x00000000)

///< set12 ffe post cursor 12 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_3_FFE_COEFF_SET12_COEFF_POST12_BF_OFF ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_3_FFE_COEFF_SET12_COEFF_POST12_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_3_FFE_COEFF_SET12_COEFF_POST12_BF_MSK (0x000000F0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_3_FFE_COEFF_SET12_COEFF_POST12_BF_DEF (0x00000000)

///< set12 ffe bankA floating 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_3_FFE_COEFF_SET12_BANKA_FLOAT1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_3_FFE_COEFF_SET12_BANKA_FLOAT1_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_3_FFE_COEFF_SET12_BANKA_FLOAT1_BF_MSK (0x00000F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_3_FFE_COEFF_SET12_BANKA_FLOAT1_BF_DEF (0x00000000)

///< set12 ffe bankA floating 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_3_FFE_COEFF_SET12_BANKA_FLOAT2_BF_OFF (12)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_3_FFE_COEFF_SET12_BANKA_FLOAT2_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_3_FFE_COEFF_SET12_BANKA_FLOAT2_BF_MSK (0x0000F000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_3_FFE_COEFF_SET12_BANKA_FLOAT2_BF_DEF (0x00000000)

///< set12 ffe bankA floating 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_3_FFE_COEFF_SET12_BANKA_FLOAT3_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_3_FFE_COEFF_SET12_BANKA_FLOAT3_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_3_FFE_COEFF_SET12_BANKA_FLOAT3_BF_MSK (0x000F0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_3_FFE_COEFF_SET12_BANKA_FLOAT3_BF_DEF (0x00000000)

///< set12 ffe bankB floating 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_3_FFE_COEFF_SET12_BANKB_FLOAT1_BF_OFF (20)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_3_FFE_COEFF_SET12_BANKB_FLOAT1_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_3_FFE_COEFF_SET12_BANKB_FLOAT1_BF_MSK (0x00F00000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_3_FFE_COEFF_SET12_BANKB_FLOAT1_BF_DEF (0x00000000)

///< set12 ffe bankB floating 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_3_FFE_COEFF_SET12_BANKB_FLOAT2_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_3_FFE_COEFF_SET12_BANKB_FLOAT2_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_3_FFE_COEFF_SET12_BANKB_FLOAT2_BF_MSK (0x0F000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_3_FFE_COEFF_SET12_BANKB_FLOAT2_BF_DEF (0x00000000)

///< set12 ffe bankB floating 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_3_FFE_COEFF_SET12_BANKB_FLOAT3_BF_OFF (28)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_3_FFE_COEFF_SET12_BANKB_FLOAT3_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_3_FFE_COEFF_SET12_BANKB_FLOAT3_BF_MSK (0xF0000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_3_FFE_COEFF_SET12_BANKB_FLOAT3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET12_4 register description at address offset 0x104
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set12_4
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET12_BANKC_FLOAT1 : 4;
    ///< set12 ffe bankC floating 1 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET12_BANKC_FLOAT2 : 4;
    ///< set12 ffe bankC floating 2 coeff
    ///< AccessType="RW/V" BitOffset="4" ResetValue="0x0"
    uint32_t FFE_COEFF_SET12_BANKC_FLOAT3 : 4;
    ///< set12 ffe bankC floating 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set12_4_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET12_4_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_4_RD_MASK (0x00000fffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_4_WR_MASK (0x00000fffU)


///< set12 ffe bankC floating 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_4_FFE_COEFF_SET12_BANKC_FLOAT1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_4_FFE_COEFF_SET12_BANKC_FLOAT1_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_4_FFE_COEFF_SET12_BANKC_FLOAT1_BF_MSK (0x0000000F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_4_FFE_COEFF_SET12_BANKC_FLOAT1_BF_DEF (0x00000000)

///< set12 ffe bankC floating 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_4_FFE_COEFF_SET12_BANKC_FLOAT2_BF_OFF ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_4_FFE_COEFF_SET12_BANKC_FLOAT2_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_4_FFE_COEFF_SET12_BANKC_FLOAT2_BF_MSK (0x000000F0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_4_FFE_COEFF_SET12_BANKC_FLOAT2_BF_DEF (0x00000000)

///< set12 ffe bankC floating 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_4_FFE_COEFF_SET12_BANKC_FLOAT3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_4_FFE_COEFF_SET12_BANKC_FLOAT3_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_4_FFE_COEFF_SET12_BANKC_FLOAT3_BF_MSK (0x00000F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_4_FFE_COEFF_SET12_BANKC_FLOAT3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET13_0 register description at address offset 0x108
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set13_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET13_COEFF_PRE3 : 6;
    ///< set13 ffe pre cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t FFE_COEFF_SET13_COEFF_PRE2 : 6;
    ///< set13 ffe pre cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t FFE_COEFF_SET13_COEFF_PRE1 : 8;
    ///< set13 ffe pre cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET13_COEFF_POST1 : 8;
    ///< set13 ffe post cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set13_0_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET13_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_0_RD_MASK (0xffff3f3fU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_0_WR_MASK (0xffff3f3fU)


///< set13 ffe pre cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_0_FFE_COEFF_SET13_COEFF_PRE3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_0_FFE_COEFF_SET13_COEFF_PRE3_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_0_FFE_COEFF_SET13_COEFF_PRE3_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_0_FFE_COEFF_SET13_COEFF_PRE3_BF_DEF (0x00000000)

///< set13 ffe pre cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_0_FFE_COEFF_SET13_COEFF_PRE2_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_0_FFE_COEFF_SET13_COEFF_PRE2_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_0_FFE_COEFF_SET13_COEFF_PRE2_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_0_FFE_COEFF_SET13_COEFF_PRE2_BF_DEF (0x00000000)

///< set13 ffe pre cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_0_FFE_COEFF_SET13_COEFF_PRE1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_0_FFE_COEFF_SET13_COEFF_PRE1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_0_FFE_COEFF_SET13_COEFF_PRE1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_0_FFE_COEFF_SET13_COEFF_PRE1_BF_DEF (0x00000000)

///< set13 ffe post cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_0_FFE_COEFF_SET13_COEFF_POST1_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_0_FFE_COEFF_SET13_COEFF_POST1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_0_FFE_COEFF_SET13_COEFF_POST1_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_0_FFE_COEFF_SET13_COEFF_POST1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET13_1 register description at address offset 0x10c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set13_1
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET13_COEFF_POST2 : 8;
    ///< set13 ffe post cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET13_COEFF_POST3 : 6;
    ///< set13 ffe post cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t FFE_COEFF_SET13_COEFF_POST4 : 6;
    ///< set13 ffe post cursor 4 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t FFE_COEFF_SET13_COEFF_POST5 : 6;
    ///< set13 ffe post cursor 5 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set13_1_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET13_1_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_1_RD_MASK (0x3f3f3fffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_1_WR_MASK (0x3f3f3fffU)


///< set13 ffe post cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_1_FFE_COEFF_SET13_COEFF_POST2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_1_FFE_COEFF_SET13_COEFF_POST2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_1_FFE_COEFF_SET13_COEFF_POST2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_1_FFE_COEFF_SET13_COEFF_POST2_BF_DEF (0x00000000)

///< set13 ffe post cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_1_FFE_COEFF_SET13_COEFF_POST3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_1_FFE_COEFF_SET13_COEFF_POST3_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_1_FFE_COEFF_SET13_COEFF_POST3_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_1_FFE_COEFF_SET13_COEFF_POST3_BF_DEF (0x00000000)

///< set13 ffe post cursor 4 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_1_FFE_COEFF_SET13_COEFF_POST4_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_1_FFE_COEFF_SET13_COEFF_POST4_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_1_FFE_COEFF_SET13_COEFF_POST4_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_1_FFE_COEFF_SET13_COEFF_POST4_BF_DEF (0x00000000)

///< set13 ffe post cursor 5 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_1_FFE_COEFF_SET13_COEFF_POST5_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_1_FFE_COEFF_SET13_COEFF_POST5_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_1_FFE_COEFF_SET13_COEFF_POST5_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_1_FFE_COEFF_SET13_COEFF_POST5_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET13_2 register description at address offset 0x110
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set13_2
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET13_COEFF_POST6 : 6;
    ///< set13 ffe post cursor 6 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t FFE_COEFF_SET13_COEFF_POST7 : 6;
    ///< set13 ffe post cursor 7 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t FFE_COEFF_SET13_COEFF_POST8 : 6;
    ///< set13 ffe post cursor 8 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t FFE_COEFF_SET13_COEFF_POST9 : 4;
    ///< set13 ffe post cursor 9 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t FFE_COEFF_SET13_COEFF_POST10 : 4;
    ///< set13 ffe post cursor 10 coeff
    ///< AccessType="RW/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set13_2_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET13_2_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_2_RD_MASK (0xff3f3f3fU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_2_WR_MASK (0xff3f3f3fU)


///< set13 ffe post cursor 6 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_2_FFE_COEFF_SET13_COEFF_POST6_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_2_FFE_COEFF_SET13_COEFF_POST6_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_2_FFE_COEFF_SET13_COEFF_POST6_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_2_FFE_COEFF_SET13_COEFF_POST6_BF_DEF (0x00000000)

///< set13 ffe post cursor 7 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_2_FFE_COEFF_SET13_COEFF_POST7_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_2_FFE_COEFF_SET13_COEFF_POST7_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_2_FFE_COEFF_SET13_COEFF_POST7_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_2_FFE_COEFF_SET13_COEFF_POST7_BF_DEF (0x00000000)

///< set13 ffe post cursor 8 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_2_FFE_COEFF_SET13_COEFF_POST8_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_2_FFE_COEFF_SET13_COEFF_POST8_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_2_FFE_COEFF_SET13_COEFF_POST8_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_2_FFE_COEFF_SET13_COEFF_POST8_BF_DEF (0x00000000)

///< set13 ffe post cursor 9 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_2_FFE_COEFF_SET13_COEFF_POST9_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_2_FFE_COEFF_SET13_COEFF_POST9_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_2_FFE_COEFF_SET13_COEFF_POST9_BF_MSK (0x0F000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_2_FFE_COEFF_SET13_COEFF_POST9_BF_DEF (0x00000000)

///< set13 ffe post cursor 10 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_2_FFE_COEFF_SET13_COEFF_POST10_BF_OFF (28)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_2_FFE_COEFF_SET13_COEFF_POST10_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_2_FFE_COEFF_SET13_COEFF_POST10_BF_MSK (0xF0000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_2_FFE_COEFF_SET13_COEFF_POST10_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET13_3 register description at address offset 0x114
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set13_3
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET13_COEFF_POST11 : 4;
    ///< set13 ffe post cursor 11 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET13_COEFF_POST12 : 4;
    ///< set13 ffe post cursor 12 coeff
    ///< AccessType="RW/V" BitOffset="4" ResetValue="0x0"
    uint32_t FFE_COEFF_SET13_BANKA_FLOAT1 : 4;
    ///< set13 ffe bankA floating 1 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET13_BANKA_FLOAT2 : 4;
    ///< set13 ffe bankA floating 2 coeff
    ///< AccessType="RW/V" BitOffset="12" ResetValue="0x0"
    uint32_t FFE_COEFF_SET13_BANKA_FLOAT3 : 4;
    ///< set13 ffe bankA floating 3 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET13_BANKB_FLOAT1 : 4;
    ///< set13 ffe bankB floating 1 coeff
    ///< AccessType="RW/V" BitOffset="20" ResetValue="0x0"
    uint32_t FFE_COEFF_SET13_BANKB_FLOAT2 : 4;
    ///< set13 ffe bankB floating 2 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t FFE_COEFF_SET13_BANKB_FLOAT3 : 4;
    ///< set13 ffe bankB floating 3 coeff
    ///< AccessType="RW/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set13_3_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET13_3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_3_WR_MASK (0xffffffffU)


///< set13 ffe post cursor 11 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_3_FFE_COEFF_SET13_COEFF_POST11_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_3_FFE_COEFF_SET13_COEFF_POST11_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_3_FFE_COEFF_SET13_COEFF_POST11_BF_MSK (0x0000000F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_3_FFE_COEFF_SET13_COEFF_POST11_BF_DEF (0x00000000)

///< set13 ffe post cursor 12 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_3_FFE_COEFF_SET13_COEFF_POST12_BF_OFF ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_3_FFE_COEFF_SET13_COEFF_POST12_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_3_FFE_COEFF_SET13_COEFF_POST12_BF_MSK (0x000000F0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_3_FFE_COEFF_SET13_COEFF_POST12_BF_DEF (0x00000000)

///< set13 ffe bankA floating 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_3_FFE_COEFF_SET13_BANKA_FLOAT1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_3_FFE_COEFF_SET13_BANKA_FLOAT1_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_3_FFE_COEFF_SET13_BANKA_FLOAT1_BF_MSK (0x00000F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_3_FFE_COEFF_SET13_BANKA_FLOAT1_BF_DEF (0x00000000)

///< set13 ffe bankA floating 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_3_FFE_COEFF_SET13_BANKA_FLOAT2_BF_OFF (12)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_3_FFE_COEFF_SET13_BANKA_FLOAT2_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_3_FFE_COEFF_SET13_BANKA_FLOAT2_BF_MSK (0x0000F000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_3_FFE_COEFF_SET13_BANKA_FLOAT2_BF_DEF (0x00000000)

///< set13 ffe bankA floating 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_3_FFE_COEFF_SET13_BANKA_FLOAT3_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_3_FFE_COEFF_SET13_BANKA_FLOAT3_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_3_FFE_COEFF_SET13_BANKA_FLOAT3_BF_MSK (0x000F0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_3_FFE_COEFF_SET13_BANKA_FLOAT3_BF_DEF (0x00000000)

///< set13 ffe bankB floating 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_3_FFE_COEFF_SET13_BANKB_FLOAT1_BF_OFF (20)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_3_FFE_COEFF_SET13_BANKB_FLOAT1_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_3_FFE_COEFF_SET13_BANKB_FLOAT1_BF_MSK (0x00F00000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_3_FFE_COEFF_SET13_BANKB_FLOAT1_BF_DEF (0x00000000)

///< set13 ffe bankB floating 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_3_FFE_COEFF_SET13_BANKB_FLOAT2_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_3_FFE_COEFF_SET13_BANKB_FLOAT2_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_3_FFE_COEFF_SET13_BANKB_FLOAT2_BF_MSK (0x0F000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_3_FFE_COEFF_SET13_BANKB_FLOAT2_BF_DEF (0x00000000)

///< set13 ffe bankB floating 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_3_FFE_COEFF_SET13_BANKB_FLOAT3_BF_OFF (28)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_3_FFE_COEFF_SET13_BANKB_FLOAT3_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_3_FFE_COEFF_SET13_BANKB_FLOAT3_BF_MSK (0xF0000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_3_FFE_COEFF_SET13_BANKB_FLOAT3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET13_4 register description at address offset 0x118
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set13_4
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET13_BANKC_FLOAT1 : 4;
    ///< set13 ffe bankC floating 1 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET13_BANKC_FLOAT2 : 4;
    ///< set13 ffe bankC floating 2 coeff
    ///< AccessType="RW/V" BitOffset="4" ResetValue="0x0"
    uint32_t FFE_COEFF_SET13_BANKC_FLOAT3 : 4;
    ///< set13 ffe bankC floating 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set13_4_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET13_4_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_4_RD_MASK (0x00000fffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_4_WR_MASK (0x00000fffU)


///< set13 ffe bankC floating 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_4_FFE_COEFF_SET13_BANKC_FLOAT1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_4_FFE_COEFF_SET13_BANKC_FLOAT1_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_4_FFE_COEFF_SET13_BANKC_FLOAT1_BF_MSK (0x0000000F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_4_FFE_COEFF_SET13_BANKC_FLOAT1_BF_DEF (0x00000000)

///< set13 ffe bankC floating 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_4_FFE_COEFF_SET13_BANKC_FLOAT2_BF_OFF ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_4_FFE_COEFF_SET13_BANKC_FLOAT2_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_4_FFE_COEFF_SET13_BANKC_FLOAT2_BF_MSK (0x000000F0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_4_FFE_COEFF_SET13_BANKC_FLOAT2_BF_DEF (0x00000000)

///< set13 ffe bankC floating 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_4_FFE_COEFF_SET13_BANKC_FLOAT3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_4_FFE_COEFF_SET13_BANKC_FLOAT3_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_4_FFE_COEFF_SET13_BANKC_FLOAT3_BF_MSK (0x00000F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_4_FFE_COEFF_SET13_BANKC_FLOAT3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET14_0 register description at address offset 0x11c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set14_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET14_COEFF_PRE3 : 6;
    ///< set14 ffe pre cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t FFE_COEFF_SET14_COEFF_PRE2 : 6;
    ///< set14 ffe pre cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t FFE_COEFF_SET14_COEFF_PRE1 : 8;
    ///< set14 ffe pre cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET14_COEFF_POST1 : 8;
    ///< set14 ffe post cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set14_0_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET14_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_0_RD_MASK (0xffff3f3fU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_0_WR_MASK (0xffff3f3fU)


///< set14 ffe pre cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_0_FFE_COEFF_SET14_COEFF_PRE3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_0_FFE_COEFF_SET14_COEFF_PRE3_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_0_FFE_COEFF_SET14_COEFF_PRE3_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_0_FFE_COEFF_SET14_COEFF_PRE3_BF_DEF (0x00000000)

///< set14 ffe pre cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_0_FFE_COEFF_SET14_COEFF_PRE2_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_0_FFE_COEFF_SET14_COEFF_PRE2_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_0_FFE_COEFF_SET14_COEFF_PRE2_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_0_FFE_COEFF_SET14_COEFF_PRE2_BF_DEF (0x00000000)

///< set14 ffe pre cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_0_FFE_COEFF_SET14_COEFF_PRE1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_0_FFE_COEFF_SET14_COEFF_PRE1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_0_FFE_COEFF_SET14_COEFF_PRE1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_0_FFE_COEFF_SET14_COEFF_PRE1_BF_DEF (0x00000000)

///< set14 ffe post cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_0_FFE_COEFF_SET14_COEFF_POST1_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_0_FFE_COEFF_SET14_COEFF_POST1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_0_FFE_COEFF_SET14_COEFF_POST1_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_0_FFE_COEFF_SET14_COEFF_POST1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET14_1 register description at address offset 0x120
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set14_1
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET14_COEFF_POST2 : 8;
    ///< set14 ffe post cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET14_COEFF_POST3 : 6;
    ///< set14 ffe post cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t FFE_COEFF_SET14_COEFF_POST4 : 6;
    ///< set14 ffe post cursor 4 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t FFE_COEFF_SET14_COEFF_POST5 : 6;
    ///< set14 ffe post cursor 5 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set14_1_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET14_1_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_1_RD_MASK (0x3f3f3fffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_1_WR_MASK (0x3f3f3fffU)


///< set14 ffe post cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_1_FFE_COEFF_SET14_COEFF_POST2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_1_FFE_COEFF_SET14_COEFF_POST2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_1_FFE_COEFF_SET14_COEFF_POST2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_1_FFE_COEFF_SET14_COEFF_POST2_BF_DEF (0x00000000)

///< set14 ffe post cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_1_FFE_COEFF_SET14_COEFF_POST3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_1_FFE_COEFF_SET14_COEFF_POST3_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_1_FFE_COEFF_SET14_COEFF_POST3_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_1_FFE_COEFF_SET14_COEFF_POST3_BF_DEF (0x00000000)

///< set14 ffe post cursor 4 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_1_FFE_COEFF_SET14_COEFF_POST4_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_1_FFE_COEFF_SET14_COEFF_POST4_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_1_FFE_COEFF_SET14_COEFF_POST4_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_1_FFE_COEFF_SET14_COEFF_POST4_BF_DEF (0x00000000)

///< set14 ffe post cursor 5 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_1_FFE_COEFF_SET14_COEFF_POST5_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_1_FFE_COEFF_SET14_COEFF_POST5_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_1_FFE_COEFF_SET14_COEFF_POST5_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_1_FFE_COEFF_SET14_COEFF_POST5_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET14_2 register description at address offset 0x124
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set14_2
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET14_COEFF_POST6 : 6;
    ///< set14 ffe post cursor 6 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t FFE_COEFF_SET14_COEFF_POST7 : 6;
    ///< set14 ffe post cursor 7 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t FFE_COEFF_SET14_COEFF_POST8 : 6;
    ///< set14 ffe post cursor 8 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t FFE_COEFF_SET14_COEFF_POST9 : 4;
    ///< set14 ffe post cursor 9 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t FFE_COEFF_SET14_COEFF_POST10 : 4;
    ///< set14 ffe post cursor 10 coeff
    ///< AccessType="RW/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set14_2_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET14_2_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_2_RD_MASK (0xff3f3f3fU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_2_WR_MASK (0xff3f3f3fU)


///< set14 ffe post cursor 6 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_2_FFE_COEFF_SET14_COEFF_POST6_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_2_FFE_COEFF_SET14_COEFF_POST6_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_2_FFE_COEFF_SET14_COEFF_POST6_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_2_FFE_COEFF_SET14_COEFF_POST6_BF_DEF (0x00000000)

///< set14 ffe post cursor 7 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_2_FFE_COEFF_SET14_COEFF_POST7_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_2_FFE_COEFF_SET14_COEFF_POST7_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_2_FFE_COEFF_SET14_COEFF_POST7_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_2_FFE_COEFF_SET14_COEFF_POST7_BF_DEF (0x00000000)

///< set14 ffe post cursor 8 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_2_FFE_COEFF_SET14_COEFF_POST8_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_2_FFE_COEFF_SET14_COEFF_POST8_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_2_FFE_COEFF_SET14_COEFF_POST8_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_2_FFE_COEFF_SET14_COEFF_POST8_BF_DEF (0x00000000)

///< set14 ffe post cursor 9 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_2_FFE_COEFF_SET14_COEFF_POST9_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_2_FFE_COEFF_SET14_COEFF_POST9_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_2_FFE_COEFF_SET14_COEFF_POST9_BF_MSK (0x0F000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_2_FFE_COEFF_SET14_COEFF_POST9_BF_DEF (0x00000000)

///< set14 ffe post cursor 10 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_2_FFE_COEFF_SET14_COEFF_POST10_BF_OFF (28)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_2_FFE_COEFF_SET14_COEFF_POST10_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_2_FFE_COEFF_SET14_COEFF_POST10_BF_MSK (0xF0000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_2_FFE_COEFF_SET14_COEFF_POST10_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET14_3 register description at address offset 0x128
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set14_3
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET14_COEFF_POST11 : 4;
    ///< set14 ffe post cursor 11 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET14_COEFF_POST12 : 4;
    ///< set14 ffe post cursor 12 coeff
    ///< AccessType="RW/V" BitOffset="4" ResetValue="0x0"
    uint32_t FFE_COEFF_SET14_BANKA_FLOAT1 : 4;
    ///< set14 ffe bankA floating 1 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET14_BANKA_FLOAT2 : 4;
    ///< set14 ffe bankA floating 2 coeff
    ///< AccessType="RW/V" BitOffset="12" ResetValue="0x0"
    uint32_t FFE_COEFF_SET14_BANKA_FLOAT3 : 4;
    ///< set14 ffe bankA floating 3 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET14_BANKB_FLOAT1 : 4;
    ///< set14 ffe bankB floating 1 coeff
    ///< AccessType="RW/V" BitOffset="20" ResetValue="0x0"
    uint32_t FFE_COEFF_SET14_BANKB_FLOAT2 : 4;
    ///< set14 ffe bankB floating 2 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t FFE_COEFF_SET14_BANKB_FLOAT3 : 4;
    ///< set14 ffe bankB floating 3 coeff
    ///< AccessType="RW/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set14_3_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET14_3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_3_WR_MASK (0xffffffffU)


///< set14 ffe post cursor 11 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_3_FFE_COEFF_SET14_COEFF_POST11_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_3_FFE_COEFF_SET14_COEFF_POST11_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_3_FFE_COEFF_SET14_COEFF_POST11_BF_MSK (0x0000000F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_3_FFE_COEFF_SET14_COEFF_POST11_BF_DEF (0x00000000)

///< set14 ffe post cursor 12 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_3_FFE_COEFF_SET14_COEFF_POST12_BF_OFF ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_3_FFE_COEFF_SET14_COEFF_POST12_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_3_FFE_COEFF_SET14_COEFF_POST12_BF_MSK (0x000000F0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_3_FFE_COEFF_SET14_COEFF_POST12_BF_DEF (0x00000000)

///< set14 ffe bankA floating 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_3_FFE_COEFF_SET14_BANKA_FLOAT1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_3_FFE_COEFF_SET14_BANKA_FLOAT1_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_3_FFE_COEFF_SET14_BANKA_FLOAT1_BF_MSK (0x00000F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_3_FFE_COEFF_SET14_BANKA_FLOAT1_BF_DEF (0x00000000)

///< set14 ffe bankA floating 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_3_FFE_COEFF_SET14_BANKA_FLOAT2_BF_OFF (12)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_3_FFE_COEFF_SET14_BANKA_FLOAT2_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_3_FFE_COEFF_SET14_BANKA_FLOAT2_BF_MSK (0x0000F000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_3_FFE_COEFF_SET14_BANKA_FLOAT2_BF_DEF (0x00000000)

///< set14 ffe bankA floating 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_3_FFE_COEFF_SET14_BANKA_FLOAT3_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_3_FFE_COEFF_SET14_BANKA_FLOAT3_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_3_FFE_COEFF_SET14_BANKA_FLOAT3_BF_MSK (0x000F0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_3_FFE_COEFF_SET14_BANKA_FLOAT3_BF_DEF (0x00000000)

///< set14 ffe bankB floating 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_3_FFE_COEFF_SET14_BANKB_FLOAT1_BF_OFF (20)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_3_FFE_COEFF_SET14_BANKB_FLOAT1_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_3_FFE_COEFF_SET14_BANKB_FLOAT1_BF_MSK (0x00F00000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_3_FFE_COEFF_SET14_BANKB_FLOAT1_BF_DEF (0x00000000)

///< set14 ffe bankB floating 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_3_FFE_COEFF_SET14_BANKB_FLOAT2_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_3_FFE_COEFF_SET14_BANKB_FLOAT2_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_3_FFE_COEFF_SET14_BANKB_FLOAT2_BF_MSK (0x0F000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_3_FFE_COEFF_SET14_BANKB_FLOAT2_BF_DEF (0x00000000)

///< set14 ffe bankB floating 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_3_FFE_COEFF_SET14_BANKB_FLOAT3_BF_OFF (28)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_3_FFE_COEFF_SET14_BANKB_FLOAT3_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_3_FFE_COEFF_SET14_BANKB_FLOAT3_BF_MSK (0xF0000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_3_FFE_COEFF_SET14_BANKB_FLOAT3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET14_4 register description at address offset 0x12c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set14_4
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET14_BANKC_FLOAT1 : 4;
    ///< set14 ffe bankC floating 1 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET14_BANKC_FLOAT2 : 4;
    ///< set14 ffe bankC floating 2 coeff
    ///< AccessType="RW/V" BitOffset="4" ResetValue="0x0"
    uint32_t FFE_COEFF_SET14_BANKC_FLOAT3 : 4;
    ///< set14 ffe bankC floating 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set14_4_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET14_4_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_4_RD_MASK (0x00000fffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_4_WR_MASK (0x00000fffU)


///< set14 ffe bankC floating 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_4_FFE_COEFF_SET14_BANKC_FLOAT1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_4_FFE_COEFF_SET14_BANKC_FLOAT1_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_4_FFE_COEFF_SET14_BANKC_FLOAT1_BF_MSK (0x0000000F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_4_FFE_COEFF_SET14_BANKC_FLOAT1_BF_DEF (0x00000000)

///< set14 ffe bankC floating 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_4_FFE_COEFF_SET14_BANKC_FLOAT2_BF_OFF ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_4_FFE_COEFF_SET14_BANKC_FLOAT2_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_4_FFE_COEFF_SET14_BANKC_FLOAT2_BF_MSK (0x000000F0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_4_FFE_COEFF_SET14_BANKC_FLOAT2_BF_DEF (0x00000000)

///< set14 ffe bankC floating 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_4_FFE_COEFF_SET14_BANKC_FLOAT3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_4_FFE_COEFF_SET14_BANKC_FLOAT3_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_4_FFE_COEFF_SET14_BANKC_FLOAT3_BF_MSK (0x00000F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_4_FFE_COEFF_SET14_BANKC_FLOAT3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET15_0 register description at address offset 0x130
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set15_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET15_COEFF_PRE3 : 6;
    ///< set15 ffe pre cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t FFE_COEFF_SET15_COEFF_PRE2 : 6;
    ///< set15 ffe pre cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t FFE_COEFF_SET15_COEFF_PRE1 : 8;
    ///< set15 ffe pre cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET15_COEFF_POST1 : 8;
    ///< set15 ffe post cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set15_0_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET15_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_0_RD_MASK (0xffff3f3fU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_0_WR_MASK (0xffff3f3fU)


///< set15 ffe pre cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_0_FFE_COEFF_SET15_COEFF_PRE3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_0_FFE_COEFF_SET15_COEFF_PRE3_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_0_FFE_COEFF_SET15_COEFF_PRE3_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_0_FFE_COEFF_SET15_COEFF_PRE3_BF_DEF (0x00000000)

///< set15 ffe pre cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_0_FFE_COEFF_SET15_COEFF_PRE2_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_0_FFE_COEFF_SET15_COEFF_PRE2_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_0_FFE_COEFF_SET15_COEFF_PRE2_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_0_FFE_COEFF_SET15_COEFF_PRE2_BF_DEF (0x00000000)

///< set15 ffe pre cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_0_FFE_COEFF_SET15_COEFF_PRE1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_0_FFE_COEFF_SET15_COEFF_PRE1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_0_FFE_COEFF_SET15_COEFF_PRE1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_0_FFE_COEFF_SET15_COEFF_PRE1_BF_DEF (0x00000000)

///< set15 ffe post cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_0_FFE_COEFF_SET15_COEFF_POST1_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_0_FFE_COEFF_SET15_COEFF_POST1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_0_FFE_COEFF_SET15_COEFF_POST1_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_0_FFE_COEFF_SET15_COEFF_POST1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET15_1 register description at address offset 0x134
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set15_1
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET15_COEFF_POST2 : 8;
    ///< set15 ffe post cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET15_COEFF_POST3 : 6;
    ///< set15 ffe post cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t FFE_COEFF_SET15_COEFF_POST4 : 6;
    ///< set15 ffe post cursor 4 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t FFE_COEFF_SET15_COEFF_POST5 : 6;
    ///< set15 ffe post cursor 5 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set15_1_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET15_1_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_1_RD_MASK (0x3f3f3fffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_1_WR_MASK (0x3f3f3fffU)


///< set15 ffe post cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_1_FFE_COEFF_SET15_COEFF_POST2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_1_FFE_COEFF_SET15_COEFF_POST2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_1_FFE_COEFF_SET15_COEFF_POST2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_1_FFE_COEFF_SET15_COEFF_POST2_BF_DEF (0x00000000)

///< set15 ffe post cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_1_FFE_COEFF_SET15_COEFF_POST3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_1_FFE_COEFF_SET15_COEFF_POST3_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_1_FFE_COEFF_SET15_COEFF_POST3_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_1_FFE_COEFF_SET15_COEFF_POST3_BF_DEF (0x00000000)

///< set15 ffe post cursor 4 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_1_FFE_COEFF_SET15_COEFF_POST4_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_1_FFE_COEFF_SET15_COEFF_POST4_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_1_FFE_COEFF_SET15_COEFF_POST4_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_1_FFE_COEFF_SET15_COEFF_POST4_BF_DEF (0x00000000)

///< set15 ffe post cursor 5 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_1_FFE_COEFF_SET15_COEFF_POST5_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_1_FFE_COEFF_SET15_COEFF_POST5_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_1_FFE_COEFF_SET15_COEFF_POST5_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_1_FFE_COEFF_SET15_COEFF_POST5_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET15_2 register description at address offset 0x138
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set15_2
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET15_COEFF_POST6 : 6;
    ///< set15 ffe post cursor 6 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t FFE_COEFF_SET15_COEFF_POST7 : 6;
    ///< set15 ffe post cursor 7 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t FFE_COEFF_SET15_COEFF_POST8 : 6;
    ///< set15 ffe post cursor 8 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t FFE_COEFF_SET15_COEFF_POST9 : 4;
    ///< set15 ffe post cursor 9 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t FFE_COEFF_SET15_COEFF_POST10 : 4;
    ///< set15 ffe post cursor 10 coeff
    ///< AccessType="RW/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set15_2_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET15_2_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_2_RD_MASK (0xff3f3f3fU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_2_WR_MASK (0xff3f3f3fU)


///< set15 ffe post cursor 6 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_2_FFE_COEFF_SET15_COEFF_POST6_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_2_FFE_COEFF_SET15_COEFF_POST6_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_2_FFE_COEFF_SET15_COEFF_POST6_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_2_FFE_COEFF_SET15_COEFF_POST6_BF_DEF (0x00000000)

///< set15 ffe post cursor 7 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_2_FFE_COEFF_SET15_COEFF_POST7_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_2_FFE_COEFF_SET15_COEFF_POST7_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_2_FFE_COEFF_SET15_COEFF_POST7_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_2_FFE_COEFF_SET15_COEFF_POST7_BF_DEF (0x00000000)

///< set15 ffe post cursor 8 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_2_FFE_COEFF_SET15_COEFF_POST8_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_2_FFE_COEFF_SET15_COEFF_POST8_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_2_FFE_COEFF_SET15_COEFF_POST8_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_2_FFE_COEFF_SET15_COEFF_POST8_BF_DEF (0x00000000)

///< set15 ffe post cursor 9 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_2_FFE_COEFF_SET15_COEFF_POST9_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_2_FFE_COEFF_SET15_COEFF_POST9_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_2_FFE_COEFF_SET15_COEFF_POST9_BF_MSK (0x0F000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_2_FFE_COEFF_SET15_COEFF_POST9_BF_DEF (0x00000000)

///< set15 ffe post cursor 10 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_2_FFE_COEFF_SET15_COEFF_POST10_BF_OFF (28)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_2_FFE_COEFF_SET15_COEFF_POST10_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_2_FFE_COEFF_SET15_COEFF_POST10_BF_MSK (0xF0000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_2_FFE_COEFF_SET15_COEFF_POST10_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET15_3 register description at address offset 0x13c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set15_3
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET15_COEFF_POST11 : 4;
    ///< set15 ffe post cursor 11 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET15_COEFF_POST12 : 4;
    ///< set15 ffe post cursor 12 coeff
    ///< AccessType="RW/V" BitOffset="4" ResetValue="0x0"
    uint32_t FFE_COEFF_SET15_BANKA_FLOAT1 : 4;
    ///< set15 ffe bankA floating 1 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET15_BANKA_FLOAT2 : 4;
    ///< set15 ffe bankA floating 2 coeff
    ///< AccessType="RW/V" BitOffset="12" ResetValue="0x0"
    uint32_t FFE_COEFF_SET15_BANKA_FLOAT3 : 4;
    ///< set15 ffe bankA floating 3 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET15_BANKB_FLOAT1 : 4;
    ///< set15 ffe bankB floating 1 coeff
    ///< AccessType="RW/V" BitOffset="20" ResetValue="0x0"
    uint32_t FFE_COEFF_SET15_BANKB_FLOAT2 : 4;
    ///< set15 ffe bankB floating 2 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t FFE_COEFF_SET15_BANKB_FLOAT3 : 4;
    ///< set15 ffe bankB floating 3 coeff
    ///< AccessType="RW/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set15_3_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET15_3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_3_WR_MASK (0xffffffffU)


///< set15 ffe post cursor 11 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_3_FFE_COEFF_SET15_COEFF_POST11_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_3_FFE_COEFF_SET15_COEFF_POST11_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_3_FFE_COEFF_SET15_COEFF_POST11_BF_MSK (0x0000000F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_3_FFE_COEFF_SET15_COEFF_POST11_BF_DEF (0x00000000)

///< set15 ffe post cursor 12 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_3_FFE_COEFF_SET15_COEFF_POST12_BF_OFF ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_3_FFE_COEFF_SET15_COEFF_POST12_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_3_FFE_COEFF_SET15_COEFF_POST12_BF_MSK (0x000000F0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_3_FFE_COEFF_SET15_COEFF_POST12_BF_DEF (0x00000000)

///< set15 ffe bankA floating 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_3_FFE_COEFF_SET15_BANKA_FLOAT1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_3_FFE_COEFF_SET15_BANKA_FLOAT1_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_3_FFE_COEFF_SET15_BANKA_FLOAT1_BF_MSK (0x00000F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_3_FFE_COEFF_SET15_BANKA_FLOAT1_BF_DEF (0x00000000)

///< set15 ffe bankA floating 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_3_FFE_COEFF_SET15_BANKA_FLOAT2_BF_OFF (12)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_3_FFE_COEFF_SET15_BANKA_FLOAT2_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_3_FFE_COEFF_SET15_BANKA_FLOAT2_BF_MSK (0x0000F000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_3_FFE_COEFF_SET15_BANKA_FLOAT2_BF_DEF (0x00000000)

///< set15 ffe bankA floating 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_3_FFE_COEFF_SET15_BANKA_FLOAT3_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_3_FFE_COEFF_SET15_BANKA_FLOAT3_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_3_FFE_COEFF_SET15_BANKA_FLOAT3_BF_MSK (0x000F0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_3_FFE_COEFF_SET15_BANKA_FLOAT3_BF_DEF (0x00000000)

///< set15 ffe bankB floating 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_3_FFE_COEFF_SET15_BANKB_FLOAT1_BF_OFF (20)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_3_FFE_COEFF_SET15_BANKB_FLOAT1_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_3_FFE_COEFF_SET15_BANKB_FLOAT1_BF_MSK (0x00F00000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_3_FFE_COEFF_SET15_BANKB_FLOAT1_BF_DEF (0x00000000)

///< set15 ffe bankB floating 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_3_FFE_COEFF_SET15_BANKB_FLOAT2_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_3_FFE_COEFF_SET15_BANKB_FLOAT2_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_3_FFE_COEFF_SET15_BANKB_FLOAT2_BF_MSK (0x0F000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_3_FFE_COEFF_SET15_BANKB_FLOAT2_BF_DEF (0x00000000)

///< set15 ffe bankB floating 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_3_FFE_COEFF_SET15_BANKB_FLOAT3_BF_OFF (28)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_3_FFE_COEFF_SET15_BANKB_FLOAT3_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_3_FFE_COEFF_SET15_BANKB_FLOAT3_BF_MSK (0xF0000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_3_FFE_COEFF_SET15_BANKB_FLOAT3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET15_4 register description at address offset 0x140
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set15_4
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET15_BANKC_FLOAT1 : 4;
    ///< set15 ffe bankC floating 1 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET15_BANKC_FLOAT2 : 4;
    ///< set15 ffe bankC floating 2 coeff
    ///< AccessType="RW/V" BitOffset="4" ResetValue="0x0"
    uint32_t FFE_COEFF_SET15_BANKC_FLOAT3 : 4;
    ///< set15 ffe bankC floating 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set15_4_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET15_4_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_4_RD_MASK (0x00000fffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_4_WR_MASK (0x00000fffU)


///< set15 ffe bankC floating 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_4_FFE_COEFF_SET15_BANKC_FLOAT1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_4_FFE_COEFF_SET15_BANKC_FLOAT1_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_4_FFE_COEFF_SET15_BANKC_FLOAT1_BF_MSK (0x0000000F)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_4_FFE_COEFF_SET15_BANKC_FLOAT1_BF_DEF (0x00000000)

///< set15 ffe bankC floating 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_4_FFE_COEFF_SET15_BANKC_FLOAT2_BF_OFF ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_4_FFE_COEFF_SET15_BANKC_FLOAT2_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_4_FFE_COEFF_SET15_BANKC_FLOAT2_BF_MSK (0x000000F0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_4_FFE_COEFF_SET15_BANKC_FLOAT2_BF_DEF (0x00000000)

///< set15 ffe bankC floating 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_4_FFE_COEFF_SET15_BANKC_FLOAT3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_4_FFE_COEFF_SET15_BANKC_FLOAT3_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_4_FFE_COEFF_SET15_BANKC_FLOAT3_BF_MSK (0x00000F00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_4_FFE_COEFF_SET15_BANKC_FLOAT3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_SLICE_LEVEL_SET0 register description at address offset 0x148
  *
  * Register default value:        0x2B000150
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_slice_level_set0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_SLICE_LEVEL_SET0_P1 : 10;
    ///< set0 of ffe +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x150"
    uint32_t FFE_SLICE_LEVEL_SET0_0 : 10;
    ///< set0 of ffe 0 slicer level
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x0"
    uint32_t FFE_SLICE_LEVEL_SET0_M1 : 10;
    ///< set0 of ffe -1 slicer level
    ///< AccessType="RW/V" BitOffset="20" ResetValue="0x2B0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_slice_lvl_set0_reg_t;

#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET0_DEFAULT (0x2b000150U)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET0_RD_MASK (0x3fffffffU)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET0_WR_MASK (0x3fffffffU)


///< set0 of ffe +1 slicer level
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET0_FFE_SLICE_LVL_SET0_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET0_FFE_SLICE_LVL_SET0_P1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET0_FFE_SLICE_LVL_SET0_P1_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET0_FFE_SLICE_LVL_SET0_P1_BF_DEF (0x00000150)

///< set0 of ffe 0 slicer level
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET0_FFE_SLICE_LVL_SET0_0_BF_OFF (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET0_FFE_SLICE_LVL_SET0_0_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET0_FFE_SLICE_LVL_SET0_0_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET0_FFE_SLICE_LVL_SET0_0_BF_DEF (0x00000000)

///< set0 of ffe -1 slicer level
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET0_FFE_SLICE_LVL_SET0_M1_BF_OFF (20)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET0_FFE_SLICE_LVL_SET0_M1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET0_FFE_SLICE_LVL_SET0_M1_BF_MSK (0x3FF00000)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET0_FFE_SLICE_LVL_SET0_M1_BF_DEF (0x2B000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_SLICE_LEVEL_SET1 register description at address offset 0x14c
  *
  * Register default value:        0x2B000150
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_slice_level_set1
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_SLICE_LEVEL_SET1_P1 : 10;
    ///< set1 of ffe +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x150"
    uint32_t FFE_SLICE_LEVEL_SET1_0 : 10;
    ///< set1 of ffe 0 slicer level
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x0"
    uint32_t FFE_SLICE_LEVEL_SET1_M1 : 10;
    ///< set1 of ffe -1 slicer level
    ///< AccessType="RW/V" BitOffset="20" ResetValue="0x2B0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_slice_lvl_set1_reg_t;

#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET1_DEFAULT (0x2b000150U)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET1_RD_MASK (0x3fffffffU)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET1_WR_MASK (0x3fffffffU)


///< set1 of ffe +1 slicer level
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET1_FFE_SLICE_LVL_SET1_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET1_FFE_SLICE_LVL_SET1_P1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET1_FFE_SLICE_LVL_SET1_P1_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET1_FFE_SLICE_LVL_SET1_P1_BF_DEF (0x00000150)

///< set1 of ffe 0 slicer level
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET1_FFE_SLICE_LVL_SET1_0_BF_OFF (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET1_FFE_SLICE_LVL_SET1_0_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET1_FFE_SLICE_LVL_SET1_0_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET1_FFE_SLICE_LVL_SET1_0_BF_DEF (0x00000000)

///< set1 of ffe -1 slicer level
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET1_FFE_SLICE_LVL_SET1_M1_BF_OFF (20)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET1_FFE_SLICE_LVL_SET1_M1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET1_FFE_SLICE_LVL_SET1_M1_BF_MSK (0x3FF00000)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET1_FFE_SLICE_LVL_SET1_M1_BF_DEF (0x2B000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_SLICE_LEVEL_SET2 register description at address offset 0x150
  *
  * Register default value:        0x2B000150
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_slice_level_set2
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_SLICE_LEVEL_SET2_P1 : 10;
    ///< set2 of ffe +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x150"
    uint32_t FFE_SLICE_LEVEL_SET2_0 : 10;
    ///< set2 of ffe 0 slicer level
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x0"
    uint32_t FFE_SLICE_LEVEL_SET2_M1 : 10;
    ///< set2 of ffe -1 slicer level
    ///< AccessType="RW/V" BitOffset="20" ResetValue="0x2B0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_slice_lvl_set2_reg_t;

#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET2_DEFAULT (0x2b000150U)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET2_RD_MASK (0x3fffffffU)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET2_WR_MASK (0x3fffffffU)


///< set2 of ffe +1 slicer level
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET2_FFE_SLICE_LVL_SET2_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET2_FFE_SLICE_LVL_SET2_P1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET2_FFE_SLICE_LVL_SET2_P1_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET2_FFE_SLICE_LVL_SET2_P1_BF_DEF (0x00000150)

///< set2 of ffe 0 slicer level
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET2_FFE_SLICE_LVL_SET2_0_BF_OFF (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET2_FFE_SLICE_LVL_SET2_0_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET2_FFE_SLICE_LVL_SET2_0_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET2_FFE_SLICE_LVL_SET2_0_BF_DEF (0x00000000)

///< set2 of ffe -1 slicer level
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET2_FFE_SLICE_LVL_SET2_M1_BF_OFF (20)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET2_FFE_SLICE_LVL_SET2_M1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET2_FFE_SLICE_LVL_SET2_M1_BF_MSK (0x3FF00000)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET2_FFE_SLICE_LVL_SET2_M1_BF_DEF (0x2B000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_SLICE_LEVEL_SET3 register description at address offset 0x154
  *
  * Register default value:        0x2B000150
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_slice_level_set3
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_SLICE_LEVEL_SET3_P1 : 10;
    ///< set3 of ffe +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x150"
    uint32_t FFE_SLICE_LEVEL_SET3_0 : 10;
    ///< set3 of ffe 0 slicer level
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x0"
    uint32_t FFE_SLICE_LEVEL_SET3_M1 : 10;
    ///< set3 of ffe -1 slicer level
    ///< AccessType="RW/V" BitOffset="20" ResetValue="0x2B0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_slice_lvl_set3_reg_t;

#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET3_DEFAULT (0x2b000150U)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET3_RD_MASK (0x3fffffffU)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET3_WR_MASK (0x3fffffffU)


///< set3 of ffe +1 slicer level
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET3_FFE_SLICE_LVL_SET3_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET3_FFE_SLICE_LVL_SET3_P1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET3_FFE_SLICE_LVL_SET3_P1_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET3_FFE_SLICE_LVL_SET3_P1_BF_DEF (0x00000150)

///< set3 of ffe 0 slicer level
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET3_FFE_SLICE_LVL_SET3_0_BF_OFF (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET3_FFE_SLICE_LVL_SET3_0_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET3_FFE_SLICE_LVL_SET3_0_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET3_FFE_SLICE_LVL_SET3_0_BF_DEF (0x00000000)

///< set3 of ffe -1 slicer level
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET3_FFE_SLICE_LVL_SET3_M1_BF_OFF (20)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET3_FFE_SLICE_LVL_SET3_M1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET3_FFE_SLICE_LVL_SET3_M1_BF_MSK (0x3FF00000)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET3_FFE_SLICE_LVL_SET3_M1_BF_DEF (0x2B000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_SLICE_LEVEL_SET4 register description at address offset 0x158
  *
  * Register default value:        0x2B000150
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_slice_level_set4
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_SLICE_LEVEL_SET4_P1 : 10;
    ///< set4 of ffe +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x150"
    uint32_t FFE_SLICE_LEVEL_SET4_0 : 10;
    ///< set4 of ffe 0 slicer level
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x0"
    uint32_t FFE_SLICE_LEVEL_SET4_M1 : 10;
    ///< set4 of ffe -1 slicer level
    ///< AccessType="RW/V" BitOffset="20" ResetValue="0x2B0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_slice_lvl_set4_reg_t;

#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET4_DEFAULT (0x2b000150U)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET4_RD_MASK (0x3fffffffU)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET4_WR_MASK (0x3fffffffU)


///< set4 of ffe +1 slicer level
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET4_FFE_SLICE_LVL_SET4_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET4_FFE_SLICE_LVL_SET4_P1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET4_FFE_SLICE_LVL_SET4_P1_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET4_FFE_SLICE_LVL_SET4_P1_BF_DEF (0x00000150)

///< set4 of ffe 0 slicer level
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET4_FFE_SLICE_LVL_SET4_0_BF_OFF (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET4_FFE_SLICE_LVL_SET4_0_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET4_FFE_SLICE_LVL_SET4_0_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET4_FFE_SLICE_LVL_SET4_0_BF_DEF (0x00000000)

///< set4 of ffe -1 slicer level
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET4_FFE_SLICE_LVL_SET4_M1_BF_OFF (20)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET4_FFE_SLICE_LVL_SET4_M1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET4_FFE_SLICE_LVL_SET4_M1_BF_MSK (0x3FF00000)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET4_FFE_SLICE_LVL_SET4_M1_BF_DEF (0x2B000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_SLICE_LEVEL_SET5 register description at address offset 0x15c
  *
  * Register default value:        0x2B000150
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_slice_level_set5
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_SLICE_LEVEL_SET5_P1 : 10;
    ///< set5 of ffe +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x150"
    uint32_t FFE_SLICE_LEVEL_SET5_0 : 10;
    ///< set5 of ffe 0 slicer level
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x0"
    uint32_t FFE_SLICE_LEVEL_SET5_M1 : 10;
    ///< set5 of ffe -1 slicer level
    ///< AccessType="RW/V" BitOffset="20" ResetValue="0x2B0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_slice_lvl_set5_reg_t;

#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET5_DEFAULT (0x2b000150U)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET5_RD_MASK (0x3fffffffU)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET5_WR_MASK (0x3fffffffU)


///< set5 of ffe +1 slicer level
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET5_FFE_SLICE_LVL_SET5_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET5_FFE_SLICE_LVL_SET5_P1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET5_FFE_SLICE_LVL_SET5_P1_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET5_FFE_SLICE_LVL_SET5_P1_BF_DEF (0x00000150)

///< set5 of ffe 0 slicer level
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET5_FFE_SLICE_LVL_SET5_0_BF_OFF (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET5_FFE_SLICE_LVL_SET5_0_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET5_FFE_SLICE_LVL_SET5_0_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET5_FFE_SLICE_LVL_SET5_0_BF_DEF (0x00000000)

///< set5 of ffe -1 slicer level
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET5_FFE_SLICE_LVL_SET5_M1_BF_OFF (20)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET5_FFE_SLICE_LVL_SET5_M1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET5_FFE_SLICE_LVL_SET5_M1_BF_MSK (0x3FF00000)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET5_FFE_SLICE_LVL_SET5_M1_BF_DEF (0x2B000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_SLICE_LEVEL_SET6 register description at address offset 0x160
  *
  * Register default value:        0x2B000150
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_slice_level_set6
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_SLICE_LEVEL_SET6_P1 : 10;
    ///< set6 of ffe +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x150"
    uint32_t FFE_SLICE_LEVEL_SET6_0 : 10;
    ///< set6 of ffe 0 slicer level
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x0"
    uint32_t FFE_SLICE_LEVEL_SET6_M1 : 10;
    ///< set6 of ffe -1 slicer level
    ///< AccessType="RW/V" BitOffset="20" ResetValue="0x2B0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_slice_lvl_set6_reg_t;

#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET6_DEFAULT (0x2b000150U)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET6_RD_MASK (0x3fffffffU)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET6_WR_MASK (0x3fffffffU)


///< set6 of ffe +1 slicer level
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET6_FFE_SLICE_LVL_SET6_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET6_FFE_SLICE_LVL_SET6_P1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET6_FFE_SLICE_LVL_SET6_P1_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET6_FFE_SLICE_LVL_SET6_P1_BF_DEF (0x00000150)

///< set6 of ffe 0 slicer level
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET6_FFE_SLICE_LVL_SET6_0_BF_OFF (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET6_FFE_SLICE_LVL_SET6_0_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET6_FFE_SLICE_LVL_SET6_0_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET6_FFE_SLICE_LVL_SET6_0_BF_DEF (0x00000000)

///< set6 of ffe -1 slicer level
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET6_FFE_SLICE_LVL_SET6_M1_BF_OFF (20)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET6_FFE_SLICE_LVL_SET6_M1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET6_FFE_SLICE_LVL_SET6_M1_BF_MSK (0x3FF00000)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET6_FFE_SLICE_LVL_SET6_M1_BF_DEF (0x2B000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_SLICE_LEVEL_SET7 register description at address offset 0x164
  *
  * Register default value:        0x2B000150
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_slice_level_set7
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_SLICE_LEVEL_SET7_P1 : 10;
    ///< set7 of ffe +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x150"
    uint32_t FFE_SLICE_LEVEL_SET7_0 : 10;
    ///< set7 of ffe 0 slicer level
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x0"
    uint32_t FFE_SLICE_LEVEL_SET7_M1 : 10;
    ///< set7 of ffe -1 slicer level
    ///< AccessType="RW/V" BitOffset="20" ResetValue="0x2B0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_slice_lvl_set7_reg_t;

#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET7_DEFAULT (0x2b000150U)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET7_RD_MASK (0x3fffffffU)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET7_WR_MASK (0x3fffffffU)


///< set7 of ffe +1 slicer level
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET7_FFE_SLICE_LVL_SET7_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET7_FFE_SLICE_LVL_SET7_P1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET7_FFE_SLICE_LVL_SET7_P1_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET7_FFE_SLICE_LVL_SET7_P1_BF_DEF (0x00000150)

///< set7 of ffe 0 slicer level
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET7_FFE_SLICE_LVL_SET7_0_BF_OFF (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET7_FFE_SLICE_LVL_SET7_0_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET7_FFE_SLICE_LVL_SET7_0_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET7_FFE_SLICE_LVL_SET7_0_BF_DEF (0x00000000)

///< set7 of ffe -1 slicer level
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET7_FFE_SLICE_LVL_SET7_M1_BF_OFF (20)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET7_FFE_SLICE_LVL_SET7_M1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET7_FFE_SLICE_LVL_SET7_M1_BF_MSK (0x3FF00000)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET7_FFE_SLICE_LVL_SET7_M1_BF_DEF (0x2B000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_SLICE_LEVEL_SET8 register description at address offset 0x168
  *
  * Register default value:        0x2B000150
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_slice_level_set8
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_SLICE_LEVEL_SET8_P1 : 10;
    ///< set8 of ffe +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x150"
    uint32_t FFE_SLICE_LEVEL_SET8_0 : 10;
    ///< set8 of ffe 0 slicer level
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x0"
    uint32_t FFE_SLICE_LEVEL_SET8_M1 : 10;
    ///< set8 of ffe -1 slicer level
    ///< AccessType="RW/V" BitOffset="20" ResetValue="0x2B0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_slice_lvl_set8_reg_t;

#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET8_DEFAULT (0x2b000150U)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET8_RD_MASK (0x3fffffffU)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET8_WR_MASK (0x3fffffffU)


///< set8 of ffe +1 slicer level
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET8_FFE_SLICE_LVL_SET8_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET8_FFE_SLICE_LVL_SET8_P1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET8_FFE_SLICE_LVL_SET8_P1_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET8_FFE_SLICE_LVL_SET8_P1_BF_DEF (0x00000150)

///< set8 of ffe 0 slicer level
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET8_FFE_SLICE_LVL_SET8_0_BF_OFF (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET8_FFE_SLICE_LVL_SET8_0_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET8_FFE_SLICE_LVL_SET8_0_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET8_FFE_SLICE_LVL_SET8_0_BF_DEF (0x00000000)

///< set8 of ffe -1 slicer level
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET8_FFE_SLICE_LVL_SET8_M1_BF_OFF (20)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET8_FFE_SLICE_LVL_SET8_M1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET8_FFE_SLICE_LVL_SET8_M1_BF_MSK (0x3FF00000)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET8_FFE_SLICE_LVL_SET8_M1_BF_DEF (0x2B000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_SLICE_LEVEL_SET9 register description at address offset 0x16c
  *
  * Register default value:        0x2B000150
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_slice_level_set9
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_SLICE_LEVEL_SET9_P1 : 10;
    ///< set9 of ffe +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x150"
    uint32_t FFE_SLICE_LEVEL_SET9_0 : 10;
    ///< set9 of ffe 0 slicer level
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x0"
    uint32_t FFE_SLICE_LEVEL_SET9_M1 : 10;
    ///< set9 of ffe -1 slicer level
    ///< AccessType="RW/V" BitOffset="20" ResetValue="0x2B0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_slice_lvl_set9_reg_t;

#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET9_DEFAULT (0x2b000150U)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET9_RD_MASK (0x3fffffffU)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET9_WR_MASK (0x3fffffffU)


///< set9 of ffe +1 slicer level
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET9_FFE_SLICE_LVL_SET9_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET9_FFE_SLICE_LVL_SET9_P1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET9_FFE_SLICE_LVL_SET9_P1_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET9_FFE_SLICE_LVL_SET9_P1_BF_DEF (0x00000150)

///< set9 of ffe 0 slicer level
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET9_FFE_SLICE_LVL_SET9_0_BF_OFF (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET9_FFE_SLICE_LVL_SET9_0_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET9_FFE_SLICE_LVL_SET9_0_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET9_FFE_SLICE_LVL_SET9_0_BF_DEF (0x00000000)

///< set9 of ffe -1 slicer level
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET9_FFE_SLICE_LVL_SET9_M1_BF_OFF (20)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET9_FFE_SLICE_LVL_SET9_M1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET9_FFE_SLICE_LVL_SET9_M1_BF_MSK (0x3FF00000)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET9_FFE_SLICE_LVL_SET9_M1_BF_DEF (0x2B000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_SLICE_LEVEL_SET10 register description at address offset 0x170
  *
  * Register default value:        0x2B000150
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_slice_level_set10
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_SLICE_LEVEL_SET10_P1 : 10;
    ///< set10 of ffe +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x150"
    uint32_t FFE_SLICE_LEVEL_SET10_0 : 10;
    ///< set10 of ffe 0 slicer level
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x0"
    uint32_t FFE_SLICE_LEVEL_SET10_M1 : 10;
    ///< set10 of ffe -1 slicer level
    ///< AccessType="RW/V" BitOffset="20" ResetValue="0x2B0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_slice_lvl_set10_reg_t;

#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET10_DEFAULT (0x2b000150U)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET10_RD_MASK (0x3fffffffU)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET10_WR_MASK (0x3fffffffU)


///< set10 of ffe +1 slicer level
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET10_FFE_SLICE_LVL_SET10_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET10_FFE_SLICE_LVL_SET10_P1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET10_FFE_SLICE_LVL_SET10_P1_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET10_FFE_SLICE_LVL_SET10_P1_BF_DEF (0x00000150)

///< set10 of ffe 0 slicer level
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET10_FFE_SLICE_LVL_SET10_0_BF_OFF (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET10_FFE_SLICE_LVL_SET10_0_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET10_FFE_SLICE_LVL_SET10_0_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET10_FFE_SLICE_LVL_SET10_0_BF_DEF (0x00000000)

///< set10 of ffe -1 slicer level
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET10_FFE_SLICE_LVL_SET10_M1_BF_OFF (20)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET10_FFE_SLICE_LVL_SET10_M1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET10_FFE_SLICE_LVL_SET10_M1_BF_MSK (0x3FF00000)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET10_FFE_SLICE_LVL_SET10_M1_BF_DEF (0x2B000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_SLICE_LEVEL_SET11 register description at address offset 0x174
  *
  * Register default value:        0x2B000150
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_slice_level_set11
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_SLICE_LEVEL_SET11_P1 : 10;
    ///< set11 of ffe +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x150"
    uint32_t FFE_SLICE_LEVEL_SET11_0 : 10;
    ///< set11 of ffe 0 slicer level
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x0"
    uint32_t FFE_SLICE_LEVEL_SET11_M1 : 10;
    ///< set11 of ffe -1 slicer level
    ///< AccessType="RW/V" BitOffset="20" ResetValue="0x2B0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_slice_lvl_set11_reg_t;

#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET11_DEFAULT (0x2b000150U)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET11_RD_MASK (0x3fffffffU)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET11_WR_MASK (0x3fffffffU)


///< set11 of ffe +1 slicer level
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET11_FFE_SLICE_LVL_SET11_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET11_FFE_SLICE_LVL_SET11_P1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET11_FFE_SLICE_LVL_SET11_P1_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET11_FFE_SLICE_LVL_SET11_P1_BF_DEF (0x00000150)

///< set11 of ffe 0 slicer level
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET11_FFE_SLICE_LVL_SET11_0_BF_OFF (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET11_FFE_SLICE_LVL_SET11_0_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET11_FFE_SLICE_LVL_SET11_0_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET11_FFE_SLICE_LVL_SET11_0_BF_DEF (0x00000000)

///< set11 of ffe -1 slicer level
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET11_FFE_SLICE_LVL_SET11_M1_BF_OFF (20)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET11_FFE_SLICE_LVL_SET11_M1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET11_FFE_SLICE_LVL_SET11_M1_BF_MSK (0x3FF00000)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET11_FFE_SLICE_LVL_SET11_M1_BF_DEF (0x2B000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_SLICE_LEVEL_SET12 register description at address offset 0x178
  *
  * Register default value:        0x2B000150
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_slice_level_set12
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_SLICE_LEVEL_SET12_P1 : 10;
    ///< set12 of ffe +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x150"
    uint32_t FFE_SLICE_LEVEL_SET12_0 : 10;
    ///< set12 of ffe 0 slicer level
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x0"
    uint32_t FFE_SLICE_LEVEL_SET12_M1 : 10;
    ///< set12 of ffe -1 slicer level
    ///< AccessType="RW/V" BitOffset="20" ResetValue="0x2B0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_slice_lvl_set12_reg_t;

#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET12_DEFAULT (0x2b000150U)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET12_RD_MASK (0x3fffffffU)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET12_WR_MASK (0x3fffffffU)


///< set12 of ffe +1 slicer level
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET12_FFE_SLICE_LVL_SET12_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET12_FFE_SLICE_LVL_SET12_P1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET12_FFE_SLICE_LVL_SET12_P1_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET12_FFE_SLICE_LVL_SET12_P1_BF_DEF (0x00000150)

///< set12 of ffe 0 slicer level
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET12_FFE_SLICE_LVL_SET12_0_BF_OFF (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET12_FFE_SLICE_LVL_SET12_0_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET12_FFE_SLICE_LVL_SET12_0_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET12_FFE_SLICE_LVL_SET12_0_BF_DEF (0x00000000)

///< set12 of ffe -1 slicer level
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET12_FFE_SLICE_LVL_SET12_M1_BF_OFF (20)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET12_FFE_SLICE_LVL_SET12_M1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET12_FFE_SLICE_LVL_SET12_M1_BF_MSK (0x3FF00000)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET12_FFE_SLICE_LVL_SET12_M1_BF_DEF (0x2B000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_SLICE_LEVEL_SET13 register description at address offset 0x17c
  *
  * Register default value:        0x2B000150
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_slice_level_set13
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_SLICE_LEVEL_SET13_P1 : 10;
    ///< set13 of ffe +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x150"
    uint32_t FFE_SLICE_LEVEL_SET13_0 : 10;
    ///< set13 of ffe 0 slicer level
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x0"
    uint32_t FFE_SLICE_LEVEL_SET13_M1 : 10;
    ///< set13 of ffe -1 slicer level
    ///< AccessType="RW/V" BitOffset="20" ResetValue="0x2B0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_slice_lvl_set13_reg_t;

#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET13_DEFAULT (0x2b000150U)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET13_RD_MASK (0x3fffffffU)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET13_WR_MASK (0x3fffffffU)


///< set13 of ffe +1 slicer level
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET13_FFE_SLICE_LVL_SET13_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET13_FFE_SLICE_LVL_SET13_P1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET13_FFE_SLICE_LVL_SET13_P1_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET13_FFE_SLICE_LVL_SET13_P1_BF_DEF (0x00000150)

///< set13 of ffe 0 slicer level
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET13_FFE_SLICE_LVL_SET13_0_BF_OFF (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET13_FFE_SLICE_LVL_SET13_0_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET13_FFE_SLICE_LVL_SET13_0_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET13_FFE_SLICE_LVL_SET13_0_BF_DEF (0x00000000)

///< set13 of ffe -1 slicer level
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET13_FFE_SLICE_LVL_SET13_M1_BF_OFF (20)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET13_FFE_SLICE_LVL_SET13_M1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET13_FFE_SLICE_LVL_SET13_M1_BF_MSK (0x3FF00000)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET13_FFE_SLICE_LVL_SET13_M1_BF_DEF (0x2B000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_SLICE_LEVEL_SET14 register description at address offset 0x180
  *
  * Register default value:        0x2B000150
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_slice_level_set14
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_SLICE_LEVEL_SET14_P1 : 10;
    ///< set14 of ffe +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x150"
    uint32_t FFE_SLICE_LEVEL_SET14_0 : 10;
    ///< set14 of ffe 0 slicer level
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x0"
    uint32_t FFE_SLICE_LEVEL_SET14_M1 : 10;
    ///< set14 of ffe -1 slicer level
    ///< AccessType="RW/V" BitOffset="20" ResetValue="0x2B0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_slice_lvl_set14_reg_t;

#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET14_DEFAULT (0x2b000150U)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET14_RD_MASK (0x3fffffffU)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET14_WR_MASK (0x3fffffffU)


///< set14 of ffe +1 slicer level
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET14_FFE_SLICE_LVL_SET14_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET14_FFE_SLICE_LVL_SET14_P1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET14_FFE_SLICE_LVL_SET14_P1_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET14_FFE_SLICE_LVL_SET14_P1_BF_DEF (0x00000150)

///< set14 of ffe 0 slicer level
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET14_FFE_SLICE_LVL_SET14_0_BF_OFF (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET14_FFE_SLICE_LVL_SET14_0_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET14_FFE_SLICE_LVL_SET14_0_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET14_FFE_SLICE_LVL_SET14_0_BF_DEF (0x00000000)

///< set14 of ffe -1 slicer level
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET14_FFE_SLICE_LVL_SET14_M1_BF_OFF (20)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET14_FFE_SLICE_LVL_SET14_M1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET14_FFE_SLICE_LVL_SET14_M1_BF_MSK (0x3FF00000)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET14_FFE_SLICE_LVL_SET14_M1_BF_DEF (0x2B000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_SLICE_LEVEL_SET15 register description at address offset 0x184
  *
  * Register default value:        0x2B000150
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_slice_level_set15
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_SLICE_LEVEL_SET15_P1 : 10;
    ///< set15 of ffe +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x150"
    uint32_t FFE_SLICE_LEVEL_SET15_0 : 10;
    ///< set15 of ffe 0 slicer level
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x0"
    uint32_t FFE_SLICE_LEVEL_SET15_M1 : 10;
    ///< set15 of ffe -1 slicer level
    ///< AccessType="RW/V" BitOffset="20" ResetValue="0x2B0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_slice_lvl_set15_reg_t;

#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET15_DEFAULT (0x2b000150U)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET15_RD_MASK (0x3fffffffU)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET15_WR_MASK (0x3fffffffU)


///< set15 of ffe +1 slicer level
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET15_FFE_SLICE_LVL_SET15_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET15_FFE_SLICE_LVL_SET15_P1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET15_FFE_SLICE_LVL_SET15_P1_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET15_FFE_SLICE_LVL_SET15_P1_BF_DEF (0x00000150)

///< set15 of ffe 0 slicer level
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET15_FFE_SLICE_LVL_SET15_0_BF_OFF (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET15_FFE_SLICE_LVL_SET15_0_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET15_FFE_SLICE_LVL_SET15_0_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET15_FFE_SLICE_LVL_SET15_0_BF_DEF (0x00000000)

///< set15 of ffe -1 slicer level
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET15_FFE_SLICE_LVL_SET15_M1_BF_OFF (20)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET15_FFE_SLICE_LVL_SET15_M1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET15_FFE_SLICE_LVL_SET15_M1_BF_MSK (0x3FF00000)
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET15_FFE_SLICE_LVL_SET15_M1_BF_DEF (0x2B000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_ERR_LEVEL_M1M3_SET0 register description at address offset 0x188
  *
  * Register default value:        0x00082350
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_err_level_m1m3_set0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_ERR_LEVEL_SET0_M1 : 10;
    ///< set0 of ffe error -1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x350"
    uint32_t FFE_ERR_LEVEL_SET0_M3 : 10;
    ///< set0 of ffe error -3 slicer level
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x208"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_err_lvl_m1m3_set0_reg_t;

#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET0_DEFAULT (0x00082350U)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET0_RD_MASK (0x000fffffU)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET0_WR_MASK (0x000fffffU)


///< set0 of ffe error -1 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET0_FFE_ERR_LVL_SET0_M1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET0_FFE_ERR_LVL_SET0_M1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET0_FFE_ERR_LVL_SET0_M1_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET0_FFE_ERR_LVL_SET0_M1_BF_DEF (0x00000350)

///< set0 of ffe error -3 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET0_FFE_ERR_LVL_SET0_M3_BF_OFF (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET0_FFE_ERR_LVL_SET0_M3_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET0_FFE_ERR_LVL_SET0_M3_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET0_FFE_ERR_LVL_SET0_M3_BF_DEF (0x00082000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_ERR_LEVEL_P1P3_SET0 register description at address offset 0x18c
  *
  * Register default value:        0x0007E0B0
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_err_level_p1p3_set0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_ERR_LEVEL_SET0_P1 : 10;
    ///< set0 of ffe error +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0xB0"
    uint32_t FFE_ERR_LEVEL_SET0_P3 : 10;
    ///< set0 of ffe error +3 slicer level
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x1F8"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_err_lvl_p1p3_set0_reg_t;

#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET0_DEFAULT (0x0007e0b0U)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET0_RD_MASK (0x000fffffU)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET0_WR_MASK (0x000fffffU)


///< set0 of ffe error +1 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET0_FFE_ERR_LVL_SET0_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET0_FFE_ERR_LVL_SET0_P1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET0_FFE_ERR_LVL_SET0_P1_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET0_FFE_ERR_LVL_SET0_P1_BF_DEF (0x000000B0)

///< set0 of ffe error +3 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET0_FFE_ERR_LVL_SET0_P3_BF_OFF (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET0_FFE_ERR_LVL_SET0_P3_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET0_FFE_ERR_LVL_SET0_P3_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET0_FFE_ERR_LVL_SET0_P3_BF_DEF (0x0007E000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_ERR_LEVEL_M1M3_SET1 register description at address offset 0x190
  *
  * Register default value:        0x00082350
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_err_level_m1m3_set1
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_ERR_LEVEL_SET1_M1 : 10;
    ///< set1 of ffe error -1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x350"
    uint32_t FFE_ERR_LEVEL_SET1_M3 : 10;
    ///< set1 of ffe error -3 slicer level
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x208"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_err_lvl_m1m3_set1_reg_t;

#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET1_DEFAULT (0x00082350U)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET1_RD_MASK (0x000fffffU)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET1_WR_MASK (0x000fffffU)


///< set1 of ffe error -1 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET1_FFE_ERR_LVL_SET1_M1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET1_FFE_ERR_LVL_SET1_M1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET1_FFE_ERR_LVL_SET1_M1_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET1_FFE_ERR_LVL_SET1_M1_BF_DEF (0x00000350)

///< set1 of ffe error -3 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET1_FFE_ERR_LVL_SET1_M3_BF_OFF (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET1_FFE_ERR_LVL_SET1_M3_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET1_FFE_ERR_LVL_SET1_M3_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET1_FFE_ERR_LVL_SET1_M3_BF_DEF (0x00082000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_ERR_LEVEL_P1P3_SET1 register description at address offset 0x194
  *
  * Register default value:        0x0007E0B0
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_err_level_p1p3_set1
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_ERR_LEVEL_SET1_P1 : 10;
    ///< set1 of ffe error +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0xB0"
    uint32_t FFE_ERR_LEVEL_SET1_P3 : 10;
    ///< set1 of ffe error +3 slicer level
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x1F8"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_err_lvl_p1p3_set1_reg_t;

#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET1_DEFAULT (0x0007e0b0U)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET1_RD_MASK (0x000fffffU)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET1_WR_MASK (0x000fffffU)


///< set1 of ffe error +1 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET1_FFE_ERR_LVL_SET1_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET1_FFE_ERR_LVL_SET1_P1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET1_FFE_ERR_LVL_SET1_P1_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET1_FFE_ERR_LVL_SET1_P1_BF_DEF (0x000000B0)

///< set1 of ffe error +3 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET1_FFE_ERR_LVL_SET1_P3_BF_OFF (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET1_FFE_ERR_LVL_SET1_P3_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET1_FFE_ERR_LVL_SET1_P3_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET1_FFE_ERR_LVL_SET1_P3_BF_DEF (0x0007E000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_ERR_LEVEL_M1M3_SET2 register description at address offset 0x198
  *
  * Register default value:        0x00082350
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_err_level_m1m3_set2
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_ERR_LEVEL_SET2_M1 : 10;
    ///< set2 of ffe error -1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x350"
    uint32_t FFE_ERR_LEVEL_SET2_M3 : 10;
    ///< set2 of ffe error -3 slicer level
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x208"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_err_lvl_m1m3_set2_reg_t;

#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET2_DEFAULT (0x00082350U)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET2_RD_MASK (0x000fffffU)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET2_WR_MASK (0x000fffffU)


///< set2 of ffe error -1 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET2_FFE_ERR_LVL_SET2_M1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET2_FFE_ERR_LVL_SET2_M1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET2_FFE_ERR_LVL_SET2_M1_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET2_FFE_ERR_LVL_SET2_M1_BF_DEF (0x00000350)

///< set2 of ffe error -3 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET2_FFE_ERR_LVL_SET2_M3_BF_OFF (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET2_FFE_ERR_LVL_SET2_M3_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET2_FFE_ERR_LVL_SET2_M3_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET2_FFE_ERR_LVL_SET2_M3_BF_DEF (0x00082000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_ERR_LEVEL_P1P3_SET2 register description at address offset 0x19c
  *
  * Register default value:        0x0007E0B0
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_err_level_p1p3_set2
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_ERR_LEVEL_SET2_P1 : 10;
    ///< set2 of ffe error +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0xB0"
    uint32_t FFE_ERR_LEVEL_SET2_P3 : 10;
    ///< set2 of ffe error +3 slicer level
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x1F8"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_err_lvl_p1p3_set2_reg_t;

#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET2_DEFAULT (0x0007e0b0U)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET2_RD_MASK (0x000fffffU)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET2_WR_MASK (0x000fffffU)


///< set2 of ffe error +1 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET2_FFE_ERR_LVL_SET2_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET2_FFE_ERR_LVL_SET2_P1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET2_FFE_ERR_LVL_SET2_P1_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET2_FFE_ERR_LVL_SET2_P1_BF_DEF (0x000000B0)

///< set2 of ffe error +3 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET2_FFE_ERR_LVL_SET2_P3_BF_OFF (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET2_FFE_ERR_LVL_SET2_P3_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET2_FFE_ERR_LVL_SET2_P3_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET2_FFE_ERR_LVL_SET2_P3_BF_DEF (0x0007E000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_ERR_LEVEL_M1M3_SET3 register description at address offset 0x1a0
  *
  * Register default value:        0x00082350
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_err_level_m1m3_set3
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_ERR_LEVEL_SET3_M1 : 10;
    ///< set3 of ffe error -1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x350"
    uint32_t FFE_ERR_LEVEL_SET3_M3 : 10;
    ///< set3 of ffe error -3 slicer level
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x208"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_err_lvl_m1m3_set3_reg_t;

#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET3_DEFAULT (0x00082350U)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET3_RD_MASK (0x000fffffU)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET3_WR_MASK (0x000fffffU)


///< set3 of ffe error -1 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET3_FFE_ERR_LVL_SET3_M1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET3_FFE_ERR_LVL_SET3_M1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET3_FFE_ERR_LVL_SET3_M1_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET3_FFE_ERR_LVL_SET3_M1_BF_DEF (0x00000350)

///< set3 of ffe error -3 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET3_FFE_ERR_LVL_SET3_M3_BF_OFF (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET3_FFE_ERR_LVL_SET3_M3_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET3_FFE_ERR_LVL_SET3_M3_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET3_FFE_ERR_LVL_SET3_M3_BF_DEF (0x00082000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_ERR_LEVEL_P1P3_SET3 register description at address offset 0x1a4
  *
  * Register default value:        0x0007E0B0
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_err_level_p1p3_set3
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_ERR_LEVEL_SET3_P1 : 10;
    ///< set3 of ffe error +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0xB0"
    uint32_t FFE_ERR_LEVEL_SET3_P3 : 10;
    ///< set3 of ffe error +3 slicer level
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x1F8"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_err_lvl_p1p3_set3_reg_t;

#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET3_DEFAULT (0x0007e0b0U)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET3_RD_MASK (0x000fffffU)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET3_WR_MASK (0x000fffffU)


///< set3 of ffe error +1 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET3_FFE_ERR_LVL_SET3_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET3_FFE_ERR_LVL_SET3_P1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET3_FFE_ERR_LVL_SET3_P1_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET3_FFE_ERR_LVL_SET3_P1_BF_DEF (0x000000B0)

///< set3 of ffe error +3 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET3_FFE_ERR_LVL_SET3_P3_BF_OFF (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET3_FFE_ERR_LVL_SET3_P3_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET3_FFE_ERR_LVL_SET3_P3_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET3_FFE_ERR_LVL_SET3_P3_BF_DEF (0x0007E000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_ERR_LEVEL_M1M3_SET4 register description at address offset 0x1a8
  *
  * Register default value:        0x00082350
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_err_level_m1m3_set4
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_ERR_LEVEL_SET4_M1 : 10;
    ///< set4 of ffe error -1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x350"
    uint32_t FFE_ERR_LEVEL_SET4_M3 : 10;
    ///< set4 of ffe error -3 slicer level
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x208"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_err_lvl_m1m3_set4_reg_t;

#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET4_DEFAULT (0x00082350U)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET4_RD_MASK (0x000fffffU)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET4_WR_MASK (0x000fffffU)


///< set4 of ffe error -1 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET4_FFE_ERR_LVL_SET4_M1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET4_FFE_ERR_LVL_SET4_M1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET4_FFE_ERR_LVL_SET4_M1_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET4_FFE_ERR_LVL_SET4_M1_BF_DEF (0x00000350)

///< set4 of ffe error -3 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET4_FFE_ERR_LVL_SET4_M3_BF_OFF (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET4_FFE_ERR_LVL_SET4_M3_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET4_FFE_ERR_LVL_SET4_M3_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET4_FFE_ERR_LVL_SET4_M3_BF_DEF (0x00082000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_ERR_LEVEL_P1P3_SET4 register description at address offset 0x1ac
  *
  * Register default value:        0x0007E0B0
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_err_level_p1p3_set4
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_ERR_LEVEL_SET4_P1 : 10;
    ///< set4 of ffe error +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0xB0"
    uint32_t FFE_ERR_LEVEL_SET4_P3 : 10;
    ///< set4 of ffe error +3 slicer level
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x1F8"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_err_lvl_p1p3_set4_reg_t;

#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET4_DEFAULT (0x0007e0b0U)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET4_RD_MASK (0x000fffffU)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET4_WR_MASK (0x000fffffU)


///< set4 of ffe error +1 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET4_FFE_ERR_LVL_SET4_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET4_FFE_ERR_LVL_SET4_P1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET4_FFE_ERR_LVL_SET4_P1_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET4_FFE_ERR_LVL_SET4_P1_BF_DEF (0x000000B0)

///< set4 of ffe error +3 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET4_FFE_ERR_LVL_SET4_P3_BF_OFF (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET4_FFE_ERR_LVL_SET4_P3_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET4_FFE_ERR_LVL_SET4_P3_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET4_FFE_ERR_LVL_SET4_P3_BF_DEF (0x0007E000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_ERR_LEVEL_M1M3_SET5 register description at address offset 0x1b0
  *
  * Register default value:        0x00082350
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_err_level_m1m3_set5
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_ERR_LEVEL_SET5_M1 : 10;
    ///< set5 of ffe error -1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x350"
    uint32_t FFE_ERR_LEVEL_SET5_M3 : 10;
    ///< set5 of ffe error -3 slicer level
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x208"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_err_lvl_m1m3_set5_reg_t;

#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET5_DEFAULT (0x00082350U)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET5_RD_MASK (0x000fffffU)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET5_WR_MASK (0x000fffffU)


///< set5 of ffe error -1 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET5_FFE_ERR_LVL_SET5_M1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET5_FFE_ERR_LVL_SET5_M1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET5_FFE_ERR_LVL_SET5_M1_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET5_FFE_ERR_LVL_SET5_M1_BF_DEF (0x00000350)

///< set5 of ffe error -3 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET5_FFE_ERR_LVL_SET5_M3_BF_OFF (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET5_FFE_ERR_LVL_SET5_M3_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET5_FFE_ERR_LVL_SET5_M3_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET5_FFE_ERR_LVL_SET5_M3_BF_DEF (0x00082000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_ERR_LEVEL_P1P3_SET5 register description at address offset 0x1b4
  *
  * Register default value:        0x0007E0B0
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_err_level_p1p3_set5
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_ERR_LEVEL_SET5_P1 : 10;
    ///< set5 of ffe error +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0xB0"
    uint32_t FFE_ERR_LEVEL_SET5_P3 : 10;
    ///< set5 of ffe error +3 slicer level
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x1F8"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_err_lvl_p1p3_set5_reg_t;

#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET5_DEFAULT (0x0007e0b0U)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET5_RD_MASK (0x000fffffU)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET5_WR_MASK (0x000fffffU)


///< set5 of ffe error +1 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET5_FFE_ERR_LVL_SET5_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET5_FFE_ERR_LVL_SET5_P1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET5_FFE_ERR_LVL_SET5_P1_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET5_FFE_ERR_LVL_SET5_P1_BF_DEF (0x000000B0)

///< set5 of ffe error +3 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET5_FFE_ERR_LVL_SET5_P3_BF_OFF (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET5_FFE_ERR_LVL_SET5_P3_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET5_FFE_ERR_LVL_SET5_P3_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET5_FFE_ERR_LVL_SET5_P3_BF_DEF (0x0007E000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_ERR_LEVEL_M1M3_SET6 register description at address offset 0x1b8
  *
  * Register default value:        0x00082350
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_err_level_m1m3_set6
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_ERR_LEVEL_SET6_M1 : 10;
    ///< set6 of ffe error -1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x350"
    uint32_t FFE_ERR_LEVEL_SET6_M3 : 10;
    ///< set6 of ffe error -3 slicer level
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x208"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_err_lvl_m1m3_set6_reg_t;

#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET6_DEFAULT (0x00082350U)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET6_RD_MASK (0x000fffffU)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET6_WR_MASK (0x000fffffU)


///< set6 of ffe error -1 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET6_FFE_ERR_LVL_SET6_M1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET6_FFE_ERR_LVL_SET6_M1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET6_FFE_ERR_LVL_SET6_M1_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET6_FFE_ERR_LVL_SET6_M1_BF_DEF (0x00000350)

///< set6 of ffe error -3 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET6_FFE_ERR_LVL_SET6_M3_BF_OFF (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET6_FFE_ERR_LVL_SET6_M3_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET6_FFE_ERR_LVL_SET6_M3_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET6_FFE_ERR_LVL_SET6_M3_BF_DEF (0x00082000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_ERR_LEVEL_P1P3_SET6 register description at address offset 0x1bc
  *
  * Register default value:        0x0007E0B0
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_err_level_p1p3_set6
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_ERR_LEVEL_SET6_P1 : 10;
    ///< set6 of ffe error +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0xB0"
    uint32_t FFE_ERR_LEVEL_SET6_P3 : 10;
    ///< set6 of ffe error +3 slicer level
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x1F8"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_err_lvl_p1p3_set6_reg_t;

#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET6_DEFAULT (0x0007e0b0U)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET6_RD_MASK (0x000fffffU)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET6_WR_MASK (0x000fffffU)


///< set6 of ffe error +1 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET6_FFE_ERR_LVL_SET6_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET6_FFE_ERR_LVL_SET6_P1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET6_FFE_ERR_LVL_SET6_P1_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET6_FFE_ERR_LVL_SET6_P1_BF_DEF (0x000000B0)

///< set6 of ffe error +3 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET6_FFE_ERR_LVL_SET6_P3_BF_OFF (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET6_FFE_ERR_LVL_SET6_P3_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET6_FFE_ERR_LVL_SET6_P3_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET6_FFE_ERR_LVL_SET6_P3_BF_DEF (0x0007E000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_ERR_LEVEL_M1M3_SET7 register description at address offset 0x1c0
  *
  * Register default value:        0x00082350
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_err_level_m1m3_set7
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_ERR_LEVEL_SET7_M1 : 10;
    ///< set7 of ffe error -1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x350"
    uint32_t FFE_ERR_LEVEL_SET7_M3 : 10;
    ///< set7 of ffe error -3 slicer level
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x208"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_err_lvl_m1m3_set7_reg_t;

#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET7_DEFAULT (0x00082350U)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET7_RD_MASK (0x000fffffU)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET7_WR_MASK (0x000fffffU)


///< set7 of ffe error -1 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET7_FFE_ERR_LVL_SET7_M1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET7_FFE_ERR_LVL_SET7_M1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET7_FFE_ERR_LVL_SET7_M1_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET7_FFE_ERR_LVL_SET7_M1_BF_DEF (0x00000350)

///< set7 of ffe error -3 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET7_FFE_ERR_LVL_SET7_M3_BF_OFF (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET7_FFE_ERR_LVL_SET7_M3_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET7_FFE_ERR_LVL_SET7_M3_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET7_FFE_ERR_LVL_SET7_M3_BF_DEF (0x00082000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_ERR_LEVEL_P1P3_SET7 register description at address offset 0x1c4
  *
  * Register default value:        0x0007E0B0
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_err_level_p1p3_set7
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_ERR_LEVEL_SET7_P1 : 10;
    ///< set7 of ffe error +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0xB0"
    uint32_t FFE_ERR_LEVEL_SET7_P3 : 10;
    ///< set7 of ffe error +3 slicer level
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x1F8"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_err_lvl_p1p3_set7_reg_t;

#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET7_DEFAULT (0x0007e0b0U)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET7_RD_MASK (0x000fffffU)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET7_WR_MASK (0x000fffffU)


///< set7 of ffe error +1 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET7_FFE_ERR_LVL_SET7_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET7_FFE_ERR_LVL_SET7_P1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET7_FFE_ERR_LVL_SET7_P1_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET7_FFE_ERR_LVL_SET7_P1_BF_DEF (0x000000B0)

///< set7 of ffe error +3 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET7_FFE_ERR_LVL_SET7_P3_BF_OFF (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET7_FFE_ERR_LVL_SET7_P3_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET7_FFE_ERR_LVL_SET7_P3_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET7_FFE_ERR_LVL_SET7_P3_BF_DEF (0x0007E000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_ERR_LEVEL_M1M3_SET8 register description at address offset 0x1c8
  *
  * Register default value:        0x00082350
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_err_level_m1m3_set8
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_ERR_LEVEL_SET8_M1 : 10;
    ///< set8 of ffe error -1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x350"
    uint32_t FFE_ERR_LEVEL_SET8_M3 : 10;
    ///< set8 of ffe error -3 slicer level
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x208"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_err_lvl_m1m3_set8_reg_t;

#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET8_DEFAULT (0x00082350U)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET8_RD_MASK (0x000fffffU)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET8_WR_MASK (0x000fffffU)


///< set8 of ffe error -1 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET8_FFE_ERR_LVL_SET8_M1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET8_FFE_ERR_LVL_SET8_M1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET8_FFE_ERR_LVL_SET8_M1_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET8_FFE_ERR_LVL_SET8_M1_BF_DEF (0x00000350)

///< set8 of ffe error -3 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET8_FFE_ERR_LVL_SET8_M3_BF_OFF (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET8_FFE_ERR_LVL_SET8_M3_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET8_FFE_ERR_LVL_SET8_M3_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET8_FFE_ERR_LVL_SET8_M3_BF_DEF (0x00082000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_ERR_LEVEL_P1P3_SET8 register description at address offset 0x1cc
  *
  * Register default value:        0x0007E0B0
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_err_level_p1p3_set8
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_ERR_LEVEL_SET8_P1 : 10;
    ///< set8 of ffe error +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0xB0"
    uint32_t FFE_ERR_LEVEL_SET8_P3 : 10;
    ///< set8 of ffe error +3 slicer level
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x1F8"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_err_lvl_p1p3_set8_reg_t;

#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET8_DEFAULT (0x0007e0b0U)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET8_RD_MASK (0x000fffffU)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET8_WR_MASK (0x000fffffU)


///< set8 of ffe error +1 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET8_FFE_ERR_LVL_SET8_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET8_FFE_ERR_LVL_SET8_P1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET8_FFE_ERR_LVL_SET8_P1_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET8_FFE_ERR_LVL_SET8_P1_BF_DEF (0x000000B0)

///< set8 of ffe error +3 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET8_FFE_ERR_LVL_SET8_P3_BF_OFF (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET8_FFE_ERR_LVL_SET8_P3_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET8_FFE_ERR_LVL_SET8_P3_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET8_FFE_ERR_LVL_SET8_P3_BF_DEF (0x0007E000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_ERR_LEVEL_M1M3_SET9 register description at address offset 0x1d0
  *
  * Register default value:        0x00082350
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_err_level_m1m3_set9
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_ERR_LEVEL_SET9_M1 : 10;
    ///< set9 of ffe error -1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x350"
    uint32_t FFE_ERR_LEVEL_SET9_M3 : 10;
    ///< set9 of ffe error -3 slicer level
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x208"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_err_lvl_m1m3_set9_reg_t;

#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET9_DEFAULT (0x00082350U)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET9_RD_MASK (0x000fffffU)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET9_WR_MASK (0x000fffffU)


///< set9 of ffe error -1 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET9_FFE_ERR_LVL_SET9_M1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET9_FFE_ERR_LVL_SET9_M1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET9_FFE_ERR_LVL_SET9_M1_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET9_FFE_ERR_LVL_SET9_M1_BF_DEF (0x00000350)

///< set9 of ffe error -3 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET9_FFE_ERR_LVL_SET9_M3_BF_OFF (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET9_FFE_ERR_LVL_SET9_M3_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET9_FFE_ERR_LVL_SET9_M3_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET9_FFE_ERR_LVL_SET9_M3_BF_DEF (0x00082000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_ERR_LEVEL_P1P3_SET9 register description at address offset 0x1d4
  *
  * Register default value:        0x0007E0B0
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_err_level_p1p3_set9
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_ERR_LEVEL_SET9_P1 : 10;
    ///< set9 of ffe error +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0xB0"
    uint32_t FFE_ERR_LEVEL_SET9_P3 : 10;
    ///< set9 of ffe error +3 slicer level
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x1F8"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_err_lvl_p1p3_set9_reg_t;

#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET9_DEFAULT (0x0007e0b0U)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET9_RD_MASK (0x000fffffU)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET9_WR_MASK (0x000fffffU)


///< set9 of ffe error +1 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET9_FFE_ERR_LVL_SET9_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET9_FFE_ERR_LVL_SET9_P1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET9_FFE_ERR_LVL_SET9_P1_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET9_FFE_ERR_LVL_SET9_P1_BF_DEF (0x000000B0)

///< set9 of ffe error +3 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET9_FFE_ERR_LVL_SET9_P3_BF_OFF (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET9_FFE_ERR_LVL_SET9_P3_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET9_FFE_ERR_LVL_SET9_P3_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET9_FFE_ERR_LVL_SET9_P3_BF_DEF (0x0007E000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_ERR_LEVEL_M1M3_SET10 register description at address offset 0x1d8
  *
  * Register default value:        0x00082350
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_err_level_m1m3_set10
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_ERR_LEVEL_SET10_M1 : 10;
    ///< set10 of ffe error -1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x350"
    uint32_t FFE_ERR_LEVEL_SET10_M3 : 10;
    ///< set10 of ffe error -3 slicer level
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x208"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_err_lvl_m1m3_set10_reg_t;

#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET10_DEFAULT (0x00082350U)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET10_RD_MASK (0x000fffffU)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET10_WR_MASK (0x000fffffU)


///< set10 of ffe error -1 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET10_FFE_ERR_LVL_SET10_M1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET10_FFE_ERR_LVL_SET10_M1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET10_FFE_ERR_LVL_SET10_M1_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET10_FFE_ERR_LVL_SET10_M1_BF_DEF (0x00000350)

///< set10 of ffe error -3 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET10_FFE_ERR_LVL_SET10_M3_BF_OFF (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET10_FFE_ERR_LVL_SET10_M3_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET10_FFE_ERR_LVL_SET10_M3_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET10_FFE_ERR_LVL_SET10_M3_BF_DEF (0x00082000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_ERR_LEVEL_P1P3_SET10 register description at address offset 0x1dc
  *
  * Register default value:        0x0007E0B0
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_err_level_p1p3_set10
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_ERR_LEVEL_SET10_P1 : 10;
    ///< set10 of ffe error +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0xB0"
    uint32_t FFE_ERR_LEVEL_SET10_P3 : 10;
    ///< set10 of ffe error +3 slicer level
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x1F8"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_err_lvl_p1p3_set10_reg_t;

#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET10_DEFAULT (0x0007e0b0U)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET10_RD_MASK (0x000fffffU)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET10_WR_MASK (0x000fffffU)


///< set10 of ffe error +1 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET10_FFE_ERR_LVL_SET10_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET10_FFE_ERR_LVL_SET10_P1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET10_FFE_ERR_LVL_SET10_P1_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET10_FFE_ERR_LVL_SET10_P1_BF_DEF (0x000000B0)

///< set10 of ffe error +3 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET10_FFE_ERR_LVL_SET10_P3_BF_OFF (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET10_FFE_ERR_LVL_SET10_P3_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET10_FFE_ERR_LVL_SET10_P3_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET10_FFE_ERR_LVL_SET10_P3_BF_DEF (0x0007E000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_ERR_LEVEL_M1M3_SET11 register description at address offset 0x1e0
  *
  * Register default value:        0x00082350
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_err_level_m1m3_set11
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_ERR_LEVEL_SET11_M1 : 10;
    ///< set11 of ffe error -1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x350"
    uint32_t FFE_ERR_LEVEL_SET11_M3 : 10;
    ///< set11 of ffe error -3 slicer level
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x208"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_err_lvl_m1m3_set11_reg_t;

#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET11_DEFAULT (0x00082350U)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET11_RD_MASK (0x000fffffU)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET11_WR_MASK (0x000fffffU)


///< set11 of ffe error -1 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET11_FFE_ERR_LVL_SET11_M1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET11_FFE_ERR_LVL_SET11_M1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET11_FFE_ERR_LVL_SET11_M1_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET11_FFE_ERR_LVL_SET11_M1_BF_DEF (0x00000350)

///< set11 of ffe error -3 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET11_FFE_ERR_LVL_SET11_M3_BF_OFF (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET11_FFE_ERR_LVL_SET11_M3_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET11_FFE_ERR_LVL_SET11_M3_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET11_FFE_ERR_LVL_SET11_M3_BF_DEF (0x00082000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_ERR_LEVEL_P1P3_SET11 register description at address offset 0x1e4
  *
  * Register default value:        0x0007E0B0
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_err_level_p1p3_set11
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_ERR_LEVEL_SET11_P1 : 10;
    ///< set11 of ffe error +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0xB0"
    uint32_t FFE_ERR_LEVEL_SET11_P3 : 10;
    ///< set11 of ffe error +3 slicer level
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x1F8"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_err_lvl_p1p3_set11_reg_t;

#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET11_DEFAULT (0x0007e0b0U)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET11_RD_MASK (0x000fffffU)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET11_WR_MASK (0x000fffffU)


///< set11 of ffe error +1 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET11_FFE_ERR_LVL_SET11_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET11_FFE_ERR_LVL_SET11_P1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET11_FFE_ERR_LVL_SET11_P1_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET11_FFE_ERR_LVL_SET11_P1_BF_DEF (0x000000B0)

///< set11 of ffe error +3 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET11_FFE_ERR_LVL_SET11_P3_BF_OFF (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET11_FFE_ERR_LVL_SET11_P3_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET11_FFE_ERR_LVL_SET11_P3_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET11_FFE_ERR_LVL_SET11_P3_BF_DEF (0x0007E000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_ERR_LEVEL_M1M3_SET12 register description at address offset 0x1e8
  *
  * Register default value:        0x00082350
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_err_level_m1m3_set12
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_ERR_LEVEL_SET12_M1 : 10;
    ///< set12 of ffe error -1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x350"
    uint32_t FFE_ERR_LEVEL_SET12_M3 : 10;
    ///< set12 of ffe error -3 slicer level
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x208"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_err_lvl_m1m3_set12_reg_t;

#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET12_DEFAULT (0x00082350U)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET12_RD_MASK (0x000fffffU)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET12_WR_MASK (0x000fffffU)


///< set12 of ffe error -1 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET12_FFE_ERR_LVL_SET12_M1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET12_FFE_ERR_LVL_SET12_M1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET12_FFE_ERR_LVL_SET12_M1_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET12_FFE_ERR_LVL_SET12_M1_BF_DEF (0x00000350)

///< set12 of ffe error -3 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET12_FFE_ERR_LVL_SET12_M3_BF_OFF (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET12_FFE_ERR_LVL_SET12_M3_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET12_FFE_ERR_LVL_SET12_M3_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET12_FFE_ERR_LVL_SET12_M3_BF_DEF (0x00082000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_ERR_LEVEL_P1P3_SET12 register description at address offset 0x1ec
  *
  * Register default value:        0x0007E0B0
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_err_level_p1p3_set12
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_ERR_LEVEL_SET12_P1 : 10;
    ///< set12 of ffe error +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0xB0"
    uint32_t FFE_ERR_LEVEL_SET12_P3 : 10;
    ///< set12 of ffe error +3 slicer level
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x1F8"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_err_lvl_p1p3_set12_reg_t;

#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET12_DEFAULT (0x0007e0b0U)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET12_RD_MASK (0x000fffffU)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET12_WR_MASK (0x000fffffU)


///< set12 of ffe error +1 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET12_FFE_ERR_LVL_SET12_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET12_FFE_ERR_LVL_SET12_P1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET12_FFE_ERR_LVL_SET12_P1_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET12_FFE_ERR_LVL_SET12_P1_BF_DEF (0x000000B0)

///< set12 of ffe error +3 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET12_FFE_ERR_LVL_SET12_P3_BF_OFF (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET12_FFE_ERR_LVL_SET12_P3_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET12_FFE_ERR_LVL_SET12_P3_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET12_FFE_ERR_LVL_SET12_P3_BF_DEF (0x0007E000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_ERR_LEVEL_M1M3_SET13 register description at address offset 0x1f0
  *
  * Register default value:        0x00082350
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_err_level_m1m3_set13
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_ERR_LEVEL_SET13_M1 : 10;
    ///< set13 of ffe error -1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x350"
    uint32_t FFE_ERR_LEVEL_SET13_M3 : 10;
    ///< set13 of ffe error -3 slicer level
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x208"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_err_lvl_m1m3_set13_reg_t;

#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET13_DEFAULT (0x00082350U)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET13_RD_MASK (0x000fffffU)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET13_WR_MASK (0x000fffffU)


///< set13 of ffe error -1 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET13_FFE_ERR_LVL_SET13_M1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET13_FFE_ERR_LVL_SET13_M1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET13_FFE_ERR_LVL_SET13_M1_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET13_FFE_ERR_LVL_SET13_M1_BF_DEF (0x00000350)

///< set13 of ffe error -3 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET13_FFE_ERR_LVL_SET13_M3_BF_OFF (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET13_FFE_ERR_LVL_SET13_M3_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET13_FFE_ERR_LVL_SET13_M3_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET13_FFE_ERR_LVL_SET13_M3_BF_DEF (0x00082000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_ERR_LEVEL_P1P3_SET13 register description at address offset 0x1f4
  *
  * Register default value:        0x0007E0B0
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_err_level_p1p3_set13
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_ERR_LEVEL_SET13_P1 : 10;
    ///< set13 of ffe error +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0xB0"
    uint32_t FFE_ERR_LEVEL_SET13_P3 : 10;
    ///< set13 of ffe error +3 slicer level
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x1F8"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_err_lvl_p1p3_set13_reg_t;

#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET13_DEFAULT (0x0007e0b0U)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET13_RD_MASK (0x000fffffU)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET13_WR_MASK (0x000fffffU)


///< set13 of ffe error +1 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET13_FFE_ERR_LVL_SET13_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET13_FFE_ERR_LVL_SET13_P1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET13_FFE_ERR_LVL_SET13_P1_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET13_FFE_ERR_LVL_SET13_P1_BF_DEF (0x000000B0)

///< set13 of ffe error +3 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET13_FFE_ERR_LVL_SET13_P3_BF_OFF (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET13_FFE_ERR_LVL_SET13_P3_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET13_FFE_ERR_LVL_SET13_P3_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET13_FFE_ERR_LVL_SET13_P3_BF_DEF (0x0007E000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_ERR_LEVEL_M1M3_SET14 register description at address offset 0x1f8
  *
  * Register default value:        0x00082350
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_err_level_m1m3_set14
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_ERR_LEVEL_SET14_M1 : 10;
    ///< set14 of ffe error -1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x350"
    uint32_t FFE_ERR_LEVEL_SET14_M3 : 10;
    ///< set14 of ffe error -3 slicer level
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x208"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_err_lvl_m1m3_set14_reg_t;

#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET14_DEFAULT (0x00082350U)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET14_RD_MASK (0x000fffffU)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET14_WR_MASK (0x000fffffU)


///< set14 of ffe error -1 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET14_FFE_ERR_LVL_SET14_M1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET14_FFE_ERR_LVL_SET14_M1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET14_FFE_ERR_LVL_SET14_M1_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET14_FFE_ERR_LVL_SET14_M1_BF_DEF (0x00000350)

///< set14 of ffe error -3 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET14_FFE_ERR_LVL_SET14_M3_BF_OFF (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET14_FFE_ERR_LVL_SET14_M3_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET14_FFE_ERR_LVL_SET14_M3_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET14_FFE_ERR_LVL_SET14_M3_BF_DEF (0x00082000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_ERR_LEVEL_P1P3_SET14 register description at address offset 0x1fc
  *
  * Register default value:        0x0007E0B0
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_err_level_p1p3_set14
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_ERR_LEVEL_SET14_P1 : 10;
    ///< set14 of ffe error +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0xB0"
    uint32_t FFE_ERR_LEVEL_SET14_P3 : 10;
    ///< set14 of ffe error +3 slicer level
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x1F8"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_err_lvl_p1p3_set14_reg_t;

#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET14_DEFAULT (0x0007e0b0U)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET14_RD_MASK (0x000fffffU)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET14_WR_MASK (0x000fffffU)


///< set14 of ffe error +1 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET14_FFE_ERR_LVL_SET14_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET14_FFE_ERR_LVL_SET14_P1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET14_FFE_ERR_LVL_SET14_P1_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET14_FFE_ERR_LVL_SET14_P1_BF_DEF (0x000000B0)

///< set14 of ffe error +3 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET14_FFE_ERR_LVL_SET14_P3_BF_OFF (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET14_FFE_ERR_LVL_SET14_P3_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET14_FFE_ERR_LVL_SET14_P3_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET14_FFE_ERR_LVL_SET14_P3_BF_DEF (0x0007E000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_ERR_LEVEL_M1M3_SET15 register description at address offset 0x200
  *
  * Register default value:        0x00082350
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_err_level_m1m3_set15
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_ERR_LEVEL_SET15_M1 : 10;
    ///< set15 of ffe error -1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x350"
    uint32_t FFE_ERR_LEVEL_SET15_M3 : 10;
    ///< set15 of ffe error -3 slicer level
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x208"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_err_lvl_m1m3_set15_reg_t;

#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET15_DEFAULT (0x00082350U)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET15_RD_MASK (0x000fffffU)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET15_WR_MASK (0x000fffffU)


///< set15 of ffe error -1 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET15_FFE_ERR_LVL_SET15_M1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET15_FFE_ERR_LVL_SET15_M1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET15_FFE_ERR_LVL_SET15_M1_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET15_FFE_ERR_LVL_SET15_M1_BF_DEF (0x00000350)

///< set15 of ffe error -3 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET15_FFE_ERR_LVL_SET15_M3_BF_OFF (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET15_FFE_ERR_LVL_SET15_M3_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET15_FFE_ERR_LVL_SET15_M3_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET15_FFE_ERR_LVL_SET15_M3_BF_DEF (0x00082000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_ERR_LEVEL_P1P3_SET15 register description at address offset 0x204
  *
  * Register default value:        0x0007E0B0
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_err_level_p1p3_set15
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_ERR_LEVEL_SET15_P1 : 10;
    ///< set15 of ffe error +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0xB0"
    uint32_t FFE_ERR_LEVEL_SET15_P3 : 10;
    ///< set15 of ffe error +3 slicer level
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x1F8"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_err_lvl_p1p3_set15_reg_t;

#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET15_DEFAULT (0x0007e0b0U)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET15_RD_MASK (0x000fffffU)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET15_WR_MASK (0x000fffffU)


///< set15 of ffe error +1 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET15_FFE_ERR_LVL_SET15_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET15_FFE_ERR_LVL_SET15_P1_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET15_FFE_ERR_LVL_SET15_P1_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET15_FFE_ERR_LVL_SET15_P1_BF_DEF (0x000000B0)

///< set15 of ffe error +3 slicer level
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET15_FFE_ERR_LVL_SET15_P3_BF_OFF (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET15_FFE_ERR_LVL_SET15_P3_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET15_FFE_ERR_LVL_SET15_P3_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET15_FFE_ERR_LVL_SET15_P3_BF_DEF (0x0007E000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_RX_DUMP_MEM_CTRL register description at address offset 0x208
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/rx_dump_mem_ctrl
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADC_DUMP_MEM_EN : 1;
    ///< default=0. When sets to 1 enables the ADC data dump from lane0 to
    ///< mem dump in cmn global enable for the feature
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t ADC_DUMP_WAIT_FOR_RX_RDY : 1;
    ///< default=0. When sets to 1 waits for rx_rdy to assert AND dump_en=1
    ///< before starting  dump.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t DUMP_MEM_SRC_SEL : 4;
    ///< 0000-ADC out
    ///< 0001-FFE out pre slicer ( 64x6 MSB bits)
    ///< 0010 -FFE post slicer data and error (64x2bits data +64x1 error)
    ///< 0011-CDR FFE pre slicer  (64x6 msb  8:3)
    ///< 0100-CDR ffe post slicer data+error  (64x2bits data + 64x1bits error)
    ///< 0101 -DFE out  data and error   (64x2bits + 64x1bit)
    ///< 0110-CDR alexander PD data (64x2bits)
    ///< 0111 -CDR baud rate PD  data and error ( 64x2bits +64x1 error )
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_rx_dump_mem_ctrl_reg_t;

#define PMA_RXWORD_MSG_RX_DUMP_MEM_CTRL_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_RX_DUMP_MEM_CTRL_RD_MASK (0x0000003fU)
#define PMA_RXWORD_MSG_RX_DUMP_MEM_CTRL_WR_MASK (0x0000003fU)


///< default=0. When sets to 1 enables the ADC data dump from lane0 to
///< mem dump in cmn global enable for the feature
#define PMA_RXWORD_MSG_RX_DUMP_MEM_CTRL_ADC_DUMP_MEM_EN_BF_OFF ( 0)
#define PMA_RXWORD_MSG_RX_DUMP_MEM_CTRL_ADC_DUMP_MEM_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_RX_DUMP_MEM_CTRL_ADC_DUMP_MEM_EN_BF_MSK (0x00000001)
#define PMA_RXWORD_MSG_RX_DUMP_MEM_CTRL_ADC_DUMP_MEM_EN_BF_DEF (0x00000000)

///< default=0. When sets to 1 waits for rx_rdy to assert AND dump_en=1
///< before starting  dump.
#define PMA_RXWORD_MSG_RX_DUMP_MEM_CTRL_ADC_DUMP_WAIT_FOR_RX_RDY_BF_OFF ( 1)
#define PMA_RXWORD_MSG_RX_DUMP_MEM_CTRL_ADC_DUMP_WAIT_FOR_RX_RDY_BF_WID ( 1)
#define PMA_RXWORD_MSG_RX_DUMP_MEM_CTRL_ADC_DUMP_WAIT_FOR_RX_RDY_BF_MSK (0x00000002)
#define PMA_RXWORD_MSG_RX_DUMP_MEM_CTRL_ADC_DUMP_WAIT_FOR_RX_RDY_BF_DEF (0x00000000)

///< 0000-ADC out
///< 0001-FFE out pre slicer ( 64x6 MSB bits)
///< 0010 -FFE post slicer data and error (64x2bits data +64x1 error)
///< 0011-CDR FFE pre slicer  (64x6 msb  8:3)
///< 0100-CDR ffe post slicer data+error  (64x2bits data + 64x1bits error)
///< 0101 -DFE out  data and error   (64x2bits + 64x1bit)
///< 0110-CDR alexander PD data (64x2bits)
///< 0111 -CDR baud rate PD  data and error ( 64x2bits +64x1 error )
#define PMA_RXWORD_MSG_RX_DUMP_MEM_CTRL_DUMP_MEM_SRC_SEL_BF_OFF ( 2)
#define PMA_RXWORD_MSG_RX_DUMP_MEM_CTRL_DUMP_MEM_SRC_SEL_BF_WID ( 4)
#define PMA_RXWORD_MSG_RX_DUMP_MEM_CTRL_DUMP_MEM_SRC_SEL_BF_MSK (0x0000003C)
#define PMA_RXWORD_MSG_RX_DUMP_MEM_CTRL_DUMP_MEM_SRC_SEL_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_RX_DUMP_MEM_APB_RD_DATA register description at address offset 0x20c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/rx_dump_mem_apb_rd_data
  * placeholder
  */

typedef union {
  struct {
    uint32_t RX_DUMP_MEM_APB_RD_DATA : 32;
    ///< Read data  result from rx fifo 32bits based on src sel
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_rx_dump_mem_apb_rd_data_reg_t;

#define PMA_RXWORD_MSG_RX_DUMP_MEM_APB_RD_DATA_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_RX_DUMP_MEM_APB_RD_DATA_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_RX_DUMP_MEM_APB_RD_DATA_WR_MASK (0x00000000U)


///< Read data  result from rx fifo 32bits based on src sel
#define PMA_RXWORD_MSG_RX_DUMP_MEM_APB_RD_DATA_RX_DUMP_MEM_APB_RD_DATA_BF_OFF ( 0)
#define PMA_RXWORD_MSG_RX_DUMP_MEM_APB_RD_DATA_RX_DUMP_MEM_APB_RD_DATA_BF_WID (32)
#define PMA_RXWORD_MSG_RX_DUMP_MEM_APB_RD_DATA_RX_DUMP_MEM_APB_RD_DATA_BF_MSK (0xFFFFFFFF)
#define PMA_RXWORD_MSG_RX_DUMP_MEM_APB_RD_DATA_RX_DUMP_MEM_APB_RD_DATA_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_RX_DUMP_MEM_APB_RD_EN register description at address offset 0x210
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/rx_dump_mem_apb_rd_en
  * placeholder
  */

typedef union {
  struct {
    uint32_t RX_DUMP_MEM_APB_RD_EN : 1;
    ///< default=0. When set to 1  Enables the read interface through RX APB
    ///< and disables memory reads from cmn
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_rx_dump_mem_apb_rd_en_reg_t;

#define PMA_RXWORD_MSG_RX_DUMP_MEM_APB_RD_EN_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_RX_DUMP_MEM_APB_RD_EN_RD_MASK (0x00000001U)
#define PMA_RXWORD_MSG_RX_DUMP_MEM_APB_RD_EN_WR_MASK (0x00000001U)


///< default=0. When set to 1  Enables the read interface through RX APB
///< and disables memory reads from cmn
#define PMA_RXWORD_MSG_RX_DUMP_MEM_APB_RD_EN_RX_DUMP_MEM_APB_RD_EN_BF_OFF ( 0)
#define PMA_RXWORD_MSG_RX_DUMP_MEM_APB_RD_EN_RX_DUMP_MEM_APB_RD_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_RX_DUMP_MEM_APB_RD_EN_RX_DUMP_MEM_APB_RD_EN_BF_MSK (0x00000001)
#define PMA_RXWORD_MSG_RX_DUMP_MEM_APB_RD_EN_RX_DUMP_MEM_APB_RD_EN_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_RX_DUMP_MEM_APB_EN register description at address offset 0x214
  *
  * Register default value:        0x00000018
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/rx_dump_mem_apb_en
  * placeholder
  */

typedef union {
  struct {
    uint32_t RX_DUMP_MEM_APB_EN : 1;
    ///< default=0. When set to 1  Enables the read interface through RX APB
    ///< and disables memory reads from cmn
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_DUMP_MEM_NUM_TRANS : 4;
    ///< default=12. output 12x32 bits from each fifo address.
    ///< AccessType="RW" BitOffset="1" ResetValue="0xC"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_rx_dump_mem_apb_en_reg_t;

#define PMA_RXWORD_MSG_RX_DUMP_MEM_APB_EN_DEFAULT (0x00000018U)
#define PMA_RXWORD_MSG_RX_DUMP_MEM_APB_EN_RD_MASK (0x0000001fU)
#define PMA_RXWORD_MSG_RX_DUMP_MEM_APB_EN_WR_MASK (0x0000001fU)


///< default=0. When set to 1  Enables the read interface through RX APB
///< and disables memory reads from cmn
#define PMA_RXWORD_MSG_RX_DUMP_MEM_APB_EN_RX_DUMP_MEM_APB_EN_BF_OFF ( 0)
#define PMA_RXWORD_MSG_RX_DUMP_MEM_APB_EN_RX_DUMP_MEM_APB_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_RX_DUMP_MEM_APB_EN_RX_DUMP_MEM_APB_EN_BF_MSK (0x00000001)
#define PMA_RXWORD_MSG_RX_DUMP_MEM_APB_EN_RX_DUMP_MEM_APB_EN_BF_DEF (0x00000000)

///< default=12. output 12x32 bits from each fifo address.
#define PMA_RXWORD_MSG_RX_DUMP_MEM_APB_EN_RX_DUMP_MEM_NUM_TRANS_BF_OFF ( 1)
#define PMA_RXWORD_MSG_RX_DUMP_MEM_APB_EN_RX_DUMP_MEM_NUM_TRANS_BF_WID ( 4)
#define PMA_RXWORD_MSG_RX_DUMP_MEM_APB_EN_RX_DUMP_MEM_NUM_TRANS_BF_MSK (0x0000001E)
#define PMA_RXWORD_MSG_RX_DUMP_MEM_APB_EN_RX_DUMP_MEM_NUM_TRANS_BF_DEF (0x00000018)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_RX_DATA_PATH_CONTROL_1 register description at address offset 0x218
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/rx_data_path_control_1
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_SLICE_INV_N_ERR : 1;
    ///< Invert ffe slicer -1/-3 polarity
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_SLICE_INV_P_ERR : 1;
    ///< Invert ffe slicer +1/+3 polarity
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t ADC_SLICE_INV_N_ERR : 1;
    ///< Invert adc slicer -1/-3 polarity
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t ADC_SLICE_INV_P_ERR : 1;
    ///< Invert adc slicer +1/+3 polarity
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t CDR_FFE_SLICE_INV_N_ERR : 1;
    ///< Invert cdr ffe slicer -1/-3 polarity
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t CDR_FFE_SLICE_INV_P_ERR : 1;
    ///< Invert cdr ffe slicer +1/+3 polarity
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t DATAPATH_DATA_SOURCE_SEL : 2;
    ///< Rx data path source selection: 0-select ffe slicer, 1-select dfe slicer,
    ///< 2-select adc slicer
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t RX_ADC_0_CODE_REPLACE : 3;
    ///< replace zero adc input with non-zero data:
    ///< 0 - repalce with 0x1
    ///< 1 - replace with 0x2
    ///< 2 - replace with 0x4
    ///< 3 - replace with 0x8
    ///< others - no replacement
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
    uint32_t HIST_SRC_SEL : 2;
    ///< Histogram engine source selection: 0-from ffe slicer, 1-from dfe slicer,
    ///< 2-select adc slicer, 3-reserved
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t HIST_CDR_VOTERS_SEL : 1;
    ///< Histogram wide bin counter selection CDR voters
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t CDR_PHDT_SRC_SEL : 1;
    ///< Source for VREF levels selected to analog FHDT 0 ADC_VREF 1 CDR_FFE_VREF
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_PHDT_UPDATE_DIS : 1;
    ///< Disable updates on the interface with analog PD
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t ADC_VREF_MU_BOOST : 2;
    ///< shift factor for adc_vref_mu
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t CDR_VREF_MU_BOOST : 2;
    ///< shift factor for cdr_vref_mu
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t FFE_VREF_MU_BOOST : 2;
    ///< shift factor for ffe_vref_mu
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_rx_data_path_ctrl_1_reg_t;

#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_RD_MASK (0x00ffe7ffU)
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_WR_MASK (0x00ffe7ffU)


///< Invert ffe slicer -1/-3 polarity
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_FFE_SLICE_INV_N_ERR_BF_OFF ( 0)
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_FFE_SLICE_INV_N_ERR_BF_WID ( 1)
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_FFE_SLICE_INV_N_ERR_BF_MSK (0x00000001)
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_FFE_SLICE_INV_N_ERR_BF_DEF (0x00000000)

///< Invert ffe slicer +1/+3 polarity
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_FFE_SLICE_INV_P_ERR_BF_OFF ( 1)
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_FFE_SLICE_INV_P_ERR_BF_WID ( 1)
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_FFE_SLICE_INV_P_ERR_BF_MSK (0x00000002)
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_FFE_SLICE_INV_P_ERR_BF_DEF (0x00000000)

///< Invert adc slicer -1/-3 polarity
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_ADC_SLICE_INV_N_ERR_BF_OFF ( 2)
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_ADC_SLICE_INV_N_ERR_BF_WID ( 1)
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_ADC_SLICE_INV_N_ERR_BF_MSK (0x00000004)
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_ADC_SLICE_INV_N_ERR_BF_DEF (0x00000000)

///< Invert adc slicer +1/+3 polarity
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_ADC_SLICE_INV_P_ERR_BF_OFF ( 3)
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_ADC_SLICE_INV_P_ERR_BF_WID ( 1)
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_ADC_SLICE_INV_P_ERR_BF_MSK (0x00000008)
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_ADC_SLICE_INV_P_ERR_BF_DEF (0x00000000)

///< Invert cdr ffe slicer -1/-3 polarity
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_CDR_FFE_SLICE_INV_N_ERR_BF_OFF ( 4)
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_CDR_FFE_SLICE_INV_N_ERR_BF_WID ( 1)
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_CDR_FFE_SLICE_INV_N_ERR_BF_MSK (0x00000010)
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_CDR_FFE_SLICE_INV_N_ERR_BF_DEF (0x00000000)

///< Invert cdr ffe slicer +1/+3 polarity
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_CDR_FFE_SLICE_INV_P_ERR_BF_OFF ( 5)
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_CDR_FFE_SLICE_INV_P_ERR_BF_WID ( 1)
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_CDR_FFE_SLICE_INV_P_ERR_BF_MSK (0x00000020)
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_CDR_FFE_SLICE_INV_P_ERR_BF_DEF (0x00000000)

///< Rx data path source selection: 0-select ffe slicer, 1-select dfe slicer,
///< 2-select adc slicer
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_DATAPATH_DATA_SOURCE_SEL_BF_OFF ( 6)
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_DATAPATH_DATA_SOURCE_SEL_BF_WID ( 2)
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_DATAPATH_DATA_SOURCE_SEL_BF_MSK (0x000000C0)
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_DATAPATH_DATA_SOURCE_SEL_BF_DEF (0x00000000)

///< replace zero adc input with non-zero data:
///< 0 - repalce with 0x1
///< 1 - replace with 0x2
///< 2 - replace with 0x4
///< 3 - replace with 0x8
///< others - no replacement
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_RX_ADC_0_CODE_REPLACE_BF_OFF ( 8)
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_RX_ADC_0_CODE_REPLACE_BF_WID ( 3)
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_RX_ADC_0_CODE_REPLACE_BF_MSK (0x00000700)
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_RX_ADC_0_CODE_REPLACE_BF_DEF (0x00000000)

///< Histogram engine source selection: 0-from ffe slicer, 1-from dfe slicer,
///< 2-select adc slicer, 3-reserved
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_HIST_SRC_SEL_BF_OFF (13)
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_HIST_SRC_SEL_BF_WID ( 2)
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_HIST_SRC_SEL_BF_MSK (0x00006000)
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_HIST_SRC_SEL_BF_DEF (0x00000000)

///< Histogram wide bin counter selection CDR voters
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_HIST_CDR_VOTERS_SEL_BF_OFF (15)
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_HIST_CDR_VOTERS_SEL_BF_WID ( 1)
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_HIST_CDR_VOTERS_SEL_BF_MSK (0x00008000)
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_HIST_CDR_VOTERS_SEL_BF_DEF (0x00000000)

///< Source for VREF levels selected to analog FHDT 0 ADC_VREF 1 CDR_FFE_VREF
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_CDR_PHDT_SRC_SEL_BF_OFF (16)
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_CDR_PHDT_SRC_SEL_BF_WID ( 1)
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_CDR_PHDT_SRC_SEL_BF_MSK (0x00010000)
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_CDR_PHDT_SRC_SEL_BF_DEF (0x00000000)

///< Disable updates on the interface with analog PD
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_CDR_PHDT_UPDATE_DIS_BF_OFF (17)
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_CDR_PHDT_UPDATE_DIS_BF_WID ( 1)
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_CDR_PHDT_UPDATE_DIS_BF_MSK (0x00020000)
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_CDR_PHDT_UPDATE_DIS_BF_DEF (0x00000000)

///< shift factor for adc_vref_mu
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_ADC_VREF_MU_BOOST_BF_OFF (18)
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_ADC_VREF_MU_BOOST_BF_WID ( 2)
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_ADC_VREF_MU_BOOST_BF_MSK (0x000C0000)
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_ADC_VREF_MU_BOOST_BF_DEF (0x00000000)

///< shift factor for cdr_vref_mu
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_CDR_VREF_MU_BOOST_BF_OFF (20)
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_CDR_VREF_MU_BOOST_BF_WID ( 2)
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_CDR_VREF_MU_BOOST_BF_MSK (0x00300000)
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_CDR_VREF_MU_BOOST_BF_DEF (0x00000000)

///< shift factor for ffe_vref_mu
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_FFE_VREF_MU_BOOST_BF_OFF (22)
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_FFE_VREF_MU_BOOST_BF_WID ( 2)
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_FFE_VREF_MU_BOOST_BF_MSK (0x00C00000)
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_FFE_VREF_MU_BOOST_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADP_MSB_LSB_SWAP_CTRL register description at address offset 0x21c
  *
  * Register default value:        0x00000003
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adp_msb_lsb_swap_ctrl
  * placeholder
  */

typedef union {
  struct {
    uint32_t FS_LSB_NEWEST_EN : 1;
    ///< default =1. Make first sample output lsb newest before ffe input
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t DP_SRC_SEL_MSB_NEWEST_EN : 1;
    ///< default=1. Make datapath source selection output msb newest before
    ///< rx data post-processing
    ///< AccessType="RW" BitOffset="1" ResetValue="0x1"
    uint32_t LMS_MSB_INV_CB : 1;
    ///< default=0. In case adp input is msb newest, set this to 1 to swap
    ///< them to lsb newest
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t CDR_FFE_IN_MSB_INV_CB : 1;
    ///< default=0. In case cdr ffe input is msb newest, set this to 1 to swap
    ///< them to lsb newest
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
    uint32_t FFE_IN_MSB_INV_CB : 1;
    ///< default=0. In case ffe input is msb newest, set this to 1 to swap
    ///< them to lsb newest
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t FFE_FILTER_MSB_INV_CB : 1;
    ///< default=0. In case ffe filter input is msb newest, set this to 1 to
    ///< swap them to lsb newest
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t HIST_COMPR_SWAP : 19;
    ///< Swap bin counter comparators function. 0: (limit_lo>= and limit_hi<)
    ///< 1:(limit_lo> and limit_hi=<)
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="26" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_adp_msb_lsb_swap_ctrl_reg_t;

#define PMA_RXWORD_MSG_ADP_MSB_LSB_SWAP_CTRL_DEFAULT (0x00000003U)
#define PMA_RXWORD_MSG_ADP_MSB_LSB_SWAP_CTRL_RD_MASK (0x03ffffefU)
#define PMA_RXWORD_MSG_ADP_MSB_LSB_SWAP_CTRL_WR_MASK (0x03ffffefU)


///< default =1. Make first sample output lsb newest before ffe input
#define PMA_RXWORD_MSG_ADP_MSB_LSB_SWAP_CTRL_FS_LSB_NEWEST_EN_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADP_MSB_LSB_SWAP_CTRL_FS_LSB_NEWEST_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_ADP_MSB_LSB_SWAP_CTRL_FS_LSB_NEWEST_EN_BF_MSK (0x00000001)
#define PMA_RXWORD_MSG_ADP_MSB_LSB_SWAP_CTRL_FS_LSB_NEWEST_EN_BF_DEF (0x00000001)

///< default=1. Make datapath source selection output msb newest before
///< rx data post-processing
#define PMA_RXWORD_MSG_ADP_MSB_LSB_SWAP_CTRL_DP_SRC_SEL_MSB_NEWEST_EN_BF_OFF ( 1)
#define PMA_RXWORD_MSG_ADP_MSB_LSB_SWAP_CTRL_DP_SRC_SEL_MSB_NEWEST_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_ADP_MSB_LSB_SWAP_CTRL_DP_SRC_SEL_MSB_NEWEST_EN_BF_MSK (0x00000002)
#define PMA_RXWORD_MSG_ADP_MSB_LSB_SWAP_CTRL_DP_SRC_SEL_MSB_NEWEST_EN_BF_DEF (0x00000002)

///< default=0. In case adp input is msb newest, set this to 1 to swap
///< them to lsb newest
#define PMA_RXWORD_MSG_ADP_MSB_LSB_SWAP_CTRL_LMS_MSB_INV_CB_BF_OFF ( 2)
#define PMA_RXWORD_MSG_ADP_MSB_LSB_SWAP_CTRL_LMS_MSB_INV_CB_BF_WID ( 1)
#define PMA_RXWORD_MSG_ADP_MSB_LSB_SWAP_CTRL_LMS_MSB_INV_CB_BF_MSK (0x00000004)
#define PMA_RXWORD_MSG_ADP_MSB_LSB_SWAP_CTRL_LMS_MSB_INV_CB_BF_DEF (0x00000000)

///< default=0. In case cdr ffe input is msb newest, set this to 1 to swap
///< them to lsb newest
#define PMA_RXWORD_MSG_ADP_MSB_LSB_SWAP_CTRL_CDR_FFE_IN_MSB_INV_CB_BF_OFF ( 3)
#define PMA_RXWORD_MSG_ADP_MSB_LSB_SWAP_CTRL_CDR_FFE_IN_MSB_INV_CB_BF_WID ( 1)
#define PMA_RXWORD_MSG_ADP_MSB_LSB_SWAP_CTRL_CDR_FFE_IN_MSB_INV_CB_BF_MSK (0x00000008)
#define PMA_RXWORD_MSG_ADP_MSB_LSB_SWAP_CTRL_CDR_FFE_IN_MSB_INV_CB_BF_DEF (0x00000000)

///< default=0. In case ffe input is msb newest, set this to 1 to swap
///< them to lsb newest
#define PMA_RXWORD_MSG_ADP_MSB_LSB_SWAP_CTRL_FFE_IN_MSB_INV_CB_BF_OFF ( 5)
#define PMA_RXWORD_MSG_ADP_MSB_LSB_SWAP_CTRL_FFE_IN_MSB_INV_CB_BF_WID ( 1)
#define PMA_RXWORD_MSG_ADP_MSB_LSB_SWAP_CTRL_FFE_IN_MSB_INV_CB_BF_MSK (0x00000020)
#define PMA_RXWORD_MSG_ADP_MSB_LSB_SWAP_CTRL_FFE_IN_MSB_INV_CB_BF_DEF (0x00000000)

///< default=0. In case ffe filter input is msb newest, set this to 1 to
///< swap them to lsb newest
#define PMA_RXWORD_MSG_ADP_MSB_LSB_SWAP_CTRL_FFE_FILTER_MSB_INV_CB_BF_OFF ( 6)
#define PMA_RXWORD_MSG_ADP_MSB_LSB_SWAP_CTRL_FFE_FILTER_MSB_INV_CB_BF_WID ( 1)
#define PMA_RXWORD_MSG_ADP_MSB_LSB_SWAP_CTRL_FFE_FILTER_MSB_INV_CB_BF_MSK (0x00000040)
#define PMA_RXWORD_MSG_ADP_MSB_LSB_SWAP_CTRL_FFE_FILTER_MSB_INV_CB_BF_DEF (0x00000000)

///< Swap bin counter comparators function. 0: (limit_lo>= and limit_hi<)
///< 1:(limit_lo> and limit_hi=<)
#define PMA_RXWORD_MSG_ADP_MSB_LSB_SWAP_CTRL_HIST_COMPR_SWAP_BF_OFF ( 7)
#define PMA_RXWORD_MSG_ADP_MSB_LSB_SWAP_CTRL_HIST_COMPR_SWAP_BF_WID (19)
#define PMA_RXWORD_MSG_ADP_MSB_LSB_SWAP_CTRL_HIST_COMPR_SWAP_BF_MSK (0x03FFFF80)
#define PMA_RXWORD_MSG_ADP_MSB_LSB_SWAP_CTRL_HIST_COMPR_SWAP_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_FLOAT_TAP_POSITION1 register description at address offset 0x220
  *
  * Register default value:        0x03020100
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_float_tap_position1
  * placeholder
  */

typedef union {
  struct {
    uint32_t FLOAT_TAP_0_POSITION : 6;
    ///< ffe floating tap 0 position, range is [0, 48] , selecting index range
    ///< [16:16+48], default is 0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t FLOAT_TAP_1_POSITION : 6;
    ///< ffe floating tap 0 position, range is [0, 48] , selecting index range
    ///< [16:16+48], default is 1
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t FLOAT_TAP_2_POSITION : 6;
    ///< ffe floating tap 0 position, range is [0, 48] , selecting index range
    ///< [16:16+48], default is 2
    ///< AccessType="RW" BitOffset="16" ResetValue="0x2"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t FLOAT_TAP_3_POSITION : 6;
    ///< ffe floating tap 0 position, range is [0, 48] , selecting index range
    ///< [16:16+48], default is 3
    ///< AccessType="RW" BitOffset="24" ResetValue="0x3"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_float_tap_position1_reg_t;

#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION1_DEFAULT (0x03020100U)
#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION1_RD_MASK (0x3f3f3f3fU)
#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION1_WR_MASK (0x3f3f3f3fU)


///< ffe floating tap 0 position, range is [0, 48] , selecting index range
///< [16:16+48], default is 0
#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION1_FLOAT_TAP_0_POSITION_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION1_FLOAT_TAP_0_POSITION_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION1_FLOAT_TAP_0_POSITION_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION1_FLOAT_TAP_0_POSITION_BF_DEF (0x00000000)

///< ffe floating tap 0 position, range is [0, 48] , selecting index range
///< [16:16+48], default is 1
#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION1_FLOAT_TAP_1_POSITION_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION1_FLOAT_TAP_1_POSITION_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION1_FLOAT_TAP_1_POSITION_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION1_FLOAT_TAP_1_POSITION_BF_DEF (0x00000100)

///< ffe floating tap 0 position, range is [0, 48] , selecting index range
///< [16:16+48], default is 2
#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION1_FLOAT_TAP_2_POSITION_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION1_FLOAT_TAP_2_POSITION_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION1_FLOAT_TAP_2_POSITION_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION1_FLOAT_TAP_2_POSITION_BF_DEF (0x00020000)

///< ffe floating tap 0 position, range is [0, 48] , selecting index range
///< [16:16+48], default is 3
#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION1_FLOAT_TAP_3_POSITION_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION1_FLOAT_TAP_3_POSITION_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION1_FLOAT_TAP_3_POSITION_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION1_FLOAT_TAP_3_POSITION_BF_DEF (0x03000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_FLOAT_TAP_POSITION2 register description at address offset 0x224
  *
  * Register default value:        0x07060504
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_float_tap_position2
  * placeholder
  */

typedef union {
  struct {
    uint32_t FLOAT_TAP_4_POSITION : 6;
    ///< ffe floating tap 0 position, range is [0, 48] , selecting index range
    ///< [16:16+48], default is 4
    ///< AccessType="RW" BitOffset="0" ResetValue="0x4"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t FLOAT_TAP_5_POSITION : 6;
    ///< ffe floating tap 0 position, range is [0, 48] , selecting index range
    ///< [16:16+48], default is 5
    ///< AccessType="RW" BitOffset="8" ResetValue="0x5"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t FLOAT_TAP_6_POSITION : 6;
    ///< ffe floating tap 0 position, range is [0, 48] , selecting index range
    ///< [16:16+48], default is 6
    ///< AccessType="RW" BitOffset="16" ResetValue="0x6"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t FLOAT_TAP_7_POSITION : 6;
    ///< ffe floating tap 0 position, range is [0, 48] , selecting index range
    ///< [16:16+48], default is 7
    ///< AccessType="RW" BitOffset="24" ResetValue="0x7"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_float_tap_position2_reg_t;

#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION2_DEFAULT (0x07060504U)
#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION2_RD_MASK (0x3f3f3f3fU)
#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION2_WR_MASK (0x3f3f3f3fU)


///< ffe floating tap 0 position, range is [0, 48] , selecting index range
///< [16:16+48], default is 4
#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION2_FLOAT_TAP_4_POSITION_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION2_FLOAT_TAP_4_POSITION_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION2_FLOAT_TAP_4_POSITION_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION2_FLOAT_TAP_4_POSITION_BF_DEF (0x00000004)

///< ffe floating tap 0 position, range is [0, 48] , selecting index range
///< [16:16+48], default is 5
#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION2_FLOAT_TAP_5_POSITION_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION2_FLOAT_TAP_5_POSITION_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION2_FLOAT_TAP_5_POSITION_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION2_FLOAT_TAP_5_POSITION_BF_DEF (0x00000500)

///< ffe floating tap 0 position, range is [0, 48] , selecting index range
///< [16:16+48], default is 6
#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION2_FLOAT_TAP_6_POSITION_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION2_FLOAT_TAP_6_POSITION_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION2_FLOAT_TAP_6_POSITION_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION2_FLOAT_TAP_6_POSITION_BF_DEF (0x00060000)

///< ffe floating tap 0 position, range is [0, 48] , selecting index range
///< [16:16+48], default is 7
#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION2_FLOAT_TAP_7_POSITION_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION2_FLOAT_TAP_7_POSITION_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION2_FLOAT_TAP_7_POSITION_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION2_FLOAT_TAP_7_POSITION_BF_DEF (0x07000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_FLOAT_TAP_POSITION3 register description at address offset 0x228
  *
  * Register default value:        0x00000008
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_float_tap_position3
  * placeholder
  */

typedef union {
  struct {
    uint32_t FLOAT_TAP_8_POSITION : 6;
    ///< ffe floating tap 0 position, range is [0, 48] , selecting index range
    ///< [16:16+48], default is 8
    ///< AccessType="RW" BitOffset="0" ResetValue="0x8"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_float_tap_position3_reg_t;

#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION3_DEFAULT (0x00000008U)
#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION3_RD_MASK (0x0000003fU)
#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION3_WR_MASK (0x0000003fU)


///< ffe floating tap 0 position, range is [0, 48] , selecting index range
///< [16:16+48], default is 8
#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION3_FLOAT_TAP_8_POSITION_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION3_FLOAT_TAP_8_POSITION_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION3_FLOAT_TAP_8_POSITION_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION3_FLOAT_TAP_8_POSITION_BF_DEF (0x00000008)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_RXEQ_CLOCK_GATING_CTRL_0 register description at address offset 0x22c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/rxeq_clock_gating_ctrl_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_GATED_0 : 32;
    ///< clock gating for ffe0 to ffe31, default is no clock gating
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_rxeq_clk_gating_ctrl_0_reg_t;

#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_0_WR_MASK (0xffffffffU)


///< clock gating for ffe0 to ffe31, default is no clock gating
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_0_FFE_GATED_0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_0_FFE_GATED_0_BF_WID (32)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_0_FFE_GATED_0_BF_MSK (0xFFFFFFFF)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_0_FFE_GATED_0_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_RXEQ_CLOCK_GATING_CTRL_1 register description at address offset 0x230
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/rxeq_clock_gating_ctrl_1
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_GATED_1 : 32;
    ///< clock gating for ffe32 to ffe63, default is no clock gating
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_rxeq_clk_gating_ctrl_1_reg_t;

#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_1_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_1_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_1_WR_MASK (0xffffffffU)


///< clock gating for ffe32 to ffe63, default is no clock gating
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_1_FFE_GATED_1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_1_FFE_GATED_1_BF_WID (32)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_1_FFE_GATED_1_BF_MSK (0xFFFFFFFF)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_1_FFE_GATED_1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_RXEQ_CLOCK_GATING_CTRL_2 register description at address offset 0x234
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/rxeq_clock_gating_ctrl_2
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_LMS_GATED : 24;
    ///< clock gating for 24 ffe lms engine (15 static + 9 floating), default
    ///< is no clock gating
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_rxeq_clk_gating_ctrl_2_reg_t;

#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_2_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_2_RD_MASK (0x00ffffffU)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_2_WR_MASK (0x00ffffffU)


///< clock gating for 24 ffe lms engine (15 static + 9 floating), default
///< is no clock gating
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_2_FFE_LMS_GATED_BF_OFF ( 0)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_2_FFE_LMS_GATED_BF_WID (24)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_2_FFE_LMS_GATED_BF_MSK (0x00FFFFFF)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_2_FFE_LMS_GATED_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_RXEQ_CLOCK_GATING_CTRL_3 register description at address offset 0x238
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/rxeq_clock_gating_ctrl_3
  * placeholder
  */

typedef union {
  struct {
    uint32_t VREF_LMS_GATED : 4;
    ///< clock gating for 4 vref lms engine, default is no clock gating
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t EDGVREF_LMS_GATED : 3;
    ///< clock gating for 3 edgvref lms engine, default is no clock gating
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t DFE_64LA_GATED : 1;
    ///< clock gating for 64LA dfe engine, default is no clock gating
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t ADCVREF_LMS_GATED : 4;
    ///< clock gating for 4 adcvref lms engine, default is no clock gating
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t AFFE_LMS_GATED : 4;
    ///< clock gating for 4 affe lms engine, default is no clock gating
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t HST_LMS_GATED : 1;
    ///< clock gating for histgram lms engine, default is no clock gating
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t VGA_LMS_GATED : 1;
    ///< clock gating for vga lms engine, default is no clock gating
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t ADCOFC_LMS_GATED : 6;
    ///< clock gating for 6 ofc lms engine, default is no clock gating
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t OFC_LMS_GATED : 6;
    ///< clock gating for 6 adcofc lms engine, default is no clock gating
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t DFE_LMS_GATED : 1;
    ///< clock gating for dfe lms engine, default is no clock gating
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t DFE_WINDOWING_GATED : 1;
    ///< clock gating for Windowing dfe  engine, default is no clock gating
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_rxeq_clk_gating_ctrl_3_reg_t;

#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_3_WR_MASK (0xffffffffU)


///< clock gating for 4 vref lms engine, default is no clock gating
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_3_VREF_LMS_GATED_BF_OFF ( 0)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_3_VREF_LMS_GATED_BF_WID ( 4)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_3_VREF_LMS_GATED_BF_MSK (0x0000000F)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_3_VREF_LMS_GATED_BF_DEF (0x00000000)

///< clock gating for 3 edgvref lms engine, default is no clock gating
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_3_EDGVREF_LMS_GATED_BF_OFF ( 4)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_3_EDGVREF_LMS_GATED_BF_WID ( 3)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_3_EDGVREF_LMS_GATED_BF_MSK (0x00000070)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_3_EDGVREF_LMS_GATED_BF_DEF (0x00000000)

///< clock gating for 64LA dfe engine, default is no clock gating
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_3_DFE_64LA_GATED_BF_OFF ( 7)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_3_DFE_64LA_GATED_BF_WID ( 1)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_3_DFE_64LA_GATED_BF_MSK (0x00000080)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_3_DFE_64LA_GATED_BF_DEF (0x00000000)

///< clock gating for 4 adcvref lms engine, default is no clock gating
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_3_ADCVREF_LMS_GATED_BF_OFF ( 8)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_3_ADCVREF_LMS_GATED_BF_WID ( 4)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_3_ADCVREF_LMS_GATED_BF_MSK (0x00000F00)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_3_ADCVREF_LMS_GATED_BF_DEF (0x00000000)

///< clock gating for 4 affe lms engine, default is no clock gating
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_3_AFFE_LMS_GATED_BF_OFF (12)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_3_AFFE_LMS_GATED_BF_WID ( 4)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_3_AFFE_LMS_GATED_BF_MSK (0x0000F000)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_3_AFFE_LMS_GATED_BF_DEF (0x00000000)

///< clock gating for histgram lms engine, default is no clock gating
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_3_HST_LMS_GATED_BF_OFF (16)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_3_HST_LMS_GATED_BF_WID ( 1)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_3_HST_LMS_GATED_BF_MSK (0x00010000)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_3_HST_LMS_GATED_BF_DEF (0x00000000)

///< clock gating for vga lms engine, default is no clock gating
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_3_VGA_LMS_GATED_BF_OFF (17)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_3_VGA_LMS_GATED_BF_WID ( 1)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_3_VGA_LMS_GATED_BF_MSK (0x00020000)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_3_VGA_LMS_GATED_BF_DEF (0x00000000)

///< clock gating for 6 ofc lms engine, default is no clock gating
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_3_ADCOFC_LMS_GATED_BF_OFF (18)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_3_ADCOFC_LMS_GATED_BF_WID ( 6)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_3_ADCOFC_LMS_GATED_BF_MSK (0x00FC0000)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_3_ADCOFC_LMS_GATED_BF_DEF (0x00000000)

///< clock gating for 6 adcofc lms engine, default is no clock gating
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_3_OFC_LMS_GATED_BF_OFF (24)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_3_OFC_LMS_GATED_BF_WID ( 6)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_3_OFC_LMS_GATED_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_3_OFC_LMS_GATED_BF_DEF (0x00000000)

///< clock gating for dfe lms engine, default is no clock gating
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_3_DFE_LMS_GATED_BF_OFF (30)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_3_DFE_LMS_GATED_BF_WID ( 1)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_3_DFE_LMS_GATED_BF_MSK (0x40000000)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_3_DFE_LMS_GATED_BF_DEF (0x00000000)

///< clock gating for Windowing dfe  engine, default is no clock gating
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_3_DFE_WNDING_GATED_BF_OFF (31)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_3_DFE_WNDING_GATED_BF_WID ( 1)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_3_DFE_WNDING_GATED_BF_MSK (0x80000000)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_3_DFE_WNDING_GATED_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_RXEQ_CLOCK_GATING_CTRL_4 register description at address offset 0x23c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/rxeq_clock_gating_ctrl_4
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_LMS_GATED : 8;
    ///< clock gating for ops 0 to 37 lms engine, default is no clock gating
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_rxeq_clk_gating_ctrl_4_reg_t;

#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_4_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_4_RD_MASK (0x000000ffU)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_4_WR_MASK (0x000000ffU)


///< clock gating for ops 0 to 37 lms engine, default is no clock gating
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_4_OPS_LMS_GATED_BF_OFF ( 0)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_4_OPS_LMS_GATED_BF_WID ( 8)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_4_OPS_LMS_GATED_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_4_OPS_LMS_GATED_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_RXEQ_CLOCK_GATING_CTRL_6 register description at address offset 0x240
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/rxeq_clock_gating_ctrl_6
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_GATED_0 : 32;
    ///< clock gating for cdr_ffe 0 to cdr_ffe 31 , default is no clock gating
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_rxeq_clk_gating_ctrl_6_reg_t;

#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_6_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_6_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_6_WR_MASK (0xffffffffU)


///< clock gating for cdr_ffe 0 to cdr_ffe 31 , default is no clock gating
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_6_CDR_FFE_GATED_0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_6_CDR_FFE_GATED_0_BF_WID (32)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_6_CDR_FFE_GATED_0_BF_MSK (0xFFFFFFFF)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_6_CDR_FFE_GATED_0_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_RXEQ_CLOCK_GATING_CTRL_7 register description at address offset 0x244
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/rxeq_clock_gating_ctrl_7
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_GATED_1 : 32;
    ///< clock gating for cdr_ffe 32 to cdr_ffe 63 , default is no clock gating
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_rxeq_clk_gating_ctrl_7_reg_t;

#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_7_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_7_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_7_WR_MASK (0xffffffffU)


///< clock gating for cdr_ffe 32 to cdr_ffe 63 , default is no clock gating
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_7_CDR_FFE_GATED_1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_7_CDR_FFE_GATED_1_BF_WID (32)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_7_CDR_FFE_GATED_1_BF_MSK (0xFFFFFFFF)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_7_CDR_FFE_GATED_1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_RXEQ_CLOCK_GATING_CTRL_8 register description at address offset 0x248
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/rxeq_clock_gating_ctrl_8
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_LMS_GATED : 7;
    ///< clock gating for cdr ffe tap lms
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t CDR_FFE_OFC_LMS_GATED : 6;
    ///< clock gating for cdr ffe ofc lms
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_VREF_LMS_GATED : 4;
    ///< clock gating for cdr ffe vref lms
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_rxeq_clk_gating_ctrl_8_reg_t;

#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_8_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_8_RD_MASK (0x0003ff7fU)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_8_WR_MASK (0x0003ff7fU)


///< clock gating for cdr ffe tap lms
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_8_CDR_FFE_LMS_GATED_BF_OFF ( 0)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_8_CDR_FFE_LMS_GATED_BF_WID ( 7)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_8_CDR_FFE_LMS_GATED_BF_MSK (0x0000007F)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_8_CDR_FFE_LMS_GATED_BF_DEF (0x00000000)

///< clock gating for cdr ffe ofc lms
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_8_CDR_FFE_OFC_LMS_GATED_BF_OFF ( 8)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_8_CDR_FFE_OFC_LMS_GATED_BF_WID ( 6)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_8_CDR_FFE_OFC_LMS_GATED_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_8_CDR_FFE_OFC_LMS_GATED_BF_DEF (0x00000000)

///< clock gating for cdr ffe vref lms
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_8_CDR_FFE_VREF_LMS_GATED_BF_OFF (14)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_8_CDR_FFE_VREF_LMS_GATED_BF_WID ( 4)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_8_CDR_FFE_VREF_LMS_GATED_BF_MSK (0x0003C000)
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_8_CDR_FFE_VREF_LMS_GATED_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADC_SLICER_LEVEL_SET0_CONTROL register description at address offset 0x28c
  *
  * Register default value:        0x002B0015
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adc_slicer_level_set0_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADC_SLICE_LEVEL_SET0_P1 : 6;
    ///< set0 of adc +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x15"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ADC_SLICE_LEVEL_SET0_0 : 6;
    ///< set0 of adc 0 slicer level
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t ADC_SLICE_LEVEL_SET0_M1 : 6;
    ///< set0 of adc -1 slicer level
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x2B"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_adc_slicer_lvl_set0_ctrl_reg_t;

#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET0_CTRL_DEFAULT (0x002b0015U)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET0_CTRL_RD_MASK (0x003f3f3fU)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET0_CTRL_WR_MASK (0x003f3f3fU)


///< set0 of adc +1 slicer level
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET0_CTRL_ADC_SLICE_LVL_SET0_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET0_CTRL_ADC_SLICE_LVL_SET0_P1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET0_CTRL_ADC_SLICE_LVL_SET0_P1_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET0_CTRL_ADC_SLICE_LVL_SET0_P1_BF_DEF (0x00000015)

///< set0 of adc 0 slicer level
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET0_CTRL_ADC_SLICE_LVL_SET0_0_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET0_CTRL_ADC_SLICE_LVL_SET0_0_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET0_CTRL_ADC_SLICE_LVL_SET0_0_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET0_CTRL_ADC_SLICE_LVL_SET0_0_BF_DEF (0x00000000)

///< set0 of adc -1 slicer level
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET0_CTRL_ADC_SLICE_LVL_SET0_M1_BF_OFF (16)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET0_CTRL_ADC_SLICE_LVL_SET0_M1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET0_CTRL_ADC_SLICE_LVL_SET0_M1_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET0_CTRL_ADC_SLICE_LVL_SET0_M1_BF_DEF (0x002B0000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADC_SLICER_LEVEL_SET1_CONTROL register description at address offset 0x290
  *
  * Register default value:        0x002B0015
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adc_slicer_level_set1_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADC_SLICE_LEVEL_SET1_P1 : 6;
    ///< set1 of adc +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x15"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ADC_SLICE_LEVEL_SET1_0 : 6;
    ///< set1 of adc 0 slicer level
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t ADC_SLICE_LEVEL_SET1_M1 : 6;
    ///< set1 of adc -1 slicer level
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x2B"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_adc_slicer_lvl_set1_ctrl_reg_t;

#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET1_CTRL_DEFAULT (0x002b0015U)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET1_CTRL_RD_MASK (0x003f3f3fU)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET1_CTRL_WR_MASK (0x003f3f3fU)


///< set1 of adc +1 slicer level
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET1_CTRL_ADC_SLICE_LVL_SET1_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET1_CTRL_ADC_SLICE_LVL_SET1_P1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET1_CTRL_ADC_SLICE_LVL_SET1_P1_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET1_CTRL_ADC_SLICE_LVL_SET1_P1_BF_DEF (0x00000015)

///< set1 of adc 0 slicer level
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET1_CTRL_ADC_SLICE_LVL_SET1_0_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET1_CTRL_ADC_SLICE_LVL_SET1_0_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET1_CTRL_ADC_SLICE_LVL_SET1_0_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET1_CTRL_ADC_SLICE_LVL_SET1_0_BF_DEF (0x00000000)

///< set1 of adc -1 slicer level
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET1_CTRL_ADC_SLICE_LVL_SET1_M1_BF_OFF (16)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET1_CTRL_ADC_SLICE_LVL_SET1_M1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET1_CTRL_ADC_SLICE_LVL_SET1_M1_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET1_CTRL_ADC_SLICE_LVL_SET1_M1_BF_DEF (0x002B0000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADC_SLICER_LEVEL_SET2_CONTROL register description at address offset 0x294
  *
  * Register default value:        0x002B0015
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adc_slicer_level_set2_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADC_SLICE_LEVEL_SET2_P1 : 6;
    ///< set2 of adc +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x15"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ADC_SLICE_LEVEL_SET2_0 : 6;
    ///< set2 of adc 0 slicer level
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t ADC_SLICE_LEVEL_SET2_M1 : 6;
    ///< set2 of adc -1 slicer level
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x2B"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_adc_slicer_lvl_set2_ctrl_reg_t;

#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET2_CTRL_DEFAULT (0x002b0015U)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET2_CTRL_RD_MASK (0x003f3f3fU)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET2_CTRL_WR_MASK (0x003f3f3fU)


///< set2 of adc +1 slicer level
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET2_CTRL_ADC_SLICE_LVL_SET2_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET2_CTRL_ADC_SLICE_LVL_SET2_P1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET2_CTRL_ADC_SLICE_LVL_SET2_P1_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET2_CTRL_ADC_SLICE_LVL_SET2_P1_BF_DEF (0x00000015)

///< set2 of adc 0 slicer level
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET2_CTRL_ADC_SLICE_LVL_SET2_0_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET2_CTRL_ADC_SLICE_LVL_SET2_0_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET2_CTRL_ADC_SLICE_LVL_SET2_0_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET2_CTRL_ADC_SLICE_LVL_SET2_0_BF_DEF (0x00000000)

///< set2 of adc -1 slicer level
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET2_CTRL_ADC_SLICE_LVL_SET2_M1_BF_OFF (16)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET2_CTRL_ADC_SLICE_LVL_SET2_M1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET2_CTRL_ADC_SLICE_LVL_SET2_M1_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET2_CTRL_ADC_SLICE_LVL_SET2_M1_BF_DEF (0x002B0000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADC_SLICER_LEVEL_SET3_CONTROL register description at address offset 0x298
  *
  * Register default value:        0x002B0015
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adc_slicer_level_set3_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADC_SLICE_LEVEL_SET3_P1 : 6;
    ///< set3 of adc +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x15"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ADC_SLICE_LEVEL_SET3_0 : 6;
    ///< set3 of adc 0 slicer level
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t ADC_SLICE_LEVEL_SET3_M1 : 6;
    ///< set3 of adc -1 slicer level
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x2B"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_adc_slicer_lvl_set3_ctrl_reg_t;

#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET3_CTRL_DEFAULT (0x002b0015U)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET3_CTRL_RD_MASK (0x003f3f3fU)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET3_CTRL_WR_MASK (0x003f3f3fU)


///< set3 of adc +1 slicer level
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET3_CTRL_ADC_SLICE_LVL_SET3_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET3_CTRL_ADC_SLICE_LVL_SET3_P1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET3_CTRL_ADC_SLICE_LVL_SET3_P1_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET3_CTRL_ADC_SLICE_LVL_SET3_P1_BF_DEF (0x00000015)

///< set3 of adc 0 slicer level
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET3_CTRL_ADC_SLICE_LVL_SET3_0_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET3_CTRL_ADC_SLICE_LVL_SET3_0_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET3_CTRL_ADC_SLICE_LVL_SET3_0_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET3_CTRL_ADC_SLICE_LVL_SET3_0_BF_DEF (0x00000000)

///< set3 of adc -1 slicer level
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET3_CTRL_ADC_SLICE_LVL_SET3_M1_BF_OFF (16)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET3_CTRL_ADC_SLICE_LVL_SET3_M1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET3_CTRL_ADC_SLICE_LVL_SET3_M1_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET3_CTRL_ADC_SLICE_LVL_SET3_M1_BF_DEF (0x002B0000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADC_SLICER_LEVEL_SET4_CONTROL register description at address offset 0x29c
  *
  * Register default value:        0x002B0015
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adc_slicer_level_set4_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADC_SLICE_LEVEL_SET4_P1 : 6;
    ///< set4 of adc +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x15"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ADC_SLICE_LEVEL_SET4_0 : 6;
    ///< set4 of adc 0 slicer level
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t ADC_SLICE_LEVEL_SET4_M1 : 6;
    ///< set4 of adc -1 slicer level
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x2B"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_adc_slicer_lvl_set4_ctrl_reg_t;

#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET4_CTRL_DEFAULT (0x002b0015U)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET4_CTRL_RD_MASK (0x003f3f3fU)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET4_CTRL_WR_MASK (0x003f3f3fU)


///< set4 of adc +1 slicer level
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET4_CTRL_ADC_SLICE_LVL_SET4_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET4_CTRL_ADC_SLICE_LVL_SET4_P1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET4_CTRL_ADC_SLICE_LVL_SET4_P1_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET4_CTRL_ADC_SLICE_LVL_SET4_P1_BF_DEF (0x00000015)

///< set4 of adc 0 slicer level
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET4_CTRL_ADC_SLICE_LVL_SET4_0_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET4_CTRL_ADC_SLICE_LVL_SET4_0_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET4_CTRL_ADC_SLICE_LVL_SET4_0_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET4_CTRL_ADC_SLICE_LVL_SET4_0_BF_DEF (0x00000000)

///< set4 of adc -1 slicer level
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET4_CTRL_ADC_SLICE_LVL_SET4_M1_BF_OFF (16)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET4_CTRL_ADC_SLICE_LVL_SET4_M1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET4_CTRL_ADC_SLICE_LVL_SET4_M1_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET4_CTRL_ADC_SLICE_LVL_SET4_M1_BF_DEF (0x002B0000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADC_SLICER_LEVEL_SET5_CONTROL register description at address offset 0x2a0
  *
  * Register default value:        0x002B0015
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adc_slicer_level_set5_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADC_SLICE_LEVEL_SET5_P1 : 6;
    ///< set5 of adc +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x15"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ADC_SLICE_LEVEL_SET5_0 : 6;
    ///< set5 of adc 0 slicer level
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t ADC_SLICE_LEVEL_SET5_M1 : 6;
    ///< set5 of adc -1 slicer level
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x2B"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_adc_slicer_lvl_set5_ctrl_reg_t;

#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET5_CTRL_DEFAULT (0x002b0015U)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET5_CTRL_RD_MASK (0x003f3f3fU)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET5_CTRL_WR_MASK (0x003f3f3fU)


///< set5 of adc +1 slicer level
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET5_CTRL_ADC_SLICE_LVL_SET5_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET5_CTRL_ADC_SLICE_LVL_SET5_P1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET5_CTRL_ADC_SLICE_LVL_SET5_P1_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET5_CTRL_ADC_SLICE_LVL_SET5_P1_BF_DEF (0x00000015)

///< set5 of adc 0 slicer level
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET5_CTRL_ADC_SLICE_LVL_SET5_0_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET5_CTRL_ADC_SLICE_LVL_SET5_0_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET5_CTRL_ADC_SLICE_LVL_SET5_0_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET5_CTRL_ADC_SLICE_LVL_SET5_0_BF_DEF (0x00000000)

///< set5 of adc -1 slicer level
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET5_CTRL_ADC_SLICE_LVL_SET5_M1_BF_OFF (16)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET5_CTRL_ADC_SLICE_LVL_SET5_M1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET5_CTRL_ADC_SLICE_LVL_SET5_M1_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET5_CTRL_ADC_SLICE_LVL_SET5_M1_BF_DEF (0x002B0000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADC_SLICER_LEVEL_SET6_CONTROL register description at address offset 0x2a4
  *
  * Register default value:        0x002B0015
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adc_slicer_level_set6_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADC_SLICE_LEVEL_SET6_P1 : 6;
    ///< set6 of adc +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x15"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ADC_SLICE_LEVEL_SET6_0 : 6;
    ///< set6 of adc 0 slicer level
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t ADC_SLICE_LEVEL_SET6_M1 : 6;
    ///< set6 of adc -1 slicer level
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x2B"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_adc_slicer_lvl_set6_ctrl_reg_t;

#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET6_CTRL_DEFAULT (0x002b0015U)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET6_CTRL_RD_MASK (0x003f3f3fU)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET6_CTRL_WR_MASK (0x003f3f3fU)


///< set6 of adc +1 slicer level
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET6_CTRL_ADC_SLICE_LVL_SET6_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET6_CTRL_ADC_SLICE_LVL_SET6_P1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET6_CTRL_ADC_SLICE_LVL_SET6_P1_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET6_CTRL_ADC_SLICE_LVL_SET6_P1_BF_DEF (0x00000015)

///< set6 of adc 0 slicer level
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET6_CTRL_ADC_SLICE_LVL_SET6_0_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET6_CTRL_ADC_SLICE_LVL_SET6_0_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET6_CTRL_ADC_SLICE_LVL_SET6_0_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET6_CTRL_ADC_SLICE_LVL_SET6_0_BF_DEF (0x00000000)

///< set6 of adc -1 slicer level
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET6_CTRL_ADC_SLICE_LVL_SET6_M1_BF_OFF (16)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET6_CTRL_ADC_SLICE_LVL_SET6_M1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET6_CTRL_ADC_SLICE_LVL_SET6_M1_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET6_CTRL_ADC_SLICE_LVL_SET6_M1_BF_DEF (0x002B0000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADC_SLICER_LEVEL_SET7_CONTROL register description at address offset 0x2a8
  *
  * Register default value:        0x002B0015
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adc_slicer_level_set7_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADC_SLICE_LEVEL_SET7_P1 : 6;
    ///< set7 of adc +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x15"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ADC_SLICE_LEVEL_SET7_0 : 6;
    ///< set7 of adc 0 slicer level
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t ADC_SLICE_LEVEL_SET7_M1 : 6;
    ///< set7 of adc -1 slicer level
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x2B"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_adc_slicer_lvl_set7_ctrl_reg_t;

#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET7_CTRL_DEFAULT (0x002b0015U)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET7_CTRL_RD_MASK (0x003f3f3fU)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET7_CTRL_WR_MASK (0x003f3f3fU)


///< set7 of adc +1 slicer level
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET7_CTRL_ADC_SLICE_LVL_SET7_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET7_CTRL_ADC_SLICE_LVL_SET7_P1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET7_CTRL_ADC_SLICE_LVL_SET7_P1_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET7_CTRL_ADC_SLICE_LVL_SET7_P1_BF_DEF (0x00000015)

///< set7 of adc 0 slicer level
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET7_CTRL_ADC_SLICE_LVL_SET7_0_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET7_CTRL_ADC_SLICE_LVL_SET7_0_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET7_CTRL_ADC_SLICE_LVL_SET7_0_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET7_CTRL_ADC_SLICE_LVL_SET7_0_BF_DEF (0x00000000)

///< set7 of adc -1 slicer level
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET7_CTRL_ADC_SLICE_LVL_SET7_M1_BF_OFF (16)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET7_CTRL_ADC_SLICE_LVL_SET7_M1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET7_CTRL_ADC_SLICE_LVL_SET7_M1_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET7_CTRL_ADC_SLICE_LVL_SET7_M1_BF_DEF (0x002B0000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADC_SLICER_LEVEL_SET8_CONTROL register description at address offset 0x2ac
  *
  * Register default value:        0x002B0015
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adc_slicer_level_set8_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADC_SLICE_LEVEL_SET8_P1 : 6;
    ///< set8 of adc +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x15"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ADC_SLICE_LEVEL_SET8_0 : 6;
    ///< set8 of adc 0 slicer level
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t ADC_SLICE_LEVEL_SET8_M1 : 6;
    ///< set8 of adc -1 slicer level
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x2B"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_adc_slicer_lvl_set8_ctrl_reg_t;

#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET8_CTRL_DEFAULT (0x002b0015U)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET8_CTRL_RD_MASK (0x003f3f3fU)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET8_CTRL_WR_MASK (0x003f3f3fU)


///< set8 of adc +1 slicer level
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET8_CTRL_ADC_SLICE_LVL_SET8_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET8_CTRL_ADC_SLICE_LVL_SET8_P1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET8_CTRL_ADC_SLICE_LVL_SET8_P1_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET8_CTRL_ADC_SLICE_LVL_SET8_P1_BF_DEF (0x00000015)

///< set8 of adc 0 slicer level
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET8_CTRL_ADC_SLICE_LVL_SET8_0_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET8_CTRL_ADC_SLICE_LVL_SET8_0_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET8_CTRL_ADC_SLICE_LVL_SET8_0_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET8_CTRL_ADC_SLICE_LVL_SET8_0_BF_DEF (0x00000000)

///< set8 of adc -1 slicer level
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET8_CTRL_ADC_SLICE_LVL_SET8_M1_BF_OFF (16)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET8_CTRL_ADC_SLICE_LVL_SET8_M1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET8_CTRL_ADC_SLICE_LVL_SET8_M1_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET8_CTRL_ADC_SLICE_LVL_SET8_M1_BF_DEF (0x002B0000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADC_SLICER_LEVEL_SET9_CONTROL register description at address offset 0x2b0
  *
  * Register default value:        0x002B0015
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adc_slicer_level_set9_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADC_SLICE_LEVEL_SET9_P1 : 6;
    ///< set9 of adc +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x15"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ADC_SLICE_LEVEL_SET9_0 : 6;
    ///< set9 of adc 0 slicer level
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t ADC_SLICE_LEVEL_SET9_M1 : 6;
    ///< set9 of adc -1 slicer level
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x2B"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_adc_slicer_lvl_set9_ctrl_reg_t;

#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET9_CTRL_DEFAULT (0x002b0015U)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET9_CTRL_RD_MASK (0x003f3f3fU)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET9_CTRL_WR_MASK (0x003f3f3fU)


///< set9 of adc +1 slicer level
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET9_CTRL_ADC_SLICE_LVL_SET9_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET9_CTRL_ADC_SLICE_LVL_SET9_P1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET9_CTRL_ADC_SLICE_LVL_SET9_P1_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET9_CTRL_ADC_SLICE_LVL_SET9_P1_BF_DEF (0x00000015)

///< set9 of adc 0 slicer level
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET9_CTRL_ADC_SLICE_LVL_SET9_0_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET9_CTRL_ADC_SLICE_LVL_SET9_0_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET9_CTRL_ADC_SLICE_LVL_SET9_0_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET9_CTRL_ADC_SLICE_LVL_SET9_0_BF_DEF (0x00000000)

///< set9 of adc -1 slicer level
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET9_CTRL_ADC_SLICE_LVL_SET9_M1_BF_OFF (16)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET9_CTRL_ADC_SLICE_LVL_SET9_M1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET9_CTRL_ADC_SLICE_LVL_SET9_M1_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET9_CTRL_ADC_SLICE_LVL_SET9_M1_BF_DEF (0x002B0000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADC_SLICER_LEVEL_SET10_CONTROL register description at address offset 0x2b4
  *
  * Register default value:        0x002B0015
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adc_slicer_level_set10_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADC_SLICE_LEVEL_SET10_P1 : 6;
    ///< set10 of adc +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x15"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ADC_SLICE_LEVEL_SET10_0 : 6;
    ///< set10 of adc 0 slicer level
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t ADC_SLICE_LEVEL_SET10_M1 : 6;
    ///< set10 of adc -1 slicer level
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x2B"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_adc_slicer_lvl_set10_ctrl_reg_t;

#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET10_CTRL_DEFAULT (0x002b0015U)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET10_CTRL_RD_MASK (0x003f3f3fU)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET10_CTRL_WR_MASK (0x003f3f3fU)


///< set10 of adc +1 slicer level
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET10_CTRL_ADC_SLICE_LVL_SET10_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET10_CTRL_ADC_SLICE_LVL_SET10_P1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET10_CTRL_ADC_SLICE_LVL_SET10_P1_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET10_CTRL_ADC_SLICE_LVL_SET10_P1_BF_DEF (0x00000015)

///< set10 of adc 0 slicer level
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET10_CTRL_ADC_SLICE_LVL_SET10_0_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET10_CTRL_ADC_SLICE_LVL_SET10_0_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET10_CTRL_ADC_SLICE_LVL_SET10_0_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET10_CTRL_ADC_SLICE_LVL_SET10_0_BF_DEF (0x00000000)

///< set10 of adc -1 slicer level
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET10_CTRL_ADC_SLICE_LVL_SET10_M1_BF_OFF (16)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET10_CTRL_ADC_SLICE_LVL_SET10_M1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET10_CTRL_ADC_SLICE_LVL_SET10_M1_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET10_CTRL_ADC_SLICE_LVL_SET10_M1_BF_DEF (0x002B0000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADC_SLICER_LEVEL_SET11_CONTROL register description at address offset 0x2b8
  *
  * Register default value:        0x002B0015
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adc_slicer_level_set11_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADC_SLICE_LEVEL_SET11_P1 : 6;
    ///< set11 of adc +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x15"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ADC_SLICE_LEVEL_SET11_0 : 6;
    ///< set11 of adc 0 slicer level
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t ADC_SLICE_LEVEL_SET11_M1 : 6;
    ///< set11 of adc -1 slicer level
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x2B"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_adc_slicer_lvl_set11_ctrl_reg_t;

#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET11_CTRL_DEFAULT (0x002b0015U)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET11_CTRL_RD_MASK (0x003f3f3fU)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET11_CTRL_WR_MASK (0x003f3f3fU)


///< set11 of adc +1 slicer level
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET11_CTRL_ADC_SLICE_LVL_SET11_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET11_CTRL_ADC_SLICE_LVL_SET11_P1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET11_CTRL_ADC_SLICE_LVL_SET11_P1_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET11_CTRL_ADC_SLICE_LVL_SET11_P1_BF_DEF (0x00000015)

///< set11 of adc 0 slicer level
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET11_CTRL_ADC_SLICE_LVL_SET11_0_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET11_CTRL_ADC_SLICE_LVL_SET11_0_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET11_CTRL_ADC_SLICE_LVL_SET11_0_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET11_CTRL_ADC_SLICE_LVL_SET11_0_BF_DEF (0x00000000)

///< set11 of adc -1 slicer level
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET11_CTRL_ADC_SLICE_LVL_SET11_M1_BF_OFF (16)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET11_CTRL_ADC_SLICE_LVL_SET11_M1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET11_CTRL_ADC_SLICE_LVL_SET11_M1_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET11_CTRL_ADC_SLICE_LVL_SET11_M1_BF_DEF (0x002B0000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADC_SLICER_LEVEL_SET12_CONTROL register description at address offset 0x2bc
  *
  * Register default value:        0x002B0015
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adc_slicer_level_set12_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADC_SLICE_LEVEL_SET12_P1 : 6;
    ///< set12 of adc +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x15"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ADC_SLICE_LEVEL_SET12_0 : 6;
    ///< set12 of adc 0 slicer level
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t ADC_SLICE_LEVEL_SET12_M1 : 6;
    ///< set12 of adc -1 slicer level
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x2B"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_adc_slicer_lvl_set12_ctrl_reg_t;

#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET12_CTRL_DEFAULT (0x002b0015U)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET12_CTRL_RD_MASK (0x003f3f3fU)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET12_CTRL_WR_MASK (0x003f3f3fU)


///< set12 of adc +1 slicer level
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET12_CTRL_ADC_SLICE_LVL_SET12_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET12_CTRL_ADC_SLICE_LVL_SET12_P1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET12_CTRL_ADC_SLICE_LVL_SET12_P1_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET12_CTRL_ADC_SLICE_LVL_SET12_P1_BF_DEF (0x00000015)

///< set12 of adc 0 slicer level
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET12_CTRL_ADC_SLICE_LVL_SET12_0_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET12_CTRL_ADC_SLICE_LVL_SET12_0_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET12_CTRL_ADC_SLICE_LVL_SET12_0_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET12_CTRL_ADC_SLICE_LVL_SET12_0_BF_DEF (0x00000000)

///< set12 of adc -1 slicer level
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET12_CTRL_ADC_SLICE_LVL_SET12_M1_BF_OFF (16)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET12_CTRL_ADC_SLICE_LVL_SET12_M1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET12_CTRL_ADC_SLICE_LVL_SET12_M1_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET12_CTRL_ADC_SLICE_LVL_SET12_M1_BF_DEF (0x002B0000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADC_SLICER_LEVEL_SET13_CONTROL register description at address offset 0x2c0
  *
  * Register default value:        0x002B0015
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adc_slicer_level_set13_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADC_SLICE_LEVEL_SET13_P1 : 6;
    ///< set13 of adc +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x15"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ADC_SLICE_LEVEL_SET13_0 : 6;
    ///< set13 of adc 0 slicer level
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t ADC_SLICE_LEVEL_SET13_M1 : 6;
    ///< set13 of adc -1 slicer level
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x2B"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_adc_slicer_lvl_set13_ctrl_reg_t;

#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET13_CTRL_DEFAULT (0x002b0015U)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET13_CTRL_RD_MASK (0x003f3f3fU)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET13_CTRL_WR_MASK (0x003f3f3fU)


///< set13 of adc +1 slicer level
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET13_CTRL_ADC_SLICE_LVL_SET13_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET13_CTRL_ADC_SLICE_LVL_SET13_P1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET13_CTRL_ADC_SLICE_LVL_SET13_P1_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET13_CTRL_ADC_SLICE_LVL_SET13_P1_BF_DEF (0x00000015)

///< set13 of adc 0 slicer level
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET13_CTRL_ADC_SLICE_LVL_SET13_0_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET13_CTRL_ADC_SLICE_LVL_SET13_0_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET13_CTRL_ADC_SLICE_LVL_SET13_0_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET13_CTRL_ADC_SLICE_LVL_SET13_0_BF_DEF (0x00000000)

///< set13 of adc -1 slicer level
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET13_CTRL_ADC_SLICE_LVL_SET13_M1_BF_OFF (16)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET13_CTRL_ADC_SLICE_LVL_SET13_M1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET13_CTRL_ADC_SLICE_LVL_SET13_M1_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET13_CTRL_ADC_SLICE_LVL_SET13_M1_BF_DEF (0x002B0000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADC_SLICER_LEVEL_SET14_CONTROL register description at address offset 0x2c4
  *
  * Register default value:        0x002B0015
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adc_slicer_level_set14_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADC_SLICE_LEVEL_SET14_P1 : 6;
    ///< set14 of adc +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x15"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ADC_SLICE_LEVEL_SET14_0 : 6;
    ///< set14 of adc 0 slicer level
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t ADC_SLICE_LEVEL_SET14_M1 : 6;
    ///< set14 of adc -1 slicer level
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x2B"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_adc_slicer_lvl_set14_ctrl_reg_t;

#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET14_CTRL_DEFAULT (0x002b0015U)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET14_CTRL_RD_MASK (0x003f3f3fU)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET14_CTRL_WR_MASK (0x003f3f3fU)


///< set14 of adc +1 slicer level
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET14_CTRL_ADC_SLICE_LVL_SET14_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET14_CTRL_ADC_SLICE_LVL_SET14_P1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET14_CTRL_ADC_SLICE_LVL_SET14_P1_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET14_CTRL_ADC_SLICE_LVL_SET14_P1_BF_DEF (0x00000015)

///< set14 of adc 0 slicer level
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET14_CTRL_ADC_SLICE_LVL_SET14_0_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET14_CTRL_ADC_SLICE_LVL_SET14_0_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET14_CTRL_ADC_SLICE_LVL_SET14_0_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET14_CTRL_ADC_SLICE_LVL_SET14_0_BF_DEF (0x00000000)

///< set14 of adc -1 slicer level
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET14_CTRL_ADC_SLICE_LVL_SET14_M1_BF_OFF (16)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET14_CTRL_ADC_SLICE_LVL_SET14_M1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET14_CTRL_ADC_SLICE_LVL_SET14_M1_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET14_CTRL_ADC_SLICE_LVL_SET14_M1_BF_DEF (0x002B0000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADC_SLICER_LEVEL_SET15_CONTROL register description at address offset 0x2c8
  *
  * Register default value:        0x002B0015
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adc_slicer_level_set15_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADC_SLICE_LEVEL_SET15_P1 : 6;
    ///< set15 of adc +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x15"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ADC_SLICE_LEVEL_SET15_0 : 6;
    ///< set15 of adc 0 slicer level
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t ADC_SLICE_LEVEL_SET15_M1 : 6;
    ///< set15 of adc -1 slicer level
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x2B"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_adc_slicer_lvl_set15_ctrl_reg_t;

#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET15_CTRL_DEFAULT (0x002b0015U)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET15_CTRL_RD_MASK (0x003f3f3fU)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET15_CTRL_WR_MASK (0x003f3f3fU)


///< set15 of adc +1 slicer level
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET15_CTRL_ADC_SLICE_LVL_SET15_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET15_CTRL_ADC_SLICE_LVL_SET15_P1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET15_CTRL_ADC_SLICE_LVL_SET15_P1_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET15_CTRL_ADC_SLICE_LVL_SET15_P1_BF_DEF (0x00000015)

///< set15 of adc 0 slicer level
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET15_CTRL_ADC_SLICE_LVL_SET15_0_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET15_CTRL_ADC_SLICE_LVL_SET15_0_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET15_CTRL_ADC_SLICE_LVL_SET15_0_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET15_CTRL_ADC_SLICE_LVL_SET15_0_BF_DEF (0x00000000)

///< set15 of adc -1 slicer level
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET15_CTRL_ADC_SLICE_LVL_SET15_M1_BF_OFF (16)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET15_CTRL_ADC_SLICE_LVL_SET15_M1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET15_CTRL_ADC_SLICE_LVL_SET15_M1_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET15_CTRL_ADC_SLICE_LVL_SET15_M1_BF_DEF (0x002B0000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADC_ERR_LEVEL_SET0_CONTROL register description at address offset 0x2cc
  *
  * Register default value:        0x20350B1F
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adc_err_level_set0_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADC_ERR_LEVEL_SET0_P3 : 6;
    ///< set0 of adc +3 slicer err level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x1F"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ADC_ERR_LEVEL_SET0_P1 : 6;
    ///< set0 of adc +1 slicer err level
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0xB"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t ADC_ERR_LEVEL_SET0_M1 : 6;
    ///< set0 of adc -1 slicer err level
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x35"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t ADC_ERR_LEVEL_SET0_M3 : 6;
    ///< set0 of adc -3 slicer err level
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x20"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_adc_err_lvl_set0_ctrl_reg_t;

#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET0_CTRL_DEFAULT (0x20350b1fU)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET0_CTRL_RD_MASK (0x3f3f3f3fU)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET0_CTRL_WR_MASK (0x3f3f3f3fU)


///< set0 of adc +3 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET0_CTRL_ADC_ERR_LVL_SET0_P3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET0_CTRL_ADC_ERR_LVL_SET0_P3_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET0_CTRL_ADC_ERR_LVL_SET0_P3_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET0_CTRL_ADC_ERR_LVL_SET0_P3_BF_DEF (0x0000001F)

///< set0 of adc +1 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET0_CTRL_ADC_ERR_LVL_SET0_P1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET0_CTRL_ADC_ERR_LVL_SET0_P1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET0_CTRL_ADC_ERR_LVL_SET0_P1_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET0_CTRL_ADC_ERR_LVL_SET0_P1_BF_DEF (0x00000B00)

///< set0 of adc -1 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET0_CTRL_ADC_ERR_LVL_SET0_M1_BF_OFF (16)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET0_CTRL_ADC_ERR_LVL_SET0_M1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET0_CTRL_ADC_ERR_LVL_SET0_M1_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET0_CTRL_ADC_ERR_LVL_SET0_M1_BF_DEF (0x00350000)

///< set0 of adc -3 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET0_CTRL_ADC_ERR_LVL_SET0_M3_BF_OFF (24)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET0_CTRL_ADC_ERR_LVL_SET0_M3_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET0_CTRL_ADC_ERR_LVL_SET0_M3_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET0_CTRL_ADC_ERR_LVL_SET0_M3_BF_DEF (0x20000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADC_ERR_LEVEL_SET1_CONTROL register description at address offset 0x2d0
  *
  * Register default value:        0x20350B1F
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adc_err_level_set1_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADC_ERR_LEVEL_SET1_P3 : 6;
    ///< set1 of adc +3 slicer err level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x1F"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ADC_ERR_LEVEL_SET1_P1 : 6;
    ///< set1 of adc +1 slicer err level
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0xB"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t ADC_ERR_LEVEL_SET1_M1 : 6;
    ///< set1 of adc -1 slicer err level
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x35"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t ADC_ERR_LEVEL_SET1_M3 : 6;
    ///< set1 of adc -3 slicer err level
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x20"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_adc_err_lvl_set1_ctrl_reg_t;

#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET1_CTRL_DEFAULT (0x20350b1fU)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET1_CTRL_RD_MASK (0x3f3f3f3fU)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET1_CTRL_WR_MASK (0x3f3f3f3fU)


///< set1 of adc +3 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET1_CTRL_ADC_ERR_LVL_SET1_P3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET1_CTRL_ADC_ERR_LVL_SET1_P3_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET1_CTRL_ADC_ERR_LVL_SET1_P3_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET1_CTRL_ADC_ERR_LVL_SET1_P3_BF_DEF (0x0000001F)

///< set1 of adc +1 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET1_CTRL_ADC_ERR_LVL_SET1_P1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET1_CTRL_ADC_ERR_LVL_SET1_P1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET1_CTRL_ADC_ERR_LVL_SET1_P1_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET1_CTRL_ADC_ERR_LVL_SET1_P1_BF_DEF (0x00000B00)

///< set1 of adc -1 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET1_CTRL_ADC_ERR_LVL_SET1_M1_BF_OFF (16)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET1_CTRL_ADC_ERR_LVL_SET1_M1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET1_CTRL_ADC_ERR_LVL_SET1_M1_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET1_CTRL_ADC_ERR_LVL_SET1_M1_BF_DEF (0x00350000)

///< set1 of adc -3 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET1_CTRL_ADC_ERR_LVL_SET1_M3_BF_OFF (24)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET1_CTRL_ADC_ERR_LVL_SET1_M3_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET1_CTRL_ADC_ERR_LVL_SET1_M3_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET1_CTRL_ADC_ERR_LVL_SET1_M3_BF_DEF (0x20000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADC_ERR_LEVEL_SET2_CONTROL register description at address offset 0x2d4
  *
  * Register default value:        0x20350B1F
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adc_err_level_set2_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADC_ERR_LEVEL_SET2_P3 : 6;
    ///< set2 of adc +3 slicer err level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x1F"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ADC_ERR_LEVEL_SET2_P1 : 6;
    ///< set2 of adc +1 slicer err level
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0xB"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t ADC_ERR_LEVEL_SET2_M1 : 6;
    ///< set2 of adc -1 slicer err level
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x35"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t ADC_ERR_LEVEL_SET2_M3 : 6;
    ///< set2 of adc -3 slicer err level
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x20"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_adc_err_lvl_set2_ctrl_reg_t;

#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET2_CTRL_DEFAULT (0x20350b1fU)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET2_CTRL_RD_MASK (0x3f3f3f3fU)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET2_CTRL_WR_MASK (0x3f3f3f3fU)


///< set2 of adc +3 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET2_CTRL_ADC_ERR_LVL_SET2_P3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET2_CTRL_ADC_ERR_LVL_SET2_P3_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET2_CTRL_ADC_ERR_LVL_SET2_P3_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET2_CTRL_ADC_ERR_LVL_SET2_P3_BF_DEF (0x0000001F)

///< set2 of adc +1 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET2_CTRL_ADC_ERR_LVL_SET2_P1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET2_CTRL_ADC_ERR_LVL_SET2_P1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET2_CTRL_ADC_ERR_LVL_SET2_P1_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET2_CTRL_ADC_ERR_LVL_SET2_P1_BF_DEF (0x00000B00)

///< set2 of adc -1 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET2_CTRL_ADC_ERR_LVL_SET2_M1_BF_OFF (16)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET2_CTRL_ADC_ERR_LVL_SET2_M1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET2_CTRL_ADC_ERR_LVL_SET2_M1_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET2_CTRL_ADC_ERR_LVL_SET2_M1_BF_DEF (0x00350000)

///< set2 of adc -3 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET2_CTRL_ADC_ERR_LVL_SET2_M3_BF_OFF (24)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET2_CTRL_ADC_ERR_LVL_SET2_M3_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET2_CTRL_ADC_ERR_LVL_SET2_M3_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET2_CTRL_ADC_ERR_LVL_SET2_M3_BF_DEF (0x20000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADC_ERR_LEVEL_SET3_CONTROL register description at address offset 0x2d8
  *
  * Register default value:        0x20350B1F
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adc_err_level_set3_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADC_ERR_LEVEL_SET3_P3 : 6;
    ///< set3 of adc +3 slicer err level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x1F"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ADC_ERR_LEVEL_SET3_P1 : 6;
    ///< set3 of adc +1 slicer err level
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0xB"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t ADC_ERR_LEVEL_SET3_M1 : 6;
    ///< set3 of adc -1 slicer err level
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x35"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t ADC_ERR_LEVEL_SET3_M3 : 6;
    ///< set3 of adc -3 slicer err level
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x20"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_adc_err_lvl_set3_ctrl_reg_t;

#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET3_CTRL_DEFAULT (0x20350b1fU)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET3_CTRL_RD_MASK (0x3f3f3f3fU)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET3_CTRL_WR_MASK (0x3f3f3f3fU)


///< set3 of adc +3 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET3_CTRL_ADC_ERR_LVL_SET3_P3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET3_CTRL_ADC_ERR_LVL_SET3_P3_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET3_CTRL_ADC_ERR_LVL_SET3_P3_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET3_CTRL_ADC_ERR_LVL_SET3_P3_BF_DEF (0x0000001F)

///< set3 of adc +1 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET3_CTRL_ADC_ERR_LVL_SET3_P1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET3_CTRL_ADC_ERR_LVL_SET3_P1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET3_CTRL_ADC_ERR_LVL_SET3_P1_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET3_CTRL_ADC_ERR_LVL_SET3_P1_BF_DEF (0x00000B00)

///< set3 of adc -1 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET3_CTRL_ADC_ERR_LVL_SET3_M1_BF_OFF (16)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET3_CTRL_ADC_ERR_LVL_SET3_M1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET3_CTRL_ADC_ERR_LVL_SET3_M1_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET3_CTRL_ADC_ERR_LVL_SET3_M1_BF_DEF (0x00350000)

///< set3 of adc -3 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET3_CTRL_ADC_ERR_LVL_SET3_M3_BF_OFF (24)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET3_CTRL_ADC_ERR_LVL_SET3_M3_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET3_CTRL_ADC_ERR_LVL_SET3_M3_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET3_CTRL_ADC_ERR_LVL_SET3_M3_BF_DEF (0x20000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADC_ERR_LEVEL_SET4_CONTROL register description at address offset 0x2dc
  *
  * Register default value:        0x20350B1F
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adc_err_level_set4_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADC_ERR_LEVEL_SET4_P3 : 6;
    ///< set4 of adc +3 slicer err level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x1F"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ADC_ERR_LEVEL_SET4_P1 : 6;
    ///< set4 of adc +1 slicer err level
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0xB"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t ADC_ERR_LEVEL_SET4_M1 : 6;
    ///< set4 of adc -1 slicer err level
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x35"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t ADC_ERR_LEVEL_SET4_M3 : 6;
    ///< set4 of adc -3 slicer err level
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x20"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_adc_err_lvl_set4_ctrl_reg_t;

#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET4_CTRL_DEFAULT (0x20350b1fU)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET4_CTRL_RD_MASK (0x3f3f3f3fU)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET4_CTRL_WR_MASK (0x3f3f3f3fU)


///< set4 of adc +3 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET4_CTRL_ADC_ERR_LVL_SET4_P3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET4_CTRL_ADC_ERR_LVL_SET4_P3_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET4_CTRL_ADC_ERR_LVL_SET4_P3_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET4_CTRL_ADC_ERR_LVL_SET4_P3_BF_DEF (0x0000001F)

///< set4 of adc +1 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET4_CTRL_ADC_ERR_LVL_SET4_P1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET4_CTRL_ADC_ERR_LVL_SET4_P1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET4_CTRL_ADC_ERR_LVL_SET4_P1_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET4_CTRL_ADC_ERR_LVL_SET4_P1_BF_DEF (0x00000B00)

///< set4 of adc -1 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET4_CTRL_ADC_ERR_LVL_SET4_M1_BF_OFF (16)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET4_CTRL_ADC_ERR_LVL_SET4_M1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET4_CTRL_ADC_ERR_LVL_SET4_M1_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET4_CTRL_ADC_ERR_LVL_SET4_M1_BF_DEF (0x00350000)

///< set4 of adc -3 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET4_CTRL_ADC_ERR_LVL_SET4_M3_BF_OFF (24)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET4_CTRL_ADC_ERR_LVL_SET4_M3_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET4_CTRL_ADC_ERR_LVL_SET4_M3_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET4_CTRL_ADC_ERR_LVL_SET4_M3_BF_DEF (0x20000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADC_ERR_LEVEL_SET5_CONTROL register description at address offset 0x2e0
  *
  * Register default value:        0x20350B1F
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adc_err_level_set5_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADC_ERR_LEVEL_SET5_P3 : 6;
    ///< set5 of adc +3 slicer err level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x1F"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ADC_ERR_LEVEL_SET5_P1 : 6;
    ///< set5 of adc +1 slicer err level
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0xB"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t ADC_ERR_LEVEL_SET5_M1 : 6;
    ///< set5 of adc -1 slicer err level
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x35"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t ADC_ERR_LEVEL_SET5_M3 : 6;
    ///< set5 of adc -3 slicer err level
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x20"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_adc_err_lvl_set5_ctrl_reg_t;

#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET5_CTRL_DEFAULT (0x20350b1fU)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET5_CTRL_RD_MASK (0x3f3f3f3fU)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET5_CTRL_WR_MASK (0x3f3f3f3fU)


///< set5 of adc +3 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET5_CTRL_ADC_ERR_LVL_SET5_P3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET5_CTRL_ADC_ERR_LVL_SET5_P3_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET5_CTRL_ADC_ERR_LVL_SET5_P3_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET5_CTRL_ADC_ERR_LVL_SET5_P3_BF_DEF (0x0000001F)

///< set5 of adc +1 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET5_CTRL_ADC_ERR_LVL_SET5_P1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET5_CTRL_ADC_ERR_LVL_SET5_P1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET5_CTRL_ADC_ERR_LVL_SET5_P1_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET5_CTRL_ADC_ERR_LVL_SET5_P1_BF_DEF (0x00000B00)

///< set5 of adc -1 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET5_CTRL_ADC_ERR_LVL_SET5_M1_BF_OFF (16)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET5_CTRL_ADC_ERR_LVL_SET5_M1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET5_CTRL_ADC_ERR_LVL_SET5_M1_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET5_CTRL_ADC_ERR_LVL_SET5_M1_BF_DEF (0x00350000)

///< set5 of adc -3 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET5_CTRL_ADC_ERR_LVL_SET5_M3_BF_OFF (24)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET5_CTRL_ADC_ERR_LVL_SET5_M3_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET5_CTRL_ADC_ERR_LVL_SET5_M3_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET5_CTRL_ADC_ERR_LVL_SET5_M3_BF_DEF (0x20000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADC_ERR_LEVEL_SET6_CONTROL register description at address offset 0x2e4
  *
  * Register default value:        0x20350B1F
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adc_err_level_set6_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADC_ERR_LEVEL_SET6_P3 : 6;
    ///< set6 of adc +3 slicer err level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x1F"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ADC_ERR_LEVEL_SET6_P1 : 6;
    ///< set6 of adc +1 slicer err level
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0xB"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t ADC_ERR_LEVEL_SET6_M1 : 6;
    ///< set6 of adc -1 slicer err level
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x35"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t ADC_ERR_LEVEL_SET6_M3 : 6;
    ///< set6 of adc -3 slicer err level
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x20"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_adc_err_lvl_set6_ctrl_reg_t;

#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET6_CTRL_DEFAULT (0x20350b1fU)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET6_CTRL_RD_MASK (0x3f3f3f3fU)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET6_CTRL_WR_MASK (0x3f3f3f3fU)


///< set6 of adc +3 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET6_CTRL_ADC_ERR_LVL_SET6_P3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET6_CTRL_ADC_ERR_LVL_SET6_P3_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET6_CTRL_ADC_ERR_LVL_SET6_P3_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET6_CTRL_ADC_ERR_LVL_SET6_P3_BF_DEF (0x0000001F)

///< set6 of adc +1 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET6_CTRL_ADC_ERR_LVL_SET6_P1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET6_CTRL_ADC_ERR_LVL_SET6_P1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET6_CTRL_ADC_ERR_LVL_SET6_P1_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET6_CTRL_ADC_ERR_LVL_SET6_P1_BF_DEF (0x00000B00)

///< set6 of adc -1 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET6_CTRL_ADC_ERR_LVL_SET6_M1_BF_OFF (16)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET6_CTRL_ADC_ERR_LVL_SET6_M1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET6_CTRL_ADC_ERR_LVL_SET6_M1_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET6_CTRL_ADC_ERR_LVL_SET6_M1_BF_DEF (0x00350000)

///< set6 of adc -3 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET6_CTRL_ADC_ERR_LVL_SET6_M3_BF_OFF (24)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET6_CTRL_ADC_ERR_LVL_SET6_M3_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET6_CTRL_ADC_ERR_LVL_SET6_M3_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET6_CTRL_ADC_ERR_LVL_SET6_M3_BF_DEF (0x20000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADC_ERR_LEVEL_SET7_CONTROL register description at address offset 0x2e8
  *
  * Register default value:        0x20350B1F
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adc_err_level_set7_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADC_ERR_LEVEL_SET7_P3 : 6;
    ///< set7 of adc +3 slicer err level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x1F"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ADC_ERR_LEVEL_SET7_P1 : 6;
    ///< set7 of adc +1 slicer err level
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0xB"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t ADC_ERR_LEVEL_SET7_M1 : 6;
    ///< set7 of adc -1 slicer err level
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x35"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t ADC_ERR_LEVEL_SET7_M3 : 6;
    ///< set7 of adc -3 slicer err level
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x20"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_adc_err_lvl_set7_ctrl_reg_t;

#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET7_CTRL_DEFAULT (0x20350b1fU)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET7_CTRL_RD_MASK (0x3f3f3f3fU)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET7_CTRL_WR_MASK (0x3f3f3f3fU)


///< set7 of adc +3 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET7_CTRL_ADC_ERR_LVL_SET7_P3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET7_CTRL_ADC_ERR_LVL_SET7_P3_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET7_CTRL_ADC_ERR_LVL_SET7_P3_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET7_CTRL_ADC_ERR_LVL_SET7_P3_BF_DEF (0x0000001F)

///< set7 of adc +1 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET7_CTRL_ADC_ERR_LVL_SET7_P1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET7_CTRL_ADC_ERR_LVL_SET7_P1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET7_CTRL_ADC_ERR_LVL_SET7_P1_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET7_CTRL_ADC_ERR_LVL_SET7_P1_BF_DEF (0x00000B00)

///< set7 of adc -1 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET7_CTRL_ADC_ERR_LVL_SET7_M1_BF_OFF (16)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET7_CTRL_ADC_ERR_LVL_SET7_M1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET7_CTRL_ADC_ERR_LVL_SET7_M1_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET7_CTRL_ADC_ERR_LVL_SET7_M1_BF_DEF (0x00350000)

///< set7 of adc -3 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET7_CTRL_ADC_ERR_LVL_SET7_M3_BF_OFF (24)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET7_CTRL_ADC_ERR_LVL_SET7_M3_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET7_CTRL_ADC_ERR_LVL_SET7_M3_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET7_CTRL_ADC_ERR_LVL_SET7_M3_BF_DEF (0x20000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADC_ERR_LEVEL_SET8_CONTROL register description at address offset 0x2ec
  *
  * Register default value:        0x20350B1F
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adc_err_level_set8_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADC_ERR_LEVEL_SET8_P3 : 6;
    ///< set8 of adc +3 slicer err level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x1F"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ADC_ERR_LEVEL_SET8_P1 : 6;
    ///< set8 of adc +1 slicer err level
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0xB"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t ADC_ERR_LEVEL_SET8_M1 : 6;
    ///< set8 of adc -1 slicer err level
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x35"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t ADC_ERR_LEVEL_SET8_M3 : 6;
    ///< set8 of adc -3 slicer err level
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x20"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_adc_err_lvl_set8_ctrl_reg_t;

#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET8_CTRL_DEFAULT (0x20350b1fU)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET8_CTRL_RD_MASK (0x3f3f3f3fU)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET8_CTRL_WR_MASK (0x3f3f3f3fU)


///< set8 of adc +3 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET8_CTRL_ADC_ERR_LVL_SET8_P3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET8_CTRL_ADC_ERR_LVL_SET8_P3_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET8_CTRL_ADC_ERR_LVL_SET8_P3_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET8_CTRL_ADC_ERR_LVL_SET8_P3_BF_DEF (0x0000001F)

///< set8 of adc +1 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET8_CTRL_ADC_ERR_LVL_SET8_P1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET8_CTRL_ADC_ERR_LVL_SET8_P1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET8_CTRL_ADC_ERR_LVL_SET8_P1_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET8_CTRL_ADC_ERR_LVL_SET8_P1_BF_DEF (0x00000B00)

///< set8 of adc -1 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET8_CTRL_ADC_ERR_LVL_SET8_M1_BF_OFF (16)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET8_CTRL_ADC_ERR_LVL_SET8_M1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET8_CTRL_ADC_ERR_LVL_SET8_M1_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET8_CTRL_ADC_ERR_LVL_SET8_M1_BF_DEF (0x00350000)

///< set8 of adc -3 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET8_CTRL_ADC_ERR_LVL_SET8_M3_BF_OFF (24)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET8_CTRL_ADC_ERR_LVL_SET8_M3_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET8_CTRL_ADC_ERR_LVL_SET8_M3_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET8_CTRL_ADC_ERR_LVL_SET8_M3_BF_DEF (0x20000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADC_ERR_LEVEL_SET9_CONTROL register description at address offset 0x2f0
  *
  * Register default value:        0x20350B1F
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adc_err_level_set9_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADC_ERR_LEVEL_SET9_P3 : 6;
    ///< set9 of adc +3 slicer err level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x1F"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ADC_ERR_LEVEL_SET9_P1 : 6;
    ///< set9 of adc +1 slicer err level
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0xB"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t ADC_ERR_LEVEL_SET9_M1 : 6;
    ///< set9 of adc -1 slicer err level
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x35"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t ADC_ERR_LEVEL_SET9_M3 : 6;
    ///< set9 of adc -3 slicer err level
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x20"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_adc_err_lvl_set9_ctrl_reg_t;

#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET9_CTRL_DEFAULT (0x20350b1fU)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET9_CTRL_RD_MASK (0x3f3f3f3fU)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET9_CTRL_WR_MASK (0x3f3f3f3fU)


///< set9 of adc +3 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET9_CTRL_ADC_ERR_LVL_SET9_P3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET9_CTRL_ADC_ERR_LVL_SET9_P3_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET9_CTRL_ADC_ERR_LVL_SET9_P3_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET9_CTRL_ADC_ERR_LVL_SET9_P3_BF_DEF (0x0000001F)

///< set9 of adc +1 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET9_CTRL_ADC_ERR_LVL_SET9_P1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET9_CTRL_ADC_ERR_LVL_SET9_P1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET9_CTRL_ADC_ERR_LVL_SET9_P1_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET9_CTRL_ADC_ERR_LVL_SET9_P1_BF_DEF (0x00000B00)

///< set9 of adc -1 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET9_CTRL_ADC_ERR_LVL_SET9_M1_BF_OFF (16)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET9_CTRL_ADC_ERR_LVL_SET9_M1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET9_CTRL_ADC_ERR_LVL_SET9_M1_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET9_CTRL_ADC_ERR_LVL_SET9_M1_BF_DEF (0x00350000)

///< set9 of adc -3 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET9_CTRL_ADC_ERR_LVL_SET9_M3_BF_OFF (24)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET9_CTRL_ADC_ERR_LVL_SET9_M3_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET9_CTRL_ADC_ERR_LVL_SET9_M3_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET9_CTRL_ADC_ERR_LVL_SET9_M3_BF_DEF (0x20000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADC_ERR_LEVEL_SET10_CONTROL register description at address offset 0x2f4
  *
  * Register default value:        0x20350B1F
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adc_err_level_set10_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADC_ERR_LEVEL_SET10_P3 : 6;
    ///< set10 of adc +3 slicer err level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x1F"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ADC_ERR_LEVEL_SET10_P1 : 6;
    ///< set10 of adc +1 slicer err level
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0xB"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t ADC_ERR_LEVEL_SET10_M1 : 6;
    ///< set10 of adc -1 slicer err level
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x35"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t ADC_ERR_LEVEL_SET10_M3 : 6;
    ///< set10 of adc -3 slicer err level
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x20"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_adc_err_lvl_set10_ctrl_reg_t;

#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET10_CTRL_DEFAULT (0x20350b1fU)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET10_CTRL_RD_MASK (0x3f3f3f3fU)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET10_CTRL_WR_MASK (0x3f3f3f3fU)


///< set10 of adc +3 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET10_CTRL_ADC_ERR_LVL_SET10_P3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET10_CTRL_ADC_ERR_LVL_SET10_P3_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET10_CTRL_ADC_ERR_LVL_SET10_P3_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET10_CTRL_ADC_ERR_LVL_SET10_P3_BF_DEF (0x0000001F)

///< set10 of adc +1 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET10_CTRL_ADC_ERR_LVL_SET10_P1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET10_CTRL_ADC_ERR_LVL_SET10_P1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET10_CTRL_ADC_ERR_LVL_SET10_P1_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET10_CTRL_ADC_ERR_LVL_SET10_P1_BF_DEF (0x00000B00)

///< set10 of adc -1 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET10_CTRL_ADC_ERR_LVL_SET10_M1_BF_OFF (16)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET10_CTRL_ADC_ERR_LVL_SET10_M1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET10_CTRL_ADC_ERR_LVL_SET10_M1_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET10_CTRL_ADC_ERR_LVL_SET10_M1_BF_DEF (0x00350000)

///< set10 of adc -3 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET10_CTRL_ADC_ERR_LVL_SET10_M3_BF_OFF (24)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET10_CTRL_ADC_ERR_LVL_SET10_M3_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET10_CTRL_ADC_ERR_LVL_SET10_M3_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET10_CTRL_ADC_ERR_LVL_SET10_M3_BF_DEF (0x20000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADC_ERR_LEVEL_SET11_CONTROL register description at address offset 0x2f8
  *
  * Register default value:        0x20350B1F
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adc_err_level_set11_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADC_ERR_LEVEL_SET11_P3 : 6;
    ///< set11 of adc +3 slicer err level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x1F"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ADC_ERR_LEVEL_SET11_P1 : 6;
    ///< set11 of adc +1 slicer err level
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0xB"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t ADC_ERR_LEVEL_SET11_M1 : 6;
    ///< set11 of adc -1 slicer err level
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x35"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t ADC_ERR_LEVEL_SET11_M3 : 6;
    ///< set11 of adc -3 slicer err level
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x20"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_adc_err_lvl_set11_ctrl_reg_t;

#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET11_CTRL_DEFAULT (0x20350b1fU)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET11_CTRL_RD_MASK (0x3f3f3f3fU)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET11_CTRL_WR_MASK (0x3f3f3f3fU)


///< set11 of adc +3 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET11_CTRL_ADC_ERR_LVL_SET11_P3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET11_CTRL_ADC_ERR_LVL_SET11_P3_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET11_CTRL_ADC_ERR_LVL_SET11_P3_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET11_CTRL_ADC_ERR_LVL_SET11_P3_BF_DEF (0x0000001F)

///< set11 of adc +1 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET11_CTRL_ADC_ERR_LVL_SET11_P1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET11_CTRL_ADC_ERR_LVL_SET11_P1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET11_CTRL_ADC_ERR_LVL_SET11_P1_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET11_CTRL_ADC_ERR_LVL_SET11_P1_BF_DEF (0x00000B00)

///< set11 of adc -1 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET11_CTRL_ADC_ERR_LVL_SET11_M1_BF_OFF (16)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET11_CTRL_ADC_ERR_LVL_SET11_M1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET11_CTRL_ADC_ERR_LVL_SET11_M1_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET11_CTRL_ADC_ERR_LVL_SET11_M1_BF_DEF (0x00350000)

///< set11 of adc -3 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET11_CTRL_ADC_ERR_LVL_SET11_M3_BF_OFF (24)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET11_CTRL_ADC_ERR_LVL_SET11_M3_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET11_CTRL_ADC_ERR_LVL_SET11_M3_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET11_CTRL_ADC_ERR_LVL_SET11_M3_BF_DEF (0x20000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADC_ERR_LEVEL_SET12_CONTROL register description at address offset 0x2fc
  *
  * Register default value:        0x20350B1F
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adc_err_level_set12_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADC_ERR_LEVEL_SET12_P3 : 6;
    ///< set12 of adc +3 slicer err level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x1F"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ADC_ERR_LEVEL_SET12_P1 : 6;
    ///< set12 of adc +1 slicer err level
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0xB"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t ADC_ERR_LEVEL_SET12_M1 : 6;
    ///< set12 of adc -1 slicer err level
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x35"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t ADC_ERR_LEVEL_SET12_M3 : 6;
    ///< set12 of adc -3 slicer err level
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x20"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_adc_err_lvl_set12_ctrl_reg_t;

#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET12_CTRL_DEFAULT (0x20350b1fU)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET12_CTRL_RD_MASK (0x3f3f3f3fU)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET12_CTRL_WR_MASK (0x3f3f3f3fU)


///< set12 of adc +3 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET12_CTRL_ADC_ERR_LVL_SET12_P3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET12_CTRL_ADC_ERR_LVL_SET12_P3_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET12_CTRL_ADC_ERR_LVL_SET12_P3_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET12_CTRL_ADC_ERR_LVL_SET12_P3_BF_DEF (0x0000001F)

///< set12 of adc +1 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET12_CTRL_ADC_ERR_LVL_SET12_P1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET12_CTRL_ADC_ERR_LVL_SET12_P1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET12_CTRL_ADC_ERR_LVL_SET12_P1_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET12_CTRL_ADC_ERR_LVL_SET12_P1_BF_DEF (0x00000B00)

///< set12 of adc -1 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET12_CTRL_ADC_ERR_LVL_SET12_M1_BF_OFF (16)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET12_CTRL_ADC_ERR_LVL_SET12_M1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET12_CTRL_ADC_ERR_LVL_SET12_M1_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET12_CTRL_ADC_ERR_LVL_SET12_M1_BF_DEF (0x00350000)

///< set12 of adc -3 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET12_CTRL_ADC_ERR_LVL_SET12_M3_BF_OFF (24)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET12_CTRL_ADC_ERR_LVL_SET12_M3_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET12_CTRL_ADC_ERR_LVL_SET12_M3_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET12_CTRL_ADC_ERR_LVL_SET12_M3_BF_DEF (0x20000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADC_ERR_LEVEL_SET13_CONTROL register description at address offset 0x300
  *
  * Register default value:        0x20350B1F
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adc_err_level_set13_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADC_ERR_LEVEL_SET13_P3 : 6;
    ///< set13 of adc +3 slicer err level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x1F"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ADC_ERR_LEVEL_SET13_P1 : 6;
    ///< set13 of adc +1 slicer err level
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0xB"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t ADC_ERR_LEVEL_SET13_M1 : 6;
    ///< set13 of adc -1 slicer err level
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x35"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t ADC_ERR_LEVEL_SET13_M3 : 6;
    ///< set13 of adc -3 slicer err level
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x20"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_adc_err_lvl_set13_ctrl_reg_t;

#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET13_CTRL_DEFAULT (0x20350b1fU)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET13_CTRL_RD_MASK (0x3f3f3f3fU)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET13_CTRL_WR_MASK (0x3f3f3f3fU)


///< set13 of adc +3 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET13_CTRL_ADC_ERR_LVL_SET13_P3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET13_CTRL_ADC_ERR_LVL_SET13_P3_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET13_CTRL_ADC_ERR_LVL_SET13_P3_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET13_CTRL_ADC_ERR_LVL_SET13_P3_BF_DEF (0x0000001F)

///< set13 of adc +1 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET13_CTRL_ADC_ERR_LVL_SET13_P1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET13_CTRL_ADC_ERR_LVL_SET13_P1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET13_CTRL_ADC_ERR_LVL_SET13_P1_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET13_CTRL_ADC_ERR_LVL_SET13_P1_BF_DEF (0x00000B00)

///< set13 of adc -1 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET13_CTRL_ADC_ERR_LVL_SET13_M1_BF_OFF (16)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET13_CTRL_ADC_ERR_LVL_SET13_M1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET13_CTRL_ADC_ERR_LVL_SET13_M1_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET13_CTRL_ADC_ERR_LVL_SET13_M1_BF_DEF (0x00350000)

///< set13 of adc -3 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET13_CTRL_ADC_ERR_LVL_SET13_M3_BF_OFF (24)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET13_CTRL_ADC_ERR_LVL_SET13_M3_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET13_CTRL_ADC_ERR_LVL_SET13_M3_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET13_CTRL_ADC_ERR_LVL_SET13_M3_BF_DEF (0x20000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADC_ERR_LEVEL_SET14_CONTROL register description at address offset 0x304
  *
  * Register default value:        0x20350B1F
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adc_err_level_set14_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADC_ERR_LEVEL_SET14_P3 : 6;
    ///< set14 of adc +3 slicer err level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x1F"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ADC_ERR_LEVEL_SET14_P1 : 6;
    ///< set14 of adc +1 slicer err level
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0xB"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t ADC_ERR_LEVEL_SET14_M1 : 6;
    ///< set14 of adc -1 slicer err level
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x35"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t ADC_ERR_LEVEL_SET14_M3 : 6;
    ///< set14 of adc -3 slicer err level
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x20"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_adc_err_lvl_set14_ctrl_reg_t;

#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET14_CTRL_DEFAULT (0x20350b1fU)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET14_CTRL_RD_MASK (0x3f3f3f3fU)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET14_CTRL_WR_MASK (0x3f3f3f3fU)


///< set14 of adc +3 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET14_CTRL_ADC_ERR_LVL_SET14_P3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET14_CTRL_ADC_ERR_LVL_SET14_P3_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET14_CTRL_ADC_ERR_LVL_SET14_P3_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET14_CTRL_ADC_ERR_LVL_SET14_P3_BF_DEF (0x0000001F)

///< set14 of adc +1 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET14_CTRL_ADC_ERR_LVL_SET14_P1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET14_CTRL_ADC_ERR_LVL_SET14_P1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET14_CTRL_ADC_ERR_LVL_SET14_P1_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET14_CTRL_ADC_ERR_LVL_SET14_P1_BF_DEF (0x00000B00)

///< set14 of adc -1 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET14_CTRL_ADC_ERR_LVL_SET14_M1_BF_OFF (16)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET14_CTRL_ADC_ERR_LVL_SET14_M1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET14_CTRL_ADC_ERR_LVL_SET14_M1_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET14_CTRL_ADC_ERR_LVL_SET14_M1_BF_DEF (0x00350000)

///< set14 of adc -3 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET14_CTRL_ADC_ERR_LVL_SET14_M3_BF_OFF (24)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET14_CTRL_ADC_ERR_LVL_SET14_M3_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET14_CTRL_ADC_ERR_LVL_SET14_M3_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET14_CTRL_ADC_ERR_LVL_SET14_M3_BF_DEF (0x20000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADC_ERR_LEVEL_SET15_CONTROL register description at address offset 0x308
  *
  * Register default value:        0x20350B1F
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adc_err_level_set15_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADC_ERR_LEVEL_SET15_P3 : 6;
    ///< set15 of adc +3 slicer err level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x1F"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ADC_ERR_LEVEL_SET15_P1 : 6;
    ///< set15 of adc +1 slicer err level
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0xB"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t ADC_ERR_LEVEL_SET15_M1 : 6;
    ///< set15 of adc -1 slicer err level
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x35"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t ADC_ERR_LEVEL_SET15_M3 : 6;
    ///< set15 of adc -3 slicer err level
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x20"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_adc_err_lvl_set15_ctrl_reg_t;

#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET15_CTRL_DEFAULT (0x20350b1fU)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET15_CTRL_RD_MASK (0x3f3f3f3fU)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET15_CTRL_WR_MASK (0x3f3f3f3fU)


///< set15 of adc +3 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET15_CTRL_ADC_ERR_LVL_SET15_P3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET15_CTRL_ADC_ERR_LVL_SET15_P3_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET15_CTRL_ADC_ERR_LVL_SET15_P3_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET15_CTRL_ADC_ERR_LVL_SET15_P3_BF_DEF (0x0000001F)

///< set15 of adc +1 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET15_CTRL_ADC_ERR_LVL_SET15_P1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET15_CTRL_ADC_ERR_LVL_SET15_P1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET15_CTRL_ADC_ERR_LVL_SET15_P1_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET15_CTRL_ADC_ERR_LVL_SET15_P1_BF_DEF (0x00000B00)

///< set15 of adc -1 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET15_CTRL_ADC_ERR_LVL_SET15_M1_BF_OFF (16)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET15_CTRL_ADC_ERR_LVL_SET15_M1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET15_CTRL_ADC_ERR_LVL_SET15_M1_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET15_CTRL_ADC_ERR_LVL_SET15_M1_BF_DEF (0x00350000)

///< set15 of adc -3 slicer err level
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET15_CTRL_ADC_ERR_LVL_SET15_M3_BF_OFF (24)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET15_CTRL_ADC_ERR_LVL_SET15_M3_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET15_CTRL_ADC_ERR_LVL_SET15_M3_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET15_CTRL_ADC_ERR_LVL_SET15_M3_BF_DEF (0x20000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_RXSARARRAY_VALID_CALASSIST_CTRL0 register description at address offset 0x30c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/rxsararray_valid_calassist_ctrl0
  * Rx SAR Array Valid Calibration Assistance Control
  */

typedef union {
  struct {
    uint32_t RXSARARRAYVALIDCALASSIST_CALMEAS_TIMER_POW2 : 4;
    ///< Rx SAR Array Valid hardware calibration assistance measuring timer
    ///< in power of 2
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXSARARRAYVALIDCALASSIST_CALMEAS_REQ : 1;
    ///< Rx SAR Array Valid hardware calibration assistance measuring request
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_rxsararray_valid_calassist_ctrl0_reg_t;

#define PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_CTRL0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_CTRL0_RD_MASK (0x0000001fU)
#define PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_CTRL0_WR_MASK (0x0000001fU)


///< Rx SAR Array Valid hardware calibration assistance measuring timer
///< in power of 2
#define PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_CTRL0_RXSARARRAYVALIDCALASSIST_CALMEAS_TIMER_POW2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_CTRL0_RXSARARRAYVALIDCALASSIST_CALMEAS_TIMER_POW2_BF_WID ( 4)
#define PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_CTRL0_RXSARARRAYVALIDCALASSIST_CALMEAS_TIMER_POW2_BF_MSK (0x0000000F)
#define PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_CTRL0_RXSARARRAYVALIDCALASSIST_CALMEAS_TIMER_POW2_BF_DEF (0x00000000)

///< Rx SAR Array Valid hardware calibration assistance measuring request
#define PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_CTRL0_RXSARARRAYVALIDCALASSIST_CALMEAS_REQ_BF_OFF ( 4)
#define PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_CTRL0_RXSARARRAYVALIDCALASSIST_CALMEAS_REQ_BF_WID ( 1)
#define PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_CTRL0_RXSARARRAYVALIDCALASSIST_CALMEAS_REQ_BF_MSK (0x00000010)
#define PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_CTRL0_RXSARARRAYVALIDCALASSIST_CALMEAS_REQ_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_RXSARARRAY_VALID_CALASSIST_CTRL1 register description at address offset 0x310
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/rxsararray_valid_calassist_ctrl1
  * Rx SAR Array Valid Calibration Assistance Control
  */

typedef union {
  struct {
    uint32_t RXSARARRAYVALIDCALASSIST_CALMEAS_DAT_MASK_31TO0 : 32;
    ///< Rx SAR Array Valid hardware calibration data bit mask.  Setting to
    ///< 1 causes bit[x] not to be evaluated
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_rxsararray_valid_calassist_ctrl1_reg_t;

#define PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_CTRL1_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_CTRL1_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_CTRL1_WR_MASK (0xffffffffU)


///< Rx SAR Array Valid hardware calibration data bit mask.  Setting to
///< 1 causes bit[x] not to be evaluated
#define PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_CTRL1_RXSARARRAYVALIDCALASSIST_CALMEAS_DAT_MASK_31TO0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_CTRL1_RXSARARRAYVALIDCALASSIST_CALMEAS_DAT_MASK_31TO0_BF_WID (32)
#define PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_CTRL1_RXSARARRAYVALIDCALASSIST_CALMEAS_DAT_MASK_31TO0_BF_MSK (0xFFFFFFFF)
#define PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_CTRL1_RXSARARRAYVALIDCALASSIST_CALMEAS_DAT_MASK_31TO0_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_RXSARARRAY_VALID_CALASSIST_CTRL2 register description at address offset 0x314
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/rxsararray_valid_calassist_ctrl2
  * Rx SAR Array Valid Calibration Assistance Control
  */

typedef union {
  struct {
    uint32_t RXSARARRAYVALIDCALASSIST_CALMEAS_DAT_MASK_63TO32 : 32;
    ///< Rx SAR Array Valid hardware calibration data bit mask.  Setting to
    ///< 1 causes bit[x] not to be evaluated
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_rxsararray_valid_calassist_ctrl2_reg_t;

#define PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_CTRL2_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_CTRL2_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_CTRL2_WR_MASK (0xffffffffU)


///< Rx SAR Array Valid hardware calibration data bit mask.  Setting to
///< 1 causes bit[x] not to be evaluated
#define PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_CTRL2_RXSARARRAYVALIDCALASSIST_CALMEAS_DAT_MASK_63TO32_BF_OFF ( 0)
#define PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_CTRL2_RXSARARRAYVALIDCALASSIST_CALMEAS_DAT_MASK_63TO32_BF_WID (32)
#define PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_CTRL2_RXSARARRAYVALIDCALASSIST_CALMEAS_DAT_MASK_63TO32_BF_MSK (0xFFFFFFFF)
#define PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_CTRL2_RXSARARRAYVALIDCALASSIST_CALMEAS_DAT_MASK_63TO32_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_RXSARARRAY_VALID_CALASSIST_STATUS register description at address offset 0x318
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/rxsararray_valid_calassist_status
  * Rx SAR Array Valid Calibration Assistance Status
  */

typedef union {
  struct {
    uint32_t RXSARARRAYVALIDCALASSIST_CALMEAS_ACC : 24;
    ///< Rx SAR Array Valid hardware calibration assistance measuring accumulator
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RXSARARRAYVALIDCALASSIST_CALMEAS_ACK : 1;
    ///< Rx SAR Array Valid hardware calibration assistance measuring ack
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 7;
    ///< Reserved
    ///< AccessType="RO" BitOffset="25" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_rxsararray_valid_calassist_stat_reg_t;

#define PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_STAT_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_STAT_RD_MASK (0x01ffffffU)
#define PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_STAT_WR_MASK (0x00000000U)


///< Rx SAR Array Valid hardware calibration assistance measuring accumulator
#define PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_STAT_RXSARARRAYVALIDCALASSIST_CALMEAS_ACC_BF_OFF ( 0)
#define PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_STAT_RXSARARRAYVALIDCALASSIST_CALMEAS_ACC_BF_WID (24)
#define PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_STAT_RXSARARRAYVALIDCALASSIST_CALMEAS_ACC_BF_MSK (0x00FFFFFF)
#define PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_STAT_RXSARARRAYVALIDCALASSIST_CALMEAS_ACC_BF_DEF (0x00000000)

///< Rx SAR Array Valid hardware calibration assistance measuring ack
#define PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_STAT_RXSARARRAYVALIDCALASSIST_CALMEAS_ACK_BF_OFF (24)
#define PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_STAT_RXSARARRAYVALIDCALASSIST_CALMEAS_ACK_BF_WID ( 1)
#define PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_STAT_RXSARARRAYVALIDCALASSIST_CALMEAS_ACK_BF_MSK (0x01000000)
#define PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_STAT_RXSARARRAYVALIDCALASSIST_CALMEAS_ACK_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_RXSAR_CALASSIST_CTRL register description at address offset 0x31c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/rxsar_calassist_ctrl
  * Rx SAR  Calibration Assistance Control
  */

typedef union {
  struct {
    uint32_t RXSARCALASSIST_RXDAT_SLICER_QUAD_SEL : 2;
    ///< Rx SAR hardware calibration assitance - Quad selection - selecting
    ///< between Q0 <> Q3
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXSARCALASSIST_RXDAT_SLICER_QUARTET_SEL : 2;
    ///< Rx SAR hardware calibration assitance - Quartet selection - selecting
    ///< between Qut0 <> Qut3 within a quad
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t RXSARCALASSIST_RXDAT_SLICER_SAR_SEL : 2;
    ///< Rx SAR hardware calibration assitance - SAR selection - selection
    ///< beween SAR0<>SAR1 withink the same quad and quartet
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RXSARCALASSIST_RXDAT_SLICER_BIT_SEL : 3;
    ///< Rx SAR hardware calibration assitance - Bit selection - selection
    ///< beween SAR0<>SAR1 withink the same quad, quartet, and same SAR
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t RXSARCALASSIST_CALMEAS_DLYCOUNT : 9;
    ///< Rx SAR hardware calibration assitance - measuring delay counter
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t RXSARCALASSIST_CALMEAS_POW2COUNT : 3;
    ///< Rx SAR hardware calibration assitance - measuring period in a power
    ///< of 2
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t RXSARCALASSIST_CALMEAS_VALID_COUNT : 4;
    ///< Rx SAR hardware calibration assitance - measuring valid counter
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t RXSARCALASSIST_CALMEAS_CLR_COUNT : 4;
    ///< Rx SAR hardware calibration assitance - measuring clear
    ///< AccessType="RW" BitOffset="25" ResetValue="0x0"
    uint32_t RXSARCALASSIST_CALMEAS_REQ : 1;
    ///< Rx SAR hardware calibration assitance - measuring request
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_rxsar_calassist_ctrl_reg_t;

#define PMA_RXWORD_MSG_RXSAR_CALASSIST_CTRL_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_CTRL_RD_MASK (0x3fffffffU)
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_CTRL_WR_MASK (0x3fffffffU)


///< Rx SAR hardware calibration assitance - Quad selection - selecting
///< between Q0 <> Q3
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_CTRL_RXSARCALASSIST_RXDAT_SLICER_QUAD_SEL_BF_OFF ( 0)
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_CTRL_RXSARCALASSIST_RXDAT_SLICER_QUAD_SEL_BF_WID ( 2)
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_CTRL_RXSARCALASSIST_RXDAT_SLICER_QUAD_SEL_BF_MSK (0x00000003)
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_CTRL_RXSARCALASSIST_RXDAT_SLICER_QUAD_SEL_BF_DEF (0x00000000)

///< Rx SAR hardware calibration assitance - Quartet selection - selecting
///< between Qut0 <> Qut3 within a quad
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_CTRL_RXSARCALASSIST_RXDAT_SLICER_QUARTET_SEL_BF_OFF ( 2)
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_CTRL_RXSARCALASSIST_RXDAT_SLICER_QUARTET_SEL_BF_WID ( 2)
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_CTRL_RXSARCALASSIST_RXDAT_SLICER_QUARTET_SEL_BF_MSK (0x0000000C)
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_CTRL_RXSARCALASSIST_RXDAT_SLICER_QUARTET_SEL_BF_DEF (0x00000000)

///< Rx SAR hardware calibration assitance - SAR selection - selection
///< beween SAR0<>SAR1 withink the same quad and quartet
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_CTRL_RXSARCALASSIST_RXDAT_SLICER_SAR_SEL_BF_OFF ( 4)
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_CTRL_RXSARCALASSIST_RXDAT_SLICER_SAR_SEL_BF_WID ( 2)
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_CTRL_RXSARCALASSIST_RXDAT_SLICER_SAR_SEL_BF_MSK (0x00000030)
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_CTRL_RXSARCALASSIST_RXDAT_SLICER_SAR_SEL_BF_DEF (0x00000000)

///< Rx SAR hardware calibration assitance - Bit selection - selection
///< beween SAR0<>SAR1 withink the same quad, quartet, and same SAR
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_CTRL_RXSARCALASSIST_RXDAT_SLICER_BIT_SEL_BF_OFF ( 6)
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_CTRL_RXSARCALASSIST_RXDAT_SLICER_BIT_SEL_BF_WID ( 3)
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_CTRL_RXSARCALASSIST_RXDAT_SLICER_BIT_SEL_BF_MSK (0x000001C0)
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_CTRL_RXSARCALASSIST_RXDAT_SLICER_BIT_SEL_BF_DEF (0x00000000)

///< Rx SAR hardware calibration assitance - measuring delay counter
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_CTRL_RXSARCALASSIST_CALMEAS_DLYCNT_BF_OFF ( 9)
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_CTRL_RXSARCALASSIST_CALMEAS_DLYCNT_BF_WID ( 9)
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_CTRL_RXSARCALASSIST_CALMEAS_DLYCNT_BF_MSK (0x0003FE00)
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_CTRL_RXSARCALASSIST_CALMEAS_DLYCNT_BF_DEF (0x00000000)

///< Rx SAR hardware calibration assitance - measuring period in a power
///< of 2
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_CTRL_RXSARCALASSIST_CALMEAS_POW2CNT_BF_OFF (18)
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_CTRL_RXSARCALASSIST_CALMEAS_POW2CNT_BF_WID ( 3)
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_CTRL_RXSARCALASSIST_CALMEAS_POW2CNT_BF_MSK (0x001C0000)
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_CTRL_RXSARCALASSIST_CALMEAS_POW2CNT_BF_DEF (0x00000000)

///< Rx SAR hardware calibration assitance - measuring valid counter
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_CTRL_RXSARCALASSIST_CALMEAS_VALID_CNT_BF_OFF (21)
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_CTRL_RXSARCALASSIST_CALMEAS_VALID_CNT_BF_WID ( 4)
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_CTRL_RXSARCALASSIST_CALMEAS_VALID_CNT_BF_MSK (0x01E00000)
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_CTRL_RXSARCALASSIST_CALMEAS_VALID_CNT_BF_DEF (0x00000000)

///< Rx SAR hardware calibration assitance - measuring clear
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_CTRL_RXSARCALASSIST_CALMEAS_CLR_CNT_BF_OFF (25)
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_CTRL_RXSARCALASSIST_CALMEAS_CLR_CNT_BF_WID ( 4)
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_CTRL_RXSARCALASSIST_CALMEAS_CLR_CNT_BF_MSK (0x1E000000)
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_CTRL_RXSARCALASSIST_CALMEAS_CLR_CNT_BF_DEF (0x00000000)

///< Rx SAR hardware calibration assitance - measuring request
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_CTRL_RXSARCALASSIST_CALMEAS_REQ_BF_OFF (29)
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_CTRL_RXSARCALASSIST_CALMEAS_REQ_BF_WID ( 1)
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_CTRL_RXSARCALASSIST_CALMEAS_REQ_BF_MSK (0x20000000)
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_CTRL_RXSARCALASSIST_CALMEAS_REQ_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_RXSAR_CALASSIST_STATUS register description at address offset 0x320
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/rxsar_calassist_status
  * Rx SAR  Calibration Assistance Status
  */

typedef union {
  struct {
    uint32_t RXSARCALASSIST_CALMEASAVG : 1;
    ///< Rx SAR hardware calibration assitance - measuring accumulation value
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RXSARCALASSIST_CALMEAS_ACK : 1;
    ///< Rx SAR hardware calibration assitance - measuring ack
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_rxsar_calassist_stat_reg_t;

#define PMA_RXWORD_MSG_RXSAR_CALASSIST_STAT_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_STAT_RD_MASK (0x00000003U)
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_STAT_WR_MASK (0x00000000U)


///< Rx SAR hardware calibration assitance - measuring accumulation value
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_STAT_RXSARCALASSIST_CALMEASAVG_BF_OFF ( 0)
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_STAT_RXSARCALASSIST_CALMEASAVG_BF_WID ( 1)
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_STAT_RXSARCALASSIST_CALMEASAVG_BF_MSK (0x00000001)
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_STAT_RXSARCALASSIST_CALMEASAVG_BF_DEF (0x00000000)

///< Rx SAR hardware calibration assitance - measuring ack
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_STAT_RXSARCALASSIST_CALMEAS_ACK_BF_OFF ( 1)
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_STAT_RXSARCALASSIST_CALMEAS_ACK_BF_WID ( 1)
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_STAT_RXSARCALASSIST_CALMEAS_ACK_BF_MSK (0x00000002)
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_STAT_RXSARCALASSIST_CALMEAS_ACK_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_MAIN_FSM_CONTROL_6 register description at address offset 0x3ec
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/main_fsm_control_6
  * placeholder
  */

typedef union {
  struct {
    uint32_t RXEQ_ADAPTATION_DONE : 1;
    ///< FW set it to 1 after finish rxeq_adaptation
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RXEQ_EYEMEAS_DONE : 1;
    ///< FW set it to 1 after finish rxeq_eyemeas
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
    uint32_t RXEQ_FORCE_FOM : 11;
    ///< FW force fom value for debug purpose
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RXEQ_FORCE_FOM_EN : 1;
    ///< Enable FW force fom value for debug purpose
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RXEQ_EYEMEAS_FORCE_ERR : 1;
    ///< Force eyemeas err bit
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_main_fsm_ctrl_6_reg_t;

#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_6_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_6_RD_MASK (0x0001fff3U)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_6_WR_MASK (0x0001fff3U)


///< FW set it to 1 after finish rxeq_adaptation
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_6_RXEQ_ADAPTATION_DONE_BF_OFF ( 0)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_6_RXEQ_ADAPTATION_DONE_BF_WID ( 1)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_6_RXEQ_ADAPTATION_DONE_BF_MSK (0x00000001)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_6_RXEQ_ADAPTATION_DONE_BF_DEF (0x00000000)

///< FW set it to 1 after finish rxeq_eyemeas
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_6_RXEQ_EYEMEAS_DONE_BF_OFF ( 1)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_6_RXEQ_EYEMEAS_DONE_BF_WID ( 1)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_6_RXEQ_EYEMEAS_DONE_BF_MSK (0x00000002)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_6_RXEQ_EYEMEAS_DONE_BF_DEF (0x00000000)

///< FW force fom value for debug purpose
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_6_RXEQ_FORCE_FOM_BF_OFF ( 4)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_6_RXEQ_FORCE_FOM_BF_WID (11)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_6_RXEQ_FORCE_FOM_BF_MSK (0x00007FF0)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_6_RXEQ_FORCE_FOM_BF_DEF (0x00000000)

///< Enable FW force fom value for debug purpose
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_6_RXEQ_FORCE_FOM_EN_BF_OFF (15)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_6_RXEQ_FORCE_FOM_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_6_RXEQ_FORCE_FOM_EN_BF_MSK (0x00008000)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_6_RXEQ_FORCE_FOM_EN_BF_DEF (0x00000000)

///< Force eyemeas err bit
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_6_RXEQ_EYEMEAS_FORCE_ERR_BF_OFF (16)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_6_RXEQ_EYEMEAS_FORCE_ERR_BF_WID ( 1)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_6_RXEQ_EYEMEAS_FORCE_ERR_BF_MSK (0x00010000)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_6_RXEQ_EYEMEAS_FORCE_ERR_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_MAIN_FSM_CONTROL_0 register description at address offset 0x3f0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/main_fsm_control_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t MAIN_FSM_START : 1;
    ///< Start handshake with main adaptation FSM
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_main_fsm_ctrl_0_reg_t;

#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_0_RD_MASK (0x00000001U)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_0_WR_MASK (0x00000001U)


///< Start handshake with main adaptation FSM
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_0_MAIN_FSM_START_BF_OFF ( 0)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_0_MAIN_FSM_START_BF_WID ( 1)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_0_MAIN_FSM_START_BF_MSK (0x00000001)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_0_MAIN_FSM_START_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_MAIN_FSM_STATUS_0 register description at address offset 0x3f4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/main_fsm_status_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t MAIN_FSM_DONE : 1;
    ///< main FSM status complete
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RXEQ_ADAPTATION_START : 1;
    ///< Controller ask adaptation start
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t RXEQ_EQ_TRAINING_START : 1;
    ///< Controller ask eq_training start
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t RXEQ_EYEMEAS_START : 1;
    ///< SOC ask eyemeas start
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_main_fsm_stat_0_reg_t;

#define PMA_RXWORD_MSG_MAIN_FSM_STAT_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_MAIN_FSM_STAT_0_RD_MASK (0x0000000fU)
#define PMA_RXWORD_MSG_MAIN_FSM_STAT_0_WR_MASK (0x00000000U)


///< main FSM status complete
#define PMA_RXWORD_MSG_MAIN_FSM_STAT_0_MAIN_FSM_DONE_BF_OFF ( 0)
#define PMA_RXWORD_MSG_MAIN_FSM_STAT_0_MAIN_FSM_DONE_BF_WID ( 1)
#define PMA_RXWORD_MSG_MAIN_FSM_STAT_0_MAIN_FSM_DONE_BF_MSK (0x00000001)
#define PMA_RXWORD_MSG_MAIN_FSM_STAT_0_MAIN_FSM_DONE_BF_DEF (0x00000000)

///< Controller ask adaptation start
#define PMA_RXWORD_MSG_MAIN_FSM_STAT_0_RXEQ_ADAPTATION_START_BF_OFF ( 1)
#define PMA_RXWORD_MSG_MAIN_FSM_STAT_0_RXEQ_ADAPTATION_START_BF_WID ( 1)
#define PMA_RXWORD_MSG_MAIN_FSM_STAT_0_RXEQ_ADAPTATION_START_BF_MSK (0x00000002)
#define PMA_RXWORD_MSG_MAIN_FSM_STAT_0_RXEQ_ADAPTATION_START_BF_DEF (0x00000000)

///< Controller ask eq_training start
#define PMA_RXWORD_MSG_MAIN_FSM_STAT_0_RXEQ_EQ_TRAINING_START_BF_OFF ( 2)
#define PMA_RXWORD_MSG_MAIN_FSM_STAT_0_RXEQ_EQ_TRAINING_START_BF_WID ( 1)
#define PMA_RXWORD_MSG_MAIN_FSM_STAT_0_RXEQ_EQ_TRAINING_START_BF_MSK (0x00000004)
#define PMA_RXWORD_MSG_MAIN_FSM_STAT_0_RXEQ_EQ_TRAINING_START_BF_DEF (0x00000000)

///< SOC ask eyemeas start
#define PMA_RXWORD_MSG_MAIN_FSM_STAT_0_RXEQ_EYEMEAS_START_BF_OFF ( 3)
#define PMA_RXWORD_MSG_MAIN_FSM_STAT_0_RXEQ_EYEMEAS_START_BF_WID ( 1)
#define PMA_RXWORD_MSG_MAIN_FSM_STAT_0_RXEQ_EYEMEAS_START_BF_MSK (0x00000008)
#define PMA_RXWORD_MSG_MAIN_FSM_STAT_0_RXEQ_EYEMEAS_START_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_MAIN_FSM_CONTROL_1 register description at address offset 0x3f8
  *
  * Register default value:        0x04010020
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/main_fsm_control_1
  * placeholder
  */

typedef union {
  struct {
    uint32_t MAIN_FSM_TIMER_MAX : 8;
    ///< Main FSM delay timer threshold
    ///< AccessType="RW" BitOffset="0" ResetValue="0x20"
    uint32_t MAIN_FSM_ITER_MAX : 16;
    ///< Main FSM iterations counter threshold
    ///< AccessType="RW" BitOffset="8" ResetValue="0x100"
    uint32_t MAIN_FSM_SINGLE_RUN : 1;
    ///< single run request
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t MAIN_FSM_CONTIN_RUN : 1;
    ///< continuous run request
    ///< AccessType="RW" BitOffset="25" ResetValue="0x0"
    uint32_t MAIN_FSM_PRELOAD_EN : 1;
    ///< Enable pre-load LMS accumulators in common mode
    ///< AccessType="RW" BitOffset="26" ResetValue="0x1"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="27" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_main_fsm_ctrl_1_reg_t;

#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_1_DEFAULT (0x04010020U)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_1_RD_MASK (0x07ffffffU)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_1_WR_MASK (0x07ffffffU)


///< Main FSM delay timer threshold
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_1_MAIN_FSM_TIMER_MAX_BF_OFF ( 0)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_1_MAIN_FSM_TIMER_MAX_BF_WID ( 8)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_1_MAIN_FSM_TIMER_MAX_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_1_MAIN_FSM_TIMER_MAX_BF_DEF (0x00000020)

///< Main FSM iterations counter threshold
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_1_MAIN_FSM_ITER_MAX_BF_OFF ( 8)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_1_MAIN_FSM_ITER_MAX_BF_WID (16)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_1_MAIN_FSM_ITER_MAX_BF_MSK (0x00FFFF00)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_1_MAIN_FSM_ITER_MAX_BF_DEF (0x00010000)

///< single run request
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_1_MAIN_FSM_SINGLE_RUN_BF_OFF (24)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_1_MAIN_FSM_SINGLE_RUN_BF_WID ( 1)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_1_MAIN_FSM_SINGLE_RUN_BF_MSK (0x01000000)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_1_MAIN_FSM_SINGLE_RUN_BF_DEF (0x00000000)

///< continuous run request
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_1_MAIN_FSM_CONTIN_RUN_BF_OFF (25)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_1_MAIN_FSM_CONTIN_RUN_BF_WID ( 1)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_1_MAIN_FSM_CONTIN_RUN_BF_MSK (0x02000000)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_1_MAIN_FSM_CONTIN_RUN_BF_DEF (0x00000000)

///< Enable pre-load LMS accumulators in common mode
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_1_MAIN_FSM_PRELOAD_EN_BF_OFF (26)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_1_MAIN_FSM_PRELOAD_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_1_MAIN_FSM_PRELOAD_EN_BF_MSK (0x04000000)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_1_MAIN_FSM_PRELOAD_EN_BF_DEF (0x04000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_MAIN_FSM_CONTROL_2 register description at address offset 0x3fc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/main_fsm_control_2
  * placeholder
  */

typedef union {
  struct {
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="0" ResetValue="None"
    uint32_t MAIN_FSM_INIT_VREF_OFF : 4;
    ///< select which VRef accumulators will be excluded
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t MAIN_FSM_INIT_FFE_OFF : 24;
    ///< select which FFE  accumulators will be excluded
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t MAIN_FSM_INIT_EDGVREF_OFF : 3;
    ///< select which edg VREF  accumulators will be excluded
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_main_fsm_ctrl_2_reg_t;

#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_2_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_2_RD_MASK (0xfffffffeU)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_2_WR_MASK (0xfffffffeU)


///< select which VRef accumulators will be excluded
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_2_MAIN_FSM_INIT_VREF_OFF_BF_OFF ( 1)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_2_MAIN_FSM_INIT_VREF_OFF_BF_WID ( 4)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_2_MAIN_FSM_INIT_VREF_OFF_BF_MSK (0x0000001E)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_2_MAIN_FSM_INIT_VREF_OFF_BF_DEF (0x00000000)

///< select which FFE  accumulators will be excluded
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_2_MAIN_FSM_INIT_FFE_OFF_BF_OFF ( 5)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_2_MAIN_FSM_INIT_FFE_OFF_BF_WID (24)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_2_MAIN_FSM_INIT_FFE_OFF_BF_MSK (0x1FFFFFE0)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_2_MAIN_FSM_INIT_FFE_OFF_BF_DEF (0x00000000)

///< select which edg VREF  accumulators will be excluded
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_2_MAIN_FSM_INIT_EDGVREF_OFF_BF_OFF (29)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_2_MAIN_FSM_INIT_EDGVREF_OFF_BF_WID ( 3)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_2_MAIN_FSM_INIT_EDGVREF_OFF_BF_MSK (0xE0000000)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_2_MAIN_FSM_INIT_EDGVREF_OFF_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_MAIN_FSM_CONTROL_3 register description at address offset 0x400
  *
  * Register default value:        0x00800000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/main_fsm_control_3
  * placeholder
  */

typedef union {
  struct {
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="0" ResetValue="None"
    uint32_t MAIN_FSM_INIT_EN : 1;
    ///< generate init_load command
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t MAIN_FSM_VGA_EN : 1;
    ///< Enable VGA adaptation (unused)
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t MAIN_FSM_VREF_EN : 1;
    ///< Enable VRef adaptation
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t MAIN_FSM_FFE_EN : 1;
    ///< Enable FFE taps adaptation
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t MAIN_FSM_OPS_EN : 1;
    ///< Enable OPS taps adaptation
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t MAIN_FSM_OFC_EN : 1;
    ///< Enable OFC taps adaptation
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t MAIN_FSM_AFFE_EN : 1;
    ///< Enable AFFE taps adaptation
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t MAIN_FSM_ADCVREF_EN : 1;
    ///< Enable ADCVREF taps adaptation
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t MAIN_FSM_ADCOFC_EN : 1;
    ///< Enable ADCOFC taps adaptation
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t MAIN_FSM_EDGVREF_EN : 1;
    ///< Enable edgVref taps adaptation
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t MAIN_FSM_DFE_EN : 1;
    ///< Enable DFE taps adaptation
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t MAIN_FSM_CDR_FFE_EN : 1;
    ///< Enable CDR FFE pre1 or post1 tap adaptation
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t MAIN_FSM_CDR_FFE_VREF_EN : 1;
    ///< Enable CDR FFE  VREF adaptation
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t MAIN_FSM_CDR_FFE_OFC_EN : 1;
    ///< Enable CDR FFE OFC adaptation
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t MAIN_FSM_INIT_CDR_FFE_OFF : 7;
    ///< select which CDR FFE LMS  accumulators will be excluded
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t MAIN_FSM_INIT_UPDATE_EN : 1;
    ///< Enable intial load with CRW register write
    ///< AccessType="RW" BitOffset="23" ResetValue="0x1"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_main_fsm_ctrl_3_reg_t;

#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_DEFAULT (0x00800000U)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_RD_MASK (0x00ff7ffeU)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_WR_MASK (0x00ff7ffeU)


///< generate init_load command
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_INIT_EN_BF_OFF ( 1)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_INIT_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_INIT_EN_BF_MSK (0x00000002)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_INIT_EN_BF_DEF (0x00000000)

///< Enable VGA adaptation (unused)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_VGA_EN_BF_OFF ( 2)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_VGA_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_VGA_EN_BF_MSK (0x00000004)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_VGA_EN_BF_DEF (0x00000000)

///< Enable VRef adaptation
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_VREF_EN_BF_OFF ( 3)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_VREF_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_VREF_EN_BF_MSK (0x00000008)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_VREF_EN_BF_DEF (0x00000000)

///< Enable FFE taps adaptation
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_FFE_EN_BF_OFF ( 4)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_FFE_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_FFE_EN_BF_MSK (0x00000010)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_FFE_EN_BF_DEF (0x00000000)

///< Enable OPS taps adaptation
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_OPS_EN_BF_OFF ( 5)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_OPS_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_OPS_EN_BF_MSK (0x00000020)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_OPS_EN_BF_DEF (0x00000000)

///< Enable OFC taps adaptation
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_OFC_EN_BF_OFF ( 6)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_OFC_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_OFC_EN_BF_MSK (0x00000040)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_OFC_EN_BF_DEF (0x00000000)

///< Enable AFFE taps adaptation
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_AFFE_EN_BF_OFF ( 7)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_AFFE_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_AFFE_EN_BF_MSK (0x00000080)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_AFFE_EN_BF_DEF (0x00000000)

///< Enable ADCVREF taps adaptation
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_ADCVREF_EN_BF_OFF ( 8)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_ADCVREF_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_ADCVREF_EN_BF_MSK (0x00000100)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_ADCVREF_EN_BF_DEF (0x00000000)

///< Enable ADCOFC taps adaptation
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_ADCOFC_EN_BF_OFF ( 9)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_ADCOFC_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_ADCOFC_EN_BF_MSK (0x00000200)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_ADCOFC_EN_BF_DEF (0x00000000)

///< Enable edgVref taps adaptation
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_EDGVREF_EN_BF_OFF (10)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_EDGVREF_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_EDGVREF_EN_BF_MSK (0x00000400)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_EDGVREF_EN_BF_DEF (0x00000000)

///< Enable DFE taps adaptation
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_DFE_EN_BF_OFF (11)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_DFE_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_DFE_EN_BF_MSK (0x00000800)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_DFE_EN_BF_DEF (0x00000000)

///< Enable CDR FFE pre1 or post1 tap adaptation
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_CDR_FFE_EN_BF_OFF (12)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_CDR_FFE_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_CDR_FFE_EN_BF_MSK (0x00001000)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_CDR_FFE_EN_BF_DEF (0x00000000)

///< Enable CDR FFE  VREF adaptation
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_CDR_FFE_VREF_EN_BF_OFF (13)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_CDR_FFE_VREF_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_CDR_FFE_VREF_EN_BF_MSK (0x00002000)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_CDR_FFE_VREF_EN_BF_DEF (0x00000000)

///< Enable CDR FFE OFC adaptation
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_CDR_FFE_OFC_EN_BF_OFF (14)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_CDR_FFE_OFC_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_CDR_FFE_OFC_EN_BF_MSK (0x00004000)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_CDR_FFE_OFC_EN_BF_DEF (0x00000000)

///< select which CDR FFE LMS  accumulators will be excluded
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_INIT_CDR_FFE_OFF_BF_OFF (16)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_INIT_CDR_FFE_OFF_BF_WID ( 7)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_INIT_CDR_FFE_OFF_BF_MSK (0x007F0000)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_INIT_CDR_FFE_OFF_BF_DEF (0x00000000)

///< Enable intial load with CRW register write
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_INIT_UPDATE_EN_BF_OFF (23)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_INIT_UPDATE_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_INIT_UPDATE_EN_BF_MSK (0x00800000)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_MAIN_FSM_INIT_UPDATE_EN_BF_DEF (0x00800000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_TAPS_SET_CONTROL register description at address offset 0x404
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/taps_set_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t CMOD : 1;
    ///< rx ffe common mode, all sets of ffe taps get update together
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CMOD_SMPL_SEL : 2;
    ///< select which 16 samples out of 64 used in common mode of FFE adaptation
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t TAPS_SET_SEL : 4;
    ///< Select which set of samples used for FFE taps LMS
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t TAPS_SET_MODE : 1;
    ///< 0-HW automatic Round Robin update 16 sets of taps
    ///< 1-SW control ffe_taps_set_sel to select specified set of taps to update.
    ///< Requires init pulses with fw_start for new value to propagate.
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t TAPS_SET_FW_MODE : 1;
    ///< Enables  a hard FW override such that the taps set select is purely
    ///< driven by FW without any hardware help. Effective tap value driven
    ///< by taps_set_sel.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t TAPS_SET_INIT_DIS : 1;
    ///< Prevent loading of ffe_taps_set_sel from registers at the load_init
    ///< command
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t TAPS_SET_UPDATE_DIS : 1;
    ///< Prevent changing of ffe_taps_set_sel during FFE taps adaptation
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t  : 17;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_taps_set_ctrl_reg_t;

#define PMA_RXWORD_MSG_TAPS_SET_CTRL_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_TAPS_SET_CTRL_RD_MASK (0x0000787fU)
#define PMA_RXWORD_MSG_TAPS_SET_CTRL_WR_MASK (0x0000787fU)


///< rx ffe common mode, all sets of ffe taps get update together
#define PMA_RXWORD_MSG_TAPS_SET_CTRL_CMOD_BF_OFF ( 0)
#define PMA_RXWORD_MSG_TAPS_SET_CTRL_CMOD_BF_WID ( 1)
#define PMA_RXWORD_MSG_TAPS_SET_CTRL_CMOD_BF_MSK (0x00000001)
#define PMA_RXWORD_MSG_TAPS_SET_CTRL_CMOD_BF_DEF (0x00000000)

///< select which 16 samples out of 64 used in common mode of FFE adaptation
#define PMA_RXWORD_MSG_TAPS_SET_CTRL_CMOD_SMPL_SEL_BF_OFF ( 1)
#define PMA_RXWORD_MSG_TAPS_SET_CTRL_CMOD_SMPL_SEL_BF_WID ( 2)
#define PMA_RXWORD_MSG_TAPS_SET_CTRL_CMOD_SMPL_SEL_BF_MSK (0x00000006)
#define PMA_RXWORD_MSG_TAPS_SET_CTRL_CMOD_SMPL_SEL_BF_DEF (0x00000000)

///< Select which set of samples used for FFE taps LMS
#define PMA_RXWORD_MSG_TAPS_SET_CTRL_TAPS_SET_SEL_BF_OFF ( 3)
#define PMA_RXWORD_MSG_TAPS_SET_CTRL_TAPS_SET_SEL_BF_WID ( 4)
#define PMA_RXWORD_MSG_TAPS_SET_CTRL_TAPS_SET_SEL_BF_MSK (0x00000078)
#define PMA_RXWORD_MSG_TAPS_SET_CTRL_TAPS_SET_SEL_BF_DEF (0x00000000)

///< 0-HW automatic Round Robin update 16 sets of taps
///< 1-SW control ffe_taps_set_sel to select specified set of taps to update.
///< Requires init pulses with fw_start for new value to propagate.
#define PMA_RXWORD_MSG_TAPS_SET_CTRL_TAPS_SET_MODE_BF_OFF (11)
#define PMA_RXWORD_MSG_TAPS_SET_CTRL_TAPS_SET_MODE_BF_WID ( 1)
#define PMA_RXWORD_MSG_TAPS_SET_CTRL_TAPS_SET_MODE_BF_MSK (0x00000800)
#define PMA_RXWORD_MSG_TAPS_SET_CTRL_TAPS_SET_MODE_BF_DEF (0x00000000)

///< Enables  a hard FW override such that the taps set select is purely
///< driven by FW without any hardware help. Effective tap value driven
///< by taps_set_sel.
#define PMA_RXWORD_MSG_TAPS_SET_CTRL_TAPS_SET_FW_MODE_BF_OFF (12)
#define PMA_RXWORD_MSG_TAPS_SET_CTRL_TAPS_SET_FW_MODE_BF_WID ( 1)
#define PMA_RXWORD_MSG_TAPS_SET_CTRL_TAPS_SET_FW_MODE_BF_MSK (0x00001000)
#define PMA_RXWORD_MSG_TAPS_SET_CTRL_TAPS_SET_FW_MODE_BF_DEF (0x00000000)

///< Prevent loading of ffe_taps_set_sel from registers at the load_init
///< command
#define PMA_RXWORD_MSG_TAPS_SET_CTRL_TAPS_SET_INIT_DIS_BF_OFF (13)
#define PMA_RXWORD_MSG_TAPS_SET_CTRL_TAPS_SET_INIT_DIS_BF_WID ( 1)
#define PMA_RXWORD_MSG_TAPS_SET_CTRL_TAPS_SET_INIT_DIS_BF_MSK (0x00002000)
#define PMA_RXWORD_MSG_TAPS_SET_CTRL_TAPS_SET_INIT_DIS_BF_DEF (0x00000000)

///< Prevent changing of ffe_taps_set_sel during FFE taps adaptation
#define PMA_RXWORD_MSG_TAPS_SET_CTRL_TAPS_SET_UPDATE_DIS_BF_OFF (14)
#define PMA_RXWORD_MSG_TAPS_SET_CTRL_TAPS_SET_UPDATE_DIS_BF_WID ( 1)
#define PMA_RXWORD_MSG_TAPS_SET_CTRL_TAPS_SET_UPDATE_DIS_BF_MSK (0x00004000)
#define PMA_RXWORD_MSG_TAPS_SET_CTRL_TAPS_SET_UPDATE_DIS_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_RX_GEARBOX_CTRL register description at address offset 0x408
  *
  * Register default value:        0x73400000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/rx_gearbox_ctrl
  * Rx Gearbox Control
  */

typedef union {
  struct {
    uint32_t RX_GBOVR_EN : 1;
    ///< Enable override to set a value for RX gearbox enable.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_GBOVR_VAL : 1;
    ///< Value for override after getting enabled
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
    uint32_t WR_PTR_EN_DELAY : 4;
    ///< The initial value of RX gearbox write pointer
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t WR_PTR_MAX : 4;
    ///< The maximum value of RX gearbox write pointer:
    ///< - Set to 4 for the optimized buffer depth (default).
    ///< - Set to 9 for the maximum buffer depth.
    ///< AccessType="RW" BitOffset="20" ResetValue="0x4"
    uint32_t RD_PTR_EN_DELAY : 4;
    ///< The initial value of RX gearbox read pointer
    ///< AccessType="RW" BitOffset="24" ResetValue="0x3"
    uint32_t RD_PTR_MAX : 4;
    ///< The maximum value of RX gearbox read pointer:
    ///< - Set to 7 for the optimized buffer depth (default).
    ///< - Set to 15 for the maximum buffer depth.
    ///< AccessType="RW" BitOffset="28" ResetValue="0x7"
  } ;
  uint32_t value;
} pma_rxword_msg_rx_gearbox_ctrl_reg_t;

#define PMA_RXWORD_MSG_RX_GEARBOX_CTRL_DEFAULT (0x73400000U)
#define PMA_RXWORD_MSG_RX_GEARBOX_CTRL_RD_MASK (0xffff0003U)
#define PMA_RXWORD_MSG_RX_GEARBOX_CTRL_WR_MASK (0xffff0003U)


///< Enable override to set a value for RX gearbox enable.
#define PMA_RXWORD_MSG_RX_GEARBOX_CTRL_RX_GBOVR_EN_BF_OFF ( 0)
#define PMA_RXWORD_MSG_RX_GEARBOX_CTRL_RX_GBOVR_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_RX_GEARBOX_CTRL_RX_GBOVR_EN_BF_MSK (0x00000001)
#define PMA_RXWORD_MSG_RX_GEARBOX_CTRL_RX_GBOVR_EN_BF_DEF (0x00000000)

///< Value for override after getting enabled
#define PMA_RXWORD_MSG_RX_GEARBOX_CTRL_RX_GBOVR_VAL_BF_OFF ( 1)
#define PMA_RXWORD_MSG_RX_GEARBOX_CTRL_RX_GBOVR_VAL_BF_WID ( 1)
#define PMA_RXWORD_MSG_RX_GEARBOX_CTRL_RX_GBOVR_VAL_BF_MSK (0x00000002)
#define PMA_RXWORD_MSG_RX_GEARBOX_CTRL_RX_GBOVR_VAL_BF_DEF (0x00000000)

///< The initial value of RX gearbox write pointer
#define PMA_RXWORD_MSG_RX_GEARBOX_CTRL_WR_PTR_EN_DELAY_BF_OFF (16)
#define PMA_RXWORD_MSG_RX_GEARBOX_CTRL_WR_PTR_EN_DELAY_BF_WID ( 4)
#define PMA_RXWORD_MSG_RX_GEARBOX_CTRL_WR_PTR_EN_DELAY_BF_MSK (0x000F0000)
#define PMA_RXWORD_MSG_RX_GEARBOX_CTRL_WR_PTR_EN_DELAY_BF_DEF (0x00000000)

///< The maximum value of RX gearbox write pointer:
///< - Set to 4 for the optimized buffer depth (default).
///< - Set to 9 for the maximum buffer depth.
#define PMA_RXWORD_MSG_RX_GEARBOX_CTRL_WR_PTR_MAX_BF_OFF (20)
#define PMA_RXWORD_MSG_RX_GEARBOX_CTRL_WR_PTR_MAX_BF_WID ( 4)
#define PMA_RXWORD_MSG_RX_GEARBOX_CTRL_WR_PTR_MAX_BF_MSK (0x00F00000)
#define PMA_RXWORD_MSG_RX_GEARBOX_CTRL_WR_PTR_MAX_BF_DEF (0x00400000)

///< The initial value of RX gearbox read pointer
#define PMA_RXWORD_MSG_RX_GEARBOX_CTRL_RD_PTR_EN_DELAY_BF_OFF (24)
#define PMA_RXWORD_MSG_RX_GEARBOX_CTRL_RD_PTR_EN_DELAY_BF_WID ( 4)
#define PMA_RXWORD_MSG_RX_GEARBOX_CTRL_RD_PTR_EN_DELAY_BF_MSK (0x0F000000)
#define PMA_RXWORD_MSG_RX_GEARBOX_CTRL_RD_PTR_EN_DELAY_BF_DEF (0x03000000)

///< The maximum value of RX gearbox read pointer:
///< - Set to 7 for the optimized buffer depth (default).
///< - Set to 15 for the maximum buffer depth.
#define PMA_RXWORD_MSG_RX_GEARBOX_CTRL_RD_PTR_MAX_BF_OFF (28)
#define PMA_RXWORD_MSG_RX_GEARBOX_CTRL_RD_PTR_MAX_BF_WID ( 4)
#define PMA_RXWORD_MSG_RX_GEARBOX_CTRL_RD_PTR_MAX_BF_MSK (0xF0000000)
#define PMA_RXWORD_MSG_RX_GEARBOX_CTRL_RD_PTR_MAX_BF_DEF (0x70000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_MAIN_FSM_CONTROL_4 register description at address offset 0x40c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/main_fsm_control_4
  * placeholder
  */

typedef union {
  struct {
    uint32_t MAIN_FSM_INIT_AFFE_OFF : 4;
    ///< select which AFFE  accumulators will be excluded from initial value
    ///< load
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t MAIN_FSM_INIT_ADCVREF_OFF : 4;
    ///< select which ADCVREF  accumulators will be excluded from initial value
    ///< load
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t MAIN_FSM_INIT_OFC_OFF : 6;
    ///< select which OFC  accumulators will be excluded from initial value
    ///< load
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t MAIN_FSM_INIT_DFE_OFF : 1;
    ///< select which DFE  accumulators will be excluded from initial value
    ///< load
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t MAIN_FSM_INIT_ADCOFC_OFF : 6;
    ///< select which ADCOFC  accumulators will be excluded from initial value
    ///< load
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t MAIN_FSM_INIT_CDR_FFE_OFC_OFF : 6;
    ///< select which CDR FFE  OFC accumulators will be excluded from initial
    ///< value load
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t MAIN_FSM_INIT_CDR_FFE_VREF_OFF : 4;
    ///< select which CDR FFE  VREF accumulators will be excluded from initial
    ///< value load
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_main_fsm_ctrl_4_reg_t;

#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_4_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_4_RD_MASK (0xffffbfffU)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_4_WR_MASK (0xffffbfffU)


///< select which AFFE  accumulators will be excluded from initial value
///< load
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_4_MAIN_FSM_INIT_AFFE_OFF_BF_OFF ( 0)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_4_MAIN_FSM_INIT_AFFE_OFF_BF_WID ( 4)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_4_MAIN_FSM_INIT_AFFE_OFF_BF_MSK (0x0000000F)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_4_MAIN_FSM_INIT_AFFE_OFF_BF_DEF (0x00000000)

///< select which ADCVREF  accumulators will be excluded from initial value
///< load
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_4_MAIN_FSM_INIT_ADCVREF_OFF_BF_OFF ( 4)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_4_MAIN_FSM_INIT_ADCVREF_OFF_BF_WID ( 4)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_4_MAIN_FSM_INIT_ADCVREF_OFF_BF_MSK (0x000000F0)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_4_MAIN_FSM_INIT_ADCVREF_OFF_BF_DEF (0x00000000)

///< select which OFC  accumulators will be excluded from initial value
///< load
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_4_MAIN_FSM_INIT_OFC_OFF_BF_OFF ( 8)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_4_MAIN_FSM_INIT_OFC_OFF_BF_WID ( 6)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_4_MAIN_FSM_INIT_OFC_OFF_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_4_MAIN_FSM_INIT_OFC_OFF_BF_DEF (0x00000000)

///< select which DFE  accumulators will be excluded from initial value
///< load
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_4_MAIN_FSM_INIT_DFE_OFF_BF_OFF (15)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_4_MAIN_FSM_INIT_DFE_OFF_BF_WID ( 1)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_4_MAIN_FSM_INIT_DFE_OFF_BF_MSK (0x00008000)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_4_MAIN_FSM_INIT_DFE_OFF_BF_DEF (0x00000000)

///< select which ADCOFC  accumulators will be excluded from initial value
///< load
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_4_MAIN_FSM_INIT_ADCOFC_OFF_BF_OFF (16)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_4_MAIN_FSM_INIT_ADCOFC_OFF_BF_WID ( 6)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_4_MAIN_FSM_INIT_ADCOFC_OFF_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_4_MAIN_FSM_INIT_ADCOFC_OFF_BF_DEF (0x00000000)

///< select which CDR FFE  OFC accumulators will be excluded from initial
///< value load
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_4_MAIN_FSM_INIT_CDR_FFE_OFC_OFF_BF_OFF (22)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_4_MAIN_FSM_INIT_CDR_FFE_OFC_OFF_BF_WID ( 6)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_4_MAIN_FSM_INIT_CDR_FFE_OFC_OFF_BF_MSK (0x0FC00000)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_4_MAIN_FSM_INIT_CDR_FFE_OFC_OFF_BF_DEF (0x00000000)

///< select which CDR FFE  VREF accumulators will be excluded from initial
///< value load
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_4_MAIN_FSM_INIT_CDR_FFE_VREF_OFF_BF_OFF (28)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_4_MAIN_FSM_INIT_CDR_FFE_VREF_OFF_BF_WID ( 4)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_4_MAIN_FSM_INIT_CDR_FFE_VREF_OFF_BF_MSK (0xF0000000)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_4_MAIN_FSM_INIT_CDR_FFE_VREF_OFF_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_MAIN_FSM_CONTROL_5 register description at address offset 0x410
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/main_fsm_control_5
  * placeholder
  */

typedef union {
  struct {
    uint32_t MAIN_FSM_INIT_OPS_OFF : 8;
    ///< select which OPS  accumulators will be excluded from initial value
    ///< load
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_main_fsm_ctrl_5_reg_t;

#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_5_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_5_RD_MASK (0x000000ffU)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_5_WR_MASK (0x000000ffU)


///< select which OPS  accumulators will be excluded from initial value
///< load
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_5_MAIN_FSM_INIT_OPS_OFF_BF_OFF ( 0)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_5_MAIN_FSM_INIT_OPS_OFF_BF_WID ( 8)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_5_MAIN_FSM_INIT_OPS_OFF_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_5_MAIN_FSM_INIT_OPS_OFF_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_VREF_CONTROL_1 register description at address offset 0x414
  *
  * Register default value:        0x00000040
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/vref_control_1
  * placeholder
  */

typedef union {
  struct {
    uint32_t VREF_NEG_UPDN_INV_CB : 1;
    ///< VRef Neg chicken bit to invert up/down
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t VREF_POS_UPDN_INV_CB : 1;
    ///< VRef Pos chicken bit to invert up/down
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t VREF_HOLD_EN : 4;
    ///< VRef hold tap accumulator
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t VREF_INT_ITER_BYPASS : 1;
    ///< VRef internal iterator bypass
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t VREF_INT_ITER_MAX : 4;
    ///< VRef internal iterator max count. Actual number of iteration is N+1
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t  : 21;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_vref_ctrl_1_reg_t;

#define PMA_RXWORD_MSG_VREF_CTRL_1_DEFAULT (0x00000040U)
#define PMA_RXWORD_MSG_VREF_CTRL_1_RD_MASK (0x000007ffU)
#define PMA_RXWORD_MSG_VREF_CTRL_1_WR_MASK (0x000007ffU)


///< VRef Neg chicken bit to invert up/down
#define PMA_RXWORD_MSG_VREF_CTRL_1_VREF_NEG_UPDN_INV_CB_BF_OFF ( 0)
#define PMA_RXWORD_MSG_VREF_CTRL_1_VREF_NEG_UPDN_INV_CB_BF_WID ( 1)
#define PMA_RXWORD_MSG_VREF_CTRL_1_VREF_NEG_UPDN_INV_CB_BF_MSK (0x00000001)
#define PMA_RXWORD_MSG_VREF_CTRL_1_VREF_NEG_UPDN_INV_CB_BF_DEF (0x00000000)

///< VRef Pos chicken bit to invert up/down
#define PMA_RXWORD_MSG_VREF_CTRL_1_VREF_POS_UPDN_INV_CB_BF_OFF ( 1)
#define PMA_RXWORD_MSG_VREF_CTRL_1_VREF_POS_UPDN_INV_CB_BF_WID ( 1)
#define PMA_RXWORD_MSG_VREF_CTRL_1_VREF_POS_UPDN_INV_CB_BF_MSK (0x00000002)
#define PMA_RXWORD_MSG_VREF_CTRL_1_VREF_POS_UPDN_INV_CB_BF_DEF (0x00000000)

///< VRef hold tap accumulator
#define PMA_RXWORD_MSG_VREF_CTRL_1_VREF_HOLD_EN_BF_OFF ( 2)
#define PMA_RXWORD_MSG_VREF_CTRL_1_VREF_HOLD_EN_BF_WID ( 4)
#define PMA_RXWORD_MSG_VREF_CTRL_1_VREF_HOLD_EN_BF_MSK (0x0000003C)
#define PMA_RXWORD_MSG_VREF_CTRL_1_VREF_HOLD_EN_BF_DEF (0x00000000)

///< VRef internal iterator bypass
#define PMA_RXWORD_MSG_VREF_CTRL_1_VREF_INT_ITER_BYP_BF_OFF ( 6)
#define PMA_RXWORD_MSG_VREF_CTRL_1_VREF_INT_ITER_BYP_BF_WID ( 1)
#define PMA_RXWORD_MSG_VREF_CTRL_1_VREF_INT_ITER_BYP_BF_MSK (0x00000040)
#define PMA_RXWORD_MSG_VREF_CTRL_1_VREF_INT_ITER_BYP_BF_DEF (0x00000040)

///< VRef internal iterator max count. Actual number of iteration is N+1
#define PMA_RXWORD_MSG_VREF_CTRL_1_VREF_INT_ITER_MAX_BF_OFF ( 7)
#define PMA_RXWORD_MSG_VREF_CTRL_1_VREF_INT_ITER_MAX_BF_WID ( 4)
#define PMA_RXWORD_MSG_VREF_CTRL_1_VREF_INT_ITER_MAX_BF_MSK (0x00000780)
#define PMA_RXWORD_MSG_VREF_CTRL_1_VREF_INT_ITER_MAX_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_VREF_CONTROL_2 register description at address offset 0x418
  *
  * Register default value:        0x03600240
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/vref_control_2
  * placeholder
  */

typedef union {
  struct {
    uint32_t VREF_INIT_VAL_0 : 10;
    ///< VRef initial values for Vrefs
    ///< AccessType="RW" BitOffset="0" ResetValue="0x240"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
    uint32_t VREF_INIT_VAL_1 : 10;
    ///< VRef initial values for Vrefs
    ///< AccessType="RW" BitOffset="16" ResetValue="0x360"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="26" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_vref_ctrl_2_reg_t;

#define PMA_RXWORD_MSG_VREF_CTRL_2_DEFAULT (0x03600240U)
#define PMA_RXWORD_MSG_VREF_CTRL_2_RD_MASK (0x03ff03ffU)
#define PMA_RXWORD_MSG_VREF_CTRL_2_WR_MASK (0x03ff03ffU)


///< VRef initial values for Vrefs
#define PMA_RXWORD_MSG_VREF_CTRL_2_VREF_INIT_VAL_0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_VREF_CTRL_2_VREF_INIT_VAL_0_BF_WID (10)
#define PMA_RXWORD_MSG_VREF_CTRL_2_VREF_INIT_VAL_0_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_VREF_CTRL_2_VREF_INIT_VAL_0_BF_DEF (0x00000240)

///< VRef initial values for Vrefs
#define PMA_RXWORD_MSG_VREF_CTRL_2_VREF_INIT_VAL_1_BF_OFF (16)
#define PMA_RXWORD_MSG_VREF_CTRL_2_VREF_INIT_VAL_1_BF_WID (10)
#define PMA_RXWORD_MSG_VREF_CTRL_2_VREF_INIT_VAL_1_BF_MSK (0x03FF0000)
#define PMA_RXWORD_MSG_VREF_CTRL_2_VREF_INIT_VAL_1_BF_DEF (0x03600000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_VREF_CONTROL_3 register description at address offset 0x41c
  *
  * Register default value:        0x01C000A0
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/vref_control_3
  * placeholder
  */

typedef union {
  struct {
    uint32_t VREF_INIT_VAL_2 : 10;
    ///< VRef initial values for Vrefs
    ///< AccessType="RW" BitOffset="0" ResetValue="0xA0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
    uint32_t VREF_INIT_VAL_3 : 10;
    ///< VRef initial values for Vrefs
    ///< AccessType="RW" BitOffset="16" ResetValue="0x1C0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="26" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_vref_ctrl_3_reg_t;

#define PMA_RXWORD_MSG_VREF_CTRL_3_DEFAULT (0x01c000a0U)
#define PMA_RXWORD_MSG_VREF_CTRL_3_RD_MASK (0x03ff03ffU)
#define PMA_RXWORD_MSG_VREF_CTRL_3_WR_MASK (0x03ff03ffU)


///< VRef initial values for Vrefs
#define PMA_RXWORD_MSG_VREF_CTRL_3_VREF_INIT_VAL_2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_VREF_CTRL_3_VREF_INIT_VAL_2_BF_WID (10)
#define PMA_RXWORD_MSG_VREF_CTRL_3_VREF_INIT_VAL_2_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_VREF_CTRL_3_VREF_INIT_VAL_2_BF_DEF (0x000000A0)

///< VRef initial values for Vrefs
#define PMA_RXWORD_MSG_VREF_CTRL_3_VREF_INIT_VAL_3_BF_OFF (16)
#define PMA_RXWORD_MSG_VREF_CTRL_3_VREF_INIT_VAL_3_BF_WID (10)
#define PMA_RXWORD_MSG_VREF_CTRL_3_VREF_INIT_VAL_3_BF_MSK (0x03FF0000)
#define PMA_RXWORD_MSG_VREF_CTRL_3_VREF_INIT_VAL_3_BF_DEF (0x01C00000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_VREF_CONTROL_4 register description at address offset 0x420
  *
  * Register default value:        0x00004008
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/vref_control_4
  * placeholder
  */

typedef union {
  struct {
    uint32_t VREF_TIMER_MAX : 8;
    ///< VRef delay timer
    ///< AccessType="RW" BitOffset="0" ResetValue="0x8"
    uint32_t VREF_STATS_MAX : 10;
    ///< VRef stats counter
    ///< AccessType="RW" BitOffset="8" ResetValue="0x40"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_vref_ctrl_4_reg_t;

#define PMA_RXWORD_MSG_VREF_CTRL_4_DEFAULT (0x00004008U)
#define PMA_RXWORD_MSG_VREF_CTRL_4_RD_MASK (0x0003ffffU)
#define PMA_RXWORD_MSG_VREF_CTRL_4_WR_MASK (0x0003ffffU)


///< VRef delay timer
#define PMA_RXWORD_MSG_VREF_CTRL_4_VREF_TIMER_MAX_BF_OFF ( 0)
#define PMA_RXWORD_MSG_VREF_CTRL_4_VREF_TIMER_MAX_BF_WID ( 8)
#define PMA_RXWORD_MSG_VREF_CTRL_4_VREF_TIMER_MAX_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_VREF_CTRL_4_VREF_TIMER_MAX_BF_DEF (0x00000008)

///< VRef stats counter
#define PMA_RXWORD_MSG_VREF_CTRL_4_VREF_STATS_MAX_BF_OFF ( 8)
#define PMA_RXWORD_MSG_VREF_CTRL_4_VREF_STATS_MAX_BF_WID (10)
#define PMA_RXWORD_MSG_VREF_CTRL_4_VREF_STATS_MAX_BF_MSK (0x0003FF00)
#define PMA_RXWORD_MSG_VREF_CTRL_4_VREF_STATS_MAX_BF_DEF (0x00004000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_VREF_CONTROL_5 register description at address offset 0x424
  *
  * Register default value:        0x020001FF
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/vref_control_5
  * placeholder
  */

typedef union {
  struct {
    uint32_t VREF_TAP_MAX : 10;
    ///< VRef update accum saturation
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1FF"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
    uint32_t VREF_TAP_MIN : 10;
    ///< VRef update accum saturation
    ///< AccessType="RW" BitOffset="16" ResetValue="0x200"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="26" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_vref_ctrl_5_reg_t;

#define PMA_RXWORD_MSG_VREF_CTRL_5_DEFAULT (0x020001ffU)
#define PMA_RXWORD_MSG_VREF_CTRL_5_RD_MASK (0x03ff03ffU)
#define PMA_RXWORD_MSG_VREF_CTRL_5_WR_MASK (0x03ff03ffU)


///< VRef update accum saturation
#define PMA_RXWORD_MSG_VREF_CTRL_5_VREF_TAP_MAX_BF_OFF ( 0)
#define PMA_RXWORD_MSG_VREF_CTRL_5_VREF_TAP_MAX_BF_WID (10)
#define PMA_RXWORD_MSG_VREF_CTRL_5_VREF_TAP_MAX_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_VREF_CTRL_5_VREF_TAP_MAX_BF_DEF (0x000001FF)

///< VRef update accum saturation
#define PMA_RXWORD_MSG_VREF_CTRL_5_VREF_TAP_MIN_BF_OFF (16)
#define PMA_RXWORD_MSG_VREF_CTRL_5_VREF_TAP_MIN_BF_WID (10)
#define PMA_RXWORD_MSG_VREF_CTRL_5_VREF_TAP_MIN_BF_MSK (0x03FF0000)
#define PMA_RXWORD_MSG_VREF_CTRL_5_VREF_TAP_MIN_BF_DEF (0x02000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_VREF_CONTROL_6 register description at address offset 0x428
  *
  * Register default value:        0x00001021
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/vref_control_6
  * placeholder
  */

typedef union {
  struct {
    uint32_t VREF_COARSE_MU_EN : 1;
    ///< use coarse mu for vref
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t VREF_MU_COARSE : 8;
    ///< VRef update gain value for coarse run
    ///< AccessType="RW" BitOffset="1" ResetValue="0x10"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
    uint32_t VREF_MU_FINE : 8;
    ///< VRef update gain value for fine run
    ///< AccessType="RW" BitOffset="10" ResetValue="0x4"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
    uint32_t VREF_THRS_SEL : 1;
    ///< Selection vref thrs from ofc adaptive lms or from average of vref
    ///< taps. 0-default, from vref average taps; 1-from ofc average taps
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_vref_ctrl_6_reg_t;

#define PMA_RXWORD_MSG_VREF_CTRL_6_DEFAULT (0x00001021U)
#define PMA_RXWORD_MSG_VREF_CTRL_6_RD_MASK (0x0013fdffU)
#define PMA_RXWORD_MSG_VREF_CTRL_6_WR_MASK (0x0013fdffU)


///< use coarse mu for vref
#define PMA_RXWORD_MSG_VREF_CTRL_6_VREF_COARSE_MU_EN_BF_OFF ( 0)
#define PMA_RXWORD_MSG_VREF_CTRL_6_VREF_COARSE_MU_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_VREF_CTRL_6_VREF_COARSE_MU_EN_BF_MSK (0x00000001)
#define PMA_RXWORD_MSG_VREF_CTRL_6_VREF_COARSE_MU_EN_BF_DEF (0x00000001)

///< VRef update gain value for coarse run
#define PMA_RXWORD_MSG_VREF_CTRL_6_VREF_MU_COARSE_BF_OFF ( 1)
#define PMA_RXWORD_MSG_VREF_CTRL_6_VREF_MU_COARSE_BF_WID ( 8)
#define PMA_RXWORD_MSG_VREF_CTRL_6_VREF_MU_COARSE_BF_MSK (0x000001FE)
#define PMA_RXWORD_MSG_VREF_CTRL_6_VREF_MU_COARSE_BF_DEF (0x00000020)

///< VRef update gain value for fine run
#define PMA_RXWORD_MSG_VREF_CTRL_6_VREF_MU_FINE_BF_OFF (10)
#define PMA_RXWORD_MSG_VREF_CTRL_6_VREF_MU_FINE_BF_WID ( 8)
#define PMA_RXWORD_MSG_VREF_CTRL_6_VREF_MU_FINE_BF_MSK (0x0003FC00)
#define PMA_RXWORD_MSG_VREF_CTRL_6_VREF_MU_FINE_BF_DEF (0x00001000)

///< Selection vref thrs from ofc adaptive lms or from average of vref
///< taps. 0-default, from vref average taps; 1-from ofc average taps
#define PMA_RXWORD_MSG_VREF_CTRL_6_VREF_THRS_SEL_BF_OFF (20)
#define PMA_RXWORD_MSG_VREF_CTRL_6_VREF_THRS_SEL_BF_WID ( 1)
#define PMA_RXWORD_MSG_VREF_CTRL_6_VREF_THRS_SEL_BF_MSK (0x00100000)
#define PMA_RXWORD_MSG_VREF_CTRL_6_VREF_THRS_SEL_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_VREF_STATUS_0 register description at address offset 0x430
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/vref_status_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t VREF_AVG_UPDN : 4;
    ///< Final sign of the VRef statistics can be used by FW single run
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_vref_stat_0_reg_t;

#define PMA_RXWORD_MSG_VREF_STAT_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_VREF_STAT_0_RD_MASK (0x0000000fU)
#define PMA_RXWORD_MSG_VREF_STAT_0_WR_MASK (0x00000000U)


///< Final sign of the VRef statistics can be used by FW single run
#define PMA_RXWORD_MSG_VREF_STAT_0_VREF_AVG_UPDN_BF_OFF ( 0)
#define PMA_RXWORD_MSG_VREF_STAT_0_VREF_AVG_UPDN_BF_WID ( 4)
#define PMA_RXWORD_MSG_VREF_STAT_0_VREF_AVG_UPDN_BF_MSK (0x0000000F)
#define PMA_RXWORD_MSG_VREF_STAT_0_VREF_AVG_UPDN_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_VGA_CONTROL_6 register description at address offset 0x434
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/vga_control_6
  * placeholder
  */

typedef union {
  struct {
    uint32_t VGA_TAP : 8;
    ///< VGA tap value
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t VGA_TAP_FRAC : 8;
    ///< VGA tap fractional value
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_vga_ctrl_6_reg_t;

#define PMA_RXWORD_MSG_VGA_CTRL_6_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_VGA_CTRL_6_RD_MASK (0x0000ffffU)
#define PMA_RXWORD_MSG_VGA_CTRL_6_WR_MASK (0x0000ffffU)


///< VGA tap value
#define PMA_RXWORD_MSG_VGA_CTRL_6_VGA_TAP_BF_OFF ( 0)
#define PMA_RXWORD_MSG_VGA_CTRL_6_VGA_TAP_BF_WID ( 8)
#define PMA_RXWORD_MSG_VGA_CTRL_6_VGA_TAP_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_VGA_CTRL_6_VGA_TAP_BF_DEF (0x00000000)

///< VGA tap fractional value
#define PMA_RXWORD_MSG_VGA_CTRL_6_VGA_TAP_FRAC_BF_OFF ( 8)
#define PMA_RXWORD_MSG_VGA_CTRL_6_VGA_TAP_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_VGA_CTRL_6_VGA_TAP_FRAC_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_VGA_CTRL_6_VGA_TAP_FRAC_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_VGA_CONTROL_5 register description at address offset 0x438
  *
  * Register default value:        0x00000800
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/vga_control_5
  * placeholder
  */

typedef union {
  struct {
    uint32_t VGA_START : 1;
    ///< FW set this to 1  to start VGA adaptation
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t VGA_CONTIN_RUN : 1;
    ///< Set continous run mode for VGA adaptation, default is 0
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t VGA_SINGLE_RUN : 1;
    ///< Set single run mode for VGA adaptation, default is 0
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t VGA_STATS_ITER_MAX : 16;
    ///< In default VGA is in iteration run mode, set this iteration number
    ///< to allow HW to run how many stats iterations
    ///< AccessType="RW" BitOffset="4" ResetValue="0x80"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_vga_ctrl_5_reg_t;

#define PMA_RXWORD_MSG_VGA_CTRL_5_DEFAULT (0x00000800U)
#define PMA_RXWORD_MSG_VGA_CTRL_5_RD_MASK (0x000ffff7U)
#define PMA_RXWORD_MSG_VGA_CTRL_5_WR_MASK (0x000ffff7U)


///< FW set this to 1  to start VGA adaptation
#define PMA_RXWORD_MSG_VGA_CTRL_5_VGA_START_BF_OFF ( 0)
#define PMA_RXWORD_MSG_VGA_CTRL_5_VGA_START_BF_WID ( 1)
#define PMA_RXWORD_MSG_VGA_CTRL_5_VGA_START_BF_MSK (0x00000001)
#define PMA_RXWORD_MSG_VGA_CTRL_5_VGA_START_BF_DEF (0x00000000)

///< Set continous run mode for VGA adaptation, default is 0
#define PMA_RXWORD_MSG_VGA_CTRL_5_VGA_CONTIN_RUN_BF_OFF ( 1)
#define PMA_RXWORD_MSG_VGA_CTRL_5_VGA_CONTIN_RUN_BF_WID ( 1)
#define PMA_RXWORD_MSG_VGA_CTRL_5_VGA_CONTIN_RUN_BF_MSK (0x00000002)
#define PMA_RXWORD_MSG_VGA_CTRL_5_VGA_CONTIN_RUN_BF_DEF (0x00000000)

///< Set single run mode for VGA adaptation, default is 0
#define PMA_RXWORD_MSG_VGA_CTRL_5_VGA_SINGLE_RUN_BF_OFF ( 2)
#define PMA_RXWORD_MSG_VGA_CTRL_5_VGA_SINGLE_RUN_BF_WID ( 1)
#define PMA_RXWORD_MSG_VGA_CTRL_5_VGA_SINGLE_RUN_BF_MSK (0x00000004)
#define PMA_RXWORD_MSG_VGA_CTRL_5_VGA_SINGLE_RUN_BF_DEF (0x00000000)

///< In default VGA is in iteration run mode, set this iteration number
///< to allow HW to run how many stats iterations
#define PMA_RXWORD_MSG_VGA_CTRL_5_VGA_STATS_ITER_MAX_BF_OFF ( 4)
#define PMA_RXWORD_MSG_VGA_CTRL_5_VGA_STATS_ITER_MAX_BF_WID (16)
#define PMA_RXWORD_MSG_VGA_CTRL_5_VGA_STATS_ITER_MAX_BF_MSK (0x000FFFF0)
#define PMA_RXWORD_MSG_VGA_CTRL_5_VGA_STATS_ITER_MAX_BF_DEF (0x00000800)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_VGA_CONTROL_4 register description at address offset 0x43c
  *
  * Register default value:        0x0000807F
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/vga_control_4
  * placeholder
  */

typedef union {
  struct {
    uint32_t VGA_TAP_MAX : 8;
    ///< Max limit of the VGA tap
    ///< AccessType="RW" BitOffset="0" ResetValue="0x7F"
    uint32_t VGA_TAP_MIN : 8;
    ///< Min limit of the VGA tap
    ///< AccessType="RW" BitOffset="8" ResetValue="0x80"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_vga_ctrl_4_reg_t;

#define PMA_RXWORD_MSG_VGA_CTRL_4_DEFAULT (0x0000807fU)
#define PMA_RXWORD_MSG_VGA_CTRL_4_RD_MASK (0x0000ffffU)
#define PMA_RXWORD_MSG_VGA_CTRL_4_WR_MASK (0x0000ffffU)


///< Max limit of the VGA tap
#define PMA_RXWORD_MSG_VGA_CTRL_4_VGA_TAP_MAX_BF_OFF ( 0)
#define PMA_RXWORD_MSG_VGA_CTRL_4_VGA_TAP_MAX_BF_WID ( 8)
#define PMA_RXWORD_MSG_VGA_CTRL_4_VGA_TAP_MAX_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_VGA_CTRL_4_VGA_TAP_MAX_BF_DEF (0x0000007F)

///< Min limit of the VGA tap
#define PMA_RXWORD_MSG_VGA_CTRL_4_VGA_TAP_MIN_BF_OFF ( 8)
#define PMA_RXWORD_MSG_VGA_CTRL_4_VGA_TAP_MIN_BF_WID ( 8)
#define PMA_RXWORD_MSG_VGA_CTRL_4_VGA_TAP_MIN_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_VGA_CTRL_4_VGA_TAP_MIN_BF_DEF (0x00008000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_VGA_CONTROL_0 register description at address offset 0x440
  *
  * Register default value:        0x60004104
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/vga_control_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t VGA_UPDN_INV_CB : 1;
    ///< Chicken bit to invert up/down
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t VGA_HOLD_EN : 1;
    ///< Hold VGA tap accumulator
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t VGA_COARSE_MU_EN : 1;
    ///< Select between coarse and fine update gains
    ///< AccessType="RW" BitOffset="2" ResetValue="0x1"
    uint32_t VGA_MU_COARSE : 8;
    ///< Update gain with coarse steps
    ///< AccessType="RW" BitOffset="3" ResetValue="0x20"
    uint32_t VGA_MU_FINE : 8;
    ///< Update gain with fine steps
    ///< AccessType="RW" BitOffset="11" ResetValue="0x8"
    uint32_t VGA_MODE : 1;
    ///< Mode of VGA adaptation: 0 outer range persantage, 1: outer range VREF
    ///< defined
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t VGA_INIT_VAL : 8;
    ///< Initial value for VGA taps
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t VGA_INIT_EN : 1;
    ///< Enable load Initial value for VGA tap
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t VGA_PRELD_EN : 1;
    ///< Enable preload VGA taps
    ///< AccessType="RW" BitOffset="29" ResetValue="0x1"
    uint32_t VGA_FSM_EN : 1;
    ///< Enable VGA FSM
    ///< AccessType="RW" BitOffset="30" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_vga_ctrl_0_reg_t;

#define PMA_RXWORD_MSG_VGA_CTRL_0_DEFAULT (0x60004104U)
#define PMA_RXWORD_MSG_VGA_CTRL_0_RD_MASK (0x7fffffffU)
#define PMA_RXWORD_MSG_VGA_CTRL_0_WR_MASK (0x7fffffffU)


///< Chicken bit to invert up/down
#define PMA_RXWORD_MSG_VGA_CTRL_0_VGA_UPDN_INV_CB_BF_OFF ( 0)
#define PMA_RXWORD_MSG_VGA_CTRL_0_VGA_UPDN_INV_CB_BF_WID ( 1)
#define PMA_RXWORD_MSG_VGA_CTRL_0_VGA_UPDN_INV_CB_BF_MSK (0x00000001)
#define PMA_RXWORD_MSG_VGA_CTRL_0_VGA_UPDN_INV_CB_BF_DEF (0x00000000)

///< Hold VGA tap accumulator
#define PMA_RXWORD_MSG_VGA_CTRL_0_VGA_HOLD_EN_BF_OFF ( 1)
#define PMA_RXWORD_MSG_VGA_CTRL_0_VGA_HOLD_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_VGA_CTRL_0_VGA_HOLD_EN_BF_MSK (0x00000002)
#define PMA_RXWORD_MSG_VGA_CTRL_0_VGA_HOLD_EN_BF_DEF (0x00000000)

///< Select between coarse and fine update gains
#define PMA_RXWORD_MSG_VGA_CTRL_0_VGA_COARSE_MU_EN_BF_OFF ( 2)
#define PMA_RXWORD_MSG_VGA_CTRL_0_VGA_COARSE_MU_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_VGA_CTRL_0_VGA_COARSE_MU_EN_BF_MSK (0x00000004)
#define PMA_RXWORD_MSG_VGA_CTRL_0_VGA_COARSE_MU_EN_BF_DEF (0x00000004)

///< Update gain with coarse steps
#define PMA_RXWORD_MSG_VGA_CTRL_0_VGA_MU_COARSE_BF_OFF ( 3)
#define PMA_RXWORD_MSG_VGA_CTRL_0_VGA_MU_COARSE_BF_WID ( 8)
#define PMA_RXWORD_MSG_VGA_CTRL_0_VGA_MU_COARSE_BF_MSK (0x000007F8)
#define PMA_RXWORD_MSG_VGA_CTRL_0_VGA_MU_COARSE_BF_DEF (0x00000100)

///< Update gain with fine steps
#define PMA_RXWORD_MSG_VGA_CTRL_0_VGA_MU_FINE_BF_OFF (11)
#define PMA_RXWORD_MSG_VGA_CTRL_0_VGA_MU_FINE_BF_WID ( 8)
#define PMA_RXWORD_MSG_VGA_CTRL_0_VGA_MU_FINE_BF_MSK (0x0007F800)
#define PMA_RXWORD_MSG_VGA_CTRL_0_VGA_MU_FINE_BF_DEF (0x00004000)

///< Mode of VGA adaptation: 0 outer range persantage, 1: outer range VREF
///< defined
#define PMA_RXWORD_MSG_VGA_CTRL_0_VGA_MODE_BF_OFF (19)
#define PMA_RXWORD_MSG_VGA_CTRL_0_VGA_MODE_BF_WID ( 1)
#define PMA_RXWORD_MSG_VGA_CTRL_0_VGA_MODE_BF_MSK (0x00080000)
#define PMA_RXWORD_MSG_VGA_CTRL_0_VGA_MODE_BF_DEF (0x00000000)

///< Initial value for VGA taps
#define PMA_RXWORD_MSG_VGA_CTRL_0_VGA_INIT_VAL_BF_OFF (20)
#define PMA_RXWORD_MSG_VGA_CTRL_0_VGA_INIT_VAL_BF_WID ( 8)
#define PMA_RXWORD_MSG_VGA_CTRL_0_VGA_INIT_VAL_BF_MSK (0x0FF00000)
#define PMA_RXWORD_MSG_VGA_CTRL_0_VGA_INIT_VAL_BF_DEF (0x00000000)

///< Enable load Initial value for VGA tap
#define PMA_RXWORD_MSG_VGA_CTRL_0_VGA_INIT_EN_BF_OFF (28)
#define PMA_RXWORD_MSG_VGA_CTRL_0_VGA_INIT_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_VGA_CTRL_0_VGA_INIT_EN_BF_MSK (0x10000000)
#define PMA_RXWORD_MSG_VGA_CTRL_0_VGA_INIT_EN_BF_DEF (0x00000000)

///< Enable preload VGA taps
#define PMA_RXWORD_MSG_VGA_CTRL_0_VGA_PRELD_EN_BF_OFF (29)
#define PMA_RXWORD_MSG_VGA_CTRL_0_VGA_PRELD_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_VGA_CTRL_0_VGA_PRELD_EN_BF_MSK (0x20000000)
#define PMA_RXWORD_MSG_VGA_CTRL_0_VGA_PRELD_EN_BF_DEF (0x20000000)

///< Enable VGA FSM
#define PMA_RXWORD_MSG_VGA_CTRL_0_VGA_FSM_EN_BF_OFF (30)
#define PMA_RXWORD_MSG_VGA_CTRL_0_VGA_FSM_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_VGA_CTRL_0_VGA_FSM_EN_BF_MSK (0x40000000)
#define PMA_RXWORD_MSG_VGA_CTRL_0_VGA_FSM_EN_BF_DEF (0x40000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_VGA_CONTROL_1 register description at address offset 0x444
  *
  * Register default value:        0x00004080
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/vga_control_1
  * placeholder
  */

typedef union {
  struct {
    uint32_t VGA_STATS_MAX : 10;
    ///< VGA stats counter threshold
    ///< AccessType="RW" BitOffset="0" ResetValue="0x80"
    uint32_t VGA_TIMER_MAX : 8;
    ///< VGA delay timer threshold
    ///< AccessType="RW" BitOffset="10" ResetValue="0x10"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_vga_ctrl_1_reg_t;

#define PMA_RXWORD_MSG_VGA_CTRL_1_DEFAULT (0x00004080U)
#define PMA_RXWORD_MSG_VGA_CTRL_1_RD_MASK (0x0003ffffU)
#define PMA_RXWORD_MSG_VGA_CTRL_1_WR_MASK (0x0003ffffU)


///< VGA stats counter threshold
#define PMA_RXWORD_MSG_VGA_CTRL_1_VGA_STATS_MAX_BF_OFF ( 0)
#define PMA_RXWORD_MSG_VGA_CTRL_1_VGA_STATS_MAX_BF_WID (10)
#define PMA_RXWORD_MSG_VGA_CTRL_1_VGA_STATS_MAX_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_VGA_CTRL_1_VGA_STATS_MAX_BF_DEF (0x00000080)

///< VGA delay timer threshold
#define PMA_RXWORD_MSG_VGA_CTRL_1_VGA_TIMER_MAX_BF_OFF (10)
#define PMA_RXWORD_MSG_VGA_CTRL_1_VGA_TIMER_MAX_BF_WID ( 8)
#define PMA_RXWORD_MSG_VGA_CTRL_1_VGA_TIMER_MAX_BF_MSK (0x0003FC00)
#define PMA_RXWORD_MSG_VGA_CTRL_1_VGA_TIMER_MAX_BF_DEF (0x00004000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_VGA_CONTROL_2 register description at address offset 0x448
  *
  * Register default value:        0x3C013F04
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/vga_control_2
  * placeholder
  */

typedef union {
  struct {
    uint32_t VGA_LIMIT_HIGH_0 : 6;
    ///< Tap range limit high 0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x4"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t VGA_LIMIT_HIGH_1 : 6;
    ///< Tap range limit high 1
    ///< AccessType="RW" BitOffset="8" ResetValue="0x3F"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t VGA_LIMIT_LOW_0 : 6;
    ///< Tap range limit low 0
    ///< AccessType="RW" BitOffset="16" ResetValue="0x1"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t VGA_LIMIT_LOW_1 : 6;
    ///< Tap range limit low 1
    ///< AccessType="RW" BitOffset="24" ResetValue="0x3C"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_vga_ctrl_2_reg_t;

#define PMA_RXWORD_MSG_VGA_CTRL_2_DEFAULT (0x3c013f04U)
#define PMA_RXWORD_MSG_VGA_CTRL_2_RD_MASK (0x3f3f3f3fU)
#define PMA_RXWORD_MSG_VGA_CTRL_2_WR_MASK (0x3f3f3f3fU)


///< Tap range limit high 0
#define PMA_RXWORD_MSG_VGA_CTRL_2_VGA_LIMIT_HIGH_0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_VGA_CTRL_2_VGA_LIMIT_HIGH_0_BF_WID ( 6)
#define PMA_RXWORD_MSG_VGA_CTRL_2_VGA_LIMIT_HIGH_0_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_VGA_CTRL_2_VGA_LIMIT_HIGH_0_BF_DEF (0x00000004)

///< Tap range limit high 1
#define PMA_RXWORD_MSG_VGA_CTRL_2_VGA_LIMIT_HIGH_1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_VGA_CTRL_2_VGA_LIMIT_HIGH_1_BF_WID ( 6)
#define PMA_RXWORD_MSG_VGA_CTRL_2_VGA_LIMIT_HIGH_1_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_VGA_CTRL_2_VGA_LIMIT_HIGH_1_BF_DEF (0x00003F00)

///< Tap range limit low 0
#define PMA_RXWORD_MSG_VGA_CTRL_2_VGA_LIMIT_LOW_0_BF_OFF (16)
#define PMA_RXWORD_MSG_VGA_CTRL_2_VGA_LIMIT_LOW_0_BF_WID ( 6)
#define PMA_RXWORD_MSG_VGA_CTRL_2_VGA_LIMIT_LOW_0_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_VGA_CTRL_2_VGA_LIMIT_LOW_0_BF_DEF (0x00010000)

///< Tap range limit low 1
#define PMA_RXWORD_MSG_VGA_CTRL_2_VGA_LIMIT_LOW_1_BF_OFF (24)
#define PMA_RXWORD_MSG_VGA_CTRL_2_VGA_LIMIT_LOW_1_BF_WID ( 6)
#define PMA_RXWORD_MSG_VGA_CTRL_2_VGA_LIMIT_LOW_1_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_VGA_CTRL_2_VGA_LIMIT_LOW_1_BF_DEF (0x3C000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_VGA_CONTROL_3 register description at address offset 0x44c
  *
  * Register default value:        0x00000050
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/vga_control_3
  * placeholder
  */

typedef union {
  struct {
    uint32_t VGA_THRESHOLD : 12;
    ///< VGA bin accumulator threshold
    ///< AccessType="RW" BitOffset="0" ResetValue="0x50"
    uint32_t VGA_MASK : 16;
    ///< Exclude desired masks from VGA stats calculation
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t VGA_SMPL_SEL : 2;
    ///< select line of samples x16
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_vga_ctrl_3_reg_t;

#define PMA_RXWORD_MSG_VGA_CTRL_3_DEFAULT (0x00000050U)
#define PMA_RXWORD_MSG_VGA_CTRL_3_RD_MASK (0x3fffffffU)
#define PMA_RXWORD_MSG_VGA_CTRL_3_WR_MASK (0x3fffffffU)


///< VGA bin accumulator threshold
#define PMA_RXWORD_MSG_VGA_CTRL_3_VGA_TSHOLD_BF_OFF ( 0)
#define PMA_RXWORD_MSG_VGA_CTRL_3_VGA_TSHOLD_BF_WID (12)
#define PMA_RXWORD_MSG_VGA_CTRL_3_VGA_TSHOLD_BF_MSK (0x00000FFF)
#define PMA_RXWORD_MSG_VGA_CTRL_3_VGA_TSHOLD_BF_DEF (0x00000050)

///< Exclude desired masks from VGA stats calculation
#define PMA_RXWORD_MSG_VGA_CTRL_3_VGA_MASK_BF_OFF (12)
#define PMA_RXWORD_MSG_VGA_CTRL_3_VGA_MASK_BF_WID (16)
#define PMA_RXWORD_MSG_VGA_CTRL_3_VGA_MASK_BF_MSK (0x0FFFF000)
#define PMA_RXWORD_MSG_VGA_CTRL_3_VGA_MASK_BF_DEF (0x00000000)

///< select line of samples x16
#define PMA_RXWORD_MSG_VGA_CTRL_3_VGA_SMPL_SEL_BF_OFF (28)
#define PMA_RXWORD_MSG_VGA_CTRL_3_VGA_SMPL_SEL_BF_WID ( 2)
#define PMA_RXWORD_MSG_VGA_CTRL_3_VGA_SMPL_SEL_BF_MSK (0x30000000)
#define PMA_RXWORD_MSG_VGA_CTRL_3_VGA_SMPL_SEL_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_VGA_STATUS_0 register description at address offset 0x450
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/vga_status_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t VGA_DONE : 1;
    ///< VGA done status, also serve as IRQ event
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
    uint32_t VGA_AVG_UPDN : 1;
    ///< Up-Down decision
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_vga_stat_0_reg_t;

#define PMA_RXWORD_MSG_VGA_STAT_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_VGA_STAT_0_RD_MASK (0x00000201U)
#define PMA_RXWORD_MSG_VGA_STAT_0_WR_MASK (0x00000000U)


///< VGA done status, also serve as IRQ event
#define PMA_RXWORD_MSG_VGA_STAT_0_VGA_DONE_BF_OFF ( 0)
#define PMA_RXWORD_MSG_VGA_STAT_0_VGA_DONE_BF_WID ( 1)
#define PMA_RXWORD_MSG_VGA_STAT_0_VGA_DONE_BF_MSK (0x00000001)
#define PMA_RXWORD_MSG_VGA_STAT_0_VGA_DONE_BF_DEF (0x00000000)

///< Up-Down decision
#define PMA_RXWORD_MSG_VGA_STAT_0_VGA_AVG_UPDN_BF_OFF ( 9)
#define PMA_RXWORD_MSG_VGA_STAT_0_VGA_AVG_UPDN_BF_WID ( 1)
#define PMA_RXWORD_MSG_VGA_STAT_0_VGA_AVG_UPDN_BF_MSK (0x00000200)
#define PMA_RXWORD_MSG_VGA_STAT_0_VGA_AVG_UPDN_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_JPP_CONTROL_1 register description at address offset 0x454
  *
  * Register default value:        0x00000100
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/jpp_control_1
  * placeholder
  */

typedef union {
  struct {
    uint32_t JPP_AFFE_OFFSET : 7;
    ///< JPP aFFE offset
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t JPP_AFFE_GAIN : 7;
    ///< JPP aFFE gain
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t JPP_AFFE_EN : 1;
    ///< Enable aFFE JPP function
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_jpp_ctrl_1_reg_t;

#define PMA_RXWORD_MSG_JPP_CTRL_1_DEFAULT (0x00000100U)
#define PMA_RXWORD_MSG_JPP_CTRL_1_RD_MASK (0x00017f7fU)
#define PMA_RXWORD_MSG_JPP_CTRL_1_WR_MASK (0x00017f7fU)


///< JPP aFFE offset
#define PMA_RXWORD_MSG_JPP_CTRL_1_JPP_AFFE_OFFSET_BF_OFF ( 0)
#define PMA_RXWORD_MSG_JPP_CTRL_1_JPP_AFFE_OFFSET_BF_WID ( 7)
#define PMA_RXWORD_MSG_JPP_CTRL_1_JPP_AFFE_OFFSET_BF_MSK (0x0000007F)
#define PMA_RXWORD_MSG_JPP_CTRL_1_JPP_AFFE_OFFSET_BF_DEF (0x00000000)

///< JPP aFFE gain
#define PMA_RXWORD_MSG_JPP_CTRL_1_JPP_AFFE_GAIN_BF_OFF ( 8)
#define PMA_RXWORD_MSG_JPP_CTRL_1_JPP_AFFE_GAIN_BF_WID ( 7)
#define PMA_RXWORD_MSG_JPP_CTRL_1_JPP_AFFE_GAIN_BF_MSK (0x00007F00)
#define PMA_RXWORD_MSG_JPP_CTRL_1_JPP_AFFE_GAIN_BF_DEF (0x00000100)

///< Enable aFFE JPP function
#define PMA_RXWORD_MSG_JPP_CTRL_1_JPP_AFFE_EN_BF_OFF (16)
#define PMA_RXWORD_MSG_JPP_CTRL_1_JPP_AFFE_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_JPP_CTRL_1_JPP_AFFE_EN_BF_MSK (0x00010000)
#define PMA_RXWORD_MSG_JPP_CTRL_1_JPP_AFFE_EN_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_JPP_CONTROL_2 register description at address offset 0x458
  *
  * Register default value:        0x00000100
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/jpp_control_2
  * placeholder
  */

typedef union {
  struct {
    uint32_t JPP_CDR_FFE_OFFSET : 8;
    ///< JPP CDR_FFE offset
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t JPP_CDR_FFE_GAIN : 8;
    ///< JPP CDR_FFE gain
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1"
    uint32_t JPP_CDR_FFE_EN : 1;
    ///< Enable CDR_FFE JPP function
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_jpp_ctrl_2_reg_t;

#define PMA_RXWORD_MSG_JPP_CTRL_2_DEFAULT (0x00000100U)
#define PMA_RXWORD_MSG_JPP_CTRL_2_RD_MASK (0x0001ffffU)
#define PMA_RXWORD_MSG_JPP_CTRL_2_WR_MASK (0x0001ffffU)


///< JPP CDR_FFE offset
#define PMA_RXWORD_MSG_JPP_CTRL_2_JPP_CDR_FFE_OFFSET_BF_OFF ( 0)
#define PMA_RXWORD_MSG_JPP_CTRL_2_JPP_CDR_FFE_OFFSET_BF_WID ( 8)
#define PMA_RXWORD_MSG_JPP_CTRL_2_JPP_CDR_FFE_OFFSET_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_JPP_CTRL_2_JPP_CDR_FFE_OFFSET_BF_DEF (0x00000000)

///< JPP CDR_FFE gain
#define PMA_RXWORD_MSG_JPP_CTRL_2_JPP_CDR_FFE_GAIN_BF_OFF ( 8)
#define PMA_RXWORD_MSG_JPP_CTRL_2_JPP_CDR_FFE_GAIN_BF_WID ( 8)
#define PMA_RXWORD_MSG_JPP_CTRL_2_JPP_CDR_FFE_GAIN_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_JPP_CTRL_2_JPP_CDR_FFE_GAIN_BF_DEF (0x00000100)

///< Enable CDR_FFE JPP function
#define PMA_RXWORD_MSG_JPP_CTRL_2_JPP_CDR_FFE_EN_BF_OFF (16)
#define PMA_RXWORD_MSG_JPP_CTRL_2_JPP_CDR_FFE_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_JPP_CTRL_2_JPP_CDR_FFE_EN_BF_MSK (0x00010000)
#define PMA_RXWORD_MSG_JPP_CTRL_2_JPP_CDR_FFE_EN_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_CONTROL_0 register description at address offset 0x460
  *
  * Register default value:        0x00010020
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_control_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_UPDN_INV_CB : 1;
    ///< Chicken bit to invert up/down
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_TIMER_MAX : 8;
    ///< FFE delay timer threshold
    ///< AccessType="RW" BitOffset="1" ResetValue="0x10"
    uint32_t FFE_STATS_MAX : 10;
    ///< FFE stats counter threshold
    ///< AccessType="RW" BitOffset="9" ResetValue="0x80"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_ctrl_0_reg_t;

#define PMA_RXWORD_MSG_FFE_CTRL_0_DEFAULT (0x00010020U)
#define PMA_RXWORD_MSG_FFE_CTRL_0_RD_MASK (0x0007ffffU)
#define PMA_RXWORD_MSG_FFE_CTRL_0_WR_MASK (0x0007ffffU)


///< Chicken bit to invert up/down
#define PMA_RXWORD_MSG_FFE_CTRL_0_FFE_UPDN_INV_CB_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_CTRL_0_FFE_UPDN_INV_CB_BF_WID ( 1)
#define PMA_RXWORD_MSG_FFE_CTRL_0_FFE_UPDN_INV_CB_BF_MSK (0x00000001)
#define PMA_RXWORD_MSG_FFE_CTRL_0_FFE_UPDN_INV_CB_BF_DEF (0x00000000)

///< FFE delay timer threshold
#define PMA_RXWORD_MSG_FFE_CTRL_0_FFE_TIMER_MAX_BF_OFF ( 1)
#define PMA_RXWORD_MSG_FFE_CTRL_0_FFE_TIMER_MAX_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_CTRL_0_FFE_TIMER_MAX_BF_MSK (0x000001FE)
#define PMA_RXWORD_MSG_FFE_CTRL_0_FFE_TIMER_MAX_BF_DEF (0x00000020)

///< FFE stats counter threshold
#define PMA_RXWORD_MSG_FFE_CTRL_0_FFE_STATS_MAX_BF_OFF ( 9)
#define PMA_RXWORD_MSG_FFE_CTRL_0_FFE_STATS_MAX_BF_WID (10)
#define PMA_RXWORD_MSG_FFE_CTRL_0_FFE_STATS_MAX_BF_MSK (0x0007FE00)
#define PMA_RXWORD_MSG_FFE_CTRL_0_FFE_STATS_MAX_BF_DEF (0x00010000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_CONTROL_1 register description at address offset 0x464
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_control_1
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_STATIC_HOLD_EN : 15;
    ///< Hold static taps accumulators
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_FLOAT_HOLD_EN : 9;
    ///< Hold floating taps accumulators
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_ctrl_1_reg_t;

#define PMA_RXWORD_MSG_FFE_CTRL_1_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_CTRL_1_RD_MASK (0x00ffffffU)
#define PMA_RXWORD_MSG_FFE_CTRL_1_WR_MASK (0x00ffffffU)


///< Hold static taps accumulators
#define PMA_RXWORD_MSG_FFE_CTRL_1_FFE_STATIC_HOLD_EN_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_CTRL_1_FFE_STATIC_HOLD_EN_BF_WID (15)
#define PMA_RXWORD_MSG_FFE_CTRL_1_FFE_STATIC_HOLD_EN_BF_MSK (0x00007FFF)
#define PMA_RXWORD_MSG_FFE_CTRL_1_FFE_STATIC_HOLD_EN_BF_DEF (0x00000000)

///< Hold floating taps accumulators
#define PMA_RXWORD_MSG_FFE_CTRL_1_FFE_FLOAT_HOLD_EN_BF_OFF (15)
#define PMA_RXWORD_MSG_FFE_CTRL_1_FFE_FLOAT_HOLD_EN_BF_WID ( 9)
#define PMA_RXWORD_MSG_FFE_CTRL_1_FFE_FLOAT_HOLD_EN_BF_MSK (0x00FF8000)
#define PMA_RXWORD_MSG_FFE_CTRL_1_FFE_FLOAT_HOLD_EN_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_CONTROL_2 register description at address offset 0x468
  *
  * Register default value:        0x00010410
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_control_2
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_MU_COARSE : 8;
    ///< Update gain coarse value
    ///< AccessType="RW" BitOffset="0" ResetValue="0x10"
    uint32_t FFE_MU_FINE : 8;
    ///< Update gain fine value
    ///< AccessType="RW" BitOffset="8" ResetValue="0x4"
    uint32_t FFE_COARSE_MU_EN : 1;
    ///< Select between coarse and fine update gains
    ///< AccessType="RW" BitOffset="16" ResetValue="0x1"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_ctrl_2_reg_t;

#define PMA_RXWORD_MSG_FFE_CTRL_2_DEFAULT (0x00010410U)
#define PMA_RXWORD_MSG_FFE_CTRL_2_RD_MASK (0x0001ffffU)
#define PMA_RXWORD_MSG_FFE_CTRL_2_WR_MASK (0x0001ffffU)


///< Update gain coarse value
#define PMA_RXWORD_MSG_FFE_CTRL_2_FFE_MU_COARSE_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_CTRL_2_FFE_MU_COARSE_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_CTRL_2_FFE_MU_COARSE_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_CTRL_2_FFE_MU_COARSE_BF_DEF (0x00000010)

///< Update gain fine value
#define PMA_RXWORD_MSG_FFE_CTRL_2_FFE_MU_FINE_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_CTRL_2_FFE_MU_FINE_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_CTRL_2_FFE_MU_FINE_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_CTRL_2_FFE_MU_FINE_BF_DEF (0x00000400)

///< Select between coarse and fine update gains
#define PMA_RXWORD_MSG_FFE_CTRL_2_FFE_COARSE_MU_EN_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_CTRL_2_FFE_COARSE_MU_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_FFE_CTRL_2_FFE_COARSE_MU_EN_BF_MSK (0x00010000)
#define PMA_RXWORD_MSG_FFE_CTRL_2_FFE_COARSE_MU_EN_BF_DEF (0x00010000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_CONTROL_3 register description at address offset 0x46c
  *
  * Register default value:        0x0C03F81F
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_control_3
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_STATIC_TAP_MAX_W0 : 6;
    ///< update accum saturation at max static width
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1F"
    uint32_t FFE_STATIC_TAP_MIN_W0 : 6;
    ///< update accum saturation at min static width
    ///< AccessType="RW" BitOffset="6" ResetValue="0x20"
    uint32_t FFE_STATIC_TAP_MAX_W1 : 8;
    ///< update accum saturation at max static width
    ///< AccessType="RW" BitOffset="12" ResetValue="0x3F"
    uint32_t FFE_STATIC_TAP_MIN_W1 : 8;
    ///< update accum saturation at min static width
    ///< AccessType="RW" BitOffset="20" ResetValue="0xC0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_ctrl_3_reg_t;

#define PMA_RXWORD_MSG_FFE_CTRL_3_DEFAULT (0x0c03f81fU)
#define PMA_RXWORD_MSG_FFE_CTRL_3_RD_MASK (0x0fffffffU)
#define PMA_RXWORD_MSG_FFE_CTRL_3_WR_MASK (0x0fffffffU)


///< update accum saturation at max static width
#define PMA_RXWORD_MSG_FFE_CTRL_3_FFE_STATIC_TAP_MAX_W0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_CTRL_3_FFE_STATIC_TAP_MAX_W0_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_CTRL_3_FFE_STATIC_TAP_MAX_W0_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_FFE_CTRL_3_FFE_STATIC_TAP_MAX_W0_BF_DEF (0x0000001F)

///< update accum saturation at min static width
#define PMA_RXWORD_MSG_FFE_CTRL_3_FFE_STATIC_TAP_MIN_W0_BF_OFF ( 6)
#define PMA_RXWORD_MSG_FFE_CTRL_3_FFE_STATIC_TAP_MIN_W0_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_CTRL_3_FFE_STATIC_TAP_MIN_W0_BF_MSK (0x00000FC0)
#define PMA_RXWORD_MSG_FFE_CTRL_3_FFE_STATIC_TAP_MIN_W0_BF_DEF (0x00000800)

///< update accum saturation at max static width
#define PMA_RXWORD_MSG_FFE_CTRL_3_FFE_STATIC_TAP_MAX_W1_BF_OFF (12)
#define PMA_RXWORD_MSG_FFE_CTRL_3_FFE_STATIC_TAP_MAX_W1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_CTRL_3_FFE_STATIC_TAP_MAX_W1_BF_MSK (0x000FF000)
#define PMA_RXWORD_MSG_FFE_CTRL_3_FFE_STATIC_TAP_MAX_W1_BF_DEF (0x0003F000)

///< update accum saturation at min static width
#define PMA_RXWORD_MSG_FFE_CTRL_3_FFE_STATIC_TAP_MIN_W1_BF_OFF (20)
#define PMA_RXWORD_MSG_FFE_CTRL_3_FFE_STATIC_TAP_MIN_W1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_CTRL_3_FFE_STATIC_TAP_MIN_W1_BF_MSK (0x0FF00000)
#define PMA_RXWORD_MSG_FFE_CTRL_3_FFE_STATIC_TAP_MIN_W1_BF_DEF (0x0C000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_CONTROL_4 register description at address offset 0x470
  *
  * Register default value:        0x00008787
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_control_4
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_STATIC_TAP_MAX_W2 : 4;
    ///< update accum saturation at max static width
    ///< AccessType="RW" BitOffset="0" ResetValue="0x7"
    uint32_t FFE_STATIC_TAP_MIN_W2 : 4;
    ///< update accum saturation at min static width
    ///< AccessType="RW" BitOffset="4" ResetValue="0x8"
    uint32_t FFE_FLOATING_TAP_MAX : 4;
    ///< update accum saturation at max floating
    ///< AccessType="RW" BitOffset="8" ResetValue="0x7"
    uint32_t FFE_FLOATING_TAP_MIN : 4;
    ///< update accum saturation at min floating
    ///< AccessType="RW" BitOffset="12" ResetValue="0x8"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_ctrl_4_reg_t;

#define PMA_RXWORD_MSG_FFE_CTRL_4_DEFAULT (0x00008787U)
#define PMA_RXWORD_MSG_FFE_CTRL_4_RD_MASK (0x0000ffffU)
#define PMA_RXWORD_MSG_FFE_CTRL_4_WR_MASK (0x0000ffffU)


///< update accum saturation at max static width
#define PMA_RXWORD_MSG_FFE_CTRL_4_FFE_STATIC_TAP_MAX_W2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_CTRL_4_FFE_STATIC_TAP_MAX_W2_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_CTRL_4_FFE_STATIC_TAP_MAX_W2_BF_MSK (0x0000000F)
#define PMA_RXWORD_MSG_FFE_CTRL_4_FFE_STATIC_TAP_MAX_W2_BF_DEF (0x00000007)

///< update accum saturation at min static width
#define PMA_RXWORD_MSG_FFE_CTRL_4_FFE_STATIC_TAP_MIN_W2_BF_OFF ( 4)
#define PMA_RXWORD_MSG_FFE_CTRL_4_FFE_STATIC_TAP_MIN_W2_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_CTRL_4_FFE_STATIC_TAP_MIN_W2_BF_MSK (0x000000F0)
#define PMA_RXWORD_MSG_FFE_CTRL_4_FFE_STATIC_TAP_MIN_W2_BF_DEF (0x00000080)

///< update accum saturation at max floating
#define PMA_RXWORD_MSG_FFE_CTRL_4_FFE_FLOATING_TAP_MAX_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_CTRL_4_FFE_FLOATING_TAP_MAX_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_CTRL_4_FFE_FLOATING_TAP_MAX_BF_MSK (0x00000F00)
#define PMA_RXWORD_MSG_FFE_CTRL_4_FFE_FLOATING_TAP_MAX_BF_DEF (0x00000700)

///< update accum saturation at min floating
#define PMA_RXWORD_MSG_FFE_CTRL_4_FFE_FLOATING_TAP_MIN_BF_OFF (12)
#define PMA_RXWORD_MSG_FFE_CTRL_4_FFE_FLOATING_TAP_MIN_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_CTRL_4_FFE_FLOATING_TAP_MIN_BF_MSK (0x0000F000)
#define PMA_RXWORD_MSG_FFE_CTRL_4_FFE_FLOATING_TAP_MIN_BF_DEF (0x00008000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_CONTROL_5 register description at address offset 0x474
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_control_5
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_INIT_VAL_STATIC_W0 : 6;
    ///< Initial value for the FFE Static Coefficients w0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_INIT_VAL_STATIC_W1 : 8;
    ///< Initial value for the FFE Static Coefficients w1
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t FFE_INIT_VAL_STATIC_W2 : 4;
    ///< Initial value for the FFE Static Coefficients w2
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t FFE_INIT_VAL_FLOATING : 4;
    ///< Initial value for the FFE Floating Coefficients
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_ctrl_5_reg_t;

#define PMA_RXWORD_MSG_FFE_CTRL_5_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_CTRL_5_RD_MASK (0x003fffffU)
#define PMA_RXWORD_MSG_FFE_CTRL_5_WR_MASK (0x003fffffU)


///< Initial value for the FFE Static Coefficients w0
#define PMA_RXWORD_MSG_FFE_CTRL_5_FFE_INIT_VAL_STATIC_W0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_CTRL_5_FFE_INIT_VAL_STATIC_W0_BF_WID ( 6)
#define PMA_RXWORD_MSG_FFE_CTRL_5_FFE_INIT_VAL_STATIC_W0_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_FFE_CTRL_5_FFE_INIT_VAL_STATIC_W0_BF_DEF (0x00000000)

///< Initial value for the FFE Static Coefficients w1
#define PMA_RXWORD_MSG_FFE_CTRL_5_FFE_INIT_VAL_STATIC_W1_BF_OFF ( 6)
#define PMA_RXWORD_MSG_FFE_CTRL_5_FFE_INIT_VAL_STATIC_W1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_CTRL_5_FFE_INIT_VAL_STATIC_W1_BF_MSK (0x00003FC0)
#define PMA_RXWORD_MSG_FFE_CTRL_5_FFE_INIT_VAL_STATIC_W1_BF_DEF (0x00000000)

///< Initial value for the FFE Static Coefficients w2
#define PMA_RXWORD_MSG_FFE_CTRL_5_FFE_INIT_VAL_STATIC_W2_BF_OFF (14)
#define PMA_RXWORD_MSG_FFE_CTRL_5_FFE_INIT_VAL_STATIC_W2_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_CTRL_5_FFE_INIT_VAL_STATIC_W2_BF_MSK (0x0003C000)
#define PMA_RXWORD_MSG_FFE_CTRL_5_FFE_INIT_VAL_STATIC_W2_BF_DEF (0x00000000)

///< Initial value for the FFE Floating Coefficients
#define PMA_RXWORD_MSG_FFE_CTRL_5_FFE_INIT_VAL_FLOATING_BF_OFF (18)
#define PMA_RXWORD_MSG_FFE_CTRL_5_FFE_INIT_VAL_FLOATING_BF_WID ( 4)
#define PMA_RXWORD_MSG_FFE_CTRL_5_FFE_INIT_VAL_FLOATING_BF_MSK (0x003C0000)
#define PMA_RXWORD_MSG_FFE_CTRL_5_FFE_INIT_VAL_FLOATING_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_STATUS_0 register description at address offset 0x47c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_status_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_AVG_UPDN : 24;
    ///< Up-Down decisions per tap
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_stat_0_reg_t;

#define PMA_RXWORD_MSG_FFE_STAT_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_STAT_0_RD_MASK (0x00ffffffU)
#define PMA_RXWORD_MSG_FFE_STAT_0_WR_MASK (0x00000000U)


///< Up-Down decisions per tap
#define PMA_RXWORD_MSG_FFE_STAT_0_FFE_AVG_UPDN_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_STAT_0_FFE_AVG_UPDN_BF_WID (24)
#define PMA_RXWORD_MSG_FFE_STAT_0_FFE_AVG_UPDN_BF_MSK (0x00FFFFFF)
#define PMA_RXWORD_MSG_FFE_STAT_0_FFE_AVG_UPDN_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_HIST_CONTROL_0 register description at address offset 0x490
  *
  * Register default value:        0x00000FFF
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/hist_control_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t HIST_BIN_MAX : 12;
    ///< Bin saturation limit
    ///< AccessType="RW" BitOffset="0" ResetValue="0xFFF"
    uint32_t HIST_CALC_EN : 1;
    ///< Enable calculations of Min, Max, FOM, SNR
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t HIST_FFESMPL_SEL : 2;
    ///< Select FFE hextet for the histogram
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t HIST_FILTER_EN : 1;
    ///< Filter enabled (must be disabled for NRZ)
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t HIST_MAX_CLR : 1;
    ///< Enable min values calculations
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t HIST_MAX_EN : 1;
    ///< Clear min values calculations
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t HIST_MIN_CLR : 1;
    ///< Enable max values calculations
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t HIST_MIN_EN : 1;
    ///< Clear max values calculations
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t HIST_ENG_START : 1;
    ///< Start histogram engine request
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t HIST_STREAM_SEL : 1;
    ///< Select data to histogram collection
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t HIST_TIMER_MAX : 4;
    ///< Delay timer threshold for FSM
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t HIST_ADC_SMPL_SEL : 2;
    ///< Select ADC samples for histogram engine
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t HIST_SLC_SMPL_SEL : 2;
    ///< Select Slicer samples for SNR calculation
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_hist_ctrl_0_reg_t;

#define PMA_RXWORD_MSG_HIST_CTRL_0_DEFAULT (0x00000fffU)
#define PMA_RXWORD_MSG_HIST_CTRL_0_RD_MASK (0xfffe7fffU)
#define PMA_RXWORD_MSG_HIST_CTRL_0_WR_MASK (0xfffe7fffU)


///< Bin saturation limit
#define PMA_RXWORD_MSG_HIST_CTRL_0_HIST_BIN_MAX_BF_OFF ( 0)
#define PMA_RXWORD_MSG_HIST_CTRL_0_HIST_BIN_MAX_BF_WID (12)
#define PMA_RXWORD_MSG_HIST_CTRL_0_HIST_BIN_MAX_BF_MSK (0x00000FFF)
#define PMA_RXWORD_MSG_HIST_CTRL_0_HIST_BIN_MAX_BF_DEF (0x00000FFF)

///< Enable calculations of Min, Max, FOM, SNR
#define PMA_RXWORD_MSG_HIST_CTRL_0_HIST_CALC_EN_BF_OFF (12)
#define PMA_RXWORD_MSG_HIST_CTRL_0_HIST_CALC_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_HIST_CTRL_0_HIST_CALC_EN_BF_MSK (0x00001000)
#define PMA_RXWORD_MSG_HIST_CTRL_0_HIST_CALC_EN_BF_DEF (0x00000000)

///< Select FFE hextet for the histogram
#define PMA_RXWORD_MSG_HIST_CTRL_0_HIST_FFESMPL_SEL_BF_OFF (13)
#define PMA_RXWORD_MSG_HIST_CTRL_0_HIST_FFESMPL_SEL_BF_WID ( 2)
#define PMA_RXWORD_MSG_HIST_CTRL_0_HIST_FFESMPL_SEL_BF_MSK (0x00006000)
#define PMA_RXWORD_MSG_HIST_CTRL_0_HIST_FFESMPL_SEL_BF_DEF (0x00000000)

///< Filter enabled (must be disabled for NRZ)
#define PMA_RXWORD_MSG_HIST_CTRL_0_HIST_FILTER_EN_BF_OFF (17)
#define PMA_RXWORD_MSG_HIST_CTRL_0_HIST_FILTER_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_HIST_CTRL_0_HIST_FILTER_EN_BF_MSK (0x00020000)
#define PMA_RXWORD_MSG_HIST_CTRL_0_HIST_FILTER_EN_BF_DEF (0x00000000)

///< Enable min values calculations
#define PMA_RXWORD_MSG_HIST_CTRL_0_HIST_MAX_CLR_BF_OFF (18)
#define PMA_RXWORD_MSG_HIST_CTRL_0_HIST_MAX_CLR_BF_WID ( 1)
#define PMA_RXWORD_MSG_HIST_CTRL_0_HIST_MAX_CLR_BF_MSK (0x00040000)
#define PMA_RXWORD_MSG_HIST_CTRL_0_HIST_MAX_CLR_BF_DEF (0x00000000)

///< Clear min values calculations
#define PMA_RXWORD_MSG_HIST_CTRL_0_HIST_MAX_EN_BF_OFF (19)
#define PMA_RXWORD_MSG_HIST_CTRL_0_HIST_MAX_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_HIST_CTRL_0_HIST_MAX_EN_BF_MSK (0x00080000)
#define PMA_RXWORD_MSG_HIST_CTRL_0_HIST_MAX_EN_BF_DEF (0x00000000)

///< Enable max values calculations
#define PMA_RXWORD_MSG_HIST_CTRL_0_HIST_MIN_CLR_BF_OFF (20)
#define PMA_RXWORD_MSG_HIST_CTRL_0_HIST_MIN_CLR_BF_WID ( 1)
#define PMA_RXWORD_MSG_HIST_CTRL_0_HIST_MIN_CLR_BF_MSK (0x00100000)
#define PMA_RXWORD_MSG_HIST_CTRL_0_HIST_MIN_CLR_BF_DEF (0x00000000)

///< Clear max values calculations
#define PMA_RXWORD_MSG_HIST_CTRL_0_HIST_MIN_EN_BF_OFF (21)
#define PMA_RXWORD_MSG_HIST_CTRL_0_HIST_MIN_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_HIST_CTRL_0_HIST_MIN_EN_BF_MSK (0x00200000)
#define PMA_RXWORD_MSG_HIST_CTRL_0_HIST_MIN_EN_BF_DEF (0x00000000)

///< Start histogram engine request
#define PMA_RXWORD_MSG_HIST_CTRL_0_HIST_ENG_START_BF_OFF (22)
#define PMA_RXWORD_MSG_HIST_CTRL_0_HIST_ENG_START_BF_WID ( 1)
#define PMA_RXWORD_MSG_HIST_CTRL_0_HIST_ENG_START_BF_MSK (0x00400000)
#define PMA_RXWORD_MSG_HIST_CTRL_0_HIST_ENG_START_BF_DEF (0x00000000)

///< Select data to histogram collection
#define PMA_RXWORD_MSG_HIST_CTRL_0_HIST_STRM_SEL_BF_OFF (23)
#define PMA_RXWORD_MSG_HIST_CTRL_0_HIST_STRM_SEL_BF_WID ( 1)
#define PMA_RXWORD_MSG_HIST_CTRL_0_HIST_STRM_SEL_BF_MSK (0x00800000)
#define PMA_RXWORD_MSG_HIST_CTRL_0_HIST_STRM_SEL_BF_DEF (0x00000000)

///< Delay timer threshold for FSM
#define PMA_RXWORD_MSG_HIST_CTRL_0_HIST_TIMER_MAX_BF_OFF (24)
#define PMA_RXWORD_MSG_HIST_CTRL_0_HIST_TIMER_MAX_BF_WID ( 4)
#define PMA_RXWORD_MSG_HIST_CTRL_0_HIST_TIMER_MAX_BF_MSK (0x0F000000)
#define PMA_RXWORD_MSG_HIST_CTRL_0_HIST_TIMER_MAX_BF_DEF (0x00000000)

///< Select ADC samples for histogram engine
#define PMA_RXWORD_MSG_HIST_CTRL_0_HIST_ADC_SMPL_SEL_BF_OFF (28)
#define PMA_RXWORD_MSG_HIST_CTRL_0_HIST_ADC_SMPL_SEL_BF_WID ( 2)
#define PMA_RXWORD_MSG_HIST_CTRL_0_HIST_ADC_SMPL_SEL_BF_MSK (0x30000000)
#define PMA_RXWORD_MSG_HIST_CTRL_0_HIST_ADC_SMPL_SEL_BF_DEF (0x00000000)

///< Select Slicer samples for SNR calculation
#define PMA_RXWORD_MSG_HIST_CTRL_0_HIST_SLC_SMPL_SEL_BF_OFF (30)
#define PMA_RXWORD_MSG_HIST_CTRL_0_HIST_SLC_SMPL_SEL_BF_WID ( 2)
#define PMA_RXWORD_MSG_HIST_CTRL_0_HIST_SLC_SMPL_SEL_BF_MSK (0xC0000000)
#define PMA_RXWORD_MSG_HIST_CTRL_0_HIST_SLC_SMPL_SEL_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_HIST_CONTROL_1 register description at address offset 0x494
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/hist_control_1
  * placeholder
  */

typedef union {
  struct {
    uint32_t HIST_FFE_LIMIT_HIGH : 9;
    ///< Bin range limits high for FFE histogram
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t HIST_FFE_LIMIT_LOW : 9;
    ///< Bin range limits low for FFE histogram
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t HIST_STATS_MAX : 10;
    ///< Stats counter threshold for FSM
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t HIST_FFE_SMPL_SEL : 4;
    ///< Select 9bits ffe output samples for histogram engine
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_hist_ctrl_1_reg_t;

#define PMA_RXWORD_MSG_HIST_CTRL_1_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_HIST_CTRL_1_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_HIST_CTRL_1_WR_MASK (0xffffffffU)


///< Bin range limits high for FFE histogram
#define PMA_RXWORD_MSG_HIST_CTRL_1_HIST_FFE_LIMIT_HIGH_BF_OFF ( 0)
#define PMA_RXWORD_MSG_HIST_CTRL_1_HIST_FFE_LIMIT_HIGH_BF_WID ( 9)
#define PMA_RXWORD_MSG_HIST_CTRL_1_HIST_FFE_LIMIT_HIGH_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_HIST_CTRL_1_HIST_FFE_LIMIT_HIGH_BF_DEF (0x00000000)

///< Bin range limits low for FFE histogram
#define PMA_RXWORD_MSG_HIST_CTRL_1_HIST_FFE_LIMIT_LOW_BF_OFF ( 9)
#define PMA_RXWORD_MSG_HIST_CTRL_1_HIST_FFE_LIMIT_LOW_BF_WID ( 9)
#define PMA_RXWORD_MSG_HIST_CTRL_1_HIST_FFE_LIMIT_LOW_BF_MSK (0x0003FE00)
#define PMA_RXWORD_MSG_HIST_CTRL_1_HIST_FFE_LIMIT_LOW_BF_DEF (0x00000000)

///< Stats counter threshold for FSM
#define PMA_RXWORD_MSG_HIST_CTRL_1_HIST_STATS_MAX_BF_OFF (18)
#define PMA_RXWORD_MSG_HIST_CTRL_1_HIST_STATS_MAX_BF_WID (10)
#define PMA_RXWORD_MSG_HIST_CTRL_1_HIST_STATS_MAX_BF_MSK (0x0FFC0000)
#define PMA_RXWORD_MSG_HIST_CTRL_1_HIST_STATS_MAX_BF_DEF (0x00000000)

///< Select 9bits ffe output samples for histogram engine
#define PMA_RXWORD_MSG_HIST_CTRL_1_HIST_FFE_SMPL_SEL_BF_OFF (28)
#define PMA_RXWORD_MSG_HIST_CTRL_1_HIST_FFE_SMPL_SEL_BF_WID ( 4)
#define PMA_RXWORD_MSG_HIST_CTRL_1_HIST_FFE_SMPL_SEL_BF_MSK (0xF0000000)
#define PMA_RXWORD_MSG_HIST_CTRL_1_HIST_FFE_SMPL_SEL_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_HIST_CONTROL_2 register description at address offset 0x498
  *
  * Register default value:        0x02010100
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/hist_control_2
  * placeholder
  */

typedef union {
  struct {
    uint32_t HIST_LIMIT_LOW_0 : 6;
    ///< Bin range limits low for 16 bins histogram - range 0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t HIST_LIMIT_HIGH_0 : 6;
    ///< Bin range limits high for 16 bins histogram - range 0
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t HIST_LIMIT_LOW_1 : 6;
    ///< Bin range limits low for 16 bins histogram - range 1
    ///< AccessType="RW" BitOffset="16" ResetValue="0x1"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t HIST_LIMIT_HIGH_1 : 6;
    ///< Bin range limits high  for 16 bins histogram - range 1
    ///< AccessType="RW" BitOffset="24" ResetValue="0x2"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_hist_ctrl_2_reg_t;

#define PMA_RXWORD_MSG_HIST_CTRL_2_DEFAULT (0x02010100U)
#define PMA_RXWORD_MSG_HIST_CTRL_2_RD_MASK (0x3f3f3f3fU)
#define PMA_RXWORD_MSG_HIST_CTRL_2_WR_MASK (0x3f3f3f3fU)


///< Bin range limits low for 16 bins histogram - range 0
#define PMA_RXWORD_MSG_HIST_CTRL_2_HIST_LIMIT_LOW_0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_HIST_CTRL_2_HIST_LIMIT_LOW_0_BF_WID ( 6)
#define PMA_RXWORD_MSG_HIST_CTRL_2_HIST_LIMIT_LOW_0_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_HIST_CTRL_2_HIST_LIMIT_LOW_0_BF_DEF (0x00000000)

///< Bin range limits high for 16 bins histogram - range 0
#define PMA_RXWORD_MSG_HIST_CTRL_2_HIST_LIMIT_HIGH_0_BF_OFF ( 8)
#define PMA_RXWORD_MSG_HIST_CTRL_2_HIST_LIMIT_HIGH_0_BF_WID ( 6)
#define PMA_RXWORD_MSG_HIST_CTRL_2_HIST_LIMIT_HIGH_0_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_HIST_CTRL_2_HIST_LIMIT_HIGH_0_BF_DEF (0x00000100)

///< Bin range limits low for 16 bins histogram - range 1
#define PMA_RXWORD_MSG_HIST_CTRL_2_HIST_LIMIT_LOW_1_BF_OFF (16)
#define PMA_RXWORD_MSG_HIST_CTRL_2_HIST_LIMIT_LOW_1_BF_WID ( 6)
#define PMA_RXWORD_MSG_HIST_CTRL_2_HIST_LIMIT_LOW_1_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_HIST_CTRL_2_HIST_LIMIT_LOW_1_BF_DEF (0x00010000)

///< Bin range limits high  for 16 bins histogram - range 1
#define PMA_RXWORD_MSG_HIST_CTRL_2_HIST_LIMIT_HIGH_1_BF_OFF (24)
#define PMA_RXWORD_MSG_HIST_CTRL_2_HIST_LIMIT_HIGH_1_BF_WID ( 6)
#define PMA_RXWORD_MSG_HIST_CTRL_2_HIST_LIMIT_HIGH_1_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_HIST_CTRL_2_HIST_LIMIT_HIGH_1_BF_DEF (0x02000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_HIST_CONTROL_3 register description at address offset 0x49c
  *
  * Register default value:        0x04030302
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/hist_control_3
  * placeholder
  */

typedef union {
  struct {
    uint32_t HIST_LIMIT_LOW_2 : 6;
    ///< Bin range limits low for 16 bins histogram - range 2
    ///< AccessType="RW" BitOffset="0" ResetValue="0x2"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t HIST_LIMIT_HIGH_2 : 6;
    ///< Bin range limits high for 16 bins histogram - range 2
    ///< AccessType="RW" BitOffset="8" ResetValue="0x3"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t HIST_LIMIT_LOW_3 : 6;
    ///< Bin range limits low for 16 bins histogram - range 3
    ///< AccessType="RW" BitOffset="16" ResetValue="0x3"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t HIST_LIMIT_HIGH_3 : 6;
    ///< Bin range limits high for 16 bins histogram - range 3
    ///< AccessType="RW" BitOffset="24" ResetValue="0x4"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_hist_ctrl_3_reg_t;

#define PMA_RXWORD_MSG_HIST_CTRL_3_DEFAULT (0x04030302U)
#define PMA_RXWORD_MSG_HIST_CTRL_3_RD_MASK (0x3f3f3f3fU)
#define PMA_RXWORD_MSG_HIST_CTRL_3_WR_MASK (0x3f3f3f3fU)


///< Bin range limits low for 16 bins histogram - range 2
#define PMA_RXWORD_MSG_HIST_CTRL_3_HIST_LIMIT_LOW_2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_HIST_CTRL_3_HIST_LIMIT_LOW_2_BF_WID ( 6)
#define PMA_RXWORD_MSG_HIST_CTRL_3_HIST_LIMIT_LOW_2_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_HIST_CTRL_3_HIST_LIMIT_LOW_2_BF_DEF (0x00000002)

///< Bin range limits high for 16 bins histogram - range 2
#define PMA_RXWORD_MSG_HIST_CTRL_3_HIST_LIMIT_HIGH_2_BF_OFF ( 8)
#define PMA_RXWORD_MSG_HIST_CTRL_3_HIST_LIMIT_HIGH_2_BF_WID ( 6)
#define PMA_RXWORD_MSG_HIST_CTRL_3_HIST_LIMIT_HIGH_2_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_HIST_CTRL_3_HIST_LIMIT_HIGH_2_BF_DEF (0x00000300)

///< Bin range limits low for 16 bins histogram - range 3
#define PMA_RXWORD_MSG_HIST_CTRL_3_HIST_LIMIT_LOW_3_BF_OFF (16)
#define PMA_RXWORD_MSG_HIST_CTRL_3_HIST_LIMIT_LOW_3_BF_WID ( 6)
#define PMA_RXWORD_MSG_HIST_CTRL_3_HIST_LIMIT_LOW_3_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_HIST_CTRL_3_HIST_LIMIT_LOW_3_BF_DEF (0x00030000)

///< Bin range limits high for 16 bins histogram - range 3
#define PMA_RXWORD_MSG_HIST_CTRL_3_HIST_LIMIT_HIGH_3_BF_OFF (24)
#define PMA_RXWORD_MSG_HIST_CTRL_3_HIST_LIMIT_HIGH_3_BF_WID ( 6)
#define PMA_RXWORD_MSG_HIST_CTRL_3_HIST_LIMIT_HIGH_3_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_HIST_CTRL_3_HIST_LIMIT_HIGH_3_BF_DEF (0x04000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_HIST_CONTROL_4 register description at address offset 0x4a0
  *
  * Register default value:        0x06050504
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/hist_control_4
  * placeholder
  */

typedef union {
  struct {
    uint32_t HIST_LIMIT_LOW_4 : 6;
    ///< Bin range limits low for 16 bins histogram - range 4
    ///< AccessType="RW" BitOffset="0" ResetValue="0x4"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t HIST_LIMIT_HIGH_4 : 6;
    ///< Bin range limits high for 16 bins histogram - range 4
    ///< AccessType="RW" BitOffset="8" ResetValue="0x5"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t HIST_LIMIT_LOW_5 : 6;
    ///< Bin range limits low for 16 bins histogram - range 5
    ///< AccessType="RW" BitOffset="16" ResetValue="0x5"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t HIST_LIMIT_HIGH_5 : 6;
    ///< Bin range limits high for 16 bins histogram - range 5
    ///< AccessType="RW" BitOffset="24" ResetValue="0x6"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_hist_ctrl_4_reg_t;

#define PMA_RXWORD_MSG_HIST_CTRL_4_DEFAULT (0x06050504U)
#define PMA_RXWORD_MSG_HIST_CTRL_4_RD_MASK (0x3f3f3f3fU)
#define PMA_RXWORD_MSG_HIST_CTRL_4_WR_MASK (0x3f3f3f3fU)


///< Bin range limits low for 16 bins histogram - range 4
#define PMA_RXWORD_MSG_HIST_CTRL_4_HIST_LIMIT_LOW_4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_HIST_CTRL_4_HIST_LIMIT_LOW_4_BF_WID ( 6)
#define PMA_RXWORD_MSG_HIST_CTRL_4_HIST_LIMIT_LOW_4_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_HIST_CTRL_4_HIST_LIMIT_LOW_4_BF_DEF (0x00000004)

///< Bin range limits high for 16 bins histogram - range 4
#define PMA_RXWORD_MSG_HIST_CTRL_4_HIST_LIMIT_HIGH_4_BF_OFF ( 8)
#define PMA_RXWORD_MSG_HIST_CTRL_4_HIST_LIMIT_HIGH_4_BF_WID ( 6)
#define PMA_RXWORD_MSG_HIST_CTRL_4_HIST_LIMIT_HIGH_4_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_HIST_CTRL_4_HIST_LIMIT_HIGH_4_BF_DEF (0x00000500)

///< Bin range limits low for 16 bins histogram - range 5
#define PMA_RXWORD_MSG_HIST_CTRL_4_HIST_LIMIT_LOW_5_BF_OFF (16)
#define PMA_RXWORD_MSG_HIST_CTRL_4_HIST_LIMIT_LOW_5_BF_WID ( 6)
#define PMA_RXWORD_MSG_HIST_CTRL_4_HIST_LIMIT_LOW_5_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_HIST_CTRL_4_HIST_LIMIT_LOW_5_BF_DEF (0x00050000)

///< Bin range limits high for 16 bins histogram - range 5
#define PMA_RXWORD_MSG_HIST_CTRL_4_HIST_LIMIT_HIGH_5_BF_OFF (24)
#define PMA_RXWORD_MSG_HIST_CTRL_4_HIST_LIMIT_HIGH_5_BF_WID ( 6)
#define PMA_RXWORD_MSG_HIST_CTRL_4_HIST_LIMIT_HIGH_5_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_HIST_CTRL_4_HIST_LIMIT_HIGH_5_BF_DEF (0x06000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_HIST_CONTROL_5 register description at address offset 0x4a4
  *
  * Register default value:        0x08070706
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/hist_control_5
  * placeholder
  */

typedef union {
  struct {
    uint32_t HIST_LIMIT_LOW_6 : 6;
    ///< Bin range limits low for 16 bins histogram - range 6
    ///< AccessType="RW" BitOffset="0" ResetValue="0x6"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t HIST_LIMIT_HIGH_6 : 6;
    ///< Bin range limits high for 16 bins histogram - range 6
    ///< AccessType="RW" BitOffset="8" ResetValue="0x7"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t HIST_LIMIT_LOW_7 : 6;
    ///< Bin range limits low for 16 bins histogram - range 7
    ///< AccessType="RW" BitOffset="16" ResetValue="0x7"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t HIST_LIMIT_HIGH_7 : 6;
    ///< Bin range limits high for 16 bins histogram - range 7
    ///< AccessType="RW" BitOffset="24" ResetValue="0x8"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_hist_ctrl_5_reg_t;

#define PMA_RXWORD_MSG_HIST_CTRL_5_DEFAULT (0x08070706U)
#define PMA_RXWORD_MSG_HIST_CTRL_5_RD_MASK (0x3f3f3f3fU)
#define PMA_RXWORD_MSG_HIST_CTRL_5_WR_MASK (0x3f3f3f3fU)


///< Bin range limits low for 16 bins histogram - range 6
#define PMA_RXWORD_MSG_HIST_CTRL_5_HIST_LIMIT_LOW_6_BF_OFF ( 0)
#define PMA_RXWORD_MSG_HIST_CTRL_5_HIST_LIMIT_LOW_6_BF_WID ( 6)
#define PMA_RXWORD_MSG_HIST_CTRL_5_HIST_LIMIT_LOW_6_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_HIST_CTRL_5_HIST_LIMIT_LOW_6_BF_DEF (0x00000006)

///< Bin range limits high for 16 bins histogram - range 6
#define PMA_RXWORD_MSG_HIST_CTRL_5_HIST_LIMIT_HIGH_6_BF_OFF ( 8)
#define PMA_RXWORD_MSG_HIST_CTRL_5_HIST_LIMIT_HIGH_6_BF_WID ( 6)
#define PMA_RXWORD_MSG_HIST_CTRL_5_HIST_LIMIT_HIGH_6_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_HIST_CTRL_5_HIST_LIMIT_HIGH_6_BF_DEF (0x00000700)

///< Bin range limits low for 16 bins histogram - range 7
#define PMA_RXWORD_MSG_HIST_CTRL_5_HIST_LIMIT_LOW_7_BF_OFF (16)
#define PMA_RXWORD_MSG_HIST_CTRL_5_HIST_LIMIT_LOW_7_BF_WID ( 6)
#define PMA_RXWORD_MSG_HIST_CTRL_5_HIST_LIMIT_LOW_7_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_HIST_CTRL_5_HIST_LIMIT_LOW_7_BF_DEF (0x00070000)

///< Bin range limits high for 16 bins histogram - range 7
#define PMA_RXWORD_MSG_HIST_CTRL_5_HIST_LIMIT_HIGH_7_BF_OFF (24)
#define PMA_RXWORD_MSG_HIST_CTRL_5_HIST_LIMIT_HIGH_7_BF_WID ( 6)
#define PMA_RXWORD_MSG_HIST_CTRL_5_HIST_LIMIT_HIGH_7_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_HIST_CTRL_5_HIST_LIMIT_HIGH_7_BF_DEF (0x08000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_HIST_CONTROL_6 register description at address offset 0x4a8
  *
  * Register default value:        0x0A090908
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/hist_control_6
  * placeholder
  */

typedef union {
  struct {
    uint32_t HIST_LIMIT_LOW_8 : 6;
    ///< Bin range limits low for 16 bins histogram - range 8
    ///< AccessType="RW" BitOffset="0" ResetValue="0x8"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t HIST_LIMIT_HIGH_8 : 6;
    ///< Bin range limits high for 16 bins histogram - range 8
    ///< AccessType="RW" BitOffset="8" ResetValue="0x9"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t HIST_LIMIT_LOW_9 : 6;
    ///< Bin range limits low for 16 bins histogram - range 9
    ///< AccessType="RW" BitOffset="16" ResetValue="0x9"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t HIST_LIMIT_HIGH_9 : 6;
    ///< Bin range limits high for 16 bins histogram - range 9
    ///< AccessType="RW" BitOffset="24" ResetValue="0xA"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_hist_ctrl_6_reg_t;

#define PMA_RXWORD_MSG_HIST_CTRL_6_DEFAULT (0x0a090908U)
#define PMA_RXWORD_MSG_HIST_CTRL_6_RD_MASK (0x3f3f3f3fU)
#define PMA_RXWORD_MSG_HIST_CTRL_6_WR_MASK (0x3f3f3f3fU)


///< Bin range limits low for 16 bins histogram - range 8
#define PMA_RXWORD_MSG_HIST_CTRL_6_HIST_LIMIT_LOW_8_BF_OFF ( 0)
#define PMA_RXWORD_MSG_HIST_CTRL_6_HIST_LIMIT_LOW_8_BF_WID ( 6)
#define PMA_RXWORD_MSG_HIST_CTRL_6_HIST_LIMIT_LOW_8_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_HIST_CTRL_6_HIST_LIMIT_LOW_8_BF_DEF (0x00000008)

///< Bin range limits high for 16 bins histogram - range 8
#define PMA_RXWORD_MSG_HIST_CTRL_6_HIST_LIMIT_HIGH_8_BF_OFF ( 8)
#define PMA_RXWORD_MSG_HIST_CTRL_6_HIST_LIMIT_HIGH_8_BF_WID ( 6)
#define PMA_RXWORD_MSG_HIST_CTRL_6_HIST_LIMIT_HIGH_8_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_HIST_CTRL_6_HIST_LIMIT_HIGH_8_BF_DEF (0x00000900)

///< Bin range limits low for 16 bins histogram - range 9
#define PMA_RXWORD_MSG_HIST_CTRL_6_HIST_LIMIT_LOW_9_BF_OFF (16)
#define PMA_RXWORD_MSG_HIST_CTRL_6_HIST_LIMIT_LOW_9_BF_WID ( 6)
#define PMA_RXWORD_MSG_HIST_CTRL_6_HIST_LIMIT_LOW_9_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_HIST_CTRL_6_HIST_LIMIT_LOW_9_BF_DEF (0x00090000)

///< Bin range limits high for 16 bins histogram - range 9
#define PMA_RXWORD_MSG_HIST_CTRL_6_HIST_LIMIT_HIGH_9_BF_OFF (24)
#define PMA_RXWORD_MSG_HIST_CTRL_6_HIST_LIMIT_HIGH_9_BF_WID ( 6)
#define PMA_RXWORD_MSG_HIST_CTRL_6_HIST_LIMIT_HIGH_9_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_HIST_CTRL_6_HIST_LIMIT_HIGH_9_BF_DEF (0x0A000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_HIST_CONTROL_7 register description at address offset 0x4ac
  *
  * Register default value:        0x0C0B0B0A
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/hist_control_7
  * placeholder
  */

typedef union {
  struct {
    uint32_t HIST_LIMIT_LOW_10 : 6;
    ///< Bin range limits low for 16 bins histogram - range 10
    ///< AccessType="RW" BitOffset="0" ResetValue="0xA"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t HIST_LIMIT_HIGH_10 : 6;
    ///< Bin range limits high for 16 bins histogram - range 10
    ///< AccessType="RW" BitOffset="8" ResetValue="0xB"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t HIST_LIMIT_LOW_11 : 6;
    ///< Bin range limits low for 16 bins histogram - range 11
    ///< AccessType="RW" BitOffset="16" ResetValue="0xB"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t HIST_LIMIT_HIGH_11 : 6;
    ///< Bin range limits high for 16 bins histogram - range 11
    ///< AccessType="RW" BitOffset="24" ResetValue="0xC"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_hist_ctrl_7_reg_t;

#define PMA_RXWORD_MSG_HIST_CTRL_7_DEFAULT (0x0c0b0b0aU)
#define PMA_RXWORD_MSG_HIST_CTRL_7_RD_MASK (0x3f3f3f3fU)
#define PMA_RXWORD_MSG_HIST_CTRL_7_WR_MASK (0x3f3f3f3fU)


///< Bin range limits low for 16 bins histogram - range 10
#define PMA_RXWORD_MSG_HIST_CTRL_7_HIST_LIMIT_LOW_10_BF_OFF ( 0)
#define PMA_RXWORD_MSG_HIST_CTRL_7_HIST_LIMIT_LOW_10_BF_WID ( 6)
#define PMA_RXWORD_MSG_HIST_CTRL_7_HIST_LIMIT_LOW_10_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_HIST_CTRL_7_HIST_LIMIT_LOW_10_BF_DEF (0x0000000A)

///< Bin range limits high for 16 bins histogram - range 10
#define PMA_RXWORD_MSG_HIST_CTRL_7_HIST_LIMIT_HIGH_10_BF_OFF ( 8)
#define PMA_RXWORD_MSG_HIST_CTRL_7_HIST_LIMIT_HIGH_10_BF_WID ( 6)
#define PMA_RXWORD_MSG_HIST_CTRL_7_HIST_LIMIT_HIGH_10_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_HIST_CTRL_7_HIST_LIMIT_HIGH_10_BF_DEF (0x00000B00)

///< Bin range limits low for 16 bins histogram - range 11
#define PMA_RXWORD_MSG_HIST_CTRL_7_HIST_LIMIT_LOW_11_BF_OFF (16)
#define PMA_RXWORD_MSG_HIST_CTRL_7_HIST_LIMIT_LOW_11_BF_WID ( 6)
#define PMA_RXWORD_MSG_HIST_CTRL_7_HIST_LIMIT_LOW_11_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_HIST_CTRL_7_HIST_LIMIT_LOW_11_BF_DEF (0x000B0000)

///< Bin range limits high for 16 bins histogram - range 11
#define PMA_RXWORD_MSG_HIST_CTRL_7_HIST_LIMIT_HIGH_11_BF_OFF (24)
#define PMA_RXWORD_MSG_HIST_CTRL_7_HIST_LIMIT_HIGH_11_BF_WID ( 6)
#define PMA_RXWORD_MSG_HIST_CTRL_7_HIST_LIMIT_HIGH_11_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_HIST_CTRL_7_HIST_LIMIT_HIGH_11_BF_DEF (0x0C000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_HIST_CONTROL_8 register description at address offset 0x4b0
  *
  * Register default value:        0x0E0D0D0C
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/hist_control_8
  * placeholder
  */

typedef union {
  struct {
    uint32_t HIST_LIMIT_LOW_12 : 6;
    ///< Bin range limits low for 16 bins histogram - range 12
    ///< AccessType="RW" BitOffset="0" ResetValue="0xC"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t HIST_LIMIT_HIGH_12 : 6;
    ///< Bin range limits high for 16 bins histogram - range 12
    ///< AccessType="RW" BitOffset="8" ResetValue="0xD"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t HIST_LIMIT_LOW_13 : 6;
    ///< Bin range limits low for 16 bins histogram - range 13
    ///< AccessType="RW" BitOffset="16" ResetValue="0xD"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t HIST_LIMIT_HIGH_13 : 6;
    ///< Bin range limits high for 16 bins histogram - range 13
    ///< AccessType="RW" BitOffset="24" ResetValue="0xE"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_hist_ctrl_8_reg_t;

#define PMA_RXWORD_MSG_HIST_CTRL_8_DEFAULT (0x0e0d0d0cU)
#define PMA_RXWORD_MSG_HIST_CTRL_8_RD_MASK (0x3f3f3f3fU)
#define PMA_RXWORD_MSG_HIST_CTRL_8_WR_MASK (0x3f3f3f3fU)


///< Bin range limits low for 16 bins histogram - range 12
#define PMA_RXWORD_MSG_HIST_CTRL_8_HIST_LIMIT_LOW_12_BF_OFF ( 0)
#define PMA_RXWORD_MSG_HIST_CTRL_8_HIST_LIMIT_LOW_12_BF_WID ( 6)
#define PMA_RXWORD_MSG_HIST_CTRL_8_HIST_LIMIT_LOW_12_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_HIST_CTRL_8_HIST_LIMIT_LOW_12_BF_DEF (0x0000000C)

///< Bin range limits high for 16 bins histogram - range 12
#define PMA_RXWORD_MSG_HIST_CTRL_8_HIST_LIMIT_HIGH_12_BF_OFF ( 8)
#define PMA_RXWORD_MSG_HIST_CTRL_8_HIST_LIMIT_HIGH_12_BF_WID ( 6)
#define PMA_RXWORD_MSG_HIST_CTRL_8_HIST_LIMIT_HIGH_12_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_HIST_CTRL_8_HIST_LIMIT_HIGH_12_BF_DEF (0x00000D00)

///< Bin range limits low for 16 bins histogram - range 13
#define PMA_RXWORD_MSG_HIST_CTRL_8_HIST_LIMIT_LOW_13_BF_OFF (16)
#define PMA_RXWORD_MSG_HIST_CTRL_8_HIST_LIMIT_LOW_13_BF_WID ( 6)
#define PMA_RXWORD_MSG_HIST_CTRL_8_HIST_LIMIT_LOW_13_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_HIST_CTRL_8_HIST_LIMIT_LOW_13_BF_DEF (0x000D0000)

///< Bin range limits high for 16 bins histogram - range 13
#define PMA_RXWORD_MSG_HIST_CTRL_8_HIST_LIMIT_HIGH_13_BF_OFF (24)
#define PMA_RXWORD_MSG_HIST_CTRL_8_HIST_LIMIT_HIGH_13_BF_WID ( 6)
#define PMA_RXWORD_MSG_HIST_CTRL_8_HIST_LIMIT_HIGH_13_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_HIST_CTRL_8_HIST_LIMIT_HIGH_13_BF_DEF (0x0E000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_HIST_CONTROL_9 register description at address offset 0x4b4
  *
  * Register default value:        0x100F0F0E
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/hist_control_9
  * placeholder
  */

typedef union {
  struct {
    uint32_t HIST_LIMIT_LOW_14 : 6;
    ///< Bin range limits low for 16 bins histogram - range 14
    ///< AccessType="RW" BitOffset="0" ResetValue="0xE"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t HIST_LIMIT_HIGH_14 : 6;
    ///< Bin range limits high for 16 bins histogram - range 14
    ///< AccessType="RW" BitOffset="8" ResetValue="0xF"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t HIST_LIMIT_LOW_15 : 6;
    ///< Bin range limits low for 16 bins histogram - range 15
    ///< AccessType="RW" BitOffset="16" ResetValue="0xF"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t HIST_LIMIT_HIGH_15 : 6;
    ///< Bin range limits high for 16 bins histogram - range 15
    ///< AccessType="RW" BitOffset="24" ResetValue="0x10"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_hist_ctrl_9_reg_t;

#define PMA_RXWORD_MSG_HIST_CTRL_9_DEFAULT (0x100f0f0eU)
#define PMA_RXWORD_MSG_HIST_CTRL_9_RD_MASK (0x3f3f3f3fU)
#define PMA_RXWORD_MSG_HIST_CTRL_9_WR_MASK (0x3f3f3f3fU)


///< Bin range limits low for 16 bins histogram - range 14
#define PMA_RXWORD_MSG_HIST_CTRL_9_HIST_LIMIT_LOW_14_BF_OFF ( 0)
#define PMA_RXWORD_MSG_HIST_CTRL_9_HIST_LIMIT_LOW_14_BF_WID ( 6)
#define PMA_RXWORD_MSG_HIST_CTRL_9_HIST_LIMIT_LOW_14_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_HIST_CTRL_9_HIST_LIMIT_LOW_14_BF_DEF (0x0000000E)

///< Bin range limits high for 16 bins histogram - range 14
#define PMA_RXWORD_MSG_HIST_CTRL_9_HIST_LIMIT_HIGH_14_BF_OFF ( 8)
#define PMA_RXWORD_MSG_HIST_CTRL_9_HIST_LIMIT_HIGH_14_BF_WID ( 6)
#define PMA_RXWORD_MSG_HIST_CTRL_9_HIST_LIMIT_HIGH_14_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_HIST_CTRL_9_HIST_LIMIT_HIGH_14_BF_DEF (0x00000F00)

///< Bin range limits low for 16 bins histogram - range 15
#define PMA_RXWORD_MSG_HIST_CTRL_9_HIST_LIMIT_LOW_15_BF_OFF (16)
#define PMA_RXWORD_MSG_HIST_CTRL_9_HIST_LIMIT_LOW_15_BF_WID ( 6)
#define PMA_RXWORD_MSG_HIST_CTRL_9_HIST_LIMIT_LOW_15_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_HIST_CTRL_9_HIST_LIMIT_LOW_15_BF_DEF (0x000F0000)

///< Bin range limits high for 16 bins histogram - range 15
#define PMA_RXWORD_MSG_HIST_CTRL_9_HIST_LIMIT_HIGH_15_BF_OFF (24)
#define PMA_RXWORD_MSG_HIST_CTRL_9_HIST_LIMIT_HIGH_15_BF_WID ( 6)
#define PMA_RXWORD_MSG_HIST_CTRL_9_HIST_LIMIT_HIGH_15_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_HIST_CTRL_9_HIST_LIMIT_HIGH_15_BF_DEF (0x10000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_HIST_CONTROL_10 register description at address offset 0x4b8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/hist_control_10
  * placeholder
  */

typedef union {
  struct {
    uint32_t HIST_MAX_MASK : 16;
    ///< Bin counters masks for minimum calculation
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t HIST_MIN_MASK : 16;
    ///< Bin counters masks for maximum calculation
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_hist_ctrl_10_reg_t;

#define PMA_RXWORD_MSG_HIST_CTRL_10_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_HIST_CTRL_10_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_HIST_CTRL_10_WR_MASK (0xffffffffU)


///< Bin counters masks for minimum calculation
#define PMA_RXWORD_MSG_HIST_CTRL_10_HIST_MAX_MASK_BF_OFF ( 0)
#define PMA_RXWORD_MSG_HIST_CTRL_10_HIST_MAX_MASK_BF_WID (16)
#define PMA_RXWORD_MSG_HIST_CTRL_10_HIST_MAX_MASK_BF_MSK (0x0000FFFF)
#define PMA_RXWORD_MSG_HIST_CTRL_10_HIST_MAX_MASK_BF_DEF (0x00000000)

///< Bin counters masks for maximum calculation
#define PMA_RXWORD_MSG_HIST_CTRL_10_HIST_MIN_MASK_BF_OFF (16)
#define PMA_RXWORD_MSG_HIST_CTRL_10_HIST_MIN_MASK_BF_WID (16)
#define PMA_RXWORD_MSG_HIST_CTRL_10_HIST_MIN_MASK_BF_MSK (0xFFFF0000)
#define PMA_RXWORD_MSG_HIST_CTRL_10_HIST_MIN_MASK_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_HIST_CONTROL_11 register description at address offset 0x4bc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/hist_control_11
  * placeholder
  */

typedef union {
  struct {
    uint32_t HIST_SNR_START : 1;
    ///< Start SNR calculation request
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t HIST_SNR_INIT_EN : 1;
    ///< Enable to preload SNR normally used for reset
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t HIST_SNR_ITER_MAX : 16;
    ///< Number of iterations of SNR measurements
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t HIST_SNR_SF_ALPHA : 3;
    ///< Alpha parameter of smoothing filter
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t HIST_SNR_INIT_VAL : 11;
    ///< Pre-load SNR value mostly intended for reset through registers file
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_hist_ctrl_11_reg_t;

#define PMA_RXWORD_MSG_HIST_CTRL_11_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_HIST_CTRL_11_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_HIST_CTRL_11_WR_MASK (0xffffffffU)


///< Start SNR calculation request
#define PMA_RXWORD_MSG_HIST_CTRL_11_HIST_SNR_START_BF_OFF ( 0)
#define PMA_RXWORD_MSG_HIST_CTRL_11_HIST_SNR_START_BF_WID ( 1)
#define PMA_RXWORD_MSG_HIST_CTRL_11_HIST_SNR_START_BF_MSK (0x00000001)
#define PMA_RXWORD_MSG_HIST_CTRL_11_HIST_SNR_START_BF_DEF (0x00000000)

///< Enable to preload SNR normally used for reset
#define PMA_RXWORD_MSG_HIST_CTRL_11_HIST_SNR_INIT_EN_BF_OFF ( 1)
#define PMA_RXWORD_MSG_HIST_CTRL_11_HIST_SNR_INIT_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_HIST_CTRL_11_HIST_SNR_INIT_EN_BF_MSK (0x00000002)
#define PMA_RXWORD_MSG_HIST_CTRL_11_HIST_SNR_INIT_EN_BF_DEF (0x00000000)

///< Number of iterations of SNR measurements
#define PMA_RXWORD_MSG_HIST_CTRL_11_HIST_SNR_ITER_MAX_BF_OFF ( 2)
#define PMA_RXWORD_MSG_HIST_CTRL_11_HIST_SNR_ITER_MAX_BF_WID (16)
#define PMA_RXWORD_MSG_HIST_CTRL_11_HIST_SNR_ITER_MAX_BF_MSK (0x0003FFFC)
#define PMA_RXWORD_MSG_HIST_CTRL_11_HIST_SNR_ITER_MAX_BF_DEF (0x00000000)

///< Alpha parameter of smoothing filter
#define PMA_RXWORD_MSG_HIST_CTRL_11_HIST_SNR_SF_ALPHA_BF_OFF (18)
#define PMA_RXWORD_MSG_HIST_CTRL_11_HIST_SNR_SF_ALPHA_BF_WID ( 3)
#define PMA_RXWORD_MSG_HIST_CTRL_11_HIST_SNR_SF_ALPHA_BF_MSK (0x001C0000)
#define PMA_RXWORD_MSG_HIST_CTRL_11_HIST_SNR_SF_ALPHA_BF_DEF (0x00000000)

///< Pre-load SNR value mostly intended for reset through registers file
#define PMA_RXWORD_MSG_HIST_CTRL_11_HIST_SNR_INIT_VAL_BF_OFF (21)
#define PMA_RXWORD_MSG_HIST_CTRL_11_HIST_SNR_INIT_VAL_BF_WID (11)
#define PMA_RXWORD_MSG_HIST_CTRL_11_HIST_SNR_INIT_VAL_BF_MSK (0xFFE00000)
#define PMA_RXWORD_MSG_HIST_CTRL_11_HIST_SNR_INIT_VAL_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_HIST_CONTROL_12 register description at address offset 0x4c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/hist_control_12
  * placeholder
  */

typedef union {
  struct {
    uint32_t HIST_SNR_CONT_MODE : 1;
    ///< SNR calculation doesn't stop as long as this bit high
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t HIST_SNR_PREFILTER_DIS : 1;
    ///< Accept symbols 3(e+) and 0(e-)
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t HIST_SNR_SMPL_MASK : 16;
    ///< Disregard samples in SNR calculation
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_hist_ctrl_12_reg_t;

#define PMA_RXWORD_MSG_HIST_CTRL_12_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_HIST_CTRL_12_RD_MASK (0x0003ffffU)
#define PMA_RXWORD_MSG_HIST_CTRL_12_WR_MASK (0x0003ffffU)


///< SNR calculation doesn't stop as long as this bit high
#define PMA_RXWORD_MSG_HIST_CTRL_12_HIST_SNR_CONT_MODE_BF_OFF ( 0)
#define PMA_RXWORD_MSG_HIST_CTRL_12_HIST_SNR_CONT_MODE_BF_WID ( 1)
#define PMA_RXWORD_MSG_HIST_CTRL_12_HIST_SNR_CONT_MODE_BF_MSK (0x00000001)
#define PMA_RXWORD_MSG_HIST_CTRL_12_HIST_SNR_CONT_MODE_BF_DEF (0x00000000)

///< Accept symbols 3(e+) and 0(e-)
#define PMA_RXWORD_MSG_HIST_CTRL_12_HIST_SNR_PREFILTER_DIS_BF_OFF ( 1)
#define PMA_RXWORD_MSG_HIST_CTRL_12_HIST_SNR_PREFILTER_DIS_BF_WID ( 1)
#define PMA_RXWORD_MSG_HIST_CTRL_12_HIST_SNR_PREFILTER_DIS_BF_MSK (0x00000002)
#define PMA_RXWORD_MSG_HIST_CTRL_12_HIST_SNR_PREFILTER_DIS_BF_DEF (0x00000000)

///< Disregard samples in SNR calculation
#define PMA_RXWORD_MSG_HIST_CTRL_12_HIST_SNR_SMPL_MASK_BF_OFF ( 2)
#define PMA_RXWORD_MSG_HIST_CTRL_12_HIST_SNR_SMPL_MASK_BF_WID (16)
#define PMA_RXWORD_MSG_HIST_CTRL_12_HIST_SNR_SMPL_MASK_BF_MSK (0x0003FFFC)
#define PMA_RXWORD_MSG_HIST_CTRL_12_HIST_SNR_SMPL_MASK_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_HIST_CONTROL_13 register description at address offset 0x4c4
  *
  * Register default value:        0x00000400
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/hist_control_13
  * placeholder
  */

typedef union {
  struct {
    uint32_t HIST_SNR_STATS_MAX : 16;
    ///< Number of cycles to collect stats (power of 2 only; 1-hot)
    ///< AccessType="RW" BitOffset="0" ResetValue="0x400"
    uint32_t HIST_SMPL_MASK : 16;
    ///< Disregard samples at the input
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_hist_ctrl_13_reg_t;

#define PMA_RXWORD_MSG_HIST_CTRL_13_DEFAULT (0x00000400U)
#define PMA_RXWORD_MSG_HIST_CTRL_13_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_HIST_CTRL_13_WR_MASK (0xffffffffU)


///< Number of cycles to collect stats (power of 2 only; 1-hot)
#define PMA_RXWORD_MSG_HIST_CTRL_13_HIST_SNR_STATS_MAX_BF_OFF ( 0)
#define PMA_RXWORD_MSG_HIST_CTRL_13_HIST_SNR_STATS_MAX_BF_WID (16)
#define PMA_RXWORD_MSG_HIST_CTRL_13_HIST_SNR_STATS_MAX_BF_MSK (0x0000FFFF)
#define PMA_RXWORD_MSG_HIST_CTRL_13_HIST_SNR_STATS_MAX_BF_DEF (0x00000400)

///< Disregard samples at the input
#define PMA_RXWORD_MSG_HIST_CTRL_13_HIST_SMPL_MASK_BF_OFF (16)
#define PMA_RXWORD_MSG_HIST_CTRL_13_HIST_SMPL_MASK_BF_WID (16)
#define PMA_RXWORD_MSG_HIST_CTRL_13_HIST_SMPL_MASK_BF_MSK (0xFFFF0000)
#define PMA_RXWORD_MSG_HIST_CTRL_13_HIST_SMPL_MASK_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_HIST_STATUS_0 register description at address offset 0x4c8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/hist_status_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t HIST_SNR_DONE : 1;
    ///< Done response from SNR calculator
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t HIST_ENG_DONE : 1;
    ///< Done response from histogram engine
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t HIST_BIN_FOM : 13;
    ///< Current histogram based FOM
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t  : 17;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_hist_stat_0_reg_t;

#define PMA_RXWORD_MSG_HIST_STAT_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_HIST_STAT_0_RD_MASK (0x00007fffU)
#define PMA_RXWORD_MSG_HIST_STAT_0_WR_MASK (0x00000000U)


///< Done response from SNR calculator
#define PMA_RXWORD_MSG_HIST_STAT_0_HIST_SNR_DONE_BF_OFF ( 0)
#define PMA_RXWORD_MSG_HIST_STAT_0_HIST_SNR_DONE_BF_WID ( 1)
#define PMA_RXWORD_MSG_HIST_STAT_0_HIST_SNR_DONE_BF_MSK (0x00000001)
#define PMA_RXWORD_MSG_HIST_STAT_0_HIST_SNR_DONE_BF_DEF (0x00000000)

///< Done response from histogram engine
#define PMA_RXWORD_MSG_HIST_STAT_0_HIST_ENG_DONE_BF_OFF ( 1)
#define PMA_RXWORD_MSG_HIST_STAT_0_HIST_ENG_DONE_BF_WID ( 1)
#define PMA_RXWORD_MSG_HIST_STAT_0_HIST_ENG_DONE_BF_MSK (0x00000002)
#define PMA_RXWORD_MSG_HIST_STAT_0_HIST_ENG_DONE_BF_DEF (0x00000000)

///< Current histogram based FOM
#define PMA_RXWORD_MSG_HIST_STAT_0_HIST_BIN_FOM_BF_OFF ( 2)
#define PMA_RXWORD_MSG_HIST_STAT_0_HIST_BIN_FOM_BF_WID (13)
#define PMA_RXWORD_MSG_HIST_STAT_0_HIST_BIN_FOM_BF_MSK (0x00007FFC)
#define PMA_RXWORD_MSG_HIST_STAT_0_HIST_BIN_FOM_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_HIST_STATUS_1 register description at address offset 0x4cc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/hist_status_1
  * placeholder
  */

typedef union {
  struct {
    uint32_t HIST_SNR_CURR_VAL : 11;
    ///< Output FoM (N2NMR -> Noise 2 Noise Margin Ratio)
    ///< AccessType="RO/C/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 21;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_hist_stat_1_reg_t;

#define PMA_RXWORD_MSG_HIST_STAT_1_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_HIST_STAT_1_RD_MASK (0x000007ffU)
#define PMA_RXWORD_MSG_HIST_STAT_1_WR_MASK (0x00000000U)


///< Output FoM (N2NMR -> Noise 2 Noise Margin Ratio)
#define PMA_RXWORD_MSG_HIST_STAT_1_HIST_SNR_CURR_VAL_BF_OFF ( 0)
#define PMA_RXWORD_MSG_HIST_STAT_1_HIST_SNR_CURR_VAL_BF_WID (11)
#define PMA_RXWORD_MSG_HIST_STAT_1_HIST_SNR_CURR_VAL_BF_MSK (0x000007FF)
#define PMA_RXWORD_MSG_HIST_STAT_1_HIST_SNR_CURR_VAL_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_HIST_STATUS_2 register description at address offset 0x4d0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/hist_status_2
  * placeholder
  */

typedef union {
  struct {
    uint32_t HIST_FFEBIN : 12;
    ///< Histogram bin collected on full scale FFE sample
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t HIST_HISTSATS : 16;
    ///< Histogram bins saturated
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_hist_stat_2_reg_t;

#define PMA_RXWORD_MSG_HIST_STAT_2_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_HIST_STAT_2_RD_MASK (0x0fffffffU)
#define PMA_RXWORD_MSG_HIST_STAT_2_WR_MASK (0x00000000U)


///< Histogram bin collected on full scale FFE sample
#define PMA_RXWORD_MSG_HIST_STAT_2_HIST_FFEBIN_BF_OFF ( 0)
#define PMA_RXWORD_MSG_HIST_STAT_2_HIST_FFEBIN_BF_WID (12)
#define PMA_RXWORD_MSG_HIST_STAT_2_HIST_FFEBIN_BF_MSK (0x00000FFF)
#define PMA_RXWORD_MSG_HIST_STAT_2_HIST_FFEBIN_BF_DEF (0x00000000)

///< Histogram bins saturated
#define PMA_RXWORD_MSG_HIST_STAT_2_HIST_HISTSATS_BF_OFF (12)
#define PMA_RXWORD_MSG_HIST_STAT_2_HIST_HISTSATS_BF_WID (16)
#define PMA_RXWORD_MSG_HIST_STAT_2_HIST_HISTSATS_BF_MSK (0x0FFFF000)
#define PMA_RXWORD_MSG_HIST_STAT_2_HIST_HISTSATS_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_HIST_STATUS_3 register description at address offset 0x4d4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/hist_status_3
  * placeholder
  */

typedef union {
  struct {
    uint32_t HIST_BIN_MAX_IDX_0 : 4;
    ///< Max index 0
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t HIST_BIN_MIN_IDX_0 : 4;
    ///< Min index 0
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t HIST_BIN_MAX_IDX_1 : 4;
    ///< Max index 1
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t HIST_BIN_MIN_IDX_1 : 4;
    ///< Min index 1
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t HIST_BIN_MAX_IDX_2 : 4;
    ///< Max index 2
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t HIST_BIN_MIN_IDX_2 : 4;
    ///< Min index 2
    ///< AccessType="RO/V" BitOffset="20" ResetValue="0x0"
    uint32_t HIST_BIN_MAX_IDX_3 : 4;
    ///< Max index 3
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t HIST_BIN_MIN_IDX_3 : 4;
    ///< Min index 3
    ///< AccessType="RO/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_hist_stat_3_reg_t;

#define PMA_RXWORD_MSG_HIST_STAT_3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_HIST_STAT_3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_HIST_STAT_3_WR_MASK (0x00000000U)


///< Max index 0
#define PMA_RXWORD_MSG_HIST_STAT_3_HIST_BIN_MAX_IDX_0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_HIST_STAT_3_HIST_BIN_MAX_IDX_0_BF_WID ( 4)
#define PMA_RXWORD_MSG_HIST_STAT_3_HIST_BIN_MAX_IDX_0_BF_MSK (0x0000000F)
#define PMA_RXWORD_MSG_HIST_STAT_3_HIST_BIN_MAX_IDX_0_BF_DEF (0x00000000)

///< Min index 0
#define PMA_RXWORD_MSG_HIST_STAT_3_HIST_BIN_MIN_IDX_0_BF_OFF ( 4)
#define PMA_RXWORD_MSG_HIST_STAT_3_HIST_BIN_MIN_IDX_0_BF_WID ( 4)
#define PMA_RXWORD_MSG_HIST_STAT_3_HIST_BIN_MIN_IDX_0_BF_MSK (0x000000F0)
#define PMA_RXWORD_MSG_HIST_STAT_3_HIST_BIN_MIN_IDX_0_BF_DEF (0x00000000)

///< Max index 1
#define PMA_RXWORD_MSG_HIST_STAT_3_HIST_BIN_MAX_IDX_1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_HIST_STAT_3_HIST_BIN_MAX_IDX_1_BF_WID ( 4)
#define PMA_RXWORD_MSG_HIST_STAT_3_HIST_BIN_MAX_IDX_1_BF_MSK (0x00000F00)
#define PMA_RXWORD_MSG_HIST_STAT_3_HIST_BIN_MAX_IDX_1_BF_DEF (0x00000000)

///< Min index 1
#define PMA_RXWORD_MSG_HIST_STAT_3_HIST_BIN_MIN_IDX_1_BF_OFF (12)
#define PMA_RXWORD_MSG_HIST_STAT_3_HIST_BIN_MIN_IDX_1_BF_WID ( 4)
#define PMA_RXWORD_MSG_HIST_STAT_3_HIST_BIN_MIN_IDX_1_BF_MSK (0x0000F000)
#define PMA_RXWORD_MSG_HIST_STAT_3_HIST_BIN_MIN_IDX_1_BF_DEF (0x00000000)

///< Max index 2
#define PMA_RXWORD_MSG_HIST_STAT_3_HIST_BIN_MAX_IDX_2_BF_OFF (16)
#define PMA_RXWORD_MSG_HIST_STAT_3_HIST_BIN_MAX_IDX_2_BF_WID ( 4)
#define PMA_RXWORD_MSG_HIST_STAT_3_HIST_BIN_MAX_IDX_2_BF_MSK (0x000F0000)
#define PMA_RXWORD_MSG_HIST_STAT_3_HIST_BIN_MAX_IDX_2_BF_DEF (0x00000000)

///< Min index 2
#define PMA_RXWORD_MSG_HIST_STAT_3_HIST_BIN_MIN_IDX_2_BF_OFF (20)
#define PMA_RXWORD_MSG_HIST_STAT_3_HIST_BIN_MIN_IDX_2_BF_WID ( 4)
#define PMA_RXWORD_MSG_HIST_STAT_3_HIST_BIN_MIN_IDX_2_BF_MSK (0x00F00000)
#define PMA_RXWORD_MSG_HIST_STAT_3_HIST_BIN_MIN_IDX_2_BF_DEF (0x00000000)

///< Max index 3
#define PMA_RXWORD_MSG_HIST_STAT_3_HIST_BIN_MAX_IDX_3_BF_OFF (24)
#define PMA_RXWORD_MSG_HIST_STAT_3_HIST_BIN_MAX_IDX_3_BF_WID ( 4)
#define PMA_RXWORD_MSG_HIST_STAT_3_HIST_BIN_MAX_IDX_3_BF_MSK (0x0F000000)
#define PMA_RXWORD_MSG_HIST_STAT_3_HIST_BIN_MAX_IDX_3_BF_DEF (0x00000000)

///< Min index 3
#define PMA_RXWORD_MSG_HIST_STAT_3_HIST_BIN_MIN_IDX_3_BF_OFF (28)
#define PMA_RXWORD_MSG_HIST_STAT_3_HIST_BIN_MIN_IDX_3_BF_WID ( 4)
#define PMA_RXWORD_MSG_HIST_STAT_3_HIST_BIN_MIN_IDX_3_BF_MSK (0xF0000000)
#define PMA_RXWORD_MSG_HIST_STAT_3_HIST_BIN_MIN_IDX_3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_HIST_STATUS_4 register description at address offset 0x4d8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/hist_status_4
  * placeholder
  */

typedef union {
  struct {
    uint32_t HIST_BIN_MAX_VAL_0 : 12;
    ///< Max value 0
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
    uint32_t HIST_BIN_MAX_VAL_1 : 12;
    ///< Max value 1
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_hist_stat_4_reg_t;

#define PMA_RXWORD_MSG_HIST_STAT_4_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_HIST_STAT_4_RD_MASK (0x0fff0fffU)
#define PMA_RXWORD_MSG_HIST_STAT_4_WR_MASK (0x00000000U)


///< Max value 0
#define PMA_RXWORD_MSG_HIST_STAT_4_HIST_BIN_MAX_VAL_0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_HIST_STAT_4_HIST_BIN_MAX_VAL_0_BF_WID (12)
#define PMA_RXWORD_MSG_HIST_STAT_4_HIST_BIN_MAX_VAL_0_BF_MSK (0x00000FFF)
#define PMA_RXWORD_MSG_HIST_STAT_4_HIST_BIN_MAX_VAL_0_BF_DEF (0x00000000)

///< Max value 1
#define PMA_RXWORD_MSG_HIST_STAT_4_HIST_BIN_MAX_VAL_1_BF_OFF (16)
#define PMA_RXWORD_MSG_HIST_STAT_4_HIST_BIN_MAX_VAL_1_BF_WID (12)
#define PMA_RXWORD_MSG_HIST_STAT_4_HIST_BIN_MAX_VAL_1_BF_MSK (0x0FFF0000)
#define PMA_RXWORD_MSG_HIST_STAT_4_HIST_BIN_MAX_VAL_1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_HIST_STATUS_5 register description at address offset 0x4e0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/hist_status_5
  * placeholder
  */

typedef union {
  struct {
    uint32_t HIST_BIN_MAX_VAL_2 : 12;
    ///< Max value 2
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
    uint32_t HIST_BIN_MAX_VAL_3 : 12;
    ///< Max value 3
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_hist_stat_5_reg_t;

#define PMA_RXWORD_MSG_HIST_STAT_5_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_HIST_STAT_5_RD_MASK (0x0fff0fffU)
#define PMA_RXWORD_MSG_HIST_STAT_5_WR_MASK (0x00000000U)


///< Max value 2
#define PMA_RXWORD_MSG_HIST_STAT_5_HIST_BIN_MAX_VAL_2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_HIST_STAT_5_HIST_BIN_MAX_VAL_2_BF_WID (12)
#define PMA_RXWORD_MSG_HIST_STAT_5_HIST_BIN_MAX_VAL_2_BF_MSK (0x00000FFF)
#define PMA_RXWORD_MSG_HIST_STAT_5_HIST_BIN_MAX_VAL_2_BF_DEF (0x00000000)

///< Max value 3
#define PMA_RXWORD_MSG_HIST_STAT_5_HIST_BIN_MAX_VAL_3_BF_OFF (16)
#define PMA_RXWORD_MSG_HIST_STAT_5_HIST_BIN_MAX_VAL_3_BF_WID (12)
#define PMA_RXWORD_MSG_HIST_STAT_5_HIST_BIN_MAX_VAL_3_BF_MSK (0x0FFF0000)
#define PMA_RXWORD_MSG_HIST_STAT_5_HIST_BIN_MAX_VAL_3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_HIST_STATUS_6 register description at address offset 0x4e4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/hist_status_6
  * placeholder
  */

typedef union {
  struct {
    uint32_t HIST_BIN_MIN_VAL_0 : 12;
    ///< Min value 0
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
    uint32_t HIST_BIN_MIN_VAL_1 : 12;
    ///< Min value 1
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_hist_stat_6_reg_t;

#define PMA_RXWORD_MSG_HIST_STAT_6_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_HIST_STAT_6_RD_MASK (0x0fff0fffU)
#define PMA_RXWORD_MSG_HIST_STAT_6_WR_MASK (0x00000000U)


///< Min value 0
#define PMA_RXWORD_MSG_HIST_STAT_6_HIST_BIN_MIN_VAL_0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_HIST_STAT_6_HIST_BIN_MIN_VAL_0_BF_WID (12)
#define PMA_RXWORD_MSG_HIST_STAT_6_HIST_BIN_MIN_VAL_0_BF_MSK (0x00000FFF)
#define PMA_RXWORD_MSG_HIST_STAT_6_HIST_BIN_MIN_VAL_0_BF_DEF (0x00000000)

///< Min value 1
#define PMA_RXWORD_MSG_HIST_STAT_6_HIST_BIN_MIN_VAL_1_BF_OFF (16)
#define PMA_RXWORD_MSG_HIST_STAT_6_HIST_BIN_MIN_VAL_1_BF_WID (12)
#define PMA_RXWORD_MSG_HIST_STAT_6_HIST_BIN_MIN_VAL_1_BF_MSK (0x0FFF0000)
#define PMA_RXWORD_MSG_HIST_STAT_6_HIST_BIN_MIN_VAL_1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_HIST_STATUS_7 register description at address offset 0x4e8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/hist_status_7
  * placeholder
  */

typedef union {
  struct {
    uint32_t HIST_BIN_MIN_VAL_2 : 12;
    ///< Min value 2
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
    uint32_t HIST_BIN_MIN_VAL_3 : 12;
    ///< Min value 3
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_hist_stat_7_reg_t;

#define PMA_RXWORD_MSG_HIST_STAT_7_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_HIST_STAT_7_RD_MASK (0x0fff0fffU)
#define PMA_RXWORD_MSG_HIST_STAT_7_WR_MASK (0x00000000U)


///< Min value 2
#define PMA_RXWORD_MSG_HIST_STAT_7_HIST_BIN_MIN_VAL_2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_HIST_STAT_7_HIST_BIN_MIN_VAL_2_BF_WID (12)
#define PMA_RXWORD_MSG_HIST_STAT_7_HIST_BIN_MIN_VAL_2_BF_MSK (0x00000FFF)
#define PMA_RXWORD_MSG_HIST_STAT_7_HIST_BIN_MIN_VAL_2_BF_DEF (0x00000000)

///< Min value 3
#define PMA_RXWORD_MSG_HIST_STAT_7_HIST_BIN_MIN_VAL_3_BF_OFF (16)
#define PMA_RXWORD_MSG_HIST_STAT_7_HIST_BIN_MIN_VAL_3_BF_WID (12)
#define PMA_RXWORD_MSG_HIST_STAT_7_HIST_BIN_MIN_VAL_3_BF_MSK (0x0FFF0000)
#define PMA_RXWORD_MSG_HIST_STAT_7_HIST_BIN_MIN_VAL_3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_HIST_STATUS_8 register description at address offset 0x4ec
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/hist_status_8
  * placeholder
  */

typedef union {
  struct {
    uint32_t HIST_BIN_CNTR_0 : 12;
    ///< Histogram bins provided to FW through the registers. Bin 0
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
    uint32_t HIST_BIN_CNTR_1 : 12;
    ///< Histogram bins provided to FW through the registers. Bin 1
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_hist_stat_8_reg_t;

#define PMA_RXWORD_MSG_HIST_STAT_8_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_HIST_STAT_8_RD_MASK (0x0fff0fffU)
#define PMA_RXWORD_MSG_HIST_STAT_8_WR_MASK (0x00000000U)


///< Histogram bins provided to FW through the registers. Bin 0
#define PMA_RXWORD_MSG_HIST_STAT_8_HIST_BIN_CNTR_0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_HIST_STAT_8_HIST_BIN_CNTR_0_BF_WID (12)
#define PMA_RXWORD_MSG_HIST_STAT_8_HIST_BIN_CNTR_0_BF_MSK (0x00000FFF)
#define PMA_RXWORD_MSG_HIST_STAT_8_HIST_BIN_CNTR_0_BF_DEF (0x00000000)

///< Histogram bins provided to FW through the registers. Bin 1
#define PMA_RXWORD_MSG_HIST_STAT_8_HIST_BIN_CNTR_1_BF_OFF (16)
#define PMA_RXWORD_MSG_HIST_STAT_8_HIST_BIN_CNTR_1_BF_WID (12)
#define PMA_RXWORD_MSG_HIST_STAT_8_HIST_BIN_CNTR_1_BF_MSK (0x0FFF0000)
#define PMA_RXWORD_MSG_HIST_STAT_8_HIST_BIN_CNTR_1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_HIST_STATUS_9 register description at address offset 0x4f0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/hist_status_9
  * placeholder
  */

typedef union {
  struct {
    uint32_t HIST_BIN_CNTR_2 : 12;
    ///< Histogram bins provided to FW through the registers. Bin 2
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
    uint32_t HIST_BIN_CNTR_3 : 12;
    ///< Histogram bins provided to FW through the registers. Bin 3
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_hist_stat_9_reg_t;

#define PMA_RXWORD_MSG_HIST_STAT_9_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_HIST_STAT_9_RD_MASK (0x0fff0fffU)
#define PMA_RXWORD_MSG_HIST_STAT_9_WR_MASK (0x00000000U)


///< Histogram bins provided to FW through the registers. Bin 2
#define PMA_RXWORD_MSG_HIST_STAT_9_HIST_BIN_CNTR_2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_HIST_STAT_9_HIST_BIN_CNTR_2_BF_WID (12)
#define PMA_RXWORD_MSG_HIST_STAT_9_HIST_BIN_CNTR_2_BF_MSK (0x00000FFF)
#define PMA_RXWORD_MSG_HIST_STAT_9_HIST_BIN_CNTR_2_BF_DEF (0x00000000)

///< Histogram bins provided to FW through the registers. Bin 3
#define PMA_RXWORD_MSG_HIST_STAT_9_HIST_BIN_CNTR_3_BF_OFF (16)
#define PMA_RXWORD_MSG_HIST_STAT_9_HIST_BIN_CNTR_3_BF_WID (12)
#define PMA_RXWORD_MSG_HIST_STAT_9_HIST_BIN_CNTR_3_BF_MSK (0x0FFF0000)
#define PMA_RXWORD_MSG_HIST_STAT_9_HIST_BIN_CNTR_3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_HIST_STATUS_10 register description at address offset 0x4f4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/hist_status_10
  * placeholder
  */

typedef union {
  struct {
    uint32_t HIST_BIN_CNTR_4 : 12;
    ///< Histogram bins provided to FW through the registers. Bin 4
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
    uint32_t HIST_BIN_CNTR_5 : 12;
    ///< Histogram bins provided to FW through the registers. Bin 5
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_hist_stat_10_reg_t;

#define PMA_RXWORD_MSG_HIST_STAT_10_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_HIST_STAT_10_RD_MASK (0x0fff0fffU)
#define PMA_RXWORD_MSG_HIST_STAT_10_WR_MASK (0x00000000U)


///< Histogram bins provided to FW through the registers. Bin 4
#define PMA_RXWORD_MSG_HIST_STAT_10_HIST_BIN_CNTR_4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_HIST_STAT_10_HIST_BIN_CNTR_4_BF_WID (12)
#define PMA_RXWORD_MSG_HIST_STAT_10_HIST_BIN_CNTR_4_BF_MSK (0x00000FFF)
#define PMA_RXWORD_MSG_HIST_STAT_10_HIST_BIN_CNTR_4_BF_DEF (0x00000000)

///< Histogram bins provided to FW through the registers. Bin 5
#define PMA_RXWORD_MSG_HIST_STAT_10_HIST_BIN_CNTR_5_BF_OFF (16)
#define PMA_RXWORD_MSG_HIST_STAT_10_HIST_BIN_CNTR_5_BF_WID (12)
#define PMA_RXWORD_MSG_HIST_STAT_10_HIST_BIN_CNTR_5_BF_MSK (0x0FFF0000)
#define PMA_RXWORD_MSG_HIST_STAT_10_HIST_BIN_CNTR_5_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_HIST_STATUS_11 register description at address offset 0x4f8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/hist_status_11
  * placeholder
  */

typedef union {
  struct {
    uint32_t HIST_BIN_CNTR_6 : 12;
    ///< Histogram bins provided to FW through the registers. Bin 6
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
    uint32_t HIST_BIN_CNTR_7 : 12;
    ///< Histogram bins provided to FW through the registers. Bin 7
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_hist_stat_11_reg_t;

#define PMA_RXWORD_MSG_HIST_STAT_11_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_HIST_STAT_11_RD_MASK (0x0fff0fffU)
#define PMA_RXWORD_MSG_HIST_STAT_11_WR_MASK (0x00000000U)


///< Histogram bins provided to FW through the registers. Bin 6
#define PMA_RXWORD_MSG_HIST_STAT_11_HIST_BIN_CNTR_6_BF_OFF ( 0)
#define PMA_RXWORD_MSG_HIST_STAT_11_HIST_BIN_CNTR_6_BF_WID (12)
#define PMA_RXWORD_MSG_HIST_STAT_11_HIST_BIN_CNTR_6_BF_MSK (0x00000FFF)
#define PMA_RXWORD_MSG_HIST_STAT_11_HIST_BIN_CNTR_6_BF_DEF (0x00000000)

///< Histogram bins provided to FW through the registers. Bin 7
#define PMA_RXWORD_MSG_HIST_STAT_11_HIST_BIN_CNTR_7_BF_OFF (16)
#define PMA_RXWORD_MSG_HIST_STAT_11_HIST_BIN_CNTR_7_BF_WID (12)
#define PMA_RXWORD_MSG_HIST_STAT_11_HIST_BIN_CNTR_7_BF_MSK (0x0FFF0000)
#define PMA_RXWORD_MSG_HIST_STAT_11_HIST_BIN_CNTR_7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_HIST_STATUS_12 register description at address offset 0x4fc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/hist_status_12
  * placeholder
  */

typedef union {
  struct {
    uint32_t HIST_BIN_CNTR_8 : 12;
    ///< Histogram bins provided to FW through the registers. Bin 8
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
    uint32_t HIST_BIN_CNTR_9 : 12;
    ///< Histogram bins provided to FW through the registers. Bin 9
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_hist_stat_12_reg_t;

#define PMA_RXWORD_MSG_HIST_STAT_12_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_HIST_STAT_12_RD_MASK (0x0fff0fffU)
#define PMA_RXWORD_MSG_HIST_STAT_12_WR_MASK (0x00000000U)


///< Histogram bins provided to FW through the registers. Bin 8
#define PMA_RXWORD_MSG_HIST_STAT_12_HIST_BIN_CNTR_8_BF_OFF ( 0)
#define PMA_RXWORD_MSG_HIST_STAT_12_HIST_BIN_CNTR_8_BF_WID (12)
#define PMA_RXWORD_MSG_HIST_STAT_12_HIST_BIN_CNTR_8_BF_MSK (0x00000FFF)
#define PMA_RXWORD_MSG_HIST_STAT_12_HIST_BIN_CNTR_8_BF_DEF (0x00000000)

///< Histogram bins provided to FW through the registers. Bin 9
#define PMA_RXWORD_MSG_HIST_STAT_12_HIST_BIN_CNTR_9_BF_OFF (16)
#define PMA_RXWORD_MSG_HIST_STAT_12_HIST_BIN_CNTR_9_BF_WID (12)
#define PMA_RXWORD_MSG_HIST_STAT_12_HIST_BIN_CNTR_9_BF_MSK (0x0FFF0000)
#define PMA_RXWORD_MSG_HIST_STAT_12_HIST_BIN_CNTR_9_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_HIST_STATUS_13 register description at address offset 0x500
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/hist_status_13
  * placeholder
  */

typedef union {
  struct {
    uint32_t HIST_BIN_CNTR_10 : 12;
    ///< Histogram bins provided to FW through the registers. Bin 10
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
    uint32_t HIST_BIN_CNTR_11 : 12;
    ///< Histogram bins provided to FW through the registers. Bin 11
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_hist_stat_13_reg_t;

#define PMA_RXWORD_MSG_HIST_STAT_13_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_HIST_STAT_13_RD_MASK (0x0fff0fffU)
#define PMA_RXWORD_MSG_HIST_STAT_13_WR_MASK (0x00000000U)


///< Histogram bins provided to FW through the registers. Bin 10
#define PMA_RXWORD_MSG_HIST_STAT_13_HIST_BIN_CNTR_10_BF_OFF ( 0)
#define PMA_RXWORD_MSG_HIST_STAT_13_HIST_BIN_CNTR_10_BF_WID (12)
#define PMA_RXWORD_MSG_HIST_STAT_13_HIST_BIN_CNTR_10_BF_MSK (0x00000FFF)
#define PMA_RXWORD_MSG_HIST_STAT_13_HIST_BIN_CNTR_10_BF_DEF (0x00000000)

///< Histogram bins provided to FW through the registers. Bin 11
#define PMA_RXWORD_MSG_HIST_STAT_13_HIST_BIN_CNTR_11_BF_OFF (16)
#define PMA_RXWORD_MSG_HIST_STAT_13_HIST_BIN_CNTR_11_BF_WID (12)
#define PMA_RXWORD_MSG_HIST_STAT_13_HIST_BIN_CNTR_11_BF_MSK (0x0FFF0000)
#define PMA_RXWORD_MSG_HIST_STAT_13_HIST_BIN_CNTR_11_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_HIST_STATUS_14 register description at address offset 0x510
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/hist_status_14
  * placeholder
  */

typedef union {
  struct {
    uint32_t HIST_BIN_CNTR_12 : 12;
    ///< Histogram bins provided to FW through the registers. Bin 12
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
    uint32_t HIST_BIN_CNTR_13 : 12;
    ///< Histogram bins provided to FW through the registers. Bin 13
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_hist_stat_14_reg_t;

#define PMA_RXWORD_MSG_HIST_STAT_14_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_HIST_STAT_14_RD_MASK (0x0fff0fffU)
#define PMA_RXWORD_MSG_HIST_STAT_14_WR_MASK (0x00000000U)


///< Histogram bins provided to FW through the registers. Bin 12
#define PMA_RXWORD_MSG_HIST_STAT_14_HIST_BIN_CNTR_12_BF_OFF ( 0)
#define PMA_RXWORD_MSG_HIST_STAT_14_HIST_BIN_CNTR_12_BF_WID (12)
#define PMA_RXWORD_MSG_HIST_STAT_14_HIST_BIN_CNTR_12_BF_MSK (0x00000FFF)
#define PMA_RXWORD_MSG_HIST_STAT_14_HIST_BIN_CNTR_12_BF_DEF (0x00000000)

///< Histogram bins provided to FW through the registers. Bin 13
#define PMA_RXWORD_MSG_HIST_STAT_14_HIST_BIN_CNTR_13_BF_OFF (16)
#define PMA_RXWORD_MSG_HIST_STAT_14_HIST_BIN_CNTR_13_BF_WID (12)
#define PMA_RXWORD_MSG_HIST_STAT_14_HIST_BIN_CNTR_13_BF_MSK (0x0FFF0000)
#define PMA_RXWORD_MSG_HIST_STAT_14_HIST_BIN_CNTR_13_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_HIST_STATUS_15 register description at address offset 0x514
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/hist_status_15
  * placeholder
  */

typedef union {
  struct {
    uint32_t HIST_BIN_CNTR_14 : 12;
    ///< Histogram bins provided to FW through the registers. Bin 14
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
    uint32_t HIST_BIN_CNTR_15 : 12;
    ///< Histogram bins provided to FW through the registers. Bin 15
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_hist_stat_15_reg_t;

#define PMA_RXWORD_MSG_HIST_STAT_15_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_HIST_STAT_15_RD_MASK (0x0fff0fffU)
#define PMA_RXWORD_MSG_HIST_STAT_15_WR_MASK (0x00000000U)


///< Histogram bins provided to FW through the registers. Bin 14
#define PMA_RXWORD_MSG_HIST_STAT_15_HIST_BIN_CNTR_14_BF_OFF ( 0)
#define PMA_RXWORD_MSG_HIST_STAT_15_HIST_BIN_CNTR_14_BF_WID (12)
#define PMA_RXWORD_MSG_HIST_STAT_15_HIST_BIN_CNTR_14_BF_MSK (0x00000FFF)
#define PMA_RXWORD_MSG_HIST_STAT_15_HIST_BIN_CNTR_14_BF_DEF (0x00000000)

///< Histogram bins provided to FW through the registers. Bin 15
#define PMA_RXWORD_MSG_HIST_STAT_15_HIST_BIN_CNTR_15_BF_OFF (16)
#define PMA_RXWORD_MSG_HIST_STAT_15_HIST_BIN_CNTR_15_BF_WID (12)
#define PMA_RXWORD_MSG_HIST_STAT_15_HIST_BIN_CNTR_15_BF_MSK (0x0FFF0000)
#define PMA_RXWORD_MSG_HIST_STAT_15_HIST_BIN_CNTR_15_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_CONTROL_1 register description at address offset 0x518
  *
  * Register default value:        0x00000411
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_control_1
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_COARSE_MU_EN : 1;
    ///< Select MU between fine and coarse
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t OPS_MU_COARSE : 8;
    ///< Value of the coarse mu
    ///< AccessType="RW" BitOffset="1" ResetValue="0x8"
    uint32_t OPS_MU_FINE : 8;
    ///< Value of the fine mu
    ///< AccessType="RW" BitOffset="9" ResetValue="0x2"
    uint32_t OPS_HOLD_EN : 1;
    ///< Hold LMS accumulators update
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t OPS_BIT_INV_CB : 1;
    ///< Chicken bit to invert bit polarity
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t OPS_UPDN_INV_CB : 1;
    ///< Chicken bit to invert up/down
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t OPS_BIT_SEL : 3;
    ///< Select bit inside a sample for OPS operations
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t OPS_BIT_SEL_FW_MODE : 1;
    ///< FW fully control bit selection through cfg_ops_bit_sel
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t OPS_BIT_SEL_LOAD : 3;
    ///< OPS bit selection initial load value from 0 to 5
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t OPS_BIT_SEL_LOAD_EN : 1;
    ///< Enable OPS bit selection initial load
    ///< AccessType="RW" BitOffset="27" ResetValue="0x0"
    uint32_t OPS_GRP_SEL : 3;
    ///< Select group inside 64 symbols
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t OPS_GRP_SEL_FW_MODE : 1;
    ///< FW fully control group selection through cfg_ops_grp_sel
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_ctrl_1_reg_t;

#define PMA_RXWORD_MSG_OPS_CTRL_1_DEFAULT (0x00000411U)
#define PMA_RXWORD_MSG_OPS_CTRL_1_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_CTRL_1_WR_MASK (0xffffffffU)


///< Select MU between fine and coarse
#define PMA_RXWORD_MSG_OPS_CTRL_1_OPS_COARSE_MU_EN_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_CTRL_1_OPS_COARSE_MU_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_OPS_CTRL_1_OPS_COARSE_MU_EN_BF_MSK (0x00000001)
#define PMA_RXWORD_MSG_OPS_CTRL_1_OPS_COARSE_MU_EN_BF_DEF (0x00000001)

///< Value of the coarse mu
#define PMA_RXWORD_MSG_OPS_CTRL_1_OPS_MU_COARSE_BF_OFF ( 1)
#define PMA_RXWORD_MSG_OPS_CTRL_1_OPS_MU_COARSE_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_CTRL_1_OPS_MU_COARSE_BF_MSK (0x000001FE)
#define PMA_RXWORD_MSG_OPS_CTRL_1_OPS_MU_COARSE_BF_DEF (0x00000010)

///< Value of the fine mu
#define PMA_RXWORD_MSG_OPS_CTRL_1_OPS_MU_FINE_BF_OFF ( 9)
#define PMA_RXWORD_MSG_OPS_CTRL_1_OPS_MU_FINE_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_CTRL_1_OPS_MU_FINE_BF_MSK (0x0001FE00)
#define PMA_RXWORD_MSG_OPS_CTRL_1_OPS_MU_FINE_BF_DEF (0x00000400)

///< Hold LMS accumulators update
#define PMA_RXWORD_MSG_OPS_CTRL_1_OPS_HOLD_EN_BF_OFF (17)
#define PMA_RXWORD_MSG_OPS_CTRL_1_OPS_HOLD_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_OPS_CTRL_1_OPS_HOLD_EN_BF_MSK (0x00020000)
#define PMA_RXWORD_MSG_OPS_CTRL_1_OPS_HOLD_EN_BF_DEF (0x00000000)

///< Chicken bit to invert bit polarity
#define PMA_RXWORD_MSG_OPS_CTRL_1_OPS_BIT_INV_CB_BF_OFF (18)
#define PMA_RXWORD_MSG_OPS_CTRL_1_OPS_BIT_INV_CB_BF_WID ( 1)
#define PMA_RXWORD_MSG_OPS_CTRL_1_OPS_BIT_INV_CB_BF_MSK (0x00040000)
#define PMA_RXWORD_MSG_OPS_CTRL_1_OPS_BIT_INV_CB_BF_DEF (0x00000000)

///< Chicken bit to invert up/down
#define PMA_RXWORD_MSG_OPS_CTRL_1_OPS_UPDN_INV_CB_BF_OFF (19)
#define PMA_RXWORD_MSG_OPS_CTRL_1_OPS_UPDN_INV_CB_BF_WID ( 1)
#define PMA_RXWORD_MSG_OPS_CTRL_1_OPS_UPDN_INV_CB_BF_MSK (0x00080000)
#define PMA_RXWORD_MSG_OPS_CTRL_1_OPS_UPDN_INV_CB_BF_DEF (0x00000000)

///< Select bit inside a sample for OPS operations
#define PMA_RXWORD_MSG_OPS_CTRL_1_OPS_BIT_SEL_BF_OFF (20)
#define PMA_RXWORD_MSG_OPS_CTRL_1_OPS_BIT_SEL_BF_WID ( 3)
#define PMA_RXWORD_MSG_OPS_CTRL_1_OPS_BIT_SEL_BF_MSK (0x00700000)
#define PMA_RXWORD_MSG_OPS_CTRL_1_OPS_BIT_SEL_BF_DEF (0x00000000)

///< FW fully control bit selection through cfg_ops_bit_sel
#define PMA_RXWORD_MSG_OPS_CTRL_1_OPS_BIT_SEL_FW_MODE_BF_OFF (23)
#define PMA_RXWORD_MSG_OPS_CTRL_1_OPS_BIT_SEL_FW_MODE_BF_WID ( 1)
#define PMA_RXWORD_MSG_OPS_CTRL_1_OPS_BIT_SEL_FW_MODE_BF_MSK (0x00800000)
#define PMA_RXWORD_MSG_OPS_CTRL_1_OPS_BIT_SEL_FW_MODE_BF_DEF (0x00000000)

///< OPS bit selection initial load value from 0 to 5
#define PMA_RXWORD_MSG_OPS_CTRL_1_OPS_BIT_SEL_LOAD_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_CTRL_1_OPS_BIT_SEL_LOAD_BF_WID ( 3)
#define PMA_RXWORD_MSG_OPS_CTRL_1_OPS_BIT_SEL_LOAD_BF_MSK (0x07000000)
#define PMA_RXWORD_MSG_OPS_CTRL_1_OPS_BIT_SEL_LOAD_BF_DEF (0x00000000)

///< Enable OPS bit selection initial load
#define PMA_RXWORD_MSG_OPS_CTRL_1_OPS_BIT_SEL_LOAD_EN_BF_OFF (27)
#define PMA_RXWORD_MSG_OPS_CTRL_1_OPS_BIT_SEL_LOAD_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_OPS_CTRL_1_OPS_BIT_SEL_LOAD_EN_BF_MSK (0x08000000)
#define PMA_RXWORD_MSG_OPS_CTRL_1_OPS_BIT_SEL_LOAD_EN_BF_DEF (0x00000000)

///< Select group inside 64 symbols
#define PMA_RXWORD_MSG_OPS_CTRL_1_OPS_GRP_SEL_BF_OFF (28)
#define PMA_RXWORD_MSG_OPS_CTRL_1_OPS_GRP_SEL_BF_WID ( 3)
#define PMA_RXWORD_MSG_OPS_CTRL_1_OPS_GRP_SEL_BF_MSK (0x70000000)
#define PMA_RXWORD_MSG_OPS_CTRL_1_OPS_GRP_SEL_BF_DEF (0x00000000)

///< FW fully control group selection through cfg_ops_grp_sel
#define PMA_RXWORD_MSG_OPS_CTRL_1_OPS_GRP_SEL_FW_MODE_BF_OFF (31)
#define PMA_RXWORD_MSG_OPS_CTRL_1_OPS_GRP_SEL_FW_MODE_BF_WID ( 1)
#define PMA_RXWORD_MSG_OPS_CTRL_1_OPS_GRP_SEL_FW_MODE_BF_MSK (0x80000000)
#define PMA_RXWORD_MSG_OPS_CTRL_1_OPS_GRP_SEL_FW_MODE_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_CONTROL_2 register description at address offset 0x51c
  *
  * Register default value:        0x00002080
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_control_2
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_STATS_MAX : 10;
    ///< Stats capture counter threhold
    ///< AccessType="RW" BitOffset="0" ResetValue="0x80"
    uint32_t OPS_TIMER_MAX : 4;
    ///< Delay timer counter threshold
    ///< AccessType="RW" BitOffset="10" ResetValue="0x8"
    uint32_t OPS_INIT_VAL : 8;
    ///< Init OPS tap value per SAR
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t OPS_GRP_SEL_LOAD : 3;
    ///< OPS group selection initial load value from 0 to 7, total 8 groups
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t OPS_GRP_SEL_LOAD_EN : 1;
    ///< Enable OPS group selection initial load
    ///< AccessType="RW" BitOffset="27" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_ctrl_2_reg_t;

#define PMA_RXWORD_MSG_OPS_CTRL_2_DEFAULT (0x00002080U)
#define PMA_RXWORD_MSG_OPS_CTRL_2_RD_MASK (0x0f3fffffU)
#define PMA_RXWORD_MSG_OPS_CTRL_2_WR_MASK (0x0f3fffffU)


///< Stats capture counter threhold
#define PMA_RXWORD_MSG_OPS_CTRL_2_OPS_STATS_MAX_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_CTRL_2_OPS_STATS_MAX_BF_WID (10)
#define PMA_RXWORD_MSG_OPS_CTRL_2_OPS_STATS_MAX_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_OPS_CTRL_2_OPS_STATS_MAX_BF_DEF (0x00000080)

///< Delay timer counter threshold
#define PMA_RXWORD_MSG_OPS_CTRL_2_OPS_TIMER_MAX_BF_OFF (10)
#define PMA_RXWORD_MSG_OPS_CTRL_2_OPS_TIMER_MAX_BF_WID ( 4)
#define PMA_RXWORD_MSG_OPS_CTRL_2_OPS_TIMER_MAX_BF_MSK (0x00003C00)
#define PMA_RXWORD_MSG_OPS_CTRL_2_OPS_TIMER_MAX_BF_DEF (0x00002000)

///< Init OPS tap value per SAR
#define PMA_RXWORD_MSG_OPS_CTRL_2_OPS_INIT_VAL_BF_OFF (14)
#define PMA_RXWORD_MSG_OPS_CTRL_2_OPS_INIT_VAL_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_CTRL_2_OPS_INIT_VAL_BF_MSK (0x003FC000)
#define PMA_RXWORD_MSG_OPS_CTRL_2_OPS_INIT_VAL_BF_DEF (0x00000000)

///< OPS group selection initial load value from 0 to 7, total 8 groups
#define PMA_RXWORD_MSG_OPS_CTRL_2_OPS_GRP_SEL_LOAD_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_CTRL_2_OPS_GRP_SEL_LOAD_BF_WID ( 3)
#define PMA_RXWORD_MSG_OPS_CTRL_2_OPS_GRP_SEL_LOAD_BF_MSK (0x07000000)
#define PMA_RXWORD_MSG_OPS_CTRL_2_OPS_GRP_SEL_LOAD_BF_DEF (0x00000000)

///< Enable OPS group selection initial load
#define PMA_RXWORD_MSG_OPS_CTRL_2_OPS_GRP_SEL_LOAD_EN_BF_OFF (27)
#define PMA_RXWORD_MSG_OPS_CTRL_2_OPS_GRP_SEL_LOAD_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_OPS_CTRL_2_OPS_GRP_SEL_LOAD_EN_BF_MSK (0x08000000)
#define PMA_RXWORD_MSG_OPS_CTRL_2_OPS_GRP_SEL_LOAD_EN_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_CONTROL_3 register description at address offset 0x520
  *
  * Register default value:        0x0000807F
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_control_3
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAP_MAX : 8;
    ///< Max limit of the SAR offset taps
    ///< AccessType="RW" BitOffset="0" ResetValue="0x7F"
    uint32_t OPS_TAP_MIN : 8;
    ///< Min limit of the SAR offset taps
    ///< AccessType="RW" BitOffset="8" ResetValue="0x80"
    uint32_t DBG_OPS_SEL : 6;
    ///< Select OPS to read through debug RO register
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_ctrl_3_reg_t;

#define PMA_RXWORD_MSG_OPS_CTRL_3_DEFAULT (0x0000807fU)
#define PMA_RXWORD_MSG_OPS_CTRL_3_RD_MASK (0x003fffffU)
#define PMA_RXWORD_MSG_OPS_CTRL_3_WR_MASK (0x003fffffU)


///< Max limit of the SAR offset taps
#define PMA_RXWORD_MSG_OPS_CTRL_3_OPS_TAP_MAX_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_CTRL_3_OPS_TAP_MAX_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_CTRL_3_OPS_TAP_MAX_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_CTRL_3_OPS_TAP_MAX_BF_DEF (0x0000007F)

///< Min limit of the SAR offset taps
#define PMA_RXWORD_MSG_OPS_CTRL_3_OPS_TAP_MIN_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_CTRL_3_OPS_TAP_MIN_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_CTRL_3_OPS_TAP_MIN_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_CTRL_3_OPS_TAP_MIN_BF_DEF (0x00008000)

///< Select OPS to read through debug RO register
#define PMA_RXWORD_MSG_OPS_CTRL_3_DBG_OPS_SEL_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_CTRL_3_DBG_OPS_SEL_BF_WID ( 6)
#define PMA_RXWORD_MSG_OPS_CTRL_3_DBG_OPS_SEL_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_OPS_CTRL_3_DBG_OPS_SEL_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_CONTROL_4 register description at address offset 0x524
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_control_4
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_LMS_MASK : 8;
    ///< Mask bits: during functional run excludes bits form correlation 7.0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_ctrl_4_reg_t;

#define PMA_RXWORD_MSG_OPS_CTRL_4_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_CTRL_4_RD_MASK (0x000000ffU)
#define PMA_RXWORD_MSG_OPS_CTRL_4_WR_MASK (0x000000ffU)


///< Mask bits: during functional run excludes bits form correlation 7.0
#define PMA_RXWORD_MSG_OPS_CTRL_4_OPS_LMS_MASK_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_CTRL_4_OPS_LMS_MASK_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_CTRL_4_OPS_LMS_MASK_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_CTRL_4_OPS_LMS_MASK_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_STATUS_1 register description at address offset 0x52c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_status_1
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_UPDN : 8;
    ///< Intermediate averaging results 7..0
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_stat_1_reg_t;

#define PMA_RXWORD_MSG_OPS_STAT_1_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_STAT_1_RD_MASK (0x000000ffU)
#define PMA_RXWORD_MSG_OPS_STAT_1_WR_MASK (0x00000000U)


///< Intermediate averaging results 7..0
#define PMA_RXWORD_MSG_OPS_STAT_1_OPS_UPDN_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_STAT_1_OPS_UPDN_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_STAT_1_OPS_UPDN_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_STAT_1_OPS_UPDN_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_STATUS_2 register description at address offset 0x534
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_status_2
  * placeholder
  */

typedef union {
  struct {
    uint32_t DBG_OPS_MUX : 8;
    ///< selected by dbg_ops_sel reg OPS value for debug
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_stat_2_reg_t;

#define PMA_RXWORD_MSG_OPS_STAT_2_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_STAT_2_RD_MASK (0x000000ffU)
#define PMA_RXWORD_MSG_OPS_STAT_2_WR_MASK (0x00000000U)


///< selected by dbg_ops_sel reg OPS value for debug
#define PMA_RXWORD_MSG_OPS_STAT_2_DBG_OPS_MUX_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_STAT_2_DBG_OPS_MUX_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_STAT_2_DBG_OPS_MUX_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_STAT_2_DBG_OPS_MUX_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADCVREF_CONTROL_1 register description at address offset 0x538
  *
  * Register default value:        0x00000040
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adcvref_control_1
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADCVREF_NEG_UPDN_INV_CB : 1;
    ///< ADCVref negative chicken bit to invert up/down
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t ADCVREF_POS_UPDN_INV_CB : 1;
    ///< ADCVref positive chicken bit to invert up/down
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t ADCVREF_HOLD_EN : 4;
    ///< ADCVref hold tap accumulator
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t ADCVREF_INT_ITER_BYPASS : 1;
    ///< ADCVRef internal iterator bypass
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t ADCVREF_INT_ITER_MAX : 4;
    ///< ADCVRef internal iterator max count. Actual number of iteration is
    ///< N+1
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t  : 21;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_adcvref_ctrl_1_reg_t;

#define PMA_RXWORD_MSG_ADCVREF_CTRL_1_DEFAULT (0x00000040U)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_1_RD_MASK (0x000007ffU)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_1_WR_MASK (0x000007ffU)


///< ADCVref negative chicken bit to invert up/down
#define PMA_RXWORD_MSG_ADCVREF_CTRL_1_ADCVREF_NEG_UPDN_INV_CB_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_1_ADCVREF_NEG_UPDN_INV_CB_BF_WID ( 1)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_1_ADCVREF_NEG_UPDN_INV_CB_BF_MSK (0x00000001)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_1_ADCVREF_NEG_UPDN_INV_CB_BF_DEF (0x00000000)

///< ADCVref positive chicken bit to invert up/down
#define PMA_RXWORD_MSG_ADCVREF_CTRL_1_ADCVREF_POS_UPDN_INV_CB_BF_OFF ( 1)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_1_ADCVREF_POS_UPDN_INV_CB_BF_WID ( 1)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_1_ADCVREF_POS_UPDN_INV_CB_BF_MSK (0x00000002)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_1_ADCVREF_POS_UPDN_INV_CB_BF_DEF (0x00000000)

///< ADCVref hold tap accumulator
#define PMA_RXWORD_MSG_ADCVREF_CTRL_1_ADCVREF_HOLD_EN_BF_OFF ( 2)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_1_ADCVREF_HOLD_EN_BF_WID ( 4)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_1_ADCVREF_HOLD_EN_BF_MSK (0x0000003C)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_1_ADCVREF_HOLD_EN_BF_DEF (0x00000000)

///< ADCVRef internal iterator bypass
#define PMA_RXWORD_MSG_ADCVREF_CTRL_1_ADCVREF_INT_ITER_BYP_BF_OFF ( 6)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_1_ADCVREF_INT_ITER_BYP_BF_WID ( 1)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_1_ADCVREF_INT_ITER_BYP_BF_MSK (0x00000040)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_1_ADCVREF_INT_ITER_BYP_BF_DEF (0x00000040)

///< ADCVRef internal iterator max count. Actual number of iteration is
///< N+1
#define PMA_RXWORD_MSG_ADCVREF_CTRL_1_ADCVREF_INT_ITER_MAX_BF_OFF ( 7)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_1_ADCVREF_INT_ITER_MAX_BF_WID ( 4)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_1_ADCVREF_INT_ITER_MAX_BF_MSK (0x00000780)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_1_ADCVREF_INT_ITER_MAX_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADCVREF_CONTROL_2 register description at address offset 0x53c
  *
  * Register default value:        0x00003624
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adcvref_control_2
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADCVREF_INIT_VAL_0 : 6;
    ///< ADCVref initial values for ADCVrefs
    ///< AccessType="RW" BitOffset="0" ResetValue="0x24"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ADCVREF_INIT_VAL_1 : 6;
    ///< ADCVref initial values for ADCVrefs
    ///< AccessType="RW" BitOffset="8" ResetValue="0x36"
    uint32_t  : 18;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_adcvref_ctrl_2_reg_t;

#define PMA_RXWORD_MSG_ADCVREF_CTRL_2_DEFAULT (0x00003624U)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_2_RD_MASK (0x00003f3fU)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_2_WR_MASK (0x00003f3fU)


///< ADCVref initial values for ADCVrefs
#define PMA_RXWORD_MSG_ADCVREF_CTRL_2_ADCVREF_INIT_VAL_0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_2_ADCVREF_INIT_VAL_0_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_2_ADCVREF_INIT_VAL_0_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_2_ADCVREF_INIT_VAL_0_BF_DEF (0x00000024)

///< ADCVref initial values for ADCVrefs
#define PMA_RXWORD_MSG_ADCVREF_CTRL_2_ADCVREF_INIT_VAL_1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_2_ADCVREF_INIT_VAL_1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_2_ADCVREF_INIT_VAL_1_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_2_ADCVREF_INIT_VAL_1_BF_DEF (0x00003600)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADCVREF_CONTROL_3 register description at address offset 0x540
  *
  * Register default value:        0x00001C0A
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adcvref_control_3
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADCVREF_INIT_VAL_2 : 6;
    ///< ADCVref initial values for ADCVrefs
    ///< AccessType="RW" BitOffset="0" ResetValue="0xA"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ADCVREF_INIT_VAL_3 : 6;
    ///< ADCVref initial values for ADCVrefs
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1C"
    uint32_t  : 18;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_adcvref_ctrl_3_reg_t;

#define PMA_RXWORD_MSG_ADCVREF_CTRL_3_DEFAULT (0x00001c0aU)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_3_RD_MASK (0x00003f3fU)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_3_WR_MASK (0x00003f3fU)


///< ADCVref initial values for ADCVrefs
#define PMA_RXWORD_MSG_ADCVREF_CTRL_3_ADCVREF_INIT_VAL_2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_3_ADCVREF_INIT_VAL_2_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_3_ADCVREF_INIT_VAL_2_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_3_ADCVREF_INIT_VAL_2_BF_DEF (0x0000000A)

///< ADCVref initial values for ADCVrefs
#define PMA_RXWORD_MSG_ADCVREF_CTRL_3_ADCVREF_INIT_VAL_3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_3_ADCVREF_INIT_VAL_3_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_3_ADCVREF_INIT_VAL_3_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_3_ADCVREF_INIT_VAL_3_BF_DEF (0x00001C00)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADCVREF_CONTROL_4 register description at address offset 0x544
  *
  * Register default value:        0x00004008
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adcvref_control_4
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADCVREF_TIMER_MAX : 8;
    ///< ADCVref delay timer
    ///< AccessType="RW" BitOffset="0" ResetValue="0x8"
    uint32_t ADCVREF_STATS_MAX : 10;
    ///< ADCVref stats counter
    ///< AccessType="RW" BitOffset="8" ResetValue="0x40"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_adcvref_ctrl_4_reg_t;

#define PMA_RXWORD_MSG_ADCVREF_CTRL_4_DEFAULT (0x00004008U)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_4_RD_MASK (0x0003ffffU)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_4_WR_MASK (0x0003ffffU)


///< ADCVref delay timer
#define PMA_RXWORD_MSG_ADCVREF_CTRL_4_ADCVREF_TIMER_MAX_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_4_ADCVREF_TIMER_MAX_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_4_ADCVREF_TIMER_MAX_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_4_ADCVREF_TIMER_MAX_BF_DEF (0x00000008)

///< ADCVref stats counter
#define PMA_RXWORD_MSG_ADCVREF_CTRL_4_ADCVREF_STATS_MAX_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_4_ADCVREF_STATS_MAX_BF_WID (10)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_4_ADCVREF_STATS_MAX_BF_MSK (0x0003FF00)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_4_ADCVREF_STATS_MAX_BF_DEF (0x00004000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADCVREF_CONTROL_5 register description at address offset 0x548
  *
  * Register default value:        0x0000201F
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adcvref_control_5
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADCVREF_TAP_MAX : 6;
    ///< ADCVref update accum saturation
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1F"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ADCVREF_TAP_MIN : 6;
    ///< ADCVref update accum saturation
    ///< AccessType="RW" BitOffset="8" ResetValue="0x20"
    uint32_t  : 18;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_adcvref_ctrl_5_reg_t;

#define PMA_RXWORD_MSG_ADCVREF_CTRL_5_DEFAULT (0x0000201fU)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_5_RD_MASK (0x00003f3fU)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_5_WR_MASK (0x00003f3fU)


///< ADCVref update accum saturation
#define PMA_RXWORD_MSG_ADCVREF_CTRL_5_ADCVREF_TAP_MAX_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_5_ADCVREF_TAP_MAX_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_5_ADCVREF_TAP_MAX_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_5_ADCVREF_TAP_MAX_BF_DEF (0x0000001F)

///< ADCVref update accum saturation
#define PMA_RXWORD_MSG_ADCVREF_CTRL_5_ADCVREF_TAP_MIN_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_5_ADCVREF_TAP_MIN_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_5_ADCVREF_TAP_MIN_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_5_ADCVREF_TAP_MIN_BF_DEF (0x00002000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADCVREF_CONTROL_6 register description at address offset 0x54c
  *
  * Register default value:        0x00000811
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adcvref_control_6
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADCVREF_COARSE_MU_EN : 1;
    ///< use coarse mu for ADCVref
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t ADCVREF_MU_COARSE : 8;
    ///< ADCVref update gain value for coarse run
    ///< AccessType="RW" BitOffset="1" ResetValue="0x8"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
    uint32_t ADCVREF_MU_FINE : 8;
    ///< ADCVref update gain value for fine run
    ///< AccessType="RW" BitOffset="10" ResetValue="0x2"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
    uint32_t ADCVREF_THRS_SEL : 1;
    ///< Selection adcvref thrs from adcofc taps or from adcvref taps average.
    ///< 0-default, from adcvref average; 1-from adcofc average
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_adcvref_ctrl_6_reg_t;

#define PMA_RXWORD_MSG_ADCVREF_CTRL_6_DEFAULT (0x00000811U)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_6_RD_MASK (0x0013fdffU)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_6_WR_MASK (0x0013fdffU)


///< use coarse mu for ADCVref
#define PMA_RXWORD_MSG_ADCVREF_CTRL_6_ADCVREF_COARSE_MU_EN_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_6_ADCVREF_COARSE_MU_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_6_ADCVREF_COARSE_MU_EN_BF_MSK (0x00000001)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_6_ADCVREF_COARSE_MU_EN_BF_DEF (0x00000001)

///< ADCVref update gain value for coarse run
#define PMA_RXWORD_MSG_ADCVREF_CTRL_6_ADCVREF_MU_COARSE_BF_OFF ( 1)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_6_ADCVREF_MU_COARSE_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_6_ADCVREF_MU_COARSE_BF_MSK (0x000001FE)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_6_ADCVREF_MU_COARSE_BF_DEF (0x00000010)

///< ADCVref update gain value for fine run
#define PMA_RXWORD_MSG_ADCVREF_CTRL_6_ADCVREF_MU_FINE_BF_OFF (10)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_6_ADCVREF_MU_FINE_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_6_ADCVREF_MU_FINE_BF_MSK (0x0003FC00)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_6_ADCVREF_MU_FINE_BF_DEF (0x00000800)

///< Selection adcvref thrs from adcofc taps or from adcvref taps average.
///< 0-default, from adcvref average; 1-from adcofc average
#define PMA_RXWORD_MSG_ADCVREF_CTRL_6_ADCVREF_THRS_SEL_BF_OFF (20)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_6_ADCVREF_THRS_SEL_BF_WID ( 1)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_6_ADCVREF_THRS_SEL_BF_MSK (0x00100000)
#define PMA_RXWORD_MSG_ADCVREF_CTRL_6_ADCVREF_THRS_SEL_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADCVREF_STATUS_0 register description at address offset 0x550
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adcvref_status_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADCVREF_AVG_UPDN : 4;
    ///< Final sign of the ADCVref statistics can be used by FW single run
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_adcvref_stat_0_reg_t;

#define PMA_RXWORD_MSG_ADCVREF_STAT_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_ADCVREF_STAT_0_RD_MASK (0x0000000fU)
#define PMA_RXWORD_MSG_ADCVREF_STAT_0_WR_MASK (0x00000000U)


///< Final sign of the ADCVref statistics can be used by FW single run
#define PMA_RXWORD_MSG_ADCVREF_STAT_0_ADCVREF_AVG_UPDN_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADCVREF_STAT_0_ADCVREF_AVG_UPDN_BF_WID ( 4)
#define PMA_RXWORD_MSG_ADCVREF_STAT_0_ADCVREF_AVG_UPDN_BF_MSK (0x0000000F)
#define PMA_RXWORD_MSG_ADCVREF_STAT_0_ADCVREF_AVG_UPDN_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_AFFE_CONTROL_0 register description at address offset 0x560
  *
  * Register default value:        0x00010020
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/affe_control_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t AFFE_UPDN_INV_CB : 1;
    ///< Chicken bit to invert up/down
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t AFFE_TIMER_MAX : 8;
    ///< affe delay timer threshold
    ///< AccessType="RW" BitOffset="1" ResetValue="0x10"
    uint32_t AFFE_STATS_MAX : 10;
    ///< affe stats counter threshold
    ///< AccessType="RW" BitOffset="9" ResetValue="0x80"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_affe_ctrl_0_reg_t;

#define PMA_RXWORD_MSG_AFFE_CTRL_0_DEFAULT (0x00010020U)
#define PMA_RXWORD_MSG_AFFE_CTRL_0_RD_MASK (0x0007ffffU)
#define PMA_RXWORD_MSG_AFFE_CTRL_0_WR_MASK (0x0007ffffU)


///< Chicken bit to invert up/down
#define PMA_RXWORD_MSG_AFFE_CTRL_0_AFFE_UPDN_INV_CB_BF_OFF ( 0)
#define PMA_RXWORD_MSG_AFFE_CTRL_0_AFFE_UPDN_INV_CB_BF_WID ( 1)
#define PMA_RXWORD_MSG_AFFE_CTRL_0_AFFE_UPDN_INV_CB_BF_MSK (0x00000001)
#define PMA_RXWORD_MSG_AFFE_CTRL_0_AFFE_UPDN_INV_CB_BF_DEF (0x00000000)

///< affe delay timer threshold
#define PMA_RXWORD_MSG_AFFE_CTRL_0_AFFE_TIMER_MAX_BF_OFF ( 1)
#define PMA_RXWORD_MSG_AFFE_CTRL_0_AFFE_TIMER_MAX_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_CTRL_0_AFFE_TIMER_MAX_BF_MSK (0x000001FE)
#define PMA_RXWORD_MSG_AFFE_CTRL_0_AFFE_TIMER_MAX_BF_DEF (0x00000020)

///< affe stats counter threshold
#define PMA_RXWORD_MSG_AFFE_CTRL_0_AFFE_STATS_MAX_BF_OFF ( 9)
#define PMA_RXWORD_MSG_AFFE_CTRL_0_AFFE_STATS_MAX_BF_WID (10)
#define PMA_RXWORD_MSG_AFFE_CTRL_0_AFFE_STATS_MAX_BF_MSK (0x0007FE00)
#define PMA_RXWORD_MSG_AFFE_CTRL_0_AFFE_STATS_MAX_BF_DEF (0x00010000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_AFFE_CONTROL_1 register description at address offset 0x564
  *
  * Register default value:        0x00016000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/affe_control_1
  * placeholder
  */

typedef union {
  struct {
    uint32_t AFFE_HOLD_EN : 4;
    ///< Hold affe taps accumulators
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t AFFE_INIT_VAL : 7;
    ///< Initial value for the affe coeff
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
    uint32_t AFFE_TAPS_IF_DIS_HOLD_THR : 5;
    ///< Threshold for affe_taps_if_dis hold crossing from dpma to apma
    ///< AccessType="RW" BitOffset="12" ResetValue="0x16"
    uint32_t AFFE_TAPS_IF_DIS : 1;
    ///< Disable affe taps interface signals to APMA
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t AFFE_TAP_FORCE_DIS : 4;
    ///< Disable affe individual taps to APMA
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t AFFE_TAP_DIS_VALUE : 7;
    ///< affe tap values when set affe taps to disable
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_affe_ctrl_1_reg_t;

#define PMA_RXWORD_MSG_AFFE_CTRL_1_DEFAULT (0x00016000U)
#define PMA_RXWORD_MSG_AFFE_CTRL_1_RD_MASK (0x1ffff7ffU)
#define PMA_RXWORD_MSG_AFFE_CTRL_1_WR_MASK (0x1ffff7ffU)


///< Hold affe taps accumulators
#define PMA_RXWORD_MSG_AFFE_CTRL_1_AFFE_HOLD_EN_BF_OFF ( 0)
#define PMA_RXWORD_MSG_AFFE_CTRL_1_AFFE_HOLD_EN_BF_WID ( 4)
#define PMA_RXWORD_MSG_AFFE_CTRL_1_AFFE_HOLD_EN_BF_MSK (0x0000000F)
#define PMA_RXWORD_MSG_AFFE_CTRL_1_AFFE_HOLD_EN_BF_DEF (0x00000000)

///< Initial value for the affe coeff
#define PMA_RXWORD_MSG_AFFE_CTRL_1_AFFE_INIT_VAL_BF_OFF ( 4)
#define PMA_RXWORD_MSG_AFFE_CTRL_1_AFFE_INIT_VAL_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_CTRL_1_AFFE_INIT_VAL_BF_MSK (0x000007F0)
#define PMA_RXWORD_MSG_AFFE_CTRL_1_AFFE_INIT_VAL_BF_DEF (0x00000000)

///< Threshold for affe_taps_if_dis hold crossing from dpma to apma
#define PMA_RXWORD_MSG_AFFE_CTRL_1_AFFE_TAPS_IF_DIS_HOLD_THR_BF_OFF (12)
#define PMA_RXWORD_MSG_AFFE_CTRL_1_AFFE_TAPS_IF_DIS_HOLD_THR_BF_WID ( 5)
#define PMA_RXWORD_MSG_AFFE_CTRL_1_AFFE_TAPS_IF_DIS_HOLD_THR_BF_MSK (0x0001F000)
#define PMA_RXWORD_MSG_AFFE_CTRL_1_AFFE_TAPS_IF_DIS_HOLD_THR_BF_DEF (0x00016000)

///< Disable affe taps interface signals to APMA
#define PMA_RXWORD_MSG_AFFE_CTRL_1_AFFE_TAPS_IF_DIS_BF_OFF (17)
#define PMA_RXWORD_MSG_AFFE_CTRL_1_AFFE_TAPS_IF_DIS_BF_WID ( 1)
#define PMA_RXWORD_MSG_AFFE_CTRL_1_AFFE_TAPS_IF_DIS_BF_MSK (0x00020000)
#define PMA_RXWORD_MSG_AFFE_CTRL_1_AFFE_TAPS_IF_DIS_BF_DEF (0x00000000)

///< Disable affe individual taps to APMA
#define PMA_RXWORD_MSG_AFFE_CTRL_1_AFFE_TAP_FORCE_DIS_BF_OFF (18)
#define PMA_RXWORD_MSG_AFFE_CTRL_1_AFFE_TAP_FORCE_DIS_BF_WID ( 4)
#define PMA_RXWORD_MSG_AFFE_CTRL_1_AFFE_TAP_FORCE_DIS_BF_MSK (0x003C0000)
#define PMA_RXWORD_MSG_AFFE_CTRL_1_AFFE_TAP_FORCE_DIS_BF_DEF (0x00000000)

///< affe tap values when set affe taps to disable
#define PMA_RXWORD_MSG_AFFE_CTRL_1_AFFE_TAP_DIS_VAL_BF_OFF (22)
#define PMA_RXWORD_MSG_AFFE_CTRL_1_AFFE_TAP_DIS_VAL_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_CTRL_1_AFFE_TAP_DIS_VAL_BF_MSK (0x1FC00000)
#define PMA_RXWORD_MSG_AFFE_CTRL_1_AFFE_TAP_DIS_VAL_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_AFFE_CONTROL_2 register description at address offset 0x568
  *
  * Register default value:        0x00010410
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/affe_control_2
  * placeholder
  */

typedef union {
  struct {
    uint32_t AFFE_MU_COARSE : 8;
    ///< Update affe gain coarse value
    ///< AccessType="RW" BitOffset="0" ResetValue="0x10"
    uint32_t AFFE_MU_FINE : 8;
    ///< Update affe gain fine value
    ///< AccessType="RW" BitOffset="8" ResetValue="0x4"
    uint32_t AFFE_COARSE_MU_EN : 1;
    ///< Select between coarse and fine update gains
    ///< AccessType="RW" BitOffset="16" ResetValue="0x1"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_affe_ctrl_2_reg_t;

#define PMA_RXWORD_MSG_AFFE_CTRL_2_DEFAULT (0x00010410U)
#define PMA_RXWORD_MSG_AFFE_CTRL_2_RD_MASK (0x0001ffffU)
#define PMA_RXWORD_MSG_AFFE_CTRL_2_WR_MASK (0x0001ffffU)


///< Update affe gain coarse value
#define PMA_RXWORD_MSG_AFFE_CTRL_2_AFFE_MU_COARSE_BF_OFF ( 0)
#define PMA_RXWORD_MSG_AFFE_CTRL_2_AFFE_MU_COARSE_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_CTRL_2_AFFE_MU_COARSE_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_AFFE_CTRL_2_AFFE_MU_COARSE_BF_DEF (0x00000010)

///< Update affe gain fine value
#define PMA_RXWORD_MSG_AFFE_CTRL_2_AFFE_MU_FINE_BF_OFF ( 8)
#define PMA_RXWORD_MSG_AFFE_CTRL_2_AFFE_MU_FINE_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_CTRL_2_AFFE_MU_FINE_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_AFFE_CTRL_2_AFFE_MU_FINE_BF_DEF (0x00000400)

///< Select between coarse and fine update gains
#define PMA_RXWORD_MSG_AFFE_CTRL_2_AFFE_COARSE_MU_EN_BF_OFF (16)
#define PMA_RXWORD_MSG_AFFE_CTRL_2_AFFE_COARSE_MU_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_AFFE_CTRL_2_AFFE_COARSE_MU_EN_BF_MSK (0x00010000)
#define PMA_RXWORD_MSG_AFFE_CTRL_2_AFFE_COARSE_MU_EN_BF_DEF (0x00010000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_AFFE_CONTROL_3 register description at address offset 0x56c
  *
  * Register default value:        0x0000403F
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/affe_control_3
  * placeholder
  */

typedef union {
  struct {
    uint32_t AFFE_TAP_MAX : 7;
    ///< update affe accum saturation at max width
    ///< AccessType="RW" BitOffset="0" ResetValue="0x3F"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t AFFE_TAP_MIN : 7;
    ///< update affe accum saturation at min width
    ///< AccessType="RW" BitOffset="8" ResetValue="0x40"
    uint32_t  : 17;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_affe_ctrl_3_reg_t;

#define PMA_RXWORD_MSG_AFFE_CTRL_3_DEFAULT (0x0000403fU)
#define PMA_RXWORD_MSG_AFFE_CTRL_3_RD_MASK (0x00007f7fU)
#define PMA_RXWORD_MSG_AFFE_CTRL_3_WR_MASK (0x00007f7fU)


///< update affe accum saturation at max width
#define PMA_RXWORD_MSG_AFFE_CTRL_3_AFFE_TAP_MAX_BF_OFF ( 0)
#define PMA_RXWORD_MSG_AFFE_CTRL_3_AFFE_TAP_MAX_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_CTRL_3_AFFE_TAP_MAX_BF_MSK (0x0000007F)
#define PMA_RXWORD_MSG_AFFE_CTRL_3_AFFE_TAP_MAX_BF_DEF (0x0000003F)

///< update affe accum saturation at min width
#define PMA_RXWORD_MSG_AFFE_CTRL_3_AFFE_TAP_MIN_BF_OFF ( 8)
#define PMA_RXWORD_MSG_AFFE_CTRL_3_AFFE_TAP_MIN_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_CTRL_3_AFFE_TAP_MIN_BF_MSK (0x00007F00)
#define PMA_RXWORD_MSG_AFFE_CTRL_3_AFFE_TAP_MIN_BF_DEF (0x00004000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_AFFE_STATUS_0 register description at address offset 0x570
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/affe_status_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t AFFE_AVG_UPDN : 4;
    ///< Up-Down decisions per tap
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_affe_stat_0_reg_t;

#define PMA_RXWORD_MSG_AFFE_STAT_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_AFFE_STAT_0_RD_MASK (0x0000000fU)
#define PMA_RXWORD_MSG_AFFE_STAT_0_WR_MASK (0x00000000U)


///< Up-Down decisions per tap
#define PMA_RXWORD_MSG_AFFE_STAT_0_AFFE_AVG_UPDN_BF_OFF ( 0)
#define PMA_RXWORD_MSG_AFFE_STAT_0_AFFE_AVG_UPDN_BF_WID ( 4)
#define PMA_RXWORD_MSG_AFFE_STAT_0_AFFE_AVG_UPDN_BF_MSK (0x0000000F)
#define PMA_RXWORD_MSG_AFFE_STAT_0_AFFE_AVG_UPDN_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OFC_CONTROL_0 register description at address offset 0x57c
  *
  * Register default value:        0x00010020
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ofc_control_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t OFC_UPDN_INV_CB : 1;
    ///< Chicken bit to invert up/down
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t OFC_TIMER_MAX : 8;
    ///< ofc delay timer threshold
    ///< AccessType="RW" BitOffset="1" ResetValue="0x10"
    uint32_t OFC_STATS_MAX : 10;
    ///< ofc stats counter threshold
    ///< AccessType="RW" BitOffset="9" ResetValue="0x80"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
    uint32_t OFC_HOLD_EN : 6;
    ///< Hold ofc taps accumulators
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ofc_ctrl_0_reg_t;

#define PMA_RXWORD_MSG_OFC_CTRL_0_DEFAULT (0x00010020U)
#define PMA_RXWORD_MSG_OFC_CTRL_0_RD_MASK (0x0fc7ffffU)
#define PMA_RXWORD_MSG_OFC_CTRL_0_WR_MASK (0x0fc7ffffU)


///< Chicken bit to invert up/down
#define PMA_RXWORD_MSG_OFC_CTRL_0_OFC_UPDN_INV_CB_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OFC_CTRL_0_OFC_UPDN_INV_CB_BF_WID ( 1)
#define PMA_RXWORD_MSG_OFC_CTRL_0_OFC_UPDN_INV_CB_BF_MSK (0x00000001)
#define PMA_RXWORD_MSG_OFC_CTRL_0_OFC_UPDN_INV_CB_BF_DEF (0x00000000)

///< ofc delay timer threshold
#define PMA_RXWORD_MSG_OFC_CTRL_0_OFC_TIMER_MAX_BF_OFF ( 1)
#define PMA_RXWORD_MSG_OFC_CTRL_0_OFC_TIMER_MAX_BF_WID ( 8)
#define PMA_RXWORD_MSG_OFC_CTRL_0_OFC_TIMER_MAX_BF_MSK (0x000001FE)
#define PMA_RXWORD_MSG_OFC_CTRL_0_OFC_TIMER_MAX_BF_DEF (0x00000020)

///< ofc stats counter threshold
#define PMA_RXWORD_MSG_OFC_CTRL_0_OFC_STATS_MAX_BF_OFF ( 9)
#define PMA_RXWORD_MSG_OFC_CTRL_0_OFC_STATS_MAX_BF_WID (10)
#define PMA_RXWORD_MSG_OFC_CTRL_0_OFC_STATS_MAX_BF_MSK (0x0007FE00)
#define PMA_RXWORD_MSG_OFC_CTRL_0_OFC_STATS_MAX_BF_DEF (0x00010000)

///< Hold ofc taps accumulators
#define PMA_RXWORD_MSG_OFC_CTRL_0_OFC_HOLD_EN_BF_OFF (22)
#define PMA_RXWORD_MSG_OFC_CTRL_0_OFC_HOLD_EN_BF_WID ( 6)
#define PMA_RXWORD_MSG_OFC_CTRL_0_OFC_HOLD_EN_BF_MSK (0x0FC00000)
#define PMA_RXWORD_MSG_OFC_CTRL_0_OFC_HOLD_EN_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OFC_CONTROL_1A register description at address offset 0x580
  *
  * Register default value:        0x000B42D0
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ofc_control_1a
  * placeholder
  */

typedef union {
  struct {
    uint32_t OFC_INIT_VAL_0 : 10;
    ///< Initial value for ofc_0 coeff
    ///< AccessType="RW" BitOffset="0" ResetValue="0x2D0"
    uint32_t OFC_INIT_VAL_1 : 10;
    ///< Initial value for ofc_1 coeff
    ///< AccessType="RW" BitOffset="10" ResetValue="0x2D0"
    uint32_t OFC_INIT_VAL_2 : 10;
    ///< Initial value for ofc_2 coeff
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ofc_ctrl_1a_reg_t;

#define PMA_RXWORD_MSG_OFC_CTRL_1A_DEFAULT (0x000b42d0U)
#define PMA_RXWORD_MSG_OFC_CTRL_1A_RD_MASK (0x3fffffffU)
#define PMA_RXWORD_MSG_OFC_CTRL_1A_WR_MASK (0x3fffffffU)


///< Initial value for ofc_0 coeff
#define PMA_RXWORD_MSG_OFC_CTRL_1A_OFC_INIT_VAL_0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OFC_CTRL_1A_OFC_INIT_VAL_0_BF_WID (10)
#define PMA_RXWORD_MSG_OFC_CTRL_1A_OFC_INIT_VAL_0_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_OFC_CTRL_1A_OFC_INIT_VAL_0_BF_DEF (0x000002D0)

///< Initial value for ofc_1 coeff
#define PMA_RXWORD_MSG_OFC_CTRL_1A_OFC_INIT_VAL_1_BF_OFF (10)
#define PMA_RXWORD_MSG_OFC_CTRL_1A_OFC_INIT_VAL_1_BF_WID (10)
#define PMA_RXWORD_MSG_OFC_CTRL_1A_OFC_INIT_VAL_1_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_OFC_CTRL_1A_OFC_INIT_VAL_1_BF_DEF (0x000B4000)

///< Initial value for ofc_2 coeff
#define PMA_RXWORD_MSG_OFC_CTRL_1A_OFC_INIT_VAL_2_BF_OFF (20)
#define PMA_RXWORD_MSG_OFC_CTRL_1A_OFC_INIT_VAL_2_BF_WID (10)
#define PMA_RXWORD_MSG_OFC_CTRL_1A_OFC_INIT_VAL_2_BF_MSK (0x3FF00000)
#define PMA_RXWORD_MSG_OFC_CTRL_1A_OFC_INIT_VAL_2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OFC_CONTROL_1B register description at address offset 0x584
  *
  * Register default value:        0x1304C000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ofc_control_1b
  * placeholder
  */

typedef union {
  struct {
    uint32_t OFC_INIT_VAL_3 : 10;
    ///< Initial value for ofc_3 coeff
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t OFC_INIT_VAL_4 : 10;
    ///< Initial value for ofc_4 coeff
    ///< AccessType="RW" BitOffset="10" ResetValue="0x130"
    uint32_t OFC_INIT_VAL_5 : 10;
    ///< Initial value for ofc_5 coeff
    ///< AccessType="RW" BitOffset="20" ResetValue="0x130"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ofc_ctrl_1b_reg_t;

#define PMA_RXWORD_MSG_OFC_CTRL_1B_DEFAULT (0x1304c000U)
#define PMA_RXWORD_MSG_OFC_CTRL_1B_RD_MASK (0x3fffffffU)
#define PMA_RXWORD_MSG_OFC_CTRL_1B_WR_MASK (0x3fffffffU)


///< Initial value for ofc_3 coeff
#define PMA_RXWORD_MSG_OFC_CTRL_1B_OFC_INIT_VAL_3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OFC_CTRL_1B_OFC_INIT_VAL_3_BF_WID (10)
#define PMA_RXWORD_MSG_OFC_CTRL_1B_OFC_INIT_VAL_3_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_OFC_CTRL_1B_OFC_INIT_VAL_3_BF_DEF (0x00000000)

///< Initial value for ofc_4 coeff
#define PMA_RXWORD_MSG_OFC_CTRL_1B_OFC_INIT_VAL_4_BF_OFF (10)
#define PMA_RXWORD_MSG_OFC_CTRL_1B_OFC_INIT_VAL_4_BF_WID (10)
#define PMA_RXWORD_MSG_OFC_CTRL_1B_OFC_INIT_VAL_4_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_OFC_CTRL_1B_OFC_INIT_VAL_4_BF_DEF (0x0004C000)

///< Initial value for ofc_5 coeff
#define PMA_RXWORD_MSG_OFC_CTRL_1B_OFC_INIT_VAL_5_BF_OFF (20)
#define PMA_RXWORD_MSG_OFC_CTRL_1B_OFC_INIT_VAL_5_BF_WID (10)
#define PMA_RXWORD_MSG_OFC_CTRL_1B_OFC_INIT_VAL_5_BF_MSK (0x3FF00000)
#define PMA_RXWORD_MSG_OFC_CTRL_1B_OFC_INIT_VAL_5_BF_DEF (0x13000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OFC_CONTROL_2 register description at address offset 0x588
  *
  * Register default value:        0x00010410
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ofc_control_2
  * placeholder
  */

typedef union {
  struct {
    uint32_t OFC_MU_COARSE : 8;
    ///< Update ofc vgain coarse value
    ///< AccessType="RW" BitOffset="0" ResetValue="0x10"
    uint32_t OFC_MU_FINE : 8;
    ///< Update ofc gain fine value
    ///< AccessType="RW" BitOffset="8" ResetValue="0x4"
    uint32_t OFC_COARSE_MU_EN : 1;
    ///< Select between coarse and fine update gains
    ///< AccessType="RW" BitOffset="16" ResetValue="0x1"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ofc_ctrl_2_reg_t;

#define PMA_RXWORD_MSG_OFC_CTRL_2_DEFAULT (0x00010410U)
#define PMA_RXWORD_MSG_OFC_CTRL_2_RD_MASK (0x0001ffffU)
#define PMA_RXWORD_MSG_OFC_CTRL_2_WR_MASK (0x0001ffffU)


///< Update ofc vgain coarse value
#define PMA_RXWORD_MSG_OFC_CTRL_2_OFC_MU_COARSE_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OFC_CTRL_2_OFC_MU_COARSE_BF_WID ( 8)
#define PMA_RXWORD_MSG_OFC_CTRL_2_OFC_MU_COARSE_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OFC_CTRL_2_OFC_MU_COARSE_BF_DEF (0x00000010)

///< Update ofc gain fine value
#define PMA_RXWORD_MSG_OFC_CTRL_2_OFC_MU_FINE_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OFC_CTRL_2_OFC_MU_FINE_BF_WID ( 8)
#define PMA_RXWORD_MSG_OFC_CTRL_2_OFC_MU_FINE_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OFC_CTRL_2_OFC_MU_FINE_BF_DEF (0x00000400)

///< Select between coarse and fine update gains
#define PMA_RXWORD_MSG_OFC_CTRL_2_OFC_COARSE_MU_EN_BF_OFF (16)
#define PMA_RXWORD_MSG_OFC_CTRL_2_OFC_COARSE_MU_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_OFC_CTRL_2_OFC_COARSE_MU_EN_BF_MSK (0x00010000)
#define PMA_RXWORD_MSG_OFC_CTRL_2_OFC_COARSE_MU_EN_BF_DEF (0x00010000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OFC_CONTROL_3 register description at address offset 0x58c
  *
  * Register default value:        0x000801FF
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ofc_control_3
  * placeholder
  */

typedef union {
  struct {
    uint32_t OFC_TAP_MAX : 10;
    ///< update ofc accum saturation at max width
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1FF"
    uint32_t OFC_TAP_MIN : 10;
    ///< update ofc accum saturation at min width
    ///< AccessType="RW" BitOffset="10" ResetValue="0x200"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ofc_ctrl_3_reg_t;

#define PMA_RXWORD_MSG_OFC_CTRL_3_DEFAULT (0x000801ffU)
#define PMA_RXWORD_MSG_OFC_CTRL_3_RD_MASK (0x000fffffU)
#define PMA_RXWORD_MSG_OFC_CTRL_3_WR_MASK (0x000fffffU)


///< update ofc accum saturation at max width
#define PMA_RXWORD_MSG_OFC_CTRL_3_OFC_TAP_MAX_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OFC_CTRL_3_OFC_TAP_MAX_BF_WID (10)
#define PMA_RXWORD_MSG_OFC_CTRL_3_OFC_TAP_MAX_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_OFC_CTRL_3_OFC_TAP_MAX_BF_DEF (0x000001FF)

///< update ofc accum saturation at min width
#define PMA_RXWORD_MSG_OFC_CTRL_3_OFC_TAP_MIN_BF_OFF (10)
#define PMA_RXWORD_MSG_OFC_CTRL_3_OFC_TAP_MIN_BF_WID (10)
#define PMA_RXWORD_MSG_OFC_CTRL_3_OFC_TAP_MIN_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_OFC_CTRL_3_OFC_TAP_MIN_BF_DEF (0x00080000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OFC_STATUS_0 register description at address offset 0x590
  *
  * Register default value:        0x000AC150
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ofc_status_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t OFC_TAP_HI : 10;
    ///< ofc tap high
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x150"
    uint32_t OFC_TAP_LO : 10;
    ///< ofc tap_low
    ///< AccessType="RO/V" BitOffset="10" ResetValue="0x2B0"
    uint32_t OFC_TAP_ZR : 10;
    ///< ofc tap_zero
    ///< AccessType="RO/V" BitOffset="20" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ofc_stat_0_reg_t;

#define PMA_RXWORD_MSG_OFC_STAT_0_DEFAULT (0x000ac150U)
#define PMA_RXWORD_MSG_OFC_STAT_0_RD_MASK (0x3fffffffU)
#define PMA_RXWORD_MSG_OFC_STAT_0_WR_MASK (0x00000000U)


///< ofc tap high
#define PMA_RXWORD_MSG_OFC_STAT_0_OFC_TAP_HI_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OFC_STAT_0_OFC_TAP_HI_BF_WID (10)
#define PMA_RXWORD_MSG_OFC_STAT_0_OFC_TAP_HI_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_OFC_STAT_0_OFC_TAP_HI_BF_DEF (0x00000150)

///< ofc tap_low
#define PMA_RXWORD_MSG_OFC_STAT_0_OFC_TAP_LO_BF_OFF (10)
#define PMA_RXWORD_MSG_OFC_STAT_0_OFC_TAP_LO_BF_WID (10)
#define PMA_RXWORD_MSG_OFC_STAT_0_OFC_TAP_LO_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_OFC_STAT_0_OFC_TAP_LO_BF_DEF (0x000AC000)

///< ofc tap_zero
#define PMA_RXWORD_MSG_OFC_STAT_0_OFC_TAP_ZR_BF_OFF (20)
#define PMA_RXWORD_MSG_OFC_STAT_0_OFC_TAP_ZR_BF_WID (10)
#define PMA_RXWORD_MSG_OFC_STAT_0_OFC_TAP_ZR_BF_MSK (0x3FF00000)
#define PMA_RXWORD_MSG_OFC_STAT_0_OFC_TAP_ZR_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET0_FRAC_0 register description at address offset 0x594
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set0_frac_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET0_FRAC_PRE3 : 8;
    ///< set0 fractional ffe pre cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET0_FRAC_PRE2 : 8;
    ///< set0 fractional ffe pre cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET0_FRAC_PRE1 : 8;
    ///< set0 fractional ffe pre cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET0_FRAC_POST1 : 8;
    ///< set0 fractional ffe post cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set0_frac_0_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_0_WR_MASK (0xffffffffU)


///< set0 fractional ffe pre cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_0_FFE_COEFF_SET0_FRAC_PRE3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_0_FFE_COEFF_SET0_FRAC_PRE3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_0_FFE_COEFF_SET0_FRAC_PRE3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_0_FFE_COEFF_SET0_FRAC_PRE3_BF_DEF (0x00000000)

///< set0 fractional ffe pre cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_0_FFE_COEFF_SET0_FRAC_PRE2_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_0_FFE_COEFF_SET0_FRAC_PRE2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_0_FFE_COEFF_SET0_FRAC_PRE2_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_0_FFE_COEFF_SET0_FRAC_PRE2_BF_DEF (0x00000000)

///< set0 fractional ffe pre cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_0_FFE_COEFF_SET0_FRAC_PRE1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_0_FFE_COEFF_SET0_FRAC_PRE1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_0_FFE_COEFF_SET0_FRAC_PRE1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_0_FFE_COEFF_SET0_FRAC_PRE1_BF_DEF (0x00000000)

///< set0 fractional ffe post cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_0_FFE_COEFF_SET0_FRAC_POST1_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_0_FFE_COEFF_SET0_FRAC_POST1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_0_FFE_COEFF_SET0_FRAC_POST1_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_0_FFE_COEFF_SET0_FRAC_POST1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET0_FRAC_1 register description at address offset 0x598
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set0_frac_1
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET0_FRAC_POST2 : 8;
    ///< set0 fractional ffe post cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET0_FRAC_POST3 : 8;
    ///< set0 fractional ffe post cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET0_FRAC_POST4 : 8;
    ///< set0 fractional ffe post cursor 4 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET0_FRAC_POST5 : 8;
    ///< set0 fractional ffe post cursor 5 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set0_frac_1_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_1_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_1_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_1_WR_MASK (0xffffffffU)


///< set0 fractional ffe post cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_1_FFE_COEFF_SET0_FRAC_POST2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_1_FFE_COEFF_SET0_FRAC_POST2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_1_FFE_COEFF_SET0_FRAC_POST2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_1_FFE_COEFF_SET0_FRAC_POST2_BF_DEF (0x00000000)

///< set0 fractional ffe post cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_1_FFE_COEFF_SET0_FRAC_POST3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_1_FFE_COEFF_SET0_FRAC_POST3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_1_FFE_COEFF_SET0_FRAC_POST3_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_1_FFE_COEFF_SET0_FRAC_POST3_BF_DEF (0x00000000)

///< set0 fractional ffe post cursor 4 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_1_FFE_COEFF_SET0_FRAC_POST4_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_1_FFE_COEFF_SET0_FRAC_POST4_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_1_FFE_COEFF_SET0_FRAC_POST4_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_1_FFE_COEFF_SET0_FRAC_POST4_BF_DEF (0x00000000)

///< set0 fractional ffe post cursor 5 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_1_FFE_COEFF_SET0_FRAC_POST5_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_1_FFE_COEFF_SET0_FRAC_POST5_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_1_FFE_COEFF_SET0_FRAC_POST5_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_1_FFE_COEFF_SET0_FRAC_POST5_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET0_FRAC_2 register description at address offset 0x59c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set0_frac_2
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET0_FRAC_POST6 : 8;
    ///< set0 fractional ffe post cursor 6 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET0_FRAC_POST7 : 8;
    ///< set0 fractional ffe post cursor 7 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET0_FRAC_POST8 : 8;
    ///< set0 fractional ffe post cursor 8 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET0_FRAC_POST9 : 8;
    ///< set0 fractional ffe post cursor 9 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set0_frac_2_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_2_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_2_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_2_WR_MASK (0xffffffffU)


///< set0 fractional ffe post cursor 6 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_2_FFE_COEFF_SET0_FRAC_POST6_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_2_FFE_COEFF_SET0_FRAC_POST6_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_2_FFE_COEFF_SET0_FRAC_POST6_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_2_FFE_COEFF_SET0_FRAC_POST6_BF_DEF (0x00000000)

///< set0 fractional ffe post cursor 7 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_2_FFE_COEFF_SET0_FRAC_POST7_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_2_FFE_COEFF_SET0_FRAC_POST7_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_2_FFE_COEFF_SET0_FRAC_POST7_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_2_FFE_COEFF_SET0_FRAC_POST7_BF_DEF (0x00000000)

///< set0 fractional ffe post cursor 8 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_2_FFE_COEFF_SET0_FRAC_POST8_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_2_FFE_COEFF_SET0_FRAC_POST8_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_2_FFE_COEFF_SET0_FRAC_POST8_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_2_FFE_COEFF_SET0_FRAC_POST8_BF_DEF (0x00000000)

///< set0 fractional ffe post cursor 9 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_2_FFE_COEFF_SET0_FRAC_POST9_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_2_FFE_COEFF_SET0_FRAC_POST9_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_2_FFE_COEFF_SET0_FRAC_POST9_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_2_FFE_COEFF_SET0_FRAC_POST9_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET0_FRAC_3 register description at address offset 0x5a0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set0_frac_3
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET0_FRAC_POST10 : 8;
    ///< set0 fractional ffe post cursor 10 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET0_FRAC_POST11 : 8;
    ///< set0 fractional ffe post cursor 11 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET0_FRAC_POST12 : 8;
    ///< set0 fractional ffe post cursor 12 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET0_FRAC_BANKA_FLOAT1 : 8;
    ///< set0 fractional ffe bankA float 1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set0_frac_3_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_3_WR_MASK (0xffffffffU)


///< set0 fractional ffe post cursor 10 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_3_FFE_COEFF_SET0_FRAC_POST10_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_3_FFE_COEFF_SET0_FRAC_POST10_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_3_FFE_COEFF_SET0_FRAC_POST10_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_3_FFE_COEFF_SET0_FRAC_POST10_BF_DEF (0x00000000)

///< set0 fractional ffe post cursor 11 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_3_FFE_COEFF_SET0_FRAC_POST11_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_3_FFE_COEFF_SET0_FRAC_POST11_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_3_FFE_COEFF_SET0_FRAC_POST11_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_3_FFE_COEFF_SET0_FRAC_POST11_BF_DEF (0x00000000)

///< set0 fractional ffe post cursor 12 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_3_FFE_COEFF_SET0_FRAC_POST12_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_3_FFE_COEFF_SET0_FRAC_POST12_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_3_FFE_COEFF_SET0_FRAC_POST12_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_3_FFE_COEFF_SET0_FRAC_POST12_BF_DEF (0x00000000)

///< set0 fractional ffe bankA float 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_3_FFE_COEFF_SET0_FRAC_BANKA_FLOAT1_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_3_FFE_COEFF_SET0_FRAC_BANKA_FLOAT1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_3_FFE_COEFF_SET0_FRAC_BANKA_FLOAT1_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_3_FFE_COEFF_SET0_FRAC_BANKA_FLOAT1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET0_FRAC_4 register description at address offset 0x5a4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set0_frac_4
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET0_FRAC_BANKA_FLOAT2 : 8;
    ///< set0 fractional ffe bankA float 2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET0_FRAC_BANKA_FLOAT3 : 8;
    ///< set0 fractional ffe bankA float 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET0_FRAC_BANKB_FLOAT1 : 8;
    ///< set0 fractional ffe bankB float 1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET0_FRAC_BANKB_FLOAT2 : 8;
    ///< set0 fractional ffe bankB float 2 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set0_frac_4_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_4_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_4_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_4_WR_MASK (0xffffffffU)


///< set0 fractional ffe bankA float 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_4_FFE_COEFF_SET0_FRAC_BANKA_FLOAT2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_4_FFE_COEFF_SET0_FRAC_BANKA_FLOAT2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_4_FFE_COEFF_SET0_FRAC_BANKA_FLOAT2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_4_FFE_COEFF_SET0_FRAC_BANKA_FLOAT2_BF_DEF (0x00000000)

///< set0 fractional ffe bankA float 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_4_FFE_COEFF_SET0_FRAC_BANKA_FLOAT3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_4_FFE_COEFF_SET0_FRAC_BANKA_FLOAT3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_4_FFE_COEFF_SET0_FRAC_BANKA_FLOAT3_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_4_FFE_COEFF_SET0_FRAC_BANKA_FLOAT3_BF_DEF (0x00000000)

///< set0 fractional ffe bankB float 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_4_FFE_COEFF_SET0_FRAC_BANKB_FLOAT1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_4_FFE_COEFF_SET0_FRAC_BANKB_FLOAT1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_4_FFE_COEFF_SET0_FRAC_BANKB_FLOAT1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_4_FFE_COEFF_SET0_FRAC_BANKB_FLOAT1_BF_DEF (0x00000000)

///< set0 fractional ffe bankB float 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_4_FFE_COEFF_SET0_FRAC_BANKB_FLOAT2_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_4_FFE_COEFF_SET0_FRAC_BANKB_FLOAT2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_4_FFE_COEFF_SET0_FRAC_BANKB_FLOAT2_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_4_FFE_COEFF_SET0_FRAC_BANKB_FLOAT2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET0_FRAC_5 register description at address offset 0x5a8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set0_frac_5
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET0_FRAC_BANKB_FLOAT3 : 8;
    ///< set0 fractional ffe bankB float 3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET0_FRAC_BANKC_FLOAT1 : 8;
    ///< set0 fractional ffe bankC float 1 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET0_FRAC_BANKC_FLOAT2 : 8;
    ///< set0 fractional ffe bankC float 2 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET0_FRAC_BANKC_FLOAT3 : 8;
    ///< set0 fractional ffe bankC float 3 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set0_frac_5_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_5_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_5_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_5_WR_MASK (0xffffffffU)


///< set0 fractional ffe bankB float 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_5_FFE_COEFF_SET0_FRAC_BANKB_FLOAT3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_5_FFE_COEFF_SET0_FRAC_BANKB_FLOAT3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_5_FFE_COEFF_SET0_FRAC_BANKB_FLOAT3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_5_FFE_COEFF_SET0_FRAC_BANKB_FLOAT3_BF_DEF (0x00000000)

///< set0 fractional ffe bankC float 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_5_FFE_COEFF_SET0_FRAC_BANKC_FLOAT1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_5_FFE_COEFF_SET0_FRAC_BANKC_FLOAT1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_5_FFE_COEFF_SET0_FRAC_BANKC_FLOAT1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_5_FFE_COEFF_SET0_FRAC_BANKC_FLOAT1_BF_DEF (0x00000000)

///< set0 fractional ffe bankC float 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_5_FFE_COEFF_SET0_FRAC_BANKC_FLOAT2_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_5_FFE_COEFF_SET0_FRAC_BANKC_FLOAT2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_5_FFE_COEFF_SET0_FRAC_BANKC_FLOAT2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_5_FFE_COEFF_SET0_FRAC_BANKC_FLOAT2_BF_DEF (0x00000000)

///< set0 fractional ffe bankC float 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_5_FFE_COEFF_SET0_FRAC_BANKC_FLOAT3_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_5_FFE_COEFF_SET0_FRAC_BANKC_FLOAT3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_5_FFE_COEFF_SET0_FRAC_BANKC_FLOAT3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_5_FFE_COEFF_SET0_FRAC_BANKC_FLOAT3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET1_FRAC_0 register description at address offset 0x5ac
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set1_frac_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET1_FRAC_PRE3 : 8;
    ///< set1 fractional ffe pre cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET1_FRAC_PRE2 : 8;
    ///< set1 fractional ffe pre cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET1_FRAC_PRE1 : 8;
    ///< set1 fractional ffe pre cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET1_FRAC_POST1 : 8;
    ///< set1 fractional ffe post cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set1_frac_0_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_0_WR_MASK (0xffffffffU)


///< set1 fractional ffe pre cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_0_FFE_COEFF_SET1_FRAC_PRE3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_0_FFE_COEFF_SET1_FRAC_PRE3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_0_FFE_COEFF_SET1_FRAC_PRE3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_0_FFE_COEFF_SET1_FRAC_PRE3_BF_DEF (0x00000000)

///< set1 fractional ffe pre cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_0_FFE_COEFF_SET1_FRAC_PRE2_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_0_FFE_COEFF_SET1_FRAC_PRE2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_0_FFE_COEFF_SET1_FRAC_PRE2_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_0_FFE_COEFF_SET1_FRAC_PRE2_BF_DEF (0x00000000)

///< set1 fractional ffe pre cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_0_FFE_COEFF_SET1_FRAC_PRE1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_0_FFE_COEFF_SET1_FRAC_PRE1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_0_FFE_COEFF_SET1_FRAC_PRE1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_0_FFE_COEFF_SET1_FRAC_PRE1_BF_DEF (0x00000000)

///< set1 fractional ffe post cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_0_FFE_COEFF_SET1_FRAC_POST1_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_0_FFE_COEFF_SET1_FRAC_POST1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_0_FFE_COEFF_SET1_FRAC_POST1_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_0_FFE_COEFF_SET1_FRAC_POST1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET1_FRAC_1 register description at address offset 0x5b0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set1_frac_1
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET1_FRAC_POST2 : 8;
    ///< set1 fractional ffe post cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET1_FRAC_POST3 : 8;
    ///< set1 fractional ffe post cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET1_FRAC_POST4 : 8;
    ///< set1 fractional ffe post cursor 4 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET1_FRAC_POST5 : 8;
    ///< set1 fractional ffe post cursor 5 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set1_frac_1_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_1_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_1_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_1_WR_MASK (0xffffffffU)


///< set1 fractional ffe post cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_1_FFE_COEFF_SET1_FRAC_POST2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_1_FFE_COEFF_SET1_FRAC_POST2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_1_FFE_COEFF_SET1_FRAC_POST2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_1_FFE_COEFF_SET1_FRAC_POST2_BF_DEF (0x00000000)

///< set1 fractional ffe post cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_1_FFE_COEFF_SET1_FRAC_POST3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_1_FFE_COEFF_SET1_FRAC_POST3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_1_FFE_COEFF_SET1_FRAC_POST3_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_1_FFE_COEFF_SET1_FRAC_POST3_BF_DEF (0x00000000)

///< set1 fractional ffe post cursor 4 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_1_FFE_COEFF_SET1_FRAC_POST4_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_1_FFE_COEFF_SET1_FRAC_POST4_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_1_FFE_COEFF_SET1_FRAC_POST4_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_1_FFE_COEFF_SET1_FRAC_POST4_BF_DEF (0x00000000)

///< set1 fractional ffe post cursor 5 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_1_FFE_COEFF_SET1_FRAC_POST5_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_1_FFE_COEFF_SET1_FRAC_POST5_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_1_FFE_COEFF_SET1_FRAC_POST5_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_1_FFE_COEFF_SET1_FRAC_POST5_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET1_FRAC_2 register description at address offset 0x5b4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set1_frac_2
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET1_FRAC_POST6 : 8;
    ///< set1 fractional ffe post cursor 6 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET1_FRAC_POST7 : 8;
    ///< set1 fractional ffe post cursor 7 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET1_FRAC_POST8 : 8;
    ///< set1 fractional ffe post cursor 8 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET1_FRAC_POST9 : 8;
    ///< set1 fractional ffe post cursor 9 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set1_frac_2_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_2_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_2_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_2_WR_MASK (0xffffffffU)


///< set1 fractional ffe post cursor 6 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_2_FFE_COEFF_SET1_FRAC_POST6_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_2_FFE_COEFF_SET1_FRAC_POST6_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_2_FFE_COEFF_SET1_FRAC_POST6_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_2_FFE_COEFF_SET1_FRAC_POST6_BF_DEF (0x00000000)

///< set1 fractional ffe post cursor 7 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_2_FFE_COEFF_SET1_FRAC_POST7_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_2_FFE_COEFF_SET1_FRAC_POST7_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_2_FFE_COEFF_SET1_FRAC_POST7_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_2_FFE_COEFF_SET1_FRAC_POST7_BF_DEF (0x00000000)

///< set1 fractional ffe post cursor 8 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_2_FFE_COEFF_SET1_FRAC_POST8_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_2_FFE_COEFF_SET1_FRAC_POST8_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_2_FFE_COEFF_SET1_FRAC_POST8_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_2_FFE_COEFF_SET1_FRAC_POST8_BF_DEF (0x00000000)

///< set1 fractional ffe post cursor 9 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_2_FFE_COEFF_SET1_FRAC_POST9_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_2_FFE_COEFF_SET1_FRAC_POST9_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_2_FFE_COEFF_SET1_FRAC_POST9_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_2_FFE_COEFF_SET1_FRAC_POST9_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET1_FRAC_3 register description at address offset 0x5b8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set1_frac_3
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET1_FRAC_POST10 : 8;
    ///< set1 fractional ffe post cursor 10 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET1_FRAC_POST11 : 8;
    ///< set1 fractional ffe post cursor 11 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET1_FRAC_POST12 : 8;
    ///< set1 fractional ffe post cursor 12 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET1_FRAC_BANKA_FLOAT1 : 8;
    ///< set1 fractional ffe bankA float 1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set1_frac_3_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_3_WR_MASK (0xffffffffU)


///< set1 fractional ffe post cursor 10 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_3_FFE_COEFF_SET1_FRAC_POST10_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_3_FFE_COEFF_SET1_FRAC_POST10_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_3_FFE_COEFF_SET1_FRAC_POST10_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_3_FFE_COEFF_SET1_FRAC_POST10_BF_DEF (0x00000000)

///< set1 fractional ffe post cursor 11 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_3_FFE_COEFF_SET1_FRAC_POST11_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_3_FFE_COEFF_SET1_FRAC_POST11_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_3_FFE_COEFF_SET1_FRAC_POST11_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_3_FFE_COEFF_SET1_FRAC_POST11_BF_DEF (0x00000000)

///< set1 fractional ffe post cursor 12 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_3_FFE_COEFF_SET1_FRAC_POST12_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_3_FFE_COEFF_SET1_FRAC_POST12_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_3_FFE_COEFF_SET1_FRAC_POST12_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_3_FFE_COEFF_SET1_FRAC_POST12_BF_DEF (0x00000000)

///< set1 fractional ffe bankA float 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_3_FFE_COEFF_SET1_FRAC_BANKA_FLOAT1_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_3_FFE_COEFF_SET1_FRAC_BANKA_FLOAT1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_3_FFE_COEFF_SET1_FRAC_BANKA_FLOAT1_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_3_FFE_COEFF_SET1_FRAC_BANKA_FLOAT1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET1_FRAC_4 register description at address offset 0x5bc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set1_frac_4
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET1_FRAC_BANKA_FLOAT2 : 8;
    ///< set1 fractional ffe bankA float 2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET1_FRAC_BANKA_FLOAT3 : 8;
    ///< set1 fractional ffe bankA float 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET1_FRAC_BANKB_FLOAT1 : 8;
    ///< set1 fractional ffe bankB float 1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET1_FRAC_BANKB_FLOAT2 : 8;
    ///< set1 fractional ffe bankB float 2 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set1_frac_4_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_4_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_4_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_4_WR_MASK (0xffffffffU)


///< set1 fractional ffe bankA float 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_4_FFE_COEFF_SET1_FRAC_BANKA_FLOAT2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_4_FFE_COEFF_SET1_FRAC_BANKA_FLOAT2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_4_FFE_COEFF_SET1_FRAC_BANKA_FLOAT2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_4_FFE_COEFF_SET1_FRAC_BANKA_FLOAT2_BF_DEF (0x00000000)

///< set1 fractional ffe bankA float 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_4_FFE_COEFF_SET1_FRAC_BANKA_FLOAT3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_4_FFE_COEFF_SET1_FRAC_BANKA_FLOAT3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_4_FFE_COEFF_SET1_FRAC_BANKA_FLOAT3_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_4_FFE_COEFF_SET1_FRAC_BANKA_FLOAT3_BF_DEF (0x00000000)

///< set1 fractional ffe bankB float 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_4_FFE_COEFF_SET1_FRAC_BANKB_FLOAT1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_4_FFE_COEFF_SET1_FRAC_BANKB_FLOAT1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_4_FFE_COEFF_SET1_FRAC_BANKB_FLOAT1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_4_FFE_COEFF_SET1_FRAC_BANKB_FLOAT1_BF_DEF (0x00000000)

///< set1 fractional ffe bankB float 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_4_FFE_COEFF_SET1_FRAC_BANKB_FLOAT2_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_4_FFE_COEFF_SET1_FRAC_BANKB_FLOAT2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_4_FFE_COEFF_SET1_FRAC_BANKB_FLOAT2_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_4_FFE_COEFF_SET1_FRAC_BANKB_FLOAT2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET1_FRAC_5 register description at address offset 0x5c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set1_frac_5
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET1_FRAC_BANKB_FLOAT3 : 8;
    ///< set1 fractional ffe bankB float 3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET1_FRAC_BANKC_FLOAT1 : 8;
    ///< set1 fractional ffe bankC float 1 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET1_FRAC_BANKC_FLOAT2 : 8;
    ///< set1 fractional ffe bankC float 2 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET1_FRAC_BANKC_FLOAT3 : 8;
    ///< set1 fractional ffe bankC float 3 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set1_frac_5_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_5_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_5_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_5_WR_MASK (0xffffffffU)


///< set1 fractional ffe bankB float 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_5_FFE_COEFF_SET1_FRAC_BANKB_FLOAT3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_5_FFE_COEFF_SET1_FRAC_BANKB_FLOAT3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_5_FFE_COEFF_SET1_FRAC_BANKB_FLOAT3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_5_FFE_COEFF_SET1_FRAC_BANKB_FLOAT3_BF_DEF (0x00000000)

///< set1 fractional ffe bankC float 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_5_FFE_COEFF_SET1_FRAC_BANKC_FLOAT1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_5_FFE_COEFF_SET1_FRAC_BANKC_FLOAT1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_5_FFE_COEFF_SET1_FRAC_BANKC_FLOAT1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_5_FFE_COEFF_SET1_FRAC_BANKC_FLOAT1_BF_DEF (0x00000000)

///< set1 fractional ffe bankC float 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_5_FFE_COEFF_SET1_FRAC_BANKC_FLOAT2_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_5_FFE_COEFF_SET1_FRAC_BANKC_FLOAT2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_5_FFE_COEFF_SET1_FRAC_BANKC_FLOAT2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_5_FFE_COEFF_SET1_FRAC_BANKC_FLOAT2_BF_DEF (0x00000000)

///< set1 fractional ffe bankC float 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_5_FFE_COEFF_SET1_FRAC_BANKC_FLOAT3_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_5_FFE_COEFF_SET1_FRAC_BANKC_FLOAT3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_5_FFE_COEFF_SET1_FRAC_BANKC_FLOAT3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_5_FFE_COEFF_SET1_FRAC_BANKC_FLOAT3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET2_FRAC_0 register description at address offset 0x5c4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set2_frac_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET2_FRAC_PRE3 : 8;
    ///< set2 fractional ffe pre cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET2_FRAC_PRE2 : 8;
    ///< set2 fractional ffe pre cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET2_FRAC_PRE1 : 8;
    ///< set2 fractional ffe pre cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET2_FRAC_POST1 : 8;
    ///< set2 fractional ffe post cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set2_frac_0_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_0_WR_MASK (0xffffffffU)


///< set2 fractional ffe pre cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_0_FFE_COEFF_SET2_FRAC_PRE3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_0_FFE_COEFF_SET2_FRAC_PRE3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_0_FFE_COEFF_SET2_FRAC_PRE3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_0_FFE_COEFF_SET2_FRAC_PRE3_BF_DEF (0x00000000)

///< set2 fractional ffe pre cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_0_FFE_COEFF_SET2_FRAC_PRE2_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_0_FFE_COEFF_SET2_FRAC_PRE2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_0_FFE_COEFF_SET2_FRAC_PRE2_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_0_FFE_COEFF_SET2_FRAC_PRE2_BF_DEF (0x00000000)

///< set2 fractional ffe pre cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_0_FFE_COEFF_SET2_FRAC_PRE1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_0_FFE_COEFF_SET2_FRAC_PRE1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_0_FFE_COEFF_SET2_FRAC_PRE1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_0_FFE_COEFF_SET2_FRAC_PRE1_BF_DEF (0x00000000)

///< set2 fractional ffe post cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_0_FFE_COEFF_SET2_FRAC_POST1_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_0_FFE_COEFF_SET2_FRAC_POST1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_0_FFE_COEFF_SET2_FRAC_POST1_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_0_FFE_COEFF_SET2_FRAC_POST1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET2_FRAC_1 register description at address offset 0x5c8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set2_frac_1
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET2_FRAC_POST2 : 8;
    ///< set2 fractional ffe post cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET2_FRAC_POST3 : 8;
    ///< set2 fractional ffe post cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET2_FRAC_POST4 : 8;
    ///< set2 fractional ffe post cursor 4 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET2_FRAC_POST5 : 8;
    ///< set2 fractional ffe post cursor 5 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set2_frac_1_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_1_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_1_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_1_WR_MASK (0xffffffffU)


///< set2 fractional ffe post cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_1_FFE_COEFF_SET2_FRAC_POST2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_1_FFE_COEFF_SET2_FRAC_POST2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_1_FFE_COEFF_SET2_FRAC_POST2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_1_FFE_COEFF_SET2_FRAC_POST2_BF_DEF (0x00000000)

///< set2 fractional ffe post cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_1_FFE_COEFF_SET2_FRAC_POST3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_1_FFE_COEFF_SET2_FRAC_POST3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_1_FFE_COEFF_SET2_FRAC_POST3_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_1_FFE_COEFF_SET2_FRAC_POST3_BF_DEF (0x00000000)

///< set2 fractional ffe post cursor 4 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_1_FFE_COEFF_SET2_FRAC_POST4_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_1_FFE_COEFF_SET2_FRAC_POST4_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_1_FFE_COEFF_SET2_FRAC_POST4_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_1_FFE_COEFF_SET2_FRAC_POST4_BF_DEF (0x00000000)

///< set2 fractional ffe post cursor 5 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_1_FFE_COEFF_SET2_FRAC_POST5_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_1_FFE_COEFF_SET2_FRAC_POST5_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_1_FFE_COEFF_SET2_FRAC_POST5_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_1_FFE_COEFF_SET2_FRAC_POST5_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET2_FRAC_2 register description at address offset 0x5cc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set2_frac_2
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET2_FRAC_POST6 : 8;
    ///< set2 fractional ffe post cursor 6 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET2_FRAC_POST7 : 8;
    ///< set2 fractional ffe post cursor 7 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET2_FRAC_POST8 : 8;
    ///< set2 fractional ffe post cursor 8 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET2_FRAC_POST9 : 8;
    ///< set2 fractional ffe post cursor 9 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set2_frac_2_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_2_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_2_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_2_WR_MASK (0xffffffffU)


///< set2 fractional ffe post cursor 6 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_2_FFE_COEFF_SET2_FRAC_POST6_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_2_FFE_COEFF_SET2_FRAC_POST6_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_2_FFE_COEFF_SET2_FRAC_POST6_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_2_FFE_COEFF_SET2_FRAC_POST6_BF_DEF (0x00000000)

///< set2 fractional ffe post cursor 7 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_2_FFE_COEFF_SET2_FRAC_POST7_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_2_FFE_COEFF_SET2_FRAC_POST7_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_2_FFE_COEFF_SET2_FRAC_POST7_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_2_FFE_COEFF_SET2_FRAC_POST7_BF_DEF (0x00000000)

///< set2 fractional ffe post cursor 8 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_2_FFE_COEFF_SET2_FRAC_POST8_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_2_FFE_COEFF_SET2_FRAC_POST8_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_2_FFE_COEFF_SET2_FRAC_POST8_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_2_FFE_COEFF_SET2_FRAC_POST8_BF_DEF (0x00000000)

///< set2 fractional ffe post cursor 9 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_2_FFE_COEFF_SET2_FRAC_POST9_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_2_FFE_COEFF_SET2_FRAC_POST9_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_2_FFE_COEFF_SET2_FRAC_POST9_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_2_FFE_COEFF_SET2_FRAC_POST9_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET2_FRAC_3 register description at address offset 0x5d0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set2_frac_3
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET2_FRAC_POST10 : 8;
    ///< set2 fractional ffe post cursor 10 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET2_FRAC_POST11 : 8;
    ///< set2 fractional ffe post cursor 11 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET2_FRAC_POST12 : 8;
    ///< set2 fractional ffe post cursor 12 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET2_FRAC_BANKA_FLOAT1 : 8;
    ///< set2 fractional ffe bankA float 1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set2_frac_3_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_3_WR_MASK (0xffffffffU)


///< set2 fractional ffe post cursor 10 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_3_FFE_COEFF_SET2_FRAC_POST10_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_3_FFE_COEFF_SET2_FRAC_POST10_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_3_FFE_COEFF_SET2_FRAC_POST10_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_3_FFE_COEFF_SET2_FRAC_POST10_BF_DEF (0x00000000)

///< set2 fractional ffe post cursor 11 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_3_FFE_COEFF_SET2_FRAC_POST11_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_3_FFE_COEFF_SET2_FRAC_POST11_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_3_FFE_COEFF_SET2_FRAC_POST11_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_3_FFE_COEFF_SET2_FRAC_POST11_BF_DEF (0x00000000)

///< set2 fractional ffe post cursor 12 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_3_FFE_COEFF_SET2_FRAC_POST12_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_3_FFE_COEFF_SET2_FRAC_POST12_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_3_FFE_COEFF_SET2_FRAC_POST12_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_3_FFE_COEFF_SET2_FRAC_POST12_BF_DEF (0x00000000)

///< set2 fractional ffe bankA float 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_3_FFE_COEFF_SET2_FRAC_BANKA_FLOAT1_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_3_FFE_COEFF_SET2_FRAC_BANKA_FLOAT1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_3_FFE_COEFF_SET2_FRAC_BANKA_FLOAT1_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_3_FFE_COEFF_SET2_FRAC_BANKA_FLOAT1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET2_FRAC_4 register description at address offset 0x5d4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set2_frac_4
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET2_FRAC_BANKA_FLOAT2 : 8;
    ///< set2 fractional ffe bankA float 2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET2_FRAC_BANKA_FLOAT3 : 8;
    ///< set2 fractional ffe bankA float 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET2_FRAC_BANKB_FLOAT1 : 8;
    ///< set2 fractional ffe bankB float 1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET2_FRAC_BANKB_FLOAT2 : 8;
    ///< set2 fractional ffe bankB float 2 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set2_frac_4_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_4_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_4_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_4_WR_MASK (0xffffffffU)


///< set2 fractional ffe bankA float 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_4_FFE_COEFF_SET2_FRAC_BANKA_FLOAT2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_4_FFE_COEFF_SET2_FRAC_BANKA_FLOAT2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_4_FFE_COEFF_SET2_FRAC_BANKA_FLOAT2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_4_FFE_COEFF_SET2_FRAC_BANKA_FLOAT2_BF_DEF (0x00000000)

///< set2 fractional ffe bankA float 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_4_FFE_COEFF_SET2_FRAC_BANKA_FLOAT3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_4_FFE_COEFF_SET2_FRAC_BANKA_FLOAT3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_4_FFE_COEFF_SET2_FRAC_BANKA_FLOAT3_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_4_FFE_COEFF_SET2_FRAC_BANKA_FLOAT3_BF_DEF (0x00000000)

///< set2 fractional ffe bankB float 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_4_FFE_COEFF_SET2_FRAC_BANKB_FLOAT1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_4_FFE_COEFF_SET2_FRAC_BANKB_FLOAT1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_4_FFE_COEFF_SET2_FRAC_BANKB_FLOAT1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_4_FFE_COEFF_SET2_FRAC_BANKB_FLOAT1_BF_DEF (0x00000000)

///< set2 fractional ffe bankB float 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_4_FFE_COEFF_SET2_FRAC_BANKB_FLOAT2_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_4_FFE_COEFF_SET2_FRAC_BANKB_FLOAT2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_4_FFE_COEFF_SET2_FRAC_BANKB_FLOAT2_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_4_FFE_COEFF_SET2_FRAC_BANKB_FLOAT2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET2_FRAC_5 register description at address offset 0x5d8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set2_frac_5
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET2_FRAC_BANKB_FLOAT3 : 8;
    ///< set2 fractional ffe bankB float 3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET2_FRAC_BANKC_FLOAT1 : 8;
    ///< set2 fractional ffe bankC float 1 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET2_FRAC_BANKC_FLOAT2 : 8;
    ///< set2 fractional ffe bankC float 2 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET2_FRAC_BANKC_FLOAT3 : 8;
    ///< set2 fractional ffe bankC float 3 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set2_frac_5_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_5_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_5_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_5_WR_MASK (0xffffffffU)


///< set2 fractional ffe bankB float 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_5_FFE_COEFF_SET2_FRAC_BANKB_FLOAT3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_5_FFE_COEFF_SET2_FRAC_BANKB_FLOAT3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_5_FFE_COEFF_SET2_FRAC_BANKB_FLOAT3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_5_FFE_COEFF_SET2_FRAC_BANKB_FLOAT3_BF_DEF (0x00000000)

///< set2 fractional ffe bankC float 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_5_FFE_COEFF_SET2_FRAC_BANKC_FLOAT1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_5_FFE_COEFF_SET2_FRAC_BANKC_FLOAT1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_5_FFE_COEFF_SET2_FRAC_BANKC_FLOAT1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_5_FFE_COEFF_SET2_FRAC_BANKC_FLOAT1_BF_DEF (0x00000000)

///< set2 fractional ffe bankC float 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_5_FFE_COEFF_SET2_FRAC_BANKC_FLOAT2_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_5_FFE_COEFF_SET2_FRAC_BANKC_FLOAT2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_5_FFE_COEFF_SET2_FRAC_BANKC_FLOAT2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_5_FFE_COEFF_SET2_FRAC_BANKC_FLOAT2_BF_DEF (0x00000000)

///< set2 fractional ffe bankC float 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_5_FFE_COEFF_SET2_FRAC_BANKC_FLOAT3_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_5_FFE_COEFF_SET2_FRAC_BANKC_FLOAT3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_5_FFE_COEFF_SET2_FRAC_BANKC_FLOAT3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_5_FFE_COEFF_SET2_FRAC_BANKC_FLOAT3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET3_FRAC_0 register description at address offset 0x5dc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set3_frac_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET3_FRAC_PRE3 : 8;
    ///< set3 fractional ffe pre cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET3_FRAC_PRE2 : 8;
    ///< set3 fractional ffe pre cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET3_FRAC_PRE1 : 8;
    ///< set3 fractional ffe pre cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET3_FRAC_POST1 : 8;
    ///< set3 fractional ffe post cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set3_frac_0_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_0_WR_MASK (0xffffffffU)


///< set3 fractional ffe pre cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_0_FFE_COEFF_SET3_FRAC_PRE3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_0_FFE_COEFF_SET3_FRAC_PRE3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_0_FFE_COEFF_SET3_FRAC_PRE3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_0_FFE_COEFF_SET3_FRAC_PRE3_BF_DEF (0x00000000)

///< set3 fractional ffe pre cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_0_FFE_COEFF_SET3_FRAC_PRE2_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_0_FFE_COEFF_SET3_FRAC_PRE2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_0_FFE_COEFF_SET3_FRAC_PRE2_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_0_FFE_COEFF_SET3_FRAC_PRE2_BF_DEF (0x00000000)

///< set3 fractional ffe pre cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_0_FFE_COEFF_SET3_FRAC_PRE1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_0_FFE_COEFF_SET3_FRAC_PRE1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_0_FFE_COEFF_SET3_FRAC_PRE1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_0_FFE_COEFF_SET3_FRAC_PRE1_BF_DEF (0x00000000)

///< set3 fractional ffe post cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_0_FFE_COEFF_SET3_FRAC_POST1_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_0_FFE_COEFF_SET3_FRAC_POST1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_0_FFE_COEFF_SET3_FRAC_POST1_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_0_FFE_COEFF_SET3_FRAC_POST1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET3_FRAC_1 register description at address offset 0x5e0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set3_frac_1
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET3_FRAC_POST2 : 8;
    ///< set3 fractional ffe post cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET3_FRAC_POST3 : 8;
    ///< set3 fractional ffe post cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET3_FRAC_POST4 : 8;
    ///< set3 fractional ffe post cursor 4 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET3_FRAC_POST5 : 8;
    ///< set3 fractional ffe post cursor 5 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set3_frac_1_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_1_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_1_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_1_WR_MASK (0xffffffffU)


///< set3 fractional ffe post cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_1_FFE_COEFF_SET3_FRAC_POST2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_1_FFE_COEFF_SET3_FRAC_POST2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_1_FFE_COEFF_SET3_FRAC_POST2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_1_FFE_COEFF_SET3_FRAC_POST2_BF_DEF (0x00000000)

///< set3 fractional ffe post cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_1_FFE_COEFF_SET3_FRAC_POST3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_1_FFE_COEFF_SET3_FRAC_POST3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_1_FFE_COEFF_SET3_FRAC_POST3_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_1_FFE_COEFF_SET3_FRAC_POST3_BF_DEF (0x00000000)

///< set3 fractional ffe post cursor 4 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_1_FFE_COEFF_SET3_FRAC_POST4_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_1_FFE_COEFF_SET3_FRAC_POST4_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_1_FFE_COEFF_SET3_FRAC_POST4_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_1_FFE_COEFF_SET3_FRAC_POST4_BF_DEF (0x00000000)

///< set3 fractional ffe post cursor 5 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_1_FFE_COEFF_SET3_FRAC_POST5_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_1_FFE_COEFF_SET3_FRAC_POST5_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_1_FFE_COEFF_SET3_FRAC_POST5_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_1_FFE_COEFF_SET3_FRAC_POST5_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET3_FRAC_2 register description at address offset 0x5e4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set3_frac_2
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET3_FRAC_POST6 : 8;
    ///< set3 fractional ffe post cursor 6 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET3_FRAC_POST7 : 8;
    ///< set3 fractional ffe post cursor 7 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET3_FRAC_POST8 : 8;
    ///< set3 fractional ffe post cursor 8 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET3_FRAC_POST9 : 8;
    ///< set3 fractional ffe post cursor 9 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set3_frac_2_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_2_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_2_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_2_WR_MASK (0xffffffffU)


///< set3 fractional ffe post cursor 6 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_2_FFE_COEFF_SET3_FRAC_POST6_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_2_FFE_COEFF_SET3_FRAC_POST6_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_2_FFE_COEFF_SET3_FRAC_POST6_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_2_FFE_COEFF_SET3_FRAC_POST6_BF_DEF (0x00000000)

///< set3 fractional ffe post cursor 7 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_2_FFE_COEFF_SET3_FRAC_POST7_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_2_FFE_COEFF_SET3_FRAC_POST7_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_2_FFE_COEFF_SET3_FRAC_POST7_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_2_FFE_COEFF_SET3_FRAC_POST7_BF_DEF (0x00000000)

///< set3 fractional ffe post cursor 8 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_2_FFE_COEFF_SET3_FRAC_POST8_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_2_FFE_COEFF_SET3_FRAC_POST8_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_2_FFE_COEFF_SET3_FRAC_POST8_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_2_FFE_COEFF_SET3_FRAC_POST8_BF_DEF (0x00000000)

///< set3 fractional ffe post cursor 9 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_2_FFE_COEFF_SET3_FRAC_POST9_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_2_FFE_COEFF_SET3_FRAC_POST9_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_2_FFE_COEFF_SET3_FRAC_POST9_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_2_FFE_COEFF_SET3_FRAC_POST9_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET3_FRAC_3 register description at address offset 0x5e8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set3_frac_3
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET3_FRAC_POST10 : 8;
    ///< set3 fractional ffe post cursor 10 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET3_FRAC_POST11 : 8;
    ///< set3 fractional ffe post cursor 11 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET3_FRAC_POST12 : 8;
    ///< set3 fractional ffe post cursor 12 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET3_FRAC_BANKA_FLOAT1 : 8;
    ///< set3 fractional ffe bankA float 1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set3_frac_3_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_3_WR_MASK (0xffffffffU)


///< set3 fractional ffe post cursor 10 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_3_FFE_COEFF_SET3_FRAC_POST10_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_3_FFE_COEFF_SET3_FRAC_POST10_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_3_FFE_COEFF_SET3_FRAC_POST10_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_3_FFE_COEFF_SET3_FRAC_POST10_BF_DEF (0x00000000)

///< set3 fractional ffe post cursor 11 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_3_FFE_COEFF_SET3_FRAC_POST11_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_3_FFE_COEFF_SET3_FRAC_POST11_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_3_FFE_COEFF_SET3_FRAC_POST11_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_3_FFE_COEFF_SET3_FRAC_POST11_BF_DEF (0x00000000)

///< set3 fractional ffe post cursor 12 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_3_FFE_COEFF_SET3_FRAC_POST12_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_3_FFE_COEFF_SET3_FRAC_POST12_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_3_FFE_COEFF_SET3_FRAC_POST12_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_3_FFE_COEFF_SET3_FRAC_POST12_BF_DEF (0x00000000)

///< set3 fractional ffe bankA float 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_3_FFE_COEFF_SET3_FRAC_BANKA_FLOAT1_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_3_FFE_COEFF_SET3_FRAC_BANKA_FLOAT1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_3_FFE_COEFF_SET3_FRAC_BANKA_FLOAT1_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_3_FFE_COEFF_SET3_FRAC_BANKA_FLOAT1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET3_FRAC_4 register description at address offset 0x5ec
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set3_frac_4
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET3_FRAC_BANKA_FLOAT2 : 8;
    ///< set3 fractional ffe bankA float 2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET3_FRAC_BANKA_FLOAT3 : 8;
    ///< set3 fractional ffe bankA float 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET3_FRAC_BANKB_FLOAT1 : 8;
    ///< set3 fractional ffe bankB float 1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET3_FRAC_BANKB_FLOAT2 : 8;
    ///< set3 fractional ffe bankB float 2 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set3_frac_4_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_4_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_4_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_4_WR_MASK (0xffffffffU)


///< set3 fractional ffe bankA float 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_4_FFE_COEFF_SET3_FRAC_BANKA_FLOAT2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_4_FFE_COEFF_SET3_FRAC_BANKA_FLOAT2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_4_FFE_COEFF_SET3_FRAC_BANKA_FLOAT2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_4_FFE_COEFF_SET3_FRAC_BANKA_FLOAT2_BF_DEF (0x00000000)

///< set3 fractional ffe bankA float 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_4_FFE_COEFF_SET3_FRAC_BANKA_FLOAT3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_4_FFE_COEFF_SET3_FRAC_BANKA_FLOAT3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_4_FFE_COEFF_SET3_FRAC_BANKA_FLOAT3_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_4_FFE_COEFF_SET3_FRAC_BANKA_FLOAT3_BF_DEF (0x00000000)

///< set3 fractional ffe bankB float 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_4_FFE_COEFF_SET3_FRAC_BANKB_FLOAT1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_4_FFE_COEFF_SET3_FRAC_BANKB_FLOAT1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_4_FFE_COEFF_SET3_FRAC_BANKB_FLOAT1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_4_FFE_COEFF_SET3_FRAC_BANKB_FLOAT1_BF_DEF (0x00000000)

///< set3 fractional ffe bankB float 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_4_FFE_COEFF_SET3_FRAC_BANKB_FLOAT2_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_4_FFE_COEFF_SET3_FRAC_BANKB_FLOAT2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_4_FFE_COEFF_SET3_FRAC_BANKB_FLOAT2_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_4_FFE_COEFF_SET3_FRAC_BANKB_FLOAT2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET3_FRAC_5 register description at address offset 0x5f0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set3_frac_5
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET3_FRAC_BANKB_FLOAT3 : 8;
    ///< set3 fractional ffe bankB float 3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET3_FRAC_BANKC_FLOAT1 : 8;
    ///< set3 fractional ffe bankC float 1 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET3_FRAC_BANKC_FLOAT2 : 8;
    ///< set3 fractional ffe bankC float 2 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET3_FRAC_BANKC_FLOAT3 : 8;
    ///< set3 fractional ffe bankC float 3 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set3_frac_5_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_5_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_5_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_5_WR_MASK (0xffffffffU)


///< set3 fractional ffe bankB float 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_5_FFE_COEFF_SET3_FRAC_BANKB_FLOAT3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_5_FFE_COEFF_SET3_FRAC_BANKB_FLOAT3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_5_FFE_COEFF_SET3_FRAC_BANKB_FLOAT3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_5_FFE_COEFF_SET3_FRAC_BANKB_FLOAT3_BF_DEF (0x00000000)

///< set3 fractional ffe bankC float 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_5_FFE_COEFF_SET3_FRAC_BANKC_FLOAT1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_5_FFE_COEFF_SET3_FRAC_BANKC_FLOAT1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_5_FFE_COEFF_SET3_FRAC_BANKC_FLOAT1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_5_FFE_COEFF_SET3_FRAC_BANKC_FLOAT1_BF_DEF (0x00000000)

///< set3 fractional ffe bankC float 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_5_FFE_COEFF_SET3_FRAC_BANKC_FLOAT2_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_5_FFE_COEFF_SET3_FRAC_BANKC_FLOAT2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_5_FFE_COEFF_SET3_FRAC_BANKC_FLOAT2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_5_FFE_COEFF_SET3_FRAC_BANKC_FLOAT2_BF_DEF (0x00000000)

///< set3 fractional ffe bankC float 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_5_FFE_COEFF_SET3_FRAC_BANKC_FLOAT3_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_5_FFE_COEFF_SET3_FRAC_BANKC_FLOAT3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_5_FFE_COEFF_SET3_FRAC_BANKC_FLOAT3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_5_FFE_COEFF_SET3_FRAC_BANKC_FLOAT3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET4_FRAC_0 register description at address offset 0x5f4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set4_frac_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET4_FRAC_PRE3 : 8;
    ///< set4 fractional ffe pre cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET4_FRAC_PRE2 : 8;
    ///< set4 fractional ffe pre cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET4_FRAC_PRE1 : 8;
    ///< set4 fractional ffe pre cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET4_FRAC_POST1 : 8;
    ///< set4 fractional ffe post cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set4_frac_0_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_0_WR_MASK (0xffffffffU)


///< set4 fractional ffe pre cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_0_FFE_COEFF_SET4_FRAC_PRE3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_0_FFE_COEFF_SET4_FRAC_PRE3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_0_FFE_COEFF_SET4_FRAC_PRE3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_0_FFE_COEFF_SET4_FRAC_PRE3_BF_DEF (0x00000000)

///< set4 fractional ffe pre cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_0_FFE_COEFF_SET4_FRAC_PRE2_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_0_FFE_COEFF_SET4_FRAC_PRE2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_0_FFE_COEFF_SET4_FRAC_PRE2_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_0_FFE_COEFF_SET4_FRAC_PRE2_BF_DEF (0x00000000)

///< set4 fractional ffe pre cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_0_FFE_COEFF_SET4_FRAC_PRE1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_0_FFE_COEFF_SET4_FRAC_PRE1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_0_FFE_COEFF_SET4_FRAC_PRE1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_0_FFE_COEFF_SET4_FRAC_PRE1_BF_DEF (0x00000000)

///< set4 fractional ffe post cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_0_FFE_COEFF_SET4_FRAC_POST1_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_0_FFE_COEFF_SET4_FRAC_POST1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_0_FFE_COEFF_SET4_FRAC_POST1_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_0_FFE_COEFF_SET4_FRAC_POST1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET4_FRAC_1 register description at address offset 0x5f8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set4_frac_1
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET4_FRAC_POST2 : 8;
    ///< set4 fractional ffe post cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET4_FRAC_POST3 : 8;
    ///< set4 fractional ffe post cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET4_FRAC_POST4 : 8;
    ///< set4 fractional ffe post cursor 4 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET4_FRAC_POST5 : 8;
    ///< set4 fractional ffe post cursor 5 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set4_frac_1_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_1_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_1_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_1_WR_MASK (0xffffffffU)


///< set4 fractional ffe post cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_1_FFE_COEFF_SET4_FRAC_POST2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_1_FFE_COEFF_SET4_FRAC_POST2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_1_FFE_COEFF_SET4_FRAC_POST2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_1_FFE_COEFF_SET4_FRAC_POST2_BF_DEF (0x00000000)

///< set4 fractional ffe post cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_1_FFE_COEFF_SET4_FRAC_POST3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_1_FFE_COEFF_SET4_FRAC_POST3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_1_FFE_COEFF_SET4_FRAC_POST3_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_1_FFE_COEFF_SET4_FRAC_POST3_BF_DEF (0x00000000)

///< set4 fractional ffe post cursor 4 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_1_FFE_COEFF_SET4_FRAC_POST4_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_1_FFE_COEFF_SET4_FRAC_POST4_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_1_FFE_COEFF_SET4_FRAC_POST4_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_1_FFE_COEFF_SET4_FRAC_POST4_BF_DEF (0x00000000)

///< set4 fractional ffe post cursor 5 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_1_FFE_COEFF_SET4_FRAC_POST5_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_1_FFE_COEFF_SET4_FRAC_POST5_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_1_FFE_COEFF_SET4_FRAC_POST5_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_1_FFE_COEFF_SET4_FRAC_POST5_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET4_FRAC_2 register description at address offset 0x5fc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set4_frac_2
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET4_FRAC_POST6 : 8;
    ///< set4 fractional ffe post cursor 6 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET4_FRAC_POST7 : 8;
    ///< set4 fractional ffe post cursor 7 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET4_FRAC_POST8 : 8;
    ///< set4 fractional ffe post cursor 8 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET4_FRAC_POST9 : 8;
    ///< set4 fractional ffe post cursor 9 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set4_frac_2_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_2_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_2_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_2_WR_MASK (0xffffffffU)


///< set4 fractional ffe post cursor 6 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_2_FFE_COEFF_SET4_FRAC_POST6_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_2_FFE_COEFF_SET4_FRAC_POST6_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_2_FFE_COEFF_SET4_FRAC_POST6_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_2_FFE_COEFF_SET4_FRAC_POST6_BF_DEF (0x00000000)

///< set4 fractional ffe post cursor 7 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_2_FFE_COEFF_SET4_FRAC_POST7_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_2_FFE_COEFF_SET4_FRAC_POST7_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_2_FFE_COEFF_SET4_FRAC_POST7_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_2_FFE_COEFF_SET4_FRAC_POST7_BF_DEF (0x00000000)

///< set4 fractional ffe post cursor 8 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_2_FFE_COEFF_SET4_FRAC_POST8_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_2_FFE_COEFF_SET4_FRAC_POST8_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_2_FFE_COEFF_SET4_FRAC_POST8_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_2_FFE_COEFF_SET4_FRAC_POST8_BF_DEF (0x00000000)

///< set4 fractional ffe post cursor 9 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_2_FFE_COEFF_SET4_FRAC_POST9_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_2_FFE_COEFF_SET4_FRAC_POST9_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_2_FFE_COEFF_SET4_FRAC_POST9_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_2_FFE_COEFF_SET4_FRAC_POST9_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET4_FRAC_3 register description at address offset 0x600
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set4_frac_3
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET4_FRAC_POST10 : 8;
    ///< set4 fractional ffe post cursor 10 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET4_FRAC_POST11 : 8;
    ///< set4 fractional ffe post cursor 11 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET4_FRAC_POST12 : 8;
    ///< set4 fractional ffe post cursor 12 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET4_FRAC_BANKA_FLOAT1 : 8;
    ///< set4 fractional ffe bankA float 1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set4_frac_3_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_3_WR_MASK (0xffffffffU)


///< set4 fractional ffe post cursor 10 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_3_FFE_COEFF_SET4_FRAC_POST10_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_3_FFE_COEFF_SET4_FRAC_POST10_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_3_FFE_COEFF_SET4_FRAC_POST10_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_3_FFE_COEFF_SET4_FRAC_POST10_BF_DEF (0x00000000)

///< set4 fractional ffe post cursor 11 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_3_FFE_COEFF_SET4_FRAC_POST11_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_3_FFE_COEFF_SET4_FRAC_POST11_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_3_FFE_COEFF_SET4_FRAC_POST11_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_3_FFE_COEFF_SET4_FRAC_POST11_BF_DEF (0x00000000)

///< set4 fractional ffe post cursor 12 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_3_FFE_COEFF_SET4_FRAC_POST12_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_3_FFE_COEFF_SET4_FRAC_POST12_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_3_FFE_COEFF_SET4_FRAC_POST12_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_3_FFE_COEFF_SET4_FRAC_POST12_BF_DEF (0x00000000)

///< set4 fractional ffe bankA float 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_3_FFE_COEFF_SET4_FRAC_BANKA_FLOAT1_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_3_FFE_COEFF_SET4_FRAC_BANKA_FLOAT1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_3_FFE_COEFF_SET4_FRAC_BANKA_FLOAT1_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_3_FFE_COEFF_SET4_FRAC_BANKA_FLOAT1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET4_FRAC_4 register description at address offset 0x604
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set4_frac_4
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET4_FRAC_BANKA_FLOAT2 : 8;
    ///< set4 fractional ffe bankA float 2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET4_FRAC_BANKA_FLOAT3 : 8;
    ///< set4 fractional ffe bankA float 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET4_FRAC_BANKB_FLOAT1 : 8;
    ///< set4 fractional ffe bankB float 1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET4_FRAC_BANKB_FLOAT2 : 8;
    ///< set4 fractional ffe bankB float 2 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set4_frac_4_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_4_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_4_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_4_WR_MASK (0xffffffffU)


///< set4 fractional ffe bankA float 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_4_FFE_COEFF_SET4_FRAC_BANKA_FLOAT2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_4_FFE_COEFF_SET4_FRAC_BANKA_FLOAT2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_4_FFE_COEFF_SET4_FRAC_BANKA_FLOAT2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_4_FFE_COEFF_SET4_FRAC_BANKA_FLOAT2_BF_DEF (0x00000000)

///< set4 fractional ffe bankA float 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_4_FFE_COEFF_SET4_FRAC_BANKA_FLOAT3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_4_FFE_COEFF_SET4_FRAC_BANKA_FLOAT3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_4_FFE_COEFF_SET4_FRAC_BANKA_FLOAT3_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_4_FFE_COEFF_SET4_FRAC_BANKA_FLOAT3_BF_DEF (0x00000000)

///< set4 fractional ffe bankB float 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_4_FFE_COEFF_SET4_FRAC_BANKB_FLOAT1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_4_FFE_COEFF_SET4_FRAC_BANKB_FLOAT1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_4_FFE_COEFF_SET4_FRAC_BANKB_FLOAT1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_4_FFE_COEFF_SET4_FRAC_BANKB_FLOAT1_BF_DEF (0x00000000)

///< set4 fractional ffe bankB float 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_4_FFE_COEFF_SET4_FRAC_BANKB_FLOAT2_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_4_FFE_COEFF_SET4_FRAC_BANKB_FLOAT2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_4_FFE_COEFF_SET4_FRAC_BANKB_FLOAT2_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_4_FFE_COEFF_SET4_FRAC_BANKB_FLOAT2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET4_FRAC_5 register description at address offset 0x608
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set4_frac_5
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET4_FRAC_BANKB_FLOAT3 : 8;
    ///< set4 fractional ffe bankB float 3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET4_FRAC_BANKC_FLOAT1 : 8;
    ///< set4 fractional ffe bankC float 1 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET4_FRAC_BANKC_FLOAT2 : 8;
    ///< set4 fractional ffe bankC float 2 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET4_FRAC_BANKC_FLOAT3 : 8;
    ///< set4 fractional ffe bankC float 3 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set4_frac_5_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_5_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_5_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_5_WR_MASK (0xffffffffU)


///< set4 fractional ffe bankB float 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_5_FFE_COEFF_SET4_FRAC_BANKB_FLOAT3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_5_FFE_COEFF_SET4_FRAC_BANKB_FLOAT3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_5_FFE_COEFF_SET4_FRAC_BANKB_FLOAT3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_5_FFE_COEFF_SET4_FRAC_BANKB_FLOAT3_BF_DEF (0x00000000)

///< set4 fractional ffe bankC float 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_5_FFE_COEFF_SET4_FRAC_BANKC_FLOAT1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_5_FFE_COEFF_SET4_FRAC_BANKC_FLOAT1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_5_FFE_COEFF_SET4_FRAC_BANKC_FLOAT1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_5_FFE_COEFF_SET4_FRAC_BANKC_FLOAT1_BF_DEF (0x00000000)

///< set4 fractional ffe bankC float 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_5_FFE_COEFF_SET4_FRAC_BANKC_FLOAT2_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_5_FFE_COEFF_SET4_FRAC_BANKC_FLOAT2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_5_FFE_COEFF_SET4_FRAC_BANKC_FLOAT2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_5_FFE_COEFF_SET4_FRAC_BANKC_FLOAT2_BF_DEF (0x00000000)

///< set4 fractional ffe bankC float 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_5_FFE_COEFF_SET4_FRAC_BANKC_FLOAT3_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_5_FFE_COEFF_SET4_FRAC_BANKC_FLOAT3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_5_FFE_COEFF_SET4_FRAC_BANKC_FLOAT3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_5_FFE_COEFF_SET4_FRAC_BANKC_FLOAT3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET5_FRAC_0 register description at address offset 0x60c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set5_frac_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET5_FRAC_PRE3 : 8;
    ///< set5 fractional ffe pre cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET5_FRAC_PRE2 : 8;
    ///< set5 fractional ffe pre cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET5_FRAC_PRE1 : 8;
    ///< set5 fractional ffe pre cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET5_FRAC_POST1 : 8;
    ///< set5 fractional ffe post cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set5_frac_0_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_0_WR_MASK (0xffffffffU)


///< set5 fractional ffe pre cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_0_FFE_COEFF_SET5_FRAC_PRE3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_0_FFE_COEFF_SET5_FRAC_PRE3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_0_FFE_COEFF_SET5_FRAC_PRE3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_0_FFE_COEFF_SET5_FRAC_PRE3_BF_DEF (0x00000000)

///< set5 fractional ffe pre cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_0_FFE_COEFF_SET5_FRAC_PRE2_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_0_FFE_COEFF_SET5_FRAC_PRE2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_0_FFE_COEFF_SET5_FRAC_PRE2_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_0_FFE_COEFF_SET5_FRAC_PRE2_BF_DEF (0x00000000)

///< set5 fractional ffe pre cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_0_FFE_COEFF_SET5_FRAC_PRE1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_0_FFE_COEFF_SET5_FRAC_PRE1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_0_FFE_COEFF_SET5_FRAC_PRE1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_0_FFE_COEFF_SET5_FRAC_PRE1_BF_DEF (0x00000000)

///< set5 fractional ffe post cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_0_FFE_COEFF_SET5_FRAC_POST1_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_0_FFE_COEFF_SET5_FRAC_POST1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_0_FFE_COEFF_SET5_FRAC_POST1_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_0_FFE_COEFF_SET5_FRAC_POST1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET5_FRAC_1 register description at address offset 0x610
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set5_frac_1
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET5_FRAC_POST2 : 8;
    ///< set5 fractional ffe post cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET5_FRAC_POST3 : 8;
    ///< set5 fractional ffe post cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET5_FRAC_POST4 : 8;
    ///< set5 fractional ffe post cursor 4 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET5_FRAC_POST5 : 8;
    ///< set5 fractional ffe post cursor 5 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set5_frac_1_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_1_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_1_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_1_WR_MASK (0xffffffffU)


///< set5 fractional ffe post cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_1_FFE_COEFF_SET5_FRAC_POST2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_1_FFE_COEFF_SET5_FRAC_POST2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_1_FFE_COEFF_SET5_FRAC_POST2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_1_FFE_COEFF_SET5_FRAC_POST2_BF_DEF (0x00000000)

///< set5 fractional ffe post cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_1_FFE_COEFF_SET5_FRAC_POST3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_1_FFE_COEFF_SET5_FRAC_POST3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_1_FFE_COEFF_SET5_FRAC_POST3_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_1_FFE_COEFF_SET5_FRAC_POST3_BF_DEF (0x00000000)

///< set5 fractional ffe post cursor 4 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_1_FFE_COEFF_SET5_FRAC_POST4_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_1_FFE_COEFF_SET5_FRAC_POST4_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_1_FFE_COEFF_SET5_FRAC_POST4_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_1_FFE_COEFF_SET5_FRAC_POST4_BF_DEF (0x00000000)

///< set5 fractional ffe post cursor 5 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_1_FFE_COEFF_SET5_FRAC_POST5_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_1_FFE_COEFF_SET5_FRAC_POST5_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_1_FFE_COEFF_SET5_FRAC_POST5_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_1_FFE_COEFF_SET5_FRAC_POST5_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET5_FRAC_2 register description at address offset 0x614
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set5_frac_2
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET5_FRAC_POST6 : 8;
    ///< set5 fractional ffe post cursor 6 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET5_FRAC_POST7 : 8;
    ///< set5 fractional ffe post cursor 7 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET5_FRAC_POST8 : 8;
    ///< set5 fractional ffe post cursor 8 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET5_FRAC_POST9 : 8;
    ///< set5 fractional ffe post cursor 9 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set5_frac_2_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_2_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_2_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_2_WR_MASK (0xffffffffU)


///< set5 fractional ffe post cursor 6 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_2_FFE_COEFF_SET5_FRAC_POST6_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_2_FFE_COEFF_SET5_FRAC_POST6_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_2_FFE_COEFF_SET5_FRAC_POST6_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_2_FFE_COEFF_SET5_FRAC_POST6_BF_DEF (0x00000000)

///< set5 fractional ffe post cursor 7 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_2_FFE_COEFF_SET5_FRAC_POST7_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_2_FFE_COEFF_SET5_FRAC_POST7_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_2_FFE_COEFF_SET5_FRAC_POST7_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_2_FFE_COEFF_SET5_FRAC_POST7_BF_DEF (0x00000000)

///< set5 fractional ffe post cursor 8 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_2_FFE_COEFF_SET5_FRAC_POST8_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_2_FFE_COEFF_SET5_FRAC_POST8_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_2_FFE_COEFF_SET5_FRAC_POST8_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_2_FFE_COEFF_SET5_FRAC_POST8_BF_DEF (0x00000000)

///< set5 fractional ffe post cursor 9 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_2_FFE_COEFF_SET5_FRAC_POST9_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_2_FFE_COEFF_SET5_FRAC_POST9_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_2_FFE_COEFF_SET5_FRAC_POST9_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_2_FFE_COEFF_SET5_FRAC_POST9_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET5_FRAC_3 register description at address offset 0x618
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set5_frac_3
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET5_FRAC_POST10 : 8;
    ///< set5 fractional ffe post cursor 10 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET5_FRAC_POST11 : 8;
    ///< set5 fractional ffe post cursor 11 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET5_FRAC_POST12 : 8;
    ///< set5 fractional ffe post cursor 12 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET5_FRAC_BANKA_FLOAT1 : 8;
    ///< set5 fractional ffe bankA float 1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set5_frac_3_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_3_WR_MASK (0xffffffffU)


///< set5 fractional ffe post cursor 10 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_3_FFE_COEFF_SET5_FRAC_POST10_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_3_FFE_COEFF_SET5_FRAC_POST10_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_3_FFE_COEFF_SET5_FRAC_POST10_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_3_FFE_COEFF_SET5_FRAC_POST10_BF_DEF (0x00000000)

///< set5 fractional ffe post cursor 11 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_3_FFE_COEFF_SET5_FRAC_POST11_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_3_FFE_COEFF_SET5_FRAC_POST11_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_3_FFE_COEFF_SET5_FRAC_POST11_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_3_FFE_COEFF_SET5_FRAC_POST11_BF_DEF (0x00000000)

///< set5 fractional ffe post cursor 12 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_3_FFE_COEFF_SET5_FRAC_POST12_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_3_FFE_COEFF_SET5_FRAC_POST12_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_3_FFE_COEFF_SET5_FRAC_POST12_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_3_FFE_COEFF_SET5_FRAC_POST12_BF_DEF (0x00000000)

///< set5 fractional ffe bankA float 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_3_FFE_COEFF_SET5_FRAC_BANKA_FLOAT1_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_3_FFE_COEFF_SET5_FRAC_BANKA_FLOAT1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_3_FFE_COEFF_SET5_FRAC_BANKA_FLOAT1_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_3_FFE_COEFF_SET5_FRAC_BANKA_FLOAT1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET5_FRAC_4 register description at address offset 0x61c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set5_frac_4
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET5_FRAC_BANKA_FLOAT2 : 8;
    ///< set5 fractional ffe bankA float 2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET5_FRAC_BANKA_FLOAT3 : 8;
    ///< set5 fractional ffe bankA float 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET5_FRAC_BANKB_FLOAT1 : 8;
    ///< set5 fractional ffe bankB float 1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET5_FRAC_BANKB_FLOAT2 : 8;
    ///< set5 fractional ffe bankB float 2 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set5_frac_4_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_4_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_4_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_4_WR_MASK (0xffffffffU)


///< set5 fractional ffe bankA float 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_4_FFE_COEFF_SET5_FRAC_BANKA_FLOAT2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_4_FFE_COEFF_SET5_FRAC_BANKA_FLOAT2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_4_FFE_COEFF_SET5_FRAC_BANKA_FLOAT2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_4_FFE_COEFF_SET5_FRAC_BANKA_FLOAT2_BF_DEF (0x00000000)

///< set5 fractional ffe bankA float 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_4_FFE_COEFF_SET5_FRAC_BANKA_FLOAT3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_4_FFE_COEFF_SET5_FRAC_BANKA_FLOAT3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_4_FFE_COEFF_SET5_FRAC_BANKA_FLOAT3_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_4_FFE_COEFF_SET5_FRAC_BANKA_FLOAT3_BF_DEF (0x00000000)

///< set5 fractional ffe bankB float 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_4_FFE_COEFF_SET5_FRAC_BANKB_FLOAT1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_4_FFE_COEFF_SET5_FRAC_BANKB_FLOAT1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_4_FFE_COEFF_SET5_FRAC_BANKB_FLOAT1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_4_FFE_COEFF_SET5_FRAC_BANKB_FLOAT1_BF_DEF (0x00000000)

///< set5 fractional ffe bankB float 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_4_FFE_COEFF_SET5_FRAC_BANKB_FLOAT2_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_4_FFE_COEFF_SET5_FRAC_BANKB_FLOAT2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_4_FFE_COEFF_SET5_FRAC_BANKB_FLOAT2_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_4_FFE_COEFF_SET5_FRAC_BANKB_FLOAT2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET5_FRAC_5 register description at address offset 0x620
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set5_frac_5
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET5_FRAC_BANKB_FLOAT3 : 8;
    ///< set5 fractional ffe bankB float 3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET5_FRAC_BANKC_FLOAT1 : 8;
    ///< set5 fractional ffe bankC float 1 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET5_FRAC_BANKC_FLOAT2 : 8;
    ///< set5 fractional ffe bankC float 2 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET5_FRAC_BANKC_FLOAT3 : 8;
    ///< set5 fractional ffe bankC float 3 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set5_frac_5_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_5_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_5_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_5_WR_MASK (0xffffffffU)


///< set5 fractional ffe bankB float 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_5_FFE_COEFF_SET5_FRAC_BANKB_FLOAT3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_5_FFE_COEFF_SET5_FRAC_BANKB_FLOAT3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_5_FFE_COEFF_SET5_FRAC_BANKB_FLOAT3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_5_FFE_COEFF_SET5_FRAC_BANKB_FLOAT3_BF_DEF (0x00000000)

///< set5 fractional ffe bankC float 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_5_FFE_COEFF_SET5_FRAC_BANKC_FLOAT1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_5_FFE_COEFF_SET5_FRAC_BANKC_FLOAT1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_5_FFE_COEFF_SET5_FRAC_BANKC_FLOAT1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_5_FFE_COEFF_SET5_FRAC_BANKC_FLOAT1_BF_DEF (0x00000000)

///< set5 fractional ffe bankC float 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_5_FFE_COEFF_SET5_FRAC_BANKC_FLOAT2_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_5_FFE_COEFF_SET5_FRAC_BANKC_FLOAT2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_5_FFE_COEFF_SET5_FRAC_BANKC_FLOAT2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_5_FFE_COEFF_SET5_FRAC_BANKC_FLOAT2_BF_DEF (0x00000000)

///< set5 fractional ffe bankC float 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_5_FFE_COEFF_SET5_FRAC_BANKC_FLOAT3_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_5_FFE_COEFF_SET5_FRAC_BANKC_FLOAT3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_5_FFE_COEFF_SET5_FRAC_BANKC_FLOAT3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_5_FFE_COEFF_SET5_FRAC_BANKC_FLOAT3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET6_FRAC_0 register description at address offset 0x624
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set6_frac_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET6_FRAC_PRE3 : 8;
    ///< set6 fractional ffe pre cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET6_FRAC_PRE2 : 8;
    ///< set6 fractional ffe pre cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET6_FRAC_PRE1 : 8;
    ///< set6 fractional ffe pre cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET6_FRAC_POST1 : 8;
    ///< set6 fractional ffe post cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set6_frac_0_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_0_WR_MASK (0xffffffffU)


///< set6 fractional ffe pre cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_0_FFE_COEFF_SET6_FRAC_PRE3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_0_FFE_COEFF_SET6_FRAC_PRE3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_0_FFE_COEFF_SET6_FRAC_PRE3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_0_FFE_COEFF_SET6_FRAC_PRE3_BF_DEF (0x00000000)

///< set6 fractional ffe pre cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_0_FFE_COEFF_SET6_FRAC_PRE2_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_0_FFE_COEFF_SET6_FRAC_PRE2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_0_FFE_COEFF_SET6_FRAC_PRE2_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_0_FFE_COEFF_SET6_FRAC_PRE2_BF_DEF (0x00000000)

///< set6 fractional ffe pre cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_0_FFE_COEFF_SET6_FRAC_PRE1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_0_FFE_COEFF_SET6_FRAC_PRE1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_0_FFE_COEFF_SET6_FRAC_PRE1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_0_FFE_COEFF_SET6_FRAC_PRE1_BF_DEF (0x00000000)

///< set6 fractional ffe post cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_0_FFE_COEFF_SET6_FRAC_POST1_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_0_FFE_COEFF_SET6_FRAC_POST1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_0_FFE_COEFF_SET6_FRAC_POST1_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_0_FFE_COEFF_SET6_FRAC_POST1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET6_FRAC_1 register description at address offset 0x628
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set6_frac_1
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET6_FRAC_POST2 : 8;
    ///< set6 fractional ffe post cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET6_FRAC_POST3 : 8;
    ///< set6 fractional ffe post cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET6_FRAC_POST4 : 8;
    ///< set6 fractional ffe post cursor 4 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET6_FRAC_POST5 : 8;
    ///< set6 fractional ffe post cursor 5 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set6_frac_1_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_1_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_1_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_1_WR_MASK (0xffffffffU)


///< set6 fractional ffe post cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_1_FFE_COEFF_SET6_FRAC_POST2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_1_FFE_COEFF_SET6_FRAC_POST2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_1_FFE_COEFF_SET6_FRAC_POST2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_1_FFE_COEFF_SET6_FRAC_POST2_BF_DEF (0x00000000)

///< set6 fractional ffe post cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_1_FFE_COEFF_SET6_FRAC_POST3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_1_FFE_COEFF_SET6_FRAC_POST3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_1_FFE_COEFF_SET6_FRAC_POST3_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_1_FFE_COEFF_SET6_FRAC_POST3_BF_DEF (0x00000000)

///< set6 fractional ffe post cursor 4 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_1_FFE_COEFF_SET6_FRAC_POST4_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_1_FFE_COEFF_SET6_FRAC_POST4_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_1_FFE_COEFF_SET6_FRAC_POST4_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_1_FFE_COEFF_SET6_FRAC_POST4_BF_DEF (0x00000000)

///< set6 fractional ffe post cursor 5 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_1_FFE_COEFF_SET6_FRAC_POST5_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_1_FFE_COEFF_SET6_FRAC_POST5_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_1_FFE_COEFF_SET6_FRAC_POST5_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_1_FFE_COEFF_SET6_FRAC_POST5_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET6_FRAC_2 register description at address offset 0x62c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set6_frac_2
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET6_FRAC_POST6 : 8;
    ///< set6 fractional ffe post cursor 6 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET6_FRAC_POST7 : 8;
    ///< set6 fractional ffe post cursor 7 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET6_FRAC_POST8 : 8;
    ///< set6 fractional ffe post cursor 8 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET6_FRAC_POST9 : 8;
    ///< set6 fractional ffe post cursor 9 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set6_frac_2_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_2_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_2_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_2_WR_MASK (0xffffffffU)


///< set6 fractional ffe post cursor 6 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_2_FFE_COEFF_SET6_FRAC_POST6_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_2_FFE_COEFF_SET6_FRAC_POST6_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_2_FFE_COEFF_SET6_FRAC_POST6_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_2_FFE_COEFF_SET6_FRAC_POST6_BF_DEF (0x00000000)

///< set6 fractional ffe post cursor 7 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_2_FFE_COEFF_SET6_FRAC_POST7_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_2_FFE_COEFF_SET6_FRAC_POST7_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_2_FFE_COEFF_SET6_FRAC_POST7_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_2_FFE_COEFF_SET6_FRAC_POST7_BF_DEF (0x00000000)

///< set6 fractional ffe post cursor 8 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_2_FFE_COEFF_SET6_FRAC_POST8_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_2_FFE_COEFF_SET6_FRAC_POST8_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_2_FFE_COEFF_SET6_FRAC_POST8_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_2_FFE_COEFF_SET6_FRAC_POST8_BF_DEF (0x00000000)

///< set6 fractional ffe post cursor 9 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_2_FFE_COEFF_SET6_FRAC_POST9_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_2_FFE_COEFF_SET6_FRAC_POST9_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_2_FFE_COEFF_SET6_FRAC_POST9_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_2_FFE_COEFF_SET6_FRAC_POST9_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET6_FRAC_3 register description at address offset 0x630
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set6_frac_3
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET6_FRAC_POST10 : 8;
    ///< set6 fractional ffe post cursor 10 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET6_FRAC_POST11 : 8;
    ///< set6 fractional ffe post cursor 11 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET6_FRAC_POST12 : 8;
    ///< set6 fractional ffe post cursor 12 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET6_FRAC_BANKA_FLOAT1 : 8;
    ///< set6 fractional ffe bankA float 1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set6_frac_3_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_3_WR_MASK (0xffffffffU)


///< set6 fractional ffe post cursor 10 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_3_FFE_COEFF_SET6_FRAC_POST10_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_3_FFE_COEFF_SET6_FRAC_POST10_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_3_FFE_COEFF_SET6_FRAC_POST10_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_3_FFE_COEFF_SET6_FRAC_POST10_BF_DEF (0x00000000)

///< set6 fractional ffe post cursor 11 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_3_FFE_COEFF_SET6_FRAC_POST11_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_3_FFE_COEFF_SET6_FRAC_POST11_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_3_FFE_COEFF_SET6_FRAC_POST11_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_3_FFE_COEFF_SET6_FRAC_POST11_BF_DEF (0x00000000)

///< set6 fractional ffe post cursor 12 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_3_FFE_COEFF_SET6_FRAC_POST12_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_3_FFE_COEFF_SET6_FRAC_POST12_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_3_FFE_COEFF_SET6_FRAC_POST12_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_3_FFE_COEFF_SET6_FRAC_POST12_BF_DEF (0x00000000)

///< set6 fractional ffe bankA float 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_3_FFE_COEFF_SET6_FRAC_BANKA_FLOAT1_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_3_FFE_COEFF_SET6_FRAC_BANKA_FLOAT1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_3_FFE_COEFF_SET6_FRAC_BANKA_FLOAT1_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_3_FFE_COEFF_SET6_FRAC_BANKA_FLOAT1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET6_FRAC_4 register description at address offset 0x634
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set6_frac_4
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET6_FRAC_BANKA_FLOAT2 : 8;
    ///< set6 fractional ffe bankA float 2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET6_FRAC_BANKA_FLOAT3 : 8;
    ///< set6 fractional ffe bankA float 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET6_FRAC_BANKB_FLOAT1 : 8;
    ///< set6 fractional ffe bankB float 1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET6_FRAC_BANKB_FLOAT2 : 8;
    ///< set6 fractional ffe bankB float 2 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set6_frac_4_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_4_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_4_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_4_WR_MASK (0xffffffffU)


///< set6 fractional ffe bankA float 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_4_FFE_COEFF_SET6_FRAC_BANKA_FLOAT2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_4_FFE_COEFF_SET6_FRAC_BANKA_FLOAT2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_4_FFE_COEFF_SET6_FRAC_BANKA_FLOAT2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_4_FFE_COEFF_SET6_FRAC_BANKA_FLOAT2_BF_DEF (0x00000000)

///< set6 fractional ffe bankA float 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_4_FFE_COEFF_SET6_FRAC_BANKA_FLOAT3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_4_FFE_COEFF_SET6_FRAC_BANKA_FLOAT3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_4_FFE_COEFF_SET6_FRAC_BANKA_FLOAT3_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_4_FFE_COEFF_SET6_FRAC_BANKA_FLOAT3_BF_DEF (0x00000000)

///< set6 fractional ffe bankB float 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_4_FFE_COEFF_SET6_FRAC_BANKB_FLOAT1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_4_FFE_COEFF_SET6_FRAC_BANKB_FLOAT1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_4_FFE_COEFF_SET6_FRAC_BANKB_FLOAT1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_4_FFE_COEFF_SET6_FRAC_BANKB_FLOAT1_BF_DEF (0x00000000)

///< set6 fractional ffe bankB float 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_4_FFE_COEFF_SET6_FRAC_BANKB_FLOAT2_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_4_FFE_COEFF_SET6_FRAC_BANKB_FLOAT2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_4_FFE_COEFF_SET6_FRAC_BANKB_FLOAT2_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_4_FFE_COEFF_SET6_FRAC_BANKB_FLOAT2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET6_FRAC_5 register description at address offset 0x638
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set6_frac_5
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET6_FRAC_BANKB_FLOAT3 : 8;
    ///< set6 fractional ffe bankB float 3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET6_FRAC_BANKC_FLOAT1 : 8;
    ///< set6 fractional ffe bankC float 1 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET6_FRAC_BANKC_FLOAT2 : 8;
    ///< set6 fractional ffe bankC float 2 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET6_FRAC_BANKC_FLOAT3 : 8;
    ///< set6 fractional ffe bankC float 3 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set6_frac_5_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_5_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_5_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_5_WR_MASK (0xffffffffU)


///< set6 fractional ffe bankB float 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_5_FFE_COEFF_SET6_FRAC_BANKB_FLOAT3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_5_FFE_COEFF_SET6_FRAC_BANKB_FLOAT3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_5_FFE_COEFF_SET6_FRAC_BANKB_FLOAT3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_5_FFE_COEFF_SET6_FRAC_BANKB_FLOAT3_BF_DEF (0x00000000)

///< set6 fractional ffe bankC float 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_5_FFE_COEFF_SET6_FRAC_BANKC_FLOAT1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_5_FFE_COEFF_SET6_FRAC_BANKC_FLOAT1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_5_FFE_COEFF_SET6_FRAC_BANKC_FLOAT1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_5_FFE_COEFF_SET6_FRAC_BANKC_FLOAT1_BF_DEF (0x00000000)

///< set6 fractional ffe bankC float 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_5_FFE_COEFF_SET6_FRAC_BANKC_FLOAT2_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_5_FFE_COEFF_SET6_FRAC_BANKC_FLOAT2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_5_FFE_COEFF_SET6_FRAC_BANKC_FLOAT2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_5_FFE_COEFF_SET6_FRAC_BANKC_FLOAT2_BF_DEF (0x00000000)

///< set6 fractional ffe bankC float 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_5_FFE_COEFF_SET6_FRAC_BANKC_FLOAT3_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_5_FFE_COEFF_SET6_FRAC_BANKC_FLOAT3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_5_FFE_COEFF_SET6_FRAC_BANKC_FLOAT3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_5_FFE_COEFF_SET6_FRAC_BANKC_FLOAT3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET7_FRAC_0 register description at address offset 0x63c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set7_frac_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET7_FRAC_PRE3 : 8;
    ///< set7 fractional ffe pre cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET7_FRAC_PRE2 : 8;
    ///< set7 fractional ffe pre cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET7_FRAC_PRE1 : 8;
    ///< set7 fractional ffe pre cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET7_FRAC_POST1 : 8;
    ///< set7 fractional ffe post cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set7_frac_0_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_0_WR_MASK (0xffffffffU)


///< set7 fractional ffe pre cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_0_FFE_COEFF_SET7_FRAC_PRE3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_0_FFE_COEFF_SET7_FRAC_PRE3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_0_FFE_COEFF_SET7_FRAC_PRE3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_0_FFE_COEFF_SET7_FRAC_PRE3_BF_DEF (0x00000000)

///< set7 fractional ffe pre cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_0_FFE_COEFF_SET7_FRAC_PRE2_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_0_FFE_COEFF_SET7_FRAC_PRE2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_0_FFE_COEFF_SET7_FRAC_PRE2_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_0_FFE_COEFF_SET7_FRAC_PRE2_BF_DEF (0x00000000)

///< set7 fractional ffe pre cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_0_FFE_COEFF_SET7_FRAC_PRE1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_0_FFE_COEFF_SET7_FRAC_PRE1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_0_FFE_COEFF_SET7_FRAC_PRE1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_0_FFE_COEFF_SET7_FRAC_PRE1_BF_DEF (0x00000000)

///< set7 fractional ffe post cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_0_FFE_COEFF_SET7_FRAC_POST1_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_0_FFE_COEFF_SET7_FRAC_POST1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_0_FFE_COEFF_SET7_FRAC_POST1_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_0_FFE_COEFF_SET7_FRAC_POST1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET7_FRAC_1 register description at address offset 0x640
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set7_frac_1
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET7_FRAC_POST2 : 8;
    ///< set7 fractional ffe post cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET7_FRAC_POST3 : 8;
    ///< set7 fractional ffe post cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET7_FRAC_POST4 : 8;
    ///< set7 fractional ffe post cursor 4 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET7_FRAC_POST5 : 8;
    ///< set7 fractional ffe post cursor 5 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set7_frac_1_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_1_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_1_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_1_WR_MASK (0xffffffffU)


///< set7 fractional ffe post cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_1_FFE_COEFF_SET7_FRAC_POST2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_1_FFE_COEFF_SET7_FRAC_POST2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_1_FFE_COEFF_SET7_FRAC_POST2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_1_FFE_COEFF_SET7_FRAC_POST2_BF_DEF (0x00000000)

///< set7 fractional ffe post cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_1_FFE_COEFF_SET7_FRAC_POST3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_1_FFE_COEFF_SET7_FRAC_POST3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_1_FFE_COEFF_SET7_FRAC_POST3_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_1_FFE_COEFF_SET7_FRAC_POST3_BF_DEF (0x00000000)

///< set7 fractional ffe post cursor 4 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_1_FFE_COEFF_SET7_FRAC_POST4_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_1_FFE_COEFF_SET7_FRAC_POST4_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_1_FFE_COEFF_SET7_FRAC_POST4_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_1_FFE_COEFF_SET7_FRAC_POST4_BF_DEF (0x00000000)

///< set7 fractional ffe post cursor 5 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_1_FFE_COEFF_SET7_FRAC_POST5_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_1_FFE_COEFF_SET7_FRAC_POST5_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_1_FFE_COEFF_SET7_FRAC_POST5_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_1_FFE_COEFF_SET7_FRAC_POST5_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET7_FRAC_2 register description at address offset 0x644
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set7_frac_2
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET7_FRAC_POST6 : 8;
    ///< set7 fractional ffe post cursor 6 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET7_FRAC_POST7 : 8;
    ///< set7 fractional ffe post cursor 7 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET7_FRAC_POST8 : 8;
    ///< set7 fractional ffe post cursor 8 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET7_FRAC_POST9 : 8;
    ///< set7 fractional ffe post cursor 9 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set7_frac_2_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_2_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_2_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_2_WR_MASK (0xffffffffU)


///< set7 fractional ffe post cursor 6 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_2_FFE_COEFF_SET7_FRAC_POST6_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_2_FFE_COEFF_SET7_FRAC_POST6_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_2_FFE_COEFF_SET7_FRAC_POST6_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_2_FFE_COEFF_SET7_FRAC_POST6_BF_DEF (0x00000000)

///< set7 fractional ffe post cursor 7 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_2_FFE_COEFF_SET7_FRAC_POST7_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_2_FFE_COEFF_SET7_FRAC_POST7_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_2_FFE_COEFF_SET7_FRAC_POST7_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_2_FFE_COEFF_SET7_FRAC_POST7_BF_DEF (0x00000000)

///< set7 fractional ffe post cursor 8 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_2_FFE_COEFF_SET7_FRAC_POST8_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_2_FFE_COEFF_SET7_FRAC_POST8_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_2_FFE_COEFF_SET7_FRAC_POST8_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_2_FFE_COEFF_SET7_FRAC_POST8_BF_DEF (0x00000000)

///< set7 fractional ffe post cursor 9 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_2_FFE_COEFF_SET7_FRAC_POST9_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_2_FFE_COEFF_SET7_FRAC_POST9_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_2_FFE_COEFF_SET7_FRAC_POST9_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_2_FFE_COEFF_SET7_FRAC_POST9_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET7_FRAC_3 register description at address offset 0x648
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set7_frac_3
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET7_FRAC_POST10 : 8;
    ///< set7 fractional ffe post cursor 10 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET7_FRAC_POST11 : 8;
    ///< set7 fractional ffe post cursor 11 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET7_FRAC_POST12 : 8;
    ///< set7 fractional ffe post cursor 12 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET7_FRAC_BANKA_FLOAT1 : 8;
    ///< set7 fractional ffe bankA float 1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set7_frac_3_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_3_WR_MASK (0xffffffffU)


///< set7 fractional ffe post cursor 10 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_3_FFE_COEFF_SET7_FRAC_POST10_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_3_FFE_COEFF_SET7_FRAC_POST10_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_3_FFE_COEFF_SET7_FRAC_POST10_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_3_FFE_COEFF_SET7_FRAC_POST10_BF_DEF (0x00000000)

///< set7 fractional ffe post cursor 11 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_3_FFE_COEFF_SET7_FRAC_POST11_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_3_FFE_COEFF_SET7_FRAC_POST11_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_3_FFE_COEFF_SET7_FRAC_POST11_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_3_FFE_COEFF_SET7_FRAC_POST11_BF_DEF (0x00000000)

///< set7 fractional ffe post cursor 12 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_3_FFE_COEFF_SET7_FRAC_POST12_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_3_FFE_COEFF_SET7_FRAC_POST12_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_3_FFE_COEFF_SET7_FRAC_POST12_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_3_FFE_COEFF_SET7_FRAC_POST12_BF_DEF (0x00000000)

///< set7 fractional ffe bankA float 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_3_FFE_COEFF_SET7_FRAC_BANKA_FLOAT1_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_3_FFE_COEFF_SET7_FRAC_BANKA_FLOAT1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_3_FFE_COEFF_SET7_FRAC_BANKA_FLOAT1_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_3_FFE_COEFF_SET7_FRAC_BANKA_FLOAT1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET7_FRAC_4 register description at address offset 0x64c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set7_frac_4
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET7_FRAC_BANKA_FLOAT2 : 8;
    ///< set7 fractional ffe bankA float 2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET7_FRAC_BANKA_FLOAT3 : 8;
    ///< set7 fractional ffe bankA float 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET7_FRAC_BANKB_FLOAT1 : 8;
    ///< set7 fractional ffe bankB float 1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET7_FRAC_BANKB_FLOAT2 : 8;
    ///< set7 fractional ffe bankB float 2 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set7_frac_4_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_4_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_4_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_4_WR_MASK (0xffffffffU)


///< set7 fractional ffe bankA float 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_4_FFE_COEFF_SET7_FRAC_BANKA_FLOAT2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_4_FFE_COEFF_SET7_FRAC_BANKA_FLOAT2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_4_FFE_COEFF_SET7_FRAC_BANKA_FLOAT2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_4_FFE_COEFF_SET7_FRAC_BANKA_FLOAT2_BF_DEF (0x00000000)

///< set7 fractional ffe bankA float 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_4_FFE_COEFF_SET7_FRAC_BANKA_FLOAT3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_4_FFE_COEFF_SET7_FRAC_BANKA_FLOAT3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_4_FFE_COEFF_SET7_FRAC_BANKA_FLOAT3_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_4_FFE_COEFF_SET7_FRAC_BANKA_FLOAT3_BF_DEF (0x00000000)

///< set7 fractional ffe bankB float 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_4_FFE_COEFF_SET7_FRAC_BANKB_FLOAT1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_4_FFE_COEFF_SET7_FRAC_BANKB_FLOAT1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_4_FFE_COEFF_SET7_FRAC_BANKB_FLOAT1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_4_FFE_COEFF_SET7_FRAC_BANKB_FLOAT1_BF_DEF (0x00000000)

///< set7 fractional ffe bankB float 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_4_FFE_COEFF_SET7_FRAC_BANKB_FLOAT2_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_4_FFE_COEFF_SET7_FRAC_BANKB_FLOAT2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_4_FFE_COEFF_SET7_FRAC_BANKB_FLOAT2_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_4_FFE_COEFF_SET7_FRAC_BANKB_FLOAT2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET7_FRAC_5 register description at address offset 0x650
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set7_frac_5
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET7_FRAC_BANKB_FLOAT3 : 8;
    ///< set7 fractional ffe bankB float 3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET7_FRAC_BANKC_FLOAT1 : 8;
    ///< set7 fractional ffe bankC float 1 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET7_FRAC_BANKC_FLOAT2 : 8;
    ///< set7 fractional ffe bankC float 2 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET7_FRAC_BANKC_FLOAT3 : 8;
    ///< set7 fractional ffe bankC float 3 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set7_frac_5_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_5_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_5_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_5_WR_MASK (0xffffffffU)


///< set7 fractional ffe bankB float 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_5_FFE_COEFF_SET7_FRAC_BANKB_FLOAT3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_5_FFE_COEFF_SET7_FRAC_BANKB_FLOAT3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_5_FFE_COEFF_SET7_FRAC_BANKB_FLOAT3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_5_FFE_COEFF_SET7_FRAC_BANKB_FLOAT3_BF_DEF (0x00000000)

///< set7 fractional ffe bankC float 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_5_FFE_COEFF_SET7_FRAC_BANKC_FLOAT1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_5_FFE_COEFF_SET7_FRAC_BANKC_FLOAT1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_5_FFE_COEFF_SET7_FRAC_BANKC_FLOAT1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_5_FFE_COEFF_SET7_FRAC_BANKC_FLOAT1_BF_DEF (0x00000000)

///< set7 fractional ffe bankC float 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_5_FFE_COEFF_SET7_FRAC_BANKC_FLOAT2_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_5_FFE_COEFF_SET7_FRAC_BANKC_FLOAT2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_5_FFE_COEFF_SET7_FRAC_BANKC_FLOAT2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_5_FFE_COEFF_SET7_FRAC_BANKC_FLOAT2_BF_DEF (0x00000000)

///< set7 fractional ffe bankC float 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_5_FFE_COEFF_SET7_FRAC_BANKC_FLOAT3_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_5_FFE_COEFF_SET7_FRAC_BANKC_FLOAT3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_5_FFE_COEFF_SET7_FRAC_BANKC_FLOAT3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_5_FFE_COEFF_SET7_FRAC_BANKC_FLOAT3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET8_FRAC_0 register description at address offset 0x654
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set8_frac_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET8_FRAC_PRE3 : 8;
    ///< set8 fractional ffe pre cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET8_FRAC_PRE2 : 8;
    ///< set8 fractional ffe pre cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET8_FRAC_PRE1 : 8;
    ///< set8 fractional ffe pre cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET8_FRAC_POST1 : 8;
    ///< set8 fractional ffe post cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set8_frac_0_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_0_WR_MASK (0xffffffffU)


///< set8 fractional ffe pre cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_0_FFE_COEFF_SET8_FRAC_PRE3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_0_FFE_COEFF_SET8_FRAC_PRE3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_0_FFE_COEFF_SET8_FRAC_PRE3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_0_FFE_COEFF_SET8_FRAC_PRE3_BF_DEF (0x00000000)

///< set8 fractional ffe pre cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_0_FFE_COEFF_SET8_FRAC_PRE2_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_0_FFE_COEFF_SET8_FRAC_PRE2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_0_FFE_COEFF_SET8_FRAC_PRE2_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_0_FFE_COEFF_SET8_FRAC_PRE2_BF_DEF (0x00000000)

///< set8 fractional ffe pre cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_0_FFE_COEFF_SET8_FRAC_PRE1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_0_FFE_COEFF_SET8_FRAC_PRE1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_0_FFE_COEFF_SET8_FRAC_PRE1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_0_FFE_COEFF_SET8_FRAC_PRE1_BF_DEF (0x00000000)

///< set8 fractional ffe post cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_0_FFE_COEFF_SET8_FRAC_POST1_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_0_FFE_COEFF_SET8_FRAC_POST1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_0_FFE_COEFF_SET8_FRAC_POST1_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_0_FFE_COEFF_SET8_FRAC_POST1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET8_FRAC_1 register description at address offset 0x658
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set8_frac_1
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET8_FRAC_POST2 : 8;
    ///< set8 fractional ffe post cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET8_FRAC_POST3 : 8;
    ///< set8 fractional ffe post cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET8_FRAC_POST4 : 8;
    ///< set8 fractional ffe post cursor 4 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET8_FRAC_POST5 : 8;
    ///< set8 fractional ffe post cursor 5 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set8_frac_1_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_1_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_1_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_1_WR_MASK (0xffffffffU)


///< set8 fractional ffe post cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_1_FFE_COEFF_SET8_FRAC_POST2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_1_FFE_COEFF_SET8_FRAC_POST2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_1_FFE_COEFF_SET8_FRAC_POST2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_1_FFE_COEFF_SET8_FRAC_POST2_BF_DEF (0x00000000)

///< set8 fractional ffe post cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_1_FFE_COEFF_SET8_FRAC_POST3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_1_FFE_COEFF_SET8_FRAC_POST3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_1_FFE_COEFF_SET8_FRAC_POST3_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_1_FFE_COEFF_SET8_FRAC_POST3_BF_DEF (0x00000000)

///< set8 fractional ffe post cursor 4 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_1_FFE_COEFF_SET8_FRAC_POST4_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_1_FFE_COEFF_SET8_FRAC_POST4_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_1_FFE_COEFF_SET8_FRAC_POST4_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_1_FFE_COEFF_SET8_FRAC_POST4_BF_DEF (0x00000000)

///< set8 fractional ffe post cursor 5 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_1_FFE_COEFF_SET8_FRAC_POST5_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_1_FFE_COEFF_SET8_FRAC_POST5_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_1_FFE_COEFF_SET8_FRAC_POST5_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_1_FFE_COEFF_SET8_FRAC_POST5_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET8_FRAC_2 register description at address offset 0x65c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set8_frac_2
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET8_FRAC_POST6 : 8;
    ///< set8 fractional ffe post cursor 6 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET8_FRAC_POST7 : 8;
    ///< set8 fractional ffe post cursor 7 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET8_FRAC_POST8 : 8;
    ///< set8 fractional ffe post cursor 8 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET8_FRAC_POST9 : 8;
    ///< set8 fractional ffe post cursor 9 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set8_frac_2_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_2_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_2_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_2_WR_MASK (0xffffffffU)


///< set8 fractional ffe post cursor 6 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_2_FFE_COEFF_SET8_FRAC_POST6_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_2_FFE_COEFF_SET8_FRAC_POST6_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_2_FFE_COEFF_SET8_FRAC_POST6_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_2_FFE_COEFF_SET8_FRAC_POST6_BF_DEF (0x00000000)

///< set8 fractional ffe post cursor 7 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_2_FFE_COEFF_SET8_FRAC_POST7_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_2_FFE_COEFF_SET8_FRAC_POST7_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_2_FFE_COEFF_SET8_FRAC_POST7_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_2_FFE_COEFF_SET8_FRAC_POST7_BF_DEF (0x00000000)

///< set8 fractional ffe post cursor 8 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_2_FFE_COEFF_SET8_FRAC_POST8_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_2_FFE_COEFF_SET8_FRAC_POST8_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_2_FFE_COEFF_SET8_FRAC_POST8_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_2_FFE_COEFF_SET8_FRAC_POST8_BF_DEF (0x00000000)

///< set8 fractional ffe post cursor 9 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_2_FFE_COEFF_SET8_FRAC_POST9_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_2_FFE_COEFF_SET8_FRAC_POST9_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_2_FFE_COEFF_SET8_FRAC_POST9_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_2_FFE_COEFF_SET8_FRAC_POST9_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET8_FRAC_3 register description at address offset 0x660
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set8_frac_3
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET8_FRAC_POST10 : 8;
    ///< set8 fractional ffe post cursor 10 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET8_FRAC_POST11 : 8;
    ///< set8 fractional ffe post cursor 11 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET8_FRAC_POST12 : 8;
    ///< set8 fractional ffe post cursor 12 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET8_FRAC_BANKA_FLOAT1 : 8;
    ///< set8 fractional ffe bankA float 1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set8_frac_3_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_3_WR_MASK (0xffffffffU)


///< set8 fractional ffe post cursor 10 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_3_FFE_COEFF_SET8_FRAC_POST10_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_3_FFE_COEFF_SET8_FRAC_POST10_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_3_FFE_COEFF_SET8_FRAC_POST10_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_3_FFE_COEFF_SET8_FRAC_POST10_BF_DEF (0x00000000)

///< set8 fractional ffe post cursor 11 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_3_FFE_COEFF_SET8_FRAC_POST11_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_3_FFE_COEFF_SET8_FRAC_POST11_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_3_FFE_COEFF_SET8_FRAC_POST11_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_3_FFE_COEFF_SET8_FRAC_POST11_BF_DEF (0x00000000)

///< set8 fractional ffe post cursor 12 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_3_FFE_COEFF_SET8_FRAC_POST12_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_3_FFE_COEFF_SET8_FRAC_POST12_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_3_FFE_COEFF_SET8_FRAC_POST12_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_3_FFE_COEFF_SET8_FRAC_POST12_BF_DEF (0x00000000)

///< set8 fractional ffe bankA float 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_3_FFE_COEFF_SET8_FRAC_BANKA_FLOAT1_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_3_FFE_COEFF_SET8_FRAC_BANKA_FLOAT1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_3_FFE_COEFF_SET8_FRAC_BANKA_FLOAT1_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_3_FFE_COEFF_SET8_FRAC_BANKA_FLOAT1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET8_FRAC_4 register description at address offset 0x664
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set8_frac_4
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET8_FRAC_BANKA_FLOAT2 : 8;
    ///< set8 fractional ffe bankA float 2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET8_FRAC_BANKA_FLOAT3 : 8;
    ///< set8 fractional ffe bankA float 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET8_FRAC_BANKB_FLOAT1 : 8;
    ///< set8 fractional ffe bankB float 1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET8_FRAC_BANKB_FLOAT2 : 8;
    ///< set8 fractional ffe bankB float 2 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set8_frac_4_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_4_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_4_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_4_WR_MASK (0xffffffffU)


///< set8 fractional ffe bankA float 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_4_FFE_COEFF_SET8_FRAC_BANKA_FLOAT2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_4_FFE_COEFF_SET8_FRAC_BANKA_FLOAT2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_4_FFE_COEFF_SET8_FRAC_BANKA_FLOAT2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_4_FFE_COEFF_SET8_FRAC_BANKA_FLOAT2_BF_DEF (0x00000000)

///< set8 fractional ffe bankA float 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_4_FFE_COEFF_SET8_FRAC_BANKA_FLOAT3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_4_FFE_COEFF_SET8_FRAC_BANKA_FLOAT3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_4_FFE_COEFF_SET8_FRAC_BANKA_FLOAT3_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_4_FFE_COEFF_SET8_FRAC_BANKA_FLOAT3_BF_DEF (0x00000000)

///< set8 fractional ffe bankB float 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_4_FFE_COEFF_SET8_FRAC_BANKB_FLOAT1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_4_FFE_COEFF_SET8_FRAC_BANKB_FLOAT1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_4_FFE_COEFF_SET8_FRAC_BANKB_FLOAT1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_4_FFE_COEFF_SET8_FRAC_BANKB_FLOAT1_BF_DEF (0x00000000)

///< set8 fractional ffe bankB float 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_4_FFE_COEFF_SET8_FRAC_BANKB_FLOAT2_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_4_FFE_COEFF_SET8_FRAC_BANKB_FLOAT2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_4_FFE_COEFF_SET8_FRAC_BANKB_FLOAT2_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_4_FFE_COEFF_SET8_FRAC_BANKB_FLOAT2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET8_FRAC_5 register description at address offset 0x668
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set8_frac_5
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET8_FRAC_BANKB_FLOAT3 : 8;
    ///< set8 fractional ffe bankB float 3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET8_FRAC_BANKC_FLOAT1 : 8;
    ///< set8 fractional ffe bankC float 1 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET8_FRAC_BANKC_FLOAT2 : 8;
    ///< set8 fractional ffe bankC float 2 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET8_FRAC_BANKC_FLOAT3 : 8;
    ///< set8 fractional ffe bankC float 3 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set8_frac_5_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_5_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_5_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_5_WR_MASK (0xffffffffU)


///< set8 fractional ffe bankB float 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_5_FFE_COEFF_SET8_FRAC_BANKB_FLOAT3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_5_FFE_COEFF_SET8_FRAC_BANKB_FLOAT3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_5_FFE_COEFF_SET8_FRAC_BANKB_FLOAT3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_5_FFE_COEFF_SET8_FRAC_BANKB_FLOAT3_BF_DEF (0x00000000)

///< set8 fractional ffe bankC float 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_5_FFE_COEFF_SET8_FRAC_BANKC_FLOAT1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_5_FFE_COEFF_SET8_FRAC_BANKC_FLOAT1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_5_FFE_COEFF_SET8_FRAC_BANKC_FLOAT1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_5_FFE_COEFF_SET8_FRAC_BANKC_FLOAT1_BF_DEF (0x00000000)

///< set8 fractional ffe bankC float 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_5_FFE_COEFF_SET8_FRAC_BANKC_FLOAT2_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_5_FFE_COEFF_SET8_FRAC_BANKC_FLOAT2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_5_FFE_COEFF_SET8_FRAC_BANKC_FLOAT2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_5_FFE_COEFF_SET8_FRAC_BANKC_FLOAT2_BF_DEF (0x00000000)

///< set8 fractional ffe bankC float 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_5_FFE_COEFF_SET8_FRAC_BANKC_FLOAT3_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_5_FFE_COEFF_SET8_FRAC_BANKC_FLOAT3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_5_FFE_COEFF_SET8_FRAC_BANKC_FLOAT3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_5_FFE_COEFF_SET8_FRAC_BANKC_FLOAT3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET9_FRAC_0 register description at address offset 0x66c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set9_frac_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET9_FRAC_PRE3 : 8;
    ///< set9 fractional ffe pre cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET9_FRAC_PRE2 : 8;
    ///< set9 fractional ffe pre cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET9_FRAC_PRE1 : 8;
    ///< set9 fractional ffe pre cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET9_FRAC_POST1 : 8;
    ///< set9 fractional ffe post cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set9_frac_0_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_0_WR_MASK (0xffffffffU)


///< set9 fractional ffe pre cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_0_FFE_COEFF_SET9_FRAC_PRE3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_0_FFE_COEFF_SET9_FRAC_PRE3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_0_FFE_COEFF_SET9_FRAC_PRE3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_0_FFE_COEFF_SET9_FRAC_PRE3_BF_DEF (0x00000000)

///< set9 fractional ffe pre cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_0_FFE_COEFF_SET9_FRAC_PRE2_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_0_FFE_COEFF_SET9_FRAC_PRE2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_0_FFE_COEFF_SET9_FRAC_PRE2_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_0_FFE_COEFF_SET9_FRAC_PRE2_BF_DEF (0x00000000)

///< set9 fractional ffe pre cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_0_FFE_COEFF_SET9_FRAC_PRE1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_0_FFE_COEFF_SET9_FRAC_PRE1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_0_FFE_COEFF_SET9_FRAC_PRE1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_0_FFE_COEFF_SET9_FRAC_PRE1_BF_DEF (0x00000000)

///< set9 fractional ffe post cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_0_FFE_COEFF_SET9_FRAC_POST1_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_0_FFE_COEFF_SET9_FRAC_POST1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_0_FFE_COEFF_SET9_FRAC_POST1_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_0_FFE_COEFF_SET9_FRAC_POST1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET9_FRAC_1 register description at address offset 0x670
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set9_frac_1
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET9_FRAC_POST2 : 8;
    ///< set9 fractional ffe post cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET9_FRAC_POST3 : 8;
    ///< set9 fractional ffe post cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET9_FRAC_POST4 : 8;
    ///< set9 fractional ffe post cursor 4 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET9_FRAC_POST5 : 8;
    ///< set9 fractional ffe post cursor 5 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set9_frac_1_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_1_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_1_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_1_WR_MASK (0xffffffffU)


///< set9 fractional ffe post cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_1_FFE_COEFF_SET9_FRAC_POST2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_1_FFE_COEFF_SET9_FRAC_POST2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_1_FFE_COEFF_SET9_FRAC_POST2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_1_FFE_COEFF_SET9_FRAC_POST2_BF_DEF (0x00000000)

///< set9 fractional ffe post cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_1_FFE_COEFF_SET9_FRAC_POST3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_1_FFE_COEFF_SET9_FRAC_POST3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_1_FFE_COEFF_SET9_FRAC_POST3_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_1_FFE_COEFF_SET9_FRAC_POST3_BF_DEF (0x00000000)

///< set9 fractional ffe post cursor 4 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_1_FFE_COEFF_SET9_FRAC_POST4_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_1_FFE_COEFF_SET9_FRAC_POST4_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_1_FFE_COEFF_SET9_FRAC_POST4_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_1_FFE_COEFF_SET9_FRAC_POST4_BF_DEF (0x00000000)

///< set9 fractional ffe post cursor 5 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_1_FFE_COEFF_SET9_FRAC_POST5_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_1_FFE_COEFF_SET9_FRAC_POST5_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_1_FFE_COEFF_SET9_FRAC_POST5_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_1_FFE_COEFF_SET9_FRAC_POST5_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET9_FRAC_2 register description at address offset 0x674
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set9_frac_2
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET9_FRAC_POST6 : 8;
    ///< set9 fractional ffe post cursor 6 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET9_FRAC_POST7 : 8;
    ///< set9 fractional ffe post cursor 7 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET9_FRAC_POST8 : 8;
    ///< set9 fractional ffe post cursor 8 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET9_FRAC_POST9 : 8;
    ///< set9 fractional ffe post cursor 9 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set9_frac_2_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_2_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_2_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_2_WR_MASK (0xffffffffU)


///< set9 fractional ffe post cursor 6 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_2_FFE_COEFF_SET9_FRAC_POST6_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_2_FFE_COEFF_SET9_FRAC_POST6_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_2_FFE_COEFF_SET9_FRAC_POST6_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_2_FFE_COEFF_SET9_FRAC_POST6_BF_DEF (0x00000000)

///< set9 fractional ffe post cursor 7 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_2_FFE_COEFF_SET9_FRAC_POST7_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_2_FFE_COEFF_SET9_FRAC_POST7_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_2_FFE_COEFF_SET9_FRAC_POST7_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_2_FFE_COEFF_SET9_FRAC_POST7_BF_DEF (0x00000000)

///< set9 fractional ffe post cursor 8 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_2_FFE_COEFF_SET9_FRAC_POST8_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_2_FFE_COEFF_SET9_FRAC_POST8_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_2_FFE_COEFF_SET9_FRAC_POST8_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_2_FFE_COEFF_SET9_FRAC_POST8_BF_DEF (0x00000000)

///< set9 fractional ffe post cursor 9 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_2_FFE_COEFF_SET9_FRAC_POST9_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_2_FFE_COEFF_SET9_FRAC_POST9_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_2_FFE_COEFF_SET9_FRAC_POST9_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_2_FFE_COEFF_SET9_FRAC_POST9_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET9_FRAC_3 register description at address offset 0x678
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set9_frac_3
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET9_FRAC_POST10 : 8;
    ///< set9 fractional ffe post cursor 10 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET9_FRAC_POST11 : 8;
    ///< set9 fractional ffe post cursor 11 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET9_FRAC_POST12 : 8;
    ///< set9 fractional ffe post cursor 12 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET9_FRAC_BANKA_FLOAT1 : 8;
    ///< set9 fractional ffe bankA float 1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set9_frac_3_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_3_WR_MASK (0xffffffffU)


///< set9 fractional ffe post cursor 10 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_3_FFE_COEFF_SET9_FRAC_POST10_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_3_FFE_COEFF_SET9_FRAC_POST10_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_3_FFE_COEFF_SET9_FRAC_POST10_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_3_FFE_COEFF_SET9_FRAC_POST10_BF_DEF (0x00000000)

///< set9 fractional ffe post cursor 11 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_3_FFE_COEFF_SET9_FRAC_POST11_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_3_FFE_COEFF_SET9_FRAC_POST11_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_3_FFE_COEFF_SET9_FRAC_POST11_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_3_FFE_COEFF_SET9_FRAC_POST11_BF_DEF (0x00000000)

///< set9 fractional ffe post cursor 12 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_3_FFE_COEFF_SET9_FRAC_POST12_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_3_FFE_COEFF_SET9_FRAC_POST12_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_3_FFE_COEFF_SET9_FRAC_POST12_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_3_FFE_COEFF_SET9_FRAC_POST12_BF_DEF (0x00000000)

///< set9 fractional ffe bankA float 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_3_FFE_COEFF_SET9_FRAC_BANKA_FLOAT1_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_3_FFE_COEFF_SET9_FRAC_BANKA_FLOAT1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_3_FFE_COEFF_SET9_FRAC_BANKA_FLOAT1_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_3_FFE_COEFF_SET9_FRAC_BANKA_FLOAT1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET9_FRAC_4 register description at address offset 0x67c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set9_frac_4
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET9_FRAC_BANKA_FLOAT2 : 8;
    ///< set9 fractional ffe bankA float 2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET9_FRAC_BANKA_FLOAT3 : 8;
    ///< set9 fractional ffe bankA float 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET9_FRAC_BANKB_FLOAT1 : 8;
    ///< set9 fractional ffe bankB float 1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET9_FRAC_BANKB_FLOAT2 : 8;
    ///< set9 fractional ffe bankB float 2 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set9_frac_4_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_4_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_4_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_4_WR_MASK (0xffffffffU)


///< set9 fractional ffe bankA float 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_4_FFE_COEFF_SET9_FRAC_BANKA_FLOAT2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_4_FFE_COEFF_SET9_FRAC_BANKA_FLOAT2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_4_FFE_COEFF_SET9_FRAC_BANKA_FLOAT2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_4_FFE_COEFF_SET9_FRAC_BANKA_FLOAT2_BF_DEF (0x00000000)

///< set9 fractional ffe bankA float 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_4_FFE_COEFF_SET9_FRAC_BANKA_FLOAT3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_4_FFE_COEFF_SET9_FRAC_BANKA_FLOAT3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_4_FFE_COEFF_SET9_FRAC_BANKA_FLOAT3_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_4_FFE_COEFF_SET9_FRAC_BANKA_FLOAT3_BF_DEF (0x00000000)

///< set9 fractional ffe bankB float 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_4_FFE_COEFF_SET9_FRAC_BANKB_FLOAT1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_4_FFE_COEFF_SET9_FRAC_BANKB_FLOAT1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_4_FFE_COEFF_SET9_FRAC_BANKB_FLOAT1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_4_FFE_COEFF_SET9_FRAC_BANKB_FLOAT1_BF_DEF (0x00000000)

///< set9 fractional ffe bankB float 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_4_FFE_COEFF_SET9_FRAC_BANKB_FLOAT2_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_4_FFE_COEFF_SET9_FRAC_BANKB_FLOAT2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_4_FFE_COEFF_SET9_FRAC_BANKB_FLOAT2_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_4_FFE_COEFF_SET9_FRAC_BANKB_FLOAT2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET9_FRAC_5 register description at address offset 0x680
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set9_frac_5
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET9_FRAC_BANKB_FLOAT3 : 8;
    ///< set9 fractional ffe bankB float 3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET9_FRAC_BANKC_FLOAT1 : 8;
    ///< set9 fractional ffe bankC float 1 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET9_FRAC_BANKC_FLOAT2 : 8;
    ///< set9 fractional ffe bankC float 2 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET9_FRAC_BANKC_FLOAT3 : 8;
    ///< set9 fractional ffe bankC float 3 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set9_frac_5_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_5_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_5_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_5_WR_MASK (0xffffffffU)


///< set9 fractional ffe bankB float 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_5_FFE_COEFF_SET9_FRAC_BANKB_FLOAT3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_5_FFE_COEFF_SET9_FRAC_BANKB_FLOAT3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_5_FFE_COEFF_SET9_FRAC_BANKB_FLOAT3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_5_FFE_COEFF_SET9_FRAC_BANKB_FLOAT3_BF_DEF (0x00000000)

///< set9 fractional ffe bankC float 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_5_FFE_COEFF_SET9_FRAC_BANKC_FLOAT1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_5_FFE_COEFF_SET9_FRAC_BANKC_FLOAT1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_5_FFE_COEFF_SET9_FRAC_BANKC_FLOAT1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_5_FFE_COEFF_SET9_FRAC_BANKC_FLOAT1_BF_DEF (0x00000000)

///< set9 fractional ffe bankC float 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_5_FFE_COEFF_SET9_FRAC_BANKC_FLOAT2_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_5_FFE_COEFF_SET9_FRAC_BANKC_FLOAT2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_5_FFE_COEFF_SET9_FRAC_BANKC_FLOAT2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_5_FFE_COEFF_SET9_FRAC_BANKC_FLOAT2_BF_DEF (0x00000000)

///< set9 fractional ffe bankC float 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_5_FFE_COEFF_SET9_FRAC_BANKC_FLOAT3_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_5_FFE_COEFF_SET9_FRAC_BANKC_FLOAT3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_5_FFE_COEFF_SET9_FRAC_BANKC_FLOAT3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_5_FFE_COEFF_SET9_FRAC_BANKC_FLOAT3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET10_FRAC_0 register description at address offset 0x684
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set10_frac_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET10_FRAC_PRE3 : 8;
    ///< set10 fractional ffe pre cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET10_FRAC_PRE2 : 8;
    ///< set10 fractional ffe pre cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET10_FRAC_PRE1 : 8;
    ///< set10 fractional ffe pre cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET10_FRAC_POST1 : 8;
    ///< set10 fractional ffe post cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set10_frac_0_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_0_WR_MASK (0xffffffffU)


///< set10 fractional ffe pre cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_0_FFE_COEFF_SET10_FRAC_PRE3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_0_FFE_COEFF_SET10_FRAC_PRE3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_0_FFE_COEFF_SET10_FRAC_PRE3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_0_FFE_COEFF_SET10_FRAC_PRE3_BF_DEF (0x00000000)

///< set10 fractional ffe pre cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_0_FFE_COEFF_SET10_FRAC_PRE2_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_0_FFE_COEFF_SET10_FRAC_PRE2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_0_FFE_COEFF_SET10_FRAC_PRE2_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_0_FFE_COEFF_SET10_FRAC_PRE2_BF_DEF (0x00000000)

///< set10 fractional ffe pre cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_0_FFE_COEFF_SET10_FRAC_PRE1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_0_FFE_COEFF_SET10_FRAC_PRE1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_0_FFE_COEFF_SET10_FRAC_PRE1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_0_FFE_COEFF_SET10_FRAC_PRE1_BF_DEF (0x00000000)

///< set10 fractional ffe post cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_0_FFE_COEFF_SET10_FRAC_POST1_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_0_FFE_COEFF_SET10_FRAC_POST1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_0_FFE_COEFF_SET10_FRAC_POST1_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_0_FFE_COEFF_SET10_FRAC_POST1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET10_FRAC_1 register description at address offset 0x688
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set10_frac_1
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET10_FRAC_POST2 : 8;
    ///< set10 fractional ffe post cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET10_FRAC_POST3 : 8;
    ///< set10 fractional ffe post cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET10_FRAC_POST4 : 8;
    ///< set10 fractional ffe post cursor 4 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET10_FRAC_POST5 : 8;
    ///< set10 fractional ffe post cursor 5 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set10_frac_1_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_1_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_1_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_1_WR_MASK (0xffffffffU)


///< set10 fractional ffe post cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_1_FFE_COEFF_SET10_FRAC_POST2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_1_FFE_COEFF_SET10_FRAC_POST2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_1_FFE_COEFF_SET10_FRAC_POST2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_1_FFE_COEFF_SET10_FRAC_POST2_BF_DEF (0x00000000)

///< set10 fractional ffe post cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_1_FFE_COEFF_SET10_FRAC_POST3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_1_FFE_COEFF_SET10_FRAC_POST3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_1_FFE_COEFF_SET10_FRAC_POST3_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_1_FFE_COEFF_SET10_FRAC_POST3_BF_DEF (0x00000000)

///< set10 fractional ffe post cursor 4 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_1_FFE_COEFF_SET10_FRAC_POST4_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_1_FFE_COEFF_SET10_FRAC_POST4_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_1_FFE_COEFF_SET10_FRAC_POST4_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_1_FFE_COEFF_SET10_FRAC_POST4_BF_DEF (0x00000000)

///< set10 fractional ffe post cursor 5 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_1_FFE_COEFF_SET10_FRAC_POST5_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_1_FFE_COEFF_SET10_FRAC_POST5_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_1_FFE_COEFF_SET10_FRAC_POST5_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_1_FFE_COEFF_SET10_FRAC_POST5_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET10_FRAC_2 register description at address offset 0x68c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set10_frac_2
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET10_FRAC_POST6 : 8;
    ///< set10 fractional ffe post cursor 6 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET10_FRAC_POST7 : 8;
    ///< set10 fractional ffe post cursor 7 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET10_FRAC_POST8 : 8;
    ///< set10 fractional ffe post cursor 8 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET10_FRAC_POST9 : 8;
    ///< set10 fractional ffe post cursor 9 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set10_frac_2_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_2_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_2_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_2_WR_MASK (0xffffffffU)


///< set10 fractional ffe post cursor 6 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_2_FFE_COEFF_SET10_FRAC_POST6_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_2_FFE_COEFF_SET10_FRAC_POST6_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_2_FFE_COEFF_SET10_FRAC_POST6_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_2_FFE_COEFF_SET10_FRAC_POST6_BF_DEF (0x00000000)

///< set10 fractional ffe post cursor 7 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_2_FFE_COEFF_SET10_FRAC_POST7_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_2_FFE_COEFF_SET10_FRAC_POST7_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_2_FFE_COEFF_SET10_FRAC_POST7_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_2_FFE_COEFF_SET10_FRAC_POST7_BF_DEF (0x00000000)

///< set10 fractional ffe post cursor 8 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_2_FFE_COEFF_SET10_FRAC_POST8_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_2_FFE_COEFF_SET10_FRAC_POST8_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_2_FFE_COEFF_SET10_FRAC_POST8_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_2_FFE_COEFF_SET10_FRAC_POST8_BF_DEF (0x00000000)

///< set10 fractional ffe post cursor 9 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_2_FFE_COEFF_SET10_FRAC_POST9_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_2_FFE_COEFF_SET10_FRAC_POST9_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_2_FFE_COEFF_SET10_FRAC_POST9_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_2_FFE_COEFF_SET10_FRAC_POST9_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET10_FRAC_3 register description at address offset 0x690
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set10_frac_3
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET10_FRAC_POST10 : 8;
    ///< set10 fractional ffe post cursor 10 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET10_FRAC_POST11 : 8;
    ///< set10 fractional ffe post cursor 11 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET10_FRAC_POST12 : 8;
    ///< set10 fractional ffe post cursor 12 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET10_FRAC_BANKA_FLOAT1 : 8;
    ///< set10 fractional ffe bankA float 1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set10_frac_3_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_3_WR_MASK (0xffffffffU)


///< set10 fractional ffe post cursor 10 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_3_FFE_COEFF_SET10_FRAC_POST10_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_3_FFE_COEFF_SET10_FRAC_POST10_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_3_FFE_COEFF_SET10_FRAC_POST10_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_3_FFE_COEFF_SET10_FRAC_POST10_BF_DEF (0x00000000)

///< set10 fractional ffe post cursor 11 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_3_FFE_COEFF_SET10_FRAC_POST11_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_3_FFE_COEFF_SET10_FRAC_POST11_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_3_FFE_COEFF_SET10_FRAC_POST11_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_3_FFE_COEFF_SET10_FRAC_POST11_BF_DEF (0x00000000)

///< set10 fractional ffe post cursor 12 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_3_FFE_COEFF_SET10_FRAC_POST12_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_3_FFE_COEFF_SET10_FRAC_POST12_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_3_FFE_COEFF_SET10_FRAC_POST12_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_3_FFE_COEFF_SET10_FRAC_POST12_BF_DEF (0x00000000)

///< set10 fractional ffe bankA float 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_3_FFE_COEFF_SET10_FRAC_BANKA_FLOAT1_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_3_FFE_COEFF_SET10_FRAC_BANKA_FLOAT1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_3_FFE_COEFF_SET10_FRAC_BANKA_FLOAT1_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_3_FFE_COEFF_SET10_FRAC_BANKA_FLOAT1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET10_FRAC_4 register description at address offset 0x694
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set10_frac_4
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET10_FRAC_BANKA_FLOAT2 : 8;
    ///< set10 fractional ffe bankA float 2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET10_FRAC_BANKA_FLOAT3 : 8;
    ///< set10 fractional ffe bankA float 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET10_FRAC_BANKB_FLOAT1 : 8;
    ///< set10 fractional ffe bankB float 1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET10_FRAC_BANKB_FLOAT2 : 8;
    ///< set10 fractional ffe bankB float 2 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set10_frac_4_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_4_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_4_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_4_WR_MASK (0xffffffffU)


///< set10 fractional ffe bankA float 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_4_FFE_COEFF_SET10_FRAC_BANKA_FLOAT2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_4_FFE_COEFF_SET10_FRAC_BANKA_FLOAT2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_4_FFE_COEFF_SET10_FRAC_BANKA_FLOAT2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_4_FFE_COEFF_SET10_FRAC_BANKA_FLOAT2_BF_DEF (0x00000000)

///< set10 fractional ffe bankA float 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_4_FFE_COEFF_SET10_FRAC_BANKA_FLOAT3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_4_FFE_COEFF_SET10_FRAC_BANKA_FLOAT3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_4_FFE_COEFF_SET10_FRAC_BANKA_FLOAT3_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_4_FFE_COEFF_SET10_FRAC_BANKA_FLOAT3_BF_DEF (0x00000000)

///< set10 fractional ffe bankB float 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_4_FFE_COEFF_SET10_FRAC_BANKB_FLOAT1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_4_FFE_COEFF_SET10_FRAC_BANKB_FLOAT1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_4_FFE_COEFF_SET10_FRAC_BANKB_FLOAT1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_4_FFE_COEFF_SET10_FRAC_BANKB_FLOAT1_BF_DEF (0x00000000)

///< set10 fractional ffe bankB float 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_4_FFE_COEFF_SET10_FRAC_BANKB_FLOAT2_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_4_FFE_COEFF_SET10_FRAC_BANKB_FLOAT2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_4_FFE_COEFF_SET10_FRAC_BANKB_FLOAT2_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_4_FFE_COEFF_SET10_FRAC_BANKB_FLOAT2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET10_FRAC_5 register description at address offset 0x698
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set10_frac_5
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET10_FRAC_BANKB_FLOAT3 : 8;
    ///< set10 fractional ffe bankB float 3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET10_FRAC_BANKC_FLOAT1 : 8;
    ///< set10 fractional ffe bankC float 1 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET10_FRAC_BANKC_FLOAT2 : 8;
    ///< set10 fractional ffe bankC float 2 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET10_FRAC_BANKC_FLOAT3 : 8;
    ///< set10 fractional ffe bankC float 3 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set10_frac_5_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_5_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_5_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_5_WR_MASK (0xffffffffU)


///< set10 fractional ffe bankB float 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_5_FFE_COEFF_SET10_FRAC_BANKB_FLOAT3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_5_FFE_COEFF_SET10_FRAC_BANKB_FLOAT3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_5_FFE_COEFF_SET10_FRAC_BANKB_FLOAT3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_5_FFE_COEFF_SET10_FRAC_BANKB_FLOAT3_BF_DEF (0x00000000)

///< set10 fractional ffe bankC float 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_5_FFE_COEFF_SET10_FRAC_BANKC_FLOAT1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_5_FFE_COEFF_SET10_FRAC_BANKC_FLOAT1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_5_FFE_COEFF_SET10_FRAC_BANKC_FLOAT1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_5_FFE_COEFF_SET10_FRAC_BANKC_FLOAT1_BF_DEF (0x00000000)

///< set10 fractional ffe bankC float 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_5_FFE_COEFF_SET10_FRAC_BANKC_FLOAT2_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_5_FFE_COEFF_SET10_FRAC_BANKC_FLOAT2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_5_FFE_COEFF_SET10_FRAC_BANKC_FLOAT2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_5_FFE_COEFF_SET10_FRAC_BANKC_FLOAT2_BF_DEF (0x00000000)

///< set10 fractional ffe bankC float 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_5_FFE_COEFF_SET10_FRAC_BANKC_FLOAT3_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_5_FFE_COEFF_SET10_FRAC_BANKC_FLOAT3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_5_FFE_COEFF_SET10_FRAC_BANKC_FLOAT3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_5_FFE_COEFF_SET10_FRAC_BANKC_FLOAT3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET11_FRAC_0 register description at address offset 0x69c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set11_frac_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET11_FRAC_PRE3 : 8;
    ///< set11 fractional ffe pre cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET11_FRAC_PRE2 : 8;
    ///< set11 fractional ffe pre cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET11_FRAC_PRE1 : 8;
    ///< set11 fractional ffe pre cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET11_FRAC_POST1 : 8;
    ///< set11 fractional ffe post cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set11_frac_0_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_0_WR_MASK (0xffffffffU)


///< set11 fractional ffe pre cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_0_FFE_COEFF_SET11_FRAC_PRE3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_0_FFE_COEFF_SET11_FRAC_PRE3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_0_FFE_COEFF_SET11_FRAC_PRE3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_0_FFE_COEFF_SET11_FRAC_PRE3_BF_DEF (0x00000000)

///< set11 fractional ffe pre cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_0_FFE_COEFF_SET11_FRAC_PRE2_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_0_FFE_COEFF_SET11_FRAC_PRE2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_0_FFE_COEFF_SET11_FRAC_PRE2_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_0_FFE_COEFF_SET11_FRAC_PRE2_BF_DEF (0x00000000)

///< set11 fractional ffe pre cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_0_FFE_COEFF_SET11_FRAC_PRE1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_0_FFE_COEFF_SET11_FRAC_PRE1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_0_FFE_COEFF_SET11_FRAC_PRE1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_0_FFE_COEFF_SET11_FRAC_PRE1_BF_DEF (0x00000000)

///< set11 fractional ffe post cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_0_FFE_COEFF_SET11_FRAC_POST1_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_0_FFE_COEFF_SET11_FRAC_POST1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_0_FFE_COEFF_SET11_FRAC_POST1_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_0_FFE_COEFF_SET11_FRAC_POST1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET11_FRAC_1 register description at address offset 0x6a0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set11_frac_1
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET11_FRAC_POST2 : 8;
    ///< set11 fractional ffe post cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET11_FRAC_POST3 : 8;
    ///< set11 fractional ffe post cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET11_FRAC_POST4 : 8;
    ///< set11 fractional ffe post cursor 4 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET11_FRAC_POST5 : 8;
    ///< set11 fractional ffe post cursor 5 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set11_frac_1_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_1_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_1_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_1_WR_MASK (0xffffffffU)


///< set11 fractional ffe post cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_1_FFE_COEFF_SET11_FRAC_POST2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_1_FFE_COEFF_SET11_FRAC_POST2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_1_FFE_COEFF_SET11_FRAC_POST2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_1_FFE_COEFF_SET11_FRAC_POST2_BF_DEF (0x00000000)

///< set11 fractional ffe post cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_1_FFE_COEFF_SET11_FRAC_POST3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_1_FFE_COEFF_SET11_FRAC_POST3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_1_FFE_COEFF_SET11_FRAC_POST3_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_1_FFE_COEFF_SET11_FRAC_POST3_BF_DEF (0x00000000)

///< set11 fractional ffe post cursor 4 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_1_FFE_COEFF_SET11_FRAC_POST4_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_1_FFE_COEFF_SET11_FRAC_POST4_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_1_FFE_COEFF_SET11_FRAC_POST4_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_1_FFE_COEFF_SET11_FRAC_POST4_BF_DEF (0x00000000)

///< set11 fractional ffe post cursor 5 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_1_FFE_COEFF_SET11_FRAC_POST5_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_1_FFE_COEFF_SET11_FRAC_POST5_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_1_FFE_COEFF_SET11_FRAC_POST5_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_1_FFE_COEFF_SET11_FRAC_POST5_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET11_FRAC_2 register description at address offset 0x6a4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set11_frac_2
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET11_FRAC_POST6 : 8;
    ///< set11 fractional ffe post cursor 6 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET11_FRAC_POST7 : 8;
    ///< set11 fractional ffe post cursor 7 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET11_FRAC_POST8 : 8;
    ///< set11 fractional ffe post cursor 8 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET11_FRAC_POST9 : 8;
    ///< set11 fractional ffe post cursor 9 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set11_frac_2_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_2_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_2_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_2_WR_MASK (0xffffffffU)


///< set11 fractional ffe post cursor 6 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_2_FFE_COEFF_SET11_FRAC_POST6_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_2_FFE_COEFF_SET11_FRAC_POST6_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_2_FFE_COEFF_SET11_FRAC_POST6_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_2_FFE_COEFF_SET11_FRAC_POST6_BF_DEF (0x00000000)

///< set11 fractional ffe post cursor 7 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_2_FFE_COEFF_SET11_FRAC_POST7_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_2_FFE_COEFF_SET11_FRAC_POST7_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_2_FFE_COEFF_SET11_FRAC_POST7_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_2_FFE_COEFF_SET11_FRAC_POST7_BF_DEF (0x00000000)

///< set11 fractional ffe post cursor 8 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_2_FFE_COEFF_SET11_FRAC_POST8_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_2_FFE_COEFF_SET11_FRAC_POST8_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_2_FFE_COEFF_SET11_FRAC_POST8_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_2_FFE_COEFF_SET11_FRAC_POST8_BF_DEF (0x00000000)

///< set11 fractional ffe post cursor 9 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_2_FFE_COEFF_SET11_FRAC_POST9_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_2_FFE_COEFF_SET11_FRAC_POST9_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_2_FFE_COEFF_SET11_FRAC_POST9_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_2_FFE_COEFF_SET11_FRAC_POST9_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET11_FRAC_3 register description at address offset 0x6a8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set11_frac_3
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET11_FRAC_POST10 : 8;
    ///< set11 fractional ffe post cursor 10 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET11_FRAC_POST11 : 8;
    ///< set11 fractional ffe post cursor 11 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET11_FRAC_POST12 : 8;
    ///< set11 fractional ffe post cursor 12 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET11_FRAC_BANKA_FLOAT1 : 8;
    ///< set11 fractional ffe bankA float 1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set11_frac_3_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_3_WR_MASK (0xffffffffU)


///< set11 fractional ffe post cursor 10 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_3_FFE_COEFF_SET11_FRAC_POST10_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_3_FFE_COEFF_SET11_FRAC_POST10_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_3_FFE_COEFF_SET11_FRAC_POST10_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_3_FFE_COEFF_SET11_FRAC_POST10_BF_DEF (0x00000000)

///< set11 fractional ffe post cursor 11 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_3_FFE_COEFF_SET11_FRAC_POST11_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_3_FFE_COEFF_SET11_FRAC_POST11_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_3_FFE_COEFF_SET11_FRAC_POST11_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_3_FFE_COEFF_SET11_FRAC_POST11_BF_DEF (0x00000000)

///< set11 fractional ffe post cursor 12 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_3_FFE_COEFF_SET11_FRAC_POST12_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_3_FFE_COEFF_SET11_FRAC_POST12_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_3_FFE_COEFF_SET11_FRAC_POST12_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_3_FFE_COEFF_SET11_FRAC_POST12_BF_DEF (0x00000000)

///< set11 fractional ffe bankA float 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_3_FFE_COEFF_SET11_FRAC_BANKA_FLOAT1_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_3_FFE_COEFF_SET11_FRAC_BANKA_FLOAT1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_3_FFE_COEFF_SET11_FRAC_BANKA_FLOAT1_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_3_FFE_COEFF_SET11_FRAC_BANKA_FLOAT1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET11_FRAC_4 register description at address offset 0x6ac
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set11_frac_4
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET11_FRAC_BANKA_FLOAT2 : 8;
    ///< set11 fractional ffe bankA float 2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET11_FRAC_BANKA_FLOAT3 : 8;
    ///< set11 fractional ffe bankA float 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET11_FRAC_BANKB_FLOAT1 : 8;
    ///< set11 fractional ffe bankB float 1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET11_FRAC_BANKB_FLOAT2 : 8;
    ///< set11 fractional ffe bankB float 2 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set11_frac_4_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_4_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_4_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_4_WR_MASK (0xffffffffU)


///< set11 fractional ffe bankA float 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_4_FFE_COEFF_SET11_FRAC_BANKA_FLOAT2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_4_FFE_COEFF_SET11_FRAC_BANKA_FLOAT2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_4_FFE_COEFF_SET11_FRAC_BANKA_FLOAT2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_4_FFE_COEFF_SET11_FRAC_BANKA_FLOAT2_BF_DEF (0x00000000)

///< set11 fractional ffe bankA float 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_4_FFE_COEFF_SET11_FRAC_BANKA_FLOAT3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_4_FFE_COEFF_SET11_FRAC_BANKA_FLOAT3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_4_FFE_COEFF_SET11_FRAC_BANKA_FLOAT3_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_4_FFE_COEFF_SET11_FRAC_BANKA_FLOAT3_BF_DEF (0x00000000)

///< set11 fractional ffe bankB float 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_4_FFE_COEFF_SET11_FRAC_BANKB_FLOAT1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_4_FFE_COEFF_SET11_FRAC_BANKB_FLOAT1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_4_FFE_COEFF_SET11_FRAC_BANKB_FLOAT1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_4_FFE_COEFF_SET11_FRAC_BANKB_FLOAT1_BF_DEF (0x00000000)

///< set11 fractional ffe bankB float 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_4_FFE_COEFF_SET11_FRAC_BANKB_FLOAT2_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_4_FFE_COEFF_SET11_FRAC_BANKB_FLOAT2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_4_FFE_COEFF_SET11_FRAC_BANKB_FLOAT2_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_4_FFE_COEFF_SET11_FRAC_BANKB_FLOAT2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET11_FRAC_5 register description at address offset 0x6b0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set11_frac_5
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET11_FRAC_BANKB_FLOAT3 : 8;
    ///< set11 fractional ffe bankB float 3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET11_FRAC_BANKC_FLOAT1 : 8;
    ///< set11 fractional ffe bankC float 1 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET11_FRAC_BANKC_FLOAT2 : 8;
    ///< set11 fractional ffe bankC float 2 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET11_FRAC_BANKC_FLOAT3 : 8;
    ///< set11 fractional ffe bankC float 3 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set11_frac_5_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_5_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_5_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_5_WR_MASK (0xffffffffU)


///< set11 fractional ffe bankB float 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_5_FFE_COEFF_SET11_FRAC_BANKB_FLOAT3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_5_FFE_COEFF_SET11_FRAC_BANKB_FLOAT3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_5_FFE_COEFF_SET11_FRAC_BANKB_FLOAT3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_5_FFE_COEFF_SET11_FRAC_BANKB_FLOAT3_BF_DEF (0x00000000)

///< set11 fractional ffe bankC float 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_5_FFE_COEFF_SET11_FRAC_BANKC_FLOAT1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_5_FFE_COEFF_SET11_FRAC_BANKC_FLOAT1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_5_FFE_COEFF_SET11_FRAC_BANKC_FLOAT1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_5_FFE_COEFF_SET11_FRAC_BANKC_FLOAT1_BF_DEF (0x00000000)

///< set11 fractional ffe bankC float 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_5_FFE_COEFF_SET11_FRAC_BANKC_FLOAT2_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_5_FFE_COEFF_SET11_FRAC_BANKC_FLOAT2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_5_FFE_COEFF_SET11_FRAC_BANKC_FLOAT2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_5_FFE_COEFF_SET11_FRAC_BANKC_FLOAT2_BF_DEF (0x00000000)

///< set11 fractional ffe bankC float 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_5_FFE_COEFF_SET11_FRAC_BANKC_FLOAT3_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_5_FFE_COEFF_SET11_FRAC_BANKC_FLOAT3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_5_FFE_COEFF_SET11_FRAC_BANKC_FLOAT3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_5_FFE_COEFF_SET11_FRAC_BANKC_FLOAT3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET12_FRAC_0 register description at address offset 0x6b4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set12_frac_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET12_FRAC_PRE3 : 8;
    ///< set12 fractional ffe pre cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET12_FRAC_PRE2 : 8;
    ///< set12 fractional ffe pre cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET12_FRAC_PRE1 : 8;
    ///< set12 fractional ffe pre cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET12_FRAC_POST1 : 8;
    ///< set12 fractional ffe post cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set12_frac_0_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_0_WR_MASK (0xffffffffU)


///< set12 fractional ffe pre cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_0_FFE_COEFF_SET12_FRAC_PRE3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_0_FFE_COEFF_SET12_FRAC_PRE3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_0_FFE_COEFF_SET12_FRAC_PRE3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_0_FFE_COEFF_SET12_FRAC_PRE3_BF_DEF (0x00000000)

///< set12 fractional ffe pre cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_0_FFE_COEFF_SET12_FRAC_PRE2_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_0_FFE_COEFF_SET12_FRAC_PRE2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_0_FFE_COEFF_SET12_FRAC_PRE2_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_0_FFE_COEFF_SET12_FRAC_PRE2_BF_DEF (0x00000000)

///< set12 fractional ffe pre cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_0_FFE_COEFF_SET12_FRAC_PRE1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_0_FFE_COEFF_SET12_FRAC_PRE1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_0_FFE_COEFF_SET12_FRAC_PRE1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_0_FFE_COEFF_SET12_FRAC_PRE1_BF_DEF (0x00000000)

///< set12 fractional ffe post cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_0_FFE_COEFF_SET12_FRAC_POST1_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_0_FFE_COEFF_SET12_FRAC_POST1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_0_FFE_COEFF_SET12_FRAC_POST1_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_0_FFE_COEFF_SET12_FRAC_POST1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET12_FRAC_1 register description at address offset 0x6b8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set12_frac_1
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET12_FRAC_POST2 : 8;
    ///< set12 fractional ffe post cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET12_FRAC_POST3 : 8;
    ///< set12 fractional ffe post cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET12_FRAC_POST4 : 8;
    ///< set12 fractional ffe post cursor 4 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET12_FRAC_POST5 : 8;
    ///< set12 fractional ffe post cursor 5 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set12_frac_1_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_1_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_1_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_1_WR_MASK (0xffffffffU)


///< set12 fractional ffe post cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_1_FFE_COEFF_SET12_FRAC_POST2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_1_FFE_COEFF_SET12_FRAC_POST2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_1_FFE_COEFF_SET12_FRAC_POST2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_1_FFE_COEFF_SET12_FRAC_POST2_BF_DEF (0x00000000)

///< set12 fractional ffe post cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_1_FFE_COEFF_SET12_FRAC_POST3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_1_FFE_COEFF_SET12_FRAC_POST3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_1_FFE_COEFF_SET12_FRAC_POST3_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_1_FFE_COEFF_SET12_FRAC_POST3_BF_DEF (0x00000000)

///< set12 fractional ffe post cursor 4 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_1_FFE_COEFF_SET12_FRAC_POST4_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_1_FFE_COEFF_SET12_FRAC_POST4_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_1_FFE_COEFF_SET12_FRAC_POST4_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_1_FFE_COEFF_SET12_FRAC_POST4_BF_DEF (0x00000000)

///< set12 fractional ffe post cursor 5 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_1_FFE_COEFF_SET12_FRAC_POST5_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_1_FFE_COEFF_SET12_FRAC_POST5_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_1_FFE_COEFF_SET12_FRAC_POST5_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_1_FFE_COEFF_SET12_FRAC_POST5_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET12_FRAC_2 register description at address offset 0x6bc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set12_frac_2
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET12_FRAC_POST6 : 8;
    ///< set12 fractional ffe post cursor 6 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET12_FRAC_POST7 : 8;
    ///< set12 fractional ffe post cursor 7 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET12_FRAC_POST8 : 8;
    ///< set12 fractional ffe post cursor 8 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET12_FRAC_POST9 : 8;
    ///< set12 fractional ffe post cursor 9 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set12_frac_2_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_2_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_2_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_2_WR_MASK (0xffffffffU)


///< set12 fractional ffe post cursor 6 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_2_FFE_COEFF_SET12_FRAC_POST6_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_2_FFE_COEFF_SET12_FRAC_POST6_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_2_FFE_COEFF_SET12_FRAC_POST6_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_2_FFE_COEFF_SET12_FRAC_POST6_BF_DEF (0x00000000)

///< set12 fractional ffe post cursor 7 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_2_FFE_COEFF_SET12_FRAC_POST7_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_2_FFE_COEFF_SET12_FRAC_POST7_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_2_FFE_COEFF_SET12_FRAC_POST7_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_2_FFE_COEFF_SET12_FRAC_POST7_BF_DEF (0x00000000)

///< set12 fractional ffe post cursor 8 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_2_FFE_COEFF_SET12_FRAC_POST8_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_2_FFE_COEFF_SET12_FRAC_POST8_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_2_FFE_COEFF_SET12_FRAC_POST8_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_2_FFE_COEFF_SET12_FRAC_POST8_BF_DEF (0x00000000)

///< set12 fractional ffe post cursor 9 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_2_FFE_COEFF_SET12_FRAC_POST9_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_2_FFE_COEFF_SET12_FRAC_POST9_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_2_FFE_COEFF_SET12_FRAC_POST9_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_2_FFE_COEFF_SET12_FRAC_POST9_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET12_FRAC_3 register description at address offset 0x6c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set12_frac_3
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET12_FRAC_POST10 : 8;
    ///< set12 fractional ffe post cursor 10 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET12_FRAC_POST11 : 8;
    ///< set12 fractional ffe post cursor 11 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET12_FRAC_POST12 : 8;
    ///< set12 fractional ffe post cursor 12 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET12_FRAC_BANKA_FLOAT1 : 8;
    ///< set12 fractional ffe bankA float 1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set12_frac_3_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_3_WR_MASK (0xffffffffU)


///< set12 fractional ffe post cursor 10 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_3_FFE_COEFF_SET12_FRAC_POST10_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_3_FFE_COEFF_SET12_FRAC_POST10_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_3_FFE_COEFF_SET12_FRAC_POST10_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_3_FFE_COEFF_SET12_FRAC_POST10_BF_DEF (0x00000000)

///< set12 fractional ffe post cursor 11 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_3_FFE_COEFF_SET12_FRAC_POST11_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_3_FFE_COEFF_SET12_FRAC_POST11_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_3_FFE_COEFF_SET12_FRAC_POST11_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_3_FFE_COEFF_SET12_FRAC_POST11_BF_DEF (0x00000000)

///< set12 fractional ffe post cursor 12 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_3_FFE_COEFF_SET12_FRAC_POST12_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_3_FFE_COEFF_SET12_FRAC_POST12_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_3_FFE_COEFF_SET12_FRAC_POST12_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_3_FFE_COEFF_SET12_FRAC_POST12_BF_DEF (0x00000000)

///< set12 fractional ffe bankA float 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_3_FFE_COEFF_SET12_FRAC_BANKA_FLOAT1_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_3_FFE_COEFF_SET12_FRAC_BANKA_FLOAT1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_3_FFE_COEFF_SET12_FRAC_BANKA_FLOAT1_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_3_FFE_COEFF_SET12_FRAC_BANKA_FLOAT1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET12_FRAC_4 register description at address offset 0x6c4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set12_frac_4
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET12_FRAC_BANKA_FLOAT2 : 8;
    ///< set12 fractional ffe bankA float 2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET12_FRAC_BANKA_FLOAT3 : 8;
    ///< set12 fractional ffe bankA float 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET12_FRAC_BANKB_FLOAT1 : 8;
    ///< set12 fractional ffe bankB float 1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET12_FRAC_BANKB_FLOAT2 : 8;
    ///< set12 fractional ffe bankB float 2 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set12_frac_4_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_4_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_4_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_4_WR_MASK (0xffffffffU)


///< set12 fractional ffe bankA float 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_4_FFE_COEFF_SET12_FRAC_BANKA_FLOAT2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_4_FFE_COEFF_SET12_FRAC_BANKA_FLOAT2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_4_FFE_COEFF_SET12_FRAC_BANKA_FLOAT2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_4_FFE_COEFF_SET12_FRAC_BANKA_FLOAT2_BF_DEF (0x00000000)

///< set12 fractional ffe bankA float 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_4_FFE_COEFF_SET12_FRAC_BANKA_FLOAT3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_4_FFE_COEFF_SET12_FRAC_BANKA_FLOAT3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_4_FFE_COEFF_SET12_FRAC_BANKA_FLOAT3_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_4_FFE_COEFF_SET12_FRAC_BANKA_FLOAT3_BF_DEF (0x00000000)

///< set12 fractional ffe bankB float 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_4_FFE_COEFF_SET12_FRAC_BANKB_FLOAT1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_4_FFE_COEFF_SET12_FRAC_BANKB_FLOAT1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_4_FFE_COEFF_SET12_FRAC_BANKB_FLOAT1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_4_FFE_COEFF_SET12_FRAC_BANKB_FLOAT1_BF_DEF (0x00000000)

///< set12 fractional ffe bankB float 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_4_FFE_COEFF_SET12_FRAC_BANKB_FLOAT2_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_4_FFE_COEFF_SET12_FRAC_BANKB_FLOAT2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_4_FFE_COEFF_SET12_FRAC_BANKB_FLOAT2_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_4_FFE_COEFF_SET12_FRAC_BANKB_FLOAT2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET12_FRAC_5 register description at address offset 0x6c8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set12_frac_5
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET12_FRAC_BANKB_FLOAT3 : 8;
    ///< set12 fractional ffe bankB float 3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET12_FRAC_BANKC_FLOAT1 : 8;
    ///< set12 fractional ffe bankC float 1 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET12_FRAC_BANKC_FLOAT2 : 8;
    ///< set12 fractional ffe bankC float 2 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET12_FRAC_BANKC_FLOAT3 : 8;
    ///< set12 fractional ffe bankC float 3 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set12_frac_5_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_5_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_5_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_5_WR_MASK (0xffffffffU)


///< set12 fractional ffe bankB float 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_5_FFE_COEFF_SET12_FRAC_BANKB_FLOAT3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_5_FFE_COEFF_SET12_FRAC_BANKB_FLOAT3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_5_FFE_COEFF_SET12_FRAC_BANKB_FLOAT3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_5_FFE_COEFF_SET12_FRAC_BANKB_FLOAT3_BF_DEF (0x00000000)

///< set12 fractional ffe bankC float 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_5_FFE_COEFF_SET12_FRAC_BANKC_FLOAT1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_5_FFE_COEFF_SET12_FRAC_BANKC_FLOAT1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_5_FFE_COEFF_SET12_FRAC_BANKC_FLOAT1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_5_FFE_COEFF_SET12_FRAC_BANKC_FLOAT1_BF_DEF (0x00000000)

///< set12 fractional ffe bankC float 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_5_FFE_COEFF_SET12_FRAC_BANKC_FLOAT2_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_5_FFE_COEFF_SET12_FRAC_BANKC_FLOAT2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_5_FFE_COEFF_SET12_FRAC_BANKC_FLOAT2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_5_FFE_COEFF_SET12_FRAC_BANKC_FLOAT2_BF_DEF (0x00000000)

///< set12 fractional ffe bankC float 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_5_FFE_COEFF_SET12_FRAC_BANKC_FLOAT3_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_5_FFE_COEFF_SET12_FRAC_BANKC_FLOAT3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_5_FFE_COEFF_SET12_FRAC_BANKC_FLOAT3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_5_FFE_COEFF_SET12_FRAC_BANKC_FLOAT3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET13_FRAC_0 register description at address offset 0x6cc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set13_frac_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET13_FRAC_PRE3 : 8;
    ///< set13 fractional ffe pre cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET13_FRAC_PRE2 : 8;
    ///< set13 fractional ffe pre cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET13_FRAC_PRE1 : 8;
    ///< set13 fractional ffe pre cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET13_FRAC_POST1 : 8;
    ///< set13 fractional ffe post cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set13_frac_0_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_0_WR_MASK (0xffffffffU)


///< set13 fractional ffe pre cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_0_FFE_COEFF_SET13_FRAC_PRE3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_0_FFE_COEFF_SET13_FRAC_PRE3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_0_FFE_COEFF_SET13_FRAC_PRE3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_0_FFE_COEFF_SET13_FRAC_PRE3_BF_DEF (0x00000000)

///< set13 fractional ffe pre cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_0_FFE_COEFF_SET13_FRAC_PRE2_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_0_FFE_COEFF_SET13_FRAC_PRE2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_0_FFE_COEFF_SET13_FRAC_PRE2_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_0_FFE_COEFF_SET13_FRAC_PRE2_BF_DEF (0x00000000)

///< set13 fractional ffe pre cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_0_FFE_COEFF_SET13_FRAC_PRE1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_0_FFE_COEFF_SET13_FRAC_PRE1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_0_FFE_COEFF_SET13_FRAC_PRE1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_0_FFE_COEFF_SET13_FRAC_PRE1_BF_DEF (0x00000000)

///< set13 fractional ffe post cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_0_FFE_COEFF_SET13_FRAC_POST1_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_0_FFE_COEFF_SET13_FRAC_POST1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_0_FFE_COEFF_SET13_FRAC_POST1_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_0_FFE_COEFF_SET13_FRAC_POST1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET13_FRAC_1 register description at address offset 0x6d0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set13_frac_1
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET13_FRAC_POST2 : 8;
    ///< set13 fractional ffe post cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET13_FRAC_POST3 : 8;
    ///< set13 fractional ffe post cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET13_FRAC_POST4 : 8;
    ///< set13 fractional ffe post cursor 4 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET13_FRAC_POST5 : 8;
    ///< set13 fractional ffe post cursor 5 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set13_frac_1_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_1_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_1_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_1_WR_MASK (0xffffffffU)


///< set13 fractional ffe post cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_1_FFE_COEFF_SET13_FRAC_POST2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_1_FFE_COEFF_SET13_FRAC_POST2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_1_FFE_COEFF_SET13_FRAC_POST2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_1_FFE_COEFF_SET13_FRAC_POST2_BF_DEF (0x00000000)

///< set13 fractional ffe post cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_1_FFE_COEFF_SET13_FRAC_POST3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_1_FFE_COEFF_SET13_FRAC_POST3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_1_FFE_COEFF_SET13_FRAC_POST3_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_1_FFE_COEFF_SET13_FRAC_POST3_BF_DEF (0x00000000)

///< set13 fractional ffe post cursor 4 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_1_FFE_COEFF_SET13_FRAC_POST4_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_1_FFE_COEFF_SET13_FRAC_POST4_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_1_FFE_COEFF_SET13_FRAC_POST4_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_1_FFE_COEFF_SET13_FRAC_POST4_BF_DEF (0x00000000)

///< set13 fractional ffe post cursor 5 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_1_FFE_COEFF_SET13_FRAC_POST5_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_1_FFE_COEFF_SET13_FRAC_POST5_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_1_FFE_COEFF_SET13_FRAC_POST5_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_1_FFE_COEFF_SET13_FRAC_POST5_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET13_FRAC_2 register description at address offset 0x6d4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set13_frac_2
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET13_FRAC_POST6 : 8;
    ///< set13 fractional ffe post cursor 6 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET13_FRAC_POST7 : 8;
    ///< set13 fractional ffe post cursor 7 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET13_FRAC_POST8 : 8;
    ///< set13 fractional ffe post cursor 8 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET13_FRAC_POST9 : 8;
    ///< set13 fractional ffe post cursor 9 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set13_frac_2_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_2_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_2_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_2_WR_MASK (0xffffffffU)


///< set13 fractional ffe post cursor 6 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_2_FFE_COEFF_SET13_FRAC_POST6_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_2_FFE_COEFF_SET13_FRAC_POST6_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_2_FFE_COEFF_SET13_FRAC_POST6_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_2_FFE_COEFF_SET13_FRAC_POST6_BF_DEF (0x00000000)

///< set13 fractional ffe post cursor 7 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_2_FFE_COEFF_SET13_FRAC_POST7_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_2_FFE_COEFF_SET13_FRAC_POST7_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_2_FFE_COEFF_SET13_FRAC_POST7_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_2_FFE_COEFF_SET13_FRAC_POST7_BF_DEF (0x00000000)

///< set13 fractional ffe post cursor 8 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_2_FFE_COEFF_SET13_FRAC_POST8_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_2_FFE_COEFF_SET13_FRAC_POST8_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_2_FFE_COEFF_SET13_FRAC_POST8_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_2_FFE_COEFF_SET13_FRAC_POST8_BF_DEF (0x00000000)

///< set13 fractional ffe post cursor 9 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_2_FFE_COEFF_SET13_FRAC_POST9_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_2_FFE_COEFF_SET13_FRAC_POST9_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_2_FFE_COEFF_SET13_FRAC_POST9_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_2_FFE_COEFF_SET13_FRAC_POST9_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET13_FRAC_3 register description at address offset 0x6d8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set13_frac_3
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET13_FRAC_POST10 : 8;
    ///< set13 fractional ffe post cursor 10 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET13_FRAC_POST11 : 8;
    ///< set13 fractional ffe post cursor 11 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET13_FRAC_POST12 : 8;
    ///< set13 fractional ffe post cursor 12 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET13_FRAC_BANKA_FLOAT1 : 8;
    ///< set13 fractional ffe bankA float 1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set13_frac_3_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_3_WR_MASK (0xffffffffU)


///< set13 fractional ffe post cursor 10 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_3_FFE_COEFF_SET13_FRAC_POST10_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_3_FFE_COEFF_SET13_FRAC_POST10_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_3_FFE_COEFF_SET13_FRAC_POST10_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_3_FFE_COEFF_SET13_FRAC_POST10_BF_DEF (0x00000000)

///< set13 fractional ffe post cursor 11 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_3_FFE_COEFF_SET13_FRAC_POST11_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_3_FFE_COEFF_SET13_FRAC_POST11_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_3_FFE_COEFF_SET13_FRAC_POST11_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_3_FFE_COEFF_SET13_FRAC_POST11_BF_DEF (0x00000000)

///< set13 fractional ffe post cursor 12 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_3_FFE_COEFF_SET13_FRAC_POST12_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_3_FFE_COEFF_SET13_FRAC_POST12_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_3_FFE_COEFF_SET13_FRAC_POST12_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_3_FFE_COEFF_SET13_FRAC_POST12_BF_DEF (0x00000000)

///< set13 fractional ffe bankA float 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_3_FFE_COEFF_SET13_FRAC_BANKA_FLOAT1_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_3_FFE_COEFF_SET13_FRAC_BANKA_FLOAT1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_3_FFE_COEFF_SET13_FRAC_BANKA_FLOAT1_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_3_FFE_COEFF_SET13_FRAC_BANKA_FLOAT1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET13_FRAC_4 register description at address offset 0x6dc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set13_frac_4
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET13_FRAC_BANKA_FLOAT2 : 8;
    ///< set13 fractional ffe bankA float 2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET13_FRAC_BANKA_FLOAT3 : 8;
    ///< set13 fractional ffe bankA float 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET13_FRAC_BANKB_FLOAT1 : 8;
    ///< set13 fractional ffe bankB float 1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET13_FRAC_BANKB_FLOAT2 : 8;
    ///< set13 fractional ffe bankB float 2 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set13_frac_4_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_4_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_4_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_4_WR_MASK (0xffffffffU)


///< set13 fractional ffe bankA float 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_4_FFE_COEFF_SET13_FRAC_BANKA_FLOAT2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_4_FFE_COEFF_SET13_FRAC_BANKA_FLOAT2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_4_FFE_COEFF_SET13_FRAC_BANKA_FLOAT2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_4_FFE_COEFF_SET13_FRAC_BANKA_FLOAT2_BF_DEF (0x00000000)

///< set13 fractional ffe bankA float 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_4_FFE_COEFF_SET13_FRAC_BANKA_FLOAT3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_4_FFE_COEFF_SET13_FRAC_BANKA_FLOAT3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_4_FFE_COEFF_SET13_FRAC_BANKA_FLOAT3_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_4_FFE_COEFF_SET13_FRAC_BANKA_FLOAT3_BF_DEF (0x00000000)

///< set13 fractional ffe bankB float 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_4_FFE_COEFF_SET13_FRAC_BANKB_FLOAT1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_4_FFE_COEFF_SET13_FRAC_BANKB_FLOAT1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_4_FFE_COEFF_SET13_FRAC_BANKB_FLOAT1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_4_FFE_COEFF_SET13_FRAC_BANKB_FLOAT1_BF_DEF (0x00000000)

///< set13 fractional ffe bankB float 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_4_FFE_COEFF_SET13_FRAC_BANKB_FLOAT2_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_4_FFE_COEFF_SET13_FRAC_BANKB_FLOAT2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_4_FFE_COEFF_SET13_FRAC_BANKB_FLOAT2_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_4_FFE_COEFF_SET13_FRAC_BANKB_FLOAT2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET13_FRAC_5 register description at address offset 0x6e0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set13_frac_5
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET13_FRAC_BANKB_FLOAT3 : 8;
    ///< set13 fractional ffe bankB float 3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET13_FRAC_BANKC_FLOAT1 : 8;
    ///< set13 fractional ffe bankC float 1 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET13_FRAC_BANKC_FLOAT2 : 8;
    ///< set13 fractional ffe bankC float 2 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET13_FRAC_BANKC_FLOAT3 : 8;
    ///< set13 fractional ffe bankC float 3 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set13_frac_5_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_5_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_5_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_5_WR_MASK (0xffffffffU)


///< set13 fractional ffe bankB float 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_5_FFE_COEFF_SET13_FRAC_BANKB_FLOAT3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_5_FFE_COEFF_SET13_FRAC_BANKB_FLOAT3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_5_FFE_COEFF_SET13_FRAC_BANKB_FLOAT3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_5_FFE_COEFF_SET13_FRAC_BANKB_FLOAT3_BF_DEF (0x00000000)

///< set13 fractional ffe bankC float 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_5_FFE_COEFF_SET13_FRAC_BANKC_FLOAT1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_5_FFE_COEFF_SET13_FRAC_BANKC_FLOAT1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_5_FFE_COEFF_SET13_FRAC_BANKC_FLOAT1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_5_FFE_COEFF_SET13_FRAC_BANKC_FLOAT1_BF_DEF (0x00000000)

///< set13 fractional ffe bankC float 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_5_FFE_COEFF_SET13_FRAC_BANKC_FLOAT2_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_5_FFE_COEFF_SET13_FRAC_BANKC_FLOAT2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_5_FFE_COEFF_SET13_FRAC_BANKC_FLOAT2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_5_FFE_COEFF_SET13_FRAC_BANKC_FLOAT2_BF_DEF (0x00000000)

///< set13 fractional ffe bankC float 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_5_FFE_COEFF_SET13_FRAC_BANKC_FLOAT3_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_5_FFE_COEFF_SET13_FRAC_BANKC_FLOAT3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_5_FFE_COEFF_SET13_FRAC_BANKC_FLOAT3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_5_FFE_COEFF_SET13_FRAC_BANKC_FLOAT3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET14_FRAC_0 register description at address offset 0x6e4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set14_frac_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET14_FRAC_PRE3 : 8;
    ///< set14 fractional ffe pre cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET14_FRAC_PRE2 : 8;
    ///< set14 fractional ffe pre cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET14_FRAC_PRE1 : 8;
    ///< set14 fractional ffe pre cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET14_FRAC_POST1 : 8;
    ///< set14 fractional ffe post cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set14_frac_0_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_0_WR_MASK (0xffffffffU)


///< set14 fractional ffe pre cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_0_FFE_COEFF_SET14_FRAC_PRE3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_0_FFE_COEFF_SET14_FRAC_PRE3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_0_FFE_COEFF_SET14_FRAC_PRE3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_0_FFE_COEFF_SET14_FRAC_PRE3_BF_DEF (0x00000000)

///< set14 fractional ffe pre cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_0_FFE_COEFF_SET14_FRAC_PRE2_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_0_FFE_COEFF_SET14_FRAC_PRE2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_0_FFE_COEFF_SET14_FRAC_PRE2_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_0_FFE_COEFF_SET14_FRAC_PRE2_BF_DEF (0x00000000)

///< set14 fractional ffe pre cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_0_FFE_COEFF_SET14_FRAC_PRE1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_0_FFE_COEFF_SET14_FRAC_PRE1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_0_FFE_COEFF_SET14_FRAC_PRE1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_0_FFE_COEFF_SET14_FRAC_PRE1_BF_DEF (0x00000000)

///< set14 fractional ffe post cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_0_FFE_COEFF_SET14_FRAC_POST1_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_0_FFE_COEFF_SET14_FRAC_POST1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_0_FFE_COEFF_SET14_FRAC_POST1_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_0_FFE_COEFF_SET14_FRAC_POST1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET14_FRAC_1 register description at address offset 0x6e8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set14_frac_1
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET14_FRAC_POST2 : 8;
    ///< set14 fractional ffe post cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET14_FRAC_POST3 : 8;
    ///< set14 fractional ffe post cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET14_FRAC_POST4 : 8;
    ///< set14 fractional ffe post cursor 4 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET14_FRAC_POST5 : 8;
    ///< set14 fractional ffe post cursor 5 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set14_frac_1_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_1_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_1_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_1_WR_MASK (0xffffffffU)


///< set14 fractional ffe post cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_1_FFE_COEFF_SET14_FRAC_POST2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_1_FFE_COEFF_SET14_FRAC_POST2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_1_FFE_COEFF_SET14_FRAC_POST2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_1_FFE_COEFF_SET14_FRAC_POST2_BF_DEF (0x00000000)

///< set14 fractional ffe post cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_1_FFE_COEFF_SET14_FRAC_POST3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_1_FFE_COEFF_SET14_FRAC_POST3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_1_FFE_COEFF_SET14_FRAC_POST3_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_1_FFE_COEFF_SET14_FRAC_POST3_BF_DEF (0x00000000)

///< set14 fractional ffe post cursor 4 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_1_FFE_COEFF_SET14_FRAC_POST4_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_1_FFE_COEFF_SET14_FRAC_POST4_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_1_FFE_COEFF_SET14_FRAC_POST4_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_1_FFE_COEFF_SET14_FRAC_POST4_BF_DEF (0x00000000)

///< set14 fractional ffe post cursor 5 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_1_FFE_COEFF_SET14_FRAC_POST5_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_1_FFE_COEFF_SET14_FRAC_POST5_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_1_FFE_COEFF_SET14_FRAC_POST5_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_1_FFE_COEFF_SET14_FRAC_POST5_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET14_FRAC_2 register description at address offset 0x6ec
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set14_frac_2
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET14_FRAC_POST6 : 8;
    ///< set14 fractional ffe post cursor 6 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET14_FRAC_POST7 : 8;
    ///< set14 fractional ffe post cursor 7 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET14_FRAC_POST8 : 8;
    ///< set14 fractional ffe post cursor 8 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET14_FRAC_POST9 : 8;
    ///< set14 fractional ffe post cursor 9 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set14_frac_2_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_2_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_2_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_2_WR_MASK (0xffffffffU)


///< set14 fractional ffe post cursor 6 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_2_FFE_COEFF_SET14_FRAC_POST6_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_2_FFE_COEFF_SET14_FRAC_POST6_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_2_FFE_COEFF_SET14_FRAC_POST6_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_2_FFE_COEFF_SET14_FRAC_POST6_BF_DEF (0x00000000)

///< set14 fractional ffe post cursor 7 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_2_FFE_COEFF_SET14_FRAC_POST7_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_2_FFE_COEFF_SET14_FRAC_POST7_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_2_FFE_COEFF_SET14_FRAC_POST7_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_2_FFE_COEFF_SET14_FRAC_POST7_BF_DEF (0x00000000)

///< set14 fractional ffe post cursor 8 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_2_FFE_COEFF_SET14_FRAC_POST8_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_2_FFE_COEFF_SET14_FRAC_POST8_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_2_FFE_COEFF_SET14_FRAC_POST8_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_2_FFE_COEFF_SET14_FRAC_POST8_BF_DEF (0x00000000)

///< set14 fractional ffe post cursor 9 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_2_FFE_COEFF_SET14_FRAC_POST9_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_2_FFE_COEFF_SET14_FRAC_POST9_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_2_FFE_COEFF_SET14_FRAC_POST9_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_2_FFE_COEFF_SET14_FRAC_POST9_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET14_FRAC_3 register description at address offset 0x6f0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set14_frac_3
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET14_FRAC_POST10 : 8;
    ///< set14 fractional ffe post cursor 10 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET14_FRAC_POST11 : 8;
    ///< set14 fractional ffe post cursor 11 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET14_FRAC_POST12 : 8;
    ///< set14 fractional ffe post cursor 12 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET14_FRAC_BANKA_FLOAT1 : 8;
    ///< set14 fractional ffe bankA float 1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set14_frac_3_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_3_WR_MASK (0xffffffffU)


///< set14 fractional ffe post cursor 10 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_3_FFE_COEFF_SET14_FRAC_POST10_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_3_FFE_COEFF_SET14_FRAC_POST10_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_3_FFE_COEFF_SET14_FRAC_POST10_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_3_FFE_COEFF_SET14_FRAC_POST10_BF_DEF (0x00000000)

///< set14 fractional ffe post cursor 11 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_3_FFE_COEFF_SET14_FRAC_POST11_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_3_FFE_COEFF_SET14_FRAC_POST11_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_3_FFE_COEFF_SET14_FRAC_POST11_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_3_FFE_COEFF_SET14_FRAC_POST11_BF_DEF (0x00000000)

///< set14 fractional ffe post cursor 12 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_3_FFE_COEFF_SET14_FRAC_POST12_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_3_FFE_COEFF_SET14_FRAC_POST12_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_3_FFE_COEFF_SET14_FRAC_POST12_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_3_FFE_COEFF_SET14_FRAC_POST12_BF_DEF (0x00000000)

///< set14 fractional ffe bankA float 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_3_FFE_COEFF_SET14_FRAC_BANKA_FLOAT1_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_3_FFE_COEFF_SET14_FRAC_BANKA_FLOAT1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_3_FFE_COEFF_SET14_FRAC_BANKA_FLOAT1_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_3_FFE_COEFF_SET14_FRAC_BANKA_FLOAT1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET14_FRAC_4 register description at address offset 0x6f4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set14_frac_4
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET14_FRAC_BANKA_FLOAT2 : 8;
    ///< set14 fractional ffe bankA float 2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET14_FRAC_BANKA_FLOAT3 : 8;
    ///< set14 fractional ffe bankA float 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET14_FRAC_BANKB_FLOAT1 : 8;
    ///< set14 fractional ffe bankB float 1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET14_FRAC_BANKB_FLOAT2 : 8;
    ///< set14 fractional ffe bankB float 2 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set14_frac_4_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_4_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_4_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_4_WR_MASK (0xffffffffU)


///< set14 fractional ffe bankA float 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_4_FFE_COEFF_SET14_FRAC_BANKA_FLOAT2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_4_FFE_COEFF_SET14_FRAC_BANKA_FLOAT2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_4_FFE_COEFF_SET14_FRAC_BANKA_FLOAT2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_4_FFE_COEFF_SET14_FRAC_BANKA_FLOAT2_BF_DEF (0x00000000)

///< set14 fractional ffe bankA float 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_4_FFE_COEFF_SET14_FRAC_BANKA_FLOAT3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_4_FFE_COEFF_SET14_FRAC_BANKA_FLOAT3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_4_FFE_COEFF_SET14_FRAC_BANKA_FLOAT3_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_4_FFE_COEFF_SET14_FRAC_BANKA_FLOAT3_BF_DEF (0x00000000)

///< set14 fractional ffe bankB float 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_4_FFE_COEFF_SET14_FRAC_BANKB_FLOAT1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_4_FFE_COEFF_SET14_FRAC_BANKB_FLOAT1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_4_FFE_COEFF_SET14_FRAC_BANKB_FLOAT1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_4_FFE_COEFF_SET14_FRAC_BANKB_FLOAT1_BF_DEF (0x00000000)

///< set14 fractional ffe bankB float 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_4_FFE_COEFF_SET14_FRAC_BANKB_FLOAT2_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_4_FFE_COEFF_SET14_FRAC_BANKB_FLOAT2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_4_FFE_COEFF_SET14_FRAC_BANKB_FLOAT2_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_4_FFE_COEFF_SET14_FRAC_BANKB_FLOAT2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET14_FRAC_5 register description at address offset 0x6f8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set14_frac_5
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET14_FRAC_BANKB_FLOAT3 : 8;
    ///< set14 fractional ffe bankB float 3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET14_FRAC_BANKC_FLOAT1 : 8;
    ///< set14 fractional ffe bankC float 1 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET14_FRAC_BANKC_FLOAT2 : 8;
    ///< set14 fractional ffe bankC float 2 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET14_FRAC_BANKC_FLOAT3 : 8;
    ///< set14 fractional ffe bankC float 3 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set14_frac_5_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_5_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_5_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_5_WR_MASK (0xffffffffU)


///< set14 fractional ffe bankB float 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_5_FFE_COEFF_SET14_FRAC_BANKB_FLOAT3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_5_FFE_COEFF_SET14_FRAC_BANKB_FLOAT3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_5_FFE_COEFF_SET14_FRAC_BANKB_FLOAT3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_5_FFE_COEFF_SET14_FRAC_BANKB_FLOAT3_BF_DEF (0x00000000)

///< set14 fractional ffe bankC float 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_5_FFE_COEFF_SET14_FRAC_BANKC_FLOAT1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_5_FFE_COEFF_SET14_FRAC_BANKC_FLOAT1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_5_FFE_COEFF_SET14_FRAC_BANKC_FLOAT1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_5_FFE_COEFF_SET14_FRAC_BANKC_FLOAT1_BF_DEF (0x00000000)

///< set14 fractional ffe bankC float 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_5_FFE_COEFF_SET14_FRAC_BANKC_FLOAT2_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_5_FFE_COEFF_SET14_FRAC_BANKC_FLOAT2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_5_FFE_COEFF_SET14_FRAC_BANKC_FLOAT2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_5_FFE_COEFF_SET14_FRAC_BANKC_FLOAT2_BF_DEF (0x00000000)

///< set14 fractional ffe bankC float 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_5_FFE_COEFF_SET14_FRAC_BANKC_FLOAT3_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_5_FFE_COEFF_SET14_FRAC_BANKC_FLOAT3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_5_FFE_COEFF_SET14_FRAC_BANKC_FLOAT3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_5_FFE_COEFF_SET14_FRAC_BANKC_FLOAT3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET15_FRAC_0 register description at address offset 0x6fc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set15_frac_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET15_FRAC_PRE3 : 8;
    ///< set15 fractional ffe pre cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET15_FRAC_PRE2 : 8;
    ///< set15 fractional ffe pre cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET15_FRAC_PRE1 : 8;
    ///< set15 fractional ffe pre cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET15_FRAC_POST1 : 8;
    ///< set15 fractional ffe post cursor 1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set15_frac_0_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_0_WR_MASK (0xffffffffU)


///< set15 fractional ffe pre cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_0_FFE_COEFF_SET15_FRAC_PRE3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_0_FFE_COEFF_SET15_FRAC_PRE3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_0_FFE_COEFF_SET15_FRAC_PRE3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_0_FFE_COEFF_SET15_FRAC_PRE3_BF_DEF (0x00000000)

///< set15 fractional ffe pre cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_0_FFE_COEFF_SET15_FRAC_PRE2_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_0_FFE_COEFF_SET15_FRAC_PRE2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_0_FFE_COEFF_SET15_FRAC_PRE2_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_0_FFE_COEFF_SET15_FRAC_PRE2_BF_DEF (0x00000000)

///< set15 fractional ffe pre cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_0_FFE_COEFF_SET15_FRAC_PRE1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_0_FFE_COEFF_SET15_FRAC_PRE1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_0_FFE_COEFF_SET15_FRAC_PRE1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_0_FFE_COEFF_SET15_FRAC_PRE1_BF_DEF (0x00000000)

///< set15 fractional ffe post cursor 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_0_FFE_COEFF_SET15_FRAC_POST1_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_0_FFE_COEFF_SET15_FRAC_POST1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_0_FFE_COEFF_SET15_FRAC_POST1_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_0_FFE_COEFF_SET15_FRAC_POST1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET15_FRAC_1 register description at address offset 0x700
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set15_frac_1
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET15_FRAC_POST2 : 8;
    ///< set15 fractional ffe post cursor 2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET15_FRAC_POST3 : 8;
    ///< set15 fractional ffe post cursor 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET15_FRAC_POST4 : 8;
    ///< set15 fractional ffe post cursor 4 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET15_FRAC_POST5 : 8;
    ///< set15 fractional ffe post cursor 5 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set15_frac_1_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_1_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_1_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_1_WR_MASK (0xffffffffU)


///< set15 fractional ffe post cursor 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_1_FFE_COEFF_SET15_FRAC_POST2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_1_FFE_COEFF_SET15_FRAC_POST2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_1_FFE_COEFF_SET15_FRAC_POST2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_1_FFE_COEFF_SET15_FRAC_POST2_BF_DEF (0x00000000)

///< set15 fractional ffe post cursor 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_1_FFE_COEFF_SET15_FRAC_POST3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_1_FFE_COEFF_SET15_FRAC_POST3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_1_FFE_COEFF_SET15_FRAC_POST3_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_1_FFE_COEFF_SET15_FRAC_POST3_BF_DEF (0x00000000)

///< set15 fractional ffe post cursor 4 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_1_FFE_COEFF_SET15_FRAC_POST4_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_1_FFE_COEFF_SET15_FRAC_POST4_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_1_FFE_COEFF_SET15_FRAC_POST4_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_1_FFE_COEFF_SET15_FRAC_POST4_BF_DEF (0x00000000)

///< set15 fractional ffe post cursor 5 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_1_FFE_COEFF_SET15_FRAC_POST5_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_1_FFE_COEFF_SET15_FRAC_POST5_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_1_FFE_COEFF_SET15_FRAC_POST5_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_1_FFE_COEFF_SET15_FRAC_POST5_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET15_FRAC_2 register description at address offset 0x704
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set15_frac_2
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET15_FRAC_POST6 : 8;
    ///< set15 fractional ffe post cursor 6 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET15_FRAC_POST7 : 8;
    ///< set15 fractional ffe post cursor 7 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET15_FRAC_POST8 : 8;
    ///< set15 fractional ffe post cursor 8 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET15_FRAC_POST9 : 8;
    ///< set15 fractional ffe post cursor 9 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set15_frac_2_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_2_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_2_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_2_WR_MASK (0xffffffffU)


///< set15 fractional ffe post cursor 6 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_2_FFE_COEFF_SET15_FRAC_POST6_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_2_FFE_COEFF_SET15_FRAC_POST6_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_2_FFE_COEFF_SET15_FRAC_POST6_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_2_FFE_COEFF_SET15_FRAC_POST6_BF_DEF (0x00000000)

///< set15 fractional ffe post cursor 7 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_2_FFE_COEFF_SET15_FRAC_POST7_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_2_FFE_COEFF_SET15_FRAC_POST7_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_2_FFE_COEFF_SET15_FRAC_POST7_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_2_FFE_COEFF_SET15_FRAC_POST7_BF_DEF (0x00000000)

///< set15 fractional ffe post cursor 8 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_2_FFE_COEFF_SET15_FRAC_POST8_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_2_FFE_COEFF_SET15_FRAC_POST8_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_2_FFE_COEFF_SET15_FRAC_POST8_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_2_FFE_COEFF_SET15_FRAC_POST8_BF_DEF (0x00000000)

///< set15 fractional ffe post cursor 9 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_2_FFE_COEFF_SET15_FRAC_POST9_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_2_FFE_COEFF_SET15_FRAC_POST9_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_2_FFE_COEFF_SET15_FRAC_POST9_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_2_FFE_COEFF_SET15_FRAC_POST9_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET15_FRAC_3 register description at address offset 0x708
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set15_frac_3
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET15_FRAC_POST10 : 8;
    ///< set15 fractional ffe post cursor 10 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET15_FRAC_POST11 : 8;
    ///< set15 fractional ffe post cursor 11 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET15_FRAC_POST12 : 8;
    ///< set15 fractional ffe post cursor 12 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET15_FRAC_BANKA_FLOAT1 : 8;
    ///< set15 fractional ffe bankA float 1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set15_frac_3_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_3_WR_MASK (0xffffffffU)


///< set15 fractional ffe post cursor 10 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_3_FFE_COEFF_SET15_FRAC_POST10_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_3_FFE_COEFF_SET15_FRAC_POST10_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_3_FFE_COEFF_SET15_FRAC_POST10_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_3_FFE_COEFF_SET15_FRAC_POST10_BF_DEF (0x00000000)

///< set15 fractional ffe post cursor 11 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_3_FFE_COEFF_SET15_FRAC_POST11_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_3_FFE_COEFF_SET15_FRAC_POST11_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_3_FFE_COEFF_SET15_FRAC_POST11_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_3_FFE_COEFF_SET15_FRAC_POST11_BF_DEF (0x00000000)

///< set15 fractional ffe post cursor 12 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_3_FFE_COEFF_SET15_FRAC_POST12_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_3_FFE_COEFF_SET15_FRAC_POST12_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_3_FFE_COEFF_SET15_FRAC_POST12_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_3_FFE_COEFF_SET15_FRAC_POST12_BF_DEF (0x00000000)

///< set15 fractional ffe bankA float 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_3_FFE_COEFF_SET15_FRAC_BANKA_FLOAT1_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_3_FFE_COEFF_SET15_FRAC_BANKA_FLOAT1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_3_FFE_COEFF_SET15_FRAC_BANKA_FLOAT1_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_3_FFE_COEFF_SET15_FRAC_BANKA_FLOAT1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET15_FRAC_4 register description at address offset 0x70c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set15_frac_4
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET15_FRAC_BANKA_FLOAT2 : 8;
    ///< set15 fractional ffe bankA float 2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET15_FRAC_BANKA_FLOAT3 : 8;
    ///< set15 fractional ffe bankA float 3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET15_FRAC_BANKB_FLOAT1 : 8;
    ///< set15 fractional ffe bankB float 1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET15_FRAC_BANKB_FLOAT2 : 8;
    ///< set15 fractional ffe bankB float 2 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set15_frac_4_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_4_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_4_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_4_WR_MASK (0xffffffffU)


///< set15 fractional ffe bankA float 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_4_FFE_COEFF_SET15_FRAC_BANKA_FLOAT2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_4_FFE_COEFF_SET15_FRAC_BANKA_FLOAT2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_4_FFE_COEFF_SET15_FRAC_BANKA_FLOAT2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_4_FFE_COEFF_SET15_FRAC_BANKA_FLOAT2_BF_DEF (0x00000000)

///< set15 fractional ffe bankA float 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_4_FFE_COEFF_SET15_FRAC_BANKA_FLOAT3_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_4_FFE_COEFF_SET15_FRAC_BANKA_FLOAT3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_4_FFE_COEFF_SET15_FRAC_BANKA_FLOAT3_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_4_FFE_COEFF_SET15_FRAC_BANKA_FLOAT3_BF_DEF (0x00000000)

///< set15 fractional ffe bankB float 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_4_FFE_COEFF_SET15_FRAC_BANKB_FLOAT1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_4_FFE_COEFF_SET15_FRAC_BANKB_FLOAT1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_4_FFE_COEFF_SET15_FRAC_BANKB_FLOAT1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_4_FFE_COEFF_SET15_FRAC_BANKB_FLOAT1_BF_DEF (0x00000000)

///< set15 fractional ffe bankB float 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_4_FFE_COEFF_SET15_FRAC_BANKB_FLOAT2_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_4_FFE_COEFF_SET15_FRAC_BANKB_FLOAT2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_4_FFE_COEFF_SET15_FRAC_BANKB_FLOAT2_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_4_FFE_COEFF_SET15_FRAC_BANKB_FLOAT2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_COEFF_SET15_FRAC_5 register description at address offset 0x710
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_coeff_set15_frac_5
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_COEFF_SET15_FRAC_BANKB_FLOAT3 : 8;
    ///< set15 fractional ffe bankB float 3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_COEFF_SET15_FRAC_BANKC_FLOAT1 : 8;
    ///< set15 fractional ffe bankC float 1 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_COEFF_SET15_FRAC_BANKC_FLOAT2 : 8;
    ///< set15 fractional ffe bankC float 2 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_COEFF_SET15_FRAC_BANKC_FLOAT3 : 8;
    ///< set15 fractional ffe bankC float 3 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_coeff_set15_frac_5_reg_t;

#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_5_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_5_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_5_WR_MASK (0xffffffffU)


///< set15 fractional ffe bankB float 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_5_FFE_COEFF_SET15_FRAC_BANKB_FLOAT3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_5_FFE_COEFF_SET15_FRAC_BANKB_FLOAT3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_5_FFE_COEFF_SET15_FRAC_BANKB_FLOAT3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_5_FFE_COEFF_SET15_FRAC_BANKB_FLOAT3_BF_DEF (0x00000000)

///< set15 fractional ffe bankC float 1 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_5_FFE_COEFF_SET15_FRAC_BANKC_FLOAT1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_5_FFE_COEFF_SET15_FRAC_BANKC_FLOAT1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_5_FFE_COEFF_SET15_FRAC_BANKC_FLOAT1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_5_FFE_COEFF_SET15_FRAC_BANKC_FLOAT1_BF_DEF (0x00000000)

///< set15 fractional ffe bankC float 2 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_5_FFE_COEFF_SET15_FRAC_BANKC_FLOAT2_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_5_FFE_COEFF_SET15_FRAC_BANKC_FLOAT2_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_5_FFE_COEFF_SET15_FRAC_BANKC_FLOAT2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_5_FFE_COEFF_SET15_FRAC_BANKC_FLOAT2_BF_DEF (0x00000000)

///< set15 fractional ffe bankC float 3 coeff
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_5_FFE_COEFF_SET15_FRAC_BANKC_FLOAT3_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_5_FFE_COEFF_SET15_FRAC_BANKC_FLOAT3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_5_FFE_COEFF_SET15_FRAC_BANKC_FLOAT3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_5_FFE_COEFF_SET15_FRAC_BANKC_FLOAT3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_ERR_LEVEL_FRAC_SET0_0 register description at address offset 0x714
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_err_level_frac_set0_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_ERR_LEVEL_FRAC_SET0_M3 : 8;
    ///< FFE VREF set0 level m3 fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_ERR_LEVEL_FRAC_SET0_M1 : 8;
    ///< FFE VREF set0 level m1 fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_ERR_LEVEL_FRAC_SET0_P1 : 8;
    ///< FFE VREF set0 level p1 fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_ERR_LEVEL_FRAC_SET0_P3 : 8;
    ///< FFE VREF set0 level p3 fractional part
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_err_lvl_frac_set0_0_reg_t;

#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET0_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET0_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET0_0_WR_MASK (0xffffffffU)


///< FFE VREF set0 level m3 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET0_0_FFE_ERR_LVL_FRAC_SET0_M3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET0_0_FFE_ERR_LVL_FRAC_SET0_M3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET0_0_FFE_ERR_LVL_FRAC_SET0_M3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET0_0_FFE_ERR_LVL_FRAC_SET0_M3_BF_DEF (0x00000000)

///< FFE VREF set0 level m1 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET0_0_FFE_ERR_LVL_FRAC_SET0_M1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET0_0_FFE_ERR_LVL_FRAC_SET0_M1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET0_0_FFE_ERR_LVL_FRAC_SET0_M1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET0_0_FFE_ERR_LVL_FRAC_SET0_M1_BF_DEF (0x00000000)

///< FFE VREF set0 level p1 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET0_0_FFE_ERR_LVL_FRAC_SET0_P1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET0_0_FFE_ERR_LVL_FRAC_SET0_P1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET0_0_FFE_ERR_LVL_FRAC_SET0_P1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET0_0_FFE_ERR_LVL_FRAC_SET0_P1_BF_DEF (0x00000000)

///< FFE VREF set0 level p3 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET0_0_FFE_ERR_LVL_FRAC_SET0_P3_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET0_0_FFE_ERR_LVL_FRAC_SET0_P3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET0_0_FFE_ERR_LVL_FRAC_SET0_P3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET0_0_FFE_ERR_LVL_FRAC_SET0_P3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_ERR_LEVEL_FRAC_SET1_0 register description at address offset 0x718
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_err_level_frac_set1_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_ERR_LEVEL_FRAC_SET1_M3 : 8;
    ///< FFE VREF set1 level m3 fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_ERR_LEVEL_FRAC_SET1_M1 : 8;
    ///< FFE VREF set1 level m1 fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_ERR_LEVEL_FRAC_SET1_P1 : 8;
    ///< FFE VREF set1 level p1 fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_ERR_LEVEL_FRAC_SET1_P3 : 8;
    ///< FFE VREF set1 level p3 fractional part
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_err_lvl_frac_set1_0_reg_t;

#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET1_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET1_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET1_0_WR_MASK (0xffffffffU)


///< FFE VREF set1 level m3 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET1_0_FFE_ERR_LVL_FRAC_SET1_M3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET1_0_FFE_ERR_LVL_FRAC_SET1_M3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET1_0_FFE_ERR_LVL_FRAC_SET1_M3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET1_0_FFE_ERR_LVL_FRAC_SET1_M3_BF_DEF (0x00000000)

///< FFE VREF set1 level m1 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET1_0_FFE_ERR_LVL_FRAC_SET1_M1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET1_0_FFE_ERR_LVL_FRAC_SET1_M1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET1_0_FFE_ERR_LVL_FRAC_SET1_M1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET1_0_FFE_ERR_LVL_FRAC_SET1_M1_BF_DEF (0x00000000)

///< FFE VREF set1 level p1 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET1_0_FFE_ERR_LVL_FRAC_SET1_P1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET1_0_FFE_ERR_LVL_FRAC_SET1_P1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET1_0_FFE_ERR_LVL_FRAC_SET1_P1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET1_0_FFE_ERR_LVL_FRAC_SET1_P1_BF_DEF (0x00000000)

///< FFE VREF set1 level p3 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET1_0_FFE_ERR_LVL_FRAC_SET1_P3_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET1_0_FFE_ERR_LVL_FRAC_SET1_P3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET1_0_FFE_ERR_LVL_FRAC_SET1_P3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET1_0_FFE_ERR_LVL_FRAC_SET1_P3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_ERR_LEVEL_FRAC_SET2_0 register description at address offset 0x71c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_err_level_frac_set2_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_ERR_LEVEL_FRAC_SET2_M3 : 8;
    ///< FFE VREF set2 level m3 fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_ERR_LEVEL_FRAC_SET2_M1 : 8;
    ///< FFE VREF set2 level m1 fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_ERR_LEVEL_FRAC_SET2_P1 : 8;
    ///< FFE VREF set2 level p1 fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_ERR_LEVEL_FRAC_SET2_P3 : 8;
    ///< FFE VREF set2 level p3 fractional part
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_err_lvl_frac_set2_0_reg_t;

#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET2_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET2_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET2_0_WR_MASK (0xffffffffU)


///< FFE VREF set2 level m3 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET2_0_FFE_ERR_LVL_FRAC_SET2_M3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET2_0_FFE_ERR_LVL_FRAC_SET2_M3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET2_0_FFE_ERR_LVL_FRAC_SET2_M3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET2_0_FFE_ERR_LVL_FRAC_SET2_M3_BF_DEF (0x00000000)

///< FFE VREF set2 level m1 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET2_0_FFE_ERR_LVL_FRAC_SET2_M1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET2_0_FFE_ERR_LVL_FRAC_SET2_M1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET2_0_FFE_ERR_LVL_FRAC_SET2_M1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET2_0_FFE_ERR_LVL_FRAC_SET2_M1_BF_DEF (0x00000000)

///< FFE VREF set2 level p1 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET2_0_FFE_ERR_LVL_FRAC_SET2_P1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET2_0_FFE_ERR_LVL_FRAC_SET2_P1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET2_0_FFE_ERR_LVL_FRAC_SET2_P1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET2_0_FFE_ERR_LVL_FRAC_SET2_P1_BF_DEF (0x00000000)

///< FFE VREF set2 level p3 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET2_0_FFE_ERR_LVL_FRAC_SET2_P3_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET2_0_FFE_ERR_LVL_FRAC_SET2_P3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET2_0_FFE_ERR_LVL_FRAC_SET2_P3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET2_0_FFE_ERR_LVL_FRAC_SET2_P3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_ERR_LEVEL_FRAC_SET3_0 register description at address offset 0x720
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_err_level_frac_set3_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_ERR_LEVEL_FRAC_SET3_M3 : 8;
    ///< FFE VREF set3 level m3 fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_ERR_LEVEL_FRAC_SET3_M1 : 8;
    ///< FFE VREF set3 level m1 fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_ERR_LEVEL_FRAC_SET3_P1 : 8;
    ///< FFE VREF set3 level p1 fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_ERR_LEVEL_FRAC_SET3_P3 : 8;
    ///< FFE VREF set3 level p3 fractional part
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_err_lvl_frac_set3_0_reg_t;

#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET3_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET3_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET3_0_WR_MASK (0xffffffffU)


///< FFE VREF set3 level m3 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET3_0_FFE_ERR_LVL_FRAC_SET3_M3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET3_0_FFE_ERR_LVL_FRAC_SET3_M3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET3_0_FFE_ERR_LVL_FRAC_SET3_M3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET3_0_FFE_ERR_LVL_FRAC_SET3_M3_BF_DEF (0x00000000)

///< FFE VREF set3 level m1 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET3_0_FFE_ERR_LVL_FRAC_SET3_M1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET3_0_FFE_ERR_LVL_FRAC_SET3_M1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET3_0_FFE_ERR_LVL_FRAC_SET3_M1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET3_0_FFE_ERR_LVL_FRAC_SET3_M1_BF_DEF (0x00000000)

///< FFE VREF set3 level p1 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET3_0_FFE_ERR_LVL_FRAC_SET3_P1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET3_0_FFE_ERR_LVL_FRAC_SET3_P1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET3_0_FFE_ERR_LVL_FRAC_SET3_P1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET3_0_FFE_ERR_LVL_FRAC_SET3_P1_BF_DEF (0x00000000)

///< FFE VREF set3 level p3 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET3_0_FFE_ERR_LVL_FRAC_SET3_P3_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET3_0_FFE_ERR_LVL_FRAC_SET3_P3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET3_0_FFE_ERR_LVL_FRAC_SET3_P3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET3_0_FFE_ERR_LVL_FRAC_SET3_P3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_ERR_LEVEL_FRAC_SET4_0 register description at address offset 0x724
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_err_level_frac_set4_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_ERR_LEVEL_FRAC_SET4_M3 : 8;
    ///< FFE VREF set4 level m3 fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_ERR_LEVEL_FRAC_SET4_M1 : 8;
    ///< FFE VREF set4 level m1 fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_ERR_LEVEL_FRAC_SET4_P1 : 8;
    ///< FFE VREF set4 level p1 fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_ERR_LEVEL_FRAC_SET4_P3 : 8;
    ///< FFE VREF set4 level p3 fractional part
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_err_lvl_frac_set4_0_reg_t;

#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET4_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET4_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET4_0_WR_MASK (0xffffffffU)


///< FFE VREF set4 level m3 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET4_0_FFE_ERR_LVL_FRAC_SET4_M3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET4_0_FFE_ERR_LVL_FRAC_SET4_M3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET4_0_FFE_ERR_LVL_FRAC_SET4_M3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET4_0_FFE_ERR_LVL_FRAC_SET4_M3_BF_DEF (0x00000000)

///< FFE VREF set4 level m1 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET4_0_FFE_ERR_LVL_FRAC_SET4_M1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET4_0_FFE_ERR_LVL_FRAC_SET4_M1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET4_0_FFE_ERR_LVL_FRAC_SET4_M1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET4_0_FFE_ERR_LVL_FRAC_SET4_M1_BF_DEF (0x00000000)

///< FFE VREF set4 level p1 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET4_0_FFE_ERR_LVL_FRAC_SET4_P1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET4_0_FFE_ERR_LVL_FRAC_SET4_P1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET4_0_FFE_ERR_LVL_FRAC_SET4_P1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET4_0_FFE_ERR_LVL_FRAC_SET4_P1_BF_DEF (0x00000000)

///< FFE VREF set4 level p3 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET4_0_FFE_ERR_LVL_FRAC_SET4_P3_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET4_0_FFE_ERR_LVL_FRAC_SET4_P3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET4_0_FFE_ERR_LVL_FRAC_SET4_P3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET4_0_FFE_ERR_LVL_FRAC_SET4_P3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_ERR_LEVEL_FRAC_SET5_0 register description at address offset 0x728
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_err_level_frac_set5_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_ERR_LEVEL_FRAC_SET5_M3 : 8;
    ///< FFE VREF set5 level m3 fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_ERR_LEVEL_FRAC_SET5_M1 : 8;
    ///< FFE VREF set5 level m1 fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_ERR_LEVEL_FRAC_SET5_P1 : 8;
    ///< FFE VREF set5 level p1 fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_ERR_LEVEL_FRAC_SET5_P3 : 8;
    ///< FFE VREF set5 level p3 fractional part
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_err_lvl_frac_set5_0_reg_t;

#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET5_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET5_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET5_0_WR_MASK (0xffffffffU)


///< FFE VREF set5 level m3 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET5_0_FFE_ERR_LVL_FRAC_SET5_M3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET5_0_FFE_ERR_LVL_FRAC_SET5_M3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET5_0_FFE_ERR_LVL_FRAC_SET5_M3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET5_0_FFE_ERR_LVL_FRAC_SET5_M3_BF_DEF (0x00000000)

///< FFE VREF set5 level m1 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET5_0_FFE_ERR_LVL_FRAC_SET5_M1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET5_0_FFE_ERR_LVL_FRAC_SET5_M1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET5_0_FFE_ERR_LVL_FRAC_SET5_M1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET5_0_FFE_ERR_LVL_FRAC_SET5_M1_BF_DEF (0x00000000)

///< FFE VREF set5 level p1 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET5_0_FFE_ERR_LVL_FRAC_SET5_P1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET5_0_FFE_ERR_LVL_FRAC_SET5_P1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET5_0_FFE_ERR_LVL_FRAC_SET5_P1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET5_0_FFE_ERR_LVL_FRAC_SET5_P1_BF_DEF (0x00000000)

///< FFE VREF set5 level p3 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET5_0_FFE_ERR_LVL_FRAC_SET5_P3_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET5_0_FFE_ERR_LVL_FRAC_SET5_P3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET5_0_FFE_ERR_LVL_FRAC_SET5_P3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET5_0_FFE_ERR_LVL_FRAC_SET5_P3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_ERR_LEVEL_FRAC_SET6_0 register description at address offset 0x72c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_err_level_frac_set6_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_ERR_LEVEL_FRAC_SET6_M3 : 8;
    ///< FFE VREF set6 level m3 fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_ERR_LEVEL_FRAC_SET6_M1 : 8;
    ///< FFE VREF set6 level m1 fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_ERR_LEVEL_FRAC_SET6_P1 : 8;
    ///< FFE VREF set6 level p1 fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_ERR_LEVEL_FRAC_SET6_P3 : 8;
    ///< FFE VREF set6 level p3 fractional part
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_err_lvl_frac_set6_0_reg_t;

#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET6_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET6_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET6_0_WR_MASK (0xffffffffU)


///< FFE VREF set6 level m3 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET6_0_FFE_ERR_LVL_FRAC_SET6_M3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET6_0_FFE_ERR_LVL_FRAC_SET6_M3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET6_0_FFE_ERR_LVL_FRAC_SET6_M3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET6_0_FFE_ERR_LVL_FRAC_SET6_M3_BF_DEF (0x00000000)

///< FFE VREF set6 level m1 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET6_0_FFE_ERR_LVL_FRAC_SET6_M1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET6_0_FFE_ERR_LVL_FRAC_SET6_M1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET6_0_FFE_ERR_LVL_FRAC_SET6_M1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET6_0_FFE_ERR_LVL_FRAC_SET6_M1_BF_DEF (0x00000000)

///< FFE VREF set6 level p1 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET6_0_FFE_ERR_LVL_FRAC_SET6_P1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET6_0_FFE_ERR_LVL_FRAC_SET6_P1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET6_0_FFE_ERR_LVL_FRAC_SET6_P1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET6_0_FFE_ERR_LVL_FRAC_SET6_P1_BF_DEF (0x00000000)

///< FFE VREF set6 level p3 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET6_0_FFE_ERR_LVL_FRAC_SET6_P3_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET6_0_FFE_ERR_LVL_FRAC_SET6_P3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET6_0_FFE_ERR_LVL_FRAC_SET6_P3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET6_0_FFE_ERR_LVL_FRAC_SET6_P3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_ERR_LEVEL_FRAC_SET7_0 register description at address offset 0x730
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_err_level_frac_set7_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_ERR_LEVEL_FRAC_SET7_M3 : 8;
    ///< FFE VREF set7 level m3 fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_ERR_LEVEL_FRAC_SET7_M1 : 8;
    ///< FFE VREF set7 level m1 fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_ERR_LEVEL_FRAC_SET7_P1 : 8;
    ///< FFE VREF set7 level p1 fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_ERR_LEVEL_FRAC_SET7_P3 : 8;
    ///< FFE VREF set7 level p3 fractional part
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_err_lvl_frac_set7_0_reg_t;

#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET7_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET7_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET7_0_WR_MASK (0xffffffffU)


///< FFE VREF set7 level m3 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET7_0_FFE_ERR_LVL_FRAC_SET7_M3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET7_0_FFE_ERR_LVL_FRAC_SET7_M3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET7_0_FFE_ERR_LVL_FRAC_SET7_M3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET7_0_FFE_ERR_LVL_FRAC_SET7_M3_BF_DEF (0x00000000)

///< FFE VREF set7 level m1 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET7_0_FFE_ERR_LVL_FRAC_SET7_M1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET7_0_FFE_ERR_LVL_FRAC_SET7_M1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET7_0_FFE_ERR_LVL_FRAC_SET7_M1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET7_0_FFE_ERR_LVL_FRAC_SET7_M1_BF_DEF (0x00000000)

///< FFE VREF set7 level p1 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET7_0_FFE_ERR_LVL_FRAC_SET7_P1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET7_0_FFE_ERR_LVL_FRAC_SET7_P1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET7_0_FFE_ERR_LVL_FRAC_SET7_P1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET7_0_FFE_ERR_LVL_FRAC_SET7_P1_BF_DEF (0x00000000)

///< FFE VREF set7 level p3 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET7_0_FFE_ERR_LVL_FRAC_SET7_P3_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET7_0_FFE_ERR_LVL_FRAC_SET7_P3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET7_0_FFE_ERR_LVL_FRAC_SET7_P3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET7_0_FFE_ERR_LVL_FRAC_SET7_P3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_ERR_LEVEL_FRAC_SET8_0 register description at address offset 0x734
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_err_level_frac_set8_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_ERR_LEVEL_FRAC_SET8_M3 : 8;
    ///< FFE VREF set8 level m3 fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_ERR_LEVEL_FRAC_SET8_M1 : 8;
    ///< FFE VREF set8 level m1 fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_ERR_LEVEL_FRAC_SET8_P1 : 8;
    ///< FFE VREF set8 level p1 fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_ERR_LEVEL_FRAC_SET8_P3 : 8;
    ///< FFE VREF set8 level p3 fractional part
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_err_lvl_frac_set8_0_reg_t;

#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET8_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET8_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET8_0_WR_MASK (0xffffffffU)


///< FFE VREF set8 level m3 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET8_0_FFE_ERR_LVL_FRAC_SET8_M3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET8_0_FFE_ERR_LVL_FRAC_SET8_M3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET8_0_FFE_ERR_LVL_FRAC_SET8_M3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET8_0_FFE_ERR_LVL_FRAC_SET8_M3_BF_DEF (0x00000000)

///< FFE VREF set8 level m1 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET8_0_FFE_ERR_LVL_FRAC_SET8_M1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET8_0_FFE_ERR_LVL_FRAC_SET8_M1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET8_0_FFE_ERR_LVL_FRAC_SET8_M1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET8_0_FFE_ERR_LVL_FRAC_SET8_M1_BF_DEF (0x00000000)

///< FFE VREF set8 level p1 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET8_0_FFE_ERR_LVL_FRAC_SET8_P1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET8_0_FFE_ERR_LVL_FRAC_SET8_P1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET8_0_FFE_ERR_LVL_FRAC_SET8_P1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET8_0_FFE_ERR_LVL_FRAC_SET8_P1_BF_DEF (0x00000000)

///< FFE VREF set8 level p3 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET8_0_FFE_ERR_LVL_FRAC_SET8_P3_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET8_0_FFE_ERR_LVL_FRAC_SET8_P3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET8_0_FFE_ERR_LVL_FRAC_SET8_P3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET8_0_FFE_ERR_LVL_FRAC_SET8_P3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_ERR_LEVEL_FRAC_SET9_0 register description at address offset 0x738
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_err_level_frac_set9_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_ERR_LEVEL_FRAC_SET9_M3 : 8;
    ///< FFE VREF set9 level m3 fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_ERR_LEVEL_FRAC_SET9_M1 : 8;
    ///< FFE VREF set9 level m1 fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_ERR_LEVEL_FRAC_SET9_P1 : 8;
    ///< FFE VREF set9 level p1 fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_ERR_LEVEL_FRAC_SET9_P3 : 8;
    ///< FFE VREF set9 level p3 fractional part
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_err_lvl_frac_set9_0_reg_t;

#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET9_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET9_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET9_0_WR_MASK (0xffffffffU)


///< FFE VREF set9 level m3 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET9_0_FFE_ERR_LVL_FRAC_SET9_M3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET9_0_FFE_ERR_LVL_FRAC_SET9_M3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET9_0_FFE_ERR_LVL_FRAC_SET9_M3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET9_0_FFE_ERR_LVL_FRAC_SET9_M3_BF_DEF (0x00000000)

///< FFE VREF set9 level m1 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET9_0_FFE_ERR_LVL_FRAC_SET9_M1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET9_0_FFE_ERR_LVL_FRAC_SET9_M1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET9_0_FFE_ERR_LVL_FRAC_SET9_M1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET9_0_FFE_ERR_LVL_FRAC_SET9_M1_BF_DEF (0x00000000)

///< FFE VREF set9 level p1 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET9_0_FFE_ERR_LVL_FRAC_SET9_P1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET9_0_FFE_ERR_LVL_FRAC_SET9_P1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET9_0_FFE_ERR_LVL_FRAC_SET9_P1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET9_0_FFE_ERR_LVL_FRAC_SET9_P1_BF_DEF (0x00000000)

///< FFE VREF set9 level p3 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET9_0_FFE_ERR_LVL_FRAC_SET9_P3_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET9_0_FFE_ERR_LVL_FRAC_SET9_P3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET9_0_FFE_ERR_LVL_FRAC_SET9_P3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET9_0_FFE_ERR_LVL_FRAC_SET9_P3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_ERR_LEVEL_FRAC_SET10_0 register description at address offset 0x73c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_err_level_frac_set10_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_ERR_LEVEL_FRAC_SET10_M3 : 8;
    ///< FFE VREF set10 level m3 fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_ERR_LEVEL_FRAC_SET10_M1 : 8;
    ///< FFE VREF set10 level m1 fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_ERR_LEVEL_FRAC_SET10_P1 : 8;
    ///< FFE VREF set10 level p1 fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_ERR_LEVEL_FRAC_SET10_P3 : 8;
    ///< FFE VREF set10 level p3 fractional part
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_err_lvl_frac_set10_0_reg_t;

#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET10_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET10_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET10_0_WR_MASK (0xffffffffU)


///< FFE VREF set10 level m3 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET10_0_FFE_ERR_LVL_FRAC_SET10_M3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET10_0_FFE_ERR_LVL_FRAC_SET10_M3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET10_0_FFE_ERR_LVL_FRAC_SET10_M3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET10_0_FFE_ERR_LVL_FRAC_SET10_M3_BF_DEF (0x00000000)

///< FFE VREF set10 level m1 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET10_0_FFE_ERR_LVL_FRAC_SET10_M1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET10_0_FFE_ERR_LVL_FRAC_SET10_M1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET10_0_FFE_ERR_LVL_FRAC_SET10_M1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET10_0_FFE_ERR_LVL_FRAC_SET10_M1_BF_DEF (0x00000000)

///< FFE VREF set10 level p1 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET10_0_FFE_ERR_LVL_FRAC_SET10_P1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET10_0_FFE_ERR_LVL_FRAC_SET10_P1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET10_0_FFE_ERR_LVL_FRAC_SET10_P1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET10_0_FFE_ERR_LVL_FRAC_SET10_P1_BF_DEF (0x00000000)

///< FFE VREF set10 level p3 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET10_0_FFE_ERR_LVL_FRAC_SET10_P3_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET10_0_FFE_ERR_LVL_FRAC_SET10_P3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET10_0_FFE_ERR_LVL_FRAC_SET10_P3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET10_0_FFE_ERR_LVL_FRAC_SET10_P3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_ERR_LEVEL_FRAC_SET11_0 register description at address offset 0x740
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_err_level_frac_set11_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_ERR_LEVEL_FRAC_SET11_M3 : 8;
    ///< FFE VREF set11 level m3 fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_ERR_LEVEL_FRAC_SET11_M1 : 8;
    ///< FFE VREF set11 level m1 fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_ERR_LEVEL_FRAC_SET11_P1 : 8;
    ///< FFE VREF set11 level p1 fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_ERR_LEVEL_FRAC_SET11_P3 : 8;
    ///< FFE VREF set11 level p3 fractional part
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_err_lvl_frac_set11_0_reg_t;

#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET11_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET11_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET11_0_WR_MASK (0xffffffffU)


///< FFE VREF set11 level m3 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET11_0_FFE_ERR_LVL_FRAC_SET11_M3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET11_0_FFE_ERR_LVL_FRAC_SET11_M3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET11_0_FFE_ERR_LVL_FRAC_SET11_M3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET11_0_FFE_ERR_LVL_FRAC_SET11_M3_BF_DEF (0x00000000)

///< FFE VREF set11 level m1 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET11_0_FFE_ERR_LVL_FRAC_SET11_M1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET11_0_FFE_ERR_LVL_FRAC_SET11_M1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET11_0_FFE_ERR_LVL_FRAC_SET11_M1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET11_0_FFE_ERR_LVL_FRAC_SET11_M1_BF_DEF (0x00000000)

///< FFE VREF set11 level p1 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET11_0_FFE_ERR_LVL_FRAC_SET11_P1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET11_0_FFE_ERR_LVL_FRAC_SET11_P1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET11_0_FFE_ERR_LVL_FRAC_SET11_P1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET11_0_FFE_ERR_LVL_FRAC_SET11_P1_BF_DEF (0x00000000)

///< FFE VREF set11 level p3 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET11_0_FFE_ERR_LVL_FRAC_SET11_P3_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET11_0_FFE_ERR_LVL_FRAC_SET11_P3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET11_0_FFE_ERR_LVL_FRAC_SET11_P3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET11_0_FFE_ERR_LVL_FRAC_SET11_P3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_ERR_LEVEL_FRAC_SET12_0 register description at address offset 0x744
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_err_level_frac_set12_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_ERR_LEVEL_FRAC_SET12_M3 : 8;
    ///< FFE VREF set12 level m3 fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_ERR_LEVEL_FRAC_SET12_M1 : 8;
    ///< FFE VREF set12 level m1 fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_ERR_LEVEL_FRAC_SET12_P1 : 8;
    ///< FFE VREF set12 level p1 fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_ERR_LEVEL_FRAC_SET12_P3 : 8;
    ///< FFE VREF set12 level p3 fractional part
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_err_lvl_frac_set12_0_reg_t;

#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET12_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET12_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET12_0_WR_MASK (0xffffffffU)


///< FFE VREF set12 level m3 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET12_0_FFE_ERR_LVL_FRAC_SET12_M3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET12_0_FFE_ERR_LVL_FRAC_SET12_M3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET12_0_FFE_ERR_LVL_FRAC_SET12_M3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET12_0_FFE_ERR_LVL_FRAC_SET12_M3_BF_DEF (0x00000000)

///< FFE VREF set12 level m1 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET12_0_FFE_ERR_LVL_FRAC_SET12_M1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET12_0_FFE_ERR_LVL_FRAC_SET12_M1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET12_0_FFE_ERR_LVL_FRAC_SET12_M1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET12_0_FFE_ERR_LVL_FRAC_SET12_M1_BF_DEF (0x00000000)

///< FFE VREF set12 level p1 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET12_0_FFE_ERR_LVL_FRAC_SET12_P1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET12_0_FFE_ERR_LVL_FRAC_SET12_P1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET12_0_FFE_ERR_LVL_FRAC_SET12_P1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET12_0_FFE_ERR_LVL_FRAC_SET12_P1_BF_DEF (0x00000000)

///< FFE VREF set12 level p3 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET12_0_FFE_ERR_LVL_FRAC_SET12_P3_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET12_0_FFE_ERR_LVL_FRAC_SET12_P3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET12_0_FFE_ERR_LVL_FRAC_SET12_P3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET12_0_FFE_ERR_LVL_FRAC_SET12_P3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_ERR_LEVEL_FRAC_SET13_0 register description at address offset 0x748
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_err_level_frac_set13_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_ERR_LEVEL_FRAC_SET13_M3 : 8;
    ///< FFE VREF set13 level m3 fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_ERR_LEVEL_FRAC_SET13_M1 : 8;
    ///< FFE VREF set13 level m1 fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_ERR_LEVEL_FRAC_SET13_P1 : 8;
    ///< FFE VREF set13 level p1 fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_ERR_LEVEL_FRAC_SET13_P3 : 8;
    ///< FFE VREF set13 level p3 fractional part
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_err_lvl_frac_set13_0_reg_t;

#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET13_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET13_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET13_0_WR_MASK (0xffffffffU)


///< FFE VREF set13 level m3 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET13_0_FFE_ERR_LVL_FRAC_SET13_M3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET13_0_FFE_ERR_LVL_FRAC_SET13_M3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET13_0_FFE_ERR_LVL_FRAC_SET13_M3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET13_0_FFE_ERR_LVL_FRAC_SET13_M3_BF_DEF (0x00000000)

///< FFE VREF set13 level m1 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET13_0_FFE_ERR_LVL_FRAC_SET13_M1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET13_0_FFE_ERR_LVL_FRAC_SET13_M1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET13_0_FFE_ERR_LVL_FRAC_SET13_M1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET13_0_FFE_ERR_LVL_FRAC_SET13_M1_BF_DEF (0x00000000)

///< FFE VREF set13 level p1 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET13_0_FFE_ERR_LVL_FRAC_SET13_P1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET13_0_FFE_ERR_LVL_FRAC_SET13_P1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET13_0_FFE_ERR_LVL_FRAC_SET13_P1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET13_0_FFE_ERR_LVL_FRAC_SET13_P1_BF_DEF (0x00000000)

///< FFE VREF set13 level p3 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET13_0_FFE_ERR_LVL_FRAC_SET13_P3_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET13_0_FFE_ERR_LVL_FRAC_SET13_P3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET13_0_FFE_ERR_LVL_FRAC_SET13_P3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET13_0_FFE_ERR_LVL_FRAC_SET13_P3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_ERR_LEVEL_FRAC_SET14_0 register description at address offset 0x74c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_err_level_frac_set14_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_ERR_LEVEL_FRAC_SET14_M3 : 8;
    ///< FFE VREF set14 level m3 fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_ERR_LEVEL_FRAC_SET14_M1 : 8;
    ///< FFE VREF set14 level m1 fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_ERR_LEVEL_FRAC_SET14_P1 : 8;
    ///< FFE VREF set14 level p1 fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_ERR_LEVEL_FRAC_SET14_P3 : 8;
    ///< FFE VREF set14 level p3 fractional part
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_err_lvl_frac_set14_0_reg_t;

#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET14_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET14_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET14_0_WR_MASK (0xffffffffU)


///< FFE VREF set14 level m3 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET14_0_FFE_ERR_LVL_FRAC_SET14_M3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET14_0_FFE_ERR_LVL_FRAC_SET14_M3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET14_0_FFE_ERR_LVL_FRAC_SET14_M3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET14_0_FFE_ERR_LVL_FRAC_SET14_M3_BF_DEF (0x00000000)

///< FFE VREF set14 level m1 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET14_0_FFE_ERR_LVL_FRAC_SET14_M1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET14_0_FFE_ERR_LVL_FRAC_SET14_M1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET14_0_FFE_ERR_LVL_FRAC_SET14_M1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET14_0_FFE_ERR_LVL_FRAC_SET14_M1_BF_DEF (0x00000000)

///< FFE VREF set14 level p1 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET14_0_FFE_ERR_LVL_FRAC_SET14_P1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET14_0_FFE_ERR_LVL_FRAC_SET14_P1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET14_0_FFE_ERR_LVL_FRAC_SET14_P1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET14_0_FFE_ERR_LVL_FRAC_SET14_P1_BF_DEF (0x00000000)

///< FFE VREF set14 level p3 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET14_0_FFE_ERR_LVL_FRAC_SET14_P3_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET14_0_FFE_ERR_LVL_FRAC_SET14_P3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET14_0_FFE_ERR_LVL_FRAC_SET14_P3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET14_0_FFE_ERR_LVL_FRAC_SET14_P3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_FFE_ERR_LEVEL_FRAC_SET15_0 register description at address offset 0x750
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ffe_err_level_frac_set15_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t FFE_ERR_LEVEL_FRAC_SET15_M3 : 8;
    ///< FFE VREF set15 level m3 fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FFE_ERR_LEVEL_FRAC_SET15_M1 : 8;
    ///< FFE VREF set15 level m1 fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_ERR_LEVEL_FRAC_SET15_P1 : 8;
    ///< FFE VREF set15 level p1 fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_ERR_LEVEL_FRAC_SET15_P3 : 8;
    ///< FFE VREF set15 level p3 fractional part
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ffe_err_lvl_frac_set15_0_reg_t;

#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET15_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET15_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET15_0_WR_MASK (0xffffffffU)


///< FFE VREF set15 level m3 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET15_0_FFE_ERR_LVL_FRAC_SET15_M3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET15_0_FFE_ERR_LVL_FRAC_SET15_M3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET15_0_FFE_ERR_LVL_FRAC_SET15_M3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET15_0_FFE_ERR_LVL_FRAC_SET15_M3_BF_DEF (0x00000000)

///< FFE VREF set15 level m1 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET15_0_FFE_ERR_LVL_FRAC_SET15_M1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET15_0_FFE_ERR_LVL_FRAC_SET15_M1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET15_0_FFE_ERR_LVL_FRAC_SET15_M1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET15_0_FFE_ERR_LVL_FRAC_SET15_M1_BF_DEF (0x00000000)

///< FFE VREF set15 level p1 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET15_0_FFE_ERR_LVL_FRAC_SET15_P1_BF_OFF (16)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET15_0_FFE_ERR_LVL_FRAC_SET15_P1_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET15_0_FFE_ERR_LVL_FRAC_SET15_P1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET15_0_FFE_ERR_LVL_FRAC_SET15_P1_BF_DEF (0x00000000)

///< FFE VREF set15 level p3 fractional part
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET15_0_FFE_ERR_LVL_FRAC_SET15_P3_BF_OFF (24)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET15_0_FFE_ERR_LVL_FRAC_SET15_P3_BF_WID ( 8)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET15_0_FFE_ERR_LVL_FRAC_SET15_P3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET15_0_FFE_ERR_LVL_FRAC_SET15_P3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADC_ERR_LEVEL_FRAC_SET0_0 register description at address offset 0x754
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adc_err_level_frac_set0_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADC_ERR_LEVEL_FRAC_SET0_M3 : 8;
    ///< ADC VREF set0 level m3 fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t ADC_ERR_LEVEL_FRAC_SET0_M1 : 8;
    ///< ADC VREF set0 level m1 fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t ADC_ERR_LEVEL_FRAC_SET0_P1 : 8;
    ///< ADC VREF set0 level p1 fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t ADC_ERR_LEVEL_FRAC_SET0_P3 : 8;
    ///< ADC VREF set0 level p3 fractional part
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_adc_err_lvl_frac_set0_0_reg_t;

#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET0_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET0_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET0_0_WR_MASK (0xffffffffU)


///< ADC VREF set0 level m3 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET0_0_ADC_ERR_LVL_FRAC_SET0_M3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET0_0_ADC_ERR_LVL_FRAC_SET0_M3_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET0_0_ADC_ERR_LVL_FRAC_SET0_M3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET0_0_ADC_ERR_LVL_FRAC_SET0_M3_BF_DEF (0x00000000)

///< ADC VREF set0 level m1 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET0_0_ADC_ERR_LVL_FRAC_SET0_M1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET0_0_ADC_ERR_LVL_FRAC_SET0_M1_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET0_0_ADC_ERR_LVL_FRAC_SET0_M1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET0_0_ADC_ERR_LVL_FRAC_SET0_M1_BF_DEF (0x00000000)

///< ADC VREF set0 level p1 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET0_0_ADC_ERR_LVL_FRAC_SET0_P1_BF_OFF (16)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET0_0_ADC_ERR_LVL_FRAC_SET0_P1_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET0_0_ADC_ERR_LVL_FRAC_SET0_P1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET0_0_ADC_ERR_LVL_FRAC_SET0_P1_BF_DEF (0x00000000)

///< ADC VREF set0 level p3 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET0_0_ADC_ERR_LVL_FRAC_SET0_P3_BF_OFF (24)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET0_0_ADC_ERR_LVL_FRAC_SET0_P3_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET0_0_ADC_ERR_LVL_FRAC_SET0_P3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET0_0_ADC_ERR_LVL_FRAC_SET0_P3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADC_ERR_LEVEL_FRAC_SET1_0 register description at address offset 0x758
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adc_err_level_frac_set1_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADC_ERR_LEVEL_FRAC_SET1_M3 : 8;
    ///< ADC VREF set1 level m3 fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t ADC_ERR_LEVEL_FRAC_SET1_M1 : 8;
    ///< ADC VREF set1 level m1 fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t ADC_ERR_LEVEL_FRAC_SET1_P1 : 8;
    ///< ADC VREF set1 level p1 fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t ADC_ERR_LEVEL_FRAC_SET1_P3 : 8;
    ///< ADC VREF set1 level p3 fractional part
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_adc_err_lvl_frac_set1_0_reg_t;

#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET1_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET1_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET1_0_WR_MASK (0xffffffffU)


///< ADC VREF set1 level m3 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET1_0_ADC_ERR_LVL_FRAC_SET1_M3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET1_0_ADC_ERR_LVL_FRAC_SET1_M3_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET1_0_ADC_ERR_LVL_FRAC_SET1_M3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET1_0_ADC_ERR_LVL_FRAC_SET1_M3_BF_DEF (0x00000000)

///< ADC VREF set1 level m1 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET1_0_ADC_ERR_LVL_FRAC_SET1_M1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET1_0_ADC_ERR_LVL_FRAC_SET1_M1_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET1_0_ADC_ERR_LVL_FRAC_SET1_M1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET1_0_ADC_ERR_LVL_FRAC_SET1_M1_BF_DEF (0x00000000)

///< ADC VREF set1 level p1 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET1_0_ADC_ERR_LVL_FRAC_SET1_P1_BF_OFF (16)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET1_0_ADC_ERR_LVL_FRAC_SET1_P1_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET1_0_ADC_ERR_LVL_FRAC_SET1_P1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET1_0_ADC_ERR_LVL_FRAC_SET1_P1_BF_DEF (0x00000000)

///< ADC VREF set1 level p3 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET1_0_ADC_ERR_LVL_FRAC_SET1_P3_BF_OFF (24)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET1_0_ADC_ERR_LVL_FRAC_SET1_P3_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET1_0_ADC_ERR_LVL_FRAC_SET1_P3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET1_0_ADC_ERR_LVL_FRAC_SET1_P3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADC_ERR_LEVEL_FRAC_SET2_0 register description at address offset 0x75c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adc_err_level_frac_set2_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADC_ERR_LEVEL_FRAC_SET2_M3 : 8;
    ///< ADC VREF set2 level m3 fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t ADC_ERR_LEVEL_FRAC_SET2_M1 : 8;
    ///< ADC VREF set2 level m1 fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t ADC_ERR_LEVEL_FRAC_SET2_P1 : 8;
    ///< ADC VREF set2 level p1 fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t ADC_ERR_LEVEL_FRAC_SET2_P3 : 8;
    ///< ADC VREF set2 level p3 fractional part
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_adc_err_lvl_frac_set2_0_reg_t;

#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET2_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET2_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET2_0_WR_MASK (0xffffffffU)


///< ADC VREF set2 level m3 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET2_0_ADC_ERR_LVL_FRAC_SET2_M3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET2_0_ADC_ERR_LVL_FRAC_SET2_M3_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET2_0_ADC_ERR_LVL_FRAC_SET2_M3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET2_0_ADC_ERR_LVL_FRAC_SET2_M3_BF_DEF (0x00000000)

///< ADC VREF set2 level m1 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET2_0_ADC_ERR_LVL_FRAC_SET2_M1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET2_0_ADC_ERR_LVL_FRAC_SET2_M1_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET2_0_ADC_ERR_LVL_FRAC_SET2_M1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET2_0_ADC_ERR_LVL_FRAC_SET2_M1_BF_DEF (0x00000000)

///< ADC VREF set2 level p1 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET2_0_ADC_ERR_LVL_FRAC_SET2_P1_BF_OFF (16)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET2_0_ADC_ERR_LVL_FRAC_SET2_P1_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET2_0_ADC_ERR_LVL_FRAC_SET2_P1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET2_0_ADC_ERR_LVL_FRAC_SET2_P1_BF_DEF (0x00000000)

///< ADC VREF set2 level p3 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET2_0_ADC_ERR_LVL_FRAC_SET2_P3_BF_OFF (24)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET2_0_ADC_ERR_LVL_FRAC_SET2_P3_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET2_0_ADC_ERR_LVL_FRAC_SET2_P3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET2_0_ADC_ERR_LVL_FRAC_SET2_P3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADC_ERR_LEVEL_FRAC_SET3_0 register description at address offset 0x760
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adc_err_level_frac_set3_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADC_ERR_LEVEL_FRAC_SET3_M3 : 8;
    ///< ADC VREF set3 level m3 fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t ADC_ERR_LEVEL_FRAC_SET3_M1 : 8;
    ///< ADC VREF set3 level m1 fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t ADC_ERR_LEVEL_FRAC_SET3_P1 : 8;
    ///< ADC VREF set3 level p1 fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t ADC_ERR_LEVEL_FRAC_SET3_P3 : 8;
    ///< ADC VREF set3 level p3 fractional part
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_adc_err_lvl_frac_set3_0_reg_t;

#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET3_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET3_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET3_0_WR_MASK (0xffffffffU)


///< ADC VREF set3 level m3 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET3_0_ADC_ERR_LVL_FRAC_SET3_M3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET3_0_ADC_ERR_LVL_FRAC_SET3_M3_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET3_0_ADC_ERR_LVL_FRAC_SET3_M3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET3_0_ADC_ERR_LVL_FRAC_SET3_M3_BF_DEF (0x00000000)

///< ADC VREF set3 level m1 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET3_0_ADC_ERR_LVL_FRAC_SET3_M1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET3_0_ADC_ERR_LVL_FRAC_SET3_M1_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET3_0_ADC_ERR_LVL_FRAC_SET3_M1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET3_0_ADC_ERR_LVL_FRAC_SET3_M1_BF_DEF (0x00000000)

///< ADC VREF set3 level p1 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET3_0_ADC_ERR_LVL_FRAC_SET3_P1_BF_OFF (16)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET3_0_ADC_ERR_LVL_FRAC_SET3_P1_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET3_0_ADC_ERR_LVL_FRAC_SET3_P1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET3_0_ADC_ERR_LVL_FRAC_SET3_P1_BF_DEF (0x00000000)

///< ADC VREF set3 level p3 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET3_0_ADC_ERR_LVL_FRAC_SET3_P3_BF_OFF (24)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET3_0_ADC_ERR_LVL_FRAC_SET3_P3_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET3_0_ADC_ERR_LVL_FRAC_SET3_P3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET3_0_ADC_ERR_LVL_FRAC_SET3_P3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADC_ERR_LEVEL_FRAC_SET4_0 register description at address offset 0x764
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adc_err_level_frac_set4_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADC_ERR_LEVEL_FRAC_SET4_M3 : 8;
    ///< ADC VREF set4 level m3 fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t ADC_ERR_LEVEL_FRAC_SET4_M1 : 8;
    ///< ADC VREF set4 level m1 fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t ADC_ERR_LEVEL_FRAC_SET4_P1 : 8;
    ///< ADC VREF set4 level p1 fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t ADC_ERR_LEVEL_FRAC_SET4_P3 : 8;
    ///< ADC VREF set4 level p3 fractional part
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_adc_err_lvl_frac_set4_0_reg_t;

#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET4_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET4_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET4_0_WR_MASK (0xffffffffU)


///< ADC VREF set4 level m3 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET4_0_ADC_ERR_LVL_FRAC_SET4_M3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET4_0_ADC_ERR_LVL_FRAC_SET4_M3_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET4_0_ADC_ERR_LVL_FRAC_SET4_M3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET4_0_ADC_ERR_LVL_FRAC_SET4_M3_BF_DEF (0x00000000)

///< ADC VREF set4 level m1 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET4_0_ADC_ERR_LVL_FRAC_SET4_M1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET4_0_ADC_ERR_LVL_FRAC_SET4_M1_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET4_0_ADC_ERR_LVL_FRAC_SET4_M1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET4_0_ADC_ERR_LVL_FRAC_SET4_M1_BF_DEF (0x00000000)

///< ADC VREF set4 level p1 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET4_0_ADC_ERR_LVL_FRAC_SET4_P1_BF_OFF (16)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET4_0_ADC_ERR_LVL_FRAC_SET4_P1_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET4_0_ADC_ERR_LVL_FRAC_SET4_P1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET4_0_ADC_ERR_LVL_FRAC_SET4_P1_BF_DEF (0x00000000)

///< ADC VREF set4 level p3 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET4_0_ADC_ERR_LVL_FRAC_SET4_P3_BF_OFF (24)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET4_0_ADC_ERR_LVL_FRAC_SET4_P3_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET4_0_ADC_ERR_LVL_FRAC_SET4_P3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET4_0_ADC_ERR_LVL_FRAC_SET4_P3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADC_ERR_LEVEL_FRAC_SET5_0 register description at address offset 0x768
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adc_err_level_frac_set5_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADC_ERR_LEVEL_FRAC_SET5_M3 : 8;
    ///< ADC VREF set5 level m3 fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t ADC_ERR_LEVEL_FRAC_SET5_M1 : 8;
    ///< ADC VREF set5 level m1 fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t ADC_ERR_LEVEL_FRAC_SET5_P1 : 8;
    ///< ADC VREF set5 level p1 fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t ADC_ERR_LEVEL_FRAC_SET5_P3 : 8;
    ///< ADC VREF set5 level p3 fractional part
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_adc_err_lvl_frac_set5_0_reg_t;

#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET5_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET5_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET5_0_WR_MASK (0xffffffffU)


///< ADC VREF set5 level m3 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET5_0_ADC_ERR_LVL_FRAC_SET5_M3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET5_0_ADC_ERR_LVL_FRAC_SET5_M3_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET5_0_ADC_ERR_LVL_FRAC_SET5_M3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET5_0_ADC_ERR_LVL_FRAC_SET5_M3_BF_DEF (0x00000000)

///< ADC VREF set5 level m1 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET5_0_ADC_ERR_LVL_FRAC_SET5_M1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET5_0_ADC_ERR_LVL_FRAC_SET5_M1_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET5_0_ADC_ERR_LVL_FRAC_SET5_M1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET5_0_ADC_ERR_LVL_FRAC_SET5_M1_BF_DEF (0x00000000)

///< ADC VREF set5 level p1 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET5_0_ADC_ERR_LVL_FRAC_SET5_P1_BF_OFF (16)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET5_0_ADC_ERR_LVL_FRAC_SET5_P1_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET5_0_ADC_ERR_LVL_FRAC_SET5_P1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET5_0_ADC_ERR_LVL_FRAC_SET5_P1_BF_DEF (0x00000000)

///< ADC VREF set5 level p3 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET5_0_ADC_ERR_LVL_FRAC_SET5_P3_BF_OFF (24)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET5_0_ADC_ERR_LVL_FRAC_SET5_P3_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET5_0_ADC_ERR_LVL_FRAC_SET5_P3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET5_0_ADC_ERR_LVL_FRAC_SET5_P3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADC_ERR_LEVEL_FRAC_SET6_0 register description at address offset 0x76c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adc_err_level_frac_set6_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADC_ERR_LEVEL_FRAC_SET6_M3 : 8;
    ///< ADC VREF set6 level m3 fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t ADC_ERR_LEVEL_FRAC_SET6_M1 : 8;
    ///< ADC VREF set6 level m1 fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t ADC_ERR_LEVEL_FRAC_SET6_P1 : 8;
    ///< ADC VREF set6 level p1 fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t ADC_ERR_LEVEL_FRAC_SET6_P3 : 8;
    ///< ADC VREF set6 level p3 fractional part
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_adc_err_lvl_frac_set6_0_reg_t;

#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET6_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET6_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET6_0_WR_MASK (0xffffffffU)


///< ADC VREF set6 level m3 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET6_0_ADC_ERR_LVL_FRAC_SET6_M3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET6_0_ADC_ERR_LVL_FRAC_SET6_M3_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET6_0_ADC_ERR_LVL_FRAC_SET6_M3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET6_0_ADC_ERR_LVL_FRAC_SET6_M3_BF_DEF (0x00000000)

///< ADC VREF set6 level m1 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET6_0_ADC_ERR_LVL_FRAC_SET6_M1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET6_0_ADC_ERR_LVL_FRAC_SET6_M1_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET6_0_ADC_ERR_LVL_FRAC_SET6_M1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET6_0_ADC_ERR_LVL_FRAC_SET6_M1_BF_DEF (0x00000000)

///< ADC VREF set6 level p1 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET6_0_ADC_ERR_LVL_FRAC_SET6_P1_BF_OFF (16)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET6_0_ADC_ERR_LVL_FRAC_SET6_P1_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET6_0_ADC_ERR_LVL_FRAC_SET6_P1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET6_0_ADC_ERR_LVL_FRAC_SET6_P1_BF_DEF (0x00000000)

///< ADC VREF set6 level p3 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET6_0_ADC_ERR_LVL_FRAC_SET6_P3_BF_OFF (24)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET6_0_ADC_ERR_LVL_FRAC_SET6_P3_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET6_0_ADC_ERR_LVL_FRAC_SET6_P3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET6_0_ADC_ERR_LVL_FRAC_SET6_P3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADC_ERR_LEVEL_FRAC_SET7_0 register description at address offset 0x770
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adc_err_level_frac_set7_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADC_ERR_LEVEL_FRAC_SET7_M3 : 8;
    ///< ADC VREF set7 level m3 fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t ADC_ERR_LEVEL_FRAC_SET7_M1 : 8;
    ///< ADC VREF set7 level m1 fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t ADC_ERR_LEVEL_FRAC_SET7_P1 : 8;
    ///< ADC VREF set7 level p1 fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t ADC_ERR_LEVEL_FRAC_SET7_P3 : 8;
    ///< ADC VREF set7 level p3 fractional part
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_adc_err_lvl_frac_set7_0_reg_t;

#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET7_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET7_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET7_0_WR_MASK (0xffffffffU)


///< ADC VREF set7 level m3 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET7_0_ADC_ERR_LVL_FRAC_SET7_M3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET7_0_ADC_ERR_LVL_FRAC_SET7_M3_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET7_0_ADC_ERR_LVL_FRAC_SET7_M3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET7_0_ADC_ERR_LVL_FRAC_SET7_M3_BF_DEF (0x00000000)

///< ADC VREF set7 level m1 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET7_0_ADC_ERR_LVL_FRAC_SET7_M1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET7_0_ADC_ERR_LVL_FRAC_SET7_M1_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET7_0_ADC_ERR_LVL_FRAC_SET7_M1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET7_0_ADC_ERR_LVL_FRAC_SET7_M1_BF_DEF (0x00000000)

///< ADC VREF set7 level p1 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET7_0_ADC_ERR_LVL_FRAC_SET7_P1_BF_OFF (16)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET7_0_ADC_ERR_LVL_FRAC_SET7_P1_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET7_0_ADC_ERR_LVL_FRAC_SET7_P1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET7_0_ADC_ERR_LVL_FRAC_SET7_P1_BF_DEF (0x00000000)

///< ADC VREF set7 level p3 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET7_0_ADC_ERR_LVL_FRAC_SET7_P3_BF_OFF (24)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET7_0_ADC_ERR_LVL_FRAC_SET7_P3_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET7_0_ADC_ERR_LVL_FRAC_SET7_P3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET7_0_ADC_ERR_LVL_FRAC_SET7_P3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADC_ERR_LEVEL_FRAC_SET8_0 register description at address offset 0x774
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adc_err_level_frac_set8_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADC_ERR_LEVEL_FRAC_SET8_M3 : 8;
    ///< ADC VREF set8 level m3 fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t ADC_ERR_LEVEL_FRAC_SET8_M1 : 8;
    ///< ADC VREF set8 level m1 fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t ADC_ERR_LEVEL_FRAC_SET8_P1 : 8;
    ///< ADC VREF set8 level p1 fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t ADC_ERR_LEVEL_FRAC_SET8_P3 : 8;
    ///< ADC VREF set8 level p3 fractional part
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_adc_err_lvl_frac_set8_0_reg_t;

#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET8_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET8_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET8_0_WR_MASK (0xffffffffU)


///< ADC VREF set8 level m3 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET8_0_ADC_ERR_LVL_FRAC_SET8_M3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET8_0_ADC_ERR_LVL_FRAC_SET8_M3_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET8_0_ADC_ERR_LVL_FRAC_SET8_M3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET8_0_ADC_ERR_LVL_FRAC_SET8_M3_BF_DEF (0x00000000)

///< ADC VREF set8 level m1 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET8_0_ADC_ERR_LVL_FRAC_SET8_M1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET8_0_ADC_ERR_LVL_FRAC_SET8_M1_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET8_0_ADC_ERR_LVL_FRAC_SET8_M1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET8_0_ADC_ERR_LVL_FRAC_SET8_M1_BF_DEF (0x00000000)

///< ADC VREF set8 level p1 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET8_0_ADC_ERR_LVL_FRAC_SET8_P1_BF_OFF (16)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET8_0_ADC_ERR_LVL_FRAC_SET8_P1_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET8_0_ADC_ERR_LVL_FRAC_SET8_P1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET8_0_ADC_ERR_LVL_FRAC_SET8_P1_BF_DEF (0x00000000)

///< ADC VREF set8 level p3 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET8_0_ADC_ERR_LVL_FRAC_SET8_P3_BF_OFF (24)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET8_0_ADC_ERR_LVL_FRAC_SET8_P3_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET8_0_ADC_ERR_LVL_FRAC_SET8_P3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET8_0_ADC_ERR_LVL_FRAC_SET8_P3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADC_ERR_LEVEL_FRAC_SET9_0 register description at address offset 0x778
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adc_err_level_frac_set9_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADC_ERR_LEVEL_FRAC_SET9_M3 : 8;
    ///< ADC VREF set9 level m3 fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t ADC_ERR_LEVEL_FRAC_SET9_M1 : 8;
    ///< ADC VREF set9 level m1 fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t ADC_ERR_LEVEL_FRAC_SET9_P1 : 8;
    ///< ADC VREF set9 level p1 fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t ADC_ERR_LEVEL_FRAC_SET9_P3 : 8;
    ///< ADC VREF set9 level p3 fractional part
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_adc_err_lvl_frac_set9_0_reg_t;

#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET9_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET9_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET9_0_WR_MASK (0xffffffffU)


///< ADC VREF set9 level m3 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET9_0_ADC_ERR_LVL_FRAC_SET9_M3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET9_0_ADC_ERR_LVL_FRAC_SET9_M3_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET9_0_ADC_ERR_LVL_FRAC_SET9_M3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET9_0_ADC_ERR_LVL_FRAC_SET9_M3_BF_DEF (0x00000000)

///< ADC VREF set9 level m1 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET9_0_ADC_ERR_LVL_FRAC_SET9_M1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET9_0_ADC_ERR_LVL_FRAC_SET9_M1_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET9_0_ADC_ERR_LVL_FRAC_SET9_M1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET9_0_ADC_ERR_LVL_FRAC_SET9_M1_BF_DEF (0x00000000)

///< ADC VREF set9 level p1 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET9_0_ADC_ERR_LVL_FRAC_SET9_P1_BF_OFF (16)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET9_0_ADC_ERR_LVL_FRAC_SET9_P1_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET9_0_ADC_ERR_LVL_FRAC_SET9_P1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET9_0_ADC_ERR_LVL_FRAC_SET9_P1_BF_DEF (0x00000000)

///< ADC VREF set9 level p3 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET9_0_ADC_ERR_LVL_FRAC_SET9_P3_BF_OFF (24)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET9_0_ADC_ERR_LVL_FRAC_SET9_P3_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET9_0_ADC_ERR_LVL_FRAC_SET9_P3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET9_0_ADC_ERR_LVL_FRAC_SET9_P3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADC_ERR_LEVEL_FRAC_SET10_0 register description at address offset 0x77c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adc_err_level_frac_set10_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADC_ERR_LEVEL_FRAC_SET10_M3 : 8;
    ///< ADC VREF set10 level m3 fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t ADC_ERR_LEVEL_FRAC_SET10_M1 : 8;
    ///< ADC VREF set10 level m1 fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t ADC_ERR_LEVEL_FRAC_SET10_P1 : 8;
    ///< ADC VREF set10 level p1 fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t ADC_ERR_LEVEL_FRAC_SET10_P3 : 8;
    ///< ADC VREF set10 level p3 fractional part
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_adc_err_lvl_frac_set10_0_reg_t;

#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET10_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET10_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET10_0_WR_MASK (0xffffffffU)


///< ADC VREF set10 level m3 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET10_0_ADC_ERR_LVL_FRAC_SET10_M3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET10_0_ADC_ERR_LVL_FRAC_SET10_M3_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET10_0_ADC_ERR_LVL_FRAC_SET10_M3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET10_0_ADC_ERR_LVL_FRAC_SET10_M3_BF_DEF (0x00000000)

///< ADC VREF set10 level m1 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET10_0_ADC_ERR_LVL_FRAC_SET10_M1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET10_0_ADC_ERR_LVL_FRAC_SET10_M1_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET10_0_ADC_ERR_LVL_FRAC_SET10_M1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET10_0_ADC_ERR_LVL_FRAC_SET10_M1_BF_DEF (0x00000000)

///< ADC VREF set10 level p1 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET10_0_ADC_ERR_LVL_FRAC_SET10_P1_BF_OFF (16)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET10_0_ADC_ERR_LVL_FRAC_SET10_P1_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET10_0_ADC_ERR_LVL_FRAC_SET10_P1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET10_0_ADC_ERR_LVL_FRAC_SET10_P1_BF_DEF (0x00000000)

///< ADC VREF set10 level p3 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET10_0_ADC_ERR_LVL_FRAC_SET10_P3_BF_OFF (24)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET10_0_ADC_ERR_LVL_FRAC_SET10_P3_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET10_0_ADC_ERR_LVL_FRAC_SET10_P3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET10_0_ADC_ERR_LVL_FRAC_SET10_P3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADC_ERR_LEVEL_FRAC_SET11_0 register description at address offset 0x780
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adc_err_level_frac_set11_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADC_ERR_LEVEL_FRAC_SET11_M3 : 8;
    ///< ADC VREF set11 level m3 fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t ADC_ERR_LEVEL_FRAC_SET11_M1 : 8;
    ///< ADC VREF set11 level m1 fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t ADC_ERR_LEVEL_FRAC_SET11_P1 : 8;
    ///< ADC VREF set11 level p1 fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t ADC_ERR_LEVEL_FRAC_SET11_P3 : 8;
    ///< ADC VREF set11 level p3 fractional part
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_adc_err_lvl_frac_set11_0_reg_t;

#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET11_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET11_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET11_0_WR_MASK (0xffffffffU)


///< ADC VREF set11 level m3 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET11_0_ADC_ERR_LVL_FRAC_SET11_M3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET11_0_ADC_ERR_LVL_FRAC_SET11_M3_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET11_0_ADC_ERR_LVL_FRAC_SET11_M3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET11_0_ADC_ERR_LVL_FRAC_SET11_M3_BF_DEF (0x00000000)

///< ADC VREF set11 level m1 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET11_0_ADC_ERR_LVL_FRAC_SET11_M1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET11_0_ADC_ERR_LVL_FRAC_SET11_M1_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET11_0_ADC_ERR_LVL_FRAC_SET11_M1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET11_0_ADC_ERR_LVL_FRAC_SET11_M1_BF_DEF (0x00000000)

///< ADC VREF set11 level p1 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET11_0_ADC_ERR_LVL_FRAC_SET11_P1_BF_OFF (16)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET11_0_ADC_ERR_LVL_FRAC_SET11_P1_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET11_0_ADC_ERR_LVL_FRAC_SET11_P1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET11_0_ADC_ERR_LVL_FRAC_SET11_P1_BF_DEF (0x00000000)

///< ADC VREF set11 level p3 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET11_0_ADC_ERR_LVL_FRAC_SET11_P3_BF_OFF (24)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET11_0_ADC_ERR_LVL_FRAC_SET11_P3_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET11_0_ADC_ERR_LVL_FRAC_SET11_P3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET11_0_ADC_ERR_LVL_FRAC_SET11_P3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADC_ERR_LEVEL_FRAC_SET12_0 register description at address offset 0x784
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adc_err_level_frac_set12_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADC_ERR_LEVEL_FRAC_SET12_M3 : 8;
    ///< ADC VREF set12 level m3 fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t ADC_ERR_LEVEL_FRAC_SET12_M1 : 8;
    ///< ADC VREF set12 level m1 fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t ADC_ERR_LEVEL_FRAC_SET12_P1 : 8;
    ///< ADC VREF set12 level p1 fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t ADC_ERR_LEVEL_FRAC_SET12_P3 : 8;
    ///< ADC VREF set12 level p3 fractional part
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_adc_err_lvl_frac_set12_0_reg_t;

#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET12_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET12_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET12_0_WR_MASK (0xffffffffU)


///< ADC VREF set12 level m3 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET12_0_ADC_ERR_LVL_FRAC_SET12_M3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET12_0_ADC_ERR_LVL_FRAC_SET12_M3_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET12_0_ADC_ERR_LVL_FRAC_SET12_M3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET12_0_ADC_ERR_LVL_FRAC_SET12_M3_BF_DEF (0x00000000)

///< ADC VREF set12 level m1 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET12_0_ADC_ERR_LVL_FRAC_SET12_M1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET12_0_ADC_ERR_LVL_FRAC_SET12_M1_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET12_0_ADC_ERR_LVL_FRAC_SET12_M1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET12_0_ADC_ERR_LVL_FRAC_SET12_M1_BF_DEF (0x00000000)

///< ADC VREF set12 level p1 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET12_0_ADC_ERR_LVL_FRAC_SET12_P1_BF_OFF (16)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET12_0_ADC_ERR_LVL_FRAC_SET12_P1_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET12_0_ADC_ERR_LVL_FRAC_SET12_P1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET12_0_ADC_ERR_LVL_FRAC_SET12_P1_BF_DEF (0x00000000)

///< ADC VREF set12 level p3 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET12_0_ADC_ERR_LVL_FRAC_SET12_P3_BF_OFF (24)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET12_0_ADC_ERR_LVL_FRAC_SET12_P3_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET12_0_ADC_ERR_LVL_FRAC_SET12_P3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET12_0_ADC_ERR_LVL_FRAC_SET12_P3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADC_ERR_LEVEL_FRAC_SET13_0 register description at address offset 0x788
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adc_err_level_frac_set13_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADC_ERR_LEVEL_FRAC_SET13_M3 : 8;
    ///< ADC VREF set13 level m3 fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t ADC_ERR_LEVEL_FRAC_SET13_M1 : 8;
    ///< ADC VREF set13 level m1 fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t ADC_ERR_LEVEL_FRAC_SET13_P1 : 8;
    ///< ADC VREF set13 level p1 fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t ADC_ERR_LEVEL_FRAC_SET13_P3 : 8;
    ///< ADC VREF set13 level p3 fractional part
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_adc_err_lvl_frac_set13_0_reg_t;

#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET13_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET13_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET13_0_WR_MASK (0xffffffffU)


///< ADC VREF set13 level m3 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET13_0_ADC_ERR_LVL_FRAC_SET13_M3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET13_0_ADC_ERR_LVL_FRAC_SET13_M3_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET13_0_ADC_ERR_LVL_FRAC_SET13_M3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET13_0_ADC_ERR_LVL_FRAC_SET13_M3_BF_DEF (0x00000000)

///< ADC VREF set13 level m1 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET13_0_ADC_ERR_LVL_FRAC_SET13_M1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET13_0_ADC_ERR_LVL_FRAC_SET13_M1_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET13_0_ADC_ERR_LVL_FRAC_SET13_M1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET13_0_ADC_ERR_LVL_FRAC_SET13_M1_BF_DEF (0x00000000)

///< ADC VREF set13 level p1 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET13_0_ADC_ERR_LVL_FRAC_SET13_P1_BF_OFF (16)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET13_0_ADC_ERR_LVL_FRAC_SET13_P1_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET13_0_ADC_ERR_LVL_FRAC_SET13_P1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET13_0_ADC_ERR_LVL_FRAC_SET13_P1_BF_DEF (0x00000000)

///< ADC VREF set13 level p3 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET13_0_ADC_ERR_LVL_FRAC_SET13_P3_BF_OFF (24)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET13_0_ADC_ERR_LVL_FRAC_SET13_P3_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET13_0_ADC_ERR_LVL_FRAC_SET13_P3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET13_0_ADC_ERR_LVL_FRAC_SET13_P3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADC_ERR_LEVEL_FRAC_SET14_0 register description at address offset 0x78c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adc_err_level_frac_set14_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADC_ERR_LEVEL_FRAC_SET14_M3 : 8;
    ///< ADC VREF set14 level m3 fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t ADC_ERR_LEVEL_FRAC_SET14_M1 : 8;
    ///< ADC VREF set14 level m1 fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t ADC_ERR_LEVEL_FRAC_SET14_P1 : 8;
    ///< ADC VREF set14 level p1 fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t ADC_ERR_LEVEL_FRAC_SET14_P3 : 8;
    ///< ADC VREF set14 level p3 fractional part
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_adc_err_lvl_frac_set14_0_reg_t;

#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET14_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET14_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET14_0_WR_MASK (0xffffffffU)


///< ADC VREF set14 level m3 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET14_0_ADC_ERR_LVL_FRAC_SET14_M3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET14_0_ADC_ERR_LVL_FRAC_SET14_M3_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET14_0_ADC_ERR_LVL_FRAC_SET14_M3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET14_0_ADC_ERR_LVL_FRAC_SET14_M3_BF_DEF (0x00000000)

///< ADC VREF set14 level m1 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET14_0_ADC_ERR_LVL_FRAC_SET14_M1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET14_0_ADC_ERR_LVL_FRAC_SET14_M1_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET14_0_ADC_ERR_LVL_FRAC_SET14_M1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET14_0_ADC_ERR_LVL_FRAC_SET14_M1_BF_DEF (0x00000000)

///< ADC VREF set14 level p1 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET14_0_ADC_ERR_LVL_FRAC_SET14_P1_BF_OFF (16)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET14_0_ADC_ERR_LVL_FRAC_SET14_P1_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET14_0_ADC_ERR_LVL_FRAC_SET14_P1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET14_0_ADC_ERR_LVL_FRAC_SET14_P1_BF_DEF (0x00000000)

///< ADC VREF set14 level p3 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET14_0_ADC_ERR_LVL_FRAC_SET14_P3_BF_OFF (24)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET14_0_ADC_ERR_LVL_FRAC_SET14_P3_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET14_0_ADC_ERR_LVL_FRAC_SET14_P3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET14_0_ADC_ERR_LVL_FRAC_SET14_P3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADC_ERR_LEVEL_FRAC_SET15_0 register description at address offset 0x790
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adc_err_level_frac_set15_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADC_ERR_LEVEL_FRAC_SET15_M3 : 8;
    ///< ADC VREF set15 level m3 fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t ADC_ERR_LEVEL_FRAC_SET15_M1 : 8;
    ///< ADC VREF set15 level m1 fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t ADC_ERR_LEVEL_FRAC_SET15_P1 : 8;
    ///< ADC VREF set15 level p1 fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t ADC_ERR_LEVEL_FRAC_SET15_P3 : 8;
    ///< ADC VREF set15 level p3 fractional part
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_adc_err_lvl_frac_set15_0_reg_t;

#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET15_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET15_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET15_0_WR_MASK (0xffffffffU)


///< ADC VREF set15 level m3 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET15_0_ADC_ERR_LVL_FRAC_SET15_M3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET15_0_ADC_ERR_LVL_FRAC_SET15_M3_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET15_0_ADC_ERR_LVL_FRAC_SET15_M3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET15_0_ADC_ERR_LVL_FRAC_SET15_M3_BF_DEF (0x00000000)

///< ADC VREF set15 level m1 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET15_0_ADC_ERR_LVL_FRAC_SET15_M1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET15_0_ADC_ERR_LVL_FRAC_SET15_M1_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET15_0_ADC_ERR_LVL_FRAC_SET15_M1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET15_0_ADC_ERR_LVL_FRAC_SET15_M1_BF_DEF (0x00000000)

///< ADC VREF set15 level p1 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET15_0_ADC_ERR_LVL_FRAC_SET15_P1_BF_OFF (16)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET15_0_ADC_ERR_LVL_FRAC_SET15_P1_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET15_0_ADC_ERR_LVL_FRAC_SET15_P1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET15_0_ADC_ERR_LVL_FRAC_SET15_P1_BF_DEF (0x00000000)

///< ADC VREF set15 level p3 fractional part
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET15_0_ADC_ERR_LVL_FRAC_SET15_P3_BF_OFF (24)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET15_0_ADC_ERR_LVL_FRAC_SET15_P3_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET15_0_ADC_ERR_LVL_FRAC_SET15_P3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET15_0_ADC_ERR_LVL_FRAC_SET15_P3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_AFFE_LMS_SET0 register description at address offset 0x794
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/affe_lms_set0
  * placeholder
  */

typedef union {
  struct {
    uint32_t AFFE_COEFF_SET0_PRE2 : 7;
    ///< set0 of affe coeff pre2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t AFFE_COEFF_SET0_PRE1 : 7;
    ///< set0 of affe coeff pre1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t AFFE_COEFF_SET0_POST1 : 7;
    ///< set0 of affe coeff post1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
    uint32_t AFFE_COEFF_SET0_POST2 : 7;
    ///< set0 of affe coeff post2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_affe_lms_set0_reg_t;

#define PMA_RXWORD_MSG_AFFE_LMS_SET0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_AFFE_LMS_SET0_RD_MASK (0x7f7f7f7fU)
#define PMA_RXWORD_MSG_AFFE_LMS_SET0_WR_MASK (0x7f7f7f7fU)


///< set0 of affe coeff pre2
#define PMA_RXWORD_MSG_AFFE_LMS_SET0_AFFE_COEFF_SET0_PRE2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_AFFE_LMS_SET0_AFFE_COEFF_SET0_PRE2_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET0_AFFE_COEFF_SET0_PRE2_BF_MSK (0x0000007F)
#define PMA_RXWORD_MSG_AFFE_LMS_SET0_AFFE_COEFF_SET0_PRE2_BF_DEF (0x00000000)

///< set0 of affe coeff pre1
#define PMA_RXWORD_MSG_AFFE_LMS_SET0_AFFE_COEFF_SET0_PRE1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_SET0_AFFE_COEFF_SET0_PRE1_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET0_AFFE_COEFF_SET0_PRE1_BF_MSK (0x00007F00)
#define PMA_RXWORD_MSG_AFFE_LMS_SET0_AFFE_COEFF_SET0_PRE1_BF_DEF (0x00000000)

///< set0 of affe coeff post1
#define PMA_RXWORD_MSG_AFFE_LMS_SET0_AFFE_COEFF_SET0_POST1_BF_OFF (16)
#define PMA_RXWORD_MSG_AFFE_LMS_SET0_AFFE_COEFF_SET0_POST1_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET0_AFFE_COEFF_SET0_POST1_BF_MSK (0x007F0000)
#define PMA_RXWORD_MSG_AFFE_LMS_SET0_AFFE_COEFF_SET0_POST1_BF_DEF (0x00000000)

///< set0 of affe coeff post2
#define PMA_RXWORD_MSG_AFFE_LMS_SET0_AFFE_COEFF_SET0_POST2_BF_OFF (24)
#define PMA_RXWORD_MSG_AFFE_LMS_SET0_AFFE_COEFF_SET0_POST2_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET0_AFFE_COEFF_SET0_POST2_BF_MSK (0x7F000000)
#define PMA_RXWORD_MSG_AFFE_LMS_SET0_AFFE_COEFF_SET0_POST2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_AFFE_LMS_SET1 register description at address offset 0x798
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/affe_lms_set1
  * placeholder
  */

typedef union {
  struct {
    uint32_t AFFE_COEFF_SET1_PRE2 : 7;
    ///< set1 of affe coeff pre2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t AFFE_COEFF_SET1_PRE1 : 7;
    ///< set1 of affe coeff pre1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t AFFE_COEFF_SET1_POST1 : 7;
    ///< set1 of affe coeff post1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
    uint32_t AFFE_COEFF_SET1_POST2 : 7;
    ///< set1 of affe coeff post2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_affe_lms_set1_reg_t;

#define PMA_RXWORD_MSG_AFFE_LMS_SET1_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_AFFE_LMS_SET1_RD_MASK (0x7f7f7f7fU)
#define PMA_RXWORD_MSG_AFFE_LMS_SET1_WR_MASK (0x7f7f7f7fU)


///< set1 of affe coeff pre2
#define PMA_RXWORD_MSG_AFFE_LMS_SET1_AFFE_COEFF_SET1_PRE2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_AFFE_LMS_SET1_AFFE_COEFF_SET1_PRE2_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET1_AFFE_COEFF_SET1_PRE2_BF_MSK (0x0000007F)
#define PMA_RXWORD_MSG_AFFE_LMS_SET1_AFFE_COEFF_SET1_PRE2_BF_DEF (0x00000000)

///< set1 of affe coeff pre1
#define PMA_RXWORD_MSG_AFFE_LMS_SET1_AFFE_COEFF_SET1_PRE1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_SET1_AFFE_COEFF_SET1_PRE1_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET1_AFFE_COEFF_SET1_PRE1_BF_MSK (0x00007F00)
#define PMA_RXWORD_MSG_AFFE_LMS_SET1_AFFE_COEFF_SET1_PRE1_BF_DEF (0x00000000)

///< set1 of affe coeff post1
#define PMA_RXWORD_MSG_AFFE_LMS_SET1_AFFE_COEFF_SET1_POST1_BF_OFF (16)
#define PMA_RXWORD_MSG_AFFE_LMS_SET1_AFFE_COEFF_SET1_POST1_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET1_AFFE_COEFF_SET1_POST1_BF_MSK (0x007F0000)
#define PMA_RXWORD_MSG_AFFE_LMS_SET1_AFFE_COEFF_SET1_POST1_BF_DEF (0x00000000)

///< set1 of affe coeff post2
#define PMA_RXWORD_MSG_AFFE_LMS_SET1_AFFE_COEFF_SET1_POST2_BF_OFF (24)
#define PMA_RXWORD_MSG_AFFE_LMS_SET1_AFFE_COEFF_SET1_POST2_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET1_AFFE_COEFF_SET1_POST2_BF_MSK (0x7F000000)
#define PMA_RXWORD_MSG_AFFE_LMS_SET1_AFFE_COEFF_SET1_POST2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_AFFE_LMS_SET2 register description at address offset 0x79c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/affe_lms_set2
  * placeholder
  */

typedef union {
  struct {
    uint32_t AFFE_COEFF_SET2_PRE2 : 7;
    ///< set2 of affe coeff pre2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t AFFE_COEFF_SET2_PRE1 : 7;
    ///< set2 of affe coeff pre1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t AFFE_COEFF_SET2_POST1 : 7;
    ///< set2 of affe coeff post1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
    uint32_t AFFE_COEFF_SET2_POST2 : 7;
    ///< set2 of affe coeff post2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_affe_lms_set2_reg_t;

#define PMA_RXWORD_MSG_AFFE_LMS_SET2_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_AFFE_LMS_SET2_RD_MASK (0x7f7f7f7fU)
#define PMA_RXWORD_MSG_AFFE_LMS_SET2_WR_MASK (0x7f7f7f7fU)


///< set2 of affe coeff pre2
#define PMA_RXWORD_MSG_AFFE_LMS_SET2_AFFE_COEFF_SET2_PRE2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_AFFE_LMS_SET2_AFFE_COEFF_SET2_PRE2_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET2_AFFE_COEFF_SET2_PRE2_BF_MSK (0x0000007F)
#define PMA_RXWORD_MSG_AFFE_LMS_SET2_AFFE_COEFF_SET2_PRE2_BF_DEF (0x00000000)

///< set2 of affe coeff pre1
#define PMA_RXWORD_MSG_AFFE_LMS_SET2_AFFE_COEFF_SET2_PRE1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_SET2_AFFE_COEFF_SET2_PRE1_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET2_AFFE_COEFF_SET2_PRE1_BF_MSK (0x00007F00)
#define PMA_RXWORD_MSG_AFFE_LMS_SET2_AFFE_COEFF_SET2_PRE1_BF_DEF (0x00000000)

///< set2 of affe coeff post1
#define PMA_RXWORD_MSG_AFFE_LMS_SET2_AFFE_COEFF_SET2_POST1_BF_OFF (16)
#define PMA_RXWORD_MSG_AFFE_LMS_SET2_AFFE_COEFF_SET2_POST1_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET2_AFFE_COEFF_SET2_POST1_BF_MSK (0x007F0000)
#define PMA_RXWORD_MSG_AFFE_LMS_SET2_AFFE_COEFF_SET2_POST1_BF_DEF (0x00000000)

///< set2 of affe coeff post2
#define PMA_RXWORD_MSG_AFFE_LMS_SET2_AFFE_COEFF_SET2_POST2_BF_OFF (24)
#define PMA_RXWORD_MSG_AFFE_LMS_SET2_AFFE_COEFF_SET2_POST2_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET2_AFFE_COEFF_SET2_POST2_BF_MSK (0x7F000000)
#define PMA_RXWORD_MSG_AFFE_LMS_SET2_AFFE_COEFF_SET2_POST2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_AFFE_LMS_SET3 register description at address offset 0x7a0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/affe_lms_set3
  * placeholder
  */

typedef union {
  struct {
    uint32_t AFFE_COEFF_SET3_PRE2 : 7;
    ///< set3 of affe coeff pre2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t AFFE_COEFF_SET3_PRE1 : 7;
    ///< set3 of affe coeff pre1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t AFFE_COEFF_SET3_POST1 : 7;
    ///< set3 of affe coeff post1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
    uint32_t AFFE_COEFF_SET3_POST2 : 7;
    ///< set3 of affe coeff post2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_affe_lms_set3_reg_t;

#define PMA_RXWORD_MSG_AFFE_LMS_SET3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_AFFE_LMS_SET3_RD_MASK (0x7f7f7f7fU)
#define PMA_RXWORD_MSG_AFFE_LMS_SET3_WR_MASK (0x7f7f7f7fU)


///< set3 of affe coeff pre2
#define PMA_RXWORD_MSG_AFFE_LMS_SET3_AFFE_COEFF_SET3_PRE2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_AFFE_LMS_SET3_AFFE_COEFF_SET3_PRE2_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET3_AFFE_COEFF_SET3_PRE2_BF_MSK (0x0000007F)
#define PMA_RXWORD_MSG_AFFE_LMS_SET3_AFFE_COEFF_SET3_PRE2_BF_DEF (0x00000000)

///< set3 of affe coeff pre1
#define PMA_RXWORD_MSG_AFFE_LMS_SET3_AFFE_COEFF_SET3_PRE1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_SET3_AFFE_COEFF_SET3_PRE1_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET3_AFFE_COEFF_SET3_PRE1_BF_MSK (0x00007F00)
#define PMA_RXWORD_MSG_AFFE_LMS_SET3_AFFE_COEFF_SET3_PRE1_BF_DEF (0x00000000)

///< set3 of affe coeff post1
#define PMA_RXWORD_MSG_AFFE_LMS_SET3_AFFE_COEFF_SET3_POST1_BF_OFF (16)
#define PMA_RXWORD_MSG_AFFE_LMS_SET3_AFFE_COEFF_SET3_POST1_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET3_AFFE_COEFF_SET3_POST1_BF_MSK (0x007F0000)
#define PMA_RXWORD_MSG_AFFE_LMS_SET3_AFFE_COEFF_SET3_POST1_BF_DEF (0x00000000)

///< set3 of affe coeff post2
#define PMA_RXWORD_MSG_AFFE_LMS_SET3_AFFE_COEFF_SET3_POST2_BF_OFF (24)
#define PMA_RXWORD_MSG_AFFE_LMS_SET3_AFFE_COEFF_SET3_POST2_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET3_AFFE_COEFF_SET3_POST2_BF_MSK (0x7F000000)
#define PMA_RXWORD_MSG_AFFE_LMS_SET3_AFFE_COEFF_SET3_POST2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_AFFE_LMS_SET4 register description at address offset 0x7a4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/affe_lms_set4
  * placeholder
  */

typedef union {
  struct {
    uint32_t AFFE_COEFF_SET4_PRE2 : 7;
    ///< set4 of affe coeff pre2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t AFFE_COEFF_SET4_PRE1 : 7;
    ///< set4 of affe coeff pre1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t AFFE_COEFF_SET4_POST1 : 7;
    ///< set4 of affe coeff post1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
    uint32_t AFFE_COEFF_SET4_POST2 : 7;
    ///< set4 of affe coeff post2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_affe_lms_set4_reg_t;

#define PMA_RXWORD_MSG_AFFE_LMS_SET4_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_AFFE_LMS_SET4_RD_MASK (0x7f7f7f7fU)
#define PMA_RXWORD_MSG_AFFE_LMS_SET4_WR_MASK (0x7f7f7f7fU)


///< set4 of affe coeff pre2
#define PMA_RXWORD_MSG_AFFE_LMS_SET4_AFFE_COEFF_SET4_PRE2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_AFFE_LMS_SET4_AFFE_COEFF_SET4_PRE2_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET4_AFFE_COEFF_SET4_PRE2_BF_MSK (0x0000007F)
#define PMA_RXWORD_MSG_AFFE_LMS_SET4_AFFE_COEFF_SET4_PRE2_BF_DEF (0x00000000)

///< set4 of affe coeff pre1
#define PMA_RXWORD_MSG_AFFE_LMS_SET4_AFFE_COEFF_SET4_PRE1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_SET4_AFFE_COEFF_SET4_PRE1_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET4_AFFE_COEFF_SET4_PRE1_BF_MSK (0x00007F00)
#define PMA_RXWORD_MSG_AFFE_LMS_SET4_AFFE_COEFF_SET4_PRE1_BF_DEF (0x00000000)

///< set4 of affe coeff post1
#define PMA_RXWORD_MSG_AFFE_LMS_SET4_AFFE_COEFF_SET4_POST1_BF_OFF (16)
#define PMA_RXWORD_MSG_AFFE_LMS_SET4_AFFE_COEFF_SET4_POST1_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET4_AFFE_COEFF_SET4_POST1_BF_MSK (0x007F0000)
#define PMA_RXWORD_MSG_AFFE_LMS_SET4_AFFE_COEFF_SET4_POST1_BF_DEF (0x00000000)

///< set4 of affe coeff post2
#define PMA_RXWORD_MSG_AFFE_LMS_SET4_AFFE_COEFF_SET4_POST2_BF_OFF (24)
#define PMA_RXWORD_MSG_AFFE_LMS_SET4_AFFE_COEFF_SET4_POST2_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET4_AFFE_COEFF_SET4_POST2_BF_MSK (0x7F000000)
#define PMA_RXWORD_MSG_AFFE_LMS_SET4_AFFE_COEFF_SET4_POST2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_AFFE_LMS_SET5 register description at address offset 0x7a8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/affe_lms_set5
  * placeholder
  */

typedef union {
  struct {
    uint32_t AFFE_COEFF_SET5_PRE2 : 7;
    ///< set5 of affe coeff pre2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t AFFE_COEFF_SET5_PRE1 : 7;
    ///< set5 of affe coeff pre1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t AFFE_COEFF_SET5_POST1 : 7;
    ///< set5 of affe coeff post1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
    uint32_t AFFE_COEFF_SET5_POST2 : 7;
    ///< set5 of affe coeff post2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_affe_lms_set5_reg_t;

#define PMA_RXWORD_MSG_AFFE_LMS_SET5_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_AFFE_LMS_SET5_RD_MASK (0x7f7f7f7fU)
#define PMA_RXWORD_MSG_AFFE_LMS_SET5_WR_MASK (0x7f7f7f7fU)


///< set5 of affe coeff pre2
#define PMA_RXWORD_MSG_AFFE_LMS_SET5_AFFE_COEFF_SET5_PRE2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_AFFE_LMS_SET5_AFFE_COEFF_SET5_PRE2_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET5_AFFE_COEFF_SET5_PRE2_BF_MSK (0x0000007F)
#define PMA_RXWORD_MSG_AFFE_LMS_SET5_AFFE_COEFF_SET5_PRE2_BF_DEF (0x00000000)

///< set5 of affe coeff pre1
#define PMA_RXWORD_MSG_AFFE_LMS_SET5_AFFE_COEFF_SET5_PRE1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_SET5_AFFE_COEFF_SET5_PRE1_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET5_AFFE_COEFF_SET5_PRE1_BF_MSK (0x00007F00)
#define PMA_RXWORD_MSG_AFFE_LMS_SET5_AFFE_COEFF_SET5_PRE1_BF_DEF (0x00000000)

///< set5 of affe coeff post1
#define PMA_RXWORD_MSG_AFFE_LMS_SET5_AFFE_COEFF_SET5_POST1_BF_OFF (16)
#define PMA_RXWORD_MSG_AFFE_LMS_SET5_AFFE_COEFF_SET5_POST1_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET5_AFFE_COEFF_SET5_POST1_BF_MSK (0x007F0000)
#define PMA_RXWORD_MSG_AFFE_LMS_SET5_AFFE_COEFF_SET5_POST1_BF_DEF (0x00000000)

///< set5 of affe coeff post2
#define PMA_RXWORD_MSG_AFFE_LMS_SET5_AFFE_COEFF_SET5_POST2_BF_OFF (24)
#define PMA_RXWORD_MSG_AFFE_LMS_SET5_AFFE_COEFF_SET5_POST2_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET5_AFFE_COEFF_SET5_POST2_BF_MSK (0x7F000000)
#define PMA_RXWORD_MSG_AFFE_LMS_SET5_AFFE_COEFF_SET5_POST2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_AFFE_LMS_SET6 register description at address offset 0x7ac
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/affe_lms_set6
  * placeholder
  */

typedef union {
  struct {
    uint32_t AFFE_COEFF_SET6_PRE2 : 7;
    ///< set6 of affe coeff pre2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t AFFE_COEFF_SET6_PRE1 : 7;
    ///< set6 of affe coeff pre1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t AFFE_COEFF_SET6_POST1 : 7;
    ///< set6 of affe coeff post1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
    uint32_t AFFE_COEFF_SET6_POST2 : 7;
    ///< set6 of affe coeff post2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_affe_lms_set6_reg_t;

#define PMA_RXWORD_MSG_AFFE_LMS_SET6_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_AFFE_LMS_SET6_RD_MASK (0x7f7f7f7fU)
#define PMA_RXWORD_MSG_AFFE_LMS_SET6_WR_MASK (0x7f7f7f7fU)


///< set6 of affe coeff pre2
#define PMA_RXWORD_MSG_AFFE_LMS_SET6_AFFE_COEFF_SET6_PRE2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_AFFE_LMS_SET6_AFFE_COEFF_SET6_PRE2_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET6_AFFE_COEFF_SET6_PRE2_BF_MSK (0x0000007F)
#define PMA_RXWORD_MSG_AFFE_LMS_SET6_AFFE_COEFF_SET6_PRE2_BF_DEF (0x00000000)

///< set6 of affe coeff pre1
#define PMA_RXWORD_MSG_AFFE_LMS_SET6_AFFE_COEFF_SET6_PRE1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_SET6_AFFE_COEFF_SET6_PRE1_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET6_AFFE_COEFF_SET6_PRE1_BF_MSK (0x00007F00)
#define PMA_RXWORD_MSG_AFFE_LMS_SET6_AFFE_COEFF_SET6_PRE1_BF_DEF (0x00000000)

///< set6 of affe coeff post1
#define PMA_RXWORD_MSG_AFFE_LMS_SET6_AFFE_COEFF_SET6_POST1_BF_OFF (16)
#define PMA_RXWORD_MSG_AFFE_LMS_SET6_AFFE_COEFF_SET6_POST1_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET6_AFFE_COEFF_SET6_POST1_BF_MSK (0x007F0000)
#define PMA_RXWORD_MSG_AFFE_LMS_SET6_AFFE_COEFF_SET6_POST1_BF_DEF (0x00000000)

///< set6 of affe coeff post2
#define PMA_RXWORD_MSG_AFFE_LMS_SET6_AFFE_COEFF_SET6_POST2_BF_OFF (24)
#define PMA_RXWORD_MSG_AFFE_LMS_SET6_AFFE_COEFF_SET6_POST2_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET6_AFFE_COEFF_SET6_POST2_BF_MSK (0x7F000000)
#define PMA_RXWORD_MSG_AFFE_LMS_SET6_AFFE_COEFF_SET6_POST2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_AFFE_LMS_SET7 register description at address offset 0x7b0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/affe_lms_set7
  * placeholder
  */

typedef union {
  struct {
    uint32_t AFFE_COEFF_SET7_PRE2 : 7;
    ///< set7 of affe coeff pre2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t AFFE_COEFF_SET7_PRE1 : 7;
    ///< set7 of affe coeff pre1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t AFFE_COEFF_SET7_POST1 : 7;
    ///< set7 of affe coeff post1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
    uint32_t AFFE_COEFF_SET7_POST2 : 7;
    ///< set7 of affe coeff post2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_affe_lms_set7_reg_t;

#define PMA_RXWORD_MSG_AFFE_LMS_SET7_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_AFFE_LMS_SET7_RD_MASK (0x7f7f7f7fU)
#define PMA_RXWORD_MSG_AFFE_LMS_SET7_WR_MASK (0x7f7f7f7fU)


///< set7 of affe coeff pre2
#define PMA_RXWORD_MSG_AFFE_LMS_SET7_AFFE_COEFF_SET7_PRE2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_AFFE_LMS_SET7_AFFE_COEFF_SET7_PRE2_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET7_AFFE_COEFF_SET7_PRE2_BF_MSK (0x0000007F)
#define PMA_RXWORD_MSG_AFFE_LMS_SET7_AFFE_COEFF_SET7_PRE2_BF_DEF (0x00000000)

///< set7 of affe coeff pre1
#define PMA_RXWORD_MSG_AFFE_LMS_SET7_AFFE_COEFF_SET7_PRE1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_SET7_AFFE_COEFF_SET7_PRE1_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET7_AFFE_COEFF_SET7_PRE1_BF_MSK (0x00007F00)
#define PMA_RXWORD_MSG_AFFE_LMS_SET7_AFFE_COEFF_SET7_PRE1_BF_DEF (0x00000000)

///< set7 of affe coeff post1
#define PMA_RXWORD_MSG_AFFE_LMS_SET7_AFFE_COEFF_SET7_POST1_BF_OFF (16)
#define PMA_RXWORD_MSG_AFFE_LMS_SET7_AFFE_COEFF_SET7_POST1_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET7_AFFE_COEFF_SET7_POST1_BF_MSK (0x007F0000)
#define PMA_RXWORD_MSG_AFFE_LMS_SET7_AFFE_COEFF_SET7_POST1_BF_DEF (0x00000000)

///< set7 of affe coeff post2
#define PMA_RXWORD_MSG_AFFE_LMS_SET7_AFFE_COEFF_SET7_POST2_BF_OFF (24)
#define PMA_RXWORD_MSG_AFFE_LMS_SET7_AFFE_COEFF_SET7_POST2_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET7_AFFE_COEFF_SET7_POST2_BF_MSK (0x7F000000)
#define PMA_RXWORD_MSG_AFFE_LMS_SET7_AFFE_COEFF_SET7_POST2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_AFFE_LMS_SET8 register description at address offset 0x7b4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/affe_lms_set8
  * placeholder
  */

typedef union {
  struct {
    uint32_t AFFE_COEFF_SET8_PRE2 : 7;
    ///< set8 of affe coeff pre2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t AFFE_COEFF_SET8_PRE1 : 7;
    ///< set8 of affe coeff pre1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t AFFE_COEFF_SET8_POST1 : 7;
    ///< set8 of affe coeff post1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
    uint32_t AFFE_COEFF_SET8_POST2 : 7;
    ///< set8 of affe coeff post2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_affe_lms_set8_reg_t;

#define PMA_RXWORD_MSG_AFFE_LMS_SET8_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_AFFE_LMS_SET8_RD_MASK (0x7f7f7f7fU)
#define PMA_RXWORD_MSG_AFFE_LMS_SET8_WR_MASK (0x7f7f7f7fU)


///< set8 of affe coeff pre2
#define PMA_RXWORD_MSG_AFFE_LMS_SET8_AFFE_COEFF_SET8_PRE2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_AFFE_LMS_SET8_AFFE_COEFF_SET8_PRE2_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET8_AFFE_COEFF_SET8_PRE2_BF_MSK (0x0000007F)
#define PMA_RXWORD_MSG_AFFE_LMS_SET8_AFFE_COEFF_SET8_PRE2_BF_DEF (0x00000000)

///< set8 of affe coeff pre1
#define PMA_RXWORD_MSG_AFFE_LMS_SET8_AFFE_COEFF_SET8_PRE1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_SET8_AFFE_COEFF_SET8_PRE1_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET8_AFFE_COEFF_SET8_PRE1_BF_MSK (0x00007F00)
#define PMA_RXWORD_MSG_AFFE_LMS_SET8_AFFE_COEFF_SET8_PRE1_BF_DEF (0x00000000)

///< set8 of affe coeff post1
#define PMA_RXWORD_MSG_AFFE_LMS_SET8_AFFE_COEFF_SET8_POST1_BF_OFF (16)
#define PMA_RXWORD_MSG_AFFE_LMS_SET8_AFFE_COEFF_SET8_POST1_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET8_AFFE_COEFF_SET8_POST1_BF_MSK (0x007F0000)
#define PMA_RXWORD_MSG_AFFE_LMS_SET8_AFFE_COEFF_SET8_POST1_BF_DEF (0x00000000)

///< set8 of affe coeff post2
#define PMA_RXWORD_MSG_AFFE_LMS_SET8_AFFE_COEFF_SET8_POST2_BF_OFF (24)
#define PMA_RXWORD_MSG_AFFE_LMS_SET8_AFFE_COEFF_SET8_POST2_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET8_AFFE_COEFF_SET8_POST2_BF_MSK (0x7F000000)
#define PMA_RXWORD_MSG_AFFE_LMS_SET8_AFFE_COEFF_SET8_POST2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_AFFE_LMS_SET9 register description at address offset 0x7b8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/affe_lms_set9
  * placeholder
  */

typedef union {
  struct {
    uint32_t AFFE_COEFF_SET9_PRE2 : 7;
    ///< set9 of affe coeff pre2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t AFFE_COEFF_SET9_PRE1 : 7;
    ///< set9 of affe coeff pre1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t AFFE_COEFF_SET9_POST1 : 7;
    ///< set9 of affe coeff post1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
    uint32_t AFFE_COEFF_SET9_POST2 : 7;
    ///< set9 of affe coeff post2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_affe_lms_set9_reg_t;

#define PMA_RXWORD_MSG_AFFE_LMS_SET9_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_AFFE_LMS_SET9_RD_MASK (0x7f7f7f7fU)
#define PMA_RXWORD_MSG_AFFE_LMS_SET9_WR_MASK (0x7f7f7f7fU)


///< set9 of affe coeff pre2
#define PMA_RXWORD_MSG_AFFE_LMS_SET9_AFFE_COEFF_SET9_PRE2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_AFFE_LMS_SET9_AFFE_COEFF_SET9_PRE2_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET9_AFFE_COEFF_SET9_PRE2_BF_MSK (0x0000007F)
#define PMA_RXWORD_MSG_AFFE_LMS_SET9_AFFE_COEFF_SET9_PRE2_BF_DEF (0x00000000)

///< set9 of affe coeff pre1
#define PMA_RXWORD_MSG_AFFE_LMS_SET9_AFFE_COEFF_SET9_PRE1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_SET9_AFFE_COEFF_SET9_PRE1_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET9_AFFE_COEFF_SET9_PRE1_BF_MSK (0x00007F00)
#define PMA_RXWORD_MSG_AFFE_LMS_SET9_AFFE_COEFF_SET9_PRE1_BF_DEF (0x00000000)

///< set9 of affe coeff post1
#define PMA_RXWORD_MSG_AFFE_LMS_SET9_AFFE_COEFF_SET9_POST1_BF_OFF (16)
#define PMA_RXWORD_MSG_AFFE_LMS_SET9_AFFE_COEFF_SET9_POST1_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET9_AFFE_COEFF_SET9_POST1_BF_MSK (0x007F0000)
#define PMA_RXWORD_MSG_AFFE_LMS_SET9_AFFE_COEFF_SET9_POST1_BF_DEF (0x00000000)

///< set9 of affe coeff post2
#define PMA_RXWORD_MSG_AFFE_LMS_SET9_AFFE_COEFF_SET9_POST2_BF_OFF (24)
#define PMA_RXWORD_MSG_AFFE_LMS_SET9_AFFE_COEFF_SET9_POST2_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET9_AFFE_COEFF_SET9_POST2_BF_MSK (0x7F000000)
#define PMA_RXWORD_MSG_AFFE_LMS_SET9_AFFE_COEFF_SET9_POST2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_AFFE_LMS_SET10 register description at address offset 0x7bc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/affe_lms_set10
  * placeholder
  */

typedef union {
  struct {
    uint32_t AFFE_COEFF_SET10_PRE2 : 7;
    ///< set10 of affe coeff pre2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t AFFE_COEFF_SET10_PRE1 : 7;
    ///< set10 of affe coeff pre1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t AFFE_COEFF_SET10_POST1 : 7;
    ///< set10 of affe coeff post1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
    uint32_t AFFE_COEFF_SET10_POST2 : 7;
    ///< set10 of affe coeff post2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_affe_lms_set10_reg_t;

#define PMA_RXWORD_MSG_AFFE_LMS_SET10_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_AFFE_LMS_SET10_RD_MASK (0x7f7f7f7fU)
#define PMA_RXWORD_MSG_AFFE_LMS_SET10_WR_MASK (0x7f7f7f7fU)


///< set10 of affe coeff pre2
#define PMA_RXWORD_MSG_AFFE_LMS_SET10_AFFE_COEFF_SET10_PRE2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_AFFE_LMS_SET10_AFFE_COEFF_SET10_PRE2_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET10_AFFE_COEFF_SET10_PRE2_BF_MSK (0x0000007F)
#define PMA_RXWORD_MSG_AFFE_LMS_SET10_AFFE_COEFF_SET10_PRE2_BF_DEF (0x00000000)

///< set10 of affe coeff pre1
#define PMA_RXWORD_MSG_AFFE_LMS_SET10_AFFE_COEFF_SET10_PRE1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_SET10_AFFE_COEFF_SET10_PRE1_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET10_AFFE_COEFF_SET10_PRE1_BF_MSK (0x00007F00)
#define PMA_RXWORD_MSG_AFFE_LMS_SET10_AFFE_COEFF_SET10_PRE1_BF_DEF (0x00000000)

///< set10 of affe coeff post1
#define PMA_RXWORD_MSG_AFFE_LMS_SET10_AFFE_COEFF_SET10_POST1_BF_OFF (16)
#define PMA_RXWORD_MSG_AFFE_LMS_SET10_AFFE_COEFF_SET10_POST1_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET10_AFFE_COEFF_SET10_POST1_BF_MSK (0x007F0000)
#define PMA_RXWORD_MSG_AFFE_LMS_SET10_AFFE_COEFF_SET10_POST1_BF_DEF (0x00000000)

///< set10 of affe coeff post2
#define PMA_RXWORD_MSG_AFFE_LMS_SET10_AFFE_COEFF_SET10_POST2_BF_OFF (24)
#define PMA_RXWORD_MSG_AFFE_LMS_SET10_AFFE_COEFF_SET10_POST2_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET10_AFFE_COEFF_SET10_POST2_BF_MSK (0x7F000000)
#define PMA_RXWORD_MSG_AFFE_LMS_SET10_AFFE_COEFF_SET10_POST2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_AFFE_LMS_SET11 register description at address offset 0x7c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/affe_lms_set11
  * placeholder
  */

typedef union {
  struct {
    uint32_t AFFE_COEFF_SET11_PRE2 : 7;
    ///< set11 of affe coeff pre2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t AFFE_COEFF_SET11_PRE1 : 7;
    ///< set11 of affe coeff pre1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t AFFE_COEFF_SET11_POST1 : 7;
    ///< set11 of affe coeff post1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
    uint32_t AFFE_COEFF_SET11_POST2 : 7;
    ///< set11 of affe coeff post2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_affe_lms_set11_reg_t;

#define PMA_RXWORD_MSG_AFFE_LMS_SET11_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_AFFE_LMS_SET11_RD_MASK (0x7f7f7f7fU)
#define PMA_RXWORD_MSG_AFFE_LMS_SET11_WR_MASK (0x7f7f7f7fU)


///< set11 of affe coeff pre2
#define PMA_RXWORD_MSG_AFFE_LMS_SET11_AFFE_COEFF_SET11_PRE2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_AFFE_LMS_SET11_AFFE_COEFF_SET11_PRE2_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET11_AFFE_COEFF_SET11_PRE2_BF_MSK (0x0000007F)
#define PMA_RXWORD_MSG_AFFE_LMS_SET11_AFFE_COEFF_SET11_PRE2_BF_DEF (0x00000000)

///< set11 of affe coeff pre1
#define PMA_RXWORD_MSG_AFFE_LMS_SET11_AFFE_COEFF_SET11_PRE1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_SET11_AFFE_COEFF_SET11_PRE1_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET11_AFFE_COEFF_SET11_PRE1_BF_MSK (0x00007F00)
#define PMA_RXWORD_MSG_AFFE_LMS_SET11_AFFE_COEFF_SET11_PRE1_BF_DEF (0x00000000)

///< set11 of affe coeff post1
#define PMA_RXWORD_MSG_AFFE_LMS_SET11_AFFE_COEFF_SET11_POST1_BF_OFF (16)
#define PMA_RXWORD_MSG_AFFE_LMS_SET11_AFFE_COEFF_SET11_POST1_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET11_AFFE_COEFF_SET11_POST1_BF_MSK (0x007F0000)
#define PMA_RXWORD_MSG_AFFE_LMS_SET11_AFFE_COEFF_SET11_POST1_BF_DEF (0x00000000)

///< set11 of affe coeff post2
#define PMA_RXWORD_MSG_AFFE_LMS_SET11_AFFE_COEFF_SET11_POST2_BF_OFF (24)
#define PMA_RXWORD_MSG_AFFE_LMS_SET11_AFFE_COEFF_SET11_POST2_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET11_AFFE_COEFF_SET11_POST2_BF_MSK (0x7F000000)
#define PMA_RXWORD_MSG_AFFE_LMS_SET11_AFFE_COEFF_SET11_POST2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_AFFE_LMS_SET12 register description at address offset 0x7c4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/affe_lms_set12
  * placeholder
  */

typedef union {
  struct {
    uint32_t AFFE_COEFF_SET12_PRE2 : 7;
    ///< set12 of affe coeff pre2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t AFFE_COEFF_SET12_PRE1 : 7;
    ///< set12 of affe coeff pre1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t AFFE_COEFF_SET12_POST1 : 7;
    ///< set12 of affe coeff post1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
    uint32_t AFFE_COEFF_SET12_POST2 : 7;
    ///< set12 of affe coeff post2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_affe_lms_set12_reg_t;

#define PMA_RXWORD_MSG_AFFE_LMS_SET12_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_AFFE_LMS_SET12_RD_MASK (0x7f7f7f7fU)
#define PMA_RXWORD_MSG_AFFE_LMS_SET12_WR_MASK (0x7f7f7f7fU)


///< set12 of affe coeff pre2
#define PMA_RXWORD_MSG_AFFE_LMS_SET12_AFFE_COEFF_SET12_PRE2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_AFFE_LMS_SET12_AFFE_COEFF_SET12_PRE2_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET12_AFFE_COEFF_SET12_PRE2_BF_MSK (0x0000007F)
#define PMA_RXWORD_MSG_AFFE_LMS_SET12_AFFE_COEFF_SET12_PRE2_BF_DEF (0x00000000)

///< set12 of affe coeff pre1
#define PMA_RXWORD_MSG_AFFE_LMS_SET12_AFFE_COEFF_SET12_PRE1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_SET12_AFFE_COEFF_SET12_PRE1_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET12_AFFE_COEFF_SET12_PRE1_BF_MSK (0x00007F00)
#define PMA_RXWORD_MSG_AFFE_LMS_SET12_AFFE_COEFF_SET12_PRE1_BF_DEF (0x00000000)

///< set12 of affe coeff post1
#define PMA_RXWORD_MSG_AFFE_LMS_SET12_AFFE_COEFF_SET12_POST1_BF_OFF (16)
#define PMA_RXWORD_MSG_AFFE_LMS_SET12_AFFE_COEFF_SET12_POST1_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET12_AFFE_COEFF_SET12_POST1_BF_MSK (0x007F0000)
#define PMA_RXWORD_MSG_AFFE_LMS_SET12_AFFE_COEFF_SET12_POST1_BF_DEF (0x00000000)

///< set12 of affe coeff post2
#define PMA_RXWORD_MSG_AFFE_LMS_SET12_AFFE_COEFF_SET12_POST2_BF_OFF (24)
#define PMA_RXWORD_MSG_AFFE_LMS_SET12_AFFE_COEFF_SET12_POST2_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET12_AFFE_COEFF_SET12_POST2_BF_MSK (0x7F000000)
#define PMA_RXWORD_MSG_AFFE_LMS_SET12_AFFE_COEFF_SET12_POST2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_AFFE_LMS_SET13 register description at address offset 0x7c8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/affe_lms_set13
  * placeholder
  */

typedef union {
  struct {
    uint32_t AFFE_COEFF_SET13_PRE2 : 7;
    ///< set13 of affe coeff pre2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t AFFE_COEFF_SET13_PRE1 : 7;
    ///< set13 of affe coeff pre1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t AFFE_COEFF_SET13_POST1 : 7;
    ///< set13 of affe coeff post1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
    uint32_t AFFE_COEFF_SET13_POST2 : 7;
    ///< set13 of affe coeff post2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_affe_lms_set13_reg_t;

#define PMA_RXWORD_MSG_AFFE_LMS_SET13_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_AFFE_LMS_SET13_RD_MASK (0x7f7f7f7fU)
#define PMA_RXWORD_MSG_AFFE_LMS_SET13_WR_MASK (0x7f7f7f7fU)


///< set13 of affe coeff pre2
#define PMA_RXWORD_MSG_AFFE_LMS_SET13_AFFE_COEFF_SET13_PRE2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_AFFE_LMS_SET13_AFFE_COEFF_SET13_PRE2_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET13_AFFE_COEFF_SET13_PRE2_BF_MSK (0x0000007F)
#define PMA_RXWORD_MSG_AFFE_LMS_SET13_AFFE_COEFF_SET13_PRE2_BF_DEF (0x00000000)

///< set13 of affe coeff pre1
#define PMA_RXWORD_MSG_AFFE_LMS_SET13_AFFE_COEFF_SET13_PRE1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_SET13_AFFE_COEFF_SET13_PRE1_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET13_AFFE_COEFF_SET13_PRE1_BF_MSK (0x00007F00)
#define PMA_RXWORD_MSG_AFFE_LMS_SET13_AFFE_COEFF_SET13_PRE1_BF_DEF (0x00000000)

///< set13 of affe coeff post1
#define PMA_RXWORD_MSG_AFFE_LMS_SET13_AFFE_COEFF_SET13_POST1_BF_OFF (16)
#define PMA_RXWORD_MSG_AFFE_LMS_SET13_AFFE_COEFF_SET13_POST1_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET13_AFFE_COEFF_SET13_POST1_BF_MSK (0x007F0000)
#define PMA_RXWORD_MSG_AFFE_LMS_SET13_AFFE_COEFF_SET13_POST1_BF_DEF (0x00000000)

///< set13 of affe coeff post2
#define PMA_RXWORD_MSG_AFFE_LMS_SET13_AFFE_COEFF_SET13_POST2_BF_OFF (24)
#define PMA_RXWORD_MSG_AFFE_LMS_SET13_AFFE_COEFF_SET13_POST2_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET13_AFFE_COEFF_SET13_POST2_BF_MSK (0x7F000000)
#define PMA_RXWORD_MSG_AFFE_LMS_SET13_AFFE_COEFF_SET13_POST2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_AFFE_LMS_SET14 register description at address offset 0x7cc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/affe_lms_set14
  * placeholder
  */

typedef union {
  struct {
    uint32_t AFFE_COEFF_SET14_PRE2 : 7;
    ///< set14 of affe coeff pre2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t AFFE_COEFF_SET14_PRE1 : 7;
    ///< set14 of affe coeff pre1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t AFFE_COEFF_SET14_POST1 : 7;
    ///< set14 of affe coeff post1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
    uint32_t AFFE_COEFF_SET14_POST2 : 7;
    ///< set14 of affe coeff post2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_affe_lms_set14_reg_t;

#define PMA_RXWORD_MSG_AFFE_LMS_SET14_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_AFFE_LMS_SET14_RD_MASK (0x7f7f7f7fU)
#define PMA_RXWORD_MSG_AFFE_LMS_SET14_WR_MASK (0x7f7f7f7fU)


///< set14 of affe coeff pre2
#define PMA_RXWORD_MSG_AFFE_LMS_SET14_AFFE_COEFF_SET14_PRE2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_AFFE_LMS_SET14_AFFE_COEFF_SET14_PRE2_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET14_AFFE_COEFF_SET14_PRE2_BF_MSK (0x0000007F)
#define PMA_RXWORD_MSG_AFFE_LMS_SET14_AFFE_COEFF_SET14_PRE2_BF_DEF (0x00000000)

///< set14 of affe coeff pre1
#define PMA_RXWORD_MSG_AFFE_LMS_SET14_AFFE_COEFF_SET14_PRE1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_SET14_AFFE_COEFF_SET14_PRE1_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET14_AFFE_COEFF_SET14_PRE1_BF_MSK (0x00007F00)
#define PMA_RXWORD_MSG_AFFE_LMS_SET14_AFFE_COEFF_SET14_PRE1_BF_DEF (0x00000000)

///< set14 of affe coeff post1
#define PMA_RXWORD_MSG_AFFE_LMS_SET14_AFFE_COEFF_SET14_POST1_BF_OFF (16)
#define PMA_RXWORD_MSG_AFFE_LMS_SET14_AFFE_COEFF_SET14_POST1_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET14_AFFE_COEFF_SET14_POST1_BF_MSK (0x007F0000)
#define PMA_RXWORD_MSG_AFFE_LMS_SET14_AFFE_COEFF_SET14_POST1_BF_DEF (0x00000000)

///< set14 of affe coeff post2
#define PMA_RXWORD_MSG_AFFE_LMS_SET14_AFFE_COEFF_SET14_POST2_BF_OFF (24)
#define PMA_RXWORD_MSG_AFFE_LMS_SET14_AFFE_COEFF_SET14_POST2_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET14_AFFE_COEFF_SET14_POST2_BF_MSK (0x7F000000)
#define PMA_RXWORD_MSG_AFFE_LMS_SET14_AFFE_COEFF_SET14_POST2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_AFFE_LMS_SET15 register description at address offset 0x7d0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/affe_lms_set15
  * placeholder
  */

typedef union {
  struct {
    uint32_t AFFE_COEFF_SET15_PRE2 : 7;
    ///< set15 of affe coeff pre2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t AFFE_COEFF_SET15_PRE1 : 7;
    ///< set15 of affe coeff pre1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t AFFE_COEFF_SET15_POST1 : 7;
    ///< set15 of affe coeff post1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
    uint32_t AFFE_COEFF_SET15_POST2 : 7;
    ///< set15 of affe coeff post2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_affe_lms_set15_reg_t;

#define PMA_RXWORD_MSG_AFFE_LMS_SET15_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_AFFE_LMS_SET15_RD_MASK (0x7f7f7f7fU)
#define PMA_RXWORD_MSG_AFFE_LMS_SET15_WR_MASK (0x7f7f7f7fU)


///< set15 of affe coeff pre2
#define PMA_RXWORD_MSG_AFFE_LMS_SET15_AFFE_COEFF_SET15_PRE2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_AFFE_LMS_SET15_AFFE_COEFF_SET15_PRE2_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET15_AFFE_COEFF_SET15_PRE2_BF_MSK (0x0000007F)
#define PMA_RXWORD_MSG_AFFE_LMS_SET15_AFFE_COEFF_SET15_PRE2_BF_DEF (0x00000000)

///< set15 of affe coeff pre1
#define PMA_RXWORD_MSG_AFFE_LMS_SET15_AFFE_COEFF_SET15_PRE1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_SET15_AFFE_COEFF_SET15_PRE1_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET15_AFFE_COEFF_SET15_PRE1_BF_MSK (0x00007F00)
#define PMA_RXWORD_MSG_AFFE_LMS_SET15_AFFE_COEFF_SET15_PRE1_BF_DEF (0x00000000)

///< set15 of affe coeff post1
#define PMA_RXWORD_MSG_AFFE_LMS_SET15_AFFE_COEFF_SET15_POST1_BF_OFF (16)
#define PMA_RXWORD_MSG_AFFE_LMS_SET15_AFFE_COEFF_SET15_POST1_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET15_AFFE_COEFF_SET15_POST1_BF_MSK (0x007F0000)
#define PMA_RXWORD_MSG_AFFE_LMS_SET15_AFFE_COEFF_SET15_POST1_BF_DEF (0x00000000)

///< set15 of affe coeff post2
#define PMA_RXWORD_MSG_AFFE_LMS_SET15_AFFE_COEFF_SET15_POST2_BF_OFF (24)
#define PMA_RXWORD_MSG_AFFE_LMS_SET15_AFFE_COEFF_SET15_POST2_BF_WID ( 7)
#define PMA_RXWORD_MSG_AFFE_LMS_SET15_AFFE_COEFF_SET15_POST2_BF_MSK (0x7F000000)
#define PMA_RXWORD_MSG_AFFE_LMS_SET15_AFFE_COEFF_SET15_POST2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_AFFE_LMS_FRAC_SET0 register description at address offset 0x7d4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/affe_lms_frac_set0
  * placeholder
  */

typedef union {
  struct {
    uint32_t AFFE_COEFF_SET0_FRAC_PRE2 : 8;
    ///< set0 of affe fractional coeff pre2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t AFFE_COEFF_SET0_FRAC_PRE1 : 8;
    ///< set0 of affe fractional coeff pre1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t AFFE_COEFF_SET0_FRAC_POST1 : 8;
    ///< set0 of affe fractional coeff post1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t AFFE_COEFF_SET0_FRAC_POST2 : 8;
    ///< set0 of affe fractional coeff post2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_affe_lms_frac_set0_reg_t;

#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET0_WR_MASK (0xffffffffU)


///< set0 of affe fractional coeff pre2
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET0_AFFE_COEFF_SET0_FRAC_PRE2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET0_AFFE_COEFF_SET0_FRAC_PRE2_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET0_AFFE_COEFF_SET0_FRAC_PRE2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET0_AFFE_COEFF_SET0_FRAC_PRE2_BF_DEF (0x00000000)

///< set0 of affe fractional coeff pre1
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET0_AFFE_COEFF_SET0_FRAC_PRE1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET0_AFFE_COEFF_SET0_FRAC_PRE1_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET0_AFFE_COEFF_SET0_FRAC_PRE1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET0_AFFE_COEFF_SET0_FRAC_PRE1_BF_DEF (0x00000000)

///< set0 of affe fractional coeff post1
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET0_AFFE_COEFF_SET0_FRAC_POST1_BF_OFF (16)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET0_AFFE_COEFF_SET0_FRAC_POST1_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET0_AFFE_COEFF_SET0_FRAC_POST1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET0_AFFE_COEFF_SET0_FRAC_POST1_BF_DEF (0x00000000)

///< set0 of affe fractional coeff post2
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET0_AFFE_COEFF_SET0_FRAC_POST2_BF_OFF (24)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET0_AFFE_COEFF_SET0_FRAC_POST2_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET0_AFFE_COEFF_SET0_FRAC_POST2_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET0_AFFE_COEFF_SET0_FRAC_POST2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_AFFE_LMS_FRAC_SET1 register description at address offset 0x7d8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/affe_lms_frac_set1
  * placeholder
  */

typedef union {
  struct {
    uint32_t AFFE_COEFF_SET1_FRAC_PRE2 : 8;
    ///< set1 of affe fractional coeff pre2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t AFFE_COEFF_SET1_FRAC_PRE1 : 8;
    ///< set1 of affe fractional coeff pre1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t AFFE_COEFF_SET1_FRAC_POST1 : 8;
    ///< set1 of affe fractional coeff post1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t AFFE_COEFF_SET1_FRAC_POST2 : 8;
    ///< set1 of affe fractional coeff post2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_affe_lms_frac_set1_reg_t;

#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET1_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET1_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET1_WR_MASK (0xffffffffU)


///< set1 of affe fractional coeff pre2
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET1_AFFE_COEFF_SET1_FRAC_PRE2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET1_AFFE_COEFF_SET1_FRAC_PRE2_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET1_AFFE_COEFF_SET1_FRAC_PRE2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET1_AFFE_COEFF_SET1_FRAC_PRE2_BF_DEF (0x00000000)

///< set1 of affe fractional coeff pre1
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET1_AFFE_COEFF_SET1_FRAC_PRE1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET1_AFFE_COEFF_SET1_FRAC_PRE1_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET1_AFFE_COEFF_SET1_FRAC_PRE1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET1_AFFE_COEFF_SET1_FRAC_PRE1_BF_DEF (0x00000000)

///< set1 of affe fractional coeff post1
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET1_AFFE_COEFF_SET1_FRAC_POST1_BF_OFF (16)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET1_AFFE_COEFF_SET1_FRAC_POST1_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET1_AFFE_COEFF_SET1_FRAC_POST1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET1_AFFE_COEFF_SET1_FRAC_POST1_BF_DEF (0x00000000)

///< set1 of affe fractional coeff post2
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET1_AFFE_COEFF_SET1_FRAC_POST2_BF_OFF (24)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET1_AFFE_COEFF_SET1_FRAC_POST2_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET1_AFFE_COEFF_SET1_FRAC_POST2_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET1_AFFE_COEFF_SET1_FRAC_POST2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_AFFE_LMS_FRAC_SET2 register description at address offset 0x7dc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/affe_lms_frac_set2
  * placeholder
  */

typedef union {
  struct {
    uint32_t AFFE_COEFF_SET2_FRAC_PRE2 : 8;
    ///< set2 of affe fractional coeff pre2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t AFFE_COEFF_SET2_FRAC_PRE1 : 8;
    ///< set2 of affe fractional coeff pre1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t AFFE_COEFF_SET2_FRAC_POST1 : 8;
    ///< set2 of affe fractional coeff post1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t AFFE_COEFF_SET2_FRAC_POST2 : 8;
    ///< set2 of affe fractional coeff post2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_affe_lms_frac_set2_reg_t;

#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET2_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET2_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET2_WR_MASK (0xffffffffU)


///< set2 of affe fractional coeff pre2
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET2_AFFE_COEFF_SET2_FRAC_PRE2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET2_AFFE_COEFF_SET2_FRAC_PRE2_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET2_AFFE_COEFF_SET2_FRAC_PRE2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET2_AFFE_COEFF_SET2_FRAC_PRE2_BF_DEF (0x00000000)

///< set2 of affe fractional coeff pre1
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET2_AFFE_COEFF_SET2_FRAC_PRE1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET2_AFFE_COEFF_SET2_FRAC_PRE1_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET2_AFFE_COEFF_SET2_FRAC_PRE1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET2_AFFE_COEFF_SET2_FRAC_PRE1_BF_DEF (0x00000000)

///< set2 of affe fractional coeff post1
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET2_AFFE_COEFF_SET2_FRAC_POST1_BF_OFF (16)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET2_AFFE_COEFF_SET2_FRAC_POST1_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET2_AFFE_COEFF_SET2_FRAC_POST1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET2_AFFE_COEFF_SET2_FRAC_POST1_BF_DEF (0x00000000)

///< set2 of affe fractional coeff post2
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET2_AFFE_COEFF_SET2_FRAC_POST2_BF_OFF (24)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET2_AFFE_COEFF_SET2_FRAC_POST2_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET2_AFFE_COEFF_SET2_FRAC_POST2_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET2_AFFE_COEFF_SET2_FRAC_POST2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_AFFE_LMS_FRAC_SET3 register description at address offset 0x7e0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/affe_lms_frac_set3
  * placeholder
  */

typedef union {
  struct {
    uint32_t AFFE_COEFF_SET3_FRAC_PRE2 : 8;
    ///< set3 of affe fractional coeff pre2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t AFFE_COEFF_SET3_FRAC_PRE1 : 8;
    ///< set3 of affe fractional coeff pre1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t AFFE_COEFF_SET3_FRAC_POST1 : 8;
    ///< set3 of affe fractional coeff post1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t AFFE_COEFF_SET3_FRAC_POST2 : 8;
    ///< set3 of affe fractional coeff post2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_affe_lms_frac_set3_reg_t;

#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET3_WR_MASK (0xffffffffU)


///< set3 of affe fractional coeff pre2
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET3_AFFE_COEFF_SET3_FRAC_PRE2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET3_AFFE_COEFF_SET3_FRAC_PRE2_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET3_AFFE_COEFF_SET3_FRAC_PRE2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET3_AFFE_COEFF_SET3_FRAC_PRE2_BF_DEF (0x00000000)

///< set3 of affe fractional coeff pre1
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET3_AFFE_COEFF_SET3_FRAC_PRE1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET3_AFFE_COEFF_SET3_FRAC_PRE1_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET3_AFFE_COEFF_SET3_FRAC_PRE1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET3_AFFE_COEFF_SET3_FRAC_PRE1_BF_DEF (0x00000000)

///< set3 of affe fractional coeff post1
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET3_AFFE_COEFF_SET3_FRAC_POST1_BF_OFF (16)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET3_AFFE_COEFF_SET3_FRAC_POST1_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET3_AFFE_COEFF_SET3_FRAC_POST1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET3_AFFE_COEFF_SET3_FRAC_POST1_BF_DEF (0x00000000)

///< set3 of affe fractional coeff post2
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET3_AFFE_COEFF_SET3_FRAC_POST2_BF_OFF (24)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET3_AFFE_COEFF_SET3_FRAC_POST2_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET3_AFFE_COEFF_SET3_FRAC_POST2_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET3_AFFE_COEFF_SET3_FRAC_POST2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_AFFE_LMS_FRAC_SET4 register description at address offset 0x7e4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/affe_lms_frac_set4
  * placeholder
  */

typedef union {
  struct {
    uint32_t AFFE_COEFF_SET4_FRAC_PRE2 : 8;
    ///< set4 of affe fractional coeff pre2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t AFFE_COEFF_SET4_FRAC_PRE1 : 8;
    ///< set4 of affe fractional coeff pre1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t AFFE_COEFF_SET4_FRAC_POST1 : 8;
    ///< set4 of affe fractional coeff post1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t AFFE_COEFF_SET4_FRAC_POST2 : 8;
    ///< set4 of affe fractional coeff post2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_affe_lms_frac_set4_reg_t;

#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET4_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET4_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET4_WR_MASK (0xffffffffU)


///< set4 of affe fractional coeff pre2
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET4_AFFE_COEFF_SET4_FRAC_PRE2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET4_AFFE_COEFF_SET4_FRAC_PRE2_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET4_AFFE_COEFF_SET4_FRAC_PRE2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET4_AFFE_COEFF_SET4_FRAC_PRE2_BF_DEF (0x00000000)

///< set4 of affe fractional coeff pre1
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET4_AFFE_COEFF_SET4_FRAC_PRE1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET4_AFFE_COEFF_SET4_FRAC_PRE1_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET4_AFFE_COEFF_SET4_FRAC_PRE1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET4_AFFE_COEFF_SET4_FRAC_PRE1_BF_DEF (0x00000000)

///< set4 of affe fractional coeff post1
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET4_AFFE_COEFF_SET4_FRAC_POST1_BF_OFF (16)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET4_AFFE_COEFF_SET4_FRAC_POST1_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET4_AFFE_COEFF_SET4_FRAC_POST1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET4_AFFE_COEFF_SET4_FRAC_POST1_BF_DEF (0x00000000)

///< set4 of affe fractional coeff post2
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET4_AFFE_COEFF_SET4_FRAC_POST2_BF_OFF (24)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET4_AFFE_COEFF_SET4_FRAC_POST2_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET4_AFFE_COEFF_SET4_FRAC_POST2_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET4_AFFE_COEFF_SET4_FRAC_POST2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_AFFE_LMS_FRAC_SET5 register description at address offset 0x7e8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/affe_lms_frac_set5
  * placeholder
  */

typedef union {
  struct {
    uint32_t AFFE_COEFF_SET5_FRAC_PRE2 : 8;
    ///< set5 of affe fractional coeff pre2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t AFFE_COEFF_SET5_FRAC_PRE1 : 8;
    ///< set5 of affe fractional coeff pre1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t AFFE_COEFF_SET5_FRAC_POST1 : 8;
    ///< set5 of affe fractional coeff post1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t AFFE_COEFF_SET5_FRAC_POST2 : 8;
    ///< set5 of affe fractional coeff post2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_affe_lms_frac_set5_reg_t;

#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET5_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET5_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET5_WR_MASK (0xffffffffU)


///< set5 of affe fractional coeff pre2
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET5_AFFE_COEFF_SET5_FRAC_PRE2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET5_AFFE_COEFF_SET5_FRAC_PRE2_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET5_AFFE_COEFF_SET5_FRAC_PRE2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET5_AFFE_COEFF_SET5_FRAC_PRE2_BF_DEF (0x00000000)

///< set5 of affe fractional coeff pre1
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET5_AFFE_COEFF_SET5_FRAC_PRE1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET5_AFFE_COEFF_SET5_FRAC_PRE1_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET5_AFFE_COEFF_SET5_FRAC_PRE1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET5_AFFE_COEFF_SET5_FRAC_PRE1_BF_DEF (0x00000000)

///< set5 of affe fractional coeff post1
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET5_AFFE_COEFF_SET5_FRAC_POST1_BF_OFF (16)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET5_AFFE_COEFF_SET5_FRAC_POST1_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET5_AFFE_COEFF_SET5_FRAC_POST1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET5_AFFE_COEFF_SET5_FRAC_POST1_BF_DEF (0x00000000)

///< set5 of affe fractional coeff post2
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET5_AFFE_COEFF_SET5_FRAC_POST2_BF_OFF (24)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET5_AFFE_COEFF_SET5_FRAC_POST2_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET5_AFFE_COEFF_SET5_FRAC_POST2_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET5_AFFE_COEFF_SET5_FRAC_POST2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_AFFE_LMS_FRAC_SET6 register description at address offset 0x7ec
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/affe_lms_frac_set6
  * placeholder
  */

typedef union {
  struct {
    uint32_t AFFE_COEFF_SET6_FRAC_PRE2 : 8;
    ///< set6 of affe fractional coeff pre2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t AFFE_COEFF_SET6_FRAC_PRE1 : 8;
    ///< set6 of affe fractional coeff pre1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t AFFE_COEFF_SET6_FRAC_POST1 : 8;
    ///< set6 of affe fractional coeff post1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t AFFE_COEFF_SET6_FRAC_POST2 : 8;
    ///< set6 of affe fractional coeff post2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_affe_lms_frac_set6_reg_t;

#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET6_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET6_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET6_WR_MASK (0xffffffffU)


///< set6 of affe fractional coeff pre2
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET6_AFFE_COEFF_SET6_FRAC_PRE2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET6_AFFE_COEFF_SET6_FRAC_PRE2_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET6_AFFE_COEFF_SET6_FRAC_PRE2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET6_AFFE_COEFF_SET6_FRAC_PRE2_BF_DEF (0x00000000)

///< set6 of affe fractional coeff pre1
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET6_AFFE_COEFF_SET6_FRAC_PRE1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET6_AFFE_COEFF_SET6_FRAC_PRE1_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET6_AFFE_COEFF_SET6_FRAC_PRE1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET6_AFFE_COEFF_SET6_FRAC_PRE1_BF_DEF (0x00000000)

///< set6 of affe fractional coeff post1
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET6_AFFE_COEFF_SET6_FRAC_POST1_BF_OFF (16)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET6_AFFE_COEFF_SET6_FRAC_POST1_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET6_AFFE_COEFF_SET6_FRAC_POST1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET6_AFFE_COEFF_SET6_FRAC_POST1_BF_DEF (0x00000000)

///< set6 of affe fractional coeff post2
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET6_AFFE_COEFF_SET6_FRAC_POST2_BF_OFF (24)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET6_AFFE_COEFF_SET6_FRAC_POST2_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET6_AFFE_COEFF_SET6_FRAC_POST2_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET6_AFFE_COEFF_SET6_FRAC_POST2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_AFFE_LMS_FRAC_SET7 register description at address offset 0x7f0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/affe_lms_frac_set7
  * placeholder
  */

typedef union {
  struct {
    uint32_t AFFE_COEFF_SET7_FRAC_PRE2 : 8;
    ///< set7 of affe fractional coeff pre2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t AFFE_COEFF_SET7_FRAC_PRE1 : 8;
    ///< set7 of affe fractional coeff pre1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t AFFE_COEFF_SET7_FRAC_POST1 : 8;
    ///< set7 of affe fractional coeff post1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t AFFE_COEFF_SET7_FRAC_POST2 : 8;
    ///< set7 of affe fractional coeff post2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_affe_lms_frac_set7_reg_t;

#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET7_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET7_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET7_WR_MASK (0xffffffffU)


///< set7 of affe fractional coeff pre2
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET7_AFFE_COEFF_SET7_FRAC_PRE2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET7_AFFE_COEFF_SET7_FRAC_PRE2_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET7_AFFE_COEFF_SET7_FRAC_PRE2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET7_AFFE_COEFF_SET7_FRAC_PRE2_BF_DEF (0x00000000)

///< set7 of affe fractional coeff pre1
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET7_AFFE_COEFF_SET7_FRAC_PRE1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET7_AFFE_COEFF_SET7_FRAC_PRE1_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET7_AFFE_COEFF_SET7_FRAC_PRE1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET7_AFFE_COEFF_SET7_FRAC_PRE1_BF_DEF (0x00000000)

///< set7 of affe fractional coeff post1
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET7_AFFE_COEFF_SET7_FRAC_POST1_BF_OFF (16)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET7_AFFE_COEFF_SET7_FRAC_POST1_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET7_AFFE_COEFF_SET7_FRAC_POST1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET7_AFFE_COEFF_SET7_FRAC_POST1_BF_DEF (0x00000000)

///< set7 of affe fractional coeff post2
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET7_AFFE_COEFF_SET7_FRAC_POST2_BF_OFF (24)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET7_AFFE_COEFF_SET7_FRAC_POST2_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET7_AFFE_COEFF_SET7_FRAC_POST2_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET7_AFFE_COEFF_SET7_FRAC_POST2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_AFFE_LMS_FRAC_SET8 register description at address offset 0x7f4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/affe_lms_frac_set8
  * placeholder
  */

typedef union {
  struct {
    uint32_t AFFE_COEFF_SET8_FRAC_PRE2 : 8;
    ///< set8 of affe fractional coeff pre2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t AFFE_COEFF_SET8_FRAC_PRE1 : 8;
    ///< set8 of affe fractional coeff pre1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t AFFE_COEFF_SET8_FRAC_POST1 : 8;
    ///< set8 of affe fractional coeff post1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t AFFE_COEFF_SET8_FRAC_POST2 : 8;
    ///< set8 of affe fractional coeff post2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_affe_lms_frac_set8_reg_t;

#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET8_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET8_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET8_WR_MASK (0xffffffffU)


///< set8 of affe fractional coeff pre2
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET8_AFFE_COEFF_SET8_FRAC_PRE2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET8_AFFE_COEFF_SET8_FRAC_PRE2_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET8_AFFE_COEFF_SET8_FRAC_PRE2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET8_AFFE_COEFF_SET8_FRAC_PRE2_BF_DEF (0x00000000)

///< set8 of affe fractional coeff pre1
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET8_AFFE_COEFF_SET8_FRAC_PRE1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET8_AFFE_COEFF_SET8_FRAC_PRE1_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET8_AFFE_COEFF_SET8_FRAC_PRE1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET8_AFFE_COEFF_SET8_FRAC_PRE1_BF_DEF (0x00000000)

///< set8 of affe fractional coeff post1
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET8_AFFE_COEFF_SET8_FRAC_POST1_BF_OFF (16)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET8_AFFE_COEFF_SET8_FRAC_POST1_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET8_AFFE_COEFF_SET8_FRAC_POST1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET8_AFFE_COEFF_SET8_FRAC_POST1_BF_DEF (0x00000000)

///< set8 of affe fractional coeff post2
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET8_AFFE_COEFF_SET8_FRAC_POST2_BF_OFF (24)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET8_AFFE_COEFF_SET8_FRAC_POST2_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET8_AFFE_COEFF_SET8_FRAC_POST2_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET8_AFFE_COEFF_SET8_FRAC_POST2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_AFFE_LMS_FRAC_SET9 register description at address offset 0x7f8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/affe_lms_frac_set9
  * placeholder
  */

typedef union {
  struct {
    uint32_t AFFE_COEFF_SET9_FRAC_PRE2 : 8;
    ///< set9 of affe fractional coeff pre2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t AFFE_COEFF_SET9_FRAC_PRE1 : 8;
    ///< set9 of affe fractional coeff pre1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t AFFE_COEFF_SET9_FRAC_POST1 : 8;
    ///< set9 of affe fractional coeff post1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t AFFE_COEFF_SET9_FRAC_POST2 : 8;
    ///< set9 of affe fractional coeff post2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_affe_lms_frac_set9_reg_t;

#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET9_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET9_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET9_WR_MASK (0xffffffffU)


///< set9 of affe fractional coeff pre2
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET9_AFFE_COEFF_SET9_FRAC_PRE2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET9_AFFE_COEFF_SET9_FRAC_PRE2_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET9_AFFE_COEFF_SET9_FRAC_PRE2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET9_AFFE_COEFF_SET9_FRAC_PRE2_BF_DEF (0x00000000)

///< set9 of affe fractional coeff pre1
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET9_AFFE_COEFF_SET9_FRAC_PRE1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET9_AFFE_COEFF_SET9_FRAC_PRE1_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET9_AFFE_COEFF_SET9_FRAC_PRE1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET9_AFFE_COEFF_SET9_FRAC_PRE1_BF_DEF (0x00000000)

///< set9 of affe fractional coeff post1
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET9_AFFE_COEFF_SET9_FRAC_POST1_BF_OFF (16)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET9_AFFE_COEFF_SET9_FRAC_POST1_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET9_AFFE_COEFF_SET9_FRAC_POST1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET9_AFFE_COEFF_SET9_FRAC_POST1_BF_DEF (0x00000000)

///< set9 of affe fractional coeff post2
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET9_AFFE_COEFF_SET9_FRAC_POST2_BF_OFF (24)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET9_AFFE_COEFF_SET9_FRAC_POST2_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET9_AFFE_COEFF_SET9_FRAC_POST2_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET9_AFFE_COEFF_SET9_FRAC_POST2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_AFFE_LMS_FRAC_SET10 register description at address offset 0x7fc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/affe_lms_frac_set10
  * placeholder
  */

typedef union {
  struct {
    uint32_t AFFE_COEFF_SET10_FRAC_PRE2 : 8;
    ///< set10 of affe fractional coeff pre2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t AFFE_COEFF_SET10_FRAC_PRE1 : 8;
    ///< set10 of affe fractional coeff pre1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t AFFE_COEFF_SET10_FRAC_POST1 : 8;
    ///< set10 of affe fractional coeff post1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t AFFE_COEFF_SET10_FRAC_POST2 : 8;
    ///< set10 of affe fractional coeff post2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_affe_lms_frac_set10_reg_t;

#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET10_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET10_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET10_WR_MASK (0xffffffffU)


///< set10 of affe fractional coeff pre2
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET10_AFFE_COEFF_SET10_FRAC_PRE2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET10_AFFE_COEFF_SET10_FRAC_PRE2_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET10_AFFE_COEFF_SET10_FRAC_PRE2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET10_AFFE_COEFF_SET10_FRAC_PRE2_BF_DEF (0x00000000)

///< set10 of affe fractional coeff pre1
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET10_AFFE_COEFF_SET10_FRAC_PRE1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET10_AFFE_COEFF_SET10_FRAC_PRE1_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET10_AFFE_COEFF_SET10_FRAC_PRE1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET10_AFFE_COEFF_SET10_FRAC_PRE1_BF_DEF (0x00000000)

///< set10 of affe fractional coeff post1
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET10_AFFE_COEFF_SET10_FRAC_POST1_BF_OFF (16)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET10_AFFE_COEFF_SET10_FRAC_POST1_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET10_AFFE_COEFF_SET10_FRAC_POST1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET10_AFFE_COEFF_SET10_FRAC_POST1_BF_DEF (0x00000000)

///< set10 of affe fractional coeff post2
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET10_AFFE_COEFF_SET10_FRAC_POST2_BF_OFF (24)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET10_AFFE_COEFF_SET10_FRAC_POST2_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET10_AFFE_COEFF_SET10_FRAC_POST2_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET10_AFFE_COEFF_SET10_FRAC_POST2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_AFFE_LMS_FRAC_SET11 register description at address offset 0x800
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/affe_lms_frac_set11
  * placeholder
  */

typedef union {
  struct {
    uint32_t AFFE_COEFF_SET11_FRAC_PRE2 : 8;
    ///< set11 of affe fractional coeff pre2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t AFFE_COEFF_SET11_FRAC_PRE1 : 8;
    ///< set11 of affe fractional coeff pre1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t AFFE_COEFF_SET11_FRAC_POST1 : 8;
    ///< set11 of affe fractional coeff post1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t AFFE_COEFF_SET11_FRAC_POST2 : 8;
    ///< set11 of affe fractional coeff post2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_affe_lms_frac_set11_reg_t;

#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET11_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET11_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET11_WR_MASK (0xffffffffU)


///< set11 of affe fractional coeff pre2
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET11_AFFE_COEFF_SET11_FRAC_PRE2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET11_AFFE_COEFF_SET11_FRAC_PRE2_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET11_AFFE_COEFF_SET11_FRAC_PRE2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET11_AFFE_COEFF_SET11_FRAC_PRE2_BF_DEF (0x00000000)

///< set11 of affe fractional coeff pre1
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET11_AFFE_COEFF_SET11_FRAC_PRE1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET11_AFFE_COEFF_SET11_FRAC_PRE1_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET11_AFFE_COEFF_SET11_FRAC_PRE1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET11_AFFE_COEFF_SET11_FRAC_PRE1_BF_DEF (0x00000000)

///< set11 of affe fractional coeff post1
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET11_AFFE_COEFF_SET11_FRAC_POST1_BF_OFF (16)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET11_AFFE_COEFF_SET11_FRAC_POST1_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET11_AFFE_COEFF_SET11_FRAC_POST1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET11_AFFE_COEFF_SET11_FRAC_POST1_BF_DEF (0x00000000)

///< set11 of affe fractional coeff post2
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET11_AFFE_COEFF_SET11_FRAC_POST2_BF_OFF (24)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET11_AFFE_COEFF_SET11_FRAC_POST2_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET11_AFFE_COEFF_SET11_FRAC_POST2_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET11_AFFE_COEFF_SET11_FRAC_POST2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_AFFE_LMS_FRAC_SET12 register description at address offset 0x804
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/affe_lms_frac_set12
  * placeholder
  */

typedef union {
  struct {
    uint32_t AFFE_COEFF_SET12_FRAC_PRE2 : 8;
    ///< set12 of affe fractional coeff pre2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t AFFE_COEFF_SET12_FRAC_PRE1 : 8;
    ///< set12 of affe fractional coeff pre1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t AFFE_COEFF_SET12_FRAC_POST1 : 8;
    ///< set12 of affe fractional coeff post1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t AFFE_COEFF_SET12_FRAC_POST2 : 8;
    ///< set12 of affe fractional coeff post2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_affe_lms_frac_set12_reg_t;

#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET12_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET12_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET12_WR_MASK (0xffffffffU)


///< set12 of affe fractional coeff pre2
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET12_AFFE_COEFF_SET12_FRAC_PRE2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET12_AFFE_COEFF_SET12_FRAC_PRE2_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET12_AFFE_COEFF_SET12_FRAC_PRE2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET12_AFFE_COEFF_SET12_FRAC_PRE2_BF_DEF (0x00000000)

///< set12 of affe fractional coeff pre1
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET12_AFFE_COEFF_SET12_FRAC_PRE1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET12_AFFE_COEFF_SET12_FRAC_PRE1_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET12_AFFE_COEFF_SET12_FRAC_PRE1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET12_AFFE_COEFF_SET12_FRAC_PRE1_BF_DEF (0x00000000)

///< set12 of affe fractional coeff post1
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET12_AFFE_COEFF_SET12_FRAC_POST1_BF_OFF (16)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET12_AFFE_COEFF_SET12_FRAC_POST1_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET12_AFFE_COEFF_SET12_FRAC_POST1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET12_AFFE_COEFF_SET12_FRAC_POST1_BF_DEF (0x00000000)

///< set12 of affe fractional coeff post2
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET12_AFFE_COEFF_SET12_FRAC_POST2_BF_OFF (24)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET12_AFFE_COEFF_SET12_FRAC_POST2_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET12_AFFE_COEFF_SET12_FRAC_POST2_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET12_AFFE_COEFF_SET12_FRAC_POST2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_AFFE_LMS_FRAC_SET13 register description at address offset 0x808
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/affe_lms_frac_set13
  * placeholder
  */

typedef union {
  struct {
    uint32_t AFFE_COEFF_SET13_FRAC_PRE2 : 8;
    ///< set13 of affe fractional coeff pre2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t AFFE_COEFF_SET13_FRAC_PRE1 : 8;
    ///< set13 of affe fractional coeff pre1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t AFFE_COEFF_SET13_FRAC_POST1 : 8;
    ///< set13 of affe fractional coeff post1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t AFFE_COEFF_SET13_FRAC_POST2 : 8;
    ///< set13 of affe fractional coeff post2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_affe_lms_frac_set13_reg_t;

#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET13_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET13_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET13_WR_MASK (0xffffffffU)


///< set13 of affe fractional coeff pre2
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET13_AFFE_COEFF_SET13_FRAC_PRE2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET13_AFFE_COEFF_SET13_FRAC_PRE2_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET13_AFFE_COEFF_SET13_FRAC_PRE2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET13_AFFE_COEFF_SET13_FRAC_PRE2_BF_DEF (0x00000000)

///< set13 of affe fractional coeff pre1
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET13_AFFE_COEFF_SET13_FRAC_PRE1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET13_AFFE_COEFF_SET13_FRAC_PRE1_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET13_AFFE_COEFF_SET13_FRAC_PRE1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET13_AFFE_COEFF_SET13_FRAC_PRE1_BF_DEF (0x00000000)

///< set13 of affe fractional coeff post1
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET13_AFFE_COEFF_SET13_FRAC_POST1_BF_OFF (16)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET13_AFFE_COEFF_SET13_FRAC_POST1_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET13_AFFE_COEFF_SET13_FRAC_POST1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET13_AFFE_COEFF_SET13_FRAC_POST1_BF_DEF (0x00000000)

///< set13 of affe fractional coeff post2
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET13_AFFE_COEFF_SET13_FRAC_POST2_BF_OFF (24)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET13_AFFE_COEFF_SET13_FRAC_POST2_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET13_AFFE_COEFF_SET13_FRAC_POST2_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET13_AFFE_COEFF_SET13_FRAC_POST2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_AFFE_LMS_FRAC_SET14 register description at address offset 0x80c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/affe_lms_frac_set14
  * placeholder
  */

typedef union {
  struct {
    uint32_t AFFE_COEFF_SET14_FRAC_PRE2 : 8;
    ///< set14 of affe fractional coeff pre2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t AFFE_COEFF_SET14_FRAC_PRE1 : 8;
    ///< set14 of affe fractional coeff pre1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t AFFE_COEFF_SET14_FRAC_POST1 : 8;
    ///< set14 of affe fractional coeff post1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t AFFE_COEFF_SET14_FRAC_POST2 : 8;
    ///< set14 of affe fractional coeff post2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_affe_lms_frac_set14_reg_t;

#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET14_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET14_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET14_WR_MASK (0xffffffffU)


///< set14 of affe fractional coeff pre2
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET14_AFFE_COEFF_SET14_FRAC_PRE2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET14_AFFE_COEFF_SET14_FRAC_PRE2_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET14_AFFE_COEFF_SET14_FRAC_PRE2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET14_AFFE_COEFF_SET14_FRAC_PRE2_BF_DEF (0x00000000)

///< set14 of affe fractional coeff pre1
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET14_AFFE_COEFF_SET14_FRAC_PRE1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET14_AFFE_COEFF_SET14_FRAC_PRE1_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET14_AFFE_COEFF_SET14_FRAC_PRE1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET14_AFFE_COEFF_SET14_FRAC_PRE1_BF_DEF (0x00000000)

///< set14 of affe fractional coeff post1
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET14_AFFE_COEFF_SET14_FRAC_POST1_BF_OFF (16)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET14_AFFE_COEFF_SET14_FRAC_POST1_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET14_AFFE_COEFF_SET14_FRAC_POST1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET14_AFFE_COEFF_SET14_FRAC_POST1_BF_DEF (0x00000000)

///< set14 of affe fractional coeff post2
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET14_AFFE_COEFF_SET14_FRAC_POST2_BF_OFF (24)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET14_AFFE_COEFF_SET14_FRAC_POST2_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET14_AFFE_COEFF_SET14_FRAC_POST2_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET14_AFFE_COEFF_SET14_FRAC_POST2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_AFFE_LMS_FRAC_SET15 register description at address offset 0x810
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/affe_lms_frac_set15
  * placeholder
  */

typedef union {
  struct {
    uint32_t AFFE_COEFF_SET15_FRAC_PRE2 : 8;
    ///< set15 of affe fractional coeff pre2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t AFFE_COEFF_SET15_FRAC_PRE1 : 8;
    ///< set15 of affe fractional coeff pre1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t AFFE_COEFF_SET15_FRAC_POST1 : 8;
    ///< set15 of affe fractional coeff post1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t AFFE_COEFF_SET15_FRAC_POST2 : 8;
    ///< set15 of affe fractional coeff post2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_affe_lms_frac_set15_reg_t;

#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET15_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET15_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET15_WR_MASK (0xffffffffU)


///< set15 of affe fractional coeff pre2
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET15_AFFE_COEFF_SET15_FRAC_PRE2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET15_AFFE_COEFF_SET15_FRAC_PRE2_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET15_AFFE_COEFF_SET15_FRAC_PRE2_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET15_AFFE_COEFF_SET15_FRAC_PRE2_BF_DEF (0x00000000)

///< set15 of affe fractional coeff pre1
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET15_AFFE_COEFF_SET15_FRAC_PRE1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET15_AFFE_COEFF_SET15_FRAC_PRE1_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET15_AFFE_COEFF_SET15_FRAC_PRE1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET15_AFFE_COEFF_SET15_FRAC_PRE1_BF_DEF (0x00000000)

///< set15 of affe fractional coeff post1
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET15_AFFE_COEFF_SET15_FRAC_POST1_BF_OFF (16)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET15_AFFE_COEFF_SET15_FRAC_POST1_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET15_AFFE_COEFF_SET15_FRAC_POST1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET15_AFFE_COEFF_SET15_FRAC_POST1_BF_DEF (0x00000000)

///< set15 of affe fractional coeff post2
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET15_AFFE_COEFF_SET15_FRAC_POST2_BF_OFF (24)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET15_AFFE_COEFF_SET15_FRAC_POST2_BF_WID ( 8)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET15_AFFE_COEFF_SET15_FRAC_POST2_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET15_AFFE_COEFF_SET15_FRAC_POST2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_SATURATION_STATUS_0 register description at address offset 0x814
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/saturation_status_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t VREF_FFE_0_SAT : 1;
    ///< VREF0 FFE saturated
    ///< AccessType="RO/C/V" BitOffset="0" ResetValue="0x0"
    uint32_t VREF_FFE_1_SAT : 1;
    ///< VREF1 FFE saturated
    ///< AccessType="RO/C/V" BitOffset="1" ResetValue="0x0"
    uint32_t VREF_FFE_2_SAT : 1;
    ///< VREF2 FFE saturated
    ///< AccessType="RO/C/V" BitOffset="2" ResetValue="0x0"
    uint32_t VREF_FFE_3_SAT : 1;
    ///< VREF3 FFE saturated
    ///< AccessType="RO/C/V" BitOffset="3" ResetValue="0x0"
    uint32_t VREF_ADC_0_SAT : 1;
    ///< VREF0 ADC saturated
    ///< AccessType="RO/C/V" BitOffset="4" ResetValue="0x0"
    uint32_t VREF_ADC_1_SAT : 1;
    ///< VREF1 ADC saturated
    ///< AccessType="RO/C/V" BitOffset="5" ResetValue="0x0"
    uint32_t VREF_ADC_2_SAT : 1;
    ///< VREF2 ADC saturated
    ///< AccessType="RO/C/V" BitOffset="6" ResetValue="0x0"
    uint32_t VREF_ADC_3_SAT : 1;
    ///< VREF3 ADC saturated
    ///< AccessType="RO/C/V" BitOffset="7" ResetValue="0x0"
    uint32_t FFE_PRE_3_SAT : 1;
    ///< FFE PRE3 saturated
    ///< AccessType="RO/C/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_PRE_2_SAT : 1;
    ///< FFE PRE2 saturated
    ///< AccessType="RO/C/V" BitOffset="9" ResetValue="0x0"
    uint32_t FFE_PRE_1_SAT : 1;
    ///< FFE PRE1 saturated
    ///< AccessType="RO/C/V" BitOffset="10" ResetValue="0x0"
    uint32_t FFE_POST_1_SAT : 1;
    ///< FFE POST1 saturated
    ///< AccessType="RO/C/V" BitOffset="11" ResetValue="0x0"
    uint32_t FFE_POST_2_SAT : 1;
    ///< FFE POST2 saturated
    ///< AccessType="RO/C/V" BitOffset="12" ResetValue="0x0"
    uint32_t FFE_POST_3_SAT : 1;
    ///< FFE POST3 saturated
    ///< AccessType="RO/C/V" BitOffset="13" ResetValue="0x0"
    uint32_t FFE_POST_4_SAT : 1;
    ///< FFE POST4 saturated
    ///< AccessType="RO/C/V" BitOffset="14" ResetValue="0x0"
    uint32_t FFE_POST_5_SAT : 1;
    ///< FFE POST5 saturated
    ///< AccessType="RO/C/V" BitOffset="15" ResetValue="0x0"
    uint32_t FFE_POST_6_SAT : 1;
    ///< FFE POST6 saturated
    ///< AccessType="RO/C/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_POST_7_SAT : 1;
    ///< FFE POST7 saturated
    ///< AccessType="RO/C/V" BitOffset="17" ResetValue="0x0"
    uint32_t FFE_POST_8_SAT : 1;
    ///< FFE POST8 saturated
    ///< AccessType="RO/C/V" BitOffset="18" ResetValue="0x0"
    uint32_t FFE_POST_9_SAT : 1;
    ///< FFE POST9 saturated
    ///< AccessType="RO/C/V" BitOffset="19" ResetValue="0x0"
    uint32_t FFE_POST_10_SAT : 1;
    ///< FFE POST10 saturated
    ///< AccessType="RO/C/V" BitOffset="20" ResetValue="0x0"
    uint32_t FFE_POST_11_SAT : 1;
    ///< FFE POST11 saturated
    ///< AccessType="RO/C/V" BitOffset="21" ResetValue="0x0"
    uint32_t FFE_POST_12_SAT : 1;
    ///< FFE POST12 saturated
    ///< AccessType="RO/C/V" BitOffset="22" ResetValue="0x0"
    uint32_t FFE_BANKA_FLOAT1_SAT : 1;
    ///< FFE BankA float1 saturated
    ///< AccessType="RO/C/V" BitOffset="23" ResetValue="0x0"
    uint32_t FFE_BANKA_FLOAT2_SAT : 1;
    ///< FFE BankA float2 saturated
    ///< AccessType="RO/C/V" BitOffset="24" ResetValue="0x0"
    uint32_t FFE_BANKA_FLOAT3_SAT : 1;
    ///< FFE BankA float3 saturated
    ///< AccessType="RO/C/V" BitOffset="25" ResetValue="0x0"
    uint32_t FFE_BANKB_FLOAT1_SAT : 1;
    ///< FFE BankB float1 saturated
    ///< AccessType="RO/C/V" BitOffset="26" ResetValue="0x0"
    uint32_t FFE_BANKB_FLOAT2_SAT : 1;
    ///< FFE BankB float2 saturated
    ///< AccessType="RO/C/V" BitOffset="27" ResetValue="0x0"
    uint32_t FFE_BANKB_FLOAT3_SAT : 1;
    ///< FFE BankB float3 saturated
    ///< AccessType="RO/C/V" BitOffset="28" ResetValue="0x0"
    uint32_t FFE_BANKC_FLOAT1_SAT : 1;
    ///< FFE BankC float1 saturated
    ///< AccessType="RO/C/V" BitOffset="29" ResetValue="0x0"
    uint32_t FFE_BANKC_FLOAT2_SAT : 1;
    ///< FFE BankC float2 saturated
    ///< AccessType="RO/C/V" BitOffset="30" ResetValue="0x0"
    uint32_t FFE_BANKC_FLOAT3_SAT : 1;
    ///< FFE BankC float3 saturated
    ///< AccessType="RO/C/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_saturation_stat_0_reg_t;

#define PMA_RXWORD_MSG_SATURATION_STAT_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_WR_MASK (0x00000000U)


///< VREF0 FFE saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_0_VREF_FFE_0_SAT_BF_OFF ( 0)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_VREF_FFE_0_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_VREF_FFE_0_SAT_BF_MSK (0x00000001)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_VREF_FFE_0_SAT_BF_DEF (0x00000000)

///< VREF1 FFE saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_0_VREF_FFE_1_SAT_BF_OFF ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_VREF_FFE_1_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_VREF_FFE_1_SAT_BF_MSK (0x00000002)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_VREF_FFE_1_SAT_BF_DEF (0x00000000)

///< VREF2 FFE saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_0_VREF_FFE_2_SAT_BF_OFF ( 2)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_VREF_FFE_2_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_VREF_FFE_2_SAT_BF_MSK (0x00000004)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_VREF_FFE_2_SAT_BF_DEF (0x00000000)

///< VREF3 FFE saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_0_VREF_FFE_3_SAT_BF_OFF ( 3)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_VREF_FFE_3_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_VREF_FFE_3_SAT_BF_MSK (0x00000008)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_VREF_FFE_3_SAT_BF_DEF (0x00000000)

///< VREF0 ADC saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_0_VREF_ADC_0_SAT_BF_OFF ( 4)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_VREF_ADC_0_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_VREF_ADC_0_SAT_BF_MSK (0x00000010)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_VREF_ADC_0_SAT_BF_DEF (0x00000000)

///< VREF1 ADC saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_0_VREF_ADC_1_SAT_BF_OFF ( 5)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_VREF_ADC_1_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_VREF_ADC_1_SAT_BF_MSK (0x00000020)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_VREF_ADC_1_SAT_BF_DEF (0x00000000)

///< VREF2 ADC saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_0_VREF_ADC_2_SAT_BF_OFF ( 6)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_VREF_ADC_2_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_VREF_ADC_2_SAT_BF_MSK (0x00000040)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_VREF_ADC_2_SAT_BF_DEF (0x00000000)

///< VREF3 ADC saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_0_VREF_ADC_3_SAT_BF_OFF ( 7)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_VREF_ADC_3_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_VREF_ADC_3_SAT_BF_MSK (0x00000080)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_VREF_ADC_3_SAT_BF_DEF (0x00000000)

///< FFE PRE3 saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_PRE_3_SAT_BF_OFF ( 8)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_PRE_3_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_PRE_3_SAT_BF_MSK (0x00000100)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_PRE_3_SAT_BF_DEF (0x00000000)

///< FFE PRE2 saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_PRE_2_SAT_BF_OFF ( 9)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_PRE_2_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_PRE_2_SAT_BF_MSK (0x00000200)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_PRE_2_SAT_BF_DEF (0x00000000)

///< FFE PRE1 saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_PRE_1_SAT_BF_OFF (10)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_PRE_1_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_PRE_1_SAT_BF_MSK (0x00000400)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_PRE_1_SAT_BF_DEF (0x00000000)

///< FFE POST1 saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_POST_1_SAT_BF_OFF (11)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_POST_1_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_POST_1_SAT_BF_MSK (0x00000800)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_POST_1_SAT_BF_DEF (0x00000000)

///< FFE POST2 saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_POST_2_SAT_BF_OFF (12)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_POST_2_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_POST_2_SAT_BF_MSK (0x00001000)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_POST_2_SAT_BF_DEF (0x00000000)

///< FFE POST3 saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_POST_3_SAT_BF_OFF (13)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_POST_3_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_POST_3_SAT_BF_MSK (0x00002000)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_POST_3_SAT_BF_DEF (0x00000000)

///< FFE POST4 saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_POST_4_SAT_BF_OFF (14)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_POST_4_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_POST_4_SAT_BF_MSK (0x00004000)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_POST_4_SAT_BF_DEF (0x00000000)

///< FFE POST5 saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_POST_5_SAT_BF_OFF (15)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_POST_5_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_POST_5_SAT_BF_MSK (0x00008000)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_POST_5_SAT_BF_DEF (0x00000000)

///< FFE POST6 saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_POST_6_SAT_BF_OFF (16)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_POST_6_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_POST_6_SAT_BF_MSK (0x00010000)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_POST_6_SAT_BF_DEF (0x00000000)

///< FFE POST7 saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_POST_7_SAT_BF_OFF (17)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_POST_7_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_POST_7_SAT_BF_MSK (0x00020000)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_POST_7_SAT_BF_DEF (0x00000000)

///< FFE POST8 saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_POST_8_SAT_BF_OFF (18)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_POST_8_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_POST_8_SAT_BF_MSK (0x00040000)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_POST_8_SAT_BF_DEF (0x00000000)

///< FFE POST9 saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_POST_9_SAT_BF_OFF (19)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_POST_9_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_POST_9_SAT_BF_MSK (0x00080000)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_POST_9_SAT_BF_DEF (0x00000000)

///< FFE POST10 saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_POST_10_SAT_BF_OFF (20)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_POST_10_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_POST_10_SAT_BF_MSK (0x00100000)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_POST_10_SAT_BF_DEF (0x00000000)

///< FFE POST11 saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_POST_11_SAT_BF_OFF (21)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_POST_11_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_POST_11_SAT_BF_MSK (0x00200000)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_POST_11_SAT_BF_DEF (0x00000000)

///< FFE POST12 saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_POST_12_SAT_BF_OFF (22)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_POST_12_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_POST_12_SAT_BF_MSK (0x00400000)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_POST_12_SAT_BF_DEF (0x00000000)

///< FFE BankA float1 saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_BANKA_FLOAT1_SAT_BF_OFF (23)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_BANKA_FLOAT1_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_BANKA_FLOAT1_SAT_BF_MSK (0x00800000)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_BANKA_FLOAT1_SAT_BF_DEF (0x00000000)

///< FFE BankA float2 saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_BANKA_FLOAT2_SAT_BF_OFF (24)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_BANKA_FLOAT2_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_BANKA_FLOAT2_SAT_BF_MSK (0x01000000)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_BANKA_FLOAT2_SAT_BF_DEF (0x00000000)

///< FFE BankA float3 saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_BANKA_FLOAT3_SAT_BF_OFF (25)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_BANKA_FLOAT3_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_BANKA_FLOAT3_SAT_BF_MSK (0x02000000)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_BANKA_FLOAT3_SAT_BF_DEF (0x00000000)

///< FFE BankB float1 saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_BANKB_FLOAT1_SAT_BF_OFF (26)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_BANKB_FLOAT1_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_BANKB_FLOAT1_SAT_BF_MSK (0x04000000)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_BANKB_FLOAT1_SAT_BF_DEF (0x00000000)

///< FFE BankB float2 saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_BANKB_FLOAT2_SAT_BF_OFF (27)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_BANKB_FLOAT2_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_BANKB_FLOAT2_SAT_BF_MSK (0x08000000)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_BANKB_FLOAT2_SAT_BF_DEF (0x00000000)

///< FFE BankB float3 saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_BANKB_FLOAT3_SAT_BF_OFF (28)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_BANKB_FLOAT3_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_BANKB_FLOAT3_SAT_BF_MSK (0x10000000)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_BANKB_FLOAT3_SAT_BF_DEF (0x00000000)

///< FFE BankC float1 saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_BANKC_FLOAT1_SAT_BF_OFF (29)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_BANKC_FLOAT1_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_BANKC_FLOAT1_SAT_BF_MSK (0x20000000)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_BANKC_FLOAT1_SAT_BF_DEF (0x00000000)

///< FFE BankC float2 saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_BANKC_FLOAT2_SAT_BF_OFF (30)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_BANKC_FLOAT2_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_BANKC_FLOAT2_SAT_BF_MSK (0x40000000)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_BANKC_FLOAT2_SAT_BF_DEF (0x00000000)

///< FFE BankC float3 saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_BANKC_FLOAT3_SAT_BF_OFF (31)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_BANKC_FLOAT3_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_BANKC_FLOAT3_SAT_BF_MSK (0x80000000)
#define PMA_RXWORD_MSG_SATURATION_STAT_0_FFE_BANKC_FLOAT3_SAT_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_SATURATION_STATUS_1 register description at address offset 0x818
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/saturation_status_1
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_0_SAT : 1;
    ///< OPS taps 0 saturated
    ///< AccessType="RO/C/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_1_SAT : 1;
    ///< OPS taps 1 saturated
    ///< AccessType="RO/C/V" BitOffset="1" ResetValue="0x0"
    uint32_t OPS_TAPS_2_SAT : 1;
    ///< OPS taps 2 saturated
    ///< AccessType="RO/C/V" BitOffset="2" ResetValue="0x0"
    uint32_t OPS_TAPS_3_SAT : 1;
    ///< OPS taps 3 saturated
    ///< AccessType="RO/C/V" BitOffset="3" ResetValue="0x0"
    uint32_t OPS_TAPS_4_SAT : 1;
    ///< OPS taps 4 saturated
    ///< AccessType="RO/C/V" BitOffset="4" ResetValue="0x0"
    uint32_t OPS_TAPS_5_SAT : 1;
    ///< OPS taps 5 saturated
    ///< AccessType="RO/C/V" BitOffset="5" ResetValue="0x0"
    uint32_t OPS_TAPS_6_SAT : 1;
    ///< OPS taps 6 saturated
    ///< AccessType="RO/C/V" BitOffset="6" ResetValue="0x0"
    uint32_t OPS_TAPS_7_SAT : 1;
    ///< OPS taps 7 saturated
    ///< AccessType="RO/C/V" BitOffset="7" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_saturation_stat_1_reg_t;

#define PMA_RXWORD_MSG_SATURATION_STAT_1_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_SATURATION_STAT_1_RD_MASK (0x000000ffU)
#define PMA_RXWORD_MSG_SATURATION_STAT_1_WR_MASK (0x00000000U)


///< OPS taps 0 saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_1_OPS_TAPS_0_SAT_BF_OFF ( 0)
#define PMA_RXWORD_MSG_SATURATION_STAT_1_OPS_TAPS_0_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_1_OPS_TAPS_0_SAT_BF_MSK (0x00000001)
#define PMA_RXWORD_MSG_SATURATION_STAT_1_OPS_TAPS_0_SAT_BF_DEF (0x00000000)

///< OPS taps 1 saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_1_OPS_TAPS_1_SAT_BF_OFF ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_1_OPS_TAPS_1_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_1_OPS_TAPS_1_SAT_BF_MSK (0x00000002)
#define PMA_RXWORD_MSG_SATURATION_STAT_1_OPS_TAPS_1_SAT_BF_DEF (0x00000000)

///< OPS taps 2 saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_1_OPS_TAPS_2_SAT_BF_OFF ( 2)
#define PMA_RXWORD_MSG_SATURATION_STAT_1_OPS_TAPS_2_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_1_OPS_TAPS_2_SAT_BF_MSK (0x00000004)
#define PMA_RXWORD_MSG_SATURATION_STAT_1_OPS_TAPS_2_SAT_BF_DEF (0x00000000)

///< OPS taps 3 saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_1_OPS_TAPS_3_SAT_BF_OFF ( 3)
#define PMA_RXWORD_MSG_SATURATION_STAT_1_OPS_TAPS_3_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_1_OPS_TAPS_3_SAT_BF_MSK (0x00000008)
#define PMA_RXWORD_MSG_SATURATION_STAT_1_OPS_TAPS_3_SAT_BF_DEF (0x00000000)

///< OPS taps 4 saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_1_OPS_TAPS_4_SAT_BF_OFF ( 4)
#define PMA_RXWORD_MSG_SATURATION_STAT_1_OPS_TAPS_4_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_1_OPS_TAPS_4_SAT_BF_MSK (0x00000010)
#define PMA_RXWORD_MSG_SATURATION_STAT_1_OPS_TAPS_4_SAT_BF_DEF (0x00000000)

///< OPS taps 5 saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_1_OPS_TAPS_5_SAT_BF_OFF ( 5)
#define PMA_RXWORD_MSG_SATURATION_STAT_1_OPS_TAPS_5_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_1_OPS_TAPS_5_SAT_BF_MSK (0x00000020)
#define PMA_RXWORD_MSG_SATURATION_STAT_1_OPS_TAPS_5_SAT_BF_DEF (0x00000000)

///< OPS taps 6 saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_1_OPS_TAPS_6_SAT_BF_OFF ( 6)
#define PMA_RXWORD_MSG_SATURATION_STAT_1_OPS_TAPS_6_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_1_OPS_TAPS_6_SAT_BF_MSK (0x00000040)
#define PMA_RXWORD_MSG_SATURATION_STAT_1_OPS_TAPS_6_SAT_BF_DEF (0x00000000)

///< OPS taps 7 saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_1_OPS_TAPS_7_SAT_BF_OFF ( 7)
#define PMA_RXWORD_MSG_SATURATION_STAT_1_OPS_TAPS_7_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_1_OPS_TAPS_7_SAT_BF_MSK (0x00000080)
#define PMA_RXWORD_MSG_SATURATION_STAT_1_OPS_TAPS_7_SAT_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_SATURATION_STATUS_3 register description at address offset 0x820
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/saturation_status_3
  * placeholder
  */

typedef union {
  struct {
    uint32_t EDGVREF_HI_SAT : 1;
    ///< edgvref hi saturated
    ///< AccessType="RO/C/V" BitOffset="0" ResetValue="0x0"
    uint32_t EDGVREF_ZR_SAT : 1;
    ///< edgvref zr saturated
    ///< AccessType="RO/C/V" BitOffset="1" ResetValue="0x0"
    uint32_t EDGVREF_LO_SAT : 1;
    ///< edgvref lo saturated
    ///< AccessType="RO/C/V" BitOffset="2" ResetValue="0x0"
    uint32_t AFFE_PRE2_SAT : 1;
    ///< AFFE PRE2 saturated
    ///< AccessType="RO/C/V" BitOffset="3" ResetValue="0x0"
    uint32_t AFFE_PRE1_SAT : 1;
    ///< AFFE PRE1 saturated
    ///< AccessType="RO/C/V" BitOffset="4" ResetValue="0x0"
    uint32_t AFFE_POST1_SAT : 1;
    ///< AFFE POST1 saturated
    ///< AccessType="RO/C/V" BitOffset="5" ResetValue="0x0"
    uint32_t AFFE_POST2_SAT : 1;
    ///< AFFE POST2 saturated
    ///< AccessType="RO/C/V" BitOffset="6" ResetValue="0x0"
    uint32_t VGA_TAP_SAT : 1;
    ///< VGA TAP saturated
    ///< AccessType="RO/C/V" BitOffset="7" ResetValue="0x0"
    uint32_t ADCOFC_HIR_SAT : 1;
    ///< ADCOFC Hi right saturated
    ///< AccessType="RO/C/V" BitOffset="8" ResetValue="0x0"
    uint32_t ADCOFC_HIL_SAT : 1;
    ///< ADCOFC Hi left saturated
    ///< AccessType="RO/C/V" BitOffset="9" ResetValue="0x0"
    uint32_t ADCOFC_ZRR_SAT : 1;
    ///< ADCOFC Zr right saturated
    ///< AccessType="RO/C/V" BitOffset="10" ResetValue="0x0"
    uint32_t ADCOFC_ZRL_SAT : 1;
    ///< ADCOFC Zr left saturated
    ///< AccessType="RO/C/V" BitOffset="11" ResetValue="0x0"
    uint32_t ADCOFC_LOR_SAT : 1;
    ///< ADCOFC Lo  right saturated
    ///< AccessType="RO/C/V" BitOffset="12" ResetValue="0x0"
    uint32_t ADCOFC_LOL_SAT : 1;
    ///< ADCOFC Lo left saturated
    ///< AccessType="RO/C/V" BitOffset="13" ResetValue="0x0"
    uint32_t OFC_HIR_SAT : 1;
    ///< OFC Hi right saturated
    ///< AccessType="RO/C/V" BitOffset="14" ResetValue="0x0"
    uint32_t OFC_HIL_SAT : 1;
    ///< OFC Hi left saturated
    ///< AccessType="RO/C/V" BitOffset="15" ResetValue="0x0"
    uint32_t OFC_ZRR_SAT : 1;
    ///< OFC Zr right saturated
    ///< AccessType="RO/C/V" BitOffset="16" ResetValue="0x0"
    uint32_t OFC_ZRL_SAT : 1;
    ///< OFC Zr left saturated
    ///< AccessType="RO/C/V" BitOffset="17" ResetValue="0x0"
    uint32_t OFC_LOR_SAT : 1;
    ///< OFC Lo  right saturated
    ///< AccessType="RO/C/V" BitOffset="18" ResetValue="0x0"
    uint32_t OFC_LOL_SAT : 1;
    ///< OFC Lo left saturated
    ///< AccessType="RO/C/V" BitOffset="19" ResetValue="0x0"
    uint32_t DFE_SAT : 1;
    ///< DFE Tap saturated
    ///< AccessType="RO/C/V" BitOffset="20" ResetValue="0x0"
    uint32_t CDR_FFE_OFC_HIR_SAT : 1;
    ///< CDR_FFE_OFC Hi right saturated
    ///< AccessType="RO/C/V" BitOffset="21" ResetValue="0x0"
    uint32_t CDR_FFE_OFC_HIL_SAT : 1;
    ///< CDR_FFE_OFC Hi left saturated
    ///< AccessType="RO/C/V" BitOffset="22" ResetValue="0x0"
    uint32_t CDR_FFE_OFC_ZRR_SAT : 1;
    ///< CDR_FFE_OFC Zr right saturated
    ///< AccessType="RO/C/V" BitOffset="23" ResetValue="0x0"
    uint32_t CDR_FFE_OFC_ZRL_SAT : 1;
    ///< CDR_FFE_OFC Zr left saturated
    ///< AccessType="RO/C/V" BitOffset="24" ResetValue="0x0"
    uint32_t CDR_FFE_OFC_LOR_SAT : 1;
    ///< CDR_FFE_OFC Lo  right saturated
    ///< AccessType="RO/C/V" BitOffset="25" ResetValue="0x0"
    uint32_t CDR_FFE_OFC_LOL_SAT : 1;
    ///< CDR_FFE_OFC Lo left saturated
    ///< AccessType="RO/C/V" BitOffset="26" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="27" ResetValue="None"
    uint32_t CDR_FFE_VREF_0_SAT : 1;
    ///< CDR_FFE_VREF 0 saturated
    ///< AccessType="RO/C/V" BitOffset="28" ResetValue="0x0"
    uint32_t CDR_FFE_VREF_1_SAT : 1;
    ///< CDR_FFE_VREF 1 saturated
    ///< AccessType="RO/C/V" BitOffset="29" ResetValue="0x0"
    uint32_t CDR_FFE_VREF_2_SAT : 1;
    ///< CDR_FFE_VREF 2 saturated
    ///< AccessType="RO/C/V" BitOffset="30" ResetValue="0x0"
    uint32_t CDR_FFE_VREF_3_SAT : 1;
    ///< CDR_FFE_VREF 3 saturated
    ///< AccessType="RO/C/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_saturation_stat_3_reg_t;

#define PMA_RXWORD_MSG_SATURATION_STAT_3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_RD_MASK (0xf7ffffffU)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_WR_MASK (0x00000000U)


///< edgvref hi saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_3_EDGVREF_HI_SAT_BF_OFF ( 0)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_EDGVREF_HI_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_EDGVREF_HI_SAT_BF_MSK (0x00000001)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_EDGVREF_HI_SAT_BF_DEF (0x00000000)

///< edgvref zr saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_3_EDGVREF_ZR_SAT_BF_OFF ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_EDGVREF_ZR_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_EDGVREF_ZR_SAT_BF_MSK (0x00000002)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_EDGVREF_ZR_SAT_BF_DEF (0x00000000)

///< edgvref lo saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_3_EDGVREF_LO_SAT_BF_OFF ( 2)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_EDGVREF_LO_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_EDGVREF_LO_SAT_BF_MSK (0x00000004)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_EDGVREF_LO_SAT_BF_DEF (0x00000000)

///< AFFE PRE2 saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_3_AFFE_PRE2_SAT_BF_OFF ( 3)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_AFFE_PRE2_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_AFFE_PRE2_SAT_BF_MSK (0x00000008)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_AFFE_PRE2_SAT_BF_DEF (0x00000000)

///< AFFE PRE1 saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_3_AFFE_PRE1_SAT_BF_OFF ( 4)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_AFFE_PRE1_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_AFFE_PRE1_SAT_BF_MSK (0x00000010)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_AFFE_PRE1_SAT_BF_DEF (0x00000000)

///< AFFE POST1 saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_3_AFFE_POST1_SAT_BF_OFF ( 5)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_AFFE_POST1_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_AFFE_POST1_SAT_BF_MSK (0x00000020)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_AFFE_POST1_SAT_BF_DEF (0x00000000)

///< AFFE POST2 saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_3_AFFE_POST2_SAT_BF_OFF ( 6)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_AFFE_POST2_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_AFFE_POST2_SAT_BF_MSK (0x00000040)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_AFFE_POST2_SAT_BF_DEF (0x00000000)

///< VGA TAP saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_3_VGA_TAP_SAT_BF_OFF ( 7)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_VGA_TAP_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_VGA_TAP_SAT_BF_MSK (0x00000080)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_VGA_TAP_SAT_BF_DEF (0x00000000)

///< ADCOFC Hi right saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_3_ADCOFC_HIR_SAT_BF_OFF ( 8)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_ADCOFC_HIR_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_ADCOFC_HIR_SAT_BF_MSK (0x00000100)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_ADCOFC_HIR_SAT_BF_DEF (0x00000000)

///< ADCOFC Hi left saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_3_ADCOFC_HIL_SAT_BF_OFF ( 9)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_ADCOFC_HIL_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_ADCOFC_HIL_SAT_BF_MSK (0x00000200)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_ADCOFC_HIL_SAT_BF_DEF (0x00000000)

///< ADCOFC Zr right saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_3_ADCOFC_ZRR_SAT_BF_OFF (10)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_ADCOFC_ZRR_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_ADCOFC_ZRR_SAT_BF_MSK (0x00000400)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_ADCOFC_ZRR_SAT_BF_DEF (0x00000000)

///< ADCOFC Zr left saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_3_ADCOFC_ZRL_SAT_BF_OFF (11)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_ADCOFC_ZRL_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_ADCOFC_ZRL_SAT_BF_MSK (0x00000800)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_ADCOFC_ZRL_SAT_BF_DEF (0x00000000)

///< ADCOFC Lo  right saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_3_ADCOFC_LOR_SAT_BF_OFF (12)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_ADCOFC_LOR_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_ADCOFC_LOR_SAT_BF_MSK (0x00001000)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_ADCOFC_LOR_SAT_BF_DEF (0x00000000)

///< ADCOFC Lo left saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_3_ADCOFC_LOL_SAT_BF_OFF (13)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_ADCOFC_LOL_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_ADCOFC_LOL_SAT_BF_MSK (0x00002000)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_ADCOFC_LOL_SAT_BF_DEF (0x00000000)

///< OFC Hi right saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_3_OFC_HIR_SAT_BF_OFF (14)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_OFC_HIR_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_OFC_HIR_SAT_BF_MSK (0x00004000)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_OFC_HIR_SAT_BF_DEF (0x00000000)

///< OFC Hi left saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_3_OFC_HIL_SAT_BF_OFF (15)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_OFC_HIL_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_OFC_HIL_SAT_BF_MSK (0x00008000)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_OFC_HIL_SAT_BF_DEF (0x00000000)

///< OFC Zr right saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_3_OFC_ZRR_SAT_BF_OFF (16)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_OFC_ZRR_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_OFC_ZRR_SAT_BF_MSK (0x00010000)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_OFC_ZRR_SAT_BF_DEF (0x00000000)

///< OFC Zr left saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_3_OFC_ZRL_SAT_BF_OFF (17)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_OFC_ZRL_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_OFC_ZRL_SAT_BF_MSK (0x00020000)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_OFC_ZRL_SAT_BF_DEF (0x00000000)

///< OFC Lo  right saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_3_OFC_LOR_SAT_BF_OFF (18)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_OFC_LOR_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_OFC_LOR_SAT_BF_MSK (0x00040000)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_OFC_LOR_SAT_BF_DEF (0x00000000)

///< OFC Lo left saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_3_OFC_LOL_SAT_BF_OFF (19)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_OFC_LOL_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_OFC_LOL_SAT_BF_MSK (0x00080000)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_OFC_LOL_SAT_BF_DEF (0x00000000)

///< DFE Tap saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_3_DFE_SAT_BF_OFF (20)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_DFE_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_DFE_SAT_BF_MSK (0x00100000)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_DFE_SAT_BF_DEF (0x00000000)

///< CDR_FFE_OFC Hi right saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_3_CDR_FFE_OFC_HIR_SAT_BF_OFF (21)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_CDR_FFE_OFC_HIR_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_CDR_FFE_OFC_HIR_SAT_BF_MSK (0x00200000)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_CDR_FFE_OFC_HIR_SAT_BF_DEF (0x00000000)

///< CDR_FFE_OFC Hi left saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_3_CDR_FFE_OFC_HIL_SAT_BF_OFF (22)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_CDR_FFE_OFC_HIL_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_CDR_FFE_OFC_HIL_SAT_BF_MSK (0x00400000)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_CDR_FFE_OFC_HIL_SAT_BF_DEF (0x00000000)

///< CDR_FFE_OFC Zr right saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_3_CDR_FFE_OFC_ZRR_SAT_BF_OFF (23)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_CDR_FFE_OFC_ZRR_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_CDR_FFE_OFC_ZRR_SAT_BF_MSK (0x00800000)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_CDR_FFE_OFC_ZRR_SAT_BF_DEF (0x00000000)

///< CDR_FFE_OFC Zr left saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_3_CDR_FFE_OFC_ZRL_SAT_BF_OFF (24)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_CDR_FFE_OFC_ZRL_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_CDR_FFE_OFC_ZRL_SAT_BF_MSK (0x01000000)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_CDR_FFE_OFC_ZRL_SAT_BF_DEF (0x00000000)

///< CDR_FFE_OFC Lo  right saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_3_CDR_FFE_OFC_LOR_SAT_BF_OFF (25)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_CDR_FFE_OFC_LOR_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_CDR_FFE_OFC_LOR_SAT_BF_MSK (0x02000000)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_CDR_FFE_OFC_LOR_SAT_BF_DEF (0x00000000)

///< CDR_FFE_OFC Lo left saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_3_CDR_FFE_OFC_LOL_SAT_BF_OFF (26)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_CDR_FFE_OFC_LOL_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_CDR_FFE_OFC_LOL_SAT_BF_MSK (0x04000000)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_CDR_FFE_OFC_LOL_SAT_BF_DEF (0x00000000)

///< CDR_FFE_VREF 0 saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_3_CDR_FFE_VREF_0_SAT_BF_OFF (28)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_CDR_FFE_VREF_0_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_CDR_FFE_VREF_0_SAT_BF_MSK (0x10000000)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_CDR_FFE_VREF_0_SAT_BF_DEF (0x00000000)

///< CDR_FFE_VREF 1 saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_3_CDR_FFE_VREF_1_SAT_BF_OFF (29)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_CDR_FFE_VREF_1_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_CDR_FFE_VREF_1_SAT_BF_MSK (0x20000000)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_CDR_FFE_VREF_1_SAT_BF_DEF (0x00000000)

///< CDR_FFE_VREF 2 saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_3_CDR_FFE_VREF_2_SAT_BF_OFF (30)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_CDR_FFE_VREF_2_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_CDR_FFE_VREF_2_SAT_BF_MSK (0x40000000)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_CDR_FFE_VREF_2_SAT_BF_DEF (0x00000000)

///< CDR_FFE_VREF 3 saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_3_CDR_FFE_VREF_3_SAT_BF_OFF (31)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_CDR_FFE_VREF_3_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_CDR_FFE_VREF_3_SAT_BF_MSK (0x80000000)
#define PMA_RXWORD_MSG_SATURATION_STAT_3_CDR_FFE_VREF_3_SAT_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ZEROAVG_STATUS_0 register description at address offset 0x824
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/zeroavg_status_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t VREF_FFE_0_ZEROAVG : 1;
    ///< VREF0 FFE AVG counter is zero
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t VREF_FFE_1_ZEROAVG : 1;
    ///< VREF1 FFE AVG counter is zero
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t VREF_FFE_2_ZEROAVG : 1;
    ///< VREF2 FFE AVG counter is zero
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t VREF_FFE_3_ZEROAVG : 1;
    ///< VREF3 FFE AVG counter is zero
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t VREF_ADC_0_ZEROAVG : 1;
    ///< VREF0 ADC AVG counter is zero
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t VREF_ADC_1_ZEROAVG : 1;
    ///< VREF1 ADC AVG counter is zero
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t VREF_ADC_2_ZEROAVG : 1;
    ///< VREF2 ADC AVG counter is zero
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t VREF_ADC_3_ZEROAVG : 1;
    ///< VREF3 ADC AVG counter is zero
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t FFE_PRE_3_ZEROAVG : 1;
    ///< FFE PRE3 AVG counter is zero
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t FFE_PRE_2_ZEROAVG : 1;
    ///< FFE PRE2 AVG counter is zero
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t FFE_PRE_1_ZEROAVG : 1;
    ///< FFE PRE1 AVG counter is zero
    ///< AccessType="RO/V" BitOffset="10" ResetValue="0x0"
    uint32_t FFE_POST_1_ZEROAVG : 1;
    ///< FFE POST1 AVG counter is zero
    ///< AccessType="RO/V" BitOffset="11" ResetValue="0x0"
    uint32_t FFE_POST_2_ZEROAVG : 1;
    ///< FFE POST2 AVG counter is zero
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t FFE_POST_3_ZEROAVG : 1;
    ///< FFE POST3 AVG counter is zero
    ///< AccessType="RO/V" BitOffset="13" ResetValue="0x0"
    uint32_t FFE_POST_4_ZEROAVG : 1;
    ///< FFE POST4 AVG counter is zero
    ///< AccessType="RO/V" BitOffset="14" ResetValue="0x0"
    uint32_t FFE_POST_5_ZEROAVG : 1;
    ///< FFE POST5 AVG counter is zero
    ///< AccessType="RO/V" BitOffset="15" ResetValue="0x0"
    uint32_t FFE_POST_6_ZEROAVG : 1;
    ///< FFE POST6 AVG counter is zero
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t FFE_POST_7_ZEROAVG : 1;
    ///< FFE POST7 AVG counter is zero
    ///< AccessType="RO/V" BitOffset="17" ResetValue="0x0"
    uint32_t FFE_POST_8_ZEROAVG : 1;
    ///< FFE POST8 AVG counter is zero
    ///< AccessType="RO/V" BitOffset="18" ResetValue="0x0"
    uint32_t FFE_POST_9_ZEROAVG : 1;
    ///< FFE POST9 AVG counter is zero
    ///< AccessType="RO/V" BitOffset="19" ResetValue="0x0"
    uint32_t FFE_POST_10_ZEROAVG : 1;
    ///< FFE POST10 AVG counter is zero
    ///< AccessType="RO/V" BitOffset="20" ResetValue="0x0"
    uint32_t FFE_POST_11_ZEROAVG : 1;
    ///< FFE POST11 AVG counter is zero
    ///< AccessType="RO/V" BitOffset="21" ResetValue="0x0"
    uint32_t FFE_POST_12_ZEROAVG : 1;
    ///< FFE POST12 AVG counter is zero
    ///< AccessType="RO/V" BitOffset="22" ResetValue="0x0"
    uint32_t FFE_BANKA_FLOAT1_ZEROAVG : 1;
    ///< FFE BankA float1 AVG counter is zero
    ///< AccessType="RO/V" BitOffset="23" ResetValue="0x0"
    uint32_t FFE_BANKA_FLOAT2_ZEROAVG : 1;
    ///< FFE BankA float2 AVG counter is zero
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t FFE_BANKA_FLOAT3_ZEROAVG : 1;
    ///< FFE BankA float3 AVG counter is zero
    ///< AccessType="RO/V" BitOffset="25" ResetValue="0x0"
    uint32_t FFE_BANKB_FLOAT1_ZEROAVG : 1;
    ///< FFE BankB float1 AVG counter is zero
    ///< AccessType="RO/V" BitOffset="26" ResetValue="0x0"
    uint32_t FFE_BANKB_FLOAT2_ZEROAVG : 1;
    ///< FFE BankB float2 AVG counter is zero
    ///< AccessType="RO/V" BitOffset="27" ResetValue="0x0"
    uint32_t FFE_BANKB_FLOAT3_ZEROAVG : 1;
    ///< FFE BankB float3 AVG counter is zero
    ///< AccessType="RO/V" BitOffset="28" ResetValue="0x0"
    uint32_t FFE_BANKC_FLOAT1_ZEROAVG : 1;
    ///< FFE BankC float1 AVG counter is zero
    ///< AccessType="RO/V" BitOffset="29" ResetValue="0x0"
    uint32_t FFE_BANKC_FLOAT2_ZEROAVG : 1;
    ///< FFE BankC float2 AVG counter is zero
    ///< AccessType="RO/V" BitOffset="30" ResetValue="0x0"
    uint32_t FFE_BANKC_FLOAT3_ZEROAVG : 1;
    ///< FFE BankC float3 AVG counter is zero
    ///< AccessType="RO/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_zeroavg_stat_0_reg_t;

#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_WR_MASK (0x00000000U)


///< VREF0 FFE AVG counter is zero
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_VREF_FFE_0_ZEROAVG_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_VREF_FFE_0_ZEROAVG_BF_WID ( 1)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_VREF_FFE_0_ZEROAVG_BF_MSK (0x00000001)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_VREF_FFE_0_ZEROAVG_BF_DEF (0x00000000)

///< VREF1 FFE AVG counter is zero
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_VREF_FFE_1_ZEROAVG_BF_OFF ( 1)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_VREF_FFE_1_ZEROAVG_BF_WID ( 1)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_VREF_FFE_1_ZEROAVG_BF_MSK (0x00000002)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_VREF_FFE_1_ZEROAVG_BF_DEF (0x00000000)

///< VREF2 FFE AVG counter is zero
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_VREF_FFE_2_ZEROAVG_BF_OFF ( 2)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_VREF_FFE_2_ZEROAVG_BF_WID ( 1)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_VREF_FFE_2_ZEROAVG_BF_MSK (0x00000004)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_VREF_FFE_2_ZEROAVG_BF_DEF (0x00000000)

///< VREF3 FFE AVG counter is zero
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_VREF_FFE_3_ZEROAVG_BF_OFF ( 3)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_VREF_FFE_3_ZEROAVG_BF_WID ( 1)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_VREF_FFE_3_ZEROAVG_BF_MSK (0x00000008)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_VREF_FFE_3_ZEROAVG_BF_DEF (0x00000000)

///< VREF0 ADC AVG counter is zero
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_VREF_ADC_0_ZEROAVG_BF_OFF ( 4)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_VREF_ADC_0_ZEROAVG_BF_WID ( 1)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_VREF_ADC_0_ZEROAVG_BF_MSK (0x00000010)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_VREF_ADC_0_ZEROAVG_BF_DEF (0x00000000)

///< VREF1 ADC AVG counter is zero
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_VREF_ADC_1_ZEROAVG_BF_OFF ( 5)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_VREF_ADC_1_ZEROAVG_BF_WID ( 1)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_VREF_ADC_1_ZEROAVG_BF_MSK (0x00000020)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_VREF_ADC_1_ZEROAVG_BF_DEF (0x00000000)

///< VREF2 ADC AVG counter is zero
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_VREF_ADC_2_ZEROAVG_BF_OFF ( 6)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_VREF_ADC_2_ZEROAVG_BF_WID ( 1)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_VREF_ADC_2_ZEROAVG_BF_MSK (0x00000040)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_VREF_ADC_2_ZEROAVG_BF_DEF (0x00000000)

///< VREF3 ADC AVG counter is zero
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_VREF_ADC_3_ZEROAVG_BF_OFF ( 7)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_VREF_ADC_3_ZEROAVG_BF_WID ( 1)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_VREF_ADC_3_ZEROAVG_BF_MSK (0x00000080)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_VREF_ADC_3_ZEROAVG_BF_DEF (0x00000000)

///< FFE PRE3 AVG counter is zero
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_PRE_3_ZEROAVG_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_PRE_3_ZEROAVG_BF_WID ( 1)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_PRE_3_ZEROAVG_BF_MSK (0x00000100)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_PRE_3_ZEROAVG_BF_DEF (0x00000000)

///< FFE PRE2 AVG counter is zero
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_PRE_2_ZEROAVG_BF_OFF ( 9)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_PRE_2_ZEROAVG_BF_WID ( 1)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_PRE_2_ZEROAVG_BF_MSK (0x00000200)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_PRE_2_ZEROAVG_BF_DEF (0x00000000)

///< FFE PRE1 AVG counter is zero
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_PRE_1_ZEROAVG_BF_OFF (10)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_PRE_1_ZEROAVG_BF_WID ( 1)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_PRE_1_ZEROAVG_BF_MSK (0x00000400)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_PRE_1_ZEROAVG_BF_DEF (0x00000000)

///< FFE POST1 AVG counter is zero
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_POST_1_ZEROAVG_BF_OFF (11)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_POST_1_ZEROAVG_BF_WID ( 1)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_POST_1_ZEROAVG_BF_MSK (0x00000800)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_POST_1_ZEROAVG_BF_DEF (0x00000000)

///< FFE POST2 AVG counter is zero
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_POST_2_ZEROAVG_BF_OFF (12)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_POST_2_ZEROAVG_BF_WID ( 1)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_POST_2_ZEROAVG_BF_MSK (0x00001000)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_POST_2_ZEROAVG_BF_DEF (0x00000000)

///< FFE POST3 AVG counter is zero
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_POST_3_ZEROAVG_BF_OFF (13)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_POST_3_ZEROAVG_BF_WID ( 1)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_POST_3_ZEROAVG_BF_MSK (0x00002000)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_POST_3_ZEROAVG_BF_DEF (0x00000000)

///< FFE POST4 AVG counter is zero
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_POST_4_ZEROAVG_BF_OFF (14)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_POST_4_ZEROAVG_BF_WID ( 1)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_POST_4_ZEROAVG_BF_MSK (0x00004000)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_POST_4_ZEROAVG_BF_DEF (0x00000000)

///< FFE POST5 AVG counter is zero
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_POST_5_ZEROAVG_BF_OFF (15)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_POST_5_ZEROAVG_BF_WID ( 1)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_POST_5_ZEROAVG_BF_MSK (0x00008000)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_POST_5_ZEROAVG_BF_DEF (0x00000000)

///< FFE POST6 AVG counter is zero
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_POST_6_ZEROAVG_BF_OFF (16)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_POST_6_ZEROAVG_BF_WID ( 1)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_POST_6_ZEROAVG_BF_MSK (0x00010000)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_POST_6_ZEROAVG_BF_DEF (0x00000000)

///< FFE POST7 AVG counter is zero
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_POST_7_ZEROAVG_BF_OFF (17)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_POST_7_ZEROAVG_BF_WID ( 1)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_POST_7_ZEROAVG_BF_MSK (0x00020000)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_POST_7_ZEROAVG_BF_DEF (0x00000000)

///< FFE POST8 AVG counter is zero
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_POST_8_ZEROAVG_BF_OFF (18)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_POST_8_ZEROAVG_BF_WID ( 1)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_POST_8_ZEROAVG_BF_MSK (0x00040000)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_POST_8_ZEROAVG_BF_DEF (0x00000000)

///< FFE POST9 AVG counter is zero
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_POST_9_ZEROAVG_BF_OFF (19)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_POST_9_ZEROAVG_BF_WID ( 1)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_POST_9_ZEROAVG_BF_MSK (0x00080000)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_POST_9_ZEROAVG_BF_DEF (0x00000000)

///< FFE POST10 AVG counter is zero
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_POST_10_ZEROAVG_BF_OFF (20)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_POST_10_ZEROAVG_BF_WID ( 1)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_POST_10_ZEROAVG_BF_MSK (0x00100000)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_POST_10_ZEROAVG_BF_DEF (0x00000000)

///< FFE POST11 AVG counter is zero
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_POST_11_ZEROAVG_BF_OFF (21)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_POST_11_ZEROAVG_BF_WID ( 1)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_POST_11_ZEROAVG_BF_MSK (0x00200000)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_POST_11_ZEROAVG_BF_DEF (0x00000000)

///< FFE POST12 AVG counter is zero
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_POST_12_ZEROAVG_BF_OFF (22)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_POST_12_ZEROAVG_BF_WID ( 1)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_POST_12_ZEROAVG_BF_MSK (0x00400000)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_POST_12_ZEROAVG_BF_DEF (0x00000000)

///< FFE BankA float1 AVG counter is zero
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_BANKA_FLOAT1_ZEROAVG_BF_OFF (23)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_BANKA_FLOAT1_ZEROAVG_BF_WID ( 1)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_BANKA_FLOAT1_ZEROAVG_BF_MSK (0x00800000)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_BANKA_FLOAT1_ZEROAVG_BF_DEF (0x00000000)

///< FFE BankA float2 AVG counter is zero
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_BANKA_FLOAT2_ZEROAVG_BF_OFF (24)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_BANKA_FLOAT2_ZEROAVG_BF_WID ( 1)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_BANKA_FLOAT2_ZEROAVG_BF_MSK (0x01000000)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_BANKA_FLOAT2_ZEROAVG_BF_DEF (0x00000000)

///< FFE BankA float3 AVG counter is zero
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_BANKA_FLOAT3_ZEROAVG_BF_OFF (25)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_BANKA_FLOAT3_ZEROAVG_BF_WID ( 1)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_BANKA_FLOAT3_ZEROAVG_BF_MSK (0x02000000)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_BANKA_FLOAT3_ZEROAVG_BF_DEF (0x00000000)

///< FFE BankB float1 AVG counter is zero
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_BANKB_FLOAT1_ZEROAVG_BF_OFF (26)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_BANKB_FLOAT1_ZEROAVG_BF_WID ( 1)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_BANKB_FLOAT1_ZEROAVG_BF_MSK (0x04000000)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_BANKB_FLOAT1_ZEROAVG_BF_DEF (0x00000000)

///< FFE BankB float2 AVG counter is zero
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_BANKB_FLOAT2_ZEROAVG_BF_OFF (27)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_BANKB_FLOAT2_ZEROAVG_BF_WID ( 1)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_BANKB_FLOAT2_ZEROAVG_BF_MSK (0x08000000)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_BANKB_FLOAT2_ZEROAVG_BF_DEF (0x00000000)

///< FFE BankB float3 AVG counter is zero
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_BANKB_FLOAT3_ZEROAVG_BF_OFF (28)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_BANKB_FLOAT3_ZEROAVG_BF_WID ( 1)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_BANKB_FLOAT3_ZEROAVG_BF_MSK (0x10000000)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_BANKB_FLOAT3_ZEROAVG_BF_DEF (0x00000000)

///< FFE BankC float1 AVG counter is zero
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_BANKC_FLOAT1_ZEROAVG_BF_OFF (29)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_BANKC_FLOAT1_ZEROAVG_BF_WID ( 1)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_BANKC_FLOAT1_ZEROAVG_BF_MSK (0x20000000)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_BANKC_FLOAT1_ZEROAVG_BF_DEF (0x00000000)

///< FFE BankC float2 AVG counter is zero
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_BANKC_FLOAT2_ZEROAVG_BF_OFF (30)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_BANKC_FLOAT2_ZEROAVG_BF_WID ( 1)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_BANKC_FLOAT2_ZEROAVG_BF_MSK (0x40000000)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_BANKC_FLOAT2_ZEROAVG_BF_DEF (0x00000000)

///< FFE BankC float3 AVG counter is zero
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_BANKC_FLOAT3_ZEROAVG_BF_OFF (31)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_BANKC_FLOAT3_ZEROAVG_BF_WID ( 1)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_BANKC_FLOAT3_ZEROAVG_BF_MSK (0x80000000)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_FFE_BANKC_FLOAT3_ZEROAVG_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ZEROAVG_STATUS_1 register description at address offset 0x828
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/zeroavg_status_1
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_ZEROAVG : 8;
    ///< OPS taps [7:0] AVG counter is zero
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_zeroavg_stat_1_reg_t;

#define PMA_RXWORD_MSG_ZEROAVG_STAT_1_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_1_RD_MASK (0x000000ffU)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_1_WR_MASK (0x00000000U)


///< OPS taps [7:0] AVG counter is zero
#define PMA_RXWORD_MSG_ZEROAVG_STAT_1_OPS_TAPS_ZEROAVG_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_1_OPS_TAPS_ZEROAVG_BF_WID ( 8)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_1_OPS_TAPS_ZEROAVG_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_1_OPS_TAPS_ZEROAVG_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ZEROAVG_STATUS_3 register description at address offset 0x830
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/zeroavg_status_3
  * placeholder
  */

typedef union {
  struct {
    uint32_t EDGVREF_HI_ZEROAVG : 1;
    ///< edgvref hi AVG counter is zero
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t EDGVREF_ZR_ZEROAVG : 1;
    ///< edgvref zr AVG counter is zero
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t EDGVREF_LO_ZEROAVG : 1;
    ///< edgvref Lo AVG counter is zero
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t AFFE_PRE2_ZEROAVG : 1;
    ///< AFFE PRE2 AVG counter is zero
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t AFFE_PRE1_ZEROAVG : 1;
    ///< AFFE PRE1 AVG counter is zero
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t AFFE_POST1_ZEROAVG : 1;
    ///< AFFE POST1 AVG counter is zero
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t AFFE_POST2_ZEROAVG : 1;
    ///< AFFE POST2 AVG counter is zero
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t VGA_TAP_ZEROAVG : 1;
    ///< VGA TAP AVG counter is zero
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t CDR_FFE_VREF_ZEROAVG : 4;
    ///< CDR FFE VREF AVG counter is zero
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_ZEROAVG : 7;
    ///< CDR FFE AVG counter is zero
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t DFE_ZEROAVG : 1;
    ///< DFE Tap AVG counter is zero
    ///< AccessType="RO/V" BitOffset="19" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_zeroavg_stat_3_reg_t;

#define PMA_RXWORD_MSG_ZEROAVG_STAT_3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_3_RD_MASK (0x000fffffU)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_3_WR_MASK (0x00000000U)


///< edgvref hi AVG counter is zero
#define PMA_RXWORD_MSG_ZEROAVG_STAT_3_EDGVREF_HI_ZEROAVG_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_3_EDGVREF_HI_ZEROAVG_BF_WID ( 1)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_3_EDGVREF_HI_ZEROAVG_BF_MSK (0x00000001)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_3_EDGVREF_HI_ZEROAVG_BF_DEF (0x00000000)

///< edgvref zr AVG counter is zero
#define PMA_RXWORD_MSG_ZEROAVG_STAT_3_EDGVREF_ZR_ZEROAVG_BF_OFF ( 1)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_3_EDGVREF_ZR_ZEROAVG_BF_WID ( 1)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_3_EDGVREF_ZR_ZEROAVG_BF_MSK (0x00000002)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_3_EDGVREF_ZR_ZEROAVG_BF_DEF (0x00000000)

///< edgvref Lo AVG counter is zero
#define PMA_RXWORD_MSG_ZEROAVG_STAT_3_EDGVREF_LO_ZEROAVG_BF_OFF ( 2)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_3_EDGVREF_LO_ZEROAVG_BF_WID ( 1)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_3_EDGVREF_LO_ZEROAVG_BF_MSK (0x00000004)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_3_EDGVREF_LO_ZEROAVG_BF_DEF (0x00000000)

///< AFFE PRE2 AVG counter is zero
#define PMA_RXWORD_MSG_ZEROAVG_STAT_3_AFFE_PRE2_ZEROAVG_BF_OFF ( 3)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_3_AFFE_PRE2_ZEROAVG_BF_WID ( 1)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_3_AFFE_PRE2_ZEROAVG_BF_MSK (0x00000008)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_3_AFFE_PRE2_ZEROAVG_BF_DEF (0x00000000)

///< AFFE PRE1 AVG counter is zero
#define PMA_RXWORD_MSG_ZEROAVG_STAT_3_AFFE_PRE1_ZEROAVG_BF_OFF ( 4)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_3_AFFE_PRE1_ZEROAVG_BF_WID ( 1)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_3_AFFE_PRE1_ZEROAVG_BF_MSK (0x00000010)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_3_AFFE_PRE1_ZEROAVG_BF_DEF (0x00000000)

///< AFFE POST1 AVG counter is zero
#define PMA_RXWORD_MSG_ZEROAVG_STAT_3_AFFE_POST1_ZEROAVG_BF_OFF ( 5)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_3_AFFE_POST1_ZEROAVG_BF_WID ( 1)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_3_AFFE_POST1_ZEROAVG_BF_MSK (0x00000020)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_3_AFFE_POST1_ZEROAVG_BF_DEF (0x00000000)

///< AFFE POST2 AVG counter is zero
#define PMA_RXWORD_MSG_ZEROAVG_STAT_3_AFFE_POST2_ZEROAVG_BF_OFF ( 6)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_3_AFFE_POST2_ZEROAVG_BF_WID ( 1)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_3_AFFE_POST2_ZEROAVG_BF_MSK (0x00000040)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_3_AFFE_POST2_ZEROAVG_BF_DEF (0x00000000)

///< VGA TAP AVG counter is zero
#define PMA_RXWORD_MSG_ZEROAVG_STAT_3_VGA_TAP_ZEROAVG_BF_OFF ( 7)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_3_VGA_TAP_ZEROAVG_BF_WID ( 1)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_3_VGA_TAP_ZEROAVG_BF_MSK (0x00000080)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_3_VGA_TAP_ZEROAVG_BF_DEF (0x00000000)

///< CDR FFE VREF AVG counter is zero
#define PMA_RXWORD_MSG_ZEROAVG_STAT_3_CDR_FFE_VREF_ZEROAVG_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_3_CDR_FFE_VREF_ZEROAVG_BF_WID ( 4)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_3_CDR_FFE_VREF_ZEROAVG_BF_MSK (0x00000F00)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_3_CDR_FFE_VREF_ZEROAVG_BF_DEF (0x00000000)

///< CDR FFE AVG counter is zero
#define PMA_RXWORD_MSG_ZEROAVG_STAT_3_CDR_FFE_ZEROAVG_BF_OFF (12)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_3_CDR_FFE_ZEROAVG_BF_WID ( 7)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_3_CDR_FFE_ZEROAVG_BF_MSK (0x0007F000)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_3_CDR_FFE_ZEROAVG_BF_DEF (0x00000000)

///< DFE Tap AVG counter is zero
#define PMA_RXWORD_MSG_ZEROAVG_STAT_3_DFE_ZEROAVG_BF_OFF (19)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_3_DFE_ZEROAVG_BF_WID ( 1)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_3_DFE_ZEROAVG_BF_MSK (0x00080000)
#define PMA_RXWORD_MSG_ZEROAVG_STAT_3_DFE_ZEROAVG_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADCOFC_CONTROL_0 register description at address offset 0x834
  *
  * Register default value:        0x00010020
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adcofc_control_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADCOFC_UPDN_INV_CB : 1;
    ///< Chicken bit to invert up/down
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t ADCOFC_TIMER_MAX : 8;
    ///< adcofc delay timer threshold
    ///< AccessType="RW" BitOffset="1" ResetValue="0x10"
    uint32_t ADCOFC_STATS_MAX : 10;
    ///< adcofc stats counter threshold
    ///< AccessType="RW" BitOffset="9" ResetValue="0x80"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
    uint32_t ADCOFC_HOLD_EN : 6;
    ///< Hold adcofc taps accumulators
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_adcofc_ctrl_0_reg_t;

#define PMA_RXWORD_MSG_ADCOFC_CTRL_0_DEFAULT (0x00010020U)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_0_RD_MASK (0x0fc7ffffU)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_0_WR_MASK (0x0fc7ffffU)


///< Chicken bit to invert up/down
#define PMA_RXWORD_MSG_ADCOFC_CTRL_0_ADCOFC_UPDN_INV_CB_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_0_ADCOFC_UPDN_INV_CB_BF_WID ( 1)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_0_ADCOFC_UPDN_INV_CB_BF_MSK (0x00000001)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_0_ADCOFC_UPDN_INV_CB_BF_DEF (0x00000000)

///< adcofc delay timer threshold
#define PMA_RXWORD_MSG_ADCOFC_CTRL_0_ADCOFC_TIMER_MAX_BF_OFF ( 1)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_0_ADCOFC_TIMER_MAX_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_0_ADCOFC_TIMER_MAX_BF_MSK (0x000001FE)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_0_ADCOFC_TIMER_MAX_BF_DEF (0x00000020)

///< adcofc stats counter threshold
#define PMA_RXWORD_MSG_ADCOFC_CTRL_0_ADCOFC_STATS_MAX_BF_OFF ( 9)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_0_ADCOFC_STATS_MAX_BF_WID (10)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_0_ADCOFC_STATS_MAX_BF_MSK (0x0007FE00)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_0_ADCOFC_STATS_MAX_BF_DEF (0x00010000)

///< Hold adcofc taps accumulators
#define PMA_RXWORD_MSG_ADCOFC_CTRL_0_ADCOFC_HOLD_EN_BF_OFF (22)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_0_ADCOFC_HOLD_EN_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_0_ADCOFC_HOLD_EN_BF_MSK (0x0FC00000)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_0_ADCOFC_HOLD_EN_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADCOFC_CONTROL_1 register description at address offset 0x838
  *
  * Register default value:        0x00002D2D
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adcofc_control_1
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADCOFC_INIT_VAL_0 : 6;
    ///< Initial value for adcofc_0 coeff
    ///< AccessType="RW" BitOffset="0" ResetValue="0x2D"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ADCOFC_INIT_VAL_1 : 6;
    ///< Initial value for adcofc_1 coeff
    ///< AccessType="RW" BitOffset="8" ResetValue="0x2D"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t ADCOFC_INIT_VAL_2 : 6;
    ///< Initial value for adcofc_2 coeff
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t ADCOFC_INIT_VAL_3 : 6;
    ///< Initial value for adcofc_3 coeff
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_adcofc_ctrl_1_reg_t;

#define PMA_RXWORD_MSG_ADCOFC_CTRL_1_DEFAULT (0x00002d2dU)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_1_RD_MASK (0x3f3f3f3fU)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_1_WR_MASK (0x3f3f3f3fU)


///< Initial value for adcofc_0 coeff
#define PMA_RXWORD_MSG_ADCOFC_CTRL_1_ADCOFC_INIT_VAL_0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_1_ADCOFC_INIT_VAL_0_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_1_ADCOFC_INIT_VAL_0_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_1_ADCOFC_INIT_VAL_0_BF_DEF (0x0000002D)

///< Initial value for adcofc_1 coeff
#define PMA_RXWORD_MSG_ADCOFC_CTRL_1_ADCOFC_INIT_VAL_1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_1_ADCOFC_INIT_VAL_1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_1_ADCOFC_INIT_VAL_1_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_1_ADCOFC_INIT_VAL_1_BF_DEF (0x00002D00)

///< Initial value for adcofc_2 coeff
#define PMA_RXWORD_MSG_ADCOFC_CTRL_1_ADCOFC_INIT_VAL_2_BF_OFF (16)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_1_ADCOFC_INIT_VAL_2_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_1_ADCOFC_INIT_VAL_2_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_1_ADCOFC_INIT_VAL_2_BF_DEF (0x00000000)

///< Initial value for adcofc_3 coeff
#define PMA_RXWORD_MSG_ADCOFC_CTRL_1_ADCOFC_INIT_VAL_3_BF_OFF (24)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_1_ADCOFC_INIT_VAL_3_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_1_ADCOFC_INIT_VAL_3_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_1_ADCOFC_INIT_VAL_3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADCOFC_CONTROL_2 register description at address offset 0x83c
  *
  * Register default value:        0x4D310410
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adcofc_control_2
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADCOFC_MU_COARSE : 8;
    ///< Update adcofc gain coarse value
    ///< AccessType="RW" BitOffset="0" ResetValue="0x10"
    uint32_t ADCOFC_MU_FINE : 8;
    ///< Update adcofc gain fine value
    ///< AccessType="RW" BitOffset="8" ResetValue="0x4"
    uint32_t ADCOFC_COARSE_MU_EN : 1;
    ///< Select between coarse and fine update gains
    ///< AccessType="RW" BitOffset="16" ResetValue="0x1"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
    uint32_t ADCOFC_INIT_VAL_4 : 6;
    ///< Initial value for adcofc_4 coeff
    ///< AccessType="RW" BitOffset="20" ResetValue="0x13"
    uint32_t ADCOFC_INIT_VAL_5 : 6;
    ///< Initial value for adcofc_5 coeff
    ///< AccessType="RW" BitOffset="26" ResetValue="0x13"
  } ;
  uint32_t value;
} pma_rxword_msg_adcofc_ctrl_2_reg_t;

#define PMA_RXWORD_MSG_ADCOFC_CTRL_2_DEFAULT (0x4d310410U)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_2_RD_MASK (0xfff1ffffU)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_2_WR_MASK (0xfff1ffffU)


///< Update adcofc gain coarse value
#define PMA_RXWORD_MSG_ADCOFC_CTRL_2_ADCOFC_MU_COARSE_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_2_ADCOFC_MU_COARSE_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_2_ADCOFC_MU_COARSE_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_2_ADCOFC_MU_COARSE_BF_DEF (0x00000010)

///< Update adcofc gain fine value
#define PMA_RXWORD_MSG_ADCOFC_CTRL_2_ADCOFC_MU_FINE_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_2_ADCOFC_MU_FINE_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_2_ADCOFC_MU_FINE_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_2_ADCOFC_MU_FINE_BF_DEF (0x00000400)

///< Select between coarse and fine update gains
#define PMA_RXWORD_MSG_ADCOFC_CTRL_2_ADCOFC_COARSE_MU_EN_BF_OFF (16)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_2_ADCOFC_COARSE_MU_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_2_ADCOFC_COARSE_MU_EN_BF_MSK (0x00010000)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_2_ADCOFC_COARSE_MU_EN_BF_DEF (0x00010000)

///< Initial value for adcofc_4 coeff
#define PMA_RXWORD_MSG_ADCOFC_CTRL_2_ADCOFC_INIT_VAL_4_BF_OFF (20)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_2_ADCOFC_INIT_VAL_4_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_2_ADCOFC_INIT_VAL_4_BF_MSK (0x03F00000)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_2_ADCOFC_INIT_VAL_4_BF_DEF (0x01300000)

///< Initial value for adcofc_5 coeff
#define PMA_RXWORD_MSG_ADCOFC_CTRL_2_ADCOFC_INIT_VAL_5_BF_OFF (26)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_2_ADCOFC_INIT_VAL_5_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_2_ADCOFC_INIT_VAL_5_BF_MSK (0xFC000000)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_2_ADCOFC_INIT_VAL_5_BF_DEF (0x4C000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADCOFC_CONTROL_3 register description at address offset 0x840
  *
  * Register default value:        0x0000081F
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adcofc_control_3
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADCOFC_TAP_MAX : 6;
    ///< update adcofc accum saturation at max width
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1F"
    uint32_t ADCOFC_TAP_MIN : 6;
    ///< update adcofc accum saturation at min width
    ///< AccessType="RW" BitOffset="6" ResetValue="0x20"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_adcofc_ctrl_3_reg_t;

#define PMA_RXWORD_MSG_ADCOFC_CTRL_3_DEFAULT (0x0000081fU)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_3_RD_MASK (0x00000fffU)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_3_WR_MASK (0x00000fffU)


///< update adcofc accum saturation at max width
#define PMA_RXWORD_MSG_ADCOFC_CTRL_3_ADCOFC_TAP_MAX_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_3_ADCOFC_TAP_MAX_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_3_ADCOFC_TAP_MAX_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_3_ADCOFC_TAP_MAX_BF_DEF (0x0000001F)

///< update adcofc accum saturation at min width
#define PMA_RXWORD_MSG_ADCOFC_CTRL_3_ADCOFC_TAP_MIN_BF_OFF ( 6)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_3_ADCOFC_TAP_MIN_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_3_ADCOFC_TAP_MIN_BF_MSK (0x00000FC0)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_3_ADCOFC_TAP_MIN_BF_DEF (0x00000800)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADCOFC_STATUS_0 register description at address offset 0x844
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adcofc_status_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADCOFC_TAP_HI : 6;
    ///< adcofc tap high
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ADCOFC_TAP_LO : 6;
    ///< adcofc tap_low
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t ADCOFC_TAP_ZR : 6;
    ///< adcofc tap_zero
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_adcofc_stat_0_reg_t;

#define PMA_RXWORD_MSG_ADCOFC_STAT_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_ADCOFC_STAT_0_RD_MASK (0x003f3f3fU)
#define PMA_RXWORD_MSG_ADCOFC_STAT_0_WR_MASK (0x00000000U)


///< adcofc tap high
#define PMA_RXWORD_MSG_ADCOFC_STAT_0_ADCOFC_TAP_HI_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADCOFC_STAT_0_ADCOFC_TAP_HI_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADCOFC_STAT_0_ADCOFC_TAP_HI_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_ADCOFC_STAT_0_ADCOFC_TAP_HI_BF_DEF (0x00000000)

///< adcofc tap_low
#define PMA_RXWORD_MSG_ADCOFC_STAT_0_ADCOFC_TAP_LO_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADCOFC_STAT_0_ADCOFC_TAP_LO_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADCOFC_STAT_0_ADCOFC_TAP_LO_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_ADCOFC_STAT_0_ADCOFC_TAP_LO_BF_DEF (0x00000000)

///< adcofc tap_zero
#define PMA_RXWORD_MSG_ADCOFC_STAT_0_ADCOFC_TAP_ZR_BF_OFF (16)
#define PMA_RXWORD_MSG_ADCOFC_STAT_0_ADCOFC_TAP_ZR_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADCOFC_STAT_0_ADCOFC_TAP_ZR_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_ADCOFC_STAT_0_ADCOFC_TAP_ZR_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_EDG_SLICE_CONTROL_0 register description at address offset 0x848
  *
  * Register default value:        0x00000230
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/edg_slice_control_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t EDG_SLICE_LEVEL_SRC_SEL : 2;
    ///< Edge slicer threshold source selection. 1-from adc path vref, 2-from
    ///< ffe path vref, 0/3-from edge vref
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t PD_SRC_SEL : 2;
    ///< CDR phase detector data source selection, 0: FFE slicer, 1: DFE slicer,
    ///< 2: ADC slicer, 3: CDR FFE slicer
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t EDG_SLICE_DELAY_VAL : 7;
    ///< Programmable edge slice delay value, range from 0 to 64
    ///< AccessType="RW" BitOffset="4" ResetValue="0x23"
    uint32_t EDG_SLICE_DELAY_PGM_SEL : 1;
    ///< Select software config edg_slice_delay_val as edge slice delay to
    ///< match different PD parth
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t EDG_SLICE_INV_ERR : 1;
    ///< Invert edge slicer polarity
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t  : 19;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_edg_slice_ctrl_0_reg_t;

#define PMA_RXWORD_MSG_EDG_SLICE_CTRL_0_DEFAULT (0x00000230U)
#define PMA_RXWORD_MSG_EDG_SLICE_CTRL_0_RD_MASK (0x00001fffU)
#define PMA_RXWORD_MSG_EDG_SLICE_CTRL_0_WR_MASK (0x00001fffU)


///< Edge slicer threshold source selection. 1-from adc path vref, 2-from
///< ffe path vref, 0/3-from edge vref
#define PMA_RXWORD_MSG_EDG_SLICE_CTRL_0_EDG_SLICE_LVL_SRC_SEL_BF_OFF ( 0)
#define PMA_RXWORD_MSG_EDG_SLICE_CTRL_0_EDG_SLICE_LVL_SRC_SEL_BF_WID ( 2)
#define PMA_RXWORD_MSG_EDG_SLICE_CTRL_0_EDG_SLICE_LVL_SRC_SEL_BF_MSK (0x00000003)
#define PMA_RXWORD_MSG_EDG_SLICE_CTRL_0_EDG_SLICE_LVL_SRC_SEL_BF_DEF (0x00000000)

///< CDR phase detector data source selection, 0: FFE slicer, 1: DFE slicer,
///< 2: ADC slicer, 3: CDR FFE slicer
#define PMA_RXWORD_MSG_EDG_SLICE_CTRL_0_PD_SRC_SEL_BF_OFF ( 2)
#define PMA_RXWORD_MSG_EDG_SLICE_CTRL_0_PD_SRC_SEL_BF_WID ( 2)
#define PMA_RXWORD_MSG_EDG_SLICE_CTRL_0_PD_SRC_SEL_BF_MSK (0x0000000C)
#define PMA_RXWORD_MSG_EDG_SLICE_CTRL_0_PD_SRC_SEL_BF_DEF (0x00000000)

///< Programmable edge slice delay value, range from 0 to 64
#define PMA_RXWORD_MSG_EDG_SLICE_CTRL_0_EDG_SLICE_DELAY_VAL_BF_OFF ( 4)
#define PMA_RXWORD_MSG_EDG_SLICE_CTRL_0_EDG_SLICE_DELAY_VAL_BF_WID ( 7)
#define PMA_RXWORD_MSG_EDG_SLICE_CTRL_0_EDG_SLICE_DELAY_VAL_BF_MSK (0x000007F0)
#define PMA_RXWORD_MSG_EDG_SLICE_CTRL_0_EDG_SLICE_DELAY_VAL_BF_DEF (0x00000230)

///< Select software config edg_slice_delay_val as edge slice delay to
///< match different PD parth
#define PMA_RXWORD_MSG_EDG_SLICE_CTRL_0_EDG_SLICE_DELAY_PGM_SEL_BF_OFF (11)
#define PMA_RXWORD_MSG_EDG_SLICE_CTRL_0_EDG_SLICE_DELAY_PGM_SEL_BF_WID ( 1)
#define PMA_RXWORD_MSG_EDG_SLICE_CTRL_0_EDG_SLICE_DELAY_PGM_SEL_BF_MSK (0x00000800)
#define PMA_RXWORD_MSG_EDG_SLICE_CTRL_0_EDG_SLICE_DELAY_PGM_SEL_BF_DEF (0x00000000)

///< Invert edge slicer polarity
#define PMA_RXWORD_MSG_EDG_SLICE_CTRL_0_EDG_SLICE_INV_ERR_BF_OFF (12)
#define PMA_RXWORD_MSG_EDG_SLICE_CTRL_0_EDG_SLICE_INV_ERR_BF_WID ( 1)
#define PMA_RXWORD_MSG_EDG_SLICE_CTRL_0_EDG_SLICE_INV_ERR_BF_MSK (0x00001000)
#define PMA_RXWORD_MSG_EDG_SLICE_CTRL_0_EDG_SLICE_INV_ERR_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_EDG_SLICER_LEVEL_SET0_CONTROL register description at address offset 0x84c
  *
  * Register default value:        0x00300010
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/edg_slicer_level_set0_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t EDG_SLICE_LEVEL_SET0_HI : 6;
    ///< set0 of edg slicer hi level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x10"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t EDG_SLICE_LEVEL_SET0_ZR : 6;
    ///< set0 of edg slicer zr level
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t EDG_SLICE_LEVEL_SET0_LO : 6;
    ///< set0 of edg slicer lo level
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x30"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_edg_slicer_lvl_set0_ctrl_reg_t;

#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET0_CTRL_DEFAULT (0x00300010U)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET0_CTRL_RD_MASK (0x003f3f3fU)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET0_CTRL_WR_MASK (0x003f3f3fU)


///< set0 of edg slicer hi level
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET0_CTRL_EDG_SLICE_LVL_SET0_HI_BF_OFF ( 0)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET0_CTRL_EDG_SLICE_LVL_SET0_HI_BF_WID ( 6)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET0_CTRL_EDG_SLICE_LVL_SET0_HI_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET0_CTRL_EDG_SLICE_LVL_SET0_HI_BF_DEF (0x00000010)

///< set0 of edg slicer zr level
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET0_CTRL_EDG_SLICE_LVL_SET0_ZR_BF_OFF ( 8)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET0_CTRL_EDG_SLICE_LVL_SET0_ZR_BF_WID ( 6)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET0_CTRL_EDG_SLICE_LVL_SET0_ZR_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET0_CTRL_EDG_SLICE_LVL_SET0_ZR_BF_DEF (0x00000000)

///< set0 of edg slicer lo level
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET0_CTRL_EDG_SLICE_LVL_SET0_LO_BF_OFF (16)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET0_CTRL_EDG_SLICE_LVL_SET0_LO_BF_WID ( 6)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET0_CTRL_EDG_SLICE_LVL_SET0_LO_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET0_CTRL_EDG_SLICE_LVL_SET0_LO_BF_DEF (0x00300000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_EDG_SLICER_LEVEL_SET1_CONTROL register description at address offset 0x850
  *
  * Register default value:        0x00300010
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/edg_slicer_level_set1_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t EDG_SLICE_LEVEL_SET1_HI : 6;
    ///< set1 of edg slicer hi level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x10"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t EDG_SLICE_LEVEL_SET1_ZR : 6;
    ///< set1 of edg slicer zr level
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t EDG_SLICE_LEVEL_SET1_LO : 6;
    ///< set1 of edg slicer lo level
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x30"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_edg_slicer_lvl_set1_ctrl_reg_t;

#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET1_CTRL_DEFAULT (0x00300010U)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET1_CTRL_RD_MASK (0x003f3f3fU)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET1_CTRL_WR_MASK (0x003f3f3fU)


///< set1 of edg slicer hi level
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET1_CTRL_EDG_SLICE_LVL_SET1_HI_BF_OFF ( 0)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET1_CTRL_EDG_SLICE_LVL_SET1_HI_BF_WID ( 6)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET1_CTRL_EDG_SLICE_LVL_SET1_HI_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET1_CTRL_EDG_SLICE_LVL_SET1_HI_BF_DEF (0x00000010)

///< set1 of edg slicer zr level
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET1_CTRL_EDG_SLICE_LVL_SET1_ZR_BF_OFF ( 8)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET1_CTRL_EDG_SLICE_LVL_SET1_ZR_BF_WID ( 6)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET1_CTRL_EDG_SLICE_LVL_SET1_ZR_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET1_CTRL_EDG_SLICE_LVL_SET1_ZR_BF_DEF (0x00000000)

///< set1 of edg slicer lo level
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET1_CTRL_EDG_SLICE_LVL_SET1_LO_BF_OFF (16)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET1_CTRL_EDG_SLICE_LVL_SET1_LO_BF_WID ( 6)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET1_CTRL_EDG_SLICE_LVL_SET1_LO_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET1_CTRL_EDG_SLICE_LVL_SET1_LO_BF_DEF (0x00300000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_EDG_SLICER_LEVEL_SET2_CONTROL register description at address offset 0x854
  *
  * Register default value:        0x00300010
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/edg_slicer_level_set2_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t EDG_SLICE_LEVEL_SET2_HI : 6;
    ///< set2 of edg slicer hi level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x10"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t EDG_SLICE_LEVEL_SET2_ZR : 6;
    ///< set2 of edg slicer zr level
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t EDG_SLICE_LEVEL_SET2_LO : 6;
    ///< set2 of edg slicer lo level
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x30"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_edg_slicer_lvl_set2_ctrl_reg_t;

#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET2_CTRL_DEFAULT (0x00300010U)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET2_CTRL_RD_MASK (0x003f3f3fU)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET2_CTRL_WR_MASK (0x003f3f3fU)


///< set2 of edg slicer hi level
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET2_CTRL_EDG_SLICE_LVL_SET2_HI_BF_OFF ( 0)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET2_CTRL_EDG_SLICE_LVL_SET2_HI_BF_WID ( 6)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET2_CTRL_EDG_SLICE_LVL_SET2_HI_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET2_CTRL_EDG_SLICE_LVL_SET2_HI_BF_DEF (0x00000010)

///< set2 of edg slicer zr level
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET2_CTRL_EDG_SLICE_LVL_SET2_ZR_BF_OFF ( 8)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET2_CTRL_EDG_SLICE_LVL_SET2_ZR_BF_WID ( 6)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET2_CTRL_EDG_SLICE_LVL_SET2_ZR_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET2_CTRL_EDG_SLICE_LVL_SET2_ZR_BF_DEF (0x00000000)

///< set2 of edg slicer lo level
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET2_CTRL_EDG_SLICE_LVL_SET2_LO_BF_OFF (16)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET2_CTRL_EDG_SLICE_LVL_SET2_LO_BF_WID ( 6)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET2_CTRL_EDG_SLICE_LVL_SET2_LO_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET2_CTRL_EDG_SLICE_LVL_SET2_LO_BF_DEF (0x00300000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_EDG_SLICER_LEVEL_SET3_CONTROL register description at address offset 0x858
  *
  * Register default value:        0x00300010
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/edg_slicer_level_set3_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t EDG_SLICE_LEVEL_SET3_HI : 6;
    ///< set3 of edg slicer hi level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x10"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t EDG_SLICE_LEVEL_SET3_ZR : 6;
    ///< set3 of edg slicer zr level
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t EDG_SLICE_LEVEL_SET3_LO : 6;
    ///< set3 of edg slicer lo level
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x30"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_edg_slicer_lvl_set3_ctrl_reg_t;

#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET3_CTRL_DEFAULT (0x00300010U)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET3_CTRL_RD_MASK (0x003f3f3fU)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET3_CTRL_WR_MASK (0x003f3f3fU)


///< set3 of edg slicer hi level
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET3_CTRL_EDG_SLICE_LVL_SET3_HI_BF_OFF ( 0)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET3_CTRL_EDG_SLICE_LVL_SET3_HI_BF_WID ( 6)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET3_CTRL_EDG_SLICE_LVL_SET3_HI_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET3_CTRL_EDG_SLICE_LVL_SET3_HI_BF_DEF (0x00000010)

///< set3 of edg slicer zr level
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET3_CTRL_EDG_SLICE_LVL_SET3_ZR_BF_OFF ( 8)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET3_CTRL_EDG_SLICE_LVL_SET3_ZR_BF_WID ( 6)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET3_CTRL_EDG_SLICE_LVL_SET3_ZR_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET3_CTRL_EDG_SLICE_LVL_SET3_ZR_BF_DEF (0x00000000)

///< set3 of edg slicer lo level
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET3_CTRL_EDG_SLICE_LVL_SET3_LO_BF_OFF (16)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET3_CTRL_EDG_SLICE_LVL_SET3_LO_BF_WID ( 6)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET3_CTRL_EDG_SLICE_LVL_SET3_LO_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET3_CTRL_EDG_SLICE_LVL_SET3_LO_BF_DEF (0x00300000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_EDG_SLICER_LEVEL_SET4_CONTROL register description at address offset 0x85c
  *
  * Register default value:        0x00300010
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/edg_slicer_level_set4_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t EDG_SLICE_LEVEL_SET4_HI : 6;
    ///< set4 of edg slicer hi level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x10"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t EDG_SLICE_LEVEL_SET4_ZR : 6;
    ///< set4 of edg slicer zr level
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t EDG_SLICE_LEVEL_SET4_LO : 6;
    ///< set4 of edg slicer lo level
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x30"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_edg_slicer_lvl_set4_ctrl_reg_t;

#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET4_CTRL_DEFAULT (0x00300010U)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET4_CTRL_RD_MASK (0x003f3f3fU)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET4_CTRL_WR_MASK (0x003f3f3fU)


///< set4 of edg slicer hi level
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET4_CTRL_EDG_SLICE_LVL_SET4_HI_BF_OFF ( 0)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET4_CTRL_EDG_SLICE_LVL_SET4_HI_BF_WID ( 6)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET4_CTRL_EDG_SLICE_LVL_SET4_HI_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET4_CTRL_EDG_SLICE_LVL_SET4_HI_BF_DEF (0x00000010)

///< set4 of edg slicer zr level
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET4_CTRL_EDG_SLICE_LVL_SET4_ZR_BF_OFF ( 8)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET4_CTRL_EDG_SLICE_LVL_SET4_ZR_BF_WID ( 6)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET4_CTRL_EDG_SLICE_LVL_SET4_ZR_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET4_CTRL_EDG_SLICE_LVL_SET4_ZR_BF_DEF (0x00000000)

///< set4 of edg slicer lo level
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET4_CTRL_EDG_SLICE_LVL_SET4_LO_BF_OFF (16)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET4_CTRL_EDG_SLICE_LVL_SET4_LO_BF_WID ( 6)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET4_CTRL_EDG_SLICE_LVL_SET4_LO_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET4_CTRL_EDG_SLICE_LVL_SET4_LO_BF_DEF (0x00300000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_EDG_SLICER_LEVEL_SET5_CONTROL register description at address offset 0x860
  *
  * Register default value:        0x00300010
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/edg_slicer_level_set5_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t EDG_SLICE_LEVEL_SET5_HI : 6;
    ///< set5 of edg slicer hi level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x10"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t EDG_SLICE_LEVEL_SET5_ZR : 6;
    ///< set5 of edg slicer zr level
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t EDG_SLICE_LEVEL_SET5_LO : 6;
    ///< set5 of edg slicer lo level
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x30"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_edg_slicer_lvl_set5_ctrl_reg_t;

#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET5_CTRL_DEFAULT (0x00300010U)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET5_CTRL_RD_MASK (0x003f3f3fU)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET5_CTRL_WR_MASK (0x003f3f3fU)


///< set5 of edg slicer hi level
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET5_CTRL_EDG_SLICE_LVL_SET5_HI_BF_OFF ( 0)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET5_CTRL_EDG_SLICE_LVL_SET5_HI_BF_WID ( 6)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET5_CTRL_EDG_SLICE_LVL_SET5_HI_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET5_CTRL_EDG_SLICE_LVL_SET5_HI_BF_DEF (0x00000010)

///< set5 of edg slicer zr level
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET5_CTRL_EDG_SLICE_LVL_SET5_ZR_BF_OFF ( 8)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET5_CTRL_EDG_SLICE_LVL_SET5_ZR_BF_WID ( 6)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET5_CTRL_EDG_SLICE_LVL_SET5_ZR_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET5_CTRL_EDG_SLICE_LVL_SET5_ZR_BF_DEF (0x00000000)

///< set5 of edg slicer lo level
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET5_CTRL_EDG_SLICE_LVL_SET5_LO_BF_OFF (16)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET5_CTRL_EDG_SLICE_LVL_SET5_LO_BF_WID ( 6)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET5_CTRL_EDG_SLICE_LVL_SET5_LO_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET5_CTRL_EDG_SLICE_LVL_SET5_LO_BF_DEF (0x00300000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_EDG_SLICER_LEVEL_SET6_CONTROL register description at address offset 0x864
  *
  * Register default value:        0x00300010
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/edg_slicer_level_set6_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t EDG_SLICE_LEVEL_SET6_HI : 6;
    ///< set6 of edg slicer hi level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x10"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t EDG_SLICE_LEVEL_SET6_ZR : 6;
    ///< set6 of edg slicer zr level
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t EDG_SLICE_LEVEL_SET6_LO : 6;
    ///< set6 of edg slicer lo level
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x30"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_edg_slicer_lvl_set6_ctrl_reg_t;

#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET6_CTRL_DEFAULT (0x00300010U)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET6_CTRL_RD_MASK (0x003f3f3fU)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET6_CTRL_WR_MASK (0x003f3f3fU)


///< set6 of edg slicer hi level
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET6_CTRL_EDG_SLICE_LVL_SET6_HI_BF_OFF ( 0)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET6_CTRL_EDG_SLICE_LVL_SET6_HI_BF_WID ( 6)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET6_CTRL_EDG_SLICE_LVL_SET6_HI_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET6_CTRL_EDG_SLICE_LVL_SET6_HI_BF_DEF (0x00000010)

///< set6 of edg slicer zr level
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET6_CTRL_EDG_SLICE_LVL_SET6_ZR_BF_OFF ( 8)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET6_CTRL_EDG_SLICE_LVL_SET6_ZR_BF_WID ( 6)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET6_CTRL_EDG_SLICE_LVL_SET6_ZR_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET6_CTRL_EDG_SLICE_LVL_SET6_ZR_BF_DEF (0x00000000)

///< set6 of edg slicer lo level
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET6_CTRL_EDG_SLICE_LVL_SET6_LO_BF_OFF (16)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET6_CTRL_EDG_SLICE_LVL_SET6_LO_BF_WID ( 6)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET6_CTRL_EDG_SLICE_LVL_SET6_LO_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET6_CTRL_EDG_SLICE_LVL_SET6_LO_BF_DEF (0x00300000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_EDG_SLICER_LEVEL_SET7_CONTROL register description at address offset 0x868
  *
  * Register default value:        0x00300010
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/edg_slicer_level_set7_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t EDG_SLICE_LEVEL_SET7_HI : 6;
    ///< set7 of edg slicer hi level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x10"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t EDG_SLICE_LEVEL_SET7_ZR : 6;
    ///< set7 of edg slicer zr level
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t EDG_SLICE_LEVEL_SET7_LO : 6;
    ///< set7 of edg slicer lo level
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x30"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_edg_slicer_lvl_set7_ctrl_reg_t;

#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET7_CTRL_DEFAULT (0x00300010U)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET7_CTRL_RD_MASK (0x003f3f3fU)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET7_CTRL_WR_MASK (0x003f3f3fU)


///< set7 of edg slicer hi level
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET7_CTRL_EDG_SLICE_LVL_SET7_HI_BF_OFF ( 0)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET7_CTRL_EDG_SLICE_LVL_SET7_HI_BF_WID ( 6)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET7_CTRL_EDG_SLICE_LVL_SET7_HI_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET7_CTRL_EDG_SLICE_LVL_SET7_HI_BF_DEF (0x00000010)

///< set7 of edg slicer zr level
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET7_CTRL_EDG_SLICE_LVL_SET7_ZR_BF_OFF ( 8)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET7_CTRL_EDG_SLICE_LVL_SET7_ZR_BF_WID ( 6)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET7_CTRL_EDG_SLICE_LVL_SET7_ZR_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET7_CTRL_EDG_SLICE_LVL_SET7_ZR_BF_DEF (0x00000000)

///< set7 of edg slicer lo level
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET7_CTRL_EDG_SLICE_LVL_SET7_LO_BF_OFF (16)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET7_CTRL_EDG_SLICE_LVL_SET7_LO_BF_WID ( 6)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET7_CTRL_EDG_SLICE_LVL_SET7_LO_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET7_CTRL_EDG_SLICE_LVL_SET7_LO_BF_DEF (0x00300000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_EDGVREF_CONTROL_1 register description at address offset 0x86c
  *
  * Register default value:        0x00000100
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/edgvref_control_1
  * placeholder
  */

typedef union {
  struct {
    uint32_t EDGVREF_HOLD_EN : 3;
    ///< edgVRef hold tap accumulator
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t EDGVREF_UPDN_INV_CB : 1;
    ///< edgVRef  chicken bit to invert up/down
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t EDGVREF_INT_ITER_MAX : 4;
    ///< edgVRef internal iterator max count
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t EDGVREF_INT_ITER_BYPASS : 1;
    ///< edgVRef internal iterator bypass
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_edgvref_ctrl_1_reg_t;

#define PMA_RXWORD_MSG_EDGVREF_CTRL_1_DEFAULT (0x00000100U)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_1_RD_MASK (0x000001ffU)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_1_WR_MASK (0x000001ffU)


///< edgVRef hold tap accumulator
#define PMA_RXWORD_MSG_EDGVREF_CTRL_1_EDGVREF_HOLD_EN_BF_OFF ( 0)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_1_EDGVREF_HOLD_EN_BF_WID ( 3)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_1_EDGVREF_HOLD_EN_BF_MSK (0x00000007)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_1_EDGVREF_HOLD_EN_BF_DEF (0x00000000)

///< edgVRef  chicken bit to invert up/down
#define PMA_RXWORD_MSG_EDGVREF_CTRL_1_EDGVREF_UPDN_INV_CB_BF_OFF ( 3)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_1_EDGVREF_UPDN_INV_CB_BF_WID ( 1)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_1_EDGVREF_UPDN_INV_CB_BF_MSK (0x00000008)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_1_EDGVREF_UPDN_INV_CB_BF_DEF (0x00000000)

///< edgVRef internal iterator max count
#define PMA_RXWORD_MSG_EDGVREF_CTRL_1_EDGVREF_INT_ITER_MAX_BF_OFF ( 4)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_1_EDGVREF_INT_ITER_MAX_BF_WID ( 4)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_1_EDGVREF_INT_ITER_MAX_BF_MSK (0x000000F0)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_1_EDGVREF_INT_ITER_MAX_BF_DEF (0x00000000)

///< edgVRef internal iterator bypass
#define PMA_RXWORD_MSG_EDGVREF_CTRL_1_EDGVREF_INT_ITER_BYP_BF_OFF ( 8)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_1_EDGVREF_INT_ITER_BYP_BF_WID ( 1)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_1_EDGVREF_INT_ITER_BYP_BF_MSK (0x00000100)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_1_EDGVREF_INT_ITER_BYP_BF_DEF (0x00000100)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_EDGVREF_CONTROL_2 register description at address offset 0x870
  *
  * Register default value:        0x0000002D
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/edgvref_control_2
  * placeholder
  */

typedef union {
  struct {
    uint32_t EDGVREF_INIT_VAL_0 : 6;
    ///< edgVRef initial values for Vrefs
    ///< AccessType="RW" BitOffset="0" ResetValue="0x2D"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t EDGVREF_INIT_VAL_1 : 6;
    ///< edgVRef initial values for Vrefs
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 18;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_edgvref_ctrl_2_reg_t;

#define PMA_RXWORD_MSG_EDGVREF_CTRL_2_DEFAULT (0x0000002dU)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_2_RD_MASK (0x00003f3fU)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_2_WR_MASK (0x00003f3fU)


///< edgVRef initial values for Vrefs
#define PMA_RXWORD_MSG_EDGVREF_CTRL_2_EDGVREF_INIT_VAL_0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_2_EDGVREF_INIT_VAL_0_BF_WID ( 6)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_2_EDGVREF_INIT_VAL_0_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_2_EDGVREF_INIT_VAL_0_BF_DEF (0x0000002D)

///< edgVRef initial values for Vrefs
#define PMA_RXWORD_MSG_EDGVREF_CTRL_2_EDGVREF_INIT_VAL_1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_2_EDGVREF_INIT_VAL_1_BF_WID ( 6)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_2_EDGVREF_INIT_VAL_1_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_2_EDGVREF_INIT_VAL_1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_EDGVREF_CONTROL_3 register description at address offset 0x874
  *
  * Register default value:        0x00000013
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/edgvref_control_3
  * placeholder
  */

typedef union {
  struct {
    uint32_t EDGVREF_INIT_VAL_2 : 6;
    ///< edgVRef initial values for Vrefs
    ///< AccessType="RW" BitOffset="0" ResetValue="0x13"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_edgvref_ctrl_3_reg_t;

#define PMA_RXWORD_MSG_EDGVREF_CTRL_3_DEFAULT (0x00000013U)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_3_RD_MASK (0x0000003fU)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_3_WR_MASK (0x0000003fU)


///< edgVRef initial values for Vrefs
#define PMA_RXWORD_MSG_EDGVREF_CTRL_3_EDGVREF_INIT_VAL_2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_3_EDGVREF_INIT_VAL_2_BF_WID ( 6)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_3_EDGVREF_INIT_VAL_2_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_3_EDGVREF_INIT_VAL_2_BF_DEF (0x00000013)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_EDGVREF_CONTROL_4 register description at address offset 0x878
  *
  * Register default value:        0x00004008
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/edgvref_control_4
  * placeholder
  */

typedef union {
  struct {
    uint32_t EDGVREF_TIMER_MAX : 8;
    ///< edgVRef delay timer
    ///< AccessType="RW" BitOffset="0" ResetValue="0x8"
    uint32_t EDGVREF_STATS_MAX : 10;
    ///< edgVRef stats counter
    ///< AccessType="RW" BitOffset="8" ResetValue="0x40"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_edgvref_ctrl_4_reg_t;

#define PMA_RXWORD_MSG_EDGVREF_CTRL_4_DEFAULT (0x00004008U)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_4_RD_MASK (0x0003ffffU)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_4_WR_MASK (0x0003ffffU)


///< edgVRef delay timer
#define PMA_RXWORD_MSG_EDGVREF_CTRL_4_EDGVREF_TIMER_MAX_BF_OFF ( 0)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_4_EDGVREF_TIMER_MAX_BF_WID ( 8)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_4_EDGVREF_TIMER_MAX_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_4_EDGVREF_TIMER_MAX_BF_DEF (0x00000008)

///< edgVRef stats counter
#define PMA_RXWORD_MSG_EDGVREF_CTRL_4_EDGVREF_STATS_MAX_BF_OFF ( 8)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_4_EDGVREF_STATS_MAX_BF_WID (10)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_4_EDGVREF_STATS_MAX_BF_MSK (0x0003FF00)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_4_EDGVREF_STATS_MAX_BF_DEF (0x00004000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_EDGVREF_CONTROL_5 register description at address offset 0x87c
  *
  * Register default value:        0x0000201F
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/edgvref_control_5
  * placeholder
  */

typedef union {
  struct {
    uint32_t EDGVREF_TAP_MAX : 6;
    ///< edgVRef update accum saturation
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1F"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t EDGVREF_TAP_MIN : 6;
    ///< edgVRef update accum saturation
    ///< AccessType="RW" BitOffset="8" ResetValue="0x20"
    uint32_t  : 18;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_edgvref_ctrl_5_reg_t;

#define PMA_RXWORD_MSG_EDGVREF_CTRL_5_DEFAULT (0x0000201fU)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_5_RD_MASK (0x00003f3fU)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_5_WR_MASK (0x00003f3fU)


///< edgVRef update accum saturation
#define PMA_RXWORD_MSG_EDGVREF_CTRL_5_EDGVREF_TAP_MAX_BF_OFF ( 0)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_5_EDGVREF_TAP_MAX_BF_WID ( 6)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_5_EDGVREF_TAP_MAX_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_5_EDGVREF_TAP_MAX_BF_DEF (0x0000001F)

///< edgVRef update accum saturation
#define PMA_RXWORD_MSG_EDGVREF_CTRL_5_EDGVREF_TAP_MIN_BF_OFF ( 8)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_5_EDGVREF_TAP_MIN_BF_WID ( 6)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_5_EDGVREF_TAP_MIN_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_5_EDGVREF_TAP_MIN_BF_DEF (0x00002000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_EDGVREF_CONTROL_6 register description at address offset 0x880
  *
  * Register default value:        0x00000811
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/edgvref_control_6
  * placeholder
  */

typedef union {
  struct {
    uint32_t EDGVREF_COARSE_MU_EN : 1;
    ///< use coarse mu for vref
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t EDGVREF_MU_COARSE : 8;
    ///< edgVRef update gain value for coarse run
    ///< AccessType="RW" BitOffset="1" ResetValue="0x8"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
    uint32_t EDGVREF_MU_FINE : 8;
    ///< edgVRef update gain value for fine run
    ///< AccessType="RW" BitOffset="10" ResetValue="0x2"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_edgvref_ctrl_6_reg_t;

#define PMA_RXWORD_MSG_EDGVREF_CTRL_6_DEFAULT (0x00000811U)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_6_RD_MASK (0x0003fdffU)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_6_WR_MASK (0x0003fdffU)


///< use coarse mu for vref
#define PMA_RXWORD_MSG_EDGVREF_CTRL_6_EDGVREF_COARSE_MU_EN_BF_OFF ( 0)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_6_EDGVREF_COARSE_MU_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_6_EDGVREF_COARSE_MU_EN_BF_MSK (0x00000001)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_6_EDGVREF_COARSE_MU_EN_BF_DEF (0x00000001)

///< edgVRef update gain value for coarse run
#define PMA_RXWORD_MSG_EDGVREF_CTRL_6_EDGVREF_MU_COARSE_BF_OFF ( 1)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_6_EDGVREF_MU_COARSE_BF_WID ( 8)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_6_EDGVREF_MU_COARSE_BF_MSK (0x000001FE)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_6_EDGVREF_MU_COARSE_BF_DEF (0x00000010)

///< edgVRef update gain value for fine run
#define PMA_RXWORD_MSG_EDGVREF_CTRL_6_EDGVREF_MU_FINE_BF_OFF (10)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_6_EDGVREF_MU_FINE_BF_WID ( 8)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_6_EDGVREF_MU_FINE_BF_MSK (0x0003FC00)
#define PMA_RXWORD_MSG_EDGVREF_CTRL_6_EDGVREF_MU_FINE_BF_DEF (0x00000800)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_EDGVREF_FRAC_SET0 register description at address offset 0x884
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/edgvref_frac_set0
  * placeholder
  */

typedef union {
  struct {
    uint32_t EDGVREF_FRAC_SET0_HI : 8;
    ///< edgVREF set0 level hi fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t EDGVREF_FRAC_SET0_ZR : 8;
    ///< edgVREF set0 level zr fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t EDGVREF_FRAC_SET0_LO : 8;
    ///< edgVREF set0 level lo fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_edgvref_frac_set0_reg_t;

#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET0_RD_MASK (0x00ffffffU)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET0_WR_MASK (0x00ffffffU)


///< edgVREF set0 level hi fractional part
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET0_EDGVREF_FRAC_SET0_HI_BF_OFF ( 0)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET0_EDGVREF_FRAC_SET0_HI_BF_WID ( 8)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET0_EDGVREF_FRAC_SET0_HI_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET0_EDGVREF_FRAC_SET0_HI_BF_DEF (0x00000000)

///< edgVREF set0 level zr fractional part
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET0_EDGVREF_FRAC_SET0_ZR_BF_OFF ( 8)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET0_EDGVREF_FRAC_SET0_ZR_BF_WID ( 8)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET0_EDGVREF_FRAC_SET0_ZR_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET0_EDGVREF_FRAC_SET0_ZR_BF_DEF (0x00000000)

///< edgVREF set0 level lo fractional part
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET0_EDGVREF_FRAC_SET0_LO_BF_OFF (16)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET0_EDGVREF_FRAC_SET0_LO_BF_WID ( 8)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET0_EDGVREF_FRAC_SET0_LO_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET0_EDGVREF_FRAC_SET0_LO_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_EDGVREF_FRAC_SET1 register description at address offset 0x888
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/edgvref_frac_set1
  * placeholder
  */

typedef union {
  struct {
    uint32_t EDGVREF_FRAC_SET1_HI : 8;
    ///< edgVREF set1 level hi fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t EDGVREF_FRAC_SET1_ZR : 8;
    ///< edgVREF set1 level zr fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t EDGVREF_FRAC_SET1_LO : 8;
    ///< edgVREF set1 level lo fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_edgvref_frac_set1_reg_t;

#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET1_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET1_RD_MASK (0x00ffffffU)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET1_WR_MASK (0x00ffffffU)


///< edgVREF set1 level hi fractional part
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET1_EDGVREF_FRAC_SET1_HI_BF_OFF ( 0)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET1_EDGVREF_FRAC_SET1_HI_BF_WID ( 8)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET1_EDGVREF_FRAC_SET1_HI_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET1_EDGVREF_FRAC_SET1_HI_BF_DEF (0x00000000)

///< edgVREF set1 level zr fractional part
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET1_EDGVREF_FRAC_SET1_ZR_BF_OFF ( 8)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET1_EDGVREF_FRAC_SET1_ZR_BF_WID ( 8)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET1_EDGVREF_FRAC_SET1_ZR_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET1_EDGVREF_FRAC_SET1_ZR_BF_DEF (0x00000000)

///< edgVREF set1 level lo fractional part
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET1_EDGVREF_FRAC_SET1_LO_BF_OFF (16)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET1_EDGVREF_FRAC_SET1_LO_BF_WID ( 8)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET1_EDGVREF_FRAC_SET1_LO_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET1_EDGVREF_FRAC_SET1_LO_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_EDGVREF_FRAC_SET2 register description at address offset 0x88c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/edgvref_frac_set2
  * placeholder
  */

typedef union {
  struct {
    uint32_t EDGVREF_FRAC_SET2_HI : 8;
    ///< edgVREF set2 level hi fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t EDGVREF_FRAC_SET2_ZR : 8;
    ///< edgVREF set2 level zr fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t EDGVREF_FRAC_SET2_LO : 8;
    ///< edgVREF set2 level lo fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_edgvref_frac_set2_reg_t;

#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET2_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET2_RD_MASK (0x00ffffffU)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET2_WR_MASK (0x00ffffffU)


///< edgVREF set2 level hi fractional part
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET2_EDGVREF_FRAC_SET2_HI_BF_OFF ( 0)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET2_EDGVREF_FRAC_SET2_HI_BF_WID ( 8)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET2_EDGVREF_FRAC_SET2_HI_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET2_EDGVREF_FRAC_SET2_HI_BF_DEF (0x00000000)

///< edgVREF set2 level zr fractional part
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET2_EDGVREF_FRAC_SET2_ZR_BF_OFF ( 8)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET2_EDGVREF_FRAC_SET2_ZR_BF_WID ( 8)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET2_EDGVREF_FRAC_SET2_ZR_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET2_EDGVREF_FRAC_SET2_ZR_BF_DEF (0x00000000)

///< edgVREF set2 level lo fractional part
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET2_EDGVREF_FRAC_SET2_LO_BF_OFF (16)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET2_EDGVREF_FRAC_SET2_LO_BF_WID ( 8)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET2_EDGVREF_FRAC_SET2_LO_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET2_EDGVREF_FRAC_SET2_LO_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_EDGVREF_FRAC_SET3 register description at address offset 0x890
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/edgvref_frac_set3
  * placeholder
  */

typedef union {
  struct {
    uint32_t EDGVREF_FRAC_SET3_HI : 8;
    ///< edgVREF set3 level hi fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t EDGVREF_FRAC_SET3_ZR : 8;
    ///< edgVREF set3 level zr fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t EDGVREF_FRAC_SET3_LO : 8;
    ///< edgVREF set3 level lo fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_edgvref_frac_set3_reg_t;

#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET3_RD_MASK (0x00ffffffU)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET3_WR_MASK (0x00ffffffU)


///< edgVREF set3 level hi fractional part
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET3_EDGVREF_FRAC_SET3_HI_BF_OFF ( 0)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET3_EDGVREF_FRAC_SET3_HI_BF_WID ( 8)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET3_EDGVREF_FRAC_SET3_HI_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET3_EDGVREF_FRAC_SET3_HI_BF_DEF (0x00000000)

///< edgVREF set3 level zr fractional part
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET3_EDGVREF_FRAC_SET3_ZR_BF_OFF ( 8)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET3_EDGVREF_FRAC_SET3_ZR_BF_WID ( 8)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET3_EDGVREF_FRAC_SET3_ZR_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET3_EDGVREF_FRAC_SET3_ZR_BF_DEF (0x00000000)

///< edgVREF set3 level lo fractional part
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET3_EDGVREF_FRAC_SET3_LO_BF_OFF (16)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET3_EDGVREF_FRAC_SET3_LO_BF_WID ( 8)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET3_EDGVREF_FRAC_SET3_LO_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET3_EDGVREF_FRAC_SET3_LO_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_EDGVREF_FRAC_SET4 register description at address offset 0x894
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/edgvref_frac_set4
  * placeholder
  */

typedef union {
  struct {
    uint32_t EDGVREF_FRAC_SET4_HI : 8;
    ///< edgVREF set4 level hi fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t EDGVREF_FRAC_SET4_ZR : 8;
    ///< edgVREF set4 level zr fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t EDGVREF_FRAC_SET4_LO : 8;
    ///< edgVREF set4 level lo fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_edgvref_frac_set4_reg_t;

#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET4_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET4_RD_MASK (0x00ffffffU)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET4_WR_MASK (0x00ffffffU)


///< edgVREF set4 level hi fractional part
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET4_EDGVREF_FRAC_SET4_HI_BF_OFF ( 0)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET4_EDGVREF_FRAC_SET4_HI_BF_WID ( 8)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET4_EDGVREF_FRAC_SET4_HI_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET4_EDGVREF_FRAC_SET4_HI_BF_DEF (0x00000000)

///< edgVREF set4 level zr fractional part
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET4_EDGVREF_FRAC_SET4_ZR_BF_OFF ( 8)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET4_EDGVREF_FRAC_SET4_ZR_BF_WID ( 8)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET4_EDGVREF_FRAC_SET4_ZR_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET4_EDGVREF_FRAC_SET4_ZR_BF_DEF (0x00000000)

///< edgVREF set4 level lo fractional part
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET4_EDGVREF_FRAC_SET4_LO_BF_OFF (16)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET4_EDGVREF_FRAC_SET4_LO_BF_WID ( 8)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET4_EDGVREF_FRAC_SET4_LO_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET4_EDGVREF_FRAC_SET4_LO_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_EDGVREF_FRAC_SET5 register description at address offset 0x898
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/edgvref_frac_set5
  * placeholder
  */

typedef union {
  struct {
    uint32_t EDGVREF_FRAC_SET5_HI : 8;
    ///< edgVREF set5 level hi fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t EDGVREF_FRAC_SET5_ZR : 8;
    ///< edgVREF set5 level zr fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t EDGVREF_FRAC_SET5_LO : 8;
    ///< edgVREF set5 level lo fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_edgvref_frac_set5_reg_t;

#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET5_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET5_RD_MASK (0x00ffffffU)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET5_WR_MASK (0x00ffffffU)


///< edgVREF set5 level hi fractional part
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET5_EDGVREF_FRAC_SET5_HI_BF_OFF ( 0)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET5_EDGVREF_FRAC_SET5_HI_BF_WID ( 8)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET5_EDGVREF_FRAC_SET5_HI_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET5_EDGVREF_FRAC_SET5_HI_BF_DEF (0x00000000)

///< edgVREF set5 level zr fractional part
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET5_EDGVREF_FRAC_SET5_ZR_BF_OFF ( 8)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET5_EDGVREF_FRAC_SET5_ZR_BF_WID ( 8)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET5_EDGVREF_FRAC_SET5_ZR_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET5_EDGVREF_FRAC_SET5_ZR_BF_DEF (0x00000000)

///< edgVREF set5 level lo fractional part
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET5_EDGVREF_FRAC_SET5_LO_BF_OFF (16)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET5_EDGVREF_FRAC_SET5_LO_BF_WID ( 8)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET5_EDGVREF_FRAC_SET5_LO_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET5_EDGVREF_FRAC_SET5_LO_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_EDGVREF_FRAC_SET6 register description at address offset 0x89c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/edgvref_frac_set6
  * placeholder
  */

typedef union {
  struct {
    uint32_t EDGVREF_FRAC_SET6_HI : 8;
    ///< edgVREF set6 level hi fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t EDGVREF_FRAC_SET6_ZR : 8;
    ///< edgVREF set6 level zr fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t EDGVREF_FRAC_SET6_LO : 8;
    ///< edgVREF set6 level lo fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_edgvref_frac_set6_reg_t;

#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET6_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET6_RD_MASK (0x00ffffffU)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET6_WR_MASK (0x00ffffffU)


///< edgVREF set6 level hi fractional part
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET6_EDGVREF_FRAC_SET6_HI_BF_OFF ( 0)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET6_EDGVREF_FRAC_SET6_HI_BF_WID ( 8)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET6_EDGVREF_FRAC_SET6_HI_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET6_EDGVREF_FRAC_SET6_HI_BF_DEF (0x00000000)

///< edgVREF set6 level zr fractional part
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET6_EDGVREF_FRAC_SET6_ZR_BF_OFF ( 8)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET6_EDGVREF_FRAC_SET6_ZR_BF_WID ( 8)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET6_EDGVREF_FRAC_SET6_ZR_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET6_EDGVREF_FRAC_SET6_ZR_BF_DEF (0x00000000)

///< edgVREF set6 level lo fractional part
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET6_EDGVREF_FRAC_SET6_LO_BF_OFF (16)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET6_EDGVREF_FRAC_SET6_LO_BF_WID ( 8)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET6_EDGVREF_FRAC_SET6_LO_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET6_EDGVREF_FRAC_SET6_LO_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_EDGVREF_FRAC_SET7 register description at address offset 0x8a0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/edgvref_frac_set7
  * placeholder
  */

typedef union {
  struct {
    uint32_t EDGVREF_FRAC_SET7_HI : 8;
    ///< edgVREF set7 level hi fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t EDGVREF_FRAC_SET7_ZR : 8;
    ///< edgVREF set7 level zr fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t EDGVREF_FRAC_SET7_LO : 8;
    ///< edgVREF set7 level lo fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_edgvref_frac_set7_reg_t;

#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET7_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET7_RD_MASK (0x00ffffffU)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET7_WR_MASK (0x00ffffffU)


///< edgVREF set7 level hi fractional part
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET7_EDGVREF_FRAC_SET7_HI_BF_OFF ( 0)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET7_EDGVREF_FRAC_SET7_HI_BF_WID ( 8)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET7_EDGVREF_FRAC_SET7_HI_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET7_EDGVREF_FRAC_SET7_HI_BF_DEF (0x00000000)

///< edgVREF set7 level zr fractional part
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET7_EDGVREF_FRAC_SET7_ZR_BF_OFF ( 8)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET7_EDGVREF_FRAC_SET7_ZR_BF_WID ( 8)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET7_EDGVREF_FRAC_SET7_ZR_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET7_EDGVREF_FRAC_SET7_ZR_BF_DEF (0x00000000)

///< edgVREF set7 level lo fractional part
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET7_EDGVREF_FRAC_SET7_LO_BF_OFF (16)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET7_EDGVREF_FRAC_SET7_LO_BF_WID ( 8)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET7_EDGVREF_FRAC_SET7_LO_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET7_EDGVREF_FRAC_SET7_LO_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_JPP_CONTROL_0 register description at address offset 0x8a4
  *
  * Register default value:        0x00000100
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/jpp_control_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t JPP_DFFE_OFFSET : 8;
    ///< JPP dFFE offset
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t JPP_DFFE_GAIN : 8;
    ///< JPP dFFE gain
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1"
    uint32_t JPP_DFFE_EN : 1;
    ///< Enable dFFE JPP function
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_jpp_ctrl_0_reg_t;

#define PMA_RXWORD_MSG_JPP_CTRL_0_DEFAULT (0x00000100U)
#define PMA_RXWORD_MSG_JPP_CTRL_0_RD_MASK (0x0001ffffU)
#define PMA_RXWORD_MSG_JPP_CTRL_0_WR_MASK (0x0001ffffU)


///< JPP dFFE offset
#define PMA_RXWORD_MSG_JPP_CTRL_0_JPP_DFFE_OFFSET_BF_OFF ( 0)
#define PMA_RXWORD_MSG_JPP_CTRL_0_JPP_DFFE_OFFSET_BF_WID ( 8)
#define PMA_RXWORD_MSG_JPP_CTRL_0_JPP_DFFE_OFFSET_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_JPP_CTRL_0_JPP_DFFE_OFFSET_BF_DEF (0x00000000)

///< JPP dFFE gain
#define PMA_RXWORD_MSG_JPP_CTRL_0_JPP_DFFE_GAIN_BF_OFF ( 8)
#define PMA_RXWORD_MSG_JPP_CTRL_0_JPP_DFFE_GAIN_BF_WID ( 8)
#define PMA_RXWORD_MSG_JPP_CTRL_0_JPP_DFFE_GAIN_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_JPP_CTRL_0_JPP_DFFE_GAIN_BF_DEF (0x00000100)

///< Enable dFFE JPP function
#define PMA_RXWORD_MSG_JPP_CTRL_0_JPP_DFFE_EN_BF_OFF (16)
#define PMA_RXWORD_MSG_JPP_CTRL_0_JPP_DFFE_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_JPP_CTRL_0_JPP_DFFE_EN_BF_MSK (0x00010000)
#define PMA_RXWORD_MSG_JPP_CTRL_0_JPP_DFFE_EN_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_DFE_LMS_CONTROL_0 register description at address offset 0x8a8
  *
  * Register default value:        0x00010020
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/dfe_lms_control_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t DFE_UPDN_INV_CB : 1;
    ///< Chicken bit to invert up/down
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t DFE_TIMER_MAX : 8;
    ///< dfe delay timer threshold
    ///< AccessType="RW" BitOffset="1" ResetValue="0x10"
    uint32_t DFE_STATS_MAX : 10;
    ///< dfe stats counter threshold
    ///< AccessType="RW" BitOffset="9" ResetValue="0x80"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_dfe_lms_ctrl_0_reg_t;

#define PMA_RXWORD_MSG_DFE_LMS_CTRL_0_DEFAULT (0x00010020U)
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_0_RD_MASK (0x0007ffffU)
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_0_WR_MASK (0x0007ffffU)


///< Chicken bit to invert up/down
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_0_DFE_UPDN_INV_CB_BF_OFF ( 0)
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_0_DFE_UPDN_INV_CB_BF_WID ( 1)
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_0_DFE_UPDN_INV_CB_BF_MSK (0x00000001)
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_0_DFE_UPDN_INV_CB_BF_DEF (0x00000000)

///< dfe delay timer threshold
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_0_DFE_TIMER_MAX_BF_OFF ( 1)
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_0_DFE_TIMER_MAX_BF_WID ( 8)
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_0_DFE_TIMER_MAX_BF_MSK (0x000001FE)
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_0_DFE_TIMER_MAX_BF_DEF (0x00000020)

///< dfe stats counter threshold
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_0_DFE_STATS_MAX_BF_OFF ( 9)
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_0_DFE_STATS_MAX_BF_WID (10)
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_0_DFE_STATS_MAX_BF_MSK (0x0007FE00)
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_0_DFE_STATS_MAX_BF_DEF (0x00010000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_DFE_LMS_CONTROL_1 register description at address offset 0x8ac
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/dfe_lms_control_1
  * placeholder
  */

typedef union {
  struct {
    uint32_t DFE_HOLD_EN : 1;
    ///< Hold dfe taps accumulators
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 7;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
    uint32_t DFE_INIT_VAL : 8;
    ///< Initial value for the dfe coeff
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_dfe_lms_ctrl_1_reg_t;

#define PMA_RXWORD_MSG_DFE_LMS_CTRL_1_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_1_RD_MASK (0x0000ff01U)
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_1_WR_MASK (0x0000ff01U)


///< Hold dfe taps accumulators
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_1_DFE_HOLD_EN_BF_OFF ( 0)
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_1_DFE_HOLD_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_1_DFE_HOLD_EN_BF_MSK (0x00000001)
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_1_DFE_HOLD_EN_BF_DEF (0x00000000)

///< Initial value for the dfe coeff
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_1_DFE_INIT_VAL_BF_OFF ( 8)
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_1_DFE_INIT_VAL_BF_WID ( 8)
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_1_DFE_INIT_VAL_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_1_DFE_INIT_VAL_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_DFE_LMS_CONTROL_2 register description at address offset 0x8b0
  *
  * Register default value:        0x00010410
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/dfe_lms_control_2
  * placeholder
  */

typedef union {
  struct {
    uint32_t DFE_MU_COARSE : 8;
    ///< Update dfe gain coarse value
    ///< AccessType="RW" BitOffset="0" ResetValue="0x10"
    uint32_t DFE_MU_FINE : 8;
    ///< Update dfe gain fine value
    ///< AccessType="RW" BitOffset="8" ResetValue="0x4"
    uint32_t DFE_COARSE_MU_EN : 1;
    ///< Select between coarse and fine update gains
    ///< AccessType="RW" BitOffset="16" ResetValue="0x1"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_dfe_lms_ctrl_2_reg_t;

#define PMA_RXWORD_MSG_DFE_LMS_CTRL_2_DEFAULT (0x00010410U)
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_2_RD_MASK (0x0001ffffU)
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_2_WR_MASK (0x0001ffffU)


///< Update dfe gain coarse value
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_2_DFE_MU_COARSE_BF_OFF ( 0)
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_2_DFE_MU_COARSE_BF_WID ( 8)
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_2_DFE_MU_COARSE_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_2_DFE_MU_COARSE_BF_DEF (0x00000010)

///< Update dfe gain fine value
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_2_DFE_MU_FINE_BF_OFF ( 8)
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_2_DFE_MU_FINE_BF_WID ( 8)
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_2_DFE_MU_FINE_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_2_DFE_MU_FINE_BF_DEF (0x00000400)

///< Select between coarse and fine update gains
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_2_DFE_COARSE_MU_EN_BF_OFF (16)
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_2_DFE_COARSE_MU_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_2_DFE_COARSE_MU_EN_BF_MSK (0x00010000)
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_2_DFE_COARSE_MU_EN_BF_DEF (0x00010000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_DFE_LMS_CONTROL_3 register description at address offset 0x8b4
  *
  * Register default value:        0x0000807F
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/dfe_lms_control_3
  * placeholder
  */

typedef union {
  struct {
    uint32_t DFE_TAP_MAX : 8;
    ///< update dfe accum saturation at max width
    ///< AccessType="RW" BitOffset="0" ResetValue="0x7F"
    uint32_t DFE_TAP_MIN : 8;
    ///< update dfe accum saturation at min width
    ///< AccessType="RW" BitOffset="8" ResetValue="0x80"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_dfe_lms_ctrl_3_reg_t;

#define PMA_RXWORD_MSG_DFE_LMS_CTRL_3_DEFAULT (0x0000807fU)
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_3_RD_MASK (0x0000ffffU)
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_3_WR_MASK (0x0000ffffU)


///< update dfe accum saturation at max width
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_3_DFE_TAP_MAX_BF_OFF ( 0)
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_3_DFE_TAP_MAX_BF_WID ( 8)
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_3_DFE_TAP_MAX_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_3_DFE_TAP_MAX_BF_DEF (0x0000007F)

///< update dfe accum saturation at min width
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_3_DFE_TAP_MIN_BF_OFF ( 8)
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_3_DFE_TAP_MIN_BF_WID ( 8)
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_3_DFE_TAP_MIN_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_3_DFE_TAP_MIN_BF_DEF (0x00008000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_DFE_LMS_STATUS_0 register description at address offset 0x8b8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/dfe_lms_status_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t DFE_AVG_UPDN : 1;
    ///< Up-Down decisions per tap
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_dfe_lms_stat_0_reg_t;

#define PMA_RXWORD_MSG_DFE_LMS_STAT_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_DFE_LMS_STAT_0_RD_MASK (0x00000001U)
#define PMA_RXWORD_MSG_DFE_LMS_STAT_0_WR_MASK (0x00000000U)


///< Up-Down decisions per tap
#define PMA_RXWORD_MSG_DFE_LMS_STAT_0_DFE_AVG_UPDN_BF_OFF ( 0)
#define PMA_RXWORD_MSG_DFE_LMS_STAT_0_DFE_AVG_UPDN_BF_WID ( 1)
#define PMA_RXWORD_MSG_DFE_LMS_STAT_0_DFE_AVG_UPDN_BF_MSK (0x00000001)
#define PMA_RXWORD_MSG_DFE_LMS_STAT_0_DFE_AVG_UPDN_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_DFE_LMS_SET0TO3 register description at address offset 0x8bc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/dfe_lms_set0to3
  * placeholder
  */

typedef union {
  struct {
    uint32_t DFE_COEFF_SET0 : 8;
    ///< set0 of dfe coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t DFE_COEFF_SET1 : 8;
    ///< set1 of dfe coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t DFE_COEFF_SET2 : 8;
    ///< set2 of dfe coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t DFE_COEFF_SET3 : 8;
    ///< set3 of dfe coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_dfe_lms_set0to3_reg_t;

#define PMA_RXWORD_MSG_DFE_LMS_SET0TO3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_DFE_LMS_SET0TO3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_DFE_LMS_SET0TO3_WR_MASK (0xffffffffU)


///< set0 of dfe coeff
#define PMA_RXWORD_MSG_DFE_LMS_SET0TO3_DFE_COEFF_SET0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_DFE_LMS_SET0TO3_DFE_COEFF_SET0_BF_WID ( 8)
#define PMA_RXWORD_MSG_DFE_LMS_SET0TO3_DFE_COEFF_SET0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_DFE_LMS_SET0TO3_DFE_COEFF_SET0_BF_DEF (0x00000000)

///< set1 of dfe coeff
#define PMA_RXWORD_MSG_DFE_LMS_SET0TO3_DFE_COEFF_SET1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_DFE_LMS_SET0TO3_DFE_COEFF_SET1_BF_WID ( 8)
#define PMA_RXWORD_MSG_DFE_LMS_SET0TO3_DFE_COEFF_SET1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_DFE_LMS_SET0TO3_DFE_COEFF_SET1_BF_DEF (0x00000000)

///< set2 of dfe coeff
#define PMA_RXWORD_MSG_DFE_LMS_SET0TO3_DFE_COEFF_SET2_BF_OFF (16)
#define PMA_RXWORD_MSG_DFE_LMS_SET0TO3_DFE_COEFF_SET2_BF_WID ( 8)
#define PMA_RXWORD_MSG_DFE_LMS_SET0TO3_DFE_COEFF_SET2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_DFE_LMS_SET0TO3_DFE_COEFF_SET2_BF_DEF (0x00000000)

///< set3 of dfe coeff
#define PMA_RXWORD_MSG_DFE_LMS_SET0TO3_DFE_COEFF_SET3_BF_OFF (24)
#define PMA_RXWORD_MSG_DFE_LMS_SET0TO3_DFE_COEFF_SET3_BF_WID ( 8)
#define PMA_RXWORD_MSG_DFE_LMS_SET0TO3_DFE_COEFF_SET3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_DFE_LMS_SET0TO3_DFE_COEFF_SET3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_DFE_LMS_SET4TO7 register description at address offset 0x8c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/dfe_lms_set4to7
  * placeholder
  */

typedef union {
  struct {
    uint32_t DFE_COEFF_SET4 : 8;
    ///< set4 of dfe coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t DFE_COEFF_SET5 : 8;
    ///< set5 of dfe coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t DFE_COEFF_SET6 : 8;
    ///< set6 of dfe coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t DFE_COEFF_SET7 : 8;
    ///< set7 of dfe coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_dfe_lms_set4to7_reg_t;

#define PMA_RXWORD_MSG_DFE_LMS_SET4TO7_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_DFE_LMS_SET4TO7_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_DFE_LMS_SET4TO7_WR_MASK (0xffffffffU)


///< set4 of dfe coeff
#define PMA_RXWORD_MSG_DFE_LMS_SET4TO7_DFE_COEFF_SET4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_DFE_LMS_SET4TO7_DFE_COEFF_SET4_BF_WID ( 8)
#define PMA_RXWORD_MSG_DFE_LMS_SET4TO7_DFE_COEFF_SET4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_DFE_LMS_SET4TO7_DFE_COEFF_SET4_BF_DEF (0x00000000)

///< set5 of dfe coeff
#define PMA_RXWORD_MSG_DFE_LMS_SET4TO7_DFE_COEFF_SET5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_DFE_LMS_SET4TO7_DFE_COEFF_SET5_BF_WID ( 8)
#define PMA_RXWORD_MSG_DFE_LMS_SET4TO7_DFE_COEFF_SET5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_DFE_LMS_SET4TO7_DFE_COEFF_SET5_BF_DEF (0x00000000)

///< set6 of dfe coeff
#define PMA_RXWORD_MSG_DFE_LMS_SET4TO7_DFE_COEFF_SET6_BF_OFF (16)
#define PMA_RXWORD_MSG_DFE_LMS_SET4TO7_DFE_COEFF_SET6_BF_WID ( 8)
#define PMA_RXWORD_MSG_DFE_LMS_SET4TO7_DFE_COEFF_SET6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_DFE_LMS_SET4TO7_DFE_COEFF_SET6_BF_DEF (0x00000000)

///< set7 of dfe coeff
#define PMA_RXWORD_MSG_DFE_LMS_SET4TO7_DFE_COEFF_SET7_BF_OFF (24)
#define PMA_RXWORD_MSG_DFE_LMS_SET4TO7_DFE_COEFF_SET7_BF_WID ( 8)
#define PMA_RXWORD_MSG_DFE_LMS_SET4TO7_DFE_COEFF_SET7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_DFE_LMS_SET4TO7_DFE_COEFF_SET7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_DFE_LMS_SET8TO11 register description at address offset 0x8c4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/dfe_lms_set8to11
  * placeholder
  */

typedef union {
  struct {
    uint32_t DFE_COEFF_SET8 : 8;
    ///< set8 of dfe coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t DFE_COEFF_SET9 : 8;
    ///< set9 of dfe coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t DFE_COEFF_SET10 : 8;
    ///< set10 of dfe coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t DFE_COEFF_SET11 : 8;
    ///< set11 of dfe coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_dfe_lms_set8to11_reg_t;

#define PMA_RXWORD_MSG_DFE_LMS_SET8TO11_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_DFE_LMS_SET8TO11_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_DFE_LMS_SET8TO11_WR_MASK (0xffffffffU)


///< set8 of dfe coeff
#define PMA_RXWORD_MSG_DFE_LMS_SET8TO11_DFE_COEFF_SET8_BF_OFF ( 0)
#define PMA_RXWORD_MSG_DFE_LMS_SET8TO11_DFE_COEFF_SET8_BF_WID ( 8)
#define PMA_RXWORD_MSG_DFE_LMS_SET8TO11_DFE_COEFF_SET8_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_DFE_LMS_SET8TO11_DFE_COEFF_SET8_BF_DEF (0x00000000)

///< set9 of dfe coeff
#define PMA_RXWORD_MSG_DFE_LMS_SET8TO11_DFE_COEFF_SET9_BF_OFF ( 8)
#define PMA_RXWORD_MSG_DFE_LMS_SET8TO11_DFE_COEFF_SET9_BF_WID ( 8)
#define PMA_RXWORD_MSG_DFE_LMS_SET8TO11_DFE_COEFF_SET9_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_DFE_LMS_SET8TO11_DFE_COEFF_SET9_BF_DEF (0x00000000)

///< set10 of dfe coeff
#define PMA_RXWORD_MSG_DFE_LMS_SET8TO11_DFE_COEFF_SET10_BF_OFF (16)
#define PMA_RXWORD_MSG_DFE_LMS_SET8TO11_DFE_COEFF_SET10_BF_WID ( 8)
#define PMA_RXWORD_MSG_DFE_LMS_SET8TO11_DFE_COEFF_SET10_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_DFE_LMS_SET8TO11_DFE_COEFF_SET10_BF_DEF (0x00000000)

///< set11 of dfe coeff
#define PMA_RXWORD_MSG_DFE_LMS_SET8TO11_DFE_COEFF_SET11_BF_OFF (24)
#define PMA_RXWORD_MSG_DFE_LMS_SET8TO11_DFE_COEFF_SET11_BF_WID ( 8)
#define PMA_RXWORD_MSG_DFE_LMS_SET8TO11_DFE_COEFF_SET11_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_DFE_LMS_SET8TO11_DFE_COEFF_SET11_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_DFE_LMS_SET12TO15 register description at address offset 0x8c8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/dfe_lms_set12to15
  * placeholder
  */

typedef union {
  struct {
    uint32_t DFE_COEFF_SET12 : 8;
    ///< set12 of dfe coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t DFE_COEFF_SET13 : 8;
    ///< set13 of dfe coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t DFE_COEFF_SET14 : 8;
    ///< set14 of dfe coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t DFE_COEFF_SET15 : 8;
    ///< set15 of dfe coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_dfe_lms_set12to15_reg_t;

#define PMA_RXWORD_MSG_DFE_LMS_SET12TO15_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_DFE_LMS_SET12TO15_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_DFE_LMS_SET12TO15_WR_MASK (0xffffffffU)


///< set12 of dfe coeff
#define PMA_RXWORD_MSG_DFE_LMS_SET12TO15_DFE_COEFF_SET12_BF_OFF ( 0)
#define PMA_RXWORD_MSG_DFE_LMS_SET12TO15_DFE_COEFF_SET12_BF_WID ( 8)
#define PMA_RXWORD_MSG_DFE_LMS_SET12TO15_DFE_COEFF_SET12_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_DFE_LMS_SET12TO15_DFE_COEFF_SET12_BF_DEF (0x00000000)

///< set13 of dfe coeff
#define PMA_RXWORD_MSG_DFE_LMS_SET12TO15_DFE_COEFF_SET13_BF_OFF ( 8)
#define PMA_RXWORD_MSG_DFE_LMS_SET12TO15_DFE_COEFF_SET13_BF_WID ( 8)
#define PMA_RXWORD_MSG_DFE_LMS_SET12TO15_DFE_COEFF_SET13_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_DFE_LMS_SET12TO15_DFE_COEFF_SET13_BF_DEF (0x00000000)

///< set14 of dfe coeff
#define PMA_RXWORD_MSG_DFE_LMS_SET12TO15_DFE_COEFF_SET14_BF_OFF (16)
#define PMA_RXWORD_MSG_DFE_LMS_SET12TO15_DFE_COEFF_SET14_BF_WID ( 8)
#define PMA_RXWORD_MSG_DFE_LMS_SET12TO15_DFE_COEFF_SET14_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_DFE_LMS_SET12TO15_DFE_COEFF_SET14_BF_DEF (0x00000000)

///< set15 of dfe coeff
#define PMA_RXWORD_MSG_DFE_LMS_SET12TO15_DFE_COEFF_SET15_BF_OFF (24)
#define PMA_RXWORD_MSG_DFE_LMS_SET12TO15_DFE_COEFF_SET15_BF_WID ( 8)
#define PMA_RXWORD_MSG_DFE_LMS_SET12TO15_DFE_COEFF_SET15_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_DFE_LMS_SET12TO15_DFE_COEFF_SET15_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_DFE_LMS_FRAC_SET0TO3 register description at address offset 0x8cc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/dfe_lms_frac_set0to3
  * placeholder
  */

typedef union {
  struct {
    uint32_t DFE_COEFF_SET0_FRAC : 8;
    ///< set0 of dfe fractional coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t DFE_COEFF_SET1_FRAC : 8;
    ///< set1 of dfe fractional coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t DFE_COEFF_SET2_FRAC : 8;
    ///< set2 of dfe fractional coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t DFE_COEFF_SET3_FRAC : 8;
    ///< set3 of dfe fractional coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_dfe_lms_frac_set0to3_reg_t;

#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET0TO3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET0TO3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET0TO3_WR_MASK (0xffffffffU)


///< set0 of dfe fractional coeff
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET0TO3_DFE_COEFF_SET0_FRAC_BF_OFF ( 0)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET0TO3_DFE_COEFF_SET0_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET0TO3_DFE_COEFF_SET0_FRAC_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET0TO3_DFE_COEFF_SET0_FRAC_BF_DEF (0x00000000)

///< set1 of dfe fractional coeff
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET0TO3_DFE_COEFF_SET1_FRAC_BF_OFF ( 8)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET0TO3_DFE_COEFF_SET1_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET0TO3_DFE_COEFF_SET1_FRAC_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET0TO3_DFE_COEFF_SET1_FRAC_BF_DEF (0x00000000)

///< set2 of dfe fractional coeff
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET0TO3_DFE_COEFF_SET2_FRAC_BF_OFF (16)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET0TO3_DFE_COEFF_SET2_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET0TO3_DFE_COEFF_SET2_FRAC_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET0TO3_DFE_COEFF_SET2_FRAC_BF_DEF (0x00000000)

///< set3 of dfe fractional coeff
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET0TO3_DFE_COEFF_SET3_FRAC_BF_OFF (24)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET0TO3_DFE_COEFF_SET3_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET0TO3_DFE_COEFF_SET3_FRAC_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET0TO3_DFE_COEFF_SET3_FRAC_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_DFE_LMS_FRAC_SET4TO7 register description at address offset 0x8d0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/dfe_lms_frac_set4to7
  * placeholder
  */

typedef union {
  struct {
    uint32_t DFE_COEFF_SET4_FRAC : 8;
    ///< set4 of dfe fractional coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t DFE_COEFF_SET5_FRAC : 8;
    ///< set5 of dfe fractional coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t DFE_COEFF_SET6_FRAC : 8;
    ///< set6 of dfe fractional coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t DFE_COEFF_SET7_FRAC : 8;
    ///< set7 of dfe fractional coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_dfe_lms_frac_set4to7_reg_t;

#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET4TO7_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET4TO7_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET4TO7_WR_MASK (0xffffffffU)


///< set4 of dfe fractional coeff
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET4TO7_DFE_COEFF_SET4_FRAC_BF_OFF ( 0)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET4TO7_DFE_COEFF_SET4_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET4TO7_DFE_COEFF_SET4_FRAC_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET4TO7_DFE_COEFF_SET4_FRAC_BF_DEF (0x00000000)

///< set5 of dfe fractional coeff
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET4TO7_DFE_COEFF_SET5_FRAC_BF_OFF ( 8)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET4TO7_DFE_COEFF_SET5_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET4TO7_DFE_COEFF_SET5_FRAC_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET4TO7_DFE_COEFF_SET5_FRAC_BF_DEF (0x00000000)

///< set6 of dfe fractional coeff
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET4TO7_DFE_COEFF_SET6_FRAC_BF_OFF (16)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET4TO7_DFE_COEFF_SET6_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET4TO7_DFE_COEFF_SET6_FRAC_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET4TO7_DFE_COEFF_SET6_FRAC_BF_DEF (0x00000000)

///< set7 of dfe fractional coeff
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET4TO7_DFE_COEFF_SET7_FRAC_BF_OFF (24)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET4TO7_DFE_COEFF_SET7_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET4TO7_DFE_COEFF_SET7_FRAC_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET4TO7_DFE_COEFF_SET7_FRAC_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_DFE_LMS_FRAC_SET8TO11 register description at address offset 0x8d4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/dfe_lms_frac_set8to11
  * placeholder
  */

typedef union {
  struct {
    uint32_t DFE_COEFF_SET8_FRAC : 8;
    ///< set8 of dfe fractional coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t DFE_COEFF_SET9_FRAC : 8;
    ///< set9 of dfe fractional coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t DFE_COEFF_SET10_FRAC : 8;
    ///< set10 of dfe fractional coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t DFE_COEFF_SET11_FRAC : 8;
    ///< set11 of dfe fractional coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_dfe_lms_frac_set8to11_reg_t;

#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET8TO11_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET8TO11_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET8TO11_WR_MASK (0xffffffffU)


///< set8 of dfe fractional coeff
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET8TO11_DFE_COEFF_SET8_FRAC_BF_OFF ( 0)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET8TO11_DFE_COEFF_SET8_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET8TO11_DFE_COEFF_SET8_FRAC_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET8TO11_DFE_COEFF_SET8_FRAC_BF_DEF (0x00000000)

///< set9 of dfe fractional coeff
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET8TO11_DFE_COEFF_SET9_FRAC_BF_OFF ( 8)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET8TO11_DFE_COEFF_SET9_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET8TO11_DFE_COEFF_SET9_FRAC_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET8TO11_DFE_COEFF_SET9_FRAC_BF_DEF (0x00000000)

///< set10 of dfe fractional coeff
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET8TO11_DFE_COEFF_SET10_FRAC_BF_OFF (16)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET8TO11_DFE_COEFF_SET10_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET8TO11_DFE_COEFF_SET10_FRAC_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET8TO11_DFE_COEFF_SET10_FRAC_BF_DEF (0x00000000)

///< set11 of dfe fractional coeff
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET8TO11_DFE_COEFF_SET11_FRAC_BF_OFF (24)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET8TO11_DFE_COEFF_SET11_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET8TO11_DFE_COEFF_SET11_FRAC_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET8TO11_DFE_COEFF_SET11_FRAC_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_DFE_LMS_FRAC_SET12TO15 register description at address offset 0x8d8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/dfe_lms_frac_set12to15
  * placeholder
  */

typedef union {
  struct {
    uint32_t DFE_COEFF_SET12_FRAC : 8;
    ///< set12 of dfe fractional coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t DFE_COEFF_SET13_FRAC : 8;
    ///< set13 of dfe fractional coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t DFE_COEFF_SET14_FRAC : 8;
    ///< set14 of dfe fractional coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t DFE_COEFF_SET15_FRAC : 8;
    ///< set15 of dfe fractional coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_dfe_lms_frac_set12to15_reg_t;

#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET12TO15_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET12TO15_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET12TO15_WR_MASK (0xffffffffU)


///< set12 of dfe fractional coeff
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET12TO15_DFE_COEFF_SET12_FRAC_BF_OFF ( 0)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET12TO15_DFE_COEFF_SET12_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET12TO15_DFE_COEFF_SET12_FRAC_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET12TO15_DFE_COEFF_SET12_FRAC_BF_DEF (0x00000000)

///< set13 of dfe fractional coeff
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET12TO15_DFE_COEFF_SET13_FRAC_BF_OFF ( 8)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET12TO15_DFE_COEFF_SET13_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET12TO15_DFE_COEFF_SET13_FRAC_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET12TO15_DFE_COEFF_SET13_FRAC_BF_DEF (0x00000000)

///< set14 of dfe fractional coeff
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET12TO15_DFE_COEFF_SET14_FRAC_BF_OFF (16)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET12TO15_DFE_COEFF_SET14_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET12TO15_DFE_COEFF_SET14_FRAC_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET12TO15_DFE_COEFF_SET14_FRAC_BF_DEF (0x00000000)

///< set15 of dfe fractional coeff
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET12TO15_DFE_COEFF_SET15_FRAC_BF_OFF (24)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET12TO15_DFE_COEFF_SET15_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET12TO15_DFE_COEFF_SET15_FRAC_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET12TO15_DFE_COEFF_SET15_FRAC_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_DFE_CONTROL_0 register description at address offset 0x8dc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/dfe_control_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t DFE_EN : 1;
    ///< Enable DFE filter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t DFE_SLICER_INV_N_ERR_CB : 1;
    ///< Invert dfe slicer -1/-3 polarity
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t DFE_SLICER_INV_P_ERR_CB : 1;
    ///< Invert dfe slicer +1/+3 polarity
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t DFE_OPT_SEL : 1;
    ///< DFE options selection. 0-default 64LA DFE; 1-Windowing DFE
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_dfe_ctrl_0_reg_t;

#define PMA_RXWORD_MSG_DFE_CTRL_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_DFE_CTRL_0_RD_MASK (0x0000000fU)
#define PMA_RXWORD_MSG_DFE_CTRL_0_WR_MASK (0x0000000fU)


///< Enable DFE filter
#define PMA_RXWORD_MSG_DFE_CTRL_0_DFE_EN_BF_OFF ( 0)
#define PMA_RXWORD_MSG_DFE_CTRL_0_DFE_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_DFE_CTRL_0_DFE_EN_BF_MSK (0x00000001)
#define PMA_RXWORD_MSG_DFE_CTRL_0_DFE_EN_BF_DEF (0x00000000)

///< Invert dfe slicer -1/-3 polarity
#define PMA_RXWORD_MSG_DFE_CTRL_0_DFE_SLICER_INV_N_ERR_CB_BF_OFF ( 1)
#define PMA_RXWORD_MSG_DFE_CTRL_0_DFE_SLICER_INV_N_ERR_CB_BF_WID ( 1)
#define PMA_RXWORD_MSG_DFE_CTRL_0_DFE_SLICER_INV_N_ERR_CB_BF_MSK (0x00000002)
#define PMA_RXWORD_MSG_DFE_CTRL_0_DFE_SLICER_INV_N_ERR_CB_BF_DEF (0x00000000)

///< Invert dfe slicer +1/+3 polarity
#define PMA_RXWORD_MSG_DFE_CTRL_0_DFE_SLICER_INV_P_ERR_CB_BF_OFF ( 2)
#define PMA_RXWORD_MSG_DFE_CTRL_0_DFE_SLICER_INV_P_ERR_CB_BF_WID ( 1)
#define PMA_RXWORD_MSG_DFE_CTRL_0_DFE_SLICER_INV_P_ERR_CB_BF_MSK (0x00000004)
#define PMA_RXWORD_MSG_DFE_CTRL_0_DFE_SLICER_INV_P_ERR_CB_BF_DEF (0x00000000)

///< DFE options selection. 0-default 64LA DFE; 1-Windowing DFE
#define PMA_RXWORD_MSG_DFE_CTRL_0_DFE_OPT_SEL_BF_OFF ( 3)
#define PMA_RXWORD_MSG_DFE_CTRL_0_DFE_OPT_SEL_BF_WID ( 1)
#define PMA_RXWORD_MSG_DFE_CTRL_0_DFE_OPT_SEL_BF_MSK (0x00000008)
#define PMA_RXWORD_MSG_DFE_CTRL_0_DFE_OPT_SEL_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_RX_SARARRAY_VALID_0 register description at address offset 0x8e0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/rx_sararray_valid_0
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t RXDAT_SARARRAY_VALID_0 : 32;
    ///< Rx Data SAR Array [31:0]
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_rx_sararray_valid_0_reg_t;

#define PMA_RXWORD_MSG_RX_SARARRAY_VALID_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_RX_SARARRAY_VALID_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_RX_SARARRAY_VALID_0_WR_MASK (0x00000000U)


///< Rx Data SAR Array [31:0]
#define PMA_RXWORD_MSG_RX_SARARRAY_VALID_0_RXDAT_SARARRAY_VALID_0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_RX_SARARRAY_VALID_0_RXDAT_SARARRAY_VALID_0_BF_WID (32)
#define PMA_RXWORD_MSG_RX_SARARRAY_VALID_0_RXDAT_SARARRAY_VALID_0_BF_MSK (0xFFFFFFFF)
#define PMA_RXWORD_MSG_RX_SARARRAY_VALID_0_RXDAT_SARARRAY_VALID_0_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_RX_SARARRAY_VALID_1 register description at address offset 0x8e4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/rx_sararray_valid_1
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t RXDAT_SARARRAY_VALID_1 : 32;
    ///< Rx Data SAR Array [63:32]
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_rx_sararray_valid_1_reg_t;

#define PMA_RXWORD_MSG_RX_SARARRAY_VALID_1_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_RX_SARARRAY_VALID_1_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_RX_SARARRAY_VALID_1_WR_MASK (0x00000000U)


///< Rx Data SAR Array [63:32]
#define PMA_RXWORD_MSG_RX_SARARRAY_VALID_1_RXDAT_SARARRAY_VALID_1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_RX_SARARRAY_VALID_1_RXDAT_SARARRAY_VALID_1_BF_WID (32)
#define PMA_RXWORD_MSG_RX_SARARRAY_VALID_1_RXDAT_SARARRAY_VALID_1_BF_MSK (0xFFFFFFFF)
#define PMA_RXWORD_MSG_RX_SARARRAY_VALID_1_RXDAT_SARARRAY_VALID_1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_PRE1_SET0TO3 register description at address offset 0x8e8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_pre1_set0to3
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_PRE1_COEFF_SET0 : 8;
    ///< set0 of cdr ffe pre1 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_PRE1_COEFF_SET1 : 8;
    ///< set1 of cdr ffe pre1 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_PRE1_COEFF_SET2 : 8;
    ///< set2 of cdr ffe pre1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_PRE1_COEFF_SET3 : 8;
    ///< set3 of cdr ffe pre1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_pre1_set0to3_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET0TO3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET0TO3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET0TO3_WR_MASK (0xffffffffU)


///< set0 of cdr ffe pre1 coeff
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET0TO3_CDR_FFE_PRE1_COEFF_SET0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET0TO3_CDR_FFE_PRE1_COEFF_SET0_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET0TO3_CDR_FFE_PRE1_COEFF_SET0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET0TO3_CDR_FFE_PRE1_COEFF_SET0_BF_DEF (0x00000000)

///< set1 of cdr ffe pre1 coeff
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET0TO3_CDR_FFE_PRE1_COEFF_SET1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET0TO3_CDR_FFE_PRE1_COEFF_SET1_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET0TO3_CDR_FFE_PRE1_COEFF_SET1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET0TO3_CDR_FFE_PRE1_COEFF_SET1_BF_DEF (0x00000000)

///< set2 of cdr ffe pre1 coeff
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET0TO3_CDR_FFE_PRE1_COEFF_SET2_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET0TO3_CDR_FFE_PRE1_COEFF_SET2_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET0TO3_CDR_FFE_PRE1_COEFF_SET2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET0TO3_CDR_FFE_PRE1_COEFF_SET2_BF_DEF (0x00000000)

///< set3 of cdr ffe pre1 coeff
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET0TO3_CDR_FFE_PRE1_COEFF_SET3_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET0TO3_CDR_FFE_PRE1_COEFF_SET3_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET0TO3_CDR_FFE_PRE1_COEFF_SET3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET0TO3_CDR_FFE_PRE1_COEFF_SET3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_PRE1_SET4TO7 register description at address offset 0x8ec
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_pre1_set4to7
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_PRE1_COEFF_SET4 : 8;
    ///< set4 of cdr ffe pre1 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_PRE1_COEFF_SET5 : 8;
    ///< set5 of cdr ffe pre1 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_PRE1_COEFF_SET6 : 8;
    ///< set6 of cdr ffe pre1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_PRE1_COEFF_SET7 : 8;
    ///< set7 of cdr ffe pre1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_pre1_set4to7_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET4TO7_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET4TO7_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET4TO7_WR_MASK (0xffffffffU)


///< set4 of cdr ffe pre1 coeff
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET4TO7_CDR_FFE_PRE1_COEFF_SET4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET4TO7_CDR_FFE_PRE1_COEFF_SET4_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET4TO7_CDR_FFE_PRE1_COEFF_SET4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET4TO7_CDR_FFE_PRE1_COEFF_SET4_BF_DEF (0x00000000)

///< set5 of cdr ffe pre1 coeff
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET4TO7_CDR_FFE_PRE1_COEFF_SET5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET4TO7_CDR_FFE_PRE1_COEFF_SET5_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET4TO7_CDR_FFE_PRE1_COEFF_SET5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET4TO7_CDR_FFE_PRE1_COEFF_SET5_BF_DEF (0x00000000)

///< set6 of cdr ffe pre1 coeff
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET4TO7_CDR_FFE_PRE1_COEFF_SET6_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET4TO7_CDR_FFE_PRE1_COEFF_SET6_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET4TO7_CDR_FFE_PRE1_COEFF_SET6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET4TO7_CDR_FFE_PRE1_COEFF_SET6_BF_DEF (0x00000000)

///< set7 of cdr ffe pre1 coeff
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET4TO7_CDR_FFE_PRE1_COEFF_SET7_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET4TO7_CDR_FFE_PRE1_COEFF_SET7_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET4TO7_CDR_FFE_PRE1_COEFF_SET7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET4TO7_CDR_FFE_PRE1_COEFF_SET7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_PRE1_SET8TO11 register description at address offset 0x8f0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_pre1_set8to11
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_PRE1_COEFF_SET8 : 8;
    ///< set8 of cdr ffe pre1 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_PRE1_COEFF_SET9 : 8;
    ///< set9 of cdr ffe pre1 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_PRE1_COEFF_SET10 : 8;
    ///< set10 of cdr ffe pre1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_PRE1_COEFF_SET11 : 8;
    ///< set11 of cdr ffe pre1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_pre1_set8to11_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET8TO11_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET8TO11_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET8TO11_WR_MASK (0xffffffffU)


///< set8 of cdr ffe pre1 coeff
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET8TO11_CDR_FFE_PRE1_COEFF_SET8_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET8TO11_CDR_FFE_PRE1_COEFF_SET8_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET8TO11_CDR_FFE_PRE1_COEFF_SET8_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET8TO11_CDR_FFE_PRE1_COEFF_SET8_BF_DEF (0x00000000)

///< set9 of cdr ffe pre1 coeff
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET8TO11_CDR_FFE_PRE1_COEFF_SET9_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET8TO11_CDR_FFE_PRE1_COEFF_SET9_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET8TO11_CDR_FFE_PRE1_COEFF_SET9_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET8TO11_CDR_FFE_PRE1_COEFF_SET9_BF_DEF (0x00000000)

///< set10 of cdr ffe pre1 coeff
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET8TO11_CDR_FFE_PRE1_COEFF_SET10_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET8TO11_CDR_FFE_PRE1_COEFF_SET10_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET8TO11_CDR_FFE_PRE1_COEFF_SET10_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET8TO11_CDR_FFE_PRE1_COEFF_SET10_BF_DEF (0x00000000)

///< set11 of cdr ffe pre1 coeff
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET8TO11_CDR_FFE_PRE1_COEFF_SET11_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET8TO11_CDR_FFE_PRE1_COEFF_SET11_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET8TO11_CDR_FFE_PRE1_COEFF_SET11_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET8TO11_CDR_FFE_PRE1_COEFF_SET11_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_PRE1_SET12TO15 register description at address offset 0x8f4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_pre1_set12to15
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_PRE1_COEFF_SET12 : 8;
    ///< set12 of cdr ffe pre1 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_PRE1_COEFF_SET13 : 8;
    ///< set13 of cdr ffe pre1 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_PRE1_COEFF_SET14 : 8;
    ///< set14 of cdr ffe pre1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_PRE1_COEFF_SET15 : 8;
    ///< set15 of cdr ffe pre1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_pre1_set12to15_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET12TO15_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET12TO15_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET12TO15_WR_MASK (0xffffffffU)


///< set12 of cdr ffe pre1 coeff
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET12TO15_CDR_FFE_PRE1_COEFF_SET12_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET12TO15_CDR_FFE_PRE1_COEFF_SET12_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET12TO15_CDR_FFE_PRE1_COEFF_SET12_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET12TO15_CDR_FFE_PRE1_COEFF_SET12_BF_DEF (0x00000000)

///< set13 of cdr ffe pre1 coeff
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET12TO15_CDR_FFE_PRE1_COEFF_SET13_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET12TO15_CDR_FFE_PRE1_COEFF_SET13_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET12TO15_CDR_FFE_PRE1_COEFF_SET13_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET12TO15_CDR_FFE_PRE1_COEFF_SET13_BF_DEF (0x00000000)

///< set14 of cdr ffe pre1 coeff
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET12TO15_CDR_FFE_PRE1_COEFF_SET14_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET12TO15_CDR_FFE_PRE1_COEFF_SET14_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET12TO15_CDR_FFE_PRE1_COEFF_SET14_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET12TO15_CDR_FFE_PRE1_COEFF_SET14_BF_DEF (0x00000000)

///< set15 of cdr ffe pre1 coeff
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET12TO15_CDR_FFE_PRE1_COEFF_SET15_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET12TO15_CDR_FFE_PRE1_COEFF_SET15_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET12TO15_CDR_FFE_PRE1_COEFF_SET15_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET12TO15_CDR_FFE_PRE1_COEFF_SET15_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_SLICER_LEVEL_SET0_CONTROL register description at address offset 0x8f8
  *
  * Register default value:        0x560000A8
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_slicer_level_set0_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_SLICE_LEVEL_SET0_P1 : 9;
    ///< set0 of cdr ffe +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0xA8"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
    uint32_t CDR_FFE_SLICE_LEVEL_SET0_0 : 9;
    ///< set0 of cdr ffe 0 slicer level
    ///< AccessType="RW/V" BitOffset="12" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
    uint32_t CDR_FFE_SLICE_LEVEL_SET0_M1 : 9;
    ///< set0 of cdr ffe -1 slicer level
    ///< AccessType="RW/V" BitOffset="22" ResetValue="0x158"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_slicer_lvl_set0_ctrl_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET0_CTRL_DEFAULT (0x560000a8U)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET0_CTRL_RD_MASK (0x7fdff1ffU)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET0_CTRL_WR_MASK (0x7fdff1ffU)


///< set0 of cdr ffe +1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET0_CTRL_CDR_FFE_SLICE_LVL_SET0_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET0_CTRL_CDR_FFE_SLICE_LVL_SET0_P1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET0_CTRL_CDR_FFE_SLICE_LVL_SET0_P1_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET0_CTRL_CDR_FFE_SLICE_LVL_SET0_P1_BF_DEF (0x000000A8)

///< set0 of cdr ffe 0 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET0_CTRL_CDR_FFE_SLICE_LVL_SET0_0_BF_OFF (12)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET0_CTRL_CDR_FFE_SLICE_LVL_SET0_0_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET0_CTRL_CDR_FFE_SLICE_LVL_SET0_0_BF_MSK (0x001FF000)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET0_CTRL_CDR_FFE_SLICE_LVL_SET0_0_BF_DEF (0x00000000)

///< set0 of cdr ffe -1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET0_CTRL_CDR_FFE_SLICE_LVL_SET0_M1_BF_OFF (22)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET0_CTRL_CDR_FFE_SLICE_LVL_SET0_M1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET0_CTRL_CDR_FFE_SLICE_LVL_SET0_M1_BF_MSK (0x7FC00000)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET0_CTRL_CDR_FFE_SLICE_LVL_SET0_M1_BF_DEF (0x56000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_SLICER_LEVEL_SET1_CONTROL register description at address offset 0x8fc
  *
  * Register default value:        0x560000A8
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_slicer_level_set1_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_SLICE_LEVEL_SET1_P1 : 9;
    ///< set1 of cdr ffe +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0xA8"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
    uint32_t CDR_FFE_SLICE_LEVEL_SET1_0 : 9;
    ///< set1 of cdr ffe 0 slicer level
    ///< AccessType="RW/V" BitOffset="12" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
    uint32_t CDR_FFE_SLICE_LEVEL_SET1_M1 : 9;
    ///< set1 of cdr ffe -1 slicer level
    ///< AccessType="RW/V" BitOffset="22" ResetValue="0x158"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_slicer_lvl_set1_ctrl_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET1_CTRL_DEFAULT (0x560000a8U)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET1_CTRL_RD_MASK (0x7fdff1ffU)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET1_CTRL_WR_MASK (0x7fdff1ffU)


///< set1 of cdr ffe +1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET1_CTRL_CDR_FFE_SLICE_LVL_SET1_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET1_CTRL_CDR_FFE_SLICE_LVL_SET1_P1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET1_CTRL_CDR_FFE_SLICE_LVL_SET1_P1_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET1_CTRL_CDR_FFE_SLICE_LVL_SET1_P1_BF_DEF (0x000000A8)

///< set1 of cdr ffe 0 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET1_CTRL_CDR_FFE_SLICE_LVL_SET1_0_BF_OFF (12)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET1_CTRL_CDR_FFE_SLICE_LVL_SET1_0_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET1_CTRL_CDR_FFE_SLICE_LVL_SET1_0_BF_MSK (0x001FF000)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET1_CTRL_CDR_FFE_SLICE_LVL_SET1_0_BF_DEF (0x00000000)

///< set1 of cdr ffe -1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET1_CTRL_CDR_FFE_SLICE_LVL_SET1_M1_BF_OFF (22)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET1_CTRL_CDR_FFE_SLICE_LVL_SET1_M1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET1_CTRL_CDR_FFE_SLICE_LVL_SET1_M1_BF_MSK (0x7FC00000)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET1_CTRL_CDR_FFE_SLICE_LVL_SET1_M1_BF_DEF (0x56000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_SLICER_LEVEL_SET2_CONTROL register description at address offset 0x900
  *
  * Register default value:        0x560000A8
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_slicer_level_set2_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_SLICE_LEVEL_SET2_P1 : 9;
    ///< set2 of cdr ffe +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0xA8"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
    uint32_t CDR_FFE_SLICE_LEVEL_SET2_0 : 9;
    ///< set2 of cdr ffe 0 slicer level
    ///< AccessType="RW/V" BitOffset="12" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
    uint32_t CDR_FFE_SLICE_LEVEL_SET2_M1 : 9;
    ///< set2 of cdr ffe -1 slicer level
    ///< AccessType="RW/V" BitOffset="22" ResetValue="0x158"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_slicer_lvl_set2_ctrl_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET2_CTRL_DEFAULT (0x560000a8U)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET2_CTRL_RD_MASK (0x7fdff1ffU)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET2_CTRL_WR_MASK (0x7fdff1ffU)


///< set2 of cdr ffe +1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET2_CTRL_CDR_FFE_SLICE_LVL_SET2_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET2_CTRL_CDR_FFE_SLICE_LVL_SET2_P1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET2_CTRL_CDR_FFE_SLICE_LVL_SET2_P1_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET2_CTRL_CDR_FFE_SLICE_LVL_SET2_P1_BF_DEF (0x000000A8)

///< set2 of cdr ffe 0 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET2_CTRL_CDR_FFE_SLICE_LVL_SET2_0_BF_OFF (12)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET2_CTRL_CDR_FFE_SLICE_LVL_SET2_0_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET2_CTRL_CDR_FFE_SLICE_LVL_SET2_0_BF_MSK (0x001FF000)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET2_CTRL_CDR_FFE_SLICE_LVL_SET2_0_BF_DEF (0x00000000)

///< set2 of cdr ffe -1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET2_CTRL_CDR_FFE_SLICE_LVL_SET2_M1_BF_OFF (22)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET2_CTRL_CDR_FFE_SLICE_LVL_SET2_M1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET2_CTRL_CDR_FFE_SLICE_LVL_SET2_M1_BF_MSK (0x7FC00000)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET2_CTRL_CDR_FFE_SLICE_LVL_SET2_M1_BF_DEF (0x56000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_SLICER_LEVEL_SET3_CONTROL register description at address offset 0x904
  *
  * Register default value:        0x560000A8
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_slicer_level_set3_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_SLICE_LEVEL_SET3_P1 : 9;
    ///< set3 of cdr ffe +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0xA8"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
    uint32_t CDR_FFE_SLICE_LEVEL_SET3_0 : 9;
    ///< set3 of cdr ffe 0 slicer level
    ///< AccessType="RW/V" BitOffset="12" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
    uint32_t CDR_FFE_SLICE_LEVEL_SET3_M1 : 9;
    ///< set3 of cdr ffe -1 slicer level
    ///< AccessType="RW/V" BitOffset="22" ResetValue="0x158"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_slicer_lvl_set3_ctrl_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET3_CTRL_DEFAULT (0x560000a8U)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET3_CTRL_RD_MASK (0x7fdff1ffU)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET3_CTRL_WR_MASK (0x7fdff1ffU)


///< set3 of cdr ffe +1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET3_CTRL_CDR_FFE_SLICE_LVL_SET3_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET3_CTRL_CDR_FFE_SLICE_LVL_SET3_P1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET3_CTRL_CDR_FFE_SLICE_LVL_SET3_P1_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET3_CTRL_CDR_FFE_SLICE_LVL_SET3_P1_BF_DEF (0x000000A8)

///< set3 of cdr ffe 0 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET3_CTRL_CDR_FFE_SLICE_LVL_SET3_0_BF_OFF (12)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET3_CTRL_CDR_FFE_SLICE_LVL_SET3_0_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET3_CTRL_CDR_FFE_SLICE_LVL_SET3_0_BF_MSK (0x001FF000)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET3_CTRL_CDR_FFE_SLICE_LVL_SET3_0_BF_DEF (0x00000000)

///< set3 of cdr ffe -1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET3_CTRL_CDR_FFE_SLICE_LVL_SET3_M1_BF_OFF (22)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET3_CTRL_CDR_FFE_SLICE_LVL_SET3_M1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET3_CTRL_CDR_FFE_SLICE_LVL_SET3_M1_BF_MSK (0x7FC00000)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET3_CTRL_CDR_FFE_SLICE_LVL_SET3_M1_BF_DEF (0x56000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_SLICER_LEVEL_SET4_CONTROL register description at address offset 0x90c
  *
  * Register default value:        0x560000A8
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_slicer_level_set4_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_SLICE_LEVEL_SET4_P1 : 9;
    ///< set4 of cdr ffe +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0xA8"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
    uint32_t CDR_FFE_SLICE_LEVEL_SET4_0 : 9;
    ///< set4 of cdr ffe 0 slicer level
    ///< AccessType="RW/V" BitOffset="12" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
    uint32_t CDR_FFE_SLICE_LEVEL_SET4_M1 : 9;
    ///< set4 of cdr ffe -1 slicer level
    ///< AccessType="RW/V" BitOffset="22" ResetValue="0x158"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_slicer_lvl_set4_ctrl_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET4_CTRL_DEFAULT (0x560000a8U)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET4_CTRL_RD_MASK (0x7fdff1ffU)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET4_CTRL_WR_MASK (0x7fdff1ffU)


///< set4 of cdr ffe +1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET4_CTRL_CDR_FFE_SLICE_LVL_SET4_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET4_CTRL_CDR_FFE_SLICE_LVL_SET4_P1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET4_CTRL_CDR_FFE_SLICE_LVL_SET4_P1_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET4_CTRL_CDR_FFE_SLICE_LVL_SET4_P1_BF_DEF (0x000000A8)

///< set4 of cdr ffe 0 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET4_CTRL_CDR_FFE_SLICE_LVL_SET4_0_BF_OFF (12)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET4_CTRL_CDR_FFE_SLICE_LVL_SET4_0_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET4_CTRL_CDR_FFE_SLICE_LVL_SET4_0_BF_MSK (0x001FF000)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET4_CTRL_CDR_FFE_SLICE_LVL_SET4_0_BF_DEF (0x00000000)

///< set4 of cdr ffe -1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET4_CTRL_CDR_FFE_SLICE_LVL_SET4_M1_BF_OFF (22)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET4_CTRL_CDR_FFE_SLICE_LVL_SET4_M1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET4_CTRL_CDR_FFE_SLICE_LVL_SET4_M1_BF_MSK (0x7FC00000)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET4_CTRL_CDR_FFE_SLICE_LVL_SET4_M1_BF_DEF (0x56000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_SLICER_LEVEL_SET5_CONTROL register description at address offset 0x910
  *
  * Register default value:        0x560000A8
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_slicer_level_set5_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_SLICE_LEVEL_SET5_P1 : 9;
    ///< set5 of cdr ffe +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0xA8"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
    uint32_t CDR_FFE_SLICE_LEVEL_SET5_0 : 9;
    ///< set5 of cdr ffe 0 slicer level
    ///< AccessType="RW/V" BitOffset="12" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
    uint32_t CDR_FFE_SLICE_LEVEL_SET5_M1 : 9;
    ///< set5 of cdr ffe -1 slicer level
    ///< AccessType="RW/V" BitOffset="22" ResetValue="0x158"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_slicer_lvl_set5_ctrl_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET5_CTRL_DEFAULT (0x560000a8U)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET5_CTRL_RD_MASK (0x7fdff1ffU)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET5_CTRL_WR_MASK (0x7fdff1ffU)


///< set5 of cdr ffe +1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET5_CTRL_CDR_FFE_SLICE_LVL_SET5_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET5_CTRL_CDR_FFE_SLICE_LVL_SET5_P1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET5_CTRL_CDR_FFE_SLICE_LVL_SET5_P1_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET5_CTRL_CDR_FFE_SLICE_LVL_SET5_P1_BF_DEF (0x000000A8)

///< set5 of cdr ffe 0 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET5_CTRL_CDR_FFE_SLICE_LVL_SET5_0_BF_OFF (12)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET5_CTRL_CDR_FFE_SLICE_LVL_SET5_0_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET5_CTRL_CDR_FFE_SLICE_LVL_SET5_0_BF_MSK (0x001FF000)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET5_CTRL_CDR_FFE_SLICE_LVL_SET5_0_BF_DEF (0x00000000)

///< set5 of cdr ffe -1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET5_CTRL_CDR_FFE_SLICE_LVL_SET5_M1_BF_OFF (22)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET5_CTRL_CDR_FFE_SLICE_LVL_SET5_M1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET5_CTRL_CDR_FFE_SLICE_LVL_SET5_M1_BF_MSK (0x7FC00000)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET5_CTRL_CDR_FFE_SLICE_LVL_SET5_M1_BF_DEF (0x56000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_SLICER_LEVEL_SET6_CONTROL register description at address offset 0x914
  *
  * Register default value:        0x560000A8
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_slicer_level_set6_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_SLICE_LEVEL_SET6_P1 : 9;
    ///< set6 of cdr ffe +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0xA8"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
    uint32_t CDR_FFE_SLICE_LEVEL_SET6_0 : 9;
    ///< set6 of cdr ffe 0 slicer level
    ///< AccessType="RW/V" BitOffset="12" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
    uint32_t CDR_FFE_SLICE_LEVEL_SET6_M1 : 9;
    ///< set6 of cdr ffe -1 slicer level
    ///< AccessType="RW/V" BitOffset="22" ResetValue="0x158"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_slicer_lvl_set6_ctrl_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET6_CTRL_DEFAULT (0x560000a8U)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET6_CTRL_RD_MASK (0x7fdff1ffU)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET6_CTRL_WR_MASK (0x7fdff1ffU)


///< set6 of cdr ffe +1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET6_CTRL_CDR_FFE_SLICE_LVL_SET6_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET6_CTRL_CDR_FFE_SLICE_LVL_SET6_P1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET6_CTRL_CDR_FFE_SLICE_LVL_SET6_P1_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET6_CTRL_CDR_FFE_SLICE_LVL_SET6_P1_BF_DEF (0x000000A8)

///< set6 of cdr ffe 0 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET6_CTRL_CDR_FFE_SLICE_LVL_SET6_0_BF_OFF (12)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET6_CTRL_CDR_FFE_SLICE_LVL_SET6_0_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET6_CTRL_CDR_FFE_SLICE_LVL_SET6_0_BF_MSK (0x001FF000)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET6_CTRL_CDR_FFE_SLICE_LVL_SET6_0_BF_DEF (0x00000000)

///< set6 of cdr ffe -1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET6_CTRL_CDR_FFE_SLICE_LVL_SET6_M1_BF_OFF (22)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET6_CTRL_CDR_FFE_SLICE_LVL_SET6_M1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET6_CTRL_CDR_FFE_SLICE_LVL_SET6_M1_BF_MSK (0x7FC00000)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET6_CTRL_CDR_FFE_SLICE_LVL_SET6_M1_BF_DEF (0x56000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_SLICER_LEVEL_SET7_CONTROL register description at address offset 0x918
  *
  * Register default value:        0x560000A8
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_slicer_level_set7_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_SLICE_LEVEL_SET7_P1 : 9;
    ///< set7 of cdr ffe +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0xA8"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
    uint32_t CDR_FFE_SLICE_LEVEL_SET7_0 : 9;
    ///< set7 of cdr ffe 0 slicer level
    ///< AccessType="RW/V" BitOffset="12" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
    uint32_t CDR_FFE_SLICE_LEVEL_SET7_M1 : 9;
    ///< set7 of cdr ffe -1 slicer level
    ///< AccessType="RW/V" BitOffset="22" ResetValue="0x158"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_slicer_lvl_set7_ctrl_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET7_CTRL_DEFAULT (0x560000a8U)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET7_CTRL_RD_MASK (0x7fdff1ffU)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET7_CTRL_WR_MASK (0x7fdff1ffU)


///< set7 of cdr ffe +1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET7_CTRL_CDR_FFE_SLICE_LVL_SET7_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET7_CTRL_CDR_FFE_SLICE_LVL_SET7_P1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET7_CTRL_CDR_FFE_SLICE_LVL_SET7_P1_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET7_CTRL_CDR_FFE_SLICE_LVL_SET7_P1_BF_DEF (0x000000A8)

///< set7 of cdr ffe 0 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET7_CTRL_CDR_FFE_SLICE_LVL_SET7_0_BF_OFF (12)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET7_CTRL_CDR_FFE_SLICE_LVL_SET7_0_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET7_CTRL_CDR_FFE_SLICE_LVL_SET7_0_BF_MSK (0x001FF000)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET7_CTRL_CDR_FFE_SLICE_LVL_SET7_0_BF_DEF (0x00000000)

///< set7 of cdr ffe -1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET7_CTRL_CDR_FFE_SLICE_LVL_SET7_M1_BF_OFF (22)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET7_CTRL_CDR_FFE_SLICE_LVL_SET7_M1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET7_CTRL_CDR_FFE_SLICE_LVL_SET7_M1_BF_MSK (0x7FC00000)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET7_CTRL_CDR_FFE_SLICE_LVL_SET7_M1_BF_DEF (0x56000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_SLICER_LEVEL_SET8_CONTROL register description at address offset 0x91c
  *
  * Register default value:        0x560000A8
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_slicer_level_set8_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_SLICE_LEVEL_SET8_P1 : 9;
    ///< set8 of cdr ffe +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0xA8"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
    uint32_t CDR_FFE_SLICE_LEVEL_SET8_0 : 9;
    ///< set8 of cdr ffe 0 slicer level
    ///< AccessType="RW/V" BitOffset="12" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
    uint32_t CDR_FFE_SLICE_LEVEL_SET8_M1 : 9;
    ///< set8 of cdr ffe -1 slicer level
    ///< AccessType="RW/V" BitOffset="22" ResetValue="0x158"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_slicer_lvl_set8_ctrl_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET8_CTRL_DEFAULT (0x560000a8U)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET8_CTRL_RD_MASK (0x7fdff1ffU)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET8_CTRL_WR_MASK (0x7fdff1ffU)


///< set8 of cdr ffe +1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET8_CTRL_CDR_FFE_SLICE_LVL_SET8_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET8_CTRL_CDR_FFE_SLICE_LVL_SET8_P1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET8_CTRL_CDR_FFE_SLICE_LVL_SET8_P1_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET8_CTRL_CDR_FFE_SLICE_LVL_SET8_P1_BF_DEF (0x000000A8)

///< set8 of cdr ffe 0 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET8_CTRL_CDR_FFE_SLICE_LVL_SET8_0_BF_OFF (12)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET8_CTRL_CDR_FFE_SLICE_LVL_SET8_0_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET8_CTRL_CDR_FFE_SLICE_LVL_SET8_0_BF_MSK (0x001FF000)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET8_CTRL_CDR_FFE_SLICE_LVL_SET8_0_BF_DEF (0x00000000)

///< set8 of cdr ffe -1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET8_CTRL_CDR_FFE_SLICE_LVL_SET8_M1_BF_OFF (22)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET8_CTRL_CDR_FFE_SLICE_LVL_SET8_M1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET8_CTRL_CDR_FFE_SLICE_LVL_SET8_M1_BF_MSK (0x7FC00000)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET8_CTRL_CDR_FFE_SLICE_LVL_SET8_M1_BF_DEF (0x56000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_SLICER_LEVEL_SET9_CONTROL register description at address offset 0x920
  *
  * Register default value:        0x560000A8
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_slicer_level_set9_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_SLICE_LEVEL_SET9_P1 : 9;
    ///< set9 of cdr ffe +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0xA8"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
    uint32_t CDR_FFE_SLICE_LEVEL_SET9_0 : 9;
    ///< set9 of cdr ffe 0 slicer level
    ///< AccessType="RW/V" BitOffset="12" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
    uint32_t CDR_FFE_SLICE_LEVEL_SET9_M1 : 9;
    ///< set9 of cdr ffe -1 slicer level
    ///< AccessType="RW/V" BitOffset="22" ResetValue="0x158"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_slicer_lvl_set9_ctrl_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET9_CTRL_DEFAULT (0x560000a8U)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET9_CTRL_RD_MASK (0x7fdff1ffU)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET9_CTRL_WR_MASK (0x7fdff1ffU)


///< set9 of cdr ffe +1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET9_CTRL_CDR_FFE_SLICE_LVL_SET9_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET9_CTRL_CDR_FFE_SLICE_LVL_SET9_P1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET9_CTRL_CDR_FFE_SLICE_LVL_SET9_P1_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET9_CTRL_CDR_FFE_SLICE_LVL_SET9_P1_BF_DEF (0x000000A8)

///< set9 of cdr ffe 0 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET9_CTRL_CDR_FFE_SLICE_LVL_SET9_0_BF_OFF (12)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET9_CTRL_CDR_FFE_SLICE_LVL_SET9_0_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET9_CTRL_CDR_FFE_SLICE_LVL_SET9_0_BF_MSK (0x001FF000)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET9_CTRL_CDR_FFE_SLICE_LVL_SET9_0_BF_DEF (0x00000000)

///< set9 of cdr ffe -1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET9_CTRL_CDR_FFE_SLICE_LVL_SET9_M1_BF_OFF (22)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET9_CTRL_CDR_FFE_SLICE_LVL_SET9_M1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET9_CTRL_CDR_FFE_SLICE_LVL_SET9_M1_BF_MSK (0x7FC00000)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET9_CTRL_CDR_FFE_SLICE_LVL_SET9_M1_BF_DEF (0x56000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_SLICER_LEVEL_SET10_CONTROL register description at address offset 0x924
  *
  * Register default value:        0x560000A8
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_slicer_level_set10_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_SLICE_LEVEL_SET10_P1 : 9;
    ///< set10 of cdr ffe +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0xA8"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
    uint32_t CDR_FFE_SLICE_LEVEL_SET10_0 : 9;
    ///< set10 of cdr ffe 0 slicer level
    ///< AccessType="RW/V" BitOffset="12" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
    uint32_t CDR_FFE_SLICE_LEVEL_SET10_M1 : 9;
    ///< set10 of cdr ffe -1 slicer level
    ///< AccessType="RW/V" BitOffset="22" ResetValue="0x158"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_slicer_lvl_set10_ctrl_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET10_CTRL_DEFAULT (0x560000a8U)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET10_CTRL_RD_MASK (0x7fdff1ffU)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET10_CTRL_WR_MASK (0x7fdff1ffU)


///< set10 of cdr ffe +1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET10_CTRL_CDR_FFE_SLICE_LVL_SET10_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET10_CTRL_CDR_FFE_SLICE_LVL_SET10_P1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET10_CTRL_CDR_FFE_SLICE_LVL_SET10_P1_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET10_CTRL_CDR_FFE_SLICE_LVL_SET10_P1_BF_DEF (0x000000A8)

///< set10 of cdr ffe 0 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET10_CTRL_CDR_FFE_SLICE_LVL_SET10_0_BF_OFF (12)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET10_CTRL_CDR_FFE_SLICE_LVL_SET10_0_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET10_CTRL_CDR_FFE_SLICE_LVL_SET10_0_BF_MSK (0x001FF000)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET10_CTRL_CDR_FFE_SLICE_LVL_SET10_0_BF_DEF (0x00000000)

///< set10 of cdr ffe -1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET10_CTRL_CDR_FFE_SLICE_LVL_SET10_M1_BF_OFF (22)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET10_CTRL_CDR_FFE_SLICE_LVL_SET10_M1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET10_CTRL_CDR_FFE_SLICE_LVL_SET10_M1_BF_MSK (0x7FC00000)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET10_CTRL_CDR_FFE_SLICE_LVL_SET10_M1_BF_DEF (0x56000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_SLICER_LEVEL_SET11_CONTROL register description at address offset 0x928
  *
  * Register default value:        0x560000A8
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_slicer_level_set11_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_SLICE_LEVEL_SET11_P1 : 9;
    ///< set11 of cdr ffe +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0xA8"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
    uint32_t CDR_FFE_SLICE_LEVEL_SET11_0 : 9;
    ///< set11 of cdr ffe 0 slicer level
    ///< AccessType="RW/V" BitOffset="12" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
    uint32_t CDR_FFE_SLICE_LEVEL_SET11_M1 : 9;
    ///< set11 of cdr ffe -1 slicer level
    ///< AccessType="RW/V" BitOffset="22" ResetValue="0x158"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_slicer_lvl_set11_ctrl_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET11_CTRL_DEFAULT (0x560000a8U)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET11_CTRL_RD_MASK (0x7fdff1ffU)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET11_CTRL_WR_MASK (0x7fdff1ffU)


///< set11 of cdr ffe +1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET11_CTRL_CDR_FFE_SLICE_LVL_SET11_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET11_CTRL_CDR_FFE_SLICE_LVL_SET11_P1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET11_CTRL_CDR_FFE_SLICE_LVL_SET11_P1_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET11_CTRL_CDR_FFE_SLICE_LVL_SET11_P1_BF_DEF (0x000000A8)

///< set11 of cdr ffe 0 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET11_CTRL_CDR_FFE_SLICE_LVL_SET11_0_BF_OFF (12)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET11_CTRL_CDR_FFE_SLICE_LVL_SET11_0_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET11_CTRL_CDR_FFE_SLICE_LVL_SET11_0_BF_MSK (0x001FF000)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET11_CTRL_CDR_FFE_SLICE_LVL_SET11_0_BF_DEF (0x00000000)

///< set11 of cdr ffe -1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET11_CTRL_CDR_FFE_SLICE_LVL_SET11_M1_BF_OFF (22)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET11_CTRL_CDR_FFE_SLICE_LVL_SET11_M1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET11_CTRL_CDR_FFE_SLICE_LVL_SET11_M1_BF_MSK (0x7FC00000)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET11_CTRL_CDR_FFE_SLICE_LVL_SET11_M1_BF_DEF (0x56000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_SLICER_LEVEL_SET12_CONTROL register description at address offset 0x92c
  *
  * Register default value:        0x560000A8
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_slicer_level_set12_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_SLICE_LEVEL_SET12_P1 : 9;
    ///< set12 of cdr ffe +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0xA8"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
    uint32_t CDR_FFE_SLICE_LEVEL_SET12_0 : 9;
    ///< set12 of cdr ffe 0 slicer level
    ///< AccessType="RW/V" BitOffset="12" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
    uint32_t CDR_FFE_SLICE_LEVEL_SET12_M1 : 9;
    ///< set12 of cdr ffe -1 slicer level
    ///< AccessType="RW/V" BitOffset="22" ResetValue="0x158"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_slicer_lvl_set12_ctrl_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET12_CTRL_DEFAULT (0x560000a8U)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET12_CTRL_RD_MASK (0x7fdff1ffU)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET12_CTRL_WR_MASK (0x7fdff1ffU)


///< set12 of cdr ffe +1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET12_CTRL_CDR_FFE_SLICE_LVL_SET12_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET12_CTRL_CDR_FFE_SLICE_LVL_SET12_P1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET12_CTRL_CDR_FFE_SLICE_LVL_SET12_P1_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET12_CTRL_CDR_FFE_SLICE_LVL_SET12_P1_BF_DEF (0x000000A8)

///< set12 of cdr ffe 0 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET12_CTRL_CDR_FFE_SLICE_LVL_SET12_0_BF_OFF (12)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET12_CTRL_CDR_FFE_SLICE_LVL_SET12_0_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET12_CTRL_CDR_FFE_SLICE_LVL_SET12_0_BF_MSK (0x001FF000)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET12_CTRL_CDR_FFE_SLICE_LVL_SET12_0_BF_DEF (0x00000000)

///< set12 of cdr ffe -1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET12_CTRL_CDR_FFE_SLICE_LVL_SET12_M1_BF_OFF (22)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET12_CTRL_CDR_FFE_SLICE_LVL_SET12_M1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET12_CTRL_CDR_FFE_SLICE_LVL_SET12_M1_BF_MSK (0x7FC00000)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET12_CTRL_CDR_FFE_SLICE_LVL_SET12_M1_BF_DEF (0x56000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_SLICER_LEVEL_SET13_CONTROL register description at address offset 0x930
  *
  * Register default value:        0x560000A8
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_slicer_level_set13_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_SLICE_LEVEL_SET13_P1 : 9;
    ///< set13 of cdr ffe +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0xA8"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
    uint32_t CDR_FFE_SLICE_LEVEL_SET13_0 : 9;
    ///< set13 of cdr ffe 0 slicer level
    ///< AccessType="RW/V" BitOffset="12" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
    uint32_t CDR_FFE_SLICE_LEVEL_SET13_M1 : 9;
    ///< set13 of cdr ffe -1 slicer level
    ///< AccessType="RW/V" BitOffset="22" ResetValue="0x158"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_slicer_lvl_set13_ctrl_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET13_CTRL_DEFAULT (0x560000a8U)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET13_CTRL_RD_MASK (0x7fdff1ffU)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET13_CTRL_WR_MASK (0x7fdff1ffU)


///< set13 of cdr ffe +1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET13_CTRL_CDR_FFE_SLICE_LVL_SET13_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET13_CTRL_CDR_FFE_SLICE_LVL_SET13_P1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET13_CTRL_CDR_FFE_SLICE_LVL_SET13_P1_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET13_CTRL_CDR_FFE_SLICE_LVL_SET13_P1_BF_DEF (0x000000A8)

///< set13 of cdr ffe 0 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET13_CTRL_CDR_FFE_SLICE_LVL_SET13_0_BF_OFF (12)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET13_CTRL_CDR_FFE_SLICE_LVL_SET13_0_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET13_CTRL_CDR_FFE_SLICE_LVL_SET13_0_BF_MSK (0x001FF000)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET13_CTRL_CDR_FFE_SLICE_LVL_SET13_0_BF_DEF (0x00000000)

///< set13 of cdr ffe -1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET13_CTRL_CDR_FFE_SLICE_LVL_SET13_M1_BF_OFF (22)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET13_CTRL_CDR_FFE_SLICE_LVL_SET13_M1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET13_CTRL_CDR_FFE_SLICE_LVL_SET13_M1_BF_MSK (0x7FC00000)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET13_CTRL_CDR_FFE_SLICE_LVL_SET13_M1_BF_DEF (0x56000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_SLICER_LEVEL_SET14_CONTROL register description at address offset 0x934
  *
  * Register default value:        0x560000A8
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_slicer_level_set14_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_SLICE_LEVEL_SET14_P1 : 9;
    ///< set14 of cdr ffe +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0xA8"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
    uint32_t CDR_FFE_SLICE_LEVEL_SET14_0 : 9;
    ///< set14 of cdr ffe 0 slicer level
    ///< AccessType="RW/V" BitOffset="12" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
    uint32_t CDR_FFE_SLICE_LEVEL_SET14_M1 : 9;
    ///< set14 of cdr ffe -1 slicer level
    ///< AccessType="RW/V" BitOffset="22" ResetValue="0x158"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_slicer_lvl_set14_ctrl_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET14_CTRL_DEFAULT (0x560000a8U)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET14_CTRL_RD_MASK (0x7fdff1ffU)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET14_CTRL_WR_MASK (0x7fdff1ffU)


///< set14 of cdr ffe +1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET14_CTRL_CDR_FFE_SLICE_LVL_SET14_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET14_CTRL_CDR_FFE_SLICE_LVL_SET14_P1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET14_CTRL_CDR_FFE_SLICE_LVL_SET14_P1_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET14_CTRL_CDR_FFE_SLICE_LVL_SET14_P1_BF_DEF (0x000000A8)

///< set14 of cdr ffe 0 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET14_CTRL_CDR_FFE_SLICE_LVL_SET14_0_BF_OFF (12)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET14_CTRL_CDR_FFE_SLICE_LVL_SET14_0_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET14_CTRL_CDR_FFE_SLICE_LVL_SET14_0_BF_MSK (0x001FF000)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET14_CTRL_CDR_FFE_SLICE_LVL_SET14_0_BF_DEF (0x00000000)

///< set14 of cdr ffe -1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET14_CTRL_CDR_FFE_SLICE_LVL_SET14_M1_BF_OFF (22)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET14_CTRL_CDR_FFE_SLICE_LVL_SET14_M1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET14_CTRL_CDR_FFE_SLICE_LVL_SET14_M1_BF_MSK (0x7FC00000)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET14_CTRL_CDR_FFE_SLICE_LVL_SET14_M1_BF_DEF (0x56000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_SLICER_LEVEL_SET15_CONTROL register description at address offset 0x938
  *
  * Register default value:        0x560000A8
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_slicer_level_set15_control
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_SLICE_LEVEL_SET15_P1 : 9;
    ///< set15 of cdr ffe +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0xA8"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
    uint32_t CDR_FFE_SLICE_LEVEL_SET15_0 : 9;
    ///< set15 of cdr ffe 0 slicer level
    ///< AccessType="RW/V" BitOffset="12" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
    uint32_t CDR_FFE_SLICE_LEVEL_SET15_M1 : 9;
    ///< set15 of cdr ffe -1 slicer level
    ///< AccessType="RW/V" BitOffset="22" ResetValue="0x158"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_slicer_lvl_set15_ctrl_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET15_CTRL_DEFAULT (0x560000a8U)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET15_CTRL_RD_MASK (0x7fdff1ffU)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET15_CTRL_WR_MASK (0x7fdff1ffU)


///< set15 of cdr ffe +1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET15_CTRL_CDR_FFE_SLICE_LVL_SET15_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET15_CTRL_CDR_FFE_SLICE_LVL_SET15_P1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET15_CTRL_CDR_FFE_SLICE_LVL_SET15_P1_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET15_CTRL_CDR_FFE_SLICE_LVL_SET15_P1_BF_DEF (0x000000A8)

///< set15 of cdr ffe 0 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET15_CTRL_CDR_FFE_SLICE_LVL_SET15_0_BF_OFF (12)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET15_CTRL_CDR_FFE_SLICE_LVL_SET15_0_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET15_CTRL_CDR_FFE_SLICE_LVL_SET15_0_BF_MSK (0x001FF000)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET15_CTRL_CDR_FFE_SLICE_LVL_SET15_0_BF_DEF (0x00000000)

///< set15 of cdr ffe -1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET15_CTRL_CDR_FFE_SLICE_LVL_SET15_M1_BF_OFF (22)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET15_CTRL_CDR_FFE_SLICE_LVL_SET15_M1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET15_CTRL_CDR_FFE_SLICE_LVL_SET15_M1_BF_MSK (0x7FC00000)
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET15_CTRL_CDR_FFE_SLICE_LVL_SET15_M1_BF_DEF (0x56000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_ERR_LEVEL_M1M3_SET0 register description at address offset 0x940
  *
  * Register default value:        0x000209A8
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_err_level_m1m3_set0
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_ERR_LEVEL_SET0_M1 : 9;
    ///< set0 of cdr ffe error -1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x1A8"
    uint32_t CDR_FFE_ERR_LEVEL_SET0_M3 : 9;
    ///< set0 of cdr ffe error -3 slicer level
    ///< AccessType="RW/V" BitOffset="9" ResetValue="0x104"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_err_lvl_m1m3_set0_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET0_DEFAULT (0x000209a8U)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET0_RD_MASK (0x0003ffffU)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET0_WR_MASK (0x0003ffffU)


///< set0 of cdr ffe error -1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET0_CDR_FFE_ERR_LVL_SET0_M1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET0_CDR_FFE_ERR_LVL_SET0_M1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET0_CDR_FFE_ERR_LVL_SET0_M1_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET0_CDR_FFE_ERR_LVL_SET0_M1_BF_DEF (0x000001A8)

///< set0 of cdr ffe error -3 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET0_CDR_FFE_ERR_LVL_SET0_M3_BF_OFF ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET0_CDR_FFE_ERR_LVL_SET0_M3_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET0_CDR_FFE_ERR_LVL_SET0_M3_BF_MSK (0x0003FE00)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET0_CDR_FFE_ERR_LVL_SET0_M3_BF_DEF (0x00020800)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_ERR_LEVEL_P1P3_SET0 register description at address offset 0x944
  *
  * Register default value:        0x0001F058
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_err_level_p1p3_set0
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_ERR_LEVEL_SET0_P1 : 9;
    ///< set0 of cdr ffe error +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x58"
    uint32_t CDR_FFE_ERR_LEVEL_SET0_P3 : 9;
    ///< set0 of cdr ffe error +3 slicer level
    ///< AccessType="RW/V" BitOffset="9" ResetValue="0xF8"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_err_lvl_p1p3_set0_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET0_DEFAULT (0x0001f058U)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET0_RD_MASK (0x0003ffffU)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET0_WR_MASK (0x0003ffffU)


///< set0 of cdr ffe error +1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET0_CDR_FFE_ERR_LVL_SET0_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET0_CDR_FFE_ERR_LVL_SET0_P1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET0_CDR_FFE_ERR_LVL_SET0_P1_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET0_CDR_FFE_ERR_LVL_SET0_P1_BF_DEF (0x00000058)

///< set0 of cdr ffe error +3 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET0_CDR_FFE_ERR_LVL_SET0_P3_BF_OFF ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET0_CDR_FFE_ERR_LVL_SET0_P3_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET0_CDR_FFE_ERR_LVL_SET0_P3_BF_MSK (0x0003FE00)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET0_CDR_FFE_ERR_LVL_SET0_P3_BF_DEF (0x0001F000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_ERR_LEVEL_M1M3_SET1 register description at address offset 0x948
  *
  * Register default value:        0x000209A8
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_err_level_m1m3_set1
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_ERR_LEVEL_SET1_M1 : 9;
    ///< set1 of cdr ffe error -1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x1A8"
    uint32_t CDR_FFE_ERR_LEVEL_SET1_M3 : 9;
    ///< set1 of cdr ffe error -3 slicer level
    ///< AccessType="RW/V" BitOffset="9" ResetValue="0x104"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_err_lvl_m1m3_set1_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET1_DEFAULT (0x000209a8U)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET1_RD_MASK (0x0003ffffU)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET1_WR_MASK (0x0003ffffU)


///< set1 of cdr ffe error -1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET1_CDR_FFE_ERR_LVL_SET1_M1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET1_CDR_FFE_ERR_LVL_SET1_M1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET1_CDR_FFE_ERR_LVL_SET1_M1_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET1_CDR_FFE_ERR_LVL_SET1_M1_BF_DEF (0x000001A8)

///< set1 of cdr ffe error -3 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET1_CDR_FFE_ERR_LVL_SET1_M3_BF_OFF ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET1_CDR_FFE_ERR_LVL_SET1_M3_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET1_CDR_FFE_ERR_LVL_SET1_M3_BF_MSK (0x0003FE00)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET1_CDR_FFE_ERR_LVL_SET1_M3_BF_DEF (0x00020800)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_ERR_LEVEL_P1P3_SET1 register description at address offset 0x94c
  *
  * Register default value:        0x0001F058
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_err_level_p1p3_set1
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_ERR_LEVEL_SET1_P1 : 9;
    ///< set1 of cdr ffe error +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x58"
    uint32_t CDR_FFE_ERR_LEVEL_SET1_P3 : 9;
    ///< set1 of cdr ffe error +3 slicer level
    ///< AccessType="RW/V" BitOffset="9" ResetValue="0xF8"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_err_lvl_p1p3_set1_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET1_DEFAULT (0x0001f058U)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET1_RD_MASK (0x0003ffffU)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET1_WR_MASK (0x0003ffffU)


///< set1 of cdr ffe error +1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET1_CDR_FFE_ERR_LVL_SET1_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET1_CDR_FFE_ERR_LVL_SET1_P1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET1_CDR_FFE_ERR_LVL_SET1_P1_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET1_CDR_FFE_ERR_LVL_SET1_P1_BF_DEF (0x00000058)

///< set1 of cdr ffe error +3 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET1_CDR_FFE_ERR_LVL_SET1_P3_BF_OFF ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET1_CDR_FFE_ERR_LVL_SET1_P3_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET1_CDR_FFE_ERR_LVL_SET1_P3_BF_MSK (0x0003FE00)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET1_CDR_FFE_ERR_LVL_SET1_P3_BF_DEF (0x0001F000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_ERR_LEVEL_M1M3_SET2 register description at address offset 0x950
  *
  * Register default value:        0x000209A8
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_err_level_m1m3_set2
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_ERR_LEVEL_SET2_M1 : 9;
    ///< set2 of cdr ffe error -1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x1A8"
    uint32_t CDR_FFE_ERR_LEVEL_SET2_M3 : 9;
    ///< set2 of cdr ffe error -3 slicer level
    ///< AccessType="RW/V" BitOffset="9" ResetValue="0x104"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_err_lvl_m1m3_set2_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET2_DEFAULT (0x000209a8U)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET2_RD_MASK (0x0003ffffU)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET2_WR_MASK (0x0003ffffU)


///< set2 of cdr ffe error -1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET2_CDR_FFE_ERR_LVL_SET2_M1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET2_CDR_FFE_ERR_LVL_SET2_M1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET2_CDR_FFE_ERR_LVL_SET2_M1_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET2_CDR_FFE_ERR_LVL_SET2_M1_BF_DEF (0x000001A8)

///< set2 of cdr ffe error -3 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET2_CDR_FFE_ERR_LVL_SET2_M3_BF_OFF ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET2_CDR_FFE_ERR_LVL_SET2_M3_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET2_CDR_FFE_ERR_LVL_SET2_M3_BF_MSK (0x0003FE00)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET2_CDR_FFE_ERR_LVL_SET2_M3_BF_DEF (0x00020800)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_ERR_LEVEL_P1P3_SET2 register description at address offset 0x954
  *
  * Register default value:        0x0001F058
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_err_level_p1p3_set2
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_ERR_LEVEL_SET2_P1 : 9;
    ///< set2 of cdr ffe error +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x58"
    uint32_t CDR_FFE_ERR_LEVEL_SET2_P3 : 9;
    ///< set2 of cdr ffe error +3 slicer level
    ///< AccessType="RW/V" BitOffset="9" ResetValue="0xF8"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_err_lvl_p1p3_set2_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET2_DEFAULT (0x0001f058U)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET2_RD_MASK (0x0003ffffU)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET2_WR_MASK (0x0003ffffU)


///< set2 of cdr ffe error +1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET2_CDR_FFE_ERR_LVL_SET2_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET2_CDR_FFE_ERR_LVL_SET2_P1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET2_CDR_FFE_ERR_LVL_SET2_P1_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET2_CDR_FFE_ERR_LVL_SET2_P1_BF_DEF (0x00000058)

///< set2 of cdr ffe error +3 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET2_CDR_FFE_ERR_LVL_SET2_P3_BF_OFF ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET2_CDR_FFE_ERR_LVL_SET2_P3_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET2_CDR_FFE_ERR_LVL_SET2_P3_BF_MSK (0x0003FE00)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET2_CDR_FFE_ERR_LVL_SET2_P3_BF_DEF (0x0001F000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_ERR_LEVEL_M1M3_SET3 register description at address offset 0x958
  *
  * Register default value:        0x000209A8
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_err_level_m1m3_set3
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_ERR_LEVEL_SET3_M1 : 9;
    ///< set3 of cdr ffe error -1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x1A8"
    uint32_t CDR_FFE_ERR_LEVEL_SET3_M3 : 9;
    ///< set3 of cdr ffe error -3 slicer level
    ///< AccessType="RW/V" BitOffset="9" ResetValue="0x104"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_err_lvl_m1m3_set3_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET3_DEFAULT (0x000209a8U)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET3_RD_MASK (0x0003ffffU)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET3_WR_MASK (0x0003ffffU)


///< set3 of cdr ffe error -1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET3_CDR_FFE_ERR_LVL_SET3_M1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET3_CDR_FFE_ERR_LVL_SET3_M1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET3_CDR_FFE_ERR_LVL_SET3_M1_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET3_CDR_FFE_ERR_LVL_SET3_M1_BF_DEF (0x000001A8)

///< set3 of cdr ffe error -3 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET3_CDR_FFE_ERR_LVL_SET3_M3_BF_OFF ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET3_CDR_FFE_ERR_LVL_SET3_M3_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET3_CDR_FFE_ERR_LVL_SET3_M3_BF_MSK (0x0003FE00)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET3_CDR_FFE_ERR_LVL_SET3_M3_BF_DEF (0x00020800)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_ERR_LEVEL_P1P3_SET3 register description at address offset 0x95c
  *
  * Register default value:        0x0001F058
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_err_level_p1p3_set3
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_ERR_LEVEL_SET3_P1 : 9;
    ///< set3 of cdr ffe error +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x58"
    uint32_t CDR_FFE_ERR_LEVEL_SET3_P3 : 9;
    ///< set3 of cdr ffe error +3 slicer level
    ///< AccessType="RW/V" BitOffset="9" ResetValue="0xF8"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_err_lvl_p1p3_set3_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET3_DEFAULT (0x0001f058U)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET3_RD_MASK (0x0003ffffU)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET3_WR_MASK (0x0003ffffU)


///< set3 of cdr ffe error +1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET3_CDR_FFE_ERR_LVL_SET3_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET3_CDR_FFE_ERR_LVL_SET3_P1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET3_CDR_FFE_ERR_LVL_SET3_P1_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET3_CDR_FFE_ERR_LVL_SET3_P1_BF_DEF (0x00000058)

///< set3 of cdr ffe error +3 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET3_CDR_FFE_ERR_LVL_SET3_P3_BF_OFF ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET3_CDR_FFE_ERR_LVL_SET3_P3_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET3_CDR_FFE_ERR_LVL_SET3_P3_BF_MSK (0x0003FE00)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET3_CDR_FFE_ERR_LVL_SET3_P3_BF_DEF (0x0001F000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_ERR_LEVEL_M1M3_SET4 register description at address offset 0x960
  *
  * Register default value:        0x000209A8
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_err_level_m1m3_set4
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_ERR_LEVEL_SET4_M1 : 9;
    ///< set4 of cdr ffe error -1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x1A8"
    uint32_t CDR_FFE_ERR_LEVEL_SET4_M3 : 9;
    ///< set4 of cdr ffe error -3 slicer level
    ///< AccessType="RW/V" BitOffset="9" ResetValue="0x104"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_err_lvl_m1m3_set4_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET4_DEFAULT (0x000209a8U)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET4_RD_MASK (0x0003ffffU)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET4_WR_MASK (0x0003ffffU)


///< set4 of cdr ffe error -1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET4_CDR_FFE_ERR_LVL_SET4_M1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET4_CDR_FFE_ERR_LVL_SET4_M1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET4_CDR_FFE_ERR_LVL_SET4_M1_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET4_CDR_FFE_ERR_LVL_SET4_M1_BF_DEF (0x000001A8)

///< set4 of cdr ffe error -3 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET4_CDR_FFE_ERR_LVL_SET4_M3_BF_OFF ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET4_CDR_FFE_ERR_LVL_SET4_M3_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET4_CDR_FFE_ERR_LVL_SET4_M3_BF_MSK (0x0003FE00)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET4_CDR_FFE_ERR_LVL_SET4_M3_BF_DEF (0x00020800)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_ERR_LEVEL_P1P3_SET4 register description at address offset 0x964
  *
  * Register default value:        0x0001F058
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_err_level_p1p3_set4
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_ERR_LEVEL_SET4_P1 : 9;
    ///< set4 of cdr ffe error +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x58"
    uint32_t CDR_FFE_ERR_LEVEL_SET4_P3 : 9;
    ///< set4 of cdr ffe error +3 slicer level
    ///< AccessType="RW/V" BitOffset="9" ResetValue="0xF8"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_err_lvl_p1p3_set4_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET4_DEFAULT (0x0001f058U)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET4_RD_MASK (0x0003ffffU)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET4_WR_MASK (0x0003ffffU)


///< set4 of cdr ffe error +1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET4_CDR_FFE_ERR_LVL_SET4_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET4_CDR_FFE_ERR_LVL_SET4_P1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET4_CDR_FFE_ERR_LVL_SET4_P1_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET4_CDR_FFE_ERR_LVL_SET4_P1_BF_DEF (0x00000058)

///< set4 of cdr ffe error +3 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET4_CDR_FFE_ERR_LVL_SET4_P3_BF_OFF ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET4_CDR_FFE_ERR_LVL_SET4_P3_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET4_CDR_FFE_ERR_LVL_SET4_P3_BF_MSK (0x0003FE00)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET4_CDR_FFE_ERR_LVL_SET4_P3_BF_DEF (0x0001F000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_ERR_LEVEL_M1M3_SET5 register description at address offset 0x968
  *
  * Register default value:        0x000209A8
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_err_level_m1m3_set5
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_ERR_LEVEL_SET5_M1 : 9;
    ///< set5 of cdr ffe error -1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x1A8"
    uint32_t CDR_FFE_ERR_LEVEL_SET5_M3 : 9;
    ///< set5 of cdr ffe error -3 slicer level
    ///< AccessType="RW/V" BitOffset="9" ResetValue="0x104"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_err_lvl_m1m3_set5_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET5_DEFAULT (0x000209a8U)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET5_RD_MASK (0x0003ffffU)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET5_WR_MASK (0x0003ffffU)


///< set5 of cdr ffe error -1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET5_CDR_FFE_ERR_LVL_SET5_M1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET5_CDR_FFE_ERR_LVL_SET5_M1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET5_CDR_FFE_ERR_LVL_SET5_M1_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET5_CDR_FFE_ERR_LVL_SET5_M1_BF_DEF (0x000001A8)

///< set5 of cdr ffe error -3 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET5_CDR_FFE_ERR_LVL_SET5_M3_BF_OFF ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET5_CDR_FFE_ERR_LVL_SET5_M3_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET5_CDR_FFE_ERR_LVL_SET5_M3_BF_MSK (0x0003FE00)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET5_CDR_FFE_ERR_LVL_SET5_M3_BF_DEF (0x00020800)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_ERR_LEVEL_P1P3_SET5 register description at address offset 0x96c
  *
  * Register default value:        0x0001F058
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_err_level_p1p3_set5
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_ERR_LEVEL_SET5_P1 : 9;
    ///< set5 of cdr ffe error +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x58"
    uint32_t CDR_FFE_ERR_LEVEL_SET5_P3 : 9;
    ///< set5 of cdr ffe error +3 slicer level
    ///< AccessType="RW/V" BitOffset="9" ResetValue="0xF8"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_err_lvl_p1p3_set5_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET5_DEFAULT (0x0001f058U)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET5_RD_MASK (0x0003ffffU)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET5_WR_MASK (0x0003ffffU)


///< set5 of cdr ffe error +1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET5_CDR_FFE_ERR_LVL_SET5_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET5_CDR_FFE_ERR_LVL_SET5_P1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET5_CDR_FFE_ERR_LVL_SET5_P1_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET5_CDR_FFE_ERR_LVL_SET5_P1_BF_DEF (0x00000058)

///< set5 of cdr ffe error +3 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET5_CDR_FFE_ERR_LVL_SET5_P3_BF_OFF ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET5_CDR_FFE_ERR_LVL_SET5_P3_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET5_CDR_FFE_ERR_LVL_SET5_P3_BF_MSK (0x0003FE00)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET5_CDR_FFE_ERR_LVL_SET5_P3_BF_DEF (0x0001F000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_ERR_LEVEL_M1M3_SET6 register description at address offset 0x970
  *
  * Register default value:        0x000209A8
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_err_level_m1m3_set6
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_ERR_LEVEL_SET6_M1 : 9;
    ///< set6 of cdr ffe error -1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x1A8"
    uint32_t CDR_FFE_ERR_LEVEL_SET6_M3 : 9;
    ///< set6 of cdr ffe error -3 slicer level
    ///< AccessType="RW/V" BitOffset="9" ResetValue="0x104"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_err_lvl_m1m3_set6_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET6_DEFAULT (0x000209a8U)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET6_RD_MASK (0x0003ffffU)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET6_WR_MASK (0x0003ffffU)


///< set6 of cdr ffe error -1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET6_CDR_FFE_ERR_LVL_SET6_M1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET6_CDR_FFE_ERR_LVL_SET6_M1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET6_CDR_FFE_ERR_LVL_SET6_M1_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET6_CDR_FFE_ERR_LVL_SET6_M1_BF_DEF (0x000001A8)

///< set6 of cdr ffe error -3 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET6_CDR_FFE_ERR_LVL_SET6_M3_BF_OFF ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET6_CDR_FFE_ERR_LVL_SET6_M3_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET6_CDR_FFE_ERR_LVL_SET6_M3_BF_MSK (0x0003FE00)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET6_CDR_FFE_ERR_LVL_SET6_M3_BF_DEF (0x00020800)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_ERR_LEVEL_P1P3_SET6 register description at address offset 0x974
  *
  * Register default value:        0x0001F058
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_err_level_p1p3_set6
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_ERR_LEVEL_SET6_P1 : 9;
    ///< set6 of cdr ffe error +1 slicer le
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x58"
    uint32_t CDR_FFE_ERR_LEVEL_SET6_P3 : 9;
    ///< set6 of cdr ffe error +3 slicer level
    ///< AccessType="RW/V" BitOffset="9" ResetValue="0xF8"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_err_lvl_p1p3_set6_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET6_DEFAULT (0x0001f058U)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET6_RD_MASK (0x0003ffffU)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET6_WR_MASK (0x0003ffffU)


///< set6 of cdr ffe error +1 slicer le
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET6_CDR_FFE_ERR_LVL_SET6_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET6_CDR_FFE_ERR_LVL_SET6_P1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET6_CDR_FFE_ERR_LVL_SET6_P1_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET6_CDR_FFE_ERR_LVL_SET6_P1_BF_DEF (0x00000058)

///< set6 of cdr ffe error +3 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET6_CDR_FFE_ERR_LVL_SET6_P3_BF_OFF ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET6_CDR_FFE_ERR_LVL_SET6_P3_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET6_CDR_FFE_ERR_LVL_SET6_P3_BF_MSK (0x0003FE00)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET6_CDR_FFE_ERR_LVL_SET6_P3_BF_DEF (0x0001F000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_ERR_LEVEL_M1M3_SET7 register description at address offset 0x978
  *
  * Register default value:        0x000209A8
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_err_level_m1m3_set7
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_ERR_LEVEL_SET7_M1 : 9;
    ///< set7 of cdr ffe error -1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x1A8"
    uint32_t CDR_FFE_ERR_LEVEL_SET7_M3 : 9;
    ///< set7 of cdr ffe error -3 slicer level
    ///< AccessType="RW/V" BitOffset="9" ResetValue="0x104"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_err_lvl_m1m3_set7_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET7_DEFAULT (0x000209a8U)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET7_RD_MASK (0x0003ffffU)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET7_WR_MASK (0x0003ffffU)


///< set7 of cdr ffe error -1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET7_CDR_FFE_ERR_LVL_SET7_M1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET7_CDR_FFE_ERR_LVL_SET7_M1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET7_CDR_FFE_ERR_LVL_SET7_M1_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET7_CDR_FFE_ERR_LVL_SET7_M1_BF_DEF (0x000001A8)

///< set7 of cdr ffe error -3 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET7_CDR_FFE_ERR_LVL_SET7_M3_BF_OFF ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET7_CDR_FFE_ERR_LVL_SET7_M3_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET7_CDR_FFE_ERR_LVL_SET7_M3_BF_MSK (0x0003FE00)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET7_CDR_FFE_ERR_LVL_SET7_M3_BF_DEF (0x00020800)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_ERR_LEVEL_P1P3_SET7 register description at address offset 0x97c
  *
  * Register default value:        0x0001F058
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_err_level_p1p3_set7
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_ERR_LEVEL_SET7_P1 : 9;
    ///< set7 of cdr ffe error +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x58"
    uint32_t CDR_FFE_ERR_LEVEL_SET7_P3 : 9;
    ///< set7 of cdr ffe error +3 slicer level
    ///< AccessType="RW/V" BitOffset="9" ResetValue="0xF8"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_err_lvl_p1p3_set7_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET7_DEFAULT (0x0001f058U)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET7_RD_MASK (0x0003ffffU)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET7_WR_MASK (0x0003ffffU)


///< set7 of cdr ffe error +1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET7_CDR_FFE_ERR_LVL_SET7_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET7_CDR_FFE_ERR_LVL_SET7_P1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET7_CDR_FFE_ERR_LVL_SET7_P1_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET7_CDR_FFE_ERR_LVL_SET7_P1_BF_DEF (0x00000058)

///< set7 of cdr ffe error +3 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET7_CDR_FFE_ERR_LVL_SET7_P3_BF_OFF ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET7_CDR_FFE_ERR_LVL_SET7_P3_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET7_CDR_FFE_ERR_LVL_SET7_P3_BF_MSK (0x0003FE00)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET7_CDR_FFE_ERR_LVL_SET7_P3_BF_DEF (0x0001F000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_ERR_LEVEL_M1M3_SET8 register description at address offset 0x980
  *
  * Register default value:        0x000209A8
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_err_level_m1m3_set8
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_ERR_LEVEL_SET8_M1 : 9;
    ///< set8 of cdr ffe error -1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x1A8"
    uint32_t CDR_FFE_ERR_LEVEL_SET8_M3 : 9;
    ///< set8 of cdr ffe error -3 slicer level
    ///< AccessType="RW/V" BitOffset="9" ResetValue="0x104"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_err_lvl_m1m3_set8_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET8_DEFAULT (0x000209a8U)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET8_RD_MASK (0x0003ffffU)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET8_WR_MASK (0x0003ffffU)


///< set8 of cdr ffe error -1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET8_CDR_FFE_ERR_LVL_SET8_M1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET8_CDR_FFE_ERR_LVL_SET8_M1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET8_CDR_FFE_ERR_LVL_SET8_M1_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET8_CDR_FFE_ERR_LVL_SET8_M1_BF_DEF (0x000001A8)

///< set8 of cdr ffe error -3 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET8_CDR_FFE_ERR_LVL_SET8_M3_BF_OFF ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET8_CDR_FFE_ERR_LVL_SET8_M3_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET8_CDR_FFE_ERR_LVL_SET8_M3_BF_MSK (0x0003FE00)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET8_CDR_FFE_ERR_LVL_SET8_M3_BF_DEF (0x00020800)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_ERR_LEVEL_P1P3_SET8 register description at address offset 0x984
  *
  * Register default value:        0x0001F058
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_err_level_p1p3_set8
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_ERR_LEVEL_SET8_P1 : 9;
    ///< set8 of cdr ffe error +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x58"
    uint32_t CDR_FFE_ERR_LEVEL_SET8_P3 : 9;
    ///< set8 of cdr ffe error +3 slicer level
    ///< AccessType="RW/V" BitOffset="9" ResetValue="0xF8"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_err_lvl_p1p3_set8_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET8_DEFAULT (0x0001f058U)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET8_RD_MASK (0x0003ffffU)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET8_WR_MASK (0x0003ffffU)


///< set8 of cdr ffe error +1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET8_CDR_FFE_ERR_LVL_SET8_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET8_CDR_FFE_ERR_LVL_SET8_P1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET8_CDR_FFE_ERR_LVL_SET8_P1_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET8_CDR_FFE_ERR_LVL_SET8_P1_BF_DEF (0x00000058)

///< set8 of cdr ffe error +3 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET8_CDR_FFE_ERR_LVL_SET8_P3_BF_OFF ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET8_CDR_FFE_ERR_LVL_SET8_P3_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET8_CDR_FFE_ERR_LVL_SET8_P3_BF_MSK (0x0003FE00)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET8_CDR_FFE_ERR_LVL_SET8_P3_BF_DEF (0x0001F000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_ERR_LEVEL_M1M3_SET9 register description at address offset 0x988
  *
  * Register default value:        0x000209A8
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_err_level_m1m3_set9
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_ERR_LEVEL_SET9_M1 : 9;
    ///< set9 of cdr ffe error -1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x1A8"
    uint32_t CDR_FFE_ERR_LEVEL_SET9_M3 : 9;
    ///< set9 of cdr ffe error -3 slicer level
    ///< AccessType="RW/V" BitOffset="9" ResetValue="0x104"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_err_lvl_m1m3_set9_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET9_DEFAULT (0x000209a8U)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET9_RD_MASK (0x0003ffffU)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET9_WR_MASK (0x0003ffffU)


///< set9 of cdr ffe error -1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET9_CDR_FFE_ERR_LVL_SET9_M1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET9_CDR_FFE_ERR_LVL_SET9_M1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET9_CDR_FFE_ERR_LVL_SET9_M1_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET9_CDR_FFE_ERR_LVL_SET9_M1_BF_DEF (0x000001A8)

///< set9 of cdr ffe error -3 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET9_CDR_FFE_ERR_LVL_SET9_M3_BF_OFF ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET9_CDR_FFE_ERR_LVL_SET9_M3_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET9_CDR_FFE_ERR_LVL_SET9_M3_BF_MSK (0x0003FE00)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET9_CDR_FFE_ERR_LVL_SET9_M3_BF_DEF (0x00020800)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_ERR_LEVEL_P1P3_SET9 register description at address offset 0x98c
  *
  * Register default value:        0x0001F058
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_err_level_p1p3_set9
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_ERR_LEVEL_SET9_P1 : 9;
    ///< set9 of cdr ffe error +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x58"
    uint32_t CDR_FFE_ERR_LEVEL_SET9_P3 : 9;
    ///< set9 of cdr ffe error +3 slicer level
    ///< AccessType="RW/V" BitOffset="9" ResetValue="0xF8"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_err_lvl_p1p3_set9_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET9_DEFAULT (0x0001f058U)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET9_RD_MASK (0x0003ffffU)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET9_WR_MASK (0x0003ffffU)


///< set9 of cdr ffe error +1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET9_CDR_FFE_ERR_LVL_SET9_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET9_CDR_FFE_ERR_LVL_SET9_P1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET9_CDR_FFE_ERR_LVL_SET9_P1_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET9_CDR_FFE_ERR_LVL_SET9_P1_BF_DEF (0x00000058)

///< set9 of cdr ffe error +3 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET9_CDR_FFE_ERR_LVL_SET9_P3_BF_OFF ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET9_CDR_FFE_ERR_LVL_SET9_P3_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET9_CDR_FFE_ERR_LVL_SET9_P3_BF_MSK (0x0003FE00)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET9_CDR_FFE_ERR_LVL_SET9_P3_BF_DEF (0x0001F000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_ERR_LEVEL_M1M3_SET10 register description at address offset 0x990
  *
  * Register default value:        0x000209A8
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_err_level_m1m3_set10
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_ERR_LEVEL_SET10_M1 : 9;
    ///< set10 of cdr ffe error -1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x1A8"
    uint32_t CDR_FFE_ERR_LEVEL_SET10_M3 : 9;
    ///< set10 of cdr ffe error -3 slicer level
    ///< AccessType="RW/V" BitOffset="9" ResetValue="0x104"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_err_lvl_m1m3_set10_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET10_DEFAULT (0x000209a8U)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET10_RD_MASK (0x0003ffffU)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET10_WR_MASK (0x0003ffffU)


///< set10 of cdr ffe error -1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET10_CDR_FFE_ERR_LVL_SET10_M1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET10_CDR_FFE_ERR_LVL_SET10_M1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET10_CDR_FFE_ERR_LVL_SET10_M1_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET10_CDR_FFE_ERR_LVL_SET10_M1_BF_DEF (0x000001A8)

///< set10 of cdr ffe error -3 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET10_CDR_FFE_ERR_LVL_SET10_M3_BF_OFF ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET10_CDR_FFE_ERR_LVL_SET10_M3_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET10_CDR_FFE_ERR_LVL_SET10_M3_BF_MSK (0x0003FE00)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET10_CDR_FFE_ERR_LVL_SET10_M3_BF_DEF (0x00020800)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_ERR_LEVEL_P1P3_SET10 register description at address offset 0x994
  *
  * Register default value:        0x0001F058
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_err_level_p1p3_set10
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_ERR_LEVEL_SET10_P1 : 9;
    ///< set10 of cdr ffe error +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x58"
    uint32_t CDR_FFE_ERR_LEVEL_SET10_P3 : 9;
    ///< set10 of cdr ffe error +3 slicer level
    ///< AccessType="RW/V" BitOffset="9" ResetValue="0xF8"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_err_lvl_p1p3_set10_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET10_DEFAULT (0x0001f058U)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET10_RD_MASK (0x0003ffffU)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET10_WR_MASK (0x0003ffffU)


///< set10 of cdr ffe error +1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET10_CDR_FFE_ERR_LVL_SET10_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET10_CDR_FFE_ERR_LVL_SET10_P1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET10_CDR_FFE_ERR_LVL_SET10_P1_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET10_CDR_FFE_ERR_LVL_SET10_P1_BF_DEF (0x00000058)

///< set10 of cdr ffe error +3 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET10_CDR_FFE_ERR_LVL_SET10_P3_BF_OFF ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET10_CDR_FFE_ERR_LVL_SET10_P3_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET10_CDR_FFE_ERR_LVL_SET10_P3_BF_MSK (0x0003FE00)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET10_CDR_FFE_ERR_LVL_SET10_P3_BF_DEF (0x0001F000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_ERR_LEVEL_M1M3_SET11 register description at address offset 0x998
  *
  * Register default value:        0x000209A8
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_err_level_m1m3_set11
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_ERR_LEVEL_SET11_M1 : 9;
    ///< set11 of cdr ffe error -1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x1A8"
    uint32_t CDR_FFE_ERR_LEVEL_SET11_M3 : 9;
    ///< set11 of cdr ffe error -3 slicer level
    ///< AccessType="RW/V" BitOffset="9" ResetValue="0x104"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_err_lvl_m1m3_set11_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET11_DEFAULT (0x000209a8U)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET11_RD_MASK (0x0003ffffU)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET11_WR_MASK (0x0003ffffU)


///< set11 of cdr ffe error -1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET11_CDR_FFE_ERR_LVL_SET11_M1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET11_CDR_FFE_ERR_LVL_SET11_M1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET11_CDR_FFE_ERR_LVL_SET11_M1_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET11_CDR_FFE_ERR_LVL_SET11_M1_BF_DEF (0x000001A8)

///< set11 of cdr ffe error -3 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET11_CDR_FFE_ERR_LVL_SET11_M3_BF_OFF ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET11_CDR_FFE_ERR_LVL_SET11_M3_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET11_CDR_FFE_ERR_LVL_SET11_M3_BF_MSK (0x0003FE00)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET11_CDR_FFE_ERR_LVL_SET11_M3_BF_DEF (0x00020800)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_ERR_LEVEL_P1P3_SET11 register description at address offset 0x99c
  *
  * Register default value:        0x0001F058
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_err_level_p1p3_set11
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_ERR_LEVEL_SET11_P1 : 9;
    ///< set11 of cdr ffe error +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x58"
    uint32_t CDR_FFE_ERR_LEVEL_SET11_P3 : 9;
    ///< set11 of cdr ffe error +3 slicer level
    ///< AccessType="RW/V" BitOffset="9" ResetValue="0xF8"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_err_lvl_p1p3_set11_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET11_DEFAULT (0x0001f058U)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET11_RD_MASK (0x0003ffffU)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET11_WR_MASK (0x0003ffffU)


///< set11 of cdr ffe error +1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET11_CDR_FFE_ERR_LVL_SET11_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET11_CDR_FFE_ERR_LVL_SET11_P1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET11_CDR_FFE_ERR_LVL_SET11_P1_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET11_CDR_FFE_ERR_LVL_SET11_P1_BF_DEF (0x00000058)

///< set11 of cdr ffe error +3 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET11_CDR_FFE_ERR_LVL_SET11_P3_BF_OFF ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET11_CDR_FFE_ERR_LVL_SET11_P3_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET11_CDR_FFE_ERR_LVL_SET11_P3_BF_MSK (0x0003FE00)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET11_CDR_FFE_ERR_LVL_SET11_P3_BF_DEF (0x0001F000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_ERR_LEVEL_M1M3_SET12 register description at address offset 0x9a0
  *
  * Register default value:        0x000209A8
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_err_level_m1m3_set12
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_ERR_LEVEL_SET12_M1 : 9;
    ///< set12 of cdr ffe error -1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x1A8"
    uint32_t CDR_FFE_ERR_LEVEL_SET12_M3 : 9;
    ///< set12 of cdr ffe error -3 slicer level
    ///< AccessType="RW/V" BitOffset="9" ResetValue="0x104"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_err_lvl_m1m3_set12_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET12_DEFAULT (0x000209a8U)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET12_RD_MASK (0x0003ffffU)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET12_WR_MASK (0x0003ffffU)


///< set12 of cdr ffe error -1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET12_CDR_FFE_ERR_LVL_SET12_M1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET12_CDR_FFE_ERR_LVL_SET12_M1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET12_CDR_FFE_ERR_LVL_SET12_M1_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET12_CDR_FFE_ERR_LVL_SET12_M1_BF_DEF (0x000001A8)

///< set12 of cdr ffe error -3 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET12_CDR_FFE_ERR_LVL_SET12_M3_BF_OFF ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET12_CDR_FFE_ERR_LVL_SET12_M3_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET12_CDR_FFE_ERR_LVL_SET12_M3_BF_MSK (0x0003FE00)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET12_CDR_FFE_ERR_LVL_SET12_M3_BF_DEF (0x00020800)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_ERR_LEVEL_P1P3_SET12 register description at address offset 0x9a4
  *
  * Register default value:        0x0001F058
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_err_level_p1p3_set12
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_ERR_LEVEL_SET12_P1 : 9;
    ///< set12 of cdr ffe error +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x58"
    uint32_t CDR_FFE_ERR_LEVEL_SET12_P3 : 9;
    ///< set12 of cdr ffe error +3 slicer level
    ///< AccessType="RW/V" BitOffset="9" ResetValue="0xF8"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_err_lvl_p1p3_set12_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET12_DEFAULT (0x0001f058U)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET12_RD_MASK (0x0003ffffU)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET12_WR_MASK (0x0003ffffU)


///< set12 of cdr ffe error +1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET12_CDR_FFE_ERR_LVL_SET12_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET12_CDR_FFE_ERR_LVL_SET12_P1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET12_CDR_FFE_ERR_LVL_SET12_P1_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET12_CDR_FFE_ERR_LVL_SET12_P1_BF_DEF (0x00000058)

///< set12 of cdr ffe error +3 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET12_CDR_FFE_ERR_LVL_SET12_P3_BF_OFF ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET12_CDR_FFE_ERR_LVL_SET12_P3_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET12_CDR_FFE_ERR_LVL_SET12_P3_BF_MSK (0x0003FE00)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET12_CDR_FFE_ERR_LVL_SET12_P3_BF_DEF (0x0001F000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_ERR_LEVEL_M1M3_SET13 register description at address offset 0x9a8
  *
  * Register default value:        0x000209A8
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_err_level_m1m3_set13
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_ERR_LEVEL_SET13_M1 : 9;
    ///< set13 of cdr ffe error -1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x1A8"
    uint32_t CDR_FFE_ERR_LEVEL_SET13_M3 : 9;
    ///< set13 of cdr ffe error -3 slicer level
    ///< AccessType="RW/V" BitOffset="9" ResetValue="0x104"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_err_lvl_m1m3_set13_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET13_DEFAULT (0x000209a8U)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET13_RD_MASK (0x0003ffffU)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET13_WR_MASK (0x0003ffffU)


///< set13 of cdr ffe error -1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET13_CDR_FFE_ERR_LVL_SET13_M1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET13_CDR_FFE_ERR_LVL_SET13_M1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET13_CDR_FFE_ERR_LVL_SET13_M1_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET13_CDR_FFE_ERR_LVL_SET13_M1_BF_DEF (0x000001A8)

///< set13 of cdr ffe error -3 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET13_CDR_FFE_ERR_LVL_SET13_M3_BF_OFF ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET13_CDR_FFE_ERR_LVL_SET13_M3_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET13_CDR_FFE_ERR_LVL_SET13_M3_BF_MSK (0x0003FE00)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET13_CDR_FFE_ERR_LVL_SET13_M3_BF_DEF (0x00020800)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_ERR_LEVEL_P1P3_SET13 register description at address offset 0x9ac
  *
  * Register default value:        0x0001F058
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_err_level_p1p3_set13
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_ERR_LEVEL_SET13_P1 : 9;
    ///< set13 of cdr ffe error +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x58"
    uint32_t CDR_FFE_ERR_LEVEL_SET13_P3 : 9;
    ///< set13 of cdr ffe error +3 slicer level
    ///< AccessType="RW/V" BitOffset="9" ResetValue="0xF8"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_err_lvl_p1p3_set13_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET13_DEFAULT (0x0001f058U)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET13_RD_MASK (0x0003ffffU)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET13_WR_MASK (0x0003ffffU)


///< set13 of cdr ffe error +1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET13_CDR_FFE_ERR_LVL_SET13_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET13_CDR_FFE_ERR_LVL_SET13_P1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET13_CDR_FFE_ERR_LVL_SET13_P1_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET13_CDR_FFE_ERR_LVL_SET13_P1_BF_DEF (0x00000058)

///< set13 of cdr ffe error +3 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET13_CDR_FFE_ERR_LVL_SET13_P3_BF_OFF ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET13_CDR_FFE_ERR_LVL_SET13_P3_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET13_CDR_FFE_ERR_LVL_SET13_P3_BF_MSK (0x0003FE00)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET13_CDR_FFE_ERR_LVL_SET13_P3_BF_DEF (0x0001F000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_ERR_LEVEL_M1M3_SET14 register description at address offset 0x9b0
  *
  * Register default value:        0x000209A8
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_err_level_m1m3_set14
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_ERR_LEVEL_SET14_M1 : 9;
    ///< set14 of cdr ffe error -1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x1A8"
    uint32_t CDR_FFE_ERR_LEVEL_SET14_M3 : 9;
    ///< set14 of cdr ffe error -3 slicer level
    ///< AccessType="RW/V" BitOffset="9" ResetValue="0x104"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_err_lvl_m1m3_set14_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET14_DEFAULT (0x000209a8U)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET14_RD_MASK (0x0003ffffU)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET14_WR_MASK (0x0003ffffU)


///< set14 of cdr ffe error -1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET14_CDR_FFE_ERR_LVL_SET14_M1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET14_CDR_FFE_ERR_LVL_SET14_M1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET14_CDR_FFE_ERR_LVL_SET14_M1_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET14_CDR_FFE_ERR_LVL_SET14_M1_BF_DEF (0x000001A8)

///< set14 of cdr ffe error -3 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET14_CDR_FFE_ERR_LVL_SET14_M3_BF_OFF ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET14_CDR_FFE_ERR_LVL_SET14_M3_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET14_CDR_FFE_ERR_LVL_SET14_M3_BF_MSK (0x0003FE00)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET14_CDR_FFE_ERR_LVL_SET14_M3_BF_DEF (0x00020800)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_ERR_LEVEL_P1P3_SET14 register description at address offset 0x9b4
  *
  * Register default value:        0x0001F058
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_err_level_p1p3_set14
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_ERR_LEVEL_SET14_P1 : 9;
    ///< set14 of cdr ffe error +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x58"
    uint32_t CDR_FFE_ERR_LEVEL_SET14_P3 : 9;
    ///< set14 of cdr ffe error +3 slicer level
    ///< AccessType="RW/V" BitOffset="9" ResetValue="0xF8"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_err_lvl_p1p3_set14_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET14_DEFAULT (0x0001f058U)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET14_RD_MASK (0x0003ffffU)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET14_WR_MASK (0x0003ffffU)


///< set14 of cdr ffe error +1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET14_CDR_FFE_ERR_LVL_SET14_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET14_CDR_FFE_ERR_LVL_SET14_P1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET14_CDR_FFE_ERR_LVL_SET14_P1_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET14_CDR_FFE_ERR_LVL_SET14_P1_BF_DEF (0x00000058)

///< set14 of cdr ffe error +3 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET14_CDR_FFE_ERR_LVL_SET14_P3_BF_OFF ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET14_CDR_FFE_ERR_LVL_SET14_P3_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET14_CDR_FFE_ERR_LVL_SET14_P3_BF_MSK (0x0003FE00)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET14_CDR_FFE_ERR_LVL_SET14_P3_BF_DEF (0x0001F000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_ERR_LEVEL_M1M3_SET15 register description at address offset 0x9b8
  *
  * Register default value:        0x000209A8
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_err_level_m1m3_set15
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_ERR_LEVEL_SET15_M1 : 9;
    ///< set15 of cdr ffe error -1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x1A8"
    uint32_t CDR_FFE_ERR_LEVEL_SET15_M3 : 9;
    ///< set15 of cdr ffe error -3 slicer level
    ///< AccessType="RW/V" BitOffset="9" ResetValue="0x104"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_err_lvl_m1m3_set15_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET15_DEFAULT (0x000209a8U)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET15_RD_MASK (0x0003ffffU)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET15_WR_MASK (0x0003ffffU)


///< set15 of cdr ffe error -1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET15_CDR_FFE_ERR_LVL_SET15_M1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET15_CDR_FFE_ERR_LVL_SET15_M1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET15_CDR_FFE_ERR_LVL_SET15_M1_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET15_CDR_FFE_ERR_LVL_SET15_M1_BF_DEF (0x000001A8)

///< set15 of cdr ffe error -3 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET15_CDR_FFE_ERR_LVL_SET15_M3_BF_OFF ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET15_CDR_FFE_ERR_LVL_SET15_M3_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET15_CDR_FFE_ERR_LVL_SET15_M3_BF_MSK (0x0003FE00)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET15_CDR_FFE_ERR_LVL_SET15_M3_BF_DEF (0x00020800)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_ERR_LEVEL_P1P3_SET15 register description at address offset 0x9c0
  *
  * Register default value:        0x0001F058
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_err_level_p1p3_set15
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_ERR_LEVEL_SET15_P1 : 9;
    ///< set15 of cdr ffe error +1 slicer level
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x58"
    uint32_t CDR_FFE_ERR_LEVEL_SET15_P3 : 9;
    ///< set15 of cdr ffe error +3 slicer level
    ///< AccessType="RW/V" BitOffset="9" ResetValue="0xF8"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_err_lvl_p1p3_set15_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET15_DEFAULT (0x0001f058U)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET15_RD_MASK (0x0003ffffU)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET15_WR_MASK (0x0003ffffU)


///< set15 of cdr ffe error +1 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET15_CDR_FFE_ERR_LVL_SET15_P1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET15_CDR_FFE_ERR_LVL_SET15_P1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET15_CDR_FFE_ERR_LVL_SET15_P1_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET15_CDR_FFE_ERR_LVL_SET15_P1_BF_DEF (0x00000058)

///< set15 of cdr ffe error +3 slicer level
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET15_CDR_FFE_ERR_LVL_SET15_P3_BF_OFF ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET15_CDR_FFE_ERR_LVL_SET15_P3_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET15_CDR_FFE_ERR_LVL_SET15_P3_BF_MSK (0x0003FE00)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET15_CDR_FFE_ERR_LVL_SET15_P3_BF_DEF (0x0001F000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_POST1_SET0TO3 register description at address offset 0x9c8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_post1_set0to3
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_POST1_COEFF_SET0 : 8;
    ///< set0 of cdr ffe post1 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_POST1_COEFF_SET1 : 8;
    ///< set1 of cdr ffe post1 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_POST1_COEFF_SET2 : 8;
    ///< set2 of cdr ffe post1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_POST1_COEFF_SET3 : 8;
    ///< set3 of cdr ffe post1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_post1_set0to3_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET0TO3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET0TO3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET0TO3_WR_MASK (0xffffffffU)


///< set0 of cdr ffe post1 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET0TO3_CDR_FFE_POST1_COEFF_SET0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET0TO3_CDR_FFE_POST1_COEFF_SET0_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET0TO3_CDR_FFE_POST1_COEFF_SET0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET0TO3_CDR_FFE_POST1_COEFF_SET0_BF_DEF (0x00000000)

///< set1 of cdr ffe post1 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET0TO3_CDR_FFE_POST1_COEFF_SET1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET0TO3_CDR_FFE_POST1_COEFF_SET1_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET0TO3_CDR_FFE_POST1_COEFF_SET1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET0TO3_CDR_FFE_POST1_COEFF_SET1_BF_DEF (0x00000000)

///< set2 of cdr ffe post1 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET0TO3_CDR_FFE_POST1_COEFF_SET2_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET0TO3_CDR_FFE_POST1_COEFF_SET2_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET0TO3_CDR_FFE_POST1_COEFF_SET2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET0TO3_CDR_FFE_POST1_COEFF_SET2_BF_DEF (0x00000000)

///< set3 of cdr ffe post1 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET0TO3_CDR_FFE_POST1_COEFF_SET3_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET0TO3_CDR_FFE_POST1_COEFF_SET3_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET0TO3_CDR_FFE_POST1_COEFF_SET3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET0TO3_CDR_FFE_POST1_COEFF_SET3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_POST1_SET4TO7 register description at address offset 0x9cc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_post1_set4to7
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_POST1_COEFF_SET4 : 8;
    ///< set4 of cdr ffe post1 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_POST1_COEFF_SET5 : 8;
    ///< set5 of cdr ffe post1 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_POST1_COEFF_SET6 : 8;
    ///< set6 of cdr ffe post1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_POST1_COEFF_SET7 : 8;
    ///< set7 of cdr ffe post1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_post1_set4to7_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET4TO7_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET4TO7_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET4TO7_WR_MASK (0xffffffffU)


///< set4 of cdr ffe post1 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET4TO7_CDR_FFE_POST1_COEFF_SET4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET4TO7_CDR_FFE_POST1_COEFF_SET4_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET4TO7_CDR_FFE_POST1_COEFF_SET4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET4TO7_CDR_FFE_POST1_COEFF_SET4_BF_DEF (0x00000000)

///< set5 of cdr ffe post1 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET4TO7_CDR_FFE_POST1_COEFF_SET5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET4TO7_CDR_FFE_POST1_COEFF_SET5_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET4TO7_CDR_FFE_POST1_COEFF_SET5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET4TO7_CDR_FFE_POST1_COEFF_SET5_BF_DEF (0x00000000)

///< set6 of cdr ffe post1 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET4TO7_CDR_FFE_POST1_COEFF_SET6_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET4TO7_CDR_FFE_POST1_COEFF_SET6_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET4TO7_CDR_FFE_POST1_COEFF_SET6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET4TO7_CDR_FFE_POST1_COEFF_SET6_BF_DEF (0x00000000)

///< set7 of cdr ffe post1 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET4TO7_CDR_FFE_POST1_COEFF_SET7_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET4TO7_CDR_FFE_POST1_COEFF_SET7_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET4TO7_CDR_FFE_POST1_COEFF_SET7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET4TO7_CDR_FFE_POST1_COEFF_SET7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_POST1_SET8TO11 register description at address offset 0x9d0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_post1_set8to11
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_POST1_COEFF_SET8 : 8;
    ///< set8 of cdr ffe post1 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_POST1_COEFF_SET9 : 8;
    ///< set9 of cdr ffe post1 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_POST1_COEFF_SET10 : 8;
    ///< set10 of cdr ffe post1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_POST1_COEFF_SET11 : 8;
    ///< set11 of cdr ffe post1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_post1_set8to11_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET8TO11_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET8TO11_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET8TO11_WR_MASK (0xffffffffU)


///< set8 of cdr ffe post1 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET8TO11_CDR_FFE_POST1_COEFF_SET8_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET8TO11_CDR_FFE_POST1_COEFF_SET8_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET8TO11_CDR_FFE_POST1_COEFF_SET8_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET8TO11_CDR_FFE_POST1_COEFF_SET8_BF_DEF (0x00000000)

///< set9 of cdr ffe post1 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET8TO11_CDR_FFE_POST1_COEFF_SET9_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET8TO11_CDR_FFE_POST1_COEFF_SET9_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET8TO11_CDR_FFE_POST1_COEFF_SET9_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET8TO11_CDR_FFE_POST1_COEFF_SET9_BF_DEF (0x00000000)

///< set10 of cdr ffe post1 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET8TO11_CDR_FFE_POST1_COEFF_SET10_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET8TO11_CDR_FFE_POST1_COEFF_SET10_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET8TO11_CDR_FFE_POST1_COEFF_SET10_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET8TO11_CDR_FFE_POST1_COEFF_SET10_BF_DEF (0x00000000)

///< set11 of cdr ffe post1 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET8TO11_CDR_FFE_POST1_COEFF_SET11_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET8TO11_CDR_FFE_POST1_COEFF_SET11_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET8TO11_CDR_FFE_POST1_COEFF_SET11_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET8TO11_CDR_FFE_POST1_COEFF_SET11_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_POST1_SET12TO15 register description at address offset 0x9d4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_post1_set12to15
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_POST1_COEFF_SET12 : 8;
    ///< set12 of cdr ffe post1 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_POST1_COEFF_SET13 : 8;
    ///< set13 of cdr ffe post1 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_POST1_COEFF_SET14 : 8;
    ///< set14 of cdr ffe post1 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_POST1_COEFF_SET15 : 8;
    ///< set15 of cdr ffe post1 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_post1_set12to15_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET12TO15_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET12TO15_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET12TO15_WR_MASK (0xffffffffU)


///< set12 of cdr ffe post1 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET12TO15_CDR_FFE_POST1_COEFF_SET12_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET12TO15_CDR_FFE_POST1_COEFF_SET12_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET12TO15_CDR_FFE_POST1_COEFF_SET12_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET12TO15_CDR_FFE_POST1_COEFF_SET12_BF_DEF (0x00000000)

///< set13 of cdr ffe post1 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET12TO15_CDR_FFE_POST1_COEFF_SET13_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET12TO15_CDR_FFE_POST1_COEFF_SET13_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET12TO15_CDR_FFE_POST1_COEFF_SET13_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET12TO15_CDR_FFE_POST1_COEFF_SET13_BF_DEF (0x00000000)

///< set14 of cdr ffe post1 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET12TO15_CDR_FFE_POST1_COEFF_SET14_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET12TO15_CDR_FFE_POST1_COEFF_SET14_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET12TO15_CDR_FFE_POST1_COEFF_SET14_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET12TO15_CDR_FFE_POST1_COEFF_SET14_BF_DEF (0x00000000)

///< set15 of cdr ffe post1 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET12TO15_CDR_FFE_POST1_COEFF_SET15_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET12TO15_CDR_FFE_POST1_COEFF_SET15_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET12TO15_CDR_FFE_POST1_COEFF_SET15_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET12TO15_CDR_FFE_POST1_COEFF_SET15_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_CONTROL_0 register description at address offset 0x9d8
  *
  * Register default value:        0x04080000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_control_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_7TAP_MODE : 1;
    ///< Enable 7 taps CDR FFE. Default=0 as 2 taps mode
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
    uint32_t CDR_FFE_PRE1_UP_DIS : 1;
    ///< Disable CDR FFE Pre1 Tap update
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t CDR_FFE_POST1_UP_DIS : 1;
    ///< Disable CDR FFE Post1 Tap update
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t CDR_FFE_HOLD_EN : 7;
    ///< Hold static taps accumulators
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
    uint32_t CDR_FFE_STATS_MAX : 10;
    ///< CDR FFE stats counter threshold
    ///< AccessType="RW" BitOffset="12" ResetValue="0x80"
    uint32_t CDR_FFE_TIMER_MAX : 8;
    ///< CDR FFE delay timer threshold
    ///< AccessType="RW" BitOffset="22" ResetValue="0x10"
    uint32_t CDR_FFE_UPDN_INV_CB : 1;
    ///< Chicken bit to invert up/down
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_ctrl_0_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_CTRL_0_DEFAULT (0x04080000U)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_0_RD_MASK (0x7ffff7fdU)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_0_WR_MASK (0x7ffff7fdU)


///< Enable 7 taps CDR FFE. Default=0 as 2 taps mode
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_0_CDR_FFE_7TAP_MODE_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_0_CDR_FFE_7TAP_MODE_BF_WID ( 1)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_0_CDR_FFE_7TAP_MODE_BF_MSK (0x00000001)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_0_CDR_FFE_7TAP_MODE_BF_DEF (0x00000000)

///< Disable CDR FFE Pre1 Tap update
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_0_CDR_FFE_PRE1_UP_DIS_BF_OFF ( 2)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_0_CDR_FFE_PRE1_UP_DIS_BF_WID ( 1)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_0_CDR_FFE_PRE1_UP_DIS_BF_MSK (0x00000004)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_0_CDR_FFE_PRE1_UP_DIS_BF_DEF (0x00000000)

///< Disable CDR FFE Post1 Tap update
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_0_CDR_FFE_POST1_UP_DIS_BF_OFF ( 3)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_0_CDR_FFE_POST1_UP_DIS_BF_WID ( 1)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_0_CDR_FFE_POST1_UP_DIS_BF_MSK (0x00000008)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_0_CDR_FFE_POST1_UP_DIS_BF_DEF (0x00000000)

///< Hold static taps accumulators
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_0_CDR_FFE_HOLD_EN_BF_OFF ( 4)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_0_CDR_FFE_HOLD_EN_BF_WID ( 7)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_0_CDR_FFE_HOLD_EN_BF_MSK (0x000007F0)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_0_CDR_FFE_HOLD_EN_BF_DEF (0x00000000)

///< CDR FFE stats counter threshold
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_0_CDR_FFE_STATS_MAX_BF_OFF (12)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_0_CDR_FFE_STATS_MAX_BF_WID (10)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_0_CDR_FFE_STATS_MAX_BF_MSK (0x003FF000)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_0_CDR_FFE_STATS_MAX_BF_DEF (0x00080000)

///< CDR FFE delay timer threshold
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_0_CDR_FFE_TIMER_MAX_BF_OFF (22)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_0_CDR_FFE_TIMER_MAX_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_0_CDR_FFE_TIMER_MAX_BF_MSK (0x3FC00000)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_0_CDR_FFE_TIMER_MAX_BF_DEF (0x04000000)

///< Chicken bit to invert up/down
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_0_CDR_FFE_UPDN_INV_CB_BF_OFF (30)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_0_CDR_FFE_UPDN_INV_CB_BF_WID ( 1)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_0_CDR_FFE_UPDN_INV_CB_BF_MSK (0x40000000)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_0_CDR_FFE_UPDN_INV_CB_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_CONTROL_1 register description at address offset 0x9dc
  *
  * Register default value:        0x00010410
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_control_1
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_MU_COARSE : 8;
    ///< Update gain coarse value
    ///< AccessType="RW" BitOffset="0" ResetValue="0x10"
    uint32_t CDR_FFE_MU_FINE : 8;
    ///< Update gain fine value
    ///< AccessType="RW" BitOffset="8" ResetValue="0x4"
    uint32_t CDR_FFE_COARSE_MU_EN : 1;
    ///< Select between coarse and fine update gains
    ///< AccessType="RW" BitOffset="16" ResetValue="0x1"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_ctrl_1_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_CTRL_1_DEFAULT (0x00010410U)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_1_RD_MASK (0x0001ffffU)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_1_WR_MASK (0x0001ffffU)


///< Update gain coarse value
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_1_CDR_FFE_MU_COARSE_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_1_CDR_FFE_MU_COARSE_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_1_CDR_FFE_MU_COARSE_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_1_CDR_FFE_MU_COARSE_BF_DEF (0x00000010)

///< Update gain fine value
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_1_CDR_FFE_MU_FINE_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_1_CDR_FFE_MU_FINE_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_1_CDR_FFE_MU_FINE_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_1_CDR_FFE_MU_FINE_BF_DEF (0x00000400)

///< Select between coarse and fine update gains
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_1_CDR_FFE_COARSE_MU_EN_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_1_CDR_FFE_COARSE_MU_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_1_CDR_FFE_COARSE_MU_EN_BF_MSK (0x00010000)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_1_CDR_FFE_COARSE_MU_EN_BF_DEF (0x00010000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_CONTROL_2 register description at address offset 0x9e0
  *
  * Register default value:        0x0000201F
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_control_2
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_TAP_MAX_W0 : 6;
    ///< update accum saturation at max width
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1F"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t CDR_FFE_TAP_MIN_W0 : 6;
    ///< update accum saturation at min width
    ///< AccessType="RW" BitOffset="8" ResetValue="0x20"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t CDR_FFE_INIT_VAL_W0 : 6;
    ///< Initial value for the CDR FFE Coefficient
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_ctrl_2_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_CTRL_2_DEFAULT (0x0000201fU)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_2_RD_MASK (0x003f3f3fU)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_2_WR_MASK (0x003f3f3fU)


///< update accum saturation at max width
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_2_CDR_FFE_TAP_MAX_W0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_2_CDR_FFE_TAP_MAX_W0_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_2_CDR_FFE_TAP_MAX_W0_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_2_CDR_FFE_TAP_MAX_W0_BF_DEF (0x0000001F)

///< update accum saturation at min width
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_2_CDR_FFE_TAP_MIN_W0_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_2_CDR_FFE_TAP_MIN_W0_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_2_CDR_FFE_TAP_MIN_W0_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_2_CDR_FFE_TAP_MIN_W0_BF_DEF (0x00002000)

///< Initial value for the CDR FFE Coefficient
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_2_CDR_FFE_INIT_VAL_W0_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_2_CDR_FFE_INIT_VAL_W0_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_2_CDR_FFE_INIT_VAL_W0_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_2_CDR_FFE_INIT_VAL_W0_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_LMS_AVG_UPDN_STATUS_0 register description at address offset 0x9e4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/lms_avg_updn_status_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_AVG_UPDN : 7;
    ///< CDR FFE Up-Down decisions per tap
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t EDGVREF_AVG_UPDN : 3;
    ///< EDGE VREF Up-Down decisions per tap
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t CDR_FFE_VREF_AVG_UPDN : 4;
    ///< CDR FFE VREF Up-Down decision per tap
    ///< AccessType="RO/V" BitOffset="10" ResetValue="0x0"
    uint32_t OFC_AVG_UPDN : 6;
    ///< OFC Up-Down decisions per tap
    ///< AccessType="RO/V" BitOffset="14" ResetValue="0x0"
    uint32_t ADCOFC_AVG_UPDN : 6;
    ///< ADC OFC Up-Down decisions per tap
    ///< AccessType="RO/V" BitOffset="20" ResetValue="0x0"
    uint32_t CDR_FFE_OFC_AVG_UPDN : 6;
    ///< CDR FFE OFC Up-Down decisions per tap
    ///< AccessType="RO/V" BitOffset="26" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_lms_avg_updn_stat_0_reg_t;

#define PMA_RXWORD_MSG_LMS_AVG_UPDN_STAT_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_LMS_AVG_UPDN_STAT_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_LMS_AVG_UPDN_STAT_0_WR_MASK (0x00000000U)


///< CDR FFE Up-Down decisions per tap
#define PMA_RXWORD_MSG_LMS_AVG_UPDN_STAT_0_CDR_FFE_AVG_UPDN_BF_OFF ( 0)
#define PMA_RXWORD_MSG_LMS_AVG_UPDN_STAT_0_CDR_FFE_AVG_UPDN_BF_WID ( 7)
#define PMA_RXWORD_MSG_LMS_AVG_UPDN_STAT_0_CDR_FFE_AVG_UPDN_BF_MSK (0x0000007F)
#define PMA_RXWORD_MSG_LMS_AVG_UPDN_STAT_0_CDR_FFE_AVG_UPDN_BF_DEF (0x00000000)

///< EDGE VREF Up-Down decisions per tap
#define PMA_RXWORD_MSG_LMS_AVG_UPDN_STAT_0_EDGVREF_AVG_UPDN_BF_OFF ( 7)
#define PMA_RXWORD_MSG_LMS_AVG_UPDN_STAT_0_EDGVREF_AVG_UPDN_BF_WID ( 3)
#define PMA_RXWORD_MSG_LMS_AVG_UPDN_STAT_0_EDGVREF_AVG_UPDN_BF_MSK (0x00000380)
#define PMA_RXWORD_MSG_LMS_AVG_UPDN_STAT_0_EDGVREF_AVG_UPDN_BF_DEF (0x00000000)

///< CDR FFE VREF Up-Down decision per tap
#define PMA_RXWORD_MSG_LMS_AVG_UPDN_STAT_0_CDR_FFE_VREF_AVG_UPDN_BF_OFF (10)
#define PMA_RXWORD_MSG_LMS_AVG_UPDN_STAT_0_CDR_FFE_VREF_AVG_UPDN_BF_WID ( 4)
#define PMA_RXWORD_MSG_LMS_AVG_UPDN_STAT_0_CDR_FFE_VREF_AVG_UPDN_BF_MSK (0x00003C00)
#define PMA_RXWORD_MSG_LMS_AVG_UPDN_STAT_0_CDR_FFE_VREF_AVG_UPDN_BF_DEF (0x00000000)

///< OFC Up-Down decisions per tap
#define PMA_RXWORD_MSG_LMS_AVG_UPDN_STAT_0_OFC_AVG_UPDN_BF_OFF (14)
#define PMA_RXWORD_MSG_LMS_AVG_UPDN_STAT_0_OFC_AVG_UPDN_BF_WID ( 6)
#define PMA_RXWORD_MSG_LMS_AVG_UPDN_STAT_0_OFC_AVG_UPDN_BF_MSK (0x000FC000)
#define PMA_RXWORD_MSG_LMS_AVG_UPDN_STAT_0_OFC_AVG_UPDN_BF_DEF (0x00000000)

///< ADC OFC Up-Down decisions per tap
#define PMA_RXWORD_MSG_LMS_AVG_UPDN_STAT_0_ADCOFC_AVG_UPDN_BF_OFF (20)
#define PMA_RXWORD_MSG_LMS_AVG_UPDN_STAT_0_ADCOFC_AVG_UPDN_BF_WID ( 6)
#define PMA_RXWORD_MSG_LMS_AVG_UPDN_STAT_0_ADCOFC_AVG_UPDN_BF_MSK (0x03F00000)
#define PMA_RXWORD_MSG_LMS_AVG_UPDN_STAT_0_ADCOFC_AVG_UPDN_BF_DEF (0x00000000)

///< CDR FFE OFC Up-Down decisions per tap
#define PMA_RXWORD_MSG_LMS_AVG_UPDN_STAT_0_CDR_FFE_OFC_AVG_UPDN_BF_OFF (26)
#define PMA_RXWORD_MSG_LMS_AVG_UPDN_STAT_0_CDR_FFE_OFC_AVG_UPDN_BF_WID ( 6)
#define PMA_RXWORD_MSG_LMS_AVG_UPDN_STAT_0_CDR_FFE_OFC_AVG_UPDN_BF_MSK (0xFC000000)
#define PMA_RXWORD_MSG_LMS_AVG_UPDN_STAT_0_CDR_FFE_OFC_AVG_UPDN_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_VREF_CONTROL_1 register description at address offset 0x9e8
  *
  * Register default value:        0x00000040
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_vref_control_1
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_VREF_NEG_UPDN_INV_CB : 1;
    ///< CDR FFE VRef Neg chicken bit to invert up/down
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_VREF_POS_UPDN_INV_CB : 1;
    ///< CDR FFE VRef Pos chicken bit to invert up/down
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t CDR_FFE_VREF_HOLD_EN : 4;
    ///< CDR FFE VRef hold tap accumulator
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t CDR_FFE_VREF_INT_ITER_BYPASS : 1;
    ///< CDR FFE VRef internal iterator bypass
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t CDR_FFE_VREF_INT_ITER_MAX : 4;
    ///< CDR FFE VRef internal iterator max count. Actual number of iteration
    ///< is N+1
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t  : 21;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_vref_ctrl_1_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_1_DEFAULT (0x00000040U)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_1_RD_MASK (0x000007ffU)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_1_WR_MASK (0x000007ffU)


///< CDR FFE VRef Neg chicken bit to invert up/down
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_1_CDR_FFE_VREF_NEG_UPDN_INV_CB_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_1_CDR_FFE_VREF_NEG_UPDN_INV_CB_BF_WID ( 1)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_1_CDR_FFE_VREF_NEG_UPDN_INV_CB_BF_MSK (0x00000001)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_1_CDR_FFE_VREF_NEG_UPDN_INV_CB_BF_DEF (0x00000000)

///< CDR FFE VRef Pos chicken bit to invert up/down
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_1_CDR_FFE_VREF_POS_UPDN_INV_CB_BF_OFF ( 1)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_1_CDR_FFE_VREF_POS_UPDN_INV_CB_BF_WID ( 1)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_1_CDR_FFE_VREF_POS_UPDN_INV_CB_BF_MSK (0x00000002)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_1_CDR_FFE_VREF_POS_UPDN_INV_CB_BF_DEF (0x00000000)

///< CDR FFE VRef hold tap accumulator
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_1_CDR_FFE_VREF_HOLD_EN_BF_OFF ( 2)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_1_CDR_FFE_VREF_HOLD_EN_BF_WID ( 4)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_1_CDR_FFE_VREF_HOLD_EN_BF_MSK (0x0000003C)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_1_CDR_FFE_VREF_HOLD_EN_BF_DEF (0x00000000)

///< CDR FFE VRef internal iterator bypass
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_1_CDR_FFE_VREF_INT_ITER_BYP_BF_OFF ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_1_CDR_FFE_VREF_INT_ITER_BYP_BF_WID ( 1)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_1_CDR_FFE_VREF_INT_ITER_BYP_BF_MSK (0x00000040)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_1_CDR_FFE_VREF_INT_ITER_BYP_BF_DEF (0x00000040)

///< CDR FFE VRef internal iterator max count. Actual number of iteration
///< is N+1
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_1_CDR_FFE_VREF_INT_ITER_MAX_BF_OFF ( 7)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_1_CDR_FFE_VREF_INT_ITER_MAX_BF_WID ( 4)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_1_CDR_FFE_VREF_INT_ITER_MAX_BF_MSK (0x00000780)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_1_CDR_FFE_VREF_INT_ITER_MAX_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_VREF_CONTROL_2 register description at address offset 0x9ec
  *
  * Register default value:        0x00036120
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_vref_control_2
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_VREF_INIT_VAL_0 : 9;
    ///< CDR_FFE_VREFinitial values for Vrefs
    ///< AccessType="RW" BitOffset="0" ResetValue="0x120"
    uint32_t CDR_FFE_VREF_INIT_VAL_1 : 9;
    ///< CDR_FFE_VREFinitial values for Vrefs
    ///< AccessType="RW" BitOffset="9" ResetValue="0x1B0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_vref_ctrl_2_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_2_DEFAULT (0x00036120U)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_2_RD_MASK (0x0003ffffU)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_2_WR_MASK (0x0003ffffU)


///< CDR_FFE_VREFinitial values for Vrefs
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_2_CDR_FFE_VREF_INIT_VAL_0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_2_CDR_FFE_VREF_INIT_VAL_0_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_2_CDR_FFE_VREF_INIT_VAL_0_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_2_CDR_FFE_VREF_INIT_VAL_0_BF_DEF (0x00000120)

///< CDR_FFE_VREFinitial values for Vrefs
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_2_CDR_FFE_VREF_INIT_VAL_1_BF_OFF ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_2_CDR_FFE_VREF_INIT_VAL_1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_2_CDR_FFE_VREF_INIT_VAL_1_BF_MSK (0x0003FE00)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_2_CDR_FFE_VREF_INIT_VAL_1_BF_DEF (0x00036000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_VREF_CONTROL_3 register description at address offset 0x9f0
  *
  * Register default value:        0x0001C050
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_vref_control_3
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_VREF_INIT_VAL_2 : 9;
    ///< CDR_FFE_VREFinitial values for Vrefs
    ///< AccessType="RW" BitOffset="0" ResetValue="0x50"
    uint32_t CDR_FFE_VREF_INIT_VAL_3 : 9;
    ///< CDR_FFE_VREFinitial values for Vrefs
    ///< AccessType="RW" BitOffset="9" ResetValue="0xE0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_vref_ctrl_3_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_3_DEFAULT (0x0001c050U)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_3_RD_MASK (0x0003ffffU)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_3_WR_MASK (0x0003ffffU)


///< CDR_FFE_VREFinitial values for Vrefs
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_3_CDR_FFE_VREF_INIT_VAL_2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_3_CDR_FFE_VREF_INIT_VAL_2_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_3_CDR_FFE_VREF_INIT_VAL_2_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_3_CDR_FFE_VREF_INIT_VAL_2_BF_DEF (0x00000050)

///< CDR_FFE_VREFinitial values for Vrefs
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_3_CDR_FFE_VREF_INIT_VAL_3_BF_OFF ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_3_CDR_FFE_VREF_INIT_VAL_3_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_3_CDR_FFE_VREF_INIT_VAL_3_BF_MSK (0x0003FE00)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_3_CDR_FFE_VREF_INIT_VAL_3_BF_DEF (0x0001C000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_VREF_CONTROL_4 register description at address offset 0x9f4
  *
  * Register default value:        0x00004008
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_vref_control_4
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_VREF_TIMER_MAX : 8;
    ///< CDR_FFE_VREFdelay timer
    ///< AccessType="RW" BitOffset="0" ResetValue="0x8"
    uint32_t CDR_FFE_VREF_STATS_MAX : 10;
    ///< CDR_FFE_VREFstats counter
    ///< AccessType="RW" BitOffset="8" ResetValue="0x40"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_vref_ctrl_4_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_4_DEFAULT (0x00004008U)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_4_RD_MASK (0x0003ffffU)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_4_WR_MASK (0x0003ffffU)


///< CDR_FFE_VREFdelay timer
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_4_CDR_FFE_VREF_TIMER_MAX_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_4_CDR_FFE_VREF_TIMER_MAX_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_4_CDR_FFE_VREF_TIMER_MAX_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_4_CDR_FFE_VREF_TIMER_MAX_BF_DEF (0x00000008)

///< CDR_FFE_VREFstats counter
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_4_CDR_FFE_VREF_STATS_MAX_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_4_CDR_FFE_VREF_STATS_MAX_BF_WID (10)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_4_CDR_FFE_VREF_STATS_MAX_BF_MSK (0x0003FF00)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_4_CDR_FFE_VREF_STATS_MAX_BF_DEF (0x00004000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_VREF_CONTROL_5 register description at address offset 0x9f8
  *
  * Register default value:        0x000200FF
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_vref_control_5
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_VREF_TAP_MAX : 9;
    ///< CDR_FFE_VREFupdate accum saturation
    ///< AccessType="RW" BitOffset="0" ResetValue="0xFF"
    uint32_t CDR_FFE_VREF_TAP_MIN : 9;
    ///< CDR_FFE_VREFupdate accum saturation
    ///< AccessType="RW" BitOffset="9" ResetValue="0x100"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_vref_ctrl_5_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_5_DEFAULT (0x000200ffU)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_5_RD_MASK (0x0003ffffU)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_5_WR_MASK (0x0003ffffU)


///< CDR_FFE_VREFupdate accum saturation
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_5_CDR_FFE_VREF_TAP_MAX_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_5_CDR_FFE_VREF_TAP_MAX_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_5_CDR_FFE_VREF_TAP_MAX_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_5_CDR_FFE_VREF_TAP_MAX_BF_DEF (0x000000FF)

///< CDR_FFE_VREFupdate accum saturation
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_5_CDR_FFE_VREF_TAP_MIN_BF_OFF ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_5_CDR_FFE_VREF_TAP_MIN_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_5_CDR_FFE_VREF_TAP_MIN_BF_MSK (0x0003FE00)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_5_CDR_FFE_VREF_TAP_MIN_BF_DEF (0x00020000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_VREF_CONTROL_6 register description at address offset 0x9fc
  *
  * Register default value:        0x00001021
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_vref_control_6
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_VREF_COARSE_MU_EN : 1;
    ///< use coarse mu for CDR_FFE_VREF
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t CDR_FFE_VREF_MU_COARSE : 8;
    ///< CDR_FFE_VREFupdate gain value for coarse run
    ///< AccessType="RW" BitOffset="1" ResetValue="0x10"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
    uint32_t CDR_FFE_VREF_MU_FINE : 8;
    ///< CDR_FFE_VREFupdate gain value for fine run
    ///< AccessType="RW" BitOffset="10" ResetValue="0x4"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
    uint32_t CDR_FFE_VREF_THRS_SEL : 1;
    ///< Selection CDR_FFE_VREF thrs from ofc adaptive lms or from average
    ///< of CDR_FFE_VREF taps. 0-default, from CDR_FFE_VREF average taps; 1-from
    ///< ofc average taps
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_vref_ctrl_6_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_6_DEFAULT (0x00001021U)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_6_RD_MASK (0x0013fdffU)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_6_WR_MASK (0x0013fdffU)


///< use coarse mu for CDR_FFE_VREF
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_6_CDR_FFE_VREF_COARSE_MU_EN_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_6_CDR_FFE_VREF_COARSE_MU_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_6_CDR_FFE_VREF_COARSE_MU_EN_BF_MSK (0x00000001)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_6_CDR_FFE_VREF_COARSE_MU_EN_BF_DEF (0x00000001)

///< CDR_FFE_VREFupdate gain value for coarse run
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_6_CDR_FFE_VREF_MU_COARSE_BF_OFF ( 1)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_6_CDR_FFE_VREF_MU_COARSE_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_6_CDR_FFE_VREF_MU_COARSE_BF_MSK (0x000001FE)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_6_CDR_FFE_VREF_MU_COARSE_BF_DEF (0x00000020)

///< CDR_FFE_VREFupdate gain value for fine run
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_6_CDR_FFE_VREF_MU_FINE_BF_OFF (10)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_6_CDR_FFE_VREF_MU_FINE_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_6_CDR_FFE_VREF_MU_FINE_BF_MSK (0x0003FC00)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_6_CDR_FFE_VREF_MU_FINE_BF_DEF (0x00001000)

///< Selection CDR_FFE_VREF thrs from ofc adaptive lms or from average
///< of CDR_FFE_VREF taps. 0-default, from CDR_FFE_VREF average taps; 1-from
///< ofc average taps
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_6_CDR_FFE_VREF_THRS_SEL_BF_OFF (20)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_6_CDR_FFE_VREF_THRS_SEL_BF_WID ( 1)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_6_CDR_FFE_VREF_THRS_SEL_BF_MSK (0x00100000)
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_6_CDR_FFE_VREF_THRS_SEL_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_OFC_CONTROL_0 register description at address offset 0xa04
  *
  * Register default value:        0x00010020
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_ofc_control_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_OFC_UPDN_INV_CB : 1;
    ///< Chicken bit to invert up/down
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_OFC_TIMER_MAX : 8;
    ///< cdr_ffe_ofc delay timer threshold
    ///< AccessType="RW" BitOffset="1" ResetValue="0x10"
    uint32_t CDR_FFE_OFC_STATS_MAX : 10;
    ///< cdr_ffe_ofc stats counter threshold
    ///< AccessType="RW" BitOffset="9" ResetValue="0x80"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
    uint32_t CDR_FFE_OFC_HOLD_EN : 6;
    ///< Hold cdr_ffe_ofc taps accumulators
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_ofc_ctrl_0_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_0_DEFAULT (0x00010020U)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_0_RD_MASK (0x0fc7ffffU)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_0_WR_MASK (0x0fc7ffffU)


///< Chicken bit to invert up/down
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_0_CDR_FFE_OFC_UPDN_INV_CB_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_0_CDR_FFE_OFC_UPDN_INV_CB_BF_WID ( 1)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_0_CDR_FFE_OFC_UPDN_INV_CB_BF_MSK (0x00000001)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_0_CDR_FFE_OFC_UPDN_INV_CB_BF_DEF (0x00000000)

///< cdr_ffe_ofc delay timer threshold
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_0_CDR_FFE_OFC_TIMER_MAX_BF_OFF ( 1)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_0_CDR_FFE_OFC_TIMER_MAX_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_0_CDR_FFE_OFC_TIMER_MAX_BF_MSK (0x000001FE)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_0_CDR_FFE_OFC_TIMER_MAX_BF_DEF (0x00000020)

///< cdr_ffe_ofc stats counter threshold
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_0_CDR_FFE_OFC_STATS_MAX_BF_OFF ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_0_CDR_FFE_OFC_STATS_MAX_BF_WID (10)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_0_CDR_FFE_OFC_STATS_MAX_BF_MSK (0x0007FE00)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_0_CDR_FFE_OFC_STATS_MAX_BF_DEF (0x00010000)

///< Hold cdr_ffe_ofc taps accumulators
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_0_CDR_FFE_OFC_HOLD_EN_BF_OFF (22)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_0_CDR_FFE_OFC_HOLD_EN_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_0_CDR_FFE_OFC_HOLD_EN_BF_MSK (0x0FC00000)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_0_CDR_FFE_OFC_HOLD_EN_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_OFC_CONTROL_1A register description at address offset 0xa08
  *
  * Register default value:        0x0005A168
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_ofc_control_1a
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_OFC_INIT_VAL_0 : 9;
    ///< Initial value for cdr_ffe_ofc_0 coeff
    ///< AccessType="RW" BitOffset="0" ResetValue="0x168"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
    uint32_t CDR_FFE_OFC_INIT_VAL_1 : 9;
    ///< Initial value for cdr_ffe_ofc_1 coeff
    ///< AccessType="RW" BitOffset="10" ResetValue="0x168"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
    uint32_t CDR_FFE_OFC_INIT_VAL_2 : 9;
    ///< Initial value for cdr_ffe_ofc_2 coeff
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_ofc_ctrl_1a_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_1A_DEFAULT (0x0005a168U)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_1A_RD_MASK (0x1ff7fdffU)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_1A_WR_MASK (0x1ff7fdffU)


///< Initial value for cdr_ffe_ofc_0 coeff
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_1A_CDR_FFE_OFC_INIT_VAL_0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_1A_CDR_FFE_OFC_INIT_VAL_0_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_1A_CDR_FFE_OFC_INIT_VAL_0_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_1A_CDR_FFE_OFC_INIT_VAL_0_BF_DEF (0x00000168)

///< Initial value for cdr_ffe_ofc_1 coeff
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_1A_CDR_FFE_OFC_INIT_VAL_1_BF_OFF (10)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_1A_CDR_FFE_OFC_INIT_VAL_1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_1A_CDR_FFE_OFC_INIT_VAL_1_BF_MSK (0x0007FC00)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_1A_CDR_FFE_OFC_INIT_VAL_1_BF_DEF (0x0005A000)

///< Initial value for cdr_ffe_ofc_2 coeff
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_1A_CDR_FFE_OFC_INIT_VAL_2_BF_OFF (20)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_1A_CDR_FFE_OFC_INIT_VAL_2_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_1A_CDR_FFE_OFC_INIT_VAL_2_BF_MSK (0x1FF00000)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_1A_CDR_FFE_OFC_INIT_VAL_2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_OFC_CONTROL_1B register description at address offset 0xa0c
  *
  * Register default value:        0x09826000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_ofc_control_1b
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_OFC_INIT_VAL_3 : 9;
    ///< Initial value for cdr_ffe_ofc_3 coeff
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
    uint32_t CDR_FFE_OFC_INIT_VAL_4 : 9;
    ///< Initial value for cdr_ffe_ofc_4 coeff
    ///< AccessType="RW" BitOffset="10" ResetValue="0x98"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
    uint32_t CDR_FFE_OFC_INIT_VAL_5 : 9;
    ///< Initial value for cdr_ffe_ofc_5 coeff
    ///< AccessType="RW" BitOffset="20" ResetValue="0x98"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_ofc_ctrl_1b_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_1B_DEFAULT (0x09826000U)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_1B_RD_MASK (0x1ff7fdffU)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_1B_WR_MASK (0x1ff7fdffU)


///< Initial value for cdr_ffe_ofc_3 coeff
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_1B_CDR_FFE_OFC_INIT_VAL_3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_1B_CDR_FFE_OFC_INIT_VAL_3_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_1B_CDR_FFE_OFC_INIT_VAL_3_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_1B_CDR_FFE_OFC_INIT_VAL_3_BF_DEF (0x00000000)

///< Initial value for cdr_ffe_ofc_4 coeff
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_1B_CDR_FFE_OFC_INIT_VAL_4_BF_OFF (10)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_1B_CDR_FFE_OFC_INIT_VAL_4_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_1B_CDR_FFE_OFC_INIT_VAL_4_BF_MSK (0x0007FC00)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_1B_CDR_FFE_OFC_INIT_VAL_4_BF_DEF (0x00026000)

///< Initial value for cdr_ffe_ofc_5 coeff
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_1B_CDR_FFE_OFC_INIT_VAL_5_BF_OFF (20)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_1B_CDR_FFE_OFC_INIT_VAL_5_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_1B_CDR_FFE_OFC_INIT_VAL_5_BF_MSK (0x1FF00000)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_1B_CDR_FFE_OFC_INIT_VAL_5_BF_DEF (0x09800000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_OFC_CONTROL_2 register description at address offset 0xa10
  *
  * Register default value:        0x00010410
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_ofc_control_2
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_OFC_MU_COARSE : 8;
    ///< Update cdr_ffe_ofc vgain coarse value
    ///< AccessType="RW" BitOffset="0" ResetValue="0x10"
    uint32_t CDR_FFE_OFC_MU_FINE : 8;
    ///< Update cdr_ffe_ofc gain fine value
    ///< AccessType="RW" BitOffset="8" ResetValue="0x4"
    uint32_t CDR_FFE_OFC_COARSE_MU_EN : 1;
    ///< Select between coarse and fine update gains
    ///< AccessType="RW" BitOffset="16" ResetValue="0x1"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_ofc_ctrl_2_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_2_DEFAULT (0x00010410U)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_2_RD_MASK (0x0001ffffU)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_2_WR_MASK (0x0001ffffU)


///< Update cdr_ffe_ofc vgain coarse value
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_2_CDR_FFE_OFC_MU_COARSE_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_2_CDR_FFE_OFC_MU_COARSE_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_2_CDR_FFE_OFC_MU_COARSE_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_2_CDR_FFE_OFC_MU_COARSE_BF_DEF (0x00000010)

///< Update cdr_ffe_ofc gain fine value
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_2_CDR_FFE_OFC_MU_FINE_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_2_CDR_FFE_OFC_MU_FINE_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_2_CDR_FFE_OFC_MU_FINE_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_2_CDR_FFE_OFC_MU_FINE_BF_DEF (0x00000400)

///< Select between coarse and fine update gains
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_2_CDR_FFE_OFC_COARSE_MU_EN_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_2_CDR_FFE_OFC_COARSE_MU_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_2_CDR_FFE_OFC_COARSE_MU_EN_BF_MSK (0x00010000)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_2_CDR_FFE_OFC_COARSE_MU_EN_BF_DEF (0x00010000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_OFC_CONTROL_3 register description at address offset 0xa14
  *
  * Register default value:        0x000400FF
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_ofc_control_3
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_OFC_TAP_MAX : 9;
    ///< update cdr_ffe_ofc accum saturation at max width
    ///< AccessType="RW" BitOffset="0" ResetValue="0xFF"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
    uint32_t CDR_FFE_OFC_TAP_MIN : 9;
    ///< update cdr_ffe_ofc accum saturation at min width
    ///< AccessType="RW" BitOffset="10" ResetValue="0x100"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_ofc_ctrl_3_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_3_DEFAULT (0x000400ffU)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_3_RD_MASK (0x0007fdffU)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_3_WR_MASK (0x0007fdffU)


///< update cdr_ffe_ofc accum saturation at max width
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_3_CDR_FFE_OFC_TAP_MAX_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_3_CDR_FFE_OFC_TAP_MAX_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_3_CDR_FFE_OFC_TAP_MAX_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_3_CDR_FFE_OFC_TAP_MAX_BF_DEF (0x000000FF)

///< update cdr_ffe_ofc accum saturation at min width
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_3_CDR_FFE_OFC_TAP_MIN_BF_OFF (10)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_3_CDR_FFE_OFC_TAP_MIN_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_3_CDR_FFE_OFC_TAP_MIN_BF_MSK (0x0007FC00)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_3_CDR_FFE_OFC_TAP_MIN_BF_DEF (0x00040000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_OFC_STATUS_0 register description at address offset 0xa18
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_ofc_status_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_OFC_TAP_HI : 9;
    ///< cdr_ffe_ofc tap high
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
    uint32_t CDR_FFE_OFC_TAP_LO : 9;
    ///< cdr_ffe_ofc tap_low
    ///< AccessType="RO/V" BitOffset="10" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
    uint32_t CDR_FFE_OFC_TAP_ZR : 9;
    ///< cdr_ffe_ofc tap_zero
    ///< AccessType="RO/V" BitOffset="20" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_ofc_stat_0_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_OFC_STAT_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_STAT_0_RD_MASK (0x1ff7fdffU)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_STAT_0_WR_MASK (0x00000000U)


///< cdr_ffe_ofc tap high
#define PMA_RXWORD_MSG_CDR_FFE_OFC_STAT_0_CDR_FFE_OFC_TAP_HI_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_STAT_0_CDR_FFE_OFC_TAP_HI_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_STAT_0_CDR_FFE_OFC_TAP_HI_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_STAT_0_CDR_FFE_OFC_TAP_HI_BF_DEF (0x00000000)

///< cdr_ffe_ofc tap_low
#define PMA_RXWORD_MSG_CDR_FFE_OFC_STAT_0_CDR_FFE_OFC_TAP_LO_BF_OFF (10)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_STAT_0_CDR_FFE_OFC_TAP_LO_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_STAT_0_CDR_FFE_OFC_TAP_LO_BF_MSK (0x0007FC00)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_STAT_0_CDR_FFE_OFC_TAP_LO_BF_DEF (0x00000000)

///< cdr_ffe_ofc tap_zero
#define PMA_RXWORD_MSG_CDR_FFE_OFC_STAT_0_CDR_FFE_OFC_TAP_ZR_BF_OFF (20)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_STAT_0_CDR_FFE_OFC_TAP_ZR_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_STAT_0_CDR_FFE_OFC_TAP_ZR_BF_MSK (0x1FF00000)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_STAT_0_CDR_FFE_OFC_TAP_ZR_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_PRE1_SET0TO3_FRAC register description at address offset 0xa1c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_pre1_set0to3_frac
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_PRE1_COEFF_SET0_FRAC : 8;
    ///< set0 of cdr ffe pre1 coeff frac
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_PRE1_COEFF_SET1_FRAC : 8;
    ///< set1 of cdr ffe pre1 coeff frac
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_PRE1_COEFF_SET2_FRAC : 8;
    ///< set2 of cdr ffe pre1 coeff frac
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_PRE1_COEFF_SET3_FRAC : 8;
    ///< set3 of cdr ffe pre1 coeff frac
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_pre1_set0to3_frac_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET0TO3_FRAC_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET0TO3_FRAC_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET0TO3_FRAC_WR_MASK (0xffffffffU)


///< set0 of cdr ffe pre1 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET0TO3_FRAC_CDR_FFE_PRE1_COEFF_SET0_FRAC_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET0TO3_FRAC_CDR_FFE_PRE1_COEFF_SET0_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET0TO3_FRAC_CDR_FFE_PRE1_COEFF_SET0_FRAC_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET0TO3_FRAC_CDR_FFE_PRE1_COEFF_SET0_FRAC_BF_DEF (0x00000000)

///< set1 of cdr ffe pre1 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET0TO3_FRAC_CDR_FFE_PRE1_COEFF_SET1_FRAC_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET0TO3_FRAC_CDR_FFE_PRE1_COEFF_SET1_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET0TO3_FRAC_CDR_FFE_PRE1_COEFF_SET1_FRAC_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET0TO3_FRAC_CDR_FFE_PRE1_COEFF_SET1_FRAC_BF_DEF (0x00000000)

///< set2 of cdr ffe pre1 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET0TO3_FRAC_CDR_FFE_PRE1_COEFF_SET2_FRAC_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET0TO3_FRAC_CDR_FFE_PRE1_COEFF_SET2_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET0TO3_FRAC_CDR_FFE_PRE1_COEFF_SET2_FRAC_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET0TO3_FRAC_CDR_FFE_PRE1_COEFF_SET2_FRAC_BF_DEF (0x00000000)

///< set3 of cdr ffe pre1 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET0TO3_FRAC_CDR_FFE_PRE1_COEFF_SET3_FRAC_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET0TO3_FRAC_CDR_FFE_PRE1_COEFF_SET3_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET0TO3_FRAC_CDR_FFE_PRE1_COEFF_SET3_FRAC_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET0TO3_FRAC_CDR_FFE_PRE1_COEFF_SET3_FRAC_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_PRE1_SET4TO7_FRAC register description at address offset 0xa20
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_pre1_set4to7_frac
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_PRE1_COEFF_SET4_FRAC : 8;
    ///< set4 of cdr ffe pre1 coeff frac
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_PRE1_COEFF_SET5_FRAC : 8;
    ///< set5 of cdr ffe pre1 coeff frac
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_PRE1_COEFF_SET6_FRAC : 8;
    ///< set6 of cdr ffe pre1 coeff frac
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_PRE1_COEFF_SET7_FRAC : 8;
    ///< set7 of cdr ffe pre1 coeff frac
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_pre1_set4to7_frac_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET4TO7_FRAC_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET4TO7_FRAC_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET4TO7_FRAC_WR_MASK (0xffffffffU)


///< set4 of cdr ffe pre1 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET4TO7_FRAC_CDR_FFE_PRE1_COEFF_SET4_FRAC_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET4TO7_FRAC_CDR_FFE_PRE1_COEFF_SET4_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET4TO7_FRAC_CDR_FFE_PRE1_COEFF_SET4_FRAC_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET4TO7_FRAC_CDR_FFE_PRE1_COEFF_SET4_FRAC_BF_DEF (0x00000000)

///< set5 of cdr ffe pre1 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET4TO7_FRAC_CDR_FFE_PRE1_COEFF_SET5_FRAC_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET4TO7_FRAC_CDR_FFE_PRE1_COEFF_SET5_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET4TO7_FRAC_CDR_FFE_PRE1_COEFF_SET5_FRAC_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET4TO7_FRAC_CDR_FFE_PRE1_COEFF_SET5_FRAC_BF_DEF (0x00000000)

///< set6 of cdr ffe pre1 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET4TO7_FRAC_CDR_FFE_PRE1_COEFF_SET6_FRAC_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET4TO7_FRAC_CDR_FFE_PRE1_COEFF_SET6_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET4TO7_FRAC_CDR_FFE_PRE1_COEFF_SET6_FRAC_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET4TO7_FRAC_CDR_FFE_PRE1_COEFF_SET6_FRAC_BF_DEF (0x00000000)

///< set7 of cdr ffe pre1 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET4TO7_FRAC_CDR_FFE_PRE1_COEFF_SET7_FRAC_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET4TO7_FRAC_CDR_FFE_PRE1_COEFF_SET7_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET4TO7_FRAC_CDR_FFE_PRE1_COEFF_SET7_FRAC_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET4TO7_FRAC_CDR_FFE_PRE1_COEFF_SET7_FRAC_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_PRE1_SET8TO11_FRAC register description at address offset 0xa24
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_pre1_set8to11_frac
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_PRE1_COEFF_SET8_FRAC : 8;
    ///< set8 of cdr ffe pre1 coeff frac
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_PRE1_COEFF_SET9_FRAC : 8;
    ///< set9 of cdr ffe pre1 coeff frac
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_PRE1_COEFF_SET10_FRAC : 8;
    ///< set10 of cdr ffe pre1 coeff frac
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_PRE1_COEFF_SET11_FRAC : 8;
    ///< set11 of cdr ffe pre1 coeff frac
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_pre1_set8to11_frac_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET8TO11_FRAC_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET8TO11_FRAC_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET8TO11_FRAC_WR_MASK (0xffffffffU)


///< set8 of cdr ffe pre1 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET8TO11_FRAC_CDR_FFE_PRE1_COEFF_SET8_FRAC_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET8TO11_FRAC_CDR_FFE_PRE1_COEFF_SET8_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET8TO11_FRAC_CDR_FFE_PRE1_COEFF_SET8_FRAC_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET8TO11_FRAC_CDR_FFE_PRE1_COEFF_SET8_FRAC_BF_DEF (0x00000000)

///< set9 of cdr ffe pre1 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET8TO11_FRAC_CDR_FFE_PRE1_COEFF_SET9_FRAC_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET8TO11_FRAC_CDR_FFE_PRE1_COEFF_SET9_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET8TO11_FRAC_CDR_FFE_PRE1_COEFF_SET9_FRAC_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET8TO11_FRAC_CDR_FFE_PRE1_COEFF_SET9_FRAC_BF_DEF (0x00000000)

///< set10 of cdr ffe pre1 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET8TO11_FRAC_CDR_FFE_PRE1_COEFF_SET10_FRAC_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET8TO11_FRAC_CDR_FFE_PRE1_COEFF_SET10_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET8TO11_FRAC_CDR_FFE_PRE1_COEFF_SET10_FRAC_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET8TO11_FRAC_CDR_FFE_PRE1_COEFF_SET10_FRAC_BF_DEF (0x00000000)

///< set11 of cdr ffe pre1 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET8TO11_FRAC_CDR_FFE_PRE1_COEFF_SET11_FRAC_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET8TO11_FRAC_CDR_FFE_PRE1_COEFF_SET11_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET8TO11_FRAC_CDR_FFE_PRE1_COEFF_SET11_FRAC_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET8TO11_FRAC_CDR_FFE_PRE1_COEFF_SET11_FRAC_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_PRE1_SET12TO15_FRAC register description at address offset 0xa28
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_pre1_set12to15_frac
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_PRE1_COEFF_SET12_FRAC : 8;
    ///< set12 of cdr ffe pre1 coeff frac
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_PRE1_COEFF_SET13_FRAC : 8;
    ///< set13 of cdr ffe pre1 coeff frac
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_PRE1_COEFF_SET14_FRAC : 8;
    ///< set14 of cdr ffe pre1 coeff frac
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_PRE1_COEFF_SET15_FRAC : 8;
    ///< set15 of cdr ffe pre1 coeff frac
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_pre1_set12to15_frac_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET12TO15_FRAC_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET12TO15_FRAC_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET12TO15_FRAC_WR_MASK (0xffffffffU)


///< set12 of cdr ffe pre1 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET12TO15_FRAC_CDR_FFE_PRE1_COEFF_SET12_FRAC_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET12TO15_FRAC_CDR_FFE_PRE1_COEFF_SET12_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET12TO15_FRAC_CDR_FFE_PRE1_COEFF_SET12_FRAC_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET12TO15_FRAC_CDR_FFE_PRE1_COEFF_SET12_FRAC_BF_DEF (0x00000000)

///< set13 of cdr ffe pre1 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET12TO15_FRAC_CDR_FFE_PRE1_COEFF_SET13_FRAC_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET12TO15_FRAC_CDR_FFE_PRE1_COEFF_SET13_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET12TO15_FRAC_CDR_FFE_PRE1_COEFF_SET13_FRAC_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET12TO15_FRAC_CDR_FFE_PRE1_COEFF_SET13_FRAC_BF_DEF (0x00000000)

///< set14 of cdr ffe pre1 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET12TO15_FRAC_CDR_FFE_PRE1_COEFF_SET14_FRAC_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET12TO15_FRAC_CDR_FFE_PRE1_COEFF_SET14_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET12TO15_FRAC_CDR_FFE_PRE1_COEFF_SET14_FRAC_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET12TO15_FRAC_CDR_FFE_PRE1_COEFF_SET14_FRAC_BF_DEF (0x00000000)

///< set15 of cdr ffe pre1 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET12TO15_FRAC_CDR_FFE_PRE1_COEFF_SET15_FRAC_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET12TO15_FRAC_CDR_FFE_PRE1_COEFF_SET15_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET12TO15_FRAC_CDR_FFE_PRE1_COEFF_SET15_FRAC_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET12TO15_FRAC_CDR_FFE_PRE1_COEFF_SET15_FRAC_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_POST1_SET0TO3_FRAC register description at address offset 0xa2c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_post1_set0to3_frac
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_POST1_COEFF_SET0_FRAC : 8;
    ///< set0 of cdr ffe post1 coeff frac
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_POST1_COEFF_SET1_FRAC : 8;
    ///< set1 of cdr ffe post1 coeff frac
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_POST1_COEFF_SET2_FRAC : 8;
    ///< set2 of cdr ffe post1 coeff frac
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_POST1_COEFF_SET3_FRAC : 8;
    ///< set3 of cdr ffe post1 coeff frac
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_post1_set0to3_frac_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET0TO3_FRAC_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET0TO3_FRAC_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET0TO3_FRAC_WR_MASK (0xffffffffU)


///< set0 of cdr ffe post1 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET0TO3_FRAC_CDR_FFE_POST1_COEFF_SET0_FRAC_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET0TO3_FRAC_CDR_FFE_POST1_COEFF_SET0_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET0TO3_FRAC_CDR_FFE_POST1_COEFF_SET0_FRAC_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET0TO3_FRAC_CDR_FFE_POST1_COEFF_SET0_FRAC_BF_DEF (0x00000000)

///< set1 of cdr ffe post1 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET0TO3_FRAC_CDR_FFE_POST1_COEFF_SET1_FRAC_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET0TO3_FRAC_CDR_FFE_POST1_COEFF_SET1_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET0TO3_FRAC_CDR_FFE_POST1_COEFF_SET1_FRAC_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET0TO3_FRAC_CDR_FFE_POST1_COEFF_SET1_FRAC_BF_DEF (0x00000000)

///< set2 of cdr ffe post1 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET0TO3_FRAC_CDR_FFE_POST1_COEFF_SET2_FRAC_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET0TO3_FRAC_CDR_FFE_POST1_COEFF_SET2_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET0TO3_FRAC_CDR_FFE_POST1_COEFF_SET2_FRAC_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET0TO3_FRAC_CDR_FFE_POST1_COEFF_SET2_FRAC_BF_DEF (0x00000000)

///< set3 of cdr ffe post1 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET0TO3_FRAC_CDR_FFE_POST1_COEFF_SET3_FRAC_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET0TO3_FRAC_CDR_FFE_POST1_COEFF_SET3_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET0TO3_FRAC_CDR_FFE_POST1_COEFF_SET3_FRAC_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET0TO3_FRAC_CDR_FFE_POST1_COEFF_SET3_FRAC_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_POST1_SET4TO7_FRAC register description at address offset 0xa30
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_post1_set4to7_frac
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_POST1_COEFF_SET4_FRAC : 8;
    ///< set4 of cdr ffe post1 coeff frac
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_POST1_COEFF_SET5_FRAC : 8;
    ///< set5 of cdr ffe post1 coeff frac
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_POST1_COEFF_SET6_FRAC : 8;
    ///< set6 of cdr ffe post1 coeff frac
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_POST1_COEFF_SET7_FRAC : 8;
    ///< set7 of cdr ffe post1 coeff frac
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_post1_set4to7_frac_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET4TO7_FRAC_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET4TO7_FRAC_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET4TO7_FRAC_WR_MASK (0xffffffffU)


///< set4 of cdr ffe post1 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET4TO7_FRAC_CDR_FFE_POST1_COEFF_SET4_FRAC_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET4TO7_FRAC_CDR_FFE_POST1_COEFF_SET4_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET4TO7_FRAC_CDR_FFE_POST1_COEFF_SET4_FRAC_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET4TO7_FRAC_CDR_FFE_POST1_COEFF_SET4_FRAC_BF_DEF (0x00000000)

///< set5 of cdr ffe post1 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET4TO7_FRAC_CDR_FFE_POST1_COEFF_SET5_FRAC_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET4TO7_FRAC_CDR_FFE_POST1_COEFF_SET5_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET4TO7_FRAC_CDR_FFE_POST1_COEFF_SET5_FRAC_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET4TO7_FRAC_CDR_FFE_POST1_COEFF_SET5_FRAC_BF_DEF (0x00000000)

///< set6 of cdr ffe post1 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET4TO7_FRAC_CDR_FFE_POST1_COEFF_SET6_FRAC_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET4TO7_FRAC_CDR_FFE_POST1_COEFF_SET6_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET4TO7_FRAC_CDR_FFE_POST1_COEFF_SET6_FRAC_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET4TO7_FRAC_CDR_FFE_POST1_COEFF_SET6_FRAC_BF_DEF (0x00000000)

///< set7 of cdr ffe post1 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET4TO7_FRAC_CDR_FFE_POST1_COEFF_SET7_FRAC_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET4TO7_FRAC_CDR_FFE_POST1_COEFF_SET7_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET4TO7_FRAC_CDR_FFE_POST1_COEFF_SET7_FRAC_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET4TO7_FRAC_CDR_FFE_POST1_COEFF_SET7_FRAC_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_POST1_SET8TO11_FRAC register description at address offset 0xa34
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_post1_set8to11_frac
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_POST1_COEFF_SET8_FRAC : 8;
    ///< set8 of cdr ffe post1 coeff frac
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_POST1_COEFF_SET9_FRAC : 8;
    ///< set9 of cdr ffe post1 coeff frac
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_POST1_COEFF_SET10_FRAC : 8;
    ///< set10 of cdr ffe post1 coeff frac
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_POST1_COEFF_SET11_FRAC : 8;
    ///< set11 of cdr ffe post1 coeff frac
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_post1_set8to11_frac_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET8TO11_FRAC_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET8TO11_FRAC_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET8TO11_FRAC_WR_MASK (0xffffffffU)


///< set8 of cdr ffe post1 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET8TO11_FRAC_CDR_FFE_POST1_COEFF_SET8_FRAC_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET8TO11_FRAC_CDR_FFE_POST1_COEFF_SET8_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET8TO11_FRAC_CDR_FFE_POST1_COEFF_SET8_FRAC_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET8TO11_FRAC_CDR_FFE_POST1_COEFF_SET8_FRAC_BF_DEF (0x00000000)

///< set9 of cdr ffe post1 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET8TO11_FRAC_CDR_FFE_POST1_COEFF_SET9_FRAC_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET8TO11_FRAC_CDR_FFE_POST1_COEFF_SET9_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET8TO11_FRAC_CDR_FFE_POST1_COEFF_SET9_FRAC_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET8TO11_FRAC_CDR_FFE_POST1_COEFF_SET9_FRAC_BF_DEF (0x00000000)

///< set10 of cdr ffe post1 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET8TO11_FRAC_CDR_FFE_POST1_COEFF_SET10_FRAC_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET8TO11_FRAC_CDR_FFE_POST1_COEFF_SET10_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET8TO11_FRAC_CDR_FFE_POST1_COEFF_SET10_FRAC_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET8TO11_FRAC_CDR_FFE_POST1_COEFF_SET10_FRAC_BF_DEF (0x00000000)

///< set11 of cdr ffe post1 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET8TO11_FRAC_CDR_FFE_POST1_COEFF_SET11_FRAC_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET8TO11_FRAC_CDR_FFE_POST1_COEFF_SET11_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET8TO11_FRAC_CDR_FFE_POST1_COEFF_SET11_FRAC_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET8TO11_FRAC_CDR_FFE_POST1_COEFF_SET11_FRAC_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_POST1_SET12TO15_FRAC register description at address offset 0xa38
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_post1_set12to15_frac
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_POST1_COEFF_SET12_FRAC : 8;
    ///< set12 of cdr ffe post1 coeff frac
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_POST1_COEFF_SET13_FRAC : 8;
    ///< set13 of cdr ffe post1 coeff frac
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_POST1_COEFF_SET14_FRAC : 8;
    ///< set14 of cdr ffe post1 coeff frac
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_POST1_COEFF_SET15_FRAC : 8;
    ///< set15 of cdr ffe post1 coeff frac
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_post1_set12to15_frac_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET12TO15_FRAC_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET12TO15_FRAC_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET12TO15_FRAC_WR_MASK (0xffffffffU)


///< set12 of cdr ffe post1 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET12TO15_FRAC_CDR_FFE_POST1_COEFF_SET12_FRAC_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET12TO15_FRAC_CDR_FFE_POST1_COEFF_SET12_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET12TO15_FRAC_CDR_FFE_POST1_COEFF_SET12_FRAC_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET12TO15_FRAC_CDR_FFE_POST1_COEFF_SET12_FRAC_BF_DEF (0x00000000)

///< set13 of cdr ffe post1 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET12TO15_FRAC_CDR_FFE_POST1_COEFF_SET13_FRAC_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET12TO15_FRAC_CDR_FFE_POST1_COEFF_SET13_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET12TO15_FRAC_CDR_FFE_POST1_COEFF_SET13_FRAC_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET12TO15_FRAC_CDR_FFE_POST1_COEFF_SET13_FRAC_BF_DEF (0x00000000)

///< set14 of cdr ffe post1 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET12TO15_FRAC_CDR_FFE_POST1_COEFF_SET14_FRAC_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET12TO15_FRAC_CDR_FFE_POST1_COEFF_SET14_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET12TO15_FRAC_CDR_FFE_POST1_COEFF_SET14_FRAC_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET12TO15_FRAC_CDR_FFE_POST1_COEFF_SET14_FRAC_BF_DEF (0x00000000)

///< set15 of cdr ffe post1 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET12TO15_FRAC_CDR_FFE_POST1_COEFF_SET15_FRAC_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET12TO15_FRAC_CDR_FFE_POST1_COEFF_SET15_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET12TO15_FRAC_CDR_FFE_POST1_COEFF_SET15_FRAC_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET12TO15_FRAC_CDR_FFE_POST1_COEFF_SET15_FRAC_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_ERR_LEVEL_FRAC_SET0_0 register description at address offset 0xa3c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_err_level_frac_set0_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET0_M3 : 8;
    ///< CDR FFE VREF set0 level m3 fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET0_M1 : 8;
    ///< CDR FFE VREF set0 level m1 fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET0_P1 : 8;
    ///< CDR FFE VREF set0 level p1 fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET0_P3 : 8;
    ///< CDR FFE VREF set0 level p3 fractional part
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_err_lvl_frac_set0_0_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET0_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET0_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET0_0_WR_MASK (0xffffffffU)


///< CDR FFE VREF set0 level m3 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET0_0_CDR_FFE_ERR_LVL_FRAC_SET0_M3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET0_0_CDR_FFE_ERR_LVL_FRAC_SET0_M3_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET0_0_CDR_FFE_ERR_LVL_FRAC_SET0_M3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET0_0_CDR_FFE_ERR_LVL_FRAC_SET0_M3_BF_DEF (0x00000000)

///< CDR FFE VREF set0 level m1 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET0_0_CDR_FFE_ERR_LVL_FRAC_SET0_M1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET0_0_CDR_FFE_ERR_LVL_FRAC_SET0_M1_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET0_0_CDR_FFE_ERR_LVL_FRAC_SET0_M1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET0_0_CDR_FFE_ERR_LVL_FRAC_SET0_M1_BF_DEF (0x00000000)

///< CDR FFE VREF set0 level p1 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET0_0_CDR_FFE_ERR_LVL_FRAC_SET0_P1_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET0_0_CDR_FFE_ERR_LVL_FRAC_SET0_P1_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET0_0_CDR_FFE_ERR_LVL_FRAC_SET0_P1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET0_0_CDR_FFE_ERR_LVL_FRAC_SET0_P1_BF_DEF (0x00000000)

///< CDR FFE VREF set0 level p3 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET0_0_CDR_FFE_ERR_LVL_FRAC_SET0_P3_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET0_0_CDR_FFE_ERR_LVL_FRAC_SET0_P3_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET0_0_CDR_FFE_ERR_LVL_FRAC_SET0_P3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET0_0_CDR_FFE_ERR_LVL_FRAC_SET0_P3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_ERR_LEVEL_FRAC_SET1_0 register description at address offset 0xa40
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_err_level_frac_set1_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET1_M3 : 8;
    ///< CDR FFE VREF set1 level m3 fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET1_M1 : 8;
    ///< CDR FFE VREF set1 level m1 fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET1_P1 : 8;
    ///< CDR FFE VREF set1 level p1 fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET1_P3 : 8;
    ///< CDR FFE VREF set1 level p3 fractional part
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_err_lvl_frac_set1_0_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET1_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET1_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET1_0_WR_MASK (0xffffffffU)


///< CDR FFE VREF set1 level m3 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET1_0_CDR_FFE_ERR_LVL_FRAC_SET1_M3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET1_0_CDR_FFE_ERR_LVL_FRAC_SET1_M3_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET1_0_CDR_FFE_ERR_LVL_FRAC_SET1_M3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET1_0_CDR_FFE_ERR_LVL_FRAC_SET1_M3_BF_DEF (0x00000000)

///< CDR FFE VREF set1 level m1 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET1_0_CDR_FFE_ERR_LVL_FRAC_SET1_M1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET1_0_CDR_FFE_ERR_LVL_FRAC_SET1_M1_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET1_0_CDR_FFE_ERR_LVL_FRAC_SET1_M1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET1_0_CDR_FFE_ERR_LVL_FRAC_SET1_M1_BF_DEF (0x00000000)

///< CDR FFE VREF set1 level p1 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET1_0_CDR_FFE_ERR_LVL_FRAC_SET1_P1_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET1_0_CDR_FFE_ERR_LVL_FRAC_SET1_P1_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET1_0_CDR_FFE_ERR_LVL_FRAC_SET1_P1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET1_0_CDR_FFE_ERR_LVL_FRAC_SET1_P1_BF_DEF (0x00000000)

///< CDR FFE VREF set1 level p3 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET1_0_CDR_FFE_ERR_LVL_FRAC_SET1_P3_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET1_0_CDR_FFE_ERR_LVL_FRAC_SET1_P3_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET1_0_CDR_FFE_ERR_LVL_FRAC_SET1_P3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET1_0_CDR_FFE_ERR_LVL_FRAC_SET1_P3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_ERR_LEVEL_FRAC_SET2_0 register description at address offset 0xa44
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_err_level_frac_set2_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET2_M3 : 8;
    ///< CDR FFE VREF set2 level m3 fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET2_M1 : 8;
    ///< CDR FFE VREF set2 level m1 fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET2_P1 : 8;
    ///< CDR FFE VREF set2 level p1 fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET2_P3 : 8;
    ///< CDR FFE VREF set2 level p3 fractional part
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_err_lvl_frac_set2_0_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET2_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET2_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET2_0_WR_MASK (0xffffffffU)


///< CDR FFE VREF set2 level m3 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET2_0_CDR_FFE_ERR_LVL_FRAC_SET2_M3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET2_0_CDR_FFE_ERR_LVL_FRAC_SET2_M3_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET2_0_CDR_FFE_ERR_LVL_FRAC_SET2_M3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET2_0_CDR_FFE_ERR_LVL_FRAC_SET2_M3_BF_DEF (0x00000000)

///< CDR FFE VREF set2 level m1 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET2_0_CDR_FFE_ERR_LVL_FRAC_SET2_M1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET2_0_CDR_FFE_ERR_LVL_FRAC_SET2_M1_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET2_0_CDR_FFE_ERR_LVL_FRAC_SET2_M1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET2_0_CDR_FFE_ERR_LVL_FRAC_SET2_M1_BF_DEF (0x00000000)

///< CDR FFE VREF set2 level p1 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET2_0_CDR_FFE_ERR_LVL_FRAC_SET2_P1_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET2_0_CDR_FFE_ERR_LVL_FRAC_SET2_P1_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET2_0_CDR_FFE_ERR_LVL_FRAC_SET2_P1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET2_0_CDR_FFE_ERR_LVL_FRAC_SET2_P1_BF_DEF (0x00000000)

///< CDR FFE VREF set2 level p3 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET2_0_CDR_FFE_ERR_LVL_FRAC_SET2_P3_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET2_0_CDR_FFE_ERR_LVL_FRAC_SET2_P3_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET2_0_CDR_FFE_ERR_LVL_FRAC_SET2_P3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET2_0_CDR_FFE_ERR_LVL_FRAC_SET2_P3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_ERR_LEVEL_FRAC_SET3_0 register description at address offset 0xa48
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_err_level_frac_set3_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET3_M3 : 8;
    ///< CDR FFE VREF set3 level m3 fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET3_M1 : 8;
    ///< CDR FFE VREF set3 level m1 fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET3_P1 : 8;
    ///< CDR FFE VREF set3 level p1 fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET3_P3 : 8;
    ///< CDR FFE VREF set3 level p3 fractional part
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_err_lvl_frac_set3_0_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET3_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET3_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET3_0_WR_MASK (0xffffffffU)


///< CDR FFE VREF set3 level m3 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET3_0_CDR_FFE_ERR_LVL_FRAC_SET3_M3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET3_0_CDR_FFE_ERR_LVL_FRAC_SET3_M3_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET3_0_CDR_FFE_ERR_LVL_FRAC_SET3_M3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET3_0_CDR_FFE_ERR_LVL_FRAC_SET3_M3_BF_DEF (0x00000000)

///< CDR FFE VREF set3 level m1 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET3_0_CDR_FFE_ERR_LVL_FRAC_SET3_M1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET3_0_CDR_FFE_ERR_LVL_FRAC_SET3_M1_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET3_0_CDR_FFE_ERR_LVL_FRAC_SET3_M1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET3_0_CDR_FFE_ERR_LVL_FRAC_SET3_M1_BF_DEF (0x00000000)

///< CDR FFE VREF set3 level p1 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET3_0_CDR_FFE_ERR_LVL_FRAC_SET3_P1_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET3_0_CDR_FFE_ERR_LVL_FRAC_SET3_P1_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET3_0_CDR_FFE_ERR_LVL_FRAC_SET3_P1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET3_0_CDR_FFE_ERR_LVL_FRAC_SET3_P1_BF_DEF (0x00000000)

///< CDR FFE VREF set3 level p3 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET3_0_CDR_FFE_ERR_LVL_FRAC_SET3_P3_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET3_0_CDR_FFE_ERR_LVL_FRAC_SET3_P3_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET3_0_CDR_FFE_ERR_LVL_FRAC_SET3_P3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET3_0_CDR_FFE_ERR_LVL_FRAC_SET3_P3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_ERR_LEVEL_FRAC_SET4_0 register description at address offset 0xa4c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_err_level_frac_set4_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET4_M3 : 8;
    ///< CDR FFE VREF set4 level m3 fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET4_M1 : 8;
    ///< CDR FFE VREF set4 level m1 fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET4_P1 : 8;
    ///< CDR FFE VREF set4 level p1 fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET4_P3 : 8;
    ///< CDR FFE VREF set4 level p3 fractional part
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_err_lvl_frac_set4_0_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET4_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET4_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET4_0_WR_MASK (0xffffffffU)


///< CDR FFE VREF set4 level m3 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET4_0_CDR_FFE_ERR_LVL_FRAC_SET4_M3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET4_0_CDR_FFE_ERR_LVL_FRAC_SET4_M3_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET4_0_CDR_FFE_ERR_LVL_FRAC_SET4_M3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET4_0_CDR_FFE_ERR_LVL_FRAC_SET4_M3_BF_DEF (0x00000000)

///< CDR FFE VREF set4 level m1 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET4_0_CDR_FFE_ERR_LVL_FRAC_SET4_M1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET4_0_CDR_FFE_ERR_LVL_FRAC_SET4_M1_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET4_0_CDR_FFE_ERR_LVL_FRAC_SET4_M1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET4_0_CDR_FFE_ERR_LVL_FRAC_SET4_M1_BF_DEF (0x00000000)

///< CDR FFE VREF set4 level p1 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET4_0_CDR_FFE_ERR_LVL_FRAC_SET4_P1_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET4_0_CDR_FFE_ERR_LVL_FRAC_SET4_P1_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET4_0_CDR_FFE_ERR_LVL_FRAC_SET4_P1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET4_0_CDR_FFE_ERR_LVL_FRAC_SET4_P1_BF_DEF (0x00000000)

///< CDR FFE VREF set4 level p3 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET4_0_CDR_FFE_ERR_LVL_FRAC_SET4_P3_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET4_0_CDR_FFE_ERR_LVL_FRAC_SET4_P3_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET4_0_CDR_FFE_ERR_LVL_FRAC_SET4_P3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET4_0_CDR_FFE_ERR_LVL_FRAC_SET4_P3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_ERR_LEVEL_FRAC_SET5_0 register description at address offset 0xa50
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_err_level_frac_set5_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET5_M3 : 8;
    ///< CDR FFE VREF set5 level m3 fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET5_M1 : 8;
    ///< CDR FFE VREF set5 level m1 fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET5_P1 : 8;
    ///< CDR FFE VREF set5 level p1 fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET5_P3 : 8;
    ///< CDR FFE VREF set5 level p3 fractional part
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_err_lvl_frac_set5_0_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET5_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET5_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET5_0_WR_MASK (0xffffffffU)


///< CDR FFE VREF set5 level m3 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET5_0_CDR_FFE_ERR_LVL_FRAC_SET5_M3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET5_0_CDR_FFE_ERR_LVL_FRAC_SET5_M3_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET5_0_CDR_FFE_ERR_LVL_FRAC_SET5_M3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET5_0_CDR_FFE_ERR_LVL_FRAC_SET5_M3_BF_DEF (0x00000000)

///< CDR FFE VREF set5 level m1 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET5_0_CDR_FFE_ERR_LVL_FRAC_SET5_M1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET5_0_CDR_FFE_ERR_LVL_FRAC_SET5_M1_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET5_0_CDR_FFE_ERR_LVL_FRAC_SET5_M1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET5_0_CDR_FFE_ERR_LVL_FRAC_SET5_M1_BF_DEF (0x00000000)

///< CDR FFE VREF set5 level p1 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET5_0_CDR_FFE_ERR_LVL_FRAC_SET5_P1_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET5_0_CDR_FFE_ERR_LVL_FRAC_SET5_P1_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET5_0_CDR_FFE_ERR_LVL_FRAC_SET5_P1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET5_0_CDR_FFE_ERR_LVL_FRAC_SET5_P1_BF_DEF (0x00000000)

///< CDR FFE VREF set5 level p3 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET5_0_CDR_FFE_ERR_LVL_FRAC_SET5_P3_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET5_0_CDR_FFE_ERR_LVL_FRAC_SET5_P3_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET5_0_CDR_FFE_ERR_LVL_FRAC_SET5_P3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET5_0_CDR_FFE_ERR_LVL_FRAC_SET5_P3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_ERR_LEVEL_FRAC_SET6_0 register description at address offset 0xa54
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_err_level_frac_set6_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET6_M3 : 8;
    ///< CDR FFE VREF set6 level m3 fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET6_M1 : 8;
    ///< CDR FFE VREF set6 level m1 fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET6_P1 : 8;
    ///< CDR FFE VREF set6 level p1 fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET6_P3 : 8;
    ///< CDR FFE VREF set6 level p3 fractional part
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_err_lvl_frac_set6_0_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET6_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET6_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET6_0_WR_MASK (0xffffffffU)


///< CDR FFE VREF set6 level m3 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET6_0_CDR_FFE_ERR_LVL_FRAC_SET6_M3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET6_0_CDR_FFE_ERR_LVL_FRAC_SET6_M3_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET6_0_CDR_FFE_ERR_LVL_FRAC_SET6_M3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET6_0_CDR_FFE_ERR_LVL_FRAC_SET6_M3_BF_DEF (0x00000000)

///< CDR FFE VREF set6 level m1 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET6_0_CDR_FFE_ERR_LVL_FRAC_SET6_M1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET6_0_CDR_FFE_ERR_LVL_FRAC_SET6_M1_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET6_0_CDR_FFE_ERR_LVL_FRAC_SET6_M1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET6_0_CDR_FFE_ERR_LVL_FRAC_SET6_M1_BF_DEF (0x00000000)

///< CDR FFE VREF set6 level p1 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET6_0_CDR_FFE_ERR_LVL_FRAC_SET6_P1_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET6_0_CDR_FFE_ERR_LVL_FRAC_SET6_P1_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET6_0_CDR_FFE_ERR_LVL_FRAC_SET6_P1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET6_0_CDR_FFE_ERR_LVL_FRAC_SET6_P1_BF_DEF (0x00000000)

///< CDR FFE VREF set6 level p3 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET6_0_CDR_FFE_ERR_LVL_FRAC_SET6_P3_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET6_0_CDR_FFE_ERR_LVL_FRAC_SET6_P3_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET6_0_CDR_FFE_ERR_LVL_FRAC_SET6_P3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET6_0_CDR_FFE_ERR_LVL_FRAC_SET6_P3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_ERR_LEVEL_FRAC_SET7_0 register description at address offset 0xa58
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_err_level_frac_set7_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET7_M3 : 8;
    ///< CDR FFE VREF set7 level m3 fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET7_M1 : 8;
    ///< CDR FFE VREF set7 level m1 fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET7_P1 : 8;
    ///< CDR FFE VREF set7 level p1 fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET7_P3 : 8;
    ///< CDR FFE VREF set7 level p3 fractional part
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_err_lvl_frac_set7_0_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET7_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET7_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET7_0_WR_MASK (0xffffffffU)


///< CDR FFE VREF set7 level m3 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET7_0_CDR_FFE_ERR_LVL_FRAC_SET7_M3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET7_0_CDR_FFE_ERR_LVL_FRAC_SET7_M3_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET7_0_CDR_FFE_ERR_LVL_FRAC_SET7_M3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET7_0_CDR_FFE_ERR_LVL_FRAC_SET7_M3_BF_DEF (0x00000000)

///< CDR FFE VREF set7 level m1 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET7_0_CDR_FFE_ERR_LVL_FRAC_SET7_M1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET7_0_CDR_FFE_ERR_LVL_FRAC_SET7_M1_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET7_0_CDR_FFE_ERR_LVL_FRAC_SET7_M1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET7_0_CDR_FFE_ERR_LVL_FRAC_SET7_M1_BF_DEF (0x00000000)

///< CDR FFE VREF set7 level p1 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET7_0_CDR_FFE_ERR_LVL_FRAC_SET7_P1_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET7_0_CDR_FFE_ERR_LVL_FRAC_SET7_P1_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET7_0_CDR_FFE_ERR_LVL_FRAC_SET7_P1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET7_0_CDR_FFE_ERR_LVL_FRAC_SET7_P1_BF_DEF (0x00000000)

///< CDR FFE VREF set7 level p3 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET7_0_CDR_FFE_ERR_LVL_FRAC_SET7_P3_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET7_0_CDR_FFE_ERR_LVL_FRAC_SET7_P3_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET7_0_CDR_FFE_ERR_LVL_FRAC_SET7_P3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET7_0_CDR_FFE_ERR_LVL_FRAC_SET7_P3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_ERR_LEVEL_FRAC_SET8_0 register description at address offset 0xa5c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_err_level_frac_set8_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET8_M3 : 8;
    ///< CDR FFE VREF set8 level m3 fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET8_M1 : 8;
    ///< CDR FFE VREF set8 level m1 fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET8_P1 : 8;
    ///< CDR FFE VREF set8 level p1 fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET8_P3 : 8;
    ///< CDR FFE VREF set8 level p3 fractional part
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_err_lvl_frac_set8_0_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET8_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET8_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET8_0_WR_MASK (0xffffffffU)


///< CDR FFE VREF set8 level m3 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET8_0_CDR_FFE_ERR_LVL_FRAC_SET8_M3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET8_0_CDR_FFE_ERR_LVL_FRAC_SET8_M3_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET8_0_CDR_FFE_ERR_LVL_FRAC_SET8_M3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET8_0_CDR_FFE_ERR_LVL_FRAC_SET8_M3_BF_DEF (0x00000000)

///< CDR FFE VREF set8 level m1 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET8_0_CDR_FFE_ERR_LVL_FRAC_SET8_M1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET8_0_CDR_FFE_ERR_LVL_FRAC_SET8_M1_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET8_0_CDR_FFE_ERR_LVL_FRAC_SET8_M1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET8_0_CDR_FFE_ERR_LVL_FRAC_SET8_M1_BF_DEF (0x00000000)

///< CDR FFE VREF set8 level p1 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET8_0_CDR_FFE_ERR_LVL_FRAC_SET8_P1_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET8_0_CDR_FFE_ERR_LVL_FRAC_SET8_P1_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET8_0_CDR_FFE_ERR_LVL_FRAC_SET8_P1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET8_0_CDR_FFE_ERR_LVL_FRAC_SET8_P1_BF_DEF (0x00000000)

///< CDR FFE VREF set8 level p3 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET8_0_CDR_FFE_ERR_LVL_FRAC_SET8_P3_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET8_0_CDR_FFE_ERR_LVL_FRAC_SET8_P3_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET8_0_CDR_FFE_ERR_LVL_FRAC_SET8_P3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET8_0_CDR_FFE_ERR_LVL_FRAC_SET8_P3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_ERR_LEVEL_FRAC_SET9_0 register description at address offset 0xa60
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_err_level_frac_set9_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET9_M3 : 8;
    ///< CDR FFE VREF set9 level m3 fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET9_M1 : 8;
    ///< CDR FFE VREF set9 level m1 fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET9_P1 : 8;
    ///< CDR FFE VREF set9 level p1 fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET9_P3 : 8;
    ///< CDR FFE VREF set9 level p3 fractional part
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_err_lvl_frac_set9_0_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET9_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET9_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET9_0_WR_MASK (0xffffffffU)


///< CDR FFE VREF set9 level m3 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET9_0_CDR_FFE_ERR_LVL_FRAC_SET9_M3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET9_0_CDR_FFE_ERR_LVL_FRAC_SET9_M3_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET9_0_CDR_FFE_ERR_LVL_FRAC_SET9_M3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET9_0_CDR_FFE_ERR_LVL_FRAC_SET9_M3_BF_DEF (0x00000000)

///< CDR FFE VREF set9 level m1 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET9_0_CDR_FFE_ERR_LVL_FRAC_SET9_M1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET9_0_CDR_FFE_ERR_LVL_FRAC_SET9_M1_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET9_0_CDR_FFE_ERR_LVL_FRAC_SET9_M1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET9_0_CDR_FFE_ERR_LVL_FRAC_SET9_M1_BF_DEF (0x00000000)

///< CDR FFE VREF set9 level p1 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET9_0_CDR_FFE_ERR_LVL_FRAC_SET9_P1_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET9_0_CDR_FFE_ERR_LVL_FRAC_SET9_P1_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET9_0_CDR_FFE_ERR_LVL_FRAC_SET9_P1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET9_0_CDR_FFE_ERR_LVL_FRAC_SET9_P1_BF_DEF (0x00000000)

///< CDR FFE VREF set9 level p3 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET9_0_CDR_FFE_ERR_LVL_FRAC_SET9_P3_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET9_0_CDR_FFE_ERR_LVL_FRAC_SET9_P3_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET9_0_CDR_FFE_ERR_LVL_FRAC_SET9_P3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET9_0_CDR_FFE_ERR_LVL_FRAC_SET9_P3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_ERR_LEVEL_FRAC_SET10_0 register description at address offset 0xa64
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_err_level_frac_set10_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET10_M3 : 8;
    ///< CDR FFE VREF set10 level m3 fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET10_M1 : 8;
    ///< CDR FFE VREF set10 level m1 fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET10_P1 : 8;
    ///< CDR FFE VREF set10 level p1 fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET10_P3 : 8;
    ///< CDR FFE VREF set10 level p3 fractional part
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_err_lvl_frac_set10_0_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET10_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET10_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET10_0_WR_MASK (0xffffffffU)


///< CDR FFE VREF set10 level m3 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET10_0_CDR_FFE_ERR_LVL_FRAC_SET10_M3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET10_0_CDR_FFE_ERR_LVL_FRAC_SET10_M3_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET10_0_CDR_FFE_ERR_LVL_FRAC_SET10_M3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET10_0_CDR_FFE_ERR_LVL_FRAC_SET10_M3_BF_DEF (0x00000000)

///< CDR FFE VREF set10 level m1 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET10_0_CDR_FFE_ERR_LVL_FRAC_SET10_M1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET10_0_CDR_FFE_ERR_LVL_FRAC_SET10_M1_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET10_0_CDR_FFE_ERR_LVL_FRAC_SET10_M1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET10_0_CDR_FFE_ERR_LVL_FRAC_SET10_M1_BF_DEF (0x00000000)

///< CDR FFE VREF set10 level p1 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET10_0_CDR_FFE_ERR_LVL_FRAC_SET10_P1_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET10_0_CDR_FFE_ERR_LVL_FRAC_SET10_P1_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET10_0_CDR_FFE_ERR_LVL_FRAC_SET10_P1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET10_0_CDR_FFE_ERR_LVL_FRAC_SET10_P1_BF_DEF (0x00000000)

///< CDR FFE VREF set10 level p3 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET10_0_CDR_FFE_ERR_LVL_FRAC_SET10_P3_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET10_0_CDR_FFE_ERR_LVL_FRAC_SET10_P3_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET10_0_CDR_FFE_ERR_LVL_FRAC_SET10_P3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET10_0_CDR_FFE_ERR_LVL_FRAC_SET10_P3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_ERR_LEVEL_FRAC_SET11_0 register description at address offset 0xa68
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_err_level_frac_set11_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET11_M3 : 8;
    ///< CDR FFE VREF set11 level m3 fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET11_M1 : 8;
    ///< CDR FFE VREF set11 level m1 fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET11_P1 : 8;
    ///< CDR FFE VREF set11 level p1 fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET11_P3 : 8;
    ///< CDR FFE VREF set11 level p3 fractional part
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_err_lvl_frac_set11_0_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET11_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET11_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET11_0_WR_MASK (0xffffffffU)


///< CDR FFE VREF set11 level m3 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET11_0_CDR_FFE_ERR_LVL_FRAC_SET11_M3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET11_0_CDR_FFE_ERR_LVL_FRAC_SET11_M3_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET11_0_CDR_FFE_ERR_LVL_FRAC_SET11_M3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET11_0_CDR_FFE_ERR_LVL_FRAC_SET11_M3_BF_DEF (0x00000000)

///< CDR FFE VREF set11 level m1 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET11_0_CDR_FFE_ERR_LVL_FRAC_SET11_M1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET11_0_CDR_FFE_ERR_LVL_FRAC_SET11_M1_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET11_0_CDR_FFE_ERR_LVL_FRAC_SET11_M1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET11_0_CDR_FFE_ERR_LVL_FRAC_SET11_M1_BF_DEF (0x00000000)

///< CDR FFE VREF set11 level p1 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET11_0_CDR_FFE_ERR_LVL_FRAC_SET11_P1_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET11_0_CDR_FFE_ERR_LVL_FRAC_SET11_P1_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET11_0_CDR_FFE_ERR_LVL_FRAC_SET11_P1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET11_0_CDR_FFE_ERR_LVL_FRAC_SET11_P1_BF_DEF (0x00000000)

///< CDR FFE VREF set11 level p3 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET11_0_CDR_FFE_ERR_LVL_FRAC_SET11_P3_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET11_0_CDR_FFE_ERR_LVL_FRAC_SET11_P3_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET11_0_CDR_FFE_ERR_LVL_FRAC_SET11_P3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET11_0_CDR_FFE_ERR_LVL_FRAC_SET11_P3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_ERR_LEVEL_FRAC_SET12_0 register description at address offset 0xa6c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_err_level_frac_set12_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET12_M3 : 8;
    ///< CDR FFE VREF set12 level m3 fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET12_M1 : 8;
    ///< CDR FFE VREF set12 level m1 fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET12_P1 : 8;
    ///< CDR FFE VREF set12 level p1 fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET12_P3 : 8;
    ///< CDR FFE VREF set12 level p3 fractional part
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_err_lvl_frac_set12_0_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET12_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET12_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET12_0_WR_MASK (0xffffffffU)


///< CDR FFE VREF set12 level m3 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET12_0_CDR_FFE_ERR_LVL_FRAC_SET12_M3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET12_0_CDR_FFE_ERR_LVL_FRAC_SET12_M3_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET12_0_CDR_FFE_ERR_LVL_FRAC_SET12_M3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET12_0_CDR_FFE_ERR_LVL_FRAC_SET12_M3_BF_DEF (0x00000000)

///< CDR FFE VREF set12 level m1 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET12_0_CDR_FFE_ERR_LVL_FRAC_SET12_M1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET12_0_CDR_FFE_ERR_LVL_FRAC_SET12_M1_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET12_0_CDR_FFE_ERR_LVL_FRAC_SET12_M1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET12_0_CDR_FFE_ERR_LVL_FRAC_SET12_M1_BF_DEF (0x00000000)

///< CDR FFE VREF set12 level p1 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET12_0_CDR_FFE_ERR_LVL_FRAC_SET12_P1_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET12_0_CDR_FFE_ERR_LVL_FRAC_SET12_P1_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET12_0_CDR_FFE_ERR_LVL_FRAC_SET12_P1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET12_0_CDR_FFE_ERR_LVL_FRAC_SET12_P1_BF_DEF (0x00000000)

///< CDR FFE VREF set12 level p3 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET12_0_CDR_FFE_ERR_LVL_FRAC_SET12_P3_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET12_0_CDR_FFE_ERR_LVL_FRAC_SET12_P3_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET12_0_CDR_FFE_ERR_LVL_FRAC_SET12_P3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET12_0_CDR_FFE_ERR_LVL_FRAC_SET12_P3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_ERR_LEVEL_FRAC_SET13_0 register description at address offset 0xa70
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_err_level_frac_set13_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET13_M3 : 8;
    ///< CDR FFE VREF set13 level m3 fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET13_M1 : 8;
    ///< CDR FFE VREF set13 level m1 fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET13_P1 : 8;
    ///< CDR FFE VREF set13 level p1 fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET13_P3 : 8;
    ///< CDR FFE VREF set13 level p3 fractional part
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_err_lvl_frac_set13_0_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET13_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET13_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET13_0_WR_MASK (0xffffffffU)


///< CDR FFE VREF set13 level m3 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET13_0_CDR_FFE_ERR_LVL_FRAC_SET13_M3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET13_0_CDR_FFE_ERR_LVL_FRAC_SET13_M3_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET13_0_CDR_FFE_ERR_LVL_FRAC_SET13_M3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET13_0_CDR_FFE_ERR_LVL_FRAC_SET13_M3_BF_DEF (0x00000000)

///< CDR FFE VREF set13 level m1 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET13_0_CDR_FFE_ERR_LVL_FRAC_SET13_M1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET13_0_CDR_FFE_ERR_LVL_FRAC_SET13_M1_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET13_0_CDR_FFE_ERR_LVL_FRAC_SET13_M1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET13_0_CDR_FFE_ERR_LVL_FRAC_SET13_M1_BF_DEF (0x00000000)

///< CDR FFE VREF set13 level p1 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET13_0_CDR_FFE_ERR_LVL_FRAC_SET13_P1_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET13_0_CDR_FFE_ERR_LVL_FRAC_SET13_P1_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET13_0_CDR_FFE_ERR_LVL_FRAC_SET13_P1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET13_0_CDR_FFE_ERR_LVL_FRAC_SET13_P1_BF_DEF (0x00000000)

///< CDR FFE VREF set13 level p3 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET13_0_CDR_FFE_ERR_LVL_FRAC_SET13_P3_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET13_0_CDR_FFE_ERR_LVL_FRAC_SET13_P3_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET13_0_CDR_FFE_ERR_LVL_FRAC_SET13_P3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET13_0_CDR_FFE_ERR_LVL_FRAC_SET13_P3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_ERR_LEVEL_FRAC_SET14_0 register description at address offset 0xa74
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_err_level_frac_set14_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET14_M3 : 8;
    ///< CDR FFE VREF set14 level m3 fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET14_M1 : 8;
    ///< CDR FFE VREF set14 level m1 fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET14_P1 : 8;
    ///< CDR FFE VREF set14 level p1 fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET14_P3 : 8;
    ///< CDR FFE VREF set14 level p3 fractional part
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_err_lvl_frac_set14_0_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET14_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET14_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET14_0_WR_MASK (0xffffffffU)


///< CDR FFE VREF set14 level m3 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET14_0_CDR_FFE_ERR_LVL_FRAC_SET14_M3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET14_0_CDR_FFE_ERR_LVL_FRAC_SET14_M3_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET14_0_CDR_FFE_ERR_LVL_FRAC_SET14_M3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET14_0_CDR_FFE_ERR_LVL_FRAC_SET14_M3_BF_DEF (0x00000000)

///< CDR FFE VREF set14 level m1 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET14_0_CDR_FFE_ERR_LVL_FRAC_SET14_M1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET14_0_CDR_FFE_ERR_LVL_FRAC_SET14_M1_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET14_0_CDR_FFE_ERR_LVL_FRAC_SET14_M1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET14_0_CDR_FFE_ERR_LVL_FRAC_SET14_M1_BF_DEF (0x00000000)

///< CDR FFE VREF set14 level p1 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET14_0_CDR_FFE_ERR_LVL_FRAC_SET14_P1_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET14_0_CDR_FFE_ERR_LVL_FRAC_SET14_P1_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET14_0_CDR_FFE_ERR_LVL_FRAC_SET14_P1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET14_0_CDR_FFE_ERR_LVL_FRAC_SET14_P1_BF_DEF (0x00000000)

///< CDR FFE VREF set14 level p3 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET14_0_CDR_FFE_ERR_LVL_FRAC_SET14_P3_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET14_0_CDR_FFE_ERR_LVL_FRAC_SET14_P3_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET14_0_CDR_FFE_ERR_LVL_FRAC_SET14_P3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET14_0_CDR_FFE_ERR_LVL_FRAC_SET14_P3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_ERR_LEVEL_FRAC_SET15_0 register description at address offset 0xa78
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_err_level_frac_set15_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET15_M3 : 8;
    ///< CDR FFE VREF set15 level m3 fractional part
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET15_M1 : 8;
    ///< CDR FFE VREF set15 level m1 fractional part
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET15_P1 : 8;
    ///< CDR FFE VREF set15 level p1 fractional part
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_ERR_LEVEL_FRAC_SET15_P3 : 8;
    ///< CDR FFE VREF set15 level p3 fractional part
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_err_lvl_frac_set15_0_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET15_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET15_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET15_0_WR_MASK (0xffffffffU)


///< CDR FFE VREF set15 level m3 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET15_0_CDR_FFE_ERR_LVL_FRAC_SET15_M3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET15_0_CDR_FFE_ERR_LVL_FRAC_SET15_M3_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET15_0_CDR_FFE_ERR_LVL_FRAC_SET15_M3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET15_0_CDR_FFE_ERR_LVL_FRAC_SET15_M3_BF_DEF (0x00000000)

///< CDR FFE VREF set15 level m1 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET15_0_CDR_FFE_ERR_LVL_FRAC_SET15_M1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET15_0_CDR_FFE_ERR_LVL_FRAC_SET15_M1_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET15_0_CDR_FFE_ERR_LVL_FRAC_SET15_M1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET15_0_CDR_FFE_ERR_LVL_FRAC_SET15_M1_BF_DEF (0x00000000)

///< CDR FFE VREF set15 level p1 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET15_0_CDR_FFE_ERR_LVL_FRAC_SET15_P1_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET15_0_CDR_FFE_ERR_LVL_FRAC_SET15_P1_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET15_0_CDR_FFE_ERR_LVL_FRAC_SET15_P1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET15_0_CDR_FFE_ERR_LVL_FRAC_SET15_P1_BF_DEF (0x00000000)

///< CDR FFE VREF set15 level p3 fractional part
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET15_0_CDR_FFE_ERR_LVL_FRAC_SET15_P3_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET15_0_CDR_FFE_ERR_LVL_FRAC_SET15_P3_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET15_0_CDR_FFE_ERR_LVL_FRAC_SET15_P3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET15_0_CDR_FFE_ERR_LVL_FRAC_SET15_P3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_CONTROL_3 register description at address offset 0xa7c
  *
  * Register default value:        0x0000C03F
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_control_3
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_TAP_MAX_W1 : 8;
    ///< update accum saturation at max width
    ///< AccessType="RW" BitOffset="0" ResetValue="0x3F"
    uint32_t CDR_FFE_TAP_MIN_W1 : 8;
    ///< update accum saturation at min width
    ///< AccessType="RW" BitOffset="8" ResetValue="0xC0"
    uint32_t CDR_FFE_INIT_VAL_W1 : 8;
    ///< Initial value for the CDR FFE Coefficient
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_ctrl_3_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_CTRL_3_DEFAULT (0x0000c03fU)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_3_RD_MASK (0x00ffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_3_WR_MASK (0x00ffffffU)


///< update accum saturation at max width
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_3_CDR_FFE_TAP_MAX_W1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_3_CDR_FFE_TAP_MAX_W1_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_3_CDR_FFE_TAP_MAX_W1_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_3_CDR_FFE_TAP_MAX_W1_BF_DEF (0x0000003F)

///< update accum saturation at min width
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_3_CDR_FFE_TAP_MIN_W1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_3_CDR_FFE_TAP_MIN_W1_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_3_CDR_FFE_TAP_MIN_W1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_3_CDR_FFE_TAP_MIN_W1_BF_DEF (0x0000C000)

///< Initial value for the CDR FFE Coefficient
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_3_CDR_FFE_INIT_VAL_W1_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_3_CDR_FFE_INIT_VAL_W1_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_3_CDR_FFE_INIT_VAL_W1_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_3_CDR_FFE_INIT_VAL_W1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_PRE3_SET0TO3 register description at address offset 0xa80
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_pre3_set0to3
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_PRE3_COEFF_SET0 : 6;
    ///< set0 of cdr ffe pre3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t CDR_FFE_PRE3_COEFF_SET1 : 6;
    ///< set1 of cdr ffe pre3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t CDR_FFE_PRE3_COEFF_SET2 : 6;
    ///< set2 of cdr ffe pre3 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t CDR_FFE_PRE3_COEFF_SET3 : 6;
    ///< set3 of cdr ffe pre3 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_pre3_set0to3_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET0TO3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET0TO3_RD_MASK (0x3f3f3f3fU)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET0TO3_WR_MASK (0x3f3f3f3fU)


///< set0 of cdr ffe pre3 coeff
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET0TO3_CDR_FFE_PRE3_COEFF_SET0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET0TO3_CDR_FFE_PRE3_COEFF_SET0_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET0TO3_CDR_FFE_PRE3_COEFF_SET0_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET0TO3_CDR_FFE_PRE3_COEFF_SET0_BF_DEF (0x00000000)

///< set1 of cdr ffe pre3 coeff
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET0TO3_CDR_FFE_PRE3_COEFF_SET1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET0TO3_CDR_FFE_PRE3_COEFF_SET1_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET0TO3_CDR_FFE_PRE3_COEFF_SET1_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET0TO3_CDR_FFE_PRE3_COEFF_SET1_BF_DEF (0x00000000)

///< set2 of cdr ffe pre3 coeff
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET0TO3_CDR_FFE_PRE3_COEFF_SET2_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET0TO3_CDR_FFE_PRE3_COEFF_SET2_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET0TO3_CDR_FFE_PRE3_COEFF_SET2_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET0TO3_CDR_FFE_PRE3_COEFF_SET2_BF_DEF (0x00000000)

///< set3 of cdr ffe pre3 coeff
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET0TO3_CDR_FFE_PRE3_COEFF_SET3_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET0TO3_CDR_FFE_PRE3_COEFF_SET3_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET0TO3_CDR_FFE_PRE3_COEFF_SET3_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET0TO3_CDR_FFE_PRE3_COEFF_SET3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_PRE3_SET4TO7 register description at address offset 0xa84
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_pre3_set4to7
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_PRE3_COEFF_SET4 : 6;
    ///< set4 of cdr ffe pre3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t CDR_FFE_PRE3_COEFF_SET5 : 6;
    ///< set5 of cdr ffe pre3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t CDR_FFE_PRE3_COEFF_SET6 : 6;
    ///< set6 of cdr ffe pre3 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t CDR_FFE_PRE3_COEFF_SET7 : 6;
    ///< set7 of cdr ffe pre3 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_pre3_set4to7_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET4TO7_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET4TO7_RD_MASK (0x3f3f3f3fU)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET4TO7_WR_MASK (0x3f3f3f3fU)


///< set4 of cdr ffe pre3 coeff
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET4TO7_CDR_FFE_PRE3_COEFF_SET4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET4TO7_CDR_FFE_PRE3_COEFF_SET4_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET4TO7_CDR_FFE_PRE3_COEFF_SET4_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET4TO7_CDR_FFE_PRE3_COEFF_SET4_BF_DEF (0x00000000)

///< set5 of cdr ffe pre3 coeff
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET4TO7_CDR_FFE_PRE3_COEFF_SET5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET4TO7_CDR_FFE_PRE3_COEFF_SET5_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET4TO7_CDR_FFE_PRE3_COEFF_SET5_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET4TO7_CDR_FFE_PRE3_COEFF_SET5_BF_DEF (0x00000000)

///< set6 of cdr ffe pre3 coeff
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET4TO7_CDR_FFE_PRE3_COEFF_SET6_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET4TO7_CDR_FFE_PRE3_COEFF_SET6_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET4TO7_CDR_FFE_PRE3_COEFF_SET6_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET4TO7_CDR_FFE_PRE3_COEFF_SET6_BF_DEF (0x00000000)

///< set7 of cdr ffe pre3 coeff
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET4TO7_CDR_FFE_PRE3_COEFF_SET7_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET4TO7_CDR_FFE_PRE3_COEFF_SET7_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET4TO7_CDR_FFE_PRE3_COEFF_SET7_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET4TO7_CDR_FFE_PRE3_COEFF_SET7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_PRE3_SET8TO11 register description at address offset 0xa88
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_pre3_set8to11
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_PRE3_COEFF_SET8 : 6;
    ///< set8 of cdr ffe pre3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t CDR_FFE_PRE3_COEFF_SET9 : 6;
    ///< set9 of cdr ffe pre3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t CDR_FFE_PRE3_COEFF_SET10 : 6;
    ///< set10 of cdr ffe pre3 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t CDR_FFE_PRE3_COEFF_SET11 : 6;
    ///< set11 of cdr ffe pre3 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_pre3_set8to11_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET8TO11_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET8TO11_RD_MASK (0x3f3f3f3fU)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET8TO11_WR_MASK (0x3f3f3f3fU)


///< set8 of cdr ffe pre3 coeff
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET8TO11_CDR_FFE_PRE3_COEFF_SET8_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET8TO11_CDR_FFE_PRE3_COEFF_SET8_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET8TO11_CDR_FFE_PRE3_COEFF_SET8_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET8TO11_CDR_FFE_PRE3_COEFF_SET8_BF_DEF (0x00000000)

///< set9 of cdr ffe pre3 coeff
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET8TO11_CDR_FFE_PRE3_COEFF_SET9_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET8TO11_CDR_FFE_PRE3_COEFF_SET9_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET8TO11_CDR_FFE_PRE3_COEFF_SET9_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET8TO11_CDR_FFE_PRE3_COEFF_SET9_BF_DEF (0x00000000)

///< set10 of cdr ffe pre3 coeff
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET8TO11_CDR_FFE_PRE3_COEFF_SET10_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET8TO11_CDR_FFE_PRE3_COEFF_SET10_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET8TO11_CDR_FFE_PRE3_COEFF_SET10_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET8TO11_CDR_FFE_PRE3_COEFF_SET10_BF_DEF (0x00000000)

///< set11 of cdr ffe pre3 coeff
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET8TO11_CDR_FFE_PRE3_COEFF_SET11_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET8TO11_CDR_FFE_PRE3_COEFF_SET11_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET8TO11_CDR_FFE_PRE3_COEFF_SET11_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET8TO11_CDR_FFE_PRE3_COEFF_SET11_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_PRE3_SET12TO15 register description at address offset 0xa8c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_pre3_set12to15
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_PRE3_COEFF_SET12 : 6;
    ///< set12 of cdr ffe pre3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t CDR_FFE_PRE3_COEFF_SET13 : 6;
    ///< set13 of cdr ffe pre3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t CDR_FFE_PRE3_COEFF_SET14 : 6;
    ///< set14 of cdr ffe pre3 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t CDR_FFE_PRE3_COEFF_SET15 : 6;
    ///< set15 of cdr ffe pre3 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_pre3_set12to15_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET12TO15_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET12TO15_RD_MASK (0x3f3f3f3fU)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET12TO15_WR_MASK (0x3f3f3f3fU)


///< set12 of cdr ffe pre3 coeff
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET12TO15_CDR_FFE_PRE3_COEFF_SET12_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET12TO15_CDR_FFE_PRE3_COEFF_SET12_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET12TO15_CDR_FFE_PRE3_COEFF_SET12_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET12TO15_CDR_FFE_PRE3_COEFF_SET12_BF_DEF (0x00000000)

///< set13 of cdr ffe pre3 coeff
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET12TO15_CDR_FFE_PRE3_COEFF_SET13_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET12TO15_CDR_FFE_PRE3_COEFF_SET13_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET12TO15_CDR_FFE_PRE3_COEFF_SET13_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET12TO15_CDR_FFE_PRE3_COEFF_SET13_BF_DEF (0x00000000)

///< set14 of cdr ffe pre3 coeff
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET12TO15_CDR_FFE_PRE3_COEFF_SET14_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET12TO15_CDR_FFE_PRE3_COEFF_SET14_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET12TO15_CDR_FFE_PRE3_COEFF_SET14_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET12TO15_CDR_FFE_PRE3_COEFF_SET14_BF_DEF (0x00000000)

///< set15 of cdr ffe pre3 coeff
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET12TO15_CDR_FFE_PRE3_COEFF_SET15_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET12TO15_CDR_FFE_PRE3_COEFF_SET15_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET12TO15_CDR_FFE_PRE3_COEFF_SET15_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET12TO15_CDR_FFE_PRE3_COEFF_SET15_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_PRE2_SET0TO3 register description at address offset 0xa90
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_pre2_set0to3
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_PRE2_COEFF_SET0 : 6;
    ///< set0 of cdr ffe pre2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t CDR_FFE_PRE2_COEFF_SET1 : 6;
    ///< set1 of cdr ffe pre2 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t CDR_FFE_PRE2_COEFF_SET2 : 6;
    ///< set2 of cdr ffe pre2 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t CDR_FFE_PRE2_COEFF_SET3 : 6;
    ///< set3 of cdr ffe pre2 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_pre2_set0to3_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET0TO3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET0TO3_RD_MASK (0x3f3f3f3fU)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET0TO3_WR_MASK (0x3f3f3f3fU)


///< set0 of cdr ffe pre2 coeff
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET0TO3_CDR_FFE_PRE2_COEFF_SET0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET0TO3_CDR_FFE_PRE2_COEFF_SET0_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET0TO3_CDR_FFE_PRE2_COEFF_SET0_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET0TO3_CDR_FFE_PRE2_COEFF_SET0_BF_DEF (0x00000000)

///< set1 of cdr ffe pre2 coeff
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET0TO3_CDR_FFE_PRE2_COEFF_SET1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET0TO3_CDR_FFE_PRE2_COEFF_SET1_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET0TO3_CDR_FFE_PRE2_COEFF_SET1_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET0TO3_CDR_FFE_PRE2_COEFF_SET1_BF_DEF (0x00000000)

///< set2 of cdr ffe pre2 coeff
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET0TO3_CDR_FFE_PRE2_COEFF_SET2_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET0TO3_CDR_FFE_PRE2_COEFF_SET2_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET0TO3_CDR_FFE_PRE2_COEFF_SET2_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET0TO3_CDR_FFE_PRE2_COEFF_SET2_BF_DEF (0x00000000)

///< set3 of cdr ffe pre2 coeff
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET0TO3_CDR_FFE_PRE2_COEFF_SET3_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET0TO3_CDR_FFE_PRE2_COEFF_SET3_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET0TO3_CDR_FFE_PRE2_COEFF_SET3_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET0TO3_CDR_FFE_PRE2_COEFF_SET3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_PRE2_SET4TO7 register description at address offset 0xa94
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_pre2_set4to7
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_PRE2_COEFF_SET4 : 6;
    ///< set4 of cdr ffe pre2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t CDR_FFE_PRE2_COEFF_SET5 : 6;
    ///< set5 of cdr ffe pre2 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t CDR_FFE_PRE2_COEFF_SET6 : 6;
    ///< set6 of cdr ffe pre2 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t CDR_FFE_PRE2_COEFF_SET7 : 6;
    ///< set7 of cdr ffe pre2 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_pre2_set4to7_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET4TO7_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET4TO7_RD_MASK (0x3f3f3f3fU)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET4TO7_WR_MASK (0x3f3f3f3fU)


///< set4 of cdr ffe pre2 coeff
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET4TO7_CDR_FFE_PRE2_COEFF_SET4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET4TO7_CDR_FFE_PRE2_COEFF_SET4_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET4TO7_CDR_FFE_PRE2_COEFF_SET4_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET4TO7_CDR_FFE_PRE2_COEFF_SET4_BF_DEF (0x00000000)

///< set5 of cdr ffe pre2 coeff
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET4TO7_CDR_FFE_PRE2_COEFF_SET5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET4TO7_CDR_FFE_PRE2_COEFF_SET5_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET4TO7_CDR_FFE_PRE2_COEFF_SET5_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET4TO7_CDR_FFE_PRE2_COEFF_SET5_BF_DEF (0x00000000)

///< set6 of cdr ffe pre2 coeff
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET4TO7_CDR_FFE_PRE2_COEFF_SET6_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET4TO7_CDR_FFE_PRE2_COEFF_SET6_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET4TO7_CDR_FFE_PRE2_COEFF_SET6_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET4TO7_CDR_FFE_PRE2_COEFF_SET6_BF_DEF (0x00000000)

///< set7 of cdr ffe pre2 coeff
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET4TO7_CDR_FFE_PRE2_COEFF_SET7_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET4TO7_CDR_FFE_PRE2_COEFF_SET7_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET4TO7_CDR_FFE_PRE2_COEFF_SET7_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET4TO7_CDR_FFE_PRE2_COEFF_SET7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_PRE2_SET8TO11 register description at address offset 0xa98
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_pre2_set8to11
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_PRE2_COEFF_SET8 : 6;
    ///< set8 of cdr ffe pre2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t CDR_FFE_PRE2_COEFF_SET9 : 6;
    ///< set9 of cdr ffe pre2 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t CDR_FFE_PRE2_COEFF_SET10 : 6;
    ///< set10 of cdr ffe pre2 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t CDR_FFE_PRE2_COEFF_SET11 : 6;
    ///< set11 of cdr ffe pre2 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_pre2_set8to11_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET8TO11_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET8TO11_RD_MASK (0x3f3f3f3fU)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET8TO11_WR_MASK (0x3f3f3f3fU)


///< set8 of cdr ffe pre2 coeff
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET8TO11_CDR_FFE_PRE2_COEFF_SET8_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET8TO11_CDR_FFE_PRE2_COEFF_SET8_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET8TO11_CDR_FFE_PRE2_COEFF_SET8_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET8TO11_CDR_FFE_PRE2_COEFF_SET8_BF_DEF (0x00000000)

///< set9 of cdr ffe pre2 coeff
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET8TO11_CDR_FFE_PRE2_COEFF_SET9_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET8TO11_CDR_FFE_PRE2_COEFF_SET9_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET8TO11_CDR_FFE_PRE2_COEFF_SET9_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET8TO11_CDR_FFE_PRE2_COEFF_SET9_BF_DEF (0x00000000)

///< set10 of cdr ffe pre2 coeff
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET8TO11_CDR_FFE_PRE2_COEFF_SET10_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET8TO11_CDR_FFE_PRE2_COEFF_SET10_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET8TO11_CDR_FFE_PRE2_COEFF_SET10_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET8TO11_CDR_FFE_PRE2_COEFF_SET10_BF_DEF (0x00000000)

///< set11 of cdr ffe pre2 coeff
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET8TO11_CDR_FFE_PRE2_COEFF_SET11_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET8TO11_CDR_FFE_PRE2_COEFF_SET11_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET8TO11_CDR_FFE_PRE2_COEFF_SET11_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET8TO11_CDR_FFE_PRE2_COEFF_SET11_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_PRE2_SET12TO15 register description at address offset 0xa9c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_pre2_set12to15
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_PRE2_COEFF_SET12 : 6;
    ///< set12 of cdr ffe pre2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t CDR_FFE_PRE2_COEFF_SET13 : 6;
    ///< set13 of cdr ffe pre2 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t CDR_FFE_PRE2_COEFF_SET14 : 6;
    ///< set14 of cdr ffe pre2 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t CDR_FFE_PRE2_COEFF_SET15 : 6;
    ///< set15 of cdr ffe pre2 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_pre2_set12to15_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET12TO15_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET12TO15_RD_MASK (0x3f3f3f3fU)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET12TO15_WR_MASK (0x3f3f3f3fU)


///< set12 of cdr ffe pre2 coeff
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET12TO15_CDR_FFE_PRE2_COEFF_SET12_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET12TO15_CDR_FFE_PRE2_COEFF_SET12_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET12TO15_CDR_FFE_PRE2_COEFF_SET12_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET12TO15_CDR_FFE_PRE2_COEFF_SET12_BF_DEF (0x00000000)

///< set13 of cdr ffe pre2 coeff
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET12TO15_CDR_FFE_PRE2_COEFF_SET13_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET12TO15_CDR_FFE_PRE2_COEFF_SET13_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET12TO15_CDR_FFE_PRE2_COEFF_SET13_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET12TO15_CDR_FFE_PRE2_COEFF_SET13_BF_DEF (0x00000000)

///< set14 of cdr ffe pre2 coeff
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET12TO15_CDR_FFE_PRE2_COEFF_SET14_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET12TO15_CDR_FFE_PRE2_COEFF_SET14_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET12TO15_CDR_FFE_PRE2_COEFF_SET14_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET12TO15_CDR_FFE_PRE2_COEFF_SET14_BF_DEF (0x00000000)

///< set15 of cdr ffe pre2 coeff
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET12TO15_CDR_FFE_PRE2_COEFF_SET15_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET12TO15_CDR_FFE_PRE2_COEFF_SET15_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET12TO15_CDR_FFE_PRE2_COEFF_SET15_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET12TO15_CDR_FFE_PRE2_COEFF_SET15_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_POST2_SET0TO3 register description at address offset 0xaa0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_post2_set0to3
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_POST2_COEFF_SET0 : 8;
    ///< set0 of cdr ffe post2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_POST2_COEFF_SET1 : 8;
    ///< set1 of cdr ffe post2 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_POST2_COEFF_SET2 : 8;
    ///< set2 of cdr ffe post2 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_POST2_COEFF_SET3 : 8;
    ///< set3 of cdr ffe post2 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_post2_set0to3_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET0TO3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET0TO3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET0TO3_WR_MASK (0xffffffffU)


///< set0 of cdr ffe post2 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET0TO3_CDR_FFE_POST2_COEFF_SET0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET0TO3_CDR_FFE_POST2_COEFF_SET0_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET0TO3_CDR_FFE_POST2_COEFF_SET0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET0TO3_CDR_FFE_POST2_COEFF_SET0_BF_DEF (0x00000000)

///< set1 of cdr ffe post2 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET0TO3_CDR_FFE_POST2_COEFF_SET1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET0TO3_CDR_FFE_POST2_COEFF_SET1_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET0TO3_CDR_FFE_POST2_COEFF_SET1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET0TO3_CDR_FFE_POST2_COEFF_SET1_BF_DEF (0x00000000)

///< set2 of cdr ffe post2 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET0TO3_CDR_FFE_POST2_COEFF_SET2_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET0TO3_CDR_FFE_POST2_COEFF_SET2_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET0TO3_CDR_FFE_POST2_COEFF_SET2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET0TO3_CDR_FFE_POST2_COEFF_SET2_BF_DEF (0x00000000)

///< set3 of cdr ffe post2 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET0TO3_CDR_FFE_POST2_COEFF_SET3_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET0TO3_CDR_FFE_POST2_COEFF_SET3_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET0TO3_CDR_FFE_POST2_COEFF_SET3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET0TO3_CDR_FFE_POST2_COEFF_SET3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_POST2_SET4TO7 register description at address offset 0xaa4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_post2_set4to7
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_POST2_COEFF_SET4 : 8;
    ///< set4 of cdr ffe post2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_POST2_COEFF_SET5 : 8;
    ///< set5 of cdr ffe post2 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_POST2_COEFF_SET6 : 8;
    ///< set6 of cdr ffe post2 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_POST2_COEFF_SET7 : 8;
    ///< set7 of cdr ffe post2 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_post2_set4to7_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET4TO7_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET4TO7_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET4TO7_WR_MASK (0xffffffffU)


///< set4 of cdr ffe post2 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET4TO7_CDR_FFE_POST2_COEFF_SET4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET4TO7_CDR_FFE_POST2_COEFF_SET4_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET4TO7_CDR_FFE_POST2_COEFF_SET4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET4TO7_CDR_FFE_POST2_COEFF_SET4_BF_DEF (0x00000000)

///< set5 of cdr ffe post2 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET4TO7_CDR_FFE_POST2_COEFF_SET5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET4TO7_CDR_FFE_POST2_COEFF_SET5_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET4TO7_CDR_FFE_POST2_COEFF_SET5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET4TO7_CDR_FFE_POST2_COEFF_SET5_BF_DEF (0x00000000)

///< set6 of cdr ffe post2 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET4TO7_CDR_FFE_POST2_COEFF_SET6_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET4TO7_CDR_FFE_POST2_COEFF_SET6_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET4TO7_CDR_FFE_POST2_COEFF_SET6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET4TO7_CDR_FFE_POST2_COEFF_SET6_BF_DEF (0x00000000)

///< set7 of cdr ffe post2 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET4TO7_CDR_FFE_POST2_COEFF_SET7_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET4TO7_CDR_FFE_POST2_COEFF_SET7_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET4TO7_CDR_FFE_POST2_COEFF_SET7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET4TO7_CDR_FFE_POST2_COEFF_SET7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_POST2_SET8TO11 register description at address offset 0xaa8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_post2_set8to11
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_POST2_COEFF_SET8 : 8;
    ///< set8 of cdr ffe post2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_POST2_COEFF_SET9 : 8;
    ///< set9 of cdr ffe post2 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_POST2_COEFF_SET10 : 8;
    ///< set10 of cdr ffe post2 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_POST2_COEFF_SET11 : 8;
    ///< set11 of cdr ffe post2 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_post2_set8to11_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET8TO11_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET8TO11_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET8TO11_WR_MASK (0xffffffffU)


///< set8 of cdr ffe post2 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET8TO11_CDR_FFE_POST2_COEFF_SET8_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET8TO11_CDR_FFE_POST2_COEFF_SET8_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET8TO11_CDR_FFE_POST2_COEFF_SET8_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET8TO11_CDR_FFE_POST2_COEFF_SET8_BF_DEF (0x00000000)

///< set9 of cdr ffe post2 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET8TO11_CDR_FFE_POST2_COEFF_SET9_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET8TO11_CDR_FFE_POST2_COEFF_SET9_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET8TO11_CDR_FFE_POST2_COEFF_SET9_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET8TO11_CDR_FFE_POST2_COEFF_SET9_BF_DEF (0x00000000)

///< set10 of cdr ffe post2 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET8TO11_CDR_FFE_POST2_COEFF_SET10_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET8TO11_CDR_FFE_POST2_COEFF_SET10_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET8TO11_CDR_FFE_POST2_COEFF_SET10_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET8TO11_CDR_FFE_POST2_COEFF_SET10_BF_DEF (0x00000000)

///< set11 of cdr ffe post2 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET8TO11_CDR_FFE_POST2_COEFF_SET11_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET8TO11_CDR_FFE_POST2_COEFF_SET11_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET8TO11_CDR_FFE_POST2_COEFF_SET11_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET8TO11_CDR_FFE_POST2_COEFF_SET11_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_POST2_SET12TO15 register description at address offset 0xaac
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_post2_set12to15
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_POST2_COEFF_SET12 : 8;
    ///< set12 of cdr ffe post2 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_POST2_COEFF_SET13 : 8;
    ///< set13 of cdr ffe post2 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_POST2_COEFF_SET14 : 8;
    ///< set14 of cdr ffe post2 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_POST2_COEFF_SET15 : 8;
    ///< set15 of cdr ffe post2 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_post2_set12to15_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET12TO15_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET12TO15_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET12TO15_WR_MASK (0xffffffffU)


///< set12 of cdr ffe post2 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET12TO15_CDR_FFE_POST2_COEFF_SET12_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET12TO15_CDR_FFE_POST2_COEFF_SET12_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET12TO15_CDR_FFE_POST2_COEFF_SET12_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET12TO15_CDR_FFE_POST2_COEFF_SET12_BF_DEF (0x00000000)

///< set13 of cdr ffe post2 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET12TO15_CDR_FFE_POST2_COEFF_SET13_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET12TO15_CDR_FFE_POST2_COEFF_SET13_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET12TO15_CDR_FFE_POST2_COEFF_SET13_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET12TO15_CDR_FFE_POST2_COEFF_SET13_BF_DEF (0x00000000)

///< set14 of cdr ffe post2 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET12TO15_CDR_FFE_POST2_COEFF_SET14_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET12TO15_CDR_FFE_POST2_COEFF_SET14_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET12TO15_CDR_FFE_POST2_COEFF_SET14_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET12TO15_CDR_FFE_POST2_COEFF_SET14_BF_DEF (0x00000000)

///< set15 of cdr ffe post2 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET12TO15_CDR_FFE_POST2_COEFF_SET15_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET12TO15_CDR_FFE_POST2_COEFF_SET15_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET12TO15_CDR_FFE_POST2_COEFF_SET15_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET12TO15_CDR_FFE_POST2_COEFF_SET15_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_POST3_SET0TO3 register description at address offset 0xab0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_post3_set0to3
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_POST3_COEFF_SET0 : 6;
    ///< set0 of cdr ffe post3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t CDR_FFE_POST3_COEFF_SET1 : 6;
    ///< set1 of cdr ffe post3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t CDR_FFE_POST3_COEFF_SET2 : 6;
    ///< set2 of cdr ffe post3 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t CDR_FFE_POST3_COEFF_SET3 : 6;
    ///< set3 of cdr ffe post3 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_post3_set0to3_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET0TO3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET0TO3_RD_MASK (0x3f3f3f3fU)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET0TO3_WR_MASK (0x3f3f3f3fU)


///< set0 of cdr ffe post3 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET0TO3_CDR_FFE_POST3_COEFF_SET0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET0TO3_CDR_FFE_POST3_COEFF_SET0_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET0TO3_CDR_FFE_POST3_COEFF_SET0_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET0TO3_CDR_FFE_POST3_COEFF_SET0_BF_DEF (0x00000000)

///< set1 of cdr ffe post3 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET0TO3_CDR_FFE_POST3_COEFF_SET1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET0TO3_CDR_FFE_POST3_COEFF_SET1_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET0TO3_CDR_FFE_POST3_COEFF_SET1_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET0TO3_CDR_FFE_POST3_COEFF_SET1_BF_DEF (0x00000000)

///< set2 of cdr ffe post3 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET0TO3_CDR_FFE_POST3_COEFF_SET2_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET0TO3_CDR_FFE_POST3_COEFF_SET2_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET0TO3_CDR_FFE_POST3_COEFF_SET2_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET0TO3_CDR_FFE_POST3_COEFF_SET2_BF_DEF (0x00000000)

///< set3 of cdr ffe post3 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET0TO3_CDR_FFE_POST3_COEFF_SET3_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET0TO3_CDR_FFE_POST3_COEFF_SET3_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET0TO3_CDR_FFE_POST3_COEFF_SET3_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET0TO3_CDR_FFE_POST3_COEFF_SET3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_POST3_SET4TO7 register description at address offset 0xab4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_post3_set4to7
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_POST3_COEFF_SET4 : 6;
    ///< set4 of cdr ffe post3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t CDR_FFE_POST3_COEFF_SET5 : 6;
    ///< set5 of cdr ffe post3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t CDR_FFE_POST3_COEFF_SET6 : 6;
    ///< set6 of cdr ffe post3 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t CDR_FFE_POST3_COEFF_SET7 : 6;
    ///< set7 of cdr ffe post3 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_post3_set4to7_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET4TO7_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET4TO7_RD_MASK (0x3f3f3f3fU)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET4TO7_WR_MASK (0x3f3f3f3fU)


///< set4 of cdr ffe post3 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET4TO7_CDR_FFE_POST3_COEFF_SET4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET4TO7_CDR_FFE_POST3_COEFF_SET4_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET4TO7_CDR_FFE_POST3_COEFF_SET4_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET4TO7_CDR_FFE_POST3_COEFF_SET4_BF_DEF (0x00000000)

///< set5 of cdr ffe post3 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET4TO7_CDR_FFE_POST3_COEFF_SET5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET4TO7_CDR_FFE_POST3_COEFF_SET5_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET4TO7_CDR_FFE_POST3_COEFF_SET5_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET4TO7_CDR_FFE_POST3_COEFF_SET5_BF_DEF (0x00000000)

///< set6 of cdr ffe post3 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET4TO7_CDR_FFE_POST3_COEFF_SET6_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET4TO7_CDR_FFE_POST3_COEFF_SET6_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET4TO7_CDR_FFE_POST3_COEFF_SET6_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET4TO7_CDR_FFE_POST3_COEFF_SET6_BF_DEF (0x00000000)

///< set7 of cdr ffe post3 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET4TO7_CDR_FFE_POST3_COEFF_SET7_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET4TO7_CDR_FFE_POST3_COEFF_SET7_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET4TO7_CDR_FFE_POST3_COEFF_SET7_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET4TO7_CDR_FFE_POST3_COEFF_SET7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_POST3_SET8TO11 register description at address offset 0xab8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_post3_set8to11
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_POST3_COEFF_SET8 : 6;
    ///< set8 of cdr ffe post3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t CDR_FFE_POST3_COEFF_SET9 : 6;
    ///< set9 of cdr ffe post3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t CDR_FFE_POST3_COEFF_SET10 : 6;
    ///< set10 of cdr ffe post3 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t CDR_FFE_POST3_COEFF_SET11 : 6;
    ///< set11 of cdr ffe post3 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_post3_set8to11_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET8TO11_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET8TO11_RD_MASK (0x3f3f3f3fU)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET8TO11_WR_MASK (0x3f3f3f3fU)


///< set8 of cdr ffe post3 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET8TO11_CDR_FFE_POST3_COEFF_SET8_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET8TO11_CDR_FFE_POST3_COEFF_SET8_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET8TO11_CDR_FFE_POST3_COEFF_SET8_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET8TO11_CDR_FFE_POST3_COEFF_SET8_BF_DEF (0x00000000)

///< set9 of cdr ffe post3 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET8TO11_CDR_FFE_POST3_COEFF_SET9_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET8TO11_CDR_FFE_POST3_COEFF_SET9_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET8TO11_CDR_FFE_POST3_COEFF_SET9_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET8TO11_CDR_FFE_POST3_COEFF_SET9_BF_DEF (0x00000000)

///< set10 of cdr ffe post3 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET8TO11_CDR_FFE_POST3_COEFF_SET10_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET8TO11_CDR_FFE_POST3_COEFF_SET10_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET8TO11_CDR_FFE_POST3_COEFF_SET10_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET8TO11_CDR_FFE_POST3_COEFF_SET10_BF_DEF (0x00000000)

///< set11 of cdr ffe post3 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET8TO11_CDR_FFE_POST3_COEFF_SET11_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET8TO11_CDR_FFE_POST3_COEFF_SET11_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET8TO11_CDR_FFE_POST3_COEFF_SET11_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET8TO11_CDR_FFE_POST3_COEFF_SET11_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_POST3_SET12TO15 register description at address offset 0xabc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_post3_set12to15
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_POST3_COEFF_SET12 : 6;
    ///< set12 of cdr ffe post3 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t CDR_FFE_POST3_COEFF_SET13 : 6;
    ///< set13 of cdr ffe post3 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t CDR_FFE_POST3_COEFF_SET14 : 6;
    ///< set14 of cdr ffe post3 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t CDR_FFE_POST3_COEFF_SET15 : 6;
    ///< set15 of cdr ffe post3 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_post3_set12to15_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET12TO15_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET12TO15_RD_MASK (0x3f3f3f3fU)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET12TO15_WR_MASK (0x3f3f3f3fU)


///< set12 of cdr ffe post3 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET12TO15_CDR_FFE_POST3_COEFF_SET12_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET12TO15_CDR_FFE_POST3_COEFF_SET12_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET12TO15_CDR_FFE_POST3_COEFF_SET12_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET12TO15_CDR_FFE_POST3_COEFF_SET12_BF_DEF (0x00000000)

///< set13 of cdr ffe post3 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET12TO15_CDR_FFE_POST3_COEFF_SET13_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET12TO15_CDR_FFE_POST3_COEFF_SET13_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET12TO15_CDR_FFE_POST3_COEFF_SET13_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET12TO15_CDR_FFE_POST3_COEFF_SET13_BF_DEF (0x00000000)

///< set14 of cdr ffe post3 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET12TO15_CDR_FFE_POST3_COEFF_SET14_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET12TO15_CDR_FFE_POST3_COEFF_SET14_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET12TO15_CDR_FFE_POST3_COEFF_SET14_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET12TO15_CDR_FFE_POST3_COEFF_SET14_BF_DEF (0x00000000)

///< set15 of cdr ffe post3 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET12TO15_CDR_FFE_POST3_COEFF_SET15_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET12TO15_CDR_FFE_POST3_COEFF_SET15_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET12TO15_CDR_FFE_POST3_COEFF_SET15_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET12TO15_CDR_FFE_POST3_COEFF_SET15_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_POST4_SET0TO3 register description at address offset 0xac0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_post4_set0to3
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_POST4_COEFF_SET0 : 6;
    ///< set0 of cdr ffe post4 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t CDR_FFE_POST4_COEFF_SET1 : 6;
    ///< set1 of cdr ffe post4 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t CDR_FFE_POST4_COEFF_SET2 : 6;
    ///< set2 of cdr ffe post4 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t CDR_FFE_POST4_COEFF_SET3 : 6;
    ///< set3 of cdr ffe post4 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_post4_set0to3_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET0TO3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET0TO3_RD_MASK (0x3f3f3f3fU)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET0TO3_WR_MASK (0x3f3f3f3fU)


///< set0 of cdr ffe post4 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET0TO3_CDR_FFE_POST4_COEFF_SET0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET0TO3_CDR_FFE_POST4_COEFF_SET0_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET0TO3_CDR_FFE_POST4_COEFF_SET0_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET0TO3_CDR_FFE_POST4_COEFF_SET0_BF_DEF (0x00000000)

///< set1 of cdr ffe post4 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET0TO3_CDR_FFE_POST4_COEFF_SET1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET0TO3_CDR_FFE_POST4_COEFF_SET1_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET0TO3_CDR_FFE_POST4_COEFF_SET1_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET0TO3_CDR_FFE_POST4_COEFF_SET1_BF_DEF (0x00000000)

///< set2 of cdr ffe post4 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET0TO3_CDR_FFE_POST4_COEFF_SET2_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET0TO3_CDR_FFE_POST4_COEFF_SET2_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET0TO3_CDR_FFE_POST4_COEFF_SET2_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET0TO3_CDR_FFE_POST4_COEFF_SET2_BF_DEF (0x00000000)

///< set3 of cdr ffe post4 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET0TO3_CDR_FFE_POST4_COEFF_SET3_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET0TO3_CDR_FFE_POST4_COEFF_SET3_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET0TO3_CDR_FFE_POST4_COEFF_SET3_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET0TO3_CDR_FFE_POST4_COEFF_SET3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_POST4_SET4TO7 register description at address offset 0xac4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_post4_set4to7
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_POST4_COEFF_SET4 : 6;
    ///< set4 of cdr ffe post4 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t CDR_FFE_POST4_COEFF_SET5 : 6;
    ///< set5 of cdr ffe post4 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t CDR_FFE_POST4_COEFF_SET6 : 6;
    ///< set6 of cdr ffe post4 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t CDR_FFE_POST4_COEFF_SET7 : 6;
    ///< set7 of cdr ffe post4 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_post4_set4to7_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET4TO7_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET4TO7_RD_MASK (0x3f3f3f3fU)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET4TO7_WR_MASK (0x3f3f3f3fU)


///< set4 of cdr ffe post4 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET4TO7_CDR_FFE_POST4_COEFF_SET4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET4TO7_CDR_FFE_POST4_COEFF_SET4_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET4TO7_CDR_FFE_POST4_COEFF_SET4_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET4TO7_CDR_FFE_POST4_COEFF_SET4_BF_DEF (0x00000000)

///< set5 of cdr ffe post4 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET4TO7_CDR_FFE_POST4_COEFF_SET5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET4TO7_CDR_FFE_POST4_COEFF_SET5_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET4TO7_CDR_FFE_POST4_COEFF_SET5_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET4TO7_CDR_FFE_POST4_COEFF_SET5_BF_DEF (0x00000000)

///< set6 of cdr ffe post4 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET4TO7_CDR_FFE_POST4_COEFF_SET6_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET4TO7_CDR_FFE_POST4_COEFF_SET6_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET4TO7_CDR_FFE_POST4_COEFF_SET6_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET4TO7_CDR_FFE_POST4_COEFF_SET6_BF_DEF (0x00000000)

///< set7 of cdr ffe post4 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET4TO7_CDR_FFE_POST4_COEFF_SET7_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET4TO7_CDR_FFE_POST4_COEFF_SET7_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET4TO7_CDR_FFE_POST4_COEFF_SET7_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET4TO7_CDR_FFE_POST4_COEFF_SET7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_POST4_SET8TO11 register description at address offset 0xac8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_post4_set8to11
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_POST4_COEFF_SET8 : 6;
    ///< set8 of cdr ffe post4 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t CDR_FFE_POST4_COEFF_SET9 : 6;
    ///< set9 of cdr ffe post4 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t CDR_FFE_POST4_COEFF_SET10 : 6;
    ///< set10 of cdr ffe post4 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t CDR_FFE_POST4_COEFF_SET11 : 6;
    ///< set11 of cdr ffe post4 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_post4_set8to11_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET8TO11_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET8TO11_RD_MASK (0x3f3f3f3fU)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET8TO11_WR_MASK (0x3f3f3f3fU)


///< set8 of cdr ffe post4 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET8TO11_CDR_FFE_POST4_COEFF_SET8_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET8TO11_CDR_FFE_POST4_COEFF_SET8_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET8TO11_CDR_FFE_POST4_COEFF_SET8_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET8TO11_CDR_FFE_POST4_COEFF_SET8_BF_DEF (0x00000000)

///< set9 of cdr ffe post4 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET8TO11_CDR_FFE_POST4_COEFF_SET9_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET8TO11_CDR_FFE_POST4_COEFF_SET9_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET8TO11_CDR_FFE_POST4_COEFF_SET9_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET8TO11_CDR_FFE_POST4_COEFF_SET9_BF_DEF (0x00000000)

///< set10 of cdr ffe post4 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET8TO11_CDR_FFE_POST4_COEFF_SET10_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET8TO11_CDR_FFE_POST4_COEFF_SET10_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET8TO11_CDR_FFE_POST4_COEFF_SET10_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET8TO11_CDR_FFE_POST4_COEFF_SET10_BF_DEF (0x00000000)

///< set11 of cdr ffe post4 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET8TO11_CDR_FFE_POST4_COEFF_SET11_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET8TO11_CDR_FFE_POST4_COEFF_SET11_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET8TO11_CDR_FFE_POST4_COEFF_SET11_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET8TO11_CDR_FFE_POST4_COEFF_SET11_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_POST4_SET12TO15 register description at address offset 0xacc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_post4_set12to15
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_POST4_COEFF_SET12 : 6;
    ///< set12 of cdr ffe post4 coeff
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t CDR_FFE_POST4_COEFF_SET13 : 6;
    ///< set13 of cdr ffe post4 coeff
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t CDR_FFE_POST4_COEFF_SET14 : 6;
    ///< set14 of cdr ffe post4 coeff
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t CDR_FFE_POST4_COEFF_SET15 : 6;
    ///< set15 of cdr ffe post4 coeff
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_post4_set12to15_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET12TO15_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET12TO15_RD_MASK (0x3f3f3f3fU)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET12TO15_WR_MASK (0x3f3f3f3fU)


///< set12 of cdr ffe post4 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET12TO15_CDR_FFE_POST4_COEFF_SET12_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET12TO15_CDR_FFE_POST4_COEFF_SET12_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET12TO15_CDR_FFE_POST4_COEFF_SET12_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET12TO15_CDR_FFE_POST4_COEFF_SET12_BF_DEF (0x00000000)

///< set13 of cdr ffe post4 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET12TO15_CDR_FFE_POST4_COEFF_SET13_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET12TO15_CDR_FFE_POST4_COEFF_SET13_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET12TO15_CDR_FFE_POST4_COEFF_SET13_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET12TO15_CDR_FFE_POST4_COEFF_SET13_BF_DEF (0x00000000)

///< set14 of cdr ffe post4 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET12TO15_CDR_FFE_POST4_COEFF_SET14_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET12TO15_CDR_FFE_POST4_COEFF_SET14_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET12TO15_CDR_FFE_POST4_COEFF_SET14_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET12TO15_CDR_FFE_POST4_COEFF_SET14_BF_DEF (0x00000000)

///< set15 of cdr ffe post4 coeff
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET12TO15_CDR_FFE_POST4_COEFF_SET15_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET12TO15_CDR_FFE_POST4_COEFF_SET15_BF_WID ( 6)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET12TO15_CDR_FFE_POST4_COEFF_SET15_BF_MSK (0x3F000000)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET12TO15_CDR_FFE_POST4_COEFF_SET15_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_PRE3_SET0TO3_FRAC register description at address offset 0xad0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_pre3_set0to3_frac
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_PRE3_COEFF_SET0_FRAC : 8;
    ///< set0 of cdr ffe pre3 coeff frac
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_PRE3_COEFF_SET1_FRAC : 8;
    ///< set1 of cdr ffe pre3 coeff frac
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_PRE3_COEFF_SET2_FRAC : 8;
    ///< set2 of cdr ffe pre3 coeff frac
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_PRE3_COEFF_SET3_FRAC : 8;
    ///< set3 of cdr ffe pre3 coeff frac
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_pre3_set0to3_frac_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET0TO3_FRAC_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET0TO3_FRAC_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET0TO3_FRAC_WR_MASK (0xffffffffU)


///< set0 of cdr ffe pre3 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET0TO3_FRAC_CDR_FFE_PRE3_COEFF_SET0_FRAC_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET0TO3_FRAC_CDR_FFE_PRE3_COEFF_SET0_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET0TO3_FRAC_CDR_FFE_PRE3_COEFF_SET0_FRAC_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET0TO3_FRAC_CDR_FFE_PRE3_COEFF_SET0_FRAC_BF_DEF (0x00000000)

///< set1 of cdr ffe pre3 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET0TO3_FRAC_CDR_FFE_PRE3_COEFF_SET1_FRAC_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET0TO3_FRAC_CDR_FFE_PRE3_COEFF_SET1_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET0TO3_FRAC_CDR_FFE_PRE3_COEFF_SET1_FRAC_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET0TO3_FRAC_CDR_FFE_PRE3_COEFF_SET1_FRAC_BF_DEF (0x00000000)

///< set2 of cdr ffe pre3 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET0TO3_FRAC_CDR_FFE_PRE3_COEFF_SET2_FRAC_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET0TO3_FRAC_CDR_FFE_PRE3_COEFF_SET2_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET0TO3_FRAC_CDR_FFE_PRE3_COEFF_SET2_FRAC_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET0TO3_FRAC_CDR_FFE_PRE3_COEFF_SET2_FRAC_BF_DEF (0x00000000)

///< set3 of cdr ffe pre3 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET0TO3_FRAC_CDR_FFE_PRE3_COEFF_SET3_FRAC_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET0TO3_FRAC_CDR_FFE_PRE3_COEFF_SET3_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET0TO3_FRAC_CDR_FFE_PRE3_COEFF_SET3_FRAC_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET0TO3_FRAC_CDR_FFE_PRE3_COEFF_SET3_FRAC_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_PRE3_SET4TO7_FRAC register description at address offset 0xad4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_pre3_set4to7_frac
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_PRE3_COEFF_SET4_FRAC : 8;
    ///< set4 of cdr ffe pre3 coeff frac
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_PRE3_COEFF_SET5_FRAC : 8;
    ///< set5 of cdr ffe pre3 coeff frac
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_PRE3_COEFF_SET6_FRAC : 8;
    ///< set6 of cdr ffe pre3 coeff frac
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_PRE3_COEFF_SET7_FRAC : 8;
    ///< set7 of cdr ffe pre3 coeff frac
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_pre3_set4to7_frac_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET4TO7_FRAC_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET4TO7_FRAC_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET4TO7_FRAC_WR_MASK (0xffffffffU)


///< set4 of cdr ffe pre3 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET4TO7_FRAC_CDR_FFE_PRE3_COEFF_SET4_FRAC_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET4TO7_FRAC_CDR_FFE_PRE3_COEFF_SET4_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET4TO7_FRAC_CDR_FFE_PRE3_COEFF_SET4_FRAC_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET4TO7_FRAC_CDR_FFE_PRE3_COEFF_SET4_FRAC_BF_DEF (0x00000000)

///< set5 of cdr ffe pre3 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET4TO7_FRAC_CDR_FFE_PRE3_COEFF_SET5_FRAC_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET4TO7_FRAC_CDR_FFE_PRE3_COEFF_SET5_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET4TO7_FRAC_CDR_FFE_PRE3_COEFF_SET5_FRAC_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET4TO7_FRAC_CDR_FFE_PRE3_COEFF_SET5_FRAC_BF_DEF (0x00000000)

///< set6 of cdr ffe pre3 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET4TO7_FRAC_CDR_FFE_PRE3_COEFF_SET6_FRAC_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET4TO7_FRAC_CDR_FFE_PRE3_COEFF_SET6_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET4TO7_FRAC_CDR_FFE_PRE3_COEFF_SET6_FRAC_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET4TO7_FRAC_CDR_FFE_PRE3_COEFF_SET6_FRAC_BF_DEF (0x00000000)

///< set7 of cdr ffe pre3 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET4TO7_FRAC_CDR_FFE_PRE3_COEFF_SET7_FRAC_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET4TO7_FRAC_CDR_FFE_PRE3_COEFF_SET7_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET4TO7_FRAC_CDR_FFE_PRE3_COEFF_SET7_FRAC_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET4TO7_FRAC_CDR_FFE_PRE3_COEFF_SET7_FRAC_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_PRE3_SET8TO11_FRAC register description at address offset 0xad8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_pre3_set8to11_frac
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_PRE3_COEFF_SET8_FRAC : 8;
    ///< set8 of cdr ffe pre3 coeff frac
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_PRE3_COEFF_SET9_FRAC : 8;
    ///< set9 of cdr ffe pre3 coeff frac
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_PRE3_COEFF_SET10_FRAC : 8;
    ///< set10 of cdr ffe pre3 coeff frac
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_PRE3_COEFF_SET11_FRAC : 8;
    ///< set11 of cdr ffe pre3 coeff frac
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_pre3_set8to11_frac_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET8TO11_FRAC_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET8TO11_FRAC_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET8TO11_FRAC_WR_MASK (0xffffffffU)


///< set8 of cdr ffe pre3 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET8TO11_FRAC_CDR_FFE_PRE3_COEFF_SET8_FRAC_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET8TO11_FRAC_CDR_FFE_PRE3_COEFF_SET8_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET8TO11_FRAC_CDR_FFE_PRE3_COEFF_SET8_FRAC_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET8TO11_FRAC_CDR_FFE_PRE3_COEFF_SET8_FRAC_BF_DEF (0x00000000)

///< set9 of cdr ffe pre3 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET8TO11_FRAC_CDR_FFE_PRE3_COEFF_SET9_FRAC_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET8TO11_FRAC_CDR_FFE_PRE3_COEFF_SET9_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET8TO11_FRAC_CDR_FFE_PRE3_COEFF_SET9_FRAC_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET8TO11_FRAC_CDR_FFE_PRE3_COEFF_SET9_FRAC_BF_DEF (0x00000000)

///< set10 of cdr ffe pre3 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET8TO11_FRAC_CDR_FFE_PRE3_COEFF_SET10_FRAC_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET8TO11_FRAC_CDR_FFE_PRE3_COEFF_SET10_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET8TO11_FRAC_CDR_FFE_PRE3_COEFF_SET10_FRAC_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET8TO11_FRAC_CDR_FFE_PRE3_COEFF_SET10_FRAC_BF_DEF (0x00000000)

///< set11 of cdr ffe pre3 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET8TO11_FRAC_CDR_FFE_PRE3_COEFF_SET11_FRAC_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET8TO11_FRAC_CDR_FFE_PRE3_COEFF_SET11_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET8TO11_FRAC_CDR_FFE_PRE3_COEFF_SET11_FRAC_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET8TO11_FRAC_CDR_FFE_PRE3_COEFF_SET11_FRAC_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_PRE3_SET12TO15_FRAC register description at address offset 0xadc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_pre3_set12to15_frac
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_PRE3_COEFF_SET12_FRAC : 8;
    ///< set12 of cdr ffe pre3 coeff frac
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_PRE3_COEFF_SET13_FRAC : 8;
    ///< set13 of cdr ffe pre3 coeff frac
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_PRE3_COEFF_SET14_FRAC : 8;
    ///< set14 of cdr ffe pre3 coeff frac
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_PRE3_COEFF_SET15_FRAC : 8;
    ///< set15 of cdr ffe pre3 coeff frac
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_pre3_set12to15_frac_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET12TO15_FRAC_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET12TO15_FRAC_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET12TO15_FRAC_WR_MASK (0xffffffffU)


///< set12 of cdr ffe pre3 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET12TO15_FRAC_CDR_FFE_PRE3_COEFF_SET12_FRAC_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET12TO15_FRAC_CDR_FFE_PRE3_COEFF_SET12_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET12TO15_FRAC_CDR_FFE_PRE3_COEFF_SET12_FRAC_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET12TO15_FRAC_CDR_FFE_PRE3_COEFF_SET12_FRAC_BF_DEF (0x00000000)

///< set13 of cdr ffe pre3 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET12TO15_FRAC_CDR_FFE_PRE3_COEFF_SET13_FRAC_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET12TO15_FRAC_CDR_FFE_PRE3_COEFF_SET13_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET12TO15_FRAC_CDR_FFE_PRE3_COEFF_SET13_FRAC_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET12TO15_FRAC_CDR_FFE_PRE3_COEFF_SET13_FRAC_BF_DEF (0x00000000)

///< set14 of cdr ffe pre3 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET12TO15_FRAC_CDR_FFE_PRE3_COEFF_SET14_FRAC_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET12TO15_FRAC_CDR_FFE_PRE3_COEFF_SET14_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET12TO15_FRAC_CDR_FFE_PRE3_COEFF_SET14_FRAC_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET12TO15_FRAC_CDR_FFE_PRE3_COEFF_SET14_FRAC_BF_DEF (0x00000000)

///< set15 of cdr ffe pre3 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET12TO15_FRAC_CDR_FFE_PRE3_COEFF_SET15_FRAC_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET12TO15_FRAC_CDR_FFE_PRE3_COEFF_SET15_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET12TO15_FRAC_CDR_FFE_PRE3_COEFF_SET15_FRAC_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET12TO15_FRAC_CDR_FFE_PRE3_COEFF_SET15_FRAC_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_PRE2_SET0TO3_FRAC register description at address offset 0xae0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_pre2_set0to3_frac
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_PRE2_COEFF_SET0_FRAC : 8;
    ///< set0 of cdr ffe pre2 coeff frac
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_PRE2_COEFF_SET1_FRAC : 8;
    ///< set1 of cdr ffe pre2 coeff frac
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_PRE2_COEFF_SET2_FRAC : 8;
    ///< set2 of cdr ffe pre2 coeff frac
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_PRE2_COEFF_SET3_FRAC : 8;
    ///< set3 of cdr ffe pre2 coeff frac
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_pre2_set0to3_frac_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET0TO3_FRAC_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET0TO3_FRAC_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET0TO3_FRAC_WR_MASK (0xffffffffU)


///< set0 of cdr ffe pre2 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET0TO3_FRAC_CDR_FFE_PRE2_COEFF_SET0_FRAC_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET0TO3_FRAC_CDR_FFE_PRE2_COEFF_SET0_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET0TO3_FRAC_CDR_FFE_PRE2_COEFF_SET0_FRAC_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET0TO3_FRAC_CDR_FFE_PRE2_COEFF_SET0_FRAC_BF_DEF (0x00000000)

///< set1 of cdr ffe pre2 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET0TO3_FRAC_CDR_FFE_PRE2_COEFF_SET1_FRAC_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET0TO3_FRAC_CDR_FFE_PRE2_COEFF_SET1_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET0TO3_FRAC_CDR_FFE_PRE2_COEFF_SET1_FRAC_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET0TO3_FRAC_CDR_FFE_PRE2_COEFF_SET1_FRAC_BF_DEF (0x00000000)

///< set2 of cdr ffe pre2 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET0TO3_FRAC_CDR_FFE_PRE2_COEFF_SET2_FRAC_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET0TO3_FRAC_CDR_FFE_PRE2_COEFF_SET2_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET0TO3_FRAC_CDR_FFE_PRE2_COEFF_SET2_FRAC_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET0TO3_FRAC_CDR_FFE_PRE2_COEFF_SET2_FRAC_BF_DEF (0x00000000)

///< set3 of cdr ffe pre2 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET0TO3_FRAC_CDR_FFE_PRE2_COEFF_SET3_FRAC_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET0TO3_FRAC_CDR_FFE_PRE2_COEFF_SET3_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET0TO3_FRAC_CDR_FFE_PRE2_COEFF_SET3_FRAC_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET0TO3_FRAC_CDR_FFE_PRE2_COEFF_SET3_FRAC_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_PRE2_SET4TO7_FRAC register description at address offset 0xae4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_pre2_set4to7_frac
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_PRE2_COEFF_SET4_FRAC : 8;
    ///< set4 of cdr ffe pre2 coeff frac
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_PRE2_COEFF_SET5_FRAC : 8;
    ///< set5 of cdr ffe pre2 coeff frac
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_PRE2_COEFF_SET6_FRAC : 8;
    ///< set6 of cdr ffe pre2 coeff frac
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_PRE2_COEFF_SET7_FRAC : 8;
    ///< set7 of cdr ffe pre2 coeff frac
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_pre2_set4to7_frac_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET4TO7_FRAC_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET4TO7_FRAC_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET4TO7_FRAC_WR_MASK (0xffffffffU)


///< set4 of cdr ffe pre2 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET4TO7_FRAC_CDR_FFE_PRE2_COEFF_SET4_FRAC_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET4TO7_FRAC_CDR_FFE_PRE2_COEFF_SET4_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET4TO7_FRAC_CDR_FFE_PRE2_COEFF_SET4_FRAC_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET4TO7_FRAC_CDR_FFE_PRE2_COEFF_SET4_FRAC_BF_DEF (0x00000000)

///< set5 of cdr ffe pre2 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET4TO7_FRAC_CDR_FFE_PRE2_COEFF_SET5_FRAC_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET4TO7_FRAC_CDR_FFE_PRE2_COEFF_SET5_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET4TO7_FRAC_CDR_FFE_PRE2_COEFF_SET5_FRAC_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET4TO7_FRAC_CDR_FFE_PRE2_COEFF_SET5_FRAC_BF_DEF (0x00000000)

///< set6 of cdr ffe pre2 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET4TO7_FRAC_CDR_FFE_PRE2_COEFF_SET6_FRAC_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET4TO7_FRAC_CDR_FFE_PRE2_COEFF_SET6_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET4TO7_FRAC_CDR_FFE_PRE2_COEFF_SET6_FRAC_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET4TO7_FRAC_CDR_FFE_PRE2_COEFF_SET6_FRAC_BF_DEF (0x00000000)

///< set7 of cdr ffe pre2 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET4TO7_FRAC_CDR_FFE_PRE2_COEFF_SET7_FRAC_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET4TO7_FRAC_CDR_FFE_PRE2_COEFF_SET7_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET4TO7_FRAC_CDR_FFE_PRE2_COEFF_SET7_FRAC_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET4TO7_FRAC_CDR_FFE_PRE2_COEFF_SET7_FRAC_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_PRE2_SET8TO11_FRAC register description at address offset 0xae8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_pre2_set8to11_frac
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_PRE2_COEFF_SET8_FRAC : 8;
    ///< set8 of cdr ffe pre2 coeff frac
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_PRE2_COEFF_SET9_FRAC : 8;
    ///< set9 of cdr ffe pre2 coeff frac
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_PRE2_COEFF_SET10_FRAC : 8;
    ///< set10 of cdr ffe pre2 coeff frac
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_PRE2_COEFF_SET11_FRAC : 8;
    ///< set11 of cdr ffe pre2 coeff frac
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_pre2_set8to11_frac_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET8TO11_FRAC_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET8TO11_FRAC_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET8TO11_FRAC_WR_MASK (0xffffffffU)


///< set8 of cdr ffe pre2 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET8TO11_FRAC_CDR_FFE_PRE2_COEFF_SET8_FRAC_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET8TO11_FRAC_CDR_FFE_PRE2_COEFF_SET8_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET8TO11_FRAC_CDR_FFE_PRE2_COEFF_SET8_FRAC_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET8TO11_FRAC_CDR_FFE_PRE2_COEFF_SET8_FRAC_BF_DEF (0x00000000)

///< set9 of cdr ffe pre2 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET8TO11_FRAC_CDR_FFE_PRE2_COEFF_SET9_FRAC_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET8TO11_FRAC_CDR_FFE_PRE2_COEFF_SET9_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET8TO11_FRAC_CDR_FFE_PRE2_COEFF_SET9_FRAC_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET8TO11_FRAC_CDR_FFE_PRE2_COEFF_SET9_FRAC_BF_DEF (0x00000000)

///< set10 of cdr ffe pre2 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET8TO11_FRAC_CDR_FFE_PRE2_COEFF_SET10_FRAC_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET8TO11_FRAC_CDR_FFE_PRE2_COEFF_SET10_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET8TO11_FRAC_CDR_FFE_PRE2_COEFF_SET10_FRAC_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET8TO11_FRAC_CDR_FFE_PRE2_COEFF_SET10_FRAC_BF_DEF (0x00000000)

///< set11 of cdr ffe pre2 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET8TO11_FRAC_CDR_FFE_PRE2_COEFF_SET11_FRAC_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET8TO11_FRAC_CDR_FFE_PRE2_COEFF_SET11_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET8TO11_FRAC_CDR_FFE_PRE2_COEFF_SET11_FRAC_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET8TO11_FRAC_CDR_FFE_PRE2_COEFF_SET11_FRAC_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_PRE2_SET12TO15_FRAC register description at address offset 0xaec
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_pre2_set12to15_frac
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_PRE2_COEFF_SET12_FRAC : 8;
    ///< set12 of cdr ffe pre2 coeff frac
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_PRE2_COEFF_SET13_FRAC : 8;
    ///< set13 of cdr ffe pre2 coeff frac
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_PRE2_COEFF_SET14_FRAC : 8;
    ///< set14 of cdr ffe pre2 coeff frac
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_PRE2_COEFF_SET15_FRAC : 8;
    ///< set15 of cdr ffe pre2 coeff frac
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_pre2_set12to15_frac_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET12TO15_FRAC_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET12TO15_FRAC_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET12TO15_FRAC_WR_MASK (0xffffffffU)


///< set12 of cdr ffe pre2 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET12TO15_FRAC_CDR_FFE_PRE2_COEFF_SET12_FRAC_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET12TO15_FRAC_CDR_FFE_PRE2_COEFF_SET12_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET12TO15_FRAC_CDR_FFE_PRE2_COEFF_SET12_FRAC_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET12TO15_FRAC_CDR_FFE_PRE2_COEFF_SET12_FRAC_BF_DEF (0x00000000)

///< set13 of cdr ffe pre2 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET12TO15_FRAC_CDR_FFE_PRE2_COEFF_SET13_FRAC_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET12TO15_FRAC_CDR_FFE_PRE2_COEFF_SET13_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET12TO15_FRAC_CDR_FFE_PRE2_COEFF_SET13_FRAC_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET12TO15_FRAC_CDR_FFE_PRE2_COEFF_SET13_FRAC_BF_DEF (0x00000000)

///< set14 of cdr ffe pre2 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET12TO15_FRAC_CDR_FFE_PRE2_COEFF_SET14_FRAC_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET12TO15_FRAC_CDR_FFE_PRE2_COEFF_SET14_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET12TO15_FRAC_CDR_FFE_PRE2_COEFF_SET14_FRAC_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET12TO15_FRAC_CDR_FFE_PRE2_COEFF_SET14_FRAC_BF_DEF (0x00000000)

///< set15 of cdr ffe pre2 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET12TO15_FRAC_CDR_FFE_PRE2_COEFF_SET15_FRAC_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET12TO15_FRAC_CDR_FFE_PRE2_COEFF_SET15_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET12TO15_FRAC_CDR_FFE_PRE2_COEFF_SET15_FRAC_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET12TO15_FRAC_CDR_FFE_PRE2_COEFF_SET15_FRAC_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_POST2_SET0TO3_FRAC register description at address offset 0xaf0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_post2_set0to3_frac
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_POST2_COEFF_SET0_FRAC : 8;
    ///< set0 of cdr ffe post2 coeff frac
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_POST2_COEFF_SET1_FRAC : 8;
    ///< set1 of cdr ffe post2 coeff frac
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_POST2_COEFF_SET2_FRAC : 8;
    ///< set2 of cdr ffe post2 coeff frac
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_POST2_COEFF_SET3_FRAC : 8;
    ///< set3 of cdr ffe post2 coeff frac
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_post2_set0to3_frac_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET0TO3_FRAC_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET0TO3_FRAC_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET0TO3_FRAC_WR_MASK (0xffffffffU)


///< set0 of cdr ffe post2 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET0TO3_FRAC_CDR_FFE_POST2_COEFF_SET0_FRAC_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET0TO3_FRAC_CDR_FFE_POST2_COEFF_SET0_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET0TO3_FRAC_CDR_FFE_POST2_COEFF_SET0_FRAC_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET0TO3_FRAC_CDR_FFE_POST2_COEFF_SET0_FRAC_BF_DEF (0x00000000)

///< set1 of cdr ffe post2 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET0TO3_FRAC_CDR_FFE_POST2_COEFF_SET1_FRAC_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET0TO3_FRAC_CDR_FFE_POST2_COEFF_SET1_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET0TO3_FRAC_CDR_FFE_POST2_COEFF_SET1_FRAC_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET0TO3_FRAC_CDR_FFE_POST2_COEFF_SET1_FRAC_BF_DEF (0x00000000)

///< set2 of cdr ffe post2 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET0TO3_FRAC_CDR_FFE_POST2_COEFF_SET2_FRAC_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET0TO3_FRAC_CDR_FFE_POST2_COEFF_SET2_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET0TO3_FRAC_CDR_FFE_POST2_COEFF_SET2_FRAC_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET0TO3_FRAC_CDR_FFE_POST2_COEFF_SET2_FRAC_BF_DEF (0x00000000)

///< set3 of cdr ffe post2 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET0TO3_FRAC_CDR_FFE_POST2_COEFF_SET3_FRAC_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET0TO3_FRAC_CDR_FFE_POST2_COEFF_SET3_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET0TO3_FRAC_CDR_FFE_POST2_COEFF_SET3_FRAC_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET0TO3_FRAC_CDR_FFE_POST2_COEFF_SET3_FRAC_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_POST2_SET4TO7_FRAC register description at address offset 0xaf4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_post2_set4to7_frac
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_POST2_COEFF_SET4_FRAC : 8;
    ///< set4 of cdr ffe post2 coeff frac
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_POST2_COEFF_SET5_FRAC : 8;
    ///< set5 of cdr ffe post2 coeff frac
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_POST2_COEFF_SET6_FRAC : 8;
    ///< set6 of cdr ffe post2 coeff frac
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_POST2_COEFF_SET7_FRAC : 8;
    ///< set7 of cdr ffe post2 coeff frac
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_post2_set4to7_frac_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET4TO7_FRAC_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET4TO7_FRAC_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET4TO7_FRAC_WR_MASK (0xffffffffU)


///< set4 of cdr ffe post2 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET4TO7_FRAC_CDR_FFE_POST2_COEFF_SET4_FRAC_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET4TO7_FRAC_CDR_FFE_POST2_COEFF_SET4_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET4TO7_FRAC_CDR_FFE_POST2_COEFF_SET4_FRAC_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET4TO7_FRAC_CDR_FFE_POST2_COEFF_SET4_FRAC_BF_DEF (0x00000000)

///< set5 of cdr ffe post2 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET4TO7_FRAC_CDR_FFE_POST2_COEFF_SET5_FRAC_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET4TO7_FRAC_CDR_FFE_POST2_COEFF_SET5_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET4TO7_FRAC_CDR_FFE_POST2_COEFF_SET5_FRAC_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET4TO7_FRAC_CDR_FFE_POST2_COEFF_SET5_FRAC_BF_DEF (0x00000000)

///< set6 of cdr ffe post2 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET4TO7_FRAC_CDR_FFE_POST2_COEFF_SET6_FRAC_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET4TO7_FRAC_CDR_FFE_POST2_COEFF_SET6_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET4TO7_FRAC_CDR_FFE_POST2_COEFF_SET6_FRAC_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET4TO7_FRAC_CDR_FFE_POST2_COEFF_SET6_FRAC_BF_DEF (0x00000000)

///< set7 of cdr ffe post2 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET4TO7_FRAC_CDR_FFE_POST2_COEFF_SET7_FRAC_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET4TO7_FRAC_CDR_FFE_POST2_COEFF_SET7_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET4TO7_FRAC_CDR_FFE_POST2_COEFF_SET7_FRAC_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET4TO7_FRAC_CDR_FFE_POST2_COEFF_SET7_FRAC_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_POST2_SET8TO11_FRAC register description at address offset 0xaf8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_post2_set8to11_frac
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_POST2_COEFF_SET8_FRAC : 8;
    ///< set8 of cdr ffe post2 coeff frac
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_POST2_COEFF_SET9_FRAC : 8;
    ///< set9 of cdr ffe post2 coeff frac
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_POST2_COEFF_SET10_FRAC : 8;
    ///< set10 of cdr ffe post2 coeff frac
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_POST2_COEFF_SET11_FRAC : 8;
    ///< set11 of cdr ffe post2 coeff frac
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_post2_set8to11_frac_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET8TO11_FRAC_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET8TO11_FRAC_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET8TO11_FRAC_WR_MASK (0xffffffffU)


///< set8 of cdr ffe post2 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET8TO11_FRAC_CDR_FFE_POST2_COEFF_SET8_FRAC_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET8TO11_FRAC_CDR_FFE_POST2_COEFF_SET8_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET8TO11_FRAC_CDR_FFE_POST2_COEFF_SET8_FRAC_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET8TO11_FRAC_CDR_FFE_POST2_COEFF_SET8_FRAC_BF_DEF (0x00000000)

///< set9 of cdr ffe post2 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET8TO11_FRAC_CDR_FFE_POST2_COEFF_SET9_FRAC_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET8TO11_FRAC_CDR_FFE_POST2_COEFF_SET9_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET8TO11_FRAC_CDR_FFE_POST2_COEFF_SET9_FRAC_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET8TO11_FRAC_CDR_FFE_POST2_COEFF_SET9_FRAC_BF_DEF (0x00000000)

///< set10 of cdr ffe post2 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET8TO11_FRAC_CDR_FFE_POST2_COEFF_SET10_FRAC_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET8TO11_FRAC_CDR_FFE_POST2_COEFF_SET10_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET8TO11_FRAC_CDR_FFE_POST2_COEFF_SET10_FRAC_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET8TO11_FRAC_CDR_FFE_POST2_COEFF_SET10_FRAC_BF_DEF (0x00000000)

///< set11 of cdr ffe post2 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET8TO11_FRAC_CDR_FFE_POST2_COEFF_SET11_FRAC_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET8TO11_FRAC_CDR_FFE_POST2_COEFF_SET11_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET8TO11_FRAC_CDR_FFE_POST2_COEFF_SET11_FRAC_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET8TO11_FRAC_CDR_FFE_POST2_COEFF_SET11_FRAC_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_POST2_SET12TO15_FRAC register description at address offset 0xafc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_post2_set12to15_frac
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_POST2_COEFF_SET12_FRAC : 8;
    ///< set12 of cdr ffe post2 coeff frac
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_POST2_COEFF_SET13_FRAC : 8;
    ///< set13 of cdr ffe post2 coeff frac
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_POST2_COEFF_SET14_FRAC : 8;
    ///< set14 of cdr ffe post2 coeff frac
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_POST2_COEFF_SET15_FRAC : 8;
    ///< set15 of cdr ffe post2 coeff frac
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_post2_set12to15_frac_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET12TO15_FRAC_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET12TO15_FRAC_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET12TO15_FRAC_WR_MASK (0xffffffffU)


///< set12 of cdr ffe post2 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET12TO15_FRAC_CDR_FFE_POST2_COEFF_SET12_FRAC_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET12TO15_FRAC_CDR_FFE_POST2_COEFF_SET12_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET12TO15_FRAC_CDR_FFE_POST2_COEFF_SET12_FRAC_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET12TO15_FRAC_CDR_FFE_POST2_COEFF_SET12_FRAC_BF_DEF (0x00000000)

///< set13 of cdr ffe post2 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET12TO15_FRAC_CDR_FFE_POST2_COEFF_SET13_FRAC_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET12TO15_FRAC_CDR_FFE_POST2_COEFF_SET13_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET12TO15_FRAC_CDR_FFE_POST2_COEFF_SET13_FRAC_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET12TO15_FRAC_CDR_FFE_POST2_COEFF_SET13_FRAC_BF_DEF (0x00000000)

///< set14 of cdr ffe post2 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET12TO15_FRAC_CDR_FFE_POST2_COEFF_SET14_FRAC_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET12TO15_FRAC_CDR_FFE_POST2_COEFF_SET14_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET12TO15_FRAC_CDR_FFE_POST2_COEFF_SET14_FRAC_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET12TO15_FRAC_CDR_FFE_POST2_COEFF_SET14_FRAC_BF_DEF (0x00000000)

///< set15 of cdr ffe post2 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET12TO15_FRAC_CDR_FFE_POST2_COEFF_SET15_FRAC_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET12TO15_FRAC_CDR_FFE_POST2_COEFF_SET15_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET12TO15_FRAC_CDR_FFE_POST2_COEFF_SET15_FRAC_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET12TO15_FRAC_CDR_FFE_POST2_COEFF_SET15_FRAC_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_POST3_SET0TO3_FRAC register description at address offset 0xb00
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_post3_set0to3_frac
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_POST3_COEFF_SET0_FRAC : 8;
    ///< set0 of cdr ffe post3 coeff frac
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_POST3_COEFF_SET1_FRAC : 8;
    ///< set1 of cdr ffe post3 coeff frac
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_POST3_COEFF_SET2_FRAC : 8;
    ///< set2 of cdr ffe post3 coeff frac
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_POST3_COEFF_SET3_FRAC : 8;
    ///< set3 of cdr ffe post3 coeff frac
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_post3_set0to3_frac_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET0TO3_FRAC_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET0TO3_FRAC_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET0TO3_FRAC_WR_MASK (0xffffffffU)


///< set0 of cdr ffe post3 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET0TO3_FRAC_CDR_FFE_POST3_COEFF_SET0_FRAC_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET0TO3_FRAC_CDR_FFE_POST3_COEFF_SET0_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET0TO3_FRAC_CDR_FFE_POST3_COEFF_SET0_FRAC_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET0TO3_FRAC_CDR_FFE_POST3_COEFF_SET0_FRAC_BF_DEF (0x00000000)

///< set1 of cdr ffe post3 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET0TO3_FRAC_CDR_FFE_POST3_COEFF_SET1_FRAC_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET0TO3_FRAC_CDR_FFE_POST3_COEFF_SET1_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET0TO3_FRAC_CDR_FFE_POST3_COEFF_SET1_FRAC_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET0TO3_FRAC_CDR_FFE_POST3_COEFF_SET1_FRAC_BF_DEF (0x00000000)

///< set2 of cdr ffe post3 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET0TO3_FRAC_CDR_FFE_POST3_COEFF_SET2_FRAC_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET0TO3_FRAC_CDR_FFE_POST3_COEFF_SET2_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET0TO3_FRAC_CDR_FFE_POST3_COEFF_SET2_FRAC_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET0TO3_FRAC_CDR_FFE_POST3_COEFF_SET2_FRAC_BF_DEF (0x00000000)

///< set3 of cdr ffe post3 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET0TO3_FRAC_CDR_FFE_POST3_COEFF_SET3_FRAC_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET0TO3_FRAC_CDR_FFE_POST3_COEFF_SET3_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET0TO3_FRAC_CDR_FFE_POST3_COEFF_SET3_FRAC_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET0TO3_FRAC_CDR_FFE_POST3_COEFF_SET3_FRAC_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_POST3_SET4TO7_FRAC register description at address offset 0xb04
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_post3_set4to7_frac
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_POST3_COEFF_SET4_FRAC : 8;
    ///< set4 of cdr ffe post3 coeff frac
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_POST3_COEFF_SET5_FRAC : 8;
    ///< set5 of cdr ffe post3 coeff frac
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_POST3_COEFF_SET6_FRAC : 8;
    ///< set6 of cdr ffe post3 coeff frac
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_POST3_COEFF_SET7_FRAC : 8;
    ///< set7 of cdr ffe post3 coeff frac
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_post3_set4to7_frac_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET4TO7_FRAC_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET4TO7_FRAC_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET4TO7_FRAC_WR_MASK (0xffffffffU)


///< set4 of cdr ffe post3 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET4TO7_FRAC_CDR_FFE_POST3_COEFF_SET4_FRAC_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET4TO7_FRAC_CDR_FFE_POST3_COEFF_SET4_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET4TO7_FRAC_CDR_FFE_POST3_COEFF_SET4_FRAC_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET4TO7_FRAC_CDR_FFE_POST3_COEFF_SET4_FRAC_BF_DEF (0x00000000)

///< set5 of cdr ffe post3 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET4TO7_FRAC_CDR_FFE_POST3_COEFF_SET5_FRAC_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET4TO7_FRAC_CDR_FFE_POST3_COEFF_SET5_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET4TO7_FRAC_CDR_FFE_POST3_COEFF_SET5_FRAC_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET4TO7_FRAC_CDR_FFE_POST3_COEFF_SET5_FRAC_BF_DEF (0x00000000)

///< set6 of cdr ffe post3 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET4TO7_FRAC_CDR_FFE_POST3_COEFF_SET6_FRAC_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET4TO7_FRAC_CDR_FFE_POST3_COEFF_SET6_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET4TO7_FRAC_CDR_FFE_POST3_COEFF_SET6_FRAC_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET4TO7_FRAC_CDR_FFE_POST3_COEFF_SET6_FRAC_BF_DEF (0x00000000)

///< set7 of cdr ffe post3 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET4TO7_FRAC_CDR_FFE_POST3_COEFF_SET7_FRAC_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET4TO7_FRAC_CDR_FFE_POST3_COEFF_SET7_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET4TO7_FRAC_CDR_FFE_POST3_COEFF_SET7_FRAC_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET4TO7_FRAC_CDR_FFE_POST3_COEFF_SET7_FRAC_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_POST3_SET8TO11_FRAC register description at address offset 0xb08
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_post3_set8to11_frac
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_POST3_COEFF_SET8_FRAC : 8;
    ///< set8 of cdr ffe post3 coeff frac
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_POST3_COEFF_SET9_FRAC : 8;
    ///< set9 of cdr ffe post3 coeff frac
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_POST3_COEFF_SET10_FRAC : 8;
    ///< set10 of cdr ffe post3 coeff frac
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_POST3_COEFF_SET11_FRAC : 8;
    ///< set11 of cdr ffe post3 coeff frac
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_post3_set8to11_frac_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET8TO11_FRAC_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET8TO11_FRAC_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET8TO11_FRAC_WR_MASK (0xffffffffU)


///< set8 of cdr ffe post3 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET8TO11_FRAC_CDR_FFE_POST3_COEFF_SET8_FRAC_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET8TO11_FRAC_CDR_FFE_POST3_COEFF_SET8_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET8TO11_FRAC_CDR_FFE_POST3_COEFF_SET8_FRAC_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET8TO11_FRAC_CDR_FFE_POST3_COEFF_SET8_FRAC_BF_DEF (0x00000000)

///< set9 of cdr ffe post3 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET8TO11_FRAC_CDR_FFE_POST3_COEFF_SET9_FRAC_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET8TO11_FRAC_CDR_FFE_POST3_COEFF_SET9_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET8TO11_FRAC_CDR_FFE_POST3_COEFF_SET9_FRAC_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET8TO11_FRAC_CDR_FFE_POST3_COEFF_SET9_FRAC_BF_DEF (0x00000000)

///< set10 of cdr ffe post3 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET8TO11_FRAC_CDR_FFE_POST3_COEFF_SET10_FRAC_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET8TO11_FRAC_CDR_FFE_POST3_COEFF_SET10_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET8TO11_FRAC_CDR_FFE_POST3_COEFF_SET10_FRAC_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET8TO11_FRAC_CDR_FFE_POST3_COEFF_SET10_FRAC_BF_DEF (0x00000000)

///< set11 of cdr ffe post3 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET8TO11_FRAC_CDR_FFE_POST3_COEFF_SET11_FRAC_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET8TO11_FRAC_CDR_FFE_POST3_COEFF_SET11_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET8TO11_FRAC_CDR_FFE_POST3_COEFF_SET11_FRAC_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET8TO11_FRAC_CDR_FFE_POST3_COEFF_SET11_FRAC_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_POST3_SET12TO15_FRAC register description at address offset 0xb0c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_post3_set12to15_frac
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_POST3_COEFF_SET12_FRAC : 8;
    ///< set12 of cdr ffe post3 coeff frac
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_POST3_COEFF_SET13_FRAC : 8;
    ///< set13 of cdr ffe post3 coeff frac
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_POST3_COEFF_SET14_FRAC : 8;
    ///< set14 of cdr ffe post3 coeff frac
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_POST3_COEFF_SET15_FRAC : 8;
    ///< set15 of cdr ffe post3 coeff frac
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_post3_set12to15_frac_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET12TO15_FRAC_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET12TO15_FRAC_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET12TO15_FRAC_WR_MASK (0xffffffffU)


///< set12 of cdr ffe post3 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET12TO15_FRAC_CDR_FFE_POST3_COEFF_SET12_FRAC_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET12TO15_FRAC_CDR_FFE_POST3_COEFF_SET12_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET12TO15_FRAC_CDR_FFE_POST3_COEFF_SET12_FRAC_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET12TO15_FRAC_CDR_FFE_POST3_COEFF_SET12_FRAC_BF_DEF (0x00000000)

///< set13 of cdr ffe post3 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET12TO15_FRAC_CDR_FFE_POST3_COEFF_SET13_FRAC_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET12TO15_FRAC_CDR_FFE_POST3_COEFF_SET13_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET12TO15_FRAC_CDR_FFE_POST3_COEFF_SET13_FRAC_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET12TO15_FRAC_CDR_FFE_POST3_COEFF_SET13_FRAC_BF_DEF (0x00000000)

///< set14 of cdr ffe post3 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET12TO15_FRAC_CDR_FFE_POST3_COEFF_SET14_FRAC_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET12TO15_FRAC_CDR_FFE_POST3_COEFF_SET14_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET12TO15_FRAC_CDR_FFE_POST3_COEFF_SET14_FRAC_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET12TO15_FRAC_CDR_FFE_POST3_COEFF_SET14_FRAC_BF_DEF (0x00000000)

///< set15 of cdr ffe post3 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET12TO15_FRAC_CDR_FFE_POST3_COEFF_SET15_FRAC_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET12TO15_FRAC_CDR_FFE_POST3_COEFF_SET15_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET12TO15_FRAC_CDR_FFE_POST3_COEFF_SET15_FRAC_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET12TO15_FRAC_CDR_FFE_POST3_COEFF_SET15_FRAC_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_POST4_SET0TO3_FRAC register description at address offset 0xb10
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_post4_set0to3_frac
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_POST4_COEFF_SET0_FRAC : 8;
    ///< set0 of cdr ffe post4 coeff frac
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_POST4_COEFF_SET1_FRAC : 8;
    ///< set1 of cdr ffe post4 coeff frac
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_POST4_COEFF_SET2_FRAC : 8;
    ///< set2 of cdr ffe post4 coeff frac
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_POST4_COEFF_SET3_FRAC : 8;
    ///< set3 of cdr ffe post4 coeff frac
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_post4_set0to3_frac_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET0TO3_FRAC_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET0TO3_FRAC_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET0TO3_FRAC_WR_MASK (0xffffffffU)


///< set0 of cdr ffe post4 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET0TO3_FRAC_CDR_FFE_POST4_COEFF_SET0_FRAC_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET0TO3_FRAC_CDR_FFE_POST4_COEFF_SET0_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET0TO3_FRAC_CDR_FFE_POST4_COEFF_SET0_FRAC_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET0TO3_FRAC_CDR_FFE_POST4_COEFF_SET0_FRAC_BF_DEF (0x00000000)

///< set1 of cdr ffe post4 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET0TO3_FRAC_CDR_FFE_POST4_COEFF_SET1_FRAC_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET0TO3_FRAC_CDR_FFE_POST4_COEFF_SET1_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET0TO3_FRAC_CDR_FFE_POST4_COEFF_SET1_FRAC_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET0TO3_FRAC_CDR_FFE_POST4_COEFF_SET1_FRAC_BF_DEF (0x00000000)

///< set2 of cdr ffe post4 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET0TO3_FRAC_CDR_FFE_POST4_COEFF_SET2_FRAC_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET0TO3_FRAC_CDR_FFE_POST4_COEFF_SET2_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET0TO3_FRAC_CDR_FFE_POST4_COEFF_SET2_FRAC_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET0TO3_FRAC_CDR_FFE_POST4_COEFF_SET2_FRAC_BF_DEF (0x00000000)

///< set3 of cdr ffe post4 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET0TO3_FRAC_CDR_FFE_POST4_COEFF_SET3_FRAC_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET0TO3_FRAC_CDR_FFE_POST4_COEFF_SET3_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET0TO3_FRAC_CDR_FFE_POST4_COEFF_SET3_FRAC_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET0TO3_FRAC_CDR_FFE_POST4_COEFF_SET3_FRAC_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_POST4_SET4TO7_FRAC register description at address offset 0xb14
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_post4_set4to7_frac
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_POST4_COEFF_SET4_FRAC : 8;
    ///< set4 of cdr ffe post4 coeff frac
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_POST4_COEFF_SET5_FRAC : 8;
    ///< set5 of cdr ffe post4 coeff frac
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_POST4_COEFF_SET6_FRAC : 8;
    ///< set6 of cdr ffe post4 coeff frac
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_POST4_COEFF_SET7_FRAC : 8;
    ///< set7 of cdr ffe post4 coeff frac
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_post4_set4to7_frac_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET4TO7_FRAC_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET4TO7_FRAC_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET4TO7_FRAC_WR_MASK (0xffffffffU)


///< set4 of cdr ffe post4 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET4TO7_FRAC_CDR_FFE_POST4_COEFF_SET4_FRAC_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET4TO7_FRAC_CDR_FFE_POST4_COEFF_SET4_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET4TO7_FRAC_CDR_FFE_POST4_COEFF_SET4_FRAC_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET4TO7_FRAC_CDR_FFE_POST4_COEFF_SET4_FRAC_BF_DEF (0x00000000)

///< set5 of cdr ffe post4 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET4TO7_FRAC_CDR_FFE_POST4_COEFF_SET5_FRAC_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET4TO7_FRAC_CDR_FFE_POST4_COEFF_SET5_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET4TO7_FRAC_CDR_FFE_POST4_COEFF_SET5_FRAC_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET4TO7_FRAC_CDR_FFE_POST4_COEFF_SET5_FRAC_BF_DEF (0x00000000)

///< set6 of cdr ffe post4 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET4TO7_FRAC_CDR_FFE_POST4_COEFF_SET6_FRAC_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET4TO7_FRAC_CDR_FFE_POST4_COEFF_SET6_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET4TO7_FRAC_CDR_FFE_POST4_COEFF_SET6_FRAC_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET4TO7_FRAC_CDR_FFE_POST4_COEFF_SET6_FRAC_BF_DEF (0x00000000)

///< set7 of cdr ffe post4 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET4TO7_FRAC_CDR_FFE_POST4_COEFF_SET7_FRAC_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET4TO7_FRAC_CDR_FFE_POST4_COEFF_SET7_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET4TO7_FRAC_CDR_FFE_POST4_COEFF_SET7_FRAC_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET4TO7_FRAC_CDR_FFE_POST4_COEFF_SET7_FRAC_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_POST4_SET8TO11_FRAC register description at address offset 0xb18
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_post4_set8to11_frac
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_POST4_COEFF_SET8_FRAC : 8;
    ///< set8 of cdr ffe post4 coeff frac
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_POST4_COEFF_SET9_FRAC : 8;
    ///< set9 of cdr ffe post4 coeff frac
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_POST4_COEFF_SET10_FRAC : 8;
    ///< set10 of cdr ffe post4 coeff frac
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_POST4_COEFF_SET11_FRAC : 8;
    ///< set11 of cdr ffe post4 coeff frac
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_post4_set8to11_frac_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET8TO11_FRAC_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET8TO11_FRAC_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET8TO11_FRAC_WR_MASK (0xffffffffU)


///< set8 of cdr ffe post4 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET8TO11_FRAC_CDR_FFE_POST4_COEFF_SET8_FRAC_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET8TO11_FRAC_CDR_FFE_POST4_COEFF_SET8_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET8TO11_FRAC_CDR_FFE_POST4_COEFF_SET8_FRAC_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET8TO11_FRAC_CDR_FFE_POST4_COEFF_SET8_FRAC_BF_DEF (0x00000000)

///< set9 of cdr ffe post4 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET8TO11_FRAC_CDR_FFE_POST4_COEFF_SET9_FRAC_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET8TO11_FRAC_CDR_FFE_POST4_COEFF_SET9_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET8TO11_FRAC_CDR_FFE_POST4_COEFF_SET9_FRAC_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET8TO11_FRAC_CDR_FFE_POST4_COEFF_SET9_FRAC_BF_DEF (0x00000000)

///< set10 of cdr ffe post4 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET8TO11_FRAC_CDR_FFE_POST4_COEFF_SET10_FRAC_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET8TO11_FRAC_CDR_FFE_POST4_COEFF_SET10_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET8TO11_FRAC_CDR_FFE_POST4_COEFF_SET10_FRAC_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET8TO11_FRAC_CDR_FFE_POST4_COEFF_SET10_FRAC_BF_DEF (0x00000000)

///< set11 of cdr ffe post4 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET8TO11_FRAC_CDR_FFE_POST4_COEFF_SET11_FRAC_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET8TO11_FRAC_CDR_FFE_POST4_COEFF_SET11_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET8TO11_FRAC_CDR_FFE_POST4_COEFF_SET11_FRAC_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET8TO11_FRAC_CDR_FFE_POST4_COEFF_SET11_FRAC_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_POST4_SET12TO15_FRAC register description at address offset 0xb1c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_post4_set12to15_frac
  * Rx SAR Array valid
  */

typedef union {
  struct {
    uint32_t CDR_FFE_POST4_COEFF_SET12_FRAC : 8;
    ///< set12 of cdr ffe post4 coeff frac
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_POST4_COEFF_SET13_FRAC : 8;
    ///< set13 of cdr ffe post4 coeff frac
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_POST4_COEFF_SET14_FRAC : 8;
    ///< set14 of cdr ffe post4 coeff frac
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t CDR_FFE_POST4_COEFF_SET15_FRAC : 8;
    ///< set15 of cdr ffe post4 coeff frac
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_post4_set12to15_frac_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET12TO15_FRAC_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET12TO15_FRAC_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET12TO15_FRAC_WR_MASK (0xffffffffU)


///< set12 of cdr ffe post4 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET12TO15_FRAC_CDR_FFE_POST4_COEFF_SET12_FRAC_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET12TO15_FRAC_CDR_FFE_POST4_COEFF_SET12_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET12TO15_FRAC_CDR_FFE_POST4_COEFF_SET12_FRAC_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET12TO15_FRAC_CDR_FFE_POST4_COEFF_SET12_FRAC_BF_DEF (0x00000000)

///< set13 of cdr ffe post4 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET12TO15_FRAC_CDR_FFE_POST4_COEFF_SET13_FRAC_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET12TO15_FRAC_CDR_FFE_POST4_COEFF_SET13_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET12TO15_FRAC_CDR_FFE_POST4_COEFF_SET13_FRAC_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET12TO15_FRAC_CDR_FFE_POST4_COEFF_SET13_FRAC_BF_DEF (0x00000000)

///< set14 of cdr ffe post4 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET12TO15_FRAC_CDR_FFE_POST4_COEFF_SET14_FRAC_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET12TO15_FRAC_CDR_FFE_POST4_COEFF_SET14_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET12TO15_FRAC_CDR_FFE_POST4_COEFF_SET14_FRAC_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET12TO15_FRAC_CDR_FFE_POST4_COEFF_SET14_FRAC_BF_DEF (0x00000000)

///< set15 of cdr ffe post4 coeff frac
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET12TO15_FRAC_CDR_FFE_POST4_COEFF_SET15_FRAC_BF_OFF (24)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET12TO15_FRAC_CDR_FFE_POST4_COEFF_SET15_FRAC_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET12TO15_FRAC_CDR_FFE_POST4_COEFF_SET15_FRAC_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET12TO15_FRAC_CDR_FFE_POST4_COEFF_SET15_FRAC_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_SATURATION_STATUS_4 register description at address offset 0xb20
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/saturation_status_4
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_TAP_PRE3_SAT : 1;
    ///< cdr_ffe_tap_pre3 saturated
    ///< AccessType="RO/C/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_TAP_PRE2_SAT : 1;
    ///< cdr_ffe_tap_pre2 saturated
    ///< AccessType="RO/C/V" BitOffset="1" ResetValue="0x0"
    uint32_t CDR_FFE_TAP_PRE1_SAT : 1;
    ///< cdr_ffe_tap_pre1 saturated
    ///< AccessType="RO/C/V" BitOffset="2" ResetValue="0x0"
    uint32_t CDR_FFE_TAP_POST1_SAT : 1;
    ///< cdr_ffe_tap_post1 saturated
    ///< AccessType="RO/C/V" BitOffset="3" ResetValue="0x0"
    uint32_t CDR_FFE_TAP_POST2_SAT : 1;
    ///< cdr_ffe_tap_post2 saturated
    ///< AccessType="RO/C/V" BitOffset="4" ResetValue="0x0"
    uint32_t CDR_FFE_TAP_POST3_SAT : 1;
    ///< cdr_ffe_tap_post3 saturated
    ///< AccessType="RO/C/V" BitOffset="5" ResetValue="0x0"
    uint32_t CDR_FFE_TAP_POST4_SAT : 1;
    ///< cdr_ffe_tap_post4 saturated
    ///< AccessType="RO/C/V" BitOffset="6" ResetValue="0x0"
    uint32_t  : 25;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_saturation_stat_4_reg_t;

#define PMA_RXWORD_MSG_SATURATION_STAT_4_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_SATURATION_STAT_4_RD_MASK (0x0000007fU)
#define PMA_RXWORD_MSG_SATURATION_STAT_4_WR_MASK (0x00000000U)


///< cdr_ffe_tap_pre3 saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_4_CDR_FFE_TAP_PRE3_SAT_BF_OFF ( 0)
#define PMA_RXWORD_MSG_SATURATION_STAT_4_CDR_FFE_TAP_PRE3_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_4_CDR_FFE_TAP_PRE3_SAT_BF_MSK (0x00000001)
#define PMA_RXWORD_MSG_SATURATION_STAT_4_CDR_FFE_TAP_PRE3_SAT_BF_DEF (0x00000000)

///< cdr_ffe_tap_pre2 saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_4_CDR_FFE_TAP_PRE2_SAT_BF_OFF ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_4_CDR_FFE_TAP_PRE2_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_4_CDR_FFE_TAP_PRE2_SAT_BF_MSK (0x00000002)
#define PMA_RXWORD_MSG_SATURATION_STAT_4_CDR_FFE_TAP_PRE2_SAT_BF_DEF (0x00000000)

///< cdr_ffe_tap_pre1 saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_4_CDR_FFE_TAP_PRE1_SAT_BF_OFF ( 2)
#define PMA_RXWORD_MSG_SATURATION_STAT_4_CDR_FFE_TAP_PRE1_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_4_CDR_FFE_TAP_PRE1_SAT_BF_MSK (0x00000004)
#define PMA_RXWORD_MSG_SATURATION_STAT_4_CDR_FFE_TAP_PRE1_SAT_BF_DEF (0x00000000)

///< cdr_ffe_tap_post1 saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_4_CDR_FFE_TAP_POST1_SAT_BF_OFF ( 3)
#define PMA_RXWORD_MSG_SATURATION_STAT_4_CDR_FFE_TAP_POST1_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_4_CDR_FFE_TAP_POST1_SAT_BF_MSK (0x00000008)
#define PMA_RXWORD_MSG_SATURATION_STAT_4_CDR_FFE_TAP_POST1_SAT_BF_DEF (0x00000000)

///< cdr_ffe_tap_post2 saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_4_CDR_FFE_TAP_POST2_SAT_BF_OFF ( 4)
#define PMA_RXWORD_MSG_SATURATION_STAT_4_CDR_FFE_TAP_POST2_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_4_CDR_FFE_TAP_POST2_SAT_BF_MSK (0x00000010)
#define PMA_RXWORD_MSG_SATURATION_STAT_4_CDR_FFE_TAP_POST2_SAT_BF_DEF (0x00000000)

///< cdr_ffe_tap_post3 saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_4_CDR_FFE_TAP_POST3_SAT_BF_OFF ( 5)
#define PMA_RXWORD_MSG_SATURATION_STAT_4_CDR_FFE_TAP_POST3_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_4_CDR_FFE_TAP_POST3_SAT_BF_MSK (0x00000020)
#define PMA_RXWORD_MSG_SATURATION_STAT_4_CDR_FFE_TAP_POST3_SAT_BF_DEF (0x00000000)

///< cdr_ffe_tap_post4 saturated
#define PMA_RXWORD_MSG_SATURATION_STAT_4_CDR_FFE_TAP_POST4_SAT_BF_OFF ( 6)
#define PMA_RXWORD_MSG_SATURATION_STAT_4_CDR_FFE_TAP_POST4_SAT_BF_WID ( 1)
#define PMA_RXWORD_MSG_SATURATION_STAT_4_CDR_FFE_TAP_POST4_SAT_BF_MSK (0x00000040)
#define PMA_RXWORD_MSG_SATURATION_STAT_4_CDR_FFE_TAP_POST4_SAT_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_AFFE_IF_CONTROL_0 register description at address offset 0xb24
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/affe_if_control_0
  * placeholder
  */

typedef union {
  struct {
    uint32_t AFFE_TAPS_BACKUP : 1;
    ///< Write one to backup all sets of  current affe taps to HW cache, self
    ///< cleared
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t AFFE_TAPS_BACKUP_LOAD : 1;
    ///< Write one to load backup sets of  cached affe taps to current affe
    ///< taps, self cleared
    ///< AccessType="RW/V" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_affe_if_ctrl_0_reg_t;

#define PMA_RXWORD_MSG_AFFE_IF_CTRL_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_AFFE_IF_CTRL_0_RD_MASK (0x00000003U)
#define PMA_RXWORD_MSG_AFFE_IF_CTRL_0_WR_MASK (0x00000003U)


///< Write one to backup all sets of  current affe taps to HW cache, self
///< cleared
#define PMA_RXWORD_MSG_AFFE_IF_CTRL_0_AFFE_TAPS_BACKUP_BF_OFF ( 0)
#define PMA_RXWORD_MSG_AFFE_IF_CTRL_0_AFFE_TAPS_BACKUP_BF_WID ( 1)
#define PMA_RXWORD_MSG_AFFE_IF_CTRL_0_AFFE_TAPS_BACKUP_BF_MSK (0x00000001)
#define PMA_RXWORD_MSG_AFFE_IF_CTRL_0_AFFE_TAPS_BACKUP_BF_DEF (0x00000000)

///< Write one to load backup sets of  cached affe taps to current affe
///< taps, self cleared
#define PMA_RXWORD_MSG_AFFE_IF_CTRL_0_AFFE_TAPS_BACKUP_LOAD_BF_OFF ( 1)
#define PMA_RXWORD_MSG_AFFE_IF_CTRL_0_AFFE_TAPS_BACKUP_LOAD_BF_WID ( 1)
#define PMA_RXWORD_MSG_AFFE_IF_CTRL_0_AFFE_TAPS_BACKUP_LOAD_BF_MSK (0x00000002)
#define PMA_RXWORD_MSG_AFFE_IF_CTRL_0_AFFE_TAPS_BACKUP_LOAD_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B0_SAR_0TO3 register description at address offset 0xb28
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b0_sar_0to3
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B0_G0_SAR0 : 8;
    ///< OPS Sar0 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B0_G0_SAR1 : 8;
    ///< OPS Sar1 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B0_G0_SAR2 : 8;
    ///< OPS Sar2 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B0_G0_SAR3 : 8;
    ///< OPS Sar3 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b0_sar_0to3_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_0TO3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_0TO3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_0TO3_WR_MASK (0xffffffffU)


///< OPS Sar0 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_0TO3_OPS_TAPS_B0_G0_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_0TO3_OPS_TAPS_B0_G0_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_0TO3_OPS_TAPS_B0_G0_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_0TO3_OPS_TAPS_B0_G0_SAR0_BF_DEF (0x00000000)

///< OPS Sar1 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_0TO3_OPS_TAPS_B0_G0_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_0TO3_OPS_TAPS_B0_G0_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_0TO3_OPS_TAPS_B0_G0_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_0TO3_OPS_TAPS_B0_G0_SAR1_BF_DEF (0x00000000)

///< OPS Sar2 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_0TO3_OPS_TAPS_B0_G0_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_0TO3_OPS_TAPS_B0_G0_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_0TO3_OPS_TAPS_B0_G0_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_0TO3_OPS_TAPS_B0_G0_SAR2_BF_DEF (0x00000000)

///< OPS Sar3 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_0TO3_OPS_TAPS_B0_G0_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_0TO3_OPS_TAPS_B0_G0_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_0TO3_OPS_TAPS_B0_G0_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_0TO3_OPS_TAPS_B0_G0_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B0_SAR_4TO7 register description at address offset 0xb2c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b0_sar_4to7
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B0_G0_SAR4 : 8;
    ///< OPS Sar4 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B0_G0_SAR5 : 8;
    ///< OPS Sar5 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B0_G0_SAR6 : 8;
    ///< OPS Sar6 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B0_G0_SAR7 : 8;
    ///< OPS Sar7 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b0_sar_4to7_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_4TO7_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_4TO7_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_4TO7_WR_MASK (0xffffffffU)


///< OPS Sar4 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_4TO7_OPS_TAPS_B0_G0_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_4TO7_OPS_TAPS_B0_G0_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_4TO7_OPS_TAPS_B0_G0_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_4TO7_OPS_TAPS_B0_G0_SAR4_BF_DEF (0x00000000)

///< OPS Sar5 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_4TO7_OPS_TAPS_B0_G0_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_4TO7_OPS_TAPS_B0_G0_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_4TO7_OPS_TAPS_B0_G0_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_4TO7_OPS_TAPS_B0_G0_SAR5_BF_DEF (0x00000000)

///< OPS Sar6 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_4TO7_OPS_TAPS_B0_G0_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_4TO7_OPS_TAPS_B0_G0_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_4TO7_OPS_TAPS_B0_G0_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_4TO7_OPS_TAPS_B0_G0_SAR6_BF_DEF (0x00000000)

///< OPS Sar7 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_4TO7_OPS_TAPS_B0_G0_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_4TO7_OPS_TAPS_B0_G0_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_4TO7_OPS_TAPS_B0_G0_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_4TO7_OPS_TAPS_B0_G0_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B0_SAR_8TO11 register description at address offset 0xb30
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b0_sar_8to11
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B0_G1_SAR0 : 8;
    ///< OPS Sar8  tap value on bit 0
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B0_G1_SAR1 : 8;
    ///< OPS Sar9  tap value on bit 0
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B0_G1_SAR2 : 8;
    ///< OPS Sar10 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B0_G1_SAR3 : 8;
    ///< OPS Sar11 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b0_sar_8to11_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_8TO11_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_8TO11_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_8TO11_WR_MASK (0xffffffffU)


///< OPS Sar8  tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_8TO11_OPS_TAPS_B0_G1_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_8TO11_OPS_TAPS_B0_G1_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_8TO11_OPS_TAPS_B0_G1_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_8TO11_OPS_TAPS_B0_G1_SAR0_BF_DEF (0x00000000)

///< OPS Sar9  tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_8TO11_OPS_TAPS_B0_G1_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_8TO11_OPS_TAPS_B0_G1_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_8TO11_OPS_TAPS_B0_G1_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_8TO11_OPS_TAPS_B0_G1_SAR1_BF_DEF (0x00000000)

///< OPS Sar10 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_8TO11_OPS_TAPS_B0_G1_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_8TO11_OPS_TAPS_B0_G1_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_8TO11_OPS_TAPS_B0_G1_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_8TO11_OPS_TAPS_B0_G1_SAR2_BF_DEF (0x00000000)

///< OPS Sar11 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_8TO11_OPS_TAPS_B0_G1_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_8TO11_OPS_TAPS_B0_G1_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_8TO11_OPS_TAPS_B0_G1_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_8TO11_OPS_TAPS_B0_G1_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B0_SAR_12TO15 register description at address offset 0xb34
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b0_sar_12to15
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B0_G1_SAR4 : 8;
    ///< OPS Sar12 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B0_G1_SAR5 : 8;
    ///< OPS Sar13 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B0_G1_SAR6 : 8;
    ///< OPS Sar14 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B0_G1_SAR7 : 8;
    ///< OPS Sar15 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b0_sar_12to15_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_12TO15_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_12TO15_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_12TO15_WR_MASK (0xffffffffU)


///< OPS Sar12 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_12TO15_OPS_TAPS_B0_G1_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_12TO15_OPS_TAPS_B0_G1_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_12TO15_OPS_TAPS_B0_G1_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_12TO15_OPS_TAPS_B0_G1_SAR4_BF_DEF (0x00000000)

///< OPS Sar13 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_12TO15_OPS_TAPS_B0_G1_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_12TO15_OPS_TAPS_B0_G1_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_12TO15_OPS_TAPS_B0_G1_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_12TO15_OPS_TAPS_B0_G1_SAR5_BF_DEF (0x00000000)

///< OPS Sar14 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_12TO15_OPS_TAPS_B0_G1_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_12TO15_OPS_TAPS_B0_G1_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_12TO15_OPS_TAPS_B0_G1_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_12TO15_OPS_TAPS_B0_G1_SAR6_BF_DEF (0x00000000)

///< OPS Sar15 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_12TO15_OPS_TAPS_B0_G1_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_12TO15_OPS_TAPS_B0_G1_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_12TO15_OPS_TAPS_B0_G1_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_12TO15_OPS_TAPS_B0_G1_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B0_SAR_16TO19 register description at address offset 0xb38
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b0_sar_16to19
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B0_G2_SAR0 : 8;
    ///< OPS Sar16 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B0_G2_SAR1 : 8;
    ///< OPS Sar17 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B0_G2_SAR2 : 8;
    ///< OPS Sar18 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B0_G2_SAR3 : 8;
    ///< OPS Sar19 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b0_sar_16to19_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_16TO19_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_16TO19_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_16TO19_WR_MASK (0xffffffffU)


///< OPS Sar16 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_16TO19_OPS_TAPS_B0_G2_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_16TO19_OPS_TAPS_B0_G2_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_16TO19_OPS_TAPS_B0_G2_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_16TO19_OPS_TAPS_B0_G2_SAR0_BF_DEF (0x00000000)

///< OPS Sar17 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_16TO19_OPS_TAPS_B0_G2_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_16TO19_OPS_TAPS_B0_G2_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_16TO19_OPS_TAPS_B0_G2_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_16TO19_OPS_TAPS_B0_G2_SAR1_BF_DEF (0x00000000)

///< OPS Sar18 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_16TO19_OPS_TAPS_B0_G2_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_16TO19_OPS_TAPS_B0_G2_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_16TO19_OPS_TAPS_B0_G2_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_16TO19_OPS_TAPS_B0_G2_SAR2_BF_DEF (0x00000000)

///< OPS Sar19 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_16TO19_OPS_TAPS_B0_G2_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_16TO19_OPS_TAPS_B0_G2_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_16TO19_OPS_TAPS_B0_G2_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_16TO19_OPS_TAPS_B0_G2_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B0_SAR_20TO23 register description at address offset 0xb3c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b0_sar_20to23
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B0_G2_SAR4 : 8;
    ///< OPS Sar20 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B0_G2_SAR5 : 8;
    ///< OPS Sar21 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B0_G2_SAR6 : 8;
    ///< OPS Sar22 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B0_G2_SAR7 : 8;
    ///< OPS Sar23 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b0_sar_20to23_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_20TO23_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_20TO23_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_20TO23_WR_MASK (0xffffffffU)


///< OPS Sar20 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_20TO23_OPS_TAPS_B0_G2_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_20TO23_OPS_TAPS_B0_G2_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_20TO23_OPS_TAPS_B0_G2_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_20TO23_OPS_TAPS_B0_G2_SAR4_BF_DEF (0x00000000)

///< OPS Sar21 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_20TO23_OPS_TAPS_B0_G2_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_20TO23_OPS_TAPS_B0_G2_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_20TO23_OPS_TAPS_B0_G2_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_20TO23_OPS_TAPS_B0_G2_SAR5_BF_DEF (0x00000000)

///< OPS Sar22 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_20TO23_OPS_TAPS_B0_G2_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_20TO23_OPS_TAPS_B0_G2_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_20TO23_OPS_TAPS_B0_G2_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_20TO23_OPS_TAPS_B0_G2_SAR6_BF_DEF (0x00000000)

///< OPS Sar23 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_20TO23_OPS_TAPS_B0_G2_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_20TO23_OPS_TAPS_B0_G2_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_20TO23_OPS_TAPS_B0_G2_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_20TO23_OPS_TAPS_B0_G2_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B0_SAR_24TO27 register description at address offset 0xb40
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b0_sar_24to27
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B0_G3_SAR0 : 8;
    ///< OPS Sar24 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B0_G3_SAR1 : 8;
    ///< OPS Sar25 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B0_G3_SAR2 : 8;
    ///< OPS Sar26 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B0_G3_SAR3 : 8;
    ///< OPS Sar27 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b0_sar_24to27_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_24TO27_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_24TO27_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_24TO27_WR_MASK (0xffffffffU)


///< OPS Sar24 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_24TO27_OPS_TAPS_B0_G3_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_24TO27_OPS_TAPS_B0_G3_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_24TO27_OPS_TAPS_B0_G3_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_24TO27_OPS_TAPS_B0_G3_SAR0_BF_DEF (0x00000000)

///< OPS Sar25 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_24TO27_OPS_TAPS_B0_G3_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_24TO27_OPS_TAPS_B0_G3_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_24TO27_OPS_TAPS_B0_G3_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_24TO27_OPS_TAPS_B0_G3_SAR1_BF_DEF (0x00000000)

///< OPS Sar26 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_24TO27_OPS_TAPS_B0_G3_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_24TO27_OPS_TAPS_B0_G3_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_24TO27_OPS_TAPS_B0_G3_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_24TO27_OPS_TAPS_B0_G3_SAR2_BF_DEF (0x00000000)

///< OPS Sar27 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_24TO27_OPS_TAPS_B0_G3_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_24TO27_OPS_TAPS_B0_G3_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_24TO27_OPS_TAPS_B0_G3_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_24TO27_OPS_TAPS_B0_G3_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B0_SAR_28TO31 register description at address offset 0xb44
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b0_sar_28to31
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B0_G3_SAR4 : 8;
    ///< OPS Sar28 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B0_G3_SAR5 : 8;
    ///< OPS Sar29 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B0_G3_SAR6 : 8;
    ///< OPS Sar30 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B0_G3_SAR7 : 8;
    ///< OPS Sar31 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b0_sar_28to31_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_28TO31_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_28TO31_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_28TO31_WR_MASK (0xffffffffU)


///< OPS Sar28 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_28TO31_OPS_TAPS_B0_G3_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_28TO31_OPS_TAPS_B0_G3_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_28TO31_OPS_TAPS_B0_G3_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_28TO31_OPS_TAPS_B0_G3_SAR4_BF_DEF (0x00000000)

///< OPS Sar29 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_28TO31_OPS_TAPS_B0_G3_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_28TO31_OPS_TAPS_B0_G3_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_28TO31_OPS_TAPS_B0_G3_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_28TO31_OPS_TAPS_B0_G3_SAR5_BF_DEF (0x00000000)

///< OPS Sar30 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_28TO31_OPS_TAPS_B0_G3_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_28TO31_OPS_TAPS_B0_G3_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_28TO31_OPS_TAPS_B0_G3_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_28TO31_OPS_TAPS_B0_G3_SAR6_BF_DEF (0x00000000)

///< OPS Sar31 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_28TO31_OPS_TAPS_B0_G3_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_28TO31_OPS_TAPS_B0_G3_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_28TO31_OPS_TAPS_B0_G3_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_28TO31_OPS_TAPS_B0_G3_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B0_SAR_32TO35 register description at address offset 0xb48
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b0_sar_32to35
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B0_G4_SAR0 : 8;
    ///< OPS Sar32 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B0_G4_SAR1 : 8;
    ///< OPS Sar33 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B0_G4_SAR2 : 8;
    ///< OPS Sar34 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B0_G4_SAR3 : 8;
    ///< OPS Sar35 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b0_sar_32to35_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_32TO35_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_32TO35_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_32TO35_WR_MASK (0xffffffffU)


///< OPS Sar32 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_32TO35_OPS_TAPS_B0_G4_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_32TO35_OPS_TAPS_B0_G4_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_32TO35_OPS_TAPS_B0_G4_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_32TO35_OPS_TAPS_B0_G4_SAR0_BF_DEF (0x00000000)

///< OPS Sar33 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_32TO35_OPS_TAPS_B0_G4_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_32TO35_OPS_TAPS_B0_G4_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_32TO35_OPS_TAPS_B0_G4_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_32TO35_OPS_TAPS_B0_G4_SAR1_BF_DEF (0x00000000)

///< OPS Sar34 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_32TO35_OPS_TAPS_B0_G4_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_32TO35_OPS_TAPS_B0_G4_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_32TO35_OPS_TAPS_B0_G4_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_32TO35_OPS_TAPS_B0_G4_SAR2_BF_DEF (0x00000000)

///< OPS Sar35 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_32TO35_OPS_TAPS_B0_G4_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_32TO35_OPS_TAPS_B0_G4_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_32TO35_OPS_TAPS_B0_G4_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_32TO35_OPS_TAPS_B0_G4_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B0_SAR_36TO39 register description at address offset 0xb4c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b0_sar_36to39
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B0_G4_SAR4 : 8;
    ///< OPS Sar36 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B0_G4_SAR5 : 8;
    ///< OPS Sar37 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B0_G4_SAR6 : 8;
    ///< OPS Sar38 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B0_G4_SAR7 : 8;
    ///< OPS Sar39 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b0_sar_36to39_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_36TO39_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_36TO39_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_36TO39_WR_MASK (0xffffffffU)


///< OPS Sar36 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_36TO39_OPS_TAPS_B0_G4_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_36TO39_OPS_TAPS_B0_G4_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_36TO39_OPS_TAPS_B0_G4_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_36TO39_OPS_TAPS_B0_G4_SAR4_BF_DEF (0x00000000)

///< OPS Sar37 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_36TO39_OPS_TAPS_B0_G4_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_36TO39_OPS_TAPS_B0_G4_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_36TO39_OPS_TAPS_B0_G4_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_36TO39_OPS_TAPS_B0_G4_SAR5_BF_DEF (0x00000000)

///< OPS Sar38 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_36TO39_OPS_TAPS_B0_G4_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_36TO39_OPS_TAPS_B0_G4_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_36TO39_OPS_TAPS_B0_G4_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_36TO39_OPS_TAPS_B0_G4_SAR6_BF_DEF (0x00000000)

///< OPS Sar39 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_36TO39_OPS_TAPS_B0_G4_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_36TO39_OPS_TAPS_B0_G4_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_36TO39_OPS_TAPS_B0_G4_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_36TO39_OPS_TAPS_B0_G4_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B0_SAR_40TO43 register description at address offset 0xb50
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b0_sar_40to43
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B0_G5_SAR0 : 8;
    ///< OPS Sar40 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B0_G5_SAR1 : 8;
    ///< OPS Sar41 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B0_G5_SAR2 : 8;
    ///< OPS Sar42 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B0_G5_SAR3 : 8;
    ///< OPS Sar43 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b0_sar_40to43_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_40TO43_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_40TO43_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_40TO43_WR_MASK (0xffffffffU)


///< OPS Sar40 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_40TO43_OPS_TAPS_B0_G5_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_40TO43_OPS_TAPS_B0_G5_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_40TO43_OPS_TAPS_B0_G5_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_40TO43_OPS_TAPS_B0_G5_SAR0_BF_DEF (0x00000000)

///< OPS Sar41 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_40TO43_OPS_TAPS_B0_G5_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_40TO43_OPS_TAPS_B0_G5_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_40TO43_OPS_TAPS_B0_G5_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_40TO43_OPS_TAPS_B0_G5_SAR1_BF_DEF (0x00000000)

///< OPS Sar42 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_40TO43_OPS_TAPS_B0_G5_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_40TO43_OPS_TAPS_B0_G5_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_40TO43_OPS_TAPS_B0_G5_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_40TO43_OPS_TAPS_B0_G5_SAR2_BF_DEF (0x00000000)

///< OPS Sar43 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_40TO43_OPS_TAPS_B0_G5_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_40TO43_OPS_TAPS_B0_G5_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_40TO43_OPS_TAPS_B0_G5_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_40TO43_OPS_TAPS_B0_G5_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B0_SAR_44TO47 register description at address offset 0xb54
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b0_sar_44to47
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B0_G5_SAR4 : 8;
    ///< OPS Sar44 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B0_G5_SAR5 : 8;
    ///< OPS Sar45 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B0_G5_SAR6 : 8;
    ///< OPS Sar46 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B0_G5_SAR7 : 8;
    ///< OPS Sar47 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b0_sar_44to47_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_44TO47_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_44TO47_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_44TO47_WR_MASK (0xffffffffU)


///< OPS Sar44 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_44TO47_OPS_TAPS_B0_G5_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_44TO47_OPS_TAPS_B0_G5_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_44TO47_OPS_TAPS_B0_G5_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_44TO47_OPS_TAPS_B0_G5_SAR4_BF_DEF (0x00000000)

///< OPS Sar45 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_44TO47_OPS_TAPS_B0_G5_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_44TO47_OPS_TAPS_B0_G5_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_44TO47_OPS_TAPS_B0_G5_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_44TO47_OPS_TAPS_B0_G5_SAR5_BF_DEF (0x00000000)

///< OPS Sar46 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_44TO47_OPS_TAPS_B0_G5_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_44TO47_OPS_TAPS_B0_G5_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_44TO47_OPS_TAPS_B0_G5_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_44TO47_OPS_TAPS_B0_G5_SAR6_BF_DEF (0x00000000)

///< OPS Sar47 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_44TO47_OPS_TAPS_B0_G5_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_44TO47_OPS_TAPS_B0_G5_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_44TO47_OPS_TAPS_B0_G5_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_44TO47_OPS_TAPS_B0_G5_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B0_SAR_48TO51 register description at address offset 0xb58
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b0_sar_48to51
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B0_G6_SAR0 : 8;
    ///< OPS Sar48 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B0_G6_SAR1 : 8;
    ///< OPS Sar49 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B0_G6_SAR2 : 8;
    ///< OPS Sar50 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B0_G6_SAR3 : 8;
    ///< OPS Sar51 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b0_sar_48to51_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_48TO51_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_48TO51_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_48TO51_WR_MASK (0xffffffffU)


///< OPS Sar48 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_48TO51_OPS_TAPS_B0_G6_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_48TO51_OPS_TAPS_B0_G6_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_48TO51_OPS_TAPS_B0_G6_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_48TO51_OPS_TAPS_B0_G6_SAR0_BF_DEF (0x00000000)

///< OPS Sar49 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_48TO51_OPS_TAPS_B0_G6_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_48TO51_OPS_TAPS_B0_G6_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_48TO51_OPS_TAPS_B0_G6_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_48TO51_OPS_TAPS_B0_G6_SAR1_BF_DEF (0x00000000)

///< OPS Sar50 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_48TO51_OPS_TAPS_B0_G6_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_48TO51_OPS_TAPS_B0_G6_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_48TO51_OPS_TAPS_B0_G6_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_48TO51_OPS_TAPS_B0_G6_SAR2_BF_DEF (0x00000000)

///< OPS Sar51 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_48TO51_OPS_TAPS_B0_G6_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_48TO51_OPS_TAPS_B0_G6_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_48TO51_OPS_TAPS_B0_G6_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_48TO51_OPS_TAPS_B0_G6_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B0_SAR_52TO55 register description at address offset 0xb5c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b0_sar_52to55
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B0_G6_SAR4 : 8;
    ///< OPS Sar52 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B0_G6_SAR5 : 8;
    ///< OPS Sar53 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B0_G6_SAR6 : 8;
    ///< OPS Sar54 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B0_G6_SAR7 : 8;
    ///< OPS Sar55 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b0_sar_52to55_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_52TO55_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_52TO55_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_52TO55_WR_MASK (0xffffffffU)


///< OPS Sar52 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_52TO55_OPS_TAPS_B0_G6_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_52TO55_OPS_TAPS_B0_G6_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_52TO55_OPS_TAPS_B0_G6_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_52TO55_OPS_TAPS_B0_G6_SAR4_BF_DEF (0x00000000)

///< OPS Sar53 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_52TO55_OPS_TAPS_B0_G6_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_52TO55_OPS_TAPS_B0_G6_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_52TO55_OPS_TAPS_B0_G6_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_52TO55_OPS_TAPS_B0_G6_SAR5_BF_DEF (0x00000000)

///< OPS Sar54 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_52TO55_OPS_TAPS_B0_G6_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_52TO55_OPS_TAPS_B0_G6_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_52TO55_OPS_TAPS_B0_G6_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_52TO55_OPS_TAPS_B0_G6_SAR6_BF_DEF (0x00000000)

///< OPS Sar55 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_52TO55_OPS_TAPS_B0_G6_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_52TO55_OPS_TAPS_B0_G6_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_52TO55_OPS_TAPS_B0_G6_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_52TO55_OPS_TAPS_B0_G6_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B0_SAR_56TO59 register description at address offset 0xb60
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b0_sar_56to59
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B0_G7_SAR0 : 8;
    ///< OPS Sar56 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B0_G7_SAR1 : 8;
    ///< OPS Sar57 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B0_G7_SAR2 : 8;
    ///< OPS Sar58 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B0_G7_SAR3 : 8;
    ///< OPS Sar59 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b0_sar_56to59_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_56TO59_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_56TO59_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_56TO59_WR_MASK (0xffffffffU)


///< OPS Sar56 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_56TO59_OPS_TAPS_B0_G7_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_56TO59_OPS_TAPS_B0_G7_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_56TO59_OPS_TAPS_B0_G7_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_56TO59_OPS_TAPS_B0_G7_SAR0_BF_DEF (0x00000000)

///< OPS Sar57 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_56TO59_OPS_TAPS_B0_G7_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_56TO59_OPS_TAPS_B0_G7_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_56TO59_OPS_TAPS_B0_G7_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_56TO59_OPS_TAPS_B0_G7_SAR1_BF_DEF (0x00000000)

///< OPS Sar58 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_56TO59_OPS_TAPS_B0_G7_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_56TO59_OPS_TAPS_B0_G7_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_56TO59_OPS_TAPS_B0_G7_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_56TO59_OPS_TAPS_B0_G7_SAR2_BF_DEF (0x00000000)

///< OPS Sar59 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_56TO59_OPS_TAPS_B0_G7_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_56TO59_OPS_TAPS_B0_G7_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_56TO59_OPS_TAPS_B0_G7_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_56TO59_OPS_TAPS_B0_G7_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B0_SAR_60TO63 register description at address offset 0xb64
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b0_sar_60to63
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B0_G7_SAR4 : 8;
    ///< OPS Sar60 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B0_G7_SAR5 : 8;
    ///< OPS Sar61 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B0_G7_SAR6 : 8;
    ///< OPS Sar62 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B0_G7_SAR7 : 8;
    ///< OPS Sar63 tap value on bit 0
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b0_sar_60to63_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_60TO63_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_60TO63_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_60TO63_WR_MASK (0xffffffffU)


///< OPS Sar60 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_60TO63_OPS_TAPS_B0_G7_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_60TO63_OPS_TAPS_B0_G7_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_60TO63_OPS_TAPS_B0_G7_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_60TO63_OPS_TAPS_B0_G7_SAR4_BF_DEF (0x00000000)

///< OPS Sar61 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_60TO63_OPS_TAPS_B0_G7_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_60TO63_OPS_TAPS_B0_G7_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_60TO63_OPS_TAPS_B0_G7_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_60TO63_OPS_TAPS_B0_G7_SAR5_BF_DEF (0x00000000)

///< OPS Sar62 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_60TO63_OPS_TAPS_B0_G7_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_60TO63_OPS_TAPS_B0_G7_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_60TO63_OPS_TAPS_B0_G7_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_60TO63_OPS_TAPS_B0_G7_SAR6_BF_DEF (0x00000000)

///< OPS Sar63 tap value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_60TO63_OPS_TAPS_B0_G7_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_60TO63_OPS_TAPS_B0_G7_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_60TO63_OPS_TAPS_B0_G7_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_60TO63_OPS_TAPS_B0_G7_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B1_SAR_0TO3 register description at address offset 0xb68
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b1_sar_0to3
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B1_G0_SAR0 : 8;
    ///< OPS Sar0 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B1_G0_SAR1 : 8;
    ///< OPS Sar1 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B1_G0_SAR2 : 8;
    ///< OPS Sar2 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B1_G0_SAR3 : 8;
    ///< OPS Sar3 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b1_sar_0to3_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_0TO3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_0TO3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_0TO3_WR_MASK (0xffffffffU)


///< OPS Sar0 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_0TO3_OPS_TAPS_B1_G0_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_0TO3_OPS_TAPS_B1_G0_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_0TO3_OPS_TAPS_B1_G0_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_0TO3_OPS_TAPS_B1_G0_SAR0_BF_DEF (0x00000000)

///< OPS Sar1 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_0TO3_OPS_TAPS_B1_G0_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_0TO3_OPS_TAPS_B1_G0_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_0TO3_OPS_TAPS_B1_G0_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_0TO3_OPS_TAPS_B1_G0_SAR1_BF_DEF (0x00000000)

///< OPS Sar2 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_0TO3_OPS_TAPS_B1_G0_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_0TO3_OPS_TAPS_B1_G0_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_0TO3_OPS_TAPS_B1_G0_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_0TO3_OPS_TAPS_B1_G0_SAR2_BF_DEF (0x00000000)

///< OPS Sar3 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_0TO3_OPS_TAPS_B1_G0_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_0TO3_OPS_TAPS_B1_G0_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_0TO3_OPS_TAPS_B1_G0_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_0TO3_OPS_TAPS_B1_G0_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B1_SAR_4TO7 register description at address offset 0xb6c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b1_sar_4to7
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B1_G0_SAR4 : 8;
    ///< OPS Sar4 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B1_G0_SAR5 : 8;
    ///< OPS Sar5 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B1_G0_SAR6 : 8;
    ///< OPS Sar6 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B1_G0_SAR7 : 8;
    ///< OPS Sar7 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b1_sar_4to7_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_4TO7_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_4TO7_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_4TO7_WR_MASK (0xffffffffU)


///< OPS Sar4 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_4TO7_OPS_TAPS_B1_G0_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_4TO7_OPS_TAPS_B1_G0_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_4TO7_OPS_TAPS_B1_G0_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_4TO7_OPS_TAPS_B1_G0_SAR4_BF_DEF (0x00000000)

///< OPS Sar5 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_4TO7_OPS_TAPS_B1_G0_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_4TO7_OPS_TAPS_B1_G0_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_4TO7_OPS_TAPS_B1_G0_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_4TO7_OPS_TAPS_B1_G0_SAR5_BF_DEF (0x00000000)

///< OPS Sar6 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_4TO7_OPS_TAPS_B1_G0_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_4TO7_OPS_TAPS_B1_G0_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_4TO7_OPS_TAPS_B1_G0_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_4TO7_OPS_TAPS_B1_G0_SAR6_BF_DEF (0x00000000)

///< OPS Sar7 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_4TO7_OPS_TAPS_B1_G0_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_4TO7_OPS_TAPS_B1_G0_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_4TO7_OPS_TAPS_B1_G0_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_4TO7_OPS_TAPS_B1_G0_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B1_SAR_8TO11 register description at address offset 0xb70
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b1_sar_8to11
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B1_G1_SAR0 : 8;
    ///< OPS Sar8  tap value on bit 1
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B1_G1_SAR1 : 8;
    ///< OPS Sar9  tap value on bit 1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B1_G1_SAR2 : 8;
    ///< OPS Sar10 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B1_G1_SAR3 : 8;
    ///< OPS Sar11 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b1_sar_8to11_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_8TO11_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_8TO11_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_8TO11_WR_MASK (0xffffffffU)


///< OPS Sar8  tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_8TO11_OPS_TAPS_B1_G1_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_8TO11_OPS_TAPS_B1_G1_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_8TO11_OPS_TAPS_B1_G1_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_8TO11_OPS_TAPS_B1_G1_SAR0_BF_DEF (0x00000000)

///< OPS Sar9  tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_8TO11_OPS_TAPS_B1_G1_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_8TO11_OPS_TAPS_B1_G1_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_8TO11_OPS_TAPS_B1_G1_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_8TO11_OPS_TAPS_B1_G1_SAR1_BF_DEF (0x00000000)

///< OPS Sar10 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_8TO11_OPS_TAPS_B1_G1_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_8TO11_OPS_TAPS_B1_G1_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_8TO11_OPS_TAPS_B1_G1_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_8TO11_OPS_TAPS_B1_G1_SAR2_BF_DEF (0x00000000)

///< OPS Sar11 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_8TO11_OPS_TAPS_B1_G1_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_8TO11_OPS_TAPS_B1_G1_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_8TO11_OPS_TAPS_B1_G1_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_8TO11_OPS_TAPS_B1_G1_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B1_SAR_12TO15 register description at address offset 0xb74
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b1_sar_12to15
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B1_G1_SAR4 : 8;
    ///< OPS Sar12 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B1_G1_SAR5 : 8;
    ///< OPS Sar13 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B1_G1_SAR6 : 8;
    ///< OPS Sar14 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B1_G1_SAR7 : 8;
    ///< OPS Sar15 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b1_sar_12to15_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_12TO15_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_12TO15_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_12TO15_WR_MASK (0xffffffffU)


///< OPS Sar12 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_12TO15_OPS_TAPS_B1_G1_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_12TO15_OPS_TAPS_B1_G1_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_12TO15_OPS_TAPS_B1_G1_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_12TO15_OPS_TAPS_B1_G1_SAR4_BF_DEF (0x00000000)

///< OPS Sar13 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_12TO15_OPS_TAPS_B1_G1_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_12TO15_OPS_TAPS_B1_G1_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_12TO15_OPS_TAPS_B1_G1_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_12TO15_OPS_TAPS_B1_G1_SAR5_BF_DEF (0x00000000)

///< OPS Sar14 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_12TO15_OPS_TAPS_B1_G1_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_12TO15_OPS_TAPS_B1_G1_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_12TO15_OPS_TAPS_B1_G1_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_12TO15_OPS_TAPS_B1_G1_SAR6_BF_DEF (0x00000000)

///< OPS Sar15 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_12TO15_OPS_TAPS_B1_G1_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_12TO15_OPS_TAPS_B1_G1_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_12TO15_OPS_TAPS_B1_G1_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_12TO15_OPS_TAPS_B1_G1_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B1_SAR_16TO19 register description at address offset 0xb78
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b1_sar_16to19
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B1_G2_SAR0 : 8;
    ///< OPS Sar16 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B1_G2_SAR1 : 8;
    ///< OPS Sar17 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B1_G2_SAR2 : 8;
    ///< OPS Sar18 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B1_G2_SAR3 : 8;
    ///< OPS Sar19 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b1_sar_16to19_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_16TO19_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_16TO19_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_16TO19_WR_MASK (0xffffffffU)


///< OPS Sar16 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_16TO19_OPS_TAPS_B1_G2_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_16TO19_OPS_TAPS_B1_G2_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_16TO19_OPS_TAPS_B1_G2_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_16TO19_OPS_TAPS_B1_G2_SAR0_BF_DEF (0x00000000)

///< OPS Sar17 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_16TO19_OPS_TAPS_B1_G2_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_16TO19_OPS_TAPS_B1_G2_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_16TO19_OPS_TAPS_B1_G2_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_16TO19_OPS_TAPS_B1_G2_SAR1_BF_DEF (0x00000000)

///< OPS Sar18 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_16TO19_OPS_TAPS_B1_G2_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_16TO19_OPS_TAPS_B1_G2_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_16TO19_OPS_TAPS_B1_G2_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_16TO19_OPS_TAPS_B1_G2_SAR2_BF_DEF (0x00000000)

///< OPS Sar19 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_16TO19_OPS_TAPS_B1_G2_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_16TO19_OPS_TAPS_B1_G2_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_16TO19_OPS_TAPS_B1_G2_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_16TO19_OPS_TAPS_B1_G2_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B1_SAR_20TO23 register description at address offset 0xb7c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b1_sar_20to23
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B1_G2_SAR4 : 8;
    ///< OPS Sar20 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B1_G2_SAR5 : 8;
    ///< OPS Sar21 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B1_G2_SAR6 : 8;
    ///< OPS Sar22 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B1_G2_SAR7 : 8;
    ///< OPS Sar23 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b1_sar_20to23_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_20TO23_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_20TO23_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_20TO23_WR_MASK (0xffffffffU)


///< OPS Sar20 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_20TO23_OPS_TAPS_B1_G2_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_20TO23_OPS_TAPS_B1_G2_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_20TO23_OPS_TAPS_B1_G2_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_20TO23_OPS_TAPS_B1_G2_SAR4_BF_DEF (0x00000000)

///< OPS Sar21 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_20TO23_OPS_TAPS_B1_G2_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_20TO23_OPS_TAPS_B1_G2_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_20TO23_OPS_TAPS_B1_G2_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_20TO23_OPS_TAPS_B1_G2_SAR5_BF_DEF (0x00000000)

///< OPS Sar22 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_20TO23_OPS_TAPS_B1_G2_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_20TO23_OPS_TAPS_B1_G2_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_20TO23_OPS_TAPS_B1_G2_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_20TO23_OPS_TAPS_B1_G2_SAR6_BF_DEF (0x00000000)

///< OPS Sar23 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_20TO23_OPS_TAPS_B1_G2_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_20TO23_OPS_TAPS_B1_G2_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_20TO23_OPS_TAPS_B1_G2_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_20TO23_OPS_TAPS_B1_G2_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B1_SAR_24TO27 register description at address offset 0xb80
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b1_sar_24to27
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B1_G3_SAR0 : 8;
    ///< OPS Sar24 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B1_G3_SAR1 : 8;
    ///< OPS Sar25 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B1_G3_SAR2 : 8;
    ///< OPS Sar26 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B1_G3_SAR3 : 8;
    ///< OPS Sar27 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b1_sar_24to27_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_24TO27_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_24TO27_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_24TO27_WR_MASK (0xffffffffU)


///< OPS Sar24 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_24TO27_OPS_TAPS_B1_G3_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_24TO27_OPS_TAPS_B1_G3_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_24TO27_OPS_TAPS_B1_G3_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_24TO27_OPS_TAPS_B1_G3_SAR0_BF_DEF (0x00000000)

///< OPS Sar25 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_24TO27_OPS_TAPS_B1_G3_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_24TO27_OPS_TAPS_B1_G3_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_24TO27_OPS_TAPS_B1_G3_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_24TO27_OPS_TAPS_B1_G3_SAR1_BF_DEF (0x00000000)

///< OPS Sar26 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_24TO27_OPS_TAPS_B1_G3_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_24TO27_OPS_TAPS_B1_G3_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_24TO27_OPS_TAPS_B1_G3_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_24TO27_OPS_TAPS_B1_G3_SAR2_BF_DEF (0x00000000)

///< OPS Sar27 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_24TO27_OPS_TAPS_B1_G3_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_24TO27_OPS_TAPS_B1_G3_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_24TO27_OPS_TAPS_B1_G3_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_24TO27_OPS_TAPS_B1_G3_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B1_SAR_28TO31 register description at address offset 0xb84
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b1_sar_28to31
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B1_G3_SAR4 : 8;
    ///< OPS Sar28 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B1_G3_SAR5 : 8;
    ///< OPS Sar29 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B1_G3_SAR6 : 8;
    ///< OPS Sar30 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B1_G3_SAR7 : 8;
    ///< OPS Sar31 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b1_sar_28to31_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_28TO31_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_28TO31_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_28TO31_WR_MASK (0xffffffffU)


///< OPS Sar28 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_28TO31_OPS_TAPS_B1_G3_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_28TO31_OPS_TAPS_B1_G3_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_28TO31_OPS_TAPS_B1_G3_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_28TO31_OPS_TAPS_B1_G3_SAR4_BF_DEF (0x00000000)

///< OPS Sar29 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_28TO31_OPS_TAPS_B1_G3_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_28TO31_OPS_TAPS_B1_G3_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_28TO31_OPS_TAPS_B1_G3_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_28TO31_OPS_TAPS_B1_G3_SAR5_BF_DEF (0x00000000)

///< OPS Sar30 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_28TO31_OPS_TAPS_B1_G3_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_28TO31_OPS_TAPS_B1_G3_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_28TO31_OPS_TAPS_B1_G3_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_28TO31_OPS_TAPS_B1_G3_SAR6_BF_DEF (0x00000000)

///< OPS Sar31 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_28TO31_OPS_TAPS_B1_G3_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_28TO31_OPS_TAPS_B1_G3_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_28TO31_OPS_TAPS_B1_G3_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_28TO31_OPS_TAPS_B1_G3_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B1_SAR_32TO35 register description at address offset 0xb88
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b1_sar_32to35
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B1_G4_SAR0 : 8;
    ///< OPS Sar32 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B1_G4_SAR1 : 8;
    ///< OPS Sar33 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B1_G4_SAR2 : 8;
    ///< OPS Sar34 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B1_G4_SAR3 : 8;
    ///< OPS Sar35 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b1_sar_32to35_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_32TO35_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_32TO35_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_32TO35_WR_MASK (0xffffffffU)


///< OPS Sar32 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_32TO35_OPS_TAPS_B1_G4_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_32TO35_OPS_TAPS_B1_G4_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_32TO35_OPS_TAPS_B1_G4_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_32TO35_OPS_TAPS_B1_G4_SAR0_BF_DEF (0x00000000)

///< OPS Sar33 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_32TO35_OPS_TAPS_B1_G4_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_32TO35_OPS_TAPS_B1_G4_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_32TO35_OPS_TAPS_B1_G4_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_32TO35_OPS_TAPS_B1_G4_SAR1_BF_DEF (0x00000000)

///< OPS Sar34 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_32TO35_OPS_TAPS_B1_G4_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_32TO35_OPS_TAPS_B1_G4_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_32TO35_OPS_TAPS_B1_G4_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_32TO35_OPS_TAPS_B1_G4_SAR2_BF_DEF (0x00000000)

///< OPS Sar35 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_32TO35_OPS_TAPS_B1_G4_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_32TO35_OPS_TAPS_B1_G4_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_32TO35_OPS_TAPS_B1_G4_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_32TO35_OPS_TAPS_B1_G4_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B1_SAR_36TO39 register description at address offset 0xb8c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b1_sar_36to39
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B1_G4_SAR4 : 8;
    ///< OPS Sar36 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B1_G4_SAR5 : 8;
    ///< OPS Sar37 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B1_G4_SAR6 : 8;
    ///< OPS Sar38 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B1_G4_SAR7 : 8;
    ///< OPS Sar39 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b1_sar_36to39_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_36TO39_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_36TO39_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_36TO39_WR_MASK (0xffffffffU)


///< OPS Sar36 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_36TO39_OPS_TAPS_B1_G4_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_36TO39_OPS_TAPS_B1_G4_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_36TO39_OPS_TAPS_B1_G4_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_36TO39_OPS_TAPS_B1_G4_SAR4_BF_DEF (0x00000000)

///< OPS Sar37 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_36TO39_OPS_TAPS_B1_G4_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_36TO39_OPS_TAPS_B1_G4_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_36TO39_OPS_TAPS_B1_G4_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_36TO39_OPS_TAPS_B1_G4_SAR5_BF_DEF (0x00000000)

///< OPS Sar38 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_36TO39_OPS_TAPS_B1_G4_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_36TO39_OPS_TAPS_B1_G4_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_36TO39_OPS_TAPS_B1_G4_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_36TO39_OPS_TAPS_B1_G4_SAR6_BF_DEF (0x00000000)

///< OPS Sar39 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_36TO39_OPS_TAPS_B1_G4_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_36TO39_OPS_TAPS_B1_G4_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_36TO39_OPS_TAPS_B1_G4_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_36TO39_OPS_TAPS_B1_G4_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B1_SAR_40TO43 register description at address offset 0xb90
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b1_sar_40to43
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B1_G5_SAR0 : 8;
    ///< OPS Sar40 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B1_G5_SAR1 : 8;
    ///< OPS Sar41 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B1_G5_SAR2 : 8;
    ///< OPS Sar42 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B1_G5_SAR3 : 8;
    ///< OPS Sar43 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b1_sar_40to43_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_40TO43_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_40TO43_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_40TO43_WR_MASK (0xffffffffU)


///< OPS Sar40 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_40TO43_OPS_TAPS_B1_G5_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_40TO43_OPS_TAPS_B1_G5_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_40TO43_OPS_TAPS_B1_G5_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_40TO43_OPS_TAPS_B1_G5_SAR0_BF_DEF (0x00000000)

///< OPS Sar41 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_40TO43_OPS_TAPS_B1_G5_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_40TO43_OPS_TAPS_B1_G5_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_40TO43_OPS_TAPS_B1_G5_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_40TO43_OPS_TAPS_B1_G5_SAR1_BF_DEF (0x00000000)

///< OPS Sar42 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_40TO43_OPS_TAPS_B1_G5_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_40TO43_OPS_TAPS_B1_G5_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_40TO43_OPS_TAPS_B1_G5_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_40TO43_OPS_TAPS_B1_G5_SAR2_BF_DEF (0x00000000)

///< OPS Sar43 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_40TO43_OPS_TAPS_B1_G5_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_40TO43_OPS_TAPS_B1_G5_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_40TO43_OPS_TAPS_B1_G5_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_40TO43_OPS_TAPS_B1_G5_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B1_SAR_44TO47 register description at address offset 0xb94
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b1_sar_44to47
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B1_G5_SAR4 : 8;
    ///< OPS Sar44 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B1_G5_SAR5 : 8;
    ///< OPS Sar45 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B1_G5_SAR6 : 8;
    ///< OPS Sar46 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B1_G5_SAR7 : 8;
    ///< OPS Sar47 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b1_sar_44to47_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_44TO47_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_44TO47_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_44TO47_WR_MASK (0xffffffffU)


///< OPS Sar44 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_44TO47_OPS_TAPS_B1_G5_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_44TO47_OPS_TAPS_B1_G5_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_44TO47_OPS_TAPS_B1_G5_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_44TO47_OPS_TAPS_B1_G5_SAR4_BF_DEF (0x00000000)

///< OPS Sar45 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_44TO47_OPS_TAPS_B1_G5_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_44TO47_OPS_TAPS_B1_G5_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_44TO47_OPS_TAPS_B1_G5_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_44TO47_OPS_TAPS_B1_G5_SAR5_BF_DEF (0x00000000)

///< OPS Sar46 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_44TO47_OPS_TAPS_B1_G5_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_44TO47_OPS_TAPS_B1_G5_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_44TO47_OPS_TAPS_B1_G5_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_44TO47_OPS_TAPS_B1_G5_SAR6_BF_DEF (0x00000000)

///< OPS Sar47 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_44TO47_OPS_TAPS_B1_G5_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_44TO47_OPS_TAPS_B1_G5_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_44TO47_OPS_TAPS_B1_G5_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_44TO47_OPS_TAPS_B1_G5_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B1_SAR_48TO51 register description at address offset 0xb98
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b1_sar_48to51
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B1_G6_SAR0 : 8;
    ///< OPS Sar48 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B1_G6_SAR1 : 8;
    ///< OPS Sar49 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B1_G6_SAR2 : 8;
    ///< OPS Sar50 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B1_G6_SAR3 : 8;
    ///< OPS Sar51 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b1_sar_48to51_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_48TO51_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_48TO51_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_48TO51_WR_MASK (0xffffffffU)


///< OPS Sar48 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_48TO51_OPS_TAPS_B1_G6_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_48TO51_OPS_TAPS_B1_G6_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_48TO51_OPS_TAPS_B1_G6_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_48TO51_OPS_TAPS_B1_G6_SAR0_BF_DEF (0x00000000)

///< OPS Sar49 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_48TO51_OPS_TAPS_B1_G6_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_48TO51_OPS_TAPS_B1_G6_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_48TO51_OPS_TAPS_B1_G6_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_48TO51_OPS_TAPS_B1_G6_SAR1_BF_DEF (0x00000000)

///< OPS Sar50 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_48TO51_OPS_TAPS_B1_G6_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_48TO51_OPS_TAPS_B1_G6_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_48TO51_OPS_TAPS_B1_G6_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_48TO51_OPS_TAPS_B1_G6_SAR2_BF_DEF (0x00000000)

///< OPS Sar51 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_48TO51_OPS_TAPS_B1_G6_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_48TO51_OPS_TAPS_B1_G6_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_48TO51_OPS_TAPS_B1_G6_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_48TO51_OPS_TAPS_B1_G6_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B1_SAR_52TO55 register description at address offset 0xb9c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b1_sar_52to55
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B1_G6_SAR4 : 8;
    ///< OPS Sar52 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B1_G6_SAR5 : 8;
    ///< OPS Sar53 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B1_G6_SAR6 : 8;
    ///< OPS Sar54 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B1_G6_SAR7 : 8;
    ///< OPS Sar55 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b1_sar_52to55_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_52TO55_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_52TO55_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_52TO55_WR_MASK (0xffffffffU)


///< OPS Sar52 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_52TO55_OPS_TAPS_B1_G6_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_52TO55_OPS_TAPS_B1_G6_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_52TO55_OPS_TAPS_B1_G6_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_52TO55_OPS_TAPS_B1_G6_SAR4_BF_DEF (0x00000000)

///< OPS Sar53 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_52TO55_OPS_TAPS_B1_G6_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_52TO55_OPS_TAPS_B1_G6_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_52TO55_OPS_TAPS_B1_G6_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_52TO55_OPS_TAPS_B1_G6_SAR5_BF_DEF (0x00000000)

///< OPS Sar54 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_52TO55_OPS_TAPS_B1_G6_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_52TO55_OPS_TAPS_B1_G6_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_52TO55_OPS_TAPS_B1_G6_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_52TO55_OPS_TAPS_B1_G6_SAR6_BF_DEF (0x00000000)

///< OPS Sar55 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_52TO55_OPS_TAPS_B1_G6_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_52TO55_OPS_TAPS_B1_G6_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_52TO55_OPS_TAPS_B1_G6_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_52TO55_OPS_TAPS_B1_G6_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B1_SAR_56TO59 register description at address offset 0xba0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b1_sar_56to59
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B1_G7_SAR0 : 8;
    ///< OPS Sar56 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B1_G7_SAR1 : 8;
    ///< OPS Sar57 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B1_G7_SAR2 : 8;
    ///< OPS Sar58 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B1_G7_SAR3 : 8;
    ///< OPS Sar59 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b1_sar_56to59_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_56TO59_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_56TO59_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_56TO59_WR_MASK (0xffffffffU)


///< OPS Sar56 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_56TO59_OPS_TAPS_B1_G7_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_56TO59_OPS_TAPS_B1_G7_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_56TO59_OPS_TAPS_B1_G7_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_56TO59_OPS_TAPS_B1_G7_SAR0_BF_DEF (0x00000000)

///< OPS Sar57 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_56TO59_OPS_TAPS_B1_G7_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_56TO59_OPS_TAPS_B1_G7_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_56TO59_OPS_TAPS_B1_G7_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_56TO59_OPS_TAPS_B1_G7_SAR1_BF_DEF (0x00000000)

///< OPS Sar58 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_56TO59_OPS_TAPS_B1_G7_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_56TO59_OPS_TAPS_B1_G7_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_56TO59_OPS_TAPS_B1_G7_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_56TO59_OPS_TAPS_B1_G7_SAR2_BF_DEF (0x00000000)

///< OPS Sar59 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_56TO59_OPS_TAPS_B1_G7_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_56TO59_OPS_TAPS_B1_G7_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_56TO59_OPS_TAPS_B1_G7_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_56TO59_OPS_TAPS_B1_G7_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B1_SAR_60TO63 register description at address offset 0xba4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b1_sar_60to63
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B1_G7_SAR4 : 8;
    ///< OPS Sar60 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B1_G7_SAR5 : 8;
    ///< OPS Sar61 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B1_G7_SAR6 : 8;
    ///< OPS Sar62 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B1_G7_SAR7 : 8;
    ///< OPS Sar63 tap value on bit 1
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b1_sar_60to63_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_60TO63_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_60TO63_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_60TO63_WR_MASK (0xffffffffU)


///< OPS Sar60 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_60TO63_OPS_TAPS_B1_G7_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_60TO63_OPS_TAPS_B1_G7_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_60TO63_OPS_TAPS_B1_G7_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_60TO63_OPS_TAPS_B1_G7_SAR4_BF_DEF (0x00000000)

///< OPS Sar61 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_60TO63_OPS_TAPS_B1_G7_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_60TO63_OPS_TAPS_B1_G7_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_60TO63_OPS_TAPS_B1_G7_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_60TO63_OPS_TAPS_B1_G7_SAR5_BF_DEF (0x00000000)

///< OPS Sar62 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_60TO63_OPS_TAPS_B1_G7_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_60TO63_OPS_TAPS_B1_G7_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_60TO63_OPS_TAPS_B1_G7_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_60TO63_OPS_TAPS_B1_G7_SAR6_BF_DEF (0x00000000)

///< OPS Sar63 tap value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_60TO63_OPS_TAPS_B1_G7_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_60TO63_OPS_TAPS_B1_G7_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_60TO63_OPS_TAPS_B1_G7_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_60TO63_OPS_TAPS_B1_G7_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B2_SAR_0TO3 register description at address offset 0xba8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b2_sar_0to3
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B2_G0_SAR0 : 8;
    ///< OPS Sar0 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B2_G0_SAR1 : 8;
    ///< OPS Sar1 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B2_G0_SAR2 : 8;
    ///< OPS Sar2 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B2_G0_SAR3 : 8;
    ///< OPS Sar3 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b2_sar_0to3_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_0TO3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_0TO3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_0TO3_WR_MASK (0xffffffffU)


///< OPS Sar0 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_0TO3_OPS_TAPS_B2_G0_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_0TO3_OPS_TAPS_B2_G0_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_0TO3_OPS_TAPS_B2_G0_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_0TO3_OPS_TAPS_B2_G0_SAR0_BF_DEF (0x00000000)

///< OPS Sar1 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_0TO3_OPS_TAPS_B2_G0_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_0TO3_OPS_TAPS_B2_G0_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_0TO3_OPS_TAPS_B2_G0_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_0TO3_OPS_TAPS_B2_G0_SAR1_BF_DEF (0x00000000)

///< OPS Sar2 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_0TO3_OPS_TAPS_B2_G0_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_0TO3_OPS_TAPS_B2_G0_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_0TO3_OPS_TAPS_B2_G0_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_0TO3_OPS_TAPS_B2_G0_SAR2_BF_DEF (0x00000000)

///< OPS Sar3 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_0TO3_OPS_TAPS_B2_G0_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_0TO3_OPS_TAPS_B2_G0_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_0TO3_OPS_TAPS_B2_G0_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_0TO3_OPS_TAPS_B2_G0_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B2_SAR_4TO7 register description at address offset 0xbac
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b2_sar_4to7
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B2_G0_SAR4 : 8;
    ///< OPS Sar4 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B2_G0_SAR5 : 8;
    ///< OPS Sar5 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B2_G0_SAR6 : 8;
    ///< OPS Sar6 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B2_G0_SAR7 : 8;
    ///< OPS Sar7 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b2_sar_4to7_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_4TO7_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_4TO7_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_4TO7_WR_MASK (0xffffffffU)


///< OPS Sar4 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_4TO7_OPS_TAPS_B2_G0_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_4TO7_OPS_TAPS_B2_G0_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_4TO7_OPS_TAPS_B2_G0_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_4TO7_OPS_TAPS_B2_G0_SAR4_BF_DEF (0x00000000)

///< OPS Sar5 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_4TO7_OPS_TAPS_B2_G0_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_4TO7_OPS_TAPS_B2_G0_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_4TO7_OPS_TAPS_B2_G0_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_4TO7_OPS_TAPS_B2_G0_SAR5_BF_DEF (0x00000000)

///< OPS Sar6 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_4TO7_OPS_TAPS_B2_G0_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_4TO7_OPS_TAPS_B2_G0_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_4TO7_OPS_TAPS_B2_G0_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_4TO7_OPS_TAPS_B2_G0_SAR6_BF_DEF (0x00000000)

///< OPS Sar7 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_4TO7_OPS_TAPS_B2_G0_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_4TO7_OPS_TAPS_B2_G0_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_4TO7_OPS_TAPS_B2_G0_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_4TO7_OPS_TAPS_B2_G0_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B2_SAR_8TO11 register description at address offset 0xbb0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b2_sar_8to11
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B2_G1_SAR0 : 8;
    ///< OPS Sar8  tap value on bit 2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B2_G1_SAR1 : 8;
    ///< OPS Sar9  tap value on bit 2
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B2_G1_SAR2 : 8;
    ///< OPS Sar10 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B2_G1_SAR3 : 8;
    ///< OPS Sar11 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b2_sar_8to11_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_8TO11_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_8TO11_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_8TO11_WR_MASK (0xffffffffU)


///< OPS Sar8  tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_8TO11_OPS_TAPS_B2_G1_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_8TO11_OPS_TAPS_B2_G1_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_8TO11_OPS_TAPS_B2_G1_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_8TO11_OPS_TAPS_B2_G1_SAR0_BF_DEF (0x00000000)

///< OPS Sar9  tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_8TO11_OPS_TAPS_B2_G1_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_8TO11_OPS_TAPS_B2_G1_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_8TO11_OPS_TAPS_B2_G1_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_8TO11_OPS_TAPS_B2_G1_SAR1_BF_DEF (0x00000000)

///< OPS Sar10 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_8TO11_OPS_TAPS_B2_G1_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_8TO11_OPS_TAPS_B2_G1_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_8TO11_OPS_TAPS_B2_G1_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_8TO11_OPS_TAPS_B2_G1_SAR2_BF_DEF (0x00000000)

///< OPS Sar11 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_8TO11_OPS_TAPS_B2_G1_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_8TO11_OPS_TAPS_B2_G1_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_8TO11_OPS_TAPS_B2_G1_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_8TO11_OPS_TAPS_B2_G1_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B2_SAR_12TO15 register description at address offset 0xbb4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b2_sar_12to15
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B2_G1_SAR4 : 8;
    ///< OPS Sar12 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B2_G1_SAR5 : 8;
    ///< OPS Sar13 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B2_G1_SAR6 : 8;
    ///< OPS Sar14 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B2_G1_SAR7 : 8;
    ///< OPS Sar15 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b2_sar_12to15_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_12TO15_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_12TO15_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_12TO15_WR_MASK (0xffffffffU)


///< OPS Sar12 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_12TO15_OPS_TAPS_B2_G1_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_12TO15_OPS_TAPS_B2_G1_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_12TO15_OPS_TAPS_B2_G1_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_12TO15_OPS_TAPS_B2_G1_SAR4_BF_DEF (0x00000000)

///< OPS Sar13 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_12TO15_OPS_TAPS_B2_G1_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_12TO15_OPS_TAPS_B2_G1_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_12TO15_OPS_TAPS_B2_G1_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_12TO15_OPS_TAPS_B2_G1_SAR5_BF_DEF (0x00000000)

///< OPS Sar14 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_12TO15_OPS_TAPS_B2_G1_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_12TO15_OPS_TAPS_B2_G1_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_12TO15_OPS_TAPS_B2_G1_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_12TO15_OPS_TAPS_B2_G1_SAR6_BF_DEF (0x00000000)

///< OPS Sar15 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_12TO15_OPS_TAPS_B2_G1_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_12TO15_OPS_TAPS_B2_G1_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_12TO15_OPS_TAPS_B2_G1_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_12TO15_OPS_TAPS_B2_G1_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B2_SAR_16TO19 register description at address offset 0xbb8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b2_sar_16to19
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B2_G2_SAR0 : 8;
    ///< OPS Sar16 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B2_G2_SAR1 : 8;
    ///< OPS Sar17 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B2_G2_SAR2 : 8;
    ///< OPS Sar18 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B2_G2_SAR3 : 8;
    ///< OPS Sar19 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b2_sar_16to19_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_16TO19_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_16TO19_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_16TO19_WR_MASK (0xffffffffU)


///< OPS Sar16 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_16TO19_OPS_TAPS_B2_G2_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_16TO19_OPS_TAPS_B2_G2_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_16TO19_OPS_TAPS_B2_G2_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_16TO19_OPS_TAPS_B2_G2_SAR0_BF_DEF (0x00000000)

///< OPS Sar17 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_16TO19_OPS_TAPS_B2_G2_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_16TO19_OPS_TAPS_B2_G2_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_16TO19_OPS_TAPS_B2_G2_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_16TO19_OPS_TAPS_B2_G2_SAR1_BF_DEF (0x00000000)

///< OPS Sar18 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_16TO19_OPS_TAPS_B2_G2_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_16TO19_OPS_TAPS_B2_G2_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_16TO19_OPS_TAPS_B2_G2_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_16TO19_OPS_TAPS_B2_G2_SAR2_BF_DEF (0x00000000)

///< OPS Sar19 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_16TO19_OPS_TAPS_B2_G2_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_16TO19_OPS_TAPS_B2_G2_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_16TO19_OPS_TAPS_B2_G2_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_16TO19_OPS_TAPS_B2_G2_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B2_SAR_20TO23 register description at address offset 0xbbc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b2_sar_20to23
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B2_G2_SAR4 : 8;
    ///< OPS Sar20 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B2_G2_SAR5 : 8;
    ///< OPS Sar21 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B2_G2_SAR6 : 8;
    ///< OPS Sar22 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B2_G2_SAR7 : 8;
    ///< OPS Sar23 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b2_sar_20to23_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_20TO23_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_20TO23_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_20TO23_WR_MASK (0xffffffffU)


///< OPS Sar20 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_20TO23_OPS_TAPS_B2_G2_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_20TO23_OPS_TAPS_B2_G2_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_20TO23_OPS_TAPS_B2_G2_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_20TO23_OPS_TAPS_B2_G2_SAR4_BF_DEF (0x00000000)

///< OPS Sar21 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_20TO23_OPS_TAPS_B2_G2_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_20TO23_OPS_TAPS_B2_G2_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_20TO23_OPS_TAPS_B2_G2_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_20TO23_OPS_TAPS_B2_G2_SAR5_BF_DEF (0x00000000)

///< OPS Sar22 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_20TO23_OPS_TAPS_B2_G2_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_20TO23_OPS_TAPS_B2_G2_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_20TO23_OPS_TAPS_B2_G2_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_20TO23_OPS_TAPS_B2_G2_SAR6_BF_DEF (0x00000000)

///< OPS Sar23 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_20TO23_OPS_TAPS_B2_G2_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_20TO23_OPS_TAPS_B2_G2_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_20TO23_OPS_TAPS_B2_G2_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_20TO23_OPS_TAPS_B2_G2_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B2_SAR_24TO27 register description at address offset 0xbc0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b2_sar_24to27
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B2_G3_SAR0 : 8;
    ///< OPS Sar24 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B2_G3_SAR1 : 8;
    ///< OPS Sar25 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B2_G3_SAR2 : 8;
    ///< OPS Sar26 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B2_G3_SAR3 : 8;
    ///< OPS Sar27 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b2_sar_24to27_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_24TO27_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_24TO27_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_24TO27_WR_MASK (0xffffffffU)


///< OPS Sar24 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_24TO27_OPS_TAPS_B2_G3_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_24TO27_OPS_TAPS_B2_G3_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_24TO27_OPS_TAPS_B2_G3_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_24TO27_OPS_TAPS_B2_G3_SAR0_BF_DEF (0x00000000)

///< OPS Sar25 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_24TO27_OPS_TAPS_B2_G3_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_24TO27_OPS_TAPS_B2_G3_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_24TO27_OPS_TAPS_B2_G3_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_24TO27_OPS_TAPS_B2_G3_SAR1_BF_DEF (0x00000000)

///< OPS Sar26 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_24TO27_OPS_TAPS_B2_G3_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_24TO27_OPS_TAPS_B2_G3_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_24TO27_OPS_TAPS_B2_G3_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_24TO27_OPS_TAPS_B2_G3_SAR2_BF_DEF (0x00000000)

///< OPS Sar27 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_24TO27_OPS_TAPS_B2_G3_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_24TO27_OPS_TAPS_B2_G3_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_24TO27_OPS_TAPS_B2_G3_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_24TO27_OPS_TAPS_B2_G3_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B2_SAR_28TO31 register description at address offset 0xbc4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b2_sar_28to31
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B2_G3_SAR4 : 8;
    ///< OPS Sar28 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B2_G3_SAR5 : 8;
    ///< OPS Sar29 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B2_G3_SAR6 : 8;
    ///< OPS Sar30 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B2_G3_SAR7 : 8;
    ///< OPS Sar31 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b2_sar_28to31_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_28TO31_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_28TO31_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_28TO31_WR_MASK (0xffffffffU)


///< OPS Sar28 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_28TO31_OPS_TAPS_B2_G3_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_28TO31_OPS_TAPS_B2_G3_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_28TO31_OPS_TAPS_B2_G3_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_28TO31_OPS_TAPS_B2_G3_SAR4_BF_DEF (0x00000000)

///< OPS Sar29 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_28TO31_OPS_TAPS_B2_G3_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_28TO31_OPS_TAPS_B2_G3_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_28TO31_OPS_TAPS_B2_G3_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_28TO31_OPS_TAPS_B2_G3_SAR5_BF_DEF (0x00000000)

///< OPS Sar30 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_28TO31_OPS_TAPS_B2_G3_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_28TO31_OPS_TAPS_B2_G3_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_28TO31_OPS_TAPS_B2_G3_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_28TO31_OPS_TAPS_B2_G3_SAR6_BF_DEF (0x00000000)

///< OPS Sar31 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_28TO31_OPS_TAPS_B2_G3_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_28TO31_OPS_TAPS_B2_G3_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_28TO31_OPS_TAPS_B2_G3_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_28TO31_OPS_TAPS_B2_G3_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B2_SAR_32TO35 register description at address offset 0xbc8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b2_sar_32to35
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B2_G4_SAR0 : 8;
    ///< OPS Sar32 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B2_G4_SAR1 : 8;
    ///< OPS Sar33 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B2_G4_SAR2 : 8;
    ///< OPS Sar34 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B2_G4_SAR3 : 8;
    ///< OPS Sar35 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b2_sar_32to35_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_32TO35_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_32TO35_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_32TO35_WR_MASK (0xffffffffU)


///< OPS Sar32 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_32TO35_OPS_TAPS_B2_G4_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_32TO35_OPS_TAPS_B2_G4_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_32TO35_OPS_TAPS_B2_G4_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_32TO35_OPS_TAPS_B2_G4_SAR0_BF_DEF (0x00000000)

///< OPS Sar33 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_32TO35_OPS_TAPS_B2_G4_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_32TO35_OPS_TAPS_B2_G4_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_32TO35_OPS_TAPS_B2_G4_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_32TO35_OPS_TAPS_B2_G4_SAR1_BF_DEF (0x00000000)

///< OPS Sar34 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_32TO35_OPS_TAPS_B2_G4_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_32TO35_OPS_TAPS_B2_G4_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_32TO35_OPS_TAPS_B2_G4_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_32TO35_OPS_TAPS_B2_G4_SAR2_BF_DEF (0x00000000)

///< OPS Sar35 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_32TO35_OPS_TAPS_B2_G4_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_32TO35_OPS_TAPS_B2_G4_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_32TO35_OPS_TAPS_B2_G4_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_32TO35_OPS_TAPS_B2_G4_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B2_SAR_36TO39 register description at address offset 0xbcc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b2_sar_36to39
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B2_G4_SAR4 : 8;
    ///< OPS Sar36 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B2_G4_SAR5 : 8;
    ///< OPS Sar37 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B2_G4_SAR6 : 8;
    ///< OPS Sar38 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B2_G4_SAR7 : 8;
    ///< OPS Sar39 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b2_sar_36to39_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_36TO39_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_36TO39_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_36TO39_WR_MASK (0xffffffffU)


///< OPS Sar36 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_36TO39_OPS_TAPS_B2_G4_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_36TO39_OPS_TAPS_B2_G4_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_36TO39_OPS_TAPS_B2_G4_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_36TO39_OPS_TAPS_B2_G4_SAR4_BF_DEF (0x00000000)

///< OPS Sar37 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_36TO39_OPS_TAPS_B2_G4_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_36TO39_OPS_TAPS_B2_G4_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_36TO39_OPS_TAPS_B2_G4_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_36TO39_OPS_TAPS_B2_G4_SAR5_BF_DEF (0x00000000)

///< OPS Sar38 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_36TO39_OPS_TAPS_B2_G4_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_36TO39_OPS_TAPS_B2_G4_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_36TO39_OPS_TAPS_B2_G4_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_36TO39_OPS_TAPS_B2_G4_SAR6_BF_DEF (0x00000000)

///< OPS Sar39 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_36TO39_OPS_TAPS_B2_G4_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_36TO39_OPS_TAPS_B2_G4_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_36TO39_OPS_TAPS_B2_G4_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_36TO39_OPS_TAPS_B2_G4_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B2_SAR_40TO43 register description at address offset 0xbd0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b2_sar_40to43
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B2_G5_SAR0 : 8;
    ///< OPS Sar40 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B2_G5_SAR1 : 8;
    ///< OPS Sar41 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B2_G5_SAR2 : 8;
    ///< OPS Sar42 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B2_G5_SAR3 : 8;
    ///< OPS Sar43 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b2_sar_40to43_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_40TO43_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_40TO43_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_40TO43_WR_MASK (0xffffffffU)


///< OPS Sar40 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_40TO43_OPS_TAPS_B2_G5_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_40TO43_OPS_TAPS_B2_G5_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_40TO43_OPS_TAPS_B2_G5_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_40TO43_OPS_TAPS_B2_G5_SAR0_BF_DEF (0x00000000)

///< OPS Sar41 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_40TO43_OPS_TAPS_B2_G5_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_40TO43_OPS_TAPS_B2_G5_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_40TO43_OPS_TAPS_B2_G5_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_40TO43_OPS_TAPS_B2_G5_SAR1_BF_DEF (0x00000000)

///< OPS Sar42 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_40TO43_OPS_TAPS_B2_G5_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_40TO43_OPS_TAPS_B2_G5_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_40TO43_OPS_TAPS_B2_G5_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_40TO43_OPS_TAPS_B2_G5_SAR2_BF_DEF (0x00000000)

///< OPS Sar43 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_40TO43_OPS_TAPS_B2_G5_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_40TO43_OPS_TAPS_B2_G5_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_40TO43_OPS_TAPS_B2_G5_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_40TO43_OPS_TAPS_B2_G5_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B2_SAR_44TO47 register description at address offset 0xbd4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b2_sar_44to47
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B2_G5_SAR4 : 8;
    ///< OPS Sar44 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B2_G5_SAR5 : 8;
    ///< OPS Sar45 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B2_G5_SAR6 : 8;
    ///< OPS Sar46 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B2_G5_SAR7 : 8;
    ///< OPS Sar47 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b2_sar_44to47_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_44TO47_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_44TO47_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_44TO47_WR_MASK (0xffffffffU)


///< OPS Sar44 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_44TO47_OPS_TAPS_B2_G5_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_44TO47_OPS_TAPS_B2_G5_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_44TO47_OPS_TAPS_B2_G5_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_44TO47_OPS_TAPS_B2_G5_SAR4_BF_DEF (0x00000000)

///< OPS Sar45 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_44TO47_OPS_TAPS_B2_G5_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_44TO47_OPS_TAPS_B2_G5_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_44TO47_OPS_TAPS_B2_G5_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_44TO47_OPS_TAPS_B2_G5_SAR5_BF_DEF (0x00000000)

///< OPS Sar46 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_44TO47_OPS_TAPS_B2_G5_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_44TO47_OPS_TAPS_B2_G5_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_44TO47_OPS_TAPS_B2_G5_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_44TO47_OPS_TAPS_B2_G5_SAR6_BF_DEF (0x00000000)

///< OPS Sar47 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_44TO47_OPS_TAPS_B2_G5_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_44TO47_OPS_TAPS_B2_G5_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_44TO47_OPS_TAPS_B2_G5_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_44TO47_OPS_TAPS_B2_G5_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B2_SAR_48TO51 register description at address offset 0xbd8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b2_sar_48to51
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B2_G6_SAR0 : 8;
    ///< OPS Sar48 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B2_G6_SAR1 : 8;
    ///< OPS Sar49 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B2_G6_SAR2 : 8;
    ///< OPS Sar50 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B2_G6_SAR3 : 8;
    ///< OPS Sar51 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b2_sar_48to51_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_48TO51_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_48TO51_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_48TO51_WR_MASK (0xffffffffU)


///< OPS Sar48 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_48TO51_OPS_TAPS_B2_G6_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_48TO51_OPS_TAPS_B2_G6_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_48TO51_OPS_TAPS_B2_G6_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_48TO51_OPS_TAPS_B2_G6_SAR0_BF_DEF (0x00000000)

///< OPS Sar49 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_48TO51_OPS_TAPS_B2_G6_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_48TO51_OPS_TAPS_B2_G6_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_48TO51_OPS_TAPS_B2_G6_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_48TO51_OPS_TAPS_B2_G6_SAR1_BF_DEF (0x00000000)

///< OPS Sar50 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_48TO51_OPS_TAPS_B2_G6_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_48TO51_OPS_TAPS_B2_G6_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_48TO51_OPS_TAPS_B2_G6_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_48TO51_OPS_TAPS_B2_G6_SAR2_BF_DEF (0x00000000)

///< OPS Sar51 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_48TO51_OPS_TAPS_B2_G6_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_48TO51_OPS_TAPS_B2_G6_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_48TO51_OPS_TAPS_B2_G6_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_48TO51_OPS_TAPS_B2_G6_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B2_SAR_52TO55 register description at address offset 0xbdc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b2_sar_52to55
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B2_G6_SAR4 : 8;
    ///< OPS Sar52 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B2_G6_SAR5 : 8;
    ///< OPS Sar53 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B2_G6_SAR6 : 8;
    ///< OPS Sar54 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B2_G6_SAR7 : 8;
    ///< OPS Sar55 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b2_sar_52to55_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_52TO55_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_52TO55_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_52TO55_WR_MASK (0xffffffffU)


///< OPS Sar52 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_52TO55_OPS_TAPS_B2_G6_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_52TO55_OPS_TAPS_B2_G6_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_52TO55_OPS_TAPS_B2_G6_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_52TO55_OPS_TAPS_B2_G6_SAR4_BF_DEF (0x00000000)

///< OPS Sar53 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_52TO55_OPS_TAPS_B2_G6_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_52TO55_OPS_TAPS_B2_G6_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_52TO55_OPS_TAPS_B2_G6_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_52TO55_OPS_TAPS_B2_G6_SAR5_BF_DEF (0x00000000)

///< OPS Sar54 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_52TO55_OPS_TAPS_B2_G6_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_52TO55_OPS_TAPS_B2_G6_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_52TO55_OPS_TAPS_B2_G6_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_52TO55_OPS_TAPS_B2_G6_SAR6_BF_DEF (0x00000000)

///< OPS Sar55 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_52TO55_OPS_TAPS_B2_G6_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_52TO55_OPS_TAPS_B2_G6_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_52TO55_OPS_TAPS_B2_G6_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_52TO55_OPS_TAPS_B2_G6_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B2_SAR_56TO59 register description at address offset 0xbe0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b2_sar_56to59
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B2_G7_SAR0 : 8;
    ///< OPS Sar56 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B2_G7_SAR1 : 8;
    ///< OPS Sar57 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B2_G7_SAR2 : 8;
    ///< OPS Sar58 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B2_G7_SAR3 : 8;
    ///< OPS Sar59 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b2_sar_56to59_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_56TO59_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_56TO59_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_56TO59_WR_MASK (0xffffffffU)


///< OPS Sar56 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_56TO59_OPS_TAPS_B2_G7_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_56TO59_OPS_TAPS_B2_G7_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_56TO59_OPS_TAPS_B2_G7_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_56TO59_OPS_TAPS_B2_G7_SAR0_BF_DEF (0x00000000)

///< OPS Sar57 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_56TO59_OPS_TAPS_B2_G7_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_56TO59_OPS_TAPS_B2_G7_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_56TO59_OPS_TAPS_B2_G7_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_56TO59_OPS_TAPS_B2_G7_SAR1_BF_DEF (0x00000000)

///< OPS Sar58 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_56TO59_OPS_TAPS_B2_G7_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_56TO59_OPS_TAPS_B2_G7_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_56TO59_OPS_TAPS_B2_G7_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_56TO59_OPS_TAPS_B2_G7_SAR2_BF_DEF (0x00000000)

///< OPS Sar59 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_56TO59_OPS_TAPS_B2_G7_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_56TO59_OPS_TAPS_B2_G7_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_56TO59_OPS_TAPS_B2_G7_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_56TO59_OPS_TAPS_B2_G7_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B2_SAR_60TO63 register description at address offset 0xbe4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b2_sar_60to63
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B2_G7_SAR4 : 8;
    ///< OPS Sar60 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B2_G7_SAR5 : 8;
    ///< OPS Sar61 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B2_G7_SAR6 : 8;
    ///< OPS Sar62 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B2_G7_SAR7 : 8;
    ///< OPS Sar63 tap value on bit 2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b2_sar_60to63_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_60TO63_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_60TO63_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_60TO63_WR_MASK (0xffffffffU)


///< OPS Sar60 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_60TO63_OPS_TAPS_B2_G7_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_60TO63_OPS_TAPS_B2_G7_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_60TO63_OPS_TAPS_B2_G7_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_60TO63_OPS_TAPS_B2_G7_SAR4_BF_DEF (0x00000000)

///< OPS Sar61 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_60TO63_OPS_TAPS_B2_G7_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_60TO63_OPS_TAPS_B2_G7_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_60TO63_OPS_TAPS_B2_G7_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_60TO63_OPS_TAPS_B2_G7_SAR5_BF_DEF (0x00000000)

///< OPS Sar62 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_60TO63_OPS_TAPS_B2_G7_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_60TO63_OPS_TAPS_B2_G7_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_60TO63_OPS_TAPS_B2_G7_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_60TO63_OPS_TAPS_B2_G7_SAR6_BF_DEF (0x00000000)

///< OPS Sar63 tap value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_60TO63_OPS_TAPS_B2_G7_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_60TO63_OPS_TAPS_B2_G7_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_60TO63_OPS_TAPS_B2_G7_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_60TO63_OPS_TAPS_B2_G7_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B3_SAR_0TO3 register description at address offset 0xbe8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b3_sar_0to3
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B3_G0_SAR0 : 8;
    ///< OPS Sar0 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B3_G0_SAR1 : 8;
    ///< OPS Sar1 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B3_G0_SAR2 : 8;
    ///< OPS Sar2 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B3_G0_SAR3 : 8;
    ///< OPS Sar3 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b3_sar_0to3_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_0TO3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_0TO3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_0TO3_WR_MASK (0xffffffffU)


///< OPS Sar0 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_0TO3_OPS_TAPS_B3_G0_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_0TO3_OPS_TAPS_B3_G0_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_0TO3_OPS_TAPS_B3_G0_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_0TO3_OPS_TAPS_B3_G0_SAR0_BF_DEF (0x00000000)

///< OPS Sar1 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_0TO3_OPS_TAPS_B3_G0_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_0TO3_OPS_TAPS_B3_G0_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_0TO3_OPS_TAPS_B3_G0_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_0TO3_OPS_TAPS_B3_G0_SAR1_BF_DEF (0x00000000)

///< OPS Sar2 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_0TO3_OPS_TAPS_B3_G0_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_0TO3_OPS_TAPS_B3_G0_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_0TO3_OPS_TAPS_B3_G0_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_0TO3_OPS_TAPS_B3_G0_SAR2_BF_DEF (0x00000000)

///< OPS Sar3 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_0TO3_OPS_TAPS_B3_G0_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_0TO3_OPS_TAPS_B3_G0_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_0TO3_OPS_TAPS_B3_G0_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_0TO3_OPS_TAPS_B3_G0_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B3_SAR_4TO7 register description at address offset 0xbec
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b3_sar_4to7
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B3_G0_SAR4 : 8;
    ///< OPS Sar4 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B3_G0_SAR5 : 8;
    ///< OPS Sar5 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B3_G0_SAR6 : 8;
    ///< OPS Sar6 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B3_G0_SAR7 : 8;
    ///< OPS Sar7 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b3_sar_4to7_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_4TO7_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_4TO7_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_4TO7_WR_MASK (0xffffffffU)


///< OPS Sar4 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_4TO7_OPS_TAPS_B3_G0_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_4TO7_OPS_TAPS_B3_G0_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_4TO7_OPS_TAPS_B3_G0_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_4TO7_OPS_TAPS_B3_G0_SAR4_BF_DEF (0x00000000)

///< OPS Sar5 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_4TO7_OPS_TAPS_B3_G0_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_4TO7_OPS_TAPS_B3_G0_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_4TO7_OPS_TAPS_B3_G0_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_4TO7_OPS_TAPS_B3_G0_SAR5_BF_DEF (0x00000000)

///< OPS Sar6 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_4TO7_OPS_TAPS_B3_G0_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_4TO7_OPS_TAPS_B3_G0_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_4TO7_OPS_TAPS_B3_G0_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_4TO7_OPS_TAPS_B3_G0_SAR6_BF_DEF (0x00000000)

///< OPS Sar7 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_4TO7_OPS_TAPS_B3_G0_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_4TO7_OPS_TAPS_B3_G0_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_4TO7_OPS_TAPS_B3_G0_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_4TO7_OPS_TAPS_B3_G0_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B3_SAR_8TO11 register description at address offset 0xbf0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b3_sar_8to11
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B3_G1_SAR0 : 8;
    ///< OPS Sar8  tap value on bit 3
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B3_G1_SAR1 : 8;
    ///< OPS Sar9  tap value on bit 3
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B3_G1_SAR2 : 8;
    ///< OPS Sar10 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B3_G1_SAR3 : 8;
    ///< OPS Sar11 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b3_sar_8to11_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_8TO11_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_8TO11_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_8TO11_WR_MASK (0xffffffffU)


///< OPS Sar8  tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_8TO11_OPS_TAPS_B3_G1_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_8TO11_OPS_TAPS_B3_G1_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_8TO11_OPS_TAPS_B3_G1_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_8TO11_OPS_TAPS_B3_G1_SAR0_BF_DEF (0x00000000)

///< OPS Sar9  tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_8TO11_OPS_TAPS_B3_G1_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_8TO11_OPS_TAPS_B3_G1_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_8TO11_OPS_TAPS_B3_G1_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_8TO11_OPS_TAPS_B3_G1_SAR1_BF_DEF (0x00000000)

///< OPS Sar10 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_8TO11_OPS_TAPS_B3_G1_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_8TO11_OPS_TAPS_B3_G1_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_8TO11_OPS_TAPS_B3_G1_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_8TO11_OPS_TAPS_B3_G1_SAR2_BF_DEF (0x00000000)

///< OPS Sar11 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_8TO11_OPS_TAPS_B3_G1_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_8TO11_OPS_TAPS_B3_G1_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_8TO11_OPS_TAPS_B3_G1_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_8TO11_OPS_TAPS_B3_G1_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B3_SAR_12TO15 register description at address offset 0xbf4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b3_sar_12to15
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B3_G1_SAR4 : 8;
    ///< OPS Sar12 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B3_G1_SAR5 : 8;
    ///< OPS Sar13 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B3_G1_SAR6 : 8;
    ///< OPS Sar14 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B3_G1_SAR7 : 8;
    ///< OPS Sar15 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b3_sar_12to15_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_12TO15_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_12TO15_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_12TO15_WR_MASK (0xffffffffU)


///< OPS Sar12 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_12TO15_OPS_TAPS_B3_G1_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_12TO15_OPS_TAPS_B3_G1_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_12TO15_OPS_TAPS_B3_G1_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_12TO15_OPS_TAPS_B3_G1_SAR4_BF_DEF (0x00000000)

///< OPS Sar13 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_12TO15_OPS_TAPS_B3_G1_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_12TO15_OPS_TAPS_B3_G1_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_12TO15_OPS_TAPS_B3_G1_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_12TO15_OPS_TAPS_B3_G1_SAR5_BF_DEF (0x00000000)

///< OPS Sar14 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_12TO15_OPS_TAPS_B3_G1_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_12TO15_OPS_TAPS_B3_G1_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_12TO15_OPS_TAPS_B3_G1_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_12TO15_OPS_TAPS_B3_G1_SAR6_BF_DEF (0x00000000)

///< OPS Sar15 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_12TO15_OPS_TAPS_B3_G1_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_12TO15_OPS_TAPS_B3_G1_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_12TO15_OPS_TAPS_B3_G1_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_12TO15_OPS_TAPS_B3_G1_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B3_SAR_16TO19 register description at address offset 0xbf8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b3_sar_16to19
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B3_G2_SAR0 : 8;
    ///< OPS Sar16 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B3_G2_SAR1 : 8;
    ///< OPS Sar17 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B3_G2_SAR2 : 8;
    ///< OPS Sar18 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B3_G2_SAR3 : 8;
    ///< OPS Sar19 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b3_sar_16to19_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_16TO19_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_16TO19_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_16TO19_WR_MASK (0xffffffffU)


///< OPS Sar16 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_16TO19_OPS_TAPS_B3_G2_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_16TO19_OPS_TAPS_B3_G2_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_16TO19_OPS_TAPS_B3_G2_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_16TO19_OPS_TAPS_B3_G2_SAR0_BF_DEF (0x00000000)

///< OPS Sar17 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_16TO19_OPS_TAPS_B3_G2_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_16TO19_OPS_TAPS_B3_G2_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_16TO19_OPS_TAPS_B3_G2_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_16TO19_OPS_TAPS_B3_G2_SAR1_BF_DEF (0x00000000)

///< OPS Sar18 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_16TO19_OPS_TAPS_B3_G2_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_16TO19_OPS_TAPS_B3_G2_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_16TO19_OPS_TAPS_B3_G2_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_16TO19_OPS_TAPS_B3_G2_SAR2_BF_DEF (0x00000000)

///< OPS Sar19 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_16TO19_OPS_TAPS_B3_G2_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_16TO19_OPS_TAPS_B3_G2_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_16TO19_OPS_TAPS_B3_G2_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_16TO19_OPS_TAPS_B3_G2_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B3_SAR_20TO23 register description at address offset 0xbfc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b3_sar_20to23
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B3_G2_SAR4 : 8;
    ///< OPS Sar20 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B3_G2_SAR5 : 8;
    ///< OPS Sar21 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B3_G2_SAR6 : 8;
    ///< OPS Sar22 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B3_G2_SAR7 : 8;
    ///< OPS Sar23 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b3_sar_20to23_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_20TO23_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_20TO23_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_20TO23_WR_MASK (0xffffffffU)


///< OPS Sar20 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_20TO23_OPS_TAPS_B3_G2_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_20TO23_OPS_TAPS_B3_G2_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_20TO23_OPS_TAPS_B3_G2_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_20TO23_OPS_TAPS_B3_G2_SAR4_BF_DEF (0x00000000)

///< OPS Sar21 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_20TO23_OPS_TAPS_B3_G2_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_20TO23_OPS_TAPS_B3_G2_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_20TO23_OPS_TAPS_B3_G2_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_20TO23_OPS_TAPS_B3_G2_SAR5_BF_DEF (0x00000000)

///< OPS Sar22 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_20TO23_OPS_TAPS_B3_G2_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_20TO23_OPS_TAPS_B3_G2_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_20TO23_OPS_TAPS_B3_G2_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_20TO23_OPS_TAPS_B3_G2_SAR6_BF_DEF (0x00000000)

///< OPS Sar23 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_20TO23_OPS_TAPS_B3_G2_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_20TO23_OPS_TAPS_B3_G2_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_20TO23_OPS_TAPS_B3_G2_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_20TO23_OPS_TAPS_B3_G2_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B3_SAR_24TO27 register description at address offset 0xc00
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b3_sar_24to27
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B3_G3_SAR0 : 8;
    ///< OPS Sar24 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B3_G3_SAR1 : 8;
    ///< OPS Sar25 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B3_G3_SAR2 : 8;
    ///< OPS Sar26 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B3_G3_SAR3 : 8;
    ///< OPS Sar27 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b3_sar_24to27_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_24TO27_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_24TO27_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_24TO27_WR_MASK (0xffffffffU)


///< OPS Sar24 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_24TO27_OPS_TAPS_B3_G3_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_24TO27_OPS_TAPS_B3_G3_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_24TO27_OPS_TAPS_B3_G3_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_24TO27_OPS_TAPS_B3_G3_SAR0_BF_DEF (0x00000000)

///< OPS Sar25 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_24TO27_OPS_TAPS_B3_G3_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_24TO27_OPS_TAPS_B3_G3_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_24TO27_OPS_TAPS_B3_G3_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_24TO27_OPS_TAPS_B3_G3_SAR1_BF_DEF (0x00000000)

///< OPS Sar26 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_24TO27_OPS_TAPS_B3_G3_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_24TO27_OPS_TAPS_B3_G3_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_24TO27_OPS_TAPS_B3_G3_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_24TO27_OPS_TAPS_B3_G3_SAR2_BF_DEF (0x00000000)

///< OPS Sar27 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_24TO27_OPS_TAPS_B3_G3_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_24TO27_OPS_TAPS_B3_G3_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_24TO27_OPS_TAPS_B3_G3_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_24TO27_OPS_TAPS_B3_G3_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B3_SAR_28TO31 register description at address offset 0xc04
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b3_sar_28to31
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B3_G3_SAR4 : 8;
    ///< OPS Sar28 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B3_G3_SAR5 : 8;
    ///< OPS Sar29 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B3_G3_SAR6 : 8;
    ///< OPS Sar30 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B3_G3_SAR7 : 8;
    ///< OPS Sar31 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b3_sar_28to31_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_28TO31_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_28TO31_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_28TO31_WR_MASK (0xffffffffU)


///< OPS Sar28 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_28TO31_OPS_TAPS_B3_G3_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_28TO31_OPS_TAPS_B3_G3_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_28TO31_OPS_TAPS_B3_G3_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_28TO31_OPS_TAPS_B3_G3_SAR4_BF_DEF (0x00000000)

///< OPS Sar29 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_28TO31_OPS_TAPS_B3_G3_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_28TO31_OPS_TAPS_B3_G3_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_28TO31_OPS_TAPS_B3_G3_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_28TO31_OPS_TAPS_B3_G3_SAR5_BF_DEF (0x00000000)

///< OPS Sar30 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_28TO31_OPS_TAPS_B3_G3_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_28TO31_OPS_TAPS_B3_G3_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_28TO31_OPS_TAPS_B3_G3_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_28TO31_OPS_TAPS_B3_G3_SAR6_BF_DEF (0x00000000)

///< OPS Sar31 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_28TO31_OPS_TAPS_B3_G3_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_28TO31_OPS_TAPS_B3_G3_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_28TO31_OPS_TAPS_B3_G3_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_28TO31_OPS_TAPS_B3_G3_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B3_SAR_32TO35 register description at address offset 0xc08
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b3_sar_32to35
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B3_G4_SAR0 : 8;
    ///< OPS Sar32 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B3_G4_SAR1 : 8;
    ///< OPS Sar33 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B3_G4_SAR2 : 8;
    ///< OPS Sar34 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B3_G4_SAR3 : 8;
    ///< OPS Sar35 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b3_sar_32to35_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_32TO35_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_32TO35_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_32TO35_WR_MASK (0xffffffffU)


///< OPS Sar32 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_32TO35_OPS_TAPS_B3_G4_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_32TO35_OPS_TAPS_B3_G4_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_32TO35_OPS_TAPS_B3_G4_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_32TO35_OPS_TAPS_B3_G4_SAR0_BF_DEF (0x00000000)

///< OPS Sar33 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_32TO35_OPS_TAPS_B3_G4_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_32TO35_OPS_TAPS_B3_G4_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_32TO35_OPS_TAPS_B3_G4_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_32TO35_OPS_TAPS_B3_G4_SAR1_BF_DEF (0x00000000)

///< OPS Sar34 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_32TO35_OPS_TAPS_B3_G4_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_32TO35_OPS_TAPS_B3_G4_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_32TO35_OPS_TAPS_B3_G4_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_32TO35_OPS_TAPS_B3_G4_SAR2_BF_DEF (0x00000000)

///< OPS Sar35 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_32TO35_OPS_TAPS_B3_G4_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_32TO35_OPS_TAPS_B3_G4_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_32TO35_OPS_TAPS_B3_G4_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_32TO35_OPS_TAPS_B3_G4_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B3_SAR_36TO39 register description at address offset 0xc0c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b3_sar_36to39
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B3_G4_SAR4 : 8;
    ///< OPS Sar36 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B3_G4_SAR5 : 8;
    ///< OPS Sar37 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B3_G4_SAR6 : 8;
    ///< OPS Sar38 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B3_G4_SAR7 : 8;
    ///< OPS Sar39 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b3_sar_36to39_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_36TO39_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_36TO39_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_36TO39_WR_MASK (0xffffffffU)


///< OPS Sar36 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_36TO39_OPS_TAPS_B3_G4_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_36TO39_OPS_TAPS_B3_G4_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_36TO39_OPS_TAPS_B3_G4_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_36TO39_OPS_TAPS_B3_G4_SAR4_BF_DEF (0x00000000)

///< OPS Sar37 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_36TO39_OPS_TAPS_B3_G4_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_36TO39_OPS_TAPS_B3_G4_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_36TO39_OPS_TAPS_B3_G4_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_36TO39_OPS_TAPS_B3_G4_SAR5_BF_DEF (0x00000000)

///< OPS Sar38 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_36TO39_OPS_TAPS_B3_G4_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_36TO39_OPS_TAPS_B3_G4_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_36TO39_OPS_TAPS_B3_G4_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_36TO39_OPS_TAPS_B3_G4_SAR6_BF_DEF (0x00000000)

///< OPS Sar39 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_36TO39_OPS_TAPS_B3_G4_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_36TO39_OPS_TAPS_B3_G4_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_36TO39_OPS_TAPS_B3_G4_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_36TO39_OPS_TAPS_B3_G4_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B3_SAR_40TO43 register description at address offset 0xc10
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b3_sar_40to43
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B3_G5_SAR0 : 8;
    ///< OPS Sar40 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B3_G5_SAR1 : 8;
    ///< OPS Sar41 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B3_G5_SAR2 : 8;
    ///< OPS Sar42 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B3_G5_SAR3 : 8;
    ///< OPS Sar43 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b3_sar_40to43_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_40TO43_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_40TO43_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_40TO43_WR_MASK (0xffffffffU)


///< OPS Sar40 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_40TO43_OPS_TAPS_B3_G5_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_40TO43_OPS_TAPS_B3_G5_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_40TO43_OPS_TAPS_B3_G5_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_40TO43_OPS_TAPS_B3_G5_SAR0_BF_DEF (0x00000000)

///< OPS Sar41 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_40TO43_OPS_TAPS_B3_G5_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_40TO43_OPS_TAPS_B3_G5_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_40TO43_OPS_TAPS_B3_G5_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_40TO43_OPS_TAPS_B3_G5_SAR1_BF_DEF (0x00000000)

///< OPS Sar42 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_40TO43_OPS_TAPS_B3_G5_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_40TO43_OPS_TAPS_B3_G5_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_40TO43_OPS_TAPS_B3_G5_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_40TO43_OPS_TAPS_B3_G5_SAR2_BF_DEF (0x00000000)

///< OPS Sar43 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_40TO43_OPS_TAPS_B3_G5_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_40TO43_OPS_TAPS_B3_G5_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_40TO43_OPS_TAPS_B3_G5_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_40TO43_OPS_TAPS_B3_G5_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B3_SAR_44TO47 register description at address offset 0xc14
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b3_sar_44to47
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B3_G5_SAR4 : 8;
    ///< OPS Sar44 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B3_G5_SAR5 : 8;
    ///< OPS Sar45 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B3_G5_SAR6 : 8;
    ///< OPS Sar46 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B3_G5_SAR7 : 8;
    ///< OPS Sar47 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b3_sar_44to47_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_44TO47_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_44TO47_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_44TO47_WR_MASK (0xffffffffU)


///< OPS Sar44 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_44TO47_OPS_TAPS_B3_G5_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_44TO47_OPS_TAPS_B3_G5_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_44TO47_OPS_TAPS_B3_G5_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_44TO47_OPS_TAPS_B3_G5_SAR4_BF_DEF (0x00000000)

///< OPS Sar45 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_44TO47_OPS_TAPS_B3_G5_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_44TO47_OPS_TAPS_B3_G5_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_44TO47_OPS_TAPS_B3_G5_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_44TO47_OPS_TAPS_B3_G5_SAR5_BF_DEF (0x00000000)

///< OPS Sar46 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_44TO47_OPS_TAPS_B3_G5_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_44TO47_OPS_TAPS_B3_G5_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_44TO47_OPS_TAPS_B3_G5_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_44TO47_OPS_TAPS_B3_G5_SAR6_BF_DEF (0x00000000)

///< OPS Sar47 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_44TO47_OPS_TAPS_B3_G5_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_44TO47_OPS_TAPS_B3_G5_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_44TO47_OPS_TAPS_B3_G5_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_44TO47_OPS_TAPS_B3_G5_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B3_SAR_48TO51 register description at address offset 0xc18
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b3_sar_48to51
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B3_G6_SAR0 : 8;
    ///< OPS Sar48 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B3_G6_SAR1 : 8;
    ///< OPS Sar49 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B3_G6_SAR2 : 8;
    ///< OPS Sar50 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B3_G6_SAR3 : 8;
    ///< OPS Sar51 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b3_sar_48to51_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_48TO51_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_48TO51_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_48TO51_WR_MASK (0xffffffffU)


///< OPS Sar48 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_48TO51_OPS_TAPS_B3_G6_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_48TO51_OPS_TAPS_B3_G6_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_48TO51_OPS_TAPS_B3_G6_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_48TO51_OPS_TAPS_B3_G6_SAR0_BF_DEF (0x00000000)

///< OPS Sar49 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_48TO51_OPS_TAPS_B3_G6_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_48TO51_OPS_TAPS_B3_G6_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_48TO51_OPS_TAPS_B3_G6_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_48TO51_OPS_TAPS_B3_G6_SAR1_BF_DEF (0x00000000)

///< OPS Sar50 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_48TO51_OPS_TAPS_B3_G6_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_48TO51_OPS_TAPS_B3_G6_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_48TO51_OPS_TAPS_B3_G6_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_48TO51_OPS_TAPS_B3_G6_SAR2_BF_DEF (0x00000000)

///< OPS Sar51 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_48TO51_OPS_TAPS_B3_G6_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_48TO51_OPS_TAPS_B3_G6_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_48TO51_OPS_TAPS_B3_G6_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_48TO51_OPS_TAPS_B3_G6_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B3_SAR_52TO55 register description at address offset 0xc1c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b3_sar_52to55
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B3_G6_SAR4 : 8;
    ///< OPS Sar52 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B3_G6_SAR5 : 8;
    ///< OPS Sar53 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B3_G6_SAR6 : 8;
    ///< OPS Sar54 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B3_G6_SAR7 : 8;
    ///< OPS Sar55 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b3_sar_52to55_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_52TO55_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_52TO55_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_52TO55_WR_MASK (0xffffffffU)


///< OPS Sar52 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_52TO55_OPS_TAPS_B3_G6_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_52TO55_OPS_TAPS_B3_G6_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_52TO55_OPS_TAPS_B3_G6_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_52TO55_OPS_TAPS_B3_G6_SAR4_BF_DEF (0x00000000)

///< OPS Sar53 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_52TO55_OPS_TAPS_B3_G6_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_52TO55_OPS_TAPS_B3_G6_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_52TO55_OPS_TAPS_B3_G6_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_52TO55_OPS_TAPS_B3_G6_SAR5_BF_DEF (0x00000000)

///< OPS Sar54 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_52TO55_OPS_TAPS_B3_G6_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_52TO55_OPS_TAPS_B3_G6_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_52TO55_OPS_TAPS_B3_G6_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_52TO55_OPS_TAPS_B3_G6_SAR6_BF_DEF (0x00000000)

///< OPS Sar55 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_52TO55_OPS_TAPS_B3_G6_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_52TO55_OPS_TAPS_B3_G6_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_52TO55_OPS_TAPS_B3_G6_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_52TO55_OPS_TAPS_B3_G6_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B3_SAR_56TO59 register description at address offset 0xc20
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b3_sar_56to59
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B3_G7_SAR0 : 8;
    ///< OPS Sar56 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B3_G7_SAR1 : 8;
    ///< OPS Sar57 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B3_G7_SAR2 : 8;
    ///< OPS Sar58 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B3_G7_SAR3 : 8;
    ///< OPS Sar59 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b3_sar_56to59_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_56TO59_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_56TO59_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_56TO59_WR_MASK (0xffffffffU)


///< OPS Sar56 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_56TO59_OPS_TAPS_B3_G7_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_56TO59_OPS_TAPS_B3_G7_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_56TO59_OPS_TAPS_B3_G7_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_56TO59_OPS_TAPS_B3_G7_SAR0_BF_DEF (0x00000000)

///< OPS Sar57 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_56TO59_OPS_TAPS_B3_G7_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_56TO59_OPS_TAPS_B3_G7_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_56TO59_OPS_TAPS_B3_G7_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_56TO59_OPS_TAPS_B3_G7_SAR1_BF_DEF (0x00000000)

///< OPS Sar58 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_56TO59_OPS_TAPS_B3_G7_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_56TO59_OPS_TAPS_B3_G7_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_56TO59_OPS_TAPS_B3_G7_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_56TO59_OPS_TAPS_B3_G7_SAR2_BF_DEF (0x00000000)

///< OPS Sar59 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_56TO59_OPS_TAPS_B3_G7_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_56TO59_OPS_TAPS_B3_G7_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_56TO59_OPS_TAPS_B3_G7_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_56TO59_OPS_TAPS_B3_G7_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B3_SAR_60TO63 register description at address offset 0xc24
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b3_sar_60to63
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B3_G7_SAR4 : 8;
    ///< OPS Sar60 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B3_G7_SAR5 : 8;
    ///< OPS Sar61 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B3_G7_SAR6 : 8;
    ///< OPS Sar62 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B3_G7_SAR7 : 8;
    ///< OPS Sar63 tap value on bit 3
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b3_sar_60to63_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_60TO63_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_60TO63_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_60TO63_WR_MASK (0xffffffffU)


///< OPS Sar60 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_60TO63_OPS_TAPS_B3_G7_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_60TO63_OPS_TAPS_B3_G7_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_60TO63_OPS_TAPS_B3_G7_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_60TO63_OPS_TAPS_B3_G7_SAR4_BF_DEF (0x00000000)

///< OPS Sar61 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_60TO63_OPS_TAPS_B3_G7_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_60TO63_OPS_TAPS_B3_G7_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_60TO63_OPS_TAPS_B3_G7_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_60TO63_OPS_TAPS_B3_G7_SAR5_BF_DEF (0x00000000)

///< OPS Sar62 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_60TO63_OPS_TAPS_B3_G7_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_60TO63_OPS_TAPS_B3_G7_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_60TO63_OPS_TAPS_B3_G7_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_60TO63_OPS_TAPS_B3_G7_SAR6_BF_DEF (0x00000000)

///< OPS Sar63 tap value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_60TO63_OPS_TAPS_B3_G7_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_60TO63_OPS_TAPS_B3_G7_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_60TO63_OPS_TAPS_B3_G7_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_60TO63_OPS_TAPS_B3_G7_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B4_SAR_0TO3 register description at address offset 0xc28
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b4_sar_0to3
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B4_G0_SAR0 : 8;
    ///< OPS Sar0 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B4_G0_SAR1 : 8;
    ///< OPS Sar1 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B4_G0_SAR2 : 8;
    ///< OPS Sar2 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B4_G0_SAR3 : 8;
    ///< OPS Sar3 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b4_sar_0to3_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_0TO3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_0TO3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_0TO3_WR_MASK (0xffffffffU)


///< OPS Sar0 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_0TO3_OPS_TAPS_B4_G0_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_0TO3_OPS_TAPS_B4_G0_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_0TO3_OPS_TAPS_B4_G0_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_0TO3_OPS_TAPS_B4_G0_SAR0_BF_DEF (0x00000000)

///< OPS Sar1 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_0TO3_OPS_TAPS_B4_G0_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_0TO3_OPS_TAPS_B4_G0_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_0TO3_OPS_TAPS_B4_G0_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_0TO3_OPS_TAPS_B4_G0_SAR1_BF_DEF (0x00000000)

///< OPS Sar2 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_0TO3_OPS_TAPS_B4_G0_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_0TO3_OPS_TAPS_B4_G0_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_0TO3_OPS_TAPS_B4_G0_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_0TO3_OPS_TAPS_B4_G0_SAR2_BF_DEF (0x00000000)

///< OPS Sar3 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_0TO3_OPS_TAPS_B4_G0_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_0TO3_OPS_TAPS_B4_G0_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_0TO3_OPS_TAPS_B4_G0_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_0TO3_OPS_TAPS_B4_G0_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B4_SAR_4TO7 register description at address offset 0xc2c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b4_sar_4to7
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B4_G0_SAR4 : 8;
    ///< OPS Sar4 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B4_G0_SAR5 : 8;
    ///< OPS Sar5 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B4_G0_SAR6 : 8;
    ///< OPS Sar6 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B4_G0_SAR7 : 8;
    ///< OPS Sar7 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b4_sar_4to7_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_4TO7_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_4TO7_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_4TO7_WR_MASK (0xffffffffU)


///< OPS Sar4 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_4TO7_OPS_TAPS_B4_G0_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_4TO7_OPS_TAPS_B4_G0_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_4TO7_OPS_TAPS_B4_G0_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_4TO7_OPS_TAPS_B4_G0_SAR4_BF_DEF (0x00000000)

///< OPS Sar5 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_4TO7_OPS_TAPS_B4_G0_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_4TO7_OPS_TAPS_B4_G0_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_4TO7_OPS_TAPS_B4_G0_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_4TO7_OPS_TAPS_B4_G0_SAR5_BF_DEF (0x00000000)

///< OPS Sar6 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_4TO7_OPS_TAPS_B4_G0_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_4TO7_OPS_TAPS_B4_G0_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_4TO7_OPS_TAPS_B4_G0_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_4TO7_OPS_TAPS_B4_G0_SAR6_BF_DEF (0x00000000)

///< OPS Sar7 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_4TO7_OPS_TAPS_B4_G0_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_4TO7_OPS_TAPS_B4_G0_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_4TO7_OPS_TAPS_B4_G0_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_4TO7_OPS_TAPS_B4_G0_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B4_SAR_8TO11 register description at address offset 0xc30
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b4_sar_8to11
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B4_G1_SAR0 : 8;
    ///< OPS Sar8  tap value on bit 4
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B4_G1_SAR1 : 8;
    ///< OPS Sar9  tap value on bit 4
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B4_G1_SAR2 : 8;
    ///< OPS Sar10 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B4_G1_SAR3 : 8;
    ///< OPS Sar11 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b4_sar_8to11_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_8TO11_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_8TO11_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_8TO11_WR_MASK (0xffffffffU)


///< OPS Sar8  tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_8TO11_OPS_TAPS_B4_G1_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_8TO11_OPS_TAPS_B4_G1_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_8TO11_OPS_TAPS_B4_G1_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_8TO11_OPS_TAPS_B4_G1_SAR0_BF_DEF (0x00000000)

///< OPS Sar9  tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_8TO11_OPS_TAPS_B4_G1_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_8TO11_OPS_TAPS_B4_G1_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_8TO11_OPS_TAPS_B4_G1_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_8TO11_OPS_TAPS_B4_G1_SAR1_BF_DEF (0x00000000)

///< OPS Sar10 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_8TO11_OPS_TAPS_B4_G1_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_8TO11_OPS_TAPS_B4_G1_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_8TO11_OPS_TAPS_B4_G1_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_8TO11_OPS_TAPS_B4_G1_SAR2_BF_DEF (0x00000000)

///< OPS Sar11 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_8TO11_OPS_TAPS_B4_G1_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_8TO11_OPS_TAPS_B4_G1_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_8TO11_OPS_TAPS_B4_G1_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_8TO11_OPS_TAPS_B4_G1_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B4_SAR_12TO15 register description at address offset 0xc34
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b4_sar_12to15
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B4_G1_SAR4 : 8;
    ///< OPS Sar12 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B4_G1_SAR5 : 8;
    ///< OPS Sar13 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B4_G1_SAR6 : 8;
    ///< OPS Sar14 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B4_G1_SAR7 : 8;
    ///< OPS Sar15 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b4_sar_12to15_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_12TO15_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_12TO15_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_12TO15_WR_MASK (0xffffffffU)


///< OPS Sar12 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_12TO15_OPS_TAPS_B4_G1_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_12TO15_OPS_TAPS_B4_G1_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_12TO15_OPS_TAPS_B4_G1_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_12TO15_OPS_TAPS_B4_G1_SAR4_BF_DEF (0x00000000)

///< OPS Sar13 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_12TO15_OPS_TAPS_B4_G1_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_12TO15_OPS_TAPS_B4_G1_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_12TO15_OPS_TAPS_B4_G1_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_12TO15_OPS_TAPS_B4_G1_SAR5_BF_DEF (0x00000000)

///< OPS Sar14 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_12TO15_OPS_TAPS_B4_G1_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_12TO15_OPS_TAPS_B4_G1_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_12TO15_OPS_TAPS_B4_G1_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_12TO15_OPS_TAPS_B4_G1_SAR6_BF_DEF (0x00000000)

///< OPS Sar15 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_12TO15_OPS_TAPS_B4_G1_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_12TO15_OPS_TAPS_B4_G1_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_12TO15_OPS_TAPS_B4_G1_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_12TO15_OPS_TAPS_B4_G1_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B4_SAR_16TO19 register description at address offset 0xc38
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b4_sar_16to19
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B4_G2_SAR0 : 8;
    ///< OPS Sar16 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B4_G2_SAR1 : 8;
    ///< OPS Sar17 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B4_G2_SAR2 : 8;
    ///< OPS Sar18 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B4_G2_SAR3 : 8;
    ///< OPS Sar19 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b4_sar_16to19_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_16TO19_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_16TO19_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_16TO19_WR_MASK (0xffffffffU)


///< OPS Sar16 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_16TO19_OPS_TAPS_B4_G2_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_16TO19_OPS_TAPS_B4_G2_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_16TO19_OPS_TAPS_B4_G2_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_16TO19_OPS_TAPS_B4_G2_SAR0_BF_DEF (0x00000000)

///< OPS Sar17 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_16TO19_OPS_TAPS_B4_G2_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_16TO19_OPS_TAPS_B4_G2_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_16TO19_OPS_TAPS_B4_G2_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_16TO19_OPS_TAPS_B4_G2_SAR1_BF_DEF (0x00000000)

///< OPS Sar18 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_16TO19_OPS_TAPS_B4_G2_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_16TO19_OPS_TAPS_B4_G2_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_16TO19_OPS_TAPS_B4_G2_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_16TO19_OPS_TAPS_B4_G2_SAR2_BF_DEF (0x00000000)

///< OPS Sar19 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_16TO19_OPS_TAPS_B4_G2_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_16TO19_OPS_TAPS_B4_G2_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_16TO19_OPS_TAPS_B4_G2_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_16TO19_OPS_TAPS_B4_G2_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B4_SAR_20TO23 register description at address offset 0xc3c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b4_sar_20to23
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B4_G2_SAR4 : 8;
    ///< OPS Sar20 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B4_G2_SAR5 : 8;
    ///< OPS Sar21 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B4_G2_SAR6 : 8;
    ///< OPS Sar22 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B4_G2_SAR7 : 8;
    ///< OPS Sar23 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b4_sar_20to23_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_20TO23_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_20TO23_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_20TO23_WR_MASK (0xffffffffU)


///< OPS Sar20 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_20TO23_OPS_TAPS_B4_G2_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_20TO23_OPS_TAPS_B4_G2_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_20TO23_OPS_TAPS_B4_G2_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_20TO23_OPS_TAPS_B4_G2_SAR4_BF_DEF (0x00000000)

///< OPS Sar21 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_20TO23_OPS_TAPS_B4_G2_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_20TO23_OPS_TAPS_B4_G2_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_20TO23_OPS_TAPS_B4_G2_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_20TO23_OPS_TAPS_B4_G2_SAR5_BF_DEF (0x00000000)

///< OPS Sar22 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_20TO23_OPS_TAPS_B4_G2_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_20TO23_OPS_TAPS_B4_G2_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_20TO23_OPS_TAPS_B4_G2_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_20TO23_OPS_TAPS_B4_G2_SAR6_BF_DEF (0x00000000)

///< OPS Sar23 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_20TO23_OPS_TAPS_B4_G2_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_20TO23_OPS_TAPS_B4_G2_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_20TO23_OPS_TAPS_B4_G2_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_20TO23_OPS_TAPS_B4_G2_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B4_SAR_24TO27 register description at address offset 0xc40
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b4_sar_24to27
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B4_G3_SAR0 : 8;
    ///< OPS Sar24 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B4_G3_SAR1 : 8;
    ///< OPS Sar25 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B4_G3_SAR2 : 8;
    ///< OPS Sar26 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B4_G3_SAR3 : 8;
    ///< OPS Sar27 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b4_sar_24to27_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_24TO27_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_24TO27_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_24TO27_WR_MASK (0xffffffffU)


///< OPS Sar24 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_24TO27_OPS_TAPS_B4_G3_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_24TO27_OPS_TAPS_B4_G3_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_24TO27_OPS_TAPS_B4_G3_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_24TO27_OPS_TAPS_B4_G3_SAR0_BF_DEF (0x00000000)

///< OPS Sar25 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_24TO27_OPS_TAPS_B4_G3_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_24TO27_OPS_TAPS_B4_G3_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_24TO27_OPS_TAPS_B4_G3_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_24TO27_OPS_TAPS_B4_G3_SAR1_BF_DEF (0x00000000)

///< OPS Sar26 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_24TO27_OPS_TAPS_B4_G3_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_24TO27_OPS_TAPS_B4_G3_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_24TO27_OPS_TAPS_B4_G3_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_24TO27_OPS_TAPS_B4_G3_SAR2_BF_DEF (0x00000000)

///< OPS Sar27 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_24TO27_OPS_TAPS_B4_G3_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_24TO27_OPS_TAPS_B4_G3_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_24TO27_OPS_TAPS_B4_G3_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_24TO27_OPS_TAPS_B4_G3_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B4_SAR_28TO31 register description at address offset 0xc44
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b4_sar_28to31
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B4_G3_SAR4 : 8;
    ///< OPS Sar28 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B4_G3_SAR5 : 8;
    ///< OPS Sar29 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B4_G3_SAR6 : 8;
    ///< OPS Sar30 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B4_G3_SAR7 : 8;
    ///< OPS Sar31 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b4_sar_28to31_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_28TO31_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_28TO31_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_28TO31_WR_MASK (0xffffffffU)


///< OPS Sar28 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_28TO31_OPS_TAPS_B4_G3_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_28TO31_OPS_TAPS_B4_G3_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_28TO31_OPS_TAPS_B4_G3_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_28TO31_OPS_TAPS_B4_G3_SAR4_BF_DEF (0x00000000)

///< OPS Sar29 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_28TO31_OPS_TAPS_B4_G3_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_28TO31_OPS_TAPS_B4_G3_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_28TO31_OPS_TAPS_B4_G3_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_28TO31_OPS_TAPS_B4_G3_SAR5_BF_DEF (0x00000000)

///< OPS Sar30 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_28TO31_OPS_TAPS_B4_G3_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_28TO31_OPS_TAPS_B4_G3_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_28TO31_OPS_TAPS_B4_G3_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_28TO31_OPS_TAPS_B4_G3_SAR6_BF_DEF (0x00000000)

///< OPS Sar31 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_28TO31_OPS_TAPS_B4_G3_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_28TO31_OPS_TAPS_B4_G3_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_28TO31_OPS_TAPS_B4_G3_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_28TO31_OPS_TAPS_B4_G3_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B4_SAR_32TO35 register description at address offset 0xc48
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b4_sar_32to35
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B4_G4_SAR0 : 8;
    ///< OPS Sar32 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B4_G4_SAR1 : 8;
    ///< OPS Sar33 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B4_G4_SAR2 : 8;
    ///< OPS Sar34 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B4_G4_SAR3 : 8;
    ///< OPS Sar35 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b4_sar_32to35_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_32TO35_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_32TO35_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_32TO35_WR_MASK (0xffffffffU)


///< OPS Sar32 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_32TO35_OPS_TAPS_B4_G4_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_32TO35_OPS_TAPS_B4_G4_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_32TO35_OPS_TAPS_B4_G4_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_32TO35_OPS_TAPS_B4_G4_SAR0_BF_DEF (0x00000000)

///< OPS Sar33 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_32TO35_OPS_TAPS_B4_G4_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_32TO35_OPS_TAPS_B4_G4_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_32TO35_OPS_TAPS_B4_G4_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_32TO35_OPS_TAPS_B4_G4_SAR1_BF_DEF (0x00000000)

///< OPS Sar34 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_32TO35_OPS_TAPS_B4_G4_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_32TO35_OPS_TAPS_B4_G4_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_32TO35_OPS_TAPS_B4_G4_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_32TO35_OPS_TAPS_B4_G4_SAR2_BF_DEF (0x00000000)

///< OPS Sar35 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_32TO35_OPS_TAPS_B4_G4_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_32TO35_OPS_TAPS_B4_G4_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_32TO35_OPS_TAPS_B4_G4_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_32TO35_OPS_TAPS_B4_G4_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B4_SAR_36TO39 register description at address offset 0xc4c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b4_sar_36to39
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B4_G4_SAR4 : 8;
    ///< OPS Sar36 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B4_G4_SAR5 : 8;
    ///< OPS Sar37 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B4_G4_SAR6 : 8;
    ///< OPS Sar38 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B4_G4_SAR7 : 8;
    ///< OPS Sar39 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b4_sar_36to39_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_36TO39_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_36TO39_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_36TO39_WR_MASK (0xffffffffU)


///< OPS Sar36 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_36TO39_OPS_TAPS_B4_G4_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_36TO39_OPS_TAPS_B4_G4_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_36TO39_OPS_TAPS_B4_G4_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_36TO39_OPS_TAPS_B4_G4_SAR4_BF_DEF (0x00000000)

///< OPS Sar37 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_36TO39_OPS_TAPS_B4_G4_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_36TO39_OPS_TAPS_B4_G4_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_36TO39_OPS_TAPS_B4_G4_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_36TO39_OPS_TAPS_B4_G4_SAR5_BF_DEF (0x00000000)

///< OPS Sar38 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_36TO39_OPS_TAPS_B4_G4_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_36TO39_OPS_TAPS_B4_G4_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_36TO39_OPS_TAPS_B4_G4_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_36TO39_OPS_TAPS_B4_G4_SAR6_BF_DEF (0x00000000)

///< OPS Sar39 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_36TO39_OPS_TAPS_B4_G4_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_36TO39_OPS_TAPS_B4_G4_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_36TO39_OPS_TAPS_B4_G4_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_36TO39_OPS_TAPS_B4_G4_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B4_SAR_40TO43 register description at address offset 0xc50
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b4_sar_40to43
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B4_G5_SAR0 : 8;
    ///< OPS Sar40 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B4_G5_SAR1 : 8;
    ///< OPS Sar41 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B4_G5_SAR2 : 8;
    ///< OPS Sar42 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B4_G5_SAR3 : 8;
    ///< OPS Sar43 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b4_sar_40to43_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_40TO43_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_40TO43_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_40TO43_WR_MASK (0xffffffffU)


///< OPS Sar40 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_40TO43_OPS_TAPS_B4_G5_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_40TO43_OPS_TAPS_B4_G5_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_40TO43_OPS_TAPS_B4_G5_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_40TO43_OPS_TAPS_B4_G5_SAR0_BF_DEF (0x00000000)

///< OPS Sar41 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_40TO43_OPS_TAPS_B4_G5_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_40TO43_OPS_TAPS_B4_G5_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_40TO43_OPS_TAPS_B4_G5_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_40TO43_OPS_TAPS_B4_G5_SAR1_BF_DEF (0x00000000)

///< OPS Sar42 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_40TO43_OPS_TAPS_B4_G5_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_40TO43_OPS_TAPS_B4_G5_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_40TO43_OPS_TAPS_B4_G5_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_40TO43_OPS_TAPS_B4_G5_SAR2_BF_DEF (0x00000000)

///< OPS Sar43 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_40TO43_OPS_TAPS_B4_G5_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_40TO43_OPS_TAPS_B4_G5_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_40TO43_OPS_TAPS_B4_G5_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_40TO43_OPS_TAPS_B4_G5_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B4_SAR_44TO47 register description at address offset 0xc54
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b4_sar_44to47
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B4_G5_SAR4 : 8;
    ///< OPS Sar44 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B4_G5_SAR5 : 8;
    ///< OPS Sar45 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B4_G5_SAR6 : 8;
    ///< OPS Sar46 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B4_G5_SAR7 : 8;
    ///< OPS Sar47 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b4_sar_44to47_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_44TO47_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_44TO47_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_44TO47_WR_MASK (0xffffffffU)


///< OPS Sar44 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_44TO47_OPS_TAPS_B4_G5_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_44TO47_OPS_TAPS_B4_G5_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_44TO47_OPS_TAPS_B4_G5_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_44TO47_OPS_TAPS_B4_G5_SAR4_BF_DEF (0x00000000)

///< OPS Sar45 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_44TO47_OPS_TAPS_B4_G5_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_44TO47_OPS_TAPS_B4_G5_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_44TO47_OPS_TAPS_B4_G5_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_44TO47_OPS_TAPS_B4_G5_SAR5_BF_DEF (0x00000000)

///< OPS Sar46 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_44TO47_OPS_TAPS_B4_G5_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_44TO47_OPS_TAPS_B4_G5_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_44TO47_OPS_TAPS_B4_G5_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_44TO47_OPS_TAPS_B4_G5_SAR6_BF_DEF (0x00000000)

///< OPS Sar47 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_44TO47_OPS_TAPS_B4_G5_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_44TO47_OPS_TAPS_B4_G5_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_44TO47_OPS_TAPS_B4_G5_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_44TO47_OPS_TAPS_B4_G5_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B4_SAR_48TO51 register description at address offset 0xc58
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b4_sar_48to51
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B4_G6_SAR0 : 8;
    ///< OPS Sar48 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B4_G6_SAR1 : 8;
    ///< OPS Sar49 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B4_G6_SAR2 : 8;
    ///< OPS Sar50 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B4_G6_SAR3 : 8;
    ///< OPS Sar51 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b4_sar_48to51_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_48TO51_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_48TO51_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_48TO51_WR_MASK (0xffffffffU)


///< OPS Sar48 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_48TO51_OPS_TAPS_B4_G6_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_48TO51_OPS_TAPS_B4_G6_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_48TO51_OPS_TAPS_B4_G6_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_48TO51_OPS_TAPS_B4_G6_SAR0_BF_DEF (0x00000000)

///< OPS Sar49 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_48TO51_OPS_TAPS_B4_G6_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_48TO51_OPS_TAPS_B4_G6_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_48TO51_OPS_TAPS_B4_G6_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_48TO51_OPS_TAPS_B4_G6_SAR1_BF_DEF (0x00000000)

///< OPS Sar50 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_48TO51_OPS_TAPS_B4_G6_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_48TO51_OPS_TAPS_B4_G6_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_48TO51_OPS_TAPS_B4_G6_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_48TO51_OPS_TAPS_B4_G6_SAR2_BF_DEF (0x00000000)

///< OPS Sar51 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_48TO51_OPS_TAPS_B4_G6_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_48TO51_OPS_TAPS_B4_G6_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_48TO51_OPS_TAPS_B4_G6_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_48TO51_OPS_TAPS_B4_G6_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B4_SAR_52TO55 register description at address offset 0xc5c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b4_sar_52to55
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B4_G6_SAR4 : 8;
    ///< OPS Sar52 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B4_G6_SAR5 : 8;
    ///< OPS Sar53 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B4_G6_SAR6 : 8;
    ///< OPS Sar54 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B4_G6_SAR7 : 8;
    ///< OPS Sar55 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b4_sar_52to55_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_52TO55_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_52TO55_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_52TO55_WR_MASK (0xffffffffU)


///< OPS Sar52 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_52TO55_OPS_TAPS_B4_G6_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_52TO55_OPS_TAPS_B4_G6_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_52TO55_OPS_TAPS_B4_G6_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_52TO55_OPS_TAPS_B4_G6_SAR4_BF_DEF (0x00000000)

///< OPS Sar53 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_52TO55_OPS_TAPS_B4_G6_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_52TO55_OPS_TAPS_B4_G6_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_52TO55_OPS_TAPS_B4_G6_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_52TO55_OPS_TAPS_B4_G6_SAR5_BF_DEF (0x00000000)

///< OPS Sar54 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_52TO55_OPS_TAPS_B4_G6_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_52TO55_OPS_TAPS_B4_G6_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_52TO55_OPS_TAPS_B4_G6_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_52TO55_OPS_TAPS_B4_G6_SAR6_BF_DEF (0x00000000)

///< OPS Sar55 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_52TO55_OPS_TAPS_B4_G6_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_52TO55_OPS_TAPS_B4_G6_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_52TO55_OPS_TAPS_B4_G6_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_52TO55_OPS_TAPS_B4_G6_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B4_SAR_56TO59 register description at address offset 0xc60
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b4_sar_56to59
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B4_G7_SAR0 : 8;
    ///< OPS Sar56 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B4_G7_SAR1 : 8;
    ///< OPS Sar57 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B4_G7_SAR2 : 8;
    ///< OPS Sar58 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B4_G7_SAR3 : 8;
    ///< OPS Sar59 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b4_sar_56to59_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_56TO59_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_56TO59_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_56TO59_WR_MASK (0xffffffffU)


///< OPS Sar56 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_56TO59_OPS_TAPS_B4_G7_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_56TO59_OPS_TAPS_B4_G7_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_56TO59_OPS_TAPS_B4_G7_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_56TO59_OPS_TAPS_B4_G7_SAR0_BF_DEF (0x00000000)

///< OPS Sar57 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_56TO59_OPS_TAPS_B4_G7_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_56TO59_OPS_TAPS_B4_G7_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_56TO59_OPS_TAPS_B4_G7_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_56TO59_OPS_TAPS_B4_G7_SAR1_BF_DEF (0x00000000)

///< OPS Sar58 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_56TO59_OPS_TAPS_B4_G7_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_56TO59_OPS_TAPS_B4_G7_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_56TO59_OPS_TAPS_B4_G7_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_56TO59_OPS_TAPS_B4_G7_SAR2_BF_DEF (0x00000000)

///< OPS Sar59 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_56TO59_OPS_TAPS_B4_G7_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_56TO59_OPS_TAPS_B4_G7_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_56TO59_OPS_TAPS_B4_G7_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_56TO59_OPS_TAPS_B4_G7_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B4_SAR_60TO63 register description at address offset 0xc64
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b4_sar_60to63
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B4_G7_SAR4 : 8;
    ///< OPS Sar60 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B4_G7_SAR5 : 8;
    ///< OPS Sar61 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B4_G7_SAR6 : 8;
    ///< OPS Sar62 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B4_G7_SAR7 : 8;
    ///< OPS Sar63 tap value on bit 4
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b4_sar_60to63_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_60TO63_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_60TO63_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_60TO63_WR_MASK (0xffffffffU)


///< OPS Sar60 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_60TO63_OPS_TAPS_B4_G7_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_60TO63_OPS_TAPS_B4_G7_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_60TO63_OPS_TAPS_B4_G7_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_60TO63_OPS_TAPS_B4_G7_SAR4_BF_DEF (0x00000000)

///< OPS Sar61 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_60TO63_OPS_TAPS_B4_G7_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_60TO63_OPS_TAPS_B4_G7_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_60TO63_OPS_TAPS_B4_G7_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_60TO63_OPS_TAPS_B4_G7_SAR5_BF_DEF (0x00000000)

///< OPS Sar62 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_60TO63_OPS_TAPS_B4_G7_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_60TO63_OPS_TAPS_B4_G7_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_60TO63_OPS_TAPS_B4_G7_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_60TO63_OPS_TAPS_B4_G7_SAR6_BF_DEF (0x00000000)

///< OPS Sar63 tap value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_60TO63_OPS_TAPS_B4_G7_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_60TO63_OPS_TAPS_B4_G7_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_60TO63_OPS_TAPS_B4_G7_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_60TO63_OPS_TAPS_B4_G7_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B5_SAR_0TO3 register description at address offset 0xc68
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b5_sar_0to3
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B5_G0_SAR0 : 8;
    ///< OPS Sar0 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B5_G0_SAR1 : 8;
    ///< OPS Sar1 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B5_G0_SAR2 : 8;
    ///< OPS Sar2 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B5_G0_SAR3 : 8;
    ///< OPS Sar3 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b5_sar_0to3_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_0TO3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_0TO3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_0TO3_WR_MASK (0xffffffffU)


///< OPS Sar0 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_0TO3_OPS_TAPS_B5_G0_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_0TO3_OPS_TAPS_B5_G0_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_0TO3_OPS_TAPS_B5_G0_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_0TO3_OPS_TAPS_B5_G0_SAR0_BF_DEF (0x00000000)

///< OPS Sar1 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_0TO3_OPS_TAPS_B5_G0_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_0TO3_OPS_TAPS_B5_G0_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_0TO3_OPS_TAPS_B5_G0_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_0TO3_OPS_TAPS_B5_G0_SAR1_BF_DEF (0x00000000)

///< OPS Sar2 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_0TO3_OPS_TAPS_B5_G0_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_0TO3_OPS_TAPS_B5_G0_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_0TO3_OPS_TAPS_B5_G0_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_0TO3_OPS_TAPS_B5_G0_SAR2_BF_DEF (0x00000000)

///< OPS Sar3 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_0TO3_OPS_TAPS_B5_G0_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_0TO3_OPS_TAPS_B5_G0_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_0TO3_OPS_TAPS_B5_G0_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_0TO3_OPS_TAPS_B5_G0_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B5_SAR_4TO7 register description at address offset 0xc6c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b5_sar_4to7
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B5_G0_SAR4 : 8;
    ///< OPS Sar4 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B5_G0_SAR5 : 8;
    ///< OPS Sar5 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B5_G0_SAR6 : 8;
    ///< OPS Sar6 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B5_G0_SAR7 : 8;
    ///< OPS Sar7 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b5_sar_4to7_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_4TO7_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_4TO7_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_4TO7_WR_MASK (0xffffffffU)


///< OPS Sar4 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_4TO7_OPS_TAPS_B5_G0_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_4TO7_OPS_TAPS_B5_G0_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_4TO7_OPS_TAPS_B5_G0_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_4TO7_OPS_TAPS_B5_G0_SAR4_BF_DEF (0x00000000)

///< OPS Sar5 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_4TO7_OPS_TAPS_B5_G0_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_4TO7_OPS_TAPS_B5_G0_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_4TO7_OPS_TAPS_B5_G0_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_4TO7_OPS_TAPS_B5_G0_SAR5_BF_DEF (0x00000000)

///< OPS Sar6 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_4TO7_OPS_TAPS_B5_G0_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_4TO7_OPS_TAPS_B5_G0_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_4TO7_OPS_TAPS_B5_G0_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_4TO7_OPS_TAPS_B5_G0_SAR6_BF_DEF (0x00000000)

///< OPS Sar7 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_4TO7_OPS_TAPS_B5_G0_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_4TO7_OPS_TAPS_B5_G0_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_4TO7_OPS_TAPS_B5_G0_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_4TO7_OPS_TAPS_B5_G0_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B5_SAR_8TO11 register description at address offset 0xc70
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b5_sar_8to11
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B5_G1_SAR0 : 8;
    ///< OPS Sar8  tap value on bit 5
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B5_G1_SAR1 : 8;
    ///< OPS Sar9  tap value on bit 5
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B5_G1_SAR2 : 8;
    ///< OPS Sar10 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B5_G1_SAR3 : 8;
    ///< OPS Sar11 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b5_sar_8to11_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_8TO11_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_8TO11_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_8TO11_WR_MASK (0xffffffffU)


///< OPS Sar8  tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_8TO11_OPS_TAPS_B5_G1_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_8TO11_OPS_TAPS_B5_G1_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_8TO11_OPS_TAPS_B5_G1_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_8TO11_OPS_TAPS_B5_G1_SAR0_BF_DEF (0x00000000)

///< OPS Sar9  tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_8TO11_OPS_TAPS_B5_G1_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_8TO11_OPS_TAPS_B5_G1_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_8TO11_OPS_TAPS_B5_G1_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_8TO11_OPS_TAPS_B5_G1_SAR1_BF_DEF (0x00000000)

///< OPS Sar10 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_8TO11_OPS_TAPS_B5_G1_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_8TO11_OPS_TAPS_B5_G1_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_8TO11_OPS_TAPS_B5_G1_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_8TO11_OPS_TAPS_B5_G1_SAR2_BF_DEF (0x00000000)

///< OPS Sar11 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_8TO11_OPS_TAPS_B5_G1_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_8TO11_OPS_TAPS_B5_G1_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_8TO11_OPS_TAPS_B5_G1_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_8TO11_OPS_TAPS_B5_G1_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B5_SAR_12TO15 register description at address offset 0xc74
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b5_sar_12to15
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B5_G1_SAR4 : 8;
    ///< OPS Sar12 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B5_G1_SAR5 : 8;
    ///< OPS Sar13 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B5_G1_SAR6 : 8;
    ///< OPS Sar14 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B5_G1_SAR7 : 8;
    ///< OPS Sar15 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b5_sar_12to15_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_12TO15_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_12TO15_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_12TO15_WR_MASK (0xffffffffU)


///< OPS Sar12 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_12TO15_OPS_TAPS_B5_G1_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_12TO15_OPS_TAPS_B5_G1_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_12TO15_OPS_TAPS_B5_G1_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_12TO15_OPS_TAPS_B5_G1_SAR4_BF_DEF (0x00000000)

///< OPS Sar13 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_12TO15_OPS_TAPS_B5_G1_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_12TO15_OPS_TAPS_B5_G1_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_12TO15_OPS_TAPS_B5_G1_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_12TO15_OPS_TAPS_B5_G1_SAR5_BF_DEF (0x00000000)

///< OPS Sar14 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_12TO15_OPS_TAPS_B5_G1_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_12TO15_OPS_TAPS_B5_G1_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_12TO15_OPS_TAPS_B5_G1_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_12TO15_OPS_TAPS_B5_G1_SAR6_BF_DEF (0x00000000)

///< OPS Sar15 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_12TO15_OPS_TAPS_B5_G1_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_12TO15_OPS_TAPS_B5_G1_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_12TO15_OPS_TAPS_B5_G1_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_12TO15_OPS_TAPS_B5_G1_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B5_SAR_16TO19 register description at address offset 0xc78
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b5_sar_16to19
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B5_G2_SAR0 : 8;
    ///< OPS Sar16 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B5_G2_SAR1 : 8;
    ///< OPS Sar17 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B5_G2_SAR2 : 8;
    ///< OPS Sar18 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B5_G2_SAR3 : 8;
    ///< OPS Sar19 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b5_sar_16to19_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_16TO19_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_16TO19_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_16TO19_WR_MASK (0xffffffffU)


///< OPS Sar16 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_16TO19_OPS_TAPS_B5_G2_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_16TO19_OPS_TAPS_B5_G2_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_16TO19_OPS_TAPS_B5_G2_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_16TO19_OPS_TAPS_B5_G2_SAR0_BF_DEF (0x00000000)

///< OPS Sar17 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_16TO19_OPS_TAPS_B5_G2_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_16TO19_OPS_TAPS_B5_G2_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_16TO19_OPS_TAPS_B5_G2_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_16TO19_OPS_TAPS_B5_G2_SAR1_BF_DEF (0x00000000)

///< OPS Sar18 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_16TO19_OPS_TAPS_B5_G2_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_16TO19_OPS_TAPS_B5_G2_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_16TO19_OPS_TAPS_B5_G2_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_16TO19_OPS_TAPS_B5_G2_SAR2_BF_DEF (0x00000000)

///< OPS Sar19 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_16TO19_OPS_TAPS_B5_G2_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_16TO19_OPS_TAPS_B5_G2_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_16TO19_OPS_TAPS_B5_G2_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_16TO19_OPS_TAPS_B5_G2_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B5_SAR_20TO23 register description at address offset 0xc7c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b5_sar_20to23
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B5_G2_SAR4 : 8;
    ///< OPS Sar20 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B5_G2_SAR5 : 8;
    ///< OPS Sar21 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B5_G2_SAR6 : 8;
    ///< OPS Sar22 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B5_G2_SAR7 : 8;
    ///< OPS Sar23 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b5_sar_20to23_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_20TO23_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_20TO23_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_20TO23_WR_MASK (0xffffffffU)


///< OPS Sar20 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_20TO23_OPS_TAPS_B5_G2_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_20TO23_OPS_TAPS_B5_G2_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_20TO23_OPS_TAPS_B5_G2_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_20TO23_OPS_TAPS_B5_G2_SAR4_BF_DEF (0x00000000)

///< OPS Sar21 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_20TO23_OPS_TAPS_B5_G2_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_20TO23_OPS_TAPS_B5_G2_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_20TO23_OPS_TAPS_B5_G2_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_20TO23_OPS_TAPS_B5_G2_SAR5_BF_DEF (0x00000000)

///< OPS Sar22 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_20TO23_OPS_TAPS_B5_G2_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_20TO23_OPS_TAPS_B5_G2_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_20TO23_OPS_TAPS_B5_G2_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_20TO23_OPS_TAPS_B5_G2_SAR6_BF_DEF (0x00000000)

///< OPS Sar23 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_20TO23_OPS_TAPS_B5_G2_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_20TO23_OPS_TAPS_B5_G2_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_20TO23_OPS_TAPS_B5_G2_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_20TO23_OPS_TAPS_B5_G2_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B5_SAR_24TO27 register description at address offset 0xc80
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b5_sar_24to27
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B5_G3_SAR0 : 8;
    ///< OPS Sar24 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B5_G3_SAR1 : 8;
    ///< OPS Sar25 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B5_G3_SAR2 : 8;
    ///< OPS Sar26 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B5_G3_SAR3 : 8;
    ///< OPS Sar27 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b5_sar_24to27_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_24TO27_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_24TO27_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_24TO27_WR_MASK (0xffffffffU)


///< OPS Sar24 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_24TO27_OPS_TAPS_B5_G3_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_24TO27_OPS_TAPS_B5_G3_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_24TO27_OPS_TAPS_B5_G3_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_24TO27_OPS_TAPS_B5_G3_SAR0_BF_DEF (0x00000000)

///< OPS Sar25 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_24TO27_OPS_TAPS_B5_G3_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_24TO27_OPS_TAPS_B5_G3_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_24TO27_OPS_TAPS_B5_G3_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_24TO27_OPS_TAPS_B5_G3_SAR1_BF_DEF (0x00000000)

///< OPS Sar26 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_24TO27_OPS_TAPS_B5_G3_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_24TO27_OPS_TAPS_B5_G3_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_24TO27_OPS_TAPS_B5_G3_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_24TO27_OPS_TAPS_B5_G3_SAR2_BF_DEF (0x00000000)

///< OPS Sar27 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_24TO27_OPS_TAPS_B5_G3_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_24TO27_OPS_TAPS_B5_G3_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_24TO27_OPS_TAPS_B5_G3_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_24TO27_OPS_TAPS_B5_G3_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B5_SAR_28TO31 register description at address offset 0xc84
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b5_sar_28to31
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B5_G3_SAR4 : 8;
    ///< OPS Sar28 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B5_G3_SAR5 : 8;
    ///< OPS Sar29 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B5_G3_SAR6 : 8;
    ///< OPS Sar30 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B5_G3_SAR7 : 8;
    ///< OPS Sar31 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b5_sar_28to31_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_28TO31_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_28TO31_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_28TO31_WR_MASK (0xffffffffU)


///< OPS Sar28 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_28TO31_OPS_TAPS_B5_G3_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_28TO31_OPS_TAPS_B5_G3_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_28TO31_OPS_TAPS_B5_G3_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_28TO31_OPS_TAPS_B5_G3_SAR4_BF_DEF (0x00000000)

///< OPS Sar29 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_28TO31_OPS_TAPS_B5_G3_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_28TO31_OPS_TAPS_B5_G3_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_28TO31_OPS_TAPS_B5_G3_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_28TO31_OPS_TAPS_B5_G3_SAR5_BF_DEF (0x00000000)

///< OPS Sar30 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_28TO31_OPS_TAPS_B5_G3_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_28TO31_OPS_TAPS_B5_G3_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_28TO31_OPS_TAPS_B5_G3_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_28TO31_OPS_TAPS_B5_G3_SAR6_BF_DEF (0x00000000)

///< OPS Sar31 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_28TO31_OPS_TAPS_B5_G3_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_28TO31_OPS_TAPS_B5_G3_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_28TO31_OPS_TAPS_B5_G3_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_28TO31_OPS_TAPS_B5_G3_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B5_SAR_32TO35 register description at address offset 0xc88
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b5_sar_32to35
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B5_G4_SAR0 : 8;
    ///< OPS Sar32 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B5_G4_SAR1 : 8;
    ///< OPS Sar33 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B5_G4_SAR2 : 8;
    ///< OPS Sar34 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B5_G4_SAR3 : 8;
    ///< OPS Sar35 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b5_sar_32to35_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_32TO35_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_32TO35_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_32TO35_WR_MASK (0xffffffffU)


///< OPS Sar32 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_32TO35_OPS_TAPS_B5_G4_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_32TO35_OPS_TAPS_B5_G4_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_32TO35_OPS_TAPS_B5_G4_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_32TO35_OPS_TAPS_B5_G4_SAR0_BF_DEF (0x00000000)

///< OPS Sar33 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_32TO35_OPS_TAPS_B5_G4_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_32TO35_OPS_TAPS_B5_G4_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_32TO35_OPS_TAPS_B5_G4_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_32TO35_OPS_TAPS_B5_G4_SAR1_BF_DEF (0x00000000)

///< OPS Sar34 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_32TO35_OPS_TAPS_B5_G4_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_32TO35_OPS_TAPS_B5_G4_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_32TO35_OPS_TAPS_B5_G4_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_32TO35_OPS_TAPS_B5_G4_SAR2_BF_DEF (0x00000000)

///< OPS Sar35 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_32TO35_OPS_TAPS_B5_G4_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_32TO35_OPS_TAPS_B5_G4_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_32TO35_OPS_TAPS_B5_G4_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_32TO35_OPS_TAPS_B5_G4_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B5_SAR_36TO39 register description at address offset 0xc8c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b5_sar_36to39
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B5_G4_SAR4 : 8;
    ///< OPS Sar36 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B5_G4_SAR5 : 8;
    ///< OPS Sar37 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B5_G4_SAR6 : 8;
    ///< OPS Sar38 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B5_G4_SAR7 : 8;
    ///< OPS Sar39 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b5_sar_36to39_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_36TO39_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_36TO39_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_36TO39_WR_MASK (0xffffffffU)


///< OPS Sar36 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_36TO39_OPS_TAPS_B5_G4_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_36TO39_OPS_TAPS_B5_G4_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_36TO39_OPS_TAPS_B5_G4_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_36TO39_OPS_TAPS_B5_G4_SAR4_BF_DEF (0x00000000)

///< OPS Sar37 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_36TO39_OPS_TAPS_B5_G4_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_36TO39_OPS_TAPS_B5_G4_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_36TO39_OPS_TAPS_B5_G4_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_36TO39_OPS_TAPS_B5_G4_SAR5_BF_DEF (0x00000000)

///< OPS Sar38 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_36TO39_OPS_TAPS_B5_G4_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_36TO39_OPS_TAPS_B5_G4_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_36TO39_OPS_TAPS_B5_G4_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_36TO39_OPS_TAPS_B5_G4_SAR6_BF_DEF (0x00000000)

///< OPS Sar39 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_36TO39_OPS_TAPS_B5_G4_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_36TO39_OPS_TAPS_B5_G4_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_36TO39_OPS_TAPS_B5_G4_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_36TO39_OPS_TAPS_B5_G4_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B5_SAR_40TO43 register description at address offset 0xc90
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b5_sar_40to43
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B5_G5_SAR0 : 8;
    ///< OPS Sar40 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B5_G5_SAR1 : 8;
    ///< OPS Sar41 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B5_G5_SAR2 : 8;
    ///< OPS Sar42 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B5_G5_SAR3 : 8;
    ///< OPS Sar43 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b5_sar_40to43_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_40TO43_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_40TO43_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_40TO43_WR_MASK (0xffffffffU)


///< OPS Sar40 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_40TO43_OPS_TAPS_B5_G5_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_40TO43_OPS_TAPS_B5_G5_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_40TO43_OPS_TAPS_B5_G5_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_40TO43_OPS_TAPS_B5_G5_SAR0_BF_DEF (0x00000000)

///< OPS Sar41 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_40TO43_OPS_TAPS_B5_G5_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_40TO43_OPS_TAPS_B5_G5_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_40TO43_OPS_TAPS_B5_G5_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_40TO43_OPS_TAPS_B5_G5_SAR1_BF_DEF (0x00000000)

///< OPS Sar42 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_40TO43_OPS_TAPS_B5_G5_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_40TO43_OPS_TAPS_B5_G5_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_40TO43_OPS_TAPS_B5_G5_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_40TO43_OPS_TAPS_B5_G5_SAR2_BF_DEF (0x00000000)

///< OPS Sar43 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_40TO43_OPS_TAPS_B5_G5_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_40TO43_OPS_TAPS_B5_G5_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_40TO43_OPS_TAPS_B5_G5_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_40TO43_OPS_TAPS_B5_G5_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B5_SAR_44TO47 register description at address offset 0xc94
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b5_sar_44to47
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B5_G5_SAR4 : 8;
    ///< OPS Sar44 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B5_G5_SAR5 : 8;
    ///< OPS Sar45 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B5_G5_SAR6 : 8;
    ///< OPS Sar46 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B5_G5_SAR7 : 8;
    ///< OPS Sar47 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b5_sar_44to47_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_44TO47_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_44TO47_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_44TO47_WR_MASK (0xffffffffU)


///< OPS Sar44 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_44TO47_OPS_TAPS_B5_G5_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_44TO47_OPS_TAPS_B5_G5_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_44TO47_OPS_TAPS_B5_G5_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_44TO47_OPS_TAPS_B5_G5_SAR4_BF_DEF (0x00000000)

///< OPS Sar45 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_44TO47_OPS_TAPS_B5_G5_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_44TO47_OPS_TAPS_B5_G5_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_44TO47_OPS_TAPS_B5_G5_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_44TO47_OPS_TAPS_B5_G5_SAR5_BF_DEF (0x00000000)

///< OPS Sar46 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_44TO47_OPS_TAPS_B5_G5_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_44TO47_OPS_TAPS_B5_G5_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_44TO47_OPS_TAPS_B5_G5_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_44TO47_OPS_TAPS_B5_G5_SAR6_BF_DEF (0x00000000)

///< OPS Sar47 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_44TO47_OPS_TAPS_B5_G5_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_44TO47_OPS_TAPS_B5_G5_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_44TO47_OPS_TAPS_B5_G5_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_44TO47_OPS_TAPS_B5_G5_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B5_SAR_48TO51 register description at address offset 0xc98
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b5_sar_48to51
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B5_G6_SAR0 : 8;
    ///< OPS Sar48 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B5_G6_SAR1 : 8;
    ///< OPS Sar49 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B5_G6_SAR2 : 8;
    ///< OPS Sar50 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B5_G6_SAR3 : 8;
    ///< OPS Sar51 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b5_sar_48to51_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_48TO51_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_48TO51_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_48TO51_WR_MASK (0xffffffffU)


///< OPS Sar48 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_48TO51_OPS_TAPS_B5_G6_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_48TO51_OPS_TAPS_B5_G6_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_48TO51_OPS_TAPS_B5_G6_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_48TO51_OPS_TAPS_B5_G6_SAR0_BF_DEF (0x00000000)

///< OPS Sar49 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_48TO51_OPS_TAPS_B5_G6_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_48TO51_OPS_TAPS_B5_G6_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_48TO51_OPS_TAPS_B5_G6_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_48TO51_OPS_TAPS_B5_G6_SAR1_BF_DEF (0x00000000)

///< OPS Sar50 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_48TO51_OPS_TAPS_B5_G6_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_48TO51_OPS_TAPS_B5_G6_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_48TO51_OPS_TAPS_B5_G6_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_48TO51_OPS_TAPS_B5_G6_SAR2_BF_DEF (0x00000000)

///< OPS Sar51 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_48TO51_OPS_TAPS_B5_G6_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_48TO51_OPS_TAPS_B5_G6_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_48TO51_OPS_TAPS_B5_G6_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_48TO51_OPS_TAPS_B5_G6_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B5_SAR_52TO55 register description at address offset 0xc9c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b5_sar_52to55
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B5_G6_SAR4 : 8;
    ///< OPS Sar52 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B5_G6_SAR5 : 8;
    ///< OPS Sar53 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B5_G6_SAR6 : 8;
    ///< OPS Sar54 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B5_G6_SAR7 : 8;
    ///< OPS Sar55 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b5_sar_52to55_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_52TO55_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_52TO55_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_52TO55_WR_MASK (0xffffffffU)


///< OPS Sar52 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_52TO55_OPS_TAPS_B5_G6_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_52TO55_OPS_TAPS_B5_G6_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_52TO55_OPS_TAPS_B5_G6_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_52TO55_OPS_TAPS_B5_G6_SAR4_BF_DEF (0x00000000)

///< OPS Sar53 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_52TO55_OPS_TAPS_B5_G6_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_52TO55_OPS_TAPS_B5_G6_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_52TO55_OPS_TAPS_B5_G6_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_52TO55_OPS_TAPS_B5_G6_SAR5_BF_DEF (0x00000000)

///< OPS Sar54 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_52TO55_OPS_TAPS_B5_G6_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_52TO55_OPS_TAPS_B5_G6_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_52TO55_OPS_TAPS_B5_G6_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_52TO55_OPS_TAPS_B5_G6_SAR6_BF_DEF (0x00000000)

///< OPS Sar55 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_52TO55_OPS_TAPS_B5_G6_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_52TO55_OPS_TAPS_B5_G6_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_52TO55_OPS_TAPS_B5_G6_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_52TO55_OPS_TAPS_B5_G6_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B5_SAR_56TO59 register description at address offset 0xca0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b5_sar_56to59
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B5_G7_SAR0 : 8;
    ///< OPS Sar56 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B5_G7_SAR1 : 8;
    ///< OPS Sar57 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B5_G7_SAR2 : 8;
    ///< OPS Sar58 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B5_G7_SAR3 : 8;
    ///< OPS Sar59 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b5_sar_56to59_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_56TO59_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_56TO59_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_56TO59_WR_MASK (0xffffffffU)


///< OPS Sar56 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_56TO59_OPS_TAPS_B5_G7_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_56TO59_OPS_TAPS_B5_G7_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_56TO59_OPS_TAPS_B5_G7_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_56TO59_OPS_TAPS_B5_G7_SAR0_BF_DEF (0x00000000)

///< OPS Sar57 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_56TO59_OPS_TAPS_B5_G7_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_56TO59_OPS_TAPS_B5_G7_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_56TO59_OPS_TAPS_B5_G7_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_56TO59_OPS_TAPS_B5_G7_SAR1_BF_DEF (0x00000000)

///< OPS Sar58 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_56TO59_OPS_TAPS_B5_G7_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_56TO59_OPS_TAPS_B5_G7_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_56TO59_OPS_TAPS_B5_G7_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_56TO59_OPS_TAPS_B5_G7_SAR2_BF_DEF (0x00000000)

///< OPS Sar59 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_56TO59_OPS_TAPS_B5_G7_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_56TO59_OPS_TAPS_B5_G7_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_56TO59_OPS_TAPS_B5_G7_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_56TO59_OPS_TAPS_B5_G7_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_B5_SAR_60TO63 register description at address offset 0xca4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_b5_sar_60to63
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_B5_G7_SAR4 : 8;
    ///< OPS Sar60 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_B5_G7_SAR5 : 8;
    ///< OPS Sar61 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_B5_G7_SAR6 : 8;
    ///< OPS Sar62 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_B5_G7_SAR7 : 8;
    ///< OPS Sar63 tap value on bit 5
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_b5_sar_60to63_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_60TO63_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_60TO63_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_60TO63_WR_MASK (0xffffffffU)


///< OPS Sar60 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_60TO63_OPS_TAPS_B5_G7_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_60TO63_OPS_TAPS_B5_G7_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_60TO63_OPS_TAPS_B5_G7_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_60TO63_OPS_TAPS_B5_G7_SAR4_BF_DEF (0x00000000)

///< OPS Sar61 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_60TO63_OPS_TAPS_B5_G7_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_60TO63_OPS_TAPS_B5_G7_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_60TO63_OPS_TAPS_B5_G7_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_60TO63_OPS_TAPS_B5_G7_SAR5_BF_DEF (0x00000000)

///< OPS Sar62 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_60TO63_OPS_TAPS_B5_G7_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_60TO63_OPS_TAPS_B5_G7_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_60TO63_OPS_TAPS_B5_G7_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_60TO63_OPS_TAPS_B5_G7_SAR6_BF_DEF (0x00000000)

///< OPS Sar63 tap value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_60TO63_OPS_TAPS_B5_G7_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_60TO63_OPS_TAPS_B5_G7_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_60TO63_OPS_TAPS_B5_G7_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_60TO63_OPS_TAPS_B5_G7_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B0_SAR_0TO3 register description at address offset 0xca8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b0_sar_0to3
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B0_G0_SAR0 : 8;
    ///< OPS Sar0 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B0_G0_SAR1 : 8;
    ///< OPS Sar1 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B0_G0_SAR2 : 8;
    ///< OPS Sar2 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B0_G0_SAR3 : 8;
    ///< OPS Sar3 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b0_sar_0to3_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_0TO3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_0TO3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_0TO3_WR_MASK (0xffffffffU)


///< OPS Sar0 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_0TO3_OPS_TAPS_FRA_B0_G0_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_0TO3_OPS_TAPS_FRA_B0_G0_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_0TO3_OPS_TAPS_FRA_B0_G0_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_0TO3_OPS_TAPS_FRA_B0_G0_SAR0_BF_DEF (0x00000000)

///< OPS Sar1 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_0TO3_OPS_TAPS_FRA_B0_G0_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_0TO3_OPS_TAPS_FRA_B0_G0_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_0TO3_OPS_TAPS_FRA_B0_G0_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_0TO3_OPS_TAPS_FRA_B0_G0_SAR1_BF_DEF (0x00000000)

///< OPS Sar2 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_0TO3_OPS_TAPS_FRA_B0_G0_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_0TO3_OPS_TAPS_FRA_B0_G0_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_0TO3_OPS_TAPS_FRA_B0_G0_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_0TO3_OPS_TAPS_FRA_B0_G0_SAR2_BF_DEF (0x00000000)

///< OPS Sar3 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_0TO3_OPS_TAPS_FRA_B0_G0_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_0TO3_OPS_TAPS_FRA_B0_G0_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_0TO3_OPS_TAPS_FRA_B0_G0_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_0TO3_OPS_TAPS_FRA_B0_G0_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B0_SAR_4TO7 register description at address offset 0xcac
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b0_sar_4to7
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B0_G0_SAR4 : 8;
    ///< OPS Sar4 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B0_G0_SAR5 : 8;
    ///< OPS Sar5 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B0_G0_SAR6 : 8;
    ///< OPS Sar6 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B0_G0_SAR7 : 8;
    ///< OPS Sar7 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b0_sar_4to7_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_4TO7_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_4TO7_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_4TO7_WR_MASK (0xffffffffU)


///< OPS Sar4 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_4TO7_OPS_TAPS_FRA_B0_G0_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_4TO7_OPS_TAPS_FRA_B0_G0_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_4TO7_OPS_TAPS_FRA_B0_G0_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_4TO7_OPS_TAPS_FRA_B0_G0_SAR4_BF_DEF (0x00000000)

///< OPS Sar5 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_4TO7_OPS_TAPS_FRA_B0_G0_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_4TO7_OPS_TAPS_FRA_B0_G0_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_4TO7_OPS_TAPS_FRA_B0_G0_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_4TO7_OPS_TAPS_FRA_B0_G0_SAR5_BF_DEF (0x00000000)

///< OPS Sar6 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_4TO7_OPS_TAPS_FRA_B0_G0_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_4TO7_OPS_TAPS_FRA_B0_G0_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_4TO7_OPS_TAPS_FRA_B0_G0_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_4TO7_OPS_TAPS_FRA_B0_G0_SAR6_BF_DEF (0x00000000)

///< OPS Sar7 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_4TO7_OPS_TAPS_FRA_B0_G0_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_4TO7_OPS_TAPS_FRA_B0_G0_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_4TO7_OPS_TAPS_FRA_B0_G0_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_4TO7_OPS_TAPS_FRA_B0_G0_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B0_SAR_8TO11 register description at address offset 0xcb0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b0_sar_8to11
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B0_G1_SAR0 : 8;
    ///< OPS Sar8  tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B0_G1_SAR1 : 8;
    ///< OPS Sar9  tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B0_G1_SAR2 : 8;
    ///< OPS Sar10 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B0_G1_SAR3 : 8;
    ///< OPS Sar11 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b0_sar_8to11_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_8TO11_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_8TO11_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_8TO11_WR_MASK (0xffffffffU)


///< OPS Sar8  tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_8TO11_OPS_TAPS_FRA_B0_G1_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_8TO11_OPS_TAPS_FRA_B0_G1_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_8TO11_OPS_TAPS_FRA_B0_G1_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_8TO11_OPS_TAPS_FRA_B0_G1_SAR0_BF_DEF (0x00000000)

///< OPS Sar9  tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_8TO11_OPS_TAPS_FRA_B0_G1_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_8TO11_OPS_TAPS_FRA_B0_G1_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_8TO11_OPS_TAPS_FRA_B0_G1_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_8TO11_OPS_TAPS_FRA_B0_G1_SAR1_BF_DEF (0x00000000)

///< OPS Sar10 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_8TO11_OPS_TAPS_FRA_B0_G1_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_8TO11_OPS_TAPS_FRA_B0_G1_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_8TO11_OPS_TAPS_FRA_B0_G1_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_8TO11_OPS_TAPS_FRA_B0_G1_SAR2_BF_DEF (0x00000000)

///< OPS Sar11 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_8TO11_OPS_TAPS_FRA_B0_G1_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_8TO11_OPS_TAPS_FRA_B0_G1_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_8TO11_OPS_TAPS_FRA_B0_G1_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_8TO11_OPS_TAPS_FRA_B0_G1_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B0_SAR_12TO15 register description at address offset 0xcb4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b0_sar_12to15
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B0_G1_SAR4 : 8;
    ///< OPS Sar12 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B0_G1_SAR5 : 8;
    ///< OPS Sar13 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B0_G1_SAR6 : 8;
    ///< OPS Sar14 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B0_G1_SAR7 : 8;
    ///< OPS Sar15 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b0_sar_12to15_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_12TO15_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_12TO15_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_12TO15_WR_MASK (0xffffffffU)


///< OPS Sar12 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_12TO15_OPS_TAPS_FRA_B0_G1_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_12TO15_OPS_TAPS_FRA_B0_G1_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_12TO15_OPS_TAPS_FRA_B0_G1_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_12TO15_OPS_TAPS_FRA_B0_G1_SAR4_BF_DEF (0x00000000)

///< OPS Sar13 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_12TO15_OPS_TAPS_FRA_B0_G1_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_12TO15_OPS_TAPS_FRA_B0_G1_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_12TO15_OPS_TAPS_FRA_B0_G1_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_12TO15_OPS_TAPS_FRA_B0_G1_SAR5_BF_DEF (0x00000000)

///< OPS Sar14 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_12TO15_OPS_TAPS_FRA_B0_G1_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_12TO15_OPS_TAPS_FRA_B0_G1_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_12TO15_OPS_TAPS_FRA_B0_G1_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_12TO15_OPS_TAPS_FRA_B0_G1_SAR6_BF_DEF (0x00000000)

///< OPS Sar15 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_12TO15_OPS_TAPS_FRA_B0_G1_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_12TO15_OPS_TAPS_FRA_B0_G1_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_12TO15_OPS_TAPS_FRA_B0_G1_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_12TO15_OPS_TAPS_FRA_B0_G1_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B0_SAR_16TO19 register description at address offset 0xcb8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b0_sar_16to19
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B0_G2_SAR0 : 8;
    ///< OPS Sar16 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B0_G2_SAR1 : 8;
    ///< OPS Sar17 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B0_G2_SAR2 : 8;
    ///< OPS Sar18 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B0_G2_SAR3 : 8;
    ///< OPS Sar19 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b0_sar_16to19_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_16TO19_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_16TO19_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_16TO19_WR_MASK (0xffffffffU)


///< OPS Sar16 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_16TO19_OPS_TAPS_FRA_B0_G2_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_16TO19_OPS_TAPS_FRA_B0_G2_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_16TO19_OPS_TAPS_FRA_B0_G2_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_16TO19_OPS_TAPS_FRA_B0_G2_SAR0_BF_DEF (0x00000000)

///< OPS Sar17 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_16TO19_OPS_TAPS_FRA_B0_G2_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_16TO19_OPS_TAPS_FRA_B0_G2_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_16TO19_OPS_TAPS_FRA_B0_G2_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_16TO19_OPS_TAPS_FRA_B0_G2_SAR1_BF_DEF (0x00000000)

///< OPS Sar18 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_16TO19_OPS_TAPS_FRA_B0_G2_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_16TO19_OPS_TAPS_FRA_B0_G2_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_16TO19_OPS_TAPS_FRA_B0_G2_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_16TO19_OPS_TAPS_FRA_B0_G2_SAR2_BF_DEF (0x00000000)

///< OPS Sar19 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_16TO19_OPS_TAPS_FRA_B0_G2_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_16TO19_OPS_TAPS_FRA_B0_G2_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_16TO19_OPS_TAPS_FRA_B0_G2_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_16TO19_OPS_TAPS_FRA_B0_G2_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B0_SAR_20TO23 register description at address offset 0xcbc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b0_sar_20to23
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B0_G2_SAR4 : 8;
    ///< OPS Sar20 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B0_G2_SAR5 : 8;
    ///< OPS Sar21 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B0_G2_SAR6 : 8;
    ///< OPS Sar22 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B0_G2_SAR7 : 8;
    ///< OPS Sar23 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b0_sar_20to23_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_20TO23_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_20TO23_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_20TO23_WR_MASK (0xffffffffU)


///< OPS Sar20 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_20TO23_OPS_TAPS_FRA_B0_G2_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_20TO23_OPS_TAPS_FRA_B0_G2_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_20TO23_OPS_TAPS_FRA_B0_G2_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_20TO23_OPS_TAPS_FRA_B0_G2_SAR4_BF_DEF (0x00000000)

///< OPS Sar21 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_20TO23_OPS_TAPS_FRA_B0_G2_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_20TO23_OPS_TAPS_FRA_B0_G2_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_20TO23_OPS_TAPS_FRA_B0_G2_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_20TO23_OPS_TAPS_FRA_B0_G2_SAR5_BF_DEF (0x00000000)

///< OPS Sar22 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_20TO23_OPS_TAPS_FRA_B0_G2_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_20TO23_OPS_TAPS_FRA_B0_G2_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_20TO23_OPS_TAPS_FRA_B0_G2_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_20TO23_OPS_TAPS_FRA_B0_G2_SAR6_BF_DEF (0x00000000)

///< OPS Sar23 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_20TO23_OPS_TAPS_FRA_B0_G2_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_20TO23_OPS_TAPS_FRA_B0_G2_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_20TO23_OPS_TAPS_FRA_B0_G2_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_20TO23_OPS_TAPS_FRA_B0_G2_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B0_SAR_24TO27 register description at address offset 0xcc0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b0_sar_24to27
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B0_G3_SAR0 : 8;
    ///< OPS Sar24 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B0_G3_SAR1 : 8;
    ///< OPS Sar25 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B0_G3_SAR2 : 8;
    ///< OPS Sar26 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B0_G3_SAR3 : 8;
    ///< OPS Sar27 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b0_sar_24to27_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_24TO27_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_24TO27_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_24TO27_WR_MASK (0xffffffffU)


///< OPS Sar24 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_24TO27_OPS_TAPS_FRA_B0_G3_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_24TO27_OPS_TAPS_FRA_B0_G3_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_24TO27_OPS_TAPS_FRA_B0_G3_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_24TO27_OPS_TAPS_FRA_B0_G3_SAR0_BF_DEF (0x00000000)

///< OPS Sar25 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_24TO27_OPS_TAPS_FRA_B0_G3_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_24TO27_OPS_TAPS_FRA_B0_G3_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_24TO27_OPS_TAPS_FRA_B0_G3_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_24TO27_OPS_TAPS_FRA_B0_G3_SAR1_BF_DEF (0x00000000)

///< OPS Sar26 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_24TO27_OPS_TAPS_FRA_B0_G3_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_24TO27_OPS_TAPS_FRA_B0_G3_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_24TO27_OPS_TAPS_FRA_B0_G3_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_24TO27_OPS_TAPS_FRA_B0_G3_SAR2_BF_DEF (0x00000000)

///< OPS Sar27 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_24TO27_OPS_TAPS_FRA_B0_G3_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_24TO27_OPS_TAPS_FRA_B0_G3_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_24TO27_OPS_TAPS_FRA_B0_G3_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_24TO27_OPS_TAPS_FRA_B0_G3_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B0_SAR_28TO31 register description at address offset 0xcc4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b0_sar_28to31
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B0_G3_SAR4 : 8;
    ///< OPS Sar28 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B0_G3_SAR5 : 8;
    ///< OPS Sar29 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B0_G3_SAR6 : 8;
    ///< OPS Sar30 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B0_G3_SAR7 : 8;
    ///< OPS Sar31 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b0_sar_28to31_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_28TO31_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_28TO31_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_28TO31_WR_MASK (0xffffffffU)


///< OPS Sar28 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_28TO31_OPS_TAPS_FRA_B0_G3_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_28TO31_OPS_TAPS_FRA_B0_G3_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_28TO31_OPS_TAPS_FRA_B0_G3_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_28TO31_OPS_TAPS_FRA_B0_G3_SAR4_BF_DEF (0x00000000)

///< OPS Sar29 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_28TO31_OPS_TAPS_FRA_B0_G3_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_28TO31_OPS_TAPS_FRA_B0_G3_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_28TO31_OPS_TAPS_FRA_B0_G3_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_28TO31_OPS_TAPS_FRA_B0_G3_SAR5_BF_DEF (0x00000000)

///< OPS Sar30 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_28TO31_OPS_TAPS_FRA_B0_G3_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_28TO31_OPS_TAPS_FRA_B0_G3_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_28TO31_OPS_TAPS_FRA_B0_G3_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_28TO31_OPS_TAPS_FRA_B0_G3_SAR6_BF_DEF (0x00000000)

///< OPS Sar31 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_28TO31_OPS_TAPS_FRA_B0_G3_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_28TO31_OPS_TAPS_FRA_B0_G3_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_28TO31_OPS_TAPS_FRA_B0_G3_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_28TO31_OPS_TAPS_FRA_B0_G3_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B0_SAR_32TO35 register description at address offset 0xcc8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b0_sar_32to35
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B0_G4_SAR0 : 8;
    ///< OPS Sar32 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B0_G4_SAR1 : 8;
    ///< OPS Sar33 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B0_G4_SAR2 : 8;
    ///< OPS Sar34 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B0_G4_SAR3 : 8;
    ///< OPS Sar35 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b0_sar_32to35_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_32TO35_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_32TO35_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_32TO35_WR_MASK (0xffffffffU)


///< OPS Sar32 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_32TO35_OPS_TAPS_FRA_B0_G4_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_32TO35_OPS_TAPS_FRA_B0_G4_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_32TO35_OPS_TAPS_FRA_B0_G4_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_32TO35_OPS_TAPS_FRA_B0_G4_SAR0_BF_DEF (0x00000000)

///< OPS Sar33 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_32TO35_OPS_TAPS_FRA_B0_G4_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_32TO35_OPS_TAPS_FRA_B0_G4_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_32TO35_OPS_TAPS_FRA_B0_G4_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_32TO35_OPS_TAPS_FRA_B0_G4_SAR1_BF_DEF (0x00000000)

///< OPS Sar34 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_32TO35_OPS_TAPS_FRA_B0_G4_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_32TO35_OPS_TAPS_FRA_B0_G4_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_32TO35_OPS_TAPS_FRA_B0_G4_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_32TO35_OPS_TAPS_FRA_B0_G4_SAR2_BF_DEF (0x00000000)

///< OPS Sar35 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_32TO35_OPS_TAPS_FRA_B0_G4_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_32TO35_OPS_TAPS_FRA_B0_G4_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_32TO35_OPS_TAPS_FRA_B0_G4_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_32TO35_OPS_TAPS_FRA_B0_G4_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B0_SAR_36TO39 register description at address offset 0xccc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b0_sar_36to39
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B0_G4_SAR4 : 8;
    ///< OPS Sar36 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B0_G4_SAR5 : 8;
    ///< OPS Sar37 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B0_G4_SAR6 : 8;
    ///< OPS Sar38 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B0_G4_SAR7 : 8;
    ///< OPS Sar39 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b0_sar_36to39_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_36TO39_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_36TO39_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_36TO39_WR_MASK (0xffffffffU)


///< OPS Sar36 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_36TO39_OPS_TAPS_FRA_B0_G4_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_36TO39_OPS_TAPS_FRA_B0_G4_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_36TO39_OPS_TAPS_FRA_B0_G4_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_36TO39_OPS_TAPS_FRA_B0_G4_SAR4_BF_DEF (0x00000000)

///< OPS Sar37 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_36TO39_OPS_TAPS_FRA_B0_G4_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_36TO39_OPS_TAPS_FRA_B0_G4_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_36TO39_OPS_TAPS_FRA_B0_G4_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_36TO39_OPS_TAPS_FRA_B0_G4_SAR5_BF_DEF (0x00000000)

///< OPS Sar38 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_36TO39_OPS_TAPS_FRA_B0_G4_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_36TO39_OPS_TAPS_FRA_B0_G4_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_36TO39_OPS_TAPS_FRA_B0_G4_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_36TO39_OPS_TAPS_FRA_B0_G4_SAR6_BF_DEF (0x00000000)

///< OPS Sar39 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_36TO39_OPS_TAPS_FRA_B0_G4_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_36TO39_OPS_TAPS_FRA_B0_G4_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_36TO39_OPS_TAPS_FRA_B0_G4_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_36TO39_OPS_TAPS_FRA_B0_G4_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B0_SAR_40TO43 register description at address offset 0xcd0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b0_sar_40to43
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B0_G5_SAR0 : 8;
    ///< OPS Sar40 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B0_G5_SAR1 : 8;
    ///< OPS Sar41 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B0_G5_SAR2 : 8;
    ///< OPS Sar42 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B0_G5_SAR3 : 8;
    ///< OPS Sar43 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b0_sar_40to43_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_40TO43_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_40TO43_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_40TO43_WR_MASK (0xffffffffU)


///< OPS Sar40 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_40TO43_OPS_TAPS_FRA_B0_G5_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_40TO43_OPS_TAPS_FRA_B0_G5_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_40TO43_OPS_TAPS_FRA_B0_G5_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_40TO43_OPS_TAPS_FRA_B0_G5_SAR0_BF_DEF (0x00000000)

///< OPS Sar41 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_40TO43_OPS_TAPS_FRA_B0_G5_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_40TO43_OPS_TAPS_FRA_B0_G5_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_40TO43_OPS_TAPS_FRA_B0_G5_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_40TO43_OPS_TAPS_FRA_B0_G5_SAR1_BF_DEF (0x00000000)

///< OPS Sar42 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_40TO43_OPS_TAPS_FRA_B0_G5_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_40TO43_OPS_TAPS_FRA_B0_G5_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_40TO43_OPS_TAPS_FRA_B0_G5_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_40TO43_OPS_TAPS_FRA_B0_G5_SAR2_BF_DEF (0x00000000)

///< OPS Sar43 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_40TO43_OPS_TAPS_FRA_B0_G5_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_40TO43_OPS_TAPS_FRA_B0_G5_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_40TO43_OPS_TAPS_FRA_B0_G5_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_40TO43_OPS_TAPS_FRA_B0_G5_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B0_SAR_44TO47 register description at address offset 0xcd4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b0_sar_44to47
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B0_G5_SAR4 : 8;
    ///< OPS Sar44 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B0_G5_SAR5 : 8;
    ///< OPS Sar45 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B0_G5_SAR6 : 8;
    ///< OPS Sar46 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B0_G5_SAR7 : 8;
    ///< OPS Sar47 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b0_sar_44to47_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_44TO47_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_44TO47_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_44TO47_WR_MASK (0xffffffffU)


///< OPS Sar44 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_44TO47_OPS_TAPS_FRA_B0_G5_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_44TO47_OPS_TAPS_FRA_B0_G5_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_44TO47_OPS_TAPS_FRA_B0_G5_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_44TO47_OPS_TAPS_FRA_B0_G5_SAR4_BF_DEF (0x00000000)

///< OPS Sar45 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_44TO47_OPS_TAPS_FRA_B0_G5_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_44TO47_OPS_TAPS_FRA_B0_G5_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_44TO47_OPS_TAPS_FRA_B0_G5_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_44TO47_OPS_TAPS_FRA_B0_G5_SAR5_BF_DEF (0x00000000)

///< OPS Sar46 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_44TO47_OPS_TAPS_FRA_B0_G5_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_44TO47_OPS_TAPS_FRA_B0_G5_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_44TO47_OPS_TAPS_FRA_B0_G5_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_44TO47_OPS_TAPS_FRA_B0_G5_SAR6_BF_DEF (0x00000000)

///< OPS Sar47 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_44TO47_OPS_TAPS_FRA_B0_G5_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_44TO47_OPS_TAPS_FRA_B0_G5_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_44TO47_OPS_TAPS_FRA_B0_G5_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_44TO47_OPS_TAPS_FRA_B0_G5_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B0_SAR_48TO51 register description at address offset 0xcd8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b0_sar_48to51
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B0_G6_SAR0 : 8;
    ///< OPS Sar48 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B0_G6_SAR1 : 8;
    ///< OPS Sar49 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B0_G6_SAR2 : 8;
    ///< OPS Sar50 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B0_G6_SAR3 : 8;
    ///< OPS Sar51 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b0_sar_48to51_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_48TO51_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_48TO51_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_48TO51_WR_MASK (0xffffffffU)


///< OPS Sar48 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_48TO51_OPS_TAPS_FRA_B0_G6_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_48TO51_OPS_TAPS_FRA_B0_G6_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_48TO51_OPS_TAPS_FRA_B0_G6_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_48TO51_OPS_TAPS_FRA_B0_G6_SAR0_BF_DEF (0x00000000)

///< OPS Sar49 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_48TO51_OPS_TAPS_FRA_B0_G6_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_48TO51_OPS_TAPS_FRA_B0_G6_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_48TO51_OPS_TAPS_FRA_B0_G6_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_48TO51_OPS_TAPS_FRA_B0_G6_SAR1_BF_DEF (0x00000000)

///< OPS Sar50 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_48TO51_OPS_TAPS_FRA_B0_G6_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_48TO51_OPS_TAPS_FRA_B0_G6_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_48TO51_OPS_TAPS_FRA_B0_G6_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_48TO51_OPS_TAPS_FRA_B0_G6_SAR2_BF_DEF (0x00000000)

///< OPS Sar51 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_48TO51_OPS_TAPS_FRA_B0_G6_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_48TO51_OPS_TAPS_FRA_B0_G6_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_48TO51_OPS_TAPS_FRA_B0_G6_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_48TO51_OPS_TAPS_FRA_B0_G6_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B0_SAR_52TO55 register description at address offset 0xcdc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b0_sar_52to55
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B0_G6_SAR4 : 8;
    ///< OPS Sar52 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B0_G6_SAR5 : 8;
    ///< OPS Sar53 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B0_G6_SAR6 : 8;
    ///< OPS Sar54 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B0_G6_SAR7 : 8;
    ///< OPS Sar55 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b0_sar_52to55_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_52TO55_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_52TO55_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_52TO55_WR_MASK (0xffffffffU)


///< OPS Sar52 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_52TO55_OPS_TAPS_FRA_B0_G6_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_52TO55_OPS_TAPS_FRA_B0_G6_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_52TO55_OPS_TAPS_FRA_B0_G6_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_52TO55_OPS_TAPS_FRA_B0_G6_SAR4_BF_DEF (0x00000000)

///< OPS Sar53 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_52TO55_OPS_TAPS_FRA_B0_G6_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_52TO55_OPS_TAPS_FRA_B0_G6_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_52TO55_OPS_TAPS_FRA_B0_G6_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_52TO55_OPS_TAPS_FRA_B0_G6_SAR5_BF_DEF (0x00000000)

///< OPS Sar54 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_52TO55_OPS_TAPS_FRA_B0_G6_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_52TO55_OPS_TAPS_FRA_B0_G6_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_52TO55_OPS_TAPS_FRA_B0_G6_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_52TO55_OPS_TAPS_FRA_B0_G6_SAR6_BF_DEF (0x00000000)

///< OPS Sar55 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_52TO55_OPS_TAPS_FRA_B0_G6_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_52TO55_OPS_TAPS_FRA_B0_G6_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_52TO55_OPS_TAPS_FRA_B0_G6_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_52TO55_OPS_TAPS_FRA_B0_G6_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B0_SAR_56TO59 register description at address offset 0xce0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b0_sar_56to59
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B0_G7_SAR0 : 8;
    ///< OPS Sar56 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B0_G7_SAR1 : 8;
    ///< OPS Sar57 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B0_G7_SAR2 : 8;
    ///< OPS Sar58 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B0_G7_SAR3 : 8;
    ///< OPS Sar59 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b0_sar_56to59_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_56TO59_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_56TO59_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_56TO59_WR_MASK (0xffffffffU)


///< OPS Sar56 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_56TO59_OPS_TAPS_FRA_B0_G7_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_56TO59_OPS_TAPS_FRA_B0_G7_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_56TO59_OPS_TAPS_FRA_B0_G7_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_56TO59_OPS_TAPS_FRA_B0_G7_SAR0_BF_DEF (0x00000000)

///< OPS Sar57 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_56TO59_OPS_TAPS_FRA_B0_G7_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_56TO59_OPS_TAPS_FRA_B0_G7_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_56TO59_OPS_TAPS_FRA_B0_G7_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_56TO59_OPS_TAPS_FRA_B0_G7_SAR1_BF_DEF (0x00000000)

///< OPS Sar58 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_56TO59_OPS_TAPS_FRA_B0_G7_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_56TO59_OPS_TAPS_FRA_B0_G7_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_56TO59_OPS_TAPS_FRA_B0_G7_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_56TO59_OPS_TAPS_FRA_B0_G7_SAR2_BF_DEF (0x00000000)

///< OPS Sar59 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_56TO59_OPS_TAPS_FRA_B0_G7_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_56TO59_OPS_TAPS_FRA_B0_G7_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_56TO59_OPS_TAPS_FRA_B0_G7_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_56TO59_OPS_TAPS_FRA_B0_G7_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B0_SAR_60TO63 register description at address offset 0xce4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b0_sar_60to63
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B0_G7_SAR4 : 8;
    ///< OPS Sar60 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B0_G7_SAR5 : 8;
    ///< OPS Sar61 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B0_G7_SAR6 : 8;
    ///< OPS Sar62 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B0_G7_SAR7 : 8;
    ///< OPS Sar63 tap frac value on bit 0
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b0_sar_60to63_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_60TO63_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_60TO63_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_60TO63_WR_MASK (0xffffffffU)


///< OPS Sar60 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_60TO63_OPS_TAPS_FRA_B0_G7_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_60TO63_OPS_TAPS_FRA_B0_G7_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_60TO63_OPS_TAPS_FRA_B0_G7_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_60TO63_OPS_TAPS_FRA_B0_G7_SAR4_BF_DEF (0x00000000)

///< OPS Sar61 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_60TO63_OPS_TAPS_FRA_B0_G7_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_60TO63_OPS_TAPS_FRA_B0_G7_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_60TO63_OPS_TAPS_FRA_B0_G7_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_60TO63_OPS_TAPS_FRA_B0_G7_SAR5_BF_DEF (0x00000000)

///< OPS Sar62 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_60TO63_OPS_TAPS_FRA_B0_G7_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_60TO63_OPS_TAPS_FRA_B0_G7_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_60TO63_OPS_TAPS_FRA_B0_G7_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_60TO63_OPS_TAPS_FRA_B0_G7_SAR6_BF_DEF (0x00000000)

///< OPS Sar63 tap frac value on bit 0
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_60TO63_OPS_TAPS_FRA_B0_G7_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_60TO63_OPS_TAPS_FRA_B0_G7_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_60TO63_OPS_TAPS_FRA_B0_G7_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_60TO63_OPS_TAPS_FRA_B0_G7_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B1_SAR_0TO3 register description at address offset 0xce8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b1_sar_0to3
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B1_G0_SAR0 : 8;
    ///< OPS Sar0 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B1_G0_SAR1 : 8;
    ///< OPS Sar1 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B1_G0_SAR2 : 8;
    ///< OPS Sar2 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B1_G0_SAR3 : 8;
    ///< OPS Sar3 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b1_sar_0to3_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_0TO3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_0TO3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_0TO3_WR_MASK (0xffffffffU)


///< OPS Sar0 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_0TO3_OPS_TAPS_FRA_B1_G0_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_0TO3_OPS_TAPS_FRA_B1_G0_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_0TO3_OPS_TAPS_FRA_B1_G0_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_0TO3_OPS_TAPS_FRA_B1_G0_SAR0_BF_DEF (0x00000000)

///< OPS Sar1 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_0TO3_OPS_TAPS_FRA_B1_G0_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_0TO3_OPS_TAPS_FRA_B1_G0_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_0TO3_OPS_TAPS_FRA_B1_G0_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_0TO3_OPS_TAPS_FRA_B1_G0_SAR1_BF_DEF (0x00000000)

///< OPS Sar2 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_0TO3_OPS_TAPS_FRA_B1_G0_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_0TO3_OPS_TAPS_FRA_B1_G0_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_0TO3_OPS_TAPS_FRA_B1_G0_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_0TO3_OPS_TAPS_FRA_B1_G0_SAR2_BF_DEF (0x00000000)

///< OPS Sar3 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_0TO3_OPS_TAPS_FRA_B1_G0_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_0TO3_OPS_TAPS_FRA_B1_G0_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_0TO3_OPS_TAPS_FRA_B1_G0_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_0TO3_OPS_TAPS_FRA_B1_G0_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B1_SAR_4TO7 register description at address offset 0xcec
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b1_sar_4to7
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B1_G0_SAR4 : 8;
    ///< OPS Sar4 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B1_G0_SAR5 : 8;
    ///< OPS Sar5 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B1_G0_SAR6 : 8;
    ///< OPS Sar6 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B1_G0_SAR7 : 8;
    ///< OPS Sar7 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b1_sar_4to7_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_4TO7_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_4TO7_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_4TO7_WR_MASK (0xffffffffU)


///< OPS Sar4 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_4TO7_OPS_TAPS_FRA_B1_G0_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_4TO7_OPS_TAPS_FRA_B1_G0_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_4TO7_OPS_TAPS_FRA_B1_G0_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_4TO7_OPS_TAPS_FRA_B1_G0_SAR4_BF_DEF (0x00000000)

///< OPS Sar5 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_4TO7_OPS_TAPS_FRA_B1_G0_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_4TO7_OPS_TAPS_FRA_B1_G0_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_4TO7_OPS_TAPS_FRA_B1_G0_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_4TO7_OPS_TAPS_FRA_B1_G0_SAR5_BF_DEF (0x00000000)

///< OPS Sar6 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_4TO7_OPS_TAPS_FRA_B1_G0_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_4TO7_OPS_TAPS_FRA_B1_G0_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_4TO7_OPS_TAPS_FRA_B1_G0_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_4TO7_OPS_TAPS_FRA_B1_G0_SAR6_BF_DEF (0x00000000)

///< OPS Sar7 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_4TO7_OPS_TAPS_FRA_B1_G0_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_4TO7_OPS_TAPS_FRA_B1_G0_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_4TO7_OPS_TAPS_FRA_B1_G0_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_4TO7_OPS_TAPS_FRA_B1_G0_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B1_SAR_8TO11 register description at address offset 0xcf0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b1_sar_8to11
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B1_G1_SAR0 : 8;
    ///< OPS Sar8  tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B1_G1_SAR1 : 8;
    ///< OPS Sar9  tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B1_G1_SAR2 : 8;
    ///< OPS Sar10 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B1_G1_SAR3 : 8;
    ///< OPS Sar11 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b1_sar_8to11_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_8TO11_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_8TO11_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_8TO11_WR_MASK (0xffffffffU)


///< OPS Sar8  tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_8TO11_OPS_TAPS_FRA_B1_G1_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_8TO11_OPS_TAPS_FRA_B1_G1_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_8TO11_OPS_TAPS_FRA_B1_G1_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_8TO11_OPS_TAPS_FRA_B1_G1_SAR0_BF_DEF (0x00000000)

///< OPS Sar9  tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_8TO11_OPS_TAPS_FRA_B1_G1_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_8TO11_OPS_TAPS_FRA_B1_G1_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_8TO11_OPS_TAPS_FRA_B1_G1_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_8TO11_OPS_TAPS_FRA_B1_G1_SAR1_BF_DEF (0x00000000)

///< OPS Sar10 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_8TO11_OPS_TAPS_FRA_B1_G1_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_8TO11_OPS_TAPS_FRA_B1_G1_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_8TO11_OPS_TAPS_FRA_B1_G1_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_8TO11_OPS_TAPS_FRA_B1_G1_SAR2_BF_DEF (0x00000000)

///< OPS Sar11 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_8TO11_OPS_TAPS_FRA_B1_G1_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_8TO11_OPS_TAPS_FRA_B1_G1_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_8TO11_OPS_TAPS_FRA_B1_G1_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_8TO11_OPS_TAPS_FRA_B1_G1_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B1_SAR_12TO15 register description at address offset 0xcf4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b1_sar_12to15
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B1_G1_SAR4 : 8;
    ///< OPS Sar12 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B1_G1_SAR5 : 8;
    ///< OPS Sar13 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B1_G1_SAR6 : 8;
    ///< OPS Sar14 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B1_G1_SAR7 : 8;
    ///< OPS Sar15 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b1_sar_12to15_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_12TO15_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_12TO15_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_12TO15_WR_MASK (0xffffffffU)


///< OPS Sar12 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_12TO15_OPS_TAPS_FRA_B1_G1_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_12TO15_OPS_TAPS_FRA_B1_G1_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_12TO15_OPS_TAPS_FRA_B1_G1_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_12TO15_OPS_TAPS_FRA_B1_G1_SAR4_BF_DEF (0x00000000)

///< OPS Sar13 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_12TO15_OPS_TAPS_FRA_B1_G1_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_12TO15_OPS_TAPS_FRA_B1_G1_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_12TO15_OPS_TAPS_FRA_B1_G1_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_12TO15_OPS_TAPS_FRA_B1_G1_SAR5_BF_DEF (0x00000000)

///< OPS Sar14 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_12TO15_OPS_TAPS_FRA_B1_G1_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_12TO15_OPS_TAPS_FRA_B1_G1_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_12TO15_OPS_TAPS_FRA_B1_G1_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_12TO15_OPS_TAPS_FRA_B1_G1_SAR6_BF_DEF (0x00000000)

///< OPS Sar15 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_12TO15_OPS_TAPS_FRA_B1_G1_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_12TO15_OPS_TAPS_FRA_B1_G1_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_12TO15_OPS_TAPS_FRA_B1_G1_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_12TO15_OPS_TAPS_FRA_B1_G1_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B1_SAR_16TO19 register description at address offset 0xcf8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b1_sar_16to19
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B1_G2_SAR0 : 8;
    ///< OPS Sar16 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B1_G2_SAR1 : 8;
    ///< OPS Sar17 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B1_G2_SAR2 : 8;
    ///< OPS Sar18 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B1_G2_SAR3 : 8;
    ///< OPS Sar19 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b1_sar_16to19_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_16TO19_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_16TO19_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_16TO19_WR_MASK (0xffffffffU)


///< OPS Sar16 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_16TO19_OPS_TAPS_FRA_B1_G2_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_16TO19_OPS_TAPS_FRA_B1_G2_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_16TO19_OPS_TAPS_FRA_B1_G2_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_16TO19_OPS_TAPS_FRA_B1_G2_SAR0_BF_DEF (0x00000000)

///< OPS Sar17 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_16TO19_OPS_TAPS_FRA_B1_G2_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_16TO19_OPS_TAPS_FRA_B1_G2_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_16TO19_OPS_TAPS_FRA_B1_G2_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_16TO19_OPS_TAPS_FRA_B1_G2_SAR1_BF_DEF (0x00000000)

///< OPS Sar18 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_16TO19_OPS_TAPS_FRA_B1_G2_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_16TO19_OPS_TAPS_FRA_B1_G2_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_16TO19_OPS_TAPS_FRA_B1_G2_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_16TO19_OPS_TAPS_FRA_B1_G2_SAR2_BF_DEF (0x00000000)

///< OPS Sar19 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_16TO19_OPS_TAPS_FRA_B1_G2_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_16TO19_OPS_TAPS_FRA_B1_G2_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_16TO19_OPS_TAPS_FRA_B1_G2_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_16TO19_OPS_TAPS_FRA_B1_G2_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B1_SAR_20TO23 register description at address offset 0xcfc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b1_sar_20to23
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B1_G2_SAR4 : 8;
    ///< OPS Sar20 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B1_G2_SAR5 : 8;
    ///< OPS Sar21 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B1_G2_SAR6 : 8;
    ///< OPS Sar22 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B1_G2_SAR7 : 8;
    ///< OPS Sar23 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b1_sar_20to23_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_20TO23_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_20TO23_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_20TO23_WR_MASK (0xffffffffU)


///< OPS Sar20 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_20TO23_OPS_TAPS_FRA_B1_G2_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_20TO23_OPS_TAPS_FRA_B1_G2_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_20TO23_OPS_TAPS_FRA_B1_G2_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_20TO23_OPS_TAPS_FRA_B1_G2_SAR4_BF_DEF (0x00000000)

///< OPS Sar21 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_20TO23_OPS_TAPS_FRA_B1_G2_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_20TO23_OPS_TAPS_FRA_B1_G2_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_20TO23_OPS_TAPS_FRA_B1_G2_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_20TO23_OPS_TAPS_FRA_B1_G2_SAR5_BF_DEF (0x00000000)

///< OPS Sar22 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_20TO23_OPS_TAPS_FRA_B1_G2_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_20TO23_OPS_TAPS_FRA_B1_G2_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_20TO23_OPS_TAPS_FRA_B1_G2_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_20TO23_OPS_TAPS_FRA_B1_G2_SAR6_BF_DEF (0x00000000)

///< OPS Sar23 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_20TO23_OPS_TAPS_FRA_B1_G2_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_20TO23_OPS_TAPS_FRA_B1_G2_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_20TO23_OPS_TAPS_FRA_B1_G2_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_20TO23_OPS_TAPS_FRA_B1_G2_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B1_SAR_24TO27 register description at address offset 0xd00
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b1_sar_24to27
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B1_G3_SAR0 : 8;
    ///< OPS Sar24 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B1_G3_SAR1 : 8;
    ///< OPS Sar25 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B1_G3_SAR2 : 8;
    ///< OPS Sar26 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B1_G3_SAR3 : 8;
    ///< OPS Sar27 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b1_sar_24to27_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_24TO27_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_24TO27_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_24TO27_WR_MASK (0xffffffffU)


///< OPS Sar24 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_24TO27_OPS_TAPS_FRA_B1_G3_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_24TO27_OPS_TAPS_FRA_B1_G3_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_24TO27_OPS_TAPS_FRA_B1_G3_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_24TO27_OPS_TAPS_FRA_B1_G3_SAR0_BF_DEF (0x00000000)

///< OPS Sar25 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_24TO27_OPS_TAPS_FRA_B1_G3_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_24TO27_OPS_TAPS_FRA_B1_G3_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_24TO27_OPS_TAPS_FRA_B1_G3_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_24TO27_OPS_TAPS_FRA_B1_G3_SAR1_BF_DEF (0x00000000)

///< OPS Sar26 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_24TO27_OPS_TAPS_FRA_B1_G3_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_24TO27_OPS_TAPS_FRA_B1_G3_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_24TO27_OPS_TAPS_FRA_B1_G3_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_24TO27_OPS_TAPS_FRA_B1_G3_SAR2_BF_DEF (0x00000000)

///< OPS Sar27 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_24TO27_OPS_TAPS_FRA_B1_G3_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_24TO27_OPS_TAPS_FRA_B1_G3_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_24TO27_OPS_TAPS_FRA_B1_G3_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_24TO27_OPS_TAPS_FRA_B1_G3_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B1_SAR_28TO31 register description at address offset 0xd04
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b1_sar_28to31
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B1_G3_SAR4 : 8;
    ///< OPS Sar28 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B1_G3_SAR5 : 8;
    ///< OPS Sar29 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B1_G3_SAR6 : 8;
    ///< OPS Sar30 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B1_G3_SAR7 : 8;
    ///< OPS Sar31 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b1_sar_28to31_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_28TO31_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_28TO31_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_28TO31_WR_MASK (0xffffffffU)


///< OPS Sar28 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_28TO31_OPS_TAPS_FRA_B1_G3_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_28TO31_OPS_TAPS_FRA_B1_G3_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_28TO31_OPS_TAPS_FRA_B1_G3_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_28TO31_OPS_TAPS_FRA_B1_G3_SAR4_BF_DEF (0x00000000)

///< OPS Sar29 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_28TO31_OPS_TAPS_FRA_B1_G3_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_28TO31_OPS_TAPS_FRA_B1_G3_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_28TO31_OPS_TAPS_FRA_B1_G3_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_28TO31_OPS_TAPS_FRA_B1_G3_SAR5_BF_DEF (0x00000000)

///< OPS Sar30 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_28TO31_OPS_TAPS_FRA_B1_G3_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_28TO31_OPS_TAPS_FRA_B1_G3_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_28TO31_OPS_TAPS_FRA_B1_G3_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_28TO31_OPS_TAPS_FRA_B1_G3_SAR6_BF_DEF (0x00000000)

///< OPS Sar31 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_28TO31_OPS_TAPS_FRA_B1_G3_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_28TO31_OPS_TAPS_FRA_B1_G3_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_28TO31_OPS_TAPS_FRA_B1_G3_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_28TO31_OPS_TAPS_FRA_B1_G3_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B1_SAR_32TO35 register description at address offset 0xd08
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b1_sar_32to35
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B1_G4_SAR0 : 8;
    ///< OPS Sar32 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B1_G4_SAR1 : 8;
    ///< OPS Sar33 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B1_G4_SAR2 : 8;
    ///< OPS Sar34 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B1_G4_SAR3 : 8;
    ///< OPS Sar35 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b1_sar_32to35_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_32TO35_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_32TO35_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_32TO35_WR_MASK (0xffffffffU)


///< OPS Sar32 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_32TO35_OPS_TAPS_FRA_B1_G4_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_32TO35_OPS_TAPS_FRA_B1_G4_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_32TO35_OPS_TAPS_FRA_B1_G4_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_32TO35_OPS_TAPS_FRA_B1_G4_SAR0_BF_DEF (0x00000000)

///< OPS Sar33 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_32TO35_OPS_TAPS_FRA_B1_G4_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_32TO35_OPS_TAPS_FRA_B1_G4_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_32TO35_OPS_TAPS_FRA_B1_G4_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_32TO35_OPS_TAPS_FRA_B1_G4_SAR1_BF_DEF (0x00000000)

///< OPS Sar34 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_32TO35_OPS_TAPS_FRA_B1_G4_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_32TO35_OPS_TAPS_FRA_B1_G4_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_32TO35_OPS_TAPS_FRA_B1_G4_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_32TO35_OPS_TAPS_FRA_B1_G4_SAR2_BF_DEF (0x00000000)

///< OPS Sar35 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_32TO35_OPS_TAPS_FRA_B1_G4_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_32TO35_OPS_TAPS_FRA_B1_G4_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_32TO35_OPS_TAPS_FRA_B1_G4_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_32TO35_OPS_TAPS_FRA_B1_G4_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B1_SAR_36TO39 register description at address offset 0xd0c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b1_sar_36to39
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B1_G4_SAR4 : 8;
    ///< OPS Sar36 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B1_G4_SAR5 : 8;
    ///< OPS Sar37 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B1_G4_SAR6 : 8;
    ///< OPS Sar38 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B1_G4_SAR7 : 8;
    ///< OPS Sar39 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b1_sar_36to39_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_36TO39_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_36TO39_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_36TO39_WR_MASK (0xffffffffU)


///< OPS Sar36 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_36TO39_OPS_TAPS_FRA_B1_G4_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_36TO39_OPS_TAPS_FRA_B1_G4_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_36TO39_OPS_TAPS_FRA_B1_G4_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_36TO39_OPS_TAPS_FRA_B1_G4_SAR4_BF_DEF (0x00000000)

///< OPS Sar37 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_36TO39_OPS_TAPS_FRA_B1_G4_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_36TO39_OPS_TAPS_FRA_B1_G4_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_36TO39_OPS_TAPS_FRA_B1_G4_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_36TO39_OPS_TAPS_FRA_B1_G4_SAR5_BF_DEF (0x00000000)

///< OPS Sar38 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_36TO39_OPS_TAPS_FRA_B1_G4_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_36TO39_OPS_TAPS_FRA_B1_G4_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_36TO39_OPS_TAPS_FRA_B1_G4_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_36TO39_OPS_TAPS_FRA_B1_G4_SAR6_BF_DEF (0x00000000)

///< OPS Sar39 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_36TO39_OPS_TAPS_FRA_B1_G4_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_36TO39_OPS_TAPS_FRA_B1_G4_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_36TO39_OPS_TAPS_FRA_B1_G4_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_36TO39_OPS_TAPS_FRA_B1_G4_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B1_SAR_40TO43 register description at address offset 0xd10
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b1_sar_40to43
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B1_G5_SAR0 : 8;
    ///< OPS Sar40 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B1_G5_SAR1 : 8;
    ///< OPS Sar41 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B1_G5_SAR2 : 8;
    ///< OPS Sar42 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B1_G5_SAR3 : 8;
    ///< OPS Sar43 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b1_sar_40to43_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_40TO43_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_40TO43_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_40TO43_WR_MASK (0xffffffffU)


///< OPS Sar40 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_40TO43_OPS_TAPS_FRA_B1_G5_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_40TO43_OPS_TAPS_FRA_B1_G5_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_40TO43_OPS_TAPS_FRA_B1_G5_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_40TO43_OPS_TAPS_FRA_B1_G5_SAR0_BF_DEF (0x00000000)

///< OPS Sar41 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_40TO43_OPS_TAPS_FRA_B1_G5_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_40TO43_OPS_TAPS_FRA_B1_G5_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_40TO43_OPS_TAPS_FRA_B1_G5_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_40TO43_OPS_TAPS_FRA_B1_G5_SAR1_BF_DEF (0x00000000)

///< OPS Sar42 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_40TO43_OPS_TAPS_FRA_B1_G5_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_40TO43_OPS_TAPS_FRA_B1_G5_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_40TO43_OPS_TAPS_FRA_B1_G5_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_40TO43_OPS_TAPS_FRA_B1_G5_SAR2_BF_DEF (0x00000000)

///< OPS Sar43 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_40TO43_OPS_TAPS_FRA_B1_G5_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_40TO43_OPS_TAPS_FRA_B1_G5_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_40TO43_OPS_TAPS_FRA_B1_G5_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_40TO43_OPS_TAPS_FRA_B1_G5_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B1_SAR_44TO47 register description at address offset 0xd14
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b1_sar_44to47
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B1_G5_SAR4 : 8;
    ///< OPS Sar44 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B1_G5_SAR5 : 8;
    ///< OPS Sar45 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B1_G5_SAR6 : 8;
    ///< OPS Sar46 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B1_G5_SAR7 : 8;
    ///< OPS Sar47 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b1_sar_44to47_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_44TO47_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_44TO47_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_44TO47_WR_MASK (0xffffffffU)


///< OPS Sar44 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_44TO47_OPS_TAPS_FRA_B1_G5_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_44TO47_OPS_TAPS_FRA_B1_G5_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_44TO47_OPS_TAPS_FRA_B1_G5_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_44TO47_OPS_TAPS_FRA_B1_G5_SAR4_BF_DEF (0x00000000)

///< OPS Sar45 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_44TO47_OPS_TAPS_FRA_B1_G5_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_44TO47_OPS_TAPS_FRA_B1_G5_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_44TO47_OPS_TAPS_FRA_B1_G5_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_44TO47_OPS_TAPS_FRA_B1_G5_SAR5_BF_DEF (0x00000000)

///< OPS Sar46 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_44TO47_OPS_TAPS_FRA_B1_G5_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_44TO47_OPS_TAPS_FRA_B1_G5_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_44TO47_OPS_TAPS_FRA_B1_G5_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_44TO47_OPS_TAPS_FRA_B1_G5_SAR6_BF_DEF (0x00000000)

///< OPS Sar47 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_44TO47_OPS_TAPS_FRA_B1_G5_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_44TO47_OPS_TAPS_FRA_B1_G5_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_44TO47_OPS_TAPS_FRA_B1_G5_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_44TO47_OPS_TAPS_FRA_B1_G5_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B1_SAR_48TO51 register description at address offset 0xd18
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b1_sar_48to51
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B1_G6_SAR0 : 8;
    ///< OPS Sar48 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B1_G6_SAR1 : 8;
    ///< OPS Sar49 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B1_G6_SAR2 : 8;
    ///< OPS Sar50 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B1_G6_SAR3 : 8;
    ///< OPS Sar51 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b1_sar_48to51_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_48TO51_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_48TO51_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_48TO51_WR_MASK (0xffffffffU)


///< OPS Sar48 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_48TO51_OPS_TAPS_FRA_B1_G6_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_48TO51_OPS_TAPS_FRA_B1_G6_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_48TO51_OPS_TAPS_FRA_B1_G6_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_48TO51_OPS_TAPS_FRA_B1_G6_SAR0_BF_DEF (0x00000000)

///< OPS Sar49 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_48TO51_OPS_TAPS_FRA_B1_G6_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_48TO51_OPS_TAPS_FRA_B1_G6_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_48TO51_OPS_TAPS_FRA_B1_G6_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_48TO51_OPS_TAPS_FRA_B1_G6_SAR1_BF_DEF (0x00000000)

///< OPS Sar50 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_48TO51_OPS_TAPS_FRA_B1_G6_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_48TO51_OPS_TAPS_FRA_B1_G6_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_48TO51_OPS_TAPS_FRA_B1_G6_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_48TO51_OPS_TAPS_FRA_B1_G6_SAR2_BF_DEF (0x00000000)

///< OPS Sar51 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_48TO51_OPS_TAPS_FRA_B1_G6_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_48TO51_OPS_TAPS_FRA_B1_G6_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_48TO51_OPS_TAPS_FRA_B1_G6_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_48TO51_OPS_TAPS_FRA_B1_G6_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B1_SAR_52TO55 register description at address offset 0xd1c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b1_sar_52to55
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B1_G6_SAR4 : 8;
    ///< OPS Sar52 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B1_G6_SAR5 : 8;
    ///< OPS Sar53 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B1_G6_SAR6 : 8;
    ///< OPS Sar54 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B1_G6_SAR7 : 8;
    ///< OPS Sar55 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b1_sar_52to55_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_52TO55_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_52TO55_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_52TO55_WR_MASK (0xffffffffU)


///< OPS Sar52 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_52TO55_OPS_TAPS_FRA_B1_G6_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_52TO55_OPS_TAPS_FRA_B1_G6_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_52TO55_OPS_TAPS_FRA_B1_G6_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_52TO55_OPS_TAPS_FRA_B1_G6_SAR4_BF_DEF (0x00000000)

///< OPS Sar53 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_52TO55_OPS_TAPS_FRA_B1_G6_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_52TO55_OPS_TAPS_FRA_B1_G6_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_52TO55_OPS_TAPS_FRA_B1_G6_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_52TO55_OPS_TAPS_FRA_B1_G6_SAR5_BF_DEF (0x00000000)

///< OPS Sar54 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_52TO55_OPS_TAPS_FRA_B1_G6_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_52TO55_OPS_TAPS_FRA_B1_G6_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_52TO55_OPS_TAPS_FRA_B1_G6_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_52TO55_OPS_TAPS_FRA_B1_G6_SAR6_BF_DEF (0x00000000)

///< OPS Sar55 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_52TO55_OPS_TAPS_FRA_B1_G6_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_52TO55_OPS_TAPS_FRA_B1_G6_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_52TO55_OPS_TAPS_FRA_B1_G6_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_52TO55_OPS_TAPS_FRA_B1_G6_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B1_SAR_56TO59 register description at address offset 0xd20
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b1_sar_56to59
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B1_G7_SAR0 : 8;
    ///< OPS Sar56 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B1_G7_SAR1 : 8;
    ///< OPS Sar57 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B1_G7_SAR2 : 8;
    ///< OPS Sar58 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B1_G7_SAR3 : 8;
    ///< OPS Sar59 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b1_sar_56to59_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_56TO59_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_56TO59_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_56TO59_WR_MASK (0xffffffffU)


///< OPS Sar56 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_56TO59_OPS_TAPS_FRA_B1_G7_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_56TO59_OPS_TAPS_FRA_B1_G7_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_56TO59_OPS_TAPS_FRA_B1_G7_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_56TO59_OPS_TAPS_FRA_B1_G7_SAR0_BF_DEF (0x00000000)

///< OPS Sar57 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_56TO59_OPS_TAPS_FRA_B1_G7_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_56TO59_OPS_TAPS_FRA_B1_G7_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_56TO59_OPS_TAPS_FRA_B1_G7_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_56TO59_OPS_TAPS_FRA_B1_G7_SAR1_BF_DEF (0x00000000)

///< OPS Sar58 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_56TO59_OPS_TAPS_FRA_B1_G7_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_56TO59_OPS_TAPS_FRA_B1_G7_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_56TO59_OPS_TAPS_FRA_B1_G7_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_56TO59_OPS_TAPS_FRA_B1_G7_SAR2_BF_DEF (0x00000000)

///< OPS Sar59 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_56TO59_OPS_TAPS_FRA_B1_G7_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_56TO59_OPS_TAPS_FRA_B1_G7_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_56TO59_OPS_TAPS_FRA_B1_G7_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_56TO59_OPS_TAPS_FRA_B1_G7_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B1_SAR_60TO63 register description at address offset 0xd24
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b1_sar_60to63
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B1_G7_SAR4 : 8;
    ///< OPS Sar60 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B1_G7_SAR5 : 8;
    ///< OPS Sar61 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B1_G7_SAR6 : 8;
    ///< OPS Sar62 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B1_G7_SAR7 : 8;
    ///< OPS Sar63 tap frac value on bit 1
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b1_sar_60to63_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_60TO63_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_60TO63_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_60TO63_WR_MASK (0xffffffffU)


///< OPS Sar60 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_60TO63_OPS_TAPS_FRA_B1_G7_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_60TO63_OPS_TAPS_FRA_B1_G7_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_60TO63_OPS_TAPS_FRA_B1_G7_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_60TO63_OPS_TAPS_FRA_B1_G7_SAR4_BF_DEF (0x00000000)

///< OPS Sar61 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_60TO63_OPS_TAPS_FRA_B1_G7_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_60TO63_OPS_TAPS_FRA_B1_G7_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_60TO63_OPS_TAPS_FRA_B1_G7_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_60TO63_OPS_TAPS_FRA_B1_G7_SAR5_BF_DEF (0x00000000)

///< OPS Sar62 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_60TO63_OPS_TAPS_FRA_B1_G7_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_60TO63_OPS_TAPS_FRA_B1_G7_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_60TO63_OPS_TAPS_FRA_B1_G7_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_60TO63_OPS_TAPS_FRA_B1_G7_SAR6_BF_DEF (0x00000000)

///< OPS Sar63 tap frac value on bit 1
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_60TO63_OPS_TAPS_FRA_B1_G7_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_60TO63_OPS_TAPS_FRA_B1_G7_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_60TO63_OPS_TAPS_FRA_B1_G7_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_60TO63_OPS_TAPS_FRA_B1_G7_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B2_SAR_0TO3 register description at address offset 0xd28
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b2_sar_0to3
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B2_G0_SAR0 : 8;
    ///< OPS Sar0 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B2_G0_SAR1 : 8;
    ///< OPS Sar1 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B2_G0_SAR2 : 8;
    ///< OPS Sar2 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B2_G0_SAR3 : 8;
    ///< OPS Sar3 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b2_sar_0to3_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_0TO3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_0TO3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_0TO3_WR_MASK (0xffffffffU)


///< OPS Sar0 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_0TO3_OPS_TAPS_FRA_B2_G0_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_0TO3_OPS_TAPS_FRA_B2_G0_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_0TO3_OPS_TAPS_FRA_B2_G0_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_0TO3_OPS_TAPS_FRA_B2_G0_SAR0_BF_DEF (0x00000000)

///< OPS Sar1 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_0TO3_OPS_TAPS_FRA_B2_G0_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_0TO3_OPS_TAPS_FRA_B2_G0_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_0TO3_OPS_TAPS_FRA_B2_G0_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_0TO3_OPS_TAPS_FRA_B2_G0_SAR1_BF_DEF (0x00000000)

///< OPS Sar2 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_0TO3_OPS_TAPS_FRA_B2_G0_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_0TO3_OPS_TAPS_FRA_B2_G0_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_0TO3_OPS_TAPS_FRA_B2_G0_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_0TO3_OPS_TAPS_FRA_B2_G0_SAR2_BF_DEF (0x00000000)

///< OPS Sar3 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_0TO3_OPS_TAPS_FRA_B2_G0_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_0TO3_OPS_TAPS_FRA_B2_G0_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_0TO3_OPS_TAPS_FRA_B2_G0_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_0TO3_OPS_TAPS_FRA_B2_G0_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B2_SAR_4TO7 register description at address offset 0xd2c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b2_sar_4to7
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B2_G0_SAR4 : 8;
    ///< OPS Sar4 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B2_G0_SAR5 : 8;
    ///< OPS Sar5 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B2_G0_SAR6 : 8;
    ///< OPS Sar6 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B2_G0_SAR7 : 8;
    ///< OPS Sar7 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b2_sar_4to7_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_4TO7_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_4TO7_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_4TO7_WR_MASK (0xffffffffU)


///< OPS Sar4 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_4TO7_OPS_TAPS_FRA_B2_G0_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_4TO7_OPS_TAPS_FRA_B2_G0_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_4TO7_OPS_TAPS_FRA_B2_G0_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_4TO7_OPS_TAPS_FRA_B2_G0_SAR4_BF_DEF (0x00000000)

///< OPS Sar5 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_4TO7_OPS_TAPS_FRA_B2_G0_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_4TO7_OPS_TAPS_FRA_B2_G0_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_4TO7_OPS_TAPS_FRA_B2_G0_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_4TO7_OPS_TAPS_FRA_B2_G0_SAR5_BF_DEF (0x00000000)

///< OPS Sar6 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_4TO7_OPS_TAPS_FRA_B2_G0_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_4TO7_OPS_TAPS_FRA_B2_G0_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_4TO7_OPS_TAPS_FRA_B2_G0_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_4TO7_OPS_TAPS_FRA_B2_G0_SAR6_BF_DEF (0x00000000)

///< OPS Sar7 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_4TO7_OPS_TAPS_FRA_B2_G0_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_4TO7_OPS_TAPS_FRA_B2_G0_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_4TO7_OPS_TAPS_FRA_B2_G0_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_4TO7_OPS_TAPS_FRA_B2_G0_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B2_SAR_8TO11 register description at address offset 0xd30
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b2_sar_8to11
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B2_G1_SAR0 : 8;
    ///< OPS Sar8  tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B2_G1_SAR1 : 8;
    ///< OPS Sar9  tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B2_G1_SAR2 : 8;
    ///< OPS Sar10 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B2_G1_SAR3 : 8;
    ///< OPS Sar11 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b2_sar_8to11_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_8TO11_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_8TO11_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_8TO11_WR_MASK (0xffffffffU)


///< OPS Sar8  tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_8TO11_OPS_TAPS_FRA_B2_G1_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_8TO11_OPS_TAPS_FRA_B2_G1_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_8TO11_OPS_TAPS_FRA_B2_G1_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_8TO11_OPS_TAPS_FRA_B2_G1_SAR0_BF_DEF (0x00000000)

///< OPS Sar9  tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_8TO11_OPS_TAPS_FRA_B2_G1_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_8TO11_OPS_TAPS_FRA_B2_G1_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_8TO11_OPS_TAPS_FRA_B2_G1_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_8TO11_OPS_TAPS_FRA_B2_G1_SAR1_BF_DEF (0x00000000)

///< OPS Sar10 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_8TO11_OPS_TAPS_FRA_B2_G1_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_8TO11_OPS_TAPS_FRA_B2_G1_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_8TO11_OPS_TAPS_FRA_B2_G1_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_8TO11_OPS_TAPS_FRA_B2_G1_SAR2_BF_DEF (0x00000000)

///< OPS Sar11 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_8TO11_OPS_TAPS_FRA_B2_G1_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_8TO11_OPS_TAPS_FRA_B2_G1_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_8TO11_OPS_TAPS_FRA_B2_G1_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_8TO11_OPS_TAPS_FRA_B2_G1_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B2_SAR_12TO15 register description at address offset 0xd34
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b2_sar_12to15
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B2_G1_SAR4 : 8;
    ///< OPS Sar12 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B2_G1_SAR5 : 8;
    ///< OPS Sar13 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B2_G1_SAR6 : 8;
    ///< OPS Sar14 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B2_G1_SAR7 : 8;
    ///< OPS Sar15 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b2_sar_12to15_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_12TO15_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_12TO15_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_12TO15_WR_MASK (0xffffffffU)


///< OPS Sar12 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_12TO15_OPS_TAPS_FRA_B2_G1_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_12TO15_OPS_TAPS_FRA_B2_G1_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_12TO15_OPS_TAPS_FRA_B2_G1_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_12TO15_OPS_TAPS_FRA_B2_G1_SAR4_BF_DEF (0x00000000)

///< OPS Sar13 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_12TO15_OPS_TAPS_FRA_B2_G1_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_12TO15_OPS_TAPS_FRA_B2_G1_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_12TO15_OPS_TAPS_FRA_B2_G1_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_12TO15_OPS_TAPS_FRA_B2_G1_SAR5_BF_DEF (0x00000000)

///< OPS Sar14 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_12TO15_OPS_TAPS_FRA_B2_G1_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_12TO15_OPS_TAPS_FRA_B2_G1_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_12TO15_OPS_TAPS_FRA_B2_G1_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_12TO15_OPS_TAPS_FRA_B2_G1_SAR6_BF_DEF (0x00000000)

///< OPS Sar15 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_12TO15_OPS_TAPS_FRA_B2_G1_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_12TO15_OPS_TAPS_FRA_B2_G1_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_12TO15_OPS_TAPS_FRA_B2_G1_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_12TO15_OPS_TAPS_FRA_B2_G1_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B2_SAR_16TO19 register description at address offset 0xd38
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b2_sar_16to19
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B2_G2_SAR0 : 8;
    ///< OPS Sar16 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B2_G2_SAR1 : 8;
    ///< OPS Sar17 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B2_G2_SAR2 : 8;
    ///< OPS Sar18 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B2_G2_SAR3 : 8;
    ///< OPS Sar19 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b2_sar_16to19_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_16TO19_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_16TO19_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_16TO19_WR_MASK (0xffffffffU)


///< OPS Sar16 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_16TO19_OPS_TAPS_FRA_B2_G2_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_16TO19_OPS_TAPS_FRA_B2_G2_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_16TO19_OPS_TAPS_FRA_B2_G2_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_16TO19_OPS_TAPS_FRA_B2_G2_SAR0_BF_DEF (0x00000000)

///< OPS Sar17 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_16TO19_OPS_TAPS_FRA_B2_G2_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_16TO19_OPS_TAPS_FRA_B2_G2_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_16TO19_OPS_TAPS_FRA_B2_G2_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_16TO19_OPS_TAPS_FRA_B2_G2_SAR1_BF_DEF (0x00000000)

///< OPS Sar18 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_16TO19_OPS_TAPS_FRA_B2_G2_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_16TO19_OPS_TAPS_FRA_B2_G2_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_16TO19_OPS_TAPS_FRA_B2_G2_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_16TO19_OPS_TAPS_FRA_B2_G2_SAR2_BF_DEF (0x00000000)

///< OPS Sar19 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_16TO19_OPS_TAPS_FRA_B2_G2_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_16TO19_OPS_TAPS_FRA_B2_G2_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_16TO19_OPS_TAPS_FRA_B2_G2_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_16TO19_OPS_TAPS_FRA_B2_G2_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B2_SAR_20TO23 register description at address offset 0xd3c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b2_sar_20to23
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B2_G2_SAR4 : 8;
    ///< OPS Sar20 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B2_G2_SAR5 : 8;
    ///< OPS Sar21 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B2_G2_SAR6 : 8;
    ///< OPS Sar22 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B2_G2_SAR7 : 8;
    ///< OPS Sar23 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b2_sar_20to23_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_20TO23_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_20TO23_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_20TO23_WR_MASK (0xffffffffU)


///< OPS Sar20 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_20TO23_OPS_TAPS_FRA_B2_G2_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_20TO23_OPS_TAPS_FRA_B2_G2_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_20TO23_OPS_TAPS_FRA_B2_G2_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_20TO23_OPS_TAPS_FRA_B2_G2_SAR4_BF_DEF (0x00000000)

///< OPS Sar21 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_20TO23_OPS_TAPS_FRA_B2_G2_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_20TO23_OPS_TAPS_FRA_B2_G2_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_20TO23_OPS_TAPS_FRA_B2_G2_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_20TO23_OPS_TAPS_FRA_B2_G2_SAR5_BF_DEF (0x00000000)

///< OPS Sar22 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_20TO23_OPS_TAPS_FRA_B2_G2_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_20TO23_OPS_TAPS_FRA_B2_G2_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_20TO23_OPS_TAPS_FRA_B2_G2_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_20TO23_OPS_TAPS_FRA_B2_G2_SAR6_BF_DEF (0x00000000)

///< OPS Sar23 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_20TO23_OPS_TAPS_FRA_B2_G2_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_20TO23_OPS_TAPS_FRA_B2_G2_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_20TO23_OPS_TAPS_FRA_B2_G2_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_20TO23_OPS_TAPS_FRA_B2_G2_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B2_SAR_24TO27 register description at address offset 0xd40
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b2_sar_24to27
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B2_G3_SAR0 : 8;
    ///< OPS Sar24 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B2_G3_SAR1 : 8;
    ///< OPS Sar25 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B2_G3_SAR2 : 8;
    ///< OPS Sar26 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B2_G3_SAR3 : 8;
    ///< OPS Sar27 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b2_sar_24to27_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_24TO27_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_24TO27_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_24TO27_WR_MASK (0xffffffffU)


///< OPS Sar24 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_24TO27_OPS_TAPS_FRA_B2_G3_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_24TO27_OPS_TAPS_FRA_B2_G3_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_24TO27_OPS_TAPS_FRA_B2_G3_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_24TO27_OPS_TAPS_FRA_B2_G3_SAR0_BF_DEF (0x00000000)

///< OPS Sar25 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_24TO27_OPS_TAPS_FRA_B2_G3_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_24TO27_OPS_TAPS_FRA_B2_G3_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_24TO27_OPS_TAPS_FRA_B2_G3_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_24TO27_OPS_TAPS_FRA_B2_G3_SAR1_BF_DEF (0x00000000)

///< OPS Sar26 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_24TO27_OPS_TAPS_FRA_B2_G3_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_24TO27_OPS_TAPS_FRA_B2_G3_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_24TO27_OPS_TAPS_FRA_B2_G3_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_24TO27_OPS_TAPS_FRA_B2_G3_SAR2_BF_DEF (0x00000000)

///< OPS Sar27 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_24TO27_OPS_TAPS_FRA_B2_G3_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_24TO27_OPS_TAPS_FRA_B2_G3_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_24TO27_OPS_TAPS_FRA_B2_G3_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_24TO27_OPS_TAPS_FRA_B2_G3_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B2_SAR_28TO31 register description at address offset 0xd44
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b2_sar_28to31
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B2_G3_SAR4 : 8;
    ///< OPS Sar28 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B2_G3_SAR5 : 8;
    ///< OPS Sar29 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B2_G3_SAR6 : 8;
    ///< OPS Sar30 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B2_G3_SAR7 : 8;
    ///< OPS Sar31 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b2_sar_28to31_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_28TO31_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_28TO31_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_28TO31_WR_MASK (0xffffffffU)


///< OPS Sar28 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_28TO31_OPS_TAPS_FRA_B2_G3_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_28TO31_OPS_TAPS_FRA_B2_G3_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_28TO31_OPS_TAPS_FRA_B2_G3_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_28TO31_OPS_TAPS_FRA_B2_G3_SAR4_BF_DEF (0x00000000)

///< OPS Sar29 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_28TO31_OPS_TAPS_FRA_B2_G3_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_28TO31_OPS_TAPS_FRA_B2_G3_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_28TO31_OPS_TAPS_FRA_B2_G3_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_28TO31_OPS_TAPS_FRA_B2_G3_SAR5_BF_DEF (0x00000000)

///< OPS Sar30 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_28TO31_OPS_TAPS_FRA_B2_G3_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_28TO31_OPS_TAPS_FRA_B2_G3_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_28TO31_OPS_TAPS_FRA_B2_G3_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_28TO31_OPS_TAPS_FRA_B2_G3_SAR6_BF_DEF (0x00000000)

///< OPS Sar31 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_28TO31_OPS_TAPS_FRA_B2_G3_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_28TO31_OPS_TAPS_FRA_B2_G3_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_28TO31_OPS_TAPS_FRA_B2_G3_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_28TO31_OPS_TAPS_FRA_B2_G3_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B2_SAR_32TO35 register description at address offset 0xd48
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b2_sar_32to35
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B2_G4_SAR0 : 8;
    ///< OPS Sar32 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B2_G4_SAR1 : 8;
    ///< OPS Sar33 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B2_G4_SAR2 : 8;
    ///< OPS Sar34 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B2_G4_SAR3 : 8;
    ///< OPS Sar35 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b2_sar_32to35_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_32TO35_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_32TO35_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_32TO35_WR_MASK (0xffffffffU)


///< OPS Sar32 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_32TO35_OPS_TAPS_FRA_B2_G4_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_32TO35_OPS_TAPS_FRA_B2_G4_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_32TO35_OPS_TAPS_FRA_B2_G4_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_32TO35_OPS_TAPS_FRA_B2_G4_SAR0_BF_DEF (0x00000000)

///< OPS Sar33 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_32TO35_OPS_TAPS_FRA_B2_G4_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_32TO35_OPS_TAPS_FRA_B2_G4_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_32TO35_OPS_TAPS_FRA_B2_G4_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_32TO35_OPS_TAPS_FRA_B2_G4_SAR1_BF_DEF (0x00000000)

///< OPS Sar34 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_32TO35_OPS_TAPS_FRA_B2_G4_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_32TO35_OPS_TAPS_FRA_B2_G4_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_32TO35_OPS_TAPS_FRA_B2_G4_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_32TO35_OPS_TAPS_FRA_B2_G4_SAR2_BF_DEF (0x00000000)

///< OPS Sar35 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_32TO35_OPS_TAPS_FRA_B2_G4_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_32TO35_OPS_TAPS_FRA_B2_G4_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_32TO35_OPS_TAPS_FRA_B2_G4_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_32TO35_OPS_TAPS_FRA_B2_G4_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B2_SAR_36TO39 register description at address offset 0xd4c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b2_sar_36to39
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B2_G4_SAR4 : 8;
    ///< OPS Sar36 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B2_G4_SAR5 : 8;
    ///< OPS Sar37 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B2_G4_SAR6 : 8;
    ///< OPS Sar38 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B2_G4_SAR7 : 8;
    ///< OPS Sar39 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b2_sar_36to39_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_36TO39_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_36TO39_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_36TO39_WR_MASK (0xffffffffU)


///< OPS Sar36 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_36TO39_OPS_TAPS_FRA_B2_G4_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_36TO39_OPS_TAPS_FRA_B2_G4_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_36TO39_OPS_TAPS_FRA_B2_G4_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_36TO39_OPS_TAPS_FRA_B2_G4_SAR4_BF_DEF (0x00000000)

///< OPS Sar37 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_36TO39_OPS_TAPS_FRA_B2_G4_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_36TO39_OPS_TAPS_FRA_B2_G4_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_36TO39_OPS_TAPS_FRA_B2_G4_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_36TO39_OPS_TAPS_FRA_B2_G4_SAR5_BF_DEF (0x00000000)

///< OPS Sar38 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_36TO39_OPS_TAPS_FRA_B2_G4_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_36TO39_OPS_TAPS_FRA_B2_G4_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_36TO39_OPS_TAPS_FRA_B2_G4_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_36TO39_OPS_TAPS_FRA_B2_G4_SAR6_BF_DEF (0x00000000)

///< OPS Sar39 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_36TO39_OPS_TAPS_FRA_B2_G4_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_36TO39_OPS_TAPS_FRA_B2_G4_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_36TO39_OPS_TAPS_FRA_B2_G4_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_36TO39_OPS_TAPS_FRA_B2_G4_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B2_SAR_40TO43 register description at address offset 0xd50
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b2_sar_40to43
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B2_G5_SAR0 : 8;
    ///< OPS Sar40 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B2_G5_SAR1 : 8;
    ///< OPS Sar41 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B2_G5_SAR2 : 8;
    ///< OPS Sar42 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B2_G5_SAR3 : 8;
    ///< OPS Sar43 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b2_sar_40to43_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_40TO43_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_40TO43_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_40TO43_WR_MASK (0xffffffffU)


///< OPS Sar40 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_40TO43_OPS_TAPS_FRA_B2_G5_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_40TO43_OPS_TAPS_FRA_B2_G5_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_40TO43_OPS_TAPS_FRA_B2_G5_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_40TO43_OPS_TAPS_FRA_B2_G5_SAR0_BF_DEF (0x00000000)

///< OPS Sar41 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_40TO43_OPS_TAPS_FRA_B2_G5_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_40TO43_OPS_TAPS_FRA_B2_G5_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_40TO43_OPS_TAPS_FRA_B2_G5_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_40TO43_OPS_TAPS_FRA_B2_G5_SAR1_BF_DEF (0x00000000)

///< OPS Sar42 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_40TO43_OPS_TAPS_FRA_B2_G5_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_40TO43_OPS_TAPS_FRA_B2_G5_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_40TO43_OPS_TAPS_FRA_B2_G5_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_40TO43_OPS_TAPS_FRA_B2_G5_SAR2_BF_DEF (0x00000000)

///< OPS Sar43 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_40TO43_OPS_TAPS_FRA_B2_G5_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_40TO43_OPS_TAPS_FRA_B2_G5_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_40TO43_OPS_TAPS_FRA_B2_G5_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_40TO43_OPS_TAPS_FRA_B2_G5_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B2_SAR_44TO47 register description at address offset 0xd54
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b2_sar_44to47
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B2_G5_SAR4 : 8;
    ///< OPS Sar44 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B2_G5_SAR5 : 8;
    ///< OPS Sar45 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B2_G5_SAR6 : 8;
    ///< OPS Sar46 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B2_G5_SAR7 : 8;
    ///< OPS Sar47 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b2_sar_44to47_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_44TO47_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_44TO47_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_44TO47_WR_MASK (0xffffffffU)


///< OPS Sar44 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_44TO47_OPS_TAPS_FRA_B2_G5_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_44TO47_OPS_TAPS_FRA_B2_G5_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_44TO47_OPS_TAPS_FRA_B2_G5_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_44TO47_OPS_TAPS_FRA_B2_G5_SAR4_BF_DEF (0x00000000)

///< OPS Sar45 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_44TO47_OPS_TAPS_FRA_B2_G5_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_44TO47_OPS_TAPS_FRA_B2_G5_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_44TO47_OPS_TAPS_FRA_B2_G5_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_44TO47_OPS_TAPS_FRA_B2_G5_SAR5_BF_DEF (0x00000000)

///< OPS Sar46 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_44TO47_OPS_TAPS_FRA_B2_G5_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_44TO47_OPS_TAPS_FRA_B2_G5_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_44TO47_OPS_TAPS_FRA_B2_G5_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_44TO47_OPS_TAPS_FRA_B2_G5_SAR6_BF_DEF (0x00000000)

///< OPS Sar47 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_44TO47_OPS_TAPS_FRA_B2_G5_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_44TO47_OPS_TAPS_FRA_B2_G5_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_44TO47_OPS_TAPS_FRA_B2_G5_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_44TO47_OPS_TAPS_FRA_B2_G5_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B2_SAR_48TO51 register description at address offset 0xd58
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b2_sar_48to51
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B2_G6_SAR0 : 8;
    ///< OPS Sar48 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B2_G6_SAR1 : 8;
    ///< OPS Sar49 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B2_G6_SAR2 : 8;
    ///< OPS Sar50 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B2_G6_SAR3 : 8;
    ///< OPS Sar51 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b2_sar_48to51_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_48TO51_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_48TO51_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_48TO51_WR_MASK (0xffffffffU)


///< OPS Sar48 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_48TO51_OPS_TAPS_FRA_B2_G6_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_48TO51_OPS_TAPS_FRA_B2_G6_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_48TO51_OPS_TAPS_FRA_B2_G6_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_48TO51_OPS_TAPS_FRA_B2_G6_SAR0_BF_DEF (0x00000000)

///< OPS Sar49 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_48TO51_OPS_TAPS_FRA_B2_G6_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_48TO51_OPS_TAPS_FRA_B2_G6_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_48TO51_OPS_TAPS_FRA_B2_G6_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_48TO51_OPS_TAPS_FRA_B2_G6_SAR1_BF_DEF (0x00000000)

///< OPS Sar50 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_48TO51_OPS_TAPS_FRA_B2_G6_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_48TO51_OPS_TAPS_FRA_B2_G6_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_48TO51_OPS_TAPS_FRA_B2_G6_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_48TO51_OPS_TAPS_FRA_B2_G6_SAR2_BF_DEF (0x00000000)

///< OPS Sar51 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_48TO51_OPS_TAPS_FRA_B2_G6_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_48TO51_OPS_TAPS_FRA_B2_G6_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_48TO51_OPS_TAPS_FRA_B2_G6_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_48TO51_OPS_TAPS_FRA_B2_G6_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B2_SAR_52TO55 register description at address offset 0xd5c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b2_sar_52to55
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B2_G6_SAR4 : 8;
    ///< OPS Sar52 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B2_G6_SAR5 : 8;
    ///< OPS Sar53 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B2_G6_SAR6 : 8;
    ///< OPS Sar54 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B2_G6_SAR7 : 8;
    ///< OPS Sar55 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b2_sar_52to55_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_52TO55_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_52TO55_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_52TO55_WR_MASK (0xffffffffU)


///< OPS Sar52 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_52TO55_OPS_TAPS_FRA_B2_G6_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_52TO55_OPS_TAPS_FRA_B2_G6_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_52TO55_OPS_TAPS_FRA_B2_G6_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_52TO55_OPS_TAPS_FRA_B2_G6_SAR4_BF_DEF (0x00000000)

///< OPS Sar53 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_52TO55_OPS_TAPS_FRA_B2_G6_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_52TO55_OPS_TAPS_FRA_B2_G6_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_52TO55_OPS_TAPS_FRA_B2_G6_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_52TO55_OPS_TAPS_FRA_B2_G6_SAR5_BF_DEF (0x00000000)

///< OPS Sar54 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_52TO55_OPS_TAPS_FRA_B2_G6_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_52TO55_OPS_TAPS_FRA_B2_G6_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_52TO55_OPS_TAPS_FRA_B2_G6_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_52TO55_OPS_TAPS_FRA_B2_G6_SAR6_BF_DEF (0x00000000)

///< OPS Sar55 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_52TO55_OPS_TAPS_FRA_B2_G6_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_52TO55_OPS_TAPS_FRA_B2_G6_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_52TO55_OPS_TAPS_FRA_B2_G6_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_52TO55_OPS_TAPS_FRA_B2_G6_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B2_SAR_56TO59 register description at address offset 0xd60
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b2_sar_56to59
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B2_G7_SAR0 : 8;
    ///< OPS Sar56 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B2_G7_SAR1 : 8;
    ///< OPS Sar57 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B2_G7_SAR2 : 8;
    ///< OPS Sar58 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B2_G7_SAR3 : 8;
    ///< OPS Sar59 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b2_sar_56to59_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_56TO59_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_56TO59_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_56TO59_WR_MASK (0xffffffffU)


///< OPS Sar56 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_56TO59_OPS_TAPS_FRA_B2_G7_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_56TO59_OPS_TAPS_FRA_B2_G7_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_56TO59_OPS_TAPS_FRA_B2_G7_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_56TO59_OPS_TAPS_FRA_B2_G7_SAR0_BF_DEF (0x00000000)

///< OPS Sar57 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_56TO59_OPS_TAPS_FRA_B2_G7_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_56TO59_OPS_TAPS_FRA_B2_G7_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_56TO59_OPS_TAPS_FRA_B2_G7_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_56TO59_OPS_TAPS_FRA_B2_G7_SAR1_BF_DEF (0x00000000)

///< OPS Sar58 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_56TO59_OPS_TAPS_FRA_B2_G7_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_56TO59_OPS_TAPS_FRA_B2_G7_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_56TO59_OPS_TAPS_FRA_B2_G7_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_56TO59_OPS_TAPS_FRA_B2_G7_SAR2_BF_DEF (0x00000000)

///< OPS Sar59 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_56TO59_OPS_TAPS_FRA_B2_G7_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_56TO59_OPS_TAPS_FRA_B2_G7_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_56TO59_OPS_TAPS_FRA_B2_G7_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_56TO59_OPS_TAPS_FRA_B2_G7_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B2_SAR_60TO63 register description at address offset 0xd64
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b2_sar_60to63
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B2_G7_SAR4 : 8;
    ///< OPS Sar60 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B2_G7_SAR5 : 8;
    ///< OPS Sar61 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B2_G7_SAR6 : 8;
    ///< OPS Sar62 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B2_G7_SAR7 : 8;
    ///< OPS Sar63 tap frac value on bit 2
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b2_sar_60to63_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_60TO63_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_60TO63_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_60TO63_WR_MASK (0xffffffffU)


///< OPS Sar60 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_60TO63_OPS_TAPS_FRA_B2_G7_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_60TO63_OPS_TAPS_FRA_B2_G7_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_60TO63_OPS_TAPS_FRA_B2_G7_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_60TO63_OPS_TAPS_FRA_B2_G7_SAR4_BF_DEF (0x00000000)

///< OPS Sar61 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_60TO63_OPS_TAPS_FRA_B2_G7_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_60TO63_OPS_TAPS_FRA_B2_G7_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_60TO63_OPS_TAPS_FRA_B2_G7_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_60TO63_OPS_TAPS_FRA_B2_G7_SAR5_BF_DEF (0x00000000)

///< OPS Sar62 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_60TO63_OPS_TAPS_FRA_B2_G7_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_60TO63_OPS_TAPS_FRA_B2_G7_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_60TO63_OPS_TAPS_FRA_B2_G7_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_60TO63_OPS_TAPS_FRA_B2_G7_SAR6_BF_DEF (0x00000000)

///< OPS Sar63 tap frac value on bit 2
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_60TO63_OPS_TAPS_FRA_B2_G7_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_60TO63_OPS_TAPS_FRA_B2_G7_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_60TO63_OPS_TAPS_FRA_B2_G7_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_60TO63_OPS_TAPS_FRA_B2_G7_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B3_SAR_0TO3 register description at address offset 0xd68
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b3_sar_0to3
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B3_G0_SAR0 : 8;
    ///< OPS Sar0 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B3_G0_SAR1 : 8;
    ///< OPS Sar1 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B3_G0_SAR2 : 8;
    ///< OPS Sar2 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B3_G0_SAR3 : 8;
    ///< OPS Sar3 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b3_sar_0to3_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_0TO3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_0TO3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_0TO3_WR_MASK (0xffffffffU)


///< OPS Sar0 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_0TO3_OPS_TAPS_FRA_B3_G0_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_0TO3_OPS_TAPS_FRA_B3_G0_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_0TO3_OPS_TAPS_FRA_B3_G0_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_0TO3_OPS_TAPS_FRA_B3_G0_SAR0_BF_DEF (0x00000000)

///< OPS Sar1 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_0TO3_OPS_TAPS_FRA_B3_G0_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_0TO3_OPS_TAPS_FRA_B3_G0_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_0TO3_OPS_TAPS_FRA_B3_G0_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_0TO3_OPS_TAPS_FRA_B3_G0_SAR1_BF_DEF (0x00000000)

///< OPS Sar2 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_0TO3_OPS_TAPS_FRA_B3_G0_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_0TO3_OPS_TAPS_FRA_B3_G0_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_0TO3_OPS_TAPS_FRA_B3_G0_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_0TO3_OPS_TAPS_FRA_B3_G0_SAR2_BF_DEF (0x00000000)

///< OPS Sar3 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_0TO3_OPS_TAPS_FRA_B3_G0_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_0TO3_OPS_TAPS_FRA_B3_G0_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_0TO3_OPS_TAPS_FRA_B3_G0_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_0TO3_OPS_TAPS_FRA_B3_G0_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B3_SAR_4TO7 register description at address offset 0xd6c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b3_sar_4to7
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B3_G0_SAR4 : 8;
    ///< OPS Sar4 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B3_G0_SAR5 : 8;
    ///< OPS Sar5 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B3_G0_SAR6 : 8;
    ///< OPS Sar6 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B3_G0_SAR7 : 8;
    ///< OPS Sar7 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b3_sar_4to7_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_4TO7_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_4TO7_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_4TO7_WR_MASK (0xffffffffU)


///< OPS Sar4 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_4TO7_OPS_TAPS_FRA_B3_G0_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_4TO7_OPS_TAPS_FRA_B3_G0_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_4TO7_OPS_TAPS_FRA_B3_G0_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_4TO7_OPS_TAPS_FRA_B3_G0_SAR4_BF_DEF (0x00000000)

///< OPS Sar5 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_4TO7_OPS_TAPS_FRA_B3_G0_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_4TO7_OPS_TAPS_FRA_B3_G0_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_4TO7_OPS_TAPS_FRA_B3_G0_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_4TO7_OPS_TAPS_FRA_B3_G0_SAR5_BF_DEF (0x00000000)

///< OPS Sar6 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_4TO7_OPS_TAPS_FRA_B3_G0_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_4TO7_OPS_TAPS_FRA_B3_G0_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_4TO7_OPS_TAPS_FRA_B3_G0_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_4TO7_OPS_TAPS_FRA_B3_G0_SAR6_BF_DEF (0x00000000)

///< OPS Sar7 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_4TO7_OPS_TAPS_FRA_B3_G0_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_4TO7_OPS_TAPS_FRA_B3_G0_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_4TO7_OPS_TAPS_FRA_B3_G0_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_4TO7_OPS_TAPS_FRA_B3_G0_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B3_SAR_8TO11 register description at address offset 0xd70
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b3_sar_8to11
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B3_G1_SAR0 : 8;
    ///< OPS Sar8  tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B3_G1_SAR1 : 8;
    ///< OPS Sar9  tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B3_G1_SAR2 : 8;
    ///< OPS Sar10 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B3_G1_SAR3 : 8;
    ///< OPS Sar11 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b3_sar_8to11_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_8TO11_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_8TO11_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_8TO11_WR_MASK (0xffffffffU)


///< OPS Sar8  tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_8TO11_OPS_TAPS_FRA_B3_G1_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_8TO11_OPS_TAPS_FRA_B3_G1_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_8TO11_OPS_TAPS_FRA_B3_G1_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_8TO11_OPS_TAPS_FRA_B3_G1_SAR0_BF_DEF (0x00000000)

///< OPS Sar9  tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_8TO11_OPS_TAPS_FRA_B3_G1_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_8TO11_OPS_TAPS_FRA_B3_G1_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_8TO11_OPS_TAPS_FRA_B3_G1_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_8TO11_OPS_TAPS_FRA_B3_G1_SAR1_BF_DEF (0x00000000)

///< OPS Sar10 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_8TO11_OPS_TAPS_FRA_B3_G1_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_8TO11_OPS_TAPS_FRA_B3_G1_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_8TO11_OPS_TAPS_FRA_B3_G1_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_8TO11_OPS_TAPS_FRA_B3_G1_SAR2_BF_DEF (0x00000000)

///< OPS Sar11 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_8TO11_OPS_TAPS_FRA_B3_G1_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_8TO11_OPS_TAPS_FRA_B3_G1_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_8TO11_OPS_TAPS_FRA_B3_G1_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_8TO11_OPS_TAPS_FRA_B3_G1_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B3_SAR_12TO15 register description at address offset 0xd74
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b3_sar_12to15
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B3_G1_SAR4 : 8;
    ///< OPS Sar12 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B3_G1_SAR5 : 8;
    ///< OPS Sar13 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B3_G1_SAR6 : 8;
    ///< OPS Sar14 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B3_G1_SAR7 : 8;
    ///< OPS Sar15 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b3_sar_12to15_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_12TO15_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_12TO15_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_12TO15_WR_MASK (0xffffffffU)


///< OPS Sar12 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_12TO15_OPS_TAPS_FRA_B3_G1_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_12TO15_OPS_TAPS_FRA_B3_G1_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_12TO15_OPS_TAPS_FRA_B3_G1_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_12TO15_OPS_TAPS_FRA_B3_G1_SAR4_BF_DEF (0x00000000)

///< OPS Sar13 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_12TO15_OPS_TAPS_FRA_B3_G1_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_12TO15_OPS_TAPS_FRA_B3_G1_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_12TO15_OPS_TAPS_FRA_B3_G1_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_12TO15_OPS_TAPS_FRA_B3_G1_SAR5_BF_DEF (0x00000000)

///< OPS Sar14 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_12TO15_OPS_TAPS_FRA_B3_G1_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_12TO15_OPS_TAPS_FRA_B3_G1_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_12TO15_OPS_TAPS_FRA_B3_G1_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_12TO15_OPS_TAPS_FRA_B3_G1_SAR6_BF_DEF (0x00000000)

///< OPS Sar15 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_12TO15_OPS_TAPS_FRA_B3_G1_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_12TO15_OPS_TAPS_FRA_B3_G1_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_12TO15_OPS_TAPS_FRA_B3_G1_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_12TO15_OPS_TAPS_FRA_B3_G1_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B3_SAR_16TO19 register description at address offset 0xd78
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b3_sar_16to19
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B3_G2_SAR0 : 8;
    ///< OPS Sar16 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B3_G2_SAR1 : 8;
    ///< OPS Sar17 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B3_G2_SAR2 : 8;
    ///< OPS Sar18 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B3_G2_SAR3 : 8;
    ///< OPS Sar19 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b3_sar_16to19_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_16TO19_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_16TO19_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_16TO19_WR_MASK (0xffffffffU)


///< OPS Sar16 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_16TO19_OPS_TAPS_FRA_B3_G2_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_16TO19_OPS_TAPS_FRA_B3_G2_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_16TO19_OPS_TAPS_FRA_B3_G2_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_16TO19_OPS_TAPS_FRA_B3_G2_SAR0_BF_DEF (0x00000000)

///< OPS Sar17 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_16TO19_OPS_TAPS_FRA_B3_G2_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_16TO19_OPS_TAPS_FRA_B3_G2_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_16TO19_OPS_TAPS_FRA_B3_G2_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_16TO19_OPS_TAPS_FRA_B3_G2_SAR1_BF_DEF (0x00000000)

///< OPS Sar18 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_16TO19_OPS_TAPS_FRA_B3_G2_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_16TO19_OPS_TAPS_FRA_B3_G2_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_16TO19_OPS_TAPS_FRA_B3_G2_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_16TO19_OPS_TAPS_FRA_B3_G2_SAR2_BF_DEF (0x00000000)

///< OPS Sar19 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_16TO19_OPS_TAPS_FRA_B3_G2_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_16TO19_OPS_TAPS_FRA_B3_G2_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_16TO19_OPS_TAPS_FRA_B3_G2_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_16TO19_OPS_TAPS_FRA_B3_G2_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B3_SAR_20TO23 register description at address offset 0xd7c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b3_sar_20to23
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B3_G2_SAR4 : 8;
    ///< OPS Sar20 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B3_G2_SAR5 : 8;
    ///< OPS Sar21 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B3_G2_SAR6 : 8;
    ///< OPS Sar22 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B3_G2_SAR7 : 8;
    ///< OPS Sar23 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b3_sar_20to23_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_20TO23_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_20TO23_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_20TO23_WR_MASK (0xffffffffU)


///< OPS Sar20 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_20TO23_OPS_TAPS_FRA_B3_G2_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_20TO23_OPS_TAPS_FRA_B3_G2_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_20TO23_OPS_TAPS_FRA_B3_G2_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_20TO23_OPS_TAPS_FRA_B3_G2_SAR4_BF_DEF (0x00000000)

///< OPS Sar21 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_20TO23_OPS_TAPS_FRA_B3_G2_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_20TO23_OPS_TAPS_FRA_B3_G2_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_20TO23_OPS_TAPS_FRA_B3_G2_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_20TO23_OPS_TAPS_FRA_B3_G2_SAR5_BF_DEF (0x00000000)

///< OPS Sar22 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_20TO23_OPS_TAPS_FRA_B3_G2_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_20TO23_OPS_TAPS_FRA_B3_G2_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_20TO23_OPS_TAPS_FRA_B3_G2_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_20TO23_OPS_TAPS_FRA_B3_G2_SAR6_BF_DEF (0x00000000)

///< OPS Sar23 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_20TO23_OPS_TAPS_FRA_B3_G2_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_20TO23_OPS_TAPS_FRA_B3_G2_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_20TO23_OPS_TAPS_FRA_B3_G2_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_20TO23_OPS_TAPS_FRA_B3_G2_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B3_SAR_24TO27 register description at address offset 0xd80
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b3_sar_24to27
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B3_G3_SAR0 : 8;
    ///< OPS Sar24 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B3_G3_SAR1 : 8;
    ///< OPS Sar25 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B3_G3_SAR2 : 8;
    ///< OPS Sar26 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B3_G3_SAR3 : 8;
    ///< OPS Sar27 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b3_sar_24to27_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_24TO27_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_24TO27_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_24TO27_WR_MASK (0xffffffffU)


///< OPS Sar24 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_24TO27_OPS_TAPS_FRA_B3_G3_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_24TO27_OPS_TAPS_FRA_B3_G3_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_24TO27_OPS_TAPS_FRA_B3_G3_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_24TO27_OPS_TAPS_FRA_B3_G3_SAR0_BF_DEF (0x00000000)

///< OPS Sar25 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_24TO27_OPS_TAPS_FRA_B3_G3_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_24TO27_OPS_TAPS_FRA_B3_G3_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_24TO27_OPS_TAPS_FRA_B3_G3_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_24TO27_OPS_TAPS_FRA_B3_G3_SAR1_BF_DEF (0x00000000)

///< OPS Sar26 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_24TO27_OPS_TAPS_FRA_B3_G3_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_24TO27_OPS_TAPS_FRA_B3_G3_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_24TO27_OPS_TAPS_FRA_B3_G3_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_24TO27_OPS_TAPS_FRA_B3_G3_SAR2_BF_DEF (0x00000000)

///< OPS Sar27 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_24TO27_OPS_TAPS_FRA_B3_G3_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_24TO27_OPS_TAPS_FRA_B3_G3_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_24TO27_OPS_TAPS_FRA_B3_G3_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_24TO27_OPS_TAPS_FRA_B3_G3_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B3_SAR_28TO31 register description at address offset 0xd84
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b3_sar_28to31
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B3_G3_SAR4 : 8;
    ///< OPS Sar28 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B3_G3_SAR5 : 8;
    ///< OPS Sar29 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B3_G3_SAR6 : 8;
    ///< OPS Sar30 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B3_G3_SAR7 : 8;
    ///< OPS Sar31 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b3_sar_28to31_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_28TO31_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_28TO31_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_28TO31_WR_MASK (0xffffffffU)


///< OPS Sar28 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_28TO31_OPS_TAPS_FRA_B3_G3_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_28TO31_OPS_TAPS_FRA_B3_G3_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_28TO31_OPS_TAPS_FRA_B3_G3_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_28TO31_OPS_TAPS_FRA_B3_G3_SAR4_BF_DEF (0x00000000)

///< OPS Sar29 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_28TO31_OPS_TAPS_FRA_B3_G3_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_28TO31_OPS_TAPS_FRA_B3_G3_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_28TO31_OPS_TAPS_FRA_B3_G3_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_28TO31_OPS_TAPS_FRA_B3_G3_SAR5_BF_DEF (0x00000000)

///< OPS Sar30 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_28TO31_OPS_TAPS_FRA_B3_G3_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_28TO31_OPS_TAPS_FRA_B3_G3_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_28TO31_OPS_TAPS_FRA_B3_G3_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_28TO31_OPS_TAPS_FRA_B3_G3_SAR6_BF_DEF (0x00000000)

///< OPS Sar31 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_28TO31_OPS_TAPS_FRA_B3_G3_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_28TO31_OPS_TAPS_FRA_B3_G3_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_28TO31_OPS_TAPS_FRA_B3_G3_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_28TO31_OPS_TAPS_FRA_B3_G3_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B3_SAR_32TO35 register description at address offset 0xd88
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b3_sar_32to35
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B3_G4_SAR0 : 8;
    ///< OPS Sar32 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B3_G4_SAR1 : 8;
    ///< OPS Sar33 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B3_G4_SAR2 : 8;
    ///< OPS Sar34 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B3_G4_SAR3 : 8;
    ///< OPS Sar35 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b3_sar_32to35_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_32TO35_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_32TO35_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_32TO35_WR_MASK (0xffffffffU)


///< OPS Sar32 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_32TO35_OPS_TAPS_FRA_B3_G4_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_32TO35_OPS_TAPS_FRA_B3_G4_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_32TO35_OPS_TAPS_FRA_B3_G4_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_32TO35_OPS_TAPS_FRA_B3_G4_SAR0_BF_DEF (0x00000000)

///< OPS Sar33 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_32TO35_OPS_TAPS_FRA_B3_G4_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_32TO35_OPS_TAPS_FRA_B3_G4_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_32TO35_OPS_TAPS_FRA_B3_G4_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_32TO35_OPS_TAPS_FRA_B3_G4_SAR1_BF_DEF (0x00000000)

///< OPS Sar34 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_32TO35_OPS_TAPS_FRA_B3_G4_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_32TO35_OPS_TAPS_FRA_B3_G4_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_32TO35_OPS_TAPS_FRA_B3_G4_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_32TO35_OPS_TAPS_FRA_B3_G4_SAR2_BF_DEF (0x00000000)

///< OPS Sar35 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_32TO35_OPS_TAPS_FRA_B3_G4_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_32TO35_OPS_TAPS_FRA_B3_G4_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_32TO35_OPS_TAPS_FRA_B3_G4_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_32TO35_OPS_TAPS_FRA_B3_G4_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B3_SAR_36TO39 register description at address offset 0xd8c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b3_sar_36to39
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B3_G4_SAR4 : 8;
    ///< OPS Sar36 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B3_G4_SAR5 : 8;
    ///< OPS Sar37 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B3_G4_SAR6 : 8;
    ///< OPS Sar38 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B3_G4_SAR7 : 8;
    ///< OPS Sar39 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b3_sar_36to39_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_36TO39_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_36TO39_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_36TO39_WR_MASK (0xffffffffU)


///< OPS Sar36 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_36TO39_OPS_TAPS_FRA_B3_G4_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_36TO39_OPS_TAPS_FRA_B3_G4_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_36TO39_OPS_TAPS_FRA_B3_G4_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_36TO39_OPS_TAPS_FRA_B3_G4_SAR4_BF_DEF (0x00000000)

///< OPS Sar37 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_36TO39_OPS_TAPS_FRA_B3_G4_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_36TO39_OPS_TAPS_FRA_B3_G4_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_36TO39_OPS_TAPS_FRA_B3_G4_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_36TO39_OPS_TAPS_FRA_B3_G4_SAR5_BF_DEF (0x00000000)

///< OPS Sar38 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_36TO39_OPS_TAPS_FRA_B3_G4_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_36TO39_OPS_TAPS_FRA_B3_G4_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_36TO39_OPS_TAPS_FRA_B3_G4_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_36TO39_OPS_TAPS_FRA_B3_G4_SAR6_BF_DEF (0x00000000)

///< OPS Sar39 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_36TO39_OPS_TAPS_FRA_B3_G4_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_36TO39_OPS_TAPS_FRA_B3_G4_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_36TO39_OPS_TAPS_FRA_B3_G4_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_36TO39_OPS_TAPS_FRA_B3_G4_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B3_SAR_40TO43 register description at address offset 0xd90
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b3_sar_40to43
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B3_G5_SAR0 : 8;
    ///< OPS Sar40 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B3_G5_SAR1 : 8;
    ///< OPS Sar41 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B3_G5_SAR2 : 8;
    ///< OPS Sar42 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B3_G5_SAR3 : 8;
    ///< OPS Sar43 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b3_sar_40to43_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_40TO43_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_40TO43_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_40TO43_WR_MASK (0xffffffffU)


///< OPS Sar40 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_40TO43_OPS_TAPS_FRA_B3_G5_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_40TO43_OPS_TAPS_FRA_B3_G5_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_40TO43_OPS_TAPS_FRA_B3_G5_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_40TO43_OPS_TAPS_FRA_B3_G5_SAR0_BF_DEF (0x00000000)

///< OPS Sar41 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_40TO43_OPS_TAPS_FRA_B3_G5_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_40TO43_OPS_TAPS_FRA_B3_G5_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_40TO43_OPS_TAPS_FRA_B3_G5_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_40TO43_OPS_TAPS_FRA_B3_G5_SAR1_BF_DEF (0x00000000)

///< OPS Sar42 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_40TO43_OPS_TAPS_FRA_B3_G5_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_40TO43_OPS_TAPS_FRA_B3_G5_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_40TO43_OPS_TAPS_FRA_B3_G5_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_40TO43_OPS_TAPS_FRA_B3_G5_SAR2_BF_DEF (0x00000000)

///< OPS Sar43 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_40TO43_OPS_TAPS_FRA_B3_G5_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_40TO43_OPS_TAPS_FRA_B3_G5_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_40TO43_OPS_TAPS_FRA_B3_G5_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_40TO43_OPS_TAPS_FRA_B3_G5_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B3_SAR_44TO47 register description at address offset 0xd94
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b3_sar_44to47
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B3_G5_SAR4 : 8;
    ///< OPS Sar44 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B3_G5_SAR5 : 8;
    ///< OPS Sar45 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B3_G5_SAR6 : 8;
    ///< OPS Sar46 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B3_G5_SAR7 : 8;
    ///< OPS Sar47 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b3_sar_44to47_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_44TO47_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_44TO47_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_44TO47_WR_MASK (0xffffffffU)


///< OPS Sar44 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_44TO47_OPS_TAPS_FRA_B3_G5_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_44TO47_OPS_TAPS_FRA_B3_G5_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_44TO47_OPS_TAPS_FRA_B3_G5_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_44TO47_OPS_TAPS_FRA_B3_G5_SAR4_BF_DEF (0x00000000)

///< OPS Sar45 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_44TO47_OPS_TAPS_FRA_B3_G5_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_44TO47_OPS_TAPS_FRA_B3_G5_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_44TO47_OPS_TAPS_FRA_B3_G5_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_44TO47_OPS_TAPS_FRA_B3_G5_SAR5_BF_DEF (0x00000000)

///< OPS Sar46 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_44TO47_OPS_TAPS_FRA_B3_G5_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_44TO47_OPS_TAPS_FRA_B3_G5_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_44TO47_OPS_TAPS_FRA_B3_G5_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_44TO47_OPS_TAPS_FRA_B3_G5_SAR6_BF_DEF (0x00000000)

///< OPS Sar47 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_44TO47_OPS_TAPS_FRA_B3_G5_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_44TO47_OPS_TAPS_FRA_B3_G5_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_44TO47_OPS_TAPS_FRA_B3_G5_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_44TO47_OPS_TAPS_FRA_B3_G5_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B3_SAR_48TO51 register description at address offset 0xd98
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b3_sar_48to51
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B3_G6_SAR0 : 8;
    ///< OPS Sar48 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B3_G6_SAR1 : 8;
    ///< OPS Sar49 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B3_G6_SAR2 : 8;
    ///< OPS Sar50 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B3_G6_SAR3 : 8;
    ///< OPS Sar51 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b3_sar_48to51_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_48TO51_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_48TO51_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_48TO51_WR_MASK (0xffffffffU)


///< OPS Sar48 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_48TO51_OPS_TAPS_FRA_B3_G6_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_48TO51_OPS_TAPS_FRA_B3_G6_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_48TO51_OPS_TAPS_FRA_B3_G6_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_48TO51_OPS_TAPS_FRA_B3_G6_SAR0_BF_DEF (0x00000000)

///< OPS Sar49 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_48TO51_OPS_TAPS_FRA_B3_G6_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_48TO51_OPS_TAPS_FRA_B3_G6_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_48TO51_OPS_TAPS_FRA_B3_G6_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_48TO51_OPS_TAPS_FRA_B3_G6_SAR1_BF_DEF (0x00000000)

///< OPS Sar50 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_48TO51_OPS_TAPS_FRA_B3_G6_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_48TO51_OPS_TAPS_FRA_B3_G6_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_48TO51_OPS_TAPS_FRA_B3_G6_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_48TO51_OPS_TAPS_FRA_B3_G6_SAR2_BF_DEF (0x00000000)

///< OPS Sar51 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_48TO51_OPS_TAPS_FRA_B3_G6_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_48TO51_OPS_TAPS_FRA_B3_G6_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_48TO51_OPS_TAPS_FRA_B3_G6_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_48TO51_OPS_TAPS_FRA_B3_G6_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B3_SAR_52TO55 register description at address offset 0xd9c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b3_sar_52to55
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B3_G6_SAR4 : 8;
    ///< OPS Sar52 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B3_G6_SAR5 : 8;
    ///< OPS Sar53 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B3_G6_SAR6 : 8;
    ///< OPS Sar54 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B3_G6_SAR7 : 8;
    ///< OPS Sar55 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b3_sar_52to55_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_52TO55_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_52TO55_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_52TO55_WR_MASK (0xffffffffU)


///< OPS Sar52 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_52TO55_OPS_TAPS_FRA_B3_G6_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_52TO55_OPS_TAPS_FRA_B3_G6_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_52TO55_OPS_TAPS_FRA_B3_G6_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_52TO55_OPS_TAPS_FRA_B3_G6_SAR4_BF_DEF (0x00000000)

///< OPS Sar53 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_52TO55_OPS_TAPS_FRA_B3_G6_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_52TO55_OPS_TAPS_FRA_B3_G6_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_52TO55_OPS_TAPS_FRA_B3_G6_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_52TO55_OPS_TAPS_FRA_B3_G6_SAR5_BF_DEF (0x00000000)

///< OPS Sar54 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_52TO55_OPS_TAPS_FRA_B3_G6_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_52TO55_OPS_TAPS_FRA_B3_G6_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_52TO55_OPS_TAPS_FRA_B3_G6_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_52TO55_OPS_TAPS_FRA_B3_G6_SAR6_BF_DEF (0x00000000)

///< OPS Sar55 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_52TO55_OPS_TAPS_FRA_B3_G6_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_52TO55_OPS_TAPS_FRA_B3_G6_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_52TO55_OPS_TAPS_FRA_B3_G6_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_52TO55_OPS_TAPS_FRA_B3_G6_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B3_SAR_56TO59 register description at address offset 0xda0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b3_sar_56to59
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B3_G7_SAR0 : 8;
    ///< OPS Sar56 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B3_G7_SAR1 : 8;
    ///< OPS Sar57 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B3_G7_SAR2 : 8;
    ///< OPS Sar58 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B3_G7_SAR3 : 8;
    ///< OPS Sar59 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b3_sar_56to59_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_56TO59_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_56TO59_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_56TO59_WR_MASK (0xffffffffU)


///< OPS Sar56 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_56TO59_OPS_TAPS_FRA_B3_G7_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_56TO59_OPS_TAPS_FRA_B3_G7_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_56TO59_OPS_TAPS_FRA_B3_G7_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_56TO59_OPS_TAPS_FRA_B3_G7_SAR0_BF_DEF (0x00000000)

///< OPS Sar57 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_56TO59_OPS_TAPS_FRA_B3_G7_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_56TO59_OPS_TAPS_FRA_B3_G7_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_56TO59_OPS_TAPS_FRA_B3_G7_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_56TO59_OPS_TAPS_FRA_B3_G7_SAR1_BF_DEF (0x00000000)

///< OPS Sar58 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_56TO59_OPS_TAPS_FRA_B3_G7_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_56TO59_OPS_TAPS_FRA_B3_G7_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_56TO59_OPS_TAPS_FRA_B3_G7_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_56TO59_OPS_TAPS_FRA_B3_G7_SAR2_BF_DEF (0x00000000)

///< OPS Sar59 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_56TO59_OPS_TAPS_FRA_B3_G7_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_56TO59_OPS_TAPS_FRA_B3_G7_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_56TO59_OPS_TAPS_FRA_B3_G7_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_56TO59_OPS_TAPS_FRA_B3_G7_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B3_SAR_60TO63 register description at address offset 0xda4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b3_sar_60to63
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B3_G7_SAR4 : 8;
    ///< OPS Sar60 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B3_G7_SAR5 : 8;
    ///< OPS Sar61 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B3_G7_SAR6 : 8;
    ///< OPS Sar62 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B3_G7_SAR7 : 8;
    ///< OPS Sar63 tap frac value on bit 3
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b3_sar_60to63_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_60TO63_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_60TO63_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_60TO63_WR_MASK (0xffffffffU)


///< OPS Sar60 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_60TO63_OPS_TAPS_FRA_B3_G7_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_60TO63_OPS_TAPS_FRA_B3_G7_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_60TO63_OPS_TAPS_FRA_B3_G7_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_60TO63_OPS_TAPS_FRA_B3_G7_SAR4_BF_DEF (0x00000000)

///< OPS Sar61 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_60TO63_OPS_TAPS_FRA_B3_G7_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_60TO63_OPS_TAPS_FRA_B3_G7_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_60TO63_OPS_TAPS_FRA_B3_G7_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_60TO63_OPS_TAPS_FRA_B3_G7_SAR5_BF_DEF (0x00000000)

///< OPS Sar62 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_60TO63_OPS_TAPS_FRA_B3_G7_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_60TO63_OPS_TAPS_FRA_B3_G7_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_60TO63_OPS_TAPS_FRA_B3_G7_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_60TO63_OPS_TAPS_FRA_B3_G7_SAR6_BF_DEF (0x00000000)

///< OPS Sar63 tap frac value on bit 3
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_60TO63_OPS_TAPS_FRA_B3_G7_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_60TO63_OPS_TAPS_FRA_B3_G7_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_60TO63_OPS_TAPS_FRA_B3_G7_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_60TO63_OPS_TAPS_FRA_B3_G7_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B4_SAR_0TO3 register description at address offset 0xda8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b4_sar_0to3
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B4_G0_SAR0 : 8;
    ///< OPS Sar0 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B4_G0_SAR1 : 8;
    ///< OPS Sar1 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B4_G0_SAR2 : 8;
    ///< OPS Sar2 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B4_G0_SAR3 : 8;
    ///< OPS Sar3 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b4_sar_0to3_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_0TO3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_0TO3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_0TO3_WR_MASK (0xffffffffU)


///< OPS Sar0 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_0TO3_OPS_TAPS_FRA_B4_G0_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_0TO3_OPS_TAPS_FRA_B4_G0_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_0TO3_OPS_TAPS_FRA_B4_G0_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_0TO3_OPS_TAPS_FRA_B4_G0_SAR0_BF_DEF (0x00000000)

///< OPS Sar1 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_0TO3_OPS_TAPS_FRA_B4_G0_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_0TO3_OPS_TAPS_FRA_B4_G0_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_0TO3_OPS_TAPS_FRA_B4_G0_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_0TO3_OPS_TAPS_FRA_B4_G0_SAR1_BF_DEF (0x00000000)

///< OPS Sar2 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_0TO3_OPS_TAPS_FRA_B4_G0_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_0TO3_OPS_TAPS_FRA_B4_G0_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_0TO3_OPS_TAPS_FRA_B4_G0_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_0TO3_OPS_TAPS_FRA_B4_G0_SAR2_BF_DEF (0x00000000)

///< OPS Sar3 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_0TO3_OPS_TAPS_FRA_B4_G0_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_0TO3_OPS_TAPS_FRA_B4_G0_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_0TO3_OPS_TAPS_FRA_B4_G0_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_0TO3_OPS_TAPS_FRA_B4_G0_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B4_SAR_4TO7 register description at address offset 0xdac
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b4_sar_4to7
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B4_G0_SAR4 : 8;
    ///< OPS Sar4 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B4_G0_SAR5 : 8;
    ///< OPS Sar5 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B4_G0_SAR6 : 8;
    ///< OPS Sar6 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B4_G0_SAR7 : 8;
    ///< OPS Sar7 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b4_sar_4to7_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_4TO7_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_4TO7_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_4TO7_WR_MASK (0xffffffffU)


///< OPS Sar4 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_4TO7_OPS_TAPS_FRA_B4_G0_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_4TO7_OPS_TAPS_FRA_B4_G0_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_4TO7_OPS_TAPS_FRA_B4_G0_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_4TO7_OPS_TAPS_FRA_B4_G0_SAR4_BF_DEF (0x00000000)

///< OPS Sar5 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_4TO7_OPS_TAPS_FRA_B4_G0_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_4TO7_OPS_TAPS_FRA_B4_G0_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_4TO7_OPS_TAPS_FRA_B4_G0_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_4TO7_OPS_TAPS_FRA_B4_G0_SAR5_BF_DEF (0x00000000)

///< OPS Sar6 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_4TO7_OPS_TAPS_FRA_B4_G0_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_4TO7_OPS_TAPS_FRA_B4_G0_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_4TO7_OPS_TAPS_FRA_B4_G0_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_4TO7_OPS_TAPS_FRA_B4_G0_SAR6_BF_DEF (0x00000000)

///< OPS Sar7 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_4TO7_OPS_TAPS_FRA_B4_G0_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_4TO7_OPS_TAPS_FRA_B4_G0_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_4TO7_OPS_TAPS_FRA_B4_G0_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_4TO7_OPS_TAPS_FRA_B4_G0_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B4_SAR_8TO11 register description at address offset 0xdb0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b4_sar_8to11
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B4_G1_SAR0 : 8;
    ///< OPS Sar8  tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B4_G1_SAR1 : 8;
    ///< OPS Sar9  tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B4_G1_SAR2 : 8;
    ///< OPS Sar10 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B4_G1_SAR3 : 8;
    ///< OPS Sar11 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b4_sar_8to11_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_8TO11_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_8TO11_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_8TO11_WR_MASK (0xffffffffU)


///< OPS Sar8  tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_8TO11_OPS_TAPS_FRA_B4_G1_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_8TO11_OPS_TAPS_FRA_B4_G1_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_8TO11_OPS_TAPS_FRA_B4_G1_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_8TO11_OPS_TAPS_FRA_B4_G1_SAR0_BF_DEF (0x00000000)

///< OPS Sar9  tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_8TO11_OPS_TAPS_FRA_B4_G1_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_8TO11_OPS_TAPS_FRA_B4_G1_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_8TO11_OPS_TAPS_FRA_B4_G1_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_8TO11_OPS_TAPS_FRA_B4_G1_SAR1_BF_DEF (0x00000000)

///< OPS Sar10 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_8TO11_OPS_TAPS_FRA_B4_G1_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_8TO11_OPS_TAPS_FRA_B4_G1_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_8TO11_OPS_TAPS_FRA_B4_G1_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_8TO11_OPS_TAPS_FRA_B4_G1_SAR2_BF_DEF (0x00000000)

///< OPS Sar11 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_8TO11_OPS_TAPS_FRA_B4_G1_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_8TO11_OPS_TAPS_FRA_B4_G1_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_8TO11_OPS_TAPS_FRA_B4_G1_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_8TO11_OPS_TAPS_FRA_B4_G1_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B4_SAR_12TO15 register description at address offset 0xdb4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b4_sar_12to15
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B4_G1_SAR4 : 8;
    ///< OPS Sar12 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B4_G1_SAR5 : 8;
    ///< OPS Sar13 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B4_G1_SAR6 : 8;
    ///< OPS Sar14 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B4_G1_SAR7 : 8;
    ///< OPS Sar15 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b4_sar_12to15_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_12TO15_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_12TO15_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_12TO15_WR_MASK (0xffffffffU)


///< OPS Sar12 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_12TO15_OPS_TAPS_FRA_B4_G1_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_12TO15_OPS_TAPS_FRA_B4_G1_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_12TO15_OPS_TAPS_FRA_B4_G1_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_12TO15_OPS_TAPS_FRA_B4_G1_SAR4_BF_DEF (0x00000000)

///< OPS Sar13 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_12TO15_OPS_TAPS_FRA_B4_G1_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_12TO15_OPS_TAPS_FRA_B4_G1_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_12TO15_OPS_TAPS_FRA_B4_G1_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_12TO15_OPS_TAPS_FRA_B4_G1_SAR5_BF_DEF (0x00000000)

///< OPS Sar14 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_12TO15_OPS_TAPS_FRA_B4_G1_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_12TO15_OPS_TAPS_FRA_B4_G1_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_12TO15_OPS_TAPS_FRA_B4_G1_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_12TO15_OPS_TAPS_FRA_B4_G1_SAR6_BF_DEF (0x00000000)

///< OPS Sar15 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_12TO15_OPS_TAPS_FRA_B4_G1_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_12TO15_OPS_TAPS_FRA_B4_G1_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_12TO15_OPS_TAPS_FRA_B4_G1_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_12TO15_OPS_TAPS_FRA_B4_G1_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B4_SAR_16TO19 register description at address offset 0xdb8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b4_sar_16to19
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B4_G2_SAR0 : 8;
    ///< OPS Sar16 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B4_G2_SAR1 : 8;
    ///< OPS Sar17 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B4_G2_SAR2 : 8;
    ///< OPS Sar18 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B4_G2_SAR3 : 8;
    ///< OPS Sar19 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b4_sar_16to19_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_16TO19_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_16TO19_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_16TO19_WR_MASK (0xffffffffU)


///< OPS Sar16 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_16TO19_OPS_TAPS_FRA_B4_G2_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_16TO19_OPS_TAPS_FRA_B4_G2_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_16TO19_OPS_TAPS_FRA_B4_G2_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_16TO19_OPS_TAPS_FRA_B4_G2_SAR0_BF_DEF (0x00000000)

///< OPS Sar17 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_16TO19_OPS_TAPS_FRA_B4_G2_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_16TO19_OPS_TAPS_FRA_B4_G2_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_16TO19_OPS_TAPS_FRA_B4_G2_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_16TO19_OPS_TAPS_FRA_B4_G2_SAR1_BF_DEF (0x00000000)

///< OPS Sar18 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_16TO19_OPS_TAPS_FRA_B4_G2_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_16TO19_OPS_TAPS_FRA_B4_G2_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_16TO19_OPS_TAPS_FRA_B4_G2_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_16TO19_OPS_TAPS_FRA_B4_G2_SAR2_BF_DEF (0x00000000)

///< OPS Sar19 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_16TO19_OPS_TAPS_FRA_B4_G2_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_16TO19_OPS_TAPS_FRA_B4_G2_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_16TO19_OPS_TAPS_FRA_B4_G2_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_16TO19_OPS_TAPS_FRA_B4_G2_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B4_SAR_20TO23 register description at address offset 0xdbc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b4_sar_20to23
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B4_G2_SAR4 : 8;
    ///< OPS Sar20 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B4_G2_SAR5 : 8;
    ///< OPS Sar21 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B4_G2_SAR6 : 8;
    ///< OPS Sar22 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B4_G2_SAR7 : 8;
    ///< OPS Sar23 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b4_sar_20to23_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_20TO23_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_20TO23_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_20TO23_WR_MASK (0xffffffffU)


///< OPS Sar20 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_20TO23_OPS_TAPS_FRA_B4_G2_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_20TO23_OPS_TAPS_FRA_B4_G2_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_20TO23_OPS_TAPS_FRA_B4_G2_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_20TO23_OPS_TAPS_FRA_B4_G2_SAR4_BF_DEF (0x00000000)

///< OPS Sar21 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_20TO23_OPS_TAPS_FRA_B4_G2_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_20TO23_OPS_TAPS_FRA_B4_G2_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_20TO23_OPS_TAPS_FRA_B4_G2_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_20TO23_OPS_TAPS_FRA_B4_G2_SAR5_BF_DEF (0x00000000)

///< OPS Sar22 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_20TO23_OPS_TAPS_FRA_B4_G2_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_20TO23_OPS_TAPS_FRA_B4_G2_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_20TO23_OPS_TAPS_FRA_B4_G2_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_20TO23_OPS_TAPS_FRA_B4_G2_SAR6_BF_DEF (0x00000000)

///< OPS Sar23 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_20TO23_OPS_TAPS_FRA_B4_G2_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_20TO23_OPS_TAPS_FRA_B4_G2_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_20TO23_OPS_TAPS_FRA_B4_G2_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_20TO23_OPS_TAPS_FRA_B4_G2_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B4_SAR_24TO27 register description at address offset 0xdc0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b4_sar_24to27
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B4_G3_SAR0 : 8;
    ///< OPS Sar24 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B4_G3_SAR1 : 8;
    ///< OPS Sar25 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B4_G3_SAR2 : 8;
    ///< OPS Sar26 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B4_G3_SAR3 : 8;
    ///< OPS Sar27 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b4_sar_24to27_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_24TO27_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_24TO27_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_24TO27_WR_MASK (0xffffffffU)


///< OPS Sar24 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_24TO27_OPS_TAPS_FRA_B4_G3_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_24TO27_OPS_TAPS_FRA_B4_G3_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_24TO27_OPS_TAPS_FRA_B4_G3_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_24TO27_OPS_TAPS_FRA_B4_G3_SAR0_BF_DEF (0x00000000)

///< OPS Sar25 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_24TO27_OPS_TAPS_FRA_B4_G3_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_24TO27_OPS_TAPS_FRA_B4_G3_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_24TO27_OPS_TAPS_FRA_B4_G3_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_24TO27_OPS_TAPS_FRA_B4_G3_SAR1_BF_DEF (0x00000000)

///< OPS Sar26 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_24TO27_OPS_TAPS_FRA_B4_G3_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_24TO27_OPS_TAPS_FRA_B4_G3_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_24TO27_OPS_TAPS_FRA_B4_G3_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_24TO27_OPS_TAPS_FRA_B4_G3_SAR2_BF_DEF (0x00000000)

///< OPS Sar27 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_24TO27_OPS_TAPS_FRA_B4_G3_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_24TO27_OPS_TAPS_FRA_B4_G3_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_24TO27_OPS_TAPS_FRA_B4_G3_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_24TO27_OPS_TAPS_FRA_B4_G3_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B4_SAR_28TO31 register description at address offset 0xdc4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b4_sar_28to31
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B4_G3_SAR4 : 8;
    ///< OPS Sar28 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B4_G3_SAR5 : 8;
    ///< OPS Sar29 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B4_G3_SAR6 : 8;
    ///< OPS Sar30 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B4_G3_SAR7 : 8;
    ///< OPS Sar31 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b4_sar_28to31_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_28TO31_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_28TO31_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_28TO31_WR_MASK (0xffffffffU)


///< OPS Sar28 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_28TO31_OPS_TAPS_FRA_B4_G3_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_28TO31_OPS_TAPS_FRA_B4_G3_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_28TO31_OPS_TAPS_FRA_B4_G3_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_28TO31_OPS_TAPS_FRA_B4_G3_SAR4_BF_DEF (0x00000000)

///< OPS Sar29 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_28TO31_OPS_TAPS_FRA_B4_G3_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_28TO31_OPS_TAPS_FRA_B4_G3_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_28TO31_OPS_TAPS_FRA_B4_G3_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_28TO31_OPS_TAPS_FRA_B4_G3_SAR5_BF_DEF (0x00000000)

///< OPS Sar30 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_28TO31_OPS_TAPS_FRA_B4_G3_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_28TO31_OPS_TAPS_FRA_B4_G3_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_28TO31_OPS_TAPS_FRA_B4_G3_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_28TO31_OPS_TAPS_FRA_B4_G3_SAR6_BF_DEF (0x00000000)

///< OPS Sar31 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_28TO31_OPS_TAPS_FRA_B4_G3_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_28TO31_OPS_TAPS_FRA_B4_G3_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_28TO31_OPS_TAPS_FRA_B4_G3_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_28TO31_OPS_TAPS_FRA_B4_G3_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B4_SAR_32TO35 register description at address offset 0xdc8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b4_sar_32to35
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B4_G4_SAR0 : 8;
    ///< OPS Sar32 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B4_G4_SAR1 : 8;
    ///< OPS Sar33 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B4_G4_SAR2 : 8;
    ///< OPS Sar34 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B4_G4_SAR3 : 8;
    ///< OPS Sar35 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b4_sar_32to35_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_32TO35_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_32TO35_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_32TO35_WR_MASK (0xffffffffU)


///< OPS Sar32 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_32TO35_OPS_TAPS_FRA_B4_G4_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_32TO35_OPS_TAPS_FRA_B4_G4_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_32TO35_OPS_TAPS_FRA_B4_G4_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_32TO35_OPS_TAPS_FRA_B4_G4_SAR0_BF_DEF (0x00000000)

///< OPS Sar33 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_32TO35_OPS_TAPS_FRA_B4_G4_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_32TO35_OPS_TAPS_FRA_B4_G4_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_32TO35_OPS_TAPS_FRA_B4_G4_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_32TO35_OPS_TAPS_FRA_B4_G4_SAR1_BF_DEF (0x00000000)

///< OPS Sar34 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_32TO35_OPS_TAPS_FRA_B4_G4_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_32TO35_OPS_TAPS_FRA_B4_G4_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_32TO35_OPS_TAPS_FRA_B4_G4_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_32TO35_OPS_TAPS_FRA_B4_G4_SAR2_BF_DEF (0x00000000)

///< OPS Sar35 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_32TO35_OPS_TAPS_FRA_B4_G4_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_32TO35_OPS_TAPS_FRA_B4_G4_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_32TO35_OPS_TAPS_FRA_B4_G4_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_32TO35_OPS_TAPS_FRA_B4_G4_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B4_SAR_36TO39 register description at address offset 0xdcc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b4_sar_36to39
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B4_G4_SAR4 : 8;
    ///< OPS Sar36 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B4_G4_SAR5 : 8;
    ///< OPS Sar37 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B4_G4_SAR6 : 8;
    ///< OPS Sar38 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B4_G4_SAR7 : 8;
    ///< OPS Sar39 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b4_sar_36to39_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_36TO39_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_36TO39_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_36TO39_WR_MASK (0xffffffffU)


///< OPS Sar36 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_36TO39_OPS_TAPS_FRA_B4_G4_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_36TO39_OPS_TAPS_FRA_B4_G4_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_36TO39_OPS_TAPS_FRA_B4_G4_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_36TO39_OPS_TAPS_FRA_B4_G4_SAR4_BF_DEF (0x00000000)

///< OPS Sar37 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_36TO39_OPS_TAPS_FRA_B4_G4_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_36TO39_OPS_TAPS_FRA_B4_G4_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_36TO39_OPS_TAPS_FRA_B4_G4_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_36TO39_OPS_TAPS_FRA_B4_G4_SAR5_BF_DEF (0x00000000)

///< OPS Sar38 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_36TO39_OPS_TAPS_FRA_B4_G4_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_36TO39_OPS_TAPS_FRA_B4_G4_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_36TO39_OPS_TAPS_FRA_B4_G4_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_36TO39_OPS_TAPS_FRA_B4_G4_SAR6_BF_DEF (0x00000000)

///< OPS Sar39 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_36TO39_OPS_TAPS_FRA_B4_G4_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_36TO39_OPS_TAPS_FRA_B4_G4_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_36TO39_OPS_TAPS_FRA_B4_G4_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_36TO39_OPS_TAPS_FRA_B4_G4_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B4_SAR_40TO43 register description at address offset 0xdd0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b4_sar_40to43
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B4_G5_SAR0 : 8;
    ///< OPS Sar40 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B4_G5_SAR1 : 8;
    ///< OPS Sar41 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B4_G5_SAR2 : 8;
    ///< OPS Sar42 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B4_G5_SAR3 : 8;
    ///< OPS Sar43 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b4_sar_40to43_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_40TO43_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_40TO43_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_40TO43_WR_MASK (0xffffffffU)


///< OPS Sar40 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_40TO43_OPS_TAPS_FRA_B4_G5_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_40TO43_OPS_TAPS_FRA_B4_G5_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_40TO43_OPS_TAPS_FRA_B4_G5_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_40TO43_OPS_TAPS_FRA_B4_G5_SAR0_BF_DEF (0x00000000)

///< OPS Sar41 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_40TO43_OPS_TAPS_FRA_B4_G5_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_40TO43_OPS_TAPS_FRA_B4_G5_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_40TO43_OPS_TAPS_FRA_B4_G5_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_40TO43_OPS_TAPS_FRA_B4_G5_SAR1_BF_DEF (0x00000000)

///< OPS Sar42 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_40TO43_OPS_TAPS_FRA_B4_G5_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_40TO43_OPS_TAPS_FRA_B4_G5_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_40TO43_OPS_TAPS_FRA_B4_G5_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_40TO43_OPS_TAPS_FRA_B4_G5_SAR2_BF_DEF (0x00000000)

///< OPS Sar43 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_40TO43_OPS_TAPS_FRA_B4_G5_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_40TO43_OPS_TAPS_FRA_B4_G5_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_40TO43_OPS_TAPS_FRA_B4_G5_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_40TO43_OPS_TAPS_FRA_B4_G5_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B4_SAR_44TO47 register description at address offset 0xdd4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b4_sar_44to47
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B4_G5_SAR4 : 8;
    ///< OPS Sar44 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B4_G5_SAR5 : 8;
    ///< OPS Sar45 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B4_G5_SAR6 : 8;
    ///< OPS Sar46 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B4_G5_SAR7 : 8;
    ///< OPS Sar47 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b4_sar_44to47_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_44TO47_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_44TO47_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_44TO47_WR_MASK (0xffffffffU)


///< OPS Sar44 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_44TO47_OPS_TAPS_FRA_B4_G5_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_44TO47_OPS_TAPS_FRA_B4_G5_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_44TO47_OPS_TAPS_FRA_B4_G5_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_44TO47_OPS_TAPS_FRA_B4_G5_SAR4_BF_DEF (0x00000000)

///< OPS Sar45 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_44TO47_OPS_TAPS_FRA_B4_G5_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_44TO47_OPS_TAPS_FRA_B4_G5_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_44TO47_OPS_TAPS_FRA_B4_G5_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_44TO47_OPS_TAPS_FRA_B4_G5_SAR5_BF_DEF (0x00000000)

///< OPS Sar46 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_44TO47_OPS_TAPS_FRA_B4_G5_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_44TO47_OPS_TAPS_FRA_B4_G5_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_44TO47_OPS_TAPS_FRA_B4_G5_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_44TO47_OPS_TAPS_FRA_B4_G5_SAR6_BF_DEF (0x00000000)

///< OPS Sar47 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_44TO47_OPS_TAPS_FRA_B4_G5_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_44TO47_OPS_TAPS_FRA_B4_G5_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_44TO47_OPS_TAPS_FRA_B4_G5_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_44TO47_OPS_TAPS_FRA_B4_G5_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B4_SAR_48TO51 register description at address offset 0xdd8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b4_sar_48to51
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B4_G6_SAR0 : 8;
    ///< OPS Sar48 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B4_G6_SAR1 : 8;
    ///< OPS Sar49 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B4_G6_SAR2 : 8;
    ///< OPS Sar50 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B4_G6_SAR3 : 8;
    ///< OPS Sar51 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b4_sar_48to51_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_48TO51_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_48TO51_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_48TO51_WR_MASK (0xffffffffU)


///< OPS Sar48 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_48TO51_OPS_TAPS_FRA_B4_G6_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_48TO51_OPS_TAPS_FRA_B4_G6_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_48TO51_OPS_TAPS_FRA_B4_G6_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_48TO51_OPS_TAPS_FRA_B4_G6_SAR0_BF_DEF (0x00000000)

///< OPS Sar49 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_48TO51_OPS_TAPS_FRA_B4_G6_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_48TO51_OPS_TAPS_FRA_B4_G6_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_48TO51_OPS_TAPS_FRA_B4_G6_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_48TO51_OPS_TAPS_FRA_B4_G6_SAR1_BF_DEF (0x00000000)

///< OPS Sar50 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_48TO51_OPS_TAPS_FRA_B4_G6_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_48TO51_OPS_TAPS_FRA_B4_G6_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_48TO51_OPS_TAPS_FRA_B4_G6_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_48TO51_OPS_TAPS_FRA_B4_G6_SAR2_BF_DEF (0x00000000)

///< OPS Sar51 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_48TO51_OPS_TAPS_FRA_B4_G6_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_48TO51_OPS_TAPS_FRA_B4_G6_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_48TO51_OPS_TAPS_FRA_B4_G6_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_48TO51_OPS_TAPS_FRA_B4_G6_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B4_SAR_52TO55 register description at address offset 0xddc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b4_sar_52to55
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B4_G6_SAR4 : 8;
    ///< OPS Sar52 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B4_G6_SAR5 : 8;
    ///< OPS Sar53 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B4_G6_SAR6 : 8;
    ///< OPS Sar54 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B4_G6_SAR7 : 8;
    ///< OPS Sar55 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b4_sar_52to55_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_52TO55_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_52TO55_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_52TO55_WR_MASK (0xffffffffU)


///< OPS Sar52 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_52TO55_OPS_TAPS_FRA_B4_G6_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_52TO55_OPS_TAPS_FRA_B4_G6_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_52TO55_OPS_TAPS_FRA_B4_G6_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_52TO55_OPS_TAPS_FRA_B4_G6_SAR4_BF_DEF (0x00000000)

///< OPS Sar53 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_52TO55_OPS_TAPS_FRA_B4_G6_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_52TO55_OPS_TAPS_FRA_B4_G6_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_52TO55_OPS_TAPS_FRA_B4_G6_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_52TO55_OPS_TAPS_FRA_B4_G6_SAR5_BF_DEF (0x00000000)

///< OPS Sar54 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_52TO55_OPS_TAPS_FRA_B4_G6_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_52TO55_OPS_TAPS_FRA_B4_G6_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_52TO55_OPS_TAPS_FRA_B4_G6_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_52TO55_OPS_TAPS_FRA_B4_G6_SAR6_BF_DEF (0x00000000)

///< OPS Sar55 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_52TO55_OPS_TAPS_FRA_B4_G6_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_52TO55_OPS_TAPS_FRA_B4_G6_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_52TO55_OPS_TAPS_FRA_B4_G6_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_52TO55_OPS_TAPS_FRA_B4_G6_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B4_SAR_56TO59 register description at address offset 0xde0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b4_sar_56to59
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B4_G7_SAR0 : 8;
    ///< OPS Sar56 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B4_G7_SAR1 : 8;
    ///< OPS Sar57 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B4_G7_SAR2 : 8;
    ///< OPS Sar58 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B4_G7_SAR3 : 8;
    ///< OPS Sar59 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b4_sar_56to59_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_56TO59_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_56TO59_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_56TO59_WR_MASK (0xffffffffU)


///< OPS Sar56 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_56TO59_OPS_TAPS_FRA_B4_G7_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_56TO59_OPS_TAPS_FRA_B4_G7_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_56TO59_OPS_TAPS_FRA_B4_G7_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_56TO59_OPS_TAPS_FRA_B4_G7_SAR0_BF_DEF (0x00000000)

///< OPS Sar57 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_56TO59_OPS_TAPS_FRA_B4_G7_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_56TO59_OPS_TAPS_FRA_B4_G7_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_56TO59_OPS_TAPS_FRA_B4_G7_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_56TO59_OPS_TAPS_FRA_B4_G7_SAR1_BF_DEF (0x00000000)

///< OPS Sar58 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_56TO59_OPS_TAPS_FRA_B4_G7_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_56TO59_OPS_TAPS_FRA_B4_G7_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_56TO59_OPS_TAPS_FRA_B4_G7_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_56TO59_OPS_TAPS_FRA_B4_G7_SAR2_BF_DEF (0x00000000)

///< OPS Sar59 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_56TO59_OPS_TAPS_FRA_B4_G7_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_56TO59_OPS_TAPS_FRA_B4_G7_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_56TO59_OPS_TAPS_FRA_B4_G7_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_56TO59_OPS_TAPS_FRA_B4_G7_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B4_SAR_60TO63 register description at address offset 0xde4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b4_sar_60to63
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B4_G7_SAR4 : 8;
    ///< OPS Sar60 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B4_G7_SAR5 : 8;
    ///< OPS Sar61 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B4_G7_SAR6 : 8;
    ///< OPS Sar62 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B4_G7_SAR7 : 8;
    ///< OPS Sar63 tap frac value on bit 4
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b4_sar_60to63_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_60TO63_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_60TO63_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_60TO63_WR_MASK (0xffffffffU)


///< OPS Sar60 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_60TO63_OPS_TAPS_FRA_B4_G7_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_60TO63_OPS_TAPS_FRA_B4_G7_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_60TO63_OPS_TAPS_FRA_B4_G7_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_60TO63_OPS_TAPS_FRA_B4_G7_SAR4_BF_DEF (0x00000000)

///< OPS Sar61 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_60TO63_OPS_TAPS_FRA_B4_G7_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_60TO63_OPS_TAPS_FRA_B4_G7_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_60TO63_OPS_TAPS_FRA_B4_G7_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_60TO63_OPS_TAPS_FRA_B4_G7_SAR5_BF_DEF (0x00000000)

///< OPS Sar62 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_60TO63_OPS_TAPS_FRA_B4_G7_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_60TO63_OPS_TAPS_FRA_B4_G7_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_60TO63_OPS_TAPS_FRA_B4_G7_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_60TO63_OPS_TAPS_FRA_B4_G7_SAR6_BF_DEF (0x00000000)

///< OPS Sar63 tap frac value on bit 4
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_60TO63_OPS_TAPS_FRA_B4_G7_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_60TO63_OPS_TAPS_FRA_B4_G7_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_60TO63_OPS_TAPS_FRA_B4_G7_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_60TO63_OPS_TAPS_FRA_B4_G7_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B5_SAR_0TO3 register description at address offset 0xde8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b5_sar_0to3
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B5_G0_SAR0 : 8;
    ///< OPS Sar0 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B5_G0_SAR1 : 8;
    ///< OPS Sar1 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B5_G0_SAR2 : 8;
    ///< OPS Sar2 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B5_G0_SAR3 : 8;
    ///< OPS Sar3 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b5_sar_0to3_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_0TO3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_0TO3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_0TO3_WR_MASK (0xffffffffU)


///< OPS Sar0 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_0TO3_OPS_TAPS_FRA_B5_G0_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_0TO3_OPS_TAPS_FRA_B5_G0_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_0TO3_OPS_TAPS_FRA_B5_G0_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_0TO3_OPS_TAPS_FRA_B5_G0_SAR0_BF_DEF (0x00000000)

///< OPS Sar1 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_0TO3_OPS_TAPS_FRA_B5_G0_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_0TO3_OPS_TAPS_FRA_B5_G0_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_0TO3_OPS_TAPS_FRA_B5_G0_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_0TO3_OPS_TAPS_FRA_B5_G0_SAR1_BF_DEF (0x00000000)

///< OPS Sar2 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_0TO3_OPS_TAPS_FRA_B5_G0_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_0TO3_OPS_TAPS_FRA_B5_G0_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_0TO3_OPS_TAPS_FRA_B5_G0_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_0TO3_OPS_TAPS_FRA_B5_G0_SAR2_BF_DEF (0x00000000)

///< OPS Sar3 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_0TO3_OPS_TAPS_FRA_B5_G0_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_0TO3_OPS_TAPS_FRA_B5_G0_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_0TO3_OPS_TAPS_FRA_B5_G0_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_0TO3_OPS_TAPS_FRA_B5_G0_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B5_SAR_4TO7 register description at address offset 0xdec
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b5_sar_4to7
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B5_G0_SAR4 : 8;
    ///< OPS Sar4 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B5_G0_SAR5 : 8;
    ///< OPS Sar5 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B5_G0_SAR6 : 8;
    ///< OPS Sar6 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B5_G0_SAR7 : 8;
    ///< OPS Sar7 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b5_sar_4to7_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_4TO7_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_4TO7_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_4TO7_WR_MASK (0xffffffffU)


///< OPS Sar4 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_4TO7_OPS_TAPS_FRA_B5_G0_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_4TO7_OPS_TAPS_FRA_B5_G0_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_4TO7_OPS_TAPS_FRA_B5_G0_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_4TO7_OPS_TAPS_FRA_B5_G0_SAR4_BF_DEF (0x00000000)

///< OPS Sar5 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_4TO7_OPS_TAPS_FRA_B5_G0_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_4TO7_OPS_TAPS_FRA_B5_G0_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_4TO7_OPS_TAPS_FRA_B5_G0_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_4TO7_OPS_TAPS_FRA_B5_G0_SAR5_BF_DEF (0x00000000)

///< OPS Sar6 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_4TO7_OPS_TAPS_FRA_B5_G0_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_4TO7_OPS_TAPS_FRA_B5_G0_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_4TO7_OPS_TAPS_FRA_B5_G0_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_4TO7_OPS_TAPS_FRA_B5_G0_SAR6_BF_DEF (0x00000000)

///< OPS Sar7 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_4TO7_OPS_TAPS_FRA_B5_G0_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_4TO7_OPS_TAPS_FRA_B5_G0_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_4TO7_OPS_TAPS_FRA_B5_G0_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_4TO7_OPS_TAPS_FRA_B5_G0_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B5_SAR_8TO11 register description at address offset 0xdf0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b5_sar_8to11
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B5_G1_SAR0 : 8;
    ///< OPS Sar8  tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B5_G1_SAR1 : 8;
    ///< OPS Sar9  tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B5_G1_SAR2 : 8;
    ///< OPS Sar10 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B5_G1_SAR3 : 8;
    ///< OPS Sar11 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b5_sar_8to11_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_8TO11_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_8TO11_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_8TO11_WR_MASK (0xffffffffU)


///< OPS Sar8  tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_8TO11_OPS_TAPS_FRA_B5_G1_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_8TO11_OPS_TAPS_FRA_B5_G1_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_8TO11_OPS_TAPS_FRA_B5_G1_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_8TO11_OPS_TAPS_FRA_B5_G1_SAR0_BF_DEF (0x00000000)

///< OPS Sar9  tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_8TO11_OPS_TAPS_FRA_B5_G1_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_8TO11_OPS_TAPS_FRA_B5_G1_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_8TO11_OPS_TAPS_FRA_B5_G1_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_8TO11_OPS_TAPS_FRA_B5_G1_SAR1_BF_DEF (0x00000000)

///< OPS Sar10 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_8TO11_OPS_TAPS_FRA_B5_G1_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_8TO11_OPS_TAPS_FRA_B5_G1_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_8TO11_OPS_TAPS_FRA_B5_G1_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_8TO11_OPS_TAPS_FRA_B5_G1_SAR2_BF_DEF (0x00000000)

///< OPS Sar11 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_8TO11_OPS_TAPS_FRA_B5_G1_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_8TO11_OPS_TAPS_FRA_B5_G1_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_8TO11_OPS_TAPS_FRA_B5_G1_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_8TO11_OPS_TAPS_FRA_B5_G1_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B5_SAR_12TO15 register description at address offset 0xdf4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b5_sar_12to15
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B5_G1_SAR4 : 8;
    ///< OPS Sar12 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B5_G1_SAR5 : 8;
    ///< OPS Sar13 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B5_G1_SAR6 : 8;
    ///< OPS Sar14 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B5_G1_SAR7 : 8;
    ///< OPS Sar15 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b5_sar_12to15_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_12TO15_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_12TO15_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_12TO15_WR_MASK (0xffffffffU)


///< OPS Sar12 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_12TO15_OPS_TAPS_FRA_B5_G1_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_12TO15_OPS_TAPS_FRA_B5_G1_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_12TO15_OPS_TAPS_FRA_B5_G1_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_12TO15_OPS_TAPS_FRA_B5_G1_SAR4_BF_DEF (0x00000000)

///< OPS Sar13 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_12TO15_OPS_TAPS_FRA_B5_G1_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_12TO15_OPS_TAPS_FRA_B5_G1_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_12TO15_OPS_TAPS_FRA_B5_G1_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_12TO15_OPS_TAPS_FRA_B5_G1_SAR5_BF_DEF (0x00000000)

///< OPS Sar14 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_12TO15_OPS_TAPS_FRA_B5_G1_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_12TO15_OPS_TAPS_FRA_B5_G1_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_12TO15_OPS_TAPS_FRA_B5_G1_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_12TO15_OPS_TAPS_FRA_B5_G1_SAR6_BF_DEF (0x00000000)

///< OPS Sar15 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_12TO15_OPS_TAPS_FRA_B5_G1_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_12TO15_OPS_TAPS_FRA_B5_G1_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_12TO15_OPS_TAPS_FRA_B5_G1_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_12TO15_OPS_TAPS_FRA_B5_G1_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B5_SAR_16TO19 register description at address offset 0xdf8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b5_sar_16to19
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B5_G2_SAR0 : 8;
    ///< OPS Sar16 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B5_G2_SAR1 : 8;
    ///< OPS Sar17 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B5_G2_SAR2 : 8;
    ///< OPS Sar18 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B5_G2_SAR3 : 8;
    ///< OPS Sar19 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b5_sar_16to19_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_16TO19_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_16TO19_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_16TO19_WR_MASK (0xffffffffU)


///< OPS Sar16 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_16TO19_OPS_TAPS_FRA_B5_G2_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_16TO19_OPS_TAPS_FRA_B5_G2_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_16TO19_OPS_TAPS_FRA_B5_G2_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_16TO19_OPS_TAPS_FRA_B5_G2_SAR0_BF_DEF (0x00000000)

///< OPS Sar17 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_16TO19_OPS_TAPS_FRA_B5_G2_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_16TO19_OPS_TAPS_FRA_B5_G2_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_16TO19_OPS_TAPS_FRA_B5_G2_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_16TO19_OPS_TAPS_FRA_B5_G2_SAR1_BF_DEF (0x00000000)

///< OPS Sar18 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_16TO19_OPS_TAPS_FRA_B5_G2_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_16TO19_OPS_TAPS_FRA_B5_G2_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_16TO19_OPS_TAPS_FRA_B5_G2_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_16TO19_OPS_TAPS_FRA_B5_G2_SAR2_BF_DEF (0x00000000)

///< OPS Sar19 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_16TO19_OPS_TAPS_FRA_B5_G2_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_16TO19_OPS_TAPS_FRA_B5_G2_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_16TO19_OPS_TAPS_FRA_B5_G2_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_16TO19_OPS_TAPS_FRA_B5_G2_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B5_SAR_20TO23 register description at address offset 0xdfc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b5_sar_20to23
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B5_G2_SAR4 : 8;
    ///< OPS Sar20 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B5_G2_SAR5 : 8;
    ///< OPS Sar21 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B5_G2_SAR6 : 8;
    ///< OPS Sar22 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B5_G2_SAR7 : 8;
    ///< OPS Sar23 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b5_sar_20to23_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_20TO23_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_20TO23_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_20TO23_WR_MASK (0xffffffffU)


///< OPS Sar20 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_20TO23_OPS_TAPS_FRA_B5_G2_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_20TO23_OPS_TAPS_FRA_B5_G2_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_20TO23_OPS_TAPS_FRA_B5_G2_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_20TO23_OPS_TAPS_FRA_B5_G2_SAR4_BF_DEF (0x00000000)

///< OPS Sar21 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_20TO23_OPS_TAPS_FRA_B5_G2_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_20TO23_OPS_TAPS_FRA_B5_G2_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_20TO23_OPS_TAPS_FRA_B5_G2_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_20TO23_OPS_TAPS_FRA_B5_G2_SAR5_BF_DEF (0x00000000)

///< OPS Sar22 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_20TO23_OPS_TAPS_FRA_B5_G2_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_20TO23_OPS_TAPS_FRA_B5_G2_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_20TO23_OPS_TAPS_FRA_B5_G2_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_20TO23_OPS_TAPS_FRA_B5_G2_SAR6_BF_DEF (0x00000000)

///< OPS Sar23 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_20TO23_OPS_TAPS_FRA_B5_G2_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_20TO23_OPS_TAPS_FRA_B5_G2_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_20TO23_OPS_TAPS_FRA_B5_G2_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_20TO23_OPS_TAPS_FRA_B5_G2_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B5_SAR_24TO27 register description at address offset 0xe00
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b5_sar_24to27
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B5_G3_SAR0 : 8;
    ///< OPS Sar24 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B5_G3_SAR1 : 8;
    ///< OPS Sar25 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B5_G3_SAR2 : 8;
    ///< OPS Sar26 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B5_G3_SAR3 : 8;
    ///< OPS Sar27 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b5_sar_24to27_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_24TO27_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_24TO27_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_24TO27_WR_MASK (0xffffffffU)


///< OPS Sar24 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_24TO27_OPS_TAPS_FRA_B5_G3_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_24TO27_OPS_TAPS_FRA_B5_G3_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_24TO27_OPS_TAPS_FRA_B5_G3_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_24TO27_OPS_TAPS_FRA_B5_G3_SAR0_BF_DEF (0x00000000)

///< OPS Sar25 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_24TO27_OPS_TAPS_FRA_B5_G3_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_24TO27_OPS_TAPS_FRA_B5_G3_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_24TO27_OPS_TAPS_FRA_B5_G3_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_24TO27_OPS_TAPS_FRA_B5_G3_SAR1_BF_DEF (0x00000000)

///< OPS Sar26 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_24TO27_OPS_TAPS_FRA_B5_G3_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_24TO27_OPS_TAPS_FRA_B5_G3_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_24TO27_OPS_TAPS_FRA_B5_G3_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_24TO27_OPS_TAPS_FRA_B5_G3_SAR2_BF_DEF (0x00000000)

///< OPS Sar27 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_24TO27_OPS_TAPS_FRA_B5_G3_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_24TO27_OPS_TAPS_FRA_B5_G3_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_24TO27_OPS_TAPS_FRA_B5_G3_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_24TO27_OPS_TAPS_FRA_B5_G3_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B5_SAR_28TO31 register description at address offset 0xe04
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b5_sar_28to31
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B5_G3_SAR4 : 8;
    ///< OPS Sar28 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B5_G3_SAR5 : 8;
    ///< OPS Sar29 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B5_G3_SAR6 : 8;
    ///< OPS Sar30 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B5_G3_SAR7 : 8;
    ///< OPS Sar31 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b5_sar_28to31_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_28TO31_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_28TO31_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_28TO31_WR_MASK (0xffffffffU)


///< OPS Sar28 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_28TO31_OPS_TAPS_FRA_B5_G3_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_28TO31_OPS_TAPS_FRA_B5_G3_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_28TO31_OPS_TAPS_FRA_B5_G3_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_28TO31_OPS_TAPS_FRA_B5_G3_SAR4_BF_DEF (0x00000000)

///< OPS Sar29 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_28TO31_OPS_TAPS_FRA_B5_G3_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_28TO31_OPS_TAPS_FRA_B5_G3_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_28TO31_OPS_TAPS_FRA_B5_G3_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_28TO31_OPS_TAPS_FRA_B5_G3_SAR5_BF_DEF (0x00000000)

///< OPS Sar30 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_28TO31_OPS_TAPS_FRA_B5_G3_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_28TO31_OPS_TAPS_FRA_B5_G3_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_28TO31_OPS_TAPS_FRA_B5_G3_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_28TO31_OPS_TAPS_FRA_B5_G3_SAR6_BF_DEF (0x00000000)

///< OPS Sar31 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_28TO31_OPS_TAPS_FRA_B5_G3_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_28TO31_OPS_TAPS_FRA_B5_G3_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_28TO31_OPS_TAPS_FRA_B5_G3_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_28TO31_OPS_TAPS_FRA_B5_G3_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B5_SAR_32TO35 register description at address offset 0xe08
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b5_sar_32to35
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B5_G4_SAR0 : 8;
    ///< OPS Sar32 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B5_G4_SAR1 : 8;
    ///< OPS Sar33 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B5_G4_SAR2 : 8;
    ///< OPS Sar34 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B5_G4_SAR3 : 8;
    ///< OPS Sar35 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b5_sar_32to35_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_32TO35_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_32TO35_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_32TO35_WR_MASK (0xffffffffU)


///< OPS Sar32 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_32TO35_OPS_TAPS_FRA_B5_G4_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_32TO35_OPS_TAPS_FRA_B5_G4_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_32TO35_OPS_TAPS_FRA_B5_G4_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_32TO35_OPS_TAPS_FRA_B5_G4_SAR0_BF_DEF (0x00000000)

///< OPS Sar33 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_32TO35_OPS_TAPS_FRA_B5_G4_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_32TO35_OPS_TAPS_FRA_B5_G4_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_32TO35_OPS_TAPS_FRA_B5_G4_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_32TO35_OPS_TAPS_FRA_B5_G4_SAR1_BF_DEF (0x00000000)

///< OPS Sar34 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_32TO35_OPS_TAPS_FRA_B5_G4_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_32TO35_OPS_TAPS_FRA_B5_G4_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_32TO35_OPS_TAPS_FRA_B5_G4_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_32TO35_OPS_TAPS_FRA_B5_G4_SAR2_BF_DEF (0x00000000)

///< OPS Sar35 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_32TO35_OPS_TAPS_FRA_B5_G4_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_32TO35_OPS_TAPS_FRA_B5_G4_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_32TO35_OPS_TAPS_FRA_B5_G4_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_32TO35_OPS_TAPS_FRA_B5_G4_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B5_SAR_36TO39 register description at address offset 0xe0c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b5_sar_36to39
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B5_G4_SAR4 : 8;
    ///< OPS Sar36 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B5_G4_SAR5 : 8;
    ///< OPS Sar37 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B5_G4_SAR6 : 8;
    ///< OPS Sar38 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B5_G4_SAR7 : 8;
    ///< OPS Sar39 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b5_sar_36to39_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_36TO39_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_36TO39_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_36TO39_WR_MASK (0xffffffffU)


///< OPS Sar36 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_36TO39_OPS_TAPS_FRA_B5_G4_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_36TO39_OPS_TAPS_FRA_B5_G4_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_36TO39_OPS_TAPS_FRA_B5_G4_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_36TO39_OPS_TAPS_FRA_B5_G4_SAR4_BF_DEF (0x00000000)

///< OPS Sar37 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_36TO39_OPS_TAPS_FRA_B5_G4_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_36TO39_OPS_TAPS_FRA_B5_G4_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_36TO39_OPS_TAPS_FRA_B5_G4_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_36TO39_OPS_TAPS_FRA_B5_G4_SAR5_BF_DEF (0x00000000)

///< OPS Sar38 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_36TO39_OPS_TAPS_FRA_B5_G4_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_36TO39_OPS_TAPS_FRA_B5_G4_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_36TO39_OPS_TAPS_FRA_B5_G4_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_36TO39_OPS_TAPS_FRA_B5_G4_SAR6_BF_DEF (0x00000000)

///< OPS Sar39 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_36TO39_OPS_TAPS_FRA_B5_G4_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_36TO39_OPS_TAPS_FRA_B5_G4_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_36TO39_OPS_TAPS_FRA_B5_G4_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_36TO39_OPS_TAPS_FRA_B5_G4_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B5_SAR_40TO43 register description at address offset 0xe10
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b5_sar_40to43
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B5_G5_SAR0 : 8;
    ///< OPS Sar40 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B5_G5_SAR1 : 8;
    ///< OPS Sar41 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B5_G5_SAR2 : 8;
    ///< OPS Sar42 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B5_G5_SAR3 : 8;
    ///< OPS Sar43 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b5_sar_40to43_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_40TO43_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_40TO43_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_40TO43_WR_MASK (0xffffffffU)


///< OPS Sar40 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_40TO43_OPS_TAPS_FRA_B5_G5_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_40TO43_OPS_TAPS_FRA_B5_G5_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_40TO43_OPS_TAPS_FRA_B5_G5_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_40TO43_OPS_TAPS_FRA_B5_G5_SAR0_BF_DEF (0x00000000)

///< OPS Sar41 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_40TO43_OPS_TAPS_FRA_B5_G5_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_40TO43_OPS_TAPS_FRA_B5_G5_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_40TO43_OPS_TAPS_FRA_B5_G5_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_40TO43_OPS_TAPS_FRA_B5_G5_SAR1_BF_DEF (0x00000000)

///< OPS Sar42 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_40TO43_OPS_TAPS_FRA_B5_G5_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_40TO43_OPS_TAPS_FRA_B5_G5_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_40TO43_OPS_TAPS_FRA_B5_G5_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_40TO43_OPS_TAPS_FRA_B5_G5_SAR2_BF_DEF (0x00000000)

///< OPS Sar43 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_40TO43_OPS_TAPS_FRA_B5_G5_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_40TO43_OPS_TAPS_FRA_B5_G5_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_40TO43_OPS_TAPS_FRA_B5_G5_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_40TO43_OPS_TAPS_FRA_B5_G5_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B5_SAR_44TO47 register description at address offset 0xe14
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b5_sar_44to47
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B5_G5_SAR4 : 8;
    ///< OPS Sar44 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B5_G5_SAR5 : 8;
    ///< OPS Sar45 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B5_G5_SAR6 : 8;
    ///< OPS Sar46 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B5_G5_SAR7 : 8;
    ///< OPS Sar47 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b5_sar_44to47_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_44TO47_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_44TO47_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_44TO47_WR_MASK (0xffffffffU)


///< OPS Sar44 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_44TO47_OPS_TAPS_FRA_B5_G5_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_44TO47_OPS_TAPS_FRA_B5_G5_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_44TO47_OPS_TAPS_FRA_B5_G5_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_44TO47_OPS_TAPS_FRA_B5_G5_SAR4_BF_DEF (0x00000000)

///< OPS Sar45 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_44TO47_OPS_TAPS_FRA_B5_G5_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_44TO47_OPS_TAPS_FRA_B5_G5_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_44TO47_OPS_TAPS_FRA_B5_G5_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_44TO47_OPS_TAPS_FRA_B5_G5_SAR5_BF_DEF (0x00000000)

///< OPS Sar46 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_44TO47_OPS_TAPS_FRA_B5_G5_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_44TO47_OPS_TAPS_FRA_B5_G5_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_44TO47_OPS_TAPS_FRA_B5_G5_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_44TO47_OPS_TAPS_FRA_B5_G5_SAR6_BF_DEF (0x00000000)

///< OPS Sar47 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_44TO47_OPS_TAPS_FRA_B5_G5_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_44TO47_OPS_TAPS_FRA_B5_G5_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_44TO47_OPS_TAPS_FRA_B5_G5_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_44TO47_OPS_TAPS_FRA_B5_G5_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B5_SAR_48TO51 register description at address offset 0xe18
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b5_sar_48to51
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B5_G6_SAR0 : 8;
    ///< OPS Sar48 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B5_G6_SAR1 : 8;
    ///< OPS Sar49 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B5_G6_SAR2 : 8;
    ///< OPS Sar50 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B5_G6_SAR3 : 8;
    ///< OPS Sar51 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b5_sar_48to51_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_48TO51_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_48TO51_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_48TO51_WR_MASK (0xffffffffU)


///< OPS Sar48 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_48TO51_OPS_TAPS_FRA_B5_G6_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_48TO51_OPS_TAPS_FRA_B5_G6_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_48TO51_OPS_TAPS_FRA_B5_G6_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_48TO51_OPS_TAPS_FRA_B5_G6_SAR0_BF_DEF (0x00000000)

///< OPS Sar49 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_48TO51_OPS_TAPS_FRA_B5_G6_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_48TO51_OPS_TAPS_FRA_B5_G6_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_48TO51_OPS_TAPS_FRA_B5_G6_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_48TO51_OPS_TAPS_FRA_B5_G6_SAR1_BF_DEF (0x00000000)

///< OPS Sar50 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_48TO51_OPS_TAPS_FRA_B5_G6_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_48TO51_OPS_TAPS_FRA_B5_G6_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_48TO51_OPS_TAPS_FRA_B5_G6_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_48TO51_OPS_TAPS_FRA_B5_G6_SAR2_BF_DEF (0x00000000)

///< OPS Sar51 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_48TO51_OPS_TAPS_FRA_B5_G6_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_48TO51_OPS_TAPS_FRA_B5_G6_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_48TO51_OPS_TAPS_FRA_B5_G6_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_48TO51_OPS_TAPS_FRA_B5_G6_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B5_SAR_52TO55 register description at address offset 0xe1c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b5_sar_52to55
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B5_G6_SAR4 : 8;
    ///< OPS Sar52 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B5_G6_SAR5 : 8;
    ///< OPS Sar53 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B5_G6_SAR6 : 8;
    ///< OPS Sar54 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B5_G6_SAR7 : 8;
    ///< OPS Sar55 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b5_sar_52to55_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_52TO55_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_52TO55_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_52TO55_WR_MASK (0xffffffffU)


///< OPS Sar52 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_52TO55_OPS_TAPS_FRA_B5_G6_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_52TO55_OPS_TAPS_FRA_B5_G6_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_52TO55_OPS_TAPS_FRA_B5_G6_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_52TO55_OPS_TAPS_FRA_B5_G6_SAR4_BF_DEF (0x00000000)

///< OPS Sar53 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_52TO55_OPS_TAPS_FRA_B5_G6_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_52TO55_OPS_TAPS_FRA_B5_G6_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_52TO55_OPS_TAPS_FRA_B5_G6_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_52TO55_OPS_TAPS_FRA_B5_G6_SAR5_BF_DEF (0x00000000)

///< OPS Sar54 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_52TO55_OPS_TAPS_FRA_B5_G6_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_52TO55_OPS_TAPS_FRA_B5_G6_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_52TO55_OPS_TAPS_FRA_B5_G6_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_52TO55_OPS_TAPS_FRA_B5_G6_SAR6_BF_DEF (0x00000000)

///< OPS Sar55 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_52TO55_OPS_TAPS_FRA_B5_G6_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_52TO55_OPS_TAPS_FRA_B5_G6_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_52TO55_OPS_TAPS_FRA_B5_G6_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_52TO55_OPS_TAPS_FRA_B5_G6_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B5_SAR_56TO59 register description at address offset 0xe20
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b5_sar_56to59
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B5_G7_SAR0 : 8;
    ///< OPS Sar56 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B5_G7_SAR1 : 8;
    ///< OPS Sar57 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B5_G7_SAR2 : 8;
    ///< OPS Sar58 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B5_G7_SAR3 : 8;
    ///< OPS Sar59 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b5_sar_56to59_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_56TO59_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_56TO59_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_56TO59_WR_MASK (0xffffffffU)


///< OPS Sar56 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_56TO59_OPS_TAPS_FRA_B5_G7_SAR0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_56TO59_OPS_TAPS_FRA_B5_G7_SAR0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_56TO59_OPS_TAPS_FRA_B5_G7_SAR0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_56TO59_OPS_TAPS_FRA_B5_G7_SAR0_BF_DEF (0x00000000)

///< OPS Sar57 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_56TO59_OPS_TAPS_FRA_B5_G7_SAR1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_56TO59_OPS_TAPS_FRA_B5_G7_SAR1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_56TO59_OPS_TAPS_FRA_B5_G7_SAR1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_56TO59_OPS_TAPS_FRA_B5_G7_SAR1_BF_DEF (0x00000000)

///< OPS Sar58 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_56TO59_OPS_TAPS_FRA_B5_G7_SAR2_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_56TO59_OPS_TAPS_FRA_B5_G7_SAR2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_56TO59_OPS_TAPS_FRA_B5_G7_SAR2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_56TO59_OPS_TAPS_FRA_B5_G7_SAR2_BF_DEF (0x00000000)

///< OPS Sar59 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_56TO59_OPS_TAPS_FRA_B5_G7_SAR3_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_56TO59_OPS_TAPS_FRA_B5_G7_SAR3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_56TO59_OPS_TAPS_FRA_B5_G7_SAR3_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_56TO59_OPS_TAPS_FRA_B5_G7_SAR3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OPS_TAPS_FRA_B5_SAR_60TO63 register description at address offset 0xe24
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ops_taps_fra_b5_sar_60to63
  * placeholder
  */

typedef union {
  struct {
    uint32_t OPS_TAPS_FRA_B5_G7_SAR4 : 8;
    ///< OPS Sar60 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B5_G7_SAR5 : 8;
    ///< OPS Sar61 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B5_G7_SAR6 : 8;
    ///< OPS Sar62 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t OPS_TAPS_FRA_B5_G7_SAR7 : 8;
    ///< OPS Sar63 tap frac value on bit 5
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_ops_taps_fra_b5_sar_60to63_reg_t;

#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_60TO63_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_60TO63_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_60TO63_WR_MASK (0xffffffffU)


///< OPS Sar60 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_60TO63_OPS_TAPS_FRA_B5_G7_SAR4_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_60TO63_OPS_TAPS_FRA_B5_G7_SAR4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_60TO63_OPS_TAPS_FRA_B5_G7_SAR4_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_60TO63_OPS_TAPS_FRA_B5_G7_SAR4_BF_DEF (0x00000000)

///< OPS Sar61 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_60TO63_OPS_TAPS_FRA_B5_G7_SAR5_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_60TO63_OPS_TAPS_FRA_B5_G7_SAR5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_60TO63_OPS_TAPS_FRA_B5_G7_SAR5_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_60TO63_OPS_TAPS_FRA_B5_G7_SAR5_BF_DEF (0x00000000)

///< OPS Sar62 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_60TO63_OPS_TAPS_FRA_B5_G7_SAR6_BF_OFF (16)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_60TO63_OPS_TAPS_FRA_B5_G7_SAR6_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_60TO63_OPS_TAPS_FRA_B5_G7_SAR6_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_60TO63_OPS_TAPS_FRA_B5_G7_SAR6_BF_DEF (0x00000000)

///< OPS Sar63 tap frac value on bit 5
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_60TO63_OPS_TAPS_FRA_B5_G7_SAR7_BF_OFF (24)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_60TO63_OPS_TAPS_FRA_B5_G7_SAR7_BF_WID ( 8)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_60TO63_OPS_TAPS_FRA_B5_G7_SAR7_BF_MSK (0xFF000000)
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_60TO63_OPS_TAPS_FRA_B5_G7_SAR7_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OFC_CONTROL_4 register description at address offset 0xe28
  *
  * Register default value:        0x000B42D0
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ofc_control_4
  * placeholder
  */

typedef union {
  struct {
    uint32_t OFC_TAPS_0 : 10;
    ///< ofc tap0 value
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x2D0"
    uint32_t OFC_TAPS_1 : 10;
    ///< ofc tap1 value
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x2D0"
    uint32_t OFC_TAPS_2 : 10;
    ///< ofc tap2 value
    ///< AccessType="RW/V" BitOffset="20" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ofc_ctrl_4_reg_t;

#define PMA_RXWORD_MSG_OFC_CTRL_4_DEFAULT (0x000b42d0U)
#define PMA_RXWORD_MSG_OFC_CTRL_4_RD_MASK (0x3fffffffU)
#define PMA_RXWORD_MSG_OFC_CTRL_4_WR_MASK (0x3fffffffU)


///< ofc tap0 value
#define PMA_RXWORD_MSG_OFC_CTRL_4_OFC_TAPS_0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OFC_CTRL_4_OFC_TAPS_0_BF_WID (10)
#define PMA_RXWORD_MSG_OFC_CTRL_4_OFC_TAPS_0_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_OFC_CTRL_4_OFC_TAPS_0_BF_DEF (0x000002D0)

///< ofc tap1 value
#define PMA_RXWORD_MSG_OFC_CTRL_4_OFC_TAPS_1_BF_OFF (10)
#define PMA_RXWORD_MSG_OFC_CTRL_4_OFC_TAPS_1_BF_WID (10)
#define PMA_RXWORD_MSG_OFC_CTRL_4_OFC_TAPS_1_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_OFC_CTRL_4_OFC_TAPS_1_BF_DEF (0x000B4000)

///< ofc tap2 value
#define PMA_RXWORD_MSG_OFC_CTRL_4_OFC_TAPS_2_BF_OFF (20)
#define PMA_RXWORD_MSG_OFC_CTRL_4_OFC_TAPS_2_BF_WID (10)
#define PMA_RXWORD_MSG_OFC_CTRL_4_OFC_TAPS_2_BF_MSK (0x3FF00000)
#define PMA_RXWORD_MSG_OFC_CTRL_4_OFC_TAPS_2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OFC_CONTROL_5 register description at address offset 0xe2c
  *
  * Register default value:        0x1304C000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ofc_control_5
  * placeholder
  */

typedef union {
  struct {
    uint32_t OFC_TAPS_3 : 10;
    ///< ofc tap3 value
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OFC_TAPS_4 : 10;
    ///< ofc tap4 value
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x130"
    uint32_t OFC_TAPS_5 : 10;
    ///< ofc tap5 value
    ///< AccessType="RW/V" BitOffset="20" ResetValue="0x130"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ofc_ctrl_5_reg_t;

#define PMA_RXWORD_MSG_OFC_CTRL_5_DEFAULT (0x1304c000U)
#define PMA_RXWORD_MSG_OFC_CTRL_5_RD_MASK (0x3fffffffU)
#define PMA_RXWORD_MSG_OFC_CTRL_5_WR_MASK (0x3fffffffU)


///< ofc tap3 value
#define PMA_RXWORD_MSG_OFC_CTRL_5_OFC_TAPS_3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OFC_CTRL_5_OFC_TAPS_3_BF_WID (10)
#define PMA_RXWORD_MSG_OFC_CTRL_5_OFC_TAPS_3_BF_MSK (0x000003FF)
#define PMA_RXWORD_MSG_OFC_CTRL_5_OFC_TAPS_3_BF_DEF (0x00000000)

///< ofc tap4 value
#define PMA_RXWORD_MSG_OFC_CTRL_5_OFC_TAPS_4_BF_OFF (10)
#define PMA_RXWORD_MSG_OFC_CTRL_5_OFC_TAPS_4_BF_WID (10)
#define PMA_RXWORD_MSG_OFC_CTRL_5_OFC_TAPS_4_BF_MSK (0x000FFC00)
#define PMA_RXWORD_MSG_OFC_CTRL_5_OFC_TAPS_4_BF_DEF (0x0004C000)

///< ofc tap5 value
#define PMA_RXWORD_MSG_OFC_CTRL_5_OFC_TAPS_5_BF_OFF (20)
#define PMA_RXWORD_MSG_OFC_CTRL_5_OFC_TAPS_5_BF_WID (10)
#define PMA_RXWORD_MSG_OFC_CTRL_5_OFC_TAPS_5_BF_MSK (0x3FF00000)
#define PMA_RXWORD_MSG_OFC_CTRL_5_OFC_TAPS_5_BF_DEF (0x13000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OFC_CONTROL_6 register description at address offset 0xe30
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ofc_control_6
  * placeholder
  */

typedef union {
  struct {
    uint32_t OFC_TAPS_FRA_0 : 8;
    ///< ofc tap0 fractional value
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OFC_TAPS_FRA_1 : 8;
    ///< ofc tap1 fractional  value
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OFC_TAPS_FRA_2 : 8;
    ///< ofc tap2 fractional value
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ofc_ctrl_6_reg_t;

#define PMA_RXWORD_MSG_OFC_CTRL_6_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OFC_CTRL_6_RD_MASK (0x00ffffffU)
#define PMA_RXWORD_MSG_OFC_CTRL_6_WR_MASK (0x00ffffffU)


///< ofc tap0 fractional value
#define PMA_RXWORD_MSG_OFC_CTRL_6_OFC_TAPS_FRA_0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OFC_CTRL_6_OFC_TAPS_FRA_0_BF_WID ( 8)
#define PMA_RXWORD_MSG_OFC_CTRL_6_OFC_TAPS_FRA_0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OFC_CTRL_6_OFC_TAPS_FRA_0_BF_DEF (0x00000000)

///< ofc tap1 fractional  value
#define PMA_RXWORD_MSG_OFC_CTRL_6_OFC_TAPS_FRA_1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OFC_CTRL_6_OFC_TAPS_FRA_1_BF_WID ( 8)
#define PMA_RXWORD_MSG_OFC_CTRL_6_OFC_TAPS_FRA_1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OFC_CTRL_6_OFC_TAPS_FRA_1_BF_DEF (0x00000000)

///< ofc tap2 fractional value
#define PMA_RXWORD_MSG_OFC_CTRL_6_OFC_TAPS_FRA_2_BF_OFF (16)
#define PMA_RXWORD_MSG_OFC_CTRL_6_OFC_TAPS_FRA_2_BF_WID ( 8)
#define PMA_RXWORD_MSG_OFC_CTRL_6_OFC_TAPS_FRA_2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OFC_CTRL_6_OFC_TAPS_FRA_2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_OFC_CONTROL_7 register description at address offset 0xe34
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/ofc_control_7
  * placeholder
  */

typedef union {
  struct {
    uint32_t OFC_TAPS_FRA_3 : 8;
    ///< ofc tap3 fractional value
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t OFC_TAPS_FRA_4 : 8;
    ///< ofc tap4 fractional  value
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t OFC_TAPS_FRA_5 : 8;
    ///< ofc tap5 fractional value
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_ofc_ctrl_7_reg_t;

#define PMA_RXWORD_MSG_OFC_CTRL_7_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_OFC_CTRL_7_RD_MASK (0x00ffffffU)
#define PMA_RXWORD_MSG_OFC_CTRL_7_WR_MASK (0x00ffffffU)


///< ofc tap3 fractional value
#define PMA_RXWORD_MSG_OFC_CTRL_7_OFC_TAPS_FRA_3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_OFC_CTRL_7_OFC_TAPS_FRA_3_BF_WID ( 8)
#define PMA_RXWORD_MSG_OFC_CTRL_7_OFC_TAPS_FRA_3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_OFC_CTRL_7_OFC_TAPS_FRA_3_BF_DEF (0x00000000)

///< ofc tap4 fractional  value
#define PMA_RXWORD_MSG_OFC_CTRL_7_OFC_TAPS_FRA_4_BF_OFF ( 8)
#define PMA_RXWORD_MSG_OFC_CTRL_7_OFC_TAPS_FRA_4_BF_WID ( 8)
#define PMA_RXWORD_MSG_OFC_CTRL_7_OFC_TAPS_FRA_4_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_OFC_CTRL_7_OFC_TAPS_FRA_4_BF_DEF (0x00000000)

///< ofc tap5 fractional value
#define PMA_RXWORD_MSG_OFC_CTRL_7_OFC_TAPS_FRA_5_BF_OFF (16)
#define PMA_RXWORD_MSG_OFC_CTRL_7_OFC_TAPS_FRA_5_BF_WID ( 8)
#define PMA_RXWORD_MSG_OFC_CTRL_7_OFC_TAPS_FRA_5_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_OFC_CTRL_7_OFC_TAPS_FRA_5_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_OFC_CONTROL_4 register description at address offset 0xe38
  *
  * Register default value:        0x0005A168
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_ofc_control_4
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_OFC_TAPS_0 : 9;
    ///< cdr_ffe_ofc tap0 value
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x168"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
    uint32_t CDR_FFE_OFC_TAPS_1 : 9;
    ///< cdr_ffe_ofc tap1 value
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x168"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
    uint32_t CDR_FFE_OFC_TAPS_2 : 9;
    ///< cdr_ffe_ofc tap2 value
    ///< AccessType="RW/V" BitOffset="20" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_ofc_ctrl_4_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_4_DEFAULT (0x0005a168U)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_4_RD_MASK (0x1ff7fdffU)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_4_WR_MASK (0x1ff7fdffU)


///< cdr_ffe_ofc tap0 value
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_4_CDR_FFE_OFC_TAPS_0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_4_CDR_FFE_OFC_TAPS_0_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_4_CDR_FFE_OFC_TAPS_0_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_4_CDR_FFE_OFC_TAPS_0_BF_DEF (0x00000168)

///< cdr_ffe_ofc tap1 value
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_4_CDR_FFE_OFC_TAPS_1_BF_OFF (10)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_4_CDR_FFE_OFC_TAPS_1_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_4_CDR_FFE_OFC_TAPS_1_BF_MSK (0x0007FC00)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_4_CDR_FFE_OFC_TAPS_1_BF_DEF (0x0005A000)

///< cdr_ffe_ofc tap2 value
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_4_CDR_FFE_OFC_TAPS_2_BF_OFF (20)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_4_CDR_FFE_OFC_TAPS_2_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_4_CDR_FFE_OFC_TAPS_2_BF_MSK (0x1FF00000)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_4_CDR_FFE_OFC_TAPS_2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_OFC_CONTROL_5 register description at address offset 0xe3c
  *
  * Register default value:        0x09826000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_ofc_control_5
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_OFC_TAPS_3 : 9;
    ///< cdr_ffe_ofc tap3 value
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
    uint32_t CDR_FFE_OFC_TAPS_4 : 9;
    ///< cdr_ffe_ofc tap4 value
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x98"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
    uint32_t CDR_FFE_OFC_TAPS_5 : 9;
    ///< cdr_ffe_ofc tap5 value
    ///< AccessType="RW/V" BitOffset="20" ResetValue="0x98"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_ofc_ctrl_5_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_5_DEFAULT (0x09826000U)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_5_RD_MASK (0x1ff7fdffU)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_5_WR_MASK (0x1ff7fdffU)


///< cdr_ffe_ofc tap3 value
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_5_CDR_FFE_OFC_TAPS_3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_5_CDR_FFE_OFC_TAPS_3_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_5_CDR_FFE_OFC_TAPS_3_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_5_CDR_FFE_OFC_TAPS_3_BF_DEF (0x00000000)

///< cdr_ffe_ofc tap4 value
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_5_CDR_FFE_OFC_TAPS_4_BF_OFF (10)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_5_CDR_FFE_OFC_TAPS_4_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_5_CDR_FFE_OFC_TAPS_4_BF_MSK (0x0007FC00)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_5_CDR_FFE_OFC_TAPS_4_BF_DEF (0x00026000)

///< cdr_ffe_ofc tap5 value
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_5_CDR_FFE_OFC_TAPS_5_BF_OFF (20)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_5_CDR_FFE_OFC_TAPS_5_BF_WID ( 9)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_5_CDR_FFE_OFC_TAPS_5_BF_MSK (0x1FF00000)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_5_CDR_FFE_OFC_TAPS_5_BF_DEF (0x09800000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_OFC_CONTROL_6 register description at address offset 0xe40
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_ofc_control_6
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_OFC_TAPS_FRA_0 : 8;
    ///< cdr_ffe_ofc tap0 fractional value
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_OFC_TAPS_FRA_1 : 8;
    ///< cdr_ffe_ofc tap1 fractional  value
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_OFC_TAPS_FRA_2 : 8;
    ///< cdr_ffe_ofc tap2 fractional value
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_ofc_ctrl_6_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_6_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_6_RD_MASK (0x00ffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_6_WR_MASK (0x00ffffffU)


///< cdr_ffe_ofc tap0 fractional value
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_6_CDR_FFE_OFC_TAPS_FRA_0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_6_CDR_FFE_OFC_TAPS_FRA_0_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_6_CDR_FFE_OFC_TAPS_FRA_0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_6_CDR_FFE_OFC_TAPS_FRA_0_BF_DEF (0x00000000)

///< cdr_ffe_ofc tap1 fractional  value
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_6_CDR_FFE_OFC_TAPS_FRA_1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_6_CDR_FFE_OFC_TAPS_FRA_1_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_6_CDR_FFE_OFC_TAPS_FRA_1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_6_CDR_FFE_OFC_TAPS_FRA_1_BF_DEF (0x00000000)

///< cdr_ffe_ofc tap2 fractional value
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_6_CDR_FFE_OFC_TAPS_FRA_2_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_6_CDR_FFE_OFC_TAPS_FRA_2_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_6_CDR_FFE_OFC_TAPS_FRA_2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_6_CDR_FFE_OFC_TAPS_FRA_2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_CDR_FFE_OFC_CONTROL_7 register description at address offset 0xe44
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/cdr_ffe_ofc_control_7
  * placeholder
  */

typedef union {
  struct {
    uint32_t CDR_FFE_OFC_TAPS_FRA_3 : 8;
    ///< cdr_ffe_ofc tap3 fractional value
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDR_FFE_OFC_TAPS_FRA_4 : 8;
    ///< cdr_ffe_ofc tap4 fractional  value
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t CDR_FFE_OFC_TAPS_FRA_5 : 8;
    ///< cdr_ffe_ofc tap5 fractional value
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_cdr_ffe_ofc_ctrl_7_reg_t;

#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_7_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_7_RD_MASK (0x00ffffffU)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_7_WR_MASK (0x00ffffffU)


///< cdr_ffe_ofc tap3 fractional value
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_7_CDR_FFE_OFC_TAPS_FRA_3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_7_CDR_FFE_OFC_TAPS_FRA_3_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_7_CDR_FFE_OFC_TAPS_FRA_3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_7_CDR_FFE_OFC_TAPS_FRA_3_BF_DEF (0x00000000)

///< cdr_ffe_ofc tap4 fractional  value
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_7_CDR_FFE_OFC_TAPS_FRA_4_BF_OFF ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_7_CDR_FFE_OFC_TAPS_FRA_4_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_7_CDR_FFE_OFC_TAPS_FRA_4_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_7_CDR_FFE_OFC_TAPS_FRA_4_BF_DEF (0x00000000)

///< cdr_ffe_ofc tap5 fractional value
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_7_CDR_FFE_OFC_TAPS_FRA_5_BF_OFF (16)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_7_CDR_FFE_OFC_TAPS_FRA_5_BF_WID ( 8)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_7_CDR_FFE_OFC_TAPS_FRA_5_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_7_CDR_FFE_OFC_TAPS_FRA_5_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADCOFC_CONTROL_4 register description at address offset 0xe48
  *
  * Register default value:        0x00002D2D
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adcofc_control_4
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADCOFC_TAPS_0 : 6;
    ///< adcofc tap0 value
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x2D"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ADCOFC_TAPS_1 : 6;
    ///< adcofc tap1 value
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x2D"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t ADCOFC_TAPS_2 : 6;
    ///< adcofc tap2 value
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_adcofc_ctrl_4_reg_t;

#define PMA_RXWORD_MSG_ADCOFC_CTRL_4_DEFAULT (0x00002d2dU)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_4_RD_MASK (0x003f3f3fU)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_4_WR_MASK (0x003f3f3fU)


///< adcofc tap0 value
#define PMA_RXWORD_MSG_ADCOFC_CTRL_4_ADCOFC_TAPS_0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_4_ADCOFC_TAPS_0_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_4_ADCOFC_TAPS_0_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_4_ADCOFC_TAPS_0_BF_DEF (0x0000002D)

///< adcofc tap1 value
#define PMA_RXWORD_MSG_ADCOFC_CTRL_4_ADCOFC_TAPS_1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_4_ADCOFC_TAPS_1_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_4_ADCOFC_TAPS_1_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_4_ADCOFC_TAPS_1_BF_DEF (0x00002D00)

///< adcofc tap2 value
#define PMA_RXWORD_MSG_ADCOFC_CTRL_4_ADCOFC_TAPS_2_BF_OFF (16)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_4_ADCOFC_TAPS_2_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_4_ADCOFC_TAPS_2_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_4_ADCOFC_TAPS_2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADCOFC_CONTROL_5 register description at address offset 0xe4c
  *
  * Register default value:        0x00131300
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adcofc_control_5
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADCOFC_TAPS_3 : 6;
    ///< adcofc tap3 value
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ADCOFC_TAPS_4 : 6;
    ///< adcofc tap4 value
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x13"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t ADCOFC_TAPS_5 : 6;
    ///< adcofc tap5 value
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x13"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_adcofc_ctrl_5_reg_t;

#define PMA_RXWORD_MSG_ADCOFC_CTRL_5_DEFAULT (0x00131300U)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_5_RD_MASK (0x003f3f3fU)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_5_WR_MASK (0x003f3f3fU)


///< adcofc tap3 value
#define PMA_RXWORD_MSG_ADCOFC_CTRL_5_ADCOFC_TAPS_3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_5_ADCOFC_TAPS_3_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_5_ADCOFC_TAPS_3_BF_MSK (0x0000003F)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_5_ADCOFC_TAPS_3_BF_DEF (0x00000000)

///< adcofc tap4 value
#define PMA_RXWORD_MSG_ADCOFC_CTRL_5_ADCOFC_TAPS_4_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_5_ADCOFC_TAPS_4_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_5_ADCOFC_TAPS_4_BF_MSK (0x00003F00)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_5_ADCOFC_TAPS_4_BF_DEF (0x00001300)

///< adcofc tap5 value
#define PMA_RXWORD_MSG_ADCOFC_CTRL_5_ADCOFC_TAPS_5_BF_OFF (16)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_5_ADCOFC_TAPS_5_BF_WID ( 6)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_5_ADCOFC_TAPS_5_BF_MSK (0x003F0000)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_5_ADCOFC_TAPS_5_BF_DEF (0x00130000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADCOFC_CONTROL_6 register description at address offset 0xe50
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adcofc_control_6
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADCOFC_TAPS_FRA_0 : 8;
    ///< adcofc tap0 fractional value
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t ADCOFC_TAPS_FRA_1 : 8;
    ///< adcofc tap1 fractional  value
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t ADCOFC_TAPS_FRA_2 : 8;
    ///< adcofc tap2 fractional value
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_adcofc_ctrl_6_reg_t;

#define PMA_RXWORD_MSG_ADCOFC_CTRL_6_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_6_RD_MASK (0x00ffffffU)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_6_WR_MASK (0x00ffffffU)


///< adcofc tap0 fractional value
#define PMA_RXWORD_MSG_ADCOFC_CTRL_6_ADCOFC_TAPS_FRA_0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_6_ADCOFC_TAPS_FRA_0_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_6_ADCOFC_TAPS_FRA_0_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_6_ADCOFC_TAPS_FRA_0_BF_DEF (0x00000000)

///< adcofc tap1 fractional  value
#define PMA_RXWORD_MSG_ADCOFC_CTRL_6_ADCOFC_TAPS_FRA_1_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_6_ADCOFC_TAPS_FRA_1_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_6_ADCOFC_TAPS_FRA_1_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_6_ADCOFC_TAPS_FRA_1_BF_DEF (0x00000000)

///< adcofc tap2 fractional value
#define PMA_RXWORD_MSG_ADCOFC_CTRL_6_ADCOFC_TAPS_FRA_2_BF_OFF (16)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_6_ADCOFC_TAPS_FRA_2_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_6_ADCOFC_TAPS_FRA_2_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_6_ADCOFC_TAPS_FRA_2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_ADCOFC_CONTROL_7 register description at address offset 0xe54
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/adcofc_control_7
  * placeholder
  */

typedef union {
  struct {
    uint32_t ADCOFC_TAPS_FRA_3 : 8;
    ///< adcofc tap3 fractional value
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t ADCOFC_TAPS_FRA_4 : 8;
    ///< adcofc tap4 fractional  value
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t ADCOFC_TAPS_FRA_5 : 8;
    ///< adcofc tap5 fractional value
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_adcofc_ctrl_7_reg_t;

#define PMA_RXWORD_MSG_ADCOFC_CTRL_7_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_7_RD_MASK (0x00ffffffU)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_7_WR_MASK (0x00ffffffU)


///< adcofc tap3 fractional value
#define PMA_RXWORD_MSG_ADCOFC_CTRL_7_ADCOFC_TAPS_FRA_3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_7_ADCOFC_TAPS_FRA_3_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_7_ADCOFC_TAPS_FRA_3_BF_MSK (0x000000FF)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_7_ADCOFC_TAPS_FRA_3_BF_DEF (0x00000000)

///< adcofc tap4 fractional  value
#define PMA_RXWORD_MSG_ADCOFC_CTRL_7_ADCOFC_TAPS_FRA_4_BF_OFF ( 8)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_7_ADCOFC_TAPS_FRA_4_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_7_ADCOFC_TAPS_FRA_4_BF_MSK (0x0000FF00)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_7_ADCOFC_TAPS_FRA_4_BF_DEF (0x00000000)

///< adcofc tap5 fractional value
#define PMA_RXWORD_MSG_ADCOFC_CTRL_7_ADCOFC_TAPS_FRA_5_BF_OFF (16)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_7_ADCOFC_TAPS_FRA_5_BF_WID ( 8)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_7_ADCOFC_TAPS_FRA_5_BF_MSK (0x00FF0000)
#define PMA_RXWORD_MSG_ADCOFC_CTRL_7_ADCOFC_TAPS_FRA_5_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_RX_SIGDET_VENV_CTRL1 register description at address offset 0xef8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/rx_sigdet_venv_ctrl1
  * placeholder
  */

typedef union {
  struct {
    uint32_t RX_SIGDET_VOLTAGE_ENVELOPE_EN : 1;
    ///< Rx signal Det/los Volt Envelope Enable bit
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_SIGDET_VOLTAGE_ENVELOPE_CONT_MODE : 1;
    ///< Rx signal Det/los Volt Envelope cointinuous mode bit
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RX_SIGDET_VOLTAGE_ENVELOPE_ITER : 8;
    ///< Rx signal Det/los Volt Envelope number of iteration in cont. mode
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t RX_SIGDET_VOLTAGE_ENVELOPE_STATS_MAX : 8;
    ///< Rx signal Det/los Volt Envelope  number of cycles to collect stats
    ///< for each iter
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RX_SIGDET_VOLTAGE_ENVELOPE_SRC_OVRD_EN : 1;
    ///< Rx signal Det/los Volt Envelope Source data override Enable bit
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t RX_SIGDET_VOLTAGE_ENVELOPE_SRC_OVRD_VAL : 2;
    ///< Rx signal Det/los Volt Envelope source data override value
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t RX_SIGDET_VOLTAGE_ENVELOPE_RES_OVRD_EN : 1;
    ///< Rx signal Det/los Volt Envelope final result override Enable bit
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t RX_SIGDET_VOLTAGE_ENVELOPE_RES_OVRD_VAL : 1;
    ///< Rx signal Det/los Volt Envelope final result override value  bit
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t RX_SIGDET_VOLTAGE_ENVELOPE_DEBOUNCE_DET_VAL : 3;
    ///< Rx signal Det/los Volt Envelope debounce value for detection Enabled
    ///< when >1
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t RX_SIGDET_VOLTAGE_ENVELOPE_DEBOUNCE_LOS_VAL : 3;
    ///< Rx signal Det/los Volt Envelope debounce value for los  Enabled when
    ///< >1
    ///< AccessType="RW" BitOffset="26" ResetValue="0x0"
    uint32_t RX_SIGDET_VOLTAGE_ENVELOPE_DET_CNT_CLR : 1;
    ///< Rx signal Det/los Volt Envelope reset  bin count for detection
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
    uint32_t RX_SIGDET_VOLTAGE_ENVELOPE_LOS_CNT_CLR : 1;
    ///< Rx signal Det/los Volt Envelope reset  bin count for los
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t RX_SIGDET_VOLTAGE_ENVELOPE_PRIORITY : 1;
    ///< Rx signal Det/los Volt Envelope priority bit 1: prioritize DET 0:
    ///< prioritize:LOS
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_rx_sigdet_venv_ctrl1_reg_t;

#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_WR_MASK (0xffffffffU)


///< Rx signal Det/los Volt Envelope Enable bit
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RX_SIGDET_VOLTAGE_ENVELOPE_EN_BF_OFF ( 0)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RX_SIGDET_VOLTAGE_ENVELOPE_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RX_SIGDET_VOLTAGE_ENVELOPE_EN_BF_MSK (0x00000001)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RX_SIGDET_VOLTAGE_ENVELOPE_EN_BF_DEF (0x00000000)

///< Rx signal Det/los Volt Envelope cointinuous mode bit
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RX_SIGDET_VOLTAGE_ENVELOPE_CONT_MODE_BF_OFF ( 1)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RX_SIGDET_VOLTAGE_ENVELOPE_CONT_MODE_BF_WID ( 1)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RX_SIGDET_VOLTAGE_ENVELOPE_CONT_MODE_BF_MSK (0x00000002)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RX_SIGDET_VOLTAGE_ENVELOPE_CONT_MODE_BF_DEF (0x00000000)

///< Rx signal Det/los Volt Envelope number of iteration in cont. mode
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RX_SIGDET_VOLTAGE_ENVELOPE_ITER_BF_OFF ( 2)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RX_SIGDET_VOLTAGE_ENVELOPE_ITER_BF_WID ( 8)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RX_SIGDET_VOLTAGE_ENVELOPE_ITER_BF_MSK (0x000003FC)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RX_SIGDET_VOLTAGE_ENVELOPE_ITER_BF_DEF (0x00000000)

///< Rx signal Det/los Volt Envelope  number of cycles to collect stats
///< for each iter
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RX_SIGDET_VOLTAGE_ENVELOPE_STATS_MAX_BF_OFF (10)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RX_SIGDET_VOLTAGE_ENVELOPE_STATS_MAX_BF_WID ( 8)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RX_SIGDET_VOLTAGE_ENVELOPE_STATS_MAX_BF_MSK (0x0003FC00)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RX_SIGDET_VOLTAGE_ENVELOPE_STATS_MAX_BF_DEF (0x00000000)

///< Rx signal Det/los Volt Envelope Source data override Enable bit
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RX_SIGDET_VOLTAGE_ENVELOPE_SRC_OVRD_EN_BF_OFF (18)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RX_SIGDET_VOLTAGE_ENVELOPE_SRC_OVRD_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RX_SIGDET_VOLTAGE_ENVELOPE_SRC_OVRD_EN_BF_MSK (0x00040000)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RX_SIGDET_VOLTAGE_ENVELOPE_SRC_OVRD_EN_BF_DEF (0x00000000)

///< Rx signal Det/los Volt Envelope source data override value
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RX_SIGDET_VOLTAGE_ENVELOPE_SRC_OVRD_VAL_BF_OFF (19)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RX_SIGDET_VOLTAGE_ENVELOPE_SRC_OVRD_VAL_BF_WID ( 2)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RX_SIGDET_VOLTAGE_ENVELOPE_SRC_OVRD_VAL_BF_MSK (0x00180000)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RX_SIGDET_VOLTAGE_ENVELOPE_SRC_OVRD_VAL_BF_DEF (0x00000000)

///< Rx signal Det/los Volt Envelope final result override Enable bit
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RX_SIGDET_VOLTAGE_ENVELOPE_RES_OVRD_EN_BF_OFF (21)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RX_SIGDET_VOLTAGE_ENVELOPE_RES_OVRD_EN_BF_WID ( 1)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RX_SIGDET_VOLTAGE_ENVELOPE_RES_OVRD_EN_BF_MSK (0x00200000)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RX_SIGDET_VOLTAGE_ENVELOPE_RES_OVRD_EN_BF_DEF (0x00000000)

///< Rx signal Det/los Volt Envelope final result override value  bit
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RX_SIGDET_VOLTAGE_ENVELOPE_RES_OVRD_VAL_BF_OFF (22)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RX_SIGDET_VOLTAGE_ENVELOPE_RES_OVRD_VAL_BF_WID ( 1)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RX_SIGDET_VOLTAGE_ENVELOPE_RES_OVRD_VAL_BF_MSK (0x00400000)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RX_SIGDET_VOLTAGE_ENVELOPE_RES_OVRD_VAL_BF_DEF (0x00000000)

///< Rx signal Det/los Volt Envelope debounce value for detection Enabled
///< when >1
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RX_SIGDET_VOLTAGE_ENVELOPE_DEBOUNCE_DET_VAL_BF_OFF (23)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RX_SIGDET_VOLTAGE_ENVELOPE_DEBOUNCE_DET_VAL_BF_WID ( 3)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RX_SIGDET_VOLTAGE_ENVELOPE_DEBOUNCE_DET_VAL_BF_MSK (0x03800000)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RX_SIGDET_VOLTAGE_ENVELOPE_DEBOUNCE_DET_VAL_BF_DEF (0x00000000)

///< Rx signal Det/los Volt Envelope debounce value for los  Enabled when
///< >1
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RX_SIGDET_VOLTAGE_ENVELOPE_DEBOUNCE_LOS_VAL_BF_OFF (26)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RX_SIGDET_VOLTAGE_ENVELOPE_DEBOUNCE_LOS_VAL_BF_WID ( 3)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RX_SIGDET_VOLTAGE_ENVELOPE_DEBOUNCE_LOS_VAL_BF_MSK (0x1C000000)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RX_SIGDET_VOLTAGE_ENVELOPE_DEBOUNCE_LOS_VAL_BF_DEF (0x00000000)

///< Rx signal Det/los Volt Envelope reset  bin count for detection
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RX_SIGDET_VOLTAGE_ENVELOPE_DET_CNT_CLR_BF_OFF (29)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RX_SIGDET_VOLTAGE_ENVELOPE_DET_CNT_CLR_BF_WID ( 1)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RX_SIGDET_VOLTAGE_ENVELOPE_DET_CNT_CLR_BF_MSK (0x20000000)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RX_SIGDET_VOLTAGE_ENVELOPE_DET_CNT_CLR_BF_DEF (0x00000000)

///< Rx signal Det/los Volt Envelope reset  bin count for los
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RX_SIGDET_VOLTAGE_ENVELOPE_LOS_CNT_CLR_BF_OFF (30)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RX_SIGDET_VOLTAGE_ENVELOPE_LOS_CNT_CLR_BF_WID ( 1)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RX_SIGDET_VOLTAGE_ENVELOPE_LOS_CNT_CLR_BF_MSK (0x40000000)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RX_SIGDET_VOLTAGE_ENVELOPE_LOS_CNT_CLR_BF_DEF (0x00000000)

///< Rx signal Det/los Volt Envelope priority bit 1: prioritize DET 0:
///< prioritize:LOS
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RX_SIGDET_VOLTAGE_ENVELOPE_PRIORITY_BF_OFF (31)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RX_SIGDET_VOLTAGE_ENVELOPE_PRIORITY_BF_WID ( 1)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RX_SIGDET_VOLTAGE_ENVELOPE_PRIORITY_BF_MSK (0x80000000)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_RX_SIGDET_VOLTAGE_ENVELOPE_PRIORITY_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_RX_SIGDET_VENV_CTRL2 register description at address offset 0xefc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/rx_sigdet_venv_ctrl2
  * placeholder
  */

typedef union {
  struct {
    uint32_t RX_SIGDET_VOLTAGE_ENVELOPE_DET_PLEVEL : 9;
    ///< Rx signal Det/los Volt Envelope upper level limit for detection (unsigned
    ///< )
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_SIGDET_VOLTAGE_ENVELOPE_DET_NLEVEL : 9;
    ///< Rx signal Det/los Volt Envelope lower level limit detection (unsigned)
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t RX_SIGDET_VOLTAGE_ENVELOPE_DET_THRESH : 14;
    ///< Rx signal Det/los Volt Envelope lower level limit detection threshold
    ///< (unsigned )
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_rx_sigdet_venv_ctrl2_reg_t;

#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL2_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL2_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL2_WR_MASK (0xffffffffU)


///< Rx signal Det/los Volt Envelope upper level limit for detection (unsigned
///< )
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL2_RX_SIGDET_VOLTAGE_ENVELOPE_DET_PLVL_BF_OFF ( 0)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL2_RX_SIGDET_VOLTAGE_ENVELOPE_DET_PLVL_BF_WID ( 9)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL2_RX_SIGDET_VOLTAGE_ENVELOPE_DET_PLVL_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL2_RX_SIGDET_VOLTAGE_ENVELOPE_DET_PLVL_BF_DEF (0x00000000)

///< Rx signal Det/los Volt Envelope lower level limit detection (unsigned)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL2_RX_SIGDET_VOLTAGE_ENVELOPE_DET_NLVL_BF_OFF ( 9)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL2_RX_SIGDET_VOLTAGE_ENVELOPE_DET_NLVL_BF_WID ( 9)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL2_RX_SIGDET_VOLTAGE_ENVELOPE_DET_NLVL_BF_MSK (0x0003FE00)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL2_RX_SIGDET_VOLTAGE_ENVELOPE_DET_NLVL_BF_DEF (0x00000000)

///< Rx signal Det/los Volt Envelope lower level limit detection threshold
///< (unsigned )
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL2_RX_SIGDET_VOLTAGE_ENVELOPE_DET_THRESH_BF_OFF (18)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL2_RX_SIGDET_VOLTAGE_ENVELOPE_DET_THRESH_BF_WID (14)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL2_RX_SIGDET_VOLTAGE_ENVELOPE_DET_THRESH_BF_MSK (0xFFFC0000)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL2_RX_SIGDET_VOLTAGE_ENVELOPE_DET_THRESH_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_RX_SIGDET_VENV_CTRL3 register description at address offset 0xf00
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/rx_sigdet_venv_ctrl3
  * placeholder
  */

typedef union {
  struct {
    uint32_t RX_SIGDET_VOLTAGE_ENVELOPE_LOS_PLEVEL : 9;
    ///< Rx signal Det/los Volt Envelope upper level limit for los (unsigned
    ///< )
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_SIGDET_VOLTAGE_ENVELOPE_LOS_NLEVEL : 9;
    ///< Rx signal Det/los Volt Envelope lower level limit los (unsigned)
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t RX_SIGDET_VOLTAGE_ENVELOPE_LOS_THRESH : 14;
    ///< Rx signal Det/los Volt Envelope lower level limit los  threshold
    ///< (unsigned )
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_rx_sigdet_venv_ctrl3_reg_t;

#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL3_WR_MASK (0xffffffffU)


///< Rx signal Det/los Volt Envelope upper level limit for los (unsigned
///< )
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL3_RX_SIGDET_VOLTAGE_ENVELOPE_LOS_PLVL_BF_OFF ( 0)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL3_RX_SIGDET_VOLTAGE_ENVELOPE_LOS_PLVL_BF_WID ( 9)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL3_RX_SIGDET_VOLTAGE_ENVELOPE_LOS_PLVL_BF_MSK (0x000001FF)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL3_RX_SIGDET_VOLTAGE_ENVELOPE_LOS_PLVL_BF_DEF (0x00000000)

///< Rx signal Det/los Volt Envelope lower level limit los (unsigned)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL3_RX_SIGDET_VOLTAGE_ENVELOPE_LOS_NLVL_BF_OFF ( 9)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL3_RX_SIGDET_VOLTAGE_ENVELOPE_LOS_NLVL_BF_WID ( 9)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL3_RX_SIGDET_VOLTAGE_ENVELOPE_LOS_NLVL_BF_MSK (0x0003FE00)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL3_RX_SIGDET_VOLTAGE_ENVELOPE_LOS_NLVL_BF_DEF (0x00000000)

///< Rx signal Det/los Volt Envelope lower level limit los  threshold
///< (unsigned )
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL3_RX_SIGDET_VOLTAGE_ENVELOPE_LOS_THRESH_BF_OFF (18)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL3_RX_SIGDET_VOLTAGE_ENVELOPE_LOS_THRESH_BF_WID (14)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL3_RX_SIGDET_VOLTAGE_ENVELOPE_LOS_THRESH_BF_MSK (0xFFFC0000)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL3_RX_SIGDET_VOLTAGE_ENVELOPE_LOS_THRESH_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_RX_SIGDET_VENV_STATUS register description at address offset 0xf04
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/rx_sigdet_venv_status
  * placeholder
  */

typedef union {
  struct {
    uint32_t RX_SIGDET_VOLTAGE_ENVELOPE_DET_CNT : 14;
    ///< Rx signal Det/los Volt Envelope detection bin counter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RX_SIGDET_VOLTAGE_ENVELOPE_LOS_CNT : 14;
    ///< Rx signal Det/los Volt Envelope los  bin counter
    ///< AccessType="RO/V" BitOffset="14" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_rx_sigdet_venv_stat_reg_t;

#define PMA_RXWORD_MSG_RX_SIGDET_VENV_STAT_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_STAT_RD_MASK (0x0fffffffU)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_STAT_WR_MASK (0x00000000U)


///< Rx signal Det/los Volt Envelope detection bin counter
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_STAT_RX_SIGDET_VOLTAGE_ENVELOPE_DET_CNT_BF_OFF ( 0)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_STAT_RX_SIGDET_VOLTAGE_ENVELOPE_DET_CNT_BF_WID (14)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_STAT_RX_SIGDET_VOLTAGE_ENVELOPE_DET_CNT_BF_MSK (0x00003FFF)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_STAT_RX_SIGDET_VOLTAGE_ENVELOPE_DET_CNT_BF_DEF (0x00000000)

///< Rx signal Det/los Volt Envelope los  bin counter
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_STAT_RX_SIGDET_VOLTAGE_ENVELOPE_LOS_CNT_BF_OFF (14)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_STAT_RX_SIGDET_VOLTAGE_ENVELOPE_LOS_CNT_BF_WID (14)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_STAT_RX_SIGDET_VOLTAGE_ENVELOPE_LOS_CNT_BF_MSK (0x0FFFC000)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_STAT_RX_SIGDET_VOLTAGE_ENVELOPE_LOS_CNT_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_RX_SIGDET_VENV_STATUS_CLR register description at address offset 0xf08
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/rx_sigdet_venv_status_clr
  * placeholder
  */

typedef union {
  struct {
    uint32_t RX_SIGDET_VOLTAGE_ENVELOPE : 1;
    ///< Rx signal Det/los Volt Envelope linidcation Not debounced. Sticky
    ///< on Done from first iteration
    ///< AccessType="RO/C/V" BitOffset="0" ResetValue="0x0"
    uint32_t RX_SIGDET_VOLTAGE_ENVELOPE_DEBOUNCE : 1;
    ///< Rx signal Det/los Volt Envelope linidcation  debounced. Sticky on
    ///< Iter Done.
    ///< AccessType="RO/C/V" BitOffset="1" ResetValue="0x0"
    uint32_t RX_SIGDET_VOLTAGE_ENVELOPE_ERROR : 1;
    ///< Rx signal Det/los Volt Envelope error when both det and los are identified
    ///< at the same stat cycle. (block will sue priority )
    ///< AccessType="RO/C/V" BitOffset="2" ResetValue="0x0"
    uint32_t RX_SIGDET_VOLTAGE_ENVELOPE_DONE : 1;
    ///< Rx signal Det/los Volt Envelope all 1 stats cycle  done
    ///< AccessType="RO/C/V" BitOffset="3" ResetValue="0x0"
    uint32_t RX_SIGDET_VOLTAGE_ENVELOPE_ITER_DONE : 1;
    ///< Rx signal Det/los Volt Envelope all iterations done
    ///< AccessType="RO/C/V" BitOffset="4" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} pma_rxword_msg_rx_sigdet_venv_stat_clr_reg_t;

#define PMA_RXWORD_MSG_RX_SIGDET_VENV_STAT_CLR_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_STAT_CLR_RD_MASK (0x0000001fU)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_STAT_CLR_WR_MASK (0x00000000U)


///< Rx signal Det/los Volt Envelope linidcation Not debounced. Sticky
///< on Done from first iteration
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_STAT_CLR_RX_SIGDET_VOLTAGE_ENVELOPE_BF_OFF ( 0)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_STAT_CLR_RX_SIGDET_VOLTAGE_ENVELOPE_BF_WID ( 1)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_STAT_CLR_RX_SIGDET_VOLTAGE_ENVELOPE_BF_MSK (0x00000001)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_STAT_CLR_RX_SIGDET_VOLTAGE_ENVELOPE_BF_DEF (0x00000000)

///< Rx signal Det/los Volt Envelope linidcation  debounced. Sticky on
///< Iter Done.
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_STAT_CLR_RX_SIGDET_VOLTAGE_ENVELOPE_DEBOUNCE_BF_OFF ( 1)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_STAT_CLR_RX_SIGDET_VOLTAGE_ENVELOPE_DEBOUNCE_BF_WID ( 1)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_STAT_CLR_RX_SIGDET_VOLTAGE_ENVELOPE_DEBOUNCE_BF_MSK (0x00000002)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_STAT_CLR_RX_SIGDET_VOLTAGE_ENVELOPE_DEBOUNCE_BF_DEF (0x00000000)

///< Rx signal Det/los Volt Envelope error when both det and los are identified
///< at the same stat cycle. (block will sue priority )
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_STAT_CLR_RX_SIGDET_VOLTAGE_ENVELOPE_ERR_BF_OFF ( 2)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_STAT_CLR_RX_SIGDET_VOLTAGE_ENVELOPE_ERR_BF_WID ( 1)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_STAT_CLR_RX_SIGDET_VOLTAGE_ENVELOPE_ERR_BF_MSK (0x00000004)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_STAT_CLR_RX_SIGDET_VOLTAGE_ENVELOPE_ERR_BF_DEF (0x00000000)

///< Rx signal Det/los Volt Envelope all 1 stats cycle  done
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_STAT_CLR_RX_SIGDET_VOLTAGE_ENVELOPE_DONE_BF_OFF ( 3)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_STAT_CLR_RX_SIGDET_VOLTAGE_ENVELOPE_DONE_BF_WID ( 1)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_STAT_CLR_RX_SIGDET_VOLTAGE_ENVELOPE_DONE_BF_MSK (0x00000008)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_STAT_CLR_RX_SIGDET_VOLTAGE_ENVELOPE_DONE_BF_DEF (0x00000000)

///< Rx signal Det/los Volt Envelope all iterations done
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_STAT_CLR_RX_SIGDET_VOLTAGE_ENVELOPE_ITER_DONE_BF_OFF ( 4)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_STAT_CLR_RX_SIGDET_VOLTAGE_ENVELOPE_ITER_DONE_BF_WID ( 1)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_STAT_CLR_RX_SIGDET_VOLTAGE_ENVELOPE_ITER_DONE_BF_MSK (0x00000010)
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_STAT_CLR_RX_SIGDET_VOLTAGE_ENVELOPE_ITER_DONE_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_RXWORD_RW_SPARE_0 register description at address offset 0xfd8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/rxword_rw_spare_0
  * Spare RW register
  */

typedef union {
  struct {
    uint32_t RXWORD_RW_SPARE_0 : 32;
    ///< Spare register.  Reseved for future
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_rxword_rw_spare_0_reg_t;

#define PMA_RXWORD_MSG_RXWORD_RW_SPARE_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_RXWORD_RW_SPARE_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_RXWORD_RW_SPARE_0_WR_MASK (0xffffffffU)


///< Spare register.  Reseved for future
#define PMA_RXWORD_MSG_RXWORD_RW_SPARE_0_RXWORD_RW_SPARE_0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_RXWORD_RW_SPARE_0_RXWORD_RW_SPARE_0_BF_WID (32)
#define PMA_RXWORD_MSG_RXWORD_RW_SPARE_0_RXWORD_RW_SPARE_0_BF_MSK (0xFFFFFFFF)
#define PMA_RXWORD_MSG_RXWORD_RW_SPARE_0_RXWORD_RW_SPARE_0_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_RXWORD_RW_SPARE_1 register description at address offset 0xfdc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/rxword_rw_spare_1
  * Spare RW register
  */

typedef union {
  struct {
    uint32_t RXWORD_RW_SPARE_1 : 32;
    ///< Spare register.  Reseved for future
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_rxword_rw_spare_1_reg_t;

#define PMA_RXWORD_MSG_RXWORD_RW_SPARE_1_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_RXWORD_RW_SPARE_1_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_RXWORD_RW_SPARE_1_WR_MASK (0xffffffffU)


///< Spare register.  Reseved for future
#define PMA_RXWORD_MSG_RXWORD_RW_SPARE_1_RXWORD_RW_SPARE_1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_RXWORD_RW_SPARE_1_RXWORD_RW_SPARE_1_BF_WID (32)
#define PMA_RXWORD_MSG_RXWORD_RW_SPARE_1_RXWORD_RW_SPARE_1_BF_MSK (0xFFFFFFFF)
#define PMA_RXWORD_MSG_RXWORD_RW_SPARE_1_RXWORD_RW_SPARE_1_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_RXWORD_RW_SPARE_2 register description at address offset 0xfe0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/rxword_rw_spare_2
  * Spare RW register
  */

typedef union {
  struct {
    uint32_t RXWORD_RW_SPARE_2 : 32;
    ///< Spare register.  Reseved for future
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_rxword_rw_spare_2_reg_t;

#define PMA_RXWORD_MSG_RXWORD_RW_SPARE_2_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_RXWORD_RW_SPARE_2_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_RXWORD_RW_SPARE_2_WR_MASK (0xffffffffU)


///< Spare register.  Reseved for future
#define PMA_RXWORD_MSG_RXWORD_RW_SPARE_2_RXWORD_RW_SPARE_2_BF_OFF ( 0)
#define PMA_RXWORD_MSG_RXWORD_RW_SPARE_2_RXWORD_RW_SPARE_2_BF_WID (32)
#define PMA_RXWORD_MSG_RXWORD_RW_SPARE_2_RXWORD_RW_SPARE_2_BF_MSK (0xFFFFFFFF)
#define PMA_RXWORD_MSG_RXWORD_RW_SPARE_2_RXWORD_RW_SPARE_2_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_RXWORD_RW_SPARE_3 register description at address offset 0xfe4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/rxword_rw_spare_3
  * Spare RW register
  */

typedef union {
  struct {
    uint32_t RXWORD_RW_SPARE_3 : 32;
    ///< Spare register.  Reseved for future
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_rxword_rw_spare_3_reg_t;

#define PMA_RXWORD_MSG_RXWORD_RW_SPARE_3_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_RXWORD_RW_SPARE_3_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_RXWORD_RW_SPARE_3_WR_MASK (0xffffffffU)


///< Spare register.  Reseved for future
#define PMA_RXWORD_MSG_RXWORD_RW_SPARE_3_RXWORD_RW_SPARE_3_BF_OFF ( 0)
#define PMA_RXWORD_MSG_RXWORD_RW_SPARE_3_RXWORD_RW_SPARE_3_BF_WID (32)
#define PMA_RXWORD_MSG_RXWORD_RW_SPARE_3_RXWORD_RW_SPARE_3_BF_MSK (0xFFFFFFFF)
#define PMA_RXWORD_MSG_RXWORD_RW_SPARE_3_RXWORD_RW_SPARE_3_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_RXWORD_RO_SPARE_0 register description at address offset 0xfe8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/rxword_ro_spare_0
  * Spare RO register
  */

typedef union {
  struct {
    uint32_t RXWORD_RO_SPARE_0 : 32;
    ///< Spare register.  Reseved for future
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_rxword_ro_spare_0_reg_t;

#define PMA_RXWORD_MSG_RXWORD_RO_SPARE_0_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_RXWORD_RO_SPARE_0_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_RXWORD_RO_SPARE_0_WR_MASK (0x00000000U)


///< Spare register.  Reseved for future
#define PMA_RXWORD_MSG_RXWORD_RO_SPARE_0_RXWORD_RO_SPARE_0_BF_OFF ( 0)
#define PMA_RXWORD_MSG_RXWORD_RO_SPARE_0_RXWORD_RO_SPARE_0_BF_WID (32)
#define PMA_RXWORD_MSG_RXWORD_RO_SPARE_0_RXWORD_RO_SPARE_0_BF_MSK (0xFFFFFFFF)
#define PMA_RXWORD_MSG_RXWORD_RO_SPARE_0_RXWORD_RO_SPARE_0_BF_DEF (0x00000000)


/** @brief PMA_RXWORD_REGS_MSG_PMA_RXWORD_REGS_RXWORD_RO_SPARE_1 register description at address offset 0xfec
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_RXWORD_regs_MSG/PMA_RXWORD_regs/rxword_ro_spare_1
  * Spare RO register
  */

typedef union {
  struct {
    uint32_t RXWORD_RO_SPARE_1 : 32;
    ///< Spare register.  Reseved for future
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_rxword_msg_rxword_ro_spare_1_reg_t;

#define PMA_RXWORD_MSG_RXWORD_RO_SPARE_1_DEFAULT (0x00000000U)
#define PMA_RXWORD_MSG_RXWORD_RO_SPARE_1_RD_MASK (0xffffffffU)
#define PMA_RXWORD_MSG_RXWORD_RO_SPARE_1_WR_MASK (0x00000000U)


///< Spare register.  Reseved for future
#define PMA_RXWORD_MSG_RXWORD_RO_SPARE_1_RXWORD_RO_SPARE_1_BF_OFF ( 0)
#define PMA_RXWORD_MSG_RXWORD_RO_SPARE_1_RXWORD_RO_SPARE_1_BF_WID (32)
#define PMA_RXWORD_MSG_RXWORD_RO_SPARE_1_RXWORD_RO_SPARE_1_BF_MSK (0xFFFFFFFF)
#define PMA_RXWORD_MSG_RXWORD_RO_SPARE_1_RXWORD_RO_SPARE_1_BF_DEF (0x00000000)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define PMA_RXWORD_MSG_FFE_COEFF_SET0_0_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set0_0_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET0_0_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_1_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set0_1_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET0_1_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_2_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set0_2_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET0_2_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_3_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set0_3_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET0_3_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_4_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set0_4_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET0_4_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_0_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set1_0_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET1_0_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_1_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set1_1_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET1_1_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_2_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set1_2_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET1_2_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_3_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set1_3_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET1_3_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_4_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set1_4_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET1_4_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_0_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set2_0_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET2_0_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_1_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set2_1_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET2_1_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_2_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set2_2_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET2_2_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_3_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set2_3_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET2_3_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_4_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set2_4_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET2_4_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_0_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set3_0_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET3_0_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_1_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set3_1_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET3_1_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_2_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set3_2_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET3_2_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_3_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set3_3_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET3_3_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_4_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set3_4_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET3_4_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_0_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set4_0_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET4_0_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_1_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set4_1_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET4_1_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_2_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set4_2_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET4_2_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_3_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set4_3_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET4_3_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_4_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set4_4_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET4_4_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_0_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set5_0_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET5_0_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_1_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set5_1_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET5_1_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_2_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set5_2_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET5_2_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_3_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set5_3_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET5_3_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_4_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set5_4_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET5_4_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_0_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set6_0_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET6_0_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_1_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set6_1_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET6_1_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_2_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set6_2_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET6_2_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_3_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set6_3_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET6_3_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_4_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set6_4_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET6_4_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_0_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set7_0_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET7_0_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_1_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set7_1_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET7_1_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_2_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set7_2_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET7_2_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_3_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set7_3_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET7_3_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_4_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set7_4_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET7_4_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_0_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set8_0_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET8_0_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_1_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set8_1_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET8_1_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_2_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set8_2_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET8_2_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_3_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set8_3_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET8_3_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_4_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set8_4_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET8_4_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_0_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set9_0_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET9_0_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_1_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set9_1_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET9_1_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_2_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set9_2_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET9_2_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_3_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set9_3_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET9_3_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_4_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set9_4_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET9_4_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_0_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set10_0_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET10_0_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_1_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set10_1_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET10_1_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_2_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set10_2_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET10_2_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_3_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set10_3_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET10_3_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_4_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set10_4_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET10_4_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_0_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set11_0_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET11_0_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_1_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set11_1_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET11_1_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_2_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set11_2_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET11_2_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_3_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set11_3_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET11_3_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_4_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set11_4_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET11_4_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_0_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set12_0_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET12_0_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_1_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set12_1_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET12_1_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_2_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set12_2_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET12_2_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_3_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set12_3_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET12_3_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_4_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set12_4_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET12_4_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_0_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set13_0_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET13_0_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_1_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set13_1_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET13_1_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_2_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set13_2_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET13_2_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_3_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set13_3_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET13_3_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_4_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set13_4_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET13_4_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_0_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set14_0_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET14_0_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_1_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set14_1_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET14_1_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_2_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set14_2_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET14_2_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_3_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set14_3_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET14_3_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_4_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set14_4_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET14_4_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_0_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set15_0_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET15_0_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_1_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set15_1_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET15_1_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_2_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set15_2_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET15_2_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_3_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set15_3_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET15_3_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_4_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set15_4_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET15_4_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET0_REG(_BASE) ((pma_rxword_msg_ffe_slice_lvl_set0_reg_t*) PMA_RXWORD_MSG_FFE_SLICE_LVL_SET0_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET1_REG(_BASE) ((pma_rxword_msg_ffe_slice_lvl_set1_reg_t*) PMA_RXWORD_MSG_FFE_SLICE_LVL_SET1_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET2_REG(_BASE) ((pma_rxword_msg_ffe_slice_lvl_set2_reg_t*) PMA_RXWORD_MSG_FFE_SLICE_LVL_SET2_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET3_REG(_BASE) ((pma_rxword_msg_ffe_slice_lvl_set3_reg_t*) PMA_RXWORD_MSG_FFE_SLICE_LVL_SET3_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET4_REG(_BASE) ((pma_rxword_msg_ffe_slice_lvl_set4_reg_t*) PMA_RXWORD_MSG_FFE_SLICE_LVL_SET4_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET5_REG(_BASE) ((pma_rxword_msg_ffe_slice_lvl_set5_reg_t*) PMA_RXWORD_MSG_FFE_SLICE_LVL_SET5_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET6_REG(_BASE) ((pma_rxword_msg_ffe_slice_lvl_set6_reg_t*) PMA_RXWORD_MSG_FFE_SLICE_LVL_SET6_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET7_REG(_BASE) ((pma_rxword_msg_ffe_slice_lvl_set7_reg_t*) PMA_RXWORD_MSG_FFE_SLICE_LVL_SET7_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET8_REG(_BASE) ((pma_rxword_msg_ffe_slice_lvl_set8_reg_t*) PMA_RXWORD_MSG_FFE_SLICE_LVL_SET8_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET9_REG(_BASE) ((pma_rxword_msg_ffe_slice_lvl_set9_reg_t*) PMA_RXWORD_MSG_FFE_SLICE_LVL_SET9_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET10_REG(_BASE) ((pma_rxword_msg_ffe_slice_lvl_set10_reg_t*) PMA_RXWORD_MSG_FFE_SLICE_LVL_SET10_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET11_REG(_BASE) ((pma_rxword_msg_ffe_slice_lvl_set11_reg_t*) PMA_RXWORD_MSG_FFE_SLICE_LVL_SET11_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET12_REG(_BASE) ((pma_rxword_msg_ffe_slice_lvl_set12_reg_t*) PMA_RXWORD_MSG_FFE_SLICE_LVL_SET12_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET13_REG(_BASE) ((pma_rxword_msg_ffe_slice_lvl_set13_reg_t*) PMA_RXWORD_MSG_FFE_SLICE_LVL_SET13_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET14_REG(_BASE) ((pma_rxword_msg_ffe_slice_lvl_set14_reg_t*) PMA_RXWORD_MSG_FFE_SLICE_LVL_SET14_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_SLICE_LVL_SET15_REG(_BASE) ((pma_rxword_msg_ffe_slice_lvl_set15_reg_t*) PMA_RXWORD_MSG_FFE_SLICE_LVL_SET15_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET0_REG(_BASE) ((pma_rxword_msg_ffe_err_lvl_m1m3_set0_reg_t*) PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET0_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET0_REG(_BASE) ((pma_rxword_msg_ffe_err_lvl_p1p3_set0_reg_t*) PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET0_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET1_REG(_BASE) ((pma_rxword_msg_ffe_err_lvl_m1m3_set1_reg_t*) PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET1_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET1_REG(_BASE) ((pma_rxword_msg_ffe_err_lvl_p1p3_set1_reg_t*) PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET1_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET2_REG(_BASE) ((pma_rxword_msg_ffe_err_lvl_m1m3_set2_reg_t*) PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET2_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET2_REG(_BASE) ((pma_rxword_msg_ffe_err_lvl_p1p3_set2_reg_t*) PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET2_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET3_REG(_BASE) ((pma_rxword_msg_ffe_err_lvl_m1m3_set3_reg_t*) PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET3_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET3_REG(_BASE) ((pma_rxword_msg_ffe_err_lvl_p1p3_set3_reg_t*) PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET3_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET4_REG(_BASE) ((pma_rxword_msg_ffe_err_lvl_m1m3_set4_reg_t*) PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET4_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET4_REG(_BASE) ((pma_rxword_msg_ffe_err_lvl_p1p3_set4_reg_t*) PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET4_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET5_REG(_BASE) ((pma_rxword_msg_ffe_err_lvl_m1m3_set5_reg_t*) PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET5_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET5_REG(_BASE) ((pma_rxword_msg_ffe_err_lvl_p1p3_set5_reg_t*) PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET5_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET6_REG(_BASE) ((pma_rxword_msg_ffe_err_lvl_m1m3_set6_reg_t*) PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET6_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET6_REG(_BASE) ((pma_rxword_msg_ffe_err_lvl_p1p3_set6_reg_t*) PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET6_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET7_REG(_BASE) ((pma_rxword_msg_ffe_err_lvl_m1m3_set7_reg_t*) PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET7_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET7_REG(_BASE) ((pma_rxword_msg_ffe_err_lvl_p1p3_set7_reg_t*) PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET7_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET8_REG(_BASE) ((pma_rxword_msg_ffe_err_lvl_m1m3_set8_reg_t*) PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET8_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET8_REG(_BASE) ((pma_rxword_msg_ffe_err_lvl_p1p3_set8_reg_t*) PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET8_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET9_REG(_BASE) ((pma_rxword_msg_ffe_err_lvl_m1m3_set9_reg_t*) PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET9_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET9_REG(_BASE) ((pma_rxword_msg_ffe_err_lvl_p1p3_set9_reg_t*) PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET9_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET10_REG(_BASE) ((pma_rxword_msg_ffe_err_lvl_m1m3_set10_reg_t*) PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET10_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET10_REG(_BASE) ((pma_rxword_msg_ffe_err_lvl_p1p3_set10_reg_t*) PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET10_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET11_REG(_BASE) ((pma_rxword_msg_ffe_err_lvl_m1m3_set11_reg_t*) PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET11_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET11_REG(_BASE) ((pma_rxword_msg_ffe_err_lvl_p1p3_set11_reg_t*) PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET11_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET12_REG(_BASE) ((pma_rxword_msg_ffe_err_lvl_m1m3_set12_reg_t*) PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET12_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET12_REG(_BASE) ((pma_rxword_msg_ffe_err_lvl_p1p3_set12_reg_t*) PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET12_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET13_REG(_BASE) ((pma_rxword_msg_ffe_err_lvl_m1m3_set13_reg_t*) PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET13_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET13_REG(_BASE) ((pma_rxword_msg_ffe_err_lvl_p1p3_set13_reg_t*) PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET13_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET14_REG(_BASE) ((pma_rxword_msg_ffe_err_lvl_m1m3_set14_reg_t*) PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET14_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET14_REG(_BASE) ((pma_rxword_msg_ffe_err_lvl_p1p3_set14_reg_t*) PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET14_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET15_REG(_BASE) ((pma_rxword_msg_ffe_err_lvl_m1m3_set15_reg_t*) PMA_RXWORD_MSG_FFE_ERR_LVL_M1M3_SET15_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET15_REG(_BASE) ((pma_rxword_msg_ffe_err_lvl_p1p3_set15_reg_t*) PMA_RXWORD_MSG_FFE_ERR_LVL_P1P3_SET15_ADR(_BASE))
#define PMA_RXWORD_MSG_RX_DUMP_MEM_CTRL_REG(_BASE) ((pma_rxword_msg_rx_dump_mem_ctrl_reg_t*) PMA_RXWORD_MSG_RX_DUMP_MEM_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_RX_DUMP_MEM_APB_RD_DATA_REG(_BASE) ((pma_rxword_msg_rx_dump_mem_apb_rd_data_reg_t*) PMA_RXWORD_MSG_RX_DUMP_MEM_APB_RD_DATA_ADR(_BASE))
#define PMA_RXWORD_MSG_RX_DUMP_MEM_APB_RD_EN_REG(_BASE) ((pma_rxword_msg_rx_dump_mem_apb_rd_en_reg_t*) PMA_RXWORD_MSG_RX_DUMP_MEM_APB_RD_EN_ADR(_BASE))
#define PMA_RXWORD_MSG_RX_DUMP_MEM_APB_EN_REG(_BASE) ((pma_rxword_msg_rx_dump_mem_apb_en_reg_t*) PMA_RXWORD_MSG_RX_DUMP_MEM_APB_EN_ADR(_BASE))
#define PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_REG(_BASE) ((pma_rxword_msg_rx_data_path_ctrl_1_reg_t*) PMA_RXWORD_MSG_RX_DATA_PATH_CTRL_1_ADR(_BASE))
#define PMA_RXWORD_MSG_ADP_MSB_LSB_SWAP_CTRL_REG(_BASE) ((pma_rxword_msg_adp_msb_lsb_swap_ctrl_reg_t*) PMA_RXWORD_MSG_ADP_MSB_LSB_SWAP_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION1_REG(_BASE) ((pma_rxword_msg_ffe_float_tap_position1_reg_t*) PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION1_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION2_REG(_BASE) ((pma_rxword_msg_ffe_float_tap_position2_reg_t*) PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION2_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION3_REG(_BASE) ((pma_rxword_msg_ffe_float_tap_position3_reg_t*) PMA_RXWORD_MSG_FFE_FLOAT_TAP_POSITION3_ADR(_BASE))
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_0_REG(_BASE) ((pma_rxword_msg_rxeq_clk_gating_ctrl_0_reg_t*) PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_0_ADR(_BASE))
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_1_REG(_BASE) ((pma_rxword_msg_rxeq_clk_gating_ctrl_1_reg_t*) PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_1_ADR(_BASE))
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_2_REG(_BASE) ((pma_rxword_msg_rxeq_clk_gating_ctrl_2_reg_t*) PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_2_ADR(_BASE))
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_3_REG(_BASE) ((pma_rxword_msg_rxeq_clk_gating_ctrl_3_reg_t*) PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_3_ADR(_BASE))
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_4_REG(_BASE) ((pma_rxword_msg_rxeq_clk_gating_ctrl_4_reg_t*) PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_4_ADR(_BASE))
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_6_REG(_BASE) ((pma_rxword_msg_rxeq_clk_gating_ctrl_6_reg_t*) PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_6_ADR(_BASE))
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_7_REG(_BASE) ((pma_rxword_msg_rxeq_clk_gating_ctrl_7_reg_t*) PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_7_ADR(_BASE))
#define PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_8_REG(_BASE) ((pma_rxword_msg_rxeq_clk_gating_ctrl_8_reg_t*) PMA_RXWORD_MSG_RXEQ_CLK_GATING_CTRL_8_ADR(_BASE))
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET0_CTRL_REG(_BASE) ((pma_rxword_msg_adc_slicer_lvl_set0_ctrl_reg_t*) PMA_RXWORD_MSG_ADC_SLICER_LVL_SET0_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET1_CTRL_REG(_BASE) ((pma_rxword_msg_adc_slicer_lvl_set1_ctrl_reg_t*) PMA_RXWORD_MSG_ADC_SLICER_LVL_SET1_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET2_CTRL_REG(_BASE) ((pma_rxword_msg_adc_slicer_lvl_set2_ctrl_reg_t*) PMA_RXWORD_MSG_ADC_SLICER_LVL_SET2_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET3_CTRL_REG(_BASE) ((pma_rxword_msg_adc_slicer_lvl_set3_ctrl_reg_t*) PMA_RXWORD_MSG_ADC_SLICER_LVL_SET3_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET4_CTRL_REG(_BASE) ((pma_rxword_msg_adc_slicer_lvl_set4_ctrl_reg_t*) PMA_RXWORD_MSG_ADC_SLICER_LVL_SET4_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET5_CTRL_REG(_BASE) ((pma_rxword_msg_adc_slicer_lvl_set5_ctrl_reg_t*) PMA_RXWORD_MSG_ADC_SLICER_LVL_SET5_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET6_CTRL_REG(_BASE) ((pma_rxword_msg_adc_slicer_lvl_set6_ctrl_reg_t*) PMA_RXWORD_MSG_ADC_SLICER_LVL_SET6_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET7_CTRL_REG(_BASE) ((pma_rxword_msg_adc_slicer_lvl_set7_ctrl_reg_t*) PMA_RXWORD_MSG_ADC_SLICER_LVL_SET7_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET8_CTRL_REG(_BASE) ((pma_rxword_msg_adc_slicer_lvl_set8_ctrl_reg_t*) PMA_RXWORD_MSG_ADC_SLICER_LVL_SET8_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET9_CTRL_REG(_BASE) ((pma_rxword_msg_adc_slicer_lvl_set9_ctrl_reg_t*) PMA_RXWORD_MSG_ADC_SLICER_LVL_SET9_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET10_CTRL_REG(_BASE) ((pma_rxword_msg_adc_slicer_lvl_set10_ctrl_reg_t*) PMA_RXWORD_MSG_ADC_SLICER_LVL_SET10_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET11_CTRL_REG(_BASE) ((pma_rxword_msg_adc_slicer_lvl_set11_ctrl_reg_t*) PMA_RXWORD_MSG_ADC_SLICER_LVL_SET11_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET12_CTRL_REG(_BASE) ((pma_rxword_msg_adc_slicer_lvl_set12_ctrl_reg_t*) PMA_RXWORD_MSG_ADC_SLICER_LVL_SET12_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET13_CTRL_REG(_BASE) ((pma_rxword_msg_adc_slicer_lvl_set13_ctrl_reg_t*) PMA_RXWORD_MSG_ADC_SLICER_LVL_SET13_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET14_CTRL_REG(_BASE) ((pma_rxword_msg_adc_slicer_lvl_set14_ctrl_reg_t*) PMA_RXWORD_MSG_ADC_SLICER_LVL_SET14_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_ADC_SLICER_LVL_SET15_CTRL_REG(_BASE) ((pma_rxword_msg_adc_slicer_lvl_set15_ctrl_reg_t*) PMA_RXWORD_MSG_ADC_SLICER_LVL_SET15_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET0_CTRL_REG(_BASE) ((pma_rxword_msg_adc_err_lvl_set0_ctrl_reg_t*) PMA_RXWORD_MSG_ADC_ERR_LVL_SET0_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET1_CTRL_REG(_BASE) ((pma_rxword_msg_adc_err_lvl_set1_ctrl_reg_t*) PMA_RXWORD_MSG_ADC_ERR_LVL_SET1_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET2_CTRL_REG(_BASE) ((pma_rxword_msg_adc_err_lvl_set2_ctrl_reg_t*) PMA_RXWORD_MSG_ADC_ERR_LVL_SET2_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET3_CTRL_REG(_BASE) ((pma_rxword_msg_adc_err_lvl_set3_ctrl_reg_t*) PMA_RXWORD_MSG_ADC_ERR_LVL_SET3_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET4_CTRL_REG(_BASE) ((pma_rxword_msg_adc_err_lvl_set4_ctrl_reg_t*) PMA_RXWORD_MSG_ADC_ERR_LVL_SET4_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET5_CTRL_REG(_BASE) ((pma_rxword_msg_adc_err_lvl_set5_ctrl_reg_t*) PMA_RXWORD_MSG_ADC_ERR_LVL_SET5_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET6_CTRL_REG(_BASE) ((pma_rxword_msg_adc_err_lvl_set6_ctrl_reg_t*) PMA_RXWORD_MSG_ADC_ERR_LVL_SET6_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET7_CTRL_REG(_BASE) ((pma_rxword_msg_adc_err_lvl_set7_ctrl_reg_t*) PMA_RXWORD_MSG_ADC_ERR_LVL_SET7_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET8_CTRL_REG(_BASE) ((pma_rxword_msg_adc_err_lvl_set8_ctrl_reg_t*) PMA_RXWORD_MSG_ADC_ERR_LVL_SET8_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET9_CTRL_REG(_BASE) ((pma_rxword_msg_adc_err_lvl_set9_ctrl_reg_t*) PMA_RXWORD_MSG_ADC_ERR_LVL_SET9_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET10_CTRL_REG(_BASE) ((pma_rxword_msg_adc_err_lvl_set10_ctrl_reg_t*) PMA_RXWORD_MSG_ADC_ERR_LVL_SET10_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET11_CTRL_REG(_BASE) ((pma_rxword_msg_adc_err_lvl_set11_ctrl_reg_t*) PMA_RXWORD_MSG_ADC_ERR_LVL_SET11_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET12_CTRL_REG(_BASE) ((pma_rxword_msg_adc_err_lvl_set12_ctrl_reg_t*) PMA_RXWORD_MSG_ADC_ERR_LVL_SET12_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET13_CTRL_REG(_BASE) ((pma_rxword_msg_adc_err_lvl_set13_ctrl_reg_t*) PMA_RXWORD_MSG_ADC_ERR_LVL_SET13_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET14_CTRL_REG(_BASE) ((pma_rxword_msg_adc_err_lvl_set14_ctrl_reg_t*) PMA_RXWORD_MSG_ADC_ERR_LVL_SET14_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_SET15_CTRL_REG(_BASE) ((pma_rxword_msg_adc_err_lvl_set15_ctrl_reg_t*) PMA_RXWORD_MSG_ADC_ERR_LVL_SET15_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_CTRL0_REG(_BASE) ((pma_rxword_msg_rxsararray_valid_calassist_ctrl0_reg_t*) PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_CTRL0_ADR(_BASE))
#define PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_CTRL1_REG(_BASE) ((pma_rxword_msg_rxsararray_valid_calassist_ctrl1_reg_t*) PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_CTRL1_ADR(_BASE))
#define PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_CTRL2_REG(_BASE) ((pma_rxword_msg_rxsararray_valid_calassist_ctrl2_reg_t*) PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_CTRL2_ADR(_BASE))
#define PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_STAT_REG(_BASE) ((pma_rxword_msg_rxsararray_valid_calassist_stat_reg_t*) PMA_RXWORD_MSG_RXSARARRAY_VALID_CALASSIST_STAT_ADR(_BASE))
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_CTRL_REG(_BASE) ((pma_rxword_msg_rxsar_calassist_ctrl_reg_t*) PMA_RXWORD_MSG_RXSAR_CALASSIST_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_RXSAR_CALASSIST_STAT_REG(_BASE) ((pma_rxword_msg_rxsar_calassist_stat_reg_t*) PMA_RXWORD_MSG_RXSAR_CALASSIST_STAT_ADR(_BASE))
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_6_REG(_BASE) ((pma_rxword_msg_main_fsm_ctrl_6_reg_t*) PMA_RXWORD_MSG_MAIN_FSM_CTRL_6_ADR(_BASE))
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_0_REG(_BASE) ((pma_rxword_msg_main_fsm_ctrl_0_reg_t*) PMA_RXWORD_MSG_MAIN_FSM_CTRL_0_ADR(_BASE))
#define PMA_RXWORD_MSG_MAIN_FSM_STAT_0_REG(_BASE) ((pma_rxword_msg_main_fsm_stat_0_reg_t*) PMA_RXWORD_MSG_MAIN_FSM_STAT_0_ADR(_BASE))
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_1_REG(_BASE) ((pma_rxword_msg_main_fsm_ctrl_1_reg_t*) PMA_RXWORD_MSG_MAIN_FSM_CTRL_1_ADR(_BASE))
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_2_REG(_BASE) ((pma_rxword_msg_main_fsm_ctrl_2_reg_t*) PMA_RXWORD_MSG_MAIN_FSM_CTRL_2_ADR(_BASE))
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_REG(_BASE) ((pma_rxword_msg_main_fsm_ctrl_3_reg_t*) PMA_RXWORD_MSG_MAIN_FSM_CTRL_3_ADR(_BASE))
#define PMA_RXWORD_MSG_TAPS_SET_CTRL_REG(_BASE) ((pma_rxword_msg_taps_set_ctrl_reg_t*) PMA_RXWORD_MSG_TAPS_SET_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_RX_GEARBOX_CTRL_REG(_BASE) ((pma_rxword_msg_rx_gearbox_ctrl_reg_t*) PMA_RXWORD_MSG_RX_GEARBOX_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_4_REG(_BASE) ((pma_rxword_msg_main_fsm_ctrl_4_reg_t*) PMA_RXWORD_MSG_MAIN_FSM_CTRL_4_ADR(_BASE))
#define PMA_RXWORD_MSG_MAIN_FSM_CTRL_5_REG(_BASE) ((pma_rxword_msg_main_fsm_ctrl_5_reg_t*) PMA_RXWORD_MSG_MAIN_FSM_CTRL_5_ADR(_BASE))
#define PMA_RXWORD_MSG_VREF_CTRL_1_REG(_BASE) ((pma_rxword_msg_vref_ctrl_1_reg_t*) PMA_RXWORD_MSG_VREF_CTRL_1_ADR(_BASE))
#define PMA_RXWORD_MSG_VREF_CTRL_2_REG(_BASE) ((pma_rxword_msg_vref_ctrl_2_reg_t*) PMA_RXWORD_MSG_VREF_CTRL_2_ADR(_BASE))
#define PMA_RXWORD_MSG_VREF_CTRL_3_REG(_BASE) ((pma_rxword_msg_vref_ctrl_3_reg_t*) PMA_RXWORD_MSG_VREF_CTRL_3_ADR(_BASE))
#define PMA_RXWORD_MSG_VREF_CTRL_4_REG(_BASE) ((pma_rxword_msg_vref_ctrl_4_reg_t*) PMA_RXWORD_MSG_VREF_CTRL_4_ADR(_BASE))
#define PMA_RXWORD_MSG_VREF_CTRL_5_REG(_BASE) ((pma_rxword_msg_vref_ctrl_5_reg_t*) PMA_RXWORD_MSG_VREF_CTRL_5_ADR(_BASE))
#define PMA_RXWORD_MSG_VREF_CTRL_6_REG(_BASE) ((pma_rxword_msg_vref_ctrl_6_reg_t*) PMA_RXWORD_MSG_VREF_CTRL_6_ADR(_BASE))
#define PMA_RXWORD_MSG_VREF_STAT_0_REG(_BASE) ((pma_rxword_msg_vref_stat_0_reg_t*) PMA_RXWORD_MSG_VREF_STAT_0_ADR(_BASE))
#define PMA_RXWORD_MSG_VGA_CTRL_6_REG(_BASE) ((pma_rxword_msg_vga_ctrl_6_reg_t*) PMA_RXWORD_MSG_VGA_CTRL_6_ADR(_BASE))
#define PMA_RXWORD_MSG_VGA_CTRL_5_REG(_BASE) ((pma_rxword_msg_vga_ctrl_5_reg_t*) PMA_RXWORD_MSG_VGA_CTRL_5_ADR(_BASE))
#define PMA_RXWORD_MSG_VGA_CTRL_4_REG(_BASE) ((pma_rxword_msg_vga_ctrl_4_reg_t*) PMA_RXWORD_MSG_VGA_CTRL_4_ADR(_BASE))
#define PMA_RXWORD_MSG_VGA_CTRL_0_REG(_BASE) ((pma_rxword_msg_vga_ctrl_0_reg_t*) PMA_RXWORD_MSG_VGA_CTRL_0_ADR(_BASE))
#define PMA_RXWORD_MSG_VGA_CTRL_1_REG(_BASE) ((pma_rxword_msg_vga_ctrl_1_reg_t*) PMA_RXWORD_MSG_VGA_CTRL_1_ADR(_BASE))
#define PMA_RXWORD_MSG_VGA_CTRL_2_REG(_BASE) ((pma_rxword_msg_vga_ctrl_2_reg_t*) PMA_RXWORD_MSG_VGA_CTRL_2_ADR(_BASE))
#define PMA_RXWORD_MSG_VGA_CTRL_3_REG(_BASE) ((pma_rxword_msg_vga_ctrl_3_reg_t*) PMA_RXWORD_MSG_VGA_CTRL_3_ADR(_BASE))
#define PMA_RXWORD_MSG_VGA_STAT_0_REG(_BASE) ((pma_rxword_msg_vga_stat_0_reg_t*) PMA_RXWORD_MSG_VGA_STAT_0_ADR(_BASE))
#define PMA_RXWORD_MSG_JPP_CTRL_1_REG(_BASE) ((pma_rxword_msg_jpp_ctrl_1_reg_t*) PMA_RXWORD_MSG_JPP_CTRL_1_ADR(_BASE))
#define PMA_RXWORD_MSG_JPP_CTRL_2_REG(_BASE) ((pma_rxword_msg_jpp_ctrl_2_reg_t*) PMA_RXWORD_MSG_JPP_CTRL_2_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_CTRL_0_REG(_BASE) ((pma_rxword_msg_ffe_ctrl_0_reg_t*) PMA_RXWORD_MSG_FFE_CTRL_0_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_CTRL_1_REG(_BASE) ((pma_rxword_msg_ffe_ctrl_1_reg_t*) PMA_RXWORD_MSG_FFE_CTRL_1_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_CTRL_2_REG(_BASE) ((pma_rxword_msg_ffe_ctrl_2_reg_t*) PMA_RXWORD_MSG_FFE_CTRL_2_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_CTRL_3_REG(_BASE) ((pma_rxword_msg_ffe_ctrl_3_reg_t*) PMA_RXWORD_MSG_FFE_CTRL_3_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_CTRL_4_REG(_BASE) ((pma_rxword_msg_ffe_ctrl_4_reg_t*) PMA_RXWORD_MSG_FFE_CTRL_4_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_CTRL_5_REG(_BASE) ((pma_rxword_msg_ffe_ctrl_5_reg_t*) PMA_RXWORD_MSG_FFE_CTRL_5_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_STAT_0_REG(_BASE) ((pma_rxword_msg_ffe_stat_0_reg_t*) PMA_RXWORD_MSG_FFE_STAT_0_ADR(_BASE))
#define PMA_RXWORD_MSG_HIST_CTRL_0_REG(_BASE) ((pma_rxword_msg_hist_ctrl_0_reg_t*) PMA_RXWORD_MSG_HIST_CTRL_0_ADR(_BASE))
#define PMA_RXWORD_MSG_HIST_CTRL_1_REG(_BASE) ((pma_rxword_msg_hist_ctrl_1_reg_t*) PMA_RXWORD_MSG_HIST_CTRL_1_ADR(_BASE))
#define PMA_RXWORD_MSG_HIST_CTRL_2_REG(_BASE) ((pma_rxword_msg_hist_ctrl_2_reg_t*) PMA_RXWORD_MSG_HIST_CTRL_2_ADR(_BASE))
#define PMA_RXWORD_MSG_HIST_CTRL_3_REG(_BASE) ((pma_rxword_msg_hist_ctrl_3_reg_t*) PMA_RXWORD_MSG_HIST_CTRL_3_ADR(_BASE))
#define PMA_RXWORD_MSG_HIST_CTRL_4_REG(_BASE) ((pma_rxword_msg_hist_ctrl_4_reg_t*) PMA_RXWORD_MSG_HIST_CTRL_4_ADR(_BASE))
#define PMA_RXWORD_MSG_HIST_CTRL_5_REG(_BASE) ((pma_rxword_msg_hist_ctrl_5_reg_t*) PMA_RXWORD_MSG_HIST_CTRL_5_ADR(_BASE))
#define PMA_RXWORD_MSG_HIST_CTRL_6_REG(_BASE) ((pma_rxword_msg_hist_ctrl_6_reg_t*) PMA_RXWORD_MSG_HIST_CTRL_6_ADR(_BASE))
#define PMA_RXWORD_MSG_HIST_CTRL_7_REG(_BASE) ((pma_rxword_msg_hist_ctrl_7_reg_t*) PMA_RXWORD_MSG_HIST_CTRL_7_ADR(_BASE))
#define PMA_RXWORD_MSG_HIST_CTRL_8_REG(_BASE) ((pma_rxword_msg_hist_ctrl_8_reg_t*) PMA_RXWORD_MSG_HIST_CTRL_8_ADR(_BASE))
#define PMA_RXWORD_MSG_HIST_CTRL_9_REG(_BASE) ((pma_rxword_msg_hist_ctrl_9_reg_t*) PMA_RXWORD_MSG_HIST_CTRL_9_ADR(_BASE))
#define PMA_RXWORD_MSG_HIST_CTRL_10_REG(_BASE) ((pma_rxword_msg_hist_ctrl_10_reg_t*) PMA_RXWORD_MSG_HIST_CTRL_10_ADR(_BASE))
#define PMA_RXWORD_MSG_HIST_CTRL_11_REG(_BASE) ((pma_rxword_msg_hist_ctrl_11_reg_t*) PMA_RXWORD_MSG_HIST_CTRL_11_ADR(_BASE))
#define PMA_RXWORD_MSG_HIST_CTRL_12_REG(_BASE) ((pma_rxword_msg_hist_ctrl_12_reg_t*) PMA_RXWORD_MSG_HIST_CTRL_12_ADR(_BASE))
#define PMA_RXWORD_MSG_HIST_CTRL_13_REG(_BASE) ((pma_rxword_msg_hist_ctrl_13_reg_t*) PMA_RXWORD_MSG_HIST_CTRL_13_ADR(_BASE))
#define PMA_RXWORD_MSG_HIST_STAT_0_REG(_BASE) ((pma_rxword_msg_hist_stat_0_reg_t*) PMA_RXWORD_MSG_HIST_STAT_0_ADR(_BASE))
#define PMA_RXWORD_MSG_HIST_STAT_1_REG(_BASE) ((pma_rxword_msg_hist_stat_1_reg_t*) PMA_RXWORD_MSG_HIST_STAT_1_ADR(_BASE))
#define PMA_RXWORD_MSG_HIST_STAT_2_REG(_BASE) ((pma_rxword_msg_hist_stat_2_reg_t*) PMA_RXWORD_MSG_HIST_STAT_2_ADR(_BASE))
#define PMA_RXWORD_MSG_HIST_STAT_3_REG(_BASE) ((pma_rxword_msg_hist_stat_3_reg_t*) PMA_RXWORD_MSG_HIST_STAT_3_ADR(_BASE))
#define PMA_RXWORD_MSG_HIST_STAT_4_REG(_BASE) ((pma_rxword_msg_hist_stat_4_reg_t*) PMA_RXWORD_MSG_HIST_STAT_4_ADR(_BASE))
#define PMA_RXWORD_MSG_HIST_STAT_5_REG(_BASE) ((pma_rxword_msg_hist_stat_5_reg_t*) PMA_RXWORD_MSG_HIST_STAT_5_ADR(_BASE))
#define PMA_RXWORD_MSG_HIST_STAT_6_REG(_BASE) ((pma_rxword_msg_hist_stat_6_reg_t*) PMA_RXWORD_MSG_HIST_STAT_6_ADR(_BASE))
#define PMA_RXWORD_MSG_HIST_STAT_7_REG(_BASE) ((pma_rxword_msg_hist_stat_7_reg_t*) PMA_RXWORD_MSG_HIST_STAT_7_ADR(_BASE))
#define PMA_RXWORD_MSG_HIST_STAT_8_REG(_BASE) ((pma_rxword_msg_hist_stat_8_reg_t*) PMA_RXWORD_MSG_HIST_STAT_8_ADR(_BASE))
#define PMA_RXWORD_MSG_HIST_STAT_9_REG(_BASE) ((pma_rxword_msg_hist_stat_9_reg_t*) PMA_RXWORD_MSG_HIST_STAT_9_ADR(_BASE))
#define PMA_RXWORD_MSG_HIST_STAT_10_REG(_BASE) ((pma_rxword_msg_hist_stat_10_reg_t*) PMA_RXWORD_MSG_HIST_STAT_10_ADR(_BASE))
#define PMA_RXWORD_MSG_HIST_STAT_11_REG(_BASE) ((pma_rxword_msg_hist_stat_11_reg_t*) PMA_RXWORD_MSG_HIST_STAT_11_ADR(_BASE))
#define PMA_RXWORD_MSG_HIST_STAT_12_REG(_BASE) ((pma_rxword_msg_hist_stat_12_reg_t*) PMA_RXWORD_MSG_HIST_STAT_12_ADR(_BASE))
#define PMA_RXWORD_MSG_HIST_STAT_13_REG(_BASE) ((pma_rxword_msg_hist_stat_13_reg_t*) PMA_RXWORD_MSG_HIST_STAT_13_ADR(_BASE))
#define PMA_RXWORD_MSG_HIST_STAT_14_REG(_BASE) ((pma_rxword_msg_hist_stat_14_reg_t*) PMA_RXWORD_MSG_HIST_STAT_14_ADR(_BASE))
#define PMA_RXWORD_MSG_HIST_STAT_15_REG(_BASE) ((pma_rxword_msg_hist_stat_15_reg_t*) PMA_RXWORD_MSG_HIST_STAT_15_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_CTRL_1_REG(_BASE) ((pma_rxword_msg_ops_ctrl_1_reg_t*) PMA_RXWORD_MSG_OPS_CTRL_1_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_CTRL_2_REG(_BASE) ((pma_rxword_msg_ops_ctrl_2_reg_t*) PMA_RXWORD_MSG_OPS_CTRL_2_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_CTRL_3_REG(_BASE) ((pma_rxword_msg_ops_ctrl_3_reg_t*) PMA_RXWORD_MSG_OPS_CTRL_3_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_CTRL_4_REG(_BASE) ((pma_rxword_msg_ops_ctrl_4_reg_t*) PMA_RXWORD_MSG_OPS_CTRL_4_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_STAT_1_REG(_BASE) ((pma_rxword_msg_ops_stat_1_reg_t*) PMA_RXWORD_MSG_OPS_STAT_1_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_STAT_2_REG(_BASE) ((pma_rxword_msg_ops_stat_2_reg_t*) PMA_RXWORD_MSG_OPS_STAT_2_ADR(_BASE))
#define PMA_RXWORD_MSG_ADCVREF_CTRL_1_REG(_BASE) ((pma_rxword_msg_adcvref_ctrl_1_reg_t*) PMA_RXWORD_MSG_ADCVREF_CTRL_1_ADR(_BASE))
#define PMA_RXWORD_MSG_ADCVREF_CTRL_2_REG(_BASE) ((pma_rxword_msg_adcvref_ctrl_2_reg_t*) PMA_RXWORD_MSG_ADCVREF_CTRL_2_ADR(_BASE))
#define PMA_RXWORD_MSG_ADCVREF_CTRL_3_REG(_BASE) ((pma_rxword_msg_adcvref_ctrl_3_reg_t*) PMA_RXWORD_MSG_ADCVREF_CTRL_3_ADR(_BASE))
#define PMA_RXWORD_MSG_ADCVREF_CTRL_4_REG(_BASE) ((pma_rxword_msg_adcvref_ctrl_4_reg_t*) PMA_RXWORD_MSG_ADCVREF_CTRL_4_ADR(_BASE))
#define PMA_RXWORD_MSG_ADCVREF_CTRL_5_REG(_BASE) ((pma_rxword_msg_adcvref_ctrl_5_reg_t*) PMA_RXWORD_MSG_ADCVREF_CTRL_5_ADR(_BASE))
#define PMA_RXWORD_MSG_ADCVREF_CTRL_6_REG(_BASE) ((pma_rxword_msg_adcvref_ctrl_6_reg_t*) PMA_RXWORD_MSG_ADCVREF_CTRL_6_ADR(_BASE))
#define PMA_RXWORD_MSG_ADCVREF_STAT_0_REG(_BASE) ((pma_rxword_msg_adcvref_stat_0_reg_t*) PMA_RXWORD_MSG_ADCVREF_STAT_0_ADR(_BASE))
#define PMA_RXWORD_MSG_AFFE_CTRL_0_REG(_BASE) ((pma_rxword_msg_affe_ctrl_0_reg_t*) PMA_RXWORD_MSG_AFFE_CTRL_0_ADR(_BASE))
#define PMA_RXWORD_MSG_AFFE_CTRL_1_REG(_BASE) ((pma_rxword_msg_affe_ctrl_1_reg_t*) PMA_RXWORD_MSG_AFFE_CTRL_1_ADR(_BASE))
#define PMA_RXWORD_MSG_AFFE_CTRL_2_REG(_BASE) ((pma_rxword_msg_affe_ctrl_2_reg_t*) PMA_RXWORD_MSG_AFFE_CTRL_2_ADR(_BASE))
#define PMA_RXWORD_MSG_AFFE_CTRL_3_REG(_BASE) ((pma_rxword_msg_affe_ctrl_3_reg_t*) PMA_RXWORD_MSG_AFFE_CTRL_3_ADR(_BASE))
#define PMA_RXWORD_MSG_AFFE_STAT_0_REG(_BASE) ((pma_rxword_msg_affe_stat_0_reg_t*) PMA_RXWORD_MSG_AFFE_STAT_0_ADR(_BASE))
#define PMA_RXWORD_MSG_OFC_CTRL_0_REG(_BASE) ((pma_rxword_msg_ofc_ctrl_0_reg_t*) PMA_RXWORD_MSG_OFC_CTRL_0_ADR(_BASE))
#define PMA_RXWORD_MSG_OFC_CTRL_1A_REG(_BASE) ((pma_rxword_msg_ofc_ctrl_1a_reg_t*) PMA_RXWORD_MSG_OFC_CTRL_1A_ADR(_BASE))
#define PMA_RXWORD_MSG_OFC_CTRL_1B_REG(_BASE) ((pma_rxword_msg_ofc_ctrl_1b_reg_t*) PMA_RXWORD_MSG_OFC_CTRL_1B_ADR(_BASE))
#define PMA_RXWORD_MSG_OFC_CTRL_2_REG(_BASE) ((pma_rxword_msg_ofc_ctrl_2_reg_t*) PMA_RXWORD_MSG_OFC_CTRL_2_ADR(_BASE))
#define PMA_RXWORD_MSG_OFC_CTRL_3_REG(_BASE) ((pma_rxword_msg_ofc_ctrl_3_reg_t*) PMA_RXWORD_MSG_OFC_CTRL_3_ADR(_BASE))
#define PMA_RXWORD_MSG_OFC_STAT_0_REG(_BASE) ((pma_rxword_msg_ofc_stat_0_reg_t*) PMA_RXWORD_MSG_OFC_STAT_0_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_0_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set0_frac_0_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_0_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_1_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set0_frac_1_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_1_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_2_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set0_frac_2_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_2_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_3_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set0_frac_3_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_3_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_4_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set0_frac_4_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_4_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_5_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set0_frac_5_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET0_FRAC_5_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_0_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set1_frac_0_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_0_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_1_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set1_frac_1_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_1_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_2_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set1_frac_2_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_2_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_3_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set1_frac_3_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_3_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_4_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set1_frac_4_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_4_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_5_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set1_frac_5_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET1_FRAC_5_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_0_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set2_frac_0_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_0_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_1_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set2_frac_1_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_1_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_2_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set2_frac_2_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_2_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_3_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set2_frac_3_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_3_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_4_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set2_frac_4_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_4_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_5_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set2_frac_5_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET2_FRAC_5_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_0_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set3_frac_0_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_0_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_1_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set3_frac_1_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_1_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_2_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set3_frac_2_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_2_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_3_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set3_frac_3_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_3_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_4_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set3_frac_4_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_4_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_5_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set3_frac_5_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET3_FRAC_5_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_0_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set4_frac_0_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_0_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_1_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set4_frac_1_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_1_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_2_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set4_frac_2_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_2_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_3_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set4_frac_3_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_3_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_4_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set4_frac_4_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_4_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_5_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set4_frac_5_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET4_FRAC_5_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_0_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set5_frac_0_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_0_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_1_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set5_frac_1_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_1_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_2_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set5_frac_2_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_2_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_3_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set5_frac_3_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_3_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_4_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set5_frac_4_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_4_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_5_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set5_frac_5_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET5_FRAC_5_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_0_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set6_frac_0_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_0_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_1_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set6_frac_1_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_1_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_2_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set6_frac_2_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_2_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_3_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set6_frac_3_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_3_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_4_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set6_frac_4_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_4_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_5_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set6_frac_5_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET6_FRAC_5_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_0_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set7_frac_0_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_0_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_1_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set7_frac_1_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_1_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_2_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set7_frac_2_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_2_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_3_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set7_frac_3_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_3_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_4_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set7_frac_4_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_4_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_5_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set7_frac_5_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET7_FRAC_5_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_0_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set8_frac_0_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_0_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_1_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set8_frac_1_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_1_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_2_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set8_frac_2_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_2_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_3_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set8_frac_3_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_3_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_4_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set8_frac_4_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_4_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_5_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set8_frac_5_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET8_FRAC_5_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_0_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set9_frac_0_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_0_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_1_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set9_frac_1_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_1_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_2_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set9_frac_2_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_2_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_3_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set9_frac_3_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_3_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_4_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set9_frac_4_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_4_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_5_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set9_frac_5_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET9_FRAC_5_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_0_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set10_frac_0_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_0_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_1_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set10_frac_1_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_1_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_2_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set10_frac_2_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_2_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_3_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set10_frac_3_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_3_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_4_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set10_frac_4_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_4_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_5_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set10_frac_5_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET10_FRAC_5_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_0_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set11_frac_0_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_0_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_1_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set11_frac_1_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_1_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_2_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set11_frac_2_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_2_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_3_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set11_frac_3_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_3_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_4_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set11_frac_4_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_4_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_5_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set11_frac_5_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET11_FRAC_5_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_0_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set12_frac_0_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_0_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_1_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set12_frac_1_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_1_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_2_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set12_frac_2_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_2_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_3_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set12_frac_3_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_3_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_4_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set12_frac_4_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_4_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_5_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set12_frac_5_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET12_FRAC_5_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_0_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set13_frac_0_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_0_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_1_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set13_frac_1_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_1_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_2_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set13_frac_2_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_2_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_3_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set13_frac_3_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_3_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_4_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set13_frac_4_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_4_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_5_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set13_frac_5_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET13_FRAC_5_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_0_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set14_frac_0_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_0_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_1_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set14_frac_1_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_1_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_2_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set14_frac_2_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_2_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_3_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set14_frac_3_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_3_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_4_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set14_frac_4_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_4_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_5_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set14_frac_5_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET14_FRAC_5_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_0_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set15_frac_0_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_0_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_1_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set15_frac_1_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_1_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_2_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set15_frac_2_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_2_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_3_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set15_frac_3_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_3_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_4_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set15_frac_4_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_4_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_5_REG(_BASE) ((pma_rxword_msg_ffe_coeff_set15_frac_5_reg_t*) PMA_RXWORD_MSG_FFE_COEFF_SET15_FRAC_5_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET0_0_REG(_BASE) ((pma_rxword_msg_ffe_err_lvl_frac_set0_0_reg_t*) PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET0_0_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET1_0_REG(_BASE) ((pma_rxword_msg_ffe_err_lvl_frac_set1_0_reg_t*) PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET1_0_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET2_0_REG(_BASE) ((pma_rxword_msg_ffe_err_lvl_frac_set2_0_reg_t*) PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET2_0_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET3_0_REG(_BASE) ((pma_rxword_msg_ffe_err_lvl_frac_set3_0_reg_t*) PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET3_0_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET4_0_REG(_BASE) ((pma_rxword_msg_ffe_err_lvl_frac_set4_0_reg_t*) PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET4_0_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET5_0_REG(_BASE) ((pma_rxword_msg_ffe_err_lvl_frac_set5_0_reg_t*) PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET5_0_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET6_0_REG(_BASE) ((pma_rxword_msg_ffe_err_lvl_frac_set6_0_reg_t*) PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET6_0_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET7_0_REG(_BASE) ((pma_rxword_msg_ffe_err_lvl_frac_set7_0_reg_t*) PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET7_0_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET8_0_REG(_BASE) ((pma_rxword_msg_ffe_err_lvl_frac_set8_0_reg_t*) PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET8_0_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET9_0_REG(_BASE) ((pma_rxword_msg_ffe_err_lvl_frac_set9_0_reg_t*) PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET9_0_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET10_0_REG(_BASE) ((pma_rxword_msg_ffe_err_lvl_frac_set10_0_reg_t*) PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET10_0_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET11_0_REG(_BASE) ((pma_rxword_msg_ffe_err_lvl_frac_set11_0_reg_t*) PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET11_0_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET12_0_REG(_BASE) ((pma_rxword_msg_ffe_err_lvl_frac_set12_0_reg_t*) PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET12_0_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET13_0_REG(_BASE) ((pma_rxword_msg_ffe_err_lvl_frac_set13_0_reg_t*) PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET13_0_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET14_0_REG(_BASE) ((pma_rxword_msg_ffe_err_lvl_frac_set14_0_reg_t*) PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET14_0_ADR(_BASE))
#define PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET15_0_REG(_BASE) ((pma_rxword_msg_ffe_err_lvl_frac_set15_0_reg_t*) PMA_RXWORD_MSG_FFE_ERR_LVL_FRAC_SET15_0_ADR(_BASE))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET0_0_REG(_BASE) ((pma_rxword_msg_adc_err_lvl_frac_set0_0_reg_t*) PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET0_0_ADR(_BASE))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET1_0_REG(_BASE) ((pma_rxword_msg_adc_err_lvl_frac_set1_0_reg_t*) PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET1_0_ADR(_BASE))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET2_0_REG(_BASE) ((pma_rxword_msg_adc_err_lvl_frac_set2_0_reg_t*) PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET2_0_ADR(_BASE))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET3_0_REG(_BASE) ((pma_rxword_msg_adc_err_lvl_frac_set3_0_reg_t*) PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET3_0_ADR(_BASE))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET4_0_REG(_BASE) ((pma_rxword_msg_adc_err_lvl_frac_set4_0_reg_t*) PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET4_0_ADR(_BASE))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET5_0_REG(_BASE) ((pma_rxword_msg_adc_err_lvl_frac_set5_0_reg_t*) PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET5_0_ADR(_BASE))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET6_0_REG(_BASE) ((pma_rxword_msg_adc_err_lvl_frac_set6_0_reg_t*) PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET6_0_ADR(_BASE))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET7_0_REG(_BASE) ((pma_rxword_msg_adc_err_lvl_frac_set7_0_reg_t*) PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET7_0_ADR(_BASE))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET8_0_REG(_BASE) ((pma_rxword_msg_adc_err_lvl_frac_set8_0_reg_t*) PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET8_0_ADR(_BASE))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET9_0_REG(_BASE) ((pma_rxword_msg_adc_err_lvl_frac_set9_0_reg_t*) PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET9_0_ADR(_BASE))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET10_0_REG(_BASE) ((pma_rxword_msg_adc_err_lvl_frac_set10_0_reg_t*) PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET10_0_ADR(_BASE))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET11_0_REG(_BASE) ((pma_rxword_msg_adc_err_lvl_frac_set11_0_reg_t*) PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET11_0_ADR(_BASE))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET12_0_REG(_BASE) ((pma_rxword_msg_adc_err_lvl_frac_set12_0_reg_t*) PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET12_0_ADR(_BASE))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET13_0_REG(_BASE) ((pma_rxword_msg_adc_err_lvl_frac_set13_0_reg_t*) PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET13_0_ADR(_BASE))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET14_0_REG(_BASE) ((pma_rxword_msg_adc_err_lvl_frac_set14_0_reg_t*) PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET14_0_ADR(_BASE))
#define PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET15_0_REG(_BASE) ((pma_rxword_msg_adc_err_lvl_frac_set15_0_reg_t*) PMA_RXWORD_MSG_ADC_ERR_LVL_FRAC_SET15_0_ADR(_BASE))
#define PMA_RXWORD_MSG_AFFE_LMS_SET0_REG(_BASE) ((pma_rxword_msg_affe_lms_set0_reg_t*) PMA_RXWORD_MSG_AFFE_LMS_SET0_ADR(_BASE))
#define PMA_RXWORD_MSG_AFFE_LMS_SET1_REG(_BASE) ((pma_rxword_msg_affe_lms_set1_reg_t*) PMA_RXWORD_MSG_AFFE_LMS_SET1_ADR(_BASE))
#define PMA_RXWORD_MSG_AFFE_LMS_SET2_REG(_BASE) ((pma_rxword_msg_affe_lms_set2_reg_t*) PMA_RXWORD_MSG_AFFE_LMS_SET2_ADR(_BASE))
#define PMA_RXWORD_MSG_AFFE_LMS_SET3_REG(_BASE) ((pma_rxword_msg_affe_lms_set3_reg_t*) PMA_RXWORD_MSG_AFFE_LMS_SET3_ADR(_BASE))
#define PMA_RXWORD_MSG_AFFE_LMS_SET4_REG(_BASE) ((pma_rxword_msg_affe_lms_set4_reg_t*) PMA_RXWORD_MSG_AFFE_LMS_SET4_ADR(_BASE))
#define PMA_RXWORD_MSG_AFFE_LMS_SET5_REG(_BASE) ((pma_rxword_msg_affe_lms_set5_reg_t*) PMA_RXWORD_MSG_AFFE_LMS_SET5_ADR(_BASE))
#define PMA_RXWORD_MSG_AFFE_LMS_SET6_REG(_BASE) ((pma_rxword_msg_affe_lms_set6_reg_t*) PMA_RXWORD_MSG_AFFE_LMS_SET6_ADR(_BASE))
#define PMA_RXWORD_MSG_AFFE_LMS_SET7_REG(_BASE) ((pma_rxword_msg_affe_lms_set7_reg_t*) PMA_RXWORD_MSG_AFFE_LMS_SET7_ADR(_BASE))
#define PMA_RXWORD_MSG_AFFE_LMS_SET8_REG(_BASE) ((pma_rxword_msg_affe_lms_set8_reg_t*) PMA_RXWORD_MSG_AFFE_LMS_SET8_ADR(_BASE))
#define PMA_RXWORD_MSG_AFFE_LMS_SET9_REG(_BASE) ((pma_rxword_msg_affe_lms_set9_reg_t*) PMA_RXWORD_MSG_AFFE_LMS_SET9_ADR(_BASE))
#define PMA_RXWORD_MSG_AFFE_LMS_SET10_REG(_BASE) ((pma_rxword_msg_affe_lms_set10_reg_t*) PMA_RXWORD_MSG_AFFE_LMS_SET10_ADR(_BASE))
#define PMA_RXWORD_MSG_AFFE_LMS_SET11_REG(_BASE) ((pma_rxword_msg_affe_lms_set11_reg_t*) PMA_RXWORD_MSG_AFFE_LMS_SET11_ADR(_BASE))
#define PMA_RXWORD_MSG_AFFE_LMS_SET12_REG(_BASE) ((pma_rxword_msg_affe_lms_set12_reg_t*) PMA_RXWORD_MSG_AFFE_LMS_SET12_ADR(_BASE))
#define PMA_RXWORD_MSG_AFFE_LMS_SET13_REG(_BASE) ((pma_rxword_msg_affe_lms_set13_reg_t*) PMA_RXWORD_MSG_AFFE_LMS_SET13_ADR(_BASE))
#define PMA_RXWORD_MSG_AFFE_LMS_SET14_REG(_BASE) ((pma_rxword_msg_affe_lms_set14_reg_t*) PMA_RXWORD_MSG_AFFE_LMS_SET14_ADR(_BASE))
#define PMA_RXWORD_MSG_AFFE_LMS_SET15_REG(_BASE) ((pma_rxword_msg_affe_lms_set15_reg_t*) PMA_RXWORD_MSG_AFFE_LMS_SET15_ADR(_BASE))
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET0_REG(_BASE) ((pma_rxword_msg_affe_lms_frac_set0_reg_t*) PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET0_ADR(_BASE))
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET1_REG(_BASE) ((pma_rxword_msg_affe_lms_frac_set1_reg_t*) PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET1_ADR(_BASE))
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET2_REG(_BASE) ((pma_rxword_msg_affe_lms_frac_set2_reg_t*) PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET2_ADR(_BASE))
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET3_REG(_BASE) ((pma_rxword_msg_affe_lms_frac_set3_reg_t*) PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET3_ADR(_BASE))
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET4_REG(_BASE) ((pma_rxword_msg_affe_lms_frac_set4_reg_t*) PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET4_ADR(_BASE))
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET5_REG(_BASE) ((pma_rxword_msg_affe_lms_frac_set5_reg_t*) PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET5_ADR(_BASE))
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET6_REG(_BASE) ((pma_rxword_msg_affe_lms_frac_set6_reg_t*) PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET6_ADR(_BASE))
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET7_REG(_BASE) ((pma_rxword_msg_affe_lms_frac_set7_reg_t*) PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET7_ADR(_BASE))
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET8_REG(_BASE) ((pma_rxword_msg_affe_lms_frac_set8_reg_t*) PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET8_ADR(_BASE))
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET9_REG(_BASE) ((pma_rxword_msg_affe_lms_frac_set9_reg_t*) PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET9_ADR(_BASE))
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET10_REG(_BASE) ((pma_rxword_msg_affe_lms_frac_set10_reg_t*) PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET10_ADR(_BASE))
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET11_REG(_BASE) ((pma_rxword_msg_affe_lms_frac_set11_reg_t*) PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET11_ADR(_BASE))
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET12_REG(_BASE) ((pma_rxword_msg_affe_lms_frac_set12_reg_t*) PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET12_ADR(_BASE))
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET13_REG(_BASE) ((pma_rxword_msg_affe_lms_frac_set13_reg_t*) PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET13_ADR(_BASE))
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET14_REG(_BASE) ((pma_rxword_msg_affe_lms_frac_set14_reg_t*) PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET14_ADR(_BASE))
#define PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET15_REG(_BASE) ((pma_rxword_msg_affe_lms_frac_set15_reg_t*) PMA_RXWORD_MSG_AFFE_LMS_FRAC_SET15_ADR(_BASE))
#define PMA_RXWORD_MSG_SATURATION_STAT_0_REG(_BASE) ((pma_rxword_msg_saturation_stat_0_reg_t*) PMA_RXWORD_MSG_SATURATION_STAT_0_ADR(_BASE))
#define PMA_RXWORD_MSG_SATURATION_STAT_1_REG(_BASE) ((pma_rxword_msg_saturation_stat_1_reg_t*) PMA_RXWORD_MSG_SATURATION_STAT_1_ADR(_BASE))
#define PMA_RXWORD_MSG_SATURATION_STAT_3_REG(_BASE) ((pma_rxword_msg_saturation_stat_3_reg_t*) PMA_RXWORD_MSG_SATURATION_STAT_3_ADR(_BASE))
#define PMA_RXWORD_MSG_ZEROAVG_STAT_0_REG(_BASE) ((pma_rxword_msg_zeroavg_stat_0_reg_t*) PMA_RXWORD_MSG_ZEROAVG_STAT_0_ADR(_BASE))
#define PMA_RXWORD_MSG_ZEROAVG_STAT_1_REG(_BASE) ((pma_rxword_msg_zeroavg_stat_1_reg_t*) PMA_RXWORD_MSG_ZEROAVG_STAT_1_ADR(_BASE))
#define PMA_RXWORD_MSG_ZEROAVG_STAT_3_REG(_BASE) ((pma_rxword_msg_zeroavg_stat_3_reg_t*) PMA_RXWORD_MSG_ZEROAVG_STAT_3_ADR(_BASE))
#define PMA_RXWORD_MSG_ADCOFC_CTRL_0_REG(_BASE) ((pma_rxword_msg_adcofc_ctrl_0_reg_t*) PMA_RXWORD_MSG_ADCOFC_CTRL_0_ADR(_BASE))
#define PMA_RXWORD_MSG_ADCOFC_CTRL_1_REG(_BASE) ((pma_rxword_msg_adcofc_ctrl_1_reg_t*) PMA_RXWORD_MSG_ADCOFC_CTRL_1_ADR(_BASE))
#define PMA_RXWORD_MSG_ADCOFC_CTRL_2_REG(_BASE) ((pma_rxword_msg_adcofc_ctrl_2_reg_t*) PMA_RXWORD_MSG_ADCOFC_CTRL_2_ADR(_BASE))
#define PMA_RXWORD_MSG_ADCOFC_CTRL_3_REG(_BASE) ((pma_rxword_msg_adcofc_ctrl_3_reg_t*) PMA_RXWORD_MSG_ADCOFC_CTRL_3_ADR(_BASE))
#define PMA_RXWORD_MSG_ADCOFC_STAT_0_REG(_BASE) ((pma_rxword_msg_adcofc_stat_0_reg_t*) PMA_RXWORD_MSG_ADCOFC_STAT_0_ADR(_BASE))
#define PMA_RXWORD_MSG_EDG_SLICE_CTRL_0_REG(_BASE) ((pma_rxword_msg_edg_slice_ctrl_0_reg_t*) PMA_RXWORD_MSG_EDG_SLICE_CTRL_0_ADR(_BASE))
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET0_CTRL_REG(_BASE) ((pma_rxword_msg_edg_slicer_lvl_set0_ctrl_reg_t*) PMA_RXWORD_MSG_EDG_SLICER_LVL_SET0_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET1_CTRL_REG(_BASE) ((pma_rxword_msg_edg_slicer_lvl_set1_ctrl_reg_t*) PMA_RXWORD_MSG_EDG_SLICER_LVL_SET1_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET2_CTRL_REG(_BASE) ((pma_rxword_msg_edg_slicer_lvl_set2_ctrl_reg_t*) PMA_RXWORD_MSG_EDG_SLICER_LVL_SET2_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET3_CTRL_REG(_BASE) ((pma_rxword_msg_edg_slicer_lvl_set3_ctrl_reg_t*) PMA_RXWORD_MSG_EDG_SLICER_LVL_SET3_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET4_CTRL_REG(_BASE) ((pma_rxword_msg_edg_slicer_lvl_set4_ctrl_reg_t*) PMA_RXWORD_MSG_EDG_SLICER_LVL_SET4_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET5_CTRL_REG(_BASE) ((pma_rxword_msg_edg_slicer_lvl_set5_ctrl_reg_t*) PMA_RXWORD_MSG_EDG_SLICER_LVL_SET5_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET6_CTRL_REG(_BASE) ((pma_rxword_msg_edg_slicer_lvl_set6_ctrl_reg_t*) PMA_RXWORD_MSG_EDG_SLICER_LVL_SET6_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_EDG_SLICER_LVL_SET7_CTRL_REG(_BASE) ((pma_rxword_msg_edg_slicer_lvl_set7_ctrl_reg_t*) PMA_RXWORD_MSG_EDG_SLICER_LVL_SET7_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_EDGVREF_CTRL_1_REG(_BASE) ((pma_rxword_msg_edgvref_ctrl_1_reg_t*) PMA_RXWORD_MSG_EDGVREF_CTRL_1_ADR(_BASE))
#define PMA_RXWORD_MSG_EDGVREF_CTRL_2_REG(_BASE) ((pma_rxword_msg_edgvref_ctrl_2_reg_t*) PMA_RXWORD_MSG_EDGVREF_CTRL_2_ADR(_BASE))
#define PMA_RXWORD_MSG_EDGVREF_CTRL_3_REG(_BASE) ((pma_rxword_msg_edgvref_ctrl_3_reg_t*) PMA_RXWORD_MSG_EDGVREF_CTRL_3_ADR(_BASE))
#define PMA_RXWORD_MSG_EDGVREF_CTRL_4_REG(_BASE) ((pma_rxword_msg_edgvref_ctrl_4_reg_t*) PMA_RXWORD_MSG_EDGVREF_CTRL_4_ADR(_BASE))
#define PMA_RXWORD_MSG_EDGVREF_CTRL_5_REG(_BASE) ((pma_rxword_msg_edgvref_ctrl_5_reg_t*) PMA_RXWORD_MSG_EDGVREF_CTRL_5_ADR(_BASE))
#define PMA_RXWORD_MSG_EDGVREF_CTRL_6_REG(_BASE) ((pma_rxword_msg_edgvref_ctrl_6_reg_t*) PMA_RXWORD_MSG_EDGVREF_CTRL_6_ADR(_BASE))
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET0_REG(_BASE) ((pma_rxword_msg_edgvref_frac_set0_reg_t*) PMA_RXWORD_MSG_EDGVREF_FRAC_SET0_ADR(_BASE))
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET1_REG(_BASE) ((pma_rxword_msg_edgvref_frac_set1_reg_t*) PMA_RXWORD_MSG_EDGVREF_FRAC_SET1_ADR(_BASE))
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET2_REG(_BASE) ((pma_rxword_msg_edgvref_frac_set2_reg_t*) PMA_RXWORD_MSG_EDGVREF_FRAC_SET2_ADR(_BASE))
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET3_REG(_BASE) ((pma_rxword_msg_edgvref_frac_set3_reg_t*) PMA_RXWORD_MSG_EDGVREF_FRAC_SET3_ADR(_BASE))
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET4_REG(_BASE) ((pma_rxword_msg_edgvref_frac_set4_reg_t*) PMA_RXWORD_MSG_EDGVREF_FRAC_SET4_ADR(_BASE))
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET5_REG(_BASE) ((pma_rxword_msg_edgvref_frac_set5_reg_t*) PMA_RXWORD_MSG_EDGVREF_FRAC_SET5_ADR(_BASE))
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET6_REG(_BASE) ((pma_rxword_msg_edgvref_frac_set6_reg_t*) PMA_RXWORD_MSG_EDGVREF_FRAC_SET6_ADR(_BASE))
#define PMA_RXWORD_MSG_EDGVREF_FRAC_SET7_REG(_BASE) ((pma_rxword_msg_edgvref_frac_set7_reg_t*) PMA_RXWORD_MSG_EDGVREF_FRAC_SET7_ADR(_BASE))
#define PMA_RXWORD_MSG_JPP_CTRL_0_REG(_BASE) ((pma_rxword_msg_jpp_ctrl_0_reg_t*) PMA_RXWORD_MSG_JPP_CTRL_0_ADR(_BASE))
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_0_REG(_BASE) ((pma_rxword_msg_dfe_lms_ctrl_0_reg_t*) PMA_RXWORD_MSG_DFE_LMS_CTRL_0_ADR(_BASE))
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_1_REG(_BASE) ((pma_rxword_msg_dfe_lms_ctrl_1_reg_t*) PMA_RXWORD_MSG_DFE_LMS_CTRL_1_ADR(_BASE))
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_2_REG(_BASE) ((pma_rxword_msg_dfe_lms_ctrl_2_reg_t*) PMA_RXWORD_MSG_DFE_LMS_CTRL_2_ADR(_BASE))
#define PMA_RXWORD_MSG_DFE_LMS_CTRL_3_REG(_BASE) ((pma_rxword_msg_dfe_lms_ctrl_3_reg_t*) PMA_RXWORD_MSG_DFE_LMS_CTRL_3_ADR(_BASE))
#define PMA_RXWORD_MSG_DFE_LMS_STAT_0_REG(_BASE) ((pma_rxword_msg_dfe_lms_stat_0_reg_t*) PMA_RXWORD_MSG_DFE_LMS_STAT_0_ADR(_BASE))
#define PMA_RXWORD_MSG_DFE_LMS_SET0TO3_REG(_BASE) ((pma_rxword_msg_dfe_lms_set0to3_reg_t*) PMA_RXWORD_MSG_DFE_LMS_SET0TO3_ADR(_BASE))
#define PMA_RXWORD_MSG_DFE_LMS_SET4TO7_REG(_BASE) ((pma_rxword_msg_dfe_lms_set4to7_reg_t*) PMA_RXWORD_MSG_DFE_LMS_SET4TO7_ADR(_BASE))
#define PMA_RXWORD_MSG_DFE_LMS_SET8TO11_REG(_BASE) ((pma_rxword_msg_dfe_lms_set8to11_reg_t*) PMA_RXWORD_MSG_DFE_LMS_SET8TO11_ADR(_BASE))
#define PMA_RXWORD_MSG_DFE_LMS_SET12TO15_REG(_BASE) ((pma_rxword_msg_dfe_lms_set12to15_reg_t*) PMA_RXWORD_MSG_DFE_LMS_SET12TO15_ADR(_BASE))
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET0TO3_REG(_BASE) ((pma_rxword_msg_dfe_lms_frac_set0to3_reg_t*) PMA_RXWORD_MSG_DFE_LMS_FRAC_SET0TO3_ADR(_BASE))
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET4TO7_REG(_BASE) ((pma_rxword_msg_dfe_lms_frac_set4to7_reg_t*) PMA_RXWORD_MSG_DFE_LMS_FRAC_SET4TO7_ADR(_BASE))
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET8TO11_REG(_BASE) ((pma_rxword_msg_dfe_lms_frac_set8to11_reg_t*) PMA_RXWORD_MSG_DFE_LMS_FRAC_SET8TO11_ADR(_BASE))
#define PMA_RXWORD_MSG_DFE_LMS_FRAC_SET12TO15_REG(_BASE) ((pma_rxword_msg_dfe_lms_frac_set12to15_reg_t*) PMA_RXWORD_MSG_DFE_LMS_FRAC_SET12TO15_ADR(_BASE))
#define PMA_RXWORD_MSG_DFE_CTRL_0_REG(_BASE) ((pma_rxword_msg_dfe_ctrl_0_reg_t*) PMA_RXWORD_MSG_DFE_CTRL_0_ADR(_BASE))
#define PMA_RXWORD_MSG_RX_SARARRAY_VALID_0_REG(_BASE) ((pma_rxword_msg_rx_sararray_valid_0_reg_t*) PMA_RXWORD_MSG_RX_SARARRAY_VALID_0_ADR(_BASE))
#define PMA_RXWORD_MSG_RX_SARARRAY_VALID_1_REG(_BASE) ((pma_rxword_msg_rx_sararray_valid_1_reg_t*) PMA_RXWORD_MSG_RX_SARARRAY_VALID_1_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET0TO3_REG(_BASE) ((pma_rxword_msg_cdr_ffe_pre1_set0to3_reg_t*) PMA_RXWORD_MSG_CDR_FFE_PRE1_SET0TO3_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET4TO7_REG(_BASE) ((pma_rxword_msg_cdr_ffe_pre1_set4to7_reg_t*) PMA_RXWORD_MSG_CDR_FFE_PRE1_SET4TO7_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET8TO11_REG(_BASE) ((pma_rxword_msg_cdr_ffe_pre1_set8to11_reg_t*) PMA_RXWORD_MSG_CDR_FFE_PRE1_SET8TO11_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET12TO15_REG(_BASE) ((pma_rxword_msg_cdr_ffe_pre1_set12to15_reg_t*) PMA_RXWORD_MSG_CDR_FFE_PRE1_SET12TO15_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET0_CTRL_REG(_BASE) ((pma_rxword_msg_cdr_ffe_slicer_lvl_set0_ctrl_reg_t*) PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET0_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET1_CTRL_REG(_BASE) ((pma_rxword_msg_cdr_ffe_slicer_lvl_set1_ctrl_reg_t*) PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET1_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET2_CTRL_REG(_BASE) ((pma_rxword_msg_cdr_ffe_slicer_lvl_set2_ctrl_reg_t*) PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET2_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET3_CTRL_REG(_BASE) ((pma_rxword_msg_cdr_ffe_slicer_lvl_set3_ctrl_reg_t*) PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET3_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET4_CTRL_REG(_BASE) ((pma_rxword_msg_cdr_ffe_slicer_lvl_set4_ctrl_reg_t*) PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET4_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET5_CTRL_REG(_BASE) ((pma_rxword_msg_cdr_ffe_slicer_lvl_set5_ctrl_reg_t*) PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET5_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET6_CTRL_REG(_BASE) ((pma_rxword_msg_cdr_ffe_slicer_lvl_set6_ctrl_reg_t*) PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET6_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET7_CTRL_REG(_BASE) ((pma_rxword_msg_cdr_ffe_slicer_lvl_set7_ctrl_reg_t*) PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET7_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET8_CTRL_REG(_BASE) ((pma_rxword_msg_cdr_ffe_slicer_lvl_set8_ctrl_reg_t*) PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET8_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET9_CTRL_REG(_BASE) ((pma_rxword_msg_cdr_ffe_slicer_lvl_set9_ctrl_reg_t*) PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET9_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET10_CTRL_REG(_BASE) ((pma_rxword_msg_cdr_ffe_slicer_lvl_set10_ctrl_reg_t*) PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET10_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET11_CTRL_REG(_BASE) ((pma_rxword_msg_cdr_ffe_slicer_lvl_set11_ctrl_reg_t*) PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET11_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET12_CTRL_REG(_BASE) ((pma_rxword_msg_cdr_ffe_slicer_lvl_set12_ctrl_reg_t*) PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET12_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET13_CTRL_REG(_BASE) ((pma_rxword_msg_cdr_ffe_slicer_lvl_set13_ctrl_reg_t*) PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET13_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET14_CTRL_REG(_BASE) ((pma_rxword_msg_cdr_ffe_slicer_lvl_set14_ctrl_reg_t*) PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET14_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET15_CTRL_REG(_BASE) ((pma_rxword_msg_cdr_ffe_slicer_lvl_set15_ctrl_reg_t*) PMA_RXWORD_MSG_CDR_FFE_SLICER_LVL_SET15_CTRL_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET0_REG(_BASE) ((pma_rxword_msg_cdr_ffe_err_lvl_m1m3_set0_reg_t*) PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET0_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET0_REG(_BASE) ((pma_rxword_msg_cdr_ffe_err_lvl_p1p3_set0_reg_t*) PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET0_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET1_REG(_BASE) ((pma_rxword_msg_cdr_ffe_err_lvl_m1m3_set1_reg_t*) PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET1_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET1_REG(_BASE) ((pma_rxword_msg_cdr_ffe_err_lvl_p1p3_set1_reg_t*) PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET1_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET2_REG(_BASE) ((pma_rxword_msg_cdr_ffe_err_lvl_m1m3_set2_reg_t*) PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET2_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET2_REG(_BASE) ((pma_rxword_msg_cdr_ffe_err_lvl_p1p3_set2_reg_t*) PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET2_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET3_REG(_BASE) ((pma_rxword_msg_cdr_ffe_err_lvl_m1m3_set3_reg_t*) PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET3_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET3_REG(_BASE) ((pma_rxword_msg_cdr_ffe_err_lvl_p1p3_set3_reg_t*) PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET3_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET4_REG(_BASE) ((pma_rxword_msg_cdr_ffe_err_lvl_m1m3_set4_reg_t*) PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET4_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET4_REG(_BASE) ((pma_rxword_msg_cdr_ffe_err_lvl_p1p3_set4_reg_t*) PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET4_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET5_REG(_BASE) ((pma_rxword_msg_cdr_ffe_err_lvl_m1m3_set5_reg_t*) PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET5_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET5_REG(_BASE) ((pma_rxword_msg_cdr_ffe_err_lvl_p1p3_set5_reg_t*) PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET5_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET6_REG(_BASE) ((pma_rxword_msg_cdr_ffe_err_lvl_m1m3_set6_reg_t*) PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET6_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET6_REG(_BASE) ((pma_rxword_msg_cdr_ffe_err_lvl_p1p3_set6_reg_t*) PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET6_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET7_REG(_BASE) ((pma_rxword_msg_cdr_ffe_err_lvl_m1m3_set7_reg_t*) PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET7_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET7_REG(_BASE) ((pma_rxword_msg_cdr_ffe_err_lvl_p1p3_set7_reg_t*) PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET7_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET8_REG(_BASE) ((pma_rxword_msg_cdr_ffe_err_lvl_m1m3_set8_reg_t*) PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET8_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET8_REG(_BASE) ((pma_rxword_msg_cdr_ffe_err_lvl_p1p3_set8_reg_t*) PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET8_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET9_REG(_BASE) ((pma_rxword_msg_cdr_ffe_err_lvl_m1m3_set9_reg_t*) PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET9_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET9_REG(_BASE) ((pma_rxword_msg_cdr_ffe_err_lvl_p1p3_set9_reg_t*) PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET9_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET10_REG(_BASE) ((pma_rxword_msg_cdr_ffe_err_lvl_m1m3_set10_reg_t*) PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET10_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET10_REG(_BASE) ((pma_rxword_msg_cdr_ffe_err_lvl_p1p3_set10_reg_t*) PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET10_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET11_REG(_BASE) ((pma_rxword_msg_cdr_ffe_err_lvl_m1m3_set11_reg_t*) PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET11_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET11_REG(_BASE) ((pma_rxword_msg_cdr_ffe_err_lvl_p1p3_set11_reg_t*) PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET11_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET12_REG(_BASE) ((pma_rxword_msg_cdr_ffe_err_lvl_m1m3_set12_reg_t*) PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET12_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET12_REG(_BASE) ((pma_rxword_msg_cdr_ffe_err_lvl_p1p3_set12_reg_t*) PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET12_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET13_REG(_BASE) ((pma_rxword_msg_cdr_ffe_err_lvl_m1m3_set13_reg_t*) PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET13_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET13_REG(_BASE) ((pma_rxword_msg_cdr_ffe_err_lvl_p1p3_set13_reg_t*) PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET13_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET14_REG(_BASE) ((pma_rxword_msg_cdr_ffe_err_lvl_m1m3_set14_reg_t*) PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET14_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET14_REG(_BASE) ((pma_rxword_msg_cdr_ffe_err_lvl_p1p3_set14_reg_t*) PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET14_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET15_REG(_BASE) ((pma_rxword_msg_cdr_ffe_err_lvl_m1m3_set15_reg_t*) PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_M1M3_SET15_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET15_REG(_BASE) ((pma_rxword_msg_cdr_ffe_err_lvl_p1p3_set15_reg_t*) PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_P1P3_SET15_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET0TO3_REG(_BASE) ((pma_rxword_msg_cdr_ffe_post1_set0to3_reg_t*) PMA_RXWORD_MSG_CDR_FFE_POST1_SET0TO3_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET4TO7_REG(_BASE) ((pma_rxword_msg_cdr_ffe_post1_set4to7_reg_t*) PMA_RXWORD_MSG_CDR_FFE_POST1_SET4TO7_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET8TO11_REG(_BASE) ((pma_rxword_msg_cdr_ffe_post1_set8to11_reg_t*) PMA_RXWORD_MSG_CDR_FFE_POST1_SET8TO11_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET12TO15_REG(_BASE) ((pma_rxword_msg_cdr_ffe_post1_set12to15_reg_t*) PMA_RXWORD_MSG_CDR_FFE_POST1_SET12TO15_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_0_REG(_BASE) ((pma_rxword_msg_cdr_ffe_ctrl_0_reg_t*) PMA_RXWORD_MSG_CDR_FFE_CTRL_0_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_1_REG(_BASE) ((pma_rxword_msg_cdr_ffe_ctrl_1_reg_t*) PMA_RXWORD_MSG_CDR_FFE_CTRL_1_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_2_REG(_BASE) ((pma_rxword_msg_cdr_ffe_ctrl_2_reg_t*) PMA_RXWORD_MSG_CDR_FFE_CTRL_2_ADR(_BASE))
#define PMA_RXWORD_MSG_LMS_AVG_UPDN_STAT_0_REG(_BASE) ((pma_rxword_msg_lms_avg_updn_stat_0_reg_t*) PMA_RXWORD_MSG_LMS_AVG_UPDN_STAT_0_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_1_REG(_BASE) ((pma_rxword_msg_cdr_ffe_vref_ctrl_1_reg_t*) PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_1_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_2_REG(_BASE) ((pma_rxword_msg_cdr_ffe_vref_ctrl_2_reg_t*) PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_2_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_3_REG(_BASE) ((pma_rxword_msg_cdr_ffe_vref_ctrl_3_reg_t*) PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_3_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_4_REG(_BASE) ((pma_rxword_msg_cdr_ffe_vref_ctrl_4_reg_t*) PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_4_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_5_REG(_BASE) ((pma_rxword_msg_cdr_ffe_vref_ctrl_5_reg_t*) PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_5_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_6_REG(_BASE) ((pma_rxword_msg_cdr_ffe_vref_ctrl_6_reg_t*) PMA_RXWORD_MSG_CDR_FFE_VREF_CTRL_6_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_0_REG(_BASE) ((pma_rxword_msg_cdr_ffe_ofc_ctrl_0_reg_t*) PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_0_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_1A_REG(_BASE) ((pma_rxword_msg_cdr_ffe_ofc_ctrl_1a_reg_t*) PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_1A_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_1B_REG(_BASE) ((pma_rxword_msg_cdr_ffe_ofc_ctrl_1b_reg_t*) PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_1B_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_2_REG(_BASE) ((pma_rxword_msg_cdr_ffe_ofc_ctrl_2_reg_t*) PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_2_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_3_REG(_BASE) ((pma_rxword_msg_cdr_ffe_ofc_ctrl_3_reg_t*) PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_3_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_OFC_STAT_0_REG(_BASE) ((pma_rxword_msg_cdr_ffe_ofc_stat_0_reg_t*) PMA_RXWORD_MSG_CDR_FFE_OFC_STAT_0_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET0TO3_FRAC_REG(_BASE) ((pma_rxword_msg_cdr_ffe_pre1_set0to3_frac_reg_t*) PMA_RXWORD_MSG_CDR_FFE_PRE1_SET0TO3_FRAC_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET4TO7_FRAC_REG(_BASE) ((pma_rxword_msg_cdr_ffe_pre1_set4to7_frac_reg_t*) PMA_RXWORD_MSG_CDR_FFE_PRE1_SET4TO7_FRAC_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET8TO11_FRAC_REG(_BASE) ((pma_rxword_msg_cdr_ffe_pre1_set8to11_frac_reg_t*) PMA_RXWORD_MSG_CDR_FFE_PRE1_SET8TO11_FRAC_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_PRE1_SET12TO15_FRAC_REG(_BASE) ((pma_rxword_msg_cdr_ffe_pre1_set12to15_frac_reg_t*) PMA_RXWORD_MSG_CDR_FFE_PRE1_SET12TO15_FRAC_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET0TO3_FRAC_REG(_BASE) ((pma_rxword_msg_cdr_ffe_post1_set0to3_frac_reg_t*) PMA_RXWORD_MSG_CDR_FFE_POST1_SET0TO3_FRAC_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET4TO7_FRAC_REG(_BASE) ((pma_rxword_msg_cdr_ffe_post1_set4to7_frac_reg_t*) PMA_RXWORD_MSG_CDR_FFE_POST1_SET4TO7_FRAC_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET8TO11_FRAC_REG(_BASE) ((pma_rxword_msg_cdr_ffe_post1_set8to11_frac_reg_t*) PMA_RXWORD_MSG_CDR_FFE_POST1_SET8TO11_FRAC_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_POST1_SET12TO15_FRAC_REG(_BASE) ((pma_rxword_msg_cdr_ffe_post1_set12to15_frac_reg_t*) PMA_RXWORD_MSG_CDR_FFE_POST1_SET12TO15_FRAC_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET0_0_REG(_BASE) ((pma_rxword_msg_cdr_ffe_err_lvl_frac_set0_0_reg_t*) PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET0_0_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET1_0_REG(_BASE) ((pma_rxword_msg_cdr_ffe_err_lvl_frac_set1_0_reg_t*) PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET1_0_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET2_0_REG(_BASE) ((pma_rxword_msg_cdr_ffe_err_lvl_frac_set2_0_reg_t*) PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET2_0_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET3_0_REG(_BASE) ((pma_rxword_msg_cdr_ffe_err_lvl_frac_set3_0_reg_t*) PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET3_0_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET4_0_REG(_BASE) ((pma_rxword_msg_cdr_ffe_err_lvl_frac_set4_0_reg_t*) PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET4_0_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET5_0_REG(_BASE) ((pma_rxword_msg_cdr_ffe_err_lvl_frac_set5_0_reg_t*) PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET5_0_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET6_0_REG(_BASE) ((pma_rxword_msg_cdr_ffe_err_lvl_frac_set6_0_reg_t*) PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET6_0_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET7_0_REG(_BASE) ((pma_rxword_msg_cdr_ffe_err_lvl_frac_set7_0_reg_t*) PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET7_0_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET8_0_REG(_BASE) ((pma_rxword_msg_cdr_ffe_err_lvl_frac_set8_0_reg_t*) PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET8_0_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET9_0_REG(_BASE) ((pma_rxword_msg_cdr_ffe_err_lvl_frac_set9_0_reg_t*) PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET9_0_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET10_0_REG(_BASE) ((pma_rxword_msg_cdr_ffe_err_lvl_frac_set10_0_reg_t*) PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET10_0_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET11_0_REG(_BASE) ((pma_rxword_msg_cdr_ffe_err_lvl_frac_set11_0_reg_t*) PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET11_0_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET12_0_REG(_BASE) ((pma_rxword_msg_cdr_ffe_err_lvl_frac_set12_0_reg_t*) PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET12_0_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET13_0_REG(_BASE) ((pma_rxword_msg_cdr_ffe_err_lvl_frac_set13_0_reg_t*) PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET13_0_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET14_0_REG(_BASE) ((pma_rxword_msg_cdr_ffe_err_lvl_frac_set14_0_reg_t*) PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET14_0_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET15_0_REG(_BASE) ((pma_rxword_msg_cdr_ffe_err_lvl_frac_set15_0_reg_t*) PMA_RXWORD_MSG_CDR_FFE_ERR_LVL_FRAC_SET15_0_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_CTRL_3_REG(_BASE) ((pma_rxword_msg_cdr_ffe_ctrl_3_reg_t*) PMA_RXWORD_MSG_CDR_FFE_CTRL_3_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET0TO3_REG(_BASE) ((pma_rxword_msg_cdr_ffe_pre3_set0to3_reg_t*) PMA_RXWORD_MSG_CDR_FFE_PRE3_SET0TO3_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET4TO7_REG(_BASE) ((pma_rxword_msg_cdr_ffe_pre3_set4to7_reg_t*) PMA_RXWORD_MSG_CDR_FFE_PRE3_SET4TO7_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET8TO11_REG(_BASE) ((pma_rxword_msg_cdr_ffe_pre3_set8to11_reg_t*) PMA_RXWORD_MSG_CDR_FFE_PRE3_SET8TO11_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET12TO15_REG(_BASE) ((pma_rxword_msg_cdr_ffe_pre3_set12to15_reg_t*) PMA_RXWORD_MSG_CDR_FFE_PRE3_SET12TO15_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET0TO3_REG(_BASE) ((pma_rxword_msg_cdr_ffe_pre2_set0to3_reg_t*) PMA_RXWORD_MSG_CDR_FFE_PRE2_SET0TO3_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET4TO7_REG(_BASE) ((pma_rxword_msg_cdr_ffe_pre2_set4to7_reg_t*) PMA_RXWORD_MSG_CDR_FFE_PRE2_SET4TO7_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET8TO11_REG(_BASE) ((pma_rxword_msg_cdr_ffe_pre2_set8to11_reg_t*) PMA_RXWORD_MSG_CDR_FFE_PRE2_SET8TO11_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET12TO15_REG(_BASE) ((pma_rxword_msg_cdr_ffe_pre2_set12to15_reg_t*) PMA_RXWORD_MSG_CDR_FFE_PRE2_SET12TO15_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET0TO3_REG(_BASE) ((pma_rxword_msg_cdr_ffe_post2_set0to3_reg_t*) PMA_RXWORD_MSG_CDR_FFE_POST2_SET0TO3_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET4TO7_REG(_BASE) ((pma_rxword_msg_cdr_ffe_post2_set4to7_reg_t*) PMA_RXWORD_MSG_CDR_FFE_POST2_SET4TO7_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET8TO11_REG(_BASE) ((pma_rxword_msg_cdr_ffe_post2_set8to11_reg_t*) PMA_RXWORD_MSG_CDR_FFE_POST2_SET8TO11_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET12TO15_REG(_BASE) ((pma_rxword_msg_cdr_ffe_post2_set12to15_reg_t*) PMA_RXWORD_MSG_CDR_FFE_POST2_SET12TO15_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET0TO3_REG(_BASE) ((pma_rxword_msg_cdr_ffe_post3_set0to3_reg_t*) PMA_RXWORD_MSG_CDR_FFE_POST3_SET0TO3_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET4TO7_REG(_BASE) ((pma_rxword_msg_cdr_ffe_post3_set4to7_reg_t*) PMA_RXWORD_MSG_CDR_FFE_POST3_SET4TO7_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET8TO11_REG(_BASE) ((pma_rxword_msg_cdr_ffe_post3_set8to11_reg_t*) PMA_RXWORD_MSG_CDR_FFE_POST3_SET8TO11_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET12TO15_REG(_BASE) ((pma_rxword_msg_cdr_ffe_post3_set12to15_reg_t*) PMA_RXWORD_MSG_CDR_FFE_POST3_SET12TO15_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET0TO3_REG(_BASE) ((pma_rxword_msg_cdr_ffe_post4_set0to3_reg_t*) PMA_RXWORD_MSG_CDR_FFE_POST4_SET0TO3_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET4TO7_REG(_BASE) ((pma_rxword_msg_cdr_ffe_post4_set4to7_reg_t*) PMA_RXWORD_MSG_CDR_FFE_POST4_SET4TO7_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET8TO11_REG(_BASE) ((pma_rxword_msg_cdr_ffe_post4_set8to11_reg_t*) PMA_RXWORD_MSG_CDR_FFE_POST4_SET8TO11_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET12TO15_REG(_BASE) ((pma_rxword_msg_cdr_ffe_post4_set12to15_reg_t*) PMA_RXWORD_MSG_CDR_FFE_POST4_SET12TO15_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET0TO3_FRAC_REG(_BASE) ((pma_rxword_msg_cdr_ffe_pre3_set0to3_frac_reg_t*) PMA_RXWORD_MSG_CDR_FFE_PRE3_SET0TO3_FRAC_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET4TO7_FRAC_REG(_BASE) ((pma_rxword_msg_cdr_ffe_pre3_set4to7_frac_reg_t*) PMA_RXWORD_MSG_CDR_FFE_PRE3_SET4TO7_FRAC_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET8TO11_FRAC_REG(_BASE) ((pma_rxword_msg_cdr_ffe_pre3_set8to11_frac_reg_t*) PMA_RXWORD_MSG_CDR_FFE_PRE3_SET8TO11_FRAC_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_PRE3_SET12TO15_FRAC_REG(_BASE) ((pma_rxword_msg_cdr_ffe_pre3_set12to15_frac_reg_t*) PMA_RXWORD_MSG_CDR_FFE_PRE3_SET12TO15_FRAC_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET0TO3_FRAC_REG(_BASE) ((pma_rxword_msg_cdr_ffe_pre2_set0to3_frac_reg_t*) PMA_RXWORD_MSG_CDR_FFE_PRE2_SET0TO3_FRAC_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET4TO7_FRAC_REG(_BASE) ((pma_rxword_msg_cdr_ffe_pre2_set4to7_frac_reg_t*) PMA_RXWORD_MSG_CDR_FFE_PRE2_SET4TO7_FRAC_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET8TO11_FRAC_REG(_BASE) ((pma_rxword_msg_cdr_ffe_pre2_set8to11_frac_reg_t*) PMA_RXWORD_MSG_CDR_FFE_PRE2_SET8TO11_FRAC_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_PRE2_SET12TO15_FRAC_REG(_BASE) ((pma_rxword_msg_cdr_ffe_pre2_set12to15_frac_reg_t*) PMA_RXWORD_MSG_CDR_FFE_PRE2_SET12TO15_FRAC_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET0TO3_FRAC_REG(_BASE) ((pma_rxword_msg_cdr_ffe_post2_set0to3_frac_reg_t*) PMA_RXWORD_MSG_CDR_FFE_POST2_SET0TO3_FRAC_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET4TO7_FRAC_REG(_BASE) ((pma_rxword_msg_cdr_ffe_post2_set4to7_frac_reg_t*) PMA_RXWORD_MSG_CDR_FFE_POST2_SET4TO7_FRAC_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET8TO11_FRAC_REG(_BASE) ((pma_rxword_msg_cdr_ffe_post2_set8to11_frac_reg_t*) PMA_RXWORD_MSG_CDR_FFE_POST2_SET8TO11_FRAC_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_POST2_SET12TO15_FRAC_REG(_BASE) ((pma_rxword_msg_cdr_ffe_post2_set12to15_frac_reg_t*) PMA_RXWORD_MSG_CDR_FFE_POST2_SET12TO15_FRAC_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET0TO3_FRAC_REG(_BASE) ((pma_rxword_msg_cdr_ffe_post3_set0to3_frac_reg_t*) PMA_RXWORD_MSG_CDR_FFE_POST3_SET0TO3_FRAC_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET4TO7_FRAC_REG(_BASE) ((pma_rxword_msg_cdr_ffe_post3_set4to7_frac_reg_t*) PMA_RXWORD_MSG_CDR_FFE_POST3_SET4TO7_FRAC_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET8TO11_FRAC_REG(_BASE) ((pma_rxword_msg_cdr_ffe_post3_set8to11_frac_reg_t*) PMA_RXWORD_MSG_CDR_FFE_POST3_SET8TO11_FRAC_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_POST3_SET12TO15_FRAC_REG(_BASE) ((pma_rxword_msg_cdr_ffe_post3_set12to15_frac_reg_t*) PMA_RXWORD_MSG_CDR_FFE_POST3_SET12TO15_FRAC_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET0TO3_FRAC_REG(_BASE) ((pma_rxword_msg_cdr_ffe_post4_set0to3_frac_reg_t*) PMA_RXWORD_MSG_CDR_FFE_POST4_SET0TO3_FRAC_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET4TO7_FRAC_REG(_BASE) ((pma_rxword_msg_cdr_ffe_post4_set4to7_frac_reg_t*) PMA_RXWORD_MSG_CDR_FFE_POST4_SET4TO7_FRAC_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET8TO11_FRAC_REG(_BASE) ((pma_rxword_msg_cdr_ffe_post4_set8to11_frac_reg_t*) PMA_RXWORD_MSG_CDR_FFE_POST4_SET8TO11_FRAC_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_POST4_SET12TO15_FRAC_REG(_BASE) ((pma_rxword_msg_cdr_ffe_post4_set12to15_frac_reg_t*) PMA_RXWORD_MSG_CDR_FFE_POST4_SET12TO15_FRAC_ADR(_BASE))
#define PMA_RXWORD_MSG_SATURATION_STAT_4_REG(_BASE) ((pma_rxword_msg_saturation_stat_4_reg_t*) PMA_RXWORD_MSG_SATURATION_STAT_4_ADR(_BASE))
#define PMA_RXWORD_MSG_AFFE_IF_CTRL_0_REG(_BASE) ((pma_rxword_msg_affe_if_ctrl_0_reg_t*) PMA_RXWORD_MSG_AFFE_IF_CTRL_0_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_0TO3_REG(_BASE) ((pma_rxword_msg_ops_taps_b0_sar_0to3_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_0TO3_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_4TO7_REG(_BASE) ((pma_rxword_msg_ops_taps_b0_sar_4to7_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_4TO7_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_8TO11_REG(_BASE) ((pma_rxword_msg_ops_taps_b0_sar_8to11_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_8TO11_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_12TO15_REG(_BASE) ((pma_rxword_msg_ops_taps_b0_sar_12to15_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_12TO15_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_16TO19_REG(_BASE) ((pma_rxword_msg_ops_taps_b0_sar_16to19_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_16TO19_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_20TO23_REG(_BASE) ((pma_rxword_msg_ops_taps_b0_sar_20to23_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_20TO23_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_24TO27_REG(_BASE) ((pma_rxword_msg_ops_taps_b0_sar_24to27_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_24TO27_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_28TO31_REG(_BASE) ((pma_rxword_msg_ops_taps_b0_sar_28to31_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_28TO31_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_32TO35_REG(_BASE) ((pma_rxword_msg_ops_taps_b0_sar_32to35_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_32TO35_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_36TO39_REG(_BASE) ((pma_rxword_msg_ops_taps_b0_sar_36to39_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_36TO39_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_40TO43_REG(_BASE) ((pma_rxword_msg_ops_taps_b0_sar_40to43_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_40TO43_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_44TO47_REG(_BASE) ((pma_rxword_msg_ops_taps_b0_sar_44to47_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_44TO47_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_48TO51_REG(_BASE) ((pma_rxword_msg_ops_taps_b0_sar_48to51_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_48TO51_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_52TO55_REG(_BASE) ((pma_rxword_msg_ops_taps_b0_sar_52to55_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_52TO55_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_56TO59_REG(_BASE) ((pma_rxword_msg_ops_taps_b0_sar_56to59_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_56TO59_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_60TO63_REG(_BASE) ((pma_rxword_msg_ops_taps_b0_sar_60to63_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B0_SAR_60TO63_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_0TO3_REG(_BASE) ((pma_rxword_msg_ops_taps_b1_sar_0to3_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_0TO3_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_4TO7_REG(_BASE) ((pma_rxword_msg_ops_taps_b1_sar_4to7_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_4TO7_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_8TO11_REG(_BASE) ((pma_rxword_msg_ops_taps_b1_sar_8to11_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_8TO11_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_12TO15_REG(_BASE) ((pma_rxword_msg_ops_taps_b1_sar_12to15_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_12TO15_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_16TO19_REG(_BASE) ((pma_rxword_msg_ops_taps_b1_sar_16to19_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_16TO19_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_20TO23_REG(_BASE) ((pma_rxword_msg_ops_taps_b1_sar_20to23_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_20TO23_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_24TO27_REG(_BASE) ((pma_rxword_msg_ops_taps_b1_sar_24to27_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_24TO27_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_28TO31_REG(_BASE) ((pma_rxword_msg_ops_taps_b1_sar_28to31_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_28TO31_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_32TO35_REG(_BASE) ((pma_rxword_msg_ops_taps_b1_sar_32to35_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_32TO35_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_36TO39_REG(_BASE) ((pma_rxword_msg_ops_taps_b1_sar_36to39_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_36TO39_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_40TO43_REG(_BASE) ((pma_rxword_msg_ops_taps_b1_sar_40to43_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_40TO43_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_44TO47_REG(_BASE) ((pma_rxword_msg_ops_taps_b1_sar_44to47_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_44TO47_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_48TO51_REG(_BASE) ((pma_rxword_msg_ops_taps_b1_sar_48to51_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_48TO51_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_52TO55_REG(_BASE) ((pma_rxword_msg_ops_taps_b1_sar_52to55_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_52TO55_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_56TO59_REG(_BASE) ((pma_rxword_msg_ops_taps_b1_sar_56to59_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_56TO59_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_60TO63_REG(_BASE) ((pma_rxword_msg_ops_taps_b1_sar_60to63_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B1_SAR_60TO63_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_0TO3_REG(_BASE) ((pma_rxword_msg_ops_taps_b2_sar_0to3_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_0TO3_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_4TO7_REG(_BASE) ((pma_rxword_msg_ops_taps_b2_sar_4to7_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_4TO7_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_8TO11_REG(_BASE) ((pma_rxword_msg_ops_taps_b2_sar_8to11_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_8TO11_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_12TO15_REG(_BASE) ((pma_rxword_msg_ops_taps_b2_sar_12to15_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_12TO15_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_16TO19_REG(_BASE) ((pma_rxword_msg_ops_taps_b2_sar_16to19_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_16TO19_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_20TO23_REG(_BASE) ((pma_rxword_msg_ops_taps_b2_sar_20to23_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_20TO23_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_24TO27_REG(_BASE) ((pma_rxword_msg_ops_taps_b2_sar_24to27_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_24TO27_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_28TO31_REG(_BASE) ((pma_rxword_msg_ops_taps_b2_sar_28to31_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_28TO31_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_32TO35_REG(_BASE) ((pma_rxword_msg_ops_taps_b2_sar_32to35_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_32TO35_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_36TO39_REG(_BASE) ((pma_rxword_msg_ops_taps_b2_sar_36to39_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_36TO39_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_40TO43_REG(_BASE) ((pma_rxword_msg_ops_taps_b2_sar_40to43_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_40TO43_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_44TO47_REG(_BASE) ((pma_rxword_msg_ops_taps_b2_sar_44to47_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_44TO47_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_48TO51_REG(_BASE) ((pma_rxword_msg_ops_taps_b2_sar_48to51_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_48TO51_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_52TO55_REG(_BASE) ((pma_rxword_msg_ops_taps_b2_sar_52to55_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_52TO55_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_56TO59_REG(_BASE) ((pma_rxword_msg_ops_taps_b2_sar_56to59_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_56TO59_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_60TO63_REG(_BASE) ((pma_rxword_msg_ops_taps_b2_sar_60to63_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B2_SAR_60TO63_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_0TO3_REG(_BASE) ((pma_rxword_msg_ops_taps_b3_sar_0to3_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_0TO3_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_4TO7_REG(_BASE) ((pma_rxword_msg_ops_taps_b3_sar_4to7_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_4TO7_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_8TO11_REG(_BASE) ((pma_rxword_msg_ops_taps_b3_sar_8to11_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_8TO11_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_12TO15_REG(_BASE) ((pma_rxword_msg_ops_taps_b3_sar_12to15_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_12TO15_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_16TO19_REG(_BASE) ((pma_rxword_msg_ops_taps_b3_sar_16to19_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_16TO19_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_20TO23_REG(_BASE) ((pma_rxword_msg_ops_taps_b3_sar_20to23_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_20TO23_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_24TO27_REG(_BASE) ((pma_rxword_msg_ops_taps_b3_sar_24to27_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_24TO27_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_28TO31_REG(_BASE) ((pma_rxword_msg_ops_taps_b3_sar_28to31_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_28TO31_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_32TO35_REG(_BASE) ((pma_rxword_msg_ops_taps_b3_sar_32to35_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_32TO35_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_36TO39_REG(_BASE) ((pma_rxword_msg_ops_taps_b3_sar_36to39_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_36TO39_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_40TO43_REG(_BASE) ((pma_rxword_msg_ops_taps_b3_sar_40to43_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_40TO43_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_44TO47_REG(_BASE) ((pma_rxword_msg_ops_taps_b3_sar_44to47_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_44TO47_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_48TO51_REG(_BASE) ((pma_rxword_msg_ops_taps_b3_sar_48to51_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_48TO51_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_52TO55_REG(_BASE) ((pma_rxword_msg_ops_taps_b3_sar_52to55_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_52TO55_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_56TO59_REG(_BASE) ((pma_rxword_msg_ops_taps_b3_sar_56to59_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_56TO59_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_60TO63_REG(_BASE) ((pma_rxword_msg_ops_taps_b3_sar_60to63_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B3_SAR_60TO63_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_0TO3_REG(_BASE) ((pma_rxword_msg_ops_taps_b4_sar_0to3_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_0TO3_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_4TO7_REG(_BASE) ((pma_rxword_msg_ops_taps_b4_sar_4to7_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_4TO7_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_8TO11_REG(_BASE) ((pma_rxword_msg_ops_taps_b4_sar_8to11_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_8TO11_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_12TO15_REG(_BASE) ((pma_rxword_msg_ops_taps_b4_sar_12to15_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_12TO15_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_16TO19_REG(_BASE) ((pma_rxword_msg_ops_taps_b4_sar_16to19_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_16TO19_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_20TO23_REG(_BASE) ((pma_rxword_msg_ops_taps_b4_sar_20to23_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_20TO23_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_24TO27_REG(_BASE) ((pma_rxword_msg_ops_taps_b4_sar_24to27_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_24TO27_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_28TO31_REG(_BASE) ((pma_rxword_msg_ops_taps_b4_sar_28to31_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_28TO31_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_32TO35_REG(_BASE) ((pma_rxword_msg_ops_taps_b4_sar_32to35_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_32TO35_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_36TO39_REG(_BASE) ((pma_rxword_msg_ops_taps_b4_sar_36to39_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_36TO39_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_40TO43_REG(_BASE) ((pma_rxword_msg_ops_taps_b4_sar_40to43_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_40TO43_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_44TO47_REG(_BASE) ((pma_rxword_msg_ops_taps_b4_sar_44to47_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_44TO47_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_48TO51_REG(_BASE) ((pma_rxword_msg_ops_taps_b4_sar_48to51_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_48TO51_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_52TO55_REG(_BASE) ((pma_rxword_msg_ops_taps_b4_sar_52to55_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_52TO55_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_56TO59_REG(_BASE) ((pma_rxword_msg_ops_taps_b4_sar_56to59_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_56TO59_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_60TO63_REG(_BASE) ((pma_rxword_msg_ops_taps_b4_sar_60to63_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B4_SAR_60TO63_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_0TO3_REG(_BASE) ((pma_rxword_msg_ops_taps_b5_sar_0to3_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_0TO3_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_4TO7_REG(_BASE) ((pma_rxword_msg_ops_taps_b5_sar_4to7_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_4TO7_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_8TO11_REG(_BASE) ((pma_rxword_msg_ops_taps_b5_sar_8to11_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_8TO11_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_12TO15_REG(_BASE) ((pma_rxword_msg_ops_taps_b5_sar_12to15_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_12TO15_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_16TO19_REG(_BASE) ((pma_rxword_msg_ops_taps_b5_sar_16to19_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_16TO19_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_20TO23_REG(_BASE) ((pma_rxword_msg_ops_taps_b5_sar_20to23_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_20TO23_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_24TO27_REG(_BASE) ((pma_rxword_msg_ops_taps_b5_sar_24to27_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_24TO27_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_28TO31_REG(_BASE) ((pma_rxword_msg_ops_taps_b5_sar_28to31_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_28TO31_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_32TO35_REG(_BASE) ((pma_rxword_msg_ops_taps_b5_sar_32to35_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_32TO35_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_36TO39_REG(_BASE) ((pma_rxword_msg_ops_taps_b5_sar_36to39_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_36TO39_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_40TO43_REG(_BASE) ((pma_rxword_msg_ops_taps_b5_sar_40to43_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_40TO43_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_44TO47_REG(_BASE) ((pma_rxword_msg_ops_taps_b5_sar_44to47_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_44TO47_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_48TO51_REG(_BASE) ((pma_rxword_msg_ops_taps_b5_sar_48to51_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_48TO51_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_52TO55_REG(_BASE) ((pma_rxword_msg_ops_taps_b5_sar_52to55_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_52TO55_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_56TO59_REG(_BASE) ((pma_rxword_msg_ops_taps_b5_sar_56to59_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_56TO59_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_60TO63_REG(_BASE) ((pma_rxword_msg_ops_taps_b5_sar_60to63_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_B5_SAR_60TO63_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_0TO3_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b0_sar_0to3_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_0TO3_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_4TO7_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b0_sar_4to7_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_4TO7_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_8TO11_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b0_sar_8to11_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_8TO11_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_12TO15_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b0_sar_12to15_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_12TO15_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_16TO19_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b0_sar_16to19_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_16TO19_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_20TO23_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b0_sar_20to23_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_20TO23_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_24TO27_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b0_sar_24to27_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_24TO27_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_28TO31_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b0_sar_28to31_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_28TO31_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_32TO35_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b0_sar_32to35_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_32TO35_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_36TO39_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b0_sar_36to39_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_36TO39_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_40TO43_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b0_sar_40to43_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_40TO43_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_44TO47_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b0_sar_44to47_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_44TO47_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_48TO51_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b0_sar_48to51_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_48TO51_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_52TO55_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b0_sar_52to55_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_52TO55_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_56TO59_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b0_sar_56to59_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_56TO59_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_60TO63_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b0_sar_60to63_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B0_SAR_60TO63_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_0TO3_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b1_sar_0to3_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_0TO3_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_4TO7_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b1_sar_4to7_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_4TO7_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_8TO11_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b1_sar_8to11_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_8TO11_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_12TO15_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b1_sar_12to15_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_12TO15_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_16TO19_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b1_sar_16to19_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_16TO19_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_20TO23_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b1_sar_20to23_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_20TO23_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_24TO27_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b1_sar_24to27_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_24TO27_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_28TO31_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b1_sar_28to31_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_28TO31_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_32TO35_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b1_sar_32to35_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_32TO35_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_36TO39_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b1_sar_36to39_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_36TO39_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_40TO43_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b1_sar_40to43_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_40TO43_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_44TO47_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b1_sar_44to47_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_44TO47_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_48TO51_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b1_sar_48to51_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_48TO51_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_52TO55_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b1_sar_52to55_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_52TO55_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_56TO59_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b1_sar_56to59_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_56TO59_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_60TO63_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b1_sar_60to63_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B1_SAR_60TO63_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_0TO3_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b2_sar_0to3_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_0TO3_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_4TO7_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b2_sar_4to7_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_4TO7_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_8TO11_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b2_sar_8to11_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_8TO11_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_12TO15_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b2_sar_12to15_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_12TO15_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_16TO19_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b2_sar_16to19_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_16TO19_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_20TO23_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b2_sar_20to23_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_20TO23_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_24TO27_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b2_sar_24to27_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_24TO27_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_28TO31_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b2_sar_28to31_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_28TO31_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_32TO35_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b2_sar_32to35_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_32TO35_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_36TO39_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b2_sar_36to39_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_36TO39_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_40TO43_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b2_sar_40to43_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_40TO43_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_44TO47_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b2_sar_44to47_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_44TO47_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_48TO51_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b2_sar_48to51_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_48TO51_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_52TO55_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b2_sar_52to55_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_52TO55_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_56TO59_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b2_sar_56to59_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_56TO59_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_60TO63_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b2_sar_60to63_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B2_SAR_60TO63_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_0TO3_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b3_sar_0to3_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_0TO3_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_4TO7_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b3_sar_4to7_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_4TO7_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_8TO11_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b3_sar_8to11_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_8TO11_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_12TO15_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b3_sar_12to15_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_12TO15_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_16TO19_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b3_sar_16to19_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_16TO19_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_20TO23_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b3_sar_20to23_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_20TO23_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_24TO27_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b3_sar_24to27_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_24TO27_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_28TO31_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b3_sar_28to31_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_28TO31_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_32TO35_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b3_sar_32to35_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_32TO35_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_36TO39_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b3_sar_36to39_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_36TO39_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_40TO43_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b3_sar_40to43_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_40TO43_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_44TO47_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b3_sar_44to47_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_44TO47_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_48TO51_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b3_sar_48to51_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_48TO51_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_52TO55_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b3_sar_52to55_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_52TO55_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_56TO59_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b3_sar_56to59_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_56TO59_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_60TO63_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b3_sar_60to63_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B3_SAR_60TO63_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_0TO3_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b4_sar_0to3_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_0TO3_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_4TO7_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b4_sar_4to7_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_4TO7_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_8TO11_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b4_sar_8to11_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_8TO11_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_12TO15_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b4_sar_12to15_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_12TO15_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_16TO19_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b4_sar_16to19_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_16TO19_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_20TO23_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b4_sar_20to23_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_20TO23_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_24TO27_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b4_sar_24to27_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_24TO27_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_28TO31_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b4_sar_28to31_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_28TO31_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_32TO35_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b4_sar_32to35_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_32TO35_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_36TO39_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b4_sar_36to39_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_36TO39_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_40TO43_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b4_sar_40to43_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_40TO43_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_44TO47_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b4_sar_44to47_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_44TO47_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_48TO51_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b4_sar_48to51_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_48TO51_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_52TO55_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b4_sar_52to55_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_52TO55_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_56TO59_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b4_sar_56to59_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_56TO59_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_60TO63_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b4_sar_60to63_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B4_SAR_60TO63_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_0TO3_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b5_sar_0to3_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_0TO3_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_4TO7_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b5_sar_4to7_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_4TO7_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_8TO11_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b5_sar_8to11_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_8TO11_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_12TO15_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b5_sar_12to15_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_12TO15_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_16TO19_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b5_sar_16to19_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_16TO19_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_20TO23_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b5_sar_20to23_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_20TO23_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_24TO27_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b5_sar_24to27_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_24TO27_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_28TO31_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b5_sar_28to31_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_28TO31_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_32TO35_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b5_sar_32to35_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_32TO35_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_36TO39_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b5_sar_36to39_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_36TO39_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_40TO43_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b5_sar_40to43_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_40TO43_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_44TO47_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b5_sar_44to47_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_44TO47_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_48TO51_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b5_sar_48to51_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_48TO51_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_52TO55_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b5_sar_52to55_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_52TO55_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_56TO59_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b5_sar_56to59_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_56TO59_ADR(_BASE))
#define PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_60TO63_REG(_BASE) ((pma_rxword_msg_ops_taps_fra_b5_sar_60to63_reg_t*) PMA_RXWORD_MSG_OPS_TAPS_FRA_B5_SAR_60TO63_ADR(_BASE))
#define PMA_RXWORD_MSG_OFC_CTRL_4_REG(_BASE) ((pma_rxword_msg_ofc_ctrl_4_reg_t*) PMA_RXWORD_MSG_OFC_CTRL_4_ADR(_BASE))
#define PMA_RXWORD_MSG_OFC_CTRL_5_REG(_BASE) ((pma_rxword_msg_ofc_ctrl_5_reg_t*) PMA_RXWORD_MSG_OFC_CTRL_5_ADR(_BASE))
#define PMA_RXWORD_MSG_OFC_CTRL_6_REG(_BASE) ((pma_rxword_msg_ofc_ctrl_6_reg_t*) PMA_RXWORD_MSG_OFC_CTRL_6_ADR(_BASE))
#define PMA_RXWORD_MSG_OFC_CTRL_7_REG(_BASE) ((pma_rxword_msg_ofc_ctrl_7_reg_t*) PMA_RXWORD_MSG_OFC_CTRL_7_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_4_REG(_BASE) ((pma_rxword_msg_cdr_ffe_ofc_ctrl_4_reg_t*) PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_4_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_5_REG(_BASE) ((pma_rxword_msg_cdr_ffe_ofc_ctrl_5_reg_t*) PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_5_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_6_REG(_BASE) ((pma_rxword_msg_cdr_ffe_ofc_ctrl_6_reg_t*) PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_6_ADR(_BASE))
#define PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_7_REG(_BASE) ((pma_rxword_msg_cdr_ffe_ofc_ctrl_7_reg_t*) PMA_RXWORD_MSG_CDR_FFE_OFC_CTRL_7_ADR(_BASE))
#define PMA_RXWORD_MSG_ADCOFC_CTRL_4_REG(_BASE) ((pma_rxword_msg_adcofc_ctrl_4_reg_t*) PMA_RXWORD_MSG_ADCOFC_CTRL_4_ADR(_BASE))
#define PMA_RXWORD_MSG_ADCOFC_CTRL_5_REG(_BASE) ((pma_rxword_msg_adcofc_ctrl_5_reg_t*) PMA_RXWORD_MSG_ADCOFC_CTRL_5_ADR(_BASE))
#define PMA_RXWORD_MSG_ADCOFC_CTRL_6_REG(_BASE) ((pma_rxword_msg_adcofc_ctrl_6_reg_t*) PMA_RXWORD_MSG_ADCOFC_CTRL_6_ADR(_BASE))
#define PMA_RXWORD_MSG_ADCOFC_CTRL_7_REG(_BASE) ((pma_rxword_msg_adcofc_ctrl_7_reg_t*) PMA_RXWORD_MSG_ADCOFC_CTRL_7_ADR(_BASE))
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_REG(_BASE) ((pma_rxword_msg_rx_sigdet_venv_ctrl1_reg_t*) PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL1_ADR(_BASE))
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL2_REG(_BASE) ((pma_rxword_msg_rx_sigdet_venv_ctrl2_reg_t*) PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL2_ADR(_BASE))
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL3_REG(_BASE) ((pma_rxword_msg_rx_sigdet_venv_ctrl3_reg_t*) PMA_RXWORD_MSG_RX_SIGDET_VENV_CTRL3_ADR(_BASE))
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_STAT_REG(_BASE) ((pma_rxword_msg_rx_sigdet_venv_stat_reg_t*) PMA_RXWORD_MSG_RX_SIGDET_VENV_STAT_ADR(_BASE))
#define PMA_RXWORD_MSG_RX_SIGDET_VENV_STAT_CLR_REG(_BASE) ((pma_rxword_msg_rx_sigdet_venv_stat_clr_reg_t*) PMA_RXWORD_MSG_RX_SIGDET_VENV_STAT_CLR_ADR(_BASE))
#define PMA_RXWORD_MSG_RXWORD_RW_SPARE_0_REG(_BASE) ((pma_rxword_msg_rxword_rw_spare_0_reg_t*) PMA_RXWORD_MSG_RXWORD_RW_SPARE_0_ADR(_BASE))
#define PMA_RXWORD_MSG_RXWORD_RW_SPARE_1_REG(_BASE) ((pma_rxword_msg_rxword_rw_spare_1_reg_t*) PMA_RXWORD_MSG_RXWORD_RW_SPARE_1_ADR(_BASE))
#define PMA_RXWORD_MSG_RXWORD_RW_SPARE_2_REG(_BASE) ((pma_rxword_msg_rxword_rw_spare_2_reg_t*) PMA_RXWORD_MSG_RXWORD_RW_SPARE_2_ADR(_BASE))
#define PMA_RXWORD_MSG_RXWORD_RW_SPARE_3_REG(_BASE) ((pma_rxword_msg_rxword_rw_spare_3_reg_t*) PMA_RXWORD_MSG_RXWORD_RW_SPARE_3_ADR(_BASE))
#define PMA_RXWORD_MSG_RXWORD_RO_SPARE_0_REG(_BASE) ((pma_rxword_msg_rxword_ro_spare_0_reg_t*) PMA_RXWORD_MSG_RXWORD_RO_SPARE_0_ADR(_BASE))
#define PMA_RXWORD_MSG_RXWORD_RO_SPARE_1_REG(_BASE) ((pma_rxword_msg_rxword_ro_spare_1_reg_t*) PMA_RXWORD_MSG_RXWORD_RO_SPARE_1_ADR(_BASE))

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    pma_rxword_msg_ffe_coeff_set0_0_reg_t FFE_COEFF_SET0_0; /*< Address offset = 0x0 */
    pma_rxword_msg_ffe_coeff_set0_1_reg_t FFE_COEFF_SET0_1; /*< Address offset = 0x4 */
    pma_rxword_msg_ffe_coeff_set0_2_reg_t FFE_COEFF_SET0_2; /*< Address offset = 0x8 */
    pma_rxword_msg_ffe_coeff_set0_3_reg_t FFE_COEFF_SET0_3; /*< Address offset = 0xc */
    pma_rxword_msg_ffe_coeff_set0_4_reg_t FFE_COEFF_SET0_4; /*< Address offset = 0x10 */
    pma_rxword_msg_ffe_coeff_set1_0_reg_t FFE_COEFF_SET1_0; /*< Address offset = 0x14 */
    pma_rxword_msg_ffe_coeff_set1_1_reg_t FFE_COEFF_SET1_1; /*< Address offset = 0x18 */
    pma_rxword_msg_ffe_coeff_set1_2_reg_t FFE_COEFF_SET1_2; /*< Address offset = 0x1c */
    pma_rxword_msg_ffe_coeff_set1_3_reg_t FFE_COEFF_SET1_3; /*< Address offset = 0x20 */
    pma_rxword_msg_ffe_coeff_set1_4_reg_t FFE_COEFF_SET1_4; /*< Address offset = 0x24 */
    pma_rxword_msg_ffe_coeff_set2_0_reg_t FFE_COEFF_SET2_0; /*< Address offset = 0x28 */
    pma_rxword_msg_ffe_coeff_set2_1_reg_t FFE_COEFF_SET2_1; /*< Address offset = 0x2c */
    pma_rxword_msg_ffe_coeff_set2_2_reg_t FFE_COEFF_SET2_2; /*< Address offset = 0x30 */
    pma_rxword_msg_ffe_coeff_set2_3_reg_t FFE_COEFF_SET2_3; /*< Address offset = 0x34 */
    pma_rxword_msg_ffe_coeff_set2_4_reg_t FFE_COEFF_SET2_4; /*< Address offset = 0x38 */
    pma_rxword_msg_ffe_coeff_set3_0_reg_t FFE_COEFF_SET3_0; /*< Address offset = 0x3c */
    pma_rxword_msg_ffe_coeff_set3_1_reg_t FFE_COEFF_SET3_1; /*< Address offset = 0x40 */
    pma_rxword_msg_ffe_coeff_set3_2_reg_t FFE_COEFF_SET3_2; /*< Address offset = 0x44 */
    pma_rxword_msg_ffe_coeff_set3_3_reg_t FFE_COEFF_SET3_3; /*< Address offset = 0x48 */
    pma_rxword_msg_ffe_coeff_set3_4_reg_t FFE_COEFF_SET3_4; /*< Address offset = 0x4c */
    pma_rxword_msg_ffe_coeff_set4_0_reg_t FFE_COEFF_SET4_0; /*< Address offset = 0x50 */
    pma_rxword_msg_ffe_coeff_set4_1_reg_t FFE_COEFF_SET4_1; /*< Address offset = 0x54 */
    pma_rxword_msg_ffe_coeff_set4_2_reg_t FFE_COEFF_SET4_2; /*< Address offset = 0x58 */
    pma_rxword_msg_ffe_coeff_set4_3_reg_t FFE_COEFF_SET4_3; /*< Address offset = 0x5c */
    pma_rxword_msg_ffe_coeff_set4_4_reg_t FFE_COEFF_SET4_4; /*< Address offset = 0x60 */
    pma_rxword_msg_ffe_coeff_set5_0_reg_t FFE_COEFF_SET5_0; /*< Address offset = 0x64 */
    pma_rxword_msg_ffe_coeff_set5_1_reg_t FFE_COEFF_SET5_1; /*< Address offset = 0x68 */
    pma_rxword_msg_ffe_coeff_set5_2_reg_t FFE_COEFF_SET5_2; /*< Address offset = 0x6c */
    pma_rxword_msg_ffe_coeff_set5_3_reg_t FFE_COEFF_SET5_3; /*< Address offset = 0x70 */
    pma_rxword_msg_ffe_coeff_set5_4_reg_t FFE_COEFF_SET5_4; /*< Address offset = 0x74 */
    pma_rxword_msg_ffe_coeff_set6_0_reg_t FFE_COEFF_SET6_0; /*< Address offset = 0x78 */
    pma_rxword_msg_ffe_coeff_set6_1_reg_t FFE_COEFF_SET6_1; /*< Address offset = 0x7c */
    pma_rxword_msg_ffe_coeff_set6_2_reg_t FFE_COEFF_SET6_2; /*< Address offset = 0x80 */
    pma_rxword_msg_ffe_coeff_set6_3_reg_t FFE_COEFF_SET6_3; /*< Address offset = 0x84 */
    pma_rxword_msg_ffe_coeff_set6_4_reg_t FFE_COEFF_SET6_4; /*< Address offset = 0x88 */
    pma_rxword_msg_ffe_coeff_set7_0_reg_t FFE_COEFF_SET7_0; /*< Address offset = 0x8c */
    pma_rxword_msg_ffe_coeff_set7_1_reg_t FFE_COEFF_SET7_1; /*< Address offset = 0x90 */
    pma_rxword_msg_ffe_coeff_set7_2_reg_t FFE_COEFF_SET7_2; /*< Address offset = 0x94 */
    pma_rxword_msg_ffe_coeff_set7_3_reg_t FFE_COEFF_SET7_3; /*< Address offset = 0x98 */
    pma_rxword_msg_ffe_coeff_set7_4_reg_t FFE_COEFF_SET7_4; /*< Address offset = 0x9c */
    pma_rxword_msg_ffe_coeff_set8_0_reg_t FFE_COEFF_SET8_0; /*< Address offset = 0xa0 */
    pma_rxword_msg_ffe_coeff_set8_1_reg_t FFE_COEFF_SET8_1; /*< Address offset = 0xa4 */
    pma_rxword_msg_ffe_coeff_set8_2_reg_t FFE_COEFF_SET8_2; /*< Address offset = 0xa8 */
    pma_rxword_msg_ffe_coeff_set8_3_reg_t FFE_COEFF_SET8_3; /*< Address offset = 0xac */
    pma_rxword_msg_ffe_coeff_set8_4_reg_t FFE_COEFF_SET8_4; /*< Address offset = 0xb0 */
    pma_rxword_msg_ffe_coeff_set9_0_reg_t FFE_COEFF_SET9_0; /*< Address offset = 0xb4 */
    pma_rxword_msg_ffe_coeff_set9_1_reg_t FFE_COEFF_SET9_1; /*< Address offset = 0xb8 */
    pma_rxword_msg_ffe_coeff_set9_2_reg_t FFE_COEFF_SET9_2; /*< Address offset = 0xbc */
    pma_rxword_msg_ffe_coeff_set9_3_reg_t FFE_COEFF_SET9_3; /*< Address offset = 0xc0 */
    pma_rxword_msg_ffe_coeff_set9_4_reg_t FFE_COEFF_SET9_4; /*< Address offset = 0xc4 */
    const uint8_t        reservedArea0 [4];   /*< Address offset = 0xc8 */
    pma_rxword_msg_ffe_coeff_set10_0_reg_t FFE_COEFF_SET10_0; /*< Address offset = 0xcc */
    pma_rxword_msg_ffe_coeff_set10_1_reg_t FFE_COEFF_SET10_1; /*< Address offset = 0xd0 */
    pma_rxword_msg_ffe_coeff_set10_2_reg_t FFE_COEFF_SET10_2; /*< Address offset = 0xd4 */
    pma_rxword_msg_ffe_coeff_set10_3_reg_t FFE_COEFF_SET10_3; /*< Address offset = 0xd8 */
    pma_rxword_msg_ffe_coeff_set10_4_reg_t FFE_COEFF_SET10_4; /*< Address offset = 0xdc */
    pma_rxword_msg_ffe_coeff_set11_0_reg_t FFE_COEFF_SET11_0; /*< Address offset = 0xe0 */
    pma_rxword_msg_ffe_coeff_set11_1_reg_t FFE_COEFF_SET11_1; /*< Address offset = 0xe4 */
    pma_rxword_msg_ffe_coeff_set11_2_reg_t FFE_COEFF_SET11_2; /*< Address offset = 0xe8 */
    pma_rxword_msg_ffe_coeff_set11_3_reg_t FFE_COEFF_SET11_3; /*< Address offset = 0xec */
    pma_rxword_msg_ffe_coeff_set11_4_reg_t FFE_COEFF_SET11_4; /*< Address offset = 0xf0 */
    pma_rxword_msg_ffe_coeff_set12_0_reg_t FFE_COEFF_SET12_0; /*< Address offset = 0xf4 */
    pma_rxword_msg_ffe_coeff_set12_1_reg_t FFE_COEFF_SET12_1; /*< Address offset = 0xf8 */
    pma_rxword_msg_ffe_coeff_set12_2_reg_t FFE_COEFF_SET12_2; /*< Address offset = 0xfc */
    pma_rxword_msg_ffe_coeff_set12_3_reg_t FFE_COEFF_SET12_3; /*< Address offset = 0x100 */
    pma_rxword_msg_ffe_coeff_set12_4_reg_t FFE_COEFF_SET12_4; /*< Address offset = 0x104 */
    pma_rxword_msg_ffe_coeff_set13_0_reg_t FFE_COEFF_SET13_0; /*< Address offset = 0x108 */
    pma_rxword_msg_ffe_coeff_set13_1_reg_t FFE_COEFF_SET13_1; /*< Address offset = 0x10c */
    pma_rxword_msg_ffe_coeff_set13_2_reg_t FFE_COEFF_SET13_2; /*< Address offset = 0x110 */
    pma_rxword_msg_ffe_coeff_set13_3_reg_t FFE_COEFF_SET13_3; /*< Address offset = 0x114 */
    pma_rxword_msg_ffe_coeff_set13_4_reg_t FFE_COEFF_SET13_4; /*< Address offset = 0x118 */
    pma_rxword_msg_ffe_coeff_set14_0_reg_t FFE_COEFF_SET14_0; /*< Address offset = 0x11c */
    pma_rxword_msg_ffe_coeff_set14_1_reg_t FFE_COEFF_SET14_1; /*< Address offset = 0x120 */
    pma_rxword_msg_ffe_coeff_set14_2_reg_t FFE_COEFF_SET14_2; /*< Address offset = 0x124 */
    pma_rxword_msg_ffe_coeff_set14_3_reg_t FFE_COEFF_SET14_3; /*< Address offset = 0x128 */
    pma_rxword_msg_ffe_coeff_set14_4_reg_t FFE_COEFF_SET14_4; /*< Address offset = 0x12c */
    pma_rxword_msg_ffe_coeff_set15_0_reg_t FFE_COEFF_SET15_0; /*< Address offset = 0x130 */
    pma_rxword_msg_ffe_coeff_set15_1_reg_t FFE_COEFF_SET15_1; /*< Address offset = 0x134 */
    pma_rxword_msg_ffe_coeff_set15_2_reg_t FFE_COEFF_SET15_2; /*< Address offset = 0x138 */
    pma_rxword_msg_ffe_coeff_set15_3_reg_t FFE_COEFF_SET15_3; /*< Address offset = 0x13c */
    pma_rxword_msg_ffe_coeff_set15_4_reg_t FFE_COEFF_SET15_4; /*< Address offset = 0x140 */
    const uint8_t        reservedArea1 [4];   /*< Address offset = 0x144 */
    pma_rxword_msg_ffe_slice_lvl_set0_reg_t FFE_SLICE_LVL_SET0; /*< Address offset = 0x148 */
    pma_rxword_msg_ffe_slice_lvl_set1_reg_t FFE_SLICE_LVL_SET1; /*< Address offset = 0x14c */
    pma_rxword_msg_ffe_slice_lvl_set2_reg_t FFE_SLICE_LVL_SET2; /*< Address offset = 0x150 */
    pma_rxword_msg_ffe_slice_lvl_set3_reg_t FFE_SLICE_LVL_SET3; /*< Address offset = 0x154 */
    pma_rxword_msg_ffe_slice_lvl_set4_reg_t FFE_SLICE_LVL_SET4; /*< Address offset = 0x158 */
    pma_rxword_msg_ffe_slice_lvl_set5_reg_t FFE_SLICE_LVL_SET5; /*< Address offset = 0x15c */
    pma_rxword_msg_ffe_slice_lvl_set6_reg_t FFE_SLICE_LVL_SET6; /*< Address offset = 0x160 */
    pma_rxword_msg_ffe_slice_lvl_set7_reg_t FFE_SLICE_LVL_SET7; /*< Address offset = 0x164 */
    pma_rxword_msg_ffe_slice_lvl_set8_reg_t FFE_SLICE_LVL_SET8; /*< Address offset = 0x168 */
    pma_rxword_msg_ffe_slice_lvl_set9_reg_t FFE_SLICE_LVL_SET9; /*< Address offset = 0x16c */
    pma_rxword_msg_ffe_slice_lvl_set10_reg_t FFE_SLICE_LVL_SET10; /*< Address offset = 0x170 */
    pma_rxword_msg_ffe_slice_lvl_set11_reg_t FFE_SLICE_LVL_SET11; /*< Address offset = 0x174 */
    pma_rxword_msg_ffe_slice_lvl_set12_reg_t FFE_SLICE_LVL_SET12; /*< Address offset = 0x178 */
    pma_rxword_msg_ffe_slice_lvl_set13_reg_t FFE_SLICE_LVL_SET13; /*< Address offset = 0x17c */
    pma_rxword_msg_ffe_slice_lvl_set14_reg_t FFE_SLICE_LVL_SET14; /*< Address offset = 0x180 */
    pma_rxword_msg_ffe_slice_lvl_set15_reg_t FFE_SLICE_LVL_SET15; /*< Address offset = 0x184 */
    pma_rxword_msg_ffe_err_lvl_m1m3_set0_reg_t FFE_ERR_LVL_M1M3_SET0; /*< Address offset = 0x188 */
    pma_rxword_msg_ffe_err_lvl_p1p3_set0_reg_t FFE_ERR_LVL_P1P3_SET0; /*< Address offset = 0x18c */
    pma_rxword_msg_ffe_err_lvl_m1m3_set1_reg_t FFE_ERR_LVL_M1M3_SET1; /*< Address offset = 0x190 */
    pma_rxword_msg_ffe_err_lvl_p1p3_set1_reg_t FFE_ERR_LVL_P1P3_SET1; /*< Address offset = 0x194 */
    pma_rxword_msg_ffe_err_lvl_m1m3_set2_reg_t FFE_ERR_LVL_M1M3_SET2; /*< Address offset = 0x198 */
    pma_rxword_msg_ffe_err_lvl_p1p3_set2_reg_t FFE_ERR_LVL_P1P3_SET2; /*< Address offset = 0x19c */
    pma_rxword_msg_ffe_err_lvl_m1m3_set3_reg_t FFE_ERR_LVL_M1M3_SET3; /*< Address offset = 0x1a0 */
    pma_rxword_msg_ffe_err_lvl_p1p3_set3_reg_t FFE_ERR_LVL_P1P3_SET3; /*< Address offset = 0x1a4 */
    pma_rxword_msg_ffe_err_lvl_m1m3_set4_reg_t FFE_ERR_LVL_M1M3_SET4; /*< Address offset = 0x1a8 */
    pma_rxword_msg_ffe_err_lvl_p1p3_set4_reg_t FFE_ERR_LVL_P1P3_SET4; /*< Address offset = 0x1ac */
    pma_rxword_msg_ffe_err_lvl_m1m3_set5_reg_t FFE_ERR_LVL_M1M3_SET5; /*< Address offset = 0x1b0 */
    pma_rxword_msg_ffe_err_lvl_p1p3_set5_reg_t FFE_ERR_LVL_P1P3_SET5; /*< Address offset = 0x1b4 */
    pma_rxword_msg_ffe_err_lvl_m1m3_set6_reg_t FFE_ERR_LVL_M1M3_SET6; /*< Address offset = 0x1b8 */
    pma_rxword_msg_ffe_err_lvl_p1p3_set6_reg_t FFE_ERR_LVL_P1P3_SET6; /*< Address offset = 0x1bc */
    pma_rxword_msg_ffe_err_lvl_m1m3_set7_reg_t FFE_ERR_LVL_M1M3_SET7; /*< Address offset = 0x1c0 */
    pma_rxword_msg_ffe_err_lvl_p1p3_set7_reg_t FFE_ERR_LVL_P1P3_SET7; /*< Address offset = 0x1c4 */
    pma_rxword_msg_ffe_err_lvl_m1m3_set8_reg_t FFE_ERR_LVL_M1M3_SET8; /*< Address offset = 0x1c8 */
    pma_rxword_msg_ffe_err_lvl_p1p3_set8_reg_t FFE_ERR_LVL_P1P3_SET8; /*< Address offset = 0x1cc */
    pma_rxword_msg_ffe_err_lvl_m1m3_set9_reg_t FFE_ERR_LVL_M1M3_SET9; /*< Address offset = 0x1d0 */
    pma_rxword_msg_ffe_err_lvl_p1p3_set9_reg_t FFE_ERR_LVL_P1P3_SET9; /*< Address offset = 0x1d4 */
    pma_rxword_msg_ffe_err_lvl_m1m3_set10_reg_t FFE_ERR_LVL_M1M3_SET10; /*< Address offset = 0x1d8 */
    pma_rxword_msg_ffe_err_lvl_p1p3_set10_reg_t FFE_ERR_LVL_P1P3_SET10; /*< Address offset = 0x1dc */
    pma_rxword_msg_ffe_err_lvl_m1m3_set11_reg_t FFE_ERR_LVL_M1M3_SET11; /*< Address offset = 0x1e0 */
    pma_rxword_msg_ffe_err_lvl_p1p3_set11_reg_t FFE_ERR_LVL_P1P3_SET11; /*< Address offset = 0x1e4 */
    pma_rxword_msg_ffe_err_lvl_m1m3_set12_reg_t FFE_ERR_LVL_M1M3_SET12; /*< Address offset = 0x1e8 */
    pma_rxword_msg_ffe_err_lvl_p1p3_set12_reg_t FFE_ERR_LVL_P1P3_SET12; /*< Address offset = 0x1ec */
    pma_rxword_msg_ffe_err_lvl_m1m3_set13_reg_t FFE_ERR_LVL_M1M3_SET13; /*< Address offset = 0x1f0 */
    pma_rxword_msg_ffe_err_lvl_p1p3_set13_reg_t FFE_ERR_LVL_P1P3_SET13; /*< Address offset = 0x1f4 */
    pma_rxword_msg_ffe_err_lvl_m1m3_set14_reg_t FFE_ERR_LVL_M1M3_SET14; /*< Address offset = 0x1f8 */
    pma_rxword_msg_ffe_err_lvl_p1p3_set14_reg_t FFE_ERR_LVL_P1P3_SET14; /*< Address offset = 0x1fc */
    pma_rxword_msg_ffe_err_lvl_m1m3_set15_reg_t FFE_ERR_LVL_M1M3_SET15; /*< Address offset = 0x200 */
    pma_rxword_msg_ffe_err_lvl_p1p3_set15_reg_t FFE_ERR_LVL_P1P3_SET15; /*< Address offset = 0x204 */
    pma_rxword_msg_rx_dump_mem_ctrl_reg_t RX_DUMP_MEM_CTRL; /*< Address offset = 0x208 */
    pma_rxword_msg_rx_dump_mem_apb_rd_data_reg_t RX_DUMP_MEM_APB_RD_DATA; /*< Address offset = 0x20c */
    pma_rxword_msg_rx_dump_mem_apb_rd_en_reg_t RX_DUMP_MEM_APB_RD_EN; /*< Address offset = 0x210 */
    pma_rxword_msg_rx_dump_mem_apb_en_reg_t RX_DUMP_MEM_APB_EN; /*< Address offset = 0x214 */
    pma_rxword_msg_rx_data_path_ctrl_1_reg_t RX_DATA_PATH_CTRL_1; /*< Address offset = 0x218 */
    pma_rxword_msg_adp_msb_lsb_swap_ctrl_reg_t ADP_MSB_LSB_SWAP_CTRL; /*< Address offset = 0x21c */
    pma_rxword_msg_ffe_float_tap_position1_reg_t FFE_FLOAT_TAP_POSITION1; /*< Address offset = 0x220 */
    pma_rxword_msg_ffe_float_tap_position2_reg_t FFE_FLOAT_TAP_POSITION2; /*< Address offset = 0x224 */
    pma_rxword_msg_ffe_float_tap_position3_reg_t FFE_FLOAT_TAP_POSITION3; /*< Address offset = 0x228 */
    pma_rxword_msg_rxeq_clk_gating_ctrl_0_reg_t RXEQ_CLK_GATING_CTRL_0; /*< Address offset = 0x22c */
    pma_rxword_msg_rxeq_clk_gating_ctrl_1_reg_t RXEQ_CLK_GATING_CTRL_1; /*< Address offset = 0x230 */
    pma_rxword_msg_rxeq_clk_gating_ctrl_2_reg_t RXEQ_CLK_GATING_CTRL_2; /*< Address offset = 0x234 */
    pma_rxword_msg_rxeq_clk_gating_ctrl_3_reg_t RXEQ_CLK_GATING_CTRL_3; /*< Address offset = 0x238 */
    pma_rxword_msg_rxeq_clk_gating_ctrl_4_reg_t RXEQ_CLK_GATING_CTRL_4; /*< Address offset = 0x23c */
    pma_rxword_msg_rxeq_clk_gating_ctrl_6_reg_t RXEQ_CLK_GATING_CTRL_6; /*< Address offset = 0x240 */
    pma_rxword_msg_rxeq_clk_gating_ctrl_7_reg_t RXEQ_CLK_GATING_CTRL_7; /*< Address offset = 0x244 */
    pma_rxword_msg_rxeq_clk_gating_ctrl_8_reg_t RXEQ_CLK_GATING_CTRL_8; /*< Address offset = 0x248 */
    const uint8_t        reservedArea2 [64];  /*< Address offset = 0x24c */
    pma_rxword_msg_adc_slicer_lvl_set0_ctrl_reg_t ADC_SLICER_LVL_SET0_CTRL; /*< Address offset = 0x28c */
    pma_rxword_msg_adc_slicer_lvl_set1_ctrl_reg_t ADC_SLICER_LVL_SET1_CTRL; /*< Address offset = 0x290 */
    pma_rxword_msg_adc_slicer_lvl_set2_ctrl_reg_t ADC_SLICER_LVL_SET2_CTRL; /*< Address offset = 0x294 */
    pma_rxword_msg_adc_slicer_lvl_set3_ctrl_reg_t ADC_SLICER_LVL_SET3_CTRL; /*< Address offset = 0x298 */
    pma_rxword_msg_adc_slicer_lvl_set4_ctrl_reg_t ADC_SLICER_LVL_SET4_CTRL; /*< Address offset = 0x29c */
    pma_rxword_msg_adc_slicer_lvl_set5_ctrl_reg_t ADC_SLICER_LVL_SET5_CTRL; /*< Address offset = 0x2a0 */
    pma_rxword_msg_adc_slicer_lvl_set6_ctrl_reg_t ADC_SLICER_LVL_SET6_CTRL; /*< Address offset = 0x2a4 */
    pma_rxword_msg_adc_slicer_lvl_set7_ctrl_reg_t ADC_SLICER_LVL_SET7_CTRL; /*< Address offset = 0x2a8 */
    pma_rxword_msg_adc_slicer_lvl_set8_ctrl_reg_t ADC_SLICER_LVL_SET8_CTRL; /*< Address offset = 0x2ac */
    pma_rxword_msg_adc_slicer_lvl_set9_ctrl_reg_t ADC_SLICER_LVL_SET9_CTRL; /*< Address offset = 0x2b0 */
    pma_rxword_msg_adc_slicer_lvl_set10_ctrl_reg_t ADC_SLICER_LVL_SET10_CTRL; /*< Address offset = 0x2b4 */
    pma_rxword_msg_adc_slicer_lvl_set11_ctrl_reg_t ADC_SLICER_LVL_SET11_CTRL; /*< Address offset = 0x2b8 */
    pma_rxword_msg_adc_slicer_lvl_set12_ctrl_reg_t ADC_SLICER_LVL_SET12_CTRL; /*< Address offset = 0x2bc */
    pma_rxword_msg_adc_slicer_lvl_set13_ctrl_reg_t ADC_SLICER_LVL_SET13_CTRL; /*< Address offset = 0x2c0 */
    pma_rxword_msg_adc_slicer_lvl_set14_ctrl_reg_t ADC_SLICER_LVL_SET14_CTRL; /*< Address offset = 0x2c4 */
    pma_rxword_msg_adc_slicer_lvl_set15_ctrl_reg_t ADC_SLICER_LVL_SET15_CTRL; /*< Address offset = 0x2c8 */
    pma_rxword_msg_adc_err_lvl_set0_ctrl_reg_t ADC_ERR_LVL_SET0_CTRL; /*< Address offset = 0x2cc */
    pma_rxword_msg_adc_err_lvl_set1_ctrl_reg_t ADC_ERR_LVL_SET1_CTRL; /*< Address offset = 0x2d0 */
    pma_rxword_msg_adc_err_lvl_set2_ctrl_reg_t ADC_ERR_LVL_SET2_CTRL; /*< Address offset = 0x2d4 */
    pma_rxword_msg_adc_err_lvl_set3_ctrl_reg_t ADC_ERR_LVL_SET3_CTRL; /*< Address offset = 0x2d8 */
    pma_rxword_msg_adc_err_lvl_set4_ctrl_reg_t ADC_ERR_LVL_SET4_CTRL; /*< Address offset = 0x2dc */
    pma_rxword_msg_adc_err_lvl_set5_ctrl_reg_t ADC_ERR_LVL_SET5_CTRL; /*< Address offset = 0x2e0 */
    pma_rxword_msg_adc_err_lvl_set6_ctrl_reg_t ADC_ERR_LVL_SET6_CTRL; /*< Address offset = 0x2e4 */
    pma_rxword_msg_adc_err_lvl_set7_ctrl_reg_t ADC_ERR_LVL_SET7_CTRL; /*< Address offset = 0x2e8 */
    pma_rxword_msg_adc_err_lvl_set8_ctrl_reg_t ADC_ERR_LVL_SET8_CTRL; /*< Address offset = 0x2ec */
    pma_rxword_msg_adc_err_lvl_set9_ctrl_reg_t ADC_ERR_LVL_SET9_CTRL; /*< Address offset = 0x2f0 */
    pma_rxword_msg_adc_err_lvl_set10_ctrl_reg_t ADC_ERR_LVL_SET10_CTRL; /*< Address offset = 0x2f4 */
    pma_rxword_msg_adc_err_lvl_set11_ctrl_reg_t ADC_ERR_LVL_SET11_CTRL; /*< Address offset = 0x2f8 */
    pma_rxword_msg_adc_err_lvl_set12_ctrl_reg_t ADC_ERR_LVL_SET12_CTRL; /*< Address offset = 0x2fc */
    pma_rxword_msg_adc_err_lvl_set13_ctrl_reg_t ADC_ERR_LVL_SET13_CTRL; /*< Address offset = 0x300 */
    pma_rxword_msg_adc_err_lvl_set14_ctrl_reg_t ADC_ERR_LVL_SET14_CTRL; /*< Address offset = 0x304 */
    pma_rxword_msg_adc_err_lvl_set15_ctrl_reg_t ADC_ERR_LVL_SET15_CTRL; /*< Address offset = 0x308 */
    pma_rxword_msg_rxsararray_valid_calassist_ctrl0_reg_t RXSARARRAY_VALID_CALASSIST_CTRL0; /*< Address offset = 0x30c */
    pma_rxword_msg_rxsararray_valid_calassist_ctrl1_reg_t RXSARARRAY_VALID_CALASSIST_CTRL1; /*< Address offset = 0x310 */
    pma_rxword_msg_rxsararray_valid_calassist_ctrl2_reg_t RXSARARRAY_VALID_CALASSIST_CTRL2; /*< Address offset = 0x314 */
    pma_rxword_msg_rxsararray_valid_calassist_stat_reg_t RXSARARRAY_VALID_CALASSIST_STAT; /*< Address offset = 0x318 */
    pma_rxword_msg_rxsar_calassist_ctrl_reg_t RXSAR_CALASSIST_CTRL; /*< Address offset = 0x31c */
    pma_rxword_msg_rxsar_calassist_stat_reg_t RXSAR_CALASSIST_STAT; /*< Address offset = 0x320 */
    const uint8_t        reservedArea3 [200]; /*< Address offset = 0x324 */
    pma_rxword_msg_main_fsm_ctrl_6_reg_t MAIN_FSM_CTRL_6; /*< Address offset = 0x3ec */
    pma_rxword_msg_main_fsm_ctrl_0_reg_t MAIN_FSM_CTRL_0; /*< Address offset = 0x3f0 */
    pma_rxword_msg_main_fsm_stat_0_reg_t MAIN_FSM_STAT_0; /*< Address offset = 0x3f4 */
    pma_rxword_msg_main_fsm_ctrl_1_reg_t MAIN_FSM_CTRL_1; /*< Address offset = 0x3f8 */
    pma_rxword_msg_main_fsm_ctrl_2_reg_t MAIN_FSM_CTRL_2; /*< Address offset = 0x3fc */
    pma_rxword_msg_main_fsm_ctrl_3_reg_t MAIN_FSM_CTRL_3; /*< Address offset = 0x400 */
    pma_rxword_msg_taps_set_ctrl_reg_t TAPS_SET_CTRL; /*< Address offset = 0x404 */
    pma_rxword_msg_rx_gearbox_ctrl_reg_t RX_GEARBOX_CTRL; /*< Address offset = 0x408 */
    pma_rxword_msg_main_fsm_ctrl_4_reg_t MAIN_FSM_CTRL_4; /*< Address offset = 0x40c */
    pma_rxword_msg_main_fsm_ctrl_5_reg_t MAIN_FSM_CTRL_5; /*< Address offset = 0x410 */
    pma_rxword_msg_vref_ctrl_1_reg_t VREF_CTRL_1; /*< Address offset = 0x414 */
    pma_rxword_msg_vref_ctrl_2_reg_t VREF_CTRL_2; /*< Address offset = 0x418 */
    pma_rxword_msg_vref_ctrl_3_reg_t VREF_CTRL_3; /*< Address offset = 0x41c */
    pma_rxword_msg_vref_ctrl_4_reg_t VREF_CTRL_4; /*< Address offset = 0x420 */
    pma_rxword_msg_vref_ctrl_5_reg_t VREF_CTRL_5; /*< Address offset = 0x424 */
    pma_rxword_msg_vref_ctrl_6_reg_t VREF_CTRL_6; /*< Address offset = 0x428 */
    const uint8_t        reservedArea4 [4];   /*< Address offset = 0x42c */
    pma_rxword_msg_vref_stat_0_reg_t VREF_STAT_0; /*< Address offset = 0x430 */
    pma_rxword_msg_vga_ctrl_6_reg_t VGA_CTRL_6; /*< Address offset = 0x434 */
    pma_rxword_msg_vga_ctrl_5_reg_t VGA_CTRL_5; /*< Address offset = 0x438 */
    pma_rxword_msg_vga_ctrl_4_reg_t VGA_CTRL_4; /*< Address offset = 0x43c */
    pma_rxword_msg_vga_ctrl_0_reg_t VGA_CTRL_0; /*< Address offset = 0x440 */
    pma_rxword_msg_vga_ctrl_1_reg_t VGA_CTRL_1; /*< Address offset = 0x444 */
    pma_rxword_msg_vga_ctrl_2_reg_t VGA_CTRL_2; /*< Address offset = 0x448 */
    pma_rxword_msg_vga_ctrl_3_reg_t VGA_CTRL_3; /*< Address offset = 0x44c */
    pma_rxword_msg_vga_stat_0_reg_t VGA_STAT_0; /*< Address offset = 0x450 */
    pma_rxword_msg_jpp_ctrl_1_reg_t JPP_CTRL_1; /*< Address offset = 0x454 */
    pma_rxword_msg_jpp_ctrl_2_reg_t JPP_CTRL_2; /*< Address offset = 0x458 */
    const uint8_t        reservedArea5 [4];   /*< Address offset = 0x45c */
    pma_rxword_msg_ffe_ctrl_0_reg_t FFE_CTRL_0; /*< Address offset = 0x460 */
    pma_rxword_msg_ffe_ctrl_1_reg_t FFE_CTRL_1; /*< Address offset = 0x464 */
    pma_rxword_msg_ffe_ctrl_2_reg_t FFE_CTRL_2; /*< Address offset = 0x468 */
    pma_rxword_msg_ffe_ctrl_3_reg_t FFE_CTRL_3; /*< Address offset = 0x46c */
    pma_rxword_msg_ffe_ctrl_4_reg_t FFE_CTRL_4; /*< Address offset = 0x470 */
    pma_rxword_msg_ffe_ctrl_5_reg_t FFE_CTRL_5; /*< Address offset = 0x474 */
    const uint8_t        reservedArea6 [4];   /*< Address offset = 0x478 */
    pma_rxword_msg_ffe_stat_0_reg_t FFE_STAT_0; /*< Address offset = 0x47c */
    const uint8_t        reservedArea7 [16];  /*< Address offset = 0x480 */
    pma_rxword_msg_hist_ctrl_0_reg_t HIST_CTRL_0; /*< Address offset = 0x490 */
    pma_rxword_msg_hist_ctrl_1_reg_t HIST_CTRL_1; /*< Address offset = 0x494 */
    pma_rxword_msg_hist_ctrl_2_reg_t HIST_CTRL_2; /*< Address offset = 0x498 */
    pma_rxword_msg_hist_ctrl_3_reg_t HIST_CTRL_3; /*< Address offset = 0x49c */
    pma_rxword_msg_hist_ctrl_4_reg_t HIST_CTRL_4; /*< Address offset = 0x4a0 */
    pma_rxword_msg_hist_ctrl_5_reg_t HIST_CTRL_5; /*< Address offset = 0x4a4 */
    pma_rxword_msg_hist_ctrl_6_reg_t HIST_CTRL_6; /*< Address offset = 0x4a8 */
    pma_rxword_msg_hist_ctrl_7_reg_t HIST_CTRL_7; /*< Address offset = 0x4ac */
    pma_rxword_msg_hist_ctrl_8_reg_t HIST_CTRL_8; /*< Address offset = 0x4b0 */
    pma_rxword_msg_hist_ctrl_9_reg_t HIST_CTRL_9; /*< Address offset = 0x4b4 */
    pma_rxword_msg_hist_ctrl_10_reg_t HIST_CTRL_10; /*< Address offset = 0x4b8 */
    pma_rxword_msg_hist_ctrl_11_reg_t HIST_CTRL_11; /*< Address offset = 0x4bc */
    pma_rxword_msg_hist_ctrl_12_reg_t HIST_CTRL_12; /*< Address offset = 0x4c0 */
    pma_rxword_msg_hist_ctrl_13_reg_t HIST_CTRL_13; /*< Address offset = 0x4c4 */
    pma_rxword_msg_hist_stat_0_reg_t HIST_STAT_0; /*< Address offset = 0x4c8 */
    pma_rxword_msg_hist_stat_1_reg_t HIST_STAT_1; /*< Address offset = 0x4cc */
    pma_rxword_msg_hist_stat_2_reg_t HIST_STAT_2; /*< Address offset = 0x4d0 */
    pma_rxword_msg_hist_stat_3_reg_t HIST_STAT_3; /*< Address offset = 0x4d4 */
    pma_rxword_msg_hist_stat_4_reg_t HIST_STAT_4; /*< Address offset = 0x4d8 */
    const uint8_t        reservedArea8 [4];   /*< Address offset = 0x4dc */
    pma_rxword_msg_hist_stat_5_reg_t HIST_STAT_5; /*< Address offset = 0x4e0 */
    pma_rxword_msg_hist_stat_6_reg_t HIST_STAT_6; /*< Address offset = 0x4e4 */
    pma_rxword_msg_hist_stat_7_reg_t HIST_STAT_7; /*< Address offset = 0x4e8 */
    pma_rxword_msg_hist_stat_8_reg_t HIST_STAT_8; /*< Address offset = 0x4ec */
    pma_rxword_msg_hist_stat_9_reg_t HIST_STAT_9; /*< Address offset = 0x4f0 */
    pma_rxword_msg_hist_stat_10_reg_t HIST_STAT_10; /*< Address offset = 0x4f4 */
    pma_rxword_msg_hist_stat_11_reg_t HIST_STAT_11; /*< Address offset = 0x4f8 */
    pma_rxword_msg_hist_stat_12_reg_t HIST_STAT_12; /*< Address offset = 0x4fc */
    pma_rxword_msg_hist_stat_13_reg_t HIST_STAT_13; /*< Address offset = 0x500 */
    const uint8_t        reservedArea9 [12];  /*< Address offset = 0x504 */
    pma_rxword_msg_hist_stat_14_reg_t HIST_STAT_14; /*< Address offset = 0x510 */
    pma_rxword_msg_hist_stat_15_reg_t HIST_STAT_15; /*< Address offset = 0x514 */
    pma_rxword_msg_ops_ctrl_1_reg_t OPS_CTRL_1; /*< Address offset = 0x518 */
    pma_rxword_msg_ops_ctrl_2_reg_t OPS_CTRL_2; /*< Address offset = 0x51c */
    pma_rxword_msg_ops_ctrl_3_reg_t OPS_CTRL_3; /*< Address offset = 0x520 */
    pma_rxword_msg_ops_ctrl_4_reg_t OPS_CTRL_4; /*< Address offset = 0x524 */
    const uint8_t        reservedArea10 [4];  /*< Address offset = 0x528 */
    pma_rxword_msg_ops_stat_1_reg_t OPS_STAT_1; /*< Address offset = 0x52c */
    const uint8_t        reservedArea11 [4];  /*< Address offset = 0x530 */
    pma_rxword_msg_ops_stat_2_reg_t OPS_STAT_2; /*< Address offset = 0x534 */
    pma_rxword_msg_adcvref_ctrl_1_reg_t ADCVREF_CTRL_1; /*< Address offset = 0x538 */
    pma_rxword_msg_adcvref_ctrl_2_reg_t ADCVREF_CTRL_2; /*< Address offset = 0x53c */
    pma_rxword_msg_adcvref_ctrl_3_reg_t ADCVREF_CTRL_3; /*< Address offset = 0x540 */
    pma_rxword_msg_adcvref_ctrl_4_reg_t ADCVREF_CTRL_4; /*< Address offset = 0x544 */
    pma_rxword_msg_adcvref_ctrl_5_reg_t ADCVREF_CTRL_5; /*< Address offset = 0x548 */
    pma_rxword_msg_adcvref_ctrl_6_reg_t ADCVREF_CTRL_6; /*< Address offset = 0x54c */
    pma_rxword_msg_adcvref_stat_0_reg_t ADCVREF_STAT_0; /*< Address offset = 0x550 */
    const uint8_t        reservedArea12 [12]; /*< Address offset = 0x554 */
    pma_rxword_msg_affe_ctrl_0_reg_t AFFE_CTRL_0; /*< Address offset = 0x560 */
    pma_rxword_msg_affe_ctrl_1_reg_t AFFE_CTRL_1; /*< Address offset = 0x564 */
    pma_rxword_msg_affe_ctrl_2_reg_t AFFE_CTRL_2; /*< Address offset = 0x568 */
    pma_rxword_msg_affe_ctrl_3_reg_t AFFE_CTRL_3; /*< Address offset = 0x56c */
    pma_rxword_msg_affe_stat_0_reg_t AFFE_STAT_0; /*< Address offset = 0x570 */
    const uint8_t        reservedArea13 [8];  /*< Address offset = 0x574 */
    pma_rxword_msg_ofc_ctrl_0_reg_t OFC_CTRL_0; /*< Address offset = 0x57c */
    pma_rxword_msg_ofc_ctrl_1a_reg_t OFC_CTRL_1A; /*< Address offset = 0x580 */
    pma_rxword_msg_ofc_ctrl_1b_reg_t OFC_CTRL_1B; /*< Address offset = 0x584 */
    pma_rxword_msg_ofc_ctrl_2_reg_t OFC_CTRL_2; /*< Address offset = 0x588 */
    pma_rxword_msg_ofc_ctrl_3_reg_t OFC_CTRL_3; /*< Address offset = 0x58c */
    pma_rxword_msg_ofc_stat_0_reg_t OFC_STAT_0; /*< Address offset = 0x590 */
    pma_rxword_msg_ffe_coeff_set0_frac_0_reg_t FFE_COEFF_SET0_FRAC_0; /*< Address offset = 0x594 */
    pma_rxword_msg_ffe_coeff_set0_frac_1_reg_t FFE_COEFF_SET0_FRAC_1; /*< Address offset = 0x598 */
    pma_rxword_msg_ffe_coeff_set0_frac_2_reg_t FFE_COEFF_SET0_FRAC_2; /*< Address offset = 0x59c */
    pma_rxword_msg_ffe_coeff_set0_frac_3_reg_t FFE_COEFF_SET0_FRAC_3; /*< Address offset = 0x5a0 */
    pma_rxword_msg_ffe_coeff_set0_frac_4_reg_t FFE_COEFF_SET0_FRAC_4; /*< Address offset = 0x5a4 */
    pma_rxword_msg_ffe_coeff_set0_frac_5_reg_t FFE_COEFF_SET0_FRAC_5; /*< Address offset = 0x5a8 */
    pma_rxword_msg_ffe_coeff_set1_frac_0_reg_t FFE_COEFF_SET1_FRAC_0; /*< Address offset = 0x5ac */
    pma_rxword_msg_ffe_coeff_set1_frac_1_reg_t FFE_COEFF_SET1_FRAC_1; /*< Address offset = 0x5b0 */
    pma_rxword_msg_ffe_coeff_set1_frac_2_reg_t FFE_COEFF_SET1_FRAC_2; /*< Address offset = 0x5b4 */
    pma_rxword_msg_ffe_coeff_set1_frac_3_reg_t FFE_COEFF_SET1_FRAC_3; /*< Address offset = 0x5b8 */
    pma_rxword_msg_ffe_coeff_set1_frac_4_reg_t FFE_COEFF_SET1_FRAC_4; /*< Address offset = 0x5bc */
    pma_rxword_msg_ffe_coeff_set1_frac_5_reg_t FFE_COEFF_SET1_FRAC_5; /*< Address offset = 0x5c0 */
    pma_rxword_msg_ffe_coeff_set2_frac_0_reg_t FFE_COEFF_SET2_FRAC_0; /*< Address offset = 0x5c4 */
    pma_rxword_msg_ffe_coeff_set2_frac_1_reg_t FFE_COEFF_SET2_FRAC_1; /*< Address offset = 0x5c8 */
    pma_rxword_msg_ffe_coeff_set2_frac_2_reg_t FFE_COEFF_SET2_FRAC_2; /*< Address offset = 0x5cc */
    pma_rxword_msg_ffe_coeff_set2_frac_3_reg_t FFE_COEFF_SET2_FRAC_3; /*< Address offset = 0x5d0 */
    pma_rxword_msg_ffe_coeff_set2_frac_4_reg_t FFE_COEFF_SET2_FRAC_4; /*< Address offset = 0x5d4 */
    pma_rxword_msg_ffe_coeff_set2_frac_5_reg_t FFE_COEFF_SET2_FRAC_5; /*< Address offset = 0x5d8 */
    pma_rxword_msg_ffe_coeff_set3_frac_0_reg_t FFE_COEFF_SET3_FRAC_0; /*< Address offset = 0x5dc */
    pma_rxword_msg_ffe_coeff_set3_frac_1_reg_t FFE_COEFF_SET3_FRAC_1; /*< Address offset = 0x5e0 */
    pma_rxword_msg_ffe_coeff_set3_frac_2_reg_t FFE_COEFF_SET3_FRAC_2; /*< Address offset = 0x5e4 */
    pma_rxword_msg_ffe_coeff_set3_frac_3_reg_t FFE_COEFF_SET3_FRAC_3; /*< Address offset = 0x5e8 */
    pma_rxword_msg_ffe_coeff_set3_frac_4_reg_t FFE_COEFF_SET3_FRAC_4; /*< Address offset = 0x5ec */
    pma_rxword_msg_ffe_coeff_set3_frac_5_reg_t FFE_COEFF_SET3_FRAC_5; /*< Address offset = 0x5f0 */
    pma_rxword_msg_ffe_coeff_set4_frac_0_reg_t FFE_COEFF_SET4_FRAC_0; /*< Address offset = 0x5f4 */
    pma_rxword_msg_ffe_coeff_set4_frac_1_reg_t FFE_COEFF_SET4_FRAC_1; /*< Address offset = 0x5f8 */
    pma_rxword_msg_ffe_coeff_set4_frac_2_reg_t FFE_COEFF_SET4_FRAC_2; /*< Address offset = 0x5fc */
    pma_rxword_msg_ffe_coeff_set4_frac_3_reg_t FFE_COEFF_SET4_FRAC_3; /*< Address offset = 0x600 */
    pma_rxword_msg_ffe_coeff_set4_frac_4_reg_t FFE_COEFF_SET4_FRAC_4; /*< Address offset = 0x604 */
    pma_rxword_msg_ffe_coeff_set4_frac_5_reg_t FFE_COEFF_SET4_FRAC_5; /*< Address offset = 0x608 */
    pma_rxword_msg_ffe_coeff_set5_frac_0_reg_t FFE_COEFF_SET5_FRAC_0; /*< Address offset = 0x60c */
    pma_rxword_msg_ffe_coeff_set5_frac_1_reg_t FFE_COEFF_SET5_FRAC_1; /*< Address offset = 0x610 */
    pma_rxword_msg_ffe_coeff_set5_frac_2_reg_t FFE_COEFF_SET5_FRAC_2; /*< Address offset = 0x614 */
    pma_rxword_msg_ffe_coeff_set5_frac_3_reg_t FFE_COEFF_SET5_FRAC_3; /*< Address offset = 0x618 */
    pma_rxword_msg_ffe_coeff_set5_frac_4_reg_t FFE_COEFF_SET5_FRAC_4; /*< Address offset = 0x61c */
    pma_rxword_msg_ffe_coeff_set5_frac_5_reg_t FFE_COEFF_SET5_FRAC_5; /*< Address offset = 0x620 */
    pma_rxword_msg_ffe_coeff_set6_frac_0_reg_t FFE_COEFF_SET6_FRAC_0; /*< Address offset = 0x624 */
    pma_rxword_msg_ffe_coeff_set6_frac_1_reg_t FFE_COEFF_SET6_FRAC_1; /*< Address offset = 0x628 */
    pma_rxword_msg_ffe_coeff_set6_frac_2_reg_t FFE_COEFF_SET6_FRAC_2; /*< Address offset = 0x62c */
    pma_rxword_msg_ffe_coeff_set6_frac_3_reg_t FFE_COEFF_SET6_FRAC_3; /*< Address offset = 0x630 */
    pma_rxword_msg_ffe_coeff_set6_frac_4_reg_t FFE_COEFF_SET6_FRAC_4; /*< Address offset = 0x634 */
    pma_rxword_msg_ffe_coeff_set6_frac_5_reg_t FFE_COEFF_SET6_FRAC_5; /*< Address offset = 0x638 */
    pma_rxword_msg_ffe_coeff_set7_frac_0_reg_t FFE_COEFF_SET7_FRAC_0; /*< Address offset = 0x63c */
    pma_rxword_msg_ffe_coeff_set7_frac_1_reg_t FFE_COEFF_SET7_FRAC_1; /*< Address offset = 0x640 */
    pma_rxword_msg_ffe_coeff_set7_frac_2_reg_t FFE_COEFF_SET7_FRAC_2; /*< Address offset = 0x644 */
    pma_rxword_msg_ffe_coeff_set7_frac_3_reg_t FFE_COEFF_SET7_FRAC_3; /*< Address offset = 0x648 */
    pma_rxword_msg_ffe_coeff_set7_frac_4_reg_t FFE_COEFF_SET7_FRAC_4; /*< Address offset = 0x64c */
    pma_rxword_msg_ffe_coeff_set7_frac_5_reg_t FFE_COEFF_SET7_FRAC_5; /*< Address offset = 0x650 */
    pma_rxword_msg_ffe_coeff_set8_frac_0_reg_t FFE_COEFF_SET8_FRAC_0; /*< Address offset = 0x654 */
    pma_rxword_msg_ffe_coeff_set8_frac_1_reg_t FFE_COEFF_SET8_FRAC_1; /*< Address offset = 0x658 */
    pma_rxword_msg_ffe_coeff_set8_frac_2_reg_t FFE_COEFF_SET8_FRAC_2; /*< Address offset = 0x65c */
    pma_rxword_msg_ffe_coeff_set8_frac_3_reg_t FFE_COEFF_SET8_FRAC_3; /*< Address offset = 0x660 */
    pma_rxword_msg_ffe_coeff_set8_frac_4_reg_t FFE_COEFF_SET8_FRAC_4; /*< Address offset = 0x664 */
    pma_rxword_msg_ffe_coeff_set8_frac_5_reg_t FFE_COEFF_SET8_FRAC_5; /*< Address offset = 0x668 */
    pma_rxword_msg_ffe_coeff_set9_frac_0_reg_t FFE_COEFF_SET9_FRAC_0; /*< Address offset = 0x66c */
    pma_rxword_msg_ffe_coeff_set9_frac_1_reg_t FFE_COEFF_SET9_FRAC_1; /*< Address offset = 0x670 */
    pma_rxword_msg_ffe_coeff_set9_frac_2_reg_t FFE_COEFF_SET9_FRAC_2; /*< Address offset = 0x674 */
    pma_rxword_msg_ffe_coeff_set9_frac_3_reg_t FFE_COEFF_SET9_FRAC_3; /*< Address offset = 0x678 */
    pma_rxword_msg_ffe_coeff_set9_frac_4_reg_t FFE_COEFF_SET9_FRAC_4; /*< Address offset = 0x67c */
    pma_rxword_msg_ffe_coeff_set9_frac_5_reg_t FFE_COEFF_SET9_FRAC_5; /*< Address offset = 0x680 */
    pma_rxword_msg_ffe_coeff_set10_frac_0_reg_t FFE_COEFF_SET10_FRAC_0; /*< Address offset = 0x684 */
    pma_rxword_msg_ffe_coeff_set10_frac_1_reg_t FFE_COEFF_SET10_FRAC_1; /*< Address offset = 0x688 */
    pma_rxword_msg_ffe_coeff_set10_frac_2_reg_t FFE_COEFF_SET10_FRAC_2; /*< Address offset = 0x68c */
    pma_rxword_msg_ffe_coeff_set10_frac_3_reg_t FFE_COEFF_SET10_FRAC_3; /*< Address offset = 0x690 */
    pma_rxword_msg_ffe_coeff_set10_frac_4_reg_t FFE_COEFF_SET10_FRAC_4; /*< Address offset = 0x694 */
    pma_rxword_msg_ffe_coeff_set10_frac_5_reg_t FFE_COEFF_SET10_FRAC_5; /*< Address offset = 0x698 */
    pma_rxword_msg_ffe_coeff_set11_frac_0_reg_t FFE_COEFF_SET11_FRAC_0; /*< Address offset = 0x69c */
    pma_rxword_msg_ffe_coeff_set11_frac_1_reg_t FFE_COEFF_SET11_FRAC_1; /*< Address offset = 0x6a0 */
    pma_rxword_msg_ffe_coeff_set11_frac_2_reg_t FFE_COEFF_SET11_FRAC_2; /*< Address offset = 0x6a4 */
    pma_rxword_msg_ffe_coeff_set11_frac_3_reg_t FFE_COEFF_SET11_FRAC_3; /*< Address offset = 0x6a8 */
    pma_rxword_msg_ffe_coeff_set11_frac_4_reg_t FFE_COEFF_SET11_FRAC_4; /*< Address offset = 0x6ac */
    pma_rxword_msg_ffe_coeff_set11_frac_5_reg_t FFE_COEFF_SET11_FRAC_5; /*< Address offset = 0x6b0 */
    pma_rxword_msg_ffe_coeff_set12_frac_0_reg_t FFE_COEFF_SET12_FRAC_0; /*< Address offset = 0x6b4 */
    pma_rxword_msg_ffe_coeff_set12_frac_1_reg_t FFE_COEFF_SET12_FRAC_1; /*< Address offset = 0x6b8 */
    pma_rxword_msg_ffe_coeff_set12_frac_2_reg_t FFE_COEFF_SET12_FRAC_2; /*< Address offset = 0x6bc */
    pma_rxword_msg_ffe_coeff_set12_frac_3_reg_t FFE_COEFF_SET12_FRAC_3; /*< Address offset = 0x6c0 */
    pma_rxword_msg_ffe_coeff_set12_frac_4_reg_t FFE_COEFF_SET12_FRAC_4; /*< Address offset = 0x6c4 */
    pma_rxword_msg_ffe_coeff_set12_frac_5_reg_t FFE_COEFF_SET12_FRAC_5; /*< Address offset = 0x6c8 */
    pma_rxword_msg_ffe_coeff_set13_frac_0_reg_t FFE_COEFF_SET13_FRAC_0; /*< Address offset = 0x6cc */
    pma_rxword_msg_ffe_coeff_set13_frac_1_reg_t FFE_COEFF_SET13_FRAC_1; /*< Address offset = 0x6d0 */
    pma_rxword_msg_ffe_coeff_set13_frac_2_reg_t FFE_COEFF_SET13_FRAC_2; /*< Address offset = 0x6d4 */
    pma_rxword_msg_ffe_coeff_set13_frac_3_reg_t FFE_COEFF_SET13_FRAC_3; /*< Address offset = 0x6d8 */
    pma_rxword_msg_ffe_coeff_set13_frac_4_reg_t FFE_COEFF_SET13_FRAC_4; /*< Address offset = 0x6dc */
    pma_rxword_msg_ffe_coeff_set13_frac_5_reg_t FFE_COEFF_SET13_FRAC_5; /*< Address offset = 0x6e0 */
    pma_rxword_msg_ffe_coeff_set14_frac_0_reg_t FFE_COEFF_SET14_FRAC_0; /*< Address offset = 0x6e4 */
    pma_rxword_msg_ffe_coeff_set14_frac_1_reg_t FFE_COEFF_SET14_FRAC_1; /*< Address offset = 0x6e8 */
    pma_rxword_msg_ffe_coeff_set14_frac_2_reg_t FFE_COEFF_SET14_FRAC_2; /*< Address offset = 0x6ec */
    pma_rxword_msg_ffe_coeff_set14_frac_3_reg_t FFE_COEFF_SET14_FRAC_3; /*< Address offset = 0x6f0 */
    pma_rxword_msg_ffe_coeff_set14_frac_4_reg_t FFE_COEFF_SET14_FRAC_4; /*< Address offset = 0x6f4 */
    pma_rxword_msg_ffe_coeff_set14_frac_5_reg_t FFE_COEFF_SET14_FRAC_5; /*< Address offset = 0x6f8 */
    pma_rxword_msg_ffe_coeff_set15_frac_0_reg_t FFE_COEFF_SET15_FRAC_0; /*< Address offset = 0x6fc */
    pma_rxword_msg_ffe_coeff_set15_frac_1_reg_t FFE_COEFF_SET15_FRAC_1; /*< Address offset = 0x700 */
    pma_rxword_msg_ffe_coeff_set15_frac_2_reg_t FFE_COEFF_SET15_FRAC_2; /*< Address offset = 0x704 */
    pma_rxword_msg_ffe_coeff_set15_frac_3_reg_t FFE_COEFF_SET15_FRAC_3; /*< Address offset = 0x708 */
    pma_rxword_msg_ffe_coeff_set15_frac_4_reg_t FFE_COEFF_SET15_FRAC_4; /*< Address offset = 0x70c */
    pma_rxword_msg_ffe_coeff_set15_frac_5_reg_t FFE_COEFF_SET15_FRAC_5; /*< Address offset = 0x710 */
    pma_rxword_msg_ffe_err_lvl_frac_set0_0_reg_t FFE_ERR_LVL_FRAC_SET0_0; /*< Address offset = 0x714 */
    pma_rxword_msg_ffe_err_lvl_frac_set1_0_reg_t FFE_ERR_LVL_FRAC_SET1_0; /*< Address offset = 0x718 */
    pma_rxword_msg_ffe_err_lvl_frac_set2_0_reg_t FFE_ERR_LVL_FRAC_SET2_0; /*< Address offset = 0x71c */
    pma_rxword_msg_ffe_err_lvl_frac_set3_0_reg_t FFE_ERR_LVL_FRAC_SET3_0; /*< Address offset = 0x720 */
    pma_rxword_msg_ffe_err_lvl_frac_set4_0_reg_t FFE_ERR_LVL_FRAC_SET4_0; /*< Address offset = 0x724 */
    pma_rxword_msg_ffe_err_lvl_frac_set5_0_reg_t FFE_ERR_LVL_FRAC_SET5_0; /*< Address offset = 0x728 */
    pma_rxword_msg_ffe_err_lvl_frac_set6_0_reg_t FFE_ERR_LVL_FRAC_SET6_0; /*< Address offset = 0x72c */
    pma_rxword_msg_ffe_err_lvl_frac_set7_0_reg_t FFE_ERR_LVL_FRAC_SET7_0; /*< Address offset = 0x730 */
    pma_rxword_msg_ffe_err_lvl_frac_set8_0_reg_t FFE_ERR_LVL_FRAC_SET8_0; /*< Address offset = 0x734 */
    pma_rxword_msg_ffe_err_lvl_frac_set9_0_reg_t FFE_ERR_LVL_FRAC_SET9_0; /*< Address offset = 0x738 */
    pma_rxword_msg_ffe_err_lvl_frac_set10_0_reg_t FFE_ERR_LVL_FRAC_SET10_0; /*< Address offset = 0x73c */
    pma_rxword_msg_ffe_err_lvl_frac_set11_0_reg_t FFE_ERR_LVL_FRAC_SET11_0; /*< Address offset = 0x740 */
    pma_rxword_msg_ffe_err_lvl_frac_set12_0_reg_t FFE_ERR_LVL_FRAC_SET12_0; /*< Address offset = 0x744 */
    pma_rxword_msg_ffe_err_lvl_frac_set13_0_reg_t FFE_ERR_LVL_FRAC_SET13_0; /*< Address offset = 0x748 */
    pma_rxword_msg_ffe_err_lvl_frac_set14_0_reg_t FFE_ERR_LVL_FRAC_SET14_0; /*< Address offset = 0x74c */
    pma_rxword_msg_ffe_err_lvl_frac_set15_0_reg_t FFE_ERR_LVL_FRAC_SET15_0; /*< Address offset = 0x750 */
    pma_rxword_msg_adc_err_lvl_frac_set0_0_reg_t ADC_ERR_LVL_FRAC_SET0_0; /*< Address offset = 0x754 */
    pma_rxword_msg_adc_err_lvl_frac_set1_0_reg_t ADC_ERR_LVL_FRAC_SET1_0; /*< Address offset = 0x758 */
    pma_rxword_msg_adc_err_lvl_frac_set2_0_reg_t ADC_ERR_LVL_FRAC_SET2_0; /*< Address offset = 0x75c */
    pma_rxword_msg_adc_err_lvl_frac_set3_0_reg_t ADC_ERR_LVL_FRAC_SET3_0; /*< Address offset = 0x760 */
    pma_rxword_msg_adc_err_lvl_frac_set4_0_reg_t ADC_ERR_LVL_FRAC_SET4_0; /*< Address offset = 0x764 */
    pma_rxword_msg_adc_err_lvl_frac_set5_0_reg_t ADC_ERR_LVL_FRAC_SET5_0; /*< Address offset = 0x768 */
    pma_rxword_msg_adc_err_lvl_frac_set6_0_reg_t ADC_ERR_LVL_FRAC_SET6_0; /*< Address offset = 0x76c */
    pma_rxword_msg_adc_err_lvl_frac_set7_0_reg_t ADC_ERR_LVL_FRAC_SET7_0; /*< Address offset = 0x770 */
    pma_rxword_msg_adc_err_lvl_frac_set8_0_reg_t ADC_ERR_LVL_FRAC_SET8_0; /*< Address offset = 0x774 */
    pma_rxword_msg_adc_err_lvl_frac_set9_0_reg_t ADC_ERR_LVL_FRAC_SET9_0; /*< Address offset = 0x778 */
    pma_rxword_msg_adc_err_lvl_frac_set10_0_reg_t ADC_ERR_LVL_FRAC_SET10_0; /*< Address offset = 0x77c */
    pma_rxword_msg_adc_err_lvl_frac_set11_0_reg_t ADC_ERR_LVL_FRAC_SET11_0; /*< Address offset = 0x780 */
    pma_rxword_msg_adc_err_lvl_frac_set12_0_reg_t ADC_ERR_LVL_FRAC_SET12_0; /*< Address offset = 0x784 */
    pma_rxword_msg_adc_err_lvl_frac_set13_0_reg_t ADC_ERR_LVL_FRAC_SET13_0; /*< Address offset = 0x788 */
    pma_rxword_msg_adc_err_lvl_frac_set14_0_reg_t ADC_ERR_LVL_FRAC_SET14_0; /*< Address offset = 0x78c */
    pma_rxword_msg_adc_err_lvl_frac_set15_0_reg_t ADC_ERR_LVL_FRAC_SET15_0; /*< Address offset = 0x790 */
    pma_rxword_msg_affe_lms_set0_reg_t AFFE_LMS_SET0; /*< Address offset = 0x794 */
    pma_rxword_msg_affe_lms_set1_reg_t AFFE_LMS_SET1; /*< Address offset = 0x798 */
    pma_rxword_msg_affe_lms_set2_reg_t AFFE_LMS_SET2; /*< Address offset = 0x79c */
    pma_rxword_msg_affe_lms_set3_reg_t AFFE_LMS_SET3; /*< Address offset = 0x7a0 */
    pma_rxword_msg_affe_lms_set4_reg_t AFFE_LMS_SET4; /*< Address offset = 0x7a4 */
    pma_rxword_msg_affe_lms_set5_reg_t AFFE_LMS_SET5; /*< Address offset = 0x7a8 */
    pma_rxword_msg_affe_lms_set6_reg_t AFFE_LMS_SET6; /*< Address offset = 0x7ac */
    pma_rxword_msg_affe_lms_set7_reg_t AFFE_LMS_SET7; /*< Address offset = 0x7b0 */
    pma_rxword_msg_affe_lms_set8_reg_t AFFE_LMS_SET8; /*< Address offset = 0x7b4 */
    pma_rxword_msg_affe_lms_set9_reg_t AFFE_LMS_SET9; /*< Address offset = 0x7b8 */
    pma_rxword_msg_affe_lms_set10_reg_t AFFE_LMS_SET10; /*< Address offset = 0x7bc */
    pma_rxword_msg_affe_lms_set11_reg_t AFFE_LMS_SET11; /*< Address offset = 0x7c0 */
    pma_rxword_msg_affe_lms_set12_reg_t AFFE_LMS_SET12; /*< Address offset = 0x7c4 */
    pma_rxword_msg_affe_lms_set13_reg_t AFFE_LMS_SET13; /*< Address offset = 0x7c8 */
    pma_rxword_msg_affe_lms_set14_reg_t AFFE_LMS_SET14; /*< Address offset = 0x7cc */
    pma_rxword_msg_affe_lms_set15_reg_t AFFE_LMS_SET15; /*< Address offset = 0x7d0 */
    pma_rxword_msg_affe_lms_frac_set0_reg_t AFFE_LMS_FRAC_SET0; /*< Address offset = 0x7d4 */
    pma_rxword_msg_affe_lms_frac_set1_reg_t AFFE_LMS_FRAC_SET1; /*< Address offset = 0x7d8 */
    pma_rxword_msg_affe_lms_frac_set2_reg_t AFFE_LMS_FRAC_SET2; /*< Address offset = 0x7dc */
    pma_rxword_msg_affe_lms_frac_set3_reg_t AFFE_LMS_FRAC_SET3; /*< Address offset = 0x7e0 */
    pma_rxword_msg_affe_lms_frac_set4_reg_t AFFE_LMS_FRAC_SET4; /*< Address offset = 0x7e4 */
    pma_rxword_msg_affe_lms_frac_set5_reg_t AFFE_LMS_FRAC_SET5; /*< Address offset = 0x7e8 */
    pma_rxword_msg_affe_lms_frac_set6_reg_t AFFE_LMS_FRAC_SET6; /*< Address offset = 0x7ec */
    pma_rxword_msg_affe_lms_frac_set7_reg_t AFFE_LMS_FRAC_SET7; /*< Address offset = 0x7f0 */
    pma_rxword_msg_affe_lms_frac_set8_reg_t AFFE_LMS_FRAC_SET8; /*< Address offset = 0x7f4 */
    pma_rxword_msg_affe_lms_frac_set9_reg_t AFFE_LMS_FRAC_SET9; /*< Address offset = 0x7f8 */
    pma_rxword_msg_affe_lms_frac_set10_reg_t AFFE_LMS_FRAC_SET10; /*< Address offset = 0x7fc */
    pma_rxword_msg_affe_lms_frac_set11_reg_t AFFE_LMS_FRAC_SET11; /*< Address offset = 0x800 */
    pma_rxword_msg_affe_lms_frac_set12_reg_t AFFE_LMS_FRAC_SET12; /*< Address offset = 0x804 */
    pma_rxword_msg_affe_lms_frac_set13_reg_t AFFE_LMS_FRAC_SET13; /*< Address offset = 0x808 */
    pma_rxword_msg_affe_lms_frac_set14_reg_t AFFE_LMS_FRAC_SET14; /*< Address offset = 0x80c */
    pma_rxword_msg_affe_lms_frac_set15_reg_t AFFE_LMS_FRAC_SET15; /*< Address offset = 0x810 */
    pma_rxword_msg_saturation_stat_0_reg_t SATURATION_STAT_0; /*< Address offset = 0x814 */
    pma_rxword_msg_saturation_stat_1_reg_t SATURATION_STAT_1; /*< Address offset = 0x818 */
    const uint8_t        reservedArea14 [4];  /*< Address offset = 0x81c */
    pma_rxword_msg_saturation_stat_3_reg_t SATURATION_STAT_3; /*< Address offset = 0x820 */
    pma_rxword_msg_zeroavg_stat_0_reg_t ZEROAVG_STAT_0; /*< Address offset = 0x824 */
    pma_rxword_msg_zeroavg_stat_1_reg_t ZEROAVG_STAT_1; /*< Address offset = 0x828 */
    const uint8_t        reservedArea15 [4];  /*< Address offset = 0x82c */
    pma_rxword_msg_zeroavg_stat_3_reg_t ZEROAVG_STAT_3; /*< Address offset = 0x830 */
    pma_rxword_msg_adcofc_ctrl_0_reg_t ADCOFC_CTRL_0; /*< Address offset = 0x834 */
    pma_rxword_msg_adcofc_ctrl_1_reg_t ADCOFC_CTRL_1; /*< Address offset = 0x838 */
    pma_rxword_msg_adcofc_ctrl_2_reg_t ADCOFC_CTRL_2; /*< Address offset = 0x83c */
    pma_rxword_msg_adcofc_ctrl_3_reg_t ADCOFC_CTRL_3; /*< Address offset = 0x840 */
    pma_rxword_msg_adcofc_stat_0_reg_t ADCOFC_STAT_0; /*< Address offset = 0x844 */
    pma_rxword_msg_edg_slice_ctrl_0_reg_t EDG_SLICE_CTRL_0; /*< Address offset = 0x848 */
    pma_rxword_msg_edg_slicer_lvl_set0_ctrl_reg_t EDG_SLICER_LVL_SET0_CTRL; /*< Address offset = 0x84c */
    pma_rxword_msg_edg_slicer_lvl_set1_ctrl_reg_t EDG_SLICER_LVL_SET1_CTRL; /*< Address offset = 0x850 */
    pma_rxword_msg_edg_slicer_lvl_set2_ctrl_reg_t EDG_SLICER_LVL_SET2_CTRL; /*< Address offset = 0x854 */
    pma_rxword_msg_edg_slicer_lvl_set3_ctrl_reg_t EDG_SLICER_LVL_SET3_CTRL; /*< Address offset = 0x858 */
    pma_rxword_msg_edg_slicer_lvl_set4_ctrl_reg_t EDG_SLICER_LVL_SET4_CTRL; /*< Address offset = 0x85c */
    pma_rxword_msg_edg_slicer_lvl_set5_ctrl_reg_t EDG_SLICER_LVL_SET5_CTRL; /*< Address offset = 0x860 */
    pma_rxword_msg_edg_slicer_lvl_set6_ctrl_reg_t EDG_SLICER_LVL_SET6_CTRL; /*< Address offset = 0x864 */
    pma_rxword_msg_edg_slicer_lvl_set7_ctrl_reg_t EDG_SLICER_LVL_SET7_CTRL; /*< Address offset = 0x868 */
    pma_rxword_msg_edgvref_ctrl_1_reg_t EDGVREF_CTRL_1; /*< Address offset = 0x86c */
    pma_rxword_msg_edgvref_ctrl_2_reg_t EDGVREF_CTRL_2; /*< Address offset = 0x870 */
    pma_rxword_msg_edgvref_ctrl_3_reg_t EDGVREF_CTRL_3; /*< Address offset = 0x874 */
    pma_rxword_msg_edgvref_ctrl_4_reg_t EDGVREF_CTRL_4; /*< Address offset = 0x878 */
    pma_rxword_msg_edgvref_ctrl_5_reg_t EDGVREF_CTRL_5; /*< Address offset = 0x87c */
    pma_rxword_msg_edgvref_ctrl_6_reg_t EDGVREF_CTRL_6; /*< Address offset = 0x880 */
    pma_rxword_msg_edgvref_frac_set0_reg_t EDGVREF_FRAC_SET0; /*< Address offset = 0x884 */
    pma_rxword_msg_edgvref_frac_set1_reg_t EDGVREF_FRAC_SET1; /*< Address offset = 0x888 */
    pma_rxword_msg_edgvref_frac_set2_reg_t EDGVREF_FRAC_SET2; /*< Address offset = 0x88c */
    pma_rxword_msg_edgvref_frac_set3_reg_t EDGVREF_FRAC_SET3; /*< Address offset = 0x890 */
    pma_rxword_msg_edgvref_frac_set4_reg_t EDGVREF_FRAC_SET4; /*< Address offset = 0x894 */
    pma_rxword_msg_edgvref_frac_set5_reg_t EDGVREF_FRAC_SET5; /*< Address offset = 0x898 */
    pma_rxword_msg_edgvref_frac_set6_reg_t EDGVREF_FRAC_SET6; /*< Address offset = 0x89c */
    pma_rxword_msg_edgvref_frac_set7_reg_t EDGVREF_FRAC_SET7; /*< Address offset = 0x8a0 */
    pma_rxword_msg_jpp_ctrl_0_reg_t JPP_CTRL_0; /*< Address offset = 0x8a4 */
    pma_rxword_msg_dfe_lms_ctrl_0_reg_t DFE_LMS_CTRL_0; /*< Address offset = 0x8a8 */
    pma_rxword_msg_dfe_lms_ctrl_1_reg_t DFE_LMS_CTRL_1; /*< Address offset = 0x8ac */
    pma_rxword_msg_dfe_lms_ctrl_2_reg_t DFE_LMS_CTRL_2; /*< Address offset = 0x8b0 */
    pma_rxword_msg_dfe_lms_ctrl_3_reg_t DFE_LMS_CTRL_3; /*< Address offset = 0x8b4 */
    pma_rxword_msg_dfe_lms_stat_0_reg_t DFE_LMS_STAT_0; /*< Address offset = 0x8b8 */
    pma_rxword_msg_dfe_lms_set0to3_reg_t DFE_LMS_SET0TO3; /*< Address offset = 0x8bc */
    pma_rxword_msg_dfe_lms_set4to7_reg_t DFE_LMS_SET4TO7; /*< Address offset = 0x8c0 */
    pma_rxword_msg_dfe_lms_set8to11_reg_t DFE_LMS_SET8TO11; /*< Address offset = 0x8c4 */
    pma_rxword_msg_dfe_lms_set12to15_reg_t DFE_LMS_SET12TO15; /*< Address offset = 0x8c8 */
    pma_rxword_msg_dfe_lms_frac_set0to3_reg_t DFE_LMS_FRAC_SET0TO3; /*< Address offset = 0x8cc */
    pma_rxword_msg_dfe_lms_frac_set4to7_reg_t DFE_LMS_FRAC_SET4TO7; /*< Address offset = 0x8d0 */
    pma_rxword_msg_dfe_lms_frac_set8to11_reg_t DFE_LMS_FRAC_SET8TO11; /*< Address offset = 0x8d4 */
    pma_rxword_msg_dfe_lms_frac_set12to15_reg_t DFE_LMS_FRAC_SET12TO15; /*< Address offset = 0x8d8 */
    pma_rxword_msg_dfe_ctrl_0_reg_t DFE_CTRL_0; /*< Address offset = 0x8dc */
    pma_rxword_msg_rx_sararray_valid_0_reg_t RX_SARARRAY_VALID_0; /*< Address offset = 0x8e0 */
    pma_rxword_msg_rx_sararray_valid_1_reg_t RX_SARARRAY_VALID_1; /*< Address offset = 0x8e4 */
    pma_rxword_msg_cdr_ffe_pre1_set0to3_reg_t CDR_FFE_PRE1_SET0TO3; /*< Address offset = 0x8e8 */
    pma_rxword_msg_cdr_ffe_pre1_set4to7_reg_t CDR_FFE_PRE1_SET4TO7; /*< Address offset = 0x8ec */
    pma_rxword_msg_cdr_ffe_pre1_set8to11_reg_t CDR_FFE_PRE1_SET8TO11; /*< Address offset = 0x8f0 */
    pma_rxword_msg_cdr_ffe_pre1_set12to15_reg_t CDR_FFE_PRE1_SET12TO15; /*< Address offset = 0x8f4 */
    pma_rxword_msg_cdr_ffe_slicer_lvl_set0_ctrl_reg_t CDR_FFE_SLICER_LVL_SET0_CTRL; /*< Address offset = 0x8f8 */
    pma_rxword_msg_cdr_ffe_slicer_lvl_set1_ctrl_reg_t CDR_FFE_SLICER_LVL_SET1_CTRL; /*< Address offset = 0x8fc */
    pma_rxword_msg_cdr_ffe_slicer_lvl_set2_ctrl_reg_t CDR_FFE_SLICER_LVL_SET2_CTRL; /*< Address offset = 0x900 */
    pma_rxword_msg_cdr_ffe_slicer_lvl_set3_ctrl_reg_t CDR_FFE_SLICER_LVL_SET3_CTRL; /*< Address offset = 0x904 */
    const uint8_t        reservedArea16 [4];  /*< Address offset = 0x908 */
    pma_rxword_msg_cdr_ffe_slicer_lvl_set4_ctrl_reg_t CDR_FFE_SLICER_LVL_SET4_CTRL; /*< Address offset = 0x90c */
    pma_rxword_msg_cdr_ffe_slicer_lvl_set5_ctrl_reg_t CDR_FFE_SLICER_LVL_SET5_CTRL; /*< Address offset = 0x910 */
    pma_rxword_msg_cdr_ffe_slicer_lvl_set6_ctrl_reg_t CDR_FFE_SLICER_LVL_SET6_CTRL; /*< Address offset = 0x914 */
    pma_rxword_msg_cdr_ffe_slicer_lvl_set7_ctrl_reg_t CDR_FFE_SLICER_LVL_SET7_CTRL; /*< Address offset = 0x918 */
    pma_rxword_msg_cdr_ffe_slicer_lvl_set8_ctrl_reg_t CDR_FFE_SLICER_LVL_SET8_CTRL; /*< Address offset = 0x91c */
    pma_rxword_msg_cdr_ffe_slicer_lvl_set9_ctrl_reg_t CDR_FFE_SLICER_LVL_SET9_CTRL; /*< Address offset = 0x920 */
    pma_rxword_msg_cdr_ffe_slicer_lvl_set10_ctrl_reg_t CDR_FFE_SLICER_LVL_SET10_CTRL; /*< Address offset = 0x924 */
    pma_rxword_msg_cdr_ffe_slicer_lvl_set11_ctrl_reg_t CDR_FFE_SLICER_LVL_SET11_CTRL; /*< Address offset = 0x928 */
    pma_rxword_msg_cdr_ffe_slicer_lvl_set12_ctrl_reg_t CDR_FFE_SLICER_LVL_SET12_CTRL; /*< Address offset = 0x92c */
    pma_rxword_msg_cdr_ffe_slicer_lvl_set13_ctrl_reg_t CDR_FFE_SLICER_LVL_SET13_CTRL; /*< Address offset = 0x930 */
    pma_rxword_msg_cdr_ffe_slicer_lvl_set14_ctrl_reg_t CDR_FFE_SLICER_LVL_SET14_CTRL; /*< Address offset = 0x934 */
    pma_rxword_msg_cdr_ffe_slicer_lvl_set15_ctrl_reg_t CDR_FFE_SLICER_LVL_SET15_CTRL; /*< Address offset = 0x938 */
    const uint8_t        reservedArea17 [4];  /*< Address offset = 0x93c */
    pma_rxword_msg_cdr_ffe_err_lvl_m1m3_set0_reg_t CDR_FFE_ERR_LVL_M1M3_SET0; /*< Address offset = 0x940 */
    pma_rxword_msg_cdr_ffe_err_lvl_p1p3_set0_reg_t CDR_FFE_ERR_LVL_P1P3_SET0; /*< Address offset = 0x944 */
    pma_rxword_msg_cdr_ffe_err_lvl_m1m3_set1_reg_t CDR_FFE_ERR_LVL_M1M3_SET1; /*< Address offset = 0x948 */
    pma_rxword_msg_cdr_ffe_err_lvl_p1p3_set1_reg_t CDR_FFE_ERR_LVL_P1P3_SET1; /*< Address offset = 0x94c */
    pma_rxword_msg_cdr_ffe_err_lvl_m1m3_set2_reg_t CDR_FFE_ERR_LVL_M1M3_SET2; /*< Address offset = 0x950 */
    pma_rxword_msg_cdr_ffe_err_lvl_p1p3_set2_reg_t CDR_FFE_ERR_LVL_P1P3_SET2; /*< Address offset = 0x954 */
    pma_rxword_msg_cdr_ffe_err_lvl_m1m3_set3_reg_t CDR_FFE_ERR_LVL_M1M3_SET3; /*< Address offset = 0x958 */
    pma_rxword_msg_cdr_ffe_err_lvl_p1p3_set3_reg_t CDR_FFE_ERR_LVL_P1P3_SET3; /*< Address offset = 0x95c */
    pma_rxword_msg_cdr_ffe_err_lvl_m1m3_set4_reg_t CDR_FFE_ERR_LVL_M1M3_SET4; /*< Address offset = 0x960 */
    pma_rxword_msg_cdr_ffe_err_lvl_p1p3_set4_reg_t CDR_FFE_ERR_LVL_P1P3_SET4; /*< Address offset = 0x964 */
    pma_rxword_msg_cdr_ffe_err_lvl_m1m3_set5_reg_t CDR_FFE_ERR_LVL_M1M3_SET5; /*< Address offset = 0x968 */
    pma_rxword_msg_cdr_ffe_err_lvl_p1p3_set5_reg_t CDR_FFE_ERR_LVL_P1P3_SET5; /*< Address offset = 0x96c */
    pma_rxword_msg_cdr_ffe_err_lvl_m1m3_set6_reg_t CDR_FFE_ERR_LVL_M1M3_SET6; /*< Address offset = 0x970 */
    pma_rxword_msg_cdr_ffe_err_lvl_p1p3_set6_reg_t CDR_FFE_ERR_LVL_P1P3_SET6; /*< Address offset = 0x974 */
    pma_rxword_msg_cdr_ffe_err_lvl_m1m3_set7_reg_t CDR_FFE_ERR_LVL_M1M3_SET7; /*< Address offset = 0x978 */
    pma_rxword_msg_cdr_ffe_err_lvl_p1p3_set7_reg_t CDR_FFE_ERR_LVL_P1P3_SET7; /*< Address offset = 0x97c */
    pma_rxword_msg_cdr_ffe_err_lvl_m1m3_set8_reg_t CDR_FFE_ERR_LVL_M1M3_SET8; /*< Address offset = 0x980 */
    pma_rxword_msg_cdr_ffe_err_lvl_p1p3_set8_reg_t CDR_FFE_ERR_LVL_P1P3_SET8; /*< Address offset = 0x984 */
    pma_rxword_msg_cdr_ffe_err_lvl_m1m3_set9_reg_t CDR_FFE_ERR_LVL_M1M3_SET9; /*< Address offset = 0x988 */
    pma_rxword_msg_cdr_ffe_err_lvl_p1p3_set9_reg_t CDR_FFE_ERR_LVL_P1P3_SET9; /*< Address offset = 0x98c */
    pma_rxword_msg_cdr_ffe_err_lvl_m1m3_set10_reg_t CDR_FFE_ERR_LVL_M1M3_SET10; /*< Address offset = 0x990 */
    pma_rxword_msg_cdr_ffe_err_lvl_p1p3_set10_reg_t CDR_FFE_ERR_LVL_P1P3_SET10; /*< Address offset = 0x994 */
    pma_rxword_msg_cdr_ffe_err_lvl_m1m3_set11_reg_t CDR_FFE_ERR_LVL_M1M3_SET11; /*< Address offset = 0x998 */
    pma_rxword_msg_cdr_ffe_err_lvl_p1p3_set11_reg_t CDR_FFE_ERR_LVL_P1P3_SET11; /*< Address offset = 0x99c */
    pma_rxword_msg_cdr_ffe_err_lvl_m1m3_set12_reg_t CDR_FFE_ERR_LVL_M1M3_SET12; /*< Address offset = 0x9a0 */
    pma_rxword_msg_cdr_ffe_err_lvl_p1p3_set12_reg_t CDR_FFE_ERR_LVL_P1P3_SET12; /*< Address offset = 0x9a4 */
    pma_rxword_msg_cdr_ffe_err_lvl_m1m3_set13_reg_t CDR_FFE_ERR_LVL_M1M3_SET13; /*< Address offset = 0x9a8 */
    pma_rxword_msg_cdr_ffe_err_lvl_p1p3_set13_reg_t CDR_FFE_ERR_LVL_P1P3_SET13; /*< Address offset = 0x9ac */
    pma_rxword_msg_cdr_ffe_err_lvl_m1m3_set14_reg_t CDR_FFE_ERR_LVL_M1M3_SET14; /*< Address offset = 0x9b0 */
    pma_rxword_msg_cdr_ffe_err_lvl_p1p3_set14_reg_t CDR_FFE_ERR_LVL_P1P3_SET14; /*< Address offset = 0x9b4 */
    pma_rxword_msg_cdr_ffe_err_lvl_m1m3_set15_reg_t CDR_FFE_ERR_LVL_M1M3_SET15; /*< Address offset = 0x9b8 */
    const uint8_t        reservedArea18 [4];  /*< Address offset = 0x9bc */
    pma_rxword_msg_cdr_ffe_err_lvl_p1p3_set15_reg_t CDR_FFE_ERR_LVL_P1P3_SET15; /*< Address offset = 0x9c0 */
    const uint8_t        reservedArea19 [4];  /*< Address offset = 0x9c4 */
    pma_rxword_msg_cdr_ffe_post1_set0to3_reg_t CDR_FFE_POST1_SET0TO3; /*< Address offset = 0x9c8 */
    pma_rxword_msg_cdr_ffe_post1_set4to7_reg_t CDR_FFE_POST1_SET4TO7; /*< Address offset = 0x9cc */
    pma_rxword_msg_cdr_ffe_post1_set8to11_reg_t CDR_FFE_POST1_SET8TO11; /*< Address offset = 0x9d0 */
    pma_rxword_msg_cdr_ffe_post1_set12to15_reg_t CDR_FFE_POST1_SET12TO15; /*< Address offset = 0x9d4 */
    pma_rxword_msg_cdr_ffe_ctrl_0_reg_t CDR_FFE_CTRL_0; /*< Address offset = 0x9d8 */
    pma_rxword_msg_cdr_ffe_ctrl_1_reg_t CDR_FFE_CTRL_1; /*< Address offset = 0x9dc */
    pma_rxword_msg_cdr_ffe_ctrl_2_reg_t CDR_FFE_CTRL_2; /*< Address offset = 0x9e0 */
    pma_rxword_msg_lms_avg_updn_stat_0_reg_t LMS_AVG_UPDN_STAT_0; /*< Address offset = 0x9e4 */
    pma_rxword_msg_cdr_ffe_vref_ctrl_1_reg_t CDR_FFE_VREF_CTRL_1; /*< Address offset = 0x9e8 */
    pma_rxword_msg_cdr_ffe_vref_ctrl_2_reg_t CDR_FFE_VREF_CTRL_2; /*< Address offset = 0x9ec */
    pma_rxword_msg_cdr_ffe_vref_ctrl_3_reg_t CDR_FFE_VREF_CTRL_3; /*< Address offset = 0x9f0 */
    pma_rxword_msg_cdr_ffe_vref_ctrl_4_reg_t CDR_FFE_VREF_CTRL_4; /*< Address offset = 0x9f4 */
    pma_rxword_msg_cdr_ffe_vref_ctrl_5_reg_t CDR_FFE_VREF_CTRL_5; /*< Address offset = 0x9f8 */
    pma_rxword_msg_cdr_ffe_vref_ctrl_6_reg_t CDR_FFE_VREF_CTRL_6; /*< Address offset = 0x9fc */
    const uint8_t        reservedArea20 [4];  /*< Address offset = 0xa00 */
    pma_rxword_msg_cdr_ffe_ofc_ctrl_0_reg_t CDR_FFE_OFC_CTRL_0; /*< Address offset = 0xa04 */
    pma_rxword_msg_cdr_ffe_ofc_ctrl_1a_reg_t CDR_FFE_OFC_CTRL_1A; /*< Address offset = 0xa08 */
    pma_rxword_msg_cdr_ffe_ofc_ctrl_1b_reg_t CDR_FFE_OFC_CTRL_1B; /*< Address offset = 0xa0c */
    pma_rxword_msg_cdr_ffe_ofc_ctrl_2_reg_t CDR_FFE_OFC_CTRL_2; /*< Address offset = 0xa10 */
    pma_rxword_msg_cdr_ffe_ofc_ctrl_3_reg_t CDR_FFE_OFC_CTRL_3; /*< Address offset = 0xa14 */
    pma_rxword_msg_cdr_ffe_ofc_stat_0_reg_t CDR_FFE_OFC_STAT_0; /*< Address offset = 0xa18 */
    pma_rxword_msg_cdr_ffe_pre1_set0to3_frac_reg_t CDR_FFE_PRE1_SET0TO3_FRAC; /*< Address offset = 0xa1c */
    pma_rxword_msg_cdr_ffe_pre1_set4to7_frac_reg_t CDR_FFE_PRE1_SET4TO7_FRAC; /*< Address offset = 0xa20 */
    pma_rxword_msg_cdr_ffe_pre1_set8to11_frac_reg_t CDR_FFE_PRE1_SET8TO11_FRAC; /*< Address offset = 0xa24 */
    pma_rxword_msg_cdr_ffe_pre1_set12to15_frac_reg_t CDR_FFE_PRE1_SET12TO15_FRAC; /*< Address offset = 0xa28 */
    pma_rxword_msg_cdr_ffe_post1_set0to3_frac_reg_t CDR_FFE_POST1_SET0TO3_FRAC; /*< Address offset = 0xa2c */
    pma_rxword_msg_cdr_ffe_post1_set4to7_frac_reg_t CDR_FFE_POST1_SET4TO7_FRAC; /*< Address offset = 0xa30 */
    pma_rxword_msg_cdr_ffe_post1_set8to11_frac_reg_t CDR_FFE_POST1_SET8TO11_FRAC; /*< Address offset = 0xa34 */
    pma_rxword_msg_cdr_ffe_post1_set12to15_frac_reg_t CDR_FFE_POST1_SET12TO15_FRAC; /*< Address offset = 0xa38 */
    pma_rxword_msg_cdr_ffe_err_lvl_frac_set0_0_reg_t CDR_FFE_ERR_LVL_FRAC_SET0_0; /*< Address offset = 0xa3c */
    pma_rxword_msg_cdr_ffe_err_lvl_frac_set1_0_reg_t CDR_FFE_ERR_LVL_FRAC_SET1_0; /*< Address offset = 0xa40 */
    pma_rxword_msg_cdr_ffe_err_lvl_frac_set2_0_reg_t CDR_FFE_ERR_LVL_FRAC_SET2_0; /*< Address offset = 0xa44 */
    pma_rxword_msg_cdr_ffe_err_lvl_frac_set3_0_reg_t CDR_FFE_ERR_LVL_FRAC_SET3_0; /*< Address offset = 0xa48 */
    pma_rxword_msg_cdr_ffe_err_lvl_frac_set4_0_reg_t CDR_FFE_ERR_LVL_FRAC_SET4_0; /*< Address offset = 0xa4c */
    pma_rxword_msg_cdr_ffe_err_lvl_frac_set5_0_reg_t CDR_FFE_ERR_LVL_FRAC_SET5_0; /*< Address offset = 0xa50 */
    pma_rxword_msg_cdr_ffe_err_lvl_frac_set6_0_reg_t CDR_FFE_ERR_LVL_FRAC_SET6_0; /*< Address offset = 0xa54 */
    pma_rxword_msg_cdr_ffe_err_lvl_frac_set7_0_reg_t CDR_FFE_ERR_LVL_FRAC_SET7_0; /*< Address offset = 0xa58 */
    pma_rxword_msg_cdr_ffe_err_lvl_frac_set8_0_reg_t CDR_FFE_ERR_LVL_FRAC_SET8_0; /*< Address offset = 0xa5c */
    pma_rxword_msg_cdr_ffe_err_lvl_frac_set9_0_reg_t CDR_FFE_ERR_LVL_FRAC_SET9_0; /*< Address offset = 0xa60 */
    pma_rxword_msg_cdr_ffe_err_lvl_frac_set10_0_reg_t CDR_FFE_ERR_LVL_FRAC_SET10_0; /*< Address offset = 0xa64 */
    pma_rxword_msg_cdr_ffe_err_lvl_frac_set11_0_reg_t CDR_FFE_ERR_LVL_FRAC_SET11_0; /*< Address offset = 0xa68 */
    pma_rxword_msg_cdr_ffe_err_lvl_frac_set12_0_reg_t CDR_FFE_ERR_LVL_FRAC_SET12_0; /*< Address offset = 0xa6c */
    pma_rxword_msg_cdr_ffe_err_lvl_frac_set13_0_reg_t CDR_FFE_ERR_LVL_FRAC_SET13_0; /*< Address offset = 0xa70 */
    pma_rxword_msg_cdr_ffe_err_lvl_frac_set14_0_reg_t CDR_FFE_ERR_LVL_FRAC_SET14_0; /*< Address offset = 0xa74 */
    pma_rxword_msg_cdr_ffe_err_lvl_frac_set15_0_reg_t CDR_FFE_ERR_LVL_FRAC_SET15_0; /*< Address offset = 0xa78 */
    pma_rxword_msg_cdr_ffe_ctrl_3_reg_t CDR_FFE_CTRL_3; /*< Address offset = 0xa7c */
    pma_rxword_msg_cdr_ffe_pre3_set0to3_reg_t CDR_FFE_PRE3_SET0TO3; /*< Address offset = 0xa80 */
    pma_rxword_msg_cdr_ffe_pre3_set4to7_reg_t CDR_FFE_PRE3_SET4TO7; /*< Address offset = 0xa84 */
    pma_rxword_msg_cdr_ffe_pre3_set8to11_reg_t CDR_FFE_PRE3_SET8TO11; /*< Address offset = 0xa88 */
    pma_rxword_msg_cdr_ffe_pre3_set12to15_reg_t CDR_FFE_PRE3_SET12TO15; /*< Address offset = 0xa8c */
    pma_rxword_msg_cdr_ffe_pre2_set0to3_reg_t CDR_FFE_PRE2_SET0TO3; /*< Address offset = 0xa90 */
    pma_rxword_msg_cdr_ffe_pre2_set4to7_reg_t CDR_FFE_PRE2_SET4TO7; /*< Address offset = 0xa94 */
    pma_rxword_msg_cdr_ffe_pre2_set8to11_reg_t CDR_FFE_PRE2_SET8TO11; /*< Address offset = 0xa98 */
    pma_rxword_msg_cdr_ffe_pre2_set12to15_reg_t CDR_FFE_PRE2_SET12TO15; /*< Address offset = 0xa9c */
    pma_rxword_msg_cdr_ffe_post2_set0to3_reg_t CDR_FFE_POST2_SET0TO3; /*< Address offset = 0xaa0 */
    pma_rxword_msg_cdr_ffe_post2_set4to7_reg_t CDR_FFE_POST2_SET4TO7; /*< Address offset = 0xaa4 */
    pma_rxword_msg_cdr_ffe_post2_set8to11_reg_t CDR_FFE_POST2_SET8TO11; /*< Address offset = 0xaa8 */
    pma_rxword_msg_cdr_ffe_post2_set12to15_reg_t CDR_FFE_POST2_SET12TO15; /*< Address offset = 0xaac */
    pma_rxword_msg_cdr_ffe_post3_set0to3_reg_t CDR_FFE_POST3_SET0TO3; /*< Address offset = 0xab0 */
    pma_rxword_msg_cdr_ffe_post3_set4to7_reg_t CDR_FFE_POST3_SET4TO7; /*< Address offset = 0xab4 */
    pma_rxword_msg_cdr_ffe_post3_set8to11_reg_t CDR_FFE_POST3_SET8TO11; /*< Address offset = 0xab8 */
    pma_rxword_msg_cdr_ffe_post3_set12to15_reg_t CDR_FFE_POST3_SET12TO15; /*< Address offset = 0xabc */
    pma_rxword_msg_cdr_ffe_post4_set0to3_reg_t CDR_FFE_POST4_SET0TO3; /*< Address offset = 0xac0 */
    pma_rxword_msg_cdr_ffe_post4_set4to7_reg_t CDR_FFE_POST4_SET4TO7; /*< Address offset = 0xac4 */
    pma_rxword_msg_cdr_ffe_post4_set8to11_reg_t CDR_FFE_POST4_SET8TO11; /*< Address offset = 0xac8 */
    pma_rxword_msg_cdr_ffe_post4_set12to15_reg_t CDR_FFE_POST4_SET12TO15; /*< Address offset = 0xacc */
    pma_rxword_msg_cdr_ffe_pre3_set0to3_frac_reg_t CDR_FFE_PRE3_SET0TO3_FRAC; /*< Address offset = 0xad0 */
    pma_rxword_msg_cdr_ffe_pre3_set4to7_frac_reg_t CDR_FFE_PRE3_SET4TO7_FRAC; /*< Address offset = 0xad4 */
    pma_rxword_msg_cdr_ffe_pre3_set8to11_frac_reg_t CDR_FFE_PRE3_SET8TO11_FRAC; /*< Address offset = 0xad8 */
    pma_rxword_msg_cdr_ffe_pre3_set12to15_frac_reg_t CDR_FFE_PRE3_SET12TO15_FRAC; /*< Address offset = 0xadc */
    pma_rxword_msg_cdr_ffe_pre2_set0to3_frac_reg_t CDR_FFE_PRE2_SET0TO3_FRAC; /*< Address offset = 0xae0 */
    pma_rxword_msg_cdr_ffe_pre2_set4to7_frac_reg_t CDR_FFE_PRE2_SET4TO7_FRAC; /*< Address offset = 0xae4 */
    pma_rxword_msg_cdr_ffe_pre2_set8to11_frac_reg_t CDR_FFE_PRE2_SET8TO11_FRAC; /*< Address offset = 0xae8 */
    pma_rxword_msg_cdr_ffe_pre2_set12to15_frac_reg_t CDR_FFE_PRE2_SET12TO15_FRAC; /*< Address offset = 0xaec */
    pma_rxword_msg_cdr_ffe_post2_set0to3_frac_reg_t CDR_FFE_POST2_SET0TO3_FRAC; /*< Address offset = 0xaf0 */
    pma_rxword_msg_cdr_ffe_post2_set4to7_frac_reg_t CDR_FFE_POST2_SET4TO7_FRAC; /*< Address offset = 0xaf4 */
    pma_rxword_msg_cdr_ffe_post2_set8to11_frac_reg_t CDR_FFE_POST2_SET8TO11_FRAC; /*< Address offset = 0xaf8 */
    pma_rxword_msg_cdr_ffe_post2_set12to15_frac_reg_t CDR_FFE_POST2_SET12TO15_FRAC; /*< Address offset = 0xafc */
    pma_rxword_msg_cdr_ffe_post3_set0to3_frac_reg_t CDR_FFE_POST3_SET0TO3_FRAC; /*< Address offset = 0xb00 */
    pma_rxword_msg_cdr_ffe_post3_set4to7_frac_reg_t CDR_FFE_POST3_SET4TO7_FRAC; /*< Address offset = 0xb04 */
    pma_rxword_msg_cdr_ffe_post3_set8to11_frac_reg_t CDR_FFE_POST3_SET8TO11_FRAC; /*< Address offset = 0xb08 */
    pma_rxword_msg_cdr_ffe_post3_set12to15_frac_reg_t CDR_FFE_POST3_SET12TO15_FRAC; /*< Address offset = 0xb0c */
    pma_rxword_msg_cdr_ffe_post4_set0to3_frac_reg_t CDR_FFE_POST4_SET0TO3_FRAC; /*< Address offset = 0xb10 */
    pma_rxword_msg_cdr_ffe_post4_set4to7_frac_reg_t CDR_FFE_POST4_SET4TO7_FRAC; /*< Address offset = 0xb14 */
    pma_rxword_msg_cdr_ffe_post4_set8to11_frac_reg_t CDR_FFE_POST4_SET8TO11_FRAC; /*< Address offset = 0xb18 */
    pma_rxword_msg_cdr_ffe_post4_set12to15_frac_reg_t CDR_FFE_POST4_SET12TO15_FRAC; /*< Address offset = 0xb1c */
    pma_rxword_msg_saturation_stat_4_reg_t SATURATION_STAT_4; /*< Address offset = 0xb20 */
    pma_rxword_msg_affe_if_ctrl_0_reg_t AFFE_IF_CTRL_0; /*< Address offset = 0xb24 */
    pma_rxword_msg_ops_taps_b0_sar_0to3_reg_t OPS_TAPS_B0_SAR_0TO3; /*< Address offset = 0xb28 */
    pma_rxword_msg_ops_taps_b0_sar_4to7_reg_t OPS_TAPS_B0_SAR_4TO7; /*< Address offset = 0xb2c */
    pma_rxword_msg_ops_taps_b0_sar_8to11_reg_t OPS_TAPS_B0_SAR_8TO11; /*< Address offset = 0xb30 */
    pma_rxword_msg_ops_taps_b0_sar_12to15_reg_t OPS_TAPS_B0_SAR_12TO15; /*< Address offset = 0xb34 */
    pma_rxword_msg_ops_taps_b0_sar_16to19_reg_t OPS_TAPS_B0_SAR_16TO19; /*< Address offset = 0xb38 */
    pma_rxword_msg_ops_taps_b0_sar_20to23_reg_t OPS_TAPS_B0_SAR_20TO23; /*< Address offset = 0xb3c */
    pma_rxword_msg_ops_taps_b0_sar_24to27_reg_t OPS_TAPS_B0_SAR_24TO27; /*< Address offset = 0xb40 */
    pma_rxword_msg_ops_taps_b0_sar_28to31_reg_t OPS_TAPS_B0_SAR_28TO31; /*< Address offset = 0xb44 */
    pma_rxword_msg_ops_taps_b0_sar_32to35_reg_t OPS_TAPS_B0_SAR_32TO35; /*< Address offset = 0xb48 */
    pma_rxword_msg_ops_taps_b0_sar_36to39_reg_t OPS_TAPS_B0_SAR_36TO39; /*< Address offset = 0xb4c */
    pma_rxword_msg_ops_taps_b0_sar_40to43_reg_t OPS_TAPS_B0_SAR_40TO43; /*< Address offset = 0xb50 */
    pma_rxword_msg_ops_taps_b0_sar_44to47_reg_t OPS_TAPS_B0_SAR_44TO47; /*< Address offset = 0xb54 */
    pma_rxword_msg_ops_taps_b0_sar_48to51_reg_t OPS_TAPS_B0_SAR_48TO51; /*< Address offset = 0xb58 */
    pma_rxword_msg_ops_taps_b0_sar_52to55_reg_t OPS_TAPS_B0_SAR_52TO55; /*< Address offset = 0xb5c */
    pma_rxword_msg_ops_taps_b0_sar_56to59_reg_t OPS_TAPS_B0_SAR_56TO59; /*< Address offset = 0xb60 */
    pma_rxword_msg_ops_taps_b0_sar_60to63_reg_t OPS_TAPS_B0_SAR_60TO63; /*< Address offset = 0xb64 */
    pma_rxword_msg_ops_taps_b1_sar_0to3_reg_t OPS_TAPS_B1_SAR_0TO3; /*< Address offset = 0xb68 */
    pma_rxword_msg_ops_taps_b1_sar_4to7_reg_t OPS_TAPS_B1_SAR_4TO7; /*< Address offset = 0xb6c */
    pma_rxword_msg_ops_taps_b1_sar_8to11_reg_t OPS_TAPS_B1_SAR_8TO11; /*< Address offset = 0xb70 */
    pma_rxword_msg_ops_taps_b1_sar_12to15_reg_t OPS_TAPS_B1_SAR_12TO15; /*< Address offset = 0xb74 */
    pma_rxword_msg_ops_taps_b1_sar_16to19_reg_t OPS_TAPS_B1_SAR_16TO19; /*< Address offset = 0xb78 */
    pma_rxword_msg_ops_taps_b1_sar_20to23_reg_t OPS_TAPS_B1_SAR_20TO23; /*< Address offset = 0xb7c */
    pma_rxword_msg_ops_taps_b1_sar_24to27_reg_t OPS_TAPS_B1_SAR_24TO27; /*< Address offset = 0xb80 */
    pma_rxword_msg_ops_taps_b1_sar_28to31_reg_t OPS_TAPS_B1_SAR_28TO31; /*< Address offset = 0xb84 */
    pma_rxword_msg_ops_taps_b1_sar_32to35_reg_t OPS_TAPS_B1_SAR_32TO35; /*< Address offset = 0xb88 */
    pma_rxword_msg_ops_taps_b1_sar_36to39_reg_t OPS_TAPS_B1_SAR_36TO39; /*< Address offset = 0xb8c */
    pma_rxword_msg_ops_taps_b1_sar_40to43_reg_t OPS_TAPS_B1_SAR_40TO43; /*< Address offset = 0xb90 */
    pma_rxword_msg_ops_taps_b1_sar_44to47_reg_t OPS_TAPS_B1_SAR_44TO47; /*< Address offset = 0xb94 */
    pma_rxword_msg_ops_taps_b1_sar_48to51_reg_t OPS_TAPS_B1_SAR_48TO51; /*< Address offset = 0xb98 */
    pma_rxword_msg_ops_taps_b1_sar_52to55_reg_t OPS_TAPS_B1_SAR_52TO55; /*< Address offset = 0xb9c */
    pma_rxword_msg_ops_taps_b1_sar_56to59_reg_t OPS_TAPS_B1_SAR_56TO59; /*< Address offset = 0xba0 */
    pma_rxword_msg_ops_taps_b1_sar_60to63_reg_t OPS_TAPS_B1_SAR_60TO63; /*< Address offset = 0xba4 */
    pma_rxword_msg_ops_taps_b2_sar_0to3_reg_t OPS_TAPS_B2_SAR_0TO3; /*< Address offset = 0xba8 */
    pma_rxword_msg_ops_taps_b2_sar_4to7_reg_t OPS_TAPS_B2_SAR_4TO7; /*< Address offset = 0xbac */
    pma_rxword_msg_ops_taps_b2_sar_8to11_reg_t OPS_TAPS_B2_SAR_8TO11; /*< Address offset = 0xbb0 */
    pma_rxword_msg_ops_taps_b2_sar_12to15_reg_t OPS_TAPS_B2_SAR_12TO15; /*< Address offset = 0xbb4 */
    pma_rxword_msg_ops_taps_b2_sar_16to19_reg_t OPS_TAPS_B2_SAR_16TO19; /*< Address offset = 0xbb8 */
    pma_rxword_msg_ops_taps_b2_sar_20to23_reg_t OPS_TAPS_B2_SAR_20TO23; /*< Address offset = 0xbbc */
    pma_rxword_msg_ops_taps_b2_sar_24to27_reg_t OPS_TAPS_B2_SAR_24TO27; /*< Address offset = 0xbc0 */
    pma_rxword_msg_ops_taps_b2_sar_28to31_reg_t OPS_TAPS_B2_SAR_28TO31; /*< Address offset = 0xbc4 */
    pma_rxword_msg_ops_taps_b2_sar_32to35_reg_t OPS_TAPS_B2_SAR_32TO35; /*< Address offset = 0xbc8 */
    pma_rxword_msg_ops_taps_b2_sar_36to39_reg_t OPS_TAPS_B2_SAR_36TO39; /*< Address offset = 0xbcc */
    pma_rxword_msg_ops_taps_b2_sar_40to43_reg_t OPS_TAPS_B2_SAR_40TO43; /*< Address offset = 0xbd0 */
    pma_rxword_msg_ops_taps_b2_sar_44to47_reg_t OPS_TAPS_B2_SAR_44TO47; /*< Address offset = 0xbd4 */
    pma_rxword_msg_ops_taps_b2_sar_48to51_reg_t OPS_TAPS_B2_SAR_48TO51; /*< Address offset = 0xbd8 */
    pma_rxword_msg_ops_taps_b2_sar_52to55_reg_t OPS_TAPS_B2_SAR_52TO55; /*< Address offset = 0xbdc */
    pma_rxword_msg_ops_taps_b2_sar_56to59_reg_t OPS_TAPS_B2_SAR_56TO59; /*< Address offset = 0xbe0 */
    pma_rxword_msg_ops_taps_b2_sar_60to63_reg_t OPS_TAPS_B2_SAR_60TO63; /*< Address offset = 0xbe4 */
    pma_rxword_msg_ops_taps_b3_sar_0to3_reg_t OPS_TAPS_B3_SAR_0TO3; /*< Address offset = 0xbe8 */
    pma_rxword_msg_ops_taps_b3_sar_4to7_reg_t OPS_TAPS_B3_SAR_4TO7; /*< Address offset = 0xbec */
    pma_rxword_msg_ops_taps_b3_sar_8to11_reg_t OPS_TAPS_B3_SAR_8TO11; /*< Address offset = 0xbf0 */
    pma_rxword_msg_ops_taps_b3_sar_12to15_reg_t OPS_TAPS_B3_SAR_12TO15; /*< Address offset = 0xbf4 */
    pma_rxword_msg_ops_taps_b3_sar_16to19_reg_t OPS_TAPS_B3_SAR_16TO19; /*< Address offset = 0xbf8 */
    pma_rxword_msg_ops_taps_b3_sar_20to23_reg_t OPS_TAPS_B3_SAR_20TO23; /*< Address offset = 0xbfc */
    pma_rxword_msg_ops_taps_b3_sar_24to27_reg_t OPS_TAPS_B3_SAR_24TO27; /*< Address offset = 0xc00 */
    pma_rxword_msg_ops_taps_b3_sar_28to31_reg_t OPS_TAPS_B3_SAR_28TO31; /*< Address offset = 0xc04 */
    pma_rxword_msg_ops_taps_b3_sar_32to35_reg_t OPS_TAPS_B3_SAR_32TO35; /*< Address offset = 0xc08 */
    pma_rxword_msg_ops_taps_b3_sar_36to39_reg_t OPS_TAPS_B3_SAR_36TO39; /*< Address offset = 0xc0c */
    pma_rxword_msg_ops_taps_b3_sar_40to43_reg_t OPS_TAPS_B3_SAR_40TO43; /*< Address offset = 0xc10 */
    pma_rxword_msg_ops_taps_b3_sar_44to47_reg_t OPS_TAPS_B3_SAR_44TO47; /*< Address offset = 0xc14 */
    pma_rxword_msg_ops_taps_b3_sar_48to51_reg_t OPS_TAPS_B3_SAR_48TO51; /*< Address offset = 0xc18 */
    pma_rxword_msg_ops_taps_b3_sar_52to55_reg_t OPS_TAPS_B3_SAR_52TO55; /*< Address offset = 0xc1c */
    pma_rxword_msg_ops_taps_b3_sar_56to59_reg_t OPS_TAPS_B3_SAR_56TO59; /*< Address offset = 0xc20 */
    pma_rxword_msg_ops_taps_b3_sar_60to63_reg_t OPS_TAPS_B3_SAR_60TO63; /*< Address offset = 0xc24 */
    pma_rxword_msg_ops_taps_b4_sar_0to3_reg_t OPS_TAPS_B4_SAR_0TO3; /*< Address offset = 0xc28 */
    pma_rxword_msg_ops_taps_b4_sar_4to7_reg_t OPS_TAPS_B4_SAR_4TO7; /*< Address offset = 0xc2c */
    pma_rxword_msg_ops_taps_b4_sar_8to11_reg_t OPS_TAPS_B4_SAR_8TO11; /*< Address offset = 0xc30 */
    pma_rxword_msg_ops_taps_b4_sar_12to15_reg_t OPS_TAPS_B4_SAR_12TO15; /*< Address offset = 0xc34 */
    pma_rxword_msg_ops_taps_b4_sar_16to19_reg_t OPS_TAPS_B4_SAR_16TO19; /*< Address offset = 0xc38 */
    pma_rxword_msg_ops_taps_b4_sar_20to23_reg_t OPS_TAPS_B4_SAR_20TO23; /*< Address offset = 0xc3c */
    pma_rxword_msg_ops_taps_b4_sar_24to27_reg_t OPS_TAPS_B4_SAR_24TO27; /*< Address offset = 0xc40 */
    pma_rxword_msg_ops_taps_b4_sar_28to31_reg_t OPS_TAPS_B4_SAR_28TO31; /*< Address offset = 0xc44 */
    pma_rxword_msg_ops_taps_b4_sar_32to35_reg_t OPS_TAPS_B4_SAR_32TO35; /*< Address offset = 0xc48 */
    pma_rxword_msg_ops_taps_b4_sar_36to39_reg_t OPS_TAPS_B4_SAR_36TO39; /*< Address offset = 0xc4c */
    pma_rxword_msg_ops_taps_b4_sar_40to43_reg_t OPS_TAPS_B4_SAR_40TO43; /*< Address offset = 0xc50 */
    pma_rxword_msg_ops_taps_b4_sar_44to47_reg_t OPS_TAPS_B4_SAR_44TO47; /*< Address offset = 0xc54 */
    pma_rxword_msg_ops_taps_b4_sar_48to51_reg_t OPS_TAPS_B4_SAR_48TO51; /*< Address offset = 0xc58 */
    pma_rxword_msg_ops_taps_b4_sar_52to55_reg_t OPS_TAPS_B4_SAR_52TO55; /*< Address offset = 0xc5c */
    pma_rxword_msg_ops_taps_b4_sar_56to59_reg_t OPS_TAPS_B4_SAR_56TO59; /*< Address offset = 0xc60 */
    pma_rxword_msg_ops_taps_b4_sar_60to63_reg_t OPS_TAPS_B4_SAR_60TO63; /*< Address offset = 0xc64 */
    pma_rxword_msg_ops_taps_b5_sar_0to3_reg_t OPS_TAPS_B5_SAR_0TO3; /*< Address offset = 0xc68 */
    pma_rxword_msg_ops_taps_b5_sar_4to7_reg_t OPS_TAPS_B5_SAR_4TO7; /*< Address offset = 0xc6c */
    pma_rxword_msg_ops_taps_b5_sar_8to11_reg_t OPS_TAPS_B5_SAR_8TO11; /*< Address offset = 0xc70 */
    pma_rxword_msg_ops_taps_b5_sar_12to15_reg_t OPS_TAPS_B5_SAR_12TO15; /*< Address offset = 0xc74 */
    pma_rxword_msg_ops_taps_b5_sar_16to19_reg_t OPS_TAPS_B5_SAR_16TO19; /*< Address offset = 0xc78 */
    pma_rxword_msg_ops_taps_b5_sar_20to23_reg_t OPS_TAPS_B5_SAR_20TO23; /*< Address offset = 0xc7c */
    pma_rxword_msg_ops_taps_b5_sar_24to27_reg_t OPS_TAPS_B5_SAR_24TO27; /*< Address offset = 0xc80 */
    pma_rxword_msg_ops_taps_b5_sar_28to31_reg_t OPS_TAPS_B5_SAR_28TO31; /*< Address offset = 0xc84 */
    pma_rxword_msg_ops_taps_b5_sar_32to35_reg_t OPS_TAPS_B5_SAR_32TO35; /*< Address offset = 0xc88 */
    pma_rxword_msg_ops_taps_b5_sar_36to39_reg_t OPS_TAPS_B5_SAR_36TO39; /*< Address offset = 0xc8c */
    pma_rxword_msg_ops_taps_b5_sar_40to43_reg_t OPS_TAPS_B5_SAR_40TO43; /*< Address offset = 0xc90 */
    pma_rxword_msg_ops_taps_b5_sar_44to47_reg_t OPS_TAPS_B5_SAR_44TO47; /*< Address offset = 0xc94 */
    pma_rxword_msg_ops_taps_b5_sar_48to51_reg_t OPS_TAPS_B5_SAR_48TO51; /*< Address offset = 0xc98 */
    pma_rxword_msg_ops_taps_b5_sar_52to55_reg_t OPS_TAPS_B5_SAR_52TO55; /*< Address offset = 0xc9c */
    pma_rxword_msg_ops_taps_b5_sar_56to59_reg_t OPS_TAPS_B5_SAR_56TO59; /*< Address offset = 0xca0 */
    pma_rxword_msg_ops_taps_b5_sar_60to63_reg_t OPS_TAPS_B5_SAR_60TO63; /*< Address offset = 0xca4 */
    pma_rxword_msg_ops_taps_fra_b0_sar_0to3_reg_t OPS_TAPS_FRA_B0_SAR_0TO3; /*< Address offset = 0xca8 */
    pma_rxword_msg_ops_taps_fra_b0_sar_4to7_reg_t OPS_TAPS_FRA_B0_SAR_4TO7; /*< Address offset = 0xcac */
    pma_rxword_msg_ops_taps_fra_b0_sar_8to11_reg_t OPS_TAPS_FRA_B0_SAR_8TO11; /*< Address offset = 0xcb0 */
    pma_rxword_msg_ops_taps_fra_b0_sar_12to15_reg_t OPS_TAPS_FRA_B0_SAR_12TO15; /*< Address offset = 0xcb4 */
    pma_rxword_msg_ops_taps_fra_b0_sar_16to19_reg_t OPS_TAPS_FRA_B0_SAR_16TO19; /*< Address offset = 0xcb8 */
    pma_rxword_msg_ops_taps_fra_b0_sar_20to23_reg_t OPS_TAPS_FRA_B0_SAR_20TO23; /*< Address offset = 0xcbc */
    pma_rxword_msg_ops_taps_fra_b0_sar_24to27_reg_t OPS_TAPS_FRA_B0_SAR_24TO27; /*< Address offset = 0xcc0 */
    pma_rxword_msg_ops_taps_fra_b0_sar_28to31_reg_t OPS_TAPS_FRA_B0_SAR_28TO31; /*< Address offset = 0xcc4 */
    pma_rxword_msg_ops_taps_fra_b0_sar_32to35_reg_t OPS_TAPS_FRA_B0_SAR_32TO35; /*< Address offset = 0xcc8 */
    pma_rxword_msg_ops_taps_fra_b0_sar_36to39_reg_t OPS_TAPS_FRA_B0_SAR_36TO39; /*< Address offset = 0xccc */
    pma_rxword_msg_ops_taps_fra_b0_sar_40to43_reg_t OPS_TAPS_FRA_B0_SAR_40TO43; /*< Address offset = 0xcd0 */
    pma_rxword_msg_ops_taps_fra_b0_sar_44to47_reg_t OPS_TAPS_FRA_B0_SAR_44TO47; /*< Address offset = 0xcd4 */
    pma_rxword_msg_ops_taps_fra_b0_sar_48to51_reg_t OPS_TAPS_FRA_B0_SAR_48TO51; /*< Address offset = 0xcd8 */
    pma_rxword_msg_ops_taps_fra_b0_sar_52to55_reg_t OPS_TAPS_FRA_B0_SAR_52TO55; /*< Address offset = 0xcdc */
    pma_rxword_msg_ops_taps_fra_b0_sar_56to59_reg_t OPS_TAPS_FRA_B0_SAR_56TO59; /*< Address offset = 0xce0 */
    pma_rxword_msg_ops_taps_fra_b0_sar_60to63_reg_t OPS_TAPS_FRA_B0_SAR_60TO63; /*< Address offset = 0xce4 */
    pma_rxword_msg_ops_taps_fra_b1_sar_0to3_reg_t OPS_TAPS_FRA_B1_SAR_0TO3; /*< Address offset = 0xce8 */
    pma_rxword_msg_ops_taps_fra_b1_sar_4to7_reg_t OPS_TAPS_FRA_B1_SAR_4TO7; /*< Address offset = 0xcec */
    pma_rxword_msg_ops_taps_fra_b1_sar_8to11_reg_t OPS_TAPS_FRA_B1_SAR_8TO11; /*< Address offset = 0xcf0 */
    pma_rxword_msg_ops_taps_fra_b1_sar_12to15_reg_t OPS_TAPS_FRA_B1_SAR_12TO15; /*< Address offset = 0xcf4 */
    pma_rxword_msg_ops_taps_fra_b1_sar_16to19_reg_t OPS_TAPS_FRA_B1_SAR_16TO19; /*< Address offset = 0xcf8 */
    pma_rxword_msg_ops_taps_fra_b1_sar_20to23_reg_t OPS_TAPS_FRA_B1_SAR_20TO23; /*< Address offset = 0xcfc */
    pma_rxword_msg_ops_taps_fra_b1_sar_24to27_reg_t OPS_TAPS_FRA_B1_SAR_24TO27; /*< Address offset = 0xd00 */
    pma_rxword_msg_ops_taps_fra_b1_sar_28to31_reg_t OPS_TAPS_FRA_B1_SAR_28TO31; /*< Address offset = 0xd04 */
    pma_rxword_msg_ops_taps_fra_b1_sar_32to35_reg_t OPS_TAPS_FRA_B1_SAR_32TO35; /*< Address offset = 0xd08 */
    pma_rxword_msg_ops_taps_fra_b1_sar_36to39_reg_t OPS_TAPS_FRA_B1_SAR_36TO39; /*< Address offset = 0xd0c */
    pma_rxword_msg_ops_taps_fra_b1_sar_40to43_reg_t OPS_TAPS_FRA_B1_SAR_40TO43; /*< Address offset = 0xd10 */
    pma_rxword_msg_ops_taps_fra_b1_sar_44to47_reg_t OPS_TAPS_FRA_B1_SAR_44TO47; /*< Address offset = 0xd14 */
    pma_rxword_msg_ops_taps_fra_b1_sar_48to51_reg_t OPS_TAPS_FRA_B1_SAR_48TO51; /*< Address offset = 0xd18 */
    pma_rxword_msg_ops_taps_fra_b1_sar_52to55_reg_t OPS_TAPS_FRA_B1_SAR_52TO55; /*< Address offset = 0xd1c */
    pma_rxword_msg_ops_taps_fra_b1_sar_56to59_reg_t OPS_TAPS_FRA_B1_SAR_56TO59; /*< Address offset = 0xd20 */
    pma_rxword_msg_ops_taps_fra_b1_sar_60to63_reg_t OPS_TAPS_FRA_B1_SAR_60TO63; /*< Address offset = 0xd24 */
    pma_rxword_msg_ops_taps_fra_b2_sar_0to3_reg_t OPS_TAPS_FRA_B2_SAR_0TO3; /*< Address offset = 0xd28 */
    pma_rxword_msg_ops_taps_fra_b2_sar_4to7_reg_t OPS_TAPS_FRA_B2_SAR_4TO7; /*< Address offset = 0xd2c */
    pma_rxword_msg_ops_taps_fra_b2_sar_8to11_reg_t OPS_TAPS_FRA_B2_SAR_8TO11; /*< Address offset = 0xd30 */
    pma_rxword_msg_ops_taps_fra_b2_sar_12to15_reg_t OPS_TAPS_FRA_B2_SAR_12TO15; /*< Address offset = 0xd34 */
    pma_rxword_msg_ops_taps_fra_b2_sar_16to19_reg_t OPS_TAPS_FRA_B2_SAR_16TO19; /*< Address offset = 0xd38 */
    pma_rxword_msg_ops_taps_fra_b2_sar_20to23_reg_t OPS_TAPS_FRA_B2_SAR_20TO23; /*< Address offset = 0xd3c */
    pma_rxword_msg_ops_taps_fra_b2_sar_24to27_reg_t OPS_TAPS_FRA_B2_SAR_24TO27; /*< Address offset = 0xd40 */
    pma_rxword_msg_ops_taps_fra_b2_sar_28to31_reg_t OPS_TAPS_FRA_B2_SAR_28TO31; /*< Address offset = 0xd44 */
    pma_rxword_msg_ops_taps_fra_b2_sar_32to35_reg_t OPS_TAPS_FRA_B2_SAR_32TO35; /*< Address offset = 0xd48 */
    pma_rxword_msg_ops_taps_fra_b2_sar_36to39_reg_t OPS_TAPS_FRA_B2_SAR_36TO39; /*< Address offset = 0xd4c */
    pma_rxword_msg_ops_taps_fra_b2_sar_40to43_reg_t OPS_TAPS_FRA_B2_SAR_40TO43; /*< Address offset = 0xd50 */
    pma_rxword_msg_ops_taps_fra_b2_sar_44to47_reg_t OPS_TAPS_FRA_B2_SAR_44TO47; /*< Address offset = 0xd54 */
    pma_rxword_msg_ops_taps_fra_b2_sar_48to51_reg_t OPS_TAPS_FRA_B2_SAR_48TO51; /*< Address offset = 0xd58 */
    pma_rxword_msg_ops_taps_fra_b2_sar_52to55_reg_t OPS_TAPS_FRA_B2_SAR_52TO55; /*< Address offset = 0xd5c */
    pma_rxword_msg_ops_taps_fra_b2_sar_56to59_reg_t OPS_TAPS_FRA_B2_SAR_56TO59; /*< Address offset = 0xd60 */
    pma_rxword_msg_ops_taps_fra_b2_sar_60to63_reg_t OPS_TAPS_FRA_B2_SAR_60TO63; /*< Address offset = 0xd64 */
    pma_rxword_msg_ops_taps_fra_b3_sar_0to3_reg_t OPS_TAPS_FRA_B3_SAR_0TO3; /*< Address offset = 0xd68 */
    pma_rxword_msg_ops_taps_fra_b3_sar_4to7_reg_t OPS_TAPS_FRA_B3_SAR_4TO7; /*< Address offset = 0xd6c */
    pma_rxword_msg_ops_taps_fra_b3_sar_8to11_reg_t OPS_TAPS_FRA_B3_SAR_8TO11; /*< Address offset = 0xd70 */
    pma_rxword_msg_ops_taps_fra_b3_sar_12to15_reg_t OPS_TAPS_FRA_B3_SAR_12TO15; /*< Address offset = 0xd74 */
    pma_rxword_msg_ops_taps_fra_b3_sar_16to19_reg_t OPS_TAPS_FRA_B3_SAR_16TO19; /*< Address offset = 0xd78 */
    pma_rxword_msg_ops_taps_fra_b3_sar_20to23_reg_t OPS_TAPS_FRA_B3_SAR_20TO23; /*< Address offset = 0xd7c */
    pma_rxword_msg_ops_taps_fra_b3_sar_24to27_reg_t OPS_TAPS_FRA_B3_SAR_24TO27; /*< Address offset = 0xd80 */
    pma_rxword_msg_ops_taps_fra_b3_sar_28to31_reg_t OPS_TAPS_FRA_B3_SAR_28TO31; /*< Address offset = 0xd84 */
    pma_rxword_msg_ops_taps_fra_b3_sar_32to35_reg_t OPS_TAPS_FRA_B3_SAR_32TO35; /*< Address offset = 0xd88 */
    pma_rxword_msg_ops_taps_fra_b3_sar_36to39_reg_t OPS_TAPS_FRA_B3_SAR_36TO39; /*< Address offset = 0xd8c */
    pma_rxword_msg_ops_taps_fra_b3_sar_40to43_reg_t OPS_TAPS_FRA_B3_SAR_40TO43; /*< Address offset = 0xd90 */
    pma_rxword_msg_ops_taps_fra_b3_sar_44to47_reg_t OPS_TAPS_FRA_B3_SAR_44TO47; /*< Address offset = 0xd94 */
    pma_rxword_msg_ops_taps_fra_b3_sar_48to51_reg_t OPS_TAPS_FRA_B3_SAR_48TO51; /*< Address offset = 0xd98 */
    pma_rxword_msg_ops_taps_fra_b3_sar_52to55_reg_t OPS_TAPS_FRA_B3_SAR_52TO55; /*< Address offset = 0xd9c */
    pma_rxword_msg_ops_taps_fra_b3_sar_56to59_reg_t OPS_TAPS_FRA_B3_SAR_56TO59; /*< Address offset = 0xda0 */
    pma_rxword_msg_ops_taps_fra_b3_sar_60to63_reg_t OPS_TAPS_FRA_B3_SAR_60TO63; /*< Address offset = 0xda4 */
    pma_rxword_msg_ops_taps_fra_b4_sar_0to3_reg_t OPS_TAPS_FRA_B4_SAR_0TO3; /*< Address offset = 0xda8 */
    pma_rxword_msg_ops_taps_fra_b4_sar_4to7_reg_t OPS_TAPS_FRA_B4_SAR_4TO7; /*< Address offset = 0xdac */
    pma_rxword_msg_ops_taps_fra_b4_sar_8to11_reg_t OPS_TAPS_FRA_B4_SAR_8TO11; /*< Address offset = 0xdb0 */
    pma_rxword_msg_ops_taps_fra_b4_sar_12to15_reg_t OPS_TAPS_FRA_B4_SAR_12TO15; /*< Address offset = 0xdb4 */
    pma_rxword_msg_ops_taps_fra_b4_sar_16to19_reg_t OPS_TAPS_FRA_B4_SAR_16TO19; /*< Address offset = 0xdb8 */
    pma_rxword_msg_ops_taps_fra_b4_sar_20to23_reg_t OPS_TAPS_FRA_B4_SAR_20TO23; /*< Address offset = 0xdbc */
    pma_rxword_msg_ops_taps_fra_b4_sar_24to27_reg_t OPS_TAPS_FRA_B4_SAR_24TO27; /*< Address offset = 0xdc0 */
    pma_rxword_msg_ops_taps_fra_b4_sar_28to31_reg_t OPS_TAPS_FRA_B4_SAR_28TO31; /*< Address offset = 0xdc4 */
    pma_rxword_msg_ops_taps_fra_b4_sar_32to35_reg_t OPS_TAPS_FRA_B4_SAR_32TO35; /*< Address offset = 0xdc8 */
    pma_rxword_msg_ops_taps_fra_b4_sar_36to39_reg_t OPS_TAPS_FRA_B4_SAR_36TO39; /*< Address offset = 0xdcc */
    pma_rxword_msg_ops_taps_fra_b4_sar_40to43_reg_t OPS_TAPS_FRA_B4_SAR_40TO43; /*< Address offset = 0xdd0 */
    pma_rxword_msg_ops_taps_fra_b4_sar_44to47_reg_t OPS_TAPS_FRA_B4_SAR_44TO47; /*< Address offset = 0xdd4 */
    pma_rxword_msg_ops_taps_fra_b4_sar_48to51_reg_t OPS_TAPS_FRA_B4_SAR_48TO51; /*< Address offset = 0xdd8 */
    pma_rxword_msg_ops_taps_fra_b4_sar_52to55_reg_t OPS_TAPS_FRA_B4_SAR_52TO55; /*< Address offset = 0xddc */
    pma_rxword_msg_ops_taps_fra_b4_sar_56to59_reg_t OPS_TAPS_FRA_B4_SAR_56TO59; /*< Address offset = 0xde0 */
    pma_rxword_msg_ops_taps_fra_b4_sar_60to63_reg_t OPS_TAPS_FRA_B4_SAR_60TO63; /*< Address offset = 0xde4 */
    pma_rxword_msg_ops_taps_fra_b5_sar_0to3_reg_t OPS_TAPS_FRA_B5_SAR_0TO3; /*< Address offset = 0xde8 */
    pma_rxword_msg_ops_taps_fra_b5_sar_4to7_reg_t OPS_TAPS_FRA_B5_SAR_4TO7; /*< Address offset = 0xdec */
    pma_rxword_msg_ops_taps_fra_b5_sar_8to11_reg_t OPS_TAPS_FRA_B5_SAR_8TO11; /*< Address offset = 0xdf0 */
    pma_rxword_msg_ops_taps_fra_b5_sar_12to15_reg_t OPS_TAPS_FRA_B5_SAR_12TO15; /*< Address offset = 0xdf4 */
    pma_rxword_msg_ops_taps_fra_b5_sar_16to19_reg_t OPS_TAPS_FRA_B5_SAR_16TO19; /*< Address offset = 0xdf8 */
    pma_rxword_msg_ops_taps_fra_b5_sar_20to23_reg_t OPS_TAPS_FRA_B5_SAR_20TO23; /*< Address offset = 0xdfc */
    pma_rxword_msg_ops_taps_fra_b5_sar_24to27_reg_t OPS_TAPS_FRA_B5_SAR_24TO27; /*< Address offset = 0xe00 */
    pma_rxword_msg_ops_taps_fra_b5_sar_28to31_reg_t OPS_TAPS_FRA_B5_SAR_28TO31; /*< Address offset = 0xe04 */
    pma_rxword_msg_ops_taps_fra_b5_sar_32to35_reg_t OPS_TAPS_FRA_B5_SAR_32TO35; /*< Address offset = 0xe08 */
    pma_rxword_msg_ops_taps_fra_b5_sar_36to39_reg_t OPS_TAPS_FRA_B5_SAR_36TO39; /*< Address offset = 0xe0c */
    pma_rxword_msg_ops_taps_fra_b5_sar_40to43_reg_t OPS_TAPS_FRA_B5_SAR_40TO43; /*< Address offset = 0xe10 */
    pma_rxword_msg_ops_taps_fra_b5_sar_44to47_reg_t OPS_TAPS_FRA_B5_SAR_44TO47; /*< Address offset = 0xe14 */
    pma_rxword_msg_ops_taps_fra_b5_sar_48to51_reg_t OPS_TAPS_FRA_B5_SAR_48TO51; /*< Address offset = 0xe18 */
    pma_rxword_msg_ops_taps_fra_b5_sar_52to55_reg_t OPS_TAPS_FRA_B5_SAR_52TO55; /*< Address offset = 0xe1c */
    pma_rxword_msg_ops_taps_fra_b5_sar_56to59_reg_t OPS_TAPS_FRA_B5_SAR_56TO59; /*< Address offset = 0xe20 */
    pma_rxword_msg_ops_taps_fra_b5_sar_60to63_reg_t OPS_TAPS_FRA_B5_SAR_60TO63; /*< Address offset = 0xe24 */
    pma_rxword_msg_ofc_ctrl_4_reg_t OFC_CTRL_4; /*< Address offset = 0xe28 */
    pma_rxword_msg_ofc_ctrl_5_reg_t OFC_CTRL_5; /*< Address offset = 0xe2c */
    pma_rxword_msg_ofc_ctrl_6_reg_t OFC_CTRL_6; /*< Address offset = 0xe30 */
    pma_rxword_msg_ofc_ctrl_7_reg_t OFC_CTRL_7; /*< Address offset = 0xe34 */
    pma_rxword_msg_cdr_ffe_ofc_ctrl_4_reg_t CDR_FFE_OFC_CTRL_4; /*< Address offset = 0xe38 */
    pma_rxword_msg_cdr_ffe_ofc_ctrl_5_reg_t CDR_FFE_OFC_CTRL_5; /*< Address offset = 0xe3c */
    pma_rxword_msg_cdr_ffe_ofc_ctrl_6_reg_t CDR_FFE_OFC_CTRL_6; /*< Address offset = 0xe40 */
    pma_rxword_msg_cdr_ffe_ofc_ctrl_7_reg_t CDR_FFE_OFC_CTRL_7; /*< Address offset = 0xe44 */
    pma_rxword_msg_adcofc_ctrl_4_reg_t ADCOFC_CTRL_4; /*< Address offset = 0xe48 */
    pma_rxword_msg_adcofc_ctrl_5_reg_t ADCOFC_CTRL_5; /*< Address offset = 0xe4c */
    pma_rxword_msg_adcofc_ctrl_6_reg_t ADCOFC_CTRL_6; /*< Address offset = 0xe50 */
    pma_rxword_msg_adcofc_ctrl_7_reg_t ADCOFC_CTRL_7; /*< Address offset = 0xe54 */
    const uint8_t        reservedArea21 [160]; /*< Address offset = 0xe58 */
    pma_rxword_msg_rx_sigdet_venv_ctrl1_reg_t RX_SIGDET_VENV_CTRL1; /*< Address offset = 0xef8 */
    pma_rxword_msg_rx_sigdet_venv_ctrl2_reg_t RX_SIGDET_VENV_CTRL2; /*< Address offset = 0xefc */
    pma_rxword_msg_rx_sigdet_venv_ctrl3_reg_t RX_SIGDET_VENV_CTRL3; /*< Address offset = 0xf00 */
    pma_rxword_msg_rx_sigdet_venv_stat_reg_t RX_SIGDET_VENV_STAT; /*< Address offset = 0xf04 */
    pma_rxword_msg_rx_sigdet_venv_stat_clr_reg_t RX_SIGDET_VENV_STAT_CLR; /*< Address offset = 0xf08 */
    const uint8_t        reservedArea22 [204]; /*< Address offset = 0xf0c */
    pma_rxword_msg_rxword_rw_spare_0_reg_t RXWORD_RW_SPARE_0; /*< Address offset = 0xfd8 */
    pma_rxword_msg_rxword_rw_spare_1_reg_t RXWORD_RW_SPARE_1; /*< Address offset = 0xfdc */
    pma_rxword_msg_rxword_rw_spare_2_reg_t RXWORD_RW_SPARE_2; /*< Address offset = 0xfe0 */
    pma_rxword_msg_rxword_rw_spare_3_reg_t RXWORD_RW_SPARE_3; /*< Address offset = 0xfe4 */
    pma_rxword_msg_rxword_ro_spare_0_reg_t RXWORD_RO_SPARE_0; /*< Address offset = 0xfe8 */
    pma_rxword_msg_rxword_ro_spare_1_reg_t RXWORD_RO_SPARE_1; /*< Address offset = 0xfec */
} pma_rxword_msg_t;     // size: 0x0d10

// AddressSpace struct pointer
//
#define DLNK_JESD0_PHY_PMA0_RXWORD_GLOBAL  ((pma_rxword_msg_t*) DLNK_JESD0_PHY_PMA0_RXWORD_GLOBAL_BASE)
#define DLNK_JESD0_PHY_PMA0_RXWORD_Q0      ((pma_rxword_msg_t*) DLNK_JESD0_PHY_PMA0_RXWORD_Q0_BASE)
#define DLNK_JESD0_PHY_PMA0_RXWORD_Q1      ((pma_rxword_msg_t*) DLNK_JESD0_PHY_PMA0_RXWORD_Q1_BASE)
#define DLNK_JESD0_PHY_PMA0_RXWORD_Q2      ((pma_rxword_msg_t*) DLNK_JESD0_PHY_PMA0_RXWORD_Q2_BASE)
#define DLNK_JESD0_PHY_PMA0_RXWORD_Q3      ((pma_rxword_msg_t*) DLNK_JESD0_PHY_PMA0_RXWORD_Q3_BASE)
#define DLNK_JESD1_PHY_PMA0_RXWORD_GLOBAL  ((pma_rxword_msg_t*) DLNK_JESD1_PHY_PMA0_RXWORD_GLOBAL_BASE)
#define DLNK_JESD1_PHY_PMA0_RXWORD_Q0      ((pma_rxword_msg_t*) DLNK_JESD1_PHY_PMA0_RXWORD_Q0_BASE)
#define DLNK_JESD1_PHY_PMA0_RXWORD_Q1      ((pma_rxword_msg_t*) DLNK_JESD1_PHY_PMA0_RXWORD_Q1_BASE)
#define DLNK_JESD1_PHY_PMA0_RXWORD_Q2      ((pma_rxword_msg_t*) DLNK_JESD1_PHY_PMA0_RXWORD_Q2_BASE)
#define DLNK_JESD1_PHY_PMA0_RXWORD_Q3      ((pma_rxword_msg_t*) DLNK_JESD1_PHY_PMA0_RXWORD_Q3_BASE)
#define DLNK_JESD2_PHY_PMA0_RXWORD_GLOBAL  ((pma_rxword_msg_t*) DLNK_JESD2_PHY_PMA0_RXWORD_GLOBAL_BASE)
#define DLNK_JESD2_PHY_PMA0_RXWORD_Q0      ((pma_rxword_msg_t*) DLNK_JESD2_PHY_PMA0_RXWORD_Q0_BASE)
#define DLNK_JESD2_PHY_PMA0_RXWORD_Q1      ((pma_rxword_msg_t*) DLNK_JESD2_PHY_PMA0_RXWORD_Q1_BASE)
#define DLNK_JESD2_PHY_PMA0_RXWORD_Q2      ((pma_rxword_msg_t*) DLNK_JESD2_PHY_PMA0_RXWORD_Q2_BASE)
#define DLNK_JESD2_PHY_PMA0_RXWORD_Q3      ((pma_rxword_msg_t*) DLNK_JESD2_PHY_PMA0_RXWORD_Q3_BASE)
#define DLNK_JESD3_PHY_PMA0_RXWORD_GLOBAL  ((pma_rxword_msg_t*) DLNK_JESD3_PHY_PMA0_RXWORD_GLOBAL_BASE)
#define DLNK_JESD3_PHY_PMA0_RXWORD_Q0      ((pma_rxword_msg_t*) DLNK_JESD3_PHY_PMA0_RXWORD_Q0_BASE)
#define DLNK_JESD3_PHY_PMA0_RXWORD_Q1      ((pma_rxword_msg_t*) DLNK_JESD3_PHY_PMA0_RXWORD_Q1_BASE)
#define DLNK_JESD3_PHY_PMA0_RXWORD_Q2      ((pma_rxword_msg_t*) DLNK_JESD3_PHY_PMA0_RXWORD_Q2_BASE)
#define DLNK_JESD3_PHY_PMA0_RXWORD_Q3      ((pma_rxword_msg_t*) DLNK_JESD3_PHY_PMA0_RXWORD_Q3_BASE)

// ******************************************* /Address Space

#endif      // _PMA_RXWORD_MSG_H_

