#ifndef _PMA_TXPLLCFGLOADER_MSG_H_
#define _PMA_TXPLLCFGLOADER_MSG_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define DLNK_JESD0_PHY_PMA0_TXPLLCFGLOADER_GLOBAL_BASE  ( 0x06025800 )
#define DLNK_JESD0_PHY_PMA0_TXPLLCFGLOADER_Q0_BASE      ( 0x06029800 )
#define DLNK_JESD0_PHY_PMA0_TXPLLCFGLOADER_Q1_BASE      ( 0x0602d800 )
#define DLNK_JESD0_PHY_PMA0_TXPLLCFGLOADER_Q2_BASE      ( 0x06031800 )
#define DLNK_JESD0_PHY_PMA0_TXPLLCFGLOADER_Q3_BASE      ( 0x06035800 )
#define DLNK_JESD1_PHY_PMA0_TXPLLCFGLOADER_GLOBAL_BASE  ( 0x06825800 )
#define DLNK_JESD1_PHY_PMA0_TXPLLCFGLOADER_Q0_BASE      ( 0x06829800 )
#define DLNK_JESD1_PHY_PMA0_TXPLLCFGLOADER_Q1_BASE      ( 0x0682d800 )
#define DLNK_JESD1_PHY_PMA0_TXPLLCFGLOADER_Q2_BASE      ( 0x06831800 )
#define DLNK_JESD1_PHY_PMA0_TXPLLCFGLOADER_Q3_BASE      ( 0x06835800 )
#define DLNK_JESD2_PHY_PMA0_TXPLLCFGLOADER_GLOBAL_BASE  ( 0x07025800 )
#define DLNK_JESD2_PHY_PMA0_TXPLLCFGLOADER_Q0_BASE      ( 0x07029800 )
#define DLNK_JESD2_PHY_PMA0_TXPLLCFGLOADER_Q1_BASE      ( 0x0702d800 )
#define DLNK_JESD2_PHY_PMA0_TXPLLCFGLOADER_Q2_BASE      ( 0x07031800 )
#define DLNK_JESD2_PHY_PMA0_TXPLLCFGLOADER_Q3_BASE      ( 0x07035800 )
#define DLNK_JESD3_PHY_PMA0_TXPLLCFGLOADER_GLOBAL_BASE  ( 0x07825800 )
#define DLNK_JESD3_PHY_PMA0_TXPLLCFGLOADER_Q0_BASE      ( 0x07829800 )
#define DLNK_JESD3_PHY_PMA0_TXPLLCFGLOADER_Q1_BASE      ( 0x0782d800 )
#define DLNK_JESD3_PHY_PMA0_TXPLLCFGLOADER_Q2_BASE      ( 0x07831800 )
#define DLNK_JESD3_PHY_PMA0_TXPLLCFGLOADER_Q3_BASE      ( 0x07835800 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define PMA_TXPLLCFGLOADER_MSG_CFG_OFFSET ( 0x00000000U )
#define PMA_TXPLLCFGLOADER_MSG_STAT_OFFSET ( 0x00000004U )
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_AMODE_0_OFFSET ( 0x00000008U )
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_AMODE_1_OFFSET ( 0x0000000cU )
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_BMODE_0_OFFSET ( 0x00000010U )
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_BMODE_1_OFFSET ( 0x00000014U )
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_CMODE_0_OFFSET ( 0x00000018U )
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_CMODE_1_OFFSET ( 0x0000001cU )
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_DMODE_0_OFFSET ( 0x00000020U )
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_DMODE_1_OFFSET ( 0x00000024U )
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_EMODE_0_OFFSET ( 0x00000028U )
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_EMODE_1_OFFSET ( 0x0000002cU )
#define PMA_TXPLLCFGLOADER_MSG_DIV0_AMODE_OFFSET ( 0x000000a0U )
#define PMA_TXPLLCFGLOADER_MSG_DIV1_AMODE_OFFSET ( 0x000000a4U )
#define PMA_TXPLLCFGLOADER_MSG_ADL0_AMODE_OFFSET ( 0x000000a8U )
#define PMA_TXPLLCFGLOADER_MSG_ADL1_AMODE_OFFSET ( 0x000000acU )
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_AMODE_OFFSET ( 0x000000b0U )
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_AMODE_OFFSET ( 0x000000b4U )
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_OFFSET ( 0x000000b8U )
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_OFFSET ( 0x000000bcU )
#define PMA_TXPLLCFGLOADER_MSG_TDC2_AMODE_OFFSET ( 0x000000c0U )
#define PMA_TXPLLCFGLOADER_MSG_TDC3_AMODE_OFFSET ( 0x000000c4U )
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_OFFSET ( 0x000000c8U )
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_AMODE_OFFSET ( 0x000000ccU )
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_AMODE_OFFSET ( 0x000000d0U )
#define PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_AMODE_OFFSET ( 0x000000d4U )
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_AMODE_OFFSET ( 0x000000d8U )
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_AMODE_OFFSET ( 0x000000dcU )
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_AMODE_OFFSET ( 0x000000e0U )
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_AMODE_OFFSET ( 0x000000e4U )
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_AMODE_OFFSET ( 0x000000e8U )
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_AMODE_OFFSET ( 0x000000ecU )
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_OFFSET ( 0x000000f0U )
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_AMODE_OFFSET ( 0x000000f4U )
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_OFFSET ( 0x000000f8U )
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_AMODE_OFFSET ( 0x000000fcU )
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_AMODE_OFFSET ( 0x00000100U )
#define PMA_TXPLLCFGLOADER_MSG_DFX0_AMODE_OFFSET ( 0x00000104U )
#define PMA_TXPLLCFGLOADER_MSG_DFX1_AMODE_OFFSET ( 0x00000108U )
#define PMA_TXPLLCFGLOADER_MSG_LDO0_AMODE_OFFSET ( 0x0000010cU )
#define PMA_TXPLLCFGLOADER_MSG_LDO1_AMODE_OFFSET ( 0x00000110U )
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_AMODE_OFFSET ( 0x00000114U )
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_AMODE_OFFSET ( 0x00000118U )
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_OFFSET ( 0x0000011cU )
#define PMA_TXPLLCFGLOADER_MSG_SPARE0_AMODE_OFFSET ( 0x00000120U )
#define PMA_TXPLLCFGLOADER_MSG_SPARE1_AMODE_OFFSET ( 0x00000124U )
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_OFFSET ( 0x00000128U )
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_AMODE_OFFSET ( 0x0000012cU )
#define PMA_TXPLLCFGLOADER_MSG_TDC4_AMODE_OFFSET ( 0x00000130U )
#define PMA_TXPLLCFGLOADER_MSG_DIV0_BMODE_OFFSET ( 0x00000140U )
#define PMA_TXPLLCFGLOADER_MSG_DIV1_BMODE_OFFSET ( 0x00000144U )
#define PMA_TXPLLCFGLOADER_MSG_ADL0_BMODE_OFFSET ( 0x00000148U )
#define PMA_TXPLLCFGLOADER_MSG_ADL1_BMODE_OFFSET ( 0x0000014cU )
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_BMODE_OFFSET ( 0x00000150U )
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_BMODE_OFFSET ( 0x00000154U )
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_OFFSET ( 0x00000158U )
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_OFFSET ( 0x0000015cU )
#define PMA_TXPLLCFGLOADER_MSG_TDC2_BMODE_OFFSET ( 0x00000160U )
#define PMA_TXPLLCFGLOADER_MSG_TDC3_BMODE_OFFSET ( 0x00000164U )
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_OFFSET ( 0x00000168U )
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_BMODE_OFFSET ( 0x0000016cU )
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_BMODE_OFFSET ( 0x00000170U )
#define PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_BMODE_OFFSET ( 0x00000174U )
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_BMODE_OFFSET ( 0x00000178U )
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_BMODE_OFFSET ( 0x0000017cU )
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_BMODE_OFFSET ( 0x00000180U )
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_BMODE_OFFSET ( 0x00000184U )
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_BMODE_OFFSET ( 0x00000188U )
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_BMODE_OFFSET ( 0x0000018cU )
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_OFFSET ( 0x00000190U )
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_BMODE_OFFSET ( 0x00000194U )
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_OFFSET ( 0x00000198U )
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_BMODE_OFFSET ( 0x0000019cU )
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_BMODE_OFFSET ( 0x000001a0U )
#define PMA_TXPLLCFGLOADER_MSG_DFX0_BMODE_OFFSET ( 0x000001a4U )
#define PMA_TXPLLCFGLOADER_MSG_DFX1_BMODE_OFFSET ( 0x000001a8U )
#define PMA_TXPLLCFGLOADER_MSG_LDO0_BMODE_OFFSET ( 0x000001acU )
#define PMA_TXPLLCFGLOADER_MSG_LDO1_BMODE_OFFSET ( 0x000001b0U )
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_BMODE_OFFSET ( 0x000001b4U )
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_BMODE_OFFSET ( 0x000001b8U )
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_OFFSET ( 0x000001bcU )
#define PMA_TXPLLCFGLOADER_MSG_SPARE0_BMODE_OFFSET ( 0x000001c0U )
#define PMA_TXPLLCFGLOADER_MSG_SPARE1_BMODE_OFFSET ( 0x000001c4U )
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_OFFSET ( 0x000001c8U )
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_BMODE_OFFSET ( 0x000001ccU )
#define PMA_TXPLLCFGLOADER_MSG_TDC4_BMODE_OFFSET ( 0x000001d0U )
#define PMA_TXPLLCFGLOADER_MSG_DIV0_CMODE_OFFSET ( 0x000001e0U )
#define PMA_TXPLLCFGLOADER_MSG_DIV1_CMODE_OFFSET ( 0x000001e4U )
#define PMA_TXPLLCFGLOADER_MSG_ADL0_CMODE_OFFSET ( 0x000001e8U )
#define PMA_TXPLLCFGLOADER_MSG_ADL1_CMODE_OFFSET ( 0x000001ecU )
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_CMODE_OFFSET ( 0x000001f0U )
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_CMODE_OFFSET ( 0x000001f4U )
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_OFFSET ( 0x000001f8U )
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_OFFSET ( 0x000001fcU )
#define PMA_TXPLLCFGLOADER_MSG_TDC2_CMODE_OFFSET ( 0x00000200U )
#define PMA_TXPLLCFGLOADER_MSG_TDC3_CMODE_OFFSET ( 0x00000204U )
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_OFFSET ( 0x00000208U )
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_CMODE_OFFSET ( 0x0000020cU )
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_CMODE_OFFSET ( 0x00000210U )
#define PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_CMODE_OFFSET ( 0x00000214U )
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_CMODE_OFFSET ( 0x00000218U )
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_CMODE_OFFSET ( 0x0000021cU )
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_CMODE_OFFSET ( 0x00000220U )
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_CMODE_OFFSET ( 0x00000224U )
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_CMODE_OFFSET ( 0x00000228U )
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_CMODE_OFFSET ( 0x0000022cU )
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_OFFSET ( 0x00000230U )
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_CMODE_OFFSET ( 0x00000234U )
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_OFFSET ( 0x00000238U )
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_CMODE_OFFSET ( 0x0000023cU )
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_CMODE_OFFSET ( 0x00000240U )
#define PMA_TXPLLCFGLOADER_MSG_DFX0_CMODE_OFFSET ( 0x00000244U )
#define PMA_TXPLLCFGLOADER_MSG_DFX1_CMODE_OFFSET ( 0x00000248U )
#define PMA_TXPLLCFGLOADER_MSG_LDO0_CMODE_OFFSET ( 0x0000024cU )
#define PMA_TXPLLCFGLOADER_MSG_LDO1_CMODE_OFFSET ( 0x00000250U )
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_CMODE_OFFSET ( 0x00000254U )
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_CMODE_OFFSET ( 0x00000258U )
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_OFFSET ( 0x0000025cU )
#define PMA_TXPLLCFGLOADER_MSG_SPARE0_CMODE_OFFSET ( 0x00000260U )
#define PMA_TXPLLCFGLOADER_MSG_SPARE1_CMODE_OFFSET ( 0x00000264U )
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_OFFSET ( 0x00000268U )
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_CMODE_OFFSET ( 0x0000026cU )
#define PMA_TXPLLCFGLOADER_MSG_TDC4_CMODE_OFFSET ( 0x00000270U )
#define PMA_TXPLLCFGLOADER_MSG_DIV0_DMODE_OFFSET ( 0x00000280U )
#define PMA_TXPLLCFGLOADER_MSG_DIV1_DMODE_OFFSET ( 0x00000284U )
#define PMA_TXPLLCFGLOADER_MSG_ADL0_DMODE_OFFSET ( 0x00000288U )
#define PMA_TXPLLCFGLOADER_MSG_ADL1_DMODE_OFFSET ( 0x0000028cU )
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_DMODE_OFFSET ( 0x00000290U )
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_DMODE_OFFSET ( 0x00000294U )
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_OFFSET ( 0x00000298U )
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_OFFSET ( 0x0000029cU )
#define PMA_TXPLLCFGLOADER_MSG_TDC2_DMODE_OFFSET ( 0x000002a0U )
#define PMA_TXPLLCFGLOADER_MSG_TDC3_DMODE_OFFSET ( 0x000002a4U )
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_OFFSET ( 0x000002a8U )
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_DMODE_OFFSET ( 0x000002acU )
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_DMODE_OFFSET ( 0x000002b0U )
#define PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_DMODE_OFFSET ( 0x000002b4U )
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_DMODE_OFFSET ( 0x000002b8U )
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_DMODE_OFFSET ( 0x000002bcU )
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_DMODE_OFFSET ( 0x000002c0U )
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_DMODE_OFFSET ( 0x000002c4U )
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_DMODE_OFFSET ( 0x000002c8U )
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_DMODE_OFFSET ( 0x000002ccU )
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_OFFSET ( 0x000002d0U )
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_DMODE_OFFSET ( 0x000002d4U )
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_OFFSET ( 0x000002d8U )
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_DMODE_OFFSET ( 0x000002dcU )
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_DMODE_OFFSET ( 0x000002e0U )
#define PMA_TXPLLCFGLOADER_MSG_DFX0_DMODE_OFFSET ( 0x000002e4U )
#define PMA_TXPLLCFGLOADER_MSG_DFX1_DMODE_OFFSET ( 0x000002e8U )
#define PMA_TXPLLCFGLOADER_MSG_LDO0_DMODE_OFFSET ( 0x000002ecU )
#define PMA_TXPLLCFGLOADER_MSG_LDO1_DMODE_OFFSET ( 0x000002f0U )
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_DMODE_OFFSET ( 0x000002f4U )
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_DMODE_OFFSET ( 0x000002f8U )
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_OFFSET ( 0x000002fcU )
#define PMA_TXPLLCFGLOADER_MSG_SPARE0_DMODE_OFFSET ( 0x00000300U )
#define PMA_TXPLLCFGLOADER_MSG_SPARE1_DMODE_OFFSET ( 0x00000304U )
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_OFFSET ( 0x00000308U )
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_DMODE_OFFSET ( 0x0000030cU )
#define PMA_TXPLLCFGLOADER_MSG_TDC4_DMODE_OFFSET ( 0x00000310U )
#define PMA_TXPLLCFGLOADER_MSG_DIV0_EMODE_OFFSET ( 0x00000320U )
#define PMA_TXPLLCFGLOADER_MSG_DIV1_EMODE_OFFSET ( 0x00000324U )
#define PMA_TXPLLCFGLOADER_MSG_ADL0_EMODE_OFFSET ( 0x00000328U )
#define PMA_TXPLLCFGLOADER_MSG_ADL1_EMODE_OFFSET ( 0x0000032cU )
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_EMODE_OFFSET ( 0x00000330U )
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_EMODE_OFFSET ( 0x00000334U )
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_OFFSET ( 0x00000338U )
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_OFFSET ( 0x0000033cU )
#define PMA_TXPLLCFGLOADER_MSG_TDC2_EMODE_OFFSET ( 0x00000340U )
#define PMA_TXPLLCFGLOADER_MSG_TDC3_EMODE_OFFSET ( 0x00000344U )
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_OFFSET ( 0x00000348U )
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_EMODE_OFFSET ( 0x0000034cU )
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_EMODE_OFFSET ( 0x00000350U )
#define PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_EMODE_OFFSET ( 0x00000354U )
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_EMODE_OFFSET ( 0x00000358U )
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_EMODE_OFFSET ( 0x0000035cU )
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_EMODE_OFFSET ( 0x00000360U )
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_EMODE_OFFSET ( 0x00000364U )
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_EMODE_OFFSET ( 0x00000368U )
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_EMODE_OFFSET ( 0x0000036cU )
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_OFFSET ( 0x00000370U )
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_EMODE_OFFSET ( 0x00000374U )
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_OFFSET ( 0x00000378U )
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_EMODE_OFFSET ( 0x0000037cU )
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_EMODE_OFFSET ( 0x00000380U )
#define PMA_TXPLLCFGLOADER_MSG_DFX0_EMODE_OFFSET ( 0x00000384U )
#define PMA_TXPLLCFGLOADER_MSG_DFX1_EMODE_OFFSET ( 0x00000388U )
#define PMA_TXPLLCFGLOADER_MSG_LDO0_EMODE_OFFSET ( 0x0000038cU )
#define PMA_TXPLLCFGLOADER_MSG_LDO1_EMODE_OFFSET ( 0x00000390U )
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_EMODE_OFFSET ( 0x00000394U )
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_EMODE_OFFSET ( 0x00000398U )
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_OFFSET ( 0x0000039cU )
#define PMA_TXPLLCFGLOADER_MSG_SPARE0_EMODE_OFFSET ( 0x000003a0U )
#define PMA_TXPLLCFGLOADER_MSG_SPARE1_EMODE_OFFSET ( 0x000003a4U )
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_OFFSET ( 0x000003a8U )
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_EMODE_OFFSET ( 0x000003acU )
#define PMA_TXPLLCFGLOADER_MSG_TDC4_EMODE_OFFSET ( 0x000003b0U )
#define PMA_TXPLLCFGLOADER_MSG_RW_SPARE_0_OFFSET ( 0x000003e8U )
#define PMA_TXPLLCFGLOADER_MSG_RW_SPARE_1_OFFSET ( 0x000003ecU )
#define PMA_TXPLLCFGLOADER_MSG_RW_SPARE_2_OFFSET ( 0x000003f0U )
#define PMA_TXPLLCFGLOADER_MSG_RW_SPARE_3_OFFSET ( 0x000003f4U )
#define PMA_TXPLLCFGLOADER_MSG_RO_SPARE_0_OFFSET ( 0x000003f8U )
#define PMA_TXPLLCFGLOADER_MSG_RO_SPARE_1_OFFSET ( 0x000003fcU )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define PMA_TXPLLCFGLOADER_MSG_CFG_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_CFG_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_STAT_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_STAT_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_AMODE_0_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_DWMASK_AMODE_0_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_AMODE_1_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_DWMASK_AMODE_1_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_BMODE_0_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_DWMASK_BMODE_0_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_BMODE_1_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_DWMASK_BMODE_1_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_CMODE_0_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_DWMASK_CMODE_0_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_CMODE_1_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_DWMASK_CMODE_1_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_DMODE_0_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_DWMASK_DMODE_0_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_DMODE_1_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_DWMASK_DMODE_1_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_EMODE_0_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_DWMASK_EMODE_0_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_EMODE_1_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_DWMASK_EMODE_1_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_DIV0_AMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_DIV0_AMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_DIV1_AMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_DIV1_AMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_ADL0_AMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_ADL0_AMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_ADL1_AMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_ADL1_AMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_AMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_AMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_AMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_AMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_TDC2_AMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_TDC2_AMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_TDC3_AMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_TDC3_AMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_AMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_DFX_DCO_AMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_AMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_AMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_AMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_AMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_AMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_AMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_AMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_AMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_AMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_AMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_AMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_CALIB0_AMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_AMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_CALIB1_AMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_AMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_CALIB2_AMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_AMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_AMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_AMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_AMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_AMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_AMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_DFX0_AMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_DFX0_AMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_DFX1_AMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_DFX1_AMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_LDO0_AMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_LDO0_AMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_LDO1_AMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_LDO1_AMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_AMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_KVCC0_AMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_AMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_KVCC1_AMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_SPARE0_AMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_SPARE0_AMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_SPARE1_AMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_SPARE1_AMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_AMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_AMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_TDC4_AMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_TDC4_AMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_DIV0_BMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_DIV0_BMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_DIV1_BMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_DIV1_BMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_ADL0_BMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_ADL0_BMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_ADL1_BMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_ADL1_BMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_BMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_BMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_BMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_BMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_TDC2_BMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_TDC2_BMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_TDC3_BMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_TDC3_BMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_BMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_DFX_DCO_BMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_BMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_BMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_BMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_BMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_BMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_BMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_BMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_BMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_BMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_BMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_BMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_CALIB0_BMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_BMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_CALIB1_BMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_BMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_CALIB2_BMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_BMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_BMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_BMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_BMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_BMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_BMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_DFX0_BMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_DFX0_BMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_DFX1_BMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_DFX1_BMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_LDO0_BMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_LDO0_BMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_LDO1_BMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_LDO1_BMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_BMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_KVCC0_BMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_BMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_KVCC1_BMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_SPARE0_BMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_SPARE0_BMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_SPARE1_BMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_SPARE1_BMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_BMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_BMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_TDC4_BMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_TDC4_BMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_DIV0_CMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_DIV0_CMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_DIV1_CMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_DIV1_CMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_ADL0_CMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_ADL0_CMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_ADL1_CMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_ADL1_CMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_CMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_CMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_CMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_CMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_TDC2_CMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_TDC2_CMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_TDC3_CMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_TDC3_CMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_CMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_DFX_DCO_CMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_CMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_CMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_CMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_CMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_CMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_CMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_CMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_CMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_CMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_CMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_CMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_CALIB0_CMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_CMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_CALIB1_CMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_CMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_CALIB2_CMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_CMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_CMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_CMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_CMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_CMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_CMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_DFX0_CMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_DFX0_CMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_DFX1_CMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_DFX1_CMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_LDO0_CMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_LDO0_CMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_LDO1_CMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_LDO1_CMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_CMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_KVCC0_CMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_CMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_KVCC1_CMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_SPARE0_CMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_SPARE0_CMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_SPARE1_CMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_SPARE1_CMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_CMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_CMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_TDC4_CMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_TDC4_CMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_DIV0_DMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_DIV0_DMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_DIV1_DMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_DIV1_DMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_ADL0_DMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_ADL0_DMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_ADL1_DMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_ADL1_DMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_DMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_DMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_DMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_DMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_TDC2_DMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_TDC2_DMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_TDC3_DMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_TDC3_DMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_DMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_DFX_DCO_DMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_DMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_DMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_DMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_DMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_DMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_DMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_DMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_DMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_DMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_DMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_DMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_CALIB0_DMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_DMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_CALIB1_DMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_DMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_CALIB2_DMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_DMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_DMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_DMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_DMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_DMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_DMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_DFX0_DMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_DFX0_DMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_DFX1_DMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_DFX1_DMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_LDO0_DMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_LDO0_DMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_LDO1_DMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_LDO1_DMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_DMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_KVCC0_DMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_DMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_KVCC1_DMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_SPARE0_DMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_SPARE0_DMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_SPARE1_DMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_SPARE1_DMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_DMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_DMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_TDC4_DMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_TDC4_DMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_DIV0_EMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_DIV0_EMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_DIV1_EMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_DIV1_EMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_ADL0_EMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_ADL0_EMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_ADL1_EMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_ADL1_EMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_EMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_EMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_EMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_EMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_TDC2_EMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_TDC2_EMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_TDC3_EMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_TDC3_EMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_EMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_DFX_DCO_EMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_EMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_EMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_EMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_EMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_EMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_EMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_EMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_EMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_EMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_EMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_EMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_CALIB0_EMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_EMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_CALIB1_EMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_EMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_CALIB2_EMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_EMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_EMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_EMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_EMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_EMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_EMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_DFX0_EMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_DFX0_EMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_DFX1_EMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_DFX1_EMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_LDO0_EMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_LDO0_EMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_LDO1_EMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_LDO1_EMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_EMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_KVCC0_EMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_EMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_KVCC1_EMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_SPARE0_EMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_SPARE0_EMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_SPARE1_EMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_SPARE1_EMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_EMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_EMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_TDC4_EMODE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_TDC4_EMODE_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_RW_SPARE_0_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_RW_SPARE_0_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_RW_SPARE_1_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_RW_SPARE_1_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_RW_SPARE_2_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_RW_SPARE_2_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_RW_SPARE_3_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_RW_SPARE_3_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_RO_SPARE_0_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_RO_SPARE_0_OFFSET ) ))
#define PMA_TXPLLCFGLOADER_MSG_RO_SPARE_1_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLLCFGLOADER_MSG_RO_SPARE_1_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_CFG register description at address offset 0x0
  *
  * Register default value:        0x00000030
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_cfg
  * PLL Config Loader config
  */

typedef union {
  struct {
    uint32_t PLLCFGLOADER_DONE_PWR2_DELAY : 3;
    ///< Delay to assert PLL enable when finish PLL register loading.  Delay
    ///< time = power of 2
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t PLLCFGLOADER_APB_WDT_DISABLE : 1;
    ///< Disable ABP watch dog timer
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t PLLCFGLOADER_APB_WDT_PERIOD_SEL : 2;
    ///< APB watch dog timer period.  0 = 79 clk; 1 = 143 clk; 207 clk; 255
    ///< clk
    ///< AccessType="RW" BitOffset="4" ResetValue="0x3"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_cfg_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_CFG_DEFAULT (0x00000030U)
#define PMA_TXPLLCFGLOADER_MSG_CFG_RD_MASK (0x0000003fU)
#define PMA_TXPLLCFGLOADER_MSG_CFG_WR_MASK (0x0000003fU)


///< Delay to assert PLL enable when finish PLL register loading.  Delay
///< time = power of 2
#define PMA_TXPLLCFGLOADER_MSG_CFG_PLLCFGLOADER_DONE_PWR2_DELAY_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_CFG_PLLCFGLOADER_DONE_PWR2_DELAY_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_CFG_PLLCFGLOADER_DONE_PWR2_DELAY_BF_MSK (0x00000007)
#define PMA_TXPLLCFGLOADER_MSG_CFG_PLLCFGLOADER_DONE_PWR2_DELAY_BF_DEF (0x00000000)

///< Disable ABP watch dog timer
#define PMA_TXPLLCFGLOADER_MSG_CFG_PLLCFGLOADER_APB_WDT_DIS_BF_OFF ( 3)
#define PMA_TXPLLCFGLOADER_MSG_CFG_PLLCFGLOADER_APB_WDT_DIS_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_CFG_PLLCFGLOADER_APB_WDT_DIS_BF_MSK (0x00000008)
#define PMA_TXPLLCFGLOADER_MSG_CFG_PLLCFGLOADER_APB_WDT_DIS_BF_DEF (0x00000000)

///< APB watch dog timer period.  0 = 79 clk; 1 = 143 clk; 207 clk; 255
///< clk
#define PMA_TXPLLCFGLOADER_MSG_CFG_PLLCFGLOADER_APB_WDT_PERIOD_SEL_BF_OFF ( 4)
#define PMA_TXPLLCFGLOADER_MSG_CFG_PLLCFGLOADER_APB_WDT_PERIOD_SEL_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_CFG_PLLCFGLOADER_APB_WDT_PERIOD_SEL_BF_MSK (0x00000030)
#define PMA_TXPLLCFGLOADER_MSG_CFG_PLLCFGLOADER_APB_WDT_PERIOD_SEL_BF_DEF (0x00000030)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_STATUS register description at address offset 0x4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_status
  * PLL Config Loader status
  */

typedef union {
  struct {
    uint32_t PLLCFGLOADER_BUSY : 1;
    ///< PLL Config Loader FSM busy
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_stat_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_STAT_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_STAT_RD_MASK (0x00000001U)
#define PMA_TXPLLCFGLOADER_MSG_STAT_WR_MASK (0x00000000U)


///< PLL Config Loader FSM busy
#define PMA_TXPLLCFGLOADER_MSG_STAT_PLLCFGLOADER_BUSY_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_STAT_PLLCFGLOADER_BUSY_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_STAT_PLLCFGLOADER_BUSY_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_STAT_PLLCFGLOADER_BUSY_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_DWMASK_AMODE_0 register description at address offset 0x8
  *
  * Register default value:        0x00000001
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_dwmask_amode_0
  * Write Mask - One bit per register
  */

typedef union {
  struct {
    uint32_t PLLCFGLOADER_PLL_APB_DWMASK_AMODE_0 : 32;
    ///< PLL config loader - PLL address mask for Mode A to allow corresponding
    ///< PLL address content loaded into PLL
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_dwmask_amode_0_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_DWMASK_AMODE_0_DEFAULT (0x00000001U)
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_AMODE_0_RD_MASK (0xffffffffU)
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_AMODE_0_WR_MASK (0xffffffffU)


///< PLL config loader - PLL address mask for Mode A to allow corresponding
///< PLL address content loaded into PLL
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_AMODE_0_PLLCFGLOADER_PLL_APB_DWMASK_AMODE_0_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_AMODE_0_PLLCFGLOADER_PLL_APB_DWMASK_AMODE_0_BF_WID (32)
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_AMODE_0_PLLCFGLOADER_PLL_APB_DWMASK_AMODE_0_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_AMODE_0_PLLCFGLOADER_PLL_APB_DWMASK_AMODE_0_BF_DEF (0x00000001)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_DWMASK_AMODE_1 register description at address offset 0xc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_dwmask_amode_1
  * Write Mask - One bit per register
  */

typedef union {
  struct {
    uint32_t PLLCFGLOADER_PLL_APB_DWMASK_AMODE_1 : 5;
    ///< PLL config loader - PLL address mask for Mode A to allow corresponding
    ///< PLL address content loaded into PLL
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_dwmask_amode_1_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_DWMASK_AMODE_1_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_AMODE_1_RD_MASK (0x0000001fU)
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_AMODE_1_WR_MASK (0x0000001fU)


///< PLL config loader - PLL address mask for Mode A to allow corresponding
///< PLL address content loaded into PLL
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_AMODE_1_PLLCFGLOADER_PLL_APB_DWMASK_AMODE_1_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_AMODE_1_PLLCFGLOADER_PLL_APB_DWMASK_AMODE_1_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_AMODE_1_PLLCFGLOADER_PLL_APB_DWMASK_AMODE_1_BF_MSK (0x0000001F)
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_AMODE_1_PLLCFGLOADER_PLL_APB_DWMASK_AMODE_1_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_DWMASK_BMODE_0 register description at address offset 0x10
  *
  * Register default value:        0x00000001
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_dwmask_bmode_0
  * Write Mask - One bit per register
  */

typedef union {
  struct {
    uint32_t PLLCFGLOADER_PLL_APB_DWMASK_BMODE_0 : 32;
    ///< PLL config loader - PLL address mask for Mode B to allow corresponding
    ///< PLL address content loaded into PLL
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_dwmask_bmode_0_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_DWMASK_BMODE_0_DEFAULT (0x00000001U)
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_BMODE_0_RD_MASK (0xffffffffU)
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_BMODE_0_WR_MASK (0xffffffffU)


///< PLL config loader - PLL address mask for Mode B to allow corresponding
///< PLL address content loaded into PLL
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_BMODE_0_PLLCFGLOADER_PLL_APB_DWMASK_BMODE_0_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_BMODE_0_PLLCFGLOADER_PLL_APB_DWMASK_BMODE_0_BF_WID (32)
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_BMODE_0_PLLCFGLOADER_PLL_APB_DWMASK_BMODE_0_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_BMODE_0_PLLCFGLOADER_PLL_APB_DWMASK_BMODE_0_BF_DEF (0x00000001)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_DWMASK_BMODE_1 register description at address offset 0x14
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_dwmask_bmode_1
  * Write Mask - One bit per register
  */

typedef union {
  struct {
    uint32_t PLLCFGLOADER_PLL_APB_DWMASK_BMODE_1 : 5;
    ///< PLL config loader - PLL address mask for Mode B to allow corresponding
    ///< PLL address content loaded into PLL
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_dwmask_bmode_1_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_DWMASK_BMODE_1_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_BMODE_1_RD_MASK (0x0000001fU)
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_BMODE_1_WR_MASK (0x0000001fU)


///< PLL config loader - PLL address mask for Mode B to allow corresponding
///< PLL address content loaded into PLL
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_BMODE_1_PLLCFGLOADER_PLL_APB_DWMASK_BMODE_1_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_BMODE_1_PLLCFGLOADER_PLL_APB_DWMASK_BMODE_1_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_BMODE_1_PLLCFGLOADER_PLL_APB_DWMASK_BMODE_1_BF_MSK (0x0000001F)
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_BMODE_1_PLLCFGLOADER_PLL_APB_DWMASK_BMODE_1_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_DWMASK_CMODE_0 register description at address offset 0x18
  *
  * Register default value:        0x00000001
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_dwmask_cmode_0
  * Write Mask - One bit per register
  */

typedef union {
  struct {
    uint32_t PLLCFGLOADER_PLL_APB_DWMASK_CMODE_0 : 32;
    ///< PLL config loader - PLL address mask for Mode C to allow corresponding
    ///< PLL address content loaded into PLL
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_dwmask_cmode_0_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_DWMASK_CMODE_0_DEFAULT (0x00000001U)
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_CMODE_0_RD_MASK (0xffffffffU)
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_CMODE_0_WR_MASK (0xffffffffU)


///< PLL config loader - PLL address mask for Mode C to allow corresponding
///< PLL address content loaded into PLL
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_CMODE_0_PLLCFGLOADER_PLL_APB_DWMASK_CMODE_0_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_CMODE_0_PLLCFGLOADER_PLL_APB_DWMASK_CMODE_0_BF_WID (32)
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_CMODE_0_PLLCFGLOADER_PLL_APB_DWMASK_CMODE_0_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_CMODE_0_PLLCFGLOADER_PLL_APB_DWMASK_CMODE_0_BF_DEF (0x00000001)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_DWMASK_CMODE_1 register description at address offset 0x1c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_dwmask_cmode_1
  * Write Mask - One bit per register
  */

typedef union {
  struct {
    uint32_t PLLCFGLOADER_PLL_APB_DWMASK_CMODE_1 : 5;
    ///< PLL config loader - PLL address mask for Mode C to allow corresponding
    ///< PLL address content loaded into PLL
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_dwmask_cmode_1_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_DWMASK_CMODE_1_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_CMODE_1_RD_MASK (0x0000001fU)
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_CMODE_1_WR_MASK (0x0000001fU)


///< PLL config loader - PLL address mask for Mode C to allow corresponding
///< PLL address content loaded into PLL
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_CMODE_1_PLLCFGLOADER_PLL_APB_DWMASK_CMODE_1_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_CMODE_1_PLLCFGLOADER_PLL_APB_DWMASK_CMODE_1_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_CMODE_1_PLLCFGLOADER_PLL_APB_DWMASK_CMODE_1_BF_MSK (0x0000001F)
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_CMODE_1_PLLCFGLOADER_PLL_APB_DWMASK_CMODE_1_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_DWMASK_DMODE_0 register description at address offset 0x20
  *
  * Register default value:        0x00000001
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_dwmask_dmode_0
  * Write Mask - One bit per register
  */

typedef union {
  struct {
    uint32_t PLLCFGLOADER_PLL_APB_DWMASK_DMODE_0 : 32;
    ///< PLL config loader - PLL address mask for Mode D to allow corresponding
    ///< PLL address content loaded into PLL
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_dwmask_dmode_0_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_DWMASK_DMODE_0_DEFAULT (0x00000001U)
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_DMODE_0_RD_MASK (0xffffffffU)
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_DMODE_0_WR_MASK (0xffffffffU)


///< PLL config loader - PLL address mask for Mode D to allow corresponding
///< PLL address content loaded into PLL
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_DMODE_0_PLLCFGLOADER_PLL_APB_DWMASK_DMODE_0_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_DMODE_0_PLLCFGLOADER_PLL_APB_DWMASK_DMODE_0_BF_WID (32)
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_DMODE_0_PLLCFGLOADER_PLL_APB_DWMASK_DMODE_0_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_DMODE_0_PLLCFGLOADER_PLL_APB_DWMASK_DMODE_0_BF_DEF (0x00000001)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_DWMASK_DMODE_1 register description at address offset 0x24
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_dwmask_dmode_1
  * Write Mask - One bit per register
  */

typedef union {
  struct {
    uint32_t PLLCFGLOADER_PLL_APB_DWMASK_DMODE_1 : 5;
    ///< PLL config loader - PLL address mask for Mode D to allow corresponding
    ///< PLL address content loaded into PLL
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_dwmask_dmode_1_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_DWMASK_DMODE_1_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_DMODE_1_RD_MASK (0x0000001fU)
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_DMODE_1_WR_MASK (0x0000001fU)


///< PLL config loader - PLL address mask for Mode D to allow corresponding
///< PLL address content loaded into PLL
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_DMODE_1_PLLCFGLOADER_PLL_APB_DWMASK_DMODE_1_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_DMODE_1_PLLCFGLOADER_PLL_APB_DWMASK_DMODE_1_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_DMODE_1_PLLCFGLOADER_PLL_APB_DWMASK_DMODE_1_BF_MSK (0x0000001F)
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_DMODE_1_PLLCFGLOADER_PLL_APB_DWMASK_DMODE_1_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_DWMASK_EMODE_0 register description at address offset 0x28
  *
  * Register default value:        0x00000001
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_dwmask_emode_0
  * Write Mask - One bit per register
  */

typedef union {
  struct {
    uint32_t PLLCFGLOADER_PLL_APB_DWMASK_EMODE_0 : 32;
    ///< PLL config loader - PLL address mask for Mode E to allow corresponding
    ///< PLL address content loaded into PLL
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_dwmask_emode_0_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_DWMASK_EMODE_0_DEFAULT (0x00000001U)
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_EMODE_0_RD_MASK (0xffffffffU)
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_EMODE_0_WR_MASK (0xffffffffU)


///< PLL config loader - PLL address mask for Mode E to allow corresponding
///< PLL address content loaded into PLL
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_EMODE_0_PLLCFGLOADER_PLL_APB_DWMASK_EMODE_0_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_EMODE_0_PLLCFGLOADER_PLL_APB_DWMASK_EMODE_0_BF_WID (32)
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_EMODE_0_PLLCFGLOADER_PLL_APB_DWMASK_EMODE_0_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_EMODE_0_PLLCFGLOADER_PLL_APB_DWMASK_EMODE_0_BF_DEF (0x00000001)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_DWMASK_EMODE_1 register description at address offset 0x2c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_dwmask_emode_1
  * Write Mask - One bit per register
  */

typedef union {
  struct {
    uint32_t PLLCFGLOADER_PLL_APB_DWMASK_EMODE_1 : 5;
    ///< PLL config loader - PLL address mask for Mode E to allow corresponding
    ///< PLL address content loaded into PLL
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_dwmask_emode_1_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_DWMASK_EMODE_1_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_EMODE_1_RD_MASK (0x0000001fU)
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_EMODE_1_WR_MASK (0x0000001fU)


///< PLL config loader - PLL address mask for Mode E to allow corresponding
///< PLL address content loaded into PLL
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_EMODE_1_PLLCFGLOADER_PLL_APB_DWMASK_EMODE_1_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_EMODE_1_PLLCFGLOADER_PLL_APB_DWMASK_EMODE_1_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_EMODE_1_PLLCFGLOADER_PLL_APB_DWMASK_EMODE_1_BF_MSK (0x0000001F)
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_EMODE_1_PLLCFGLOADER_PLL_APB_DWMASK_EMODE_1_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_DIV0_AMODE register description at address offset 0xa0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_div0_amode
  * LCPLL_DIV0 Register
  */

typedef union {
  struct {
    uint32_t O_FBDIV_FRAC_AMODE : 32;
    ///< Feedback divider fractional ratio.                          Total
    ///< ratio is:                         If cfg_dcodiv2_to_fbdiv_bypass=1
    ///< : (integer+fractional/2^32)                         otherwise : (integer+fractional/2^32)
    ///< x 2
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_div0_amode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_DIV0_AMODE_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_DIV0_AMODE_RD_MASK (0xffffffffU)
#define PMA_TXPLLCFGLOADER_MSG_DIV0_AMODE_WR_MASK (0xffffffffU)


///< Feedback divider fractional ratio.                          Total
///< ratio is:                         If cfg_dcodiv2_to_fbdiv_bypass=1
///< : (integer+fractional/2^32)                         otherwise : (integer+fractional/2^32)
///< x 2
#define PMA_TXPLLCFGLOADER_MSG_DIV0_AMODE_O_FBDIV_FRAC_AMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_DIV0_AMODE_O_FBDIV_FRAC_AMODE_BF_WID (32)
#define PMA_TXPLLCFGLOADER_MSG_DIV0_AMODE_O_FBDIV_FRAC_AMODE_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLLCFGLOADER_MSG_DIV0_AMODE_O_FBDIV_FRAC_AMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_DIV1_AMODE register description at address offset 0xa4
  *
  * Register default value:        0x00003050
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_div1_amode
  * LCPLL_DIV1 Register
  */

typedef union {
  struct {
    uint32_t O_FBDIV_INTGR_AMODE : 10;
    ///< Feedback divider integer ratio                         Total ratio
    ///< is:                         If cfg_dcodiv2_to_fbdiv_bypass=1 : (integer+fractional/2^32)
    ///< otherwise : (integer+fractional/2^32) x 2
    ///< Default is 80 for main common PLL (refclk 156.25MHz and Fdco 12.5GHz)
    ///< AccessType="RW" BitOffset="0" ResetValue="0x50"
    uint32_t O_FRACNEN_H_AMODE : 1;
    ///< Enables fractional ratio.                         Set this bit to
    ///< 0 if fractional ratio is 0, else to 1.                         If
    ///< this bit is 1 while fractional is 0 then fbclk to refclk phase won&#39;t
    ///< be deterministic.
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t CFG_REFCLK_CNT_LIMIT_AMODE : 3;
    ///< Defines number of refclk cycles in frequency measurement during AFC
    ///< calibration.                         Number of cycles = 2^reg
    ///< For 156MHz clock and 12.5GHz DCO clock, HS counter (@Fdco/2) samples
    ///< 40 cycles per refclk (=fbdiv_intgr).                         DTR step
    ///< size is 20MHz, so to achieve accuracy of 5MHz, HS counter should reach
    ///< 12.5G/5M=2500.                         Therefore refclk cycles = 2500/40=62.5,
    ///< so 2^6 would be appropriate.
    ///< use the following formula for other frequencies (Frefclk after prediv):
    ///< cfg_refclk_cnt_limit = round(log2(2*Frefclk/5MHz))
    ///< AccessType="RW" BitOffset="11" ResetValue="0x6"
    uint32_t CFG_FRACN_SD_STEP_EN_AMODE : 1;
    ///< Injects an impulse into fracN SD accumulator.
    ///< This inject a step in the feed-forward offset and as a result would
    ///< create a step on the PLL phase.                         This feature
    ///< can be useful in case of coupling between PLLs that run at exact same
    ///< frequency (both at fracN)
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t CFG_FRACN_SD_STEP_AMODE : 6;
    ///< Sets magnitude of step in fracN SD accumulator, which is added to
    ///< the MSB of the SD bus.                         Each LSB here would
    ///< shift PLL phase by 2xTdco/2^6
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t CFG_LF_BAND_INUSE_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DIV1::cfg_lf_band_inuse
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t CFG_LF_BAND_SEL_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DIV1::cfg_lf_band_sel
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t  : 9;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_div1_amode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_DIV1_AMODE_DEFAULT (0x00003050U)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_AMODE_RD_MASK (0x007fffffU)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_AMODE_WR_MASK (0x007fffffU)


///< Feedback divider integer ratio                         Total ratio
///< is:                         If cfg_dcodiv2_to_fbdiv_bypass=1 : (integer+fractional/2^32)
///< otherwise : (integer+fractional/2^32) x 2
///< Default is 80 for main common PLL (refclk 156.25MHz and Fdco 12.5GHz)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_AMODE_O_FBDIV_INTGR_AMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_AMODE_O_FBDIV_INTGR_AMODE_BF_WID (10)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_AMODE_O_FBDIV_INTGR_AMODE_BF_MSK (0x000003FF)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_AMODE_O_FBDIV_INTGR_AMODE_BF_DEF (0x00000050)

///< Enables fractional ratio.                         Set this bit to
///< 0 if fractional ratio is 0, else to 1.                         If
///< this bit is 1 while fractional is 0 then fbclk to refclk phase won&#39;t
///< be deterministic.
#define PMA_TXPLLCFGLOADER_MSG_DIV1_AMODE_O_FRACNEN_H_AMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_AMODE_O_FRACNEN_H_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_AMODE_O_FRACNEN_H_AMODE_BF_MSK (0x00000400)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_AMODE_O_FRACNEN_H_AMODE_BF_DEF (0x00000000)

///< Defines number of refclk cycles in frequency measurement during AFC
///< calibration.                         Number of cycles = 2^reg
///< For 156MHz clock and 12.5GHz DCO clock, HS counter (@Fdco/2) samples
///< 40 cycles per refclk (=fbdiv_intgr).                         DTR step
///< size is 20MHz, so to achieve accuracy of 5MHz, HS counter should reach
///< 12.5G/5M=2500.                         Therefore refclk cycles = 2500/40=62.5,
///< so 2^6 would be appropriate.
///< use the following formula for other frequencies (Frefclk after prediv):
///< cfg_refclk_cnt_limit = round(log2(2*Frefclk/5MHz))
#define PMA_TXPLLCFGLOADER_MSG_DIV1_AMODE_CFG_REFCLK_CNT_LIMIT_AMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_AMODE_CFG_REFCLK_CNT_LIMIT_AMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_AMODE_CFG_REFCLK_CNT_LIMIT_AMODE_BF_MSK (0x00003800)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_AMODE_CFG_REFCLK_CNT_LIMIT_AMODE_BF_DEF (0x00003000)

///< Injects an impulse into fracN SD accumulator.
///< This inject a step in the feed-forward offset and as a result would
///< create a step on the PLL phase.                         This feature
///< can be useful in case of coupling between PLLs that run at exact same
///< frequency (both at fracN)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_AMODE_CFG_FRACN_SD_STEP_EN_AMODE_BF_OFF (14)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_AMODE_CFG_FRACN_SD_STEP_EN_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_AMODE_CFG_FRACN_SD_STEP_EN_AMODE_BF_MSK (0x00004000)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_AMODE_CFG_FRACN_SD_STEP_EN_AMODE_BF_DEF (0x00000000)

///< Sets magnitude of step in fracN SD accumulator, which is added to
///< the MSB of the SD bus.                         Each LSB here would
///< shift PLL phase by 2xTdco/2^6
#define PMA_TXPLLCFGLOADER_MSG_DIV1_AMODE_CFG_FRACN_SD_STEP_AMODE_BF_OFF (15)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_AMODE_CFG_FRACN_SD_STEP_AMODE_BF_WID ( 6)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_AMODE_CFG_FRACN_SD_STEP_AMODE_BF_MSK (0x001F8000)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_AMODE_CFG_FRACN_SD_STEP_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DIV1::cfg_lf_band_inuse
#define PMA_TXPLLCFGLOADER_MSG_DIV1_AMODE_CFG_LF_BAND_INUSE_AMODE_BF_OFF (21)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_AMODE_CFG_LF_BAND_INUSE_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_AMODE_CFG_LF_BAND_INUSE_AMODE_BF_MSK (0x00200000)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_AMODE_CFG_LF_BAND_INUSE_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DIV1::cfg_lf_band_sel
#define PMA_TXPLLCFGLOADER_MSG_DIV1_AMODE_CFG_LF_BAND_SEL_AMODE_BF_OFF (22)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_AMODE_CFG_LF_BAND_SEL_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_AMODE_CFG_LF_BAND_SEL_AMODE_BF_MSK (0x00400000)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_AMODE_CFG_LF_BAND_SEL_AMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_ADL0_AMODE register description at address offset 0xa8
  *
  * Register default value:        0x01800007
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_adl0_amode
  * SERDES_LANE_ANA_PLL::ADL0
  */

typedef union {
  struct {
    uint32_t CFG_ADL_ENABLE_AMODE : 1;
    ///< Enable adaptive delay line in fracN mode (only when o_fracnen_h=1).
    ///< While &#39;1&#39; it is also disable feed-forward cancellation.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t CFG_ADL_RANGE_AMODE : 3;
    ///< Configs ADL range to be used. The formula (prelay results, need to
    ///< be updated):                         round((138.75 - 1.2e12/Fdco)/13.266)
    ///< [Fdco in Hz]
    ///< AccessType="RW" BitOffset="1" ResetValue="0x3"
    uint32_t CFG_ADL_POS_OFFSET_AMODE : 8;
    ///< Positive ADL INL compensation.                         Each register
    ///< bit corresponding to each cap_ctrl bus bit.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t CFG_ADL_NEG_OFFSET_AMODE : 8;
    ///< Negative ADL INL compensation.                         Each register
    ///< bit corresponding to each cap_ctrl bus bit.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t CFG_ADL_ENABLE_OVR_EN_AMODE : 1;
    ///< adl bypass/enable force (see adl_enable_ovr_val).
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t CFG_ADL_ENABLE_OVR_VAL_AMODE : 1;
    ///< While adl_enable_ovr_en= 1.                         0 - force adl
    ///< bypass.                         1 - force adl enable.
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t CFG_ADL_CAP_CTRL_OVR_EN_AMODE : 1;
    ///< Override enable for cfg_adl_cap_ctrl_ovr_val[8:0]
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t CFG_ADL_CAP_CTRL_OVR_VAL_AMODE : 9;
    ///< Override value for cap_ctrl bus to ADL.
    ///< AccessType="RW" BitOffset="23" ResetValue="0x3"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_adl0_amode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_ADL0_AMODE_DEFAULT (0x01800007U)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_AMODE_RD_MASK (0xffffffffU)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_AMODE_WR_MASK (0xffffffffU)


///< Enable adaptive delay line in fracN mode (only when o_fracnen_h=1).
///< While &#39;1&#39; it is also disable feed-forward cancellation.
#define PMA_TXPLLCFGLOADER_MSG_ADL0_AMODE_CFG_ADL_EN_AMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_AMODE_CFG_ADL_EN_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_AMODE_CFG_ADL_EN_AMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_AMODE_CFG_ADL_EN_AMODE_BF_DEF (0x00000001)

///< Configs ADL range to be used. The formula (prelay results, need to
///< be updated):                         round((138.75 - 1.2e12/Fdco)/13.266)
///< [Fdco in Hz]
#define PMA_TXPLLCFGLOADER_MSG_ADL0_AMODE_CFG_ADL_RANGE_AMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_AMODE_CFG_ADL_RANGE_AMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_AMODE_CFG_ADL_RANGE_AMODE_BF_MSK (0x0000000E)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_AMODE_CFG_ADL_RANGE_AMODE_BF_DEF (0x00000006)

///< Positive ADL INL compensation.                         Each register
///< bit corresponding to each cap_ctrl bus bit.
#define PMA_TXPLLCFGLOADER_MSG_ADL0_AMODE_CFG_ADL_POS_OFFSET_AMODE_BF_OFF ( 4)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_AMODE_CFG_ADL_POS_OFFSET_AMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_AMODE_CFG_ADL_POS_OFFSET_AMODE_BF_MSK (0x00000FF0)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_AMODE_CFG_ADL_POS_OFFSET_AMODE_BF_DEF (0x00000000)

///< Negative ADL INL compensation.                         Each register
///< bit corresponding to each cap_ctrl bus bit.
#define PMA_TXPLLCFGLOADER_MSG_ADL0_AMODE_CFG_ADL_NEG_OFFSET_AMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_AMODE_CFG_ADL_NEG_OFFSET_AMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_AMODE_CFG_ADL_NEG_OFFSET_AMODE_BF_MSK (0x000FF000)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_AMODE_CFG_ADL_NEG_OFFSET_AMODE_BF_DEF (0x00000000)

///< adl bypass/enable force (see adl_enable_ovr_val).
#define PMA_TXPLLCFGLOADER_MSG_ADL0_AMODE_CFG_ADL_EN_OVR_EN_AMODE_BF_OFF (20)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_AMODE_CFG_ADL_EN_OVR_EN_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_AMODE_CFG_ADL_EN_OVR_EN_AMODE_BF_MSK (0x00100000)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_AMODE_CFG_ADL_EN_OVR_EN_AMODE_BF_DEF (0x00000000)

///< While adl_enable_ovr_en= 1.                         0 - force adl
///< bypass.                         1 - force adl enable.
#define PMA_TXPLLCFGLOADER_MSG_ADL0_AMODE_CFG_ADL_EN_OVR_VAL_AMODE_BF_OFF (21)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_AMODE_CFG_ADL_EN_OVR_VAL_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_AMODE_CFG_ADL_EN_OVR_VAL_AMODE_BF_MSK (0x00200000)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_AMODE_CFG_ADL_EN_OVR_VAL_AMODE_BF_DEF (0x00000000)

///< Override enable for cfg_adl_cap_ctrl_ovr_val[8:0]
#define PMA_TXPLLCFGLOADER_MSG_ADL0_AMODE_CFG_ADL_CAP_CTRL_OVR_EN_AMODE_BF_OFF (22)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_AMODE_CFG_ADL_CAP_CTRL_OVR_EN_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_AMODE_CFG_ADL_CAP_CTRL_OVR_EN_AMODE_BF_MSK (0x00400000)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_AMODE_CFG_ADL_CAP_CTRL_OVR_EN_AMODE_BF_DEF (0x00000000)

///< Override value for cap_ctrl bus to ADL.
#define PMA_TXPLLCFGLOADER_MSG_ADL0_AMODE_CFG_ADL_CAP_CTRL_OVR_VAL_AMODE_BF_OFF (23)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_AMODE_CFG_ADL_CAP_CTRL_OVR_VAL_AMODE_BF_WID ( 9)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_AMODE_CFG_ADL_CAP_CTRL_OVR_VAL_AMODE_BF_MSK (0xFF800000)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_AMODE_CFG_ADL_CAP_CTRL_OVR_VAL_AMODE_BF_DEF (0x01800000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_ADL1_AMODE register description at address offset 0xac
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_adl1_amode
  * SERDES_LANE_ANA_PLL::ADL1
  */

typedef union {
  struct {
    uint32_t CFG_ADL_MONITOR_OCT_SEL_AMODE : 8;
    ///< SERDES_LANE_ANA_PLL::ADL1::cfg_adl_monitor_oct_sel
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_TDC_STATUS_EN_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ADL1::cfg_tdc_status_en
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CFG_ADL_MONITOR_THR_AMODE : 5;
    ///< SERDES_LANE_ANA_PLL::ADL1::cfg_adl_monitor_thr
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t  : 18;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_adl1_amode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_ADL1_AMODE_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_AMODE_RD_MASK (0x00003fffU)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_AMODE_WR_MASK (0x00003fffU)


///< SERDES_LANE_ANA_PLL::ADL1::cfg_adl_monitor_oct_sel
#define PMA_TXPLLCFGLOADER_MSG_ADL1_AMODE_CFG_ADL_MON_OCT_SEL_AMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_AMODE_CFG_ADL_MON_OCT_SEL_AMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_AMODE_CFG_ADL_MON_OCT_SEL_AMODE_BF_MSK (0x000000FF)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_AMODE_CFG_ADL_MON_OCT_SEL_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ADL1::cfg_tdc_status_en
#define PMA_TXPLLCFGLOADER_MSG_ADL1_AMODE_CFG_TDC_STAT_EN_AMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_AMODE_CFG_TDC_STAT_EN_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_AMODE_CFG_TDC_STAT_EN_AMODE_BF_MSK (0x00000100)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_AMODE_CFG_TDC_STAT_EN_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ADL1::cfg_adl_monitor_thr
#define PMA_TXPLLCFGLOADER_MSG_ADL1_AMODE_CFG_ADL_MON_THR_AMODE_BF_OFF ( 9)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_AMODE_CFG_ADL_MON_THR_AMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_AMODE_CFG_ADL_MON_THR_AMODE_BF_MSK (0x00003E00)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_AMODE_CFG_ADL_MON_THR_AMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_FRAC_LOCK0_AMODE register description at address offset 0xb0
  *
  * Register default value:        0x00002D0C
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_frac_lock0_amode
  * LCPLL_FRAC_LOCK Register
  */

typedef union {
  struct {
    uint32_t O_FEEDFWRDGAIN_AMODE : 8;
    ///< Feed-forward gain for fractional mode.                         When
    ///< o_feedfwrdcal_en_h=0, this will determine the gain.
    ///< When o_feedfwrdcal_en_h=1, this will determine initial value of the
    ///< gain.                          Use the following formula:
    ///< Full rate: o_feedfwrdgain = 1/(Fdco*tdc_fine_step)
    ///< Half rate: o_feedfwrdgain = 2/(Fdco*tdc_fine_step)
    ///< For franN mode, tdc_fine_step is 6.5psec.
    ///< AccessType="RW" BitOffset="0" ResetValue="0xC"
    uint32_t O_FEEDFWRDCAL_EN_H_AMODE : 1;
    ///< Feedfward gain adaptive mode enable
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1"
    uint32_t O_FEEDFWRDCAL_PAUSE_H_AMODE : 1;
    ///< This bit is for dynamically turning on and off feed forward gain adaptive
    ///< mode.
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t O_DCODITHEREN_H_AMODE : 1;
    ///< DCO fine dithering enable signal.
    ///< AccessType="RW" BitOffset="10" ResetValue="0x1"
    uint32_t O_LOCK_CRITERIA_AMODE : 3;
    ///< Phase lock indicator criteria. Asserted high when phase error is less
    ///< than or equal to the threshold value for:
    ///< 000: 16 consecutive cycles                         001: 32 consecutive
    ///< cycles                         010: 48 consecutive cycles
    ///< 011: 64 consecutive cycles                         100: 80 consecutive
    ///< cycles                         101: 96 consecutive cycles
    ///< 110: 112 consecutive cycles                         111: 128 consecutive
    ///< cycles
    ///< AccessType="RW" BitOffset="11" ResetValue="0x5"
    uint32_t O_FBDIV_STROBE_H_AMODE : 1;
    ///< Enables sampling feedback ratio (integer+fractional) into PLL logic.
    ///< Before changing feedback ratio dynamically (while PLL is running),
    ///< one should deassert this bit until new ratio is udpated in registers.
    ///< This is to ensure safe and synchronoius update of ratio.
    ///< The feedback ratio will propagate automatically into PLL logic while
    ///< PLL is off until DCO settle state is done.
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t O_DITHER_VALUE_AMODE : 5;
    ///< DCO Dither Override Value (in case o_dither_ovrd=1).
    ///< 5 MSB of the filter fractional code (rest 4 LSBs are set to 0).
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t CFG_SIGMA_DELTA2_SEL_AMODE : 1;
    ///< 0 - Uses the first order sigma delta modulator for the feed forward
    ///< cancellation mechanism.                         1 - Uses the second
    ///< order sigma delta modulator for the feed forward cancellation mechanism.
    ///< Note that in this mode the adaptive ffgain feature doesn&#39;t work.
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t CFG_HIGH_SPEED_SD_EN_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::FRAC_LOCK0::cfg_high_speed_sd_en
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_frac_lock0_amode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_AMODE_DEFAULT (0x00002d0cU)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_AMODE_RD_MASK (0x003fffffU)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_AMODE_WR_MASK (0x003fffffU)


///< Feed-forward gain for fractional mode.                         When
///< o_feedfwrdcal_en_h=0, this will determine the gain.
///< When o_feedfwrdcal_en_h=1, this will determine initial value of the
///< gain.                          Use the following formula:
///< Full rate: o_feedfwrdgain = 1/(Fdco*tdc_fine_step)
///< Half rate: o_feedfwrdgain = 2/(Fdco*tdc_fine_step)
///< For franN mode, tdc_fine_step is 6.5psec.
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_AMODE_O_FEEDFWRDGAIN_AMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_AMODE_O_FEEDFWRDGAIN_AMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_AMODE_O_FEEDFWRDGAIN_AMODE_BF_MSK (0x000000FF)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_AMODE_O_FEEDFWRDGAIN_AMODE_BF_DEF (0x0000000C)

///< Feedfward gain adaptive mode enable
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_AMODE_O_FEEDFWRDCAL_EN_H_AMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_AMODE_O_FEEDFWRDCAL_EN_H_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_AMODE_O_FEEDFWRDCAL_EN_H_AMODE_BF_MSK (0x00000100)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_AMODE_O_FEEDFWRDCAL_EN_H_AMODE_BF_DEF (0x00000100)

///< This bit is for dynamically turning on and off feed forward gain adaptive
///< mode.
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_AMODE_O_FEEDFWRDCAL_PAUSE_H_AMODE_BF_OFF ( 9)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_AMODE_O_FEEDFWRDCAL_PAUSE_H_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_AMODE_O_FEEDFWRDCAL_PAUSE_H_AMODE_BF_MSK (0x00000200)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_AMODE_O_FEEDFWRDCAL_PAUSE_H_AMODE_BF_DEF (0x00000000)

///< DCO fine dithering enable signal.
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_AMODE_O_DCODITHEREN_H_AMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_AMODE_O_DCODITHEREN_H_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_AMODE_O_DCODITHEREN_H_AMODE_BF_MSK (0x00000400)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_AMODE_O_DCODITHEREN_H_AMODE_BF_DEF (0x00000400)

///< Phase lock indicator criteria. Asserted high when phase error is less
///< than or equal to the threshold value for:
///< 000: 16 consecutive cycles                         001: 32 consecutive
///< cycles                         010: 48 consecutive cycles
///< 011: 64 consecutive cycles                         100: 80 consecutive
///< cycles                         101: 96 consecutive cycles
///< 110: 112 consecutive cycles                         111: 128 consecutive
///< cycles
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_AMODE_O_LOCK_CRITERIA_AMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_AMODE_O_LOCK_CRITERIA_AMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_AMODE_O_LOCK_CRITERIA_AMODE_BF_MSK (0x00003800)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_AMODE_O_LOCK_CRITERIA_AMODE_BF_DEF (0x00002800)

///< Enables sampling feedback ratio (integer+fractional) into PLL logic.
///< Before changing feedback ratio dynamically (while PLL is running),
///< one should deassert this bit until new ratio is udpated in registers.
///< This is to ensure safe and synchronoius update of ratio.
///< The feedback ratio will propagate automatically into PLL logic while
///< PLL is off until DCO settle state is done.
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_AMODE_O_FBDIV_STROBE_H_AMODE_BF_OFF (14)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_AMODE_O_FBDIV_STROBE_H_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_AMODE_O_FBDIV_STROBE_H_AMODE_BF_MSK (0x00004000)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_AMODE_O_FBDIV_STROBE_H_AMODE_BF_DEF (0x00000000)

///< DCO Dither Override Value (in case o_dither_ovrd=1).
///< 5 MSB of the filter fractional code (rest 4 LSBs are set to 0).
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_AMODE_O_DITHER_VAL_AMODE_BF_OFF (15)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_AMODE_O_DITHER_VAL_AMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_AMODE_O_DITHER_VAL_AMODE_BF_MSK (0x000F8000)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_AMODE_O_DITHER_VAL_AMODE_BF_DEF (0x00000000)

///< 0 - Uses the first order sigma delta modulator for the feed forward
///< cancellation mechanism.                         1 - Uses the second
///< order sigma delta modulator for the feed forward cancellation mechanism.
///< Note that in this mode the adaptive ffgain feature doesn&#39;t work.
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_AMODE_CFG_SIGMA_DELTA2_SEL_AMODE_BF_OFF (20)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_AMODE_CFG_SIGMA_DELTA2_SEL_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_AMODE_CFG_SIGMA_DELTA2_SEL_AMODE_BF_MSK (0x00100000)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_AMODE_CFG_SIGMA_DELTA2_SEL_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::FRAC_LOCK0::cfg_high_speed_sd_en
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_AMODE_CFG_HIGH_SPEED_SD_EN_AMODE_BF_OFF (21)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_AMODE_CFG_HIGH_SPEED_SD_EN_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_AMODE_CFG_HIGH_SPEED_SD_EN_AMODE_BF_MSK (0x00200000)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_AMODE_CFG_HIGH_SPEED_SD_EN_AMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_FRAC_LOCK1_AMODE register description at address offset 0xb4
  *
  * Register default value:        0x00000045
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_frac_lock1_amode
  * SERDES_LANE_ANA_PLL::FRAC_LOCK1
  */

typedef union {
  struct {
    uint32_t CFG_LOCK_THRESH_AMODE : 5;
    ///< Phase lock detect threshold.                         The PLL will
    ///< generate plllockout when the TDC phase error is within lockthresh
    ///< for a number of cycles determined by o_lock_criteria.
    ///< 0 is forbidden value.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x5"
    uint32_t CFG_FINE_FIRST_BOOST_REPEAT_AMODE : 3;
    ///< Determines the number of repetitions of the boost gain counter for
    ///< the first stage of the fine boost.                         The number
    ///< of overall repetitions is equal to cfg_fine_first_boost_repeat + 1
    ///< Set this to non-zero when PLL needs to lock on SSC&#39;ed refclk,
    ///< to allow enough time for the boost to handle fast cap-swap.
    ///< AccessType="RW" BitOffset="5" ResetValue="0x2"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_frac_lock1_amode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_AMODE_DEFAULT (0x00000045U)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_AMODE_RD_MASK (0x000000ffU)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_AMODE_WR_MASK (0x000000ffU)


///< Phase lock detect threshold.                         The PLL will
///< generate plllockout when the TDC phase error is within lockthresh
///< for a number of cycles determined by o_lock_criteria.
///< 0 is forbidden value.
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_AMODE_CFG_LOCK_THRESH_AMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_AMODE_CFG_LOCK_THRESH_AMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_AMODE_CFG_LOCK_THRESH_AMODE_BF_MSK (0x0000001F)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_AMODE_CFG_LOCK_THRESH_AMODE_BF_DEF (0x00000005)

///< Determines the number of repetitions of the boost gain counter for
///< the first stage of the fine boost.                         The number
///< of overall repetitions is equal to cfg_fine_first_boost_repeat + 1
///< Set this to non-zero when PLL needs to lock on SSC&#39;ed refclk,
///< to allow enough time for the boost to handle fast cap-swap.
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_AMODE_CFG_FINE_FIRST_BOOST_REPEAT_AMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_AMODE_CFG_FINE_FIRST_BOOST_REPEAT_AMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_AMODE_CFG_FINE_FIRST_BOOST_REPEAT_AMODE_BF_MSK (0x000000E0)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_AMODE_CFG_FINE_FIRST_BOOST_REPEAT_AMODE_BF_DEF (0x00000040)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_TDC0_AMODE register description at address offset 0xb8
  *
  * Register default value:        0x0F00033F
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_tdc0_amode
  * LCPLL_TDC0 Register
  */

typedef union {
  struct {
    uint32_t CFG_VTDC_REFCLK_CNT_LIMIT_AMODE : 4;
    ///< Number of reference clock cycles used in TDC clock calibration
    ///< AccessType="RW" BitOffset="0" ResetValue="0xF"
    uint32_t CFG_VTDC_FAST_SEL_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_fast_sel
    ///< AccessType="RW" BitOffset="4" ResetValue="0x1"
    uint32_t CFG_VTDC_OFFSET_CALIB_EN_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_offset_calib_en
    ///< AccessType="RW" BitOffset="5" ResetValue="0x1"
    uint32_t CFG_VTDC_PLUS_STDC_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_plus_stdc
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t CFG_VTDC_FINE_OFFSET_CHIKEN_BIT_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_fine_offset_chiken_bit
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t CFG_VTDC_OFFSET_TIMER_LIMIT_AMODE : 4;
    ///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_offset_timer_limit
    ///< AccessType="RW" BitOffset="8" ResetValue="0x3"
    uint32_t CFG_VTDC_FINE_OFFSET_OVRD_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_fine_offset_ovrd
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t CFG_VTDC_FINE_OFFSET_OVRD_VAL_AMODE : 5;
    ///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_fine_offset_ovrd_val
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t CFG_TDCPE_OFFSET_AMODE : 5;
    ///< Adding offset to 2&#39;s comp tdc value (integer signed)
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t CFG_TDC_BB_INPUT_SEL_AMODE : 1;
    ///< 1&#39;b0 - Uses bb TDC signal from analog
    ///< 1&#39;b1 - Uses MSB of tdceff signal as bb TDC input signal (TDC sign
    ///< bit)
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t CFG_STDC_STDDEV_INIT_AMODE : 4;
    ///< Initial value for stddev control bus before STDC calibration.
    ///< AccessType="RW" BitOffset="24" ResetValue="0xF"
    uint32_t CFG_FORCE_VTDC_OSC_AMODE : 1;
    ///< Forces VTDC to RO mode
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t CFG_VTDC_OFFSET_RANGE_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_offset_range
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_tdc0_amode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_DEFAULT (0x0f00033fU)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_RD_MASK (0x3fffffffU)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_WR_MASK (0x3fffffffU)


///< Number of reference clock cycles used in TDC clock calibration
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_CFG_VTDC_REFCLK_CNT_LIMIT_AMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_CFG_VTDC_REFCLK_CNT_LIMIT_AMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_CFG_VTDC_REFCLK_CNT_LIMIT_AMODE_BF_MSK (0x0000000F)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_CFG_VTDC_REFCLK_CNT_LIMIT_AMODE_BF_DEF (0x0000000F)

///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_fast_sel
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_CFG_VTDC_FAST_SEL_AMODE_BF_OFF ( 4)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_CFG_VTDC_FAST_SEL_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_CFG_VTDC_FAST_SEL_AMODE_BF_MSK (0x00000010)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_CFG_VTDC_FAST_SEL_AMODE_BF_DEF (0x00000010)

///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_offset_calib_en
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_CFG_VTDC_OFFSET_CALIB_EN_AMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_CFG_VTDC_OFFSET_CALIB_EN_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_CFG_VTDC_OFFSET_CALIB_EN_AMODE_BF_MSK (0x00000020)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_CFG_VTDC_OFFSET_CALIB_EN_AMODE_BF_DEF (0x00000020)

///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_plus_stdc
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_CFG_VTDC_PLUS_STDC_AMODE_BF_OFF ( 6)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_CFG_VTDC_PLUS_STDC_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_CFG_VTDC_PLUS_STDC_AMODE_BF_MSK (0x00000040)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_CFG_VTDC_PLUS_STDC_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_fine_offset_chiken_bit
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_CFG_VTDC_FINE_OFFSET_CHIKEN_BIT_AMODE_BF_OFF ( 7)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_CFG_VTDC_FINE_OFFSET_CHIKEN_BIT_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_CFG_VTDC_FINE_OFFSET_CHIKEN_BIT_AMODE_BF_MSK (0x00000080)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_CFG_VTDC_FINE_OFFSET_CHIKEN_BIT_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_offset_timer_limit
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_CFG_VTDC_OFFSET_TIMER_LIMIT_AMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_CFG_VTDC_OFFSET_TIMER_LIMIT_AMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_CFG_VTDC_OFFSET_TIMER_LIMIT_AMODE_BF_MSK (0x00000F00)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_CFG_VTDC_OFFSET_TIMER_LIMIT_AMODE_BF_DEF (0x00000300)

///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_fine_offset_ovrd
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_CFG_VTDC_FINE_OFFSET_OVRD_AMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_CFG_VTDC_FINE_OFFSET_OVRD_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_CFG_VTDC_FINE_OFFSET_OVRD_AMODE_BF_MSK (0x00001000)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_CFG_VTDC_FINE_OFFSET_OVRD_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_fine_offset_ovrd_val
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_CFG_VTDC_FINE_OFFSET_OVRD_VAL_AMODE_BF_OFF (13)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_CFG_VTDC_FINE_OFFSET_OVRD_VAL_AMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_CFG_VTDC_FINE_OFFSET_OVRD_VAL_AMODE_BF_MSK (0x0003E000)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_CFG_VTDC_FINE_OFFSET_OVRD_VAL_AMODE_BF_DEF (0x00000000)

///< Adding offset to 2&#39;s comp tdc value (integer signed)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_CFG_TDCPE_OFFSET_AMODE_BF_OFF (18)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_CFG_TDCPE_OFFSET_AMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_CFG_TDCPE_OFFSET_AMODE_BF_MSK (0x007C0000)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_CFG_TDCPE_OFFSET_AMODE_BF_DEF (0x00000000)

///< 1&#39;b0 - Uses bb TDC signal from analog
///< 1&#39;b1 - Uses MSB of tdceff signal as bb TDC input signal (TDC sign
///< bit)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_CFG_TDC_BB_INPUT_SEL_AMODE_BF_OFF (23)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_CFG_TDC_BB_INPUT_SEL_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_CFG_TDC_BB_INPUT_SEL_AMODE_BF_MSK (0x00800000)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_CFG_TDC_BB_INPUT_SEL_AMODE_BF_DEF (0x00000000)

///< Initial value for stddev control bus before STDC calibration.
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_CFG_STDC_STDDEV_INIT_AMODE_BF_OFF (24)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_CFG_STDC_STDDEV_INIT_AMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_CFG_STDC_STDDEV_INIT_AMODE_BF_MSK (0x0F000000)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_CFG_STDC_STDDEV_INIT_AMODE_BF_DEF (0x0F000000)

///< Forces VTDC to RO mode
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_CFG_FORCE_VTDC_OSC_AMODE_BF_OFF (28)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_CFG_FORCE_VTDC_OSC_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_CFG_FORCE_VTDC_OSC_AMODE_BF_MSK (0x10000000)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_CFG_FORCE_VTDC_OSC_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_offset_range
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_CFG_VTDC_OFFSET_RANGE_AMODE_BF_OFF (29)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_CFG_VTDC_OFFSET_RANGE_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_CFG_VTDC_OFFSET_RANGE_AMODE_BF_MSK (0x20000000)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_CFG_VTDC_OFFSET_RANGE_AMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_TDC1_AMODE register description at address offset 0xbc
  *
  * Register default value:        0x001E80AA
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_tdc1_amode
  * SERDES_LANE_ANA_PLL::TDC1
  */

typedef union {
  struct {
    uint32_t CFG_PE_DISABLE_AMODE : 1;
    ///< Force values of 0 on TDC output.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_TDC_LADDER_MAX_AMODE : 2;
    ///< Max trim ladder code value alowed during lock adquisition.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x1"
    uint32_t CFG_TDC_LADDER_MIN_AMODE : 2;
    ///< Min trim ladder code value alowed during lock adquisition.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x1"
    uint32_t CFG_SELECT_STDC_FILTER_AMODE : 1;
    ///< Select STDC output to filter.                         Will select
    ///< only after FSM enables.
    ///< AccessType="RW" BitOffset="5" ResetValue="0x1"
    uint32_t CFG_SELECT_STDC_DFX_AMODE : 1;
    ///< Select STDC output to DFX path (PE min/max, raw lock, VISA, RO reg)
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t CFG_STDC_PROP_COEFF_AMODE : 5;
    ///< Fine Kp = 2^(-reg) to be used with STDC (signed value)
    ///< AccessType="RW" BitOffset="7" ResetValue="0x1"
    uint32_t CFG_STDC_INT_COEFF_AMODE : 5;
    ///< Fine Ki = 2^(-reg) to be used with STDC
    ///< AccessType="RW" BitOffset="12" ResetValue="0x8"
    uint32_t CFG_VTDC_ANA_EN_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC1::cfg_vtdc_ana_en
    ///< AccessType="RW" BitOffset="17" ResetValue="0x1"
    uint32_t CFG_STDC_ANA_EN_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC1::cfg_stdc_ana_en
    ///< AccessType="RW" BitOffset="18" ResetValue="0x1"
    uint32_t CFG_TDC_SAMP_BYPASS_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC1::cfg_tdc_samp_bypass
    ///< AccessType="RW" BitOffset="19" ResetValue="0x1"
    uint32_t CFG_STDC_SAMP_BYPASS_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC1::cfg_stdc_samp_bypass
    ///< AccessType="RW" BitOffset="20" ResetValue="0x1"
    uint32_t CFG_TDC_STATUS_MODE_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC1::cfg_tdc_status_mode
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t CFG_TDC_HISTOGRAM_MODE_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC1::cfg_tdc_histogram_mode
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t CFG_TDC_HISTOGRAM_VALUE_AMODE : 6;
    ///< SERDES_LANE_ANA_PLL::TDC1::cfg_tdc_histogram_value
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_tdc1_amode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_DEFAULT (0x001e80aaU)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_RD_MASK (0x1fffffffU)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_WR_MASK (0x1fffffffU)


///< Force values of 0 on TDC output.
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_PE_DIS_AMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_PE_DIS_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_PE_DIS_AMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_PE_DIS_AMODE_BF_DEF (0x00000000)

///< Max trim ladder code value alowed during lock adquisition.
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_TDC_LADDER_MAX_AMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_TDC_LADDER_MAX_AMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_TDC_LADDER_MAX_AMODE_BF_MSK (0x00000006)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_TDC_LADDER_MAX_AMODE_BF_DEF (0x00000002)

///< Min trim ladder code value alowed during lock adquisition.
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_TDC_LADDER_MIN_AMODE_BF_OFF ( 3)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_TDC_LADDER_MIN_AMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_TDC_LADDER_MIN_AMODE_BF_MSK (0x00000018)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_TDC_LADDER_MIN_AMODE_BF_DEF (0x00000008)

///< Select STDC output to filter.                         Will select
///< only after FSM enables.
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_SEL_STDC_FILTER_AMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_SEL_STDC_FILTER_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_SEL_STDC_FILTER_AMODE_BF_MSK (0x00000020)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_SEL_STDC_FILTER_AMODE_BF_DEF (0x00000020)

///< Select STDC output to DFX path (PE min/max, raw lock, VISA, RO reg)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_SEL_STDC_DFX_AMODE_BF_OFF ( 6)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_SEL_STDC_DFX_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_SEL_STDC_DFX_AMODE_BF_MSK (0x00000040)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_SEL_STDC_DFX_AMODE_BF_DEF (0x00000000)

///< Fine Kp = 2^(-reg) to be used with STDC (signed value)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_STDC_PROP_COEFF_AMODE_BF_OFF ( 7)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_STDC_PROP_COEFF_AMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_STDC_PROP_COEFF_AMODE_BF_MSK (0x00000F80)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_STDC_PROP_COEFF_AMODE_BF_DEF (0x00000080)

///< Fine Ki = 2^(-reg) to be used with STDC
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_STDC_INT_COEFF_AMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_STDC_INT_COEFF_AMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_STDC_INT_COEFF_AMODE_BF_MSK (0x0001F000)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_STDC_INT_COEFF_AMODE_BF_DEF (0x00008000)

///< SERDES_LANE_ANA_PLL::TDC1::cfg_vtdc_ana_en
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_VTDC_ANA_EN_AMODE_BF_OFF (17)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_VTDC_ANA_EN_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_VTDC_ANA_EN_AMODE_BF_MSK (0x00020000)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_VTDC_ANA_EN_AMODE_BF_DEF (0x00020000)

///< SERDES_LANE_ANA_PLL::TDC1::cfg_stdc_ana_en
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_STDC_ANA_EN_AMODE_BF_OFF (18)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_STDC_ANA_EN_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_STDC_ANA_EN_AMODE_BF_MSK (0x00040000)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_STDC_ANA_EN_AMODE_BF_DEF (0x00040000)

///< SERDES_LANE_ANA_PLL::TDC1::cfg_tdc_samp_bypass
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_TDC_SAMP_BYP_AMODE_BF_OFF (19)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_TDC_SAMP_BYP_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_TDC_SAMP_BYP_AMODE_BF_MSK (0x00080000)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_TDC_SAMP_BYP_AMODE_BF_DEF (0x00080000)

///< SERDES_LANE_ANA_PLL::TDC1::cfg_stdc_samp_bypass
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_STDC_SAMP_BYP_AMODE_BF_OFF (20)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_STDC_SAMP_BYP_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_STDC_SAMP_BYP_AMODE_BF_MSK (0x00100000)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_STDC_SAMP_BYP_AMODE_BF_DEF (0x00100000)

///< SERDES_LANE_ANA_PLL::TDC1::cfg_tdc_status_mode
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_TDC_STAT_MODE_AMODE_BF_OFF (21)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_TDC_STAT_MODE_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_TDC_STAT_MODE_AMODE_BF_MSK (0x00200000)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_TDC_STAT_MODE_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TDC1::cfg_tdc_histogram_mode
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_TDC_HISTOGRAM_MODE_AMODE_BF_OFF (22)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_TDC_HISTOGRAM_MODE_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_TDC_HISTOGRAM_MODE_AMODE_BF_MSK (0x00400000)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_TDC_HISTOGRAM_MODE_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TDC1::cfg_tdc_histogram_value
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_TDC_HISTOGRAM_VAL_AMODE_BF_OFF (23)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_TDC_HISTOGRAM_VAL_AMODE_BF_WID ( 6)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_TDC_HISTOGRAM_VAL_AMODE_BF_MSK (0x1F800000)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_CFG_TDC_HISTOGRAM_VAL_AMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_TDC2_AMODE register description at address offset 0xc0
  *
  * Register default value:        0x002483EF
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_tdc2_amode
  * SERDES_LANE_ANA_PLL::TDC2
  */

typedef union {
  struct {
    uint32_t CFG_TDC_ADAPTIVE_WIN_IN_AMODE : 5;
    ///< TDC code threshold to switch ladder with higher resolution.
    ///< Need to be below that value during cfg_tdc_adaptive_max_count cycle
    ///< time window
    ///< AccessType="RW" BitOffset="0" ResetValue="0xF"
    uint32_t CFG_TDC_ADAPTIVE_WIN_OUT_AMODE : 5;
    ///< TDC code threshold to switch ladder with lower resolution.
    ///< AccessType="RW" BitOffset="5" ResetValue="0x1F"
    uint32_t CFG_TDC_ADAPTIVE_MAX_COUNT_AMODE : 6;
    ///< Defines the number of cycles for time window of TDC ladder adaptive
    ///< switching
    ///< AccessType="RW" BitOffset="10" ResetValue="0x20"
    uint32_t CFG_TDC_TRIM_OVRD_AMODE : 1;
    ///< tdc chain trim ovrd enable
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t CFG_TDC_TRIM_VAL_AMODE : 2;
    ///< tdc chain trim ovrd value
    ///< AccessType="RW" BitOffset="17" ResetValue="0x2"
    uint32_t CFG_KPKI_COMPENSATE_VAL_AMODE : 2;
    ///< SERDES_LANE_ANA_PLL::TDC2::cfg_kpki_compensate_val
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t CFG_STDC_BIAS_EN_AMODE : 1;
    ///< Enables internal STDC bias.
    ///< AccessType="RW" BitOffset="21" ResetValue="0x1"
    uint32_t CFG_FORCE_STDC_OSC_AMODE : 1;
    ///< Forces internal STDC oscilator to enable.
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t CFG_STDC_STDDEV_OVRD_EN_AMODE : 1;
    ///< Enables override for stddev control bus.
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t CFG_STDC_OSC_DIV4_AMODE : 1;
    ///< Enables internal STDC divider for internal oscilator output.
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t CFG_STDCPE_OFFSET_AMODE : 5;
    ///< Adding offset to 2&#39;s comp stdc value (integer signed)
    ///< AccessType="RW" BitOffset="25" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_tdc2_amode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_TDC2_AMODE_DEFAULT (0x002483efU)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_AMODE_RD_MASK (0x3fffffffU)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_AMODE_WR_MASK (0x3fffffffU)


///< TDC code threshold to switch ladder with higher resolution.
///< Need to be below that value during cfg_tdc_adaptive_max_count cycle
///< time window
#define PMA_TXPLLCFGLOADER_MSG_TDC2_AMODE_CFG_TDC_ADAPTIVE_WIN_IN_AMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_AMODE_CFG_TDC_ADAPTIVE_WIN_IN_AMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_AMODE_CFG_TDC_ADAPTIVE_WIN_IN_AMODE_BF_MSK (0x0000001F)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_AMODE_CFG_TDC_ADAPTIVE_WIN_IN_AMODE_BF_DEF (0x0000000F)

///< TDC code threshold to switch ladder with lower resolution.
#define PMA_TXPLLCFGLOADER_MSG_TDC2_AMODE_CFG_TDC_ADAPTIVE_WIN_OUT_AMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_AMODE_CFG_TDC_ADAPTIVE_WIN_OUT_AMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_AMODE_CFG_TDC_ADAPTIVE_WIN_OUT_AMODE_BF_MSK (0x000003E0)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_AMODE_CFG_TDC_ADAPTIVE_WIN_OUT_AMODE_BF_DEF (0x000003E0)

///< Defines the number of cycles for time window of TDC ladder adaptive
///< switching
#define PMA_TXPLLCFGLOADER_MSG_TDC2_AMODE_CFG_TDC_ADAPTIVE_MAX_CNT_AMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_AMODE_CFG_TDC_ADAPTIVE_MAX_CNT_AMODE_BF_WID ( 6)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_AMODE_CFG_TDC_ADAPTIVE_MAX_CNT_AMODE_BF_MSK (0x0000FC00)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_AMODE_CFG_TDC_ADAPTIVE_MAX_CNT_AMODE_BF_DEF (0x00008000)

///< tdc chain trim ovrd enable
#define PMA_TXPLLCFGLOADER_MSG_TDC2_AMODE_CFG_TDC_TRIM_OVRD_AMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_AMODE_CFG_TDC_TRIM_OVRD_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_AMODE_CFG_TDC_TRIM_OVRD_AMODE_BF_MSK (0x00010000)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_AMODE_CFG_TDC_TRIM_OVRD_AMODE_BF_DEF (0x00000000)

///< tdc chain trim ovrd value
#define PMA_TXPLLCFGLOADER_MSG_TDC2_AMODE_CFG_TDC_TRIM_VAL_AMODE_BF_OFF (17)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_AMODE_CFG_TDC_TRIM_VAL_AMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_AMODE_CFG_TDC_TRIM_VAL_AMODE_BF_MSK (0x00060000)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_AMODE_CFG_TDC_TRIM_VAL_AMODE_BF_DEF (0x00040000)

///< SERDES_LANE_ANA_PLL::TDC2::cfg_kpki_compensate_val
#define PMA_TXPLLCFGLOADER_MSG_TDC2_AMODE_CFG_KPKI_COMPENSATE_VAL_AMODE_BF_OFF (19)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_AMODE_CFG_KPKI_COMPENSATE_VAL_AMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_AMODE_CFG_KPKI_COMPENSATE_VAL_AMODE_BF_MSK (0x00180000)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_AMODE_CFG_KPKI_COMPENSATE_VAL_AMODE_BF_DEF (0x00000000)

///< Enables internal STDC bias.
#define PMA_TXPLLCFGLOADER_MSG_TDC2_AMODE_CFG_STDC_BIAS_EN_AMODE_BF_OFF (21)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_AMODE_CFG_STDC_BIAS_EN_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_AMODE_CFG_STDC_BIAS_EN_AMODE_BF_MSK (0x00200000)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_AMODE_CFG_STDC_BIAS_EN_AMODE_BF_DEF (0x00200000)

///< Forces internal STDC oscilator to enable.
#define PMA_TXPLLCFGLOADER_MSG_TDC2_AMODE_CFG_FORCE_STDC_OSC_AMODE_BF_OFF (22)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_AMODE_CFG_FORCE_STDC_OSC_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_AMODE_CFG_FORCE_STDC_OSC_AMODE_BF_MSK (0x00400000)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_AMODE_CFG_FORCE_STDC_OSC_AMODE_BF_DEF (0x00000000)

///< Enables override for stddev control bus.
#define PMA_TXPLLCFGLOADER_MSG_TDC2_AMODE_CFG_STDC_STDDEV_OVRD_EN_AMODE_BF_OFF (23)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_AMODE_CFG_STDC_STDDEV_OVRD_EN_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_AMODE_CFG_STDC_STDDEV_OVRD_EN_AMODE_BF_MSK (0x00800000)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_AMODE_CFG_STDC_STDDEV_OVRD_EN_AMODE_BF_DEF (0x00000000)

///< Enables internal STDC divider for internal oscilator output.
#define PMA_TXPLLCFGLOADER_MSG_TDC2_AMODE_CFG_STDC_OSC_DIV4_AMODE_BF_OFF (24)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_AMODE_CFG_STDC_OSC_DIV4_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_AMODE_CFG_STDC_OSC_DIV4_AMODE_BF_MSK (0x01000000)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_AMODE_CFG_STDC_OSC_DIV4_AMODE_BF_DEF (0x00000000)

///< Adding offset to 2&#39;s comp stdc value (integer signed)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_AMODE_CFG_STDCPE_OFFSET_AMODE_BF_OFF (25)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_AMODE_CFG_STDCPE_OFFSET_AMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_AMODE_CFG_STDCPE_OFFSET_AMODE_BF_MSK (0x3E000000)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_AMODE_CFG_STDCPE_OFFSET_AMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_TDC3_AMODE register description at address offset 0xc4
  *
  * Register default value:        0x000003A3
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_tdc3_amode
  * SERDES_LANE_ANA_PLL::TDC3
  */

typedef union {
  struct {
    uint32_t CFG_STDC_TARGET_CNT_AMODE : 8;
    ///< Calibration target for STDC oscilator during calibration.
    ///< The formula: int(2^(2 + cfg_stdc_cnt_limit)*(3e9/Frefclk))
    ///< AccessType="RW" BitOffset="0" ResetValue="0xA3"
    uint32_t CFG_STDC_CNT_LIMIT_AMODE : 2;
    ///< Number of cycles to count STDC oscilator edges during calibration.
    ///< Value = 2^(2 + reg)
    ///< AccessType="RW" BitOffset="8" ResetValue="0x3"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_tdc3_amode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_TDC3_AMODE_DEFAULT (0x000003a3U)
#define PMA_TXPLLCFGLOADER_MSG_TDC3_AMODE_RD_MASK (0x000003ffU)
#define PMA_TXPLLCFGLOADER_MSG_TDC3_AMODE_WR_MASK (0x000003ffU)


///< Calibration target for STDC oscilator during calibration.
///< The formula: int(2^(2 + cfg_stdc_cnt_limit)*(3e9/Frefclk))
#define PMA_TXPLLCFGLOADER_MSG_TDC3_AMODE_CFG_STDC_TARGET_CNT_AMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_TDC3_AMODE_CFG_STDC_TARGET_CNT_AMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_TDC3_AMODE_CFG_STDC_TARGET_CNT_AMODE_BF_MSK (0x000000FF)
#define PMA_TXPLLCFGLOADER_MSG_TDC3_AMODE_CFG_STDC_TARGET_CNT_AMODE_BF_DEF (0x000000A3)

///< Number of cycles to count STDC oscilator edges during calibration.
///< Value = 2^(2 + reg)
#define PMA_TXPLLCFGLOADER_MSG_TDC3_AMODE_CFG_STDC_CNT_LIMIT_AMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_TDC3_AMODE_CFG_STDC_CNT_LIMIT_AMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_TDC3_AMODE_CFG_STDC_CNT_LIMIT_AMODE_BF_MSK (0x00000300)
#define PMA_TXPLLCFGLOADER_MSG_TDC3_AMODE_CFG_STDC_CNT_LIMIT_AMODE_BF_DEF (0x00000300)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_TAP_OVRD_AMODE register description at address offset 0xc8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_tap_ovrd_amode
  * LCPLL_TAP_OVRD Register
  */

typedef union {
  struct {
    uint32_t CFG_PLL_ENABLE_AMODE : 1;
    ///< Replaces direct pin of PLL enable signal (in case cfg_pll_en_mode_ctrl
    ///< = 1).
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_PLL_EN_MODE_CTRL_AMODE : 1;
    ///< Effective PLL enable:                         0 - Enable signal from
    ///< PLL interface                         1 - Enable signal from PLL register
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t CFG_LDO_ENABLE_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldo_enable
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t CFG_VREFGEN_EN_OVRD_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_vrefgen_en_ovrd
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t CFG_VREFGEN_EN_OVRD_VAL_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_vrefgen_en_ovrd_val
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t CFG_LDO_BIAS_EN_OVRD_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldo_bias_en_ovrd
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t CFG_LDO_BIAS_EN_OVRD_VAL_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldo_bias_en_ovrd_val
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t CFG_LDOCLK_EN_OVRD_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldoclk_en_ovrd
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t CFG_LDOCLK_EN_OVRD_VAL_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldoclk_en_ovrd_val
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CFG_LDODCO_EN_OVRD_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldodco_en_ovrd
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t CFG_LDODCO_EN_OVRD_VAL_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldodco_en_ovrd_val
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t O_DFX_TDC_DISABLE_AMODE : 1;
    ///< Set to turn off TDC. Mainly to study impact of TDC self noise on PLL
    ///< jitter
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_tap_ovrd_amode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_RD_MASK (0x00000fffU)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_WR_MASK (0x00000fffU)


///< Replaces direct pin of PLL enable signal (in case cfg_pll_en_mode_ctrl
///< = 1).
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_CFG_PLL_EN_AMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_CFG_PLL_EN_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_CFG_PLL_EN_AMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_CFG_PLL_EN_AMODE_BF_DEF (0x00000000)

///< Effective PLL enable:                         0 - Enable signal from
///< PLL interface                         1 - Enable signal from PLL register
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_CFG_PLL_EN_MODE_CTRL_AMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_CFG_PLL_EN_MODE_CTRL_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_CFG_PLL_EN_MODE_CTRL_AMODE_BF_MSK (0x00000002)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_CFG_PLL_EN_MODE_CTRL_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldo_enable
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_CFG_LDO_EN_AMODE_BF_OFF ( 2)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_CFG_LDO_EN_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_CFG_LDO_EN_AMODE_BF_MSK (0x00000004)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_CFG_LDO_EN_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_vrefgen_en_ovrd
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_CFG_VREFGEN_EN_OVRD_AMODE_BF_OFF ( 3)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_CFG_VREFGEN_EN_OVRD_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_CFG_VREFGEN_EN_OVRD_AMODE_BF_MSK (0x00000008)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_CFG_VREFGEN_EN_OVRD_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_vrefgen_en_ovrd_val
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_CFG_VREFGEN_EN_OVRD_VAL_AMODE_BF_OFF ( 4)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_CFG_VREFGEN_EN_OVRD_VAL_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_CFG_VREFGEN_EN_OVRD_VAL_AMODE_BF_MSK (0x00000010)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_CFG_VREFGEN_EN_OVRD_VAL_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldo_bias_en_ovrd
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_CFG_LDO_BIAS_EN_OVRD_AMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_CFG_LDO_BIAS_EN_OVRD_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_CFG_LDO_BIAS_EN_OVRD_AMODE_BF_MSK (0x00000020)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_CFG_LDO_BIAS_EN_OVRD_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldo_bias_en_ovrd_val
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_CFG_LDO_BIAS_EN_OVRD_VAL_AMODE_BF_OFF ( 6)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_CFG_LDO_BIAS_EN_OVRD_VAL_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_CFG_LDO_BIAS_EN_OVRD_VAL_AMODE_BF_MSK (0x00000040)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_CFG_LDO_BIAS_EN_OVRD_VAL_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldoclk_en_ovrd
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_CFG_LDOCLK_EN_OVRD_AMODE_BF_OFF ( 7)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_CFG_LDOCLK_EN_OVRD_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_CFG_LDOCLK_EN_OVRD_AMODE_BF_MSK (0x00000080)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_CFG_LDOCLK_EN_OVRD_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldoclk_en_ovrd_val
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_CFG_LDOCLK_EN_OVRD_VAL_AMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_CFG_LDOCLK_EN_OVRD_VAL_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_CFG_LDOCLK_EN_OVRD_VAL_AMODE_BF_MSK (0x00000100)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_CFG_LDOCLK_EN_OVRD_VAL_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldodco_en_ovrd
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_CFG_LDODCO_EN_OVRD_AMODE_BF_OFF ( 9)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_CFG_LDODCO_EN_OVRD_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_CFG_LDODCO_EN_OVRD_AMODE_BF_MSK (0x00000200)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_CFG_LDODCO_EN_OVRD_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldodco_en_ovrd_val
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_CFG_LDODCO_EN_OVRD_VAL_AMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_CFG_LDODCO_EN_OVRD_VAL_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_CFG_LDODCO_EN_OVRD_VAL_AMODE_BF_MSK (0x00000400)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_CFG_LDODCO_EN_OVRD_VAL_AMODE_BF_DEF (0x00000000)

///< Set to turn off TDC. Mainly to study impact of TDC self noise on PLL
///< jitter
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_O_DFX_TDC_DIS_AMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_O_DFX_TDC_DIS_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_O_DFX_TDC_DIS_AMODE_BF_MSK (0x00000800)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_O_DFX_TDC_DIS_AMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_DFX_DCO_AMODE register description at address offset 0xcc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_dfx_dco_amode
  * LCPLL_DFX_DCO Register
  */

typedef union {
  struct {
    uint32_t O_DCOFINEDFTSEL_AMODE : 2;
    ///< DCO fine frequency and dco dither override:
    ///< 00: DCO fine tuning is set by PLL closed loop .
    ///< 01: DCO fine frequency value is set by o_dcofine and DCO dither value
    ///< is set by o_dither_value.                         10: Internal SAW
    ///< tooth pattern on fine integer code (while frac=0). Code increments
    ///< every fbclk cycle.                         11: Reserved.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t O_DCOCOARSE_OVRD_H_AMODE : 1;
    ///< DCO coarse frequency override signal:                         0: DCO
    ///< coarse tuning is set by AFC state machine
    ///< 1: DCO coarse frequency value is set by o_dcocoarse
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t O_DCOFINE_AMODE : 8;
    ///< Fine override value (when o_dcofinedftsel = 01).
    ///< Valid range 0 to 254.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t O_DCOCOARSE_AMODE : 9;
    ///< AFC override value (when o_dcocoarse_ovrd_h=1).
    ///< Valid range 0 to 319.
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t CFG_CAPTURE_FILTER_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DFX_DCO::cfg_capture_filter
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_dfx_dco_amode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_AMODE_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_AMODE_RD_MASK (0x001fffffU)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_AMODE_WR_MASK (0x001fffffU)


///< DCO fine frequency and dco dither override:
///< 00: DCO fine tuning is set by PLL closed loop .
///< 01: DCO fine frequency value is set by o_dcofine and DCO dither value
///< is set by o_dither_value.                         10: Internal SAW
///< tooth pattern on fine integer code (while frac=0). Code increments
///< every fbclk cycle.                         11: Reserved.
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_AMODE_O_DCOFINEDFTSEL_AMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_AMODE_O_DCOFINEDFTSEL_AMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_AMODE_O_DCOFINEDFTSEL_AMODE_BF_MSK (0x00000003)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_AMODE_O_DCOFINEDFTSEL_AMODE_BF_DEF (0x00000000)

///< DCO coarse frequency override signal:                         0: DCO
///< coarse tuning is set by AFC state machine
///< 1: DCO coarse frequency value is set by o_dcocoarse
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_AMODE_O_DCOCOARSE_OVRD_H_AMODE_BF_OFF ( 2)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_AMODE_O_DCOCOARSE_OVRD_H_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_AMODE_O_DCOCOARSE_OVRD_H_AMODE_BF_MSK (0x00000004)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_AMODE_O_DCOCOARSE_OVRD_H_AMODE_BF_DEF (0x00000000)

///< Fine override value (when o_dcofinedftsel = 01).
///< Valid range 0 to 254.
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_AMODE_O_DCOFINE_AMODE_BF_OFF ( 3)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_AMODE_O_DCOFINE_AMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_AMODE_O_DCOFINE_AMODE_BF_MSK (0x000007F8)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_AMODE_O_DCOFINE_AMODE_BF_DEF (0x00000000)

///< AFC override value (when o_dcocoarse_ovrd_h=1).
///< Valid range 0 to 319.
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_AMODE_O_DCOCOARSE_AMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_AMODE_O_DCOCOARSE_AMODE_BF_WID ( 9)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_AMODE_O_DCOCOARSE_AMODE_BF_MSK (0x000FF800)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_AMODE_O_DCOCOARSE_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DFX_DCO::cfg_capture_filter
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_AMODE_CFG_CAP_FILTER_AMODE_BF_OFF (20)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_AMODE_CFG_CAP_FILTER_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_AMODE_CFG_CAP_FILTER_AMODE_BF_MSK (0x00100000)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_AMODE_CFG_CAP_FILTER_AMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_DFX_TDC_CRO_AMODE register description at address offset 0xd0
  *
  * Register default value:        0x0000001C
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_dfx_tdc_cro_amode
  * LCPLL_DFX_TDC_CRO Register
  */

typedef union {
  struct {
    uint32_t CFG_DFT_CNT_RESTART_AMODE : 1;
    ///< Clears min/max measurements and restarts dft counter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_DFT_TIMER_LIMIT_AMODE : 4;
    ///< While cfg_dfx_disable_dft_timer_ovrd_val=0 define the window time
    ///< of the dft measurement. (2^6 +reg [ref_clk cycles])
    ///< AccessType="RW" BitOffset="1" ResetValue="0xE"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_dfx_tdc_cro_amode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_AMODE_DEFAULT (0x0000001cU)
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_AMODE_RD_MASK (0x0000001fU)
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_AMODE_WR_MASK (0x0000001fU)


///< Clears min/max measurements and restarts dft counter
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_AMODE_CFG_DFT_CNT_RESTART_AMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_AMODE_CFG_DFT_CNT_RESTART_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_AMODE_CFG_DFT_CNT_RESTART_AMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_AMODE_CFG_DFT_CNT_RESTART_AMODE_BF_DEF (0x00000000)

///< While cfg_dfx_disable_dft_timer_ovrd_val=0 define the window time
///< of the dft measurement. (2^6 +reg [ref_clk cycles])
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_AMODE_CFG_DFT_TIMER_LIMIT_AMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_AMODE_CFG_DFT_TIMER_LIMIT_AMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_AMODE_CFG_DFT_TIMER_LIMIT_AMODE_BF_MSK (0x0000001E)
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_AMODE_CFG_DFT_TIMER_LIMIT_AMODE_BF_DEF (0x0000001C)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_VISA_CTRL_AMODE register description at address offset 0xd4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_visa_ctrl_amode
  * LCPLL_VISA_CTRL Register
  */

typedef union {
  struct {
    uint32_t CFG_VISA_CTRL_AMODE : 32;
    ///< VISA control register                         [0] visa enable.
    ///< [3:1] prbs mode (pattern gen)
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_visa_ctrl_amode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_AMODE_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_AMODE_RD_MASK (0xffffffffU)
#define PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_AMODE_WR_MASK (0xffffffffU)


///< VISA control register                         [0] visa enable.
///< [3:1] prbs mode (pattern gen)
#define PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_AMODE_CFG_VISA_CTRL_AMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_AMODE_CFG_VISA_CTRL_AMODE_BF_WID (32)
#define PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_AMODE_CFG_VISA_CTRL_AMODE_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_AMODE_CFG_VISA_CTRL_AMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_VISA_LANE0_SEL_AMODE register description at address offset 0xd8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_visa_lane0_sel_amode
  * LCPLL_DFX_VISA_LANE0 Register
  */

typedef union {
  struct {
    uint32_t CFG_VISA_LANE0_SEL_AMODE : 32;
    ///< Parallel VISA control for lane 0                         [7:0] byte
    ///< select                         [15:8] clock select
    ///< [16] clock bypass
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_visa_lane0_sel_amode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_AMODE_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_AMODE_RD_MASK (0xffffffffU)
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_AMODE_WR_MASK (0xffffffffU)


///< Parallel VISA control for lane 0                         [7:0] byte
///< select                         [15:8] clock select
///< [16] clock bypass
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_AMODE_CFG_VISA_LANE0_SEL_AMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_AMODE_CFG_VISA_LANE0_SEL_AMODE_BF_WID (32)
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_AMODE_CFG_VISA_LANE0_SEL_AMODE_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_AMODE_CFG_VISA_LANE0_SEL_AMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_VISA_LANE1_SEL_AMODE register description at address offset 0xdc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_visa_lane1_sel_amode
  * LCPLL_DFX_VISA_LANE1 Register
  */

typedef union {
  struct {
    uint32_t CFG_VISA_LANE1_SEL_AMODE : 32;
    ///< Parallel VISA control for lane 1                         [7:0] byte
    ///< select                         [15:8] clock select
    ///< [16] clock bypass
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_visa_lane1_sel_amode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_AMODE_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_AMODE_RD_MASK (0xffffffffU)
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_AMODE_WR_MASK (0xffffffffU)


///< Parallel VISA control for lane 1                         [7:0] byte
///< select                         [15:8] clock select
///< [16] clock bypass
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_AMODE_CFG_VISA_LANE1_SEL_AMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_AMODE_CFG_VISA_LANE1_SEL_AMODE_BF_WID (32)
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_AMODE_CFG_VISA_LANE1_SEL_AMODE_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_AMODE_CFG_VISA_LANE1_SEL_AMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_CNTR_BIST_SETTINGS_AMODE register description at address offset 0xe0
  *
  * Register default value:        0x00008B10
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_cntr_bist_settings_amode
  * LCPLL_CNTR_BIST_SETTINGS Register
  */

typedef union {
  struct {
    uint32_t O_PLLLOCK_SEL_AMODE : 2;
    ///< Selects mode of lock indicator:                         00: Counter
    ///< based lock                         01: Phase lock sticky high
    ///< 10: Boost done                         11: Counter based lock
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_LOCKTIMER_MAXCNT_AMODE : 14;
    ///< Counter target for counter based lock (o_plllock_sel=1,2) in refclk
    ///< cycles.                         Starts counting after VREG &#38; Kvcc
    ///< calibration completed.                         Used also to check
    ///< if raw phase lock asserted in time.                         Default
    ///< is ~25us for refclk of 156.25MHz.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x22C4"
    uint32_t CFG_PLLLOCK_STATE_SEL_AMODE : 1;
    ///< Selects when to enter &#38;quot;locked state&#38;quot; (which starts
    ///< VREG tracking loop, DTR temp tracking, feed-forward gain adaptive
    ///< loop and min/max capture):                         0: counter based
    ///< lock                         1: Phase lock sticky high
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_cntr_bist_settings_amode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_AMODE_DEFAULT (0x00008b10U)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_AMODE_RD_MASK (0x0001ffffU)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_AMODE_WR_MASK (0x0001ffffU)


///< Selects mode of lock indicator:                         00: Counter
///< based lock                         01: Phase lock sticky high
///< 10: Boost done                         11: Counter based lock
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_AMODE_O_PLLLOCK_SEL_AMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_AMODE_O_PLLLOCK_SEL_AMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_AMODE_O_PLLLOCK_SEL_AMODE_BF_MSK (0x00000003)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_AMODE_O_PLLLOCK_SEL_AMODE_BF_DEF (0x00000000)

///< Counter target for counter based lock (o_plllock_sel=1,2) in refclk
///< cycles.                         Starts counting after VREG &#38; Kvcc
///< calibration completed.                         Used also to check
///< if raw phase lock asserted in time.                         Default
///< is ~25us for refclk of 156.25MHz.
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_AMODE_CFG_LOCKTIMER_MAXCNT_AMODE_BF_OFF ( 2)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_AMODE_CFG_LOCKTIMER_MAXCNT_AMODE_BF_WID (14)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_AMODE_CFG_LOCKTIMER_MAXCNT_AMODE_BF_MSK (0x0000FFFC)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_AMODE_CFG_LOCKTIMER_MAXCNT_AMODE_BF_DEF (0x00008B10)

///< Selects when to enter &#38;quot;locked state&#38;quot; (which starts
///< VREG tracking loop, DTR temp tracking, feed-forward gain adaptive
///< loop and min/max capture):                         0: counter based
///< lock                         1: Phase lock sticky high
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_AMODE_CFG_PLLLOCK_STATE_SEL_AMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_AMODE_CFG_PLLLOCK_STATE_SEL_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_AMODE_CFG_PLLLOCK_STATE_SEL_AMODE_BF_MSK (0x00010000)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_AMODE_CFG_PLLLOCK_STATE_SEL_AMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_CALIB0_AMODE register description at address offset 0xe4
  *
  * Register default value:        0x801FDFD1
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_calib0_amode
  * LCPLL_CALIB0 Register
  */

typedef union {
  struct {
    uint32_t CFG_COARSE_LOOP_GSCALE_MAX_AMODE : 4;
    ///< Initial DTR FLL gain value (2&#39;s complement, 2^gscale).
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t CFG_COARSE_LOOP_GSCALE_MIN_AMODE : 4;
    ///< Final DTR FLL gain value (2&#39;s complement, 2^gscale).
    ///< AccessType="RW" BitOffset="4" ResetValue="0xD"
    uint32_t CFG_COARSE_LOOP_GSCALE_CNT_MAX_AMODE : 5;
    ///< Duration (in refclk cycles) of each gain in DTR FLL.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1F"
    uint32_t CFG_DCOCOARSE_OVRDEN_AMODE : 1;
    ///< DCO DTR FLL override enable. (DTR PLL would still work as usual)
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t CFG_DCOCOARSE_OVRD_AMODE : 8;
    ///< DCO DTR FLL override value when dtr_ovrden=1.
    ///< AccessType="RW" BitOffset="14" ResetValue="0x7F"
    uint32_t CFG_BOOSTGAIN_MAXCNT_AMODE : 10;
    ///< Duration (in fbclk cycles) of each gain in PLL boost, for both DTR
    ///< and fine loops.
    ///< AccessType="RW" BitOffset="22" ResetValue="0x200"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_calib0_amode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_CALIB0_AMODE_DEFAULT (0x801fdfd1U)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_AMODE_RD_MASK (0xffffffffU)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_AMODE_WR_MASK (0xffffffffU)


///< Initial DTR FLL gain value (2&#39;s complement, 2^gscale).
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_AMODE_CFG_COARSE_LOOP_GSCALE_MAX_AMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_AMODE_CFG_COARSE_LOOP_GSCALE_MAX_AMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_AMODE_CFG_COARSE_LOOP_GSCALE_MAX_AMODE_BF_MSK (0x0000000F)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_AMODE_CFG_COARSE_LOOP_GSCALE_MAX_AMODE_BF_DEF (0x00000001)

///< Final DTR FLL gain value (2&#39;s complement, 2^gscale).
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_AMODE_CFG_COARSE_LOOP_GSCALE_MIN_AMODE_BF_OFF ( 4)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_AMODE_CFG_COARSE_LOOP_GSCALE_MIN_AMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_AMODE_CFG_COARSE_LOOP_GSCALE_MIN_AMODE_BF_MSK (0x000000F0)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_AMODE_CFG_COARSE_LOOP_GSCALE_MIN_AMODE_BF_DEF (0x000000D0)

///< Duration (in refclk cycles) of each gain in DTR FLL.
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_AMODE_CFG_COARSE_LOOP_GSCALE_CNT_MAX_AMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_AMODE_CFG_COARSE_LOOP_GSCALE_CNT_MAX_AMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_AMODE_CFG_COARSE_LOOP_GSCALE_CNT_MAX_AMODE_BF_MSK (0x00001F00)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_AMODE_CFG_COARSE_LOOP_GSCALE_CNT_MAX_AMODE_BF_DEF (0x00001F00)

///< DCO DTR FLL override enable. (DTR PLL would still work as usual)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_AMODE_CFG_DCOCOARSE_OVRDEN_AMODE_BF_OFF (13)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_AMODE_CFG_DCOCOARSE_OVRDEN_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_AMODE_CFG_DCOCOARSE_OVRDEN_AMODE_BF_MSK (0x00002000)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_AMODE_CFG_DCOCOARSE_OVRDEN_AMODE_BF_DEF (0x00000000)

///< DCO DTR FLL override value when dtr_ovrden=1.
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_AMODE_CFG_DCOCOARSE_OVRD_AMODE_BF_OFF (14)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_AMODE_CFG_DCOCOARSE_OVRD_AMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_AMODE_CFG_DCOCOARSE_OVRD_AMODE_BF_MSK (0x003FC000)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_AMODE_CFG_DCOCOARSE_OVRD_AMODE_BF_DEF (0x001FC000)

///< Duration (in fbclk cycles) of each gain in PLL boost, for both DTR
///< and fine loops.
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_AMODE_CFG_BOOSTGAIN_MAXCNT_AMODE_BF_OFF (22)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_AMODE_CFG_BOOSTGAIN_MAXCNT_AMODE_BF_WID (10)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_AMODE_CFG_BOOSTGAIN_MAXCNT_AMODE_BF_MSK (0xFFC00000)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_AMODE_CFG_BOOSTGAIN_MAXCNT_AMODE_BF_DEF (0x80000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_CALIB1_AMODE register description at address offset 0xe8
  *
  * Register default value:        0x310420C7
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_calib1_amode
  * SERDES_LANE_ANA_PLL::CALIB1
  */

typedef union {
  struct {
    uint32_t CFG_FILTER_BOOSTFADE_FINE_EN_AMODE : 1;
    ///< When 1, fine PLL boost will gradually lower to zero in steps of 1.
    ///< When 0, fine PLL boost will change from initial boost to zero at once.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t CFG_FINE_PROP_COEFF_BOOST_VAL_AMODE : 4;
    ///< Fine PLL Kp boost. Unsigned value
    ///< AccessType="RW" BitOffset="1" ResetValue="0x3"
    uint32_t CFG_FINE_INT_COEFF_BOOST_VAL_AMODE : 5;
    ///< Fine PLL Ki boost. Unsigned value
    ///< AccessType="RW" BitOffset="5" ResetValue="0x6"
    uint32_t CFG_BOOST_FINE_CONST_ZETA_AMODE : 1;
    ///< Not needed. not validated                         If set to 1, FINE
    ///< Ki boost value will be twice as big as the FINE Kp boost value.
    ///< This will ensure that the zeta (damping factor) will remain constant
    ///< during the boost phase.                         This mode can only
    ///< be used in case the Kp boost is no larger than 3.
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t CFG_FULL_RANGE_AFC_SEL_AMODE : 1;
    ///< Limit AFC code.                         0 - Limit AFC code to max
    ///< value of 319.                         1 - Full range AFC code (0 -
    ///< 511).
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t CFG_SEC_AFC_CALIB_BINARY_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::CALIB1::cfg_sec_afc_calib_binary
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t CFG_FINE_PROP_COEFF_BOOST_STEP_AMODE : 4;
    ///< FINE PLL loop proportional gain boosting decrement step size during
    ///< gradual boost.
    ///< AccessType="RW" BitOffset="13" ResetValue="0x1"
    uint32_t CFG_FINE_INT_COEFF_BOOST_STEP_AMODE : 5;
    ///< FINE PLL loop integral gain boosting decrement step size during gradual
    ///< boost.
    ///< AccessType="RW" BitOffset="17" ResetValue="0x2"
    uint32_t CFG_FINE_PROP_COEFF_AMODE : 4;
    ///< Fine Kp = 2^(-reg)
    ///< AccessType="RW" BitOffset="22" ResetValue="0x4"
    uint32_t CFG_FINE_INT_COEFF_AMODE : 5;
    ///< Fine Ki = 2^(-reg)
    ///< AccessType="RW" BitOffset="26" ResetValue="0xC"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_calib1_amode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_CALIB1_AMODE_DEFAULT (0x310420c7U)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_AMODE_RD_MASK (0x7fffffffU)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_AMODE_WR_MASK (0x7fffffffU)


///< When 1, fine PLL boost will gradually lower to zero in steps of 1.
///< When 0, fine PLL boost will change from initial boost to zero at once.
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_AMODE_CFG_FILTER_BOOSTFADE_FINE_EN_AMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_AMODE_CFG_FILTER_BOOSTFADE_FINE_EN_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_AMODE_CFG_FILTER_BOOSTFADE_FINE_EN_AMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_AMODE_CFG_FILTER_BOOSTFADE_FINE_EN_AMODE_BF_DEF (0x00000001)

///< Fine PLL Kp boost. Unsigned value
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_AMODE_CFG_FINE_PROP_COEFF_BOOST_VAL_AMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_AMODE_CFG_FINE_PROP_COEFF_BOOST_VAL_AMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_AMODE_CFG_FINE_PROP_COEFF_BOOST_VAL_AMODE_BF_MSK (0x0000001E)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_AMODE_CFG_FINE_PROP_COEFF_BOOST_VAL_AMODE_BF_DEF (0x00000006)

///< Fine PLL Ki boost. Unsigned value
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_AMODE_CFG_FINE_INT_COEFF_BOOST_VAL_AMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_AMODE_CFG_FINE_INT_COEFF_BOOST_VAL_AMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_AMODE_CFG_FINE_INT_COEFF_BOOST_VAL_AMODE_BF_MSK (0x000003E0)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_AMODE_CFG_FINE_INT_COEFF_BOOST_VAL_AMODE_BF_DEF (0x000000C0)

///< Not needed. not validated                         If set to 1, FINE
///< Ki boost value will be twice as big as the FINE Kp boost value.
///< This will ensure that the zeta (damping factor) will remain constant
///< during the boost phase.                         This mode can only
///< be used in case the Kp boost is no larger than 3.
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_AMODE_CFG_BOOST_FINE_CONST_ZETA_AMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_AMODE_CFG_BOOST_FINE_CONST_ZETA_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_AMODE_CFG_BOOST_FINE_CONST_ZETA_AMODE_BF_MSK (0x00000400)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_AMODE_CFG_BOOST_FINE_CONST_ZETA_AMODE_BF_DEF (0x00000000)

///< Limit AFC code.                         0 - Limit AFC code to max
///< value of 319.                         1 - Full range AFC code (0 -
///< 511).
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_AMODE_CFG_FULL_RANGE_AFC_SEL_AMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_AMODE_CFG_FULL_RANGE_AFC_SEL_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_AMODE_CFG_FULL_RANGE_AFC_SEL_AMODE_BF_MSK (0x00000800)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_AMODE_CFG_FULL_RANGE_AFC_SEL_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::CALIB1::cfg_sec_afc_calib_binary
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_AMODE_CFG_SEC_AFC_CALIB_BINARY_AMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_AMODE_CFG_SEC_AFC_CALIB_BINARY_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_AMODE_CFG_SEC_AFC_CALIB_BINARY_AMODE_BF_MSK (0x00001000)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_AMODE_CFG_SEC_AFC_CALIB_BINARY_AMODE_BF_DEF (0x00000000)

///< FINE PLL loop proportional gain boosting decrement step size during
///< gradual boost.
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_AMODE_CFG_FINE_PROP_COEFF_BOOST_STEP_AMODE_BF_OFF (13)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_AMODE_CFG_FINE_PROP_COEFF_BOOST_STEP_AMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_AMODE_CFG_FINE_PROP_COEFF_BOOST_STEP_AMODE_BF_MSK (0x0001E000)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_AMODE_CFG_FINE_PROP_COEFF_BOOST_STEP_AMODE_BF_DEF (0x00002000)

///< FINE PLL loop integral gain boosting decrement step size during gradual
///< boost.
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_AMODE_CFG_FINE_INT_COEFF_BOOST_STEP_AMODE_BF_OFF (17)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_AMODE_CFG_FINE_INT_COEFF_BOOST_STEP_AMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_AMODE_CFG_FINE_INT_COEFF_BOOST_STEP_AMODE_BF_MSK (0x003E0000)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_AMODE_CFG_FINE_INT_COEFF_BOOST_STEP_AMODE_BF_DEF (0x00040000)

///< Fine Kp = 2^(-reg)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_AMODE_CFG_FINE_PROP_COEFF_AMODE_BF_OFF (22)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_AMODE_CFG_FINE_PROP_COEFF_AMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_AMODE_CFG_FINE_PROP_COEFF_AMODE_BF_MSK (0x03C00000)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_AMODE_CFG_FINE_PROP_COEFF_AMODE_BF_DEF (0x01000000)

///< Fine Ki = 2^(-reg)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_AMODE_CFG_FINE_INT_COEFF_AMODE_BF_OFF (26)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_AMODE_CFG_FINE_INT_COEFF_AMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_AMODE_CFG_FINE_INT_COEFF_AMODE_BF_MSK (0x7C000000)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_AMODE_CFG_FINE_INT_COEFF_AMODE_BF_DEF (0x30000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_CALIB2_AMODE register description at address offset 0xec
  *
  * Register default value:        0x00013812
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_calib2_amode
  * SERDES_LANE_ANA_PLL::CALIB2
  */

typedef union {
  struct {
    uint32_t CFG_TDCBBPD_EN_AMODE : 1;
    ///< Switches TDC into bang-bang mode, based on timer (cfg_tdcbbpd_cnt_limit).
    ///< If enabled, cfg_tdc_ladder_min register must be configured to 1 or
    ///< greater.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_TDCBBPD_CNT_LIMIT_AMODE : 4;
    ///< Determines the number of refclk cycles from lock timer done until
    ///< TDC turns into bang-bang mode: 2 ^ cfg_tdcbbpd_cnt_limit.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x9"
    uint32_t CFG_GAINCAL_UPDATE_RATE_AMODE : 4;
    ///< This field sets the rate of adaptive feed-forward gain.
    ///< Every time the modulated feedback divider ratio is 0.5 or more away
    ///< from the target                          ratio (with frac code), the
    ///< feed-forward gain loop checks the amount of change in
    ///< TDC effective (after feed-forward cancelation) and based on the sign
    ///< of that change                          it would increment/decrement
    ///< the feed-forward gain.                          Then this register
    ///< determines every how many adaptive-ffgain checks the gain will
    ///< actually be updated. This technique could be useful if ratio is around
    ///< 0.5, to avoid                          too frequent gain updates (which
    ///< could cause stability problems in the loop).
    ///< The adaptive ffgain loop will react every 2 ^ cfg_gaincal_update_rate
    ///< gain checks
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t CFG_REFCLK_CYCLES_PER_1US_MAXCNT_AMODE : 8;
    ///< This signal defines the number of refclk cycles that fit in 1us.
    ///< Used in VREG loop in steady-state, such that whenever DAC code is
    ///< updated, we wait some time based on this counter before start sensing
    ///< the comparator.                         Could be used potentially
    ///< in the future for other timers as well.                         Use
    ///< the following formula:                         Frefclk x 1usec
    ///< AccessType="RW" BitOffset="9" ResetValue="0x9C"
    uint32_t CFG_SCOVRDEN_AMODE : 1;
    ///< Super coarse overwrite enable.
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t CFG_SCOVRD_AMODE : 4;
    ///< Super coarse overwrite value.
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_calib2_amode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_CALIB2_AMODE_DEFAULT (0x00013812U)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_AMODE_RD_MASK (0x003fffffU)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_AMODE_WR_MASK (0x003fffffU)


///< Switches TDC into bang-bang mode, based on timer (cfg_tdcbbpd_cnt_limit).
///< If enabled, cfg_tdc_ladder_min register must be configured to 1 or
///< greater.
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_AMODE_CFG_TDCBBPD_EN_AMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_AMODE_CFG_TDCBBPD_EN_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_AMODE_CFG_TDCBBPD_EN_AMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_AMODE_CFG_TDCBBPD_EN_AMODE_BF_DEF (0x00000000)

///< Determines the number of refclk cycles from lock timer done until
///< TDC turns into bang-bang mode: 2 ^ cfg_tdcbbpd_cnt_limit.
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_AMODE_CFG_TDCBBPD_CNT_LIMIT_AMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_AMODE_CFG_TDCBBPD_CNT_LIMIT_AMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_AMODE_CFG_TDCBBPD_CNT_LIMIT_AMODE_BF_MSK (0x0000001E)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_AMODE_CFG_TDCBBPD_CNT_LIMIT_AMODE_BF_DEF (0x00000012)

///< This field sets the rate of adaptive feed-forward gain.
///< Every time the modulated feedback divider ratio is 0.5 or more away
///< from the target                          ratio (with frac code), the
///< feed-forward gain loop checks the amount of change in
///< TDC effective (after feed-forward cancelation) and based on the sign
///< of that change                          it would increment/decrement
///< the feed-forward gain.                          Then this register
///< determines every how many adaptive-ffgain checks the gain will
///< actually be updated. This technique could be useful if ratio is around
///< 0.5, to avoid                          too frequent gain updates (which
///< could cause stability problems in the loop).
///< The adaptive ffgain loop will react every 2 ^ cfg_gaincal_update_rate
///< gain checks
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_AMODE_CFG_GAINCAL_UPDATE_RATE_AMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_AMODE_CFG_GAINCAL_UPDATE_RATE_AMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_AMODE_CFG_GAINCAL_UPDATE_RATE_AMODE_BF_MSK (0x000001E0)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_AMODE_CFG_GAINCAL_UPDATE_RATE_AMODE_BF_DEF (0x00000000)

///< This signal defines the number of refclk cycles that fit in 1us.
///< Used in VREG loop in steady-state, such that whenever DAC code is
///< updated, we wait some time based on this counter before start sensing
///< the comparator.                         Could be used potentially
///< in the future for other timers as well.                         Use
///< the following formula:                         Frefclk x 1usec
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_AMODE_CFG_REFCLK_CYCLES_PER_1US_MAXCNT_AMODE_BF_OFF ( 9)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_AMODE_CFG_REFCLK_CYCLES_PER_1US_MAXCNT_AMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_AMODE_CFG_REFCLK_CYCLES_PER_1US_MAXCNT_AMODE_BF_MSK (0x0001FE00)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_AMODE_CFG_REFCLK_CYCLES_PER_1US_MAXCNT_AMODE_BF_DEF (0x00013800)

///< Super coarse overwrite enable.
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_AMODE_CFG_SCOVRDEN_AMODE_BF_OFF (17)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_AMODE_CFG_SCOVRDEN_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_AMODE_CFG_SCOVRDEN_AMODE_BF_MSK (0x00020000)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_AMODE_CFG_SCOVRDEN_AMODE_BF_DEF (0x00000000)

///< Super coarse overwrite value.
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_AMODE_CFG_SCOVRD_AMODE_BF_OFF (18)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_AMODE_CFG_SCOVRD_AMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_AMODE_CFG_SCOVRD_AMODE_BF_MSK (0x003C0000)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_AMODE_CFG_SCOVRD_AMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_PLL_FSM_CONTROL_AMODE register description at address offset 0xf0
  *
  * Register default value:        0x0000020E
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_pll_fsm_control_amode
  * SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL
  */

typedef union {
  struct {
    uint32_t CFG_DCOSETTLE_MODE_AMODE : 1;
    ///< Settling time exit mode. VREG calibration and all rest of PLL FSM
    ///< would start only after DCO has settle                         &#39;1&#39;:
    ///< fbclk detected                         &#39;0&#39;: timer
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_DCOSETTLE_TIME_AMODE : 4;
    ///< DCO settling time timer (cfg_dcosettle_mode=0).
    ///< refclk cycles = 2^reg
    ///< AccessType="RW" BitOffset="1" ResetValue="0x7"
    uint32_t CFG_SKIP_STDC_CALIB_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_stdc_calib
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t CFG_STAY_STDC_CALIB_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_stdc_calib
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t CFG_SKIP_VTDC_CALIB_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_vtdc_calib
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t CFG_STAY_VTDC_CALIB_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_vtdc_calib
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CFG_SKIP_SC_CALIB_AMODE : 1;
    ///< Skip the sc calib.
    ///< AccessType="RW" BitOffset="9" ResetValue="0x1"
    uint32_t CFG_STAY_SC_CALIB_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_sc_calib
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t CFG_SKIP_FIRST_AFC_CALIB_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_first_afc_calib
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t CFG_STAY_FIRST_AFC_CALIB_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_first_afc_calib
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t CFG_SKIP_DCO_SWING_CALIB_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_dco_swing_calib
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t CFG_STAY_DCO_SWING_CALIB_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_dco_swing_calib
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t CFG_SKIP_KVCC_CALIB_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_kvcc_calib
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t CFG_STAY_KVCC_CALIB_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_kvcc_calib
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t CFG_SKIP_SECOND_AFC_CALIB_AMODE : 1;
    ///< If set to 1, the PLL will only run one afc calibration before kvcc
    ///< calibration                         If set to 0, the PLL will run
    ///< the AFC calibration for the second time after kvcc calibration ends.
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t CFG_STAY_SECOND_AFC_CALIB_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_second_afc_calib
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t CFG_SKIP_FINE_FLL_CALIB_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_fine_fll_calib
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t CFG_STAY_FINE_FLL_CALIB_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_fine_fll_calib
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_pll_fsm_ctrl_amode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_DEFAULT (0x0000020eU)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_RD_MASK (0x001fffffU)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_WR_MASK (0x001fffffU)


///< Settling time exit mode. VREG calibration and all rest of PLL FSM
///< would start only after DCO has settle                         &#39;1&#39;:
///< fbclk detected                         &#39;0&#39;: timer
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_DCOSETTLE_MODE_AMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_DCOSETTLE_MODE_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_DCOSETTLE_MODE_AMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_DCOSETTLE_MODE_AMODE_BF_DEF (0x00000000)

///< DCO settling time timer (cfg_dcosettle_mode=0).
///< refclk cycles = 2^reg
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_DCOSETTLE_TIME_AMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_DCOSETTLE_TIME_AMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_DCOSETTLE_TIME_AMODE_BF_MSK (0x0000001E)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_DCOSETTLE_TIME_AMODE_BF_DEF (0x0000000E)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_stdc_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_SKIP_STDC_CALIB_AMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_SKIP_STDC_CALIB_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_SKIP_STDC_CALIB_AMODE_BF_MSK (0x00000020)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_SKIP_STDC_CALIB_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_stdc_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_STAY_STDC_CALIB_AMODE_BF_OFF ( 6)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_STAY_STDC_CALIB_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_STAY_STDC_CALIB_AMODE_BF_MSK (0x00000040)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_STAY_STDC_CALIB_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_vtdc_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_SKIP_VTDC_CALIB_AMODE_BF_OFF ( 7)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_SKIP_VTDC_CALIB_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_SKIP_VTDC_CALIB_AMODE_BF_MSK (0x00000080)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_SKIP_VTDC_CALIB_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_vtdc_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_STAY_VTDC_CALIB_AMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_STAY_VTDC_CALIB_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_STAY_VTDC_CALIB_AMODE_BF_MSK (0x00000100)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_STAY_VTDC_CALIB_AMODE_BF_DEF (0x00000000)

///< Skip the sc calib.
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_SKIP_SC_CALIB_AMODE_BF_OFF ( 9)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_SKIP_SC_CALIB_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_SKIP_SC_CALIB_AMODE_BF_MSK (0x00000200)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_SKIP_SC_CALIB_AMODE_BF_DEF (0x00000200)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_sc_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_STAY_SC_CALIB_AMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_STAY_SC_CALIB_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_STAY_SC_CALIB_AMODE_BF_MSK (0x00000400)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_STAY_SC_CALIB_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_first_afc_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_SKIP_FIRST_AFC_CALIB_AMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_SKIP_FIRST_AFC_CALIB_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_SKIP_FIRST_AFC_CALIB_AMODE_BF_MSK (0x00000800)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_SKIP_FIRST_AFC_CALIB_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_first_afc_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_STAY_FIRST_AFC_CALIB_AMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_STAY_FIRST_AFC_CALIB_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_STAY_FIRST_AFC_CALIB_AMODE_BF_MSK (0x00001000)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_STAY_FIRST_AFC_CALIB_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_dco_swing_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_SKIP_DCO_SWING_CALIB_AMODE_BF_OFF (13)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_SKIP_DCO_SWING_CALIB_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_SKIP_DCO_SWING_CALIB_AMODE_BF_MSK (0x00002000)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_SKIP_DCO_SWING_CALIB_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_dco_swing_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_STAY_DCO_SWING_CALIB_AMODE_BF_OFF (14)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_STAY_DCO_SWING_CALIB_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_STAY_DCO_SWING_CALIB_AMODE_BF_MSK (0x00004000)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_STAY_DCO_SWING_CALIB_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_kvcc_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_SKIP_KVCC_CALIB_AMODE_BF_OFF (15)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_SKIP_KVCC_CALIB_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_SKIP_KVCC_CALIB_AMODE_BF_MSK (0x00008000)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_SKIP_KVCC_CALIB_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_kvcc_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_STAY_KVCC_CALIB_AMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_STAY_KVCC_CALIB_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_STAY_KVCC_CALIB_AMODE_BF_MSK (0x00010000)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_STAY_KVCC_CALIB_AMODE_BF_DEF (0x00000000)

///< If set to 1, the PLL will only run one afc calibration before kvcc
///< calibration                         If set to 0, the PLL will run
///< the AFC calibration for the second time after kvcc calibration ends.
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_SKIP_SECOND_AFC_CALIB_AMODE_BF_OFF (17)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_SKIP_SECOND_AFC_CALIB_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_SKIP_SECOND_AFC_CALIB_AMODE_BF_MSK (0x00020000)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_SKIP_SECOND_AFC_CALIB_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_second_afc_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_STAY_SECOND_AFC_CALIB_AMODE_BF_OFF (18)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_STAY_SECOND_AFC_CALIB_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_STAY_SECOND_AFC_CALIB_AMODE_BF_MSK (0x00040000)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_STAY_SECOND_AFC_CALIB_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_fine_fll_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_SKIP_FINE_FLL_CALIB_AMODE_BF_OFF (19)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_SKIP_FINE_FLL_CALIB_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_SKIP_FINE_FLL_CALIB_AMODE_BF_MSK (0x00080000)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_SKIP_FINE_FLL_CALIB_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_fine_fll_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_STAY_FINE_FLL_CALIB_AMODE_BF_OFF (20)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_STAY_FINE_FLL_CALIB_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_STAY_FINE_FLL_CALIB_AMODE_BF_MSK (0x00100000)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_CFG_STAY_FINE_FLL_CALIB_AMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_TEMP_TRACKING_AMODE register description at address offset 0xf4
  *
  * Register default value:        0x00000027
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_temp_tracking_amode
  * SERDES_LANE_ANA_PLL::TEMP_TRACKING
  */

typedef union {
  struct {
    uint32_t CFG_TEMP_TRACK_EN_AMODE : 1;
    ///< Enable signal for the FINE and DTR temperature tracking feature.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t CFG_FINE2DTR_RATIO_AMODE : 6;
    ///< Sets the ratio between DTR cap and fine cap. Required for DTR temp
    ///< tracking.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x13"
    uint32_t CFG_SSC_TRACK_EN_AMODE : 1;
    ///< Set this to &#39;1&#39; for SSC&#39;ed refclk to enable fast cap-swap
    ///< during boost mode.
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_temp_tracking_amode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_AMODE_DEFAULT (0x00000027U)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_AMODE_RD_MASK (0x000000ffU)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_AMODE_WR_MASK (0x000000ffU)


///< Enable signal for the FINE and DTR temperature tracking feature.
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_AMODE_CFG_TEMP_TRACK_EN_AMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_AMODE_CFG_TEMP_TRACK_EN_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_AMODE_CFG_TEMP_TRACK_EN_AMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_AMODE_CFG_TEMP_TRACK_EN_AMODE_BF_DEF (0x00000001)

///< Sets the ratio between DTR cap and fine cap. Required for DTR temp
///< tracking.
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_AMODE_CFG_FINE2DTR_RATIO_AMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_AMODE_CFG_FINE2DTR_RATIO_AMODE_BF_WID ( 6)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_AMODE_CFG_FINE2DTR_RATIO_AMODE_BF_MSK (0x0000007E)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_AMODE_CFG_FINE2DTR_RATIO_AMODE_BF_DEF (0x00000026)

///< Set this to &#39;1&#39; for SSC&#39;ed refclk to enable fast cap-swap
///< during boost mode.
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_AMODE_CFG_SSC_TRACK_EN_AMODE_BF_OFF ( 7)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_AMODE_CFG_SSC_TRACK_EN_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_AMODE_CFG_SSC_TRACK_EN_AMODE_BF_MSK (0x00000080)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_AMODE_CFG_SSC_TRACK_EN_AMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_ANA_CONTROL1_AMODE register description at address offset 0xf8
  *
  * Register default value:        0x00000452
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_ana_control1_amode
  * LCPLL_ANA_CONTROL Register
  */

typedef union {
  struct {
    uint32_t CFG_PLL_BYPASS_AMODE : 1;
    ///< When 1, the following output clocks will drive out the input refclk
    ///< (after prediv). Relevant to common PLL only.
    ///< 100MHz refclk                         156.25MHz refclk
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_SDDIV_EN_AMODE : 1;
    ///< Ungates dco/2 clock that goes into filter&#39;s SD post divider.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x1"
    uint32_t CFG_SDDIV_RATIO_AMODE : 3;
    ///< Sets Fine and DTR SD clock division ratio, from 1 to 5. Input clock
    ///< is dco/2 so possible ratios are 2,4,6,8,10.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x4"
    uint32_t CFG_SD2F0_CLK_SEL_AMODE : 1;
    ///< Sets DTR SD clock division ratio:                         0 - fine
    ///< SD clock                         1 - fine SD clock further divided
    ///< by 2
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t CFG_PREDIV_RATIO_AMODE : 4;
    ///< Refclk pre-divider ratio, from 1 to 5, relevant only to lane PLL where
    ///< refclksel pin is tied to 0.
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t CFG_REFCLK4LANEDIV_EN_AMODE : 1;
    ///< Ungates dco/2 clock that goes into refclk156div post divider.
    ///< 1 - common PLL                         0 - lane PLL
    ///< AccessType="RW" BitOffset="10" ResetValue="0x1"
    uint32_t CFG_FBDIV_ENB_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL1::cfg_fbdiv_enb
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t CFG_DCODIV2_EN_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL1::cfg_dcodiv2_en
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
    uint32_t CFG_HSMON0_SEL_AMODE : 4;
    ///< Select signal for obsmux0:                         0: vss
    ///< 1: iclk_int_refclk                         2: o_fbclk2obs_clk
    ///< 3: iclk_dco_divby2                         4: iclk_dco_divby5
    ///< 5: a2f_lv_0p9_2obs                         6: vss
    ///< 7: cbdiv56_lanediv32_clk                         8: clk_to_pcs40_clk
    ///< 9: clk_to_pcs33_34_clk                         A: o_sd_dtr_clk
    ///< B: o_sd_fine_clk                         C: ock_a2f_lv_ldo
    ///< D: otdc_calib_clk                         E: i_plllock
    ///< F: i_visa8to1_2obs
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t CFG_HSMON0_40INV_EN_AMODE : 1;
    ///< When 0, selected signal on hsmon0 is further delayed by 40 inverters.
    ///< This is to analyze thermal noise and supply noise jitter
    ///< Note that lately we found that this mode is set when this reg is set
    ///< to 0 (rather than 1 as previously thought)
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t CFG_HSMON1_SEL_AMODE : 4;
    ///< Select signal for obsmux1. Same signals as in obsmux0.
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t CFG_HSMON1_40INV_EN_AMODE : 1;
    ///< When 0, selected signal on hsmon1 is further delayed by 40 inverters.
    ///< This is to analyze thermal noise and supply noise jitter
    ///< Note that lately we found that this mode is set when this reg is set
    ///< to 0 (rather than 1 as previously thought)
    ///< AccessType="RW" BitOffset="25" ResetValue="0x0"
    uint32_t CFG_CLK2POSTDIV_DIV2_SEL_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL1::cfg_clk2postdiv_div2_sel
    ///< AccessType="RW" BitOffset="26" ResetValue="0x0"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="27" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_ana_ctrl1_amode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_DEFAULT (0x00000452U)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_RD_MASK (0x07ff1fffU)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_WR_MASK (0x07ff1fffU)


///< When 1, the following output clocks will drive out the input refclk
///< (after prediv). Relevant to common PLL only.
///< 100MHz refclk                         156.25MHz refclk
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_CFG_PLL_BYP_AMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_CFG_PLL_BYP_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_CFG_PLL_BYP_AMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_CFG_PLL_BYP_AMODE_BF_DEF (0x00000000)

///< Ungates dco/2 clock that goes into filter&#39;s SD post divider.
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_CFG_SDDIV_EN_AMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_CFG_SDDIV_EN_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_CFG_SDDIV_EN_AMODE_BF_MSK (0x00000002)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_CFG_SDDIV_EN_AMODE_BF_DEF (0x00000002)

///< Sets Fine and DTR SD clock division ratio, from 1 to 5. Input clock
///< is dco/2 so possible ratios are 2,4,6,8,10.
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_CFG_SDDIV_RATIO_AMODE_BF_OFF ( 2)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_CFG_SDDIV_RATIO_AMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_CFG_SDDIV_RATIO_AMODE_BF_MSK (0x0000001C)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_CFG_SDDIV_RATIO_AMODE_BF_DEF (0x00000010)

///< Sets DTR SD clock division ratio:                         0 - fine
///< SD clock                         1 - fine SD clock further divided
///< by 2
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_CFG_SD2F0_CLK_SEL_AMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_CFG_SD2F0_CLK_SEL_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_CFG_SD2F0_CLK_SEL_AMODE_BF_MSK (0x00000020)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_CFG_SD2F0_CLK_SEL_AMODE_BF_DEF (0x00000000)

///< Refclk pre-divider ratio, from 1 to 5, relevant only to lane PLL where
///< refclksel pin is tied to 0.
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_CFG_PREDIV_RATIO_AMODE_BF_OFF ( 6)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_CFG_PREDIV_RATIO_AMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_CFG_PREDIV_RATIO_AMODE_BF_MSK (0x000003C0)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_CFG_PREDIV_RATIO_AMODE_BF_DEF (0x00000040)

///< Ungates dco/2 clock that goes into refclk156div post divider.
///< 1 - common PLL                         0 - lane PLL
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_CFG_REFCLK4LANEDIV_EN_AMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_CFG_REFCLK4LANEDIV_EN_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_CFG_REFCLK4LANEDIV_EN_AMODE_BF_MSK (0x00000400)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_CFG_REFCLK4LANEDIV_EN_AMODE_BF_DEF (0x00000400)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL1::cfg_fbdiv_enb
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_CFG_FBDIV_ENB_AMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_CFG_FBDIV_ENB_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_CFG_FBDIV_ENB_AMODE_BF_MSK (0x00000800)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_CFG_FBDIV_ENB_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL1::cfg_dcodiv2_en
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_CFG_DCODIV2_EN_AMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_CFG_DCODIV2_EN_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_CFG_DCODIV2_EN_AMODE_BF_MSK (0x00001000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_CFG_DCODIV2_EN_AMODE_BF_DEF (0x00000000)

///< Select signal for obsmux0:                         0: vss
///< 1: iclk_int_refclk                         2: o_fbclk2obs_clk
///< 3: iclk_dco_divby2                         4: iclk_dco_divby5
///< 5: a2f_lv_0p9_2obs                         6: vss
///< 7: cbdiv56_lanediv32_clk                         8: clk_to_pcs40_clk
///< 9: clk_to_pcs33_34_clk                         A: o_sd_dtr_clk
///< B: o_sd_fine_clk                         C: ock_a2f_lv_ldo
///< D: otdc_calib_clk                         E: i_plllock
///< F: i_visa8to1_2obs
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_CFG_HSMON0_SEL_AMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_CFG_HSMON0_SEL_AMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_CFG_HSMON0_SEL_AMODE_BF_MSK (0x000F0000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_CFG_HSMON0_SEL_AMODE_BF_DEF (0x00000000)

///< When 0, selected signal on hsmon0 is further delayed by 40 inverters.
///< This is to analyze thermal noise and supply noise jitter
///< Note that lately we found that this mode is set when this reg is set
///< to 0 (rather than 1 as previously thought)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_CFG_HSMON0_40INV_EN_AMODE_BF_OFF (20)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_CFG_HSMON0_40INV_EN_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_CFG_HSMON0_40INV_EN_AMODE_BF_MSK (0x00100000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_CFG_HSMON0_40INV_EN_AMODE_BF_DEF (0x00000000)

///< Select signal for obsmux1. Same signals as in obsmux0.
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_CFG_HSMON1_SEL_AMODE_BF_OFF (21)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_CFG_HSMON1_SEL_AMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_CFG_HSMON1_SEL_AMODE_BF_MSK (0x01E00000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_CFG_HSMON1_SEL_AMODE_BF_DEF (0x00000000)

///< When 0, selected signal on hsmon1 is further delayed by 40 inverters.
///< This is to analyze thermal noise and supply noise jitter
///< Note that lately we found that this mode is set when this reg is set
///< to 0 (rather than 1 as previously thought)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_CFG_HSMON1_40INV_EN_AMODE_BF_OFF (25)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_CFG_HSMON1_40INV_EN_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_CFG_HSMON1_40INV_EN_AMODE_BF_MSK (0x02000000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_CFG_HSMON1_40INV_EN_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL1::cfg_clk2postdiv_div2_sel
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_CFG_CLK2POSTDIV_DIV2_SEL_AMODE_BF_OFF (26)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_CFG_CLK2POSTDIV_DIV2_SEL_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_CFG_CLK2POSTDIV_DIV2_SEL_AMODE_BF_MSK (0x04000000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_CFG_CLK2POSTDIV_DIV2_SEL_AMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_ANA_CONTROL2_AMODE register description at address offset 0xfc
  *
  * Register default value:        0x000080A0
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_ana_control2_amode
  * SERDES_LANE_ANA_PLL::ANA_CONTROL2
  */

typedef union {
  struct {
    uint32_t CFG_REFCLK_SEL_AMODE : 1;
    ///< Relevant only if id_pll_refclksel[2:0] (on PLL interface) is set to
    ///< 3&#39;b0.                         Selects the refclk source for the
    ///< PLL:                         3&#39;h0 : vss
    ///< 3&#39;h1 : ref_clk_1                         3&#39;h2 : ref_clk_2
    ///< 3&#39;h3 : ref_clk_3                         3&#39;h4 : ref_clk_4
    ///< 3&#39;h5 : ref_clk_5                         3&#39;h6 : vss
    ///< 3&#39;h7 : vss
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_REFCLK4LANE_DIVRATIO_AMODE : 10;
    ///< Division ratio for refclk156 post divider (input clock is dco).
    ///< AccessType="RW" BitOffset="1" ResetValue="0x50"
    uint32_t CFG_A2F_CLKREG_EN_AMODE : 1;
    ///< Enables A2F.                         A2F are used to measure internal
    ///< supply noise.
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t CFG_A2F_CLKUNREG_EN_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL2::cfg_a2f_clkunreg_en
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t CFG_A2F_LDO_DCO_EN_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL2::cfg_a2f_ldo_dco_en
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t CFG_BTI_EN_AMODE : 1;
    ///< BTI clock gate signal. By default, whenever PLL is off, BTI clock
    ///< drives DCO clock distribution to prevent assymetric Aging. Setting
    ///< this register to &#39;1&#39; will gate BTI clock.
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t CFG_DCO_ACBUF2TX_EN_AMODE : 1;
    ///< Used as LDO enable.                         Gated by pll enable.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x1"
    uint32_t CFG_HSCNTR_HSCLK_SEL_OVR_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL2::cfg_hscntr_hsclk_sel_ovr
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t CFG_HSCNTR_HSCLK_SEL_OVR_VAL_AMODE : 3;
    ///< High speed counter (hscnter) input.                         &#39;0&#39;
    ///< - input from DCO/4 (default)                         &#39;1&#39; -
    ///< A2F_ldo clock is routed to high speed counter, allowing measurement
    ///< of A2F frequency in HVM (like in IDV)                         &#39;2&#39;
    ///< - A2F_lv clock is routed to high speed counter, allowing measurement
    ///< of A2F frequency in HVM (like in IDV)                         &#39;3&#39;
    ///< - vss
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t CFG_PLL_REFCLK_HSMODE_SEL_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL2::cfg_pll_refclk_hsmode_sel
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_ana_ctrl2_amode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_AMODE_DEFAULT (0x000080a0U)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_AMODE_RD_MASK (0x001fffffU)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_AMODE_WR_MASK (0x001fffffU)


///< Relevant only if id_pll_refclksel[2:0] (on PLL interface) is set to
///< 3&#39;b0.                         Selects the refclk source for the
///< PLL:                         3&#39;h0 : vss
///< 3&#39;h1 : ref_clk_1                         3&#39;h2 : ref_clk_2
///< 3&#39;h3 : ref_clk_3                         3&#39;h4 : ref_clk_4
///< 3&#39;h5 : ref_clk_5                         3&#39;h6 : vss
///< 3&#39;h7 : vss
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_AMODE_CFG_REFCLK_SEL_AMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_AMODE_CFG_REFCLK_SEL_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_AMODE_CFG_REFCLK_SEL_AMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_AMODE_CFG_REFCLK_SEL_AMODE_BF_DEF (0x00000000)

///< Division ratio for refclk156 post divider (input clock is dco).
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_AMODE_CFG_REFCLK4LANE_DIVRATIO_AMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_AMODE_CFG_REFCLK4LANE_DIVRATIO_AMODE_BF_WID (10)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_AMODE_CFG_REFCLK4LANE_DIVRATIO_AMODE_BF_MSK (0x000007FE)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_AMODE_CFG_REFCLK4LANE_DIVRATIO_AMODE_BF_DEF (0x000000A0)

///< Enables A2F.                         A2F are used to measure internal
///< supply noise.
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_AMODE_CFG_A2F_CLKREG_EN_AMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_AMODE_CFG_A2F_CLKREG_EN_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_AMODE_CFG_A2F_CLKREG_EN_AMODE_BF_MSK (0x00000800)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_AMODE_CFG_A2F_CLKREG_EN_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL2::cfg_a2f_clkunreg_en
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_AMODE_CFG_A2F_CLKUNREG_EN_AMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_AMODE_CFG_A2F_CLKUNREG_EN_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_AMODE_CFG_A2F_CLKUNREG_EN_AMODE_BF_MSK (0x00001000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_AMODE_CFG_A2F_CLKUNREG_EN_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL2::cfg_a2f_ldo_dco_en
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_AMODE_CFG_A2F_LDO_DCO_EN_AMODE_BF_OFF (13)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_AMODE_CFG_A2F_LDO_DCO_EN_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_AMODE_CFG_A2F_LDO_DCO_EN_AMODE_BF_MSK (0x00002000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_AMODE_CFG_A2F_LDO_DCO_EN_AMODE_BF_DEF (0x00000000)

///< BTI clock gate signal. By default, whenever PLL is off, BTI clock
///< drives DCO clock distribution to prevent assymetric Aging. Setting
///< this register to &#39;1&#39; will gate BTI clock.
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_AMODE_CFG_BTI_EN_AMODE_BF_OFF (14)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_AMODE_CFG_BTI_EN_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_AMODE_CFG_BTI_EN_AMODE_BF_MSK (0x00004000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_AMODE_CFG_BTI_EN_AMODE_BF_DEF (0x00000000)

///< Used as LDO enable.                         Gated by pll enable.
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_AMODE_CFG_DCO_ACBUF2TX_EN_AMODE_BF_OFF (15)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_AMODE_CFG_DCO_ACBUF2TX_EN_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_AMODE_CFG_DCO_ACBUF2TX_EN_AMODE_BF_MSK (0x00008000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_AMODE_CFG_DCO_ACBUF2TX_EN_AMODE_BF_DEF (0x00008000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL2::cfg_hscntr_hsclk_sel_ovr
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_AMODE_CFG_HSCNTR_HSCLK_SEL_OVR_AMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_AMODE_CFG_HSCNTR_HSCLK_SEL_OVR_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_AMODE_CFG_HSCNTR_HSCLK_SEL_OVR_AMODE_BF_MSK (0x00010000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_AMODE_CFG_HSCNTR_HSCLK_SEL_OVR_AMODE_BF_DEF (0x00000000)

///< High speed counter (hscnter) input.                         &#39;0&#39;
///< - input from DCO/4 (default)                         &#39;1&#39; -
///< A2F_ldo clock is routed to high speed counter, allowing measurement
///< of A2F frequency in HVM (like in IDV)                         &#39;2&#39;
///< - A2F_lv clock is routed to high speed counter, allowing measurement
///< of A2F frequency in HVM (like in IDV)                         &#39;3&#39;
///< - vss
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_AMODE_CFG_HSCNTR_HSCLK_SEL_OVR_VAL_AMODE_BF_OFF (17)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_AMODE_CFG_HSCNTR_HSCLK_SEL_OVR_VAL_AMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_AMODE_CFG_HSCNTR_HSCLK_SEL_OVR_VAL_AMODE_BF_MSK (0x000E0000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_AMODE_CFG_HSCNTR_HSCLK_SEL_OVR_VAL_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL2::cfg_pll_refclk_hsmode_sel
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_AMODE_CFG_PLL_REFCLK_HSMODE_SEL_AMODE_BF_OFF (20)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_AMODE_CFG_PLL_REFCLK_HSMODE_SEL_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_AMODE_CFG_PLL_REFCLK_HSMODE_SEL_AMODE_BF_MSK (0x00100000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_AMODE_CFG_PLL_REFCLK_HSMODE_SEL_AMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_ANA_CONTROL3_AMODE register description at address offset 0x100
  *
  * Register default value:        0x00A00001
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_ana_control3_amode
  * SERDES_LANE_ANA_PLL::ANA_CONTROL3
  */

typedef union {
  struct {
    uint32_t CFG_PKSEN_EN_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_en
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t CFG_PKSEN_COMP_AMODE : 4;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_comp
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t CFG_PKSEN_COMP_EN_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_comp_en
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t CFG_PKSEN_COMP_INN_SEL_AMODE : 2;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_comp_inn_sel
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t CFG_PKSEN_COMP_INP_SEL_AMODE : 2;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_comp_inp_sel
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CFG_PKSEN_COMP_VREF_VAL_AMODE : 6;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_comp_vref_val
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t CFG_PKSEN_VREF_SEL_AMODE : 6;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_vref_sel
    ///< AccessType="RW" BitOffset="16" ResetValue="0x20"
    uint32_t CFG_LDO_PKSEN_BYP_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_ldo_pksen_byp
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t CFG_PKSEN_RES_BYPB_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_res_bypb
    ///< AccessType="RW" BitOffset="23" ResetValue="0x1"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_ana_ctrl3_amode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_AMODE_DEFAULT (0x00a00001U)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_AMODE_RD_MASK (0x00ffffffU)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_AMODE_WR_MASK (0x00ffffffU)


///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_en
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_AMODE_CFG_PKSEN_EN_AMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_AMODE_CFG_PKSEN_EN_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_AMODE_CFG_PKSEN_EN_AMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_AMODE_CFG_PKSEN_EN_AMODE_BF_DEF (0x00000001)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_comp
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_AMODE_CFG_PKSEN_COMP_AMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_AMODE_CFG_PKSEN_COMP_AMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_AMODE_CFG_PKSEN_COMP_AMODE_BF_MSK (0x0000001E)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_AMODE_CFG_PKSEN_COMP_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_comp_en
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_AMODE_CFG_PKSEN_COMP_EN_AMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_AMODE_CFG_PKSEN_COMP_EN_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_AMODE_CFG_PKSEN_COMP_EN_AMODE_BF_MSK (0x00000020)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_AMODE_CFG_PKSEN_COMP_EN_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_comp_inn_sel
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_AMODE_CFG_PKSEN_COMP_INN_SEL_AMODE_BF_OFF ( 6)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_AMODE_CFG_PKSEN_COMP_INN_SEL_AMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_AMODE_CFG_PKSEN_COMP_INN_SEL_AMODE_BF_MSK (0x000000C0)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_AMODE_CFG_PKSEN_COMP_INN_SEL_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_comp_inp_sel
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_AMODE_CFG_PKSEN_COMP_INP_SEL_AMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_AMODE_CFG_PKSEN_COMP_INP_SEL_AMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_AMODE_CFG_PKSEN_COMP_INP_SEL_AMODE_BF_MSK (0x00000300)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_AMODE_CFG_PKSEN_COMP_INP_SEL_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_comp_vref_val
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_AMODE_CFG_PKSEN_COMP_VREF_VAL_AMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_AMODE_CFG_PKSEN_COMP_VREF_VAL_AMODE_BF_WID ( 6)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_AMODE_CFG_PKSEN_COMP_VREF_VAL_AMODE_BF_MSK (0x0000FC00)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_AMODE_CFG_PKSEN_COMP_VREF_VAL_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_vref_sel
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_AMODE_CFG_PKSEN_VREF_SEL_AMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_AMODE_CFG_PKSEN_VREF_SEL_AMODE_BF_WID ( 6)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_AMODE_CFG_PKSEN_VREF_SEL_AMODE_BF_MSK (0x003F0000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_AMODE_CFG_PKSEN_VREF_SEL_AMODE_BF_DEF (0x00200000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_ldo_pksen_byp
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_AMODE_CFG_LDO_PKSEN_BYP_AMODE_BF_OFF (22)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_AMODE_CFG_LDO_PKSEN_BYP_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_AMODE_CFG_LDO_PKSEN_BYP_AMODE_BF_MSK (0x00400000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_AMODE_CFG_LDO_PKSEN_BYP_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_res_bypb
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_AMODE_CFG_PKSEN_RES_BYPB_AMODE_BF_OFF (23)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_AMODE_CFG_PKSEN_RES_BYPB_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_AMODE_CFG_PKSEN_RES_BYPB_AMODE_BF_MSK (0x00800000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_AMODE_CFG_PKSEN_RES_BYPB_AMODE_BF_DEF (0x00800000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_DFX0_AMODE register description at address offset 0x104
  *
  * Register default value:        0x00040000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_dfx0_amode
  * SERDES_LANE_ANA_PLL::DFX0
  */

typedef union {
  struct {
    uint32_t CFG_FINE_MODULATION_EN_AMODE : 1;
    ///< Modulates fine code by adding an offset that toggles between values
    ///< defined by cfg_fine_modulation_sel.                          cfg_modulation_toggle_delay
    ///< sets modulation frequency.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_FINE_MODULATION_SEL_AMODE : 1;
    ///< Sets magnitude of fine modulation:                          0 - fine
    ///< offset toggles between 0 and +1.                         1 - fine
    ///< offset toggles between 0 and cfg_fine2dtr_ratio.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t CFG_TDCPE_MODULATION_EN_AMODE : 1;
    ///< Modulates TDC PE by adding an offset that toggles between 0 and 1.
    ///< cfg_modulation_toggle_delay sets modulation frequency.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t CFG_LDO_MODULATION_EN_AMODE : 1;
    ///< Modulates LDO by adding an offset that toggles between 0 and 1.
    ///< cfg_modulation_toggle_delay sets modulation frequency.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t CFG_MODULATION_TOGGLE_DELAY_AMODE : 4;
    ///< Sets modulation frequency.                         Code would toggle
    ///< every 2^reg refclk cycles.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t CFG_VISA8TO1_2OBS_SEL_AMODE : 3;
    ///< Selects which bit in VISA lane0 would be routed to high speed monitor
    ///< mux.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CFG_DFX_FEEDFWRD_OFFSET_OVR_EN_AMODE : 1;
    ///< Enables overriding feed forward offset. Useful in integer mode to
    ///< shift fbclk phase.
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t CFG_DFX_FEEDFWRDPHASE_OVR_VAL_AMODE : 5;
    ///< Sets feed forward offset override value. Useful in integer mode to
    ///< shift fbclk phase.                         The 9 integer bits, 3 fractional
    ///< bits.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t CFG_DFX_DISABLE_DFT_TIMER_OVRD_VAL_AMODE : 1;
    ///< When cfg_dfx_disable_dft_timer_ovrd_en=1, this bit will set DFT timer
    ///< mode.                          When 0, DFT measurements always run.
    ///< When 1, DFT measurements always off.                          No need
    ///< to change this reg. Just keep it at 0. (could have been removed)
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t CFG_DFX_DISABLE_DFT_TIMER_OVRD_EN_AMODE : 1;
    ///< When 0, DFT measurements would stop when minmax timer overflows.
    ///< When 1, DFT measurements run based on cfg_dfx_disable_dft_timer_ovrd_val.
    ///< AccessType="RW" BitOffset="18" ResetValue="0x1"
    uint32_t CFG_DPSO_BYPASS_MODE_AMODE : 1;
    ///< When 0, DPSO bus is sampled by fbclk falling edge before sent to TX
    ///< PISO                         When 1, the sample is bypassed. This
    ///< is needed when monitoring VISA signals that are not of fbclk nor on
    ///< refclk domain.
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_dfx0_amode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_DFX0_AMODE_DEFAULT (0x00040000U)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_AMODE_RD_MASK (0x000fffffU)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_AMODE_WR_MASK (0x000fffffU)


///< Modulates fine code by adding an offset that toggles between values
///< defined by cfg_fine_modulation_sel.                          cfg_modulation_toggle_delay
///< sets modulation frequency.
#define PMA_TXPLLCFGLOADER_MSG_DFX0_AMODE_CFG_FINE_MOD_EN_AMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_AMODE_CFG_FINE_MOD_EN_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_AMODE_CFG_FINE_MOD_EN_AMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_AMODE_CFG_FINE_MOD_EN_AMODE_BF_DEF (0x00000000)

///< Sets magnitude of fine modulation:                          0 - fine
///< offset toggles between 0 and +1.                         1 - fine
///< offset toggles between 0 and cfg_fine2dtr_ratio.
#define PMA_TXPLLCFGLOADER_MSG_DFX0_AMODE_CFG_FINE_MOD_SEL_AMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_AMODE_CFG_FINE_MOD_SEL_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_AMODE_CFG_FINE_MOD_SEL_AMODE_BF_MSK (0x00000002)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_AMODE_CFG_FINE_MOD_SEL_AMODE_BF_DEF (0x00000000)

///< Modulates TDC PE by adding an offset that toggles between 0 and 1.
///< cfg_modulation_toggle_delay sets modulation frequency.
#define PMA_TXPLLCFGLOADER_MSG_DFX0_AMODE_CFG_TDCPE_MOD_EN_AMODE_BF_OFF ( 2)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_AMODE_CFG_TDCPE_MOD_EN_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_AMODE_CFG_TDCPE_MOD_EN_AMODE_BF_MSK (0x00000004)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_AMODE_CFG_TDCPE_MOD_EN_AMODE_BF_DEF (0x00000000)

///< Modulates LDO by adding an offset that toggles between 0 and 1.
///< cfg_modulation_toggle_delay sets modulation frequency.
#define PMA_TXPLLCFGLOADER_MSG_DFX0_AMODE_CFG_LDO_MOD_EN_AMODE_BF_OFF ( 3)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_AMODE_CFG_LDO_MOD_EN_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_AMODE_CFG_LDO_MOD_EN_AMODE_BF_MSK (0x00000008)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_AMODE_CFG_LDO_MOD_EN_AMODE_BF_DEF (0x00000000)

///< Sets modulation frequency.                         Code would toggle
///< every 2^reg refclk cycles.
#define PMA_TXPLLCFGLOADER_MSG_DFX0_AMODE_CFG_MOD_TOGGLE_DELAY_AMODE_BF_OFF ( 4)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_AMODE_CFG_MOD_TOGGLE_DELAY_AMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_AMODE_CFG_MOD_TOGGLE_DELAY_AMODE_BF_MSK (0x000000F0)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_AMODE_CFG_MOD_TOGGLE_DELAY_AMODE_BF_DEF (0x00000000)

///< Selects which bit in VISA lane0 would be routed to high speed monitor
///< mux.
#define PMA_TXPLLCFGLOADER_MSG_DFX0_AMODE_CFG_VISA8TO1_2OBS_SEL_AMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_AMODE_CFG_VISA8TO1_2OBS_SEL_AMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_AMODE_CFG_VISA8TO1_2OBS_SEL_AMODE_BF_MSK (0x00000700)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_AMODE_CFG_VISA8TO1_2OBS_SEL_AMODE_BF_DEF (0x00000000)

///< Enables overriding feed forward offset. Useful in integer mode to
///< shift fbclk phase.
#define PMA_TXPLLCFGLOADER_MSG_DFX0_AMODE_CFG_DFX_FEEDFWRD_OFFSET_OVR_EN_AMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_AMODE_CFG_DFX_FEEDFWRD_OFFSET_OVR_EN_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_AMODE_CFG_DFX_FEEDFWRD_OFFSET_OVR_EN_AMODE_BF_MSK (0x00000800)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_AMODE_CFG_DFX_FEEDFWRD_OFFSET_OVR_EN_AMODE_BF_DEF (0x00000000)

///< Sets feed forward offset override value. Useful in integer mode to
///< shift fbclk phase.                         The 9 integer bits, 3 fractional
///< bits.
#define PMA_TXPLLCFGLOADER_MSG_DFX0_AMODE_CFG_DFX_FEEDFWRDPHASE_OVR_VAL_AMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_AMODE_CFG_DFX_FEEDFWRDPHASE_OVR_VAL_AMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_AMODE_CFG_DFX_FEEDFWRDPHASE_OVR_VAL_AMODE_BF_MSK (0x0001F000)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_AMODE_CFG_DFX_FEEDFWRDPHASE_OVR_VAL_AMODE_BF_DEF (0x00000000)

///< When cfg_dfx_disable_dft_timer_ovrd_en=1, this bit will set DFT timer
///< mode.                          When 0, DFT measurements always run.
///< When 1, DFT measurements always off.                          No need
///< to change this reg. Just keep it at 0. (could have been removed)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_AMODE_CFG_DFX_DIS_DFT_TIMER_OVRD_VAL_AMODE_BF_OFF (17)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_AMODE_CFG_DFX_DIS_DFT_TIMER_OVRD_VAL_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_AMODE_CFG_DFX_DIS_DFT_TIMER_OVRD_VAL_AMODE_BF_MSK (0x00020000)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_AMODE_CFG_DFX_DIS_DFT_TIMER_OVRD_VAL_AMODE_BF_DEF (0x00000000)

///< When 0, DFT measurements would stop when minmax timer overflows.
///< When 1, DFT measurements run based on cfg_dfx_disable_dft_timer_ovrd_val.
#define PMA_TXPLLCFGLOADER_MSG_DFX0_AMODE_CFG_DFX_DIS_DFT_TIMER_OVRD_EN_AMODE_BF_OFF (18)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_AMODE_CFG_DFX_DIS_DFT_TIMER_OVRD_EN_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_AMODE_CFG_DFX_DIS_DFT_TIMER_OVRD_EN_AMODE_BF_MSK (0x00040000)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_AMODE_CFG_DFX_DIS_DFT_TIMER_OVRD_EN_AMODE_BF_DEF (0x00040000)

///< When 0, DPSO bus is sampled by fbclk falling edge before sent to TX
///< PISO                         When 1, the sample is bypassed. This
///< is needed when monitoring VISA signals that are not of fbclk nor on
///< refclk domain.
#define PMA_TXPLLCFGLOADER_MSG_DFX0_AMODE_CFG_DPSO_BYP_MODE_AMODE_BF_OFF (19)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_AMODE_CFG_DPSO_BYP_MODE_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_AMODE_CFG_DPSO_BYP_MODE_AMODE_BF_MSK (0x00080000)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_AMODE_CFG_DPSO_BYP_MODE_AMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_DFX1_AMODE register description at address offset 0x108
  *
  * Register default value:        0x0001AAAA
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_dfx1_amode
  * SERDES_LANE_ANA_PLL::DFX1
  */

typedef union {
  struct {
    uint32_t CFG_DPSO_MARKER_AMODE : 16;
    ///< When serializing VISA 8b bus to TX, additional 16 (upper bits) are
    ///< set according to this register which could be used as a marker
    ///< AccessType="RW" BitOffset="0" ResetValue="0xAAAA"
    uint32_t CFG_TDCPE_MODULATION_VAL_AMODE : 5;
    ///< While cfg_tdcpe_modulation_en=1 define the TDC/STDC amplitude offset
    ///< (integer) during the tdc/stdc modulation.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x1"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_dfx1_amode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_DFX1_AMODE_DEFAULT (0x0001aaaaU)
#define PMA_TXPLLCFGLOADER_MSG_DFX1_AMODE_RD_MASK (0x001fffffU)
#define PMA_TXPLLCFGLOADER_MSG_DFX1_AMODE_WR_MASK (0x001fffffU)


///< When serializing VISA 8b bus to TX, additional 16 (upper bits) are
///< set according to this register which could be used as a marker
#define PMA_TXPLLCFGLOADER_MSG_DFX1_AMODE_CFG_DPSO_MARKER_AMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_DFX1_AMODE_CFG_DPSO_MARKER_AMODE_BF_WID (16)
#define PMA_TXPLLCFGLOADER_MSG_DFX1_AMODE_CFG_DPSO_MARKER_AMODE_BF_MSK (0x0000FFFF)
#define PMA_TXPLLCFGLOADER_MSG_DFX1_AMODE_CFG_DPSO_MARKER_AMODE_BF_DEF (0x0000AAAA)

///< While cfg_tdcpe_modulation_en=1 define the TDC/STDC amplitude offset
///< (integer) during the tdc/stdc modulation.
#define PMA_TXPLLCFGLOADER_MSG_DFX1_AMODE_CFG_TDCPE_MOD_VAL_AMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_DFX1_AMODE_CFG_TDCPE_MOD_VAL_AMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_DFX1_AMODE_CFG_TDCPE_MOD_VAL_AMODE_BF_MSK (0x001F0000)
#define PMA_TXPLLCFGLOADER_MSG_DFX1_AMODE_CFG_TDCPE_MOD_VAL_AMODE_BF_DEF (0x00010000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_LDO0_AMODE register description at address offset 0x10c
  *
  * Register default value:        0x059002E0
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_ldo0_amode
  * SERDES_LANE_ANA_PLL::LDO0
  */

typedef union {
  struct {
    uint32_t CFG_LDOCLK_BETA_AMODE : 3;
    ///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldoclk_beta
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_LDOCLK_BYP_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldoclk_byp
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t CFG_LDOCLK_VREF_SEL_AMODE : 6;
    ///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldoclk_vref_sel
    ///< AccessType="RW" BitOffset="4" ResetValue="0x2E"
    uint32_t CFG_LDODCO_BETA_AMODE : 3;
    ///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldodco_beta
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t CFG_LDODCO_BYP_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldodco_byp
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t CFG_LDODCO_VREF_RC_AMODE : 2;
    ///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldodco_vref_rc
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t CFG_LDODCO_VREF_SEL_AMODE : 6;
    ///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldodco_vref_sel
    ///< AccessType="RW" BitOffset="16" ResetValue="0x10"
    uint32_t CFG_LDODCO_HIGH_VREF_SEL_AMODE : 6;
    ///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldodco_high_vref_sel
    ///< AccessType="RW" BitOffset="22" ResetValue="0x16"
    uint32_t CFG_LDOREFGEN_BETA_AMODE : 3;
    ///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldorefgen_beta
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t CFG_VREFGEN_BYP_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::LDO0::cfg_vrefgen_byp
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_ldo0_amode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_LDO0_AMODE_DEFAULT (0x059002e0U)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_AMODE_RD_MASK (0xffffffffU)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_AMODE_WR_MASK (0xffffffffU)


///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldoclk_beta
#define PMA_TXPLLCFGLOADER_MSG_LDO0_AMODE_CFG_LDOCLK_BETA_AMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_AMODE_CFG_LDOCLK_BETA_AMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_AMODE_CFG_LDOCLK_BETA_AMODE_BF_MSK (0x00000007)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_AMODE_CFG_LDOCLK_BETA_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldoclk_byp
#define PMA_TXPLLCFGLOADER_MSG_LDO0_AMODE_CFG_LDOCLK_BYP_AMODE_BF_OFF ( 3)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_AMODE_CFG_LDOCLK_BYP_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_AMODE_CFG_LDOCLK_BYP_AMODE_BF_MSK (0x00000008)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_AMODE_CFG_LDOCLK_BYP_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldoclk_vref_sel
#define PMA_TXPLLCFGLOADER_MSG_LDO0_AMODE_CFG_LDOCLK_VREF_SEL_AMODE_BF_OFF ( 4)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_AMODE_CFG_LDOCLK_VREF_SEL_AMODE_BF_WID ( 6)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_AMODE_CFG_LDOCLK_VREF_SEL_AMODE_BF_MSK (0x000003F0)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_AMODE_CFG_LDOCLK_VREF_SEL_AMODE_BF_DEF (0x000002E0)

///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldodco_beta
#define PMA_TXPLLCFGLOADER_MSG_LDO0_AMODE_CFG_LDODCO_BETA_AMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_AMODE_CFG_LDODCO_BETA_AMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_AMODE_CFG_LDODCO_BETA_AMODE_BF_MSK (0x00001C00)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_AMODE_CFG_LDODCO_BETA_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldodco_byp
#define PMA_TXPLLCFGLOADER_MSG_LDO0_AMODE_CFG_LDODCO_BYP_AMODE_BF_OFF (13)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_AMODE_CFG_LDODCO_BYP_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_AMODE_CFG_LDODCO_BYP_AMODE_BF_MSK (0x00002000)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_AMODE_CFG_LDODCO_BYP_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldodco_vref_rc
#define PMA_TXPLLCFGLOADER_MSG_LDO0_AMODE_CFG_LDODCO_VREF_RC_AMODE_BF_OFF (14)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_AMODE_CFG_LDODCO_VREF_RC_AMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_AMODE_CFG_LDODCO_VREF_RC_AMODE_BF_MSK (0x0000C000)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_AMODE_CFG_LDODCO_VREF_RC_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldodco_vref_sel
#define PMA_TXPLLCFGLOADER_MSG_LDO0_AMODE_CFG_LDODCO_VREF_SEL_AMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_AMODE_CFG_LDODCO_VREF_SEL_AMODE_BF_WID ( 6)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_AMODE_CFG_LDODCO_VREF_SEL_AMODE_BF_MSK (0x003F0000)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_AMODE_CFG_LDODCO_VREF_SEL_AMODE_BF_DEF (0x00100000)

///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldodco_high_vref_sel
#define PMA_TXPLLCFGLOADER_MSG_LDO0_AMODE_CFG_LDODCO_HIGH_VREF_SEL_AMODE_BF_OFF (22)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_AMODE_CFG_LDODCO_HIGH_VREF_SEL_AMODE_BF_WID ( 6)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_AMODE_CFG_LDODCO_HIGH_VREF_SEL_AMODE_BF_MSK (0x0FC00000)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_AMODE_CFG_LDODCO_HIGH_VREF_SEL_AMODE_BF_DEF (0x05800000)

///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldorefgen_beta
#define PMA_TXPLLCFGLOADER_MSG_LDO0_AMODE_CFG_LDOREFGEN_BETA_AMODE_BF_OFF (28)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_AMODE_CFG_LDOREFGEN_BETA_AMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_AMODE_CFG_LDOREFGEN_BETA_AMODE_BF_MSK (0x70000000)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_AMODE_CFG_LDOREFGEN_BETA_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO0::cfg_vrefgen_byp
#define PMA_TXPLLCFGLOADER_MSG_LDO0_AMODE_CFG_VREFGEN_BYP_AMODE_BF_OFF (31)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_AMODE_CFG_VREFGEN_BYP_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_AMODE_CFG_VREFGEN_BYP_AMODE_BF_MSK (0x80000000)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_AMODE_CFG_VREFGEN_BYP_AMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_LDO1_AMODE register description at address offset 0x110
  *
  * Register default value:        0x000000E0
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_ldo1_amode
  * SERDES_LANE_ANA_PLL::LDO1
  */

typedef union {
  struct {
    uint32_t CFG_INV_VPEAK_COMB_FB_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::LDO1::cfg_inv_vpeak_comb_fb
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_LDO_BIAS_SEL_AMODE : 3;
    ///< SERDES_LANE_ANA_PLL::LDO1::cfg_ldo_bias_sel
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t CFG_LDO_BIAS_EXT_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::LDO1::cfg_ldo_bias_ext
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t CFG_LDO_PKSEN_HIGHZ_B_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::LDO1::cfg_ldo_pksen_highz_b
    ///< AccessType="RW" BitOffset="5" ResetValue="0x1"
    uint32_t CFG_LDO_CLK_HIGHZ_B_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::LDO1::cfg_ldo_clk_highz_b
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t CFG_LDO_DCO_HIGHZ_B_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::LDO1::cfg_ldo_dco_highz_b
    ///< AccessType="RW" BitOffset="7" ResetValue="0x1"
    uint32_t CFG_DCMON_SEL_AMODE : 4;
    ///< Selection pins for DFx MUXs
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CFG_DCMON1_EN_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::LDO1::cfg_dcmon1_en
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t CFG_DCMON2_EN_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::LDO1::cfg_dcmon2_en
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t  : 18;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_ldo1_amode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_LDO1_AMODE_DEFAULT (0x000000e0U)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_AMODE_RD_MASK (0x00003fffU)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_AMODE_WR_MASK (0x00003fffU)


///< SERDES_LANE_ANA_PLL::LDO1::cfg_inv_vpeak_comb_fb
#define PMA_TXPLLCFGLOADER_MSG_LDO1_AMODE_CFG_INV_VPEAK_COMB_FB_AMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_AMODE_CFG_INV_VPEAK_COMB_FB_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_AMODE_CFG_INV_VPEAK_COMB_FB_AMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_AMODE_CFG_INV_VPEAK_COMB_FB_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO1::cfg_ldo_bias_sel
#define PMA_TXPLLCFGLOADER_MSG_LDO1_AMODE_CFG_LDO_BIAS_SEL_AMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_AMODE_CFG_LDO_BIAS_SEL_AMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_AMODE_CFG_LDO_BIAS_SEL_AMODE_BF_MSK (0x0000000E)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_AMODE_CFG_LDO_BIAS_SEL_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO1::cfg_ldo_bias_ext
#define PMA_TXPLLCFGLOADER_MSG_LDO1_AMODE_CFG_LDO_BIAS_EXT_AMODE_BF_OFF ( 4)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_AMODE_CFG_LDO_BIAS_EXT_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_AMODE_CFG_LDO_BIAS_EXT_AMODE_BF_MSK (0x00000010)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_AMODE_CFG_LDO_BIAS_EXT_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO1::cfg_ldo_pksen_highz_b
#define PMA_TXPLLCFGLOADER_MSG_LDO1_AMODE_CFG_LDO_PKSEN_HIGHZ_B_AMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_AMODE_CFG_LDO_PKSEN_HIGHZ_B_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_AMODE_CFG_LDO_PKSEN_HIGHZ_B_AMODE_BF_MSK (0x00000020)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_AMODE_CFG_LDO_PKSEN_HIGHZ_B_AMODE_BF_DEF (0x00000020)

///< SERDES_LANE_ANA_PLL::LDO1::cfg_ldo_clk_highz_b
#define PMA_TXPLLCFGLOADER_MSG_LDO1_AMODE_CFG_LDO_CLK_HIGHZ_B_AMODE_BF_OFF ( 6)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_AMODE_CFG_LDO_CLK_HIGHZ_B_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_AMODE_CFG_LDO_CLK_HIGHZ_B_AMODE_BF_MSK (0x00000040)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_AMODE_CFG_LDO_CLK_HIGHZ_B_AMODE_BF_DEF (0x00000040)

///< SERDES_LANE_ANA_PLL::LDO1::cfg_ldo_dco_highz_b
#define PMA_TXPLLCFGLOADER_MSG_LDO1_AMODE_CFG_LDO_DCO_HIGHZ_B_AMODE_BF_OFF ( 7)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_AMODE_CFG_LDO_DCO_HIGHZ_B_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_AMODE_CFG_LDO_DCO_HIGHZ_B_AMODE_BF_MSK (0x00000080)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_AMODE_CFG_LDO_DCO_HIGHZ_B_AMODE_BF_DEF (0x00000080)

///< Selection pins for DFx MUXs
#define PMA_TXPLLCFGLOADER_MSG_LDO1_AMODE_CFG_DCMON_SEL_AMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_AMODE_CFG_DCMON_SEL_AMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_AMODE_CFG_DCMON_SEL_AMODE_BF_MSK (0x00000F00)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_AMODE_CFG_DCMON_SEL_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO1::cfg_dcmon1_en
#define PMA_TXPLLCFGLOADER_MSG_LDO1_AMODE_CFG_DCMON1_EN_AMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_AMODE_CFG_DCMON1_EN_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_AMODE_CFG_DCMON1_EN_AMODE_BF_MSK (0x00001000)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_AMODE_CFG_DCMON1_EN_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO1::cfg_dcmon2_en
#define PMA_TXPLLCFGLOADER_MSG_LDO1_AMODE_CFG_DCMON2_EN_AMODE_BF_OFF (13)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_AMODE_CFG_DCMON2_EN_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_AMODE_CFG_DCMON2_EN_AMODE_BF_MSK (0x00002000)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_AMODE_CFG_DCMON2_EN_AMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_KVCC0_AMODE register description at address offset 0x114
  *
  * Register default value:        0x080013C5
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_kvcc0_amode
  * SERDES_LANE_ANA_PLL::KVCC0
  */

typedef union {
  struct {
    uint32_t CFG_KVCC_SETTLE_MAXCNT_AMODE : 8;
    ///< Defines number of refclk cycles from DAC change to frequency measurement
    ///< during Kvcc calibration.                         VREG LPF is in bypass
    ///< mode with constant time is ~1nsec (115ohm*8.3pF).
    ///< Use the following formula:                         Frefclk x 1.26usec
    ///< AccessType="RW" BitOffset="0" ResetValue="0xC5"
    uint32_t CFG_KVCC_MEASURE_MAXCNT_AMODE : 3;
    ///< Defines number of refclk cycles over which the DCO frequency is measured
    ///< and averaged with high accuracy.                         It is used
    ///< for both Kvcc calibration and DFT frequency measurement mode.
    ///< refclk cycles = 2^(reg+6) - 1
    ///< AccessType="RW" BitOffset="8" ResetValue="0x3"
    uint32_t CFG_KVCCCALIB_LDO_OFFSET_AMODE : 3;
    ///< Amount of offset to inject into LDO for measuring frequency delta
    ///< that is needed for calibrating Kvcc. (Need to be ~30mv)
    ///< Common: use &#38;quot;2&#38;quot; as the default register value.
    ///< Lane: used &#38;quot;1&#38;quot; as a default override.
    ///< AccessType="RW" BitOffset="11" ResetValue="0x2"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t CFG_DFT_FREQ_MEAS_ENABLE_AMODE : 1;
    ///< DFT frequency measurement is triggered when this signal transitions
    ///< from 0 to 1.                         Make sure to set cfg_dfx_disable_dft_timer_ovrd_en=1
    ///< so that HS counter would remain active and cfg_kvcc_measure_maxcnt
    ///< to define number of refclk cycles.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t CFG_NOTCH_OFFSET_AMODE : 3;
    ///< Sets how many thermo bits to turn off from the notch filter
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t CFG_FULL_RANGE_KVCC_SEL_AMODE : 1;
    ///< Limit the kvcc full bin code according to thermal control bits in
    ///< the analog. Leaving it unlimited doesn&#39;t impact functionality
    ///< but just the read out of the Kvcc calibration. For proper Kvcc debug/characterization,
    ///< set according to the PLL:                         0 - code is limited
    ///< to 191d, 11 thermal bits in analog                         1 - (default)
    ///< Full binary code range
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t CFG_KVCC_INV_POLARITY_AMODE : 1;
    ///< A chicken bit to invert Kvcc polarity.
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t CFG_2F0_FINE_RATIO_AMODE : 7;
    ///< Fractional ratio. 32 is 1/4 (frac value = reg/2^7).
    ///< AccessType="RW" BitOffset="22" ResetValue="0x20"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_kvcc0_amode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_KVCC0_AMODE_DEFAULT (0x080013c5U)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_AMODE_RD_MASK (0x1fff3fffU)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_AMODE_WR_MASK (0x1fff3fffU)


///< Defines number of refclk cycles from DAC change to frequency measurement
///< during Kvcc calibration.                         VREG LPF is in bypass
///< mode with constant time is ~1nsec (115ohm*8.3pF).
///< Use the following formula:                         Frefclk x 1.26usec
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_AMODE_CFG_KVCC_SETTLE_MAXCNT_AMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_AMODE_CFG_KVCC_SETTLE_MAXCNT_AMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_AMODE_CFG_KVCC_SETTLE_MAXCNT_AMODE_BF_MSK (0x000000FF)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_AMODE_CFG_KVCC_SETTLE_MAXCNT_AMODE_BF_DEF (0x000000C5)

///< Defines number of refclk cycles over which the DCO frequency is measured
///< and averaged with high accuracy.                         It is used
///< for both Kvcc calibration and DFT frequency measurement mode.
///< refclk cycles = 2^(reg+6) - 1
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_AMODE_CFG_KVCC_MEAS_MAXCNT_AMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_AMODE_CFG_KVCC_MEAS_MAXCNT_AMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_AMODE_CFG_KVCC_MEAS_MAXCNT_AMODE_BF_MSK (0x00000700)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_AMODE_CFG_KVCC_MEAS_MAXCNT_AMODE_BF_DEF (0x00000300)

///< Amount of offset to inject into LDO for measuring frequency delta
///< that is needed for calibrating Kvcc. (Need to be ~30mv)
///< Common: use &#38;quot;2&#38;quot; as the default register value.
///< Lane: used &#38;quot;1&#38;quot; as a default override.
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_AMODE_CFG_KVCCCALIB_LDO_OFFSET_AMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_AMODE_CFG_KVCCCALIB_LDO_OFFSET_AMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_AMODE_CFG_KVCCCALIB_LDO_OFFSET_AMODE_BF_MSK (0x00003800)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_AMODE_CFG_KVCCCALIB_LDO_OFFSET_AMODE_BF_DEF (0x00001000)

///< DFT frequency measurement is triggered when this signal transitions
///< from 0 to 1.                         Make sure to set cfg_dfx_disable_dft_timer_ovrd_en=1
///< so that HS counter would remain active and cfg_kvcc_measure_maxcnt
///< to define number of refclk cycles.
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_AMODE_CFG_DFT_FREQ_MEAS_EN_AMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_AMODE_CFG_DFT_FREQ_MEAS_EN_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_AMODE_CFG_DFT_FREQ_MEAS_EN_AMODE_BF_MSK (0x00010000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_AMODE_CFG_DFT_FREQ_MEAS_EN_AMODE_BF_DEF (0x00000000)

///< Sets how many thermo bits to turn off from the notch filter
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_AMODE_CFG_NOTCH_OFFSET_AMODE_BF_OFF (17)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_AMODE_CFG_NOTCH_OFFSET_AMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_AMODE_CFG_NOTCH_OFFSET_AMODE_BF_MSK (0x000E0000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_AMODE_CFG_NOTCH_OFFSET_AMODE_BF_DEF (0x00000000)

///< Limit the kvcc full bin code according to thermal control bits in
///< the analog. Leaving it unlimited doesn&#39;t impact functionality
///< but just the read out of the Kvcc calibration. For proper Kvcc debug/characterization,
///< set according to the PLL:                         0 - code is limited
///< to 191d, 11 thermal bits in analog                         1 - (default)
///< Full binary code range
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_AMODE_CFG_FULL_RANGE_KVCC_SEL_AMODE_BF_OFF (20)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_AMODE_CFG_FULL_RANGE_KVCC_SEL_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_AMODE_CFG_FULL_RANGE_KVCC_SEL_AMODE_BF_MSK (0x00100000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_AMODE_CFG_FULL_RANGE_KVCC_SEL_AMODE_BF_DEF (0x00000000)

///< A chicken bit to invert Kvcc polarity.
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_AMODE_CFG_KVCC_INV_POLARITY_AMODE_BF_OFF (21)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_AMODE_CFG_KVCC_INV_POLARITY_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_AMODE_CFG_KVCC_INV_POLARITY_AMODE_BF_MSK (0x00200000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_AMODE_CFG_KVCC_INV_POLARITY_AMODE_BF_DEF (0x00000000)

///< Fractional ratio. 32 is 1/4 (frac value = reg/2^7).
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_AMODE_CFG_2F0_FINE_RATIO_AMODE_BF_OFF (22)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_AMODE_CFG_2F0_FINE_RATIO_AMODE_BF_WID ( 7)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_AMODE_CFG_2F0_FINE_RATIO_AMODE_BF_MSK (0x1FC00000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_AMODE_CFG_2F0_FINE_RATIO_AMODE_BF_DEF (0x08000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_KVCC1_AMODE register description at address offset 0x118
  *
  * Register default value:        0x000EF200
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_kvcc1_amode
  * SERDES_LANE_ANA_PLL::KVCC1
  */

typedef union {
  struct {
    uint32_t CFG_KVCC_CODE_OVRD_AMODE : 1;
    ///< DCO notch filter override enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_KVCC_CODE_VAL_AMODE : 9;
    ///< DCO notch filter override value (binary, before therm decoder).
    ///< AccessType="RW" BitOffset="1" ResetValue="0x100"
    uint32_t CFG_KVCC_LDO_OFFSET_EN_OVRD_AMODE : 1;
    ///< Takes control over internal Kvcc FSM for manually injecting an offset
    ///< to LDO (for letting FW calibrate Kvcc).
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t CFG_KVCC_LDO_OFFSET_EN_VAL_AMODE : 1;
    ///< When kvcc_ldo_offset_en_ovrd=1                         0 - doesn&#39;t
    ///< inject an offset to LDO                         1 - injects an offset
    ///< to LDO in magnitude as configured by kvcccalib_ldo_offset
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t CFG_KVCC_MAX_CODE_LIMIT_AMODE : 9;
    ///< While cfg_full_range_kvcc_sel = 0, define the max value for 2f0 code.
    ///< Common: 0x7F (127)                         Lane: 0x4F (79)
    ///< AccessType="RW" BitOffset="12" ResetValue="0xEF"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_kvcc1_amode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_KVCC1_AMODE_DEFAULT (0x000ef200U)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_AMODE_RD_MASK (0x001fffffU)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_AMODE_WR_MASK (0x001fffffU)


///< DCO notch filter override enable
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_AMODE_CFG_KVCC_CODE_OVRD_AMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_AMODE_CFG_KVCC_CODE_OVRD_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_AMODE_CFG_KVCC_CODE_OVRD_AMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_AMODE_CFG_KVCC_CODE_OVRD_AMODE_BF_DEF (0x00000000)

///< DCO notch filter override value (binary, before therm decoder).
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_AMODE_CFG_KVCC_CODE_VAL_AMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_AMODE_CFG_KVCC_CODE_VAL_AMODE_BF_WID ( 9)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_AMODE_CFG_KVCC_CODE_VAL_AMODE_BF_MSK (0x000003FE)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_AMODE_CFG_KVCC_CODE_VAL_AMODE_BF_DEF (0x00000200)

///< Takes control over internal Kvcc FSM for manually injecting an offset
///< to LDO (for letting FW calibrate Kvcc).
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_AMODE_CFG_KVCC_LDO_OFFSET_EN_OVRD_AMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_AMODE_CFG_KVCC_LDO_OFFSET_EN_OVRD_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_AMODE_CFG_KVCC_LDO_OFFSET_EN_OVRD_AMODE_BF_MSK (0x00000400)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_AMODE_CFG_KVCC_LDO_OFFSET_EN_OVRD_AMODE_BF_DEF (0x00000000)

///< When kvcc_ldo_offset_en_ovrd=1                         0 - doesn&#39;t
///< inject an offset to LDO                         1 - injects an offset
///< to LDO in magnitude as configured by kvcccalib_ldo_offset
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_AMODE_CFG_KVCC_LDO_OFFSET_EN_VAL_AMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_AMODE_CFG_KVCC_LDO_OFFSET_EN_VAL_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_AMODE_CFG_KVCC_LDO_OFFSET_EN_VAL_AMODE_BF_MSK (0x00000800)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_AMODE_CFG_KVCC_LDO_OFFSET_EN_VAL_AMODE_BF_DEF (0x00000000)

///< While cfg_full_range_kvcc_sel = 0, define the max value for 2f0 code.
///< Common: 0x7F (127)                         Lane: 0x4F (79)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_AMODE_CFG_KVCC_MAX_CODE_LIMIT_AMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_AMODE_CFG_KVCC_MAX_CODE_LIMIT_AMODE_BF_WID ( 9)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_AMODE_CFG_KVCC_MAX_CODE_LIMIT_AMODE_BF_MSK (0x001FF000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_AMODE_CFG_KVCC_MAX_CODE_LIMIT_AMODE_BF_DEF (0x000EF000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_KVCC2_AMODE register description at address offset 0x11c
  *
  * Register default value:        0x000000A9
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_kvcc2_amode
  * SERDES_LANE_ANA_PLL::KVCC2
  */

typedef union {
  struct {
    uint32_t CFG_KVCC_ADAPT_EN_AMODE : 1;
    ///< Kvcc on the fly adaptation enable.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t CFG_KVCC_ADAPT_MODE_AMODE : 2;
    ///< Defines kvcc adaptation mode.                         0(POR): full
    ///< (dithering on all 2f0 bus between current and next)
    ///< 1: single cap 0 (dithering on dedicated capacitor - 1 lsb)
    ///< 2: single cap 1 (dithering on dedicated capacitor - 2 lsb)
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t CFG_KVCC_ADAPT_THR_AMODE : 2;
    ///< Threshold for update the notch code.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x1"
    uint32_t CFG_KVCC_ADAPT_CTR_DELAY_AMODE : 3;
    ///< Sets update rate of 2f0 SD modulator (2f0 dithering) ramp code increment.
    ///< fbclk cycles = 2^reg
    ///< AccessType="RW" BitOffset="5" ResetValue="0x5"
    uint32_t CFG_KVCC_ADAPT_STEP_AMODE : 3;
    ///< Sets step size of 2f0 SD modulator (2f0 dithering) ramp code increment.
    ///< step = 2^(reg-9)                         Cycles to complete ramp =
    ///< 2^(9-adapt_step+adapt_ctr_delay)
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CFG_DFX_KVCC_ADAPT_TOGGLE_EN_AMODE : 1;
    ///< Enables a BIST to check 2f0 mechanism for temp tracking.
    ///< When enabled, 2f0 dithering SD modulator code is ramped up and down
    ///< continously.
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t CFG_DFX_KVCC_ADAPT_ENABLE_OVR_AMODE : 1;
    ///< Enables overriding code to 2f0 dithering SD modulator.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t CFG_DFX_KVCC_ADAPT_VAL_OVR_AMODE : 9;
    ///< 2f0 dithering SD modulator override value (when cfg_dfx_kvcc_adapt_enable_ovr=1)
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t CFG_DFX_KVCC_ADAPT_DIR_OVR_AMODE : 1;
    ///< In 2f0 dithering DFX modes, this bit does the following:
    ///< toggle mode (cfg_dfx_kvcc_adapt_toggle_en=1):
    ///< 0 - 2f0 would ramp down and up repeatedly
    ///< 1 - 2f0 would ramp up and down repeatedly
    ///< override mode (cfg_dfx_kvcc_adapt_enable_ovr=1):
    ///< 0 - 2f0 would dither between current code and current code -1
    ///< 1 - 2f0 would dither between current code and current code +1
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t CFG_KVCC_ADAPT_CHICKEN_BIT_AMODE : 1;
    ///< Define the polarity of the kvcc adaptation.
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t CFG_KVCC_ADAPT_BY_FW_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::KVCC2::cfg_kvcc_adapt_by_fw
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t CFG_START_2F0_STEP_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::KVCC2::cfg_start_2f0_step
    ///< AccessType="RW" BitOffset="25" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="26" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_kvcc2_amode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_DEFAULT (0x000000a9U)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_RD_MASK (0x03ffffffU)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_WR_MASK (0x03ffffffU)


///< Kvcc on the fly adaptation enable.
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_CFG_KVCC_ADAPT_EN_AMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_CFG_KVCC_ADAPT_EN_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_CFG_KVCC_ADAPT_EN_AMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_CFG_KVCC_ADAPT_EN_AMODE_BF_DEF (0x00000001)

///< Defines kvcc adaptation mode.                         0(POR): full
///< (dithering on all 2f0 bus between current and next)
///< 1: single cap 0 (dithering on dedicated capacitor - 1 lsb)
///< 2: single cap 1 (dithering on dedicated capacitor - 2 lsb)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_CFG_KVCC_ADAPT_MODE_AMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_CFG_KVCC_ADAPT_MODE_AMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_CFG_KVCC_ADAPT_MODE_AMODE_BF_MSK (0x00000006)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_CFG_KVCC_ADAPT_MODE_AMODE_BF_DEF (0x00000000)

///< Threshold for update the notch code.
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_CFG_KVCC_ADAPT_THR_AMODE_BF_OFF ( 3)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_CFG_KVCC_ADAPT_THR_AMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_CFG_KVCC_ADAPT_THR_AMODE_BF_MSK (0x00000018)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_CFG_KVCC_ADAPT_THR_AMODE_BF_DEF (0x00000008)

///< Sets update rate of 2f0 SD modulator (2f0 dithering) ramp code increment.
///< fbclk cycles = 2^reg
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_CFG_KVCC_ADAPT_CTR_DELAY_AMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_CFG_KVCC_ADAPT_CTR_DELAY_AMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_CFG_KVCC_ADAPT_CTR_DELAY_AMODE_BF_MSK (0x000000E0)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_CFG_KVCC_ADAPT_CTR_DELAY_AMODE_BF_DEF (0x000000A0)

///< Sets step size of 2f0 SD modulator (2f0 dithering) ramp code increment.
///< step = 2^(reg-9)                         Cycles to complete ramp =
///< 2^(9-adapt_step+adapt_ctr_delay)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_CFG_KVCC_ADAPT_STEP_AMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_CFG_KVCC_ADAPT_STEP_AMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_CFG_KVCC_ADAPT_STEP_AMODE_BF_MSK (0x00000700)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_CFG_KVCC_ADAPT_STEP_AMODE_BF_DEF (0x00000000)

///< Enables a BIST to check 2f0 mechanism for temp tracking.
///< When enabled, 2f0 dithering SD modulator code is ramped up and down
///< continously.
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_CFG_DFX_KVCC_ADAPT_TOGGLE_EN_AMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_CFG_DFX_KVCC_ADAPT_TOGGLE_EN_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_CFG_DFX_KVCC_ADAPT_TOGGLE_EN_AMODE_BF_MSK (0x00000800)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_CFG_DFX_KVCC_ADAPT_TOGGLE_EN_AMODE_BF_DEF (0x00000000)

///< Enables overriding code to 2f0 dithering SD modulator.
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_CFG_DFX_KVCC_ADAPT_EN_OVR_AMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_CFG_DFX_KVCC_ADAPT_EN_OVR_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_CFG_DFX_KVCC_ADAPT_EN_OVR_AMODE_BF_MSK (0x00001000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_CFG_DFX_KVCC_ADAPT_EN_OVR_AMODE_BF_DEF (0x00000000)

///< 2f0 dithering SD modulator override value (when cfg_dfx_kvcc_adapt_enable_ovr=1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_CFG_DFX_KVCC_ADAPT_VAL_OVR_AMODE_BF_OFF (13)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_CFG_DFX_KVCC_ADAPT_VAL_OVR_AMODE_BF_WID ( 9)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_CFG_DFX_KVCC_ADAPT_VAL_OVR_AMODE_BF_MSK (0x003FE000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_CFG_DFX_KVCC_ADAPT_VAL_OVR_AMODE_BF_DEF (0x00000000)

///< In 2f0 dithering DFX modes, this bit does the following:
///< toggle mode (cfg_dfx_kvcc_adapt_toggle_en=1):
///< 0 - 2f0 would ramp down and up repeatedly
///< 1 - 2f0 would ramp up and down repeatedly
///< override mode (cfg_dfx_kvcc_adapt_enable_ovr=1):
///< 0 - 2f0 would dither between current code and current code -1
///< 1 - 2f0 would dither between current code and current code +1
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_CFG_DFX_KVCC_ADAPT_DIR_OVR_AMODE_BF_OFF (22)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_CFG_DFX_KVCC_ADAPT_DIR_OVR_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_CFG_DFX_KVCC_ADAPT_DIR_OVR_AMODE_BF_MSK (0x00400000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_CFG_DFX_KVCC_ADAPT_DIR_OVR_AMODE_BF_DEF (0x00000000)

///< Define the polarity of the kvcc adaptation.
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_CFG_KVCC_ADAPT_CHICKEN_BIT_AMODE_BF_OFF (23)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_CFG_KVCC_ADAPT_CHICKEN_BIT_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_CFG_KVCC_ADAPT_CHICKEN_BIT_AMODE_BF_MSK (0x00800000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_CFG_KVCC_ADAPT_CHICKEN_BIT_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::KVCC2::cfg_kvcc_adapt_by_fw
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_CFG_KVCC_ADAPT_BY_FW_AMODE_BF_OFF (24)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_CFG_KVCC_ADAPT_BY_FW_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_CFG_KVCC_ADAPT_BY_FW_AMODE_BF_MSK (0x01000000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_CFG_KVCC_ADAPT_BY_FW_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::KVCC2::cfg_start_2f0_step
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_CFG_START_2F0_STEP_AMODE_BF_OFF (25)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_CFG_START_2F0_STEP_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_CFG_START_2F0_STEP_AMODE_BF_MSK (0x02000000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_CFG_START_2F0_STEP_AMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_SPARE0_AMODE register description at address offset 0x120
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_spare0_amode
  * SERDES_LANE_ANA_PLL::SPARE0
  */

typedef union {
  struct {
    uint32_t CFG_SPARE_DIG2ANA_AMODE : 11;
    ///< Spare controls to analog block.                         [10:0] unused
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 21;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_spare0_amode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_SPARE0_AMODE_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_SPARE0_AMODE_RD_MASK (0x000007ffU)
#define PMA_TXPLLCFGLOADER_MSG_SPARE0_AMODE_WR_MASK (0x000007ffU)


///< Spare controls to analog block.                         [10:0] unused
#define PMA_TXPLLCFGLOADER_MSG_SPARE0_AMODE_CFG_SPARE_DIG2ANA_AMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_SPARE0_AMODE_CFG_SPARE_DIG2ANA_AMODE_BF_WID (11)
#define PMA_TXPLLCFGLOADER_MSG_SPARE0_AMODE_CFG_SPARE_DIG2ANA_AMODE_BF_MSK (0x000007FF)
#define PMA_TXPLLCFGLOADER_MSG_SPARE0_AMODE_CFG_SPARE_DIG2ANA_AMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_SPARE1_AMODE register description at address offset 0x124
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_spare1_amode
  * SERDES_LANE_ANA_PLL::SPARE1
  */

typedef union {
  struct {
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="0" ResetValue="None"
    uint32_t CFG_SPARE_DIG2WRAP_AMODE : 20;
    ///< SERDES_LANE_ANA_PLL::SPARE1::cfg_spare_dig2wrap
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_spare1_amode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_SPARE1_AMODE_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_SPARE1_AMODE_RD_MASK (0x001ffffeU)
#define PMA_TXPLLCFGLOADER_MSG_SPARE1_AMODE_WR_MASK (0x001ffffeU)


///< SERDES_LANE_ANA_PLL::SPARE1::cfg_spare_dig2wrap
#define PMA_TXPLLCFGLOADER_MSG_SPARE1_AMODE_CFG_SPARE_DIG2WRAP_AMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_SPARE1_AMODE_CFG_SPARE_DIG2WRAP_AMODE_BF_WID (20)
#define PMA_TXPLLCFGLOADER_MSG_SPARE1_AMODE_CFG_SPARE_DIG2WRAP_AMODE_BF_MSK (0x001FFFFE)
#define PMA_TXPLLCFGLOADER_MSG_SPARE1_AMODE_CFG_SPARE_DIG2WRAP_AMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_DCO_SWING0_AMODE register description at address offset 0x128
  *
  * Register default value:        0x0022006D
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_dco_swing0_amode
  * SERDES_LANE_ANA_PLL::DCO_SWING0
  */

typedef union {
  struct {
    uint32_t CFG_DCO_SWING_VPEAK_MODE_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_dco_swing_vpeak_mode
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t CFG_PKSEN_VREF_TARGET_AMODE : 6;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_pksen_vref_target
    ///< AccessType="RW" BitOffset="1" ResetValue="0x36"
    uint32_t CFG_SKIP_DCO_SWING_SLEEP_SEL_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_skip_dco_swing_sleep_sel
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t CFG_DCO_SWING_BY_FW_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_dco_swing_by_fw
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CFG_START_PKSEN_READ_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_start_pksen_read
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t CFG_START_LDODCO_STEP_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_start_ldodco_step
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t CFG_LDODCO_STEP_DIR_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_ldodco_step_dir
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t CFG_LDODCO_STEP_CHICKEN_BIT_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_ldodco_step_chicken_bit
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t CFG_PKSEN_SETTLE_TIMER_LIMIT_AMODE : 3;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_pksen_settle_timer_limit
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t CFG_PKSEN_COMP_OUT_CHICKEN_BIT_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_pksen_comp_out_chicken_bit
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t CFG_LDODCO_ADAPT_EN_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_ldodco_adapt_en
    ///< AccessType="RW" BitOffset="17" ResetValue="0x1"
    uint32_t CFG_PKSEN_VREF_OVRD_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_pksen_vref_ovrd
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t CFG_LDODCO_VREF_OVRD_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_ldodco_vref_ovrd
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t CFG_LDODCO_STEP_SETTLE_TIMER_LIMIT_AMODE : 2;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_ldodco_step_settle_timer_limit
    ///< AccessType="RW" BitOffset="20" ResetValue="0x2"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_dco_swing0_amode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_DEFAULT (0x0022006dU)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_RD_MASK (0x003fffffU)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_WR_MASK (0x003fffffU)


///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_dco_swing_vpeak_mode
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_DCO_SWING_VPEAK_MODE_AMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_DCO_SWING_VPEAK_MODE_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_DCO_SWING_VPEAK_MODE_AMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_DCO_SWING_VPEAK_MODE_AMODE_BF_DEF (0x00000001)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_pksen_vref_target
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_PKSEN_VREF_TARGET_AMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_PKSEN_VREF_TARGET_AMODE_BF_WID ( 6)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_PKSEN_VREF_TARGET_AMODE_BF_MSK (0x0000007E)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_PKSEN_VREF_TARGET_AMODE_BF_DEF (0x0000006C)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_skip_dco_swing_sleep_sel
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_SKIP_DCO_SWING_SLEEP_SEL_AMODE_BF_OFF ( 7)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_SKIP_DCO_SWING_SLEEP_SEL_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_SKIP_DCO_SWING_SLEEP_SEL_AMODE_BF_MSK (0x00000080)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_SKIP_DCO_SWING_SLEEP_SEL_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_dco_swing_by_fw
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_DCO_SWING_BY_FW_AMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_DCO_SWING_BY_FW_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_DCO_SWING_BY_FW_AMODE_BF_MSK (0x00000100)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_DCO_SWING_BY_FW_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_start_pksen_read
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_START_PKSEN_READ_AMODE_BF_OFF ( 9)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_START_PKSEN_READ_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_START_PKSEN_READ_AMODE_BF_MSK (0x00000200)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_START_PKSEN_READ_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_start_ldodco_step
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_START_LDODCO_STEP_AMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_START_LDODCO_STEP_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_START_LDODCO_STEP_AMODE_BF_MSK (0x00000400)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_START_LDODCO_STEP_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_ldodco_step_dir
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_LDODCO_STEP_DIR_AMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_LDODCO_STEP_DIR_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_LDODCO_STEP_DIR_AMODE_BF_MSK (0x00000800)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_LDODCO_STEP_DIR_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_ldodco_step_chicken_bit
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_LDODCO_STEP_CHICKEN_BIT_AMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_LDODCO_STEP_CHICKEN_BIT_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_LDODCO_STEP_CHICKEN_BIT_AMODE_BF_MSK (0x00001000)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_LDODCO_STEP_CHICKEN_BIT_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_pksen_settle_timer_limit
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_PKSEN_SETTLE_TIMER_LIMIT_AMODE_BF_OFF (13)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_PKSEN_SETTLE_TIMER_LIMIT_AMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_PKSEN_SETTLE_TIMER_LIMIT_AMODE_BF_MSK (0x0000E000)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_PKSEN_SETTLE_TIMER_LIMIT_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_pksen_comp_out_chicken_bit
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_PKSEN_COMP_OUT_CHICKEN_BIT_AMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_PKSEN_COMP_OUT_CHICKEN_BIT_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_PKSEN_COMP_OUT_CHICKEN_BIT_AMODE_BF_MSK (0x00010000)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_PKSEN_COMP_OUT_CHICKEN_BIT_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_ldodco_adapt_en
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_LDODCO_ADAPT_EN_AMODE_BF_OFF (17)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_LDODCO_ADAPT_EN_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_LDODCO_ADAPT_EN_AMODE_BF_MSK (0x00020000)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_LDODCO_ADAPT_EN_AMODE_BF_DEF (0x00020000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_pksen_vref_ovrd
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_PKSEN_VREF_OVRD_AMODE_BF_OFF (18)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_PKSEN_VREF_OVRD_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_PKSEN_VREF_OVRD_AMODE_BF_MSK (0x00040000)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_PKSEN_VREF_OVRD_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_ldodco_vref_ovrd
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_LDODCO_VREF_OVRD_AMODE_BF_OFF (19)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_LDODCO_VREF_OVRD_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_LDODCO_VREF_OVRD_AMODE_BF_MSK (0x00080000)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_LDODCO_VREF_OVRD_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_ldodco_step_settle_timer_limit
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_LDODCO_STEP_SETTLE_TIMER_LIMIT_AMODE_BF_OFF (20)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_LDODCO_STEP_SETTLE_TIMER_LIMIT_AMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_LDODCO_STEP_SETTLE_TIMER_LIMIT_AMODE_BF_MSK (0x00300000)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_CFG_LDODCO_STEP_SETTLE_TIMER_LIMIT_AMODE_BF_DEF (0x00200000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_DCO_SWING1_AMODE register description at address offset 0x12c
  *
  * Register default value:        0x00000005
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_dco_swing1_amode
  * SERDES_LANE_ANA_PLL::DCO_SWING1
  */

typedef union {
  struct {
    uint32_t CFG_LDODCO_ADAPT_CTR_DELAY_AMODE : 3;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_ldodco_adapt_ctr_delay
    ///< AccessType="RW" BitOffset="0" ResetValue="0x5"
    uint32_t CFG_LDODCO_ADAPT_STEP_AMODE : 3;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_ldodco_adapt_step
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t CFG_DFX_LDODCO_ADAPT_TOGGLE_EN_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_dfx_ldodco_adapt_toggle_en
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t CFG_DFX_LDODCO_ADAPT_DIR_OVR_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_dfx_ldodco_adapt_dir_ovr
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t CFG_DFX_LDODCO_ADAPT_ENABLE_OVR_AMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_dfx_ldodco_adapt_enable_ovr
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CFG_DFX_LDODCO_ADAPT_VAL_OVR_AMODE : 9;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_dfx_ldodco_adapt_val_ovr
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_dco_swing1_amode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_AMODE_DEFAULT (0x00000005U)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_AMODE_RD_MASK (0x0003ffffU)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_AMODE_WR_MASK (0x0003ffffU)


///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_ldodco_adapt_ctr_delay
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_AMODE_CFG_LDODCO_ADAPT_CTR_DELAY_AMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_AMODE_CFG_LDODCO_ADAPT_CTR_DELAY_AMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_AMODE_CFG_LDODCO_ADAPT_CTR_DELAY_AMODE_BF_MSK (0x00000007)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_AMODE_CFG_LDODCO_ADAPT_CTR_DELAY_AMODE_BF_DEF (0x00000005)

///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_ldodco_adapt_step
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_AMODE_CFG_LDODCO_ADAPT_STEP_AMODE_BF_OFF ( 3)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_AMODE_CFG_LDODCO_ADAPT_STEP_AMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_AMODE_CFG_LDODCO_ADAPT_STEP_AMODE_BF_MSK (0x00000038)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_AMODE_CFG_LDODCO_ADAPT_STEP_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_dfx_ldodco_adapt_toggle_en
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_AMODE_CFG_DFX_LDODCO_ADAPT_TOGGLE_EN_AMODE_BF_OFF ( 6)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_AMODE_CFG_DFX_LDODCO_ADAPT_TOGGLE_EN_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_AMODE_CFG_DFX_LDODCO_ADAPT_TOGGLE_EN_AMODE_BF_MSK (0x00000040)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_AMODE_CFG_DFX_LDODCO_ADAPT_TOGGLE_EN_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_dfx_ldodco_adapt_dir_ovr
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_AMODE_CFG_DFX_LDODCO_ADAPT_DIR_OVR_AMODE_BF_OFF ( 7)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_AMODE_CFG_DFX_LDODCO_ADAPT_DIR_OVR_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_AMODE_CFG_DFX_LDODCO_ADAPT_DIR_OVR_AMODE_BF_MSK (0x00000080)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_AMODE_CFG_DFX_LDODCO_ADAPT_DIR_OVR_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_dfx_ldodco_adapt_enable_ovr
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_AMODE_CFG_DFX_LDODCO_ADAPT_EN_OVR_AMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_AMODE_CFG_DFX_LDODCO_ADAPT_EN_OVR_AMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_AMODE_CFG_DFX_LDODCO_ADAPT_EN_OVR_AMODE_BF_MSK (0x00000100)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_AMODE_CFG_DFX_LDODCO_ADAPT_EN_OVR_AMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_dfx_ldodco_adapt_val_ovr
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_AMODE_CFG_DFX_LDODCO_ADAPT_VAL_OVR_AMODE_BF_OFF ( 9)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_AMODE_CFG_DFX_LDODCO_ADAPT_VAL_OVR_AMODE_BF_WID ( 9)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_AMODE_CFG_DFX_LDODCO_ADAPT_VAL_OVR_AMODE_BF_MSK (0x0003FE00)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_AMODE_CFG_DFX_LDODCO_ADAPT_VAL_OVR_AMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_TDC4_AMODE register description at address offset 0x130
  *
  * Register default value:        0xCAB6A27C
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_tdc4_amode
  * SERDES_LANE_ANA_PLL::TDC4
  */

typedef union {
  struct {
    uint32_t CFG_VTDC_MINUS2_THRESH_AMODE : 8;
    ///< SERDES_LANE_ANA_PLL::TDC4::cfg_vtdc_minus2_thresh
    ///< AccessType="RW" BitOffset="0" ResetValue="0x7C"
    uint32_t CFG_VTDC_MINUS1_THRESH_AMODE : 8;
    ///< SERDES_LANE_ANA_PLL::TDC4::cfg_vtdc_minus1_thresh
    ///< AccessType="RW" BitOffset="8" ResetValue="0xA2"
    uint32_t CFG_VTDC_PLUS1_THRESH_AMODE : 8;
    ///< SERDES_LANE_ANA_PLL::TDC4::cfg_vtdc_plus1_thresh
    ///< AccessType="RW" BitOffset="16" ResetValue="0xB6"
    uint32_t CFG_VTDC_PLUS2_THRESH_AMODE : 8;
    ///< SERDES_LANE_ANA_PLL::TDC4::cfg_vtdc_plus2_thresh
    ///< AccessType="RW" BitOffset="24" ResetValue="0xCA"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_tdc4_amode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_TDC4_AMODE_DEFAULT (0xcab6a27cU)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_AMODE_RD_MASK (0xffffffffU)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_AMODE_WR_MASK (0xffffffffU)


///< SERDES_LANE_ANA_PLL::TDC4::cfg_vtdc_minus2_thresh
#define PMA_TXPLLCFGLOADER_MSG_TDC4_AMODE_CFG_VTDC_MINUS2_THRESH_AMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_AMODE_CFG_VTDC_MINUS2_THRESH_AMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_AMODE_CFG_VTDC_MINUS2_THRESH_AMODE_BF_MSK (0x000000FF)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_AMODE_CFG_VTDC_MINUS2_THRESH_AMODE_BF_DEF (0x0000007C)

///< SERDES_LANE_ANA_PLL::TDC4::cfg_vtdc_minus1_thresh
#define PMA_TXPLLCFGLOADER_MSG_TDC4_AMODE_CFG_VTDC_MINUS1_THRESH_AMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_AMODE_CFG_VTDC_MINUS1_THRESH_AMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_AMODE_CFG_VTDC_MINUS1_THRESH_AMODE_BF_MSK (0x0000FF00)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_AMODE_CFG_VTDC_MINUS1_THRESH_AMODE_BF_DEF (0x0000A200)

///< SERDES_LANE_ANA_PLL::TDC4::cfg_vtdc_plus1_thresh
#define PMA_TXPLLCFGLOADER_MSG_TDC4_AMODE_CFG_VTDC_PLUS1_THRESH_AMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_AMODE_CFG_VTDC_PLUS1_THRESH_AMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_AMODE_CFG_VTDC_PLUS1_THRESH_AMODE_BF_MSK (0x00FF0000)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_AMODE_CFG_VTDC_PLUS1_THRESH_AMODE_BF_DEF (0x00B60000)

///< SERDES_LANE_ANA_PLL::TDC4::cfg_vtdc_plus2_thresh
#define PMA_TXPLLCFGLOADER_MSG_TDC4_AMODE_CFG_VTDC_PLUS2_THRESH_AMODE_BF_OFF (24)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_AMODE_CFG_VTDC_PLUS2_THRESH_AMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_AMODE_CFG_VTDC_PLUS2_THRESH_AMODE_BF_MSK (0xFF000000)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_AMODE_CFG_VTDC_PLUS2_THRESH_AMODE_BF_DEF (0xCA000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_DIV0_BMODE register description at address offset 0x140
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_div0_bmode
  * LCPLL_DIV0 Register
  */

typedef union {
  struct {
    uint32_t O_FBDIV_FRAC_BMODE : 32;
    ///< Feedback divider fractional ratio.                          Total
    ///< ratio is:                         If cfg_dcodiv2_to_fbdiv_bypass=1
    ///< : (integer+fractional/2^32)                         otherwise : (integer+fractional/2^32)
    ///< x 2
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_div0_bmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_DIV0_BMODE_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_DIV0_BMODE_RD_MASK (0xffffffffU)
#define PMA_TXPLLCFGLOADER_MSG_DIV0_BMODE_WR_MASK (0xffffffffU)


///< Feedback divider fractional ratio.                          Total
///< ratio is:                         If cfg_dcodiv2_to_fbdiv_bypass=1
///< : (integer+fractional/2^32)                         otherwise : (integer+fractional/2^32)
///< x 2
#define PMA_TXPLLCFGLOADER_MSG_DIV0_BMODE_O_FBDIV_FRAC_BMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_DIV0_BMODE_O_FBDIV_FRAC_BMODE_BF_WID (32)
#define PMA_TXPLLCFGLOADER_MSG_DIV0_BMODE_O_FBDIV_FRAC_BMODE_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLLCFGLOADER_MSG_DIV0_BMODE_O_FBDIV_FRAC_BMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_DIV1_BMODE register description at address offset 0x144
  *
  * Register default value:        0x00003050
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_div1_bmode
  * LCPLL_DIV1 Register
  */

typedef union {
  struct {
    uint32_t O_FBDIV_INTGR_BMODE : 10;
    ///< Feedback divider integer ratio                         Total ratio
    ///< is:                         If cfg_dcodiv2_to_fbdiv_bypass=1 : (integer+fractional/2^32)
    ///< otherwise : (integer+fractional/2^32) x 2
    ///< Default is 80 for main common PLL (refclk 156.25MHz and Fdco 12.5GHz)
    ///< AccessType="RW" BitOffset="0" ResetValue="0x50"
    uint32_t O_FRACNEN_H_BMODE : 1;
    ///< Enables fractional ratio.                         Set this bit to
    ///< 0 if fractional ratio is 0, else to 1.                         If
    ///< this bit is 1 while fractional is 0 then fbclk to refclk phase won&#39;t
    ///< be deterministic.
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t CFG_REFCLK_CNT_LIMIT_BMODE : 3;
    ///< Defines number of refclk cycles in frequency measurement during AFC
    ///< calibration.                         Number of cycles = 2^reg
    ///< For 156MHz clock and 12.5GHz DCO clock, HS counter (@Fdco/2) samples
    ///< 40 cycles per refclk (=fbdiv_intgr).                         DTR step
    ///< size is 20MHz, so to achieve accuracy of 5MHz, HS counter should reach
    ///< 12.5G/5M=2500.                         Therefore refclk cycles = 2500/40=62.5,
    ///< so 2^6 would be appropriate.
    ///< use the following formula for other frequencies (Frefclk after prediv):
    ///< cfg_refclk_cnt_limit = round(log2(2*Frefclk/5MHz))
    ///< AccessType="RW" BitOffset="11" ResetValue="0x6"
    uint32_t CFG_FRACN_SD_STEP_EN_BMODE : 1;
    ///< Injects an impulse into fracN SD accumulator.
    ///< This inject a step in the feed-forward offset and as a result would
    ///< create a step on the PLL phase.                         This feature
    ///< can be useful in case of coupling between PLLs that run at exact same
    ///< frequency (both at fracN)
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t CFG_FRACN_SD_STEP_BMODE : 6;
    ///< Sets magnitude of step in fracN SD accumulator, which is added to
    ///< the MSB of the SD bus.                         Each LSB here would
    ///< shift PLL phase by 2xTdco/2^6
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t CFG_LF_BAND_INUSE_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DIV1::cfg_lf_band_inuse
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t CFG_LF_BAND_SEL_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DIV1::cfg_lf_band_sel
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t  : 9;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_div1_bmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_DIV1_BMODE_DEFAULT (0x00003050U)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_BMODE_RD_MASK (0x007fffffU)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_BMODE_WR_MASK (0x007fffffU)


///< Feedback divider integer ratio                         Total ratio
///< is:                         If cfg_dcodiv2_to_fbdiv_bypass=1 : (integer+fractional/2^32)
///< otherwise : (integer+fractional/2^32) x 2
///< Default is 80 for main common PLL (refclk 156.25MHz and Fdco 12.5GHz)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_BMODE_O_FBDIV_INTGR_BMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_BMODE_O_FBDIV_INTGR_BMODE_BF_WID (10)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_BMODE_O_FBDIV_INTGR_BMODE_BF_MSK (0x000003FF)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_BMODE_O_FBDIV_INTGR_BMODE_BF_DEF (0x00000050)

///< Enables fractional ratio.                         Set this bit to
///< 0 if fractional ratio is 0, else to 1.                         If
///< this bit is 1 while fractional is 0 then fbclk to refclk phase won&#39;t
///< be deterministic.
#define PMA_TXPLLCFGLOADER_MSG_DIV1_BMODE_O_FRACNEN_H_BMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_BMODE_O_FRACNEN_H_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_BMODE_O_FRACNEN_H_BMODE_BF_MSK (0x00000400)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_BMODE_O_FRACNEN_H_BMODE_BF_DEF (0x00000000)

///< Defines number of refclk cycles in frequency measurement during AFC
///< calibration.                         Number of cycles = 2^reg
///< For 156MHz clock and 12.5GHz DCO clock, HS counter (@Fdco/2) samples
///< 40 cycles per refclk (=fbdiv_intgr).                         DTR step
///< size is 20MHz, so to achieve accuracy of 5MHz, HS counter should reach
///< 12.5G/5M=2500.                         Therefore refclk cycles = 2500/40=62.5,
///< so 2^6 would be appropriate.
///< use the following formula for other frequencies (Frefclk after prediv):
///< cfg_refclk_cnt_limit = round(log2(2*Frefclk/5MHz))
#define PMA_TXPLLCFGLOADER_MSG_DIV1_BMODE_CFG_REFCLK_CNT_LIMIT_BMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_BMODE_CFG_REFCLK_CNT_LIMIT_BMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_BMODE_CFG_REFCLK_CNT_LIMIT_BMODE_BF_MSK (0x00003800)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_BMODE_CFG_REFCLK_CNT_LIMIT_BMODE_BF_DEF (0x00003000)

///< Injects an impulse into fracN SD accumulator.
///< This inject a step in the feed-forward offset and as a result would
///< create a step on the PLL phase.                         This feature
///< can be useful in case of coupling between PLLs that run at exact same
///< frequency (both at fracN)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_BMODE_CFG_FRACN_SD_STEP_EN_BMODE_BF_OFF (14)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_BMODE_CFG_FRACN_SD_STEP_EN_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_BMODE_CFG_FRACN_SD_STEP_EN_BMODE_BF_MSK (0x00004000)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_BMODE_CFG_FRACN_SD_STEP_EN_BMODE_BF_DEF (0x00000000)

///< Sets magnitude of step in fracN SD accumulator, which is added to
///< the MSB of the SD bus.                         Each LSB here would
///< shift PLL phase by 2xTdco/2^6
#define PMA_TXPLLCFGLOADER_MSG_DIV1_BMODE_CFG_FRACN_SD_STEP_BMODE_BF_OFF (15)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_BMODE_CFG_FRACN_SD_STEP_BMODE_BF_WID ( 6)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_BMODE_CFG_FRACN_SD_STEP_BMODE_BF_MSK (0x001F8000)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_BMODE_CFG_FRACN_SD_STEP_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DIV1::cfg_lf_band_inuse
#define PMA_TXPLLCFGLOADER_MSG_DIV1_BMODE_CFG_LF_BAND_INUSE_BMODE_BF_OFF (21)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_BMODE_CFG_LF_BAND_INUSE_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_BMODE_CFG_LF_BAND_INUSE_BMODE_BF_MSK (0x00200000)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_BMODE_CFG_LF_BAND_INUSE_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DIV1::cfg_lf_band_sel
#define PMA_TXPLLCFGLOADER_MSG_DIV1_BMODE_CFG_LF_BAND_SEL_BMODE_BF_OFF (22)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_BMODE_CFG_LF_BAND_SEL_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_BMODE_CFG_LF_BAND_SEL_BMODE_BF_MSK (0x00400000)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_BMODE_CFG_LF_BAND_SEL_BMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_ADL0_BMODE register description at address offset 0x148
  *
  * Register default value:        0x01800007
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_adl0_bmode
  * SERDES_LANE_ANA_PLL::ADL0
  */

typedef union {
  struct {
    uint32_t CFG_ADL_ENABLE_BMODE : 1;
    ///< Enable adaptive delay line in fracN mode (only when o_fracnen_h=1).
    ///< While &#39;1&#39; it is also disable feed-forward cancellation.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t CFG_ADL_RANGE_BMODE : 3;
    ///< Configs ADL range to be used. The formula (prelay results, need to
    ///< be updated):                         round((138.75 - 1.2e12/Fdco)/13.266)
    ///< [Fdco in Hz]
    ///< AccessType="RW" BitOffset="1" ResetValue="0x3"
    uint32_t CFG_ADL_POS_OFFSET_BMODE : 8;
    ///< Positive ADL INL compensation.                         Each register
    ///< bit corresponding to each cap_ctrl bus bit.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t CFG_ADL_NEG_OFFSET_BMODE : 8;
    ///< Negative ADL INL compensation.                         Each register
    ///< bit corresponding to each cap_ctrl bus bit.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t CFG_ADL_ENABLE_OVR_EN_BMODE : 1;
    ///< adl bypass/enable force (see adl_enable_ovr_val).
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t CFG_ADL_ENABLE_OVR_VAL_BMODE : 1;
    ///< While adl_enable_ovr_en= 1.                         0 - force adl
    ///< bypass.                         1 - force adl enable.
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t CFG_ADL_CAP_CTRL_OVR_EN_BMODE : 1;
    ///< Override enable for cfg_adl_cap_ctrl_ovr_val[8:0]
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t CFG_ADL_CAP_CTRL_OVR_VAL_BMODE : 9;
    ///< Override value for cap_ctrl bus to ADL.
    ///< AccessType="RW" BitOffset="23" ResetValue="0x3"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_adl0_bmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_ADL0_BMODE_DEFAULT (0x01800007U)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_BMODE_RD_MASK (0xffffffffU)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_BMODE_WR_MASK (0xffffffffU)


///< Enable adaptive delay line in fracN mode (only when o_fracnen_h=1).
///< While &#39;1&#39; it is also disable feed-forward cancellation.
#define PMA_TXPLLCFGLOADER_MSG_ADL0_BMODE_CFG_ADL_EN_BMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_BMODE_CFG_ADL_EN_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_BMODE_CFG_ADL_EN_BMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_BMODE_CFG_ADL_EN_BMODE_BF_DEF (0x00000001)

///< Configs ADL range to be used. The formula (prelay results, need to
///< be updated):                         round((138.75 - 1.2e12/Fdco)/13.266)
///< [Fdco in Hz]
#define PMA_TXPLLCFGLOADER_MSG_ADL0_BMODE_CFG_ADL_RANGE_BMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_BMODE_CFG_ADL_RANGE_BMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_BMODE_CFG_ADL_RANGE_BMODE_BF_MSK (0x0000000E)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_BMODE_CFG_ADL_RANGE_BMODE_BF_DEF (0x00000006)

///< Positive ADL INL compensation.                         Each register
///< bit corresponding to each cap_ctrl bus bit.
#define PMA_TXPLLCFGLOADER_MSG_ADL0_BMODE_CFG_ADL_POS_OFFSET_BMODE_BF_OFF ( 4)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_BMODE_CFG_ADL_POS_OFFSET_BMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_BMODE_CFG_ADL_POS_OFFSET_BMODE_BF_MSK (0x00000FF0)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_BMODE_CFG_ADL_POS_OFFSET_BMODE_BF_DEF (0x00000000)

///< Negative ADL INL compensation.                         Each register
///< bit corresponding to each cap_ctrl bus bit.
#define PMA_TXPLLCFGLOADER_MSG_ADL0_BMODE_CFG_ADL_NEG_OFFSET_BMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_BMODE_CFG_ADL_NEG_OFFSET_BMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_BMODE_CFG_ADL_NEG_OFFSET_BMODE_BF_MSK (0x000FF000)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_BMODE_CFG_ADL_NEG_OFFSET_BMODE_BF_DEF (0x00000000)

///< adl bypass/enable force (see adl_enable_ovr_val).
#define PMA_TXPLLCFGLOADER_MSG_ADL0_BMODE_CFG_ADL_EN_OVR_EN_BMODE_BF_OFF (20)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_BMODE_CFG_ADL_EN_OVR_EN_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_BMODE_CFG_ADL_EN_OVR_EN_BMODE_BF_MSK (0x00100000)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_BMODE_CFG_ADL_EN_OVR_EN_BMODE_BF_DEF (0x00000000)

///< While adl_enable_ovr_en= 1.                         0 - force adl
///< bypass.                         1 - force adl enable.
#define PMA_TXPLLCFGLOADER_MSG_ADL0_BMODE_CFG_ADL_EN_OVR_VAL_BMODE_BF_OFF (21)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_BMODE_CFG_ADL_EN_OVR_VAL_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_BMODE_CFG_ADL_EN_OVR_VAL_BMODE_BF_MSK (0x00200000)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_BMODE_CFG_ADL_EN_OVR_VAL_BMODE_BF_DEF (0x00000000)

///< Override enable for cfg_adl_cap_ctrl_ovr_val[8:0]
#define PMA_TXPLLCFGLOADER_MSG_ADL0_BMODE_CFG_ADL_CAP_CTRL_OVR_EN_BMODE_BF_OFF (22)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_BMODE_CFG_ADL_CAP_CTRL_OVR_EN_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_BMODE_CFG_ADL_CAP_CTRL_OVR_EN_BMODE_BF_MSK (0x00400000)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_BMODE_CFG_ADL_CAP_CTRL_OVR_EN_BMODE_BF_DEF (0x00000000)

///< Override value for cap_ctrl bus to ADL.
#define PMA_TXPLLCFGLOADER_MSG_ADL0_BMODE_CFG_ADL_CAP_CTRL_OVR_VAL_BMODE_BF_OFF (23)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_BMODE_CFG_ADL_CAP_CTRL_OVR_VAL_BMODE_BF_WID ( 9)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_BMODE_CFG_ADL_CAP_CTRL_OVR_VAL_BMODE_BF_MSK (0xFF800000)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_BMODE_CFG_ADL_CAP_CTRL_OVR_VAL_BMODE_BF_DEF (0x01800000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_ADL1_BMODE register description at address offset 0x14c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_adl1_bmode
  * SERDES_LANE_ANA_PLL::ADL1
  */

typedef union {
  struct {
    uint32_t CFG_ADL_MONITOR_OCT_SEL_BMODE : 8;
    ///< SERDES_LANE_ANA_PLL::ADL1::cfg_adl_monitor_oct_sel
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_TDC_STATUS_EN_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ADL1::cfg_tdc_status_en
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CFG_ADL_MONITOR_THR_BMODE : 5;
    ///< SERDES_LANE_ANA_PLL::ADL1::cfg_adl_monitor_thr
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t  : 18;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_adl1_bmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_ADL1_BMODE_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_BMODE_RD_MASK (0x00003fffU)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_BMODE_WR_MASK (0x00003fffU)


///< SERDES_LANE_ANA_PLL::ADL1::cfg_adl_monitor_oct_sel
#define PMA_TXPLLCFGLOADER_MSG_ADL1_BMODE_CFG_ADL_MON_OCT_SEL_BMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_BMODE_CFG_ADL_MON_OCT_SEL_BMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_BMODE_CFG_ADL_MON_OCT_SEL_BMODE_BF_MSK (0x000000FF)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_BMODE_CFG_ADL_MON_OCT_SEL_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ADL1::cfg_tdc_status_en
#define PMA_TXPLLCFGLOADER_MSG_ADL1_BMODE_CFG_TDC_STAT_EN_BMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_BMODE_CFG_TDC_STAT_EN_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_BMODE_CFG_TDC_STAT_EN_BMODE_BF_MSK (0x00000100)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_BMODE_CFG_TDC_STAT_EN_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ADL1::cfg_adl_monitor_thr
#define PMA_TXPLLCFGLOADER_MSG_ADL1_BMODE_CFG_ADL_MON_THR_BMODE_BF_OFF ( 9)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_BMODE_CFG_ADL_MON_THR_BMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_BMODE_CFG_ADL_MON_THR_BMODE_BF_MSK (0x00003E00)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_BMODE_CFG_ADL_MON_THR_BMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_FRAC_LOCK0_BMODE register description at address offset 0x150
  *
  * Register default value:        0x00002D0C
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_frac_lock0_bmode
  * LCPLL_FRAC_LOCK Register
  */

typedef union {
  struct {
    uint32_t O_FEEDFWRDGAIN_BMODE : 8;
    ///< Feed-forward gain for fractional mode.                         When
    ///< o_feedfwrdcal_en_h=0, this will determine the gain.
    ///< When o_feedfwrdcal_en_h=1, this will determine initial value of the
    ///< gain.                          Use the following formula:
    ///< Full rate: o_feedfwrdgain = 1/(Fdco*tdc_fine_step)
    ///< Half rate: o_feedfwrdgain = 2/(Fdco*tdc_fine_step)
    ///< For franN mode, tdc_fine_step is 6.5psec.
    ///< AccessType="RW" BitOffset="0" ResetValue="0xC"
    uint32_t O_FEEDFWRDCAL_EN_H_BMODE : 1;
    ///< Feedfward gain adaptive mode enable
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1"
    uint32_t O_FEEDFWRDCAL_PAUSE_H_BMODE : 1;
    ///< This bit is for dynamically turning on and off feed forward gain adaptive
    ///< mode.
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t O_DCODITHEREN_H_BMODE : 1;
    ///< DCO fine dithering enable signal.
    ///< AccessType="RW" BitOffset="10" ResetValue="0x1"
    uint32_t O_LOCK_CRITERIA_BMODE : 3;
    ///< Phase lock indicator criteria. Asserted high when phase error is less
    ///< than or equal to the threshold value for:
    ///< 000: 16 consecutive cycles                         001: 32 consecutive
    ///< cycles                         010: 48 consecutive cycles
    ///< 011: 64 consecutive cycles                         100: 80 consecutive
    ///< cycles                         101: 96 consecutive cycles
    ///< 110: 112 consecutive cycles                         111: 128 consecutive
    ///< cycles
    ///< AccessType="RW" BitOffset="11" ResetValue="0x5"
    uint32_t O_FBDIV_STROBE_H_BMODE : 1;
    ///< Enables sampling feedback ratio (integer+fractional) into PLL logic.
    ///< Before changing feedback ratio dynamically (while PLL is running),
    ///< one should deassert this bit until new ratio is udpated in registers.
    ///< This is to ensure safe and synchronoius update of ratio.
    ///< The feedback ratio will propagate automatically into PLL logic while
    ///< PLL is off until DCO settle state is done.
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t O_DITHER_VALUE_BMODE : 5;
    ///< DCO Dither Override Value (in case o_dither_ovrd=1).
    ///< 5 MSB of the filter fractional code (rest 4 LSBs are set to 0).
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t CFG_SIGMA_DELTA2_SEL_BMODE : 1;
    ///< 0 - Uses the first order sigma delta modulator for the feed forward
    ///< cancellation mechanism.                         1 - Uses the second
    ///< order sigma delta modulator for the feed forward cancellation mechanism.
    ///< Note that in this mode the adaptive ffgain feature doesn&#39;t work.
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t CFG_HIGH_SPEED_SD_EN_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::FRAC_LOCK0::cfg_high_speed_sd_en
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_frac_lock0_bmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_BMODE_DEFAULT (0x00002d0cU)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_BMODE_RD_MASK (0x003fffffU)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_BMODE_WR_MASK (0x003fffffU)


///< Feed-forward gain for fractional mode.                         When
///< o_feedfwrdcal_en_h=0, this will determine the gain.
///< When o_feedfwrdcal_en_h=1, this will determine initial value of the
///< gain.                          Use the following formula:
///< Full rate: o_feedfwrdgain = 1/(Fdco*tdc_fine_step)
///< Half rate: o_feedfwrdgain = 2/(Fdco*tdc_fine_step)
///< For franN mode, tdc_fine_step is 6.5psec.
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_BMODE_O_FEEDFWRDGAIN_BMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_BMODE_O_FEEDFWRDGAIN_BMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_BMODE_O_FEEDFWRDGAIN_BMODE_BF_MSK (0x000000FF)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_BMODE_O_FEEDFWRDGAIN_BMODE_BF_DEF (0x0000000C)

///< Feedfward gain adaptive mode enable
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_BMODE_O_FEEDFWRDCAL_EN_H_BMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_BMODE_O_FEEDFWRDCAL_EN_H_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_BMODE_O_FEEDFWRDCAL_EN_H_BMODE_BF_MSK (0x00000100)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_BMODE_O_FEEDFWRDCAL_EN_H_BMODE_BF_DEF (0x00000100)

///< This bit is for dynamically turning on and off feed forward gain adaptive
///< mode.
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_BMODE_O_FEEDFWRDCAL_PAUSE_H_BMODE_BF_OFF ( 9)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_BMODE_O_FEEDFWRDCAL_PAUSE_H_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_BMODE_O_FEEDFWRDCAL_PAUSE_H_BMODE_BF_MSK (0x00000200)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_BMODE_O_FEEDFWRDCAL_PAUSE_H_BMODE_BF_DEF (0x00000000)

///< DCO fine dithering enable signal.
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_BMODE_O_DCODITHEREN_H_BMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_BMODE_O_DCODITHEREN_H_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_BMODE_O_DCODITHEREN_H_BMODE_BF_MSK (0x00000400)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_BMODE_O_DCODITHEREN_H_BMODE_BF_DEF (0x00000400)

///< Phase lock indicator criteria. Asserted high when phase error is less
///< than or equal to the threshold value for:
///< 000: 16 consecutive cycles                         001: 32 consecutive
///< cycles                         010: 48 consecutive cycles
///< 011: 64 consecutive cycles                         100: 80 consecutive
///< cycles                         101: 96 consecutive cycles
///< 110: 112 consecutive cycles                         111: 128 consecutive
///< cycles
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_BMODE_O_LOCK_CRITERIA_BMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_BMODE_O_LOCK_CRITERIA_BMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_BMODE_O_LOCK_CRITERIA_BMODE_BF_MSK (0x00003800)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_BMODE_O_LOCK_CRITERIA_BMODE_BF_DEF (0x00002800)

///< Enables sampling feedback ratio (integer+fractional) into PLL logic.
///< Before changing feedback ratio dynamically (while PLL is running),
///< one should deassert this bit until new ratio is udpated in registers.
///< This is to ensure safe and synchronoius update of ratio.
///< The feedback ratio will propagate automatically into PLL logic while
///< PLL is off until DCO settle state is done.
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_BMODE_O_FBDIV_STROBE_H_BMODE_BF_OFF (14)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_BMODE_O_FBDIV_STROBE_H_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_BMODE_O_FBDIV_STROBE_H_BMODE_BF_MSK (0x00004000)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_BMODE_O_FBDIV_STROBE_H_BMODE_BF_DEF (0x00000000)

///< DCO Dither Override Value (in case o_dither_ovrd=1).
///< 5 MSB of the filter fractional code (rest 4 LSBs are set to 0).
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_BMODE_O_DITHER_VAL_BMODE_BF_OFF (15)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_BMODE_O_DITHER_VAL_BMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_BMODE_O_DITHER_VAL_BMODE_BF_MSK (0x000F8000)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_BMODE_O_DITHER_VAL_BMODE_BF_DEF (0x00000000)

///< 0 - Uses the first order sigma delta modulator for the feed forward
///< cancellation mechanism.                         1 - Uses the second
///< order sigma delta modulator for the feed forward cancellation mechanism.
///< Note that in this mode the adaptive ffgain feature doesn&#39;t work.
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_BMODE_CFG_SIGMA_DELTA2_SEL_BMODE_BF_OFF (20)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_BMODE_CFG_SIGMA_DELTA2_SEL_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_BMODE_CFG_SIGMA_DELTA2_SEL_BMODE_BF_MSK (0x00100000)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_BMODE_CFG_SIGMA_DELTA2_SEL_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::FRAC_LOCK0::cfg_high_speed_sd_en
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_BMODE_CFG_HIGH_SPEED_SD_EN_BMODE_BF_OFF (21)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_BMODE_CFG_HIGH_SPEED_SD_EN_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_BMODE_CFG_HIGH_SPEED_SD_EN_BMODE_BF_MSK (0x00200000)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_BMODE_CFG_HIGH_SPEED_SD_EN_BMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_FRAC_LOCK1_BMODE register description at address offset 0x154
  *
  * Register default value:        0x00000045
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_frac_lock1_bmode
  * SERDES_LANE_ANA_PLL::FRAC_LOCK1
  */

typedef union {
  struct {
    uint32_t CFG_LOCK_THRESH_BMODE : 5;
    ///< Phase lock detect threshold.                         The PLL will
    ///< generate plllockout when the TDC phase error is within lockthresh
    ///< for a number of cycles determined by o_lock_criteria.
    ///< 0 is forbidden value.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x5"
    uint32_t CFG_FINE_FIRST_BOOST_REPEAT_BMODE : 3;
    ///< Determines the number of repetitions of the boost gain counter for
    ///< the first stage of the fine boost.                         The number
    ///< of overall repetitions is equal to cfg_fine_first_boost_repeat + 1
    ///< Set this to non-zero when PLL needs to lock on SSC&#39;ed refclk,
    ///< to allow enough time for the boost to handle fast cap-swap.
    ///< AccessType="RW" BitOffset="5" ResetValue="0x2"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_frac_lock1_bmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_BMODE_DEFAULT (0x00000045U)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_BMODE_RD_MASK (0x000000ffU)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_BMODE_WR_MASK (0x000000ffU)


///< Phase lock detect threshold.                         The PLL will
///< generate plllockout when the TDC phase error is within lockthresh
///< for a number of cycles determined by o_lock_criteria.
///< 0 is forbidden value.
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_BMODE_CFG_LOCK_THRESH_BMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_BMODE_CFG_LOCK_THRESH_BMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_BMODE_CFG_LOCK_THRESH_BMODE_BF_MSK (0x0000001F)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_BMODE_CFG_LOCK_THRESH_BMODE_BF_DEF (0x00000005)

///< Determines the number of repetitions of the boost gain counter for
///< the first stage of the fine boost.                         The number
///< of overall repetitions is equal to cfg_fine_first_boost_repeat + 1
///< Set this to non-zero when PLL needs to lock on SSC&#39;ed refclk,
///< to allow enough time for the boost to handle fast cap-swap.
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_BMODE_CFG_FINE_FIRST_BOOST_REPEAT_BMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_BMODE_CFG_FINE_FIRST_BOOST_REPEAT_BMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_BMODE_CFG_FINE_FIRST_BOOST_REPEAT_BMODE_BF_MSK (0x000000E0)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_BMODE_CFG_FINE_FIRST_BOOST_REPEAT_BMODE_BF_DEF (0x00000040)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_TDC0_BMODE register description at address offset 0x158
  *
  * Register default value:        0x0F00033F
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_tdc0_bmode
  * LCPLL_TDC0 Register
  */

typedef union {
  struct {
    uint32_t CFG_VTDC_REFCLK_CNT_LIMIT_BMODE : 4;
    ///< Number of reference clock cycles used in TDC clock calibration
    ///< AccessType="RW" BitOffset="0" ResetValue="0xF"
    uint32_t CFG_VTDC_FAST_SEL_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_fast_sel
    ///< AccessType="RW" BitOffset="4" ResetValue="0x1"
    uint32_t CFG_VTDC_OFFSET_CALIB_EN_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_offset_calib_en
    ///< AccessType="RW" BitOffset="5" ResetValue="0x1"
    uint32_t CFG_VTDC_PLUS_STDC_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_plus_stdc
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t CFG_VTDC_FINE_OFFSET_CHIKEN_BIT_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_fine_offset_chiken_bit
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t CFG_VTDC_OFFSET_TIMER_LIMIT_BMODE : 4;
    ///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_offset_timer_limit
    ///< AccessType="RW" BitOffset="8" ResetValue="0x3"
    uint32_t CFG_VTDC_FINE_OFFSET_OVRD_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_fine_offset_ovrd
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t CFG_VTDC_FINE_OFFSET_OVRD_VAL_BMODE : 5;
    ///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_fine_offset_ovrd_val
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t CFG_TDCPE_OFFSET_BMODE : 5;
    ///< Adding offset to 2&#39;s comp tdc value (integer signed)
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t CFG_TDC_BB_INPUT_SEL_BMODE : 1;
    ///< 1&#39;b0 - Uses bb TDC signal from analog
    ///< 1&#39;b1 - Uses MSB of tdceff signal as bb TDC input signal (TDC sign
    ///< bit)
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t CFG_STDC_STDDEV_INIT_BMODE : 4;
    ///< Initial value for stddev control bus before STDC calibration.
    ///< AccessType="RW" BitOffset="24" ResetValue="0xF"
    uint32_t CFG_FORCE_VTDC_OSC_BMODE : 1;
    ///< Forces VTDC to RO mode
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t CFG_VTDC_OFFSET_RANGE_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_offset_range
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_tdc0_bmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_DEFAULT (0x0f00033fU)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_RD_MASK (0x3fffffffU)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_WR_MASK (0x3fffffffU)


///< Number of reference clock cycles used in TDC clock calibration
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_CFG_VTDC_REFCLK_CNT_LIMIT_BMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_CFG_VTDC_REFCLK_CNT_LIMIT_BMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_CFG_VTDC_REFCLK_CNT_LIMIT_BMODE_BF_MSK (0x0000000F)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_CFG_VTDC_REFCLK_CNT_LIMIT_BMODE_BF_DEF (0x0000000F)

///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_fast_sel
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_CFG_VTDC_FAST_SEL_BMODE_BF_OFF ( 4)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_CFG_VTDC_FAST_SEL_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_CFG_VTDC_FAST_SEL_BMODE_BF_MSK (0x00000010)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_CFG_VTDC_FAST_SEL_BMODE_BF_DEF (0x00000010)

///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_offset_calib_en
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_CFG_VTDC_OFFSET_CALIB_EN_BMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_CFG_VTDC_OFFSET_CALIB_EN_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_CFG_VTDC_OFFSET_CALIB_EN_BMODE_BF_MSK (0x00000020)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_CFG_VTDC_OFFSET_CALIB_EN_BMODE_BF_DEF (0x00000020)

///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_plus_stdc
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_CFG_VTDC_PLUS_STDC_BMODE_BF_OFF ( 6)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_CFG_VTDC_PLUS_STDC_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_CFG_VTDC_PLUS_STDC_BMODE_BF_MSK (0x00000040)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_CFG_VTDC_PLUS_STDC_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_fine_offset_chiken_bit
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_CFG_VTDC_FINE_OFFSET_CHIKEN_BIT_BMODE_BF_OFF ( 7)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_CFG_VTDC_FINE_OFFSET_CHIKEN_BIT_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_CFG_VTDC_FINE_OFFSET_CHIKEN_BIT_BMODE_BF_MSK (0x00000080)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_CFG_VTDC_FINE_OFFSET_CHIKEN_BIT_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_offset_timer_limit
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_CFG_VTDC_OFFSET_TIMER_LIMIT_BMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_CFG_VTDC_OFFSET_TIMER_LIMIT_BMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_CFG_VTDC_OFFSET_TIMER_LIMIT_BMODE_BF_MSK (0x00000F00)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_CFG_VTDC_OFFSET_TIMER_LIMIT_BMODE_BF_DEF (0x00000300)

///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_fine_offset_ovrd
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_CFG_VTDC_FINE_OFFSET_OVRD_BMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_CFG_VTDC_FINE_OFFSET_OVRD_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_CFG_VTDC_FINE_OFFSET_OVRD_BMODE_BF_MSK (0x00001000)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_CFG_VTDC_FINE_OFFSET_OVRD_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_fine_offset_ovrd_val
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_CFG_VTDC_FINE_OFFSET_OVRD_VAL_BMODE_BF_OFF (13)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_CFG_VTDC_FINE_OFFSET_OVRD_VAL_BMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_CFG_VTDC_FINE_OFFSET_OVRD_VAL_BMODE_BF_MSK (0x0003E000)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_CFG_VTDC_FINE_OFFSET_OVRD_VAL_BMODE_BF_DEF (0x00000000)

///< Adding offset to 2&#39;s comp tdc value (integer signed)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_CFG_TDCPE_OFFSET_BMODE_BF_OFF (18)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_CFG_TDCPE_OFFSET_BMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_CFG_TDCPE_OFFSET_BMODE_BF_MSK (0x007C0000)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_CFG_TDCPE_OFFSET_BMODE_BF_DEF (0x00000000)

///< 1&#39;b0 - Uses bb TDC signal from analog
///< 1&#39;b1 - Uses MSB of tdceff signal as bb TDC input signal (TDC sign
///< bit)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_CFG_TDC_BB_INPUT_SEL_BMODE_BF_OFF (23)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_CFG_TDC_BB_INPUT_SEL_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_CFG_TDC_BB_INPUT_SEL_BMODE_BF_MSK (0x00800000)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_CFG_TDC_BB_INPUT_SEL_BMODE_BF_DEF (0x00000000)

///< Initial value for stddev control bus before STDC calibration.
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_CFG_STDC_STDDEV_INIT_BMODE_BF_OFF (24)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_CFG_STDC_STDDEV_INIT_BMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_CFG_STDC_STDDEV_INIT_BMODE_BF_MSK (0x0F000000)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_CFG_STDC_STDDEV_INIT_BMODE_BF_DEF (0x0F000000)

///< Forces VTDC to RO mode
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_CFG_FORCE_VTDC_OSC_BMODE_BF_OFF (28)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_CFG_FORCE_VTDC_OSC_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_CFG_FORCE_VTDC_OSC_BMODE_BF_MSK (0x10000000)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_CFG_FORCE_VTDC_OSC_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_offset_range
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_CFG_VTDC_OFFSET_RANGE_BMODE_BF_OFF (29)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_CFG_VTDC_OFFSET_RANGE_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_CFG_VTDC_OFFSET_RANGE_BMODE_BF_MSK (0x20000000)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_CFG_VTDC_OFFSET_RANGE_BMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_TDC1_BMODE register description at address offset 0x15c
  *
  * Register default value:        0x001E80AA
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_tdc1_bmode
  * SERDES_LANE_ANA_PLL::TDC1
  */

typedef union {
  struct {
    uint32_t CFG_PE_DISABLE_BMODE : 1;
    ///< Force values of 0 on TDC output.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_TDC_LADDER_MAX_BMODE : 2;
    ///< Max trim ladder code value alowed during lock adquisition.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x1"
    uint32_t CFG_TDC_LADDER_MIN_BMODE : 2;
    ///< Min trim ladder code value alowed during lock adquisition.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x1"
    uint32_t CFG_SELECT_STDC_FILTER_BMODE : 1;
    ///< Select STDC output to filter.                         Will select
    ///< only after FSM enables.
    ///< AccessType="RW" BitOffset="5" ResetValue="0x1"
    uint32_t CFG_SELECT_STDC_DFX_BMODE : 1;
    ///< Select STDC output to DFX path (PE min/max, raw lock, VISA, RO reg)
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t CFG_STDC_PROP_COEFF_BMODE : 5;
    ///< Fine Kp = 2^(-reg) to be used with STDC (signed value)
    ///< AccessType="RW" BitOffset="7" ResetValue="0x1"
    uint32_t CFG_STDC_INT_COEFF_BMODE : 5;
    ///< Fine Ki = 2^(-reg) to be used with STDC
    ///< AccessType="RW" BitOffset="12" ResetValue="0x8"
    uint32_t CFG_VTDC_ANA_EN_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC1::cfg_vtdc_ana_en
    ///< AccessType="RW" BitOffset="17" ResetValue="0x1"
    uint32_t CFG_STDC_ANA_EN_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC1::cfg_stdc_ana_en
    ///< AccessType="RW" BitOffset="18" ResetValue="0x1"
    uint32_t CFG_TDC_SAMP_BYPASS_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC1::cfg_tdc_samp_bypass
    ///< AccessType="RW" BitOffset="19" ResetValue="0x1"
    uint32_t CFG_STDC_SAMP_BYPASS_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC1::cfg_stdc_samp_bypass
    ///< AccessType="RW" BitOffset="20" ResetValue="0x1"
    uint32_t CFG_TDC_STATUS_MODE_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC1::cfg_tdc_status_mode
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t CFG_TDC_HISTOGRAM_MODE_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC1::cfg_tdc_histogram_mode
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t CFG_TDC_HISTOGRAM_VALUE_BMODE : 6;
    ///< SERDES_LANE_ANA_PLL::TDC1::cfg_tdc_histogram_value
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_tdc1_bmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_DEFAULT (0x001e80aaU)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_RD_MASK (0x1fffffffU)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_WR_MASK (0x1fffffffU)


///< Force values of 0 on TDC output.
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_PE_DIS_BMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_PE_DIS_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_PE_DIS_BMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_PE_DIS_BMODE_BF_DEF (0x00000000)

///< Max trim ladder code value alowed during lock adquisition.
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_TDC_LADDER_MAX_BMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_TDC_LADDER_MAX_BMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_TDC_LADDER_MAX_BMODE_BF_MSK (0x00000006)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_TDC_LADDER_MAX_BMODE_BF_DEF (0x00000002)

///< Min trim ladder code value alowed during lock adquisition.
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_TDC_LADDER_MIN_BMODE_BF_OFF ( 3)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_TDC_LADDER_MIN_BMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_TDC_LADDER_MIN_BMODE_BF_MSK (0x00000018)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_TDC_LADDER_MIN_BMODE_BF_DEF (0x00000008)

///< Select STDC output to filter.                         Will select
///< only after FSM enables.
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_SEL_STDC_FILTER_BMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_SEL_STDC_FILTER_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_SEL_STDC_FILTER_BMODE_BF_MSK (0x00000020)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_SEL_STDC_FILTER_BMODE_BF_DEF (0x00000020)

///< Select STDC output to DFX path (PE min/max, raw lock, VISA, RO reg)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_SEL_STDC_DFX_BMODE_BF_OFF ( 6)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_SEL_STDC_DFX_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_SEL_STDC_DFX_BMODE_BF_MSK (0x00000040)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_SEL_STDC_DFX_BMODE_BF_DEF (0x00000000)

///< Fine Kp = 2^(-reg) to be used with STDC (signed value)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_STDC_PROP_COEFF_BMODE_BF_OFF ( 7)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_STDC_PROP_COEFF_BMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_STDC_PROP_COEFF_BMODE_BF_MSK (0x00000F80)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_STDC_PROP_COEFF_BMODE_BF_DEF (0x00000080)

///< Fine Ki = 2^(-reg) to be used with STDC
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_STDC_INT_COEFF_BMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_STDC_INT_COEFF_BMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_STDC_INT_COEFF_BMODE_BF_MSK (0x0001F000)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_STDC_INT_COEFF_BMODE_BF_DEF (0x00008000)

///< SERDES_LANE_ANA_PLL::TDC1::cfg_vtdc_ana_en
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_VTDC_ANA_EN_BMODE_BF_OFF (17)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_VTDC_ANA_EN_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_VTDC_ANA_EN_BMODE_BF_MSK (0x00020000)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_VTDC_ANA_EN_BMODE_BF_DEF (0x00020000)

///< SERDES_LANE_ANA_PLL::TDC1::cfg_stdc_ana_en
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_STDC_ANA_EN_BMODE_BF_OFF (18)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_STDC_ANA_EN_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_STDC_ANA_EN_BMODE_BF_MSK (0x00040000)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_STDC_ANA_EN_BMODE_BF_DEF (0x00040000)

///< SERDES_LANE_ANA_PLL::TDC1::cfg_tdc_samp_bypass
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_TDC_SAMP_BYP_BMODE_BF_OFF (19)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_TDC_SAMP_BYP_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_TDC_SAMP_BYP_BMODE_BF_MSK (0x00080000)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_TDC_SAMP_BYP_BMODE_BF_DEF (0x00080000)

///< SERDES_LANE_ANA_PLL::TDC1::cfg_stdc_samp_bypass
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_STDC_SAMP_BYP_BMODE_BF_OFF (20)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_STDC_SAMP_BYP_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_STDC_SAMP_BYP_BMODE_BF_MSK (0x00100000)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_STDC_SAMP_BYP_BMODE_BF_DEF (0x00100000)

///< SERDES_LANE_ANA_PLL::TDC1::cfg_tdc_status_mode
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_TDC_STAT_MODE_BMODE_BF_OFF (21)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_TDC_STAT_MODE_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_TDC_STAT_MODE_BMODE_BF_MSK (0x00200000)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_TDC_STAT_MODE_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TDC1::cfg_tdc_histogram_mode
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_TDC_HISTOGRAM_MODE_BMODE_BF_OFF (22)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_TDC_HISTOGRAM_MODE_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_TDC_HISTOGRAM_MODE_BMODE_BF_MSK (0x00400000)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_TDC_HISTOGRAM_MODE_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TDC1::cfg_tdc_histogram_value
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_TDC_HISTOGRAM_VAL_BMODE_BF_OFF (23)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_TDC_HISTOGRAM_VAL_BMODE_BF_WID ( 6)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_TDC_HISTOGRAM_VAL_BMODE_BF_MSK (0x1F800000)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_CFG_TDC_HISTOGRAM_VAL_BMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_TDC2_BMODE register description at address offset 0x160
  *
  * Register default value:        0x002483EF
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_tdc2_bmode
  * SERDES_LANE_ANA_PLL::TDC2
  */

typedef union {
  struct {
    uint32_t CFG_TDC_ADAPTIVE_WIN_IN_BMODE : 5;
    ///< TDC code threshold to switch ladder with higher resolution.
    ///< Need to be below that value during cfg_tdc_adaptive_max_count cycle
    ///< time window
    ///< AccessType="RW" BitOffset="0" ResetValue="0xF"
    uint32_t CFG_TDC_ADAPTIVE_WIN_OUT_BMODE : 5;
    ///< TDC code threshold to switch ladder with lower resolution.
    ///< AccessType="RW" BitOffset="5" ResetValue="0x1F"
    uint32_t CFG_TDC_ADAPTIVE_MAX_COUNT_BMODE : 6;
    ///< Defines the number of cycles for time window of TDC ladder adaptive
    ///< switching
    ///< AccessType="RW" BitOffset="10" ResetValue="0x20"
    uint32_t CFG_TDC_TRIM_OVRD_BMODE : 1;
    ///< tdc chain trim ovrd enable
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t CFG_TDC_TRIM_VAL_BMODE : 2;
    ///< tdc chain trim ovrd value
    ///< AccessType="RW" BitOffset="17" ResetValue="0x2"
    uint32_t CFG_KPKI_COMPENSATE_VAL_BMODE : 2;
    ///< SERDES_LANE_ANA_PLL::TDC2::cfg_kpki_compensate_val
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t CFG_STDC_BIAS_EN_BMODE : 1;
    ///< Enables internal STDC bias.
    ///< AccessType="RW" BitOffset="21" ResetValue="0x1"
    uint32_t CFG_FORCE_STDC_OSC_BMODE : 1;
    ///< Forces internal STDC oscilator to enable.
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t CFG_STDC_STDDEV_OVRD_EN_BMODE : 1;
    ///< Enables override for stddev control bus.
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t CFG_STDC_OSC_DIV4_BMODE : 1;
    ///< Enables internal STDC divider for internal oscilator output.
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t CFG_STDCPE_OFFSET_BMODE : 5;
    ///< Adding offset to 2&#39;s comp stdc value (integer signed)
    ///< AccessType="RW" BitOffset="25" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_tdc2_bmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_TDC2_BMODE_DEFAULT (0x002483efU)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_BMODE_RD_MASK (0x3fffffffU)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_BMODE_WR_MASK (0x3fffffffU)


///< TDC code threshold to switch ladder with higher resolution.
///< Need to be below that value during cfg_tdc_adaptive_max_count cycle
///< time window
#define PMA_TXPLLCFGLOADER_MSG_TDC2_BMODE_CFG_TDC_ADAPTIVE_WIN_IN_BMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_BMODE_CFG_TDC_ADAPTIVE_WIN_IN_BMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_BMODE_CFG_TDC_ADAPTIVE_WIN_IN_BMODE_BF_MSK (0x0000001F)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_BMODE_CFG_TDC_ADAPTIVE_WIN_IN_BMODE_BF_DEF (0x0000000F)

///< TDC code threshold to switch ladder with lower resolution.
#define PMA_TXPLLCFGLOADER_MSG_TDC2_BMODE_CFG_TDC_ADAPTIVE_WIN_OUT_BMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_BMODE_CFG_TDC_ADAPTIVE_WIN_OUT_BMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_BMODE_CFG_TDC_ADAPTIVE_WIN_OUT_BMODE_BF_MSK (0x000003E0)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_BMODE_CFG_TDC_ADAPTIVE_WIN_OUT_BMODE_BF_DEF (0x000003E0)

///< Defines the number of cycles for time window of TDC ladder adaptive
///< switching
#define PMA_TXPLLCFGLOADER_MSG_TDC2_BMODE_CFG_TDC_ADAPTIVE_MAX_CNT_BMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_BMODE_CFG_TDC_ADAPTIVE_MAX_CNT_BMODE_BF_WID ( 6)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_BMODE_CFG_TDC_ADAPTIVE_MAX_CNT_BMODE_BF_MSK (0x0000FC00)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_BMODE_CFG_TDC_ADAPTIVE_MAX_CNT_BMODE_BF_DEF (0x00008000)

///< tdc chain trim ovrd enable
#define PMA_TXPLLCFGLOADER_MSG_TDC2_BMODE_CFG_TDC_TRIM_OVRD_BMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_BMODE_CFG_TDC_TRIM_OVRD_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_BMODE_CFG_TDC_TRIM_OVRD_BMODE_BF_MSK (0x00010000)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_BMODE_CFG_TDC_TRIM_OVRD_BMODE_BF_DEF (0x00000000)

///< tdc chain trim ovrd value
#define PMA_TXPLLCFGLOADER_MSG_TDC2_BMODE_CFG_TDC_TRIM_VAL_BMODE_BF_OFF (17)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_BMODE_CFG_TDC_TRIM_VAL_BMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_BMODE_CFG_TDC_TRIM_VAL_BMODE_BF_MSK (0x00060000)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_BMODE_CFG_TDC_TRIM_VAL_BMODE_BF_DEF (0x00040000)

///< SERDES_LANE_ANA_PLL::TDC2::cfg_kpki_compensate_val
#define PMA_TXPLLCFGLOADER_MSG_TDC2_BMODE_CFG_KPKI_COMPENSATE_VAL_BMODE_BF_OFF (19)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_BMODE_CFG_KPKI_COMPENSATE_VAL_BMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_BMODE_CFG_KPKI_COMPENSATE_VAL_BMODE_BF_MSK (0x00180000)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_BMODE_CFG_KPKI_COMPENSATE_VAL_BMODE_BF_DEF (0x00000000)

///< Enables internal STDC bias.
#define PMA_TXPLLCFGLOADER_MSG_TDC2_BMODE_CFG_STDC_BIAS_EN_BMODE_BF_OFF (21)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_BMODE_CFG_STDC_BIAS_EN_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_BMODE_CFG_STDC_BIAS_EN_BMODE_BF_MSK (0x00200000)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_BMODE_CFG_STDC_BIAS_EN_BMODE_BF_DEF (0x00200000)

///< Forces internal STDC oscilator to enable.
#define PMA_TXPLLCFGLOADER_MSG_TDC2_BMODE_CFG_FORCE_STDC_OSC_BMODE_BF_OFF (22)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_BMODE_CFG_FORCE_STDC_OSC_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_BMODE_CFG_FORCE_STDC_OSC_BMODE_BF_MSK (0x00400000)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_BMODE_CFG_FORCE_STDC_OSC_BMODE_BF_DEF (0x00000000)

///< Enables override for stddev control bus.
#define PMA_TXPLLCFGLOADER_MSG_TDC2_BMODE_CFG_STDC_STDDEV_OVRD_EN_BMODE_BF_OFF (23)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_BMODE_CFG_STDC_STDDEV_OVRD_EN_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_BMODE_CFG_STDC_STDDEV_OVRD_EN_BMODE_BF_MSK (0x00800000)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_BMODE_CFG_STDC_STDDEV_OVRD_EN_BMODE_BF_DEF (0x00000000)

///< Enables internal STDC divider for internal oscilator output.
#define PMA_TXPLLCFGLOADER_MSG_TDC2_BMODE_CFG_STDC_OSC_DIV4_BMODE_BF_OFF (24)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_BMODE_CFG_STDC_OSC_DIV4_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_BMODE_CFG_STDC_OSC_DIV4_BMODE_BF_MSK (0x01000000)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_BMODE_CFG_STDC_OSC_DIV4_BMODE_BF_DEF (0x00000000)

///< Adding offset to 2&#39;s comp stdc value (integer signed)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_BMODE_CFG_STDCPE_OFFSET_BMODE_BF_OFF (25)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_BMODE_CFG_STDCPE_OFFSET_BMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_BMODE_CFG_STDCPE_OFFSET_BMODE_BF_MSK (0x3E000000)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_BMODE_CFG_STDCPE_OFFSET_BMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_TDC3_BMODE register description at address offset 0x164
  *
  * Register default value:        0x000003A3
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_tdc3_bmode
  * SERDES_LANE_ANA_PLL::TDC3
  */

typedef union {
  struct {
    uint32_t CFG_STDC_TARGET_CNT_BMODE : 8;
    ///< Calibration target for STDC oscilator during calibration.
    ///< The formula: int(2^(2 + cfg_stdc_cnt_limit)*(3e9/Frefclk))
    ///< AccessType="RW" BitOffset="0" ResetValue="0xA3"
    uint32_t CFG_STDC_CNT_LIMIT_BMODE : 2;
    ///< Number of cycles to count STDC oscilator edges during calibration.
    ///< Value = 2^(2 + reg)
    ///< AccessType="RW" BitOffset="8" ResetValue="0x3"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_tdc3_bmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_TDC3_BMODE_DEFAULT (0x000003a3U)
#define PMA_TXPLLCFGLOADER_MSG_TDC3_BMODE_RD_MASK (0x000003ffU)
#define PMA_TXPLLCFGLOADER_MSG_TDC3_BMODE_WR_MASK (0x000003ffU)


///< Calibration target for STDC oscilator during calibration.
///< The formula: int(2^(2 + cfg_stdc_cnt_limit)*(3e9/Frefclk))
#define PMA_TXPLLCFGLOADER_MSG_TDC3_BMODE_CFG_STDC_TARGET_CNT_BMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_TDC3_BMODE_CFG_STDC_TARGET_CNT_BMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_TDC3_BMODE_CFG_STDC_TARGET_CNT_BMODE_BF_MSK (0x000000FF)
#define PMA_TXPLLCFGLOADER_MSG_TDC3_BMODE_CFG_STDC_TARGET_CNT_BMODE_BF_DEF (0x000000A3)

///< Number of cycles to count STDC oscilator edges during calibration.
///< Value = 2^(2 + reg)
#define PMA_TXPLLCFGLOADER_MSG_TDC3_BMODE_CFG_STDC_CNT_LIMIT_BMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_TDC3_BMODE_CFG_STDC_CNT_LIMIT_BMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_TDC3_BMODE_CFG_STDC_CNT_LIMIT_BMODE_BF_MSK (0x00000300)
#define PMA_TXPLLCFGLOADER_MSG_TDC3_BMODE_CFG_STDC_CNT_LIMIT_BMODE_BF_DEF (0x00000300)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_TAP_OVRD_BMODE register description at address offset 0x168
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_tap_ovrd_bmode
  * LCPLL_TAP_OVRD Register
  */

typedef union {
  struct {
    uint32_t CFG_PLL_ENABLE_BMODE : 1;
    ///< Replaces direct pin of PLL enable signal (in case cfg_pll_en_mode_ctrl
    ///< = 1).
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_PLL_EN_MODE_CTRL_BMODE : 1;
    ///< Effective PLL enable:                         0 - Enable signal from
    ///< PLL interface                         1 - Enable signal from PLL register
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t CFG_LDO_ENABLE_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldo_enable
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t CFG_VREFGEN_EN_OVRD_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_vrefgen_en_ovrd
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t CFG_VREFGEN_EN_OVRD_VAL_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_vrefgen_en_ovrd_val
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t CFG_LDO_BIAS_EN_OVRD_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldo_bias_en_ovrd
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t CFG_LDO_BIAS_EN_OVRD_VAL_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldo_bias_en_ovrd_val
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t CFG_LDOCLK_EN_OVRD_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldoclk_en_ovrd
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t CFG_LDOCLK_EN_OVRD_VAL_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldoclk_en_ovrd_val
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CFG_LDODCO_EN_OVRD_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldodco_en_ovrd
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t CFG_LDODCO_EN_OVRD_VAL_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldodco_en_ovrd_val
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t O_DFX_TDC_DISABLE_BMODE : 1;
    ///< Set to turn off TDC. Mainly to study impact of TDC self noise on PLL
    ///< jitter
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_tap_ovrd_bmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_RD_MASK (0x00000fffU)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_WR_MASK (0x00000fffU)


///< Replaces direct pin of PLL enable signal (in case cfg_pll_en_mode_ctrl
///< = 1).
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_CFG_PLL_EN_BMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_CFG_PLL_EN_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_CFG_PLL_EN_BMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_CFG_PLL_EN_BMODE_BF_DEF (0x00000000)

///< Effective PLL enable:                         0 - Enable signal from
///< PLL interface                         1 - Enable signal from PLL register
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_CFG_PLL_EN_MODE_CTRL_BMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_CFG_PLL_EN_MODE_CTRL_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_CFG_PLL_EN_MODE_CTRL_BMODE_BF_MSK (0x00000002)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_CFG_PLL_EN_MODE_CTRL_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldo_enable
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_CFG_LDO_EN_BMODE_BF_OFF ( 2)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_CFG_LDO_EN_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_CFG_LDO_EN_BMODE_BF_MSK (0x00000004)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_CFG_LDO_EN_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_vrefgen_en_ovrd
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_CFG_VREFGEN_EN_OVRD_BMODE_BF_OFF ( 3)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_CFG_VREFGEN_EN_OVRD_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_CFG_VREFGEN_EN_OVRD_BMODE_BF_MSK (0x00000008)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_CFG_VREFGEN_EN_OVRD_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_vrefgen_en_ovrd_val
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_CFG_VREFGEN_EN_OVRD_VAL_BMODE_BF_OFF ( 4)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_CFG_VREFGEN_EN_OVRD_VAL_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_CFG_VREFGEN_EN_OVRD_VAL_BMODE_BF_MSK (0x00000010)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_CFG_VREFGEN_EN_OVRD_VAL_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldo_bias_en_ovrd
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_CFG_LDO_BIAS_EN_OVRD_BMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_CFG_LDO_BIAS_EN_OVRD_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_CFG_LDO_BIAS_EN_OVRD_BMODE_BF_MSK (0x00000020)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_CFG_LDO_BIAS_EN_OVRD_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldo_bias_en_ovrd_val
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_CFG_LDO_BIAS_EN_OVRD_VAL_BMODE_BF_OFF ( 6)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_CFG_LDO_BIAS_EN_OVRD_VAL_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_CFG_LDO_BIAS_EN_OVRD_VAL_BMODE_BF_MSK (0x00000040)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_CFG_LDO_BIAS_EN_OVRD_VAL_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldoclk_en_ovrd
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_CFG_LDOCLK_EN_OVRD_BMODE_BF_OFF ( 7)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_CFG_LDOCLK_EN_OVRD_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_CFG_LDOCLK_EN_OVRD_BMODE_BF_MSK (0x00000080)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_CFG_LDOCLK_EN_OVRD_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldoclk_en_ovrd_val
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_CFG_LDOCLK_EN_OVRD_VAL_BMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_CFG_LDOCLK_EN_OVRD_VAL_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_CFG_LDOCLK_EN_OVRD_VAL_BMODE_BF_MSK (0x00000100)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_CFG_LDOCLK_EN_OVRD_VAL_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldodco_en_ovrd
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_CFG_LDODCO_EN_OVRD_BMODE_BF_OFF ( 9)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_CFG_LDODCO_EN_OVRD_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_CFG_LDODCO_EN_OVRD_BMODE_BF_MSK (0x00000200)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_CFG_LDODCO_EN_OVRD_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldodco_en_ovrd_val
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_CFG_LDODCO_EN_OVRD_VAL_BMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_CFG_LDODCO_EN_OVRD_VAL_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_CFG_LDODCO_EN_OVRD_VAL_BMODE_BF_MSK (0x00000400)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_CFG_LDODCO_EN_OVRD_VAL_BMODE_BF_DEF (0x00000000)

///< Set to turn off TDC. Mainly to study impact of TDC self noise on PLL
///< jitter
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_O_DFX_TDC_DIS_BMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_O_DFX_TDC_DIS_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_O_DFX_TDC_DIS_BMODE_BF_MSK (0x00000800)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_O_DFX_TDC_DIS_BMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_DFX_DCO_BMODE register description at address offset 0x16c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_dfx_dco_bmode
  * LCPLL_DFX_DCO Register
  */

typedef union {
  struct {
    uint32_t O_DCOFINEDFTSEL_BMODE : 2;
    ///< DCO fine frequency and dco dither override:
    ///< 00: DCO fine tuning is set by PLL closed loop .
    ///< 01: DCO fine frequency value is set by o_dcofine and DCO dither value
    ///< is set by o_dither_value.                         10: Internal SAW
    ///< tooth pattern on fine integer code (while frac=0). Code increments
    ///< every fbclk cycle.                         11: Reserved.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t O_DCOCOARSE_OVRD_H_BMODE : 1;
    ///< DCO coarse frequency override signal:                         0: DCO
    ///< coarse tuning is set by AFC state machine
    ///< 1: DCO coarse frequency value is set by o_dcocoarse
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t O_DCOFINE_BMODE : 8;
    ///< Fine override value (when o_dcofinedftsel = 01).
    ///< Valid range 0 to 254.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t O_DCOCOARSE_BMODE : 9;
    ///< AFC override value (when o_dcocoarse_ovrd_h=1).
    ///< Valid range 0 to 319.
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t CFG_CAPTURE_FILTER_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DFX_DCO::cfg_capture_filter
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_dfx_dco_bmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_BMODE_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_BMODE_RD_MASK (0x001fffffU)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_BMODE_WR_MASK (0x001fffffU)


///< DCO fine frequency and dco dither override:
///< 00: DCO fine tuning is set by PLL closed loop .
///< 01: DCO fine frequency value is set by o_dcofine and DCO dither value
///< is set by o_dither_value.                         10: Internal SAW
///< tooth pattern on fine integer code (while frac=0). Code increments
///< every fbclk cycle.                         11: Reserved.
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_BMODE_O_DCOFINEDFTSEL_BMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_BMODE_O_DCOFINEDFTSEL_BMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_BMODE_O_DCOFINEDFTSEL_BMODE_BF_MSK (0x00000003)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_BMODE_O_DCOFINEDFTSEL_BMODE_BF_DEF (0x00000000)

///< DCO coarse frequency override signal:                         0: DCO
///< coarse tuning is set by AFC state machine
///< 1: DCO coarse frequency value is set by o_dcocoarse
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_BMODE_O_DCOCOARSE_OVRD_H_BMODE_BF_OFF ( 2)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_BMODE_O_DCOCOARSE_OVRD_H_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_BMODE_O_DCOCOARSE_OVRD_H_BMODE_BF_MSK (0x00000004)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_BMODE_O_DCOCOARSE_OVRD_H_BMODE_BF_DEF (0x00000000)

///< Fine override value (when o_dcofinedftsel = 01).
///< Valid range 0 to 254.
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_BMODE_O_DCOFINE_BMODE_BF_OFF ( 3)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_BMODE_O_DCOFINE_BMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_BMODE_O_DCOFINE_BMODE_BF_MSK (0x000007F8)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_BMODE_O_DCOFINE_BMODE_BF_DEF (0x00000000)

///< AFC override value (when o_dcocoarse_ovrd_h=1).
///< Valid range 0 to 319.
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_BMODE_O_DCOCOARSE_BMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_BMODE_O_DCOCOARSE_BMODE_BF_WID ( 9)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_BMODE_O_DCOCOARSE_BMODE_BF_MSK (0x000FF800)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_BMODE_O_DCOCOARSE_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DFX_DCO::cfg_capture_filter
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_BMODE_CFG_CAP_FILTER_BMODE_BF_OFF (20)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_BMODE_CFG_CAP_FILTER_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_BMODE_CFG_CAP_FILTER_BMODE_BF_MSK (0x00100000)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_BMODE_CFG_CAP_FILTER_BMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_DFX_TDC_CRO_BMODE register description at address offset 0x170
  *
  * Register default value:        0x0000001C
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_dfx_tdc_cro_bmode
  * LCPLL_DFX_TDC_CRO Register
  */

typedef union {
  struct {
    uint32_t CFG_DFT_CNT_RESTART_BMODE : 1;
    ///< Clears min/max measurements and restarts dft counter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_DFT_TIMER_LIMIT_BMODE : 4;
    ///< While cfg_dfx_disable_dft_timer_ovrd_val=0 define the window time
    ///< of the dft measurement. (2^6 +reg [ref_clk cycles])
    ///< AccessType="RW" BitOffset="1" ResetValue="0xE"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_dfx_tdc_cro_bmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_BMODE_DEFAULT (0x0000001cU)
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_BMODE_RD_MASK (0x0000001fU)
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_BMODE_WR_MASK (0x0000001fU)


///< Clears min/max measurements and restarts dft counter
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_BMODE_CFG_DFT_CNT_RESTART_BMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_BMODE_CFG_DFT_CNT_RESTART_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_BMODE_CFG_DFT_CNT_RESTART_BMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_BMODE_CFG_DFT_CNT_RESTART_BMODE_BF_DEF (0x00000000)

///< While cfg_dfx_disable_dft_timer_ovrd_val=0 define the window time
///< of the dft measurement. (2^6 +reg [ref_clk cycles])
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_BMODE_CFG_DFT_TIMER_LIMIT_BMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_BMODE_CFG_DFT_TIMER_LIMIT_BMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_BMODE_CFG_DFT_TIMER_LIMIT_BMODE_BF_MSK (0x0000001E)
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_BMODE_CFG_DFT_TIMER_LIMIT_BMODE_BF_DEF (0x0000001C)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_VISA_CTRL_BMODE register description at address offset 0x174
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_visa_ctrl_bmode
  * LCPLL_VISA_CTRL Register
  */

typedef union {
  struct {
    uint32_t CFG_VISA_CTRL_BMODE : 32;
    ///< VISA control register                         [0] visa enable.
    ///< [3:1] prbs mode (pattern gen)
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_visa_ctrl_bmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_BMODE_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_BMODE_RD_MASK (0xffffffffU)
#define PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_BMODE_WR_MASK (0xffffffffU)


///< VISA control register                         [0] visa enable.
///< [3:1] prbs mode (pattern gen)
#define PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_BMODE_CFG_VISA_CTRL_BMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_BMODE_CFG_VISA_CTRL_BMODE_BF_WID (32)
#define PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_BMODE_CFG_VISA_CTRL_BMODE_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_BMODE_CFG_VISA_CTRL_BMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_VISA_LANE0_SEL_BMODE register description at address offset 0x178
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_visa_lane0_sel_bmode
  * LCPLL_DFX_VISA_LANE0 Register
  */

typedef union {
  struct {
    uint32_t CFG_VISA_LANE0_SEL_BMODE : 32;
    ///< Parallel VISA control for lane 0                         [7:0] byte
    ///< select                         [15:8] clock select
    ///< [16] clock bypass
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_visa_lane0_sel_bmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_BMODE_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_BMODE_RD_MASK (0xffffffffU)
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_BMODE_WR_MASK (0xffffffffU)


///< Parallel VISA control for lane 0                         [7:0] byte
///< select                         [15:8] clock select
///< [16] clock bypass
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_BMODE_CFG_VISA_LANE0_SEL_BMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_BMODE_CFG_VISA_LANE0_SEL_BMODE_BF_WID (32)
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_BMODE_CFG_VISA_LANE0_SEL_BMODE_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_BMODE_CFG_VISA_LANE0_SEL_BMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_VISA_LANE1_SEL_BMODE register description at address offset 0x17c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_visa_lane1_sel_bmode
  * LCPLL_DFX_VISA_LANE1 Register
  */

typedef union {
  struct {
    uint32_t CFG_VISA_LANE1_SEL_BMODE : 32;
    ///< Parallel VISA control for lane 1                         [7:0] byte
    ///< select                         [15:8] clock select
    ///< [16] clock bypass
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_visa_lane1_sel_bmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_BMODE_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_BMODE_RD_MASK (0xffffffffU)
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_BMODE_WR_MASK (0xffffffffU)


///< Parallel VISA control for lane 1                         [7:0] byte
///< select                         [15:8] clock select
///< [16] clock bypass
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_BMODE_CFG_VISA_LANE1_SEL_BMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_BMODE_CFG_VISA_LANE1_SEL_BMODE_BF_WID (32)
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_BMODE_CFG_VISA_LANE1_SEL_BMODE_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_BMODE_CFG_VISA_LANE1_SEL_BMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_CNTR_BIST_SETTINGS_BMODE register description at address offset 0x180
  *
  * Register default value:        0x00008B10
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_cntr_bist_settings_bmode
  * LCPLL_CNTR_BIST_SETTINGS Register
  */

typedef union {
  struct {
    uint32_t O_PLLLOCK_SEL_BMODE : 2;
    ///< Selects mode of lock indicator:                         00: Counter
    ///< based lock                         01: Phase lock sticky high
    ///< 10: Boost done                         11: Counter based lock
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_LOCKTIMER_MAXCNT_BMODE : 14;
    ///< Counter target for counter based lock (o_plllock_sel=1,2) in refclk
    ///< cycles.                         Starts counting after VREG &#38; Kvcc
    ///< calibration completed.                         Used also to check
    ///< if raw phase lock asserted in time.                         Default
    ///< is ~25us for refclk of 156.25MHz.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x22C4"
    uint32_t CFG_PLLLOCK_STATE_SEL_BMODE : 1;
    ///< Selects when to enter &#38;quot;locked state&#38;quot; (which starts
    ///< VREG tracking loop, DTR temp tracking, feed-forward gain adaptive
    ///< loop and min/max capture):                         0: counter based
    ///< lock                         1: Phase lock sticky high
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_cntr_bist_settings_bmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_BMODE_DEFAULT (0x00008b10U)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_BMODE_RD_MASK (0x0001ffffU)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_BMODE_WR_MASK (0x0001ffffU)


///< Selects mode of lock indicator:                         00: Counter
///< based lock                         01: Phase lock sticky high
///< 10: Boost done                         11: Counter based lock
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_BMODE_O_PLLLOCK_SEL_BMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_BMODE_O_PLLLOCK_SEL_BMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_BMODE_O_PLLLOCK_SEL_BMODE_BF_MSK (0x00000003)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_BMODE_O_PLLLOCK_SEL_BMODE_BF_DEF (0x00000000)

///< Counter target for counter based lock (o_plllock_sel=1,2) in refclk
///< cycles.                         Starts counting after VREG &#38; Kvcc
///< calibration completed.                         Used also to check
///< if raw phase lock asserted in time.                         Default
///< is ~25us for refclk of 156.25MHz.
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_BMODE_CFG_LOCKTIMER_MAXCNT_BMODE_BF_OFF ( 2)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_BMODE_CFG_LOCKTIMER_MAXCNT_BMODE_BF_WID (14)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_BMODE_CFG_LOCKTIMER_MAXCNT_BMODE_BF_MSK (0x0000FFFC)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_BMODE_CFG_LOCKTIMER_MAXCNT_BMODE_BF_DEF (0x00008B10)

///< Selects when to enter &#38;quot;locked state&#38;quot; (which starts
///< VREG tracking loop, DTR temp tracking, feed-forward gain adaptive
///< loop and min/max capture):                         0: counter based
///< lock                         1: Phase lock sticky high
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_BMODE_CFG_PLLLOCK_STATE_SEL_BMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_BMODE_CFG_PLLLOCK_STATE_SEL_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_BMODE_CFG_PLLLOCK_STATE_SEL_BMODE_BF_MSK (0x00010000)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_BMODE_CFG_PLLLOCK_STATE_SEL_BMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_CALIB0_BMODE register description at address offset 0x184
  *
  * Register default value:        0x801FDFD1
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_calib0_bmode
  * LCPLL_CALIB0 Register
  */

typedef union {
  struct {
    uint32_t CFG_COARSE_LOOP_GSCALE_MAX_BMODE : 4;
    ///< Initial DTR FLL gain value (2&#39;s complement, 2^gscale).
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t CFG_COARSE_LOOP_GSCALE_MIN_BMODE : 4;
    ///< Final DTR FLL gain value (2&#39;s complement, 2^gscale).
    ///< AccessType="RW" BitOffset="4" ResetValue="0xD"
    uint32_t CFG_COARSE_LOOP_GSCALE_CNT_MAX_BMODE : 5;
    ///< Duration (in refclk cycles) of each gain in DTR FLL.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1F"
    uint32_t CFG_DCOCOARSE_OVRDEN_BMODE : 1;
    ///< DCO DTR FLL override enable. (DTR PLL would still work as usual)
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t CFG_DCOCOARSE_OVRD_BMODE : 8;
    ///< DCO DTR FLL override value when dtr_ovrden=1.
    ///< AccessType="RW" BitOffset="14" ResetValue="0x7F"
    uint32_t CFG_BOOSTGAIN_MAXCNT_BMODE : 10;
    ///< Duration (in fbclk cycles) of each gain in PLL boost, for both DTR
    ///< and fine loops.
    ///< AccessType="RW" BitOffset="22" ResetValue="0x200"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_calib0_bmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_CALIB0_BMODE_DEFAULT (0x801fdfd1U)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_BMODE_RD_MASK (0xffffffffU)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_BMODE_WR_MASK (0xffffffffU)


///< Initial DTR FLL gain value (2&#39;s complement, 2^gscale).
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_BMODE_CFG_COARSE_LOOP_GSCALE_MAX_BMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_BMODE_CFG_COARSE_LOOP_GSCALE_MAX_BMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_BMODE_CFG_COARSE_LOOP_GSCALE_MAX_BMODE_BF_MSK (0x0000000F)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_BMODE_CFG_COARSE_LOOP_GSCALE_MAX_BMODE_BF_DEF (0x00000001)

///< Final DTR FLL gain value (2&#39;s complement, 2^gscale).
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_BMODE_CFG_COARSE_LOOP_GSCALE_MIN_BMODE_BF_OFF ( 4)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_BMODE_CFG_COARSE_LOOP_GSCALE_MIN_BMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_BMODE_CFG_COARSE_LOOP_GSCALE_MIN_BMODE_BF_MSK (0x000000F0)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_BMODE_CFG_COARSE_LOOP_GSCALE_MIN_BMODE_BF_DEF (0x000000D0)

///< Duration (in refclk cycles) of each gain in DTR FLL.
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_BMODE_CFG_COARSE_LOOP_GSCALE_CNT_MAX_BMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_BMODE_CFG_COARSE_LOOP_GSCALE_CNT_MAX_BMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_BMODE_CFG_COARSE_LOOP_GSCALE_CNT_MAX_BMODE_BF_MSK (0x00001F00)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_BMODE_CFG_COARSE_LOOP_GSCALE_CNT_MAX_BMODE_BF_DEF (0x00001F00)

///< DCO DTR FLL override enable. (DTR PLL would still work as usual)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_BMODE_CFG_DCOCOARSE_OVRDEN_BMODE_BF_OFF (13)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_BMODE_CFG_DCOCOARSE_OVRDEN_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_BMODE_CFG_DCOCOARSE_OVRDEN_BMODE_BF_MSK (0x00002000)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_BMODE_CFG_DCOCOARSE_OVRDEN_BMODE_BF_DEF (0x00000000)

///< DCO DTR FLL override value when dtr_ovrden=1.
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_BMODE_CFG_DCOCOARSE_OVRD_BMODE_BF_OFF (14)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_BMODE_CFG_DCOCOARSE_OVRD_BMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_BMODE_CFG_DCOCOARSE_OVRD_BMODE_BF_MSK (0x003FC000)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_BMODE_CFG_DCOCOARSE_OVRD_BMODE_BF_DEF (0x001FC000)

///< Duration (in fbclk cycles) of each gain in PLL boost, for both DTR
///< and fine loops.
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_BMODE_CFG_BOOSTGAIN_MAXCNT_BMODE_BF_OFF (22)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_BMODE_CFG_BOOSTGAIN_MAXCNT_BMODE_BF_WID (10)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_BMODE_CFG_BOOSTGAIN_MAXCNT_BMODE_BF_MSK (0xFFC00000)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_BMODE_CFG_BOOSTGAIN_MAXCNT_BMODE_BF_DEF (0x80000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_CALIB1_BMODE register description at address offset 0x188
  *
  * Register default value:        0x310420C7
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_calib1_bmode
  * SERDES_LANE_ANA_PLL::CALIB1
  */

typedef union {
  struct {
    uint32_t CFG_FILTER_BOOSTFADE_FINE_EN_BMODE : 1;
    ///< When 1, fine PLL boost will gradually lower to zero in steps of 1.
    ///< When 0, fine PLL boost will change from initial boost to zero at once.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t CFG_FINE_PROP_COEFF_BOOST_VAL_BMODE : 4;
    ///< Fine PLL Kp boost. Unsigned value
    ///< AccessType="RW" BitOffset="1" ResetValue="0x3"
    uint32_t CFG_FINE_INT_COEFF_BOOST_VAL_BMODE : 5;
    ///< Fine PLL Ki boost. Unsigned value
    ///< AccessType="RW" BitOffset="5" ResetValue="0x6"
    uint32_t CFG_BOOST_FINE_CONST_ZETA_BMODE : 1;
    ///< Not needed. not validated                         If set to 1, FINE
    ///< Ki boost value will be twice as big as the FINE Kp boost value.
    ///< This will ensure that the zeta (damping factor) will remain constant
    ///< during the boost phase.                         This mode can only
    ///< be used in case the Kp boost is no larger than 3.
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t CFG_FULL_RANGE_AFC_SEL_BMODE : 1;
    ///< Limit AFC code.                         0 - Limit AFC code to max
    ///< value of 319.                         1 - Full range AFC code (0 -
    ///< 511).
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t CFG_SEC_AFC_CALIB_BINARY_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::CALIB1::cfg_sec_afc_calib_binary
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t CFG_FINE_PROP_COEFF_BOOST_STEP_BMODE : 4;
    ///< FINE PLL loop proportional gain boosting decrement step size during
    ///< gradual boost.
    ///< AccessType="RW" BitOffset="13" ResetValue="0x1"
    uint32_t CFG_FINE_INT_COEFF_BOOST_STEP_BMODE : 5;
    ///< FINE PLL loop integral gain boosting decrement step size during gradual
    ///< boost.
    ///< AccessType="RW" BitOffset="17" ResetValue="0x2"
    uint32_t CFG_FINE_PROP_COEFF_BMODE : 4;
    ///< Fine Kp = 2^(-reg)
    ///< AccessType="RW" BitOffset="22" ResetValue="0x4"
    uint32_t CFG_FINE_INT_COEFF_BMODE : 5;
    ///< Fine Ki = 2^(-reg)
    ///< AccessType="RW" BitOffset="26" ResetValue="0xC"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_calib1_bmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_CALIB1_BMODE_DEFAULT (0x310420c7U)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_BMODE_RD_MASK (0x7fffffffU)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_BMODE_WR_MASK (0x7fffffffU)


///< When 1, fine PLL boost will gradually lower to zero in steps of 1.
///< When 0, fine PLL boost will change from initial boost to zero at once.
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_BMODE_CFG_FILTER_BOOSTFADE_FINE_EN_BMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_BMODE_CFG_FILTER_BOOSTFADE_FINE_EN_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_BMODE_CFG_FILTER_BOOSTFADE_FINE_EN_BMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_BMODE_CFG_FILTER_BOOSTFADE_FINE_EN_BMODE_BF_DEF (0x00000001)

///< Fine PLL Kp boost. Unsigned value
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_BMODE_CFG_FINE_PROP_COEFF_BOOST_VAL_BMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_BMODE_CFG_FINE_PROP_COEFF_BOOST_VAL_BMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_BMODE_CFG_FINE_PROP_COEFF_BOOST_VAL_BMODE_BF_MSK (0x0000001E)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_BMODE_CFG_FINE_PROP_COEFF_BOOST_VAL_BMODE_BF_DEF (0x00000006)

///< Fine PLL Ki boost. Unsigned value
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_BMODE_CFG_FINE_INT_COEFF_BOOST_VAL_BMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_BMODE_CFG_FINE_INT_COEFF_BOOST_VAL_BMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_BMODE_CFG_FINE_INT_COEFF_BOOST_VAL_BMODE_BF_MSK (0x000003E0)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_BMODE_CFG_FINE_INT_COEFF_BOOST_VAL_BMODE_BF_DEF (0x000000C0)

///< Not needed. not validated                         If set to 1, FINE
///< Ki boost value will be twice as big as the FINE Kp boost value.
///< This will ensure that the zeta (damping factor) will remain constant
///< during the boost phase.                         This mode can only
///< be used in case the Kp boost is no larger than 3.
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_BMODE_CFG_BOOST_FINE_CONST_ZETA_BMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_BMODE_CFG_BOOST_FINE_CONST_ZETA_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_BMODE_CFG_BOOST_FINE_CONST_ZETA_BMODE_BF_MSK (0x00000400)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_BMODE_CFG_BOOST_FINE_CONST_ZETA_BMODE_BF_DEF (0x00000000)

///< Limit AFC code.                         0 - Limit AFC code to max
///< value of 319.                         1 - Full range AFC code (0 -
///< 511).
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_BMODE_CFG_FULL_RANGE_AFC_SEL_BMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_BMODE_CFG_FULL_RANGE_AFC_SEL_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_BMODE_CFG_FULL_RANGE_AFC_SEL_BMODE_BF_MSK (0x00000800)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_BMODE_CFG_FULL_RANGE_AFC_SEL_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::CALIB1::cfg_sec_afc_calib_binary
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_BMODE_CFG_SEC_AFC_CALIB_BINARY_BMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_BMODE_CFG_SEC_AFC_CALIB_BINARY_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_BMODE_CFG_SEC_AFC_CALIB_BINARY_BMODE_BF_MSK (0x00001000)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_BMODE_CFG_SEC_AFC_CALIB_BINARY_BMODE_BF_DEF (0x00000000)

///< FINE PLL loop proportional gain boosting decrement step size during
///< gradual boost.
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_BMODE_CFG_FINE_PROP_COEFF_BOOST_STEP_BMODE_BF_OFF (13)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_BMODE_CFG_FINE_PROP_COEFF_BOOST_STEP_BMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_BMODE_CFG_FINE_PROP_COEFF_BOOST_STEP_BMODE_BF_MSK (0x0001E000)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_BMODE_CFG_FINE_PROP_COEFF_BOOST_STEP_BMODE_BF_DEF (0x00002000)

///< FINE PLL loop integral gain boosting decrement step size during gradual
///< boost.
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_BMODE_CFG_FINE_INT_COEFF_BOOST_STEP_BMODE_BF_OFF (17)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_BMODE_CFG_FINE_INT_COEFF_BOOST_STEP_BMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_BMODE_CFG_FINE_INT_COEFF_BOOST_STEP_BMODE_BF_MSK (0x003E0000)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_BMODE_CFG_FINE_INT_COEFF_BOOST_STEP_BMODE_BF_DEF (0x00040000)

///< Fine Kp = 2^(-reg)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_BMODE_CFG_FINE_PROP_COEFF_BMODE_BF_OFF (22)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_BMODE_CFG_FINE_PROP_COEFF_BMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_BMODE_CFG_FINE_PROP_COEFF_BMODE_BF_MSK (0x03C00000)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_BMODE_CFG_FINE_PROP_COEFF_BMODE_BF_DEF (0x01000000)

///< Fine Ki = 2^(-reg)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_BMODE_CFG_FINE_INT_COEFF_BMODE_BF_OFF (26)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_BMODE_CFG_FINE_INT_COEFF_BMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_BMODE_CFG_FINE_INT_COEFF_BMODE_BF_MSK (0x7C000000)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_BMODE_CFG_FINE_INT_COEFF_BMODE_BF_DEF (0x30000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_CALIB2_BMODE register description at address offset 0x18c
  *
  * Register default value:        0x00013812
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_calib2_bmode
  * SERDES_LANE_ANA_PLL::CALIB2
  */

typedef union {
  struct {
    uint32_t CFG_TDCBBPD_EN_BMODE : 1;
    ///< Switches TDC into bang-bang mode, based on timer (cfg_tdcbbpd_cnt_limit).
    ///< If enabled, cfg_tdc_ladder_min register must be configured to 1 or
    ///< greater.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_TDCBBPD_CNT_LIMIT_BMODE : 4;
    ///< Determines the number of refclk cycles from lock timer done until
    ///< TDC turns into bang-bang mode: 2 ^ cfg_tdcbbpd_cnt_limit.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x9"
    uint32_t CFG_GAINCAL_UPDATE_RATE_BMODE : 4;
    ///< This field sets the rate of adaptive feed-forward gain.
    ///< Every time the modulated feedback divider ratio is 0.5 or more away
    ///< from the target                          ratio (with frac code), the
    ///< feed-forward gain loop checks the amount of change in
    ///< TDC effective (after feed-forward cancelation) and based on the sign
    ///< of that change                          it would increment/decrement
    ///< the feed-forward gain.                          Then this register
    ///< determines every how many adaptive-ffgain checks the gain will
    ///< actually be updated. This technique could be useful if ratio is around
    ///< 0.5, to avoid                          too frequent gain updates (which
    ///< could cause stability problems in the loop).
    ///< The adaptive ffgain loop will react every 2 ^ cfg_gaincal_update_rate
    ///< gain checks
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t CFG_REFCLK_CYCLES_PER_1US_MAXCNT_BMODE : 8;
    ///< This signal defines the number of refclk cycles that fit in 1us.
    ///< Used in VREG loop in steady-state, such that whenever DAC code is
    ///< updated, we wait some time based on this counter before start sensing
    ///< the comparator.                         Could be used potentially
    ///< in the future for other timers as well.                         Use
    ///< the following formula:                         Frefclk x 1usec
    ///< AccessType="RW" BitOffset="9" ResetValue="0x9C"
    uint32_t CFG_SCOVRDEN_BMODE : 1;
    ///< Super coarse overwrite enable.
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t CFG_SCOVRD_BMODE : 4;
    ///< Super coarse overwrite value.
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_calib2_bmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_CALIB2_BMODE_DEFAULT (0x00013812U)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_BMODE_RD_MASK (0x003fffffU)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_BMODE_WR_MASK (0x003fffffU)


///< Switches TDC into bang-bang mode, based on timer (cfg_tdcbbpd_cnt_limit).
///< If enabled, cfg_tdc_ladder_min register must be configured to 1 or
///< greater.
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_BMODE_CFG_TDCBBPD_EN_BMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_BMODE_CFG_TDCBBPD_EN_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_BMODE_CFG_TDCBBPD_EN_BMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_BMODE_CFG_TDCBBPD_EN_BMODE_BF_DEF (0x00000000)

///< Determines the number of refclk cycles from lock timer done until
///< TDC turns into bang-bang mode: 2 ^ cfg_tdcbbpd_cnt_limit.
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_BMODE_CFG_TDCBBPD_CNT_LIMIT_BMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_BMODE_CFG_TDCBBPD_CNT_LIMIT_BMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_BMODE_CFG_TDCBBPD_CNT_LIMIT_BMODE_BF_MSK (0x0000001E)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_BMODE_CFG_TDCBBPD_CNT_LIMIT_BMODE_BF_DEF (0x00000012)

///< This field sets the rate of adaptive feed-forward gain.
///< Every time the modulated feedback divider ratio is 0.5 or more away
///< from the target                          ratio (with frac code), the
///< feed-forward gain loop checks the amount of change in
///< TDC effective (after feed-forward cancelation) and based on the sign
///< of that change                          it would increment/decrement
///< the feed-forward gain.                          Then this register
///< determines every how many adaptive-ffgain checks the gain will
///< actually be updated. This technique could be useful if ratio is around
///< 0.5, to avoid                          too frequent gain updates (which
///< could cause stability problems in the loop).
///< The adaptive ffgain loop will react every 2 ^ cfg_gaincal_update_rate
///< gain checks
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_BMODE_CFG_GAINCAL_UPDATE_RATE_BMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_BMODE_CFG_GAINCAL_UPDATE_RATE_BMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_BMODE_CFG_GAINCAL_UPDATE_RATE_BMODE_BF_MSK (0x000001E0)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_BMODE_CFG_GAINCAL_UPDATE_RATE_BMODE_BF_DEF (0x00000000)

///< This signal defines the number of refclk cycles that fit in 1us.
///< Used in VREG loop in steady-state, such that whenever DAC code is
///< updated, we wait some time based on this counter before start sensing
///< the comparator.                         Could be used potentially
///< in the future for other timers as well.                         Use
///< the following formula:                         Frefclk x 1usec
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_BMODE_CFG_REFCLK_CYCLES_PER_1US_MAXCNT_BMODE_BF_OFF ( 9)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_BMODE_CFG_REFCLK_CYCLES_PER_1US_MAXCNT_BMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_BMODE_CFG_REFCLK_CYCLES_PER_1US_MAXCNT_BMODE_BF_MSK (0x0001FE00)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_BMODE_CFG_REFCLK_CYCLES_PER_1US_MAXCNT_BMODE_BF_DEF (0x00013800)

///< Super coarse overwrite enable.
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_BMODE_CFG_SCOVRDEN_BMODE_BF_OFF (17)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_BMODE_CFG_SCOVRDEN_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_BMODE_CFG_SCOVRDEN_BMODE_BF_MSK (0x00020000)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_BMODE_CFG_SCOVRDEN_BMODE_BF_DEF (0x00000000)

///< Super coarse overwrite value.
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_BMODE_CFG_SCOVRD_BMODE_BF_OFF (18)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_BMODE_CFG_SCOVRD_BMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_BMODE_CFG_SCOVRD_BMODE_BF_MSK (0x003C0000)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_BMODE_CFG_SCOVRD_BMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_PLL_FSM_CONTROL_BMODE register description at address offset 0x190
  *
  * Register default value:        0x0000020E
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_pll_fsm_control_bmode
  * SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL
  */

typedef union {
  struct {
    uint32_t CFG_DCOSETTLE_MODE_BMODE : 1;
    ///< Settling time exit mode. VREG calibration and all rest of PLL FSM
    ///< would start only after DCO has settle                         &#39;1&#39;:
    ///< fbclk detected                         &#39;0&#39;: timer
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_DCOSETTLE_TIME_BMODE : 4;
    ///< DCO settling time timer (cfg_dcosettle_mode=0).
    ///< refclk cycles = 2^reg
    ///< AccessType="RW" BitOffset="1" ResetValue="0x7"
    uint32_t CFG_SKIP_STDC_CALIB_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_stdc_calib
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t CFG_STAY_STDC_CALIB_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_stdc_calib
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t CFG_SKIP_VTDC_CALIB_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_vtdc_calib
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t CFG_STAY_VTDC_CALIB_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_vtdc_calib
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CFG_SKIP_SC_CALIB_BMODE : 1;
    ///< Skip the sc calib.
    ///< AccessType="RW" BitOffset="9" ResetValue="0x1"
    uint32_t CFG_STAY_SC_CALIB_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_sc_calib
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t CFG_SKIP_FIRST_AFC_CALIB_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_first_afc_calib
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t CFG_STAY_FIRST_AFC_CALIB_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_first_afc_calib
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t CFG_SKIP_DCO_SWING_CALIB_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_dco_swing_calib
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t CFG_STAY_DCO_SWING_CALIB_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_dco_swing_calib
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t CFG_SKIP_KVCC_CALIB_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_kvcc_calib
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t CFG_STAY_KVCC_CALIB_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_kvcc_calib
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t CFG_SKIP_SECOND_AFC_CALIB_BMODE : 1;
    ///< If set to 1, the PLL will only run one afc calibration before kvcc
    ///< calibration                         If set to 0, the PLL will run
    ///< the AFC calibration for the second time after kvcc calibration ends.
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t CFG_STAY_SECOND_AFC_CALIB_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_second_afc_calib
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t CFG_SKIP_FINE_FLL_CALIB_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_fine_fll_calib
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t CFG_STAY_FINE_FLL_CALIB_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_fine_fll_calib
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_pll_fsm_ctrl_bmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_DEFAULT (0x0000020eU)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_RD_MASK (0x001fffffU)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_WR_MASK (0x001fffffU)


///< Settling time exit mode. VREG calibration and all rest of PLL FSM
///< would start only after DCO has settle                         &#39;1&#39;:
///< fbclk detected                         &#39;0&#39;: timer
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_DCOSETTLE_MODE_BMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_DCOSETTLE_MODE_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_DCOSETTLE_MODE_BMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_DCOSETTLE_MODE_BMODE_BF_DEF (0x00000000)

///< DCO settling time timer (cfg_dcosettle_mode=0).
///< refclk cycles = 2^reg
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_DCOSETTLE_TIME_BMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_DCOSETTLE_TIME_BMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_DCOSETTLE_TIME_BMODE_BF_MSK (0x0000001E)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_DCOSETTLE_TIME_BMODE_BF_DEF (0x0000000E)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_stdc_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_SKIP_STDC_CALIB_BMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_SKIP_STDC_CALIB_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_SKIP_STDC_CALIB_BMODE_BF_MSK (0x00000020)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_SKIP_STDC_CALIB_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_stdc_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_STAY_STDC_CALIB_BMODE_BF_OFF ( 6)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_STAY_STDC_CALIB_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_STAY_STDC_CALIB_BMODE_BF_MSK (0x00000040)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_STAY_STDC_CALIB_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_vtdc_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_SKIP_VTDC_CALIB_BMODE_BF_OFF ( 7)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_SKIP_VTDC_CALIB_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_SKIP_VTDC_CALIB_BMODE_BF_MSK (0x00000080)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_SKIP_VTDC_CALIB_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_vtdc_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_STAY_VTDC_CALIB_BMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_STAY_VTDC_CALIB_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_STAY_VTDC_CALIB_BMODE_BF_MSK (0x00000100)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_STAY_VTDC_CALIB_BMODE_BF_DEF (0x00000000)

///< Skip the sc calib.
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_SKIP_SC_CALIB_BMODE_BF_OFF ( 9)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_SKIP_SC_CALIB_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_SKIP_SC_CALIB_BMODE_BF_MSK (0x00000200)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_SKIP_SC_CALIB_BMODE_BF_DEF (0x00000200)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_sc_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_STAY_SC_CALIB_BMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_STAY_SC_CALIB_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_STAY_SC_CALIB_BMODE_BF_MSK (0x00000400)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_STAY_SC_CALIB_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_first_afc_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_SKIP_FIRST_AFC_CALIB_BMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_SKIP_FIRST_AFC_CALIB_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_SKIP_FIRST_AFC_CALIB_BMODE_BF_MSK (0x00000800)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_SKIP_FIRST_AFC_CALIB_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_first_afc_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_STAY_FIRST_AFC_CALIB_BMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_STAY_FIRST_AFC_CALIB_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_STAY_FIRST_AFC_CALIB_BMODE_BF_MSK (0x00001000)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_STAY_FIRST_AFC_CALIB_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_dco_swing_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_SKIP_DCO_SWING_CALIB_BMODE_BF_OFF (13)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_SKIP_DCO_SWING_CALIB_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_SKIP_DCO_SWING_CALIB_BMODE_BF_MSK (0x00002000)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_SKIP_DCO_SWING_CALIB_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_dco_swing_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_STAY_DCO_SWING_CALIB_BMODE_BF_OFF (14)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_STAY_DCO_SWING_CALIB_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_STAY_DCO_SWING_CALIB_BMODE_BF_MSK (0x00004000)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_STAY_DCO_SWING_CALIB_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_kvcc_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_SKIP_KVCC_CALIB_BMODE_BF_OFF (15)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_SKIP_KVCC_CALIB_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_SKIP_KVCC_CALIB_BMODE_BF_MSK (0x00008000)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_SKIP_KVCC_CALIB_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_kvcc_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_STAY_KVCC_CALIB_BMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_STAY_KVCC_CALIB_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_STAY_KVCC_CALIB_BMODE_BF_MSK (0x00010000)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_STAY_KVCC_CALIB_BMODE_BF_DEF (0x00000000)

///< If set to 1, the PLL will only run one afc calibration before kvcc
///< calibration                         If set to 0, the PLL will run
///< the AFC calibration for the second time after kvcc calibration ends.
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_SKIP_SECOND_AFC_CALIB_BMODE_BF_OFF (17)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_SKIP_SECOND_AFC_CALIB_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_SKIP_SECOND_AFC_CALIB_BMODE_BF_MSK (0x00020000)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_SKIP_SECOND_AFC_CALIB_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_second_afc_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_STAY_SECOND_AFC_CALIB_BMODE_BF_OFF (18)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_STAY_SECOND_AFC_CALIB_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_STAY_SECOND_AFC_CALIB_BMODE_BF_MSK (0x00040000)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_STAY_SECOND_AFC_CALIB_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_fine_fll_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_SKIP_FINE_FLL_CALIB_BMODE_BF_OFF (19)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_SKIP_FINE_FLL_CALIB_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_SKIP_FINE_FLL_CALIB_BMODE_BF_MSK (0x00080000)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_SKIP_FINE_FLL_CALIB_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_fine_fll_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_STAY_FINE_FLL_CALIB_BMODE_BF_OFF (20)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_STAY_FINE_FLL_CALIB_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_STAY_FINE_FLL_CALIB_BMODE_BF_MSK (0x00100000)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_CFG_STAY_FINE_FLL_CALIB_BMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_TEMP_TRACKING_BMODE register description at address offset 0x194
  *
  * Register default value:        0x00000027
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_temp_tracking_bmode
  * SERDES_LANE_ANA_PLL::TEMP_TRACKING
  */

typedef union {
  struct {
    uint32_t CFG_TEMP_TRACK_EN_BMODE : 1;
    ///< Enable signal for the FINE and DTR temperature tracking feature.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t CFG_FINE2DTR_RATIO_BMODE : 6;
    ///< Sets the ratio between DTR cap and fine cap. Required for DTR temp
    ///< tracking.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x13"
    uint32_t CFG_SSC_TRACK_EN_BMODE : 1;
    ///< Set this to &#39;1&#39; for SSC&#39;ed refclk to enable fast cap-swap
    ///< during boost mode.
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_temp_tracking_bmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_BMODE_DEFAULT (0x00000027U)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_BMODE_RD_MASK (0x000000ffU)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_BMODE_WR_MASK (0x000000ffU)


///< Enable signal for the FINE and DTR temperature tracking feature.
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_BMODE_CFG_TEMP_TRACK_EN_BMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_BMODE_CFG_TEMP_TRACK_EN_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_BMODE_CFG_TEMP_TRACK_EN_BMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_BMODE_CFG_TEMP_TRACK_EN_BMODE_BF_DEF (0x00000001)

///< Sets the ratio between DTR cap and fine cap. Required for DTR temp
///< tracking.
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_BMODE_CFG_FINE2DTR_RATIO_BMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_BMODE_CFG_FINE2DTR_RATIO_BMODE_BF_WID ( 6)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_BMODE_CFG_FINE2DTR_RATIO_BMODE_BF_MSK (0x0000007E)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_BMODE_CFG_FINE2DTR_RATIO_BMODE_BF_DEF (0x00000026)

///< Set this to &#39;1&#39; for SSC&#39;ed refclk to enable fast cap-swap
///< during boost mode.
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_BMODE_CFG_SSC_TRACK_EN_BMODE_BF_OFF ( 7)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_BMODE_CFG_SSC_TRACK_EN_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_BMODE_CFG_SSC_TRACK_EN_BMODE_BF_MSK (0x00000080)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_BMODE_CFG_SSC_TRACK_EN_BMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_ANA_CONTROL1_BMODE register description at address offset 0x198
  *
  * Register default value:        0x00000452
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_ana_control1_bmode
  * LCPLL_ANA_CONTROL Register
  */

typedef union {
  struct {
    uint32_t CFG_PLL_BYPASS_BMODE : 1;
    ///< When 1, the following output clocks will drive out the input refclk
    ///< (after prediv). Relevant to common PLL only.
    ///< 100MHz refclk                         156.25MHz refclk
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_SDDIV_EN_BMODE : 1;
    ///< Ungates dco/2 clock that goes into filter&#39;s SD post divider.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x1"
    uint32_t CFG_SDDIV_RATIO_BMODE : 3;
    ///< Sets Fine and DTR SD clock division ratio, from 1 to 5. Input clock
    ///< is dco/2 so possible ratios are 2,4,6,8,10.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x4"
    uint32_t CFG_SD2F0_CLK_SEL_BMODE : 1;
    ///< Sets DTR SD clock division ratio:                         0 - fine
    ///< SD clock                         1 - fine SD clock further divided
    ///< by 2
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t CFG_PREDIV_RATIO_BMODE : 4;
    ///< Refclk pre-divider ratio, from 1 to 5, relevant only to lane PLL where
    ///< refclksel pin is tied to 0.
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t CFG_REFCLK4LANEDIV_EN_BMODE : 1;
    ///< Ungates dco/2 clock that goes into refclk156div post divider.
    ///< 1 - common PLL                         0 - lane PLL
    ///< AccessType="RW" BitOffset="10" ResetValue="0x1"
    uint32_t CFG_FBDIV_ENB_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL1::cfg_fbdiv_enb
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t CFG_DCODIV2_EN_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL1::cfg_dcodiv2_en
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
    uint32_t CFG_HSMON0_SEL_BMODE : 4;
    ///< Select signal for obsmux0:                         0: vss
    ///< 1: iclk_int_refclk                         2: o_fbclk2obs_clk
    ///< 3: iclk_dco_divby2                         4: iclk_dco_divby5
    ///< 5: a2f_lv_0p9_2obs                         6: vss
    ///< 7: cbdiv56_lanediv32_clk                         8: clk_to_pcs40_clk
    ///< 9: clk_to_pcs33_34_clk                         A: o_sd_dtr_clk
    ///< B: o_sd_fine_clk                         C: ock_a2f_lv_ldo
    ///< D: otdc_calib_clk                         E: i_plllock
    ///< F: i_visa8to1_2obs
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t CFG_HSMON0_40INV_EN_BMODE : 1;
    ///< When 0, selected signal on hsmon0 is further delayed by 40 inverters.
    ///< This is to analyze thermal noise and supply noise jitter
    ///< Note that lately we found that this mode is set when this reg is set
    ///< to 0 (rather than 1 as previously thought)
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t CFG_HSMON1_SEL_BMODE : 4;
    ///< Select signal for obsmux1. Same signals as in obsmux0.
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t CFG_HSMON1_40INV_EN_BMODE : 1;
    ///< When 0, selected signal on hsmon1 is further delayed by 40 inverters.
    ///< This is to analyze thermal noise and supply noise jitter
    ///< Note that lately we found that this mode is set when this reg is set
    ///< to 0 (rather than 1 as previously thought)
    ///< AccessType="RW" BitOffset="25" ResetValue="0x0"
    uint32_t CFG_CLK2POSTDIV_DIV2_SEL_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL1::cfg_clk2postdiv_div2_sel
    ///< AccessType="RW" BitOffset="26" ResetValue="0x0"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="27" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_ana_ctrl1_bmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_DEFAULT (0x00000452U)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_RD_MASK (0x07ff1fffU)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_WR_MASK (0x07ff1fffU)


///< When 1, the following output clocks will drive out the input refclk
///< (after prediv). Relevant to common PLL only.
///< 100MHz refclk                         156.25MHz refclk
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_CFG_PLL_BYP_BMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_CFG_PLL_BYP_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_CFG_PLL_BYP_BMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_CFG_PLL_BYP_BMODE_BF_DEF (0x00000000)

///< Ungates dco/2 clock that goes into filter&#39;s SD post divider.
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_CFG_SDDIV_EN_BMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_CFG_SDDIV_EN_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_CFG_SDDIV_EN_BMODE_BF_MSK (0x00000002)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_CFG_SDDIV_EN_BMODE_BF_DEF (0x00000002)

///< Sets Fine and DTR SD clock division ratio, from 1 to 5. Input clock
///< is dco/2 so possible ratios are 2,4,6,8,10.
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_CFG_SDDIV_RATIO_BMODE_BF_OFF ( 2)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_CFG_SDDIV_RATIO_BMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_CFG_SDDIV_RATIO_BMODE_BF_MSK (0x0000001C)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_CFG_SDDIV_RATIO_BMODE_BF_DEF (0x00000010)

///< Sets DTR SD clock division ratio:                         0 - fine
///< SD clock                         1 - fine SD clock further divided
///< by 2
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_CFG_SD2F0_CLK_SEL_BMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_CFG_SD2F0_CLK_SEL_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_CFG_SD2F0_CLK_SEL_BMODE_BF_MSK (0x00000020)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_CFG_SD2F0_CLK_SEL_BMODE_BF_DEF (0x00000000)

///< Refclk pre-divider ratio, from 1 to 5, relevant only to lane PLL where
///< refclksel pin is tied to 0.
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_CFG_PREDIV_RATIO_BMODE_BF_OFF ( 6)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_CFG_PREDIV_RATIO_BMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_CFG_PREDIV_RATIO_BMODE_BF_MSK (0x000003C0)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_CFG_PREDIV_RATIO_BMODE_BF_DEF (0x00000040)

///< Ungates dco/2 clock that goes into refclk156div post divider.
///< 1 - common PLL                         0 - lane PLL
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_CFG_REFCLK4LANEDIV_EN_BMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_CFG_REFCLK4LANEDIV_EN_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_CFG_REFCLK4LANEDIV_EN_BMODE_BF_MSK (0x00000400)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_CFG_REFCLK4LANEDIV_EN_BMODE_BF_DEF (0x00000400)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL1::cfg_fbdiv_enb
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_CFG_FBDIV_ENB_BMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_CFG_FBDIV_ENB_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_CFG_FBDIV_ENB_BMODE_BF_MSK (0x00000800)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_CFG_FBDIV_ENB_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL1::cfg_dcodiv2_en
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_CFG_DCODIV2_EN_BMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_CFG_DCODIV2_EN_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_CFG_DCODIV2_EN_BMODE_BF_MSK (0x00001000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_CFG_DCODIV2_EN_BMODE_BF_DEF (0x00000000)

///< Select signal for obsmux0:                         0: vss
///< 1: iclk_int_refclk                         2: o_fbclk2obs_clk
///< 3: iclk_dco_divby2                         4: iclk_dco_divby5
///< 5: a2f_lv_0p9_2obs                         6: vss
///< 7: cbdiv56_lanediv32_clk                         8: clk_to_pcs40_clk
///< 9: clk_to_pcs33_34_clk                         A: o_sd_dtr_clk
///< B: o_sd_fine_clk                         C: ock_a2f_lv_ldo
///< D: otdc_calib_clk                         E: i_plllock
///< F: i_visa8to1_2obs
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_CFG_HSMON0_SEL_BMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_CFG_HSMON0_SEL_BMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_CFG_HSMON0_SEL_BMODE_BF_MSK (0x000F0000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_CFG_HSMON0_SEL_BMODE_BF_DEF (0x00000000)

///< When 0, selected signal on hsmon0 is further delayed by 40 inverters.
///< This is to analyze thermal noise and supply noise jitter
///< Note that lately we found that this mode is set when this reg is set
///< to 0 (rather than 1 as previously thought)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_CFG_HSMON0_40INV_EN_BMODE_BF_OFF (20)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_CFG_HSMON0_40INV_EN_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_CFG_HSMON0_40INV_EN_BMODE_BF_MSK (0x00100000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_CFG_HSMON0_40INV_EN_BMODE_BF_DEF (0x00000000)

///< Select signal for obsmux1. Same signals as in obsmux0.
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_CFG_HSMON1_SEL_BMODE_BF_OFF (21)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_CFG_HSMON1_SEL_BMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_CFG_HSMON1_SEL_BMODE_BF_MSK (0x01E00000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_CFG_HSMON1_SEL_BMODE_BF_DEF (0x00000000)

///< When 0, selected signal on hsmon1 is further delayed by 40 inverters.
///< This is to analyze thermal noise and supply noise jitter
///< Note that lately we found that this mode is set when this reg is set
///< to 0 (rather than 1 as previously thought)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_CFG_HSMON1_40INV_EN_BMODE_BF_OFF (25)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_CFG_HSMON1_40INV_EN_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_CFG_HSMON1_40INV_EN_BMODE_BF_MSK (0x02000000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_CFG_HSMON1_40INV_EN_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL1::cfg_clk2postdiv_div2_sel
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_CFG_CLK2POSTDIV_DIV2_SEL_BMODE_BF_OFF (26)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_CFG_CLK2POSTDIV_DIV2_SEL_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_CFG_CLK2POSTDIV_DIV2_SEL_BMODE_BF_MSK (0x04000000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_CFG_CLK2POSTDIV_DIV2_SEL_BMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_ANA_CONTROL2_BMODE register description at address offset 0x19c
  *
  * Register default value:        0x000080A0
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_ana_control2_bmode
  * SERDES_LANE_ANA_PLL::ANA_CONTROL2
  */

typedef union {
  struct {
    uint32_t CFG_REFCLK_SEL_BMODE : 1;
    ///< Relevant only if id_pll_refclksel[2:0] (on PLL interface) is set to
    ///< 3&#39;b0.                         Selects the refclk source for the
    ///< PLL:                         3&#39;h0 : vss
    ///< 3&#39;h1 : ref_clk_1                         3&#39;h2 : ref_clk_2
    ///< 3&#39;h3 : ref_clk_3                         3&#39;h4 : ref_clk_4
    ///< 3&#39;h5 : ref_clk_5                         3&#39;h6 : vss
    ///< 3&#39;h7 : vss
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_REFCLK4LANE_DIVRATIO_BMODE : 10;
    ///< Division ratio for refclk156 post divider (input clock is dco).
    ///< AccessType="RW" BitOffset="1" ResetValue="0x50"
    uint32_t CFG_A2F_CLKREG_EN_BMODE : 1;
    ///< Enables A2F.                         A2F are used to measure internal
    ///< supply noise.
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t CFG_A2F_CLKUNREG_EN_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL2::cfg_a2f_clkunreg_en
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t CFG_A2F_LDO_DCO_EN_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL2::cfg_a2f_ldo_dco_en
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t CFG_BTI_EN_BMODE : 1;
    ///< BTI clock gate signal. By default, whenever PLL is off, BTI clock
    ///< drives DCO clock distribution to prevent assymetric Aging. Setting
    ///< this register to &#39;1&#39; will gate BTI clock.
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t CFG_DCO_ACBUF2TX_EN_BMODE : 1;
    ///< Used as LDO enable.                         Gated by pll enable.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x1"
    uint32_t CFG_HSCNTR_HSCLK_SEL_OVR_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL2::cfg_hscntr_hsclk_sel_ovr
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t CFG_HSCNTR_HSCLK_SEL_OVR_VAL_BMODE : 3;
    ///< High speed counter (hscnter) input.                         &#39;0&#39;
    ///< - input from DCO/4 (default)                         &#39;1&#39; -
    ///< A2F_ldo clock is routed to high speed counter, allowing measurement
    ///< of A2F frequency in HVM (like in IDV)                         &#39;2&#39;
    ///< - A2F_lv clock is routed to high speed counter, allowing measurement
    ///< of A2F frequency in HVM (like in IDV)                         &#39;3&#39;
    ///< - vss
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t CFG_PLL_REFCLK_HSMODE_SEL_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL2::cfg_pll_refclk_hsmode_sel
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_ana_ctrl2_bmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_BMODE_DEFAULT (0x000080a0U)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_BMODE_RD_MASK (0x001fffffU)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_BMODE_WR_MASK (0x001fffffU)


///< Relevant only if id_pll_refclksel[2:0] (on PLL interface) is set to
///< 3&#39;b0.                         Selects the refclk source for the
///< PLL:                         3&#39;h0 : vss
///< 3&#39;h1 : ref_clk_1                         3&#39;h2 : ref_clk_2
///< 3&#39;h3 : ref_clk_3                         3&#39;h4 : ref_clk_4
///< 3&#39;h5 : ref_clk_5                         3&#39;h6 : vss
///< 3&#39;h7 : vss
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_BMODE_CFG_REFCLK_SEL_BMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_BMODE_CFG_REFCLK_SEL_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_BMODE_CFG_REFCLK_SEL_BMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_BMODE_CFG_REFCLK_SEL_BMODE_BF_DEF (0x00000000)

///< Division ratio for refclk156 post divider (input clock is dco).
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_BMODE_CFG_REFCLK4LANE_DIVRATIO_BMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_BMODE_CFG_REFCLK4LANE_DIVRATIO_BMODE_BF_WID (10)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_BMODE_CFG_REFCLK4LANE_DIVRATIO_BMODE_BF_MSK (0x000007FE)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_BMODE_CFG_REFCLK4LANE_DIVRATIO_BMODE_BF_DEF (0x000000A0)

///< Enables A2F.                         A2F are used to measure internal
///< supply noise.
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_BMODE_CFG_A2F_CLKREG_EN_BMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_BMODE_CFG_A2F_CLKREG_EN_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_BMODE_CFG_A2F_CLKREG_EN_BMODE_BF_MSK (0x00000800)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_BMODE_CFG_A2F_CLKREG_EN_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL2::cfg_a2f_clkunreg_en
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_BMODE_CFG_A2F_CLKUNREG_EN_BMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_BMODE_CFG_A2F_CLKUNREG_EN_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_BMODE_CFG_A2F_CLKUNREG_EN_BMODE_BF_MSK (0x00001000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_BMODE_CFG_A2F_CLKUNREG_EN_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL2::cfg_a2f_ldo_dco_en
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_BMODE_CFG_A2F_LDO_DCO_EN_BMODE_BF_OFF (13)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_BMODE_CFG_A2F_LDO_DCO_EN_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_BMODE_CFG_A2F_LDO_DCO_EN_BMODE_BF_MSK (0x00002000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_BMODE_CFG_A2F_LDO_DCO_EN_BMODE_BF_DEF (0x00000000)

///< BTI clock gate signal. By default, whenever PLL is off, BTI clock
///< drives DCO clock distribution to prevent assymetric Aging. Setting
///< this register to &#39;1&#39; will gate BTI clock.
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_BMODE_CFG_BTI_EN_BMODE_BF_OFF (14)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_BMODE_CFG_BTI_EN_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_BMODE_CFG_BTI_EN_BMODE_BF_MSK (0x00004000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_BMODE_CFG_BTI_EN_BMODE_BF_DEF (0x00000000)

///< Used as LDO enable.                         Gated by pll enable.
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_BMODE_CFG_DCO_ACBUF2TX_EN_BMODE_BF_OFF (15)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_BMODE_CFG_DCO_ACBUF2TX_EN_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_BMODE_CFG_DCO_ACBUF2TX_EN_BMODE_BF_MSK (0x00008000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_BMODE_CFG_DCO_ACBUF2TX_EN_BMODE_BF_DEF (0x00008000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL2::cfg_hscntr_hsclk_sel_ovr
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_BMODE_CFG_HSCNTR_HSCLK_SEL_OVR_BMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_BMODE_CFG_HSCNTR_HSCLK_SEL_OVR_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_BMODE_CFG_HSCNTR_HSCLK_SEL_OVR_BMODE_BF_MSK (0x00010000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_BMODE_CFG_HSCNTR_HSCLK_SEL_OVR_BMODE_BF_DEF (0x00000000)

///< High speed counter (hscnter) input.                         &#39;0&#39;
///< - input from DCO/4 (default)                         &#39;1&#39; -
///< A2F_ldo clock is routed to high speed counter, allowing measurement
///< of A2F frequency in HVM (like in IDV)                         &#39;2&#39;
///< - A2F_lv clock is routed to high speed counter, allowing measurement
///< of A2F frequency in HVM (like in IDV)                         &#39;3&#39;
///< - vss
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_BMODE_CFG_HSCNTR_HSCLK_SEL_OVR_VAL_BMODE_BF_OFF (17)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_BMODE_CFG_HSCNTR_HSCLK_SEL_OVR_VAL_BMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_BMODE_CFG_HSCNTR_HSCLK_SEL_OVR_VAL_BMODE_BF_MSK (0x000E0000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_BMODE_CFG_HSCNTR_HSCLK_SEL_OVR_VAL_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL2::cfg_pll_refclk_hsmode_sel
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_BMODE_CFG_PLL_REFCLK_HSMODE_SEL_BMODE_BF_OFF (20)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_BMODE_CFG_PLL_REFCLK_HSMODE_SEL_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_BMODE_CFG_PLL_REFCLK_HSMODE_SEL_BMODE_BF_MSK (0x00100000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_BMODE_CFG_PLL_REFCLK_HSMODE_SEL_BMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_ANA_CONTROL3_BMODE register description at address offset 0x1a0
  *
  * Register default value:        0x00A00001
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_ana_control3_bmode
  * SERDES_LANE_ANA_PLL::ANA_CONTROL3
  */

typedef union {
  struct {
    uint32_t CFG_PKSEN_EN_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_en
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t CFG_PKSEN_COMP_BMODE : 4;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_comp
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t CFG_PKSEN_COMP_EN_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_comp_en
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t CFG_PKSEN_COMP_INN_SEL_BMODE : 2;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_comp_inn_sel
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t CFG_PKSEN_COMP_INP_SEL_BMODE : 2;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_comp_inp_sel
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CFG_PKSEN_COMP_VREF_VAL_BMODE : 6;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_comp_vref_val
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t CFG_PKSEN_VREF_SEL_BMODE : 6;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_vref_sel
    ///< AccessType="RW" BitOffset="16" ResetValue="0x20"
    uint32_t CFG_LDO_PKSEN_BYP_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_ldo_pksen_byp
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t CFG_PKSEN_RES_BYPB_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_res_bypb
    ///< AccessType="RW" BitOffset="23" ResetValue="0x1"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_ana_ctrl3_bmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_BMODE_DEFAULT (0x00a00001U)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_BMODE_RD_MASK (0x00ffffffU)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_BMODE_WR_MASK (0x00ffffffU)


///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_en
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_BMODE_CFG_PKSEN_EN_BMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_BMODE_CFG_PKSEN_EN_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_BMODE_CFG_PKSEN_EN_BMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_BMODE_CFG_PKSEN_EN_BMODE_BF_DEF (0x00000001)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_comp
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_BMODE_CFG_PKSEN_COMP_BMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_BMODE_CFG_PKSEN_COMP_BMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_BMODE_CFG_PKSEN_COMP_BMODE_BF_MSK (0x0000001E)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_BMODE_CFG_PKSEN_COMP_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_comp_en
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_BMODE_CFG_PKSEN_COMP_EN_BMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_BMODE_CFG_PKSEN_COMP_EN_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_BMODE_CFG_PKSEN_COMP_EN_BMODE_BF_MSK (0x00000020)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_BMODE_CFG_PKSEN_COMP_EN_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_comp_inn_sel
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_BMODE_CFG_PKSEN_COMP_INN_SEL_BMODE_BF_OFF ( 6)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_BMODE_CFG_PKSEN_COMP_INN_SEL_BMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_BMODE_CFG_PKSEN_COMP_INN_SEL_BMODE_BF_MSK (0x000000C0)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_BMODE_CFG_PKSEN_COMP_INN_SEL_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_comp_inp_sel
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_BMODE_CFG_PKSEN_COMP_INP_SEL_BMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_BMODE_CFG_PKSEN_COMP_INP_SEL_BMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_BMODE_CFG_PKSEN_COMP_INP_SEL_BMODE_BF_MSK (0x00000300)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_BMODE_CFG_PKSEN_COMP_INP_SEL_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_comp_vref_val
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_BMODE_CFG_PKSEN_COMP_VREF_VAL_BMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_BMODE_CFG_PKSEN_COMP_VREF_VAL_BMODE_BF_WID ( 6)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_BMODE_CFG_PKSEN_COMP_VREF_VAL_BMODE_BF_MSK (0x0000FC00)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_BMODE_CFG_PKSEN_COMP_VREF_VAL_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_vref_sel
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_BMODE_CFG_PKSEN_VREF_SEL_BMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_BMODE_CFG_PKSEN_VREF_SEL_BMODE_BF_WID ( 6)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_BMODE_CFG_PKSEN_VREF_SEL_BMODE_BF_MSK (0x003F0000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_BMODE_CFG_PKSEN_VREF_SEL_BMODE_BF_DEF (0x00200000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_ldo_pksen_byp
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_BMODE_CFG_LDO_PKSEN_BYP_BMODE_BF_OFF (22)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_BMODE_CFG_LDO_PKSEN_BYP_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_BMODE_CFG_LDO_PKSEN_BYP_BMODE_BF_MSK (0x00400000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_BMODE_CFG_LDO_PKSEN_BYP_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_res_bypb
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_BMODE_CFG_PKSEN_RES_BYPB_BMODE_BF_OFF (23)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_BMODE_CFG_PKSEN_RES_BYPB_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_BMODE_CFG_PKSEN_RES_BYPB_BMODE_BF_MSK (0x00800000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_BMODE_CFG_PKSEN_RES_BYPB_BMODE_BF_DEF (0x00800000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_DFX0_BMODE register description at address offset 0x1a4
  *
  * Register default value:        0x00040000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_dfx0_bmode
  * SERDES_LANE_ANA_PLL::DFX0
  */

typedef union {
  struct {
    uint32_t CFG_FINE_MODULATION_EN_BMODE : 1;
    ///< Modulates fine code by adding an offset that toggles between values
    ///< defined by cfg_fine_modulation_sel.                          cfg_modulation_toggle_delay
    ///< sets modulation frequency.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_FINE_MODULATION_SEL_BMODE : 1;
    ///< Sets magnitude of fine modulation:                          0 - fine
    ///< offset toggles between 0 and +1.                         1 - fine
    ///< offset toggles between 0 and cfg_fine2dtr_ratio.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t CFG_TDCPE_MODULATION_EN_BMODE : 1;
    ///< Modulates TDC PE by adding an offset that toggles between 0 and 1.
    ///< cfg_modulation_toggle_delay sets modulation frequency.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t CFG_LDO_MODULATION_EN_BMODE : 1;
    ///< Modulates LDO by adding an offset that toggles between 0 and 1.
    ///< cfg_modulation_toggle_delay sets modulation frequency.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t CFG_MODULATION_TOGGLE_DELAY_BMODE : 4;
    ///< Sets modulation frequency.                         Code would toggle
    ///< every 2^reg refclk cycles.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t CFG_VISA8TO1_2OBS_SEL_BMODE : 3;
    ///< Selects which bit in VISA lane0 would be routed to high speed monitor
    ///< mux.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CFG_DFX_FEEDFWRD_OFFSET_OVR_EN_BMODE : 1;
    ///< Enables overriding feed forward offset. Useful in integer mode to
    ///< shift fbclk phase.
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t CFG_DFX_FEEDFWRDPHASE_OVR_VAL_BMODE : 5;
    ///< Sets feed forward offset override value. Useful in integer mode to
    ///< shift fbclk phase.                         The 9 integer bits, 3 fractional
    ///< bits.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t CFG_DFX_DISABLE_DFT_TIMER_OVRD_VAL_BMODE : 1;
    ///< When cfg_dfx_disable_dft_timer_ovrd_en=1, this bit will set DFT timer
    ///< mode.                          When 0, DFT measurements always run.
    ///< When 1, DFT measurements always off.                          No need
    ///< to change this reg. Just keep it at 0. (could have been removed)
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t CFG_DFX_DISABLE_DFT_TIMER_OVRD_EN_BMODE : 1;
    ///< When 0, DFT measurements would stop when minmax timer overflows.
    ///< When 1, DFT measurements run based on cfg_dfx_disable_dft_timer_ovrd_val.
    ///< AccessType="RW" BitOffset="18" ResetValue="0x1"
    uint32_t CFG_DPSO_BYPASS_MODE_BMODE : 1;
    ///< When 0, DPSO bus is sampled by fbclk falling edge before sent to TX
    ///< PISO                         When 1, the sample is bypassed. This
    ///< is needed when monitoring VISA signals that are not of fbclk nor on
    ///< refclk domain.
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_dfx0_bmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_DFX0_BMODE_DEFAULT (0x00040000U)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_BMODE_RD_MASK (0x000fffffU)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_BMODE_WR_MASK (0x000fffffU)


///< Modulates fine code by adding an offset that toggles between values
///< defined by cfg_fine_modulation_sel.                          cfg_modulation_toggle_delay
///< sets modulation frequency.
#define PMA_TXPLLCFGLOADER_MSG_DFX0_BMODE_CFG_FINE_MOD_EN_BMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_BMODE_CFG_FINE_MOD_EN_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_BMODE_CFG_FINE_MOD_EN_BMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_BMODE_CFG_FINE_MOD_EN_BMODE_BF_DEF (0x00000000)

///< Sets magnitude of fine modulation:                          0 - fine
///< offset toggles between 0 and +1.                         1 - fine
///< offset toggles between 0 and cfg_fine2dtr_ratio.
#define PMA_TXPLLCFGLOADER_MSG_DFX0_BMODE_CFG_FINE_MOD_SEL_BMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_BMODE_CFG_FINE_MOD_SEL_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_BMODE_CFG_FINE_MOD_SEL_BMODE_BF_MSK (0x00000002)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_BMODE_CFG_FINE_MOD_SEL_BMODE_BF_DEF (0x00000000)

///< Modulates TDC PE by adding an offset that toggles between 0 and 1.
///< cfg_modulation_toggle_delay sets modulation frequency.
#define PMA_TXPLLCFGLOADER_MSG_DFX0_BMODE_CFG_TDCPE_MOD_EN_BMODE_BF_OFF ( 2)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_BMODE_CFG_TDCPE_MOD_EN_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_BMODE_CFG_TDCPE_MOD_EN_BMODE_BF_MSK (0x00000004)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_BMODE_CFG_TDCPE_MOD_EN_BMODE_BF_DEF (0x00000000)

///< Modulates LDO by adding an offset that toggles between 0 and 1.
///< cfg_modulation_toggle_delay sets modulation frequency.
#define PMA_TXPLLCFGLOADER_MSG_DFX0_BMODE_CFG_LDO_MOD_EN_BMODE_BF_OFF ( 3)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_BMODE_CFG_LDO_MOD_EN_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_BMODE_CFG_LDO_MOD_EN_BMODE_BF_MSK (0x00000008)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_BMODE_CFG_LDO_MOD_EN_BMODE_BF_DEF (0x00000000)

///< Sets modulation frequency.                         Code would toggle
///< every 2^reg refclk cycles.
#define PMA_TXPLLCFGLOADER_MSG_DFX0_BMODE_CFG_MOD_TOGGLE_DELAY_BMODE_BF_OFF ( 4)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_BMODE_CFG_MOD_TOGGLE_DELAY_BMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_BMODE_CFG_MOD_TOGGLE_DELAY_BMODE_BF_MSK (0x000000F0)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_BMODE_CFG_MOD_TOGGLE_DELAY_BMODE_BF_DEF (0x00000000)

///< Selects which bit in VISA lane0 would be routed to high speed monitor
///< mux.
#define PMA_TXPLLCFGLOADER_MSG_DFX0_BMODE_CFG_VISA8TO1_2OBS_SEL_BMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_BMODE_CFG_VISA8TO1_2OBS_SEL_BMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_BMODE_CFG_VISA8TO1_2OBS_SEL_BMODE_BF_MSK (0x00000700)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_BMODE_CFG_VISA8TO1_2OBS_SEL_BMODE_BF_DEF (0x00000000)

///< Enables overriding feed forward offset. Useful in integer mode to
///< shift fbclk phase.
#define PMA_TXPLLCFGLOADER_MSG_DFX0_BMODE_CFG_DFX_FEEDFWRD_OFFSET_OVR_EN_BMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_BMODE_CFG_DFX_FEEDFWRD_OFFSET_OVR_EN_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_BMODE_CFG_DFX_FEEDFWRD_OFFSET_OVR_EN_BMODE_BF_MSK (0x00000800)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_BMODE_CFG_DFX_FEEDFWRD_OFFSET_OVR_EN_BMODE_BF_DEF (0x00000000)

///< Sets feed forward offset override value. Useful in integer mode to
///< shift fbclk phase.                         The 9 integer bits, 3 fractional
///< bits.
#define PMA_TXPLLCFGLOADER_MSG_DFX0_BMODE_CFG_DFX_FEEDFWRDPHASE_OVR_VAL_BMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_BMODE_CFG_DFX_FEEDFWRDPHASE_OVR_VAL_BMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_BMODE_CFG_DFX_FEEDFWRDPHASE_OVR_VAL_BMODE_BF_MSK (0x0001F000)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_BMODE_CFG_DFX_FEEDFWRDPHASE_OVR_VAL_BMODE_BF_DEF (0x00000000)

///< When cfg_dfx_disable_dft_timer_ovrd_en=1, this bit will set DFT timer
///< mode.                          When 0, DFT measurements always run.
///< When 1, DFT measurements always off.                          No need
///< to change this reg. Just keep it at 0. (could have been removed)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_BMODE_CFG_DFX_DIS_DFT_TIMER_OVRD_VAL_BMODE_BF_OFF (17)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_BMODE_CFG_DFX_DIS_DFT_TIMER_OVRD_VAL_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_BMODE_CFG_DFX_DIS_DFT_TIMER_OVRD_VAL_BMODE_BF_MSK (0x00020000)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_BMODE_CFG_DFX_DIS_DFT_TIMER_OVRD_VAL_BMODE_BF_DEF (0x00000000)

///< When 0, DFT measurements would stop when minmax timer overflows.
///< When 1, DFT measurements run based on cfg_dfx_disable_dft_timer_ovrd_val.
#define PMA_TXPLLCFGLOADER_MSG_DFX0_BMODE_CFG_DFX_DIS_DFT_TIMER_OVRD_EN_BMODE_BF_OFF (18)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_BMODE_CFG_DFX_DIS_DFT_TIMER_OVRD_EN_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_BMODE_CFG_DFX_DIS_DFT_TIMER_OVRD_EN_BMODE_BF_MSK (0x00040000)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_BMODE_CFG_DFX_DIS_DFT_TIMER_OVRD_EN_BMODE_BF_DEF (0x00040000)

///< When 0, DPSO bus is sampled by fbclk falling edge before sent to TX
///< PISO                         When 1, the sample is bypassed. This
///< is needed when monitoring VISA signals that are not of fbclk nor on
///< refclk domain.
#define PMA_TXPLLCFGLOADER_MSG_DFX0_BMODE_CFG_DPSO_BYP_MODE_BMODE_BF_OFF (19)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_BMODE_CFG_DPSO_BYP_MODE_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_BMODE_CFG_DPSO_BYP_MODE_BMODE_BF_MSK (0x00080000)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_BMODE_CFG_DPSO_BYP_MODE_BMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_DFX1_BMODE register description at address offset 0x1a8
  *
  * Register default value:        0x0001AAAA
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_dfx1_bmode
  * SERDES_LANE_ANA_PLL::DFX1
  */

typedef union {
  struct {
    uint32_t CFG_DPSO_MARKER_BMODE : 16;
    ///< When serializing VISA 8b bus to TX, additional 16 (upper bits) are
    ///< set according to this register which could be used as a marker
    ///< AccessType="RW" BitOffset="0" ResetValue="0xAAAA"
    uint32_t CFG_TDCPE_MODULATION_VAL_BMODE : 5;
    ///< While cfg_tdcpe_modulation_en=1 define the TDC/STDC amplitude offset
    ///< (integer) during the tdc/stdc modulation.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x1"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_dfx1_bmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_DFX1_BMODE_DEFAULT (0x0001aaaaU)
#define PMA_TXPLLCFGLOADER_MSG_DFX1_BMODE_RD_MASK (0x001fffffU)
#define PMA_TXPLLCFGLOADER_MSG_DFX1_BMODE_WR_MASK (0x001fffffU)


///< When serializing VISA 8b bus to TX, additional 16 (upper bits) are
///< set according to this register which could be used as a marker
#define PMA_TXPLLCFGLOADER_MSG_DFX1_BMODE_CFG_DPSO_MARKER_BMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_DFX1_BMODE_CFG_DPSO_MARKER_BMODE_BF_WID (16)
#define PMA_TXPLLCFGLOADER_MSG_DFX1_BMODE_CFG_DPSO_MARKER_BMODE_BF_MSK (0x0000FFFF)
#define PMA_TXPLLCFGLOADER_MSG_DFX1_BMODE_CFG_DPSO_MARKER_BMODE_BF_DEF (0x0000AAAA)

///< While cfg_tdcpe_modulation_en=1 define the TDC/STDC amplitude offset
///< (integer) during the tdc/stdc modulation.
#define PMA_TXPLLCFGLOADER_MSG_DFX1_BMODE_CFG_TDCPE_MOD_VAL_BMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_DFX1_BMODE_CFG_TDCPE_MOD_VAL_BMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_DFX1_BMODE_CFG_TDCPE_MOD_VAL_BMODE_BF_MSK (0x001F0000)
#define PMA_TXPLLCFGLOADER_MSG_DFX1_BMODE_CFG_TDCPE_MOD_VAL_BMODE_BF_DEF (0x00010000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_LDO0_BMODE register description at address offset 0x1ac
  *
  * Register default value:        0x059002E0
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_ldo0_bmode
  * SERDES_LANE_ANA_PLL::LDO0
  */

typedef union {
  struct {
    uint32_t CFG_LDOCLK_BETA_BMODE : 3;
    ///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldoclk_beta
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_LDOCLK_BYP_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldoclk_byp
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t CFG_LDOCLK_VREF_SEL_BMODE : 6;
    ///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldoclk_vref_sel
    ///< AccessType="RW" BitOffset="4" ResetValue="0x2E"
    uint32_t CFG_LDODCO_BETA_BMODE : 3;
    ///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldodco_beta
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t CFG_LDODCO_BYP_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldodco_byp
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t CFG_LDODCO_VREF_RC_BMODE : 2;
    ///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldodco_vref_rc
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t CFG_LDODCO_VREF_SEL_BMODE : 6;
    ///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldodco_vref_sel
    ///< AccessType="RW" BitOffset="16" ResetValue="0x10"
    uint32_t CFG_LDODCO_HIGH_VREF_SEL_BMODE : 6;
    ///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldodco_high_vref_sel
    ///< AccessType="RW" BitOffset="22" ResetValue="0x16"
    uint32_t CFG_LDOREFGEN_BETA_BMODE : 3;
    ///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldorefgen_beta
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t CFG_VREFGEN_BYP_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::LDO0::cfg_vrefgen_byp
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_ldo0_bmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_LDO0_BMODE_DEFAULT (0x059002e0U)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_BMODE_RD_MASK (0xffffffffU)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_BMODE_WR_MASK (0xffffffffU)


///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldoclk_beta
#define PMA_TXPLLCFGLOADER_MSG_LDO0_BMODE_CFG_LDOCLK_BETA_BMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_BMODE_CFG_LDOCLK_BETA_BMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_BMODE_CFG_LDOCLK_BETA_BMODE_BF_MSK (0x00000007)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_BMODE_CFG_LDOCLK_BETA_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldoclk_byp
#define PMA_TXPLLCFGLOADER_MSG_LDO0_BMODE_CFG_LDOCLK_BYP_BMODE_BF_OFF ( 3)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_BMODE_CFG_LDOCLK_BYP_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_BMODE_CFG_LDOCLK_BYP_BMODE_BF_MSK (0x00000008)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_BMODE_CFG_LDOCLK_BYP_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldoclk_vref_sel
#define PMA_TXPLLCFGLOADER_MSG_LDO0_BMODE_CFG_LDOCLK_VREF_SEL_BMODE_BF_OFF ( 4)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_BMODE_CFG_LDOCLK_VREF_SEL_BMODE_BF_WID ( 6)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_BMODE_CFG_LDOCLK_VREF_SEL_BMODE_BF_MSK (0x000003F0)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_BMODE_CFG_LDOCLK_VREF_SEL_BMODE_BF_DEF (0x000002E0)

///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldodco_beta
#define PMA_TXPLLCFGLOADER_MSG_LDO0_BMODE_CFG_LDODCO_BETA_BMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_BMODE_CFG_LDODCO_BETA_BMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_BMODE_CFG_LDODCO_BETA_BMODE_BF_MSK (0x00001C00)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_BMODE_CFG_LDODCO_BETA_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldodco_byp
#define PMA_TXPLLCFGLOADER_MSG_LDO0_BMODE_CFG_LDODCO_BYP_BMODE_BF_OFF (13)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_BMODE_CFG_LDODCO_BYP_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_BMODE_CFG_LDODCO_BYP_BMODE_BF_MSK (0x00002000)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_BMODE_CFG_LDODCO_BYP_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldodco_vref_rc
#define PMA_TXPLLCFGLOADER_MSG_LDO0_BMODE_CFG_LDODCO_VREF_RC_BMODE_BF_OFF (14)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_BMODE_CFG_LDODCO_VREF_RC_BMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_BMODE_CFG_LDODCO_VREF_RC_BMODE_BF_MSK (0x0000C000)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_BMODE_CFG_LDODCO_VREF_RC_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldodco_vref_sel
#define PMA_TXPLLCFGLOADER_MSG_LDO0_BMODE_CFG_LDODCO_VREF_SEL_BMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_BMODE_CFG_LDODCO_VREF_SEL_BMODE_BF_WID ( 6)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_BMODE_CFG_LDODCO_VREF_SEL_BMODE_BF_MSK (0x003F0000)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_BMODE_CFG_LDODCO_VREF_SEL_BMODE_BF_DEF (0x00100000)

///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldodco_high_vref_sel
#define PMA_TXPLLCFGLOADER_MSG_LDO0_BMODE_CFG_LDODCO_HIGH_VREF_SEL_BMODE_BF_OFF (22)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_BMODE_CFG_LDODCO_HIGH_VREF_SEL_BMODE_BF_WID ( 6)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_BMODE_CFG_LDODCO_HIGH_VREF_SEL_BMODE_BF_MSK (0x0FC00000)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_BMODE_CFG_LDODCO_HIGH_VREF_SEL_BMODE_BF_DEF (0x05800000)

///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldorefgen_beta
#define PMA_TXPLLCFGLOADER_MSG_LDO0_BMODE_CFG_LDOREFGEN_BETA_BMODE_BF_OFF (28)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_BMODE_CFG_LDOREFGEN_BETA_BMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_BMODE_CFG_LDOREFGEN_BETA_BMODE_BF_MSK (0x70000000)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_BMODE_CFG_LDOREFGEN_BETA_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO0::cfg_vrefgen_byp
#define PMA_TXPLLCFGLOADER_MSG_LDO0_BMODE_CFG_VREFGEN_BYP_BMODE_BF_OFF (31)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_BMODE_CFG_VREFGEN_BYP_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_BMODE_CFG_VREFGEN_BYP_BMODE_BF_MSK (0x80000000)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_BMODE_CFG_VREFGEN_BYP_BMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_LDO1_BMODE register description at address offset 0x1b0
  *
  * Register default value:        0x000000E0
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_ldo1_bmode
  * SERDES_LANE_ANA_PLL::LDO1
  */

typedef union {
  struct {
    uint32_t CFG_INV_VPEAK_COMB_FB_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::LDO1::cfg_inv_vpeak_comb_fb
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_LDO_BIAS_SEL_BMODE : 3;
    ///< SERDES_LANE_ANA_PLL::LDO1::cfg_ldo_bias_sel
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t CFG_LDO_BIAS_EXT_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::LDO1::cfg_ldo_bias_ext
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t CFG_LDO_PKSEN_HIGHZ_B_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::LDO1::cfg_ldo_pksen_highz_b
    ///< AccessType="RW" BitOffset="5" ResetValue="0x1"
    uint32_t CFG_LDO_CLK_HIGHZ_B_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::LDO1::cfg_ldo_clk_highz_b
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t CFG_LDO_DCO_HIGHZ_B_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::LDO1::cfg_ldo_dco_highz_b
    ///< AccessType="RW" BitOffset="7" ResetValue="0x1"
    uint32_t CFG_DCMON_SEL_BMODE : 4;
    ///< Selection pins for DFx MUXs
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CFG_DCMON1_EN_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::LDO1::cfg_dcmon1_en
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t CFG_DCMON2_EN_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::LDO1::cfg_dcmon2_en
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t  : 18;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_ldo1_bmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_LDO1_BMODE_DEFAULT (0x000000e0U)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_BMODE_RD_MASK (0x00003fffU)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_BMODE_WR_MASK (0x00003fffU)


///< SERDES_LANE_ANA_PLL::LDO1::cfg_inv_vpeak_comb_fb
#define PMA_TXPLLCFGLOADER_MSG_LDO1_BMODE_CFG_INV_VPEAK_COMB_FB_BMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_BMODE_CFG_INV_VPEAK_COMB_FB_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_BMODE_CFG_INV_VPEAK_COMB_FB_BMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_BMODE_CFG_INV_VPEAK_COMB_FB_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO1::cfg_ldo_bias_sel
#define PMA_TXPLLCFGLOADER_MSG_LDO1_BMODE_CFG_LDO_BIAS_SEL_BMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_BMODE_CFG_LDO_BIAS_SEL_BMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_BMODE_CFG_LDO_BIAS_SEL_BMODE_BF_MSK (0x0000000E)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_BMODE_CFG_LDO_BIAS_SEL_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO1::cfg_ldo_bias_ext
#define PMA_TXPLLCFGLOADER_MSG_LDO1_BMODE_CFG_LDO_BIAS_EXT_BMODE_BF_OFF ( 4)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_BMODE_CFG_LDO_BIAS_EXT_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_BMODE_CFG_LDO_BIAS_EXT_BMODE_BF_MSK (0x00000010)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_BMODE_CFG_LDO_BIAS_EXT_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO1::cfg_ldo_pksen_highz_b
#define PMA_TXPLLCFGLOADER_MSG_LDO1_BMODE_CFG_LDO_PKSEN_HIGHZ_B_BMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_BMODE_CFG_LDO_PKSEN_HIGHZ_B_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_BMODE_CFG_LDO_PKSEN_HIGHZ_B_BMODE_BF_MSK (0x00000020)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_BMODE_CFG_LDO_PKSEN_HIGHZ_B_BMODE_BF_DEF (0x00000020)

///< SERDES_LANE_ANA_PLL::LDO1::cfg_ldo_clk_highz_b
#define PMA_TXPLLCFGLOADER_MSG_LDO1_BMODE_CFG_LDO_CLK_HIGHZ_B_BMODE_BF_OFF ( 6)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_BMODE_CFG_LDO_CLK_HIGHZ_B_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_BMODE_CFG_LDO_CLK_HIGHZ_B_BMODE_BF_MSK (0x00000040)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_BMODE_CFG_LDO_CLK_HIGHZ_B_BMODE_BF_DEF (0x00000040)

///< SERDES_LANE_ANA_PLL::LDO1::cfg_ldo_dco_highz_b
#define PMA_TXPLLCFGLOADER_MSG_LDO1_BMODE_CFG_LDO_DCO_HIGHZ_B_BMODE_BF_OFF ( 7)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_BMODE_CFG_LDO_DCO_HIGHZ_B_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_BMODE_CFG_LDO_DCO_HIGHZ_B_BMODE_BF_MSK (0x00000080)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_BMODE_CFG_LDO_DCO_HIGHZ_B_BMODE_BF_DEF (0x00000080)

///< Selection pins for DFx MUXs
#define PMA_TXPLLCFGLOADER_MSG_LDO1_BMODE_CFG_DCMON_SEL_BMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_BMODE_CFG_DCMON_SEL_BMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_BMODE_CFG_DCMON_SEL_BMODE_BF_MSK (0x00000F00)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_BMODE_CFG_DCMON_SEL_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO1::cfg_dcmon1_en
#define PMA_TXPLLCFGLOADER_MSG_LDO1_BMODE_CFG_DCMON1_EN_BMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_BMODE_CFG_DCMON1_EN_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_BMODE_CFG_DCMON1_EN_BMODE_BF_MSK (0x00001000)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_BMODE_CFG_DCMON1_EN_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO1::cfg_dcmon2_en
#define PMA_TXPLLCFGLOADER_MSG_LDO1_BMODE_CFG_DCMON2_EN_BMODE_BF_OFF (13)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_BMODE_CFG_DCMON2_EN_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_BMODE_CFG_DCMON2_EN_BMODE_BF_MSK (0x00002000)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_BMODE_CFG_DCMON2_EN_BMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_KVCC0_BMODE register description at address offset 0x1b4
  *
  * Register default value:        0x080013C5
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_kvcc0_bmode
  * SERDES_LANE_ANA_PLL::KVCC0
  */

typedef union {
  struct {
    uint32_t CFG_KVCC_SETTLE_MAXCNT_BMODE : 8;
    ///< Defines number of refclk cycles from DAC change to frequency measurement
    ///< during Kvcc calibration.                         VREG LPF is in bypass
    ///< mode with constant time is ~1nsec (115ohm*8.3pF).
    ///< Use the following formula:                         Frefclk x 1.26usec
    ///< AccessType="RW" BitOffset="0" ResetValue="0xC5"
    uint32_t CFG_KVCC_MEASURE_MAXCNT_BMODE : 3;
    ///< Defines number of refclk cycles over which the DCO frequency is measured
    ///< and averaged with high accuracy.                         It is used
    ///< for both Kvcc calibration and DFT frequency measurement mode.
    ///< refclk cycles = 2^(reg+6) - 1
    ///< AccessType="RW" BitOffset="8" ResetValue="0x3"
    uint32_t CFG_KVCCCALIB_LDO_OFFSET_BMODE : 3;
    ///< Amount of offset to inject into LDO for measuring frequency delta
    ///< that is needed for calibrating Kvcc. (Need to be ~30mv)
    ///< Common: use &#38;quot;2&#38;quot; as the default register value.
    ///< Lane: used &#38;quot;1&#38;quot; as a default override.
    ///< AccessType="RW" BitOffset="11" ResetValue="0x2"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t CFG_DFT_FREQ_MEAS_ENABLE_BMODE : 1;
    ///< DFT frequency measurement is triggered when this signal transitions
    ///< from 0 to 1.                         Make sure to set cfg_dfx_disable_dft_timer_ovrd_en=1
    ///< so that HS counter would remain active and cfg_kvcc_measure_maxcnt
    ///< to define number of refclk cycles.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t CFG_NOTCH_OFFSET_BMODE : 3;
    ///< Sets how many thermo bits to turn off from the notch filter
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t CFG_FULL_RANGE_KVCC_SEL_BMODE : 1;
    ///< Limit the kvcc full bin code according to thermal control bits in
    ///< the analog. Leaving it unlimited doesn&#39;t impact functionality
    ///< but just the read out of the Kvcc calibration. For proper Kvcc debug/characterization,
    ///< set according to the PLL:                         0 - code is limited
    ///< to 191d, 11 thermal bits in analog                         1 - (default)
    ///< Full binary code range
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t CFG_KVCC_INV_POLARITY_BMODE : 1;
    ///< A chicken bit to invert Kvcc polarity.
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t CFG_2F0_FINE_RATIO_BMODE : 7;
    ///< Fractional ratio. 32 is 1/4 (frac value = reg/2^7).
    ///< AccessType="RW" BitOffset="22" ResetValue="0x20"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_kvcc0_bmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_KVCC0_BMODE_DEFAULT (0x080013c5U)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_BMODE_RD_MASK (0x1fff3fffU)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_BMODE_WR_MASK (0x1fff3fffU)


///< Defines number of refclk cycles from DAC change to frequency measurement
///< during Kvcc calibration.                         VREG LPF is in bypass
///< mode with constant time is ~1nsec (115ohm*8.3pF).
///< Use the following formula:                         Frefclk x 1.26usec
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_BMODE_CFG_KVCC_SETTLE_MAXCNT_BMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_BMODE_CFG_KVCC_SETTLE_MAXCNT_BMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_BMODE_CFG_KVCC_SETTLE_MAXCNT_BMODE_BF_MSK (0x000000FF)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_BMODE_CFG_KVCC_SETTLE_MAXCNT_BMODE_BF_DEF (0x000000C5)

///< Defines number of refclk cycles over which the DCO frequency is measured
///< and averaged with high accuracy.                         It is used
///< for both Kvcc calibration and DFT frequency measurement mode.
///< refclk cycles = 2^(reg+6) - 1
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_BMODE_CFG_KVCC_MEAS_MAXCNT_BMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_BMODE_CFG_KVCC_MEAS_MAXCNT_BMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_BMODE_CFG_KVCC_MEAS_MAXCNT_BMODE_BF_MSK (0x00000700)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_BMODE_CFG_KVCC_MEAS_MAXCNT_BMODE_BF_DEF (0x00000300)

///< Amount of offset to inject into LDO for measuring frequency delta
///< that is needed for calibrating Kvcc. (Need to be ~30mv)
///< Common: use &#38;quot;2&#38;quot; as the default register value.
///< Lane: used &#38;quot;1&#38;quot; as a default override.
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_BMODE_CFG_KVCCCALIB_LDO_OFFSET_BMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_BMODE_CFG_KVCCCALIB_LDO_OFFSET_BMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_BMODE_CFG_KVCCCALIB_LDO_OFFSET_BMODE_BF_MSK (0x00003800)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_BMODE_CFG_KVCCCALIB_LDO_OFFSET_BMODE_BF_DEF (0x00001000)

///< DFT frequency measurement is triggered when this signal transitions
///< from 0 to 1.                         Make sure to set cfg_dfx_disable_dft_timer_ovrd_en=1
///< so that HS counter would remain active and cfg_kvcc_measure_maxcnt
///< to define number of refclk cycles.
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_BMODE_CFG_DFT_FREQ_MEAS_EN_BMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_BMODE_CFG_DFT_FREQ_MEAS_EN_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_BMODE_CFG_DFT_FREQ_MEAS_EN_BMODE_BF_MSK (0x00010000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_BMODE_CFG_DFT_FREQ_MEAS_EN_BMODE_BF_DEF (0x00000000)

///< Sets how many thermo bits to turn off from the notch filter
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_BMODE_CFG_NOTCH_OFFSET_BMODE_BF_OFF (17)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_BMODE_CFG_NOTCH_OFFSET_BMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_BMODE_CFG_NOTCH_OFFSET_BMODE_BF_MSK (0x000E0000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_BMODE_CFG_NOTCH_OFFSET_BMODE_BF_DEF (0x00000000)

///< Limit the kvcc full bin code according to thermal control bits in
///< the analog. Leaving it unlimited doesn&#39;t impact functionality
///< but just the read out of the Kvcc calibration. For proper Kvcc debug/characterization,
///< set according to the PLL:                         0 - code is limited
///< to 191d, 11 thermal bits in analog                         1 - (default)
///< Full binary code range
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_BMODE_CFG_FULL_RANGE_KVCC_SEL_BMODE_BF_OFF (20)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_BMODE_CFG_FULL_RANGE_KVCC_SEL_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_BMODE_CFG_FULL_RANGE_KVCC_SEL_BMODE_BF_MSK (0x00100000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_BMODE_CFG_FULL_RANGE_KVCC_SEL_BMODE_BF_DEF (0x00000000)

///< A chicken bit to invert Kvcc polarity.
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_BMODE_CFG_KVCC_INV_POLARITY_BMODE_BF_OFF (21)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_BMODE_CFG_KVCC_INV_POLARITY_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_BMODE_CFG_KVCC_INV_POLARITY_BMODE_BF_MSK (0x00200000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_BMODE_CFG_KVCC_INV_POLARITY_BMODE_BF_DEF (0x00000000)

///< Fractional ratio. 32 is 1/4 (frac value = reg/2^7).
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_BMODE_CFG_2F0_FINE_RATIO_BMODE_BF_OFF (22)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_BMODE_CFG_2F0_FINE_RATIO_BMODE_BF_WID ( 7)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_BMODE_CFG_2F0_FINE_RATIO_BMODE_BF_MSK (0x1FC00000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_BMODE_CFG_2F0_FINE_RATIO_BMODE_BF_DEF (0x08000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_KVCC1_BMODE register description at address offset 0x1b8
  *
  * Register default value:        0x000EF200
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_kvcc1_bmode
  * SERDES_LANE_ANA_PLL::KVCC1
  */

typedef union {
  struct {
    uint32_t CFG_KVCC_CODE_OVRD_BMODE : 1;
    ///< DCO notch filter override enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_KVCC_CODE_VAL_BMODE : 9;
    ///< DCO notch filter override value (binary, before therm decoder).
    ///< AccessType="RW" BitOffset="1" ResetValue="0x100"
    uint32_t CFG_KVCC_LDO_OFFSET_EN_OVRD_BMODE : 1;
    ///< Takes control over internal Kvcc FSM for manually injecting an offset
    ///< to LDO (for letting FW calibrate Kvcc).
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t CFG_KVCC_LDO_OFFSET_EN_VAL_BMODE : 1;
    ///< When kvcc_ldo_offset_en_ovrd=1                         0 - doesn&#39;t
    ///< inject an offset to LDO                         1 - injects an offset
    ///< to LDO in magnitude as configured by kvcccalib_ldo_offset
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t CFG_KVCC_MAX_CODE_LIMIT_BMODE : 9;
    ///< While cfg_full_range_kvcc_sel = 0, define the max value for 2f0 code.
    ///< Common: 0x7F (127)                         Lane: 0x4F (79)
    ///< AccessType="RW" BitOffset="12" ResetValue="0xEF"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_kvcc1_bmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_KVCC1_BMODE_DEFAULT (0x000ef200U)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_BMODE_RD_MASK (0x001fffffU)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_BMODE_WR_MASK (0x001fffffU)


///< DCO notch filter override enable
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_BMODE_CFG_KVCC_CODE_OVRD_BMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_BMODE_CFG_KVCC_CODE_OVRD_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_BMODE_CFG_KVCC_CODE_OVRD_BMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_BMODE_CFG_KVCC_CODE_OVRD_BMODE_BF_DEF (0x00000000)

///< DCO notch filter override value (binary, before therm decoder).
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_BMODE_CFG_KVCC_CODE_VAL_BMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_BMODE_CFG_KVCC_CODE_VAL_BMODE_BF_WID ( 9)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_BMODE_CFG_KVCC_CODE_VAL_BMODE_BF_MSK (0x000003FE)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_BMODE_CFG_KVCC_CODE_VAL_BMODE_BF_DEF (0x00000200)

///< Takes control over internal Kvcc FSM for manually injecting an offset
///< to LDO (for letting FW calibrate Kvcc).
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_BMODE_CFG_KVCC_LDO_OFFSET_EN_OVRD_BMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_BMODE_CFG_KVCC_LDO_OFFSET_EN_OVRD_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_BMODE_CFG_KVCC_LDO_OFFSET_EN_OVRD_BMODE_BF_MSK (0x00000400)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_BMODE_CFG_KVCC_LDO_OFFSET_EN_OVRD_BMODE_BF_DEF (0x00000000)

///< When kvcc_ldo_offset_en_ovrd=1                         0 - doesn&#39;t
///< inject an offset to LDO                         1 - injects an offset
///< to LDO in magnitude as configured by kvcccalib_ldo_offset
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_BMODE_CFG_KVCC_LDO_OFFSET_EN_VAL_BMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_BMODE_CFG_KVCC_LDO_OFFSET_EN_VAL_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_BMODE_CFG_KVCC_LDO_OFFSET_EN_VAL_BMODE_BF_MSK (0x00000800)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_BMODE_CFG_KVCC_LDO_OFFSET_EN_VAL_BMODE_BF_DEF (0x00000000)

///< While cfg_full_range_kvcc_sel = 0, define the max value for 2f0 code.
///< Common: 0x7F (127)                         Lane: 0x4F (79)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_BMODE_CFG_KVCC_MAX_CODE_LIMIT_BMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_BMODE_CFG_KVCC_MAX_CODE_LIMIT_BMODE_BF_WID ( 9)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_BMODE_CFG_KVCC_MAX_CODE_LIMIT_BMODE_BF_MSK (0x001FF000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_BMODE_CFG_KVCC_MAX_CODE_LIMIT_BMODE_BF_DEF (0x000EF000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_KVCC2_BMODE register description at address offset 0x1bc
  *
  * Register default value:        0x000000A9
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_kvcc2_bmode
  * SERDES_LANE_ANA_PLL::KVCC2
  */

typedef union {
  struct {
    uint32_t CFG_KVCC_ADAPT_EN_BMODE : 1;
    ///< Kvcc on the fly adaptation enable.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t CFG_KVCC_ADAPT_MODE_BMODE : 2;
    ///< Defines kvcc adaptation mode.                         0(POR): full
    ///< (dithering on all 2f0 bus between current and next)
    ///< 1: single cap 0 (dithering on dedicated capacitor - 1 lsb)
    ///< 2: single cap 1 (dithering on dedicated capacitor - 2 lsb)
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t CFG_KVCC_ADAPT_THR_BMODE : 2;
    ///< Threshold for update the notch code.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x1"
    uint32_t CFG_KVCC_ADAPT_CTR_DELAY_BMODE : 3;
    ///< Sets update rate of 2f0 SD modulator (2f0 dithering) ramp code increment.
    ///< fbclk cycles = 2^reg
    ///< AccessType="RW" BitOffset="5" ResetValue="0x5"
    uint32_t CFG_KVCC_ADAPT_STEP_BMODE : 3;
    ///< Sets step size of 2f0 SD modulator (2f0 dithering) ramp code increment.
    ///< step = 2^(reg-9)                         Cycles to complete ramp =
    ///< 2^(9-adapt_step+adapt_ctr_delay)
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CFG_DFX_KVCC_ADAPT_TOGGLE_EN_BMODE : 1;
    ///< Enables a BIST to check 2f0 mechanism for temp tracking.
    ///< When enabled, 2f0 dithering SD modulator code is ramped up and down
    ///< continously.
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t CFG_DFX_KVCC_ADAPT_ENABLE_OVR_BMODE : 1;
    ///< Enables overriding code to 2f0 dithering SD modulator.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t CFG_DFX_KVCC_ADAPT_VAL_OVR_BMODE : 9;
    ///< 2f0 dithering SD modulator override value (when cfg_dfx_kvcc_adapt_enable_ovr=1)
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t CFG_DFX_KVCC_ADAPT_DIR_OVR_BMODE : 1;
    ///< In 2f0 dithering DFX modes, this bit does the following:
    ///< toggle mode (cfg_dfx_kvcc_adapt_toggle_en=1):
    ///< 0 - 2f0 would ramp down and up repeatedly
    ///< 1 - 2f0 would ramp up and down repeatedly
    ///< override mode (cfg_dfx_kvcc_adapt_enable_ovr=1):
    ///< 0 - 2f0 would dither between current code and current code -1
    ///< 1 - 2f0 would dither between current code and current code +1
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t CFG_KVCC_ADAPT_CHICKEN_BIT_BMODE : 1;
    ///< Define the polarity of the kvcc adaptation.
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t CFG_KVCC_ADAPT_BY_FW_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::KVCC2::cfg_kvcc_adapt_by_fw
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t CFG_START_2F0_STEP_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::KVCC2::cfg_start_2f0_step
    ///< AccessType="RW" BitOffset="25" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="26" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_kvcc2_bmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_DEFAULT (0x000000a9U)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_RD_MASK (0x03ffffffU)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_WR_MASK (0x03ffffffU)


///< Kvcc on the fly adaptation enable.
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_CFG_KVCC_ADAPT_EN_BMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_CFG_KVCC_ADAPT_EN_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_CFG_KVCC_ADAPT_EN_BMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_CFG_KVCC_ADAPT_EN_BMODE_BF_DEF (0x00000001)

///< Defines kvcc adaptation mode.                         0(POR): full
///< (dithering on all 2f0 bus between current and next)
///< 1: single cap 0 (dithering on dedicated capacitor - 1 lsb)
///< 2: single cap 1 (dithering on dedicated capacitor - 2 lsb)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_CFG_KVCC_ADAPT_MODE_BMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_CFG_KVCC_ADAPT_MODE_BMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_CFG_KVCC_ADAPT_MODE_BMODE_BF_MSK (0x00000006)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_CFG_KVCC_ADAPT_MODE_BMODE_BF_DEF (0x00000000)

///< Threshold for update the notch code.
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_CFG_KVCC_ADAPT_THR_BMODE_BF_OFF ( 3)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_CFG_KVCC_ADAPT_THR_BMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_CFG_KVCC_ADAPT_THR_BMODE_BF_MSK (0x00000018)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_CFG_KVCC_ADAPT_THR_BMODE_BF_DEF (0x00000008)

///< Sets update rate of 2f0 SD modulator (2f0 dithering) ramp code increment.
///< fbclk cycles = 2^reg
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_CFG_KVCC_ADAPT_CTR_DELAY_BMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_CFG_KVCC_ADAPT_CTR_DELAY_BMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_CFG_KVCC_ADAPT_CTR_DELAY_BMODE_BF_MSK (0x000000E0)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_CFG_KVCC_ADAPT_CTR_DELAY_BMODE_BF_DEF (0x000000A0)

///< Sets step size of 2f0 SD modulator (2f0 dithering) ramp code increment.
///< step = 2^(reg-9)                         Cycles to complete ramp =
///< 2^(9-adapt_step+adapt_ctr_delay)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_CFG_KVCC_ADAPT_STEP_BMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_CFG_KVCC_ADAPT_STEP_BMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_CFG_KVCC_ADAPT_STEP_BMODE_BF_MSK (0x00000700)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_CFG_KVCC_ADAPT_STEP_BMODE_BF_DEF (0x00000000)

///< Enables a BIST to check 2f0 mechanism for temp tracking.
///< When enabled, 2f0 dithering SD modulator code is ramped up and down
///< continously.
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_CFG_DFX_KVCC_ADAPT_TOGGLE_EN_BMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_CFG_DFX_KVCC_ADAPT_TOGGLE_EN_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_CFG_DFX_KVCC_ADAPT_TOGGLE_EN_BMODE_BF_MSK (0x00000800)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_CFG_DFX_KVCC_ADAPT_TOGGLE_EN_BMODE_BF_DEF (0x00000000)

///< Enables overriding code to 2f0 dithering SD modulator.
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_CFG_DFX_KVCC_ADAPT_EN_OVR_BMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_CFG_DFX_KVCC_ADAPT_EN_OVR_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_CFG_DFX_KVCC_ADAPT_EN_OVR_BMODE_BF_MSK (0x00001000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_CFG_DFX_KVCC_ADAPT_EN_OVR_BMODE_BF_DEF (0x00000000)

///< 2f0 dithering SD modulator override value (when cfg_dfx_kvcc_adapt_enable_ovr=1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_CFG_DFX_KVCC_ADAPT_VAL_OVR_BMODE_BF_OFF (13)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_CFG_DFX_KVCC_ADAPT_VAL_OVR_BMODE_BF_WID ( 9)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_CFG_DFX_KVCC_ADAPT_VAL_OVR_BMODE_BF_MSK (0x003FE000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_CFG_DFX_KVCC_ADAPT_VAL_OVR_BMODE_BF_DEF (0x00000000)

///< In 2f0 dithering DFX modes, this bit does the following:
///< toggle mode (cfg_dfx_kvcc_adapt_toggle_en=1):
///< 0 - 2f0 would ramp down and up repeatedly
///< 1 - 2f0 would ramp up and down repeatedly
///< override mode (cfg_dfx_kvcc_adapt_enable_ovr=1):
///< 0 - 2f0 would dither between current code and current code -1
///< 1 - 2f0 would dither between current code and current code +1
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_CFG_DFX_KVCC_ADAPT_DIR_OVR_BMODE_BF_OFF (22)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_CFG_DFX_KVCC_ADAPT_DIR_OVR_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_CFG_DFX_KVCC_ADAPT_DIR_OVR_BMODE_BF_MSK (0x00400000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_CFG_DFX_KVCC_ADAPT_DIR_OVR_BMODE_BF_DEF (0x00000000)

///< Define the polarity of the kvcc adaptation.
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_CFG_KVCC_ADAPT_CHICKEN_BIT_BMODE_BF_OFF (23)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_CFG_KVCC_ADAPT_CHICKEN_BIT_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_CFG_KVCC_ADAPT_CHICKEN_BIT_BMODE_BF_MSK (0x00800000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_CFG_KVCC_ADAPT_CHICKEN_BIT_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::KVCC2::cfg_kvcc_adapt_by_fw
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_CFG_KVCC_ADAPT_BY_FW_BMODE_BF_OFF (24)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_CFG_KVCC_ADAPT_BY_FW_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_CFG_KVCC_ADAPT_BY_FW_BMODE_BF_MSK (0x01000000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_CFG_KVCC_ADAPT_BY_FW_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::KVCC2::cfg_start_2f0_step
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_CFG_START_2F0_STEP_BMODE_BF_OFF (25)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_CFG_START_2F0_STEP_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_CFG_START_2F0_STEP_BMODE_BF_MSK (0x02000000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_CFG_START_2F0_STEP_BMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_SPARE0_BMODE register description at address offset 0x1c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_spare0_bmode
  * SERDES_LANE_ANA_PLL::SPARE0
  */

typedef union {
  struct {
    uint32_t CFG_SPARE_DIG2ANA_BMODE : 11;
    ///< Spare controls to analog block.                         [10:0] unused
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 21;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_spare0_bmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_SPARE0_BMODE_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_SPARE0_BMODE_RD_MASK (0x000007ffU)
#define PMA_TXPLLCFGLOADER_MSG_SPARE0_BMODE_WR_MASK (0x000007ffU)


///< Spare controls to analog block.                         [10:0] unused
#define PMA_TXPLLCFGLOADER_MSG_SPARE0_BMODE_CFG_SPARE_DIG2ANA_BMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_SPARE0_BMODE_CFG_SPARE_DIG2ANA_BMODE_BF_WID (11)
#define PMA_TXPLLCFGLOADER_MSG_SPARE0_BMODE_CFG_SPARE_DIG2ANA_BMODE_BF_MSK (0x000007FF)
#define PMA_TXPLLCFGLOADER_MSG_SPARE0_BMODE_CFG_SPARE_DIG2ANA_BMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_SPARE1_BMODE register description at address offset 0x1c4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_spare1_bmode
  * SERDES_LANE_ANA_PLL::SPARE1
  */

typedef union {
  struct {
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="0" ResetValue="None"
    uint32_t CFG_SPARE_DIG2WRAP_BMODE : 20;
    ///< SERDES_LANE_ANA_PLL::SPARE1::cfg_spare_dig2wrap
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_spare1_bmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_SPARE1_BMODE_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_SPARE1_BMODE_RD_MASK (0x001ffffeU)
#define PMA_TXPLLCFGLOADER_MSG_SPARE1_BMODE_WR_MASK (0x001ffffeU)


///< SERDES_LANE_ANA_PLL::SPARE1::cfg_spare_dig2wrap
#define PMA_TXPLLCFGLOADER_MSG_SPARE1_BMODE_CFG_SPARE_DIG2WRAP_BMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_SPARE1_BMODE_CFG_SPARE_DIG2WRAP_BMODE_BF_WID (20)
#define PMA_TXPLLCFGLOADER_MSG_SPARE1_BMODE_CFG_SPARE_DIG2WRAP_BMODE_BF_MSK (0x001FFFFE)
#define PMA_TXPLLCFGLOADER_MSG_SPARE1_BMODE_CFG_SPARE_DIG2WRAP_BMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_DCO_SWING0_BMODE register description at address offset 0x1c8
  *
  * Register default value:        0x0022006D
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_dco_swing0_bmode
  * SERDES_LANE_ANA_PLL::DCO_SWING0
  */

typedef union {
  struct {
    uint32_t CFG_DCO_SWING_VPEAK_MODE_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_dco_swing_vpeak_mode
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t CFG_PKSEN_VREF_TARGET_BMODE : 6;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_pksen_vref_target
    ///< AccessType="RW" BitOffset="1" ResetValue="0x36"
    uint32_t CFG_SKIP_DCO_SWING_SLEEP_SEL_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_skip_dco_swing_sleep_sel
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t CFG_DCO_SWING_BY_FW_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_dco_swing_by_fw
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CFG_START_PKSEN_READ_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_start_pksen_read
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t CFG_START_LDODCO_STEP_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_start_ldodco_step
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t CFG_LDODCO_STEP_DIR_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_ldodco_step_dir
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t CFG_LDODCO_STEP_CHICKEN_BIT_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_ldodco_step_chicken_bit
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t CFG_PKSEN_SETTLE_TIMER_LIMIT_BMODE : 3;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_pksen_settle_timer_limit
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t CFG_PKSEN_COMP_OUT_CHICKEN_BIT_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_pksen_comp_out_chicken_bit
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t CFG_LDODCO_ADAPT_EN_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_ldodco_adapt_en
    ///< AccessType="RW" BitOffset="17" ResetValue="0x1"
    uint32_t CFG_PKSEN_VREF_OVRD_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_pksen_vref_ovrd
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t CFG_LDODCO_VREF_OVRD_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_ldodco_vref_ovrd
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t CFG_LDODCO_STEP_SETTLE_TIMER_LIMIT_BMODE : 2;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_ldodco_step_settle_timer_limit
    ///< AccessType="RW" BitOffset="20" ResetValue="0x2"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_dco_swing0_bmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_DEFAULT (0x0022006dU)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_RD_MASK (0x003fffffU)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_WR_MASK (0x003fffffU)


///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_dco_swing_vpeak_mode
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_DCO_SWING_VPEAK_MODE_BMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_DCO_SWING_VPEAK_MODE_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_DCO_SWING_VPEAK_MODE_BMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_DCO_SWING_VPEAK_MODE_BMODE_BF_DEF (0x00000001)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_pksen_vref_target
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_PKSEN_VREF_TARGET_BMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_PKSEN_VREF_TARGET_BMODE_BF_WID ( 6)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_PKSEN_VREF_TARGET_BMODE_BF_MSK (0x0000007E)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_PKSEN_VREF_TARGET_BMODE_BF_DEF (0x0000006C)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_skip_dco_swing_sleep_sel
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_SKIP_DCO_SWING_SLEEP_SEL_BMODE_BF_OFF ( 7)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_SKIP_DCO_SWING_SLEEP_SEL_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_SKIP_DCO_SWING_SLEEP_SEL_BMODE_BF_MSK (0x00000080)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_SKIP_DCO_SWING_SLEEP_SEL_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_dco_swing_by_fw
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_DCO_SWING_BY_FW_BMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_DCO_SWING_BY_FW_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_DCO_SWING_BY_FW_BMODE_BF_MSK (0x00000100)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_DCO_SWING_BY_FW_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_start_pksen_read
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_START_PKSEN_READ_BMODE_BF_OFF ( 9)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_START_PKSEN_READ_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_START_PKSEN_READ_BMODE_BF_MSK (0x00000200)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_START_PKSEN_READ_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_start_ldodco_step
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_START_LDODCO_STEP_BMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_START_LDODCO_STEP_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_START_LDODCO_STEP_BMODE_BF_MSK (0x00000400)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_START_LDODCO_STEP_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_ldodco_step_dir
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_LDODCO_STEP_DIR_BMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_LDODCO_STEP_DIR_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_LDODCO_STEP_DIR_BMODE_BF_MSK (0x00000800)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_LDODCO_STEP_DIR_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_ldodco_step_chicken_bit
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_LDODCO_STEP_CHICKEN_BIT_BMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_LDODCO_STEP_CHICKEN_BIT_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_LDODCO_STEP_CHICKEN_BIT_BMODE_BF_MSK (0x00001000)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_LDODCO_STEP_CHICKEN_BIT_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_pksen_settle_timer_limit
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_PKSEN_SETTLE_TIMER_LIMIT_BMODE_BF_OFF (13)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_PKSEN_SETTLE_TIMER_LIMIT_BMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_PKSEN_SETTLE_TIMER_LIMIT_BMODE_BF_MSK (0x0000E000)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_PKSEN_SETTLE_TIMER_LIMIT_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_pksen_comp_out_chicken_bit
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_PKSEN_COMP_OUT_CHICKEN_BIT_BMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_PKSEN_COMP_OUT_CHICKEN_BIT_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_PKSEN_COMP_OUT_CHICKEN_BIT_BMODE_BF_MSK (0x00010000)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_PKSEN_COMP_OUT_CHICKEN_BIT_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_ldodco_adapt_en
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_LDODCO_ADAPT_EN_BMODE_BF_OFF (17)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_LDODCO_ADAPT_EN_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_LDODCO_ADAPT_EN_BMODE_BF_MSK (0x00020000)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_LDODCO_ADAPT_EN_BMODE_BF_DEF (0x00020000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_pksen_vref_ovrd
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_PKSEN_VREF_OVRD_BMODE_BF_OFF (18)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_PKSEN_VREF_OVRD_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_PKSEN_VREF_OVRD_BMODE_BF_MSK (0x00040000)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_PKSEN_VREF_OVRD_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_ldodco_vref_ovrd
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_LDODCO_VREF_OVRD_BMODE_BF_OFF (19)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_LDODCO_VREF_OVRD_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_LDODCO_VREF_OVRD_BMODE_BF_MSK (0x00080000)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_LDODCO_VREF_OVRD_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_ldodco_step_settle_timer_limit
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_LDODCO_STEP_SETTLE_TIMER_LIMIT_BMODE_BF_OFF (20)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_LDODCO_STEP_SETTLE_TIMER_LIMIT_BMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_LDODCO_STEP_SETTLE_TIMER_LIMIT_BMODE_BF_MSK (0x00300000)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_CFG_LDODCO_STEP_SETTLE_TIMER_LIMIT_BMODE_BF_DEF (0x00200000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_DCO_SWING1_BMODE register description at address offset 0x1cc
  *
  * Register default value:        0x00000005
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_dco_swing1_bmode
  * SERDES_LANE_ANA_PLL::DCO_SWING1
  */

typedef union {
  struct {
    uint32_t CFG_LDODCO_ADAPT_CTR_DELAY_BMODE : 3;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_ldodco_adapt_ctr_delay
    ///< AccessType="RW" BitOffset="0" ResetValue="0x5"
    uint32_t CFG_LDODCO_ADAPT_STEP_BMODE : 3;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_ldodco_adapt_step
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t CFG_DFX_LDODCO_ADAPT_TOGGLE_EN_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_dfx_ldodco_adapt_toggle_en
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t CFG_DFX_LDODCO_ADAPT_DIR_OVR_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_dfx_ldodco_adapt_dir_ovr
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t CFG_DFX_LDODCO_ADAPT_ENABLE_OVR_BMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_dfx_ldodco_adapt_enable_ovr
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CFG_DFX_LDODCO_ADAPT_VAL_OVR_BMODE : 9;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_dfx_ldodco_adapt_val_ovr
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_dco_swing1_bmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_BMODE_DEFAULT (0x00000005U)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_BMODE_RD_MASK (0x0003ffffU)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_BMODE_WR_MASK (0x0003ffffU)


///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_ldodco_adapt_ctr_delay
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_BMODE_CFG_LDODCO_ADAPT_CTR_DELAY_BMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_BMODE_CFG_LDODCO_ADAPT_CTR_DELAY_BMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_BMODE_CFG_LDODCO_ADAPT_CTR_DELAY_BMODE_BF_MSK (0x00000007)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_BMODE_CFG_LDODCO_ADAPT_CTR_DELAY_BMODE_BF_DEF (0x00000005)

///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_ldodco_adapt_step
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_BMODE_CFG_LDODCO_ADAPT_STEP_BMODE_BF_OFF ( 3)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_BMODE_CFG_LDODCO_ADAPT_STEP_BMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_BMODE_CFG_LDODCO_ADAPT_STEP_BMODE_BF_MSK (0x00000038)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_BMODE_CFG_LDODCO_ADAPT_STEP_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_dfx_ldodco_adapt_toggle_en
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_BMODE_CFG_DFX_LDODCO_ADAPT_TOGGLE_EN_BMODE_BF_OFF ( 6)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_BMODE_CFG_DFX_LDODCO_ADAPT_TOGGLE_EN_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_BMODE_CFG_DFX_LDODCO_ADAPT_TOGGLE_EN_BMODE_BF_MSK (0x00000040)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_BMODE_CFG_DFX_LDODCO_ADAPT_TOGGLE_EN_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_dfx_ldodco_adapt_dir_ovr
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_BMODE_CFG_DFX_LDODCO_ADAPT_DIR_OVR_BMODE_BF_OFF ( 7)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_BMODE_CFG_DFX_LDODCO_ADAPT_DIR_OVR_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_BMODE_CFG_DFX_LDODCO_ADAPT_DIR_OVR_BMODE_BF_MSK (0x00000080)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_BMODE_CFG_DFX_LDODCO_ADAPT_DIR_OVR_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_dfx_ldodco_adapt_enable_ovr
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_BMODE_CFG_DFX_LDODCO_ADAPT_EN_OVR_BMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_BMODE_CFG_DFX_LDODCO_ADAPT_EN_OVR_BMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_BMODE_CFG_DFX_LDODCO_ADAPT_EN_OVR_BMODE_BF_MSK (0x00000100)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_BMODE_CFG_DFX_LDODCO_ADAPT_EN_OVR_BMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_dfx_ldodco_adapt_val_ovr
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_BMODE_CFG_DFX_LDODCO_ADAPT_VAL_OVR_BMODE_BF_OFF ( 9)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_BMODE_CFG_DFX_LDODCO_ADAPT_VAL_OVR_BMODE_BF_WID ( 9)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_BMODE_CFG_DFX_LDODCO_ADAPT_VAL_OVR_BMODE_BF_MSK (0x0003FE00)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_BMODE_CFG_DFX_LDODCO_ADAPT_VAL_OVR_BMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_TDC4_BMODE register description at address offset 0x1d0
  *
  * Register default value:        0xCAB6A27C
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_tdc4_bmode
  * SERDES_LANE_ANA_PLL::TDC4
  */

typedef union {
  struct {
    uint32_t CFG_VTDC_MINUS2_THRESH_BMODE : 8;
    ///< SERDES_LANE_ANA_PLL::TDC4::cfg_vtdc_minus2_thresh
    ///< AccessType="RW" BitOffset="0" ResetValue="0x7C"
    uint32_t CFG_VTDC_MINUS1_THRESH_BMODE : 8;
    ///< SERDES_LANE_ANA_PLL::TDC4::cfg_vtdc_minus1_thresh
    ///< AccessType="RW" BitOffset="8" ResetValue="0xA2"
    uint32_t CFG_VTDC_PLUS1_THRESH_BMODE : 8;
    ///< SERDES_LANE_ANA_PLL::TDC4::cfg_vtdc_plus1_thresh
    ///< AccessType="RW" BitOffset="16" ResetValue="0xB6"
    uint32_t CFG_VTDC_PLUS2_THRESH_BMODE : 8;
    ///< SERDES_LANE_ANA_PLL::TDC4::cfg_vtdc_plus2_thresh
    ///< AccessType="RW" BitOffset="24" ResetValue="0xCA"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_tdc4_bmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_TDC4_BMODE_DEFAULT (0xcab6a27cU)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_BMODE_RD_MASK (0xffffffffU)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_BMODE_WR_MASK (0xffffffffU)


///< SERDES_LANE_ANA_PLL::TDC4::cfg_vtdc_minus2_thresh
#define PMA_TXPLLCFGLOADER_MSG_TDC4_BMODE_CFG_VTDC_MINUS2_THRESH_BMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_BMODE_CFG_VTDC_MINUS2_THRESH_BMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_BMODE_CFG_VTDC_MINUS2_THRESH_BMODE_BF_MSK (0x000000FF)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_BMODE_CFG_VTDC_MINUS2_THRESH_BMODE_BF_DEF (0x0000007C)

///< SERDES_LANE_ANA_PLL::TDC4::cfg_vtdc_minus1_thresh
#define PMA_TXPLLCFGLOADER_MSG_TDC4_BMODE_CFG_VTDC_MINUS1_THRESH_BMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_BMODE_CFG_VTDC_MINUS1_THRESH_BMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_BMODE_CFG_VTDC_MINUS1_THRESH_BMODE_BF_MSK (0x0000FF00)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_BMODE_CFG_VTDC_MINUS1_THRESH_BMODE_BF_DEF (0x0000A200)

///< SERDES_LANE_ANA_PLL::TDC4::cfg_vtdc_plus1_thresh
#define PMA_TXPLLCFGLOADER_MSG_TDC4_BMODE_CFG_VTDC_PLUS1_THRESH_BMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_BMODE_CFG_VTDC_PLUS1_THRESH_BMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_BMODE_CFG_VTDC_PLUS1_THRESH_BMODE_BF_MSK (0x00FF0000)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_BMODE_CFG_VTDC_PLUS1_THRESH_BMODE_BF_DEF (0x00B60000)

///< SERDES_LANE_ANA_PLL::TDC4::cfg_vtdc_plus2_thresh
#define PMA_TXPLLCFGLOADER_MSG_TDC4_BMODE_CFG_VTDC_PLUS2_THRESH_BMODE_BF_OFF (24)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_BMODE_CFG_VTDC_PLUS2_THRESH_BMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_BMODE_CFG_VTDC_PLUS2_THRESH_BMODE_BF_MSK (0xFF000000)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_BMODE_CFG_VTDC_PLUS2_THRESH_BMODE_BF_DEF (0xCA000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_DIV0_CMODE register description at address offset 0x1e0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_div0_cmode
  * LCPLL_DIV0 Register
  */

typedef union {
  struct {
    uint32_t O_FBDIV_FRAC_CMODE : 32;
    ///< Feedback divider fractional ratio.                          Total
    ///< ratio is:                         If cfg_dcodiv2_to_fbdiv_bypass=1
    ///< : (integer+fractional/2^32)                         otherwise : (integer+fractional/2^32)
    ///< x 2
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_div0_cmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_DIV0_CMODE_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_DIV0_CMODE_RD_MASK (0xffffffffU)
#define PMA_TXPLLCFGLOADER_MSG_DIV0_CMODE_WR_MASK (0xffffffffU)


///< Feedback divider fractional ratio.                          Total
///< ratio is:                         If cfg_dcodiv2_to_fbdiv_bypass=1
///< : (integer+fractional/2^32)                         otherwise : (integer+fractional/2^32)
///< x 2
#define PMA_TXPLLCFGLOADER_MSG_DIV0_CMODE_O_FBDIV_FRAC_CMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_DIV0_CMODE_O_FBDIV_FRAC_CMODE_BF_WID (32)
#define PMA_TXPLLCFGLOADER_MSG_DIV0_CMODE_O_FBDIV_FRAC_CMODE_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLLCFGLOADER_MSG_DIV0_CMODE_O_FBDIV_FRAC_CMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_DIV1_CMODE register description at address offset 0x1e4
  *
  * Register default value:        0x00003050
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_div1_cmode
  * LCPLL_DIV1 Register
  */

typedef union {
  struct {
    uint32_t O_FBDIV_INTGR_CMODE : 10;
    ///< Feedback divider integer ratio                         Total ratio
    ///< is:                         If cfg_dcodiv2_to_fbdiv_bypass=1 : (integer+fractional/2^32)
    ///< otherwise : (integer+fractional/2^32) x 2
    ///< Default is 80 for main common PLL (refclk 156.25MHz and Fdco 12.5GHz)
    ///< AccessType="RW" BitOffset="0" ResetValue="0x50"
    uint32_t O_FRACNEN_H_CMODE : 1;
    ///< Enables fractional ratio.                         Set this bit to
    ///< 0 if fractional ratio is 0, else to 1.                         If
    ///< this bit is 1 while fractional is 0 then fbclk to refclk phase won&#39;t
    ///< be deterministic.
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t CFG_REFCLK_CNT_LIMIT_CMODE : 3;
    ///< Defines number of refclk cycles in frequency measurement during AFC
    ///< calibration.                         Number of cycles = 2^reg
    ///< For 156MHz clock and 12.5GHz DCO clock, HS counter (@Fdco/2) samples
    ///< 40 cycles per refclk (=fbdiv_intgr).                         DTR step
    ///< size is 20MHz, so to achieve accuracy of 5MHz, HS counter should reach
    ///< 12.5G/5M=2500.                         Therefore refclk cycles = 2500/40=62.5,
    ///< so 2^6 would be appropriate.
    ///< use the following formula for other frequencies (Frefclk after prediv):
    ///< cfg_refclk_cnt_limit = round(log2(2*Frefclk/5MHz))
    ///< AccessType="RW" BitOffset="11" ResetValue="0x6"
    uint32_t CFG_FRACN_SD_STEP_EN_CMODE : 1;
    ///< Injects an impulse into fracN SD accumulator.
    ///< This inject a step in the feed-forward offset and as a result would
    ///< create a step on the PLL phase.                         This feature
    ///< can be useful in case of coupling between PLLs that run at exact same
    ///< frequency (both at fracN)
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t CFG_FRACN_SD_STEP_CMODE : 6;
    ///< Sets magnitude of step in fracN SD accumulator, which is added to
    ///< the MSB of the SD bus.                         Each LSB here would
    ///< shift PLL phase by 2xTdco/2^6
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t CFG_LF_BAND_INUSE_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DIV1::cfg_lf_band_inuse
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t CFG_LF_BAND_SEL_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DIV1::cfg_lf_band_sel
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t  : 9;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_div1_cmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_DIV1_CMODE_DEFAULT (0x00003050U)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_CMODE_RD_MASK (0x007fffffU)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_CMODE_WR_MASK (0x007fffffU)


///< Feedback divider integer ratio                         Total ratio
///< is:                         If cfg_dcodiv2_to_fbdiv_bypass=1 : (integer+fractional/2^32)
///< otherwise : (integer+fractional/2^32) x 2
///< Default is 80 for main common PLL (refclk 156.25MHz and Fdco 12.5GHz)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_CMODE_O_FBDIV_INTGR_CMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_CMODE_O_FBDIV_INTGR_CMODE_BF_WID (10)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_CMODE_O_FBDIV_INTGR_CMODE_BF_MSK (0x000003FF)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_CMODE_O_FBDIV_INTGR_CMODE_BF_DEF (0x00000050)

///< Enables fractional ratio.                         Set this bit to
///< 0 if fractional ratio is 0, else to 1.                         If
///< this bit is 1 while fractional is 0 then fbclk to refclk phase won&#39;t
///< be deterministic.
#define PMA_TXPLLCFGLOADER_MSG_DIV1_CMODE_O_FRACNEN_H_CMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_CMODE_O_FRACNEN_H_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_CMODE_O_FRACNEN_H_CMODE_BF_MSK (0x00000400)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_CMODE_O_FRACNEN_H_CMODE_BF_DEF (0x00000000)

///< Defines number of refclk cycles in frequency measurement during AFC
///< calibration.                         Number of cycles = 2^reg
///< For 156MHz clock and 12.5GHz DCO clock, HS counter (@Fdco/2) samples
///< 40 cycles per refclk (=fbdiv_intgr).                         DTR step
///< size is 20MHz, so to achieve accuracy of 5MHz, HS counter should reach
///< 12.5G/5M=2500.                         Therefore refclk cycles = 2500/40=62.5,
///< so 2^6 would be appropriate.
///< use the following formula for other frequencies (Frefclk after prediv):
///< cfg_refclk_cnt_limit = round(log2(2*Frefclk/5MHz))
#define PMA_TXPLLCFGLOADER_MSG_DIV1_CMODE_CFG_REFCLK_CNT_LIMIT_CMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_CMODE_CFG_REFCLK_CNT_LIMIT_CMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_CMODE_CFG_REFCLK_CNT_LIMIT_CMODE_BF_MSK (0x00003800)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_CMODE_CFG_REFCLK_CNT_LIMIT_CMODE_BF_DEF (0x00003000)

///< Injects an impulse into fracN SD accumulator.
///< This inject a step in the feed-forward offset and as a result would
///< create a step on the PLL phase.                         This feature
///< can be useful in case of coupling between PLLs that run at exact same
///< frequency (both at fracN)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_CMODE_CFG_FRACN_SD_STEP_EN_CMODE_BF_OFF (14)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_CMODE_CFG_FRACN_SD_STEP_EN_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_CMODE_CFG_FRACN_SD_STEP_EN_CMODE_BF_MSK (0x00004000)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_CMODE_CFG_FRACN_SD_STEP_EN_CMODE_BF_DEF (0x00000000)

///< Sets magnitude of step in fracN SD accumulator, which is added to
///< the MSB of the SD bus.                         Each LSB here would
///< shift PLL phase by 2xTdco/2^6
#define PMA_TXPLLCFGLOADER_MSG_DIV1_CMODE_CFG_FRACN_SD_STEP_CMODE_BF_OFF (15)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_CMODE_CFG_FRACN_SD_STEP_CMODE_BF_WID ( 6)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_CMODE_CFG_FRACN_SD_STEP_CMODE_BF_MSK (0x001F8000)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_CMODE_CFG_FRACN_SD_STEP_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DIV1::cfg_lf_band_inuse
#define PMA_TXPLLCFGLOADER_MSG_DIV1_CMODE_CFG_LF_BAND_INUSE_CMODE_BF_OFF (21)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_CMODE_CFG_LF_BAND_INUSE_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_CMODE_CFG_LF_BAND_INUSE_CMODE_BF_MSK (0x00200000)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_CMODE_CFG_LF_BAND_INUSE_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DIV1::cfg_lf_band_sel
#define PMA_TXPLLCFGLOADER_MSG_DIV1_CMODE_CFG_LF_BAND_SEL_CMODE_BF_OFF (22)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_CMODE_CFG_LF_BAND_SEL_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_CMODE_CFG_LF_BAND_SEL_CMODE_BF_MSK (0x00400000)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_CMODE_CFG_LF_BAND_SEL_CMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_ADL0_CMODE register description at address offset 0x1e8
  *
  * Register default value:        0x01800007
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_adl0_cmode
  * SERDES_LANE_ANA_PLL::ADL0
  */

typedef union {
  struct {
    uint32_t CFG_ADL_ENABLE_CMODE : 1;
    ///< Enable adaptive delay line in fracN mode (only when o_fracnen_h=1).
    ///< While &#39;1&#39; it is also disable feed-forward cancellation.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t CFG_ADL_RANGE_CMODE : 3;
    ///< Configs ADL range to be used. The formula (prelay results, need to
    ///< be updated):                         round((138.75 - 1.2e12/Fdco)/13.266)
    ///< [Fdco in Hz]
    ///< AccessType="RW" BitOffset="1" ResetValue="0x3"
    uint32_t CFG_ADL_POS_OFFSET_CMODE : 8;
    ///< Positive ADL INL compensation.                         Each register
    ///< bit corresponding to each cap_ctrl bus bit.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t CFG_ADL_NEG_OFFSET_CMODE : 8;
    ///< Negative ADL INL compensation.                         Each register
    ///< bit corresponding to each cap_ctrl bus bit.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t CFG_ADL_ENABLE_OVR_EN_CMODE : 1;
    ///< adl bypass/enable force (see adl_enable_ovr_val).
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t CFG_ADL_ENABLE_OVR_VAL_CMODE : 1;
    ///< While adl_enable_ovr_en= 1.                         0 - force adl
    ///< bypass.                         1 - force adl enable.
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t CFG_ADL_CAP_CTRL_OVR_EN_CMODE : 1;
    ///< Override enable for cfg_adl_cap_ctrl_ovr_val[8:0]
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t CFG_ADL_CAP_CTRL_OVR_VAL_CMODE : 9;
    ///< Override value for cap_ctrl bus to ADL.
    ///< AccessType="RW" BitOffset="23" ResetValue="0x3"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_adl0_cmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_ADL0_CMODE_DEFAULT (0x01800007U)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_CMODE_RD_MASK (0xffffffffU)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_CMODE_WR_MASK (0xffffffffU)


///< Enable adaptive delay line in fracN mode (only when o_fracnen_h=1).
///< While &#39;1&#39; it is also disable feed-forward cancellation.
#define PMA_TXPLLCFGLOADER_MSG_ADL0_CMODE_CFG_ADL_EN_CMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_CMODE_CFG_ADL_EN_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_CMODE_CFG_ADL_EN_CMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_CMODE_CFG_ADL_EN_CMODE_BF_DEF (0x00000001)

///< Configs ADL range to be used. The formula (prelay results, need to
///< be updated):                         round((138.75 - 1.2e12/Fdco)/13.266)
///< [Fdco in Hz]
#define PMA_TXPLLCFGLOADER_MSG_ADL0_CMODE_CFG_ADL_RANGE_CMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_CMODE_CFG_ADL_RANGE_CMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_CMODE_CFG_ADL_RANGE_CMODE_BF_MSK (0x0000000E)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_CMODE_CFG_ADL_RANGE_CMODE_BF_DEF (0x00000006)

///< Positive ADL INL compensation.                         Each register
///< bit corresponding to each cap_ctrl bus bit.
#define PMA_TXPLLCFGLOADER_MSG_ADL0_CMODE_CFG_ADL_POS_OFFSET_CMODE_BF_OFF ( 4)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_CMODE_CFG_ADL_POS_OFFSET_CMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_CMODE_CFG_ADL_POS_OFFSET_CMODE_BF_MSK (0x00000FF0)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_CMODE_CFG_ADL_POS_OFFSET_CMODE_BF_DEF (0x00000000)

///< Negative ADL INL compensation.                         Each register
///< bit corresponding to each cap_ctrl bus bit.
#define PMA_TXPLLCFGLOADER_MSG_ADL0_CMODE_CFG_ADL_NEG_OFFSET_CMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_CMODE_CFG_ADL_NEG_OFFSET_CMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_CMODE_CFG_ADL_NEG_OFFSET_CMODE_BF_MSK (0x000FF000)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_CMODE_CFG_ADL_NEG_OFFSET_CMODE_BF_DEF (0x00000000)

///< adl bypass/enable force (see adl_enable_ovr_val).
#define PMA_TXPLLCFGLOADER_MSG_ADL0_CMODE_CFG_ADL_EN_OVR_EN_CMODE_BF_OFF (20)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_CMODE_CFG_ADL_EN_OVR_EN_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_CMODE_CFG_ADL_EN_OVR_EN_CMODE_BF_MSK (0x00100000)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_CMODE_CFG_ADL_EN_OVR_EN_CMODE_BF_DEF (0x00000000)

///< While adl_enable_ovr_en= 1.                         0 - force adl
///< bypass.                         1 - force adl enable.
#define PMA_TXPLLCFGLOADER_MSG_ADL0_CMODE_CFG_ADL_EN_OVR_VAL_CMODE_BF_OFF (21)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_CMODE_CFG_ADL_EN_OVR_VAL_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_CMODE_CFG_ADL_EN_OVR_VAL_CMODE_BF_MSK (0x00200000)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_CMODE_CFG_ADL_EN_OVR_VAL_CMODE_BF_DEF (0x00000000)

///< Override enable for cfg_adl_cap_ctrl_ovr_val[8:0]
#define PMA_TXPLLCFGLOADER_MSG_ADL0_CMODE_CFG_ADL_CAP_CTRL_OVR_EN_CMODE_BF_OFF (22)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_CMODE_CFG_ADL_CAP_CTRL_OVR_EN_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_CMODE_CFG_ADL_CAP_CTRL_OVR_EN_CMODE_BF_MSK (0x00400000)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_CMODE_CFG_ADL_CAP_CTRL_OVR_EN_CMODE_BF_DEF (0x00000000)

///< Override value for cap_ctrl bus to ADL.
#define PMA_TXPLLCFGLOADER_MSG_ADL0_CMODE_CFG_ADL_CAP_CTRL_OVR_VAL_CMODE_BF_OFF (23)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_CMODE_CFG_ADL_CAP_CTRL_OVR_VAL_CMODE_BF_WID ( 9)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_CMODE_CFG_ADL_CAP_CTRL_OVR_VAL_CMODE_BF_MSK (0xFF800000)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_CMODE_CFG_ADL_CAP_CTRL_OVR_VAL_CMODE_BF_DEF (0x01800000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_ADL1_CMODE register description at address offset 0x1ec
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_adl1_cmode
  * SERDES_LANE_ANA_PLL::ADL1
  */

typedef union {
  struct {
    uint32_t CFG_ADL_MONITOR_OCT_SEL_CMODE : 8;
    ///< SERDES_LANE_ANA_PLL::ADL1::cfg_adl_monitor_oct_sel
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_TDC_STATUS_EN_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ADL1::cfg_tdc_status_en
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CFG_ADL_MONITOR_THR_CMODE : 5;
    ///< SERDES_LANE_ANA_PLL::ADL1::cfg_adl_monitor_thr
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t  : 18;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_adl1_cmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_ADL1_CMODE_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_CMODE_RD_MASK (0x00003fffU)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_CMODE_WR_MASK (0x00003fffU)


///< SERDES_LANE_ANA_PLL::ADL1::cfg_adl_monitor_oct_sel
#define PMA_TXPLLCFGLOADER_MSG_ADL1_CMODE_CFG_ADL_MON_OCT_SEL_CMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_CMODE_CFG_ADL_MON_OCT_SEL_CMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_CMODE_CFG_ADL_MON_OCT_SEL_CMODE_BF_MSK (0x000000FF)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_CMODE_CFG_ADL_MON_OCT_SEL_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ADL1::cfg_tdc_status_en
#define PMA_TXPLLCFGLOADER_MSG_ADL1_CMODE_CFG_TDC_STAT_EN_CMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_CMODE_CFG_TDC_STAT_EN_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_CMODE_CFG_TDC_STAT_EN_CMODE_BF_MSK (0x00000100)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_CMODE_CFG_TDC_STAT_EN_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ADL1::cfg_adl_monitor_thr
#define PMA_TXPLLCFGLOADER_MSG_ADL1_CMODE_CFG_ADL_MON_THR_CMODE_BF_OFF ( 9)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_CMODE_CFG_ADL_MON_THR_CMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_CMODE_CFG_ADL_MON_THR_CMODE_BF_MSK (0x00003E00)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_CMODE_CFG_ADL_MON_THR_CMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_FRAC_LOCK0_CMODE register description at address offset 0x1f0
  *
  * Register default value:        0x00002D0C
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_frac_lock0_cmode
  * LCPLL_FRAC_LOCK Register
  */

typedef union {
  struct {
    uint32_t O_FEEDFWRDGAIN_CMODE : 8;
    ///< Feed-forward gain for fractional mode.                         When
    ///< o_feedfwrdcal_en_h=0, this will determine the gain.
    ///< When o_feedfwrdcal_en_h=1, this will determine initial value of the
    ///< gain.                          Use the following formula:
    ///< Full rate: o_feedfwrdgain = 1/(Fdco*tdc_fine_step)
    ///< Half rate: o_feedfwrdgain = 2/(Fdco*tdc_fine_step)
    ///< For franN mode, tdc_fine_step is 6.5psec.
    ///< AccessType="RW" BitOffset="0" ResetValue="0xC"
    uint32_t O_FEEDFWRDCAL_EN_H_CMODE : 1;
    ///< Feedfward gain adaptive mode enable
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1"
    uint32_t O_FEEDFWRDCAL_PAUSE_H_CMODE : 1;
    ///< This bit is for dynamically turning on and off feed forward gain adaptive
    ///< mode.
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t O_DCODITHEREN_H_CMODE : 1;
    ///< DCO fine dithering enable signal.
    ///< AccessType="RW" BitOffset="10" ResetValue="0x1"
    uint32_t O_LOCK_CRITERIA_CMODE : 3;
    ///< Phase lock indicator criteria. Asserted high when phase error is less
    ///< than or equal to the threshold value for:
    ///< 000: 16 consecutive cycles                         001: 32 consecutive
    ///< cycles                         010: 48 consecutive cycles
    ///< 011: 64 consecutive cycles                         100: 80 consecutive
    ///< cycles                         101: 96 consecutive cycles
    ///< 110: 112 consecutive cycles                         111: 128 consecutive
    ///< cycles
    ///< AccessType="RW" BitOffset="11" ResetValue="0x5"
    uint32_t O_FBDIV_STROBE_H_CMODE : 1;
    ///< Enables sampling feedback ratio (integer+fractional) into PLL logic.
    ///< Before changing feedback ratio dynamically (while PLL is running),
    ///< one should deassert this bit until new ratio is udpated in registers.
    ///< This is to ensure safe and synchronoius update of ratio.
    ///< The feedback ratio will propagate automatically into PLL logic while
    ///< PLL is off until DCO settle state is done.
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t O_DITHER_VALUE_CMODE : 5;
    ///< DCO Dither Override Value (in case o_dither_ovrd=1).
    ///< 5 MSB of the filter fractional code (rest 4 LSBs are set to 0).
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t CFG_SIGMA_DELTA2_SEL_CMODE : 1;
    ///< 0 - Uses the first order sigma delta modulator for the feed forward
    ///< cancellation mechanism.                         1 - Uses the second
    ///< order sigma delta modulator for the feed forward cancellation mechanism.
    ///< Note that in this mode the adaptive ffgain feature doesn&#39;t work.
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t CFG_HIGH_SPEED_SD_EN_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::FRAC_LOCK0::cfg_high_speed_sd_en
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_frac_lock0_cmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_CMODE_DEFAULT (0x00002d0cU)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_CMODE_RD_MASK (0x003fffffU)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_CMODE_WR_MASK (0x003fffffU)


///< Feed-forward gain for fractional mode.                         When
///< o_feedfwrdcal_en_h=0, this will determine the gain.
///< When o_feedfwrdcal_en_h=1, this will determine initial value of the
///< gain.                          Use the following formula:
///< Full rate: o_feedfwrdgain = 1/(Fdco*tdc_fine_step)
///< Half rate: o_feedfwrdgain = 2/(Fdco*tdc_fine_step)
///< For franN mode, tdc_fine_step is 6.5psec.
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_CMODE_O_FEEDFWRDGAIN_CMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_CMODE_O_FEEDFWRDGAIN_CMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_CMODE_O_FEEDFWRDGAIN_CMODE_BF_MSK (0x000000FF)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_CMODE_O_FEEDFWRDGAIN_CMODE_BF_DEF (0x0000000C)

///< Feedfward gain adaptive mode enable
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_CMODE_O_FEEDFWRDCAL_EN_H_CMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_CMODE_O_FEEDFWRDCAL_EN_H_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_CMODE_O_FEEDFWRDCAL_EN_H_CMODE_BF_MSK (0x00000100)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_CMODE_O_FEEDFWRDCAL_EN_H_CMODE_BF_DEF (0x00000100)

///< This bit is for dynamically turning on and off feed forward gain adaptive
///< mode.
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_CMODE_O_FEEDFWRDCAL_PAUSE_H_CMODE_BF_OFF ( 9)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_CMODE_O_FEEDFWRDCAL_PAUSE_H_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_CMODE_O_FEEDFWRDCAL_PAUSE_H_CMODE_BF_MSK (0x00000200)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_CMODE_O_FEEDFWRDCAL_PAUSE_H_CMODE_BF_DEF (0x00000000)

///< DCO fine dithering enable signal.
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_CMODE_O_DCODITHEREN_H_CMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_CMODE_O_DCODITHEREN_H_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_CMODE_O_DCODITHEREN_H_CMODE_BF_MSK (0x00000400)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_CMODE_O_DCODITHEREN_H_CMODE_BF_DEF (0x00000400)

///< Phase lock indicator criteria. Asserted high when phase error is less
///< than or equal to the threshold value for:
///< 000: 16 consecutive cycles                         001: 32 consecutive
///< cycles                         010: 48 consecutive cycles
///< 011: 64 consecutive cycles                         100: 80 consecutive
///< cycles                         101: 96 consecutive cycles
///< 110: 112 consecutive cycles                         111: 128 consecutive
///< cycles
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_CMODE_O_LOCK_CRITERIA_CMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_CMODE_O_LOCK_CRITERIA_CMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_CMODE_O_LOCK_CRITERIA_CMODE_BF_MSK (0x00003800)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_CMODE_O_LOCK_CRITERIA_CMODE_BF_DEF (0x00002800)

///< Enables sampling feedback ratio (integer+fractional) into PLL logic.
///< Before changing feedback ratio dynamically (while PLL is running),
///< one should deassert this bit until new ratio is udpated in registers.
///< This is to ensure safe and synchronoius update of ratio.
///< The feedback ratio will propagate automatically into PLL logic while
///< PLL is off until DCO settle state is done.
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_CMODE_O_FBDIV_STROBE_H_CMODE_BF_OFF (14)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_CMODE_O_FBDIV_STROBE_H_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_CMODE_O_FBDIV_STROBE_H_CMODE_BF_MSK (0x00004000)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_CMODE_O_FBDIV_STROBE_H_CMODE_BF_DEF (0x00000000)

///< DCO Dither Override Value (in case o_dither_ovrd=1).
///< 5 MSB of the filter fractional code (rest 4 LSBs are set to 0).
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_CMODE_O_DITHER_VAL_CMODE_BF_OFF (15)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_CMODE_O_DITHER_VAL_CMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_CMODE_O_DITHER_VAL_CMODE_BF_MSK (0x000F8000)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_CMODE_O_DITHER_VAL_CMODE_BF_DEF (0x00000000)

///< 0 - Uses the first order sigma delta modulator for the feed forward
///< cancellation mechanism.                         1 - Uses the second
///< order sigma delta modulator for the feed forward cancellation mechanism.
///< Note that in this mode the adaptive ffgain feature doesn&#39;t work.
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_CMODE_CFG_SIGMA_DELTA2_SEL_CMODE_BF_OFF (20)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_CMODE_CFG_SIGMA_DELTA2_SEL_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_CMODE_CFG_SIGMA_DELTA2_SEL_CMODE_BF_MSK (0x00100000)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_CMODE_CFG_SIGMA_DELTA2_SEL_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::FRAC_LOCK0::cfg_high_speed_sd_en
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_CMODE_CFG_HIGH_SPEED_SD_EN_CMODE_BF_OFF (21)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_CMODE_CFG_HIGH_SPEED_SD_EN_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_CMODE_CFG_HIGH_SPEED_SD_EN_CMODE_BF_MSK (0x00200000)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_CMODE_CFG_HIGH_SPEED_SD_EN_CMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_FRAC_LOCK1_CMODE register description at address offset 0x1f4
  *
  * Register default value:        0x00000045
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_frac_lock1_cmode
  * SERDES_LANE_ANA_PLL::FRAC_LOCK1
  */

typedef union {
  struct {
    uint32_t CFG_LOCK_THRESH_CMODE : 5;
    ///< Phase lock detect threshold.                         The PLL will
    ///< generate plllockout when the TDC phase error is within lockthresh
    ///< for a number of cycles determined by o_lock_criteria.
    ///< 0 is forbidden value.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x5"
    uint32_t CFG_FINE_FIRST_BOOST_REPEAT_CMODE : 3;
    ///< Determines the number of repetitions of the boost gain counter for
    ///< the first stage of the fine boost.                         The number
    ///< of overall repetitions is equal to cfg_fine_first_boost_repeat + 1
    ///< Set this to non-zero when PLL needs to lock on SSC&#39;ed refclk,
    ///< to allow enough time for the boost to handle fast cap-swap.
    ///< AccessType="RW" BitOffset="5" ResetValue="0x2"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_frac_lock1_cmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_CMODE_DEFAULT (0x00000045U)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_CMODE_RD_MASK (0x000000ffU)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_CMODE_WR_MASK (0x000000ffU)


///< Phase lock detect threshold.                         The PLL will
///< generate plllockout when the TDC phase error is within lockthresh
///< for a number of cycles determined by o_lock_criteria.
///< 0 is forbidden value.
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_CMODE_CFG_LOCK_THRESH_CMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_CMODE_CFG_LOCK_THRESH_CMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_CMODE_CFG_LOCK_THRESH_CMODE_BF_MSK (0x0000001F)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_CMODE_CFG_LOCK_THRESH_CMODE_BF_DEF (0x00000005)

///< Determines the number of repetitions of the boost gain counter for
///< the first stage of the fine boost.                         The number
///< of overall repetitions is equal to cfg_fine_first_boost_repeat + 1
///< Set this to non-zero when PLL needs to lock on SSC&#39;ed refclk,
///< to allow enough time for the boost to handle fast cap-swap.
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_CMODE_CFG_FINE_FIRST_BOOST_REPEAT_CMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_CMODE_CFG_FINE_FIRST_BOOST_REPEAT_CMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_CMODE_CFG_FINE_FIRST_BOOST_REPEAT_CMODE_BF_MSK (0x000000E0)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_CMODE_CFG_FINE_FIRST_BOOST_REPEAT_CMODE_BF_DEF (0x00000040)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_TDC0_CMODE register description at address offset 0x1f8
  *
  * Register default value:        0x0F00033F
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_tdc0_cmode
  * LCPLL_TDC0 Register
  */

typedef union {
  struct {
    uint32_t CFG_VTDC_REFCLK_CNT_LIMIT_CMODE : 4;
    ///< Number of reference clock cycles used in TDC clock calibration
    ///< AccessType="RW" BitOffset="0" ResetValue="0xF"
    uint32_t CFG_VTDC_FAST_SEL_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_fast_sel
    ///< AccessType="RW" BitOffset="4" ResetValue="0x1"
    uint32_t CFG_VTDC_OFFSET_CALIB_EN_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_offset_calib_en
    ///< AccessType="RW" BitOffset="5" ResetValue="0x1"
    uint32_t CFG_VTDC_PLUS_STDC_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_plus_stdc
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t CFG_VTDC_FINE_OFFSET_CHIKEN_BIT_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_fine_offset_chiken_bit
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t CFG_VTDC_OFFSET_TIMER_LIMIT_CMODE : 4;
    ///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_offset_timer_limit
    ///< AccessType="RW" BitOffset="8" ResetValue="0x3"
    uint32_t CFG_VTDC_FINE_OFFSET_OVRD_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_fine_offset_ovrd
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t CFG_VTDC_FINE_OFFSET_OVRD_VAL_CMODE : 5;
    ///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_fine_offset_ovrd_val
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t CFG_TDCPE_OFFSET_CMODE : 5;
    ///< Adding offset to 2&#39;s comp tdc value (integer signed)
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t CFG_TDC_BB_INPUT_SEL_CMODE : 1;
    ///< 1&#39;b0 - Uses bb TDC signal from analog
    ///< 1&#39;b1 - Uses MSB of tdceff signal as bb TDC input signal (TDC sign
    ///< bit)
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t CFG_STDC_STDDEV_INIT_CMODE : 4;
    ///< Initial value for stddev control bus before STDC calibration.
    ///< AccessType="RW" BitOffset="24" ResetValue="0xF"
    uint32_t CFG_FORCE_VTDC_OSC_CMODE : 1;
    ///< Forces VTDC to RO mode
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t CFG_VTDC_OFFSET_RANGE_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_offset_range
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_tdc0_cmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_DEFAULT (0x0f00033fU)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_RD_MASK (0x3fffffffU)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_WR_MASK (0x3fffffffU)


///< Number of reference clock cycles used in TDC clock calibration
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_CFG_VTDC_REFCLK_CNT_LIMIT_CMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_CFG_VTDC_REFCLK_CNT_LIMIT_CMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_CFG_VTDC_REFCLK_CNT_LIMIT_CMODE_BF_MSK (0x0000000F)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_CFG_VTDC_REFCLK_CNT_LIMIT_CMODE_BF_DEF (0x0000000F)

///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_fast_sel
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_CFG_VTDC_FAST_SEL_CMODE_BF_OFF ( 4)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_CFG_VTDC_FAST_SEL_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_CFG_VTDC_FAST_SEL_CMODE_BF_MSK (0x00000010)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_CFG_VTDC_FAST_SEL_CMODE_BF_DEF (0x00000010)

///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_offset_calib_en
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_CFG_VTDC_OFFSET_CALIB_EN_CMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_CFG_VTDC_OFFSET_CALIB_EN_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_CFG_VTDC_OFFSET_CALIB_EN_CMODE_BF_MSK (0x00000020)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_CFG_VTDC_OFFSET_CALIB_EN_CMODE_BF_DEF (0x00000020)

///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_plus_stdc
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_CFG_VTDC_PLUS_STDC_CMODE_BF_OFF ( 6)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_CFG_VTDC_PLUS_STDC_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_CFG_VTDC_PLUS_STDC_CMODE_BF_MSK (0x00000040)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_CFG_VTDC_PLUS_STDC_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_fine_offset_chiken_bit
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_CFG_VTDC_FINE_OFFSET_CHIKEN_BIT_CMODE_BF_OFF ( 7)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_CFG_VTDC_FINE_OFFSET_CHIKEN_BIT_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_CFG_VTDC_FINE_OFFSET_CHIKEN_BIT_CMODE_BF_MSK (0x00000080)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_CFG_VTDC_FINE_OFFSET_CHIKEN_BIT_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_offset_timer_limit
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_CFG_VTDC_OFFSET_TIMER_LIMIT_CMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_CFG_VTDC_OFFSET_TIMER_LIMIT_CMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_CFG_VTDC_OFFSET_TIMER_LIMIT_CMODE_BF_MSK (0x00000F00)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_CFG_VTDC_OFFSET_TIMER_LIMIT_CMODE_BF_DEF (0x00000300)

///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_fine_offset_ovrd
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_CFG_VTDC_FINE_OFFSET_OVRD_CMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_CFG_VTDC_FINE_OFFSET_OVRD_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_CFG_VTDC_FINE_OFFSET_OVRD_CMODE_BF_MSK (0x00001000)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_CFG_VTDC_FINE_OFFSET_OVRD_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_fine_offset_ovrd_val
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_CFG_VTDC_FINE_OFFSET_OVRD_VAL_CMODE_BF_OFF (13)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_CFG_VTDC_FINE_OFFSET_OVRD_VAL_CMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_CFG_VTDC_FINE_OFFSET_OVRD_VAL_CMODE_BF_MSK (0x0003E000)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_CFG_VTDC_FINE_OFFSET_OVRD_VAL_CMODE_BF_DEF (0x00000000)

///< Adding offset to 2&#39;s comp tdc value (integer signed)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_CFG_TDCPE_OFFSET_CMODE_BF_OFF (18)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_CFG_TDCPE_OFFSET_CMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_CFG_TDCPE_OFFSET_CMODE_BF_MSK (0x007C0000)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_CFG_TDCPE_OFFSET_CMODE_BF_DEF (0x00000000)

///< 1&#39;b0 - Uses bb TDC signal from analog
///< 1&#39;b1 - Uses MSB of tdceff signal as bb TDC input signal (TDC sign
///< bit)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_CFG_TDC_BB_INPUT_SEL_CMODE_BF_OFF (23)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_CFG_TDC_BB_INPUT_SEL_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_CFG_TDC_BB_INPUT_SEL_CMODE_BF_MSK (0x00800000)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_CFG_TDC_BB_INPUT_SEL_CMODE_BF_DEF (0x00000000)

///< Initial value for stddev control bus before STDC calibration.
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_CFG_STDC_STDDEV_INIT_CMODE_BF_OFF (24)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_CFG_STDC_STDDEV_INIT_CMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_CFG_STDC_STDDEV_INIT_CMODE_BF_MSK (0x0F000000)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_CFG_STDC_STDDEV_INIT_CMODE_BF_DEF (0x0F000000)

///< Forces VTDC to RO mode
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_CFG_FORCE_VTDC_OSC_CMODE_BF_OFF (28)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_CFG_FORCE_VTDC_OSC_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_CFG_FORCE_VTDC_OSC_CMODE_BF_MSK (0x10000000)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_CFG_FORCE_VTDC_OSC_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_offset_range
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_CFG_VTDC_OFFSET_RANGE_CMODE_BF_OFF (29)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_CFG_VTDC_OFFSET_RANGE_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_CFG_VTDC_OFFSET_RANGE_CMODE_BF_MSK (0x20000000)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_CFG_VTDC_OFFSET_RANGE_CMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_TDC1_CMODE register description at address offset 0x1fc
  *
  * Register default value:        0x001E80AA
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_tdc1_cmode
  * SERDES_LANE_ANA_PLL::TDC1
  */

typedef union {
  struct {
    uint32_t CFG_PE_DISABLE_CMODE : 1;
    ///< Force values of 0 on TDC output.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_TDC_LADDER_MAX_CMODE : 2;
    ///< Max trim ladder code value alowed during lock adquisition.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x1"
    uint32_t CFG_TDC_LADDER_MIN_CMODE : 2;
    ///< Min trim ladder code value alowed during lock adquisition.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x1"
    uint32_t CFG_SELECT_STDC_FILTER_CMODE : 1;
    ///< Select STDC output to filter.                         Will select
    ///< only after FSM enables.
    ///< AccessType="RW" BitOffset="5" ResetValue="0x1"
    uint32_t CFG_SELECT_STDC_DFX_CMODE : 1;
    ///< Select STDC output to DFX path (PE min/max, raw lock, VISA, RO reg)
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t CFG_STDC_PROP_COEFF_CMODE : 5;
    ///< Fine Kp = 2^(-reg) to be used with STDC (signed value)
    ///< AccessType="RW" BitOffset="7" ResetValue="0x1"
    uint32_t CFG_STDC_INT_COEFF_CMODE : 5;
    ///< Fine Ki = 2^(-reg) to be used with STDC
    ///< AccessType="RW" BitOffset="12" ResetValue="0x8"
    uint32_t CFG_VTDC_ANA_EN_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC1::cfg_vtdc_ana_en
    ///< AccessType="RW" BitOffset="17" ResetValue="0x1"
    uint32_t CFG_STDC_ANA_EN_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC1::cfg_stdc_ana_en
    ///< AccessType="RW" BitOffset="18" ResetValue="0x1"
    uint32_t CFG_TDC_SAMP_BYPASS_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC1::cfg_tdc_samp_bypass
    ///< AccessType="RW" BitOffset="19" ResetValue="0x1"
    uint32_t CFG_STDC_SAMP_BYPASS_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC1::cfg_stdc_samp_bypass
    ///< AccessType="RW" BitOffset="20" ResetValue="0x1"
    uint32_t CFG_TDC_STATUS_MODE_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC1::cfg_tdc_status_mode
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t CFG_TDC_HISTOGRAM_MODE_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC1::cfg_tdc_histogram_mode
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t CFG_TDC_HISTOGRAM_VALUE_CMODE : 6;
    ///< SERDES_LANE_ANA_PLL::TDC1::cfg_tdc_histogram_value
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_tdc1_cmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_DEFAULT (0x001e80aaU)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_RD_MASK (0x1fffffffU)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_WR_MASK (0x1fffffffU)


///< Force values of 0 on TDC output.
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_PE_DIS_CMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_PE_DIS_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_PE_DIS_CMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_PE_DIS_CMODE_BF_DEF (0x00000000)

///< Max trim ladder code value alowed during lock adquisition.
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_TDC_LADDER_MAX_CMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_TDC_LADDER_MAX_CMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_TDC_LADDER_MAX_CMODE_BF_MSK (0x00000006)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_TDC_LADDER_MAX_CMODE_BF_DEF (0x00000002)

///< Min trim ladder code value alowed during lock adquisition.
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_TDC_LADDER_MIN_CMODE_BF_OFF ( 3)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_TDC_LADDER_MIN_CMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_TDC_LADDER_MIN_CMODE_BF_MSK (0x00000018)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_TDC_LADDER_MIN_CMODE_BF_DEF (0x00000008)

///< Select STDC output to filter.                         Will select
///< only after FSM enables.
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_SEL_STDC_FILTER_CMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_SEL_STDC_FILTER_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_SEL_STDC_FILTER_CMODE_BF_MSK (0x00000020)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_SEL_STDC_FILTER_CMODE_BF_DEF (0x00000020)

///< Select STDC output to DFX path (PE min/max, raw lock, VISA, RO reg)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_SEL_STDC_DFX_CMODE_BF_OFF ( 6)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_SEL_STDC_DFX_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_SEL_STDC_DFX_CMODE_BF_MSK (0x00000040)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_SEL_STDC_DFX_CMODE_BF_DEF (0x00000000)

///< Fine Kp = 2^(-reg) to be used with STDC (signed value)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_STDC_PROP_COEFF_CMODE_BF_OFF ( 7)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_STDC_PROP_COEFF_CMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_STDC_PROP_COEFF_CMODE_BF_MSK (0x00000F80)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_STDC_PROP_COEFF_CMODE_BF_DEF (0x00000080)

///< Fine Ki = 2^(-reg) to be used with STDC
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_STDC_INT_COEFF_CMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_STDC_INT_COEFF_CMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_STDC_INT_COEFF_CMODE_BF_MSK (0x0001F000)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_STDC_INT_COEFF_CMODE_BF_DEF (0x00008000)

///< SERDES_LANE_ANA_PLL::TDC1::cfg_vtdc_ana_en
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_VTDC_ANA_EN_CMODE_BF_OFF (17)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_VTDC_ANA_EN_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_VTDC_ANA_EN_CMODE_BF_MSK (0x00020000)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_VTDC_ANA_EN_CMODE_BF_DEF (0x00020000)

///< SERDES_LANE_ANA_PLL::TDC1::cfg_stdc_ana_en
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_STDC_ANA_EN_CMODE_BF_OFF (18)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_STDC_ANA_EN_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_STDC_ANA_EN_CMODE_BF_MSK (0x00040000)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_STDC_ANA_EN_CMODE_BF_DEF (0x00040000)

///< SERDES_LANE_ANA_PLL::TDC1::cfg_tdc_samp_bypass
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_TDC_SAMP_BYP_CMODE_BF_OFF (19)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_TDC_SAMP_BYP_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_TDC_SAMP_BYP_CMODE_BF_MSK (0x00080000)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_TDC_SAMP_BYP_CMODE_BF_DEF (0x00080000)

///< SERDES_LANE_ANA_PLL::TDC1::cfg_stdc_samp_bypass
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_STDC_SAMP_BYP_CMODE_BF_OFF (20)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_STDC_SAMP_BYP_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_STDC_SAMP_BYP_CMODE_BF_MSK (0x00100000)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_STDC_SAMP_BYP_CMODE_BF_DEF (0x00100000)

///< SERDES_LANE_ANA_PLL::TDC1::cfg_tdc_status_mode
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_TDC_STAT_MODE_CMODE_BF_OFF (21)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_TDC_STAT_MODE_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_TDC_STAT_MODE_CMODE_BF_MSK (0x00200000)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_TDC_STAT_MODE_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TDC1::cfg_tdc_histogram_mode
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_TDC_HISTOGRAM_MODE_CMODE_BF_OFF (22)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_TDC_HISTOGRAM_MODE_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_TDC_HISTOGRAM_MODE_CMODE_BF_MSK (0x00400000)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_TDC_HISTOGRAM_MODE_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TDC1::cfg_tdc_histogram_value
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_TDC_HISTOGRAM_VAL_CMODE_BF_OFF (23)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_TDC_HISTOGRAM_VAL_CMODE_BF_WID ( 6)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_TDC_HISTOGRAM_VAL_CMODE_BF_MSK (0x1F800000)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_CFG_TDC_HISTOGRAM_VAL_CMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_TDC2_CMODE register description at address offset 0x200
  *
  * Register default value:        0x002483EF
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_tdc2_cmode
  * SERDES_LANE_ANA_PLL::TDC2
  */

typedef union {
  struct {
    uint32_t CFG_TDC_ADAPTIVE_WIN_IN_CMODE : 5;
    ///< TDC code threshold to switch ladder with higher resolution.
    ///< Need to be below that value during cfg_tdc_adaptive_max_count cycle
    ///< time window
    ///< AccessType="RW" BitOffset="0" ResetValue="0xF"
    uint32_t CFG_TDC_ADAPTIVE_WIN_OUT_CMODE : 5;
    ///< TDC code threshold to switch ladder with lower resolution.
    ///< AccessType="RW" BitOffset="5" ResetValue="0x1F"
    uint32_t CFG_TDC_ADAPTIVE_MAX_COUNT_CMODE : 6;
    ///< Defines the number of cycles for time window of TDC ladder adaptive
    ///< switching
    ///< AccessType="RW" BitOffset="10" ResetValue="0x20"
    uint32_t CFG_TDC_TRIM_OVRD_CMODE : 1;
    ///< tdc chain trim ovrd enable
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t CFG_TDC_TRIM_VAL_CMODE : 2;
    ///< tdc chain trim ovrd value
    ///< AccessType="RW" BitOffset="17" ResetValue="0x2"
    uint32_t CFG_KPKI_COMPENSATE_VAL_CMODE : 2;
    ///< SERDES_LANE_ANA_PLL::TDC2::cfg_kpki_compensate_val
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t CFG_STDC_BIAS_EN_CMODE : 1;
    ///< Enables internal STDC bias.
    ///< AccessType="RW" BitOffset="21" ResetValue="0x1"
    uint32_t CFG_FORCE_STDC_OSC_CMODE : 1;
    ///< Forces internal STDC oscilator to enable.
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t CFG_STDC_STDDEV_OVRD_EN_CMODE : 1;
    ///< Enables override for stddev control bus.
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t CFG_STDC_OSC_DIV4_CMODE : 1;
    ///< Enables internal STDC divider for internal oscilator output.
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t CFG_STDCPE_OFFSET_CMODE : 5;
    ///< Adding offset to 2&#39;s comp stdc value (integer signed)
    ///< AccessType="RW" BitOffset="25" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_tdc2_cmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_TDC2_CMODE_DEFAULT (0x002483efU)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_CMODE_RD_MASK (0x3fffffffU)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_CMODE_WR_MASK (0x3fffffffU)


///< TDC code threshold to switch ladder with higher resolution.
///< Need to be below that value during cfg_tdc_adaptive_max_count cycle
///< time window
#define PMA_TXPLLCFGLOADER_MSG_TDC2_CMODE_CFG_TDC_ADAPTIVE_WIN_IN_CMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_CMODE_CFG_TDC_ADAPTIVE_WIN_IN_CMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_CMODE_CFG_TDC_ADAPTIVE_WIN_IN_CMODE_BF_MSK (0x0000001F)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_CMODE_CFG_TDC_ADAPTIVE_WIN_IN_CMODE_BF_DEF (0x0000000F)

///< TDC code threshold to switch ladder with lower resolution.
#define PMA_TXPLLCFGLOADER_MSG_TDC2_CMODE_CFG_TDC_ADAPTIVE_WIN_OUT_CMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_CMODE_CFG_TDC_ADAPTIVE_WIN_OUT_CMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_CMODE_CFG_TDC_ADAPTIVE_WIN_OUT_CMODE_BF_MSK (0x000003E0)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_CMODE_CFG_TDC_ADAPTIVE_WIN_OUT_CMODE_BF_DEF (0x000003E0)

///< Defines the number of cycles for time window of TDC ladder adaptive
///< switching
#define PMA_TXPLLCFGLOADER_MSG_TDC2_CMODE_CFG_TDC_ADAPTIVE_MAX_CNT_CMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_CMODE_CFG_TDC_ADAPTIVE_MAX_CNT_CMODE_BF_WID ( 6)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_CMODE_CFG_TDC_ADAPTIVE_MAX_CNT_CMODE_BF_MSK (0x0000FC00)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_CMODE_CFG_TDC_ADAPTIVE_MAX_CNT_CMODE_BF_DEF (0x00008000)

///< tdc chain trim ovrd enable
#define PMA_TXPLLCFGLOADER_MSG_TDC2_CMODE_CFG_TDC_TRIM_OVRD_CMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_CMODE_CFG_TDC_TRIM_OVRD_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_CMODE_CFG_TDC_TRIM_OVRD_CMODE_BF_MSK (0x00010000)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_CMODE_CFG_TDC_TRIM_OVRD_CMODE_BF_DEF (0x00000000)

///< tdc chain trim ovrd value
#define PMA_TXPLLCFGLOADER_MSG_TDC2_CMODE_CFG_TDC_TRIM_VAL_CMODE_BF_OFF (17)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_CMODE_CFG_TDC_TRIM_VAL_CMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_CMODE_CFG_TDC_TRIM_VAL_CMODE_BF_MSK (0x00060000)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_CMODE_CFG_TDC_TRIM_VAL_CMODE_BF_DEF (0x00040000)

///< SERDES_LANE_ANA_PLL::TDC2::cfg_kpki_compensate_val
#define PMA_TXPLLCFGLOADER_MSG_TDC2_CMODE_CFG_KPKI_COMPENSATE_VAL_CMODE_BF_OFF (19)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_CMODE_CFG_KPKI_COMPENSATE_VAL_CMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_CMODE_CFG_KPKI_COMPENSATE_VAL_CMODE_BF_MSK (0x00180000)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_CMODE_CFG_KPKI_COMPENSATE_VAL_CMODE_BF_DEF (0x00000000)

///< Enables internal STDC bias.
#define PMA_TXPLLCFGLOADER_MSG_TDC2_CMODE_CFG_STDC_BIAS_EN_CMODE_BF_OFF (21)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_CMODE_CFG_STDC_BIAS_EN_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_CMODE_CFG_STDC_BIAS_EN_CMODE_BF_MSK (0x00200000)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_CMODE_CFG_STDC_BIAS_EN_CMODE_BF_DEF (0x00200000)

///< Forces internal STDC oscilator to enable.
#define PMA_TXPLLCFGLOADER_MSG_TDC2_CMODE_CFG_FORCE_STDC_OSC_CMODE_BF_OFF (22)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_CMODE_CFG_FORCE_STDC_OSC_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_CMODE_CFG_FORCE_STDC_OSC_CMODE_BF_MSK (0x00400000)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_CMODE_CFG_FORCE_STDC_OSC_CMODE_BF_DEF (0x00000000)

///< Enables override for stddev control bus.
#define PMA_TXPLLCFGLOADER_MSG_TDC2_CMODE_CFG_STDC_STDDEV_OVRD_EN_CMODE_BF_OFF (23)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_CMODE_CFG_STDC_STDDEV_OVRD_EN_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_CMODE_CFG_STDC_STDDEV_OVRD_EN_CMODE_BF_MSK (0x00800000)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_CMODE_CFG_STDC_STDDEV_OVRD_EN_CMODE_BF_DEF (0x00000000)

///< Enables internal STDC divider for internal oscilator output.
#define PMA_TXPLLCFGLOADER_MSG_TDC2_CMODE_CFG_STDC_OSC_DIV4_CMODE_BF_OFF (24)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_CMODE_CFG_STDC_OSC_DIV4_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_CMODE_CFG_STDC_OSC_DIV4_CMODE_BF_MSK (0x01000000)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_CMODE_CFG_STDC_OSC_DIV4_CMODE_BF_DEF (0x00000000)

///< Adding offset to 2&#39;s comp stdc value (integer signed)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_CMODE_CFG_STDCPE_OFFSET_CMODE_BF_OFF (25)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_CMODE_CFG_STDCPE_OFFSET_CMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_CMODE_CFG_STDCPE_OFFSET_CMODE_BF_MSK (0x3E000000)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_CMODE_CFG_STDCPE_OFFSET_CMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_TDC3_CMODE register description at address offset 0x204
  *
  * Register default value:        0x000003A3
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_tdc3_cmode
  * SERDES_LANE_ANA_PLL::TDC3
  */

typedef union {
  struct {
    uint32_t CFG_STDC_TARGET_CNT_CMODE : 8;
    ///< Calibration target for STDC oscilator during calibration.
    ///< The formula: int(2^(2 + cfg_stdc_cnt_limit)*(3e9/Frefclk))
    ///< AccessType="RW" BitOffset="0" ResetValue="0xA3"
    uint32_t CFG_STDC_CNT_LIMIT_CMODE : 2;
    ///< Number of cycles to count STDC oscilator edges during calibration.
    ///< Value = 2^(2 + reg)
    ///< AccessType="RW" BitOffset="8" ResetValue="0x3"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_tdc3_cmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_TDC3_CMODE_DEFAULT (0x000003a3U)
#define PMA_TXPLLCFGLOADER_MSG_TDC3_CMODE_RD_MASK (0x000003ffU)
#define PMA_TXPLLCFGLOADER_MSG_TDC3_CMODE_WR_MASK (0x000003ffU)


///< Calibration target for STDC oscilator during calibration.
///< The formula: int(2^(2 + cfg_stdc_cnt_limit)*(3e9/Frefclk))
#define PMA_TXPLLCFGLOADER_MSG_TDC3_CMODE_CFG_STDC_TARGET_CNT_CMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_TDC3_CMODE_CFG_STDC_TARGET_CNT_CMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_TDC3_CMODE_CFG_STDC_TARGET_CNT_CMODE_BF_MSK (0x000000FF)
#define PMA_TXPLLCFGLOADER_MSG_TDC3_CMODE_CFG_STDC_TARGET_CNT_CMODE_BF_DEF (0x000000A3)

///< Number of cycles to count STDC oscilator edges during calibration.
///< Value = 2^(2 + reg)
#define PMA_TXPLLCFGLOADER_MSG_TDC3_CMODE_CFG_STDC_CNT_LIMIT_CMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_TDC3_CMODE_CFG_STDC_CNT_LIMIT_CMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_TDC3_CMODE_CFG_STDC_CNT_LIMIT_CMODE_BF_MSK (0x00000300)
#define PMA_TXPLLCFGLOADER_MSG_TDC3_CMODE_CFG_STDC_CNT_LIMIT_CMODE_BF_DEF (0x00000300)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_TAP_OVRD_CMODE register description at address offset 0x208
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_tap_ovrd_cmode
  * LCPLL_TAP_OVRD Register
  */

typedef union {
  struct {
    uint32_t CFG_PLL_ENABLE_CMODE : 1;
    ///< Replaces direct pin of PLL enable signal (in case cfg_pll_en_mode_ctrl
    ///< = 1).
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_PLL_EN_MODE_CTRL_CMODE : 1;
    ///< Effective PLL enable:                         0 - Enable signal from
    ///< PLL interface                         1 - Enable signal from PLL register
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t CFG_LDO_ENABLE_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldo_enable
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t CFG_VREFGEN_EN_OVRD_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_vrefgen_en_ovrd
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t CFG_VREFGEN_EN_OVRD_VAL_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_vrefgen_en_ovrd_val
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t CFG_LDO_BIAS_EN_OVRD_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldo_bias_en_ovrd
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t CFG_LDO_BIAS_EN_OVRD_VAL_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldo_bias_en_ovrd_val
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t CFG_LDOCLK_EN_OVRD_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldoclk_en_ovrd
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t CFG_LDOCLK_EN_OVRD_VAL_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldoclk_en_ovrd_val
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CFG_LDODCO_EN_OVRD_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldodco_en_ovrd
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t CFG_LDODCO_EN_OVRD_VAL_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldodco_en_ovrd_val
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t O_DFX_TDC_DISABLE_CMODE : 1;
    ///< Set to turn off TDC. Mainly to study impact of TDC self noise on PLL
    ///< jitter
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_tap_ovrd_cmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_RD_MASK (0x00000fffU)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_WR_MASK (0x00000fffU)


///< Replaces direct pin of PLL enable signal (in case cfg_pll_en_mode_ctrl
///< = 1).
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_CFG_PLL_EN_CMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_CFG_PLL_EN_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_CFG_PLL_EN_CMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_CFG_PLL_EN_CMODE_BF_DEF (0x00000000)

///< Effective PLL enable:                         0 - Enable signal from
///< PLL interface                         1 - Enable signal from PLL register
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_CFG_PLL_EN_MODE_CTRL_CMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_CFG_PLL_EN_MODE_CTRL_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_CFG_PLL_EN_MODE_CTRL_CMODE_BF_MSK (0x00000002)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_CFG_PLL_EN_MODE_CTRL_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldo_enable
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_CFG_LDO_EN_CMODE_BF_OFF ( 2)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_CFG_LDO_EN_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_CFG_LDO_EN_CMODE_BF_MSK (0x00000004)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_CFG_LDO_EN_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_vrefgen_en_ovrd
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_CFG_VREFGEN_EN_OVRD_CMODE_BF_OFF ( 3)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_CFG_VREFGEN_EN_OVRD_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_CFG_VREFGEN_EN_OVRD_CMODE_BF_MSK (0x00000008)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_CFG_VREFGEN_EN_OVRD_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_vrefgen_en_ovrd_val
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_CFG_VREFGEN_EN_OVRD_VAL_CMODE_BF_OFF ( 4)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_CFG_VREFGEN_EN_OVRD_VAL_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_CFG_VREFGEN_EN_OVRD_VAL_CMODE_BF_MSK (0x00000010)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_CFG_VREFGEN_EN_OVRD_VAL_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldo_bias_en_ovrd
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_CFG_LDO_BIAS_EN_OVRD_CMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_CFG_LDO_BIAS_EN_OVRD_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_CFG_LDO_BIAS_EN_OVRD_CMODE_BF_MSK (0x00000020)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_CFG_LDO_BIAS_EN_OVRD_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldo_bias_en_ovrd_val
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_CFG_LDO_BIAS_EN_OVRD_VAL_CMODE_BF_OFF ( 6)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_CFG_LDO_BIAS_EN_OVRD_VAL_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_CFG_LDO_BIAS_EN_OVRD_VAL_CMODE_BF_MSK (0x00000040)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_CFG_LDO_BIAS_EN_OVRD_VAL_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldoclk_en_ovrd
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_CFG_LDOCLK_EN_OVRD_CMODE_BF_OFF ( 7)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_CFG_LDOCLK_EN_OVRD_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_CFG_LDOCLK_EN_OVRD_CMODE_BF_MSK (0x00000080)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_CFG_LDOCLK_EN_OVRD_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldoclk_en_ovrd_val
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_CFG_LDOCLK_EN_OVRD_VAL_CMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_CFG_LDOCLK_EN_OVRD_VAL_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_CFG_LDOCLK_EN_OVRD_VAL_CMODE_BF_MSK (0x00000100)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_CFG_LDOCLK_EN_OVRD_VAL_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldodco_en_ovrd
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_CFG_LDODCO_EN_OVRD_CMODE_BF_OFF ( 9)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_CFG_LDODCO_EN_OVRD_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_CFG_LDODCO_EN_OVRD_CMODE_BF_MSK (0x00000200)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_CFG_LDODCO_EN_OVRD_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldodco_en_ovrd_val
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_CFG_LDODCO_EN_OVRD_VAL_CMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_CFG_LDODCO_EN_OVRD_VAL_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_CFG_LDODCO_EN_OVRD_VAL_CMODE_BF_MSK (0x00000400)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_CFG_LDODCO_EN_OVRD_VAL_CMODE_BF_DEF (0x00000000)

///< Set to turn off TDC. Mainly to study impact of TDC self noise on PLL
///< jitter
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_O_DFX_TDC_DIS_CMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_O_DFX_TDC_DIS_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_O_DFX_TDC_DIS_CMODE_BF_MSK (0x00000800)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_O_DFX_TDC_DIS_CMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_DFX_DCO_CMODE register description at address offset 0x20c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_dfx_dco_cmode
  * LCPLL_DFX_DCO Register
  */

typedef union {
  struct {
    uint32_t O_DCOFINEDFTSEL_CMODE : 2;
    ///< DCO fine frequency and dco dither override:
    ///< 00: DCO fine tuning is set by PLL closed loop .
    ///< 01: DCO fine frequency value is set by o_dcofine and DCO dither value
    ///< is set by o_dither_value.                         10: Internal SAW
    ///< tooth pattern on fine integer code (while frac=0). Code increments
    ///< every fbclk cycle.                         11: Reserved.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t O_DCOCOARSE_OVRD_H_CMODE : 1;
    ///< DCO coarse frequency override signal:                         0: DCO
    ///< coarse tuning is set by AFC state machine
    ///< 1: DCO coarse frequency value is set by o_dcocoarse
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t O_DCOFINE_CMODE : 8;
    ///< Fine override value (when o_dcofinedftsel = 01).
    ///< Valid range 0 to 254.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t O_DCOCOARSE_CMODE : 9;
    ///< AFC override value (when o_dcocoarse_ovrd_h=1).
    ///< Valid range 0 to 319.
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t CFG_CAPTURE_FILTER_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DFX_DCO::cfg_capture_filter
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_dfx_dco_cmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_CMODE_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_CMODE_RD_MASK (0x001fffffU)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_CMODE_WR_MASK (0x001fffffU)


///< DCO fine frequency and dco dither override:
///< 00: DCO fine tuning is set by PLL closed loop .
///< 01: DCO fine frequency value is set by o_dcofine and DCO dither value
///< is set by o_dither_value.                         10: Internal SAW
///< tooth pattern on fine integer code (while frac=0). Code increments
///< every fbclk cycle.                         11: Reserved.
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_CMODE_O_DCOFINEDFTSEL_CMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_CMODE_O_DCOFINEDFTSEL_CMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_CMODE_O_DCOFINEDFTSEL_CMODE_BF_MSK (0x00000003)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_CMODE_O_DCOFINEDFTSEL_CMODE_BF_DEF (0x00000000)

///< DCO coarse frequency override signal:                         0: DCO
///< coarse tuning is set by AFC state machine
///< 1: DCO coarse frequency value is set by o_dcocoarse
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_CMODE_O_DCOCOARSE_OVRD_H_CMODE_BF_OFF ( 2)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_CMODE_O_DCOCOARSE_OVRD_H_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_CMODE_O_DCOCOARSE_OVRD_H_CMODE_BF_MSK (0x00000004)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_CMODE_O_DCOCOARSE_OVRD_H_CMODE_BF_DEF (0x00000000)

///< Fine override value (when o_dcofinedftsel = 01).
///< Valid range 0 to 254.
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_CMODE_O_DCOFINE_CMODE_BF_OFF ( 3)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_CMODE_O_DCOFINE_CMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_CMODE_O_DCOFINE_CMODE_BF_MSK (0x000007F8)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_CMODE_O_DCOFINE_CMODE_BF_DEF (0x00000000)

///< AFC override value (when o_dcocoarse_ovrd_h=1).
///< Valid range 0 to 319.
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_CMODE_O_DCOCOARSE_CMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_CMODE_O_DCOCOARSE_CMODE_BF_WID ( 9)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_CMODE_O_DCOCOARSE_CMODE_BF_MSK (0x000FF800)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_CMODE_O_DCOCOARSE_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DFX_DCO::cfg_capture_filter
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_CMODE_CFG_CAP_FILTER_CMODE_BF_OFF (20)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_CMODE_CFG_CAP_FILTER_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_CMODE_CFG_CAP_FILTER_CMODE_BF_MSK (0x00100000)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_CMODE_CFG_CAP_FILTER_CMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_DFX_TDC_CRO_CMODE register description at address offset 0x210
  *
  * Register default value:        0x0000001C
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_dfx_tdc_cro_cmode
  * LCPLL_DFX_TDC_CRO Register
  */

typedef union {
  struct {
    uint32_t CFG_DFT_CNT_RESTART_CMODE : 1;
    ///< Clears min/max measurements and restarts dft counter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_DFT_TIMER_LIMIT_CMODE : 4;
    ///< While cfg_dfx_disable_dft_timer_ovrd_val=0 define the window time
    ///< of the dft measurement. (2^6 +reg [ref_clk cycles])
    ///< AccessType="RW" BitOffset="1" ResetValue="0xE"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_dfx_tdc_cro_cmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_CMODE_DEFAULT (0x0000001cU)
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_CMODE_RD_MASK (0x0000001fU)
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_CMODE_WR_MASK (0x0000001fU)


///< Clears min/max measurements and restarts dft counter
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_CMODE_CFG_DFT_CNT_RESTART_CMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_CMODE_CFG_DFT_CNT_RESTART_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_CMODE_CFG_DFT_CNT_RESTART_CMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_CMODE_CFG_DFT_CNT_RESTART_CMODE_BF_DEF (0x00000000)

///< While cfg_dfx_disable_dft_timer_ovrd_val=0 define the window time
///< of the dft measurement. (2^6 +reg [ref_clk cycles])
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_CMODE_CFG_DFT_TIMER_LIMIT_CMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_CMODE_CFG_DFT_TIMER_LIMIT_CMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_CMODE_CFG_DFT_TIMER_LIMIT_CMODE_BF_MSK (0x0000001E)
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_CMODE_CFG_DFT_TIMER_LIMIT_CMODE_BF_DEF (0x0000001C)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_VISA_CTRL_CMODE register description at address offset 0x214
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_visa_ctrl_cmode
  * LCPLL_VISA_CTRL Register
  */

typedef union {
  struct {
    uint32_t CFG_VISA_CTRL_CMODE : 32;
    ///< VISA control register                         [0] visa enable.
    ///< [3:1] prbs mode (pattern gen)
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_visa_ctrl_cmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_CMODE_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_CMODE_RD_MASK (0xffffffffU)
#define PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_CMODE_WR_MASK (0xffffffffU)


///< VISA control register                         [0] visa enable.
///< [3:1] prbs mode (pattern gen)
#define PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_CMODE_CFG_VISA_CTRL_CMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_CMODE_CFG_VISA_CTRL_CMODE_BF_WID (32)
#define PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_CMODE_CFG_VISA_CTRL_CMODE_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_CMODE_CFG_VISA_CTRL_CMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_VISA_LANE0_SEL_CMODE register description at address offset 0x218
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_visa_lane0_sel_cmode
  * LCPLL_DFX_VISA_LANE0 Register
  */

typedef union {
  struct {
    uint32_t CFG_VISA_LANE0_SEL_CMODE : 32;
    ///< Parallel VISA control for lane 0                         [7:0] byte
    ///< select                         [15:8] clock select
    ///< [16] clock bypass
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_visa_lane0_sel_cmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_CMODE_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_CMODE_RD_MASK (0xffffffffU)
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_CMODE_WR_MASK (0xffffffffU)


///< Parallel VISA control for lane 0                         [7:0] byte
///< select                         [15:8] clock select
///< [16] clock bypass
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_CMODE_CFG_VISA_LANE0_SEL_CMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_CMODE_CFG_VISA_LANE0_SEL_CMODE_BF_WID (32)
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_CMODE_CFG_VISA_LANE0_SEL_CMODE_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_CMODE_CFG_VISA_LANE0_SEL_CMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_VISA_LANE1_SEL_CMODE register description at address offset 0x21c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_visa_lane1_sel_cmode
  * LCPLL_DFX_VISA_LANE1 Register
  */

typedef union {
  struct {
    uint32_t CFG_VISA_LANE1_SEL_CMODE : 32;
    ///< Parallel VISA control for lane 1                         [7:0] byte
    ///< select                         [15:8] clock select
    ///< [16] clock bypass
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_visa_lane1_sel_cmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_CMODE_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_CMODE_RD_MASK (0xffffffffU)
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_CMODE_WR_MASK (0xffffffffU)


///< Parallel VISA control for lane 1                         [7:0] byte
///< select                         [15:8] clock select
///< [16] clock bypass
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_CMODE_CFG_VISA_LANE1_SEL_CMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_CMODE_CFG_VISA_LANE1_SEL_CMODE_BF_WID (32)
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_CMODE_CFG_VISA_LANE1_SEL_CMODE_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_CMODE_CFG_VISA_LANE1_SEL_CMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_CNTR_BIST_SETTINGS_CMODE register description at address offset 0x220
  *
  * Register default value:        0x00008B10
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_cntr_bist_settings_cmode
  * LCPLL_CNTR_BIST_SETTINGS Register
  */

typedef union {
  struct {
    uint32_t O_PLLLOCK_SEL_CMODE : 2;
    ///< Selects mode of lock indicator:                         00: Counter
    ///< based lock                         01: Phase lock sticky high
    ///< 10: Boost done                         11: Counter based lock
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_LOCKTIMER_MAXCNT_CMODE : 14;
    ///< Counter target for counter based lock (o_plllock_sel=1,2) in refclk
    ///< cycles.                         Starts counting after VREG &#38; Kvcc
    ///< calibration completed.                         Used also to check
    ///< if raw phase lock asserted in time.                         Default
    ///< is ~25us for refclk of 156.25MHz.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x22C4"
    uint32_t CFG_PLLLOCK_STATE_SEL_CMODE : 1;
    ///< Selects when to enter &#38;quot;locked state&#38;quot; (which starts
    ///< VREG tracking loop, DTR temp tracking, feed-forward gain adaptive
    ///< loop and min/max capture):                         0: counter based
    ///< lock                         1: Phase lock sticky high
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_cntr_bist_settings_cmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_CMODE_DEFAULT (0x00008b10U)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_CMODE_RD_MASK (0x0001ffffU)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_CMODE_WR_MASK (0x0001ffffU)


///< Selects mode of lock indicator:                         00: Counter
///< based lock                         01: Phase lock sticky high
///< 10: Boost done                         11: Counter based lock
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_CMODE_O_PLLLOCK_SEL_CMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_CMODE_O_PLLLOCK_SEL_CMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_CMODE_O_PLLLOCK_SEL_CMODE_BF_MSK (0x00000003)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_CMODE_O_PLLLOCK_SEL_CMODE_BF_DEF (0x00000000)

///< Counter target for counter based lock (o_plllock_sel=1,2) in refclk
///< cycles.                         Starts counting after VREG &#38; Kvcc
///< calibration completed.                         Used also to check
///< if raw phase lock asserted in time.                         Default
///< is ~25us for refclk of 156.25MHz.
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_CMODE_CFG_LOCKTIMER_MAXCNT_CMODE_BF_OFF ( 2)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_CMODE_CFG_LOCKTIMER_MAXCNT_CMODE_BF_WID (14)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_CMODE_CFG_LOCKTIMER_MAXCNT_CMODE_BF_MSK (0x0000FFFC)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_CMODE_CFG_LOCKTIMER_MAXCNT_CMODE_BF_DEF (0x00008B10)

///< Selects when to enter &#38;quot;locked state&#38;quot; (which starts
///< VREG tracking loop, DTR temp tracking, feed-forward gain adaptive
///< loop and min/max capture):                         0: counter based
///< lock                         1: Phase lock sticky high
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_CMODE_CFG_PLLLOCK_STATE_SEL_CMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_CMODE_CFG_PLLLOCK_STATE_SEL_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_CMODE_CFG_PLLLOCK_STATE_SEL_CMODE_BF_MSK (0x00010000)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_CMODE_CFG_PLLLOCK_STATE_SEL_CMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_CALIB0_CMODE register description at address offset 0x224
  *
  * Register default value:        0x801FDFD1
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_calib0_cmode
  * LCPLL_CALIB0 Register
  */

typedef union {
  struct {
    uint32_t CFG_COARSE_LOOP_GSCALE_MAX_CMODE : 4;
    ///< Initial DTR FLL gain value (2&#39;s complement, 2^gscale).
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t CFG_COARSE_LOOP_GSCALE_MIN_CMODE : 4;
    ///< Final DTR FLL gain value (2&#39;s complement, 2^gscale).
    ///< AccessType="RW" BitOffset="4" ResetValue="0xD"
    uint32_t CFG_COARSE_LOOP_GSCALE_CNT_MAX_CMODE : 5;
    ///< Duration (in refclk cycles) of each gain in DTR FLL.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1F"
    uint32_t CFG_DCOCOARSE_OVRDEN_CMODE : 1;
    ///< DCO DTR FLL override enable. (DTR PLL would still work as usual)
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t CFG_DCOCOARSE_OVRD_CMODE : 8;
    ///< DCO DTR FLL override value when dtr_ovrden=1.
    ///< AccessType="RW" BitOffset="14" ResetValue="0x7F"
    uint32_t CFG_BOOSTGAIN_MAXCNT_CMODE : 10;
    ///< Duration (in fbclk cycles) of each gain in PLL boost, for both DTR
    ///< and fine loops.
    ///< AccessType="RW" BitOffset="22" ResetValue="0x200"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_calib0_cmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_CALIB0_CMODE_DEFAULT (0x801fdfd1U)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_CMODE_RD_MASK (0xffffffffU)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_CMODE_WR_MASK (0xffffffffU)


///< Initial DTR FLL gain value (2&#39;s complement, 2^gscale).
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_CMODE_CFG_COARSE_LOOP_GSCALE_MAX_CMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_CMODE_CFG_COARSE_LOOP_GSCALE_MAX_CMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_CMODE_CFG_COARSE_LOOP_GSCALE_MAX_CMODE_BF_MSK (0x0000000F)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_CMODE_CFG_COARSE_LOOP_GSCALE_MAX_CMODE_BF_DEF (0x00000001)

///< Final DTR FLL gain value (2&#39;s complement, 2^gscale).
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_CMODE_CFG_COARSE_LOOP_GSCALE_MIN_CMODE_BF_OFF ( 4)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_CMODE_CFG_COARSE_LOOP_GSCALE_MIN_CMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_CMODE_CFG_COARSE_LOOP_GSCALE_MIN_CMODE_BF_MSK (0x000000F0)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_CMODE_CFG_COARSE_LOOP_GSCALE_MIN_CMODE_BF_DEF (0x000000D0)

///< Duration (in refclk cycles) of each gain in DTR FLL.
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_CMODE_CFG_COARSE_LOOP_GSCALE_CNT_MAX_CMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_CMODE_CFG_COARSE_LOOP_GSCALE_CNT_MAX_CMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_CMODE_CFG_COARSE_LOOP_GSCALE_CNT_MAX_CMODE_BF_MSK (0x00001F00)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_CMODE_CFG_COARSE_LOOP_GSCALE_CNT_MAX_CMODE_BF_DEF (0x00001F00)

///< DCO DTR FLL override enable. (DTR PLL would still work as usual)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_CMODE_CFG_DCOCOARSE_OVRDEN_CMODE_BF_OFF (13)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_CMODE_CFG_DCOCOARSE_OVRDEN_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_CMODE_CFG_DCOCOARSE_OVRDEN_CMODE_BF_MSK (0x00002000)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_CMODE_CFG_DCOCOARSE_OVRDEN_CMODE_BF_DEF (0x00000000)

///< DCO DTR FLL override value when dtr_ovrden=1.
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_CMODE_CFG_DCOCOARSE_OVRD_CMODE_BF_OFF (14)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_CMODE_CFG_DCOCOARSE_OVRD_CMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_CMODE_CFG_DCOCOARSE_OVRD_CMODE_BF_MSK (0x003FC000)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_CMODE_CFG_DCOCOARSE_OVRD_CMODE_BF_DEF (0x001FC000)

///< Duration (in fbclk cycles) of each gain in PLL boost, for both DTR
///< and fine loops.
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_CMODE_CFG_BOOSTGAIN_MAXCNT_CMODE_BF_OFF (22)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_CMODE_CFG_BOOSTGAIN_MAXCNT_CMODE_BF_WID (10)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_CMODE_CFG_BOOSTGAIN_MAXCNT_CMODE_BF_MSK (0xFFC00000)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_CMODE_CFG_BOOSTGAIN_MAXCNT_CMODE_BF_DEF (0x80000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_CALIB1_CMODE register description at address offset 0x228
  *
  * Register default value:        0x310420C7
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_calib1_cmode
  * SERDES_LANE_ANA_PLL::CALIB1
  */

typedef union {
  struct {
    uint32_t CFG_FILTER_BOOSTFADE_FINE_EN_CMODE : 1;
    ///< When 1, fine PLL boost will gradually lower to zero in steps of 1.
    ///< When 0, fine PLL boost will change from initial boost to zero at once.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t CFG_FINE_PROP_COEFF_BOOST_VAL_CMODE : 4;
    ///< Fine PLL Kp boost. Unsigned value
    ///< AccessType="RW" BitOffset="1" ResetValue="0x3"
    uint32_t CFG_FINE_INT_COEFF_BOOST_VAL_CMODE : 5;
    ///< Fine PLL Ki boost. Unsigned value
    ///< AccessType="RW" BitOffset="5" ResetValue="0x6"
    uint32_t CFG_BOOST_FINE_CONST_ZETA_CMODE : 1;
    ///< Not needed. not validated                         If set to 1, FINE
    ///< Ki boost value will be twice as big as the FINE Kp boost value.
    ///< This will ensure that the zeta (damping factor) will remain constant
    ///< during the boost phase.                         This mode can only
    ///< be used in case the Kp boost is no larger than 3.
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t CFG_FULL_RANGE_AFC_SEL_CMODE : 1;
    ///< Limit AFC code.                         0 - Limit AFC code to max
    ///< value of 319.                         1 - Full range AFC code (0 -
    ///< 511).
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t CFG_SEC_AFC_CALIB_BINARY_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::CALIB1::cfg_sec_afc_calib_binary
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t CFG_FINE_PROP_COEFF_BOOST_STEP_CMODE : 4;
    ///< FINE PLL loop proportional gain boosting decrement step size during
    ///< gradual boost.
    ///< AccessType="RW" BitOffset="13" ResetValue="0x1"
    uint32_t CFG_FINE_INT_COEFF_BOOST_STEP_CMODE : 5;
    ///< FINE PLL loop integral gain boosting decrement step size during gradual
    ///< boost.
    ///< AccessType="RW" BitOffset="17" ResetValue="0x2"
    uint32_t CFG_FINE_PROP_COEFF_CMODE : 4;
    ///< Fine Kp = 2^(-reg)
    ///< AccessType="RW" BitOffset="22" ResetValue="0x4"
    uint32_t CFG_FINE_INT_COEFF_CMODE : 5;
    ///< Fine Ki = 2^(-reg)
    ///< AccessType="RW" BitOffset="26" ResetValue="0xC"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_calib1_cmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_CALIB1_CMODE_DEFAULT (0x310420c7U)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_CMODE_RD_MASK (0x7fffffffU)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_CMODE_WR_MASK (0x7fffffffU)


///< When 1, fine PLL boost will gradually lower to zero in steps of 1.
///< When 0, fine PLL boost will change from initial boost to zero at once.
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_CMODE_CFG_FILTER_BOOSTFADE_FINE_EN_CMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_CMODE_CFG_FILTER_BOOSTFADE_FINE_EN_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_CMODE_CFG_FILTER_BOOSTFADE_FINE_EN_CMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_CMODE_CFG_FILTER_BOOSTFADE_FINE_EN_CMODE_BF_DEF (0x00000001)

///< Fine PLL Kp boost. Unsigned value
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_CMODE_CFG_FINE_PROP_COEFF_BOOST_VAL_CMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_CMODE_CFG_FINE_PROP_COEFF_BOOST_VAL_CMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_CMODE_CFG_FINE_PROP_COEFF_BOOST_VAL_CMODE_BF_MSK (0x0000001E)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_CMODE_CFG_FINE_PROP_COEFF_BOOST_VAL_CMODE_BF_DEF (0x00000006)

///< Fine PLL Ki boost. Unsigned value
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_CMODE_CFG_FINE_INT_COEFF_BOOST_VAL_CMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_CMODE_CFG_FINE_INT_COEFF_BOOST_VAL_CMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_CMODE_CFG_FINE_INT_COEFF_BOOST_VAL_CMODE_BF_MSK (0x000003E0)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_CMODE_CFG_FINE_INT_COEFF_BOOST_VAL_CMODE_BF_DEF (0x000000C0)

///< Not needed. not validated                         If set to 1, FINE
///< Ki boost value will be twice as big as the FINE Kp boost value.
///< This will ensure that the zeta (damping factor) will remain constant
///< during the boost phase.                         This mode can only
///< be used in case the Kp boost is no larger than 3.
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_CMODE_CFG_BOOST_FINE_CONST_ZETA_CMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_CMODE_CFG_BOOST_FINE_CONST_ZETA_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_CMODE_CFG_BOOST_FINE_CONST_ZETA_CMODE_BF_MSK (0x00000400)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_CMODE_CFG_BOOST_FINE_CONST_ZETA_CMODE_BF_DEF (0x00000000)

///< Limit AFC code.                         0 - Limit AFC code to max
///< value of 319.                         1 - Full range AFC code (0 -
///< 511).
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_CMODE_CFG_FULL_RANGE_AFC_SEL_CMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_CMODE_CFG_FULL_RANGE_AFC_SEL_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_CMODE_CFG_FULL_RANGE_AFC_SEL_CMODE_BF_MSK (0x00000800)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_CMODE_CFG_FULL_RANGE_AFC_SEL_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::CALIB1::cfg_sec_afc_calib_binary
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_CMODE_CFG_SEC_AFC_CALIB_BINARY_CMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_CMODE_CFG_SEC_AFC_CALIB_BINARY_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_CMODE_CFG_SEC_AFC_CALIB_BINARY_CMODE_BF_MSK (0x00001000)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_CMODE_CFG_SEC_AFC_CALIB_BINARY_CMODE_BF_DEF (0x00000000)

///< FINE PLL loop proportional gain boosting decrement step size during
///< gradual boost.
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_CMODE_CFG_FINE_PROP_COEFF_BOOST_STEP_CMODE_BF_OFF (13)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_CMODE_CFG_FINE_PROP_COEFF_BOOST_STEP_CMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_CMODE_CFG_FINE_PROP_COEFF_BOOST_STEP_CMODE_BF_MSK (0x0001E000)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_CMODE_CFG_FINE_PROP_COEFF_BOOST_STEP_CMODE_BF_DEF (0x00002000)

///< FINE PLL loop integral gain boosting decrement step size during gradual
///< boost.
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_CMODE_CFG_FINE_INT_COEFF_BOOST_STEP_CMODE_BF_OFF (17)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_CMODE_CFG_FINE_INT_COEFF_BOOST_STEP_CMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_CMODE_CFG_FINE_INT_COEFF_BOOST_STEP_CMODE_BF_MSK (0x003E0000)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_CMODE_CFG_FINE_INT_COEFF_BOOST_STEP_CMODE_BF_DEF (0x00040000)

///< Fine Kp = 2^(-reg)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_CMODE_CFG_FINE_PROP_COEFF_CMODE_BF_OFF (22)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_CMODE_CFG_FINE_PROP_COEFF_CMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_CMODE_CFG_FINE_PROP_COEFF_CMODE_BF_MSK (0x03C00000)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_CMODE_CFG_FINE_PROP_COEFF_CMODE_BF_DEF (0x01000000)

///< Fine Ki = 2^(-reg)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_CMODE_CFG_FINE_INT_COEFF_CMODE_BF_OFF (26)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_CMODE_CFG_FINE_INT_COEFF_CMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_CMODE_CFG_FINE_INT_COEFF_CMODE_BF_MSK (0x7C000000)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_CMODE_CFG_FINE_INT_COEFF_CMODE_BF_DEF (0x30000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_CALIB2_CMODE register description at address offset 0x22c
  *
  * Register default value:        0x00013812
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_calib2_cmode
  * SERDES_LANE_ANA_PLL::CALIB2
  */

typedef union {
  struct {
    uint32_t CFG_TDCBBPD_EN_CMODE : 1;
    ///< Switches TDC into bang-bang mode, based on timer (cfg_tdcbbpd_cnt_limit).
    ///< If enabled, cfg_tdc_ladder_min register must be configured to 1 or
    ///< greater.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_TDCBBPD_CNT_LIMIT_CMODE : 4;
    ///< Determines the number of refclk cycles from lock timer done until
    ///< TDC turns into bang-bang mode: 2 ^ cfg_tdcbbpd_cnt_limit.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x9"
    uint32_t CFG_GAINCAL_UPDATE_RATE_CMODE : 4;
    ///< This field sets the rate of adaptive feed-forward gain.
    ///< Every time the modulated feedback divider ratio is 0.5 or more away
    ///< from the target                          ratio (with frac code), the
    ///< feed-forward gain loop checks the amount of change in
    ///< TDC effective (after feed-forward cancelation) and based on the sign
    ///< of that change                          it would increment/decrement
    ///< the feed-forward gain.                          Then this register
    ///< determines every how many adaptive-ffgain checks the gain will
    ///< actually be updated. This technique could be useful if ratio is around
    ///< 0.5, to avoid                          too frequent gain updates (which
    ///< could cause stability problems in the loop).
    ///< The adaptive ffgain loop will react every 2 ^ cfg_gaincal_update_rate
    ///< gain checks
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t CFG_REFCLK_CYCLES_PER_1US_MAXCNT_CMODE : 8;
    ///< This signal defines the number of refclk cycles that fit in 1us.
    ///< Used in VREG loop in steady-state, such that whenever DAC code is
    ///< updated, we wait some time based on this counter before start sensing
    ///< the comparator.                         Could be used potentially
    ///< in the future for other timers as well.                         Use
    ///< the following formula:                         Frefclk x 1usec
    ///< AccessType="RW" BitOffset="9" ResetValue="0x9C"
    uint32_t CFG_SCOVRDEN_CMODE : 1;
    ///< Super coarse overwrite enable.
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t CFG_SCOVRD_CMODE : 4;
    ///< Super coarse overwrite value.
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_calib2_cmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_CALIB2_CMODE_DEFAULT (0x00013812U)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_CMODE_RD_MASK (0x003fffffU)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_CMODE_WR_MASK (0x003fffffU)


///< Switches TDC into bang-bang mode, based on timer (cfg_tdcbbpd_cnt_limit).
///< If enabled, cfg_tdc_ladder_min register must be configured to 1 or
///< greater.
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_CMODE_CFG_TDCBBPD_EN_CMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_CMODE_CFG_TDCBBPD_EN_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_CMODE_CFG_TDCBBPD_EN_CMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_CMODE_CFG_TDCBBPD_EN_CMODE_BF_DEF (0x00000000)

///< Determines the number of refclk cycles from lock timer done until
///< TDC turns into bang-bang mode: 2 ^ cfg_tdcbbpd_cnt_limit.
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_CMODE_CFG_TDCBBPD_CNT_LIMIT_CMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_CMODE_CFG_TDCBBPD_CNT_LIMIT_CMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_CMODE_CFG_TDCBBPD_CNT_LIMIT_CMODE_BF_MSK (0x0000001E)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_CMODE_CFG_TDCBBPD_CNT_LIMIT_CMODE_BF_DEF (0x00000012)

///< This field sets the rate of adaptive feed-forward gain.
///< Every time the modulated feedback divider ratio is 0.5 or more away
///< from the target                          ratio (with frac code), the
///< feed-forward gain loop checks the amount of change in
///< TDC effective (after feed-forward cancelation) and based on the sign
///< of that change                          it would increment/decrement
///< the feed-forward gain.                          Then this register
///< determines every how many adaptive-ffgain checks the gain will
///< actually be updated. This technique could be useful if ratio is around
///< 0.5, to avoid                          too frequent gain updates (which
///< could cause stability problems in the loop).
///< The adaptive ffgain loop will react every 2 ^ cfg_gaincal_update_rate
///< gain checks
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_CMODE_CFG_GAINCAL_UPDATE_RATE_CMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_CMODE_CFG_GAINCAL_UPDATE_RATE_CMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_CMODE_CFG_GAINCAL_UPDATE_RATE_CMODE_BF_MSK (0x000001E0)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_CMODE_CFG_GAINCAL_UPDATE_RATE_CMODE_BF_DEF (0x00000000)

///< This signal defines the number of refclk cycles that fit in 1us.
///< Used in VREG loop in steady-state, such that whenever DAC code is
///< updated, we wait some time based on this counter before start sensing
///< the comparator.                         Could be used potentially
///< in the future for other timers as well.                         Use
///< the following formula:                         Frefclk x 1usec
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_CMODE_CFG_REFCLK_CYCLES_PER_1US_MAXCNT_CMODE_BF_OFF ( 9)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_CMODE_CFG_REFCLK_CYCLES_PER_1US_MAXCNT_CMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_CMODE_CFG_REFCLK_CYCLES_PER_1US_MAXCNT_CMODE_BF_MSK (0x0001FE00)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_CMODE_CFG_REFCLK_CYCLES_PER_1US_MAXCNT_CMODE_BF_DEF (0x00013800)

///< Super coarse overwrite enable.
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_CMODE_CFG_SCOVRDEN_CMODE_BF_OFF (17)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_CMODE_CFG_SCOVRDEN_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_CMODE_CFG_SCOVRDEN_CMODE_BF_MSK (0x00020000)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_CMODE_CFG_SCOVRDEN_CMODE_BF_DEF (0x00000000)

///< Super coarse overwrite value.
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_CMODE_CFG_SCOVRD_CMODE_BF_OFF (18)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_CMODE_CFG_SCOVRD_CMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_CMODE_CFG_SCOVRD_CMODE_BF_MSK (0x003C0000)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_CMODE_CFG_SCOVRD_CMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_PLL_FSM_CONTROL_CMODE register description at address offset 0x230
  *
  * Register default value:        0x0000020E
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_pll_fsm_control_cmode
  * SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL
  */

typedef union {
  struct {
    uint32_t CFG_DCOSETTLE_MODE_CMODE : 1;
    ///< Settling time exit mode. VREG calibration and all rest of PLL FSM
    ///< would start only after DCO has settle                         &#39;1&#39;:
    ///< fbclk detected                         &#39;0&#39;: timer
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_DCOSETTLE_TIME_CMODE : 4;
    ///< DCO settling time timer (cfg_dcosettle_mode=0).
    ///< refclk cycles = 2^reg
    ///< AccessType="RW" BitOffset="1" ResetValue="0x7"
    uint32_t CFG_SKIP_STDC_CALIB_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_stdc_calib
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t CFG_STAY_STDC_CALIB_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_stdc_calib
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t CFG_SKIP_VTDC_CALIB_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_vtdc_calib
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t CFG_STAY_VTDC_CALIB_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_vtdc_calib
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CFG_SKIP_SC_CALIB_CMODE : 1;
    ///< Skip the sc calib.
    ///< AccessType="RW" BitOffset="9" ResetValue="0x1"
    uint32_t CFG_STAY_SC_CALIB_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_sc_calib
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t CFG_SKIP_FIRST_AFC_CALIB_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_first_afc_calib
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t CFG_STAY_FIRST_AFC_CALIB_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_first_afc_calib
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t CFG_SKIP_DCO_SWING_CALIB_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_dco_swing_calib
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t CFG_STAY_DCO_SWING_CALIB_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_dco_swing_calib
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t CFG_SKIP_KVCC_CALIB_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_kvcc_calib
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t CFG_STAY_KVCC_CALIB_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_kvcc_calib
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t CFG_SKIP_SECOND_AFC_CALIB_CMODE : 1;
    ///< If set to 1, the PLL will only run one afc calibration before kvcc
    ///< calibration                         If set to 0, the PLL will run
    ///< the AFC calibration for the second time after kvcc calibration ends.
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t CFG_STAY_SECOND_AFC_CALIB_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_second_afc_calib
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t CFG_SKIP_FINE_FLL_CALIB_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_fine_fll_calib
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t CFG_STAY_FINE_FLL_CALIB_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_fine_fll_calib
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_pll_fsm_ctrl_cmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_DEFAULT (0x0000020eU)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_RD_MASK (0x001fffffU)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_WR_MASK (0x001fffffU)


///< Settling time exit mode. VREG calibration and all rest of PLL FSM
///< would start only after DCO has settle                         &#39;1&#39;:
///< fbclk detected                         &#39;0&#39;: timer
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_DCOSETTLE_MODE_CMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_DCOSETTLE_MODE_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_DCOSETTLE_MODE_CMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_DCOSETTLE_MODE_CMODE_BF_DEF (0x00000000)

///< DCO settling time timer (cfg_dcosettle_mode=0).
///< refclk cycles = 2^reg
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_DCOSETTLE_TIME_CMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_DCOSETTLE_TIME_CMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_DCOSETTLE_TIME_CMODE_BF_MSK (0x0000001E)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_DCOSETTLE_TIME_CMODE_BF_DEF (0x0000000E)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_stdc_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_SKIP_STDC_CALIB_CMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_SKIP_STDC_CALIB_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_SKIP_STDC_CALIB_CMODE_BF_MSK (0x00000020)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_SKIP_STDC_CALIB_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_stdc_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_STAY_STDC_CALIB_CMODE_BF_OFF ( 6)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_STAY_STDC_CALIB_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_STAY_STDC_CALIB_CMODE_BF_MSK (0x00000040)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_STAY_STDC_CALIB_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_vtdc_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_SKIP_VTDC_CALIB_CMODE_BF_OFF ( 7)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_SKIP_VTDC_CALIB_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_SKIP_VTDC_CALIB_CMODE_BF_MSK (0x00000080)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_SKIP_VTDC_CALIB_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_vtdc_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_STAY_VTDC_CALIB_CMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_STAY_VTDC_CALIB_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_STAY_VTDC_CALIB_CMODE_BF_MSK (0x00000100)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_STAY_VTDC_CALIB_CMODE_BF_DEF (0x00000000)

///< Skip the sc calib.
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_SKIP_SC_CALIB_CMODE_BF_OFF ( 9)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_SKIP_SC_CALIB_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_SKIP_SC_CALIB_CMODE_BF_MSK (0x00000200)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_SKIP_SC_CALIB_CMODE_BF_DEF (0x00000200)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_sc_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_STAY_SC_CALIB_CMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_STAY_SC_CALIB_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_STAY_SC_CALIB_CMODE_BF_MSK (0x00000400)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_STAY_SC_CALIB_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_first_afc_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_SKIP_FIRST_AFC_CALIB_CMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_SKIP_FIRST_AFC_CALIB_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_SKIP_FIRST_AFC_CALIB_CMODE_BF_MSK (0x00000800)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_SKIP_FIRST_AFC_CALIB_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_first_afc_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_STAY_FIRST_AFC_CALIB_CMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_STAY_FIRST_AFC_CALIB_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_STAY_FIRST_AFC_CALIB_CMODE_BF_MSK (0x00001000)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_STAY_FIRST_AFC_CALIB_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_dco_swing_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_SKIP_DCO_SWING_CALIB_CMODE_BF_OFF (13)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_SKIP_DCO_SWING_CALIB_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_SKIP_DCO_SWING_CALIB_CMODE_BF_MSK (0x00002000)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_SKIP_DCO_SWING_CALIB_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_dco_swing_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_STAY_DCO_SWING_CALIB_CMODE_BF_OFF (14)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_STAY_DCO_SWING_CALIB_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_STAY_DCO_SWING_CALIB_CMODE_BF_MSK (0x00004000)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_STAY_DCO_SWING_CALIB_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_kvcc_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_SKIP_KVCC_CALIB_CMODE_BF_OFF (15)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_SKIP_KVCC_CALIB_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_SKIP_KVCC_CALIB_CMODE_BF_MSK (0x00008000)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_SKIP_KVCC_CALIB_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_kvcc_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_STAY_KVCC_CALIB_CMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_STAY_KVCC_CALIB_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_STAY_KVCC_CALIB_CMODE_BF_MSK (0x00010000)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_STAY_KVCC_CALIB_CMODE_BF_DEF (0x00000000)

///< If set to 1, the PLL will only run one afc calibration before kvcc
///< calibration                         If set to 0, the PLL will run
///< the AFC calibration for the second time after kvcc calibration ends.
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_SKIP_SECOND_AFC_CALIB_CMODE_BF_OFF (17)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_SKIP_SECOND_AFC_CALIB_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_SKIP_SECOND_AFC_CALIB_CMODE_BF_MSK (0x00020000)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_SKIP_SECOND_AFC_CALIB_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_second_afc_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_STAY_SECOND_AFC_CALIB_CMODE_BF_OFF (18)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_STAY_SECOND_AFC_CALIB_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_STAY_SECOND_AFC_CALIB_CMODE_BF_MSK (0x00040000)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_STAY_SECOND_AFC_CALIB_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_fine_fll_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_SKIP_FINE_FLL_CALIB_CMODE_BF_OFF (19)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_SKIP_FINE_FLL_CALIB_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_SKIP_FINE_FLL_CALIB_CMODE_BF_MSK (0x00080000)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_SKIP_FINE_FLL_CALIB_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_fine_fll_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_STAY_FINE_FLL_CALIB_CMODE_BF_OFF (20)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_STAY_FINE_FLL_CALIB_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_STAY_FINE_FLL_CALIB_CMODE_BF_MSK (0x00100000)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_CFG_STAY_FINE_FLL_CALIB_CMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_TEMP_TRACKING_CMODE register description at address offset 0x234
  *
  * Register default value:        0x00000027
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_temp_tracking_cmode
  * SERDES_LANE_ANA_PLL::TEMP_TRACKING
  */

typedef union {
  struct {
    uint32_t CFG_TEMP_TRACK_EN_CMODE : 1;
    ///< Enable signal for the FINE and DTR temperature tracking feature.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t CFG_FINE2DTR_RATIO_CMODE : 6;
    ///< Sets the ratio between DTR cap and fine cap. Required for DTR temp
    ///< tracking.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x13"
    uint32_t CFG_SSC_TRACK_EN_CMODE : 1;
    ///< Set this to &#39;1&#39; for SSC&#39;ed refclk to enable fast cap-swap
    ///< during boost mode.
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_temp_tracking_cmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_CMODE_DEFAULT (0x00000027U)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_CMODE_RD_MASK (0x000000ffU)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_CMODE_WR_MASK (0x000000ffU)


///< Enable signal for the FINE and DTR temperature tracking feature.
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_CMODE_CFG_TEMP_TRACK_EN_CMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_CMODE_CFG_TEMP_TRACK_EN_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_CMODE_CFG_TEMP_TRACK_EN_CMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_CMODE_CFG_TEMP_TRACK_EN_CMODE_BF_DEF (0x00000001)

///< Sets the ratio between DTR cap and fine cap. Required for DTR temp
///< tracking.
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_CMODE_CFG_FINE2DTR_RATIO_CMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_CMODE_CFG_FINE2DTR_RATIO_CMODE_BF_WID ( 6)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_CMODE_CFG_FINE2DTR_RATIO_CMODE_BF_MSK (0x0000007E)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_CMODE_CFG_FINE2DTR_RATIO_CMODE_BF_DEF (0x00000026)

///< Set this to &#39;1&#39; for SSC&#39;ed refclk to enable fast cap-swap
///< during boost mode.
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_CMODE_CFG_SSC_TRACK_EN_CMODE_BF_OFF ( 7)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_CMODE_CFG_SSC_TRACK_EN_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_CMODE_CFG_SSC_TRACK_EN_CMODE_BF_MSK (0x00000080)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_CMODE_CFG_SSC_TRACK_EN_CMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_ANA_CONTROL1_CMODE register description at address offset 0x238
  *
  * Register default value:        0x00000452
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_ana_control1_cmode
  * LCPLL_ANA_CONTROL Register
  */

typedef union {
  struct {
    uint32_t CFG_PLL_BYPASS_CMODE : 1;
    ///< When 1, the following output clocks will drive out the input refclk
    ///< (after prediv). Relevant to common PLL only.
    ///< 100MHz refclk                         156.25MHz refclk
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_SDDIV_EN_CMODE : 1;
    ///< Ungates dco/2 clock that goes into filter&#39;s SD post divider.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x1"
    uint32_t CFG_SDDIV_RATIO_CMODE : 3;
    ///< Sets Fine and DTR SD clock division ratio, from 1 to 5. Input clock
    ///< is dco/2 so possible ratios are 2,4,6,8,10.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x4"
    uint32_t CFG_SD2F0_CLK_SEL_CMODE : 1;
    ///< Sets DTR SD clock division ratio:                         0 - fine
    ///< SD clock                         1 - fine SD clock further divided
    ///< by 2
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t CFG_PREDIV_RATIO_CMODE : 4;
    ///< Refclk pre-divider ratio, from 1 to 5, relevant only to lane PLL where
    ///< refclksel pin is tied to 0.
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t CFG_REFCLK4LANEDIV_EN_CMODE : 1;
    ///< Ungates dco/2 clock that goes into refclk156div post divider.
    ///< 1 - common PLL                         0 - lane PLL
    ///< AccessType="RW" BitOffset="10" ResetValue="0x1"
    uint32_t CFG_FBDIV_ENB_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL1::cfg_fbdiv_enb
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t CFG_DCODIV2_EN_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL1::cfg_dcodiv2_en
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
    uint32_t CFG_HSMON0_SEL_CMODE : 4;
    ///< Select signal for obsmux0:                         0: vss
    ///< 1: iclk_int_refclk                         2: o_fbclk2obs_clk
    ///< 3: iclk_dco_divby2                         4: iclk_dco_divby5
    ///< 5: a2f_lv_0p9_2obs                         6: vss
    ///< 7: cbdiv56_lanediv32_clk                         8: clk_to_pcs40_clk
    ///< 9: clk_to_pcs33_34_clk                         A: o_sd_dtr_clk
    ///< B: o_sd_fine_clk                         C: ock_a2f_lv_ldo
    ///< D: otdc_calib_clk                         E: i_plllock
    ///< F: i_visa8to1_2obs
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t CFG_HSMON0_40INV_EN_CMODE : 1;
    ///< When 0, selected signal on hsmon0 is further delayed by 40 inverters.
    ///< This is to analyze thermal noise and supply noise jitter
    ///< Note that lately we found that this mode is set when this reg is set
    ///< to 0 (rather than 1 as previously thought)
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t CFG_HSMON1_SEL_CMODE : 4;
    ///< Select signal for obsmux1. Same signals as in obsmux0.
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t CFG_HSMON1_40INV_EN_CMODE : 1;
    ///< When 0, selected signal on hsmon1 is further delayed by 40 inverters.
    ///< This is to analyze thermal noise and supply noise jitter
    ///< Note that lately we found that this mode is set when this reg is set
    ///< to 0 (rather than 1 as previously thought)
    ///< AccessType="RW" BitOffset="25" ResetValue="0x0"
    uint32_t CFG_CLK2POSTDIV_DIV2_SEL_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL1::cfg_clk2postdiv_div2_sel
    ///< AccessType="RW" BitOffset="26" ResetValue="0x0"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="27" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_ana_ctrl1_cmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_DEFAULT (0x00000452U)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_RD_MASK (0x07ff1fffU)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_WR_MASK (0x07ff1fffU)


///< When 1, the following output clocks will drive out the input refclk
///< (after prediv). Relevant to common PLL only.
///< 100MHz refclk                         156.25MHz refclk
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_CFG_PLL_BYP_CMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_CFG_PLL_BYP_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_CFG_PLL_BYP_CMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_CFG_PLL_BYP_CMODE_BF_DEF (0x00000000)

///< Ungates dco/2 clock that goes into filter&#39;s SD post divider.
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_CFG_SDDIV_EN_CMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_CFG_SDDIV_EN_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_CFG_SDDIV_EN_CMODE_BF_MSK (0x00000002)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_CFG_SDDIV_EN_CMODE_BF_DEF (0x00000002)

///< Sets Fine and DTR SD clock division ratio, from 1 to 5. Input clock
///< is dco/2 so possible ratios are 2,4,6,8,10.
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_CFG_SDDIV_RATIO_CMODE_BF_OFF ( 2)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_CFG_SDDIV_RATIO_CMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_CFG_SDDIV_RATIO_CMODE_BF_MSK (0x0000001C)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_CFG_SDDIV_RATIO_CMODE_BF_DEF (0x00000010)

///< Sets DTR SD clock division ratio:                         0 - fine
///< SD clock                         1 - fine SD clock further divided
///< by 2
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_CFG_SD2F0_CLK_SEL_CMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_CFG_SD2F0_CLK_SEL_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_CFG_SD2F0_CLK_SEL_CMODE_BF_MSK (0x00000020)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_CFG_SD2F0_CLK_SEL_CMODE_BF_DEF (0x00000000)

///< Refclk pre-divider ratio, from 1 to 5, relevant only to lane PLL where
///< refclksel pin is tied to 0.
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_CFG_PREDIV_RATIO_CMODE_BF_OFF ( 6)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_CFG_PREDIV_RATIO_CMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_CFG_PREDIV_RATIO_CMODE_BF_MSK (0x000003C0)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_CFG_PREDIV_RATIO_CMODE_BF_DEF (0x00000040)

///< Ungates dco/2 clock that goes into refclk156div post divider.
///< 1 - common PLL                         0 - lane PLL
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_CFG_REFCLK4LANEDIV_EN_CMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_CFG_REFCLK4LANEDIV_EN_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_CFG_REFCLK4LANEDIV_EN_CMODE_BF_MSK (0x00000400)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_CFG_REFCLK4LANEDIV_EN_CMODE_BF_DEF (0x00000400)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL1::cfg_fbdiv_enb
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_CFG_FBDIV_ENB_CMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_CFG_FBDIV_ENB_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_CFG_FBDIV_ENB_CMODE_BF_MSK (0x00000800)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_CFG_FBDIV_ENB_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL1::cfg_dcodiv2_en
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_CFG_DCODIV2_EN_CMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_CFG_DCODIV2_EN_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_CFG_DCODIV2_EN_CMODE_BF_MSK (0x00001000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_CFG_DCODIV2_EN_CMODE_BF_DEF (0x00000000)

///< Select signal for obsmux0:                         0: vss
///< 1: iclk_int_refclk                         2: o_fbclk2obs_clk
///< 3: iclk_dco_divby2                         4: iclk_dco_divby5
///< 5: a2f_lv_0p9_2obs                         6: vss
///< 7: cbdiv56_lanediv32_clk                         8: clk_to_pcs40_clk
///< 9: clk_to_pcs33_34_clk                         A: o_sd_dtr_clk
///< B: o_sd_fine_clk                         C: ock_a2f_lv_ldo
///< D: otdc_calib_clk                         E: i_plllock
///< F: i_visa8to1_2obs
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_CFG_HSMON0_SEL_CMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_CFG_HSMON0_SEL_CMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_CFG_HSMON0_SEL_CMODE_BF_MSK (0x000F0000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_CFG_HSMON0_SEL_CMODE_BF_DEF (0x00000000)

///< When 0, selected signal on hsmon0 is further delayed by 40 inverters.
///< This is to analyze thermal noise and supply noise jitter
///< Note that lately we found that this mode is set when this reg is set
///< to 0 (rather than 1 as previously thought)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_CFG_HSMON0_40INV_EN_CMODE_BF_OFF (20)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_CFG_HSMON0_40INV_EN_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_CFG_HSMON0_40INV_EN_CMODE_BF_MSK (0x00100000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_CFG_HSMON0_40INV_EN_CMODE_BF_DEF (0x00000000)

///< Select signal for obsmux1. Same signals as in obsmux0.
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_CFG_HSMON1_SEL_CMODE_BF_OFF (21)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_CFG_HSMON1_SEL_CMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_CFG_HSMON1_SEL_CMODE_BF_MSK (0x01E00000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_CFG_HSMON1_SEL_CMODE_BF_DEF (0x00000000)

///< When 0, selected signal on hsmon1 is further delayed by 40 inverters.
///< This is to analyze thermal noise and supply noise jitter
///< Note that lately we found that this mode is set when this reg is set
///< to 0 (rather than 1 as previously thought)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_CFG_HSMON1_40INV_EN_CMODE_BF_OFF (25)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_CFG_HSMON1_40INV_EN_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_CFG_HSMON1_40INV_EN_CMODE_BF_MSK (0x02000000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_CFG_HSMON1_40INV_EN_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL1::cfg_clk2postdiv_div2_sel
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_CFG_CLK2POSTDIV_DIV2_SEL_CMODE_BF_OFF (26)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_CFG_CLK2POSTDIV_DIV2_SEL_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_CFG_CLK2POSTDIV_DIV2_SEL_CMODE_BF_MSK (0x04000000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_CFG_CLK2POSTDIV_DIV2_SEL_CMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_ANA_CONTROL2_CMODE register description at address offset 0x23c
  *
  * Register default value:        0x000080A0
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_ana_control2_cmode
  * SERDES_LANE_ANA_PLL::ANA_CONTROL2
  */

typedef union {
  struct {
    uint32_t CFG_REFCLK_SEL_CMODE : 1;
    ///< Relevant only if id_pll_refclksel[2:0] (on PLL interface) is set to
    ///< 3&#39;b0.                         Selects the refclk source for the
    ///< PLL:                         3&#39;h0 : vss
    ///< 3&#39;h1 : ref_clk_1                         3&#39;h2 : ref_clk_2
    ///< 3&#39;h3 : ref_clk_3                         3&#39;h4 : ref_clk_4
    ///< 3&#39;h5 : ref_clk_5                         3&#39;h6 : vss
    ///< 3&#39;h7 : vss
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_REFCLK4LANE_DIVRATIO_CMODE : 10;
    ///< Division ratio for refclk156 post divider (input clock is dco).
    ///< AccessType="RW" BitOffset="1" ResetValue="0x50"
    uint32_t CFG_A2F_CLKREG_EN_CMODE : 1;
    ///< Enables A2F.                         A2F are used to measure internal
    ///< supply noise.
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t CFG_A2F_CLKUNREG_EN_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL2::cfg_a2f_clkunreg_en
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t CFG_A2F_LDO_DCO_EN_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL2::cfg_a2f_ldo_dco_en
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t CFG_BTI_EN_CMODE : 1;
    ///< BTI clock gate signal. By default, whenever PLL is off, BTI clock
    ///< drives DCO clock distribution to prevent assymetric Aging. Setting
    ///< this register to &#39;1&#39; will gate BTI clock.
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t CFG_DCO_ACBUF2TX_EN_CMODE : 1;
    ///< Used as LDO enable.                         Gated by pll enable.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x1"
    uint32_t CFG_HSCNTR_HSCLK_SEL_OVR_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL2::cfg_hscntr_hsclk_sel_ovr
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t CFG_HSCNTR_HSCLK_SEL_OVR_VAL_CMODE : 3;
    ///< High speed counter (hscnter) input.                         &#39;0&#39;
    ///< - input from DCO/4 (default)                         &#39;1&#39; -
    ///< A2F_ldo clock is routed to high speed counter, allowing measurement
    ///< of A2F frequency in HVM (like in IDV)                         &#39;2&#39;
    ///< - A2F_lv clock is routed to high speed counter, allowing measurement
    ///< of A2F frequency in HVM (like in IDV)                         &#39;3&#39;
    ///< - vss
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t CFG_PLL_REFCLK_HSMODE_SEL_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL2::cfg_pll_refclk_hsmode_sel
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_ana_ctrl2_cmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_CMODE_DEFAULT (0x000080a0U)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_CMODE_RD_MASK (0x001fffffU)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_CMODE_WR_MASK (0x001fffffU)


///< Relevant only if id_pll_refclksel[2:0] (on PLL interface) is set to
///< 3&#39;b0.                         Selects the refclk source for the
///< PLL:                         3&#39;h0 : vss
///< 3&#39;h1 : ref_clk_1                         3&#39;h2 : ref_clk_2
///< 3&#39;h3 : ref_clk_3                         3&#39;h4 : ref_clk_4
///< 3&#39;h5 : ref_clk_5                         3&#39;h6 : vss
///< 3&#39;h7 : vss
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_CMODE_CFG_REFCLK_SEL_CMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_CMODE_CFG_REFCLK_SEL_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_CMODE_CFG_REFCLK_SEL_CMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_CMODE_CFG_REFCLK_SEL_CMODE_BF_DEF (0x00000000)

///< Division ratio for refclk156 post divider (input clock is dco).
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_CMODE_CFG_REFCLK4LANE_DIVRATIO_CMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_CMODE_CFG_REFCLK4LANE_DIVRATIO_CMODE_BF_WID (10)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_CMODE_CFG_REFCLK4LANE_DIVRATIO_CMODE_BF_MSK (0x000007FE)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_CMODE_CFG_REFCLK4LANE_DIVRATIO_CMODE_BF_DEF (0x000000A0)

///< Enables A2F.                         A2F are used to measure internal
///< supply noise.
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_CMODE_CFG_A2F_CLKREG_EN_CMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_CMODE_CFG_A2F_CLKREG_EN_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_CMODE_CFG_A2F_CLKREG_EN_CMODE_BF_MSK (0x00000800)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_CMODE_CFG_A2F_CLKREG_EN_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL2::cfg_a2f_clkunreg_en
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_CMODE_CFG_A2F_CLKUNREG_EN_CMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_CMODE_CFG_A2F_CLKUNREG_EN_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_CMODE_CFG_A2F_CLKUNREG_EN_CMODE_BF_MSK (0x00001000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_CMODE_CFG_A2F_CLKUNREG_EN_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL2::cfg_a2f_ldo_dco_en
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_CMODE_CFG_A2F_LDO_DCO_EN_CMODE_BF_OFF (13)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_CMODE_CFG_A2F_LDO_DCO_EN_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_CMODE_CFG_A2F_LDO_DCO_EN_CMODE_BF_MSK (0x00002000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_CMODE_CFG_A2F_LDO_DCO_EN_CMODE_BF_DEF (0x00000000)

///< BTI clock gate signal. By default, whenever PLL is off, BTI clock
///< drives DCO clock distribution to prevent assymetric Aging. Setting
///< this register to &#39;1&#39; will gate BTI clock.
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_CMODE_CFG_BTI_EN_CMODE_BF_OFF (14)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_CMODE_CFG_BTI_EN_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_CMODE_CFG_BTI_EN_CMODE_BF_MSK (0x00004000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_CMODE_CFG_BTI_EN_CMODE_BF_DEF (0x00000000)

///< Used as LDO enable.                         Gated by pll enable.
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_CMODE_CFG_DCO_ACBUF2TX_EN_CMODE_BF_OFF (15)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_CMODE_CFG_DCO_ACBUF2TX_EN_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_CMODE_CFG_DCO_ACBUF2TX_EN_CMODE_BF_MSK (0x00008000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_CMODE_CFG_DCO_ACBUF2TX_EN_CMODE_BF_DEF (0x00008000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL2::cfg_hscntr_hsclk_sel_ovr
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_CMODE_CFG_HSCNTR_HSCLK_SEL_OVR_CMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_CMODE_CFG_HSCNTR_HSCLK_SEL_OVR_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_CMODE_CFG_HSCNTR_HSCLK_SEL_OVR_CMODE_BF_MSK (0x00010000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_CMODE_CFG_HSCNTR_HSCLK_SEL_OVR_CMODE_BF_DEF (0x00000000)

///< High speed counter (hscnter) input.                         &#39;0&#39;
///< - input from DCO/4 (default)                         &#39;1&#39; -
///< A2F_ldo clock is routed to high speed counter, allowing measurement
///< of A2F frequency in HVM (like in IDV)                         &#39;2&#39;
///< - A2F_lv clock is routed to high speed counter, allowing measurement
///< of A2F frequency in HVM (like in IDV)                         &#39;3&#39;
///< - vss
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_CMODE_CFG_HSCNTR_HSCLK_SEL_OVR_VAL_CMODE_BF_OFF (17)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_CMODE_CFG_HSCNTR_HSCLK_SEL_OVR_VAL_CMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_CMODE_CFG_HSCNTR_HSCLK_SEL_OVR_VAL_CMODE_BF_MSK (0x000E0000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_CMODE_CFG_HSCNTR_HSCLK_SEL_OVR_VAL_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL2::cfg_pll_refclk_hsmode_sel
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_CMODE_CFG_PLL_REFCLK_HSMODE_SEL_CMODE_BF_OFF (20)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_CMODE_CFG_PLL_REFCLK_HSMODE_SEL_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_CMODE_CFG_PLL_REFCLK_HSMODE_SEL_CMODE_BF_MSK (0x00100000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_CMODE_CFG_PLL_REFCLK_HSMODE_SEL_CMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_ANA_CONTROL3_CMODE register description at address offset 0x240
  *
  * Register default value:        0x00A00001
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_ana_control3_cmode
  * SERDES_LANE_ANA_PLL::ANA_CONTROL3
  */

typedef union {
  struct {
    uint32_t CFG_PKSEN_EN_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_en
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t CFG_PKSEN_COMP_CMODE : 4;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_comp
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t CFG_PKSEN_COMP_EN_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_comp_en
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t CFG_PKSEN_COMP_INN_SEL_CMODE : 2;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_comp_inn_sel
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t CFG_PKSEN_COMP_INP_SEL_CMODE : 2;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_comp_inp_sel
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CFG_PKSEN_COMP_VREF_VAL_CMODE : 6;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_comp_vref_val
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t CFG_PKSEN_VREF_SEL_CMODE : 6;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_vref_sel
    ///< AccessType="RW" BitOffset="16" ResetValue="0x20"
    uint32_t CFG_LDO_PKSEN_BYP_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_ldo_pksen_byp
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t CFG_PKSEN_RES_BYPB_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_res_bypb
    ///< AccessType="RW" BitOffset="23" ResetValue="0x1"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_ana_ctrl3_cmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_CMODE_DEFAULT (0x00a00001U)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_CMODE_RD_MASK (0x00ffffffU)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_CMODE_WR_MASK (0x00ffffffU)


///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_en
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_CMODE_CFG_PKSEN_EN_CMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_CMODE_CFG_PKSEN_EN_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_CMODE_CFG_PKSEN_EN_CMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_CMODE_CFG_PKSEN_EN_CMODE_BF_DEF (0x00000001)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_comp
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_CMODE_CFG_PKSEN_COMP_CMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_CMODE_CFG_PKSEN_COMP_CMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_CMODE_CFG_PKSEN_COMP_CMODE_BF_MSK (0x0000001E)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_CMODE_CFG_PKSEN_COMP_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_comp_en
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_CMODE_CFG_PKSEN_COMP_EN_CMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_CMODE_CFG_PKSEN_COMP_EN_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_CMODE_CFG_PKSEN_COMP_EN_CMODE_BF_MSK (0x00000020)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_CMODE_CFG_PKSEN_COMP_EN_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_comp_inn_sel
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_CMODE_CFG_PKSEN_COMP_INN_SEL_CMODE_BF_OFF ( 6)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_CMODE_CFG_PKSEN_COMP_INN_SEL_CMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_CMODE_CFG_PKSEN_COMP_INN_SEL_CMODE_BF_MSK (0x000000C0)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_CMODE_CFG_PKSEN_COMP_INN_SEL_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_comp_inp_sel
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_CMODE_CFG_PKSEN_COMP_INP_SEL_CMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_CMODE_CFG_PKSEN_COMP_INP_SEL_CMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_CMODE_CFG_PKSEN_COMP_INP_SEL_CMODE_BF_MSK (0x00000300)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_CMODE_CFG_PKSEN_COMP_INP_SEL_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_comp_vref_val
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_CMODE_CFG_PKSEN_COMP_VREF_VAL_CMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_CMODE_CFG_PKSEN_COMP_VREF_VAL_CMODE_BF_WID ( 6)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_CMODE_CFG_PKSEN_COMP_VREF_VAL_CMODE_BF_MSK (0x0000FC00)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_CMODE_CFG_PKSEN_COMP_VREF_VAL_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_vref_sel
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_CMODE_CFG_PKSEN_VREF_SEL_CMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_CMODE_CFG_PKSEN_VREF_SEL_CMODE_BF_WID ( 6)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_CMODE_CFG_PKSEN_VREF_SEL_CMODE_BF_MSK (0x003F0000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_CMODE_CFG_PKSEN_VREF_SEL_CMODE_BF_DEF (0x00200000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_ldo_pksen_byp
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_CMODE_CFG_LDO_PKSEN_BYP_CMODE_BF_OFF (22)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_CMODE_CFG_LDO_PKSEN_BYP_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_CMODE_CFG_LDO_PKSEN_BYP_CMODE_BF_MSK (0x00400000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_CMODE_CFG_LDO_PKSEN_BYP_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_res_bypb
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_CMODE_CFG_PKSEN_RES_BYPB_CMODE_BF_OFF (23)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_CMODE_CFG_PKSEN_RES_BYPB_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_CMODE_CFG_PKSEN_RES_BYPB_CMODE_BF_MSK (0x00800000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_CMODE_CFG_PKSEN_RES_BYPB_CMODE_BF_DEF (0x00800000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_DFX0_CMODE register description at address offset 0x244
  *
  * Register default value:        0x00040000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_dfx0_cmode
  * SERDES_LANE_ANA_PLL::DFX0
  */

typedef union {
  struct {
    uint32_t CFG_FINE_MODULATION_EN_CMODE : 1;
    ///< Modulates fine code by adding an offset that toggles between values
    ///< defined by cfg_fine_modulation_sel.                          cfg_modulation_toggle_delay
    ///< sets modulation frequency.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_FINE_MODULATION_SEL_CMODE : 1;
    ///< Sets magnitude of fine modulation:                          0 - fine
    ///< offset toggles between 0 and +1.                         1 - fine
    ///< offset toggles between 0 and cfg_fine2dtr_ratio.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t CFG_TDCPE_MODULATION_EN_CMODE : 1;
    ///< Modulates TDC PE by adding an offset that toggles between 0 and 1.
    ///< cfg_modulation_toggle_delay sets modulation frequency.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t CFG_LDO_MODULATION_EN_CMODE : 1;
    ///< Modulates LDO by adding an offset that toggles between 0 and 1.
    ///< cfg_modulation_toggle_delay sets modulation frequency.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t CFG_MODULATION_TOGGLE_DELAY_CMODE : 4;
    ///< Sets modulation frequency.                         Code would toggle
    ///< every 2^reg refclk cycles.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t CFG_VISA8TO1_2OBS_SEL_CMODE : 3;
    ///< Selects which bit in VISA lane0 would be routed to high speed monitor
    ///< mux.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CFG_DFX_FEEDFWRD_OFFSET_OVR_EN_CMODE : 1;
    ///< Enables overriding feed forward offset. Useful in integer mode to
    ///< shift fbclk phase.
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t CFG_DFX_FEEDFWRDPHASE_OVR_VAL_CMODE : 5;
    ///< Sets feed forward offset override value. Useful in integer mode to
    ///< shift fbclk phase.                         The 9 integer bits, 3 fractional
    ///< bits.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t CFG_DFX_DISABLE_DFT_TIMER_OVRD_VAL_CMODE : 1;
    ///< When cfg_dfx_disable_dft_timer_ovrd_en=1, this bit will set DFT timer
    ///< mode.                          When 0, DFT measurements always run.
    ///< When 1, DFT measurements always off.                          No need
    ///< to change this reg. Just keep it at 0. (could have been removed)
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t CFG_DFX_DISABLE_DFT_TIMER_OVRD_EN_CMODE : 1;
    ///< When 0, DFT measurements would stop when minmax timer overflows.
    ///< When 1, DFT measurements run based on cfg_dfx_disable_dft_timer_ovrd_val.
    ///< AccessType="RW" BitOffset="18" ResetValue="0x1"
    uint32_t CFG_DPSO_BYPASS_MODE_CMODE : 1;
    ///< When 0, DPSO bus is sampled by fbclk falling edge before sent to TX
    ///< PISO                         When 1, the sample is bypassed. This
    ///< is needed when monitoring VISA signals that are not of fbclk nor on
    ///< refclk domain.
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_dfx0_cmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_DFX0_CMODE_DEFAULT (0x00040000U)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_CMODE_RD_MASK (0x000fffffU)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_CMODE_WR_MASK (0x000fffffU)


///< Modulates fine code by adding an offset that toggles between values
///< defined by cfg_fine_modulation_sel.                          cfg_modulation_toggle_delay
///< sets modulation frequency.
#define PMA_TXPLLCFGLOADER_MSG_DFX0_CMODE_CFG_FINE_MOD_EN_CMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_CMODE_CFG_FINE_MOD_EN_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_CMODE_CFG_FINE_MOD_EN_CMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_CMODE_CFG_FINE_MOD_EN_CMODE_BF_DEF (0x00000000)

///< Sets magnitude of fine modulation:                          0 - fine
///< offset toggles between 0 and +1.                         1 - fine
///< offset toggles between 0 and cfg_fine2dtr_ratio.
#define PMA_TXPLLCFGLOADER_MSG_DFX0_CMODE_CFG_FINE_MOD_SEL_CMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_CMODE_CFG_FINE_MOD_SEL_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_CMODE_CFG_FINE_MOD_SEL_CMODE_BF_MSK (0x00000002)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_CMODE_CFG_FINE_MOD_SEL_CMODE_BF_DEF (0x00000000)

///< Modulates TDC PE by adding an offset that toggles between 0 and 1.
///< cfg_modulation_toggle_delay sets modulation frequency.
#define PMA_TXPLLCFGLOADER_MSG_DFX0_CMODE_CFG_TDCPE_MOD_EN_CMODE_BF_OFF ( 2)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_CMODE_CFG_TDCPE_MOD_EN_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_CMODE_CFG_TDCPE_MOD_EN_CMODE_BF_MSK (0x00000004)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_CMODE_CFG_TDCPE_MOD_EN_CMODE_BF_DEF (0x00000000)

///< Modulates LDO by adding an offset that toggles between 0 and 1.
///< cfg_modulation_toggle_delay sets modulation frequency.
#define PMA_TXPLLCFGLOADER_MSG_DFX0_CMODE_CFG_LDO_MOD_EN_CMODE_BF_OFF ( 3)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_CMODE_CFG_LDO_MOD_EN_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_CMODE_CFG_LDO_MOD_EN_CMODE_BF_MSK (0x00000008)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_CMODE_CFG_LDO_MOD_EN_CMODE_BF_DEF (0x00000000)

///< Sets modulation frequency.                         Code would toggle
///< every 2^reg refclk cycles.
#define PMA_TXPLLCFGLOADER_MSG_DFX0_CMODE_CFG_MOD_TOGGLE_DELAY_CMODE_BF_OFF ( 4)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_CMODE_CFG_MOD_TOGGLE_DELAY_CMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_CMODE_CFG_MOD_TOGGLE_DELAY_CMODE_BF_MSK (0x000000F0)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_CMODE_CFG_MOD_TOGGLE_DELAY_CMODE_BF_DEF (0x00000000)

///< Selects which bit in VISA lane0 would be routed to high speed monitor
///< mux.
#define PMA_TXPLLCFGLOADER_MSG_DFX0_CMODE_CFG_VISA8TO1_2OBS_SEL_CMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_CMODE_CFG_VISA8TO1_2OBS_SEL_CMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_CMODE_CFG_VISA8TO1_2OBS_SEL_CMODE_BF_MSK (0x00000700)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_CMODE_CFG_VISA8TO1_2OBS_SEL_CMODE_BF_DEF (0x00000000)

///< Enables overriding feed forward offset. Useful in integer mode to
///< shift fbclk phase.
#define PMA_TXPLLCFGLOADER_MSG_DFX0_CMODE_CFG_DFX_FEEDFWRD_OFFSET_OVR_EN_CMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_CMODE_CFG_DFX_FEEDFWRD_OFFSET_OVR_EN_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_CMODE_CFG_DFX_FEEDFWRD_OFFSET_OVR_EN_CMODE_BF_MSK (0x00000800)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_CMODE_CFG_DFX_FEEDFWRD_OFFSET_OVR_EN_CMODE_BF_DEF (0x00000000)

///< Sets feed forward offset override value. Useful in integer mode to
///< shift fbclk phase.                         The 9 integer bits, 3 fractional
///< bits.
#define PMA_TXPLLCFGLOADER_MSG_DFX0_CMODE_CFG_DFX_FEEDFWRDPHASE_OVR_VAL_CMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_CMODE_CFG_DFX_FEEDFWRDPHASE_OVR_VAL_CMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_CMODE_CFG_DFX_FEEDFWRDPHASE_OVR_VAL_CMODE_BF_MSK (0x0001F000)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_CMODE_CFG_DFX_FEEDFWRDPHASE_OVR_VAL_CMODE_BF_DEF (0x00000000)

///< When cfg_dfx_disable_dft_timer_ovrd_en=1, this bit will set DFT timer
///< mode.                          When 0, DFT measurements always run.
///< When 1, DFT measurements always off.                          No need
///< to change this reg. Just keep it at 0. (could have been removed)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_CMODE_CFG_DFX_DIS_DFT_TIMER_OVRD_VAL_CMODE_BF_OFF (17)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_CMODE_CFG_DFX_DIS_DFT_TIMER_OVRD_VAL_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_CMODE_CFG_DFX_DIS_DFT_TIMER_OVRD_VAL_CMODE_BF_MSK (0x00020000)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_CMODE_CFG_DFX_DIS_DFT_TIMER_OVRD_VAL_CMODE_BF_DEF (0x00000000)

///< When 0, DFT measurements would stop when minmax timer overflows.
///< When 1, DFT measurements run based on cfg_dfx_disable_dft_timer_ovrd_val.
#define PMA_TXPLLCFGLOADER_MSG_DFX0_CMODE_CFG_DFX_DIS_DFT_TIMER_OVRD_EN_CMODE_BF_OFF (18)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_CMODE_CFG_DFX_DIS_DFT_TIMER_OVRD_EN_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_CMODE_CFG_DFX_DIS_DFT_TIMER_OVRD_EN_CMODE_BF_MSK (0x00040000)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_CMODE_CFG_DFX_DIS_DFT_TIMER_OVRD_EN_CMODE_BF_DEF (0x00040000)

///< When 0, DPSO bus is sampled by fbclk falling edge before sent to TX
///< PISO                         When 1, the sample is bypassed. This
///< is needed when monitoring VISA signals that are not of fbclk nor on
///< refclk domain.
#define PMA_TXPLLCFGLOADER_MSG_DFX0_CMODE_CFG_DPSO_BYP_MODE_CMODE_BF_OFF (19)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_CMODE_CFG_DPSO_BYP_MODE_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_CMODE_CFG_DPSO_BYP_MODE_CMODE_BF_MSK (0x00080000)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_CMODE_CFG_DPSO_BYP_MODE_CMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_DFX1_CMODE register description at address offset 0x248
  *
  * Register default value:        0x0001AAAA
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_dfx1_cmode
  * SERDES_LANE_ANA_PLL::DFX1
  */

typedef union {
  struct {
    uint32_t CFG_DPSO_MARKER_CMODE : 16;
    ///< When serializing VISA 8b bus to TX, additional 16 (upper bits) are
    ///< set according to this register which could be used as a marker
    ///< AccessType="RW" BitOffset="0" ResetValue="0xAAAA"
    uint32_t CFG_TDCPE_MODULATION_VAL_CMODE : 5;
    ///< While cfg_tdcpe_modulation_en=1 define the TDC/STDC amplitude offset
    ///< (integer) during the tdc/stdc modulation.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x1"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_dfx1_cmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_DFX1_CMODE_DEFAULT (0x0001aaaaU)
#define PMA_TXPLLCFGLOADER_MSG_DFX1_CMODE_RD_MASK (0x001fffffU)
#define PMA_TXPLLCFGLOADER_MSG_DFX1_CMODE_WR_MASK (0x001fffffU)


///< When serializing VISA 8b bus to TX, additional 16 (upper bits) are
///< set according to this register which could be used as a marker
#define PMA_TXPLLCFGLOADER_MSG_DFX1_CMODE_CFG_DPSO_MARKER_CMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_DFX1_CMODE_CFG_DPSO_MARKER_CMODE_BF_WID (16)
#define PMA_TXPLLCFGLOADER_MSG_DFX1_CMODE_CFG_DPSO_MARKER_CMODE_BF_MSK (0x0000FFFF)
#define PMA_TXPLLCFGLOADER_MSG_DFX1_CMODE_CFG_DPSO_MARKER_CMODE_BF_DEF (0x0000AAAA)

///< While cfg_tdcpe_modulation_en=1 define the TDC/STDC amplitude offset
///< (integer) during the tdc/stdc modulation.
#define PMA_TXPLLCFGLOADER_MSG_DFX1_CMODE_CFG_TDCPE_MOD_VAL_CMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_DFX1_CMODE_CFG_TDCPE_MOD_VAL_CMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_DFX1_CMODE_CFG_TDCPE_MOD_VAL_CMODE_BF_MSK (0x001F0000)
#define PMA_TXPLLCFGLOADER_MSG_DFX1_CMODE_CFG_TDCPE_MOD_VAL_CMODE_BF_DEF (0x00010000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_LDO0_CMODE register description at address offset 0x24c
  *
  * Register default value:        0x059002E0
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_ldo0_cmode
  * SERDES_LANE_ANA_PLL::LDO0
  */

typedef union {
  struct {
    uint32_t CFG_LDOCLK_BETA_CMODE : 3;
    ///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldoclk_beta
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_LDOCLK_BYP_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldoclk_byp
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t CFG_LDOCLK_VREF_SEL_CMODE : 6;
    ///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldoclk_vref_sel
    ///< AccessType="RW" BitOffset="4" ResetValue="0x2E"
    uint32_t CFG_LDODCO_BETA_CMODE : 3;
    ///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldodco_beta
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t CFG_LDODCO_BYP_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldodco_byp
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t CFG_LDODCO_VREF_RC_CMODE : 2;
    ///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldodco_vref_rc
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t CFG_LDODCO_VREF_SEL_CMODE : 6;
    ///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldodco_vref_sel
    ///< AccessType="RW" BitOffset="16" ResetValue="0x10"
    uint32_t CFG_LDODCO_HIGH_VREF_SEL_CMODE : 6;
    ///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldodco_high_vref_sel
    ///< AccessType="RW" BitOffset="22" ResetValue="0x16"
    uint32_t CFG_LDOREFGEN_BETA_CMODE : 3;
    ///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldorefgen_beta
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t CFG_VREFGEN_BYP_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::LDO0::cfg_vrefgen_byp
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_ldo0_cmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_LDO0_CMODE_DEFAULT (0x059002e0U)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_CMODE_RD_MASK (0xffffffffU)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_CMODE_WR_MASK (0xffffffffU)


///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldoclk_beta
#define PMA_TXPLLCFGLOADER_MSG_LDO0_CMODE_CFG_LDOCLK_BETA_CMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_CMODE_CFG_LDOCLK_BETA_CMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_CMODE_CFG_LDOCLK_BETA_CMODE_BF_MSK (0x00000007)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_CMODE_CFG_LDOCLK_BETA_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldoclk_byp
#define PMA_TXPLLCFGLOADER_MSG_LDO0_CMODE_CFG_LDOCLK_BYP_CMODE_BF_OFF ( 3)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_CMODE_CFG_LDOCLK_BYP_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_CMODE_CFG_LDOCLK_BYP_CMODE_BF_MSK (0x00000008)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_CMODE_CFG_LDOCLK_BYP_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldoclk_vref_sel
#define PMA_TXPLLCFGLOADER_MSG_LDO0_CMODE_CFG_LDOCLK_VREF_SEL_CMODE_BF_OFF ( 4)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_CMODE_CFG_LDOCLK_VREF_SEL_CMODE_BF_WID ( 6)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_CMODE_CFG_LDOCLK_VREF_SEL_CMODE_BF_MSK (0x000003F0)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_CMODE_CFG_LDOCLK_VREF_SEL_CMODE_BF_DEF (0x000002E0)

///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldodco_beta
#define PMA_TXPLLCFGLOADER_MSG_LDO0_CMODE_CFG_LDODCO_BETA_CMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_CMODE_CFG_LDODCO_BETA_CMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_CMODE_CFG_LDODCO_BETA_CMODE_BF_MSK (0x00001C00)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_CMODE_CFG_LDODCO_BETA_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldodco_byp
#define PMA_TXPLLCFGLOADER_MSG_LDO0_CMODE_CFG_LDODCO_BYP_CMODE_BF_OFF (13)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_CMODE_CFG_LDODCO_BYP_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_CMODE_CFG_LDODCO_BYP_CMODE_BF_MSK (0x00002000)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_CMODE_CFG_LDODCO_BYP_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldodco_vref_rc
#define PMA_TXPLLCFGLOADER_MSG_LDO0_CMODE_CFG_LDODCO_VREF_RC_CMODE_BF_OFF (14)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_CMODE_CFG_LDODCO_VREF_RC_CMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_CMODE_CFG_LDODCO_VREF_RC_CMODE_BF_MSK (0x0000C000)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_CMODE_CFG_LDODCO_VREF_RC_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldodco_vref_sel
#define PMA_TXPLLCFGLOADER_MSG_LDO0_CMODE_CFG_LDODCO_VREF_SEL_CMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_CMODE_CFG_LDODCO_VREF_SEL_CMODE_BF_WID ( 6)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_CMODE_CFG_LDODCO_VREF_SEL_CMODE_BF_MSK (0x003F0000)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_CMODE_CFG_LDODCO_VREF_SEL_CMODE_BF_DEF (0x00100000)

///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldodco_high_vref_sel
#define PMA_TXPLLCFGLOADER_MSG_LDO0_CMODE_CFG_LDODCO_HIGH_VREF_SEL_CMODE_BF_OFF (22)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_CMODE_CFG_LDODCO_HIGH_VREF_SEL_CMODE_BF_WID ( 6)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_CMODE_CFG_LDODCO_HIGH_VREF_SEL_CMODE_BF_MSK (0x0FC00000)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_CMODE_CFG_LDODCO_HIGH_VREF_SEL_CMODE_BF_DEF (0x05800000)

///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldorefgen_beta
#define PMA_TXPLLCFGLOADER_MSG_LDO0_CMODE_CFG_LDOREFGEN_BETA_CMODE_BF_OFF (28)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_CMODE_CFG_LDOREFGEN_BETA_CMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_CMODE_CFG_LDOREFGEN_BETA_CMODE_BF_MSK (0x70000000)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_CMODE_CFG_LDOREFGEN_BETA_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO0::cfg_vrefgen_byp
#define PMA_TXPLLCFGLOADER_MSG_LDO0_CMODE_CFG_VREFGEN_BYP_CMODE_BF_OFF (31)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_CMODE_CFG_VREFGEN_BYP_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_CMODE_CFG_VREFGEN_BYP_CMODE_BF_MSK (0x80000000)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_CMODE_CFG_VREFGEN_BYP_CMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_LDO1_CMODE register description at address offset 0x250
  *
  * Register default value:        0x000000E0
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_ldo1_cmode
  * SERDES_LANE_ANA_PLL::LDO1
  */

typedef union {
  struct {
    uint32_t CFG_INV_VPEAK_COMB_FB_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::LDO1::cfg_inv_vpeak_comb_fb
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_LDO_BIAS_SEL_CMODE : 3;
    ///< SERDES_LANE_ANA_PLL::LDO1::cfg_ldo_bias_sel
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t CFG_LDO_BIAS_EXT_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::LDO1::cfg_ldo_bias_ext
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t CFG_LDO_PKSEN_HIGHZ_B_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::LDO1::cfg_ldo_pksen_highz_b
    ///< AccessType="RW" BitOffset="5" ResetValue="0x1"
    uint32_t CFG_LDO_CLK_HIGHZ_B_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::LDO1::cfg_ldo_clk_highz_b
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t CFG_LDO_DCO_HIGHZ_B_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::LDO1::cfg_ldo_dco_highz_b
    ///< AccessType="RW" BitOffset="7" ResetValue="0x1"
    uint32_t CFG_DCMON_SEL_CMODE : 4;
    ///< Selection pins for DFx MUXs
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CFG_DCMON1_EN_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::LDO1::cfg_dcmon1_en
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t CFG_DCMON2_EN_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::LDO1::cfg_dcmon2_en
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t  : 18;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_ldo1_cmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_LDO1_CMODE_DEFAULT (0x000000e0U)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_CMODE_RD_MASK (0x00003fffU)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_CMODE_WR_MASK (0x00003fffU)


///< SERDES_LANE_ANA_PLL::LDO1::cfg_inv_vpeak_comb_fb
#define PMA_TXPLLCFGLOADER_MSG_LDO1_CMODE_CFG_INV_VPEAK_COMB_FB_CMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_CMODE_CFG_INV_VPEAK_COMB_FB_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_CMODE_CFG_INV_VPEAK_COMB_FB_CMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_CMODE_CFG_INV_VPEAK_COMB_FB_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO1::cfg_ldo_bias_sel
#define PMA_TXPLLCFGLOADER_MSG_LDO1_CMODE_CFG_LDO_BIAS_SEL_CMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_CMODE_CFG_LDO_BIAS_SEL_CMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_CMODE_CFG_LDO_BIAS_SEL_CMODE_BF_MSK (0x0000000E)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_CMODE_CFG_LDO_BIAS_SEL_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO1::cfg_ldo_bias_ext
#define PMA_TXPLLCFGLOADER_MSG_LDO1_CMODE_CFG_LDO_BIAS_EXT_CMODE_BF_OFF ( 4)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_CMODE_CFG_LDO_BIAS_EXT_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_CMODE_CFG_LDO_BIAS_EXT_CMODE_BF_MSK (0x00000010)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_CMODE_CFG_LDO_BIAS_EXT_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO1::cfg_ldo_pksen_highz_b
#define PMA_TXPLLCFGLOADER_MSG_LDO1_CMODE_CFG_LDO_PKSEN_HIGHZ_B_CMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_CMODE_CFG_LDO_PKSEN_HIGHZ_B_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_CMODE_CFG_LDO_PKSEN_HIGHZ_B_CMODE_BF_MSK (0x00000020)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_CMODE_CFG_LDO_PKSEN_HIGHZ_B_CMODE_BF_DEF (0x00000020)

///< SERDES_LANE_ANA_PLL::LDO1::cfg_ldo_clk_highz_b
#define PMA_TXPLLCFGLOADER_MSG_LDO1_CMODE_CFG_LDO_CLK_HIGHZ_B_CMODE_BF_OFF ( 6)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_CMODE_CFG_LDO_CLK_HIGHZ_B_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_CMODE_CFG_LDO_CLK_HIGHZ_B_CMODE_BF_MSK (0x00000040)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_CMODE_CFG_LDO_CLK_HIGHZ_B_CMODE_BF_DEF (0x00000040)

///< SERDES_LANE_ANA_PLL::LDO1::cfg_ldo_dco_highz_b
#define PMA_TXPLLCFGLOADER_MSG_LDO1_CMODE_CFG_LDO_DCO_HIGHZ_B_CMODE_BF_OFF ( 7)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_CMODE_CFG_LDO_DCO_HIGHZ_B_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_CMODE_CFG_LDO_DCO_HIGHZ_B_CMODE_BF_MSK (0x00000080)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_CMODE_CFG_LDO_DCO_HIGHZ_B_CMODE_BF_DEF (0x00000080)

///< Selection pins for DFx MUXs
#define PMA_TXPLLCFGLOADER_MSG_LDO1_CMODE_CFG_DCMON_SEL_CMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_CMODE_CFG_DCMON_SEL_CMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_CMODE_CFG_DCMON_SEL_CMODE_BF_MSK (0x00000F00)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_CMODE_CFG_DCMON_SEL_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO1::cfg_dcmon1_en
#define PMA_TXPLLCFGLOADER_MSG_LDO1_CMODE_CFG_DCMON1_EN_CMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_CMODE_CFG_DCMON1_EN_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_CMODE_CFG_DCMON1_EN_CMODE_BF_MSK (0x00001000)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_CMODE_CFG_DCMON1_EN_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO1::cfg_dcmon2_en
#define PMA_TXPLLCFGLOADER_MSG_LDO1_CMODE_CFG_DCMON2_EN_CMODE_BF_OFF (13)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_CMODE_CFG_DCMON2_EN_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_CMODE_CFG_DCMON2_EN_CMODE_BF_MSK (0x00002000)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_CMODE_CFG_DCMON2_EN_CMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_KVCC0_CMODE register description at address offset 0x254
  *
  * Register default value:        0x080013C5
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_kvcc0_cmode
  * SERDES_LANE_ANA_PLL::KVCC0
  */

typedef union {
  struct {
    uint32_t CFG_KVCC_SETTLE_MAXCNT_CMODE : 8;
    ///< Defines number of refclk cycles from DAC change to frequency measurement
    ///< during Kvcc calibration.                         VREG LPF is in bypass
    ///< mode with constant time is ~1nsec (115ohm*8.3pF).
    ///< Use the following formula:                         Frefclk x 1.26usec
    ///< AccessType="RW" BitOffset="0" ResetValue="0xC5"
    uint32_t CFG_KVCC_MEASURE_MAXCNT_CMODE : 3;
    ///< Defines number of refclk cycles over which the DCO frequency is measured
    ///< and averaged with high accuracy.                         It is used
    ///< for both Kvcc calibration and DFT frequency measurement mode.
    ///< refclk cycles = 2^(reg+6) - 1
    ///< AccessType="RW" BitOffset="8" ResetValue="0x3"
    uint32_t CFG_KVCCCALIB_LDO_OFFSET_CMODE : 3;
    ///< Amount of offset to inject into LDO for measuring frequency delta
    ///< that is needed for calibrating Kvcc. (Need to be ~30mv)
    ///< Common: use &#38;quot;2&#38;quot; as the default register value.
    ///< Lane: used &#38;quot;1&#38;quot; as a default override.
    ///< AccessType="RW" BitOffset="11" ResetValue="0x2"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t CFG_DFT_FREQ_MEAS_ENABLE_CMODE : 1;
    ///< DFT frequency measurement is triggered when this signal transitions
    ///< from 0 to 1.                         Make sure to set cfg_dfx_disable_dft_timer_ovrd_en=1
    ///< so that HS counter would remain active and cfg_kvcc_measure_maxcnt
    ///< to define number of refclk cycles.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t CFG_NOTCH_OFFSET_CMODE : 3;
    ///< Sets how many thermo bits to turn off from the notch filter
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t CFG_FULL_RANGE_KVCC_SEL_CMODE : 1;
    ///< Limit the kvcc full bin code according to thermal control bits in
    ///< the analog. Leaving it unlimited doesn&#39;t impact functionality
    ///< but just the read out of the Kvcc calibration. For proper Kvcc debug/characterization,
    ///< set according to the PLL:                         0 - code is limited
    ///< to 191d, 11 thermal bits in analog                         1 - (default)
    ///< Full binary code range
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t CFG_KVCC_INV_POLARITY_CMODE : 1;
    ///< A chicken bit to invert Kvcc polarity.
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t CFG_2F0_FINE_RATIO_CMODE : 7;
    ///< Fractional ratio. 32 is 1/4 (frac value = reg/2^7).
    ///< AccessType="RW" BitOffset="22" ResetValue="0x20"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_kvcc0_cmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_KVCC0_CMODE_DEFAULT (0x080013c5U)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_CMODE_RD_MASK (0x1fff3fffU)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_CMODE_WR_MASK (0x1fff3fffU)


///< Defines number of refclk cycles from DAC change to frequency measurement
///< during Kvcc calibration.                         VREG LPF is in bypass
///< mode with constant time is ~1nsec (115ohm*8.3pF).
///< Use the following formula:                         Frefclk x 1.26usec
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_CMODE_CFG_KVCC_SETTLE_MAXCNT_CMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_CMODE_CFG_KVCC_SETTLE_MAXCNT_CMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_CMODE_CFG_KVCC_SETTLE_MAXCNT_CMODE_BF_MSK (0x000000FF)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_CMODE_CFG_KVCC_SETTLE_MAXCNT_CMODE_BF_DEF (0x000000C5)

///< Defines number of refclk cycles over which the DCO frequency is measured
///< and averaged with high accuracy.                         It is used
///< for both Kvcc calibration and DFT frequency measurement mode.
///< refclk cycles = 2^(reg+6) - 1
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_CMODE_CFG_KVCC_MEAS_MAXCNT_CMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_CMODE_CFG_KVCC_MEAS_MAXCNT_CMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_CMODE_CFG_KVCC_MEAS_MAXCNT_CMODE_BF_MSK (0x00000700)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_CMODE_CFG_KVCC_MEAS_MAXCNT_CMODE_BF_DEF (0x00000300)

///< Amount of offset to inject into LDO for measuring frequency delta
///< that is needed for calibrating Kvcc. (Need to be ~30mv)
///< Common: use &#38;quot;2&#38;quot; as the default register value.
///< Lane: used &#38;quot;1&#38;quot; as a default override.
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_CMODE_CFG_KVCCCALIB_LDO_OFFSET_CMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_CMODE_CFG_KVCCCALIB_LDO_OFFSET_CMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_CMODE_CFG_KVCCCALIB_LDO_OFFSET_CMODE_BF_MSK (0x00003800)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_CMODE_CFG_KVCCCALIB_LDO_OFFSET_CMODE_BF_DEF (0x00001000)

///< DFT frequency measurement is triggered when this signal transitions
///< from 0 to 1.                         Make sure to set cfg_dfx_disable_dft_timer_ovrd_en=1
///< so that HS counter would remain active and cfg_kvcc_measure_maxcnt
///< to define number of refclk cycles.
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_CMODE_CFG_DFT_FREQ_MEAS_EN_CMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_CMODE_CFG_DFT_FREQ_MEAS_EN_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_CMODE_CFG_DFT_FREQ_MEAS_EN_CMODE_BF_MSK (0x00010000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_CMODE_CFG_DFT_FREQ_MEAS_EN_CMODE_BF_DEF (0x00000000)

///< Sets how many thermo bits to turn off from the notch filter
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_CMODE_CFG_NOTCH_OFFSET_CMODE_BF_OFF (17)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_CMODE_CFG_NOTCH_OFFSET_CMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_CMODE_CFG_NOTCH_OFFSET_CMODE_BF_MSK (0x000E0000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_CMODE_CFG_NOTCH_OFFSET_CMODE_BF_DEF (0x00000000)

///< Limit the kvcc full bin code according to thermal control bits in
///< the analog. Leaving it unlimited doesn&#39;t impact functionality
///< but just the read out of the Kvcc calibration. For proper Kvcc debug/characterization,
///< set according to the PLL:                         0 - code is limited
///< to 191d, 11 thermal bits in analog                         1 - (default)
///< Full binary code range
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_CMODE_CFG_FULL_RANGE_KVCC_SEL_CMODE_BF_OFF (20)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_CMODE_CFG_FULL_RANGE_KVCC_SEL_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_CMODE_CFG_FULL_RANGE_KVCC_SEL_CMODE_BF_MSK (0x00100000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_CMODE_CFG_FULL_RANGE_KVCC_SEL_CMODE_BF_DEF (0x00000000)

///< A chicken bit to invert Kvcc polarity.
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_CMODE_CFG_KVCC_INV_POLARITY_CMODE_BF_OFF (21)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_CMODE_CFG_KVCC_INV_POLARITY_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_CMODE_CFG_KVCC_INV_POLARITY_CMODE_BF_MSK (0x00200000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_CMODE_CFG_KVCC_INV_POLARITY_CMODE_BF_DEF (0x00000000)

///< Fractional ratio. 32 is 1/4 (frac value = reg/2^7).
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_CMODE_CFG_2F0_FINE_RATIO_CMODE_BF_OFF (22)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_CMODE_CFG_2F0_FINE_RATIO_CMODE_BF_WID ( 7)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_CMODE_CFG_2F0_FINE_RATIO_CMODE_BF_MSK (0x1FC00000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_CMODE_CFG_2F0_FINE_RATIO_CMODE_BF_DEF (0x08000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_KVCC1_CMODE register description at address offset 0x258
  *
  * Register default value:        0x000EF200
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_kvcc1_cmode
  * SERDES_LANE_ANA_PLL::KVCC1
  */

typedef union {
  struct {
    uint32_t CFG_KVCC_CODE_OVRD_CMODE : 1;
    ///< DCO notch filter override enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_KVCC_CODE_VAL_CMODE : 9;
    ///< DCO notch filter override value (binary, before therm decoder).
    ///< AccessType="RW" BitOffset="1" ResetValue="0x100"
    uint32_t CFG_KVCC_LDO_OFFSET_EN_OVRD_CMODE : 1;
    ///< Takes control over internal Kvcc FSM for manually injecting an offset
    ///< to LDO (for letting FW calibrate Kvcc).
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t CFG_KVCC_LDO_OFFSET_EN_VAL_CMODE : 1;
    ///< When kvcc_ldo_offset_en_ovrd=1                         0 - doesn&#39;t
    ///< inject an offset to LDO                         1 - injects an offset
    ///< to LDO in magnitude as configured by kvcccalib_ldo_offset
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t CFG_KVCC_MAX_CODE_LIMIT_CMODE : 9;
    ///< While cfg_full_range_kvcc_sel = 0, define the max value for 2f0 code.
    ///< Common: 0x7F (127)                         Lane: 0x4F (79)
    ///< AccessType="RW" BitOffset="12" ResetValue="0xEF"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_kvcc1_cmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_KVCC1_CMODE_DEFAULT (0x000ef200U)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_CMODE_RD_MASK (0x001fffffU)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_CMODE_WR_MASK (0x001fffffU)


///< DCO notch filter override enable
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_CMODE_CFG_KVCC_CODE_OVRD_CMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_CMODE_CFG_KVCC_CODE_OVRD_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_CMODE_CFG_KVCC_CODE_OVRD_CMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_CMODE_CFG_KVCC_CODE_OVRD_CMODE_BF_DEF (0x00000000)

///< DCO notch filter override value (binary, before therm decoder).
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_CMODE_CFG_KVCC_CODE_VAL_CMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_CMODE_CFG_KVCC_CODE_VAL_CMODE_BF_WID ( 9)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_CMODE_CFG_KVCC_CODE_VAL_CMODE_BF_MSK (0x000003FE)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_CMODE_CFG_KVCC_CODE_VAL_CMODE_BF_DEF (0x00000200)

///< Takes control over internal Kvcc FSM for manually injecting an offset
///< to LDO (for letting FW calibrate Kvcc).
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_CMODE_CFG_KVCC_LDO_OFFSET_EN_OVRD_CMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_CMODE_CFG_KVCC_LDO_OFFSET_EN_OVRD_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_CMODE_CFG_KVCC_LDO_OFFSET_EN_OVRD_CMODE_BF_MSK (0x00000400)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_CMODE_CFG_KVCC_LDO_OFFSET_EN_OVRD_CMODE_BF_DEF (0x00000000)

///< When kvcc_ldo_offset_en_ovrd=1                         0 - doesn&#39;t
///< inject an offset to LDO                         1 - injects an offset
///< to LDO in magnitude as configured by kvcccalib_ldo_offset
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_CMODE_CFG_KVCC_LDO_OFFSET_EN_VAL_CMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_CMODE_CFG_KVCC_LDO_OFFSET_EN_VAL_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_CMODE_CFG_KVCC_LDO_OFFSET_EN_VAL_CMODE_BF_MSK (0x00000800)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_CMODE_CFG_KVCC_LDO_OFFSET_EN_VAL_CMODE_BF_DEF (0x00000000)

///< While cfg_full_range_kvcc_sel = 0, define the max value for 2f0 code.
///< Common: 0x7F (127)                         Lane: 0x4F (79)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_CMODE_CFG_KVCC_MAX_CODE_LIMIT_CMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_CMODE_CFG_KVCC_MAX_CODE_LIMIT_CMODE_BF_WID ( 9)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_CMODE_CFG_KVCC_MAX_CODE_LIMIT_CMODE_BF_MSK (0x001FF000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_CMODE_CFG_KVCC_MAX_CODE_LIMIT_CMODE_BF_DEF (0x000EF000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_KVCC2_CMODE register description at address offset 0x25c
  *
  * Register default value:        0x000000A9
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_kvcc2_cmode
  * SERDES_LANE_ANA_PLL::KVCC2
  */

typedef union {
  struct {
    uint32_t CFG_KVCC_ADAPT_EN_CMODE : 1;
    ///< Kvcc on the fly adaptation enable.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t CFG_KVCC_ADAPT_MODE_CMODE : 2;
    ///< Defines kvcc adaptation mode.                         0(POR): full
    ///< (dithering on all 2f0 bus between current and next)
    ///< 1: single cap 0 (dithering on dedicated capacitor - 1 lsb)
    ///< 2: single cap 1 (dithering on dedicated capacitor - 2 lsb)
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t CFG_KVCC_ADAPT_THR_CMODE : 2;
    ///< Threshold for update the notch code.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x1"
    uint32_t CFG_KVCC_ADAPT_CTR_DELAY_CMODE : 3;
    ///< Sets update rate of 2f0 SD modulator (2f0 dithering) ramp code increment.
    ///< fbclk cycles = 2^reg
    ///< AccessType="RW" BitOffset="5" ResetValue="0x5"
    uint32_t CFG_KVCC_ADAPT_STEP_CMODE : 3;
    ///< Sets step size of 2f0 SD modulator (2f0 dithering) ramp code increment.
    ///< step = 2^(reg-9)                         Cycles to complete ramp =
    ///< 2^(9-adapt_step+adapt_ctr_delay)
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CFG_DFX_KVCC_ADAPT_TOGGLE_EN_CMODE : 1;
    ///< Enables a BIST to check 2f0 mechanism for temp tracking.
    ///< When enabled, 2f0 dithering SD modulator code is ramped up and down
    ///< continously.
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t CFG_DFX_KVCC_ADAPT_ENABLE_OVR_CMODE : 1;
    ///< Enables overriding code to 2f0 dithering SD modulator.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t CFG_DFX_KVCC_ADAPT_VAL_OVR_CMODE : 9;
    ///< 2f0 dithering SD modulator override value (when cfg_dfx_kvcc_adapt_enable_ovr=1)
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t CFG_DFX_KVCC_ADAPT_DIR_OVR_CMODE : 1;
    ///< In 2f0 dithering DFX modes, this bit does the following:
    ///< toggle mode (cfg_dfx_kvcc_adapt_toggle_en=1):
    ///< 0 - 2f0 would ramp down and up repeatedly
    ///< 1 - 2f0 would ramp up and down repeatedly
    ///< override mode (cfg_dfx_kvcc_adapt_enable_ovr=1):
    ///< 0 - 2f0 would dither between current code and current code -1
    ///< 1 - 2f0 would dither between current code and current code +1
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t CFG_KVCC_ADAPT_CHICKEN_BIT_CMODE : 1;
    ///< Define the polarity of the kvcc adaptation.
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t CFG_KVCC_ADAPT_BY_FW_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::KVCC2::cfg_kvcc_adapt_by_fw
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t CFG_START_2F0_STEP_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::KVCC2::cfg_start_2f0_step
    ///< AccessType="RW" BitOffset="25" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="26" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_kvcc2_cmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_DEFAULT (0x000000a9U)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_RD_MASK (0x03ffffffU)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_WR_MASK (0x03ffffffU)


///< Kvcc on the fly adaptation enable.
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_CFG_KVCC_ADAPT_EN_CMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_CFG_KVCC_ADAPT_EN_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_CFG_KVCC_ADAPT_EN_CMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_CFG_KVCC_ADAPT_EN_CMODE_BF_DEF (0x00000001)

///< Defines kvcc adaptation mode.                         0(POR): full
///< (dithering on all 2f0 bus between current and next)
///< 1: single cap 0 (dithering on dedicated capacitor - 1 lsb)
///< 2: single cap 1 (dithering on dedicated capacitor - 2 lsb)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_CFG_KVCC_ADAPT_MODE_CMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_CFG_KVCC_ADAPT_MODE_CMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_CFG_KVCC_ADAPT_MODE_CMODE_BF_MSK (0x00000006)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_CFG_KVCC_ADAPT_MODE_CMODE_BF_DEF (0x00000000)

///< Threshold for update the notch code.
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_CFG_KVCC_ADAPT_THR_CMODE_BF_OFF ( 3)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_CFG_KVCC_ADAPT_THR_CMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_CFG_KVCC_ADAPT_THR_CMODE_BF_MSK (0x00000018)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_CFG_KVCC_ADAPT_THR_CMODE_BF_DEF (0x00000008)

///< Sets update rate of 2f0 SD modulator (2f0 dithering) ramp code increment.
///< fbclk cycles = 2^reg
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_CFG_KVCC_ADAPT_CTR_DELAY_CMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_CFG_KVCC_ADAPT_CTR_DELAY_CMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_CFG_KVCC_ADAPT_CTR_DELAY_CMODE_BF_MSK (0x000000E0)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_CFG_KVCC_ADAPT_CTR_DELAY_CMODE_BF_DEF (0x000000A0)

///< Sets step size of 2f0 SD modulator (2f0 dithering) ramp code increment.
///< step = 2^(reg-9)                         Cycles to complete ramp =
///< 2^(9-adapt_step+adapt_ctr_delay)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_CFG_KVCC_ADAPT_STEP_CMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_CFG_KVCC_ADAPT_STEP_CMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_CFG_KVCC_ADAPT_STEP_CMODE_BF_MSK (0x00000700)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_CFG_KVCC_ADAPT_STEP_CMODE_BF_DEF (0x00000000)

///< Enables a BIST to check 2f0 mechanism for temp tracking.
///< When enabled, 2f0 dithering SD modulator code is ramped up and down
///< continously.
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_CFG_DFX_KVCC_ADAPT_TOGGLE_EN_CMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_CFG_DFX_KVCC_ADAPT_TOGGLE_EN_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_CFG_DFX_KVCC_ADAPT_TOGGLE_EN_CMODE_BF_MSK (0x00000800)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_CFG_DFX_KVCC_ADAPT_TOGGLE_EN_CMODE_BF_DEF (0x00000000)

///< Enables overriding code to 2f0 dithering SD modulator.
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_CFG_DFX_KVCC_ADAPT_EN_OVR_CMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_CFG_DFX_KVCC_ADAPT_EN_OVR_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_CFG_DFX_KVCC_ADAPT_EN_OVR_CMODE_BF_MSK (0x00001000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_CFG_DFX_KVCC_ADAPT_EN_OVR_CMODE_BF_DEF (0x00000000)

///< 2f0 dithering SD modulator override value (when cfg_dfx_kvcc_adapt_enable_ovr=1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_CFG_DFX_KVCC_ADAPT_VAL_OVR_CMODE_BF_OFF (13)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_CFG_DFX_KVCC_ADAPT_VAL_OVR_CMODE_BF_WID ( 9)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_CFG_DFX_KVCC_ADAPT_VAL_OVR_CMODE_BF_MSK (0x003FE000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_CFG_DFX_KVCC_ADAPT_VAL_OVR_CMODE_BF_DEF (0x00000000)

///< In 2f0 dithering DFX modes, this bit does the following:
///< toggle mode (cfg_dfx_kvcc_adapt_toggle_en=1):
///< 0 - 2f0 would ramp down and up repeatedly
///< 1 - 2f0 would ramp up and down repeatedly
///< override mode (cfg_dfx_kvcc_adapt_enable_ovr=1):
///< 0 - 2f0 would dither between current code and current code -1
///< 1 - 2f0 would dither between current code and current code +1
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_CFG_DFX_KVCC_ADAPT_DIR_OVR_CMODE_BF_OFF (22)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_CFG_DFX_KVCC_ADAPT_DIR_OVR_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_CFG_DFX_KVCC_ADAPT_DIR_OVR_CMODE_BF_MSK (0x00400000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_CFG_DFX_KVCC_ADAPT_DIR_OVR_CMODE_BF_DEF (0x00000000)

///< Define the polarity of the kvcc adaptation.
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_CFG_KVCC_ADAPT_CHICKEN_BIT_CMODE_BF_OFF (23)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_CFG_KVCC_ADAPT_CHICKEN_BIT_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_CFG_KVCC_ADAPT_CHICKEN_BIT_CMODE_BF_MSK (0x00800000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_CFG_KVCC_ADAPT_CHICKEN_BIT_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::KVCC2::cfg_kvcc_adapt_by_fw
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_CFG_KVCC_ADAPT_BY_FW_CMODE_BF_OFF (24)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_CFG_KVCC_ADAPT_BY_FW_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_CFG_KVCC_ADAPT_BY_FW_CMODE_BF_MSK (0x01000000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_CFG_KVCC_ADAPT_BY_FW_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::KVCC2::cfg_start_2f0_step
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_CFG_START_2F0_STEP_CMODE_BF_OFF (25)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_CFG_START_2F0_STEP_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_CFG_START_2F0_STEP_CMODE_BF_MSK (0x02000000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_CFG_START_2F0_STEP_CMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_SPARE0_CMODE register description at address offset 0x260
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_spare0_cmode
  * SERDES_LANE_ANA_PLL::SPARE0
  */

typedef union {
  struct {
    uint32_t CFG_SPARE_DIG2ANA_CMODE : 11;
    ///< Spare controls to analog block.                         [10:0] unused
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 21;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_spare0_cmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_SPARE0_CMODE_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_SPARE0_CMODE_RD_MASK (0x000007ffU)
#define PMA_TXPLLCFGLOADER_MSG_SPARE0_CMODE_WR_MASK (0x000007ffU)


///< Spare controls to analog block.                         [10:0] unused
#define PMA_TXPLLCFGLOADER_MSG_SPARE0_CMODE_CFG_SPARE_DIG2ANA_CMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_SPARE0_CMODE_CFG_SPARE_DIG2ANA_CMODE_BF_WID (11)
#define PMA_TXPLLCFGLOADER_MSG_SPARE0_CMODE_CFG_SPARE_DIG2ANA_CMODE_BF_MSK (0x000007FF)
#define PMA_TXPLLCFGLOADER_MSG_SPARE0_CMODE_CFG_SPARE_DIG2ANA_CMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_SPARE1_CMODE register description at address offset 0x264
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_spare1_cmode
  * SERDES_LANE_ANA_PLL::SPARE1
  */

typedef union {
  struct {
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="0" ResetValue="None"
    uint32_t CFG_SPARE_DIG2WRAP_CMODE : 20;
    ///< SERDES_LANE_ANA_PLL::SPARE1::cfg_spare_dig2wrap
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_spare1_cmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_SPARE1_CMODE_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_SPARE1_CMODE_RD_MASK (0x001ffffeU)
#define PMA_TXPLLCFGLOADER_MSG_SPARE1_CMODE_WR_MASK (0x001ffffeU)


///< SERDES_LANE_ANA_PLL::SPARE1::cfg_spare_dig2wrap
#define PMA_TXPLLCFGLOADER_MSG_SPARE1_CMODE_CFG_SPARE_DIG2WRAP_CMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_SPARE1_CMODE_CFG_SPARE_DIG2WRAP_CMODE_BF_WID (20)
#define PMA_TXPLLCFGLOADER_MSG_SPARE1_CMODE_CFG_SPARE_DIG2WRAP_CMODE_BF_MSK (0x001FFFFE)
#define PMA_TXPLLCFGLOADER_MSG_SPARE1_CMODE_CFG_SPARE_DIG2WRAP_CMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_DCO_SWING0_CMODE register description at address offset 0x268
  *
  * Register default value:        0x0022006D
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_dco_swing0_cmode
  * SERDES_LANE_ANA_PLL::DCO_SWING0
  */

typedef union {
  struct {
    uint32_t CFG_DCO_SWING_VPEAK_MODE_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_dco_swing_vpeak_mode
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t CFG_PKSEN_VREF_TARGET_CMODE : 6;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_pksen_vref_target
    ///< AccessType="RW" BitOffset="1" ResetValue="0x36"
    uint32_t CFG_SKIP_DCO_SWING_SLEEP_SEL_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_skip_dco_swing_sleep_sel
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t CFG_DCO_SWING_BY_FW_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_dco_swing_by_fw
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CFG_START_PKSEN_READ_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_start_pksen_read
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t CFG_START_LDODCO_STEP_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_start_ldodco_step
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t CFG_LDODCO_STEP_DIR_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_ldodco_step_dir
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t CFG_LDODCO_STEP_CHICKEN_BIT_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_ldodco_step_chicken_bit
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t CFG_PKSEN_SETTLE_TIMER_LIMIT_CMODE : 3;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_pksen_settle_timer_limit
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t CFG_PKSEN_COMP_OUT_CHICKEN_BIT_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_pksen_comp_out_chicken_bit
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t CFG_LDODCO_ADAPT_EN_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_ldodco_adapt_en
    ///< AccessType="RW" BitOffset="17" ResetValue="0x1"
    uint32_t CFG_PKSEN_VREF_OVRD_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_pksen_vref_ovrd
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t CFG_LDODCO_VREF_OVRD_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_ldodco_vref_ovrd
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t CFG_LDODCO_STEP_SETTLE_TIMER_LIMIT_CMODE : 2;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_ldodco_step_settle_timer_limit
    ///< AccessType="RW" BitOffset="20" ResetValue="0x2"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_dco_swing0_cmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_DEFAULT (0x0022006dU)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_RD_MASK (0x003fffffU)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_WR_MASK (0x003fffffU)


///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_dco_swing_vpeak_mode
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_DCO_SWING_VPEAK_MODE_CMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_DCO_SWING_VPEAK_MODE_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_DCO_SWING_VPEAK_MODE_CMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_DCO_SWING_VPEAK_MODE_CMODE_BF_DEF (0x00000001)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_pksen_vref_target
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_PKSEN_VREF_TARGET_CMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_PKSEN_VREF_TARGET_CMODE_BF_WID ( 6)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_PKSEN_VREF_TARGET_CMODE_BF_MSK (0x0000007E)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_PKSEN_VREF_TARGET_CMODE_BF_DEF (0x0000006C)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_skip_dco_swing_sleep_sel
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_SKIP_DCO_SWING_SLEEP_SEL_CMODE_BF_OFF ( 7)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_SKIP_DCO_SWING_SLEEP_SEL_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_SKIP_DCO_SWING_SLEEP_SEL_CMODE_BF_MSK (0x00000080)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_SKIP_DCO_SWING_SLEEP_SEL_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_dco_swing_by_fw
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_DCO_SWING_BY_FW_CMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_DCO_SWING_BY_FW_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_DCO_SWING_BY_FW_CMODE_BF_MSK (0x00000100)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_DCO_SWING_BY_FW_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_start_pksen_read
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_START_PKSEN_READ_CMODE_BF_OFF ( 9)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_START_PKSEN_READ_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_START_PKSEN_READ_CMODE_BF_MSK (0x00000200)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_START_PKSEN_READ_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_start_ldodco_step
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_START_LDODCO_STEP_CMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_START_LDODCO_STEP_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_START_LDODCO_STEP_CMODE_BF_MSK (0x00000400)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_START_LDODCO_STEP_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_ldodco_step_dir
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_LDODCO_STEP_DIR_CMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_LDODCO_STEP_DIR_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_LDODCO_STEP_DIR_CMODE_BF_MSK (0x00000800)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_LDODCO_STEP_DIR_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_ldodco_step_chicken_bit
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_LDODCO_STEP_CHICKEN_BIT_CMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_LDODCO_STEP_CHICKEN_BIT_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_LDODCO_STEP_CHICKEN_BIT_CMODE_BF_MSK (0x00001000)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_LDODCO_STEP_CHICKEN_BIT_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_pksen_settle_timer_limit
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_PKSEN_SETTLE_TIMER_LIMIT_CMODE_BF_OFF (13)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_PKSEN_SETTLE_TIMER_LIMIT_CMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_PKSEN_SETTLE_TIMER_LIMIT_CMODE_BF_MSK (0x0000E000)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_PKSEN_SETTLE_TIMER_LIMIT_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_pksen_comp_out_chicken_bit
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_PKSEN_COMP_OUT_CHICKEN_BIT_CMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_PKSEN_COMP_OUT_CHICKEN_BIT_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_PKSEN_COMP_OUT_CHICKEN_BIT_CMODE_BF_MSK (0x00010000)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_PKSEN_COMP_OUT_CHICKEN_BIT_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_ldodco_adapt_en
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_LDODCO_ADAPT_EN_CMODE_BF_OFF (17)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_LDODCO_ADAPT_EN_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_LDODCO_ADAPT_EN_CMODE_BF_MSK (0x00020000)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_LDODCO_ADAPT_EN_CMODE_BF_DEF (0x00020000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_pksen_vref_ovrd
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_PKSEN_VREF_OVRD_CMODE_BF_OFF (18)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_PKSEN_VREF_OVRD_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_PKSEN_VREF_OVRD_CMODE_BF_MSK (0x00040000)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_PKSEN_VREF_OVRD_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_ldodco_vref_ovrd
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_LDODCO_VREF_OVRD_CMODE_BF_OFF (19)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_LDODCO_VREF_OVRD_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_LDODCO_VREF_OVRD_CMODE_BF_MSK (0x00080000)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_LDODCO_VREF_OVRD_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_ldodco_step_settle_timer_limit
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_LDODCO_STEP_SETTLE_TIMER_LIMIT_CMODE_BF_OFF (20)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_LDODCO_STEP_SETTLE_TIMER_LIMIT_CMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_LDODCO_STEP_SETTLE_TIMER_LIMIT_CMODE_BF_MSK (0x00300000)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_CFG_LDODCO_STEP_SETTLE_TIMER_LIMIT_CMODE_BF_DEF (0x00200000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_DCO_SWING1_CMODE register description at address offset 0x26c
  *
  * Register default value:        0x00000005
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_dco_swing1_cmode
  * SERDES_LANE_ANA_PLL::DCO_SWING1
  */

typedef union {
  struct {
    uint32_t CFG_LDODCO_ADAPT_CTR_DELAY_CMODE : 3;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_ldodco_adapt_ctr_delay
    ///< AccessType="RW" BitOffset="0" ResetValue="0x5"
    uint32_t CFG_LDODCO_ADAPT_STEP_CMODE : 3;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_ldodco_adapt_step
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t CFG_DFX_LDODCO_ADAPT_TOGGLE_EN_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_dfx_ldodco_adapt_toggle_en
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t CFG_DFX_LDODCO_ADAPT_DIR_OVR_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_dfx_ldodco_adapt_dir_ovr
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t CFG_DFX_LDODCO_ADAPT_ENABLE_OVR_CMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_dfx_ldodco_adapt_enable_ovr
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CFG_DFX_LDODCO_ADAPT_VAL_OVR_CMODE : 9;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_dfx_ldodco_adapt_val_ovr
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_dco_swing1_cmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_CMODE_DEFAULT (0x00000005U)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_CMODE_RD_MASK (0x0003ffffU)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_CMODE_WR_MASK (0x0003ffffU)


///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_ldodco_adapt_ctr_delay
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_CMODE_CFG_LDODCO_ADAPT_CTR_DELAY_CMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_CMODE_CFG_LDODCO_ADAPT_CTR_DELAY_CMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_CMODE_CFG_LDODCO_ADAPT_CTR_DELAY_CMODE_BF_MSK (0x00000007)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_CMODE_CFG_LDODCO_ADAPT_CTR_DELAY_CMODE_BF_DEF (0x00000005)

///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_ldodco_adapt_step
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_CMODE_CFG_LDODCO_ADAPT_STEP_CMODE_BF_OFF ( 3)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_CMODE_CFG_LDODCO_ADAPT_STEP_CMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_CMODE_CFG_LDODCO_ADAPT_STEP_CMODE_BF_MSK (0x00000038)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_CMODE_CFG_LDODCO_ADAPT_STEP_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_dfx_ldodco_adapt_toggle_en
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_CMODE_CFG_DFX_LDODCO_ADAPT_TOGGLE_EN_CMODE_BF_OFF ( 6)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_CMODE_CFG_DFX_LDODCO_ADAPT_TOGGLE_EN_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_CMODE_CFG_DFX_LDODCO_ADAPT_TOGGLE_EN_CMODE_BF_MSK (0x00000040)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_CMODE_CFG_DFX_LDODCO_ADAPT_TOGGLE_EN_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_dfx_ldodco_adapt_dir_ovr
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_CMODE_CFG_DFX_LDODCO_ADAPT_DIR_OVR_CMODE_BF_OFF ( 7)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_CMODE_CFG_DFX_LDODCO_ADAPT_DIR_OVR_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_CMODE_CFG_DFX_LDODCO_ADAPT_DIR_OVR_CMODE_BF_MSK (0x00000080)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_CMODE_CFG_DFX_LDODCO_ADAPT_DIR_OVR_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_dfx_ldodco_adapt_enable_ovr
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_CMODE_CFG_DFX_LDODCO_ADAPT_EN_OVR_CMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_CMODE_CFG_DFX_LDODCO_ADAPT_EN_OVR_CMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_CMODE_CFG_DFX_LDODCO_ADAPT_EN_OVR_CMODE_BF_MSK (0x00000100)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_CMODE_CFG_DFX_LDODCO_ADAPT_EN_OVR_CMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_dfx_ldodco_adapt_val_ovr
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_CMODE_CFG_DFX_LDODCO_ADAPT_VAL_OVR_CMODE_BF_OFF ( 9)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_CMODE_CFG_DFX_LDODCO_ADAPT_VAL_OVR_CMODE_BF_WID ( 9)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_CMODE_CFG_DFX_LDODCO_ADAPT_VAL_OVR_CMODE_BF_MSK (0x0003FE00)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_CMODE_CFG_DFX_LDODCO_ADAPT_VAL_OVR_CMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_TDC4_CMODE register description at address offset 0x270
  *
  * Register default value:        0xCAB6A27C
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_tdc4_cmode
  * SERDES_LANE_ANA_PLL::TDC4
  */

typedef union {
  struct {
    uint32_t CFG_VTDC_MINUS2_THRESH_CMODE : 8;
    ///< SERDES_LANE_ANA_PLL::TDC4::cfg_vtdc_minus2_thresh
    ///< AccessType="RW" BitOffset="0" ResetValue="0x7C"
    uint32_t CFG_VTDC_MINUS1_THRESH_CMODE : 8;
    ///< SERDES_LANE_ANA_PLL::TDC4::cfg_vtdc_minus1_thresh
    ///< AccessType="RW" BitOffset="8" ResetValue="0xA2"
    uint32_t CFG_VTDC_PLUS1_THRESH_CMODE : 8;
    ///< SERDES_LANE_ANA_PLL::TDC4::cfg_vtdc_plus1_thresh
    ///< AccessType="RW" BitOffset="16" ResetValue="0xB6"
    uint32_t CFG_VTDC_PLUS2_THRESH_CMODE : 8;
    ///< SERDES_LANE_ANA_PLL::TDC4::cfg_vtdc_plus2_thresh
    ///< AccessType="RW" BitOffset="24" ResetValue="0xCA"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_tdc4_cmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_TDC4_CMODE_DEFAULT (0xcab6a27cU)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_CMODE_RD_MASK (0xffffffffU)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_CMODE_WR_MASK (0xffffffffU)


///< SERDES_LANE_ANA_PLL::TDC4::cfg_vtdc_minus2_thresh
#define PMA_TXPLLCFGLOADER_MSG_TDC4_CMODE_CFG_VTDC_MINUS2_THRESH_CMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_CMODE_CFG_VTDC_MINUS2_THRESH_CMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_CMODE_CFG_VTDC_MINUS2_THRESH_CMODE_BF_MSK (0x000000FF)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_CMODE_CFG_VTDC_MINUS2_THRESH_CMODE_BF_DEF (0x0000007C)

///< SERDES_LANE_ANA_PLL::TDC4::cfg_vtdc_minus1_thresh
#define PMA_TXPLLCFGLOADER_MSG_TDC4_CMODE_CFG_VTDC_MINUS1_THRESH_CMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_CMODE_CFG_VTDC_MINUS1_THRESH_CMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_CMODE_CFG_VTDC_MINUS1_THRESH_CMODE_BF_MSK (0x0000FF00)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_CMODE_CFG_VTDC_MINUS1_THRESH_CMODE_BF_DEF (0x0000A200)

///< SERDES_LANE_ANA_PLL::TDC4::cfg_vtdc_plus1_thresh
#define PMA_TXPLLCFGLOADER_MSG_TDC4_CMODE_CFG_VTDC_PLUS1_THRESH_CMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_CMODE_CFG_VTDC_PLUS1_THRESH_CMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_CMODE_CFG_VTDC_PLUS1_THRESH_CMODE_BF_MSK (0x00FF0000)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_CMODE_CFG_VTDC_PLUS1_THRESH_CMODE_BF_DEF (0x00B60000)

///< SERDES_LANE_ANA_PLL::TDC4::cfg_vtdc_plus2_thresh
#define PMA_TXPLLCFGLOADER_MSG_TDC4_CMODE_CFG_VTDC_PLUS2_THRESH_CMODE_BF_OFF (24)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_CMODE_CFG_VTDC_PLUS2_THRESH_CMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_CMODE_CFG_VTDC_PLUS2_THRESH_CMODE_BF_MSK (0xFF000000)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_CMODE_CFG_VTDC_PLUS2_THRESH_CMODE_BF_DEF (0xCA000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_DIV0_DMODE register description at address offset 0x280
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_div0_dmode
  * LCPLL_DIV0 Register
  */

typedef union {
  struct {
    uint32_t O_FBDIV_FRAC_DMODE : 32;
    ///< Feedback divider fractional ratio.                          Total
    ///< ratio is:                         If cfg_dcodiv2_to_fbdiv_bypass=1
    ///< : (integer+fractional/2^32)                         otherwise : (integer+fractional/2^32)
    ///< x 2
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_div0_dmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_DIV0_DMODE_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_DIV0_DMODE_RD_MASK (0xffffffffU)
#define PMA_TXPLLCFGLOADER_MSG_DIV0_DMODE_WR_MASK (0xffffffffU)


///< Feedback divider fractional ratio.                          Total
///< ratio is:                         If cfg_dcodiv2_to_fbdiv_bypass=1
///< : (integer+fractional/2^32)                         otherwise : (integer+fractional/2^32)
///< x 2
#define PMA_TXPLLCFGLOADER_MSG_DIV0_DMODE_O_FBDIV_FRAC_DMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_DIV0_DMODE_O_FBDIV_FRAC_DMODE_BF_WID (32)
#define PMA_TXPLLCFGLOADER_MSG_DIV0_DMODE_O_FBDIV_FRAC_DMODE_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLLCFGLOADER_MSG_DIV0_DMODE_O_FBDIV_FRAC_DMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_DIV1_DMODE register description at address offset 0x284
  *
  * Register default value:        0x00003050
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_div1_dmode
  * LCPLL_DIV1 Register
  */

typedef union {
  struct {
    uint32_t O_FBDIV_INTGR_DMODE : 10;
    ///< Feedback divider integer ratio                         Total ratio
    ///< is:                         If cfg_dcodiv2_to_fbdiv_bypass=1 : (integer+fractional/2^32)
    ///< otherwise : (integer+fractional/2^32) x 2
    ///< Default is 80 for main common PLL (refclk 156.25MHz and Fdco 12.5GHz)
    ///< AccessType="RW" BitOffset="0" ResetValue="0x50"
    uint32_t O_FRACNEN_H_DMODE : 1;
    ///< Enables fractional ratio.                         Set this bit to
    ///< 0 if fractional ratio is 0, else to 1.                         If
    ///< this bit is 1 while fractional is 0 then fbclk to refclk phase won&#39;t
    ///< be deterministic.
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t CFG_REFCLK_CNT_LIMIT_DMODE : 3;
    ///< Defines number of refclk cycles in frequency measurement during AFC
    ///< calibration.                         Number of cycles = 2^reg
    ///< For 156MHz clock and 12.5GHz DCO clock, HS counter (@Fdco/2) samples
    ///< 40 cycles per refclk (=fbdiv_intgr).                         DTR step
    ///< size is 20MHz, so to achieve accuracy of 5MHz, HS counter should reach
    ///< 12.5G/5M=2500.                         Therefore refclk cycles = 2500/40=62.5,
    ///< so 2^6 would be appropriate.
    ///< use the following formula for other frequencies (Frefclk after prediv):
    ///< cfg_refclk_cnt_limit = round(log2(2*Frefclk/5MHz))
    ///< AccessType="RW" BitOffset="11" ResetValue="0x6"
    uint32_t CFG_FRACN_SD_STEP_EN_DMODE : 1;
    ///< Injects an impulse into fracN SD accumulator.
    ///< This inject a step in the feed-forward offset and as a result would
    ///< create a step on the PLL phase.                         This feature
    ///< can be useful in case of coupling between PLLs that run at exact same
    ///< frequency (both at fracN)
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t CFG_FRACN_SD_STEP_DMODE : 6;
    ///< Sets magnitude of step in fracN SD accumulator, which is added to
    ///< the MSB of the SD bus.                         Each LSB here would
    ///< shift PLL phase by 2xTdco/2^6
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t CFG_LF_BAND_INUSE_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DIV1::cfg_lf_band_inuse
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t CFG_LF_BAND_SEL_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DIV1::cfg_lf_band_sel
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t  : 9;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_div1_dmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_DIV1_DMODE_DEFAULT (0x00003050U)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_DMODE_RD_MASK (0x007fffffU)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_DMODE_WR_MASK (0x007fffffU)


///< Feedback divider integer ratio                         Total ratio
///< is:                         If cfg_dcodiv2_to_fbdiv_bypass=1 : (integer+fractional/2^32)
///< otherwise : (integer+fractional/2^32) x 2
///< Default is 80 for main common PLL (refclk 156.25MHz and Fdco 12.5GHz)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_DMODE_O_FBDIV_INTGR_DMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_DMODE_O_FBDIV_INTGR_DMODE_BF_WID (10)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_DMODE_O_FBDIV_INTGR_DMODE_BF_MSK (0x000003FF)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_DMODE_O_FBDIV_INTGR_DMODE_BF_DEF (0x00000050)

///< Enables fractional ratio.                         Set this bit to
///< 0 if fractional ratio is 0, else to 1.                         If
///< this bit is 1 while fractional is 0 then fbclk to refclk phase won&#39;t
///< be deterministic.
#define PMA_TXPLLCFGLOADER_MSG_DIV1_DMODE_O_FRACNEN_H_DMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_DMODE_O_FRACNEN_H_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_DMODE_O_FRACNEN_H_DMODE_BF_MSK (0x00000400)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_DMODE_O_FRACNEN_H_DMODE_BF_DEF (0x00000000)

///< Defines number of refclk cycles in frequency measurement during AFC
///< calibration.                         Number of cycles = 2^reg
///< For 156MHz clock and 12.5GHz DCO clock, HS counter (@Fdco/2) samples
///< 40 cycles per refclk (=fbdiv_intgr).                         DTR step
///< size is 20MHz, so to achieve accuracy of 5MHz, HS counter should reach
///< 12.5G/5M=2500.                         Therefore refclk cycles = 2500/40=62.5,
///< so 2^6 would be appropriate.
///< use the following formula for other frequencies (Frefclk after prediv):
///< cfg_refclk_cnt_limit = round(log2(2*Frefclk/5MHz))
#define PMA_TXPLLCFGLOADER_MSG_DIV1_DMODE_CFG_REFCLK_CNT_LIMIT_DMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_DMODE_CFG_REFCLK_CNT_LIMIT_DMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_DMODE_CFG_REFCLK_CNT_LIMIT_DMODE_BF_MSK (0x00003800)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_DMODE_CFG_REFCLK_CNT_LIMIT_DMODE_BF_DEF (0x00003000)

///< Injects an impulse into fracN SD accumulator.
///< This inject a step in the feed-forward offset and as a result would
///< create a step on the PLL phase.                         This feature
///< can be useful in case of coupling between PLLs that run at exact same
///< frequency (both at fracN)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_DMODE_CFG_FRACN_SD_STEP_EN_DMODE_BF_OFF (14)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_DMODE_CFG_FRACN_SD_STEP_EN_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_DMODE_CFG_FRACN_SD_STEP_EN_DMODE_BF_MSK (0x00004000)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_DMODE_CFG_FRACN_SD_STEP_EN_DMODE_BF_DEF (0x00000000)

///< Sets magnitude of step in fracN SD accumulator, which is added to
///< the MSB of the SD bus.                         Each LSB here would
///< shift PLL phase by 2xTdco/2^6
#define PMA_TXPLLCFGLOADER_MSG_DIV1_DMODE_CFG_FRACN_SD_STEP_DMODE_BF_OFF (15)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_DMODE_CFG_FRACN_SD_STEP_DMODE_BF_WID ( 6)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_DMODE_CFG_FRACN_SD_STEP_DMODE_BF_MSK (0x001F8000)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_DMODE_CFG_FRACN_SD_STEP_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DIV1::cfg_lf_band_inuse
#define PMA_TXPLLCFGLOADER_MSG_DIV1_DMODE_CFG_LF_BAND_INUSE_DMODE_BF_OFF (21)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_DMODE_CFG_LF_BAND_INUSE_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_DMODE_CFG_LF_BAND_INUSE_DMODE_BF_MSK (0x00200000)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_DMODE_CFG_LF_BAND_INUSE_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DIV1::cfg_lf_band_sel
#define PMA_TXPLLCFGLOADER_MSG_DIV1_DMODE_CFG_LF_BAND_SEL_DMODE_BF_OFF (22)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_DMODE_CFG_LF_BAND_SEL_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_DMODE_CFG_LF_BAND_SEL_DMODE_BF_MSK (0x00400000)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_DMODE_CFG_LF_BAND_SEL_DMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_ADL0_DMODE register description at address offset 0x288
  *
  * Register default value:        0x01800007
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_adl0_dmode
  * SERDES_LANE_ANA_PLL::ADL0
  */

typedef union {
  struct {
    uint32_t CFG_ADL_ENABLE_DMODE : 1;
    ///< Enable adaptive delay line in fracN mode (only when o_fracnen_h=1).
    ///< While &#39;1&#39; it is also disable feed-forward cancellation.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t CFG_ADL_RANGE_DMODE : 3;
    ///< Configs ADL range to be used. The formula (prelay results, need to
    ///< be updated):                         round((138.75 - 1.2e12/Fdco)/13.266)
    ///< [Fdco in Hz]
    ///< AccessType="RW" BitOffset="1" ResetValue="0x3"
    uint32_t CFG_ADL_POS_OFFSET_DMODE : 8;
    ///< Positive ADL INL compensation.                         Each register
    ///< bit corresponding to each cap_ctrl bus bit.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t CFG_ADL_NEG_OFFSET_DMODE : 8;
    ///< Negative ADL INL compensation.                         Each register
    ///< bit corresponding to each cap_ctrl bus bit.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t CFG_ADL_ENABLE_OVR_EN_DMODE : 1;
    ///< adl bypass/enable force (see adl_enable_ovr_val).
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t CFG_ADL_ENABLE_OVR_VAL_DMODE : 1;
    ///< While adl_enable_ovr_en= 1.                         0 - force adl
    ///< bypass.                         1 - force adl enable.
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t CFG_ADL_CAP_CTRL_OVR_EN_DMODE : 1;
    ///< Override enable for cfg_adl_cap_ctrl_ovr_val[8:0]
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t CFG_ADL_CAP_CTRL_OVR_VAL_DMODE : 9;
    ///< Override value for cap_ctrl bus to ADL.
    ///< AccessType="RW" BitOffset="23" ResetValue="0x3"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_adl0_dmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_ADL0_DMODE_DEFAULT (0x01800007U)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_DMODE_RD_MASK (0xffffffffU)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_DMODE_WR_MASK (0xffffffffU)


///< Enable adaptive delay line in fracN mode (only when o_fracnen_h=1).
///< While &#39;1&#39; it is also disable feed-forward cancellation.
#define PMA_TXPLLCFGLOADER_MSG_ADL0_DMODE_CFG_ADL_EN_DMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_DMODE_CFG_ADL_EN_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_DMODE_CFG_ADL_EN_DMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_DMODE_CFG_ADL_EN_DMODE_BF_DEF (0x00000001)

///< Configs ADL range to be used. The formula (prelay results, need to
///< be updated):                         round((138.75 - 1.2e12/Fdco)/13.266)
///< [Fdco in Hz]
#define PMA_TXPLLCFGLOADER_MSG_ADL0_DMODE_CFG_ADL_RANGE_DMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_DMODE_CFG_ADL_RANGE_DMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_DMODE_CFG_ADL_RANGE_DMODE_BF_MSK (0x0000000E)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_DMODE_CFG_ADL_RANGE_DMODE_BF_DEF (0x00000006)

///< Positive ADL INL compensation.                         Each register
///< bit corresponding to each cap_ctrl bus bit.
#define PMA_TXPLLCFGLOADER_MSG_ADL0_DMODE_CFG_ADL_POS_OFFSET_DMODE_BF_OFF ( 4)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_DMODE_CFG_ADL_POS_OFFSET_DMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_DMODE_CFG_ADL_POS_OFFSET_DMODE_BF_MSK (0x00000FF0)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_DMODE_CFG_ADL_POS_OFFSET_DMODE_BF_DEF (0x00000000)

///< Negative ADL INL compensation.                         Each register
///< bit corresponding to each cap_ctrl bus bit.
#define PMA_TXPLLCFGLOADER_MSG_ADL0_DMODE_CFG_ADL_NEG_OFFSET_DMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_DMODE_CFG_ADL_NEG_OFFSET_DMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_DMODE_CFG_ADL_NEG_OFFSET_DMODE_BF_MSK (0x000FF000)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_DMODE_CFG_ADL_NEG_OFFSET_DMODE_BF_DEF (0x00000000)

///< adl bypass/enable force (see adl_enable_ovr_val).
#define PMA_TXPLLCFGLOADER_MSG_ADL0_DMODE_CFG_ADL_EN_OVR_EN_DMODE_BF_OFF (20)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_DMODE_CFG_ADL_EN_OVR_EN_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_DMODE_CFG_ADL_EN_OVR_EN_DMODE_BF_MSK (0x00100000)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_DMODE_CFG_ADL_EN_OVR_EN_DMODE_BF_DEF (0x00000000)

///< While adl_enable_ovr_en= 1.                         0 - force adl
///< bypass.                         1 - force adl enable.
#define PMA_TXPLLCFGLOADER_MSG_ADL0_DMODE_CFG_ADL_EN_OVR_VAL_DMODE_BF_OFF (21)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_DMODE_CFG_ADL_EN_OVR_VAL_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_DMODE_CFG_ADL_EN_OVR_VAL_DMODE_BF_MSK (0x00200000)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_DMODE_CFG_ADL_EN_OVR_VAL_DMODE_BF_DEF (0x00000000)

///< Override enable for cfg_adl_cap_ctrl_ovr_val[8:0]
#define PMA_TXPLLCFGLOADER_MSG_ADL0_DMODE_CFG_ADL_CAP_CTRL_OVR_EN_DMODE_BF_OFF (22)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_DMODE_CFG_ADL_CAP_CTRL_OVR_EN_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_DMODE_CFG_ADL_CAP_CTRL_OVR_EN_DMODE_BF_MSK (0x00400000)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_DMODE_CFG_ADL_CAP_CTRL_OVR_EN_DMODE_BF_DEF (0x00000000)

///< Override value for cap_ctrl bus to ADL.
#define PMA_TXPLLCFGLOADER_MSG_ADL0_DMODE_CFG_ADL_CAP_CTRL_OVR_VAL_DMODE_BF_OFF (23)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_DMODE_CFG_ADL_CAP_CTRL_OVR_VAL_DMODE_BF_WID ( 9)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_DMODE_CFG_ADL_CAP_CTRL_OVR_VAL_DMODE_BF_MSK (0xFF800000)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_DMODE_CFG_ADL_CAP_CTRL_OVR_VAL_DMODE_BF_DEF (0x01800000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_ADL1_DMODE register description at address offset 0x28c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_adl1_dmode
  * SERDES_LANE_ANA_PLL::ADL1
  */

typedef union {
  struct {
    uint32_t CFG_ADL_MONITOR_OCT_SEL_DMODE : 8;
    ///< SERDES_LANE_ANA_PLL::ADL1::cfg_adl_monitor_oct_sel
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_TDC_STATUS_EN_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ADL1::cfg_tdc_status_en
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CFG_ADL_MONITOR_THR_DMODE : 5;
    ///< SERDES_LANE_ANA_PLL::ADL1::cfg_adl_monitor_thr
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t  : 18;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_adl1_dmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_ADL1_DMODE_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_DMODE_RD_MASK (0x00003fffU)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_DMODE_WR_MASK (0x00003fffU)


///< SERDES_LANE_ANA_PLL::ADL1::cfg_adl_monitor_oct_sel
#define PMA_TXPLLCFGLOADER_MSG_ADL1_DMODE_CFG_ADL_MON_OCT_SEL_DMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_DMODE_CFG_ADL_MON_OCT_SEL_DMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_DMODE_CFG_ADL_MON_OCT_SEL_DMODE_BF_MSK (0x000000FF)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_DMODE_CFG_ADL_MON_OCT_SEL_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ADL1::cfg_tdc_status_en
#define PMA_TXPLLCFGLOADER_MSG_ADL1_DMODE_CFG_TDC_STAT_EN_DMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_DMODE_CFG_TDC_STAT_EN_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_DMODE_CFG_TDC_STAT_EN_DMODE_BF_MSK (0x00000100)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_DMODE_CFG_TDC_STAT_EN_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ADL1::cfg_adl_monitor_thr
#define PMA_TXPLLCFGLOADER_MSG_ADL1_DMODE_CFG_ADL_MON_THR_DMODE_BF_OFF ( 9)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_DMODE_CFG_ADL_MON_THR_DMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_DMODE_CFG_ADL_MON_THR_DMODE_BF_MSK (0x00003E00)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_DMODE_CFG_ADL_MON_THR_DMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_FRAC_LOCK0_DMODE register description at address offset 0x290
  *
  * Register default value:        0x00002D0C
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_frac_lock0_dmode
  * LCPLL_FRAC_LOCK Register
  */

typedef union {
  struct {
    uint32_t O_FEEDFWRDGAIN_DMODE : 8;
    ///< Feed-forward gain for fractional mode.                         When
    ///< o_feedfwrdcal_en_h=0, this will determine the gain.
    ///< When o_feedfwrdcal_en_h=1, this will determine initial value of the
    ///< gain.                          Use the following formula:
    ///< Full rate: o_feedfwrdgain = 1/(Fdco*tdc_fine_step)
    ///< Half rate: o_feedfwrdgain = 2/(Fdco*tdc_fine_step)
    ///< For franN mode, tdc_fine_step is 6.5psec.
    ///< AccessType="RW" BitOffset="0" ResetValue="0xC"
    uint32_t O_FEEDFWRDCAL_EN_H_DMODE : 1;
    ///< Feedfward gain adaptive mode enable
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1"
    uint32_t O_FEEDFWRDCAL_PAUSE_H_DMODE : 1;
    ///< This bit is for dynamically turning on and off feed forward gain adaptive
    ///< mode.
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t O_DCODITHEREN_H_DMODE : 1;
    ///< DCO fine dithering enable signal.
    ///< AccessType="RW" BitOffset="10" ResetValue="0x1"
    uint32_t O_LOCK_CRITERIA_DMODE : 3;
    ///< Phase lock indicator criteria. Asserted high when phase error is less
    ///< than or equal to the threshold value for:
    ///< 000: 16 consecutive cycles                         001: 32 consecutive
    ///< cycles                         010: 48 consecutive cycles
    ///< 011: 64 consecutive cycles                         100: 80 consecutive
    ///< cycles                         101: 96 consecutive cycles
    ///< 110: 112 consecutive cycles                         111: 128 consecutive
    ///< cycles
    ///< AccessType="RW" BitOffset="11" ResetValue="0x5"
    uint32_t O_FBDIV_STROBE_H_DMODE : 1;
    ///< Enables sampling feedback ratio (integer+fractional) into PLL logic.
    ///< Before changing feedback ratio dynamically (while PLL is running),
    ///< one should deassert this bit until new ratio is udpated in registers.
    ///< This is to ensure safe and synchronoius update of ratio.
    ///< The feedback ratio will propagate automatically into PLL logic while
    ///< PLL is off until DCO settle state is done.
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t O_DITHER_VALUE_DMODE : 5;
    ///< DCO Dither Override Value (in case o_dither_ovrd=1).
    ///< 5 MSB of the filter fractional code (rest 4 LSBs are set to 0).
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t CFG_SIGMA_DELTA2_SEL_DMODE : 1;
    ///< 0 - Uses the first order sigma delta modulator for the feed forward
    ///< cancellation mechanism.                         1 - Uses the second
    ///< order sigma delta modulator for the feed forward cancellation mechanism.
    ///< Note that in this mode the adaptive ffgain feature doesn&#39;t work.
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t CFG_HIGH_SPEED_SD_EN_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::FRAC_LOCK0::cfg_high_speed_sd_en
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_frac_lock0_dmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_DMODE_DEFAULT (0x00002d0cU)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_DMODE_RD_MASK (0x003fffffU)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_DMODE_WR_MASK (0x003fffffU)


///< Feed-forward gain for fractional mode.                         When
///< o_feedfwrdcal_en_h=0, this will determine the gain.
///< When o_feedfwrdcal_en_h=1, this will determine initial value of the
///< gain.                          Use the following formula:
///< Full rate: o_feedfwrdgain = 1/(Fdco*tdc_fine_step)
///< Half rate: o_feedfwrdgain = 2/(Fdco*tdc_fine_step)
///< For franN mode, tdc_fine_step is 6.5psec.
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_DMODE_O_FEEDFWRDGAIN_DMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_DMODE_O_FEEDFWRDGAIN_DMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_DMODE_O_FEEDFWRDGAIN_DMODE_BF_MSK (0x000000FF)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_DMODE_O_FEEDFWRDGAIN_DMODE_BF_DEF (0x0000000C)

///< Feedfward gain adaptive mode enable
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_DMODE_O_FEEDFWRDCAL_EN_H_DMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_DMODE_O_FEEDFWRDCAL_EN_H_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_DMODE_O_FEEDFWRDCAL_EN_H_DMODE_BF_MSK (0x00000100)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_DMODE_O_FEEDFWRDCAL_EN_H_DMODE_BF_DEF (0x00000100)

///< This bit is for dynamically turning on and off feed forward gain adaptive
///< mode.
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_DMODE_O_FEEDFWRDCAL_PAUSE_H_DMODE_BF_OFF ( 9)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_DMODE_O_FEEDFWRDCAL_PAUSE_H_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_DMODE_O_FEEDFWRDCAL_PAUSE_H_DMODE_BF_MSK (0x00000200)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_DMODE_O_FEEDFWRDCAL_PAUSE_H_DMODE_BF_DEF (0x00000000)

///< DCO fine dithering enable signal.
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_DMODE_O_DCODITHEREN_H_DMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_DMODE_O_DCODITHEREN_H_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_DMODE_O_DCODITHEREN_H_DMODE_BF_MSK (0x00000400)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_DMODE_O_DCODITHEREN_H_DMODE_BF_DEF (0x00000400)

///< Phase lock indicator criteria. Asserted high when phase error is less
///< than or equal to the threshold value for:
///< 000: 16 consecutive cycles                         001: 32 consecutive
///< cycles                         010: 48 consecutive cycles
///< 011: 64 consecutive cycles                         100: 80 consecutive
///< cycles                         101: 96 consecutive cycles
///< 110: 112 consecutive cycles                         111: 128 consecutive
///< cycles
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_DMODE_O_LOCK_CRITERIA_DMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_DMODE_O_LOCK_CRITERIA_DMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_DMODE_O_LOCK_CRITERIA_DMODE_BF_MSK (0x00003800)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_DMODE_O_LOCK_CRITERIA_DMODE_BF_DEF (0x00002800)

///< Enables sampling feedback ratio (integer+fractional) into PLL logic.
///< Before changing feedback ratio dynamically (while PLL is running),
///< one should deassert this bit until new ratio is udpated in registers.
///< This is to ensure safe and synchronoius update of ratio.
///< The feedback ratio will propagate automatically into PLL logic while
///< PLL is off until DCO settle state is done.
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_DMODE_O_FBDIV_STROBE_H_DMODE_BF_OFF (14)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_DMODE_O_FBDIV_STROBE_H_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_DMODE_O_FBDIV_STROBE_H_DMODE_BF_MSK (0x00004000)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_DMODE_O_FBDIV_STROBE_H_DMODE_BF_DEF (0x00000000)

///< DCO Dither Override Value (in case o_dither_ovrd=1).
///< 5 MSB of the filter fractional code (rest 4 LSBs are set to 0).
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_DMODE_O_DITHER_VAL_DMODE_BF_OFF (15)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_DMODE_O_DITHER_VAL_DMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_DMODE_O_DITHER_VAL_DMODE_BF_MSK (0x000F8000)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_DMODE_O_DITHER_VAL_DMODE_BF_DEF (0x00000000)

///< 0 - Uses the first order sigma delta modulator for the feed forward
///< cancellation mechanism.                         1 - Uses the second
///< order sigma delta modulator for the feed forward cancellation mechanism.
///< Note that in this mode the adaptive ffgain feature doesn&#39;t work.
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_DMODE_CFG_SIGMA_DELTA2_SEL_DMODE_BF_OFF (20)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_DMODE_CFG_SIGMA_DELTA2_SEL_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_DMODE_CFG_SIGMA_DELTA2_SEL_DMODE_BF_MSK (0x00100000)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_DMODE_CFG_SIGMA_DELTA2_SEL_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::FRAC_LOCK0::cfg_high_speed_sd_en
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_DMODE_CFG_HIGH_SPEED_SD_EN_DMODE_BF_OFF (21)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_DMODE_CFG_HIGH_SPEED_SD_EN_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_DMODE_CFG_HIGH_SPEED_SD_EN_DMODE_BF_MSK (0x00200000)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_DMODE_CFG_HIGH_SPEED_SD_EN_DMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_FRAC_LOCK1_DMODE register description at address offset 0x294
  *
  * Register default value:        0x00000045
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_frac_lock1_dmode
  * SERDES_LANE_ANA_PLL::FRAC_LOCK1
  */

typedef union {
  struct {
    uint32_t CFG_LOCK_THRESH_DMODE : 5;
    ///< Phase lock detect threshold.                         The PLL will
    ///< generate plllockout when the TDC phase error is within lockthresh
    ///< for a number of cycles determined by o_lock_criteria.
    ///< 0 is forbidden value.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x5"
    uint32_t CFG_FINE_FIRST_BOOST_REPEAT_DMODE : 3;
    ///< Determines the number of repetitions of the boost gain counter for
    ///< the first stage of the fine boost.                         The number
    ///< of overall repetitions is equal to cfg_fine_first_boost_repeat + 1
    ///< Set this to non-zero when PLL needs to lock on SSC&#39;ed refclk,
    ///< to allow enough time for the boost to handle fast cap-swap.
    ///< AccessType="RW" BitOffset="5" ResetValue="0x2"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_frac_lock1_dmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_DMODE_DEFAULT (0x00000045U)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_DMODE_RD_MASK (0x000000ffU)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_DMODE_WR_MASK (0x000000ffU)


///< Phase lock detect threshold.                         The PLL will
///< generate plllockout when the TDC phase error is within lockthresh
///< for a number of cycles determined by o_lock_criteria.
///< 0 is forbidden value.
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_DMODE_CFG_LOCK_THRESH_DMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_DMODE_CFG_LOCK_THRESH_DMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_DMODE_CFG_LOCK_THRESH_DMODE_BF_MSK (0x0000001F)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_DMODE_CFG_LOCK_THRESH_DMODE_BF_DEF (0x00000005)

///< Determines the number of repetitions of the boost gain counter for
///< the first stage of the fine boost.                         The number
///< of overall repetitions is equal to cfg_fine_first_boost_repeat + 1
///< Set this to non-zero when PLL needs to lock on SSC&#39;ed refclk,
///< to allow enough time for the boost to handle fast cap-swap.
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_DMODE_CFG_FINE_FIRST_BOOST_REPEAT_DMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_DMODE_CFG_FINE_FIRST_BOOST_REPEAT_DMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_DMODE_CFG_FINE_FIRST_BOOST_REPEAT_DMODE_BF_MSK (0x000000E0)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_DMODE_CFG_FINE_FIRST_BOOST_REPEAT_DMODE_BF_DEF (0x00000040)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_TDC0_DMODE register description at address offset 0x298
  *
  * Register default value:        0x0F00033F
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_tdc0_dmode
  * LCPLL_TDC0 Register
  */

typedef union {
  struct {
    uint32_t CFG_VTDC_REFCLK_CNT_LIMIT_DMODE : 4;
    ///< Number of reference clock cycles used in TDC clock calibration
    ///< AccessType="RW" BitOffset="0" ResetValue="0xF"
    uint32_t CFG_VTDC_FAST_SEL_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_fast_sel
    ///< AccessType="RW" BitOffset="4" ResetValue="0x1"
    uint32_t CFG_VTDC_OFFSET_CALIB_EN_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_offset_calib_en
    ///< AccessType="RW" BitOffset="5" ResetValue="0x1"
    uint32_t CFG_VTDC_PLUS_STDC_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_plus_stdc
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t CFG_VTDC_FINE_OFFSET_CHIKEN_BIT_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_fine_offset_chiken_bit
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t CFG_VTDC_OFFSET_TIMER_LIMIT_DMODE : 4;
    ///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_offset_timer_limit
    ///< AccessType="RW" BitOffset="8" ResetValue="0x3"
    uint32_t CFG_VTDC_FINE_OFFSET_OVRD_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_fine_offset_ovrd
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t CFG_VTDC_FINE_OFFSET_OVRD_VAL_DMODE : 5;
    ///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_fine_offset_ovrd_val
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t CFG_TDCPE_OFFSET_DMODE : 5;
    ///< Adding offset to 2&#39;s comp tdc value (integer signed)
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t CFG_TDC_BB_INPUT_SEL_DMODE : 1;
    ///< 1&#39;b0 - Uses bb TDC signal from analog
    ///< 1&#39;b1 - Uses MSB of tdceff signal as bb TDC input signal (TDC sign
    ///< bit)
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t CFG_STDC_STDDEV_INIT_DMODE : 4;
    ///< Initial value for stddev control bus before STDC calibration.
    ///< AccessType="RW" BitOffset="24" ResetValue="0xF"
    uint32_t CFG_FORCE_VTDC_OSC_DMODE : 1;
    ///< Forces VTDC to RO mode
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t CFG_VTDC_OFFSET_RANGE_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_offset_range
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_tdc0_dmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_DEFAULT (0x0f00033fU)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_RD_MASK (0x3fffffffU)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_WR_MASK (0x3fffffffU)


///< Number of reference clock cycles used in TDC clock calibration
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_CFG_VTDC_REFCLK_CNT_LIMIT_DMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_CFG_VTDC_REFCLK_CNT_LIMIT_DMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_CFG_VTDC_REFCLK_CNT_LIMIT_DMODE_BF_MSK (0x0000000F)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_CFG_VTDC_REFCLK_CNT_LIMIT_DMODE_BF_DEF (0x0000000F)

///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_fast_sel
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_CFG_VTDC_FAST_SEL_DMODE_BF_OFF ( 4)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_CFG_VTDC_FAST_SEL_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_CFG_VTDC_FAST_SEL_DMODE_BF_MSK (0x00000010)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_CFG_VTDC_FAST_SEL_DMODE_BF_DEF (0x00000010)

///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_offset_calib_en
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_CFG_VTDC_OFFSET_CALIB_EN_DMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_CFG_VTDC_OFFSET_CALIB_EN_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_CFG_VTDC_OFFSET_CALIB_EN_DMODE_BF_MSK (0x00000020)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_CFG_VTDC_OFFSET_CALIB_EN_DMODE_BF_DEF (0x00000020)

///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_plus_stdc
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_CFG_VTDC_PLUS_STDC_DMODE_BF_OFF ( 6)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_CFG_VTDC_PLUS_STDC_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_CFG_VTDC_PLUS_STDC_DMODE_BF_MSK (0x00000040)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_CFG_VTDC_PLUS_STDC_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_fine_offset_chiken_bit
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_CFG_VTDC_FINE_OFFSET_CHIKEN_BIT_DMODE_BF_OFF ( 7)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_CFG_VTDC_FINE_OFFSET_CHIKEN_BIT_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_CFG_VTDC_FINE_OFFSET_CHIKEN_BIT_DMODE_BF_MSK (0x00000080)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_CFG_VTDC_FINE_OFFSET_CHIKEN_BIT_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_offset_timer_limit
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_CFG_VTDC_OFFSET_TIMER_LIMIT_DMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_CFG_VTDC_OFFSET_TIMER_LIMIT_DMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_CFG_VTDC_OFFSET_TIMER_LIMIT_DMODE_BF_MSK (0x00000F00)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_CFG_VTDC_OFFSET_TIMER_LIMIT_DMODE_BF_DEF (0x00000300)

///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_fine_offset_ovrd
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_CFG_VTDC_FINE_OFFSET_OVRD_DMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_CFG_VTDC_FINE_OFFSET_OVRD_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_CFG_VTDC_FINE_OFFSET_OVRD_DMODE_BF_MSK (0x00001000)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_CFG_VTDC_FINE_OFFSET_OVRD_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_fine_offset_ovrd_val
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_CFG_VTDC_FINE_OFFSET_OVRD_VAL_DMODE_BF_OFF (13)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_CFG_VTDC_FINE_OFFSET_OVRD_VAL_DMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_CFG_VTDC_FINE_OFFSET_OVRD_VAL_DMODE_BF_MSK (0x0003E000)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_CFG_VTDC_FINE_OFFSET_OVRD_VAL_DMODE_BF_DEF (0x00000000)

///< Adding offset to 2&#39;s comp tdc value (integer signed)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_CFG_TDCPE_OFFSET_DMODE_BF_OFF (18)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_CFG_TDCPE_OFFSET_DMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_CFG_TDCPE_OFFSET_DMODE_BF_MSK (0x007C0000)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_CFG_TDCPE_OFFSET_DMODE_BF_DEF (0x00000000)

///< 1&#39;b0 - Uses bb TDC signal from analog
///< 1&#39;b1 - Uses MSB of tdceff signal as bb TDC input signal (TDC sign
///< bit)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_CFG_TDC_BB_INPUT_SEL_DMODE_BF_OFF (23)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_CFG_TDC_BB_INPUT_SEL_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_CFG_TDC_BB_INPUT_SEL_DMODE_BF_MSK (0x00800000)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_CFG_TDC_BB_INPUT_SEL_DMODE_BF_DEF (0x00000000)

///< Initial value for stddev control bus before STDC calibration.
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_CFG_STDC_STDDEV_INIT_DMODE_BF_OFF (24)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_CFG_STDC_STDDEV_INIT_DMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_CFG_STDC_STDDEV_INIT_DMODE_BF_MSK (0x0F000000)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_CFG_STDC_STDDEV_INIT_DMODE_BF_DEF (0x0F000000)

///< Forces VTDC to RO mode
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_CFG_FORCE_VTDC_OSC_DMODE_BF_OFF (28)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_CFG_FORCE_VTDC_OSC_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_CFG_FORCE_VTDC_OSC_DMODE_BF_MSK (0x10000000)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_CFG_FORCE_VTDC_OSC_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_offset_range
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_CFG_VTDC_OFFSET_RANGE_DMODE_BF_OFF (29)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_CFG_VTDC_OFFSET_RANGE_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_CFG_VTDC_OFFSET_RANGE_DMODE_BF_MSK (0x20000000)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_CFG_VTDC_OFFSET_RANGE_DMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_TDC1_DMODE register description at address offset 0x29c
  *
  * Register default value:        0x001E80AA
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_tdc1_dmode
  * SERDES_LANE_ANA_PLL::TDC1
  */

typedef union {
  struct {
    uint32_t CFG_PE_DISABLE_DMODE : 1;
    ///< Force values of 0 on TDC output.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_TDC_LADDER_MAX_DMODE : 2;
    ///< Max trim ladder code value alowed during lock adquisition.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x1"
    uint32_t CFG_TDC_LADDER_MIN_DMODE : 2;
    ///< Min trim ladder code value alowed during lock adquisition.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x1"
    uint32_t CFG_SELECT_STDC_FILTER_DMODE : 1;
    ///< Select STDC output to filter.                         Will select
    ///< only after FSM enables.
    ///< AccessType="RW" BitOffset="5" ResetValue="0x1"
    uint32_t CFG_SELECT_STDC_DFX_DMODE : 1;
    ///< Select STDC output to DFX path (PE min/max, raw lock, VISA, RO reg)
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t CFG_STDC_PROP_COEFF_DMODE : 5;
    ///< Fine Kp = 2^(-reg) to be used with STDC (signed value)
    ///< AccessType="RW" BitOffset="7" ResetValue="0x1"
    uint32_t CFG_STDC_INT_COEFF_DMODE : 5;
    ///< Fine Ki = 2^(-reg) to be used with STDC
    ///< AccessType="RW" BitOffset="12" ResetValue="0x8"
    uint32_t CFG_VTDC_ANA_EN_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC1::cfg_vtdc_ana_en
    ///< AccessType="RW" BitOffset="17" ResetValue="0x1"
    uint32_t CFG_STDC_ANA_EN_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC1::cfg_stdc_ana_en
    ///< AccessType="RW" BitOffset="18" ResetValue="0x1"
    uint32_t CFG_TDC_SAMP_BYPASS_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC1::cfg_tdc_samp_bypass
    ///< AccessType="RW" BitOffset="19" ResetValue="0x1"
    uint32_t CFG_STDC_SAMP_BYPASS_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC1::cfg_stdc_samp_bypass
    ///< AccessType="RW" BitOffset="20" ResetValue="0x1"
    uint32_t CFG_TDC_STATUS_MODE_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC1::cfg_tdc_status_mode
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t CFG_TDC_HISTOGRAM_MODE_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC1::cfg_tdc_histogram_mode
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t CFG_TDC_HISTOGRAM_VALUE_DMODE : 6;
    ///< SERDES_LANE_ANA_PLL::TDC1::cfg_tdc_histogram_value
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_tdc1_dmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_DEFAULT (0x001e80aaU)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_RD_MASK (0x1fffffffU)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_WR_MASK (0x1fffffffU)


///< Force values of 0 on TDC output.
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_PE_DIS_DMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_PE_DIS_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_PE_DIS_DMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_PE_DIS_DMODE_BF_DEF (0x00000000)

///< Max trim ladder code value alowed during lock adquisition.
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_TDC_LADDER_MAX_DMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_TDC_LADDER_MAX_DMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_TDC_LADDER_MAX_DMODE_BF_MSK (0x00000006)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_TDC_LADDER_MAX_DMODE_BF_DEF (0x00000002)

///< Min trim ladder code value alowed during lock adquisition.
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_TDC_LADDER_MIN_DMODE_BF_OFF ( 3)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_TDC_LADDER_MIN_DMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_TDC_LADDER_MIN_DMODE_BF_MSK (0x00000018)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_TDC_LADDER_MIN_DMODE_BF_DEF (0x00000008)

///< Select STDC output to filter.                         Will select
///< only after FSM enables.
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_SEL_STDC_FILTER_DMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_SEL_STDC_FILTER_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_SEL_STDC_FILTER_DMODE_BF_MSK (0x00000020)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_SEL_STDC_FILTER_DMODE_BF_DEF (0x00000020)

///< Select STDC output to DFX path (PE min/max, raw lock, VISA, RO reg)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_SEL_STDC_DFX_DMODE_BF_OFF ( 6)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_SEL_STDC_DFX_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_SEL_STDC_DFX_DMODE_BF_MSK (0x00000040)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_SEL_STDC_DFX_DMODE_BF_DEF (0x00000000)

///< Fine Kp = 2^(-reg) to be used with STDC (signed value)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_STDC_PROP_COEFF_DMODE_BF_OFF ( 7)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_STDC_PROP_COEFF_DMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_STDC_PROP_COEFF_DMODE_BF_MSK (0x00000F80)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_STDC_PROP_COEFF_DMODE_BF_DEF (0x00000080)

///< Fine Ki = 2^(-reg) to be used with STDC
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_STDC_INT_COEFF_DMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_STDC_INT_COEFF_DMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_STDC_INT_COEFF_DMODE_BF_MSK (0x0001F000)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_STDC_INT_COEFF_DMODE_BF_DEF (0x00008000)

///< SERDES_LANE_ANA_PLL::TDC1::cfg_vtdc_ana_en
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_VTDC_ANA_EN_DMODE_BF_OFF (17)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_VTDC_ANA_EN_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_VTDC_ANA_EN_DMODE_BF_MSK (0x00020000)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_VTDC_ANA_EN_DMODE_BF_DEF (0x00020000)

///< SERDES_LANE_ANA_PLL::TDC1::cfg_stdc_ana_en
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_STDC_ANA_EN_DMODE_BF_OFF (18)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_STDC_ANA_EN_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_STDC_ANA_EN_DMODE_BF_MSK (0x00040000)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_STDC_ANA_EN_DMODE_BF_DEF (0x00040000)

///< SERDES_LANE_ANA_PLL::TDC1::cfg_tdc_samp_bypass
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_TDC_SAMP_BYP_DMODE_BF_OFF (19)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_TDC_SAMP_BYP_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_TDC_SAMP_BYP_DMODE_BF_MSK (0x00080000)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_TDC_SAMP_BYP_DMODE_BF_DEF (0x00080000)

///< SERDES_LANE_ANA_PLL::TDC1::cfg_stdc_samp_bypass
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_STDC_SAMP_BYP_DMODE_BF_OFF (20)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_STDC_SAMP_BYP_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_STDC_SAMP_BYP_DMODE_BF_MSK (0x00100000)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_STDC_SAMP_BYP_DMODE_BF_DEF (0x00100000)

///< SERDES_LANE_ANA_PLL::TDC1::cfg_tdc_status_mode
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_TDC_STAT_MODE_DMODE_BF_OFF (21)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_TDC_STAT_MODE_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_TDC_STAT_MODE_DMODE_BF_MSK (0x00200000)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_TDC_STAT_MODE_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TDC1::cfg_tdc_histogram_mode
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_TDC_HISTOGRAM_MODE_DMODE_BF_OFF (22)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_TDC_HISTOGRAM_MODE_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_TDC_HISTOGRAM_MODE_DMODE_BF_MSK (0x00400000)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_TDC_HISTOGRAM_MODE_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TDC1::cfg_tdc_histogram_value
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_TDC_HISTOGRAM_VAL_DMODE_BF_OFF (23)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_TDC_HISTOGRAM_VAL_DMODE_BF_WID ( 6)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_TDC_HISTOGRAM_VAL_DMODE_BF_MSK (0x1F800000)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_CFG_TDC_HISTOGRAM_VAL_DMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_TDC2_DMODE register description at address offset 0x2a0
  *
  * Register default value:        0x002483EF
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_tdc2_dmode
  * SERDES_LANE_ANA_PLL::TDC2
  */

typedef union {
  struct {
    uint32_t CFG_TDC_ADAPTIVE_WIN_IN_DMODE : 5;
    ///< TDC code threshold to switch ladder with higher resolution.
    ///< Need to be below that value during cfg_tdc_adaptive_max_count cycle
    ///< time window
    ///< AccessType="RW" BitOffset="0" ResetValue="0xF"
    uint32_t CFG_TDC_ADAPTIVE_WIN_OUT_DMODE : 5;
    ///< TDC code threshold to switch ladder with lower resolution.
    ///< AccessType="RW" BitOffset="5" ResetValue="0x1F"
    uint32_t CFG_TDC_ADAPTIVE_MAX_COUNT_DMODE : 6;
    ///< Defines the number of cycles for time window of TDC ladder adaptive
    ///< switching
    ///< AccessType="RW" BitOffset="10" ResetValue="0x20"
    uint32_t CFG_TDC_TRIM_OVRD_DMODE : 1;
    ///< tdc chain trim ovrd enable
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t CFG_TDC_TRIM_VAL_DMODE : 2;
    ///< tdc chain trim ovrd value
    ///< AccessType="RW" BitOffset="17" ResetValue="0x2"
    uint32_t CFG_KPKI_COMPENSATE_VAL_DMODE : 2;
    ///< SERDES_LANE_ANA_PLL::TDC2::cfg_kpki_compensate_val
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t CFG_STDC_BIAS_EN_DMODE : 1;
    ///< Enables internal STDC bias.
    ///< AccessType="RW" BitOffset="21" ResetValue="0x1"
    uint32_t CFG_FORCE_STDC_OSC_DMODE : 1;
    ///< Forces internal STDC oscilator to enable.
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t CFG_STDC_STDDEV_OVRD_EN_DMODE : 1;
    ///< Enables override for stddev control bus.
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t CFG_STDC_OSC_DIV4_DMODE : 1;
    ///< Enables internal STDC divider for internal oscilator output.
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t CFG_STDCPE_OFFSET_DMODE : 5;
    ///< Adding offset to 2&#39;s comp stdc value (integer signed)
    ///< AccessType="RW" BitOffset="25" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_tdc2_dmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_TDC2_DMODE_DEFAULT (0x002483efU)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_DMODE_RD_MASK (0x3fffffffU)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_DMODE_WR_MASK (0x3fffffffU)


///< TDC code threshold to switch ladder with higher resolution.
///< Need to be below that value during cfg_tdc_adaptive_max_count cycle
///< time window
#define PMA_TXPLLCFGLOADER_MSG_TDC2_DMODE_CFG_TDC_ADAPTIVE_WIN_IN_DMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_DMODE_CFG_TDC_ADAPTIVE_WIN_IN_DMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_DMODE_CFG_TDC_ADAPTIVE_WIN_IN_DMODE_BF_MSK (0x0000001F)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_DMODE_CFG_TDC_ADAPTIVE_WIN_IN_DMODE_BF_DEF (0x0000000F)

///< TDC code threshold to switch ladder with lower resolution.
#define PMA_TXPLLCFGLOADER_MSG_TDC2_DMODE_CFG_TDC_ADAPTIVE_WIN_OUT_DMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_DMODE_CFG_TDC_ADAPTIVE_WIN_OUT_DMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_DMODE_CFG_TDC_ADAPTIVE_WIN_OUT_DMODE_BF_MSK (0x000003E0)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_DMODE_CFG_TDC_ADAPTIVE_WIN_OUT_DMODE_BF_DEF (0x000003E0)

///< Defines the number of cycles for time window of TDC ladder adaptive
///< switching
#define PMA_TXPLLCFGLOADER_MSG_TDC2_DMODE_CFG_TDC_ADAPTIVE_MAX_CNT_DMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_DMODE_CFG_TDC_ADAPTIVE_MAX_CNT_DMODE_BF_WID ( 6)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_DMODE_CFG_TDC_ADAPTIVE_MAX_CNT_DMODE_BF_MSK (0x0000FC00)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_DMODE_CFG_TDC_ADAPTIVE_MAX_CNT_DMODE_BF_DEF (0x00008000)

///< tdc chain trim ovrd enable
#define PMA_TXPLLCFGLOADER_MSG_TDC2_DMODE_CFG_TDC_TRIM_OVRD_DMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_DMODE_CFG_TDC_TRIM_OVRD_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_DMODE_CFG_TDC_TRIM_OVRD_DMODE_BF_MSK (0x00010000)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_DMODE_CFG_TDC_TRIM_OVRD_DMODE_BF_DEF (0x00000000)

///< tdc chain trim ovrd value
#define PMA_TXPLLCFGLOADER_MSG_TDC2_DMODE_CFG_TDC_TRIM_VAL_DMODE_BF_OFF (17)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_DMODE_CFG_TDC_TRIM_VAL_DMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_DMODE_CFG_TDC_TRIM_VAL_DMODE_BF_MSK (0x00060000)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_DMODE_CFG_TDC_TRIM_VAL_DMODE_BF_DEF (0x00040000)

///< SERDES_LANE_ANA_PLL::TDC2::cfg_kpki_compensate_val
#define PMA_TXPLLCFGLOADER_MSG_TDC2_DMODE_CFG_KPKI_COMPENSATE_VAL_DMODE_BF_OFF (19)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_DMODE_CFG_KPKI_COMPENSATE_VAL_DMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_DMODE_CFG_KPKI_COMPENSATE_VAL_DMODE_BF_MSK (0x00180000)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_DMODE_CFG_KPKI_COMPENSATE_VAL_DMODE_BF_DEF (0x00000000)

///< Enables internal STDC bias.
#define PMA_TXPLLCFGLOADER_MSG_TDC2_DMODE_CFG_STDC_BIAS_EN_DMODE_BF_OFF (21)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_DMODE_CFG_STDC_BIAS_EN_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_DMODE_CFG_STDC_BIAS_EN_DMODE_BF_MSK (0x00200000)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_DMODE_CFG_STDC_BIAS_EN_DMODE_BF_DEF (0x00200000)

///< Forces internal STDC oscilator to enable.
#define PMA_TXPLLCFGLOADER_MSG_TDC2_DMODE_CFG_FORCE_STDC_OSC_DMODE_BF_OFF (22)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_DMODE_CFG_FORCE_STDC_OSC_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_DMODE_CFG_FORCE_STDC_OSC_DMODE_BF_MSK (0x00400000)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_DMODE_CFG_FORCE_STDC_OSC_DMODE_BF_DEF (0x00000000)

///< Enables override for stddev control bus.
#define PMA_TXPLLCFGLOADER_MSG_TDC2_DMODE_CFG_STDC_STDDEV_OVRD_EN_DMODE_BF_OFF (23)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_DMODE_CFG_STDC_STDDEV_OVRD_EN_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_DMODE_CFG_STDC_STDDEV_OVRD_EN_DMODE_BF_MSK (0x00800000)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_DMODE_CFG_STDC_STDDEV_OVRD_EN_DMODE_BF_DEF (0x00000000)

///< Enables internal STDC divider for internal oscilator output.
#define PMA_TXPLLCFGLOADER_MSG_TDC2_DMODE_CFG_STDC_OSC_DIV4_DMODE_BF_OFF (24)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_DMODE_CFG_STDC_OSC_DIV4_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_DMODE_CFG_STDC_OSC_DIV4_DMODE_BF_MSK (0x01000000)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_DMODE_CFG_STDC_OSC_DIV4_DMODE_BF_DEF (0x00000000)

///< Adding offset to 2&#39;s comp stdc value (integer signed)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_DMODE_CFG_STDCPE_OFFSET_DMODE_BF_OFF (25)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_DMODE_CFG_STDCPE_OFFSET_DMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_DMODE_CFG_STDCPE_OFFSET_DMODE_BF_MSK (0x3E000000)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_DMODE_CFG_STDCPE_OFFSET_DMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_TDC3_DMODE register description at address offset 0x2a4
  *
  * Register default value:        0x000003A3
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_tdc3_dmode
  * SERDES_LANE_ANA_PLL::TDC3
  */

typedef union {
  struct {
    uint32_t CFG_STDC_TARGET_CNT_DMODE : 8;
    ///< Calibration target for STDC oscilator during calibration.
    ///< The formula: int(2^(2 + cfg_stdc_cnt_limit)*(3e9/Frefclk))
    ///< AccessType="RW" BitOffset="0" ResetValue="0xA3"
    uint32_t CFG_STDC_CNT_LIMIT_DMODE : 2;
    ///< Number of cycles to count STDC oscilator edges during calibration.
    ///< Value = 2^(2 + reg)
    ///< AccessType="RW" BitOffset="8" ResetValue="0x3"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_tdc3_dmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_TDC3_DMODE_DEFAULT (0x000003a3U)
#define PMA_TXPLLCFGLOADER_MSG_TDC3_DMODE_RD_MASK (0x000003ffU)
#define PMA_TXPLLCFGLOADER_MSG_TDC3_DMODE_WR_MASK (0x000003ffU)


///< Calibration target for STDC oscilator during calibration.
///< The formula: int(2^(2 + cfg_stdc_cnt_limit)*(3e9/Frefclk))
#define PMA_TXPLLCFGLOADER_MSG_TDC3_DMODE_CFG_STDC_TARGET_CNT_DMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_TDC3_DMODE_CFG_STDC_TARGET_CNT_DMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_TDC3_DMODE_CFG_STDC_TARGET_CNT_DMODE_BF_MSK (0x000000FF)
#define PMA_TXPLLCFGLOADER_MSG_TDC3_DMODE_CFG_STDC_TARGET_CNT_DMODE_BF_DEF (0x000000A3)

///< Number of cycles to count STDC oscilator edges during calibration.
///< Value = 2^(2 + reg)
#define PMA_TXPLLCFGLOADER_MSG_TDC3_DMODE_CFG_STDC_CNT_LIMIT_DMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_TDC3_DMODE_CFG_STDC_CNT_LIMIT_DMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_TDC3_DMODE_CFG_STDC_CNT_LIMIT_DMODE_BF_MSK (0x00000300)
#define PMA_TXPLLCFGLOADER_MSG_TDC3_DMODE_CFG_STDC_CNT_LIMIT_DMODE_BF_DEF (0x00000300)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_TAP_OVRD_DMODE register description at address offset 0x2a8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_tap_ovrd_dmode
  * LCPLL_TAP_OVRD Register
  */

typedef union {
  struct {
    uint32_t CFG_PLL_ENABLE_DMODE : 1;
    ///< Replaces direct pin of PLL enable signal (in case cfg_pll_en_mode_ctrl
    ///< = 1).
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_PLL_EN_MODE_CTRL_DMODE : 1;
    ///< Effective PLL enable:                         0 - Enable signal from
    ///< PLL interface                         1 - Enable signal from PLL register
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t CFG_LDO_ENABLE_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldo_enable
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t CFG_VREFGEN_EN_OVRD_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_vrefgen_en_ovrd
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t CFG_VREFGEN_EN_OVRD_VAL_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_vrefgen_en_ovrd_val
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t CFG_LDO_BIAS_EN_OVRD_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldo_bias_en_ovrd
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t CFG_LDO_BIAS_EN_OVRD_VAL_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldo_bias_en_ovrd_val
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t CFG_LDOCLK_EN_OVRD_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldoclk_en_ovrd
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t CFG_LDOCLK_EN_OVRD_VAL_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldoclk_en_ovrd_val
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CFG_LDODCO_EN_OVRD_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldodco_en_ovrd
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t CFG_LDODCO_EN_OVRD_VAL_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldodco_en_ovrd_val
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t O_DFX_TDC_DISABLE_DMODE : 1;
    ///< Set to turn off TDC. Mainly to study impact of TDC self noise on PLL
    ///< jitter
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_tap_ovrd_dmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_RD_MASK (0x00000fffU)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_WR_MASK (0x00000fffU)


///< Replaces direct pin of PLL enable signal (in case cfg_pll_en_mode_ctrl
///< = 1).
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_CFG_PLL_EN_DMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_CFG_PLL_EN_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_CFG_PLL_EN_DMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_CFG_PLL_EN_DMODE_BF_DEF (0x00000000)

///< Effective PLL enable:                         0 - Enable signal from
///< PLL interface                         1 - Enable signal from PLL register
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_CFG_PLL_EN_MODE_CTRL_DMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_CFG_PLL_EN_MODE_CTRL_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_CFG_PLL_EN_MODE_CTRL_DMODE_BF_MSK (0x00000002)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_CFG_PLL_EN_MODE_CTRL_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldo_enable
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_CFG_LDO_EN_DMODE_BF_OFF ( 2)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_CFG_LDO_EN_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_CFG_LDO_EN_DMODE_BF_MSK (0x00000004)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_CFG_LDO_EN_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_vrefgen_en_ovrd
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_CFG_VREFGEN_EN_OVRD_DMODE_BF_OFF ( 3)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_CFG_VREFGEN_EN_OVRD_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_CFG_VREFGEN_EN_OVRD_DMODE_BF_MSK (0x00000008)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_CFG_VREFGEN_EN_OVRD_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_vrefgen_en_ovrd_val
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_CFG_VREFGEN_EN_OVRD_VAL_DMODE_BF_OFF ( 4)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_CFG_VREFGEN_EN_OVRD_VAL_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_CFG_VREFGEN_EN_OVRD_VAL_DMODE_BF_MSK (0x00000010)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_CFG_VREFGEN_EN_OVRD_VAL_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldo_bias_en_ovrd
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_CFG_LDO_BIAS_EN_OVRD_DMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_CFG_LDO_BIAS_EN_OVRD_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_CFG_LDO_BIAS_EN_OVRD_DMODE_BF_MSK (0x00000020)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_CFG_LDO_BIAS_EN_OVRD_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldo_bias_en_ovrd_val
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_CFG_LDO_BIAS_EN_OVRD_VAL_DMODE_BF_OFF ( 6)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_CFG_LDO_BIAS_EN_OVRD_VAL_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_CFG_LDO_BIAS_EN_OVRD_VAL_DMODE_BF_MSK (0x00000040)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_CFG_LDO_BIAS_EN_OVRD_VAL_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldoclk_en_ovrd
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_CFG_LDOCLK_EN_OVRD_DMODE_BF_OFF ( 7)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_CFG_LDOCLK_EN_OVRD_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_CFG_LDOCLK_EN_OVRD_DMODE_BF_MSK (0x00000080)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_CFG_LDOCLK_EN_OVRD_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldoclk_en_ovrd_val
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_CFG_LDOCLK_EN_OVRD_VAL_DMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_CFG_LDOCLK_EN_OVRD_VAL_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_CFG_LDOCLK_EN_OVRD_VAL_DMODE_BF_MSK (0x00000100)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_CFG_LDOCLK_EN_OVRD_VAL_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldodco_en_ovrd
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_CFG_LDODCO_EN_OVRD_DMODE_BF_OFF ( 9)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_CFG_LDODCO_EN_OVRD_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_CFG_LDODCO_EN_OVRD_DMODE_BF_MSK (0x00000200)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_CFG_LDODCO_EN_OVRD_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldodco_en_ovrd_val
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_CFG_LDODCO_EN_OVRD_VAL_DMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_CFG_LDODCO_EN_OVRD_VAL_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_CFG_LDODCO_EN_OVRD_VAL_DMODE_BF_MSK (0x00000400)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_CFG_LDODCO_EN_OVRD_VAL_DMODE_BF_DEF (0x00000000)

///< Set to turn off TDC. Mainly to study impact of TDC self noise on PLL
///< jitter
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_O_DFX_TDC_DIS_DMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_O_DFX_TDC_DIS_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_O_DFX_TDC_DIS_DMODE_BF_MSK (0x00000800)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_O_DFX_TDC_DIS_DMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_DFX_DCO_DMODE register description at address offset 0x2ac
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_dfx_dco_dmode
  * LCPLL_DFX_DCO Register
  */

typedef union {
  struct {
    uint32_t O_DCOFINEDFTSEL_DMODE : 2;
    ///< DCO fine frequency and dco dither override:
    ///< 00: DCO fine tuning is set by PLL closed loop .
    ///< 01: DCO fine frequency value is set by o_dcofine and DCO dither value
    ///< is set by o_dither_value.                         10: Internal SAW
    ///< tooth pattern on fine integer code (while frac=0). Code increments
    ///< every fbclk cycle.                         11: Reserved.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t O_DCOCOARSE_OVRD_H_DMODE : 1;
    ///< DCO coarse frequency override signal:                         0: DCO
    ///< coarse tuning is set by AFC state machine
    ///< 1: DCO coarse frequency value is set by o_dcocoarse
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t O_DCOFINE_DMODE : 8;
    ///< Fine override value (when o_dcofinedftsel = 01).
    ///< Valid range 0 to 254.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t O_DCOCOARSE_DMODE : 9;
    ///< AFC override value (when o_dcocoarse_ovrd_h=1).
    ///< Valid range 0 to 319.
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t CFG_CAPTURE_FILTER_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DFX_DCO::cfg_capture_filter
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_dfx_dco_dmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_DMODE_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_DMODE_RD_MASK (0x001fffffU)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_DMODE_WR_MASK (0x001fffffU)


///< DCO fine frequency and dco dither override:
///< 00: DCO fine tuning is set by PLL closed loop .
///< 01: DCO fine frequency value is set by o_dcofine and DCO dither value
///< is set by o_dither_value.                         10: Internal SAW
///< tooth pattern on fine integer code (while frac=0). Code increments
///< every fbclk cycle.                         11: Reserved.
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_DMODE_O_DCOFINEDFTSEL_DMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_DMODE_O_DCOFINEDFTSEL_DMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_DMODE_O_DCOFINEDFTSEL_DMODE_BF_MSK (0x00000003)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_DMODE_O_DCOFINEDFTSEL_DMODE_BF_DEF (0x00000000)

///< DCO coarse frequency override signal:                         0: DCO
///< coarse tuning is set by AFC state machine
///< 1: DCO coarse frequency value is set by o_dcocoarse
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_DMODE_O_DCOCOARSE_OVRD_H_DMODE_BF_OFF ( 2)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_DMODE_O_DCOCOARSE_OVRD_H_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_DMODE_O_DCOCOARSE_OVRD_H_DMODE_BF_MSK (0x00000004)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_DMODE_O_DCOCOARSE_OVRD_H_DMODE_BF_DEF (0x00000000)

///< Fine override value (when o_dcofinedftsel = 01).
///< Valid range 0 to 254.
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_DMODE_O_DCOFINE_DMODE_BF_OFF ( 3)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_DMODE_O_DCOFINE_DMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_DMODE_O_DCOFINE_DMODE_BF_MSK (0x000007F8)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_DMODE_O_DCOFINE_DMODE_BF_DEF (0x00000000)

///< AFC override value (when o_dcocoarse_ovrd_h=1).
///< Valid range 0 to 319.
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_DMODE_O_DCOCOARSE_DMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_DMODE_O_DCOCOARSE_DMODE_BF_WID ( 9)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_DMODE_O_DCOCOARSE_DMODE_BF_MSK (0x000FF800)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_DMODE_O_DCOCOARSE_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DFX_DCO::cfg_capture_filter
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_DMODE_CFG_CAP_FILTER_DMODE_BF_OFF (20)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_DMODE_CFG_CAP_FILTER_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_DMODE_CFG_CAP_FILTER_DMODE_BF_MSK (0x00100000)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_DMODE_CFG_CAP_FILTER_DMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_DFX_TDC_CRO_DMODE register description at address offset 0x2b0
  *
  * Register default value:        0x0000001C
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_dfx_tdc_cro_dmode
  * LCPLL_DFX_TDC_CRO Register
  */

typedef union {
  struct {
    uint32_t CFG_DFT_CNT_RESTART_DMODE : 1;
    ///< Clears min/max measurements and restarts dft counter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_DFT_TIMER_LIMIT_DMODE : 4;
    ///< While cfg_dfx_disable_dft_timer_ovrd_val=0 define the window time
    ///< of the dft measurement. (2^6 +reg [ref_clk cycles])
    ///< AccessType="RW" BitOffset="1" ResetValue="0xE"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_dfx_tdc_cro_dmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_DMODE_DEFAULT (0x0000001cU)
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_DMODE_RD_MASK (0x0000001fU)
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_DMODE_WR_MASK (0x0000001fU)


///< Clears min/max measurements and restarts dft counter
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_DMODE_CFG_DFT_CNT_RESTART_DMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_DMODE_CFG_DFT_CNT_RESTART_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_DMODE_CFG_DFT_CNT_RESTART_DMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_DMODE_CFG_DFT_CNT_RESTART_DMODE_BF_DEF (0x00000000)

///< While cfg_dfx_disable_dft_timer_ovrd_val=0 define the window time
///< of the dft measurement. (2^6 +reg [ref_clk cycles])
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_DMODE_CFG_DFT_TIMER_LIMIT_DMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_DMODE_CFG_DFT_TIMER_LIMIT_DMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_DMODE_CFG_DFT_TIMER_LIMIT_DMODE_BF_MSK (0x0000001E)
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_DMODE_CFG_DFT_TIMER_LIMIT_DMODE_BF_DEF (0x0000001C)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_VISA_CTRL_DMODE register description at address offset 0x2b4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_visa_ctrl_dmode
  * LCPLL_VISA_CTRL Register
  */

typedef union {
  struct {
    uint32_t CFG_VISA_CTRL_DMODE : 32;
    ///< VISA control register                         [0] visa enable.
    ///< [3:1] prbs mode (pattern gen)
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_visa_ctrl_dmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_DMODE_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_DMODE_RD_MASK (0xffffffffU)
#define PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_DMODE_WR_MASK (0xffffffffU)


///< VISA control register                         [0] visa enable.
///< [3:1] prbs mode (pattern gen)
#define PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_DMODE_CFG_VISA_CTRL_DMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_DMODE_CFG_VISA_CTRL_DMODE_BF_WID (32)
#define PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_DMODE_CFG_VISA_CTRL_DMODE_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_DMODE_CFG_VISA_CTRL_DMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_VISA_LANE0_SEL_DMODE register description at address offset 0x2b8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_visa_lane0_sel_dmode
  * LCPLL_DFX_VISA_LANE0 Register
  */

typedef union {
  struct {
    uint32_t CFG_VISA_LANE0_SEL_DMODE : 32;
    ///< Parallel VISA control for lane 0                         [7:0] byte
    ///< select                         [15:8] clock select
    ///< [16] clock bypass
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_visa_lane0_sel_dmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_DMODE_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_DMODE_RD_MASK (0xffffffffU)
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_DMODE_WR_MASK (0xffffffffU)


///< Parallel VISA control for lane 0                         [7:0] byte
///< select                         [15:8] clock select
///< [16] clock bypass
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_DMODE_CFG_VISA_LANE0_SEL_DMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_DMODE_CFG_VISA_LANE0_SEL_DMODE_BF_WID (32)
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_DMODE_CFG_VISA_LANE0_SEL_DMODE_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_DMODE_CFG_VISA_LANE0_SEL_DMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_VISA_LANE1_SEL_DMODE register description at address offset 0x2bc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_visa_lane1_sel_dmode
  * LCPLL_DFX_VISA_LANE1 Register
  */

typedef union {
  struct {
    uint32_t CFG_VISA_LANE1_SEL_DMODE : 32;
    ///< Parallel VISA control for lane 1                         [7:0] byte
    ///< select                         [15:8] clock select
    ///< [16] clock bypass
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_visa_lane1_sel_dmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_DMODE_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_DMODE_RD_MASK (0xffffffffU)
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_DMODE_WR_MASK (0xffffffffU)


///< Parallel VISA control for lane 1                         [7:0] byte
///< select                         [15:8] clock select
///< [16] clock bypass
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_DMODE_CFG_VISA_LANE1_SEL_DMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_DMODE_CFG_VISA_LANE1_SEL_DMODE_BF_WID (32)
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_DMODE_CFG_VISA_LANE1_SEL_DMODE_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_DMODE_CFG_VISA_LANE1_SEL_DMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_CNTR_BIST_SETTINGS_DMODE register description at address offset 0x2c0
  *
  * Register default value:        0x00008B10
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_cntr_bist_settings_dmode
  * LCPLL_CNTR_BIST_SETTINGS Register
  */

typedef union {
  struct {
    uint32_t O_PLLLOCK_SEL_DMODE : 2;
    ///< Selects mode of lock indicator:                         00: Counter
    ///< based lock                         01: Phase lock sticky high
    ///< 10: Boost done                         11: Counter based lock
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_LOCKTIMER_MAXCNT_DMODE : 14;
    ///< Counter target for counter based lock (o_plllock_sel=1,2) in refclk
    ///< cycles.                         Starts counting after VREG &#38; Kvcc
    ///< calibration completed.                         Used also to check
    ///< if raw phase lock asserted in time.                         Default
    ///< is ~25us for refclk of 156.25MHz.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x22C4"
    uint32_t CFG_PLLLOCK_STATE_SEL_DMODE : 1;
    ///< Selects when to enter &#38;quot;locked state&#38;quot; (which starts
    ///< VREG tracking loop, DTR temp tracking, feed-forward gain adaptive
    ///< loop and min/max capture):                         0: counter based
    ///< lock                         1: Phase lock sticky high
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_cntr_bist_settings_dmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_DMODE_DEFAULT (0x00008b10U)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_DMODE_RD_MASK (0x0001ffffU)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_DMODE_WR_MASK (0x0001ffffU)


///< Selects mode of lock indicator:                         00: Counter
///< based lock                         01: Phase lock sticky high
///< 10: Boost done                         11: Counter based lock
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_DMODE_O_PLLLOCK_SEL_DMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_DMODE_O_PLLLOCK_SEL_DMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_DMODE_O_PLLLOCK_SEL_DMODE_BF_MSK (0x00000003)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_DMODE_O_PLLLOCK_SEL_DMODE_BF_DEF (0x00000000)

///< Counter target for counter based lock (o_plllock_sel=1,2) in refclk
///< cycles.                         Starts counting after VREG &#38; Kvcc
///< calibration completed.                         Used also to check
///< if raw phase lock asserted in time.                         Default
///< is ~25us for refclk of 156.25MHz.
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_DMODE_CFG_LOCKTIMER_MAXCNT_DMODE_BF_OFF ( 2)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_DMODE_CFG_LOCKTIMER_MAXCNT_DMODE_BF_WID (14)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_DMODE_CFG_LOCKTIMER_MAXCNT_DMODE_BF_MSK (0x0000FFFC)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_DMODE_CFG_LOCKTIMER_MAXCNT_DMODE_BF_DEF (0x00008B10)

///< Selects when to enter &#38;quot;locked state&#38;quot; (which starts
///< VREG tracking loop, DTR temp tracking, feed-forward gain adaptive
///< loop and min/max capture):                         0: counter based
///< lock                         1: Phase lock sticky high
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_DMODE_CFG_PLLLOCK_STATE_SEL_DMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_DMODE_CFG_PLLLOCK_STATE_SEL_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_DMODE_CFG_PLLLOCK_STATE_SEL_DMODE_BF_MSK (0x00010000)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_DMODE_CFG_PLLLOCK_STATE_SEL_DMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_CALIB0_DMODE register description at address offset 0x2c4
  *
  * Register default value:        0x801FDFD1
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_calib0_dmode
  * LCPLL_CALIB0 Register
  */

typedef union {
  struct {
    uint32_t CFG_COARSE_LOOP_GSCALE_MAX_DMODE : 4;
    ///< Initial DTR FLL gain value (2&#39;s complement, 2^gscale).
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t CFG_COARSE_LOOP_GSCALE_MIN_DMODE : 4;
    ///< Final DTR FLL gain value (2&#39;s complement, 2^gscale).
    ///< AccessType="RW" BitOffset="4" ResetValue="0xD"
    uint32_t CFG_COARSE_LOOP_GSCALE_CNT_MAX_DMODE : 5;
    ///< Duration (in refclk cycles) of each gain in DTR FLL.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1F"
    uint32_t CFG_DCOCOARSE_OVRDEN_DMODE : 1;
    ///< DCO DTR FLL override enable. (DTR PLL would still work as usual)
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t CFG_DCOCOARSE_OVRD_DMODE : 8;
    ///< DCO DTR FLL override value when dtr_ovrden=1.
    ///< AccessType="RW" BitOffset="14" ResetValue="0x7F"
    uint32_t CFG_BOOSTGAIN_MAXCNT_DMODE : 10;
    ///< Duration (in fbclk cycles) of each gain in PLL boost, for both DTR
    ///< and fine loops.
    ///< AccessType="RW" BitOffset="22" ResetValue="0x200"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_calib0_dmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_CALIB0_DMODE_DEFAULT (0x801fdfd1U)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_DMODE_RD_MASK (0xffffffffU)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_DMODE_WR_MASK (0xffffffffU)


///< Initial DTR FLL gain value (2&#39;s complement, 2^gscale).
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_DMODE_CFG_COARSE_LOOP_GSCALE_MAX_DMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_DMODE_CFG_COARSE_LOOP_GSCALE_MAX_DMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_DMODE_CFG_COARSE_LOOP_GSCALE_MAX_DMODE_BF_MSK (0x0000000F)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_DMODE_CFG_COARSE_LOOP_GSCALE_MAX_DMODE_BF_DEF (0x00000001)

///< Final DTR FLL gain value (2&#39;s complement, 2^gscale).
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_DMODE_CFG_COARSE_LOOP_GSCALE_MIN_DMODE_BF_OFF ( 4)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_DMODE_CFG_COARSE_LOOP_GSCALE_MIN_DMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_DMODE_CFG_COARSE_LOOP_GSCALE_MIN_DMODE_BF_MSK (0x000000F0)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_DMODE_CFG_COARSE_LOOP_GSCALE_MIN_DMODE_BF_DEF (0x000000D0)

///< Duration (in refclk cycles) of each gain in DTR FLL.
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_DMODE_CFG_COARSE_LOOP_GSCALE_CNT_MAX_DMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_DMODE_CFG_COARSE_LOOP_GSCALE_CNT_MAX_DMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_DMODE_CFG_COARSE_LOOP_GSCALE_CNT_MAX_DMODE_BF_MSK (0x00001F00)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_DMODE_CFG_COARSE_LOOP_GSCALE_CNT_MAX_DMODE_BF_DEF (0x00001F00)

///< DCO DTR FLL override enable. (DTR PLL would still work as usual)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_DMODE_CFG_DCOCOARSE_OVRDEN_DMODE_BF_OFF (13)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_DMODE_CFG_DCOCOARSE_OVRDEN_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_DMODE_CFG_DCOCOARSE_OVRDEN_DMODE_BF_MSK (0x00002000)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_DMODE_CFG_DCOCOARSE_OVRDEN_DMODE_BF_DEF (0x00000000)

///< DCO DTR FLL override value when dtr_ovrden=1.
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_DMODE_CFG_DCOCOARSE_OVRD_DMODE_BF_OFF (14)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_DMODE_CFG_DCOCOARSE_OVRD_DMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_DMODE_CFG_DCOCOARSE_OVRD_DMODE_BF_MSK (0x003FC000)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_DMODE_CFG_DCOCOARSE_OVRD_DMODE_BF_DEF (0x001FC000)

///< Duration (in fbclk cycles) of each gain in PLL boost, for both DTR
///< and fine loops.
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_DMODE_CFG_BOOSTGAIN_MAXCNT_DMODE_BF_OFF (22)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_DMODE_CFG_BOOSTGAIN_MAXCNT_DMODE_BF_WID (10)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_DMODE_CFG_BOOSTGAIN_MAXCNT_DMODE_BF_MSK (0xFFC00000)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_DMODE_CFG_BOOSTGAIN_MAXCNT_DMODE_BF_DEF (0x80000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_CALIB1_DMODE register description at address offset 0x2c8
  *
  * Register default value:        0x310420C7
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_calib1_dmode
  * SERDES_LANE_ANA_PLL::CALIB1
  */

typedef union {
  struct {
    uint32_t CFG_FILTER_BOOSTFADE_FINE_EN_DMODE : 1;
    ///< When 1, fine PLL boost will gradually lower to zero in steps of 1.
    ///< When 0, fine PLL boost will change from initial boost to zero at once.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t CFG_FINE_PROP_COEFF_BOOST_VAL_DMODE : 4;
    ///< Fine PLL Kp boost. Unsigned value
    ///< AccessType="RW" BitOffset="1" ResetValue="0x3"
    uint32_t CFG_FINE_INT_COEFF_BOOST_VAL_DMODE : 5;
    ///< Fine PLL Ki boost. Unsigned value
    ///< AccessType="RW" BitOffset="5" ResetValue="0x6"
    uint32_t CFG_BOOST_FINE_CONST_ZETA_DMODE : 1;
    ///< Not needed. not validated                         If set to 1, FINE
    ///< Ki boost value will be twice as big as the FINE Kp boost value.
    ///< This will ensure that the zeta (damping factor) will remain constant
    ///< during the boost phase.                         This mode can only
    ///< be used in case the Kp boost is no larger than 3.
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t CFG_FULL_RANGE_AFC_SEL_DMODE : 1;
    ///< Limit AFC code.                         0 - Limit AFC code to max
    ///< value of 319.                         1 - Full range AFC code (0 -
    ///< 511).
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t CFG_SEC_AFC_CALIB_BINARY_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::CALIB1::cfg_sec_afc_calib_binary
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t CFG_FINE_PROP_COEFF_BOOST_STEP_DMODE : 4;
    ///< FINE PLL loop proportional gain boosting decrement step size during
    ///< gradual boost.
    ///< AccessType="RW" BitOffset="13" ResetValue="0x1"
    uint32_t CFG_FINE_INT_COEFF_BOOST_STEP_DMODE : 5;
    ///< FINE PLL loop integral gain boosting decrement step size during gradual
    ///< boost.
    ///< AccessType="RW" BitOffset="17" ResetValue="0x2"
    uint32_t CFG_FINE_PROP_COEFF_DMODE : 4;
    ///< Fine Kp = 2^(-reg)
    ///< AccessType="RW" BitOffset="22" ResetValue="0x4"
    uint32_t CFG_FINE_INT_COEFF_DMODE : 5;
    ///< Fine Ki = 2^(-reg)
    ///< AccessType="RW" BitOffset="26" ResetValue="0xC"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_calib1_dmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_CALIB1_DMODE_DEFAULT (0x310420c7U)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_DMODE_RD_MASK (0x7fffffffU)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_DMODE_WR_MASK (0x7fffffffU)


///< When 1, fine PLL boost will gradually lower to zero in steps of 1.
///< When 0, fine PLL boost will change from initial boost to zero at once.
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_DMODE_CFG_FILTER_BOOSTFADE_FINE_EN_DMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_DMODE_CFG_FILTER_BOOSTFADE_FINE_EN_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_DMODE_CFG_FILTER_BOOSTFADE_FINE_EN_DMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_DMODE_CFG_FILTER_BOOSTFADE_FINE_EN_DMODE_BF_DEF (0x00000001)

///< Fine PLL Kp boost. Unsigned value
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_DMODE_CFG_FINE_PROP_COEFF_BOOST_VAL_DMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_DMODE_CFG_FINE_PROP_COEFF_BOOST_VAL_DMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_DMODE_CFG_FINE_PROP_COEFF_BOOST_VAL_DMODE_BF_MSK (0x0000001E)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_DMODE_CFG_FINE_PROP_COEFF_BOOST_VAL_DMODE_BF_DEF (0x00000006)

///< Fine PLL Ki boost. Unsigned value
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_DMODE_CFG_FINE_INT_COEFF_BOOST_VAL_DMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_DMODE_CFG_FINE_INT_COEFF_BOOST_VAL_DMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_DMODE_CFG_FINE_INT_COEFF_BOOST_VAL_DMODE_BF_MSK (0x000003E0)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_DMODE_CFG_FINE_INT_COEFF_BOOST_VAL_DMODE_BF_DEF (0x000000C0)

///< Not needed. not validated                         If set to 1, FINE
///< Ki boost value will be twice as big as the FINE Kp boost value.
///< This will ensure that the zeta (damping factor) will remain constant
///< during the boost phase.                         This mode can only
///< be used in case the Kp boost is no larger than 3.
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_DMODE_CFG_BOOST_FINE_CONST_ZETA_DMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_DMODE_CFG_BOOST_FINE_CONST_ZETA_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_DMODE_CFG_BOOST_FINE_CONST_ZETA_DMODE_BF_MSK (0x00000400)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_DMODE_CFG_BOOST_FINE_CONST_ZETA_DMODE_BF_DEF (0x00000000)

///< Limit AFC code.                         0 - Limit AFC code to max
///< value of 319.                         1 - Full range AFC code (0 -
///< 511).
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_DMODE_CFG_FULL_RANGE_AFC_SEL_DMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_DMODE_CFG_FULL_RANGE_AFC_SEL_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_DMODE_CFG_FULL_RANGE_AFC_SEL_DMODE_BF_MSK (0x00000800)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_DMODE_CFG_FULL_RANGE_AFC_SEL_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::CALIB1::cfg_sec_afc_calib_binary
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_DMODE_CFG_SEC_AFC_CALIB_BINARY_DMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_DMODE_CFG_SEC_AFC_CALIB_BINARY_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_DMODE_CFG_SEC_AFC_CALIB_BINARY_DMODE_BF_MSK (0x00001000)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_DMODE_CFG_SEC_AFC_CALIB_BINARY_DMODE_BF_DEF (0x00000000)

///< FINE PLL loop proportional gain boosting decrement step size during
///< gradual boost.
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_DMODE_CFG_FINE_PROP_COEFF_BOOST_STEP_DMODE_BF_OFF (13)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_DMODE_CFG_FINE_PROP_COEFF_BOOST_STEP_DMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_DMODE_CFG_FINE_PROP_COEFF_BOOST_STEP_DMODE_BF_MSK (0x0001E000)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_DMODE_CFG_FINE_PROP_COEFF_BOOST_STEP_DMODE_BF_DEF (0x00002000)

///< FINE PLL loop integral gain boosting decrement step size during gradual
///< boost.
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_DMODE_CFG_FINE_INT_COEFF_BOOST_STEP_DMODE_BF_OFF (17)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_DMODE_CFG_FINE_INT_COEFF_BOOST_STEP_DMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_DMODE_CFG_FINE_INT_COEFF_BOOST_STEP_DMODE_BF_MSK (0x003E0000)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_DMODE_CFG_FINE_INT_COEFF_BOOST_STEP_DMODE_BF_DEF (0x00040000)

///< Fine Kp = 2^(-reg)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_DMODE_CFG_FINE_PROP_COEFF_DMODE_BF_OFF (22)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_DMODE_CFG_FINE_PROP_COEFF_DMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_DMODE_CFG_FINE_PROP_COEFF_DMODE_BF_MSK (0x03C00000)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_DMODE_CFG_FINE_PROP_COEFF_DMODE_BF_DEF (0x01000000)

///< Fine Ki = 2^(-reg)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_DMODE_CFG_FINE_INT_COEFF_DMODE_BF_OFF (26)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_DMODE_CFG_FINE_INT_COEFF_DMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_DMODE_CFG_FINE_INT_COEFF_DMODE_BF_MSK (0x7C000000)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_DMODE_CFG_FINE_INT_COEFF_DMODE_BF_DEF (0x30000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_CALIB2_DMODE register description at address offset 0x2cc
  *
  * Register default value:        0x00013812
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_calib2_dmode
  * SERDES_LANE_ANA_PLL::CALIB2
  */

typedef union {
  struct {
    uint32_t CFG_TDCBBPD_EN_DMODE : 1;
    ///< Switches TDC into bang-bang mode, based on timer (cfg_tdcbbpd_cnt_limit).
    ///< If enabled, cfg_tdc_ladder_min register must be configured to 1 or
    ///< greater.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_TDCBBPD_CNT_LIMIT_DMODE : 4;
    ///< Determines the number of refclk cycles from lock timer done until
    ///< TDC turns into bang-bang mode: 2 ^ cfg_tdcbbpd_cnt_limit.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x9"
    uint32_t CFG_GAINCAL_UPDATE_RATE_DMODE : 4;
    ///< This field sets the rate of adaptive feed-forward gain.
    ///< Every time the modulated feedback divider ratio is 0.5 or more away
    ///< from the target                          ratio (with frac code), the
    ///< feed-forward gain loop checks the amount of change in
    ///< TDC effective (after feed-forward cancelation) and based on the sign
    ///< of that change                          it would increment/decrement
    ///< the feed-forward gain.                          Then this register
    ///< determines every how many adaptive-ffgain checks the gain will
    ///< actually be updated. This technique could be useful if ratio is around
    ///< 0.5, to avoid                          too frequent gain updates (which
    ///< could cause stability problems in the loop).
    ///< The adaptive ffgain loop will react every 2 ^ cfg_gaincal_update_rate
    ///< gain checks
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t CFG_REFCLK_CYCLES_PER_1US_MAXCNT_DMODE : 8;
    ///< This signal defines the number of refclk cycles that fit in 1us.
    ///< Used in VREG loop in steady-state, such that whenever DAC code is
    ///< updated, we wait some time based on this counter before start sensing
    ///< the comparator.                         Could be used potentially
    ///< in the future for other timers as well.                         Use
    ///< the following formula:                         Frefclk x 1usec
    ///< AccessType="RW" BitOffset="9" ResetValue="0x9C"
    uint32_t CFG_SCOVRDEN_DMODE : 1;
    ///< Super coarse overwrite enable.
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t CFG_SCOVRD_DMODE : 4;
    ///< Super coarse overwrite value.
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_calib2_dmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_CALIB2_DMODE_DEFAULT (0x00013812U)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_DMODE_RD_MASK (0x003fffffU)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_DMODE_WR_MASK (0x003fffffU)


///< Switches TDC into bang-bang mode, based on timer (cfg_tdcbbpd_cnt_limit).
///< If enabled, cfg_tdc_ladder_min register must be configured to 1 or
///< greater.
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_DMODE_CFG_TDCBBPD_EN_DMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_DMODE_CFG_TDCBBPD_EN_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_DMODE_CFG_TDCBBPD_EN_DMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_DMODE_CFG_TDCBBPD_EN_DMODE_BF_DEF (0x00000000)

///< Determines the number of refclk cycles from lock timer done until
///< TDC turns into bang-bang mode: 2 ^ cfg_tdcbbpd_cnt_limit.
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_DMODE_CFG_TDCBBPD_CNT_LIMIT_DMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_DMODE_CFG_TDCBBPD_CNT_LIMIT_DMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_DMODE_CFG_TDCBBPD_CNT_LIMIT_DMODE_BF_MSK (0x0000001E)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_DMODE_CFG_TDCBBPD_CNT_LIMIT_DMODE_BF_DEF (0x00000012)

///< This field sets the rate of adaptive feed-forward gain.
///< Every time the modulated feedback divider ratio is 0.5 or more away
///< from the target                          ratio (with frac code), the
///< feed-forward gain loop checks the amount of change in
///< TDC effective (after feed-forward cancelation) and based on the sign
///< of that change                          it would increment/decrement
///< the feed-forward gain.                          Then this register
///< determines every how many adaptive-ffgain checks the gain will
///< actually be updated. This technique could be useful if ratio is around
///< 0.5, to avoid                          too frequent gain updates (which
///< could cause stability problems in the loop).
///< The adaptive ffgain loop will react every 2 ^ cfg_gaincal_update_rate
///< gain checks
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_DMODE_CFG_GAINCAL_UPDATE_RATE_DMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_DMODE_CFG_GAINCAL_UPDATE_RATE_DMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_DMODE_CFG_GAINCAL_UPDATE_RATE_DMODE_BF_MSK (0x000001E0)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_DMODE_CFG_GAINCAL_UPDATE_RATE_DMODE_BF_DEF (0x00000000)

///< This signal defines the number of refclk cycles that fit in 1us.
///< Used in VREG loop in steady-state, such that whenever DAC code is
///< updated, we wait some time based on this counter before start sensing
///< the comparator.                         Could be used potentially
///< in the future for other timers as well.                         Use
///< the following formula:                         Frefclk x 1usec
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_DMODE_CFG_REFCLK_CYCLES_PER_1US_MAXCNT_DMODE_BF_OFF ( 9)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_DMODE_CFG_REFCLK_CYCLES_PER_1US_MAXCNT_DMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_DMODE_CFG_REFCLK_CYCLES_PER_1US_MAXCNT_DMODE_BF_MSK (0x0001FE00)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_DMODE_CFG_REFCLK_CYCLES_PER_1US_MAXCNT_DMODE_BF_DEF (0x00013800)

///< Super coarse overwrite enable.
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_DMODE_CFG_SCOVRDEN_DMODE_BF_OFF (17)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_DMODE_CFG_SCOVRDEN_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_DMODE_CFG_SCOVRDEN_DMODE_BF_MSK (0x00020000)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_DMODE_CFG_SCOVRDEN_DMODE_BF_DEF (0x00000000)

///< Super coarse overwrite value.
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_DMODE_CFG_SCOVRD_DMODE_BF_OFF (18)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_DMODE_CFG_SCOVRD_DMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_DMODE_CFG_SCOVRD_DMODE_BF_MSK (0x003C0000)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_DMODE_CFG_SCOVRD_DMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_PLL_FSM_CONTROL_DMODE register description at address offset 0x2d0
  *
  * Register default value:        0x0000020E
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_pll_fsm_control_dmode
  * SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL
  */

typedef union {
  struct {
    uint32_t CFG_DCOSETTLE_MODE_DMODE : 1;
    ///< Settling time exit mode. VREG calibration and all rest of PLL FSM
    ///< would start only after DCO has settle                         &#39;1&#39;:
    ///< fbclk detected                         &#39;0&#39;: timer
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_DCOSETTLE_TIME_DMODE : 4;
    ///< DCO settling time timer (cfg_dcosettle_mode=0).
    ///< refclk cycles = 2^reg
    ///< AccessType="RW" BitOffset="1" ResetValue="0x7"
    uint32_t CFG_SKIP_STDC_CALIB_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_stdc_calib
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t CFG_STAY_STDC_CALIB_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_stdc_calib
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t CFG_SKIP_VTDC_CALIB_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_vtdc_calib
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t CFG_STAY_VTDC_CALIB_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_vtdc_calib
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CFG_SKIP_SC_CALIB_DMODE : 1;
    ///< Skip the sc calib.
    ///< AccessType="RW" BitOffset="9" ResetValue="0x1"
    uint32_t CFG_STAY_SC_CALIB_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_sc_calib
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t CFG_SKIP_FIRST_AFC_CALIB_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_first_afc_calib
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t CFG_STAY_FIRST_AFC_CALIB_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_first_afc_calib
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t CFG_SKIP_DCO_SWING_CALIB_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_dco_swing_calib
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t CFG_STAY_DCO_SWING_CALIB_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_dco_swing_calib
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t CFG_SKIP_KVCC_CALIB_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_kvcc_calib
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t CFG_STAY_KVCC_CALIB_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_kvcc_calib
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t CFG_SKIP_SECOND_AFC_CALIB_DMODE : 1;
    ///< If set to 1, the PLL will only run one afc calibration before kvcc
    ///< calibration                         If set to 0, the PLL will run
    ///< the AFC calibration for the second time after kvcc calibration ends.
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t CFG_STAY_SECOND_AFC_CALIB_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_second_afc_calib
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t CFG_SKIP_FINE_FLL_CALIB_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_fine_fll_calib
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t CFG_STAY_FINE_FLL_CALIB_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_fine_fll_calib
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_pll_fsm_ctrl_dmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_DEFAULT (0x0000020eU)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_RD_MASK (0x001fffffU)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_WR_MASK (0x001fffffU)


///< Settling time exit mode. VREG calibration and all rest of PLL FSM
///< would start only after DCO has settle                         &#39;1&#39;:
///< fbclk detected                         &#39;0&#39;: timer
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_DCOSETTLE_MODE_DMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_DCOSETTLE_MODE_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_DCOSETTLE_MODE_DMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_DCOSETTLE_MODE_DMODE_BF_DEF (0x00000000)

///< DCO settling time timer (cfg_dcosettle_mode=0).
///< refclk cycles = 2^reg
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_DCOSETTLE_TIME_DMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_DCOSETTLE_TIME_DMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_DCOSETTLE_TIME_DMODE_BF_MSK (0x0000001E)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_DCOSETTLE_TIME_DMODE_BF_DEF (0x0000000E)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_stdc_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_SKIP_STDC_CALIB_DMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_SKIP_STDC_CALIB_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_SKIP_STDC_CALIB_DMODE_BF_MSK (0x00000020)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_SKIP_STDC_CALIB_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_stdc_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_STAY_STDC_CALIB_DMODE_BF_OFF ( 6)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_STAY_STDC_CALIB_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_STAY_STDC_CALIB_DMODE_BF_MSK (0x00000040)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_STAY_STDC_CALIB_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_vtdc_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_SKIP_VTDC_CALIB_DMODE_BF_OFF ( 7)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_SKIP_VTDC_CALIB_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_SKIP_VTDC_CALIB_DMODE_BF_MSK (0x00000080)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_SKIP_VTDC_CALIB_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_vtdc_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_STAY_VTDC_CALIB_DMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_STAY_VTDC_CALIB_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_STAY_VTDC_CALIB_DMODE_BF_MSK (0x00000100)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_STAY_VTDC_CALIB_DMODE_BF_DEF (0x00000000)

///< Skip the sc calib.
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_SKIP_SC_CALIB_DMODE_BF_OFF ( 9)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_SKIP_SC_CALIB_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_SKIP_SC_CALIB_DMODE_BF_MSK (0x00000200)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_SKIP_SC_CALIB_DMODE_BF_DEF (0x00000200)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_sc_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_STAY_SC_CALIB_DMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_STAY_SC_CALIB_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_STAY_SC_CALIB_DMODE_BF_MSK (0x00000400)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_STAY_SC_CALIB_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_first_afc_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_SKIP_FIRST_AFC_CALIB_DMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_SKIP_FIRST_AFC_CALIB_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_SKIP_FIRST_AFC_CALIB_DMODE_BF_MSK (0x00000800)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_SKIP_FIRST_AFC_CALIB_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_first_afc_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_STAY_FIRST_AFC_CALIB_DMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_STAY_FIRST_AFC_CALIB_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_STAY_FIRST_AFC_CALIB_DMODE_BF_MSK (0x00001000)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_STAY_FIRST_AFC_CALIB_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_dco_swing_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_SKIP_DCO_SWING_CALIB_DMODE_BF_OFF (13)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_SKIP_DCO_SWING_CALIB_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_SKIP_DCO_SWING_CALIB_DMODE_BF_MSK (0x00002000)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_SKIP_DCO_SWING_CALIB_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_dco_swing_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_STAY_DCO_SWING_CALIB_DMODE_BF_OFF (14)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_STAY_DCO_SWING_CALIB_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_STAY_DCO_SWING_CALIB_DMODE_BF_MSK (0x00004000)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_STAY_DCO_SWING_CALIB_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_kvcc_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_SKIP_KVCC_CALIB_DMODE_BF_OFF (15)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_SKIP_KVCC_CALIB_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_SKIP_KVCC_CALIB_DMODE_BF_MSK (0x00008000)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_SKIP_KVCC_CALIB_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_kvcc_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_STAY_KVCC_CALIB_DMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_STAY_KVCC_CALIB_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_STAY_KVCC_CALIB_DMODE_BF_MSK (0x00010000)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_STAY_KVCC_CALIB_DMODE_BF_DEF (0x00000000)

///< If set to 1, the PLL will only run one afc calibration before kvcc
///< calibration                         If set to 0, the PLL will run
///< the AFC calibration for the second time after kvcc calibration ends.
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_SKIP_SECOND_AFC_CALIB_DMODE_BF_OFF (17)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_SKIP_SECOND_AFC_CALIB_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_SKIP_SECOND_AFC_CALIB_DMODE_BF_MSK (0x00020000)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_SKIP_SECOND_AFC_CALIB_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_second_afc_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_STAY_SECOND_AFC_CALIB_DMODE_BF_OFF (18)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_STAY_SECOND_AFC_CALIB_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_STAY_SECOND_AFC_CALIB_DMODE_BF_MSK (0x00040000)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_STAY_SECOND_AFC_CALIB_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_fine_fll_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_SKIP_FINE_FLL_CALIB_DMODE_BF_OFF (19)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_SKIP_FINE_FLL_CALIB_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_SKIP_FINE_FLL_CALIB_DMODE_BF_MSK (0x00080000)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_SKIP_FINE_FLL_CALIB_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_fine_fll_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_STAY_FINE_FLL_CALIB_DMODE_BF_OFF (20)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_STAY_FINE_FLL_CALIB_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_STAY_FINE_FLL_CALIB_DMODE_BF_MSK (0x00100000)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_CFG_STAY_FINE_FLL_CALIB_DMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_TEMP_TRACKING_DMODE register description at address offset 0x2d4
  *
  * Register default value:        0x00000027
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_temp_tracking_dmode
  * SERDES_LANE_ANA_PLL::TEMP_TRACKING
  */

typedef union {
  struct {
    uint32_t CFG_TEMP_TRACK_EN_DMODE : 1;
    ///< Enable signal for the FINE and DTR temperature tracking feature.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t CFG_FINE2DTR_RATIO_DMODE : 6;
    ///< Sets the ratio between DTR cap and fine cap. Required for DTR temp
    ///< tracking.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x13"
    uint32_t CFG_SSC_TRACK_EN_DMODE : 1;
    ///< Set this to &#39;1&#39; for SSC&#39;ed refclk to enable fast cap-swap
    ///< during boost mode.
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_temp_tracking_dmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_DMODE_DEFAULT (0x00000027U)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_DMODE_RD_MASK (0x000000ffU)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_DMODE_WR_MASK (0x000000ffU)


///< Enable signal for the FINE and DTR temperature tracking feature.
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_DMODE_CFG_TEMP_TRACK_EN_DMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_DMODE_CFG_TEMP_TRACK_EN_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_DMODE_CFG_TEMP_TRACK_EN_DMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_DMODE_CFG_TEMP_TRACK_EN_DMODE_BF_DEF (0x00000001)

///< Sets the ratio between DTR cap and fine cap. Required for DTR temp
///< tracking.
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_DMODE_CFG_FINE2DTR_RATIO_DMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_DMODE_CFG_FINE2DTR_RATIO_DMODE_BF_WID ( 6)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_DMODE_CFG_FINE2DTR_RATIO_DMODE_BF_MSK (0x0000007E)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_DMODE_CFG_FINE2DTR_RATIO_DMODE_BF_DEF (0x00000026)

///< Set this to &#39;1&#39; for SSC&#39;ed refclk to enable fast cap-swap
///< during boost mode.
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_DMODE_CFG_SSC_TRACK_EN_DMODE_BF_OFF ( 7)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_DMODE_CFG_SSC_TRACK_EN_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_DMODE_CFG_SSC_TRACK_EN_DMODE_BF_MSK (0x00000080)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_DMODE_CFG_SSC_TRACK_EN_DMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_ANA_CONTROL1_DMODE register description at address offset 0x2d8
  *
  * Register default value:        0x00000452
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_ana_control1_dmode
  * LCPLL_ANA_CONTROL Register
  */

typedef union {
  struct {
    uint32_t CFG_PLL_BYPASS_DMODE : 1;
    ///< When 1, the following output clocks will drive out the input refclk
    ///< (after prediv). Relevant to common PLL only.
    ///< 100MHz refclk                         156.25MHz refclk
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_SDDIV_EN_DMODE : 1;
    ///< Ungates dco/2 clock that goes into filter&#39;s SD post divider.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x1"
    uint32_t CFG_SDDIV_RATIO_DMODE : 3;
    ///< Sets Fine and DTR SD clock division ratio, from 1 to 5. Input clock
    ///< is dco/2 so possible ratios are 2,4,6,8,10.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x4"
    uint32_t CFG_SD2F0_CLK_SEL_DMODE : 1;
    ///< Sets DTR SD clock division ratio:                         0 - fine
    ///< SD clock                         1 - fine SD clock further divided
    ///< by 2
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t CFG_PREDIV_RATIO_DMODE : 4;
    ///< Refclk pre-divider ratio, from 1 to 5, relevant only to lane PLL where
    ///< refclksel pin is tied to 0.
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t CFG_REFCLK4LANEDIV_EN_DMODE : 1;
    ///< Ungates dco/2 clock that goes into refclk156div post divider.
    ///< 1 - common PLL                         0 - lane PLL
    ///< AccessType="RW" BitOffset="10" ResetValue="0x1"
    uint32_t CFG_FBDIV_ENB_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL1::cfg_fbdiv_enb
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t CFG_DCODIV2_EN_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL1::cfg_dcodiv2_en
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
    uint32_t CFG_HSMON0_SEL_DMODE : 4;
    ///< Select signal for obsmux0:                         0: vss
    ///< 1: iclk_int_refclk                         2: o_fbclk2obs_clk
    ///< 3: iclk_dco_divby2                         4: iclk_dco_divby5
    ///< 5: a2f_lv_0p9_2obs                         6: vss
    ///< 7: cbdiv56_lanediv32_clk                         8: clk_to_pcs40_clk
    ///< 9: clk_to_pcs33_34_clk                         A: o_sd_dtr_clk
    ///< B: o_sd_fine_clk                         C: ock_a2f_lv_ldo
    ///< D: otdc_calib_clk                         E: i_plllock
    ///< F: i_visa8to1_2obs
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t CFG_HSMON0_40INV_EN_DMODE : 1;
    ///< When 0, selected signal on hsmon0 is further delayed by 40 inverters.
    ///< This is to analyze thermal noise and supply noise jitter
    ///< Note that lately we found that this mode is set when this reg is set
    ///< to 0 (rather than 1 as previously thought)
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t CFG_HSMON1_SEL_DMODE : 4;
    ///< Select signal for obsmux1. Same signals as in obsmux0.
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t CFG_HSMON1_40INV_EN_DMODE : 1;
    ///< When 0, selected signal on hsmon1 is further delayed by 40 inverters.
    ///< This is to analyze thermal noise and supply noise jitter
    ///< Note that lately we found that this mode is set when this reg is set
    ///< to 0 (rather than 1 as previously thought)
    ///< AccessType="RW" BitOffset="25" ResetValue="0x0"
    uint32_t CFG_CLK2POSTDIV_DIV2_SEL_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL1::cfg_clk2postdiv_div2_sel
    ///< AccessType="RW" BitOffset="26" ResetValue="0x0"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="27" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_ana_ctrl1_dmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_DEFAULT (0x00000452U)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_RD_MASK (0x07ff1fffU)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_WR_MASK (0x07ff1fffU)


///< When 1, the following output clocks will drive out the input refclk
///< (after prediv). Relevant to common PLL only.
///< 100MHz refclk                         156.25MHz refclk
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_CFG_PLL_BYP_DMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_CFG_PLL_BYP_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_CFG_PLL_BYP_DMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_CFG_PLL_BYP_DMODE_BF_DEF (0x00000000)

///< Ungates dco/2 clock that goes into filter&#39;s SD post divider.
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_CFG_SDDIV_EN_DMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_CFG_SDDIV_EN_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_CFG_SDDIV_EN_DMODE_BF_MSK (0x00000002)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_CFG_SDDIV_EN_DMODE_BF_DEF (0x00000002)

///< Sets Fine and DTR SD clock division ratio, from 1 to 5. Input clock
///< is dco/2 so possible ratios are 2,4,6,8,10.
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_CFG_SDDIV_RATIO_DMODE_BF_OFF ( 2)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_CFG_SDDIV_RATIO_DMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_CFG_SDDIV_RATIO_DMODE_BF_MSK (0x0000001C)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_CFG_SDDIV_RATIO_DMODE_BF_DEF (0x00000010)

///< Sets DTR SD clock division ratio:                         0 - fine
///< SD clock                         1 - fine SD clock further divided
///< by 2
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_CFG_SD2F0_CLK_SEL_DMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_CFG_SD2F0_CLK_SEL_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_CFG_SD2F0_CLK_SEL_DMODE_BF_MSK (0x00000020)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_CFG_SD2F0_CLK_SEL_DMODE_BF_DEF (0x00000000)

///< Refclk pre-divider ratio, from 1 to 5, relevant only to lane PLL where
///< refclksel pin is tied to 0.
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_CFG_PREDIV_RATIO_DMODE_BF_OFF ( 6)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_CFG_PREDIV_RATIO_DMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_CFG_PREDIV_RATIO_DMODE_BF_MSK (0x000003C0)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_CFG_PREDIV_RATIO_DMODE_BF_DEF (0x00000040)

///< Ungates dco/2 clock that goes into refclk156div post divider.
///< 1 - common PLL                         0 - lane PLL
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_CFG_REFCLK4LANEDIV_EN_DMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_CFG_REFCLK4LANEDIV_EN_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_CFG_REFCLK4LANEDIV_EN_DMODE_BF_MSK (0x00000400)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_CFG_REFCLK4LANEDIV_EN_DMODE_BF_DEF (0x00000400)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL1::cfg_fbdiv_enb
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_CFG_FBDIV_ENB_DMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_CFG_FBDIV_ENB_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_CFG_FBDIV_ENB_DMODE_BF_MSK (0x00000800)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_CFG_FBDIV_ENB_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL1::cfg_dcodiv2_en
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_CFG_DCODIV2_EN_DMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_CFG_DCODIV2_EN_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_CFG_DCODIV2_EN_DMODE_BF_MSK (0x00001000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_CFG_DCODIV2_EN_DMODE_BF_DEF (0x00000000)

///< Select signal for obsmux0:                         0: vss
///< 1: iclk_int_refclk                         2: o_fbclk2obs_clk
///< 3: iclk_dco_divby2                         4: iclk_dco_divby5
///< 5: a2f_lv_0p9_2obs                         6: vss
///< 7: cbdiv56_lanediv32_clk                         8: clk_to_pcs40_clk
///< 9: clk_to_pcs33_34_clk                         A: o_sd_dtr_clk
///< B: o_sd_fine_clk                         C: ock_a2f_lv_ldo
///< D: otdc_calib_clk                         E: i_plllock
///< F: i_visa8to1_2obs
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_CFG_HSMON0_SEL_DMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_CFG_HSMON0_SEL_DMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_CFG_HSMON0_SEL_DMODE_BF_MSK (0x000F0000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_CFG_HSMON0_SEL_DMODE_BF_DEF (0x00000000)

///< When 0, selected signal on hsmon0 is further delayed by 40 inverters.
///< This is to analyze thermal noise and supply noise jitter
///< Note that lately we found that this mode is set when this reg is set
///< to 0 (rather than 1 as previously thought)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_CFG_HSMON0_40INV_EN_DMODE_BF_OFF (20)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_CFG_HSMON0_40INV_EN_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_CFG_HSMON0_40INV_EN_DMODE_BF_MSK (0x00100000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_CFG_HSMON0_40INV_EN_DMODE_BF_DEF (0x00000000)

///< Select signal for obsmux1. Same signals as in obsmux0.
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_CFG_HSMON1_SEL_DMODE_BF_OFF (21)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_CFG_HSMON1_SEL_DMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_CFG_HSMON1_SEL_DMODE_BF_MSK (0x01E00000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_CFG_HSMON1_SEL_DMODE_BF_DEF (0x00000000)

///< When 0, selected signal on hsmon1 is further delayed by 40 inverters.
///< This is to analyze thermal noise and supply noise jitter
///< Note that lately we found that this mode is set when this reg is set
///< to 0 (rather than 1 as previously thought)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_CFG_HSMON1_40INV_EN_DMODE_BF_OFF (25)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_CFG_HSMON1_40INV_EN_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_CFG_HSMON1_40INV_EN_DMODE_BF_MSK (0x02000000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_CFG_HSMON1_40INV_EN_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL1::cfg_clk2postdiv_div2_sel
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_CFG_CLK2POSTDIV_DIV2_SEL_DMODE_BF_OFF (26)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_CFG_CLK2POSTDIV_DIV2_SEL_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_CFG_CLK2POSTDIV_DIV2_SEL_DMODE_BF_MSK (0x04000000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_CFG_CLK2POSTDIV_DIV2_SEL_DMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_ANA_CONTROL2_DMODE register description at address offset 0x2dc
  *
  * Register default value:        0x000080A0
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_ana_control2_dmode
  * SERDES_LANE_ANA_PLL::ANA_CONTROL2
  */

typedef union {
  struct {
    uint32_t CFG_REFCLK_SEL_DMODE : 1;
    ///< Relevant only if id_pll_refclksel[2:0] (on PLL interface) is set to
    ///< 3&#39;b0.                         Selects the refclk source for the
    ///< PLL:                         3&#39;h0 : vss
    ///< 3&#39;h1 : ref_clk_1                         3&#39;h2 : ref_clk_2
    ///< 3&#39;h3 : ref_clk_3                         3&#39;h4 : ref_clk_4
    ///< 3&#39;h5 : ref_clk_5                         3&#39;h6 : vss
    ///< 3&#39;h7 : vss
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_REFCLK4LANE_DIVRATIO_DMODE : 10;
    ///< Division ratio for refclk156 post divider (input clock is dco).
    ///< AccessType="RW" BitOffset="1" ResetValue="0x50"
    uint32_t CFG_A2F_CLKREG_EN_DMODE : 1;
    ///< Enables A2F.                         A2F are used to measure internal
    ///< supply noise.
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t CFG_A2F_CLKUNREG_EN_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL2::cfg_a2f_clkunreg_en
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t CFG_A2F_LDO_DCO_EN_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL2::cfg_a2f_ldo_dco_en
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t CFG_BTI_EN_DMODE : 1;
    ///< BTI clock gate signal. By default, whenever PLL is off, BTI clock
    ///< drives DCO clock distribution to prevent assymetric Aging. Setting
    ///< this register to &#39;1&#39; will gate BTI clock.
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t CFG_DCO_ACBUF2TX_EN_DMODE : 1;
    ///< Used as LDO enable.                         Gated by pll enable.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x1"
    uint32_t CFG_HSCNTR_HSCLK_SEL_OVR_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL2::cfg_hscntr_hsclk_sel_ovr
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t CFG_HSCNTR_HSCLK_SEL_OVR_VAL_DMODE : 3;
    ///< High speed counter (hscnter) input.                         &#39;0&#39;
    ///< - input from DCO/4 (default)                         &#39;1&#39; -
    ///< A2F_ldo clock is routed to high speed counter, allowing measurement
    ///< of A2F frequency in HVM (like in IDV)                         &#39;2&#39;
    ///< - A2F_lv clock is routed to high speed counter, allowing measurement
    ///< of A2F frequency in HVM (like in IDV)                         &#39;3&#39;
    ///< - vss
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t CFG_PLL_REFCLK_HSMODE_SEL_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL2::cfg_pll_refclk_hsmode_sel
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_ana_ctrl2_dmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_DMODE_DEFAULT (0x000080a0U)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_DMODE_RD_MASK (0x001fffffU)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_DMODE_WR_MASK (0x001fffffU)


///< Relevant only if id_pll_refclksel[2:0] (on PLL interface) is set to
///< 3&#39;b0.                         Selects the refclk source for the
///< PLL:                         3&#39;h0 : vss
///< 3&#39;h1 : ref_clk_1                         3&#39;h2 : ref_clk_2
///< 3&#39;h3 : ref_clk_3                         3&#39;h4 : ref_clk_4
///< 3&#39;h5 : ref_clk_5                         3&#39;h6 : vss
///< 3&#39;h7 : vss
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_DMODE_CFG_REFCLK_SEL_DMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_DMODE_CFG_REFCLK_SEL_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_DMODE_CFG_REFCLK_SEL_DMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_DMODE_CFG_REFCLK_SEL_DMODE_BF_DEF (0x00000000)

///< Division ratio for refclk156 post divider (input clock is dco).
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_DMODE_CFG_REFCLK4LANE_DIVRATIO_DMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_DMODE_CFG_REFCLK4LANE_DIVRATIO_DMODE_BF_WID (10)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_DMODE_CFG_REFCLK4LANE_DIVRATIO_DMODE_BF_MSK (0x000007FE)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_DMODE_CFG_REFCLK4LANE_DIVRATIO_DMODE_BF_DEF (0x000000A0)

///< Enables A2F.                         A2F are used to measure internal
///< supply noise.
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_DMODE_CFG_A2F_CLKREG_EN_DMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_DMODE_CFG_A2F_CLKREG_EN_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_DMODE_CFG_A2F_CLKREG_EN_DMODE_BF_MSK (0x00000800)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_DMODE_CFG_A2F_CLKREG_EN_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL2::cfg_a2f_clkunreg_en
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_DMODE_CFG_A2F_CLKUNREG_EN_DMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_DMODE_CFG_A2F_CLKUNREG_EN_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_DMODE_CFG_A2F_CLKUNREG_EN_DMODE_BF_MSK (0x00001000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_DMODE_CFG_A2F_CLKUNREG_EN_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL2::cfg_a2f_ldo_dco_en
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_DMODE_CFG_A2F_LDO_DCO_EN_DMODE_BF_OFF (13)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_DMODE_CFG_A2F_LDO_DCO_EN_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_DMODE_CFG_A2F_LDO_DCO_EN_DMODE_BF_MSK (0x00002000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_DMODE_CFG_A2F_LDO_DCO_EN_DMODE_BF_DEF (0x00000000)

///< BTI clock gate signal. By default, whenever PLL is off, BTI clock
///< drives DCO clock distribution to prevent assymetric Aging. Setting
///< this register to &#39;1&#39; will gate BTI clock.
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_DMODE_CFG_BTI_EN_DMODE_BF_OFF (14)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_DMODE_CFG_BTI_EN_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_DMODE_CFG_BTI_EN_DMODE_BF_MSK (0x00004000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_DMODE_CFG_BTI_EN_DMODE_BF_DEF (0x00000000)

///< Used as LDO enable.                         Gated by pll enable.
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_DMODE_CFG_DCO_ACBUF2TX_EN_DMODE_BF_OFF (15)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_DMODE_CFG_DCO_ACBUF2TX_EN_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_DMODE_CFG_DCO_ACBUF2TX_EN_DMODE_BF_MSK (0x00008000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_DMODE_CFG_DCO_ACBUF2TX_EN_DMODE_BF_DEF (0x00008000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL2::cfg_hscntr_hsclk_sel_ovr
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_DMODE_CFG_HSCNTR_HSCLK_SEL_OVR_DMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_DMODE_CFG_HSCNTR_HSCLK_SEL_OVR_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_DMODE_CFG_HSCNTR_HSCLK_SEL_OVR_DMODE_BF_MSK (0x00010000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_DMODE_CFG_HSCNTR_HSCLK_SEL_OVR_DMODE_BF_DEF (0x00000000)

///< High speed counter (hscnter) input.                         &#39;0&#39;
///< - input from DCO/4 (default)                         &#39;1&#39; -
///< A2F_ldo clock is routed to high speed counter, allowing measurement
///< of A2F frequency in HVM (like in IDV)                         &#39;2&#39;
///< - A2F_lv clock is routed to high speed counter, allowing measurement
///< of A2F frequency in HVM (like in IDV)                         &#39;3&#39;
///< - vss
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_DMODE_CFG_HSCNTR_HSCLK_SEL_OVR_VAL_DMODE_BF_OFF (17)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_DMODE_CFG_HSCNTR_HSCLK_SEL_OVR_VAL_DMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_DMODE_CFG_HSCNTR_HSCLK_SEL_OVR_VAL_DMODE_BF_MSK (0x000E0000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_DMODE_CFG_HSCNTR_HSCLK_SEL_OVR_VAL_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL2::cfg_pll_refclk_hsmode_sel
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_DMODE_CFG_PLL_REFCLK_HSMODE_SEL_DMODE_BF_OFF (20)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_DMODE_CFG_PLL_REFCLK_HSMODE_SEL_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_DMODE_CFG_PLL_REFCLK_HSMODE_SEL_DMODE_BF_MSK (0x00100000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_DMODE_CFG_PLL_REFCLK_HSMODE_SEL_DMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_ANA_CONTROL3_DMODE register description at address offset 0x2e0
  *
  * Register default value:        0x00A00001
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_ana_control3_dmode
  * SERDES_LANE_ANA_PLL::ANA_CONTROL3
  */

typedef union {
  struct {
    uint32_t CFG_PKSEN_EN_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_en
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t CFG_PKSEN_COMP_DMODE : 4;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_comp
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t CFG_PKSEN_COMP_EN_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_comp_en
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t CFG_PKSEN_COMP_INN_SEL_DMODE : 2;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_comp_inn_sel
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t CFG_PKSEN_COMP_INP_SEL_DMODE : 2;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_comp_inp_sel
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CFG_PKSEN_COMP_VREF_VAL_DMODE : 6;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_comp_vref_val
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t CFG_PKSEN_VREF_SEL_DMODE : 6;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_vref_sel
    ///< AccessType="RW" BitOffset="16" ResetValue="0x20"
    uint32_t CFG_LDO_PKSEN_BYP_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_ldo_pksen_byp
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t CFG_PKSEN_RES_BYPB_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_res_bypb
    ///< AccessType="RW" BitOffset="23" ResetValue="0x1"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_ana_ctrl3_dmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_DMODE_DEFAULT (0x00a00001U)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_DMODE_RD_MASK (0x00ffffffU)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_DMODE_WR_MASK (0x00ffffffU)


///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_en
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_DMODE_CFG_PKSEN_EN_DMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_DMODE_CFG_PKSEN_EN_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_DMODE_CFG_PKSEN_EN_DMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_DMODE_CFG_PKSEN_EN_DMODE_BF_DEF (0x00000001)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_comp
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_DMODE_CFG_PKSEN_COMP_DMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_DMODE_CFG_PKSEN_COMP_DMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_DMODE_CFG_PKSEN_COMP_DMODE_BF_MSK (0x0000001E)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_DMODE_CFG_PKSEN_COMP_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_comp_en
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_DMODE_CFG_PKSEN_COMP_EN_DMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_DMODE_CFG_PKSEN_COMP_EN_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_DMODE_CFG_PKSEN_COMP_EN_DMODE_BF_MSK (0x00000020)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_DMODE_CFG_PKSEN_COMP_EN_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_comp_inn_sel
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_DMODE_CFG_PKSEN_COMP_INN_SEL_DMODE_BF_OFF ( 6)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_DMODE_CFG_PKSEN_COMP_INN_SEL_DMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_DMODE_CFG_PKSEN_COMP_INN_SEL_DMODE_BF_MSK (0x000000C0)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_DMODE_CFG_PKSEN_COMP_INN_SEL_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_comp_inp_sel
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_DMODE_CFG_PKSEN_COMP_INP_SEL_DMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_DMODE_CFG_PKSEN_COMP_INP_SEL_DMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_DMODE_CFG_PKSEN_COMP_INP_SEL_DMODE_BF_MSK (0x00000300)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_DMODE_CFG_PKSEN_COMP_INP_SEL_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_comp_vref_val
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_DMODE_CFG_PKSEN_COMP_VREF_VAL_DMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_DMODE_CFG_PKSEN_COMP_VREF_VAL_DMODE_BF_WID ( 6)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_DMODE_CFG_PKSEN_COMP_VREF_VAL_DMODE_BF_MSK (0x0000FC00)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_DMODE_CFG_PKSEN_COMP_VREF_VAL_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_vref_sel
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_DMODE_CFG_PKSEN_VREF_SEL_DMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_DMODE_CFG_PKSEN_VREF_SEL_DMODE_BF_WID ( 6)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_DMODE_CFG_PKSEN_VREF_SEL_DMODE_BF_MSK (0x003F0000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_DMODE_CFG_PKSEN_VREF_SEL_DMODE_BF_DEF (0x00200000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_ldo_pksen_byp
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_DMODE_CFG_LDO_PKSEN_BYP_DMODE_BF_OFF (22)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_DMODE_CFG_LDO_PKSEN_BYP_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_DMODE_CFG_LDO_PKSEN_BYP_DMODE_BF_MSK (0x00400000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_DMODE_CFG_LDO_PKSEN_BYP_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_res_bypb
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_DMODE_CFG_PKSEN_RES_BYPB_DMODE_BF_OFF (23)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_DMODE_CFG_PKSEN_RES_BYPB_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_DMODE_CFG_PKSEN_RES_BYPB_DMODE_BF_MSK (0x00800000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_DMODE_CFG_PKSEN_RES_BYPB_DMODE_BF_DEF (0x00800000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_DFX0_DMODE register description at address offset 0x2e4
  *
  * Register default value:        0x00040000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_dfx0_dmode
  * SERDES_LANE_ANA_PLL::DFX0
  */

typedef union {
  struct {
    uint32_t CFG_FINE_MODULATION_EN_DMODE : 1;
    ///< Modulates fine code by adding an offset that toggles between values
    ///< defined by cfg_fine_modulation_sel.                          cfg_modulation_toggle_delay
    ///< sets modulation frequency.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_FINE_MODULATION_SEL_DMODE : 1;
    ///< Sets magnitude of fine modulation:                          0 - fine
    ///< offset toggles between 0 and +1.                         1 - fine
    ///< offset toggles between 0 and cfg_fine2dtr_ratio.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t CFG_TDCPE_MODULATION_EN_DMODE : 1;
    ///< Modulates TDC PE by adding an offset that toggles between 0 and 1.
    ///< cfg_modulation_toggle_delay sets modulation frequency.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t CFG_LDO_MODULATION_EN_DMODE : 1;
    ///< Modulates LDO by adding an offset that toggles between 0 and 1.
    ///< cfg_modulation_toggle_delay sets modulation frequency.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t CFG_MODULATION_TOGGLE_DELAY_DMODE : 4;
    ///< Sets modulation frequency.                         Code would toggle
    ///< every 2^reg refclk cycles.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t CFG_VISA8TO1_2OBS_SEL_DMODE : 3;
    ///< Selects which bit in VISA lane0 would be routed to high speed monitor
    ///< mux.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CFG_DFX_FEEDFWRD_OFFSET_OVR_EN_DMODE : 1;
    ///< Enables overriding feed forward offset. Useful in integer mode to
    ///< shift fbclk phase.
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t CFG_DFX_FEEDFWRDPHASE_OVR_VAL_DMODE : 5;
    ///< Sets feed forward offset override value. Useful in integer mode to
    ///< shift fbclk phase.                         The 9 integer bits, 3 fractional
    ///< bits.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t CFG_DFX_DISABLE_DFT_TIMER_OVRD_VAL_DMODE : 1;
    ///< When cfg_dfx_disable_dft_timer_ovrd_en=1, this bit will set DFT timer
    ///< mode.                          When 0, DFT measurements always run.
    ///< When 1, DFT measurements always off.                          No need
    ///< to change this reg. Just keep it at 0. (could have been removed)
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t CFG_DFX_DISABLE_DFT_TIMER_OVRD_EN_DMODE : 1;
    ///< When 0, DFT measurements would stop when minmax timer overflows.
    ///< When 1, DFT measurements run based on cfg_dfx_disable_dft_timer_ovrd_val.
    ///< AccessType="RW" BitOffset="18" ResetValue="0x1"
    uint32_t CFG_DPSO_BYPASS_MODE_DMODE : 1;
    ///< When 0, DPSO bus is sampled by fbclk falling edge before sent to TX
    ///< PISO                         When 1, the sample is bypassed. This
    ///< is needed when monitoring VISA signals that are not of fbclk nor on
    ///< refclk domain.
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_dfx0_dmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_DFX0_DMODE_DEFAULT (0x00040000U)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_DMODE_RD_MASK (0x000fffffU)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_DMODE_WR_MASK (0x000fffffU)


///< Modulates fine code by adding an offset that toggles between values
///< defined by cfg_fine_modulation_sel.                          cfg_modulation_toggle_delay
///< sets modulation frequency.
#define PMA_TXPLLCFGLOADER_MSG_DFX0_DMODE_CFG_FINE_MOD_EN_DMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_DMODE_CFG_FINE_MOD_EN_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_DMODE_CFG_FINE_MOD_EN_DMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_DMODE_CFG_FINE_MOD_EN_DMODE_BF_DEF (0x00000000)

///< Sets magnitude of fine modulation:                          0 - fine
///< offset toggles between 0 and +1.                         1 - fine
///< offset toggles between 0 and cfg_fine2dtr_ratio.
#define PMA_TXPLLCFGLOADER_MSG_DFX0_DMODE_CFG_FINE_MOD_SEL_DMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_DMODE_CFG_FINE_MOD_SEL_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_DMODE_CFG_FINE_MOD_SEL_DMODE_BF_MSK (0x00000002)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_DMODE_CFG_FINE_MOD_SEL_DMODE_BF_DEF (0x00000000)

///< Modulates TDC PE by adding an offset that toggles between 0 and 1.
///< cfg_modulation_toggle_delay sets modulation frequency.
#define PMA_TXPLLCFGLOADER_MSG_DFX0_DMODE_CFG_TDCPE_MOD_EN_DMODE_BF_OFF ( 2)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_DMODE_CFG_TDCPE_MOD_EN_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_DMODE_CFG_TDCPE_MOD_EN_DMODE_BF_MSK (0x00000004)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_DMODE_CFG_TDCPE_MOD_EN_DMODE_BF_DEF (0x00000000)

///< Modulates LDO by adding an offset that toggles between 0 and 1.
///< cfg_modulation_toggle_delay sets modulation frequency.
#define PMA_TXPLLCFGLOADER_MSG_DFX0_DMODE_CFG_LDO_MOD_EN_DMODE_BF_OFF ( 3)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_DMODE_CFG_LDO_MOD_EN_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_DMODE_CFG_LDO_MOD_EN_DMODE_BF_MSK (0x00000008)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_DMODE_CFG_LDO_MOD_EN_DMODE_BF_DEF (0x00000000)

///< Sets modulation frequency.                         Code would toggle
///< every 2^reg refclk cycles.
#define PMA_TXPLLCFGLOADER_MSG_DFX0_DMODE_CFG_MOD_TOGGLE_DELAY_DMODE_BF_OFF ( 4)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_DMODE_CFG_MOD_TOGGLE_DELAY_DMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_DMODE_CFG_MOD_TOGGLE_DELAY_DMODE_BF_MSK (0x000000F0)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_DMODE_CFG_MOD_TOGGLE_DELAY_DMODE_BF_DEF (0x00000000)

///< Selects which bit in VISA lane0 would be routed to high speed monitor
///< mux.
#define PMA_TXPLLCFGLOADER_MSG_DFX0_DMODE_CFG_VISA8TO1_2OBS_SEL_DMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_DMODE_CFG_VISA8TO1_2OBS_SEL_DMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_DMODE_CFG_VISA8TO1_2OBS_SEL_DMODE_BF_MSK (0x00000700)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_DMODE_CFG_VISA8TO1_2OBS_SEL_DMODE_BF_DEF (0x00000000)

///< Enables overriding feed forward offset. Useful in integer mode to
///< shift fbclk phase.
#define PMA_TXPLLCFGLOADER_MSG_DFX0_DMODE_CFG_DFX_FEEDFWRD_OFFSET_OVR_EN_DMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_DMODE_CFG_DFX_FEEDFWRD_OFFSET_OVR_EN_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_DMODE_CFG_DFX_FEEDFWRD_OFFSET_OVR_EN_DMODE_BF_MSK (0x00000800)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_DMODE_CFG_DFX_FEEDFWRD_OFFSET_OVR_EN_DMODE_BF_DEF (0x00000000)

///< Sets feed forward offset override value. Useful in integer mode to
///< shift fbclk phase.                         The 9 integer bits, 3 fractional
///< bits.
#define PMA_TXPLLCFGLOADER_MSG_DFX0_DMODE_CFG_DFX_FEEDFWRDPHASE_OVR_VAL_DMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_DMODE_CFG_DFX_FEEDFWRDPHASE_OVR_VAL_DMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_DMODE_CFG_DFX_FEEDFWRDPHASE_OVR_VAL_DMODE_BF_MSK (0x0001F000)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_DMODE_CFG_DFX_FEEDFWRDPHASE_OVR_VAL_DMODE_BF_DEF (0x00000000)

///< When cfg_dfx_disable_dft_timer_ovrd_en=1, this bit will set DFT timer
///< mode.                          When 0, DFT measurements always run.
///< When 1, DFT measurements always off.                          No need
///< to change this reg. Just keep it at 0. (could have been removed)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_DMODE_CFG_DFX_DIS_DFT_TIMER_OVRD_VAL_DMODE_BF_OFF (17)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_DMODE_CFG_DFX_DIS_DFT_TIMER_OVRD_VAL_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_DMODE_CFG_DFX_DIS_DFT_TIMER_OVRD_VAL_DMODE_BF_MSK (0x00020000)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_DMODE_CFG_DFX_DIS_DFT_TIMER_OVRD_VAL_DMODE_BF_DEF (0x00000000)

///< When 0, DFT measurements would stop when minmax timer overflows.
///< When 1, DFT measurements run based on cfg_dfx_disable_dft_timer_ovrd_val.
#define PMA_TXPLLCFGLOADER_MSG_DFX0_DMODE_CFG_DFX_DIS_DFT_TIMER_OVRD_EN_DMODE_BF_OFF (18)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_DMODE_CFG_DFX_DIS_DFT_TIMER_OVRD_EN_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_DMODE_CFG_DFX_DIS_DFT_TIMER_OVRD_EN_DMODE_BF_MSK (0x00040000)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_DMODE_CFG_DFX_DIS_DFT_TIMER_OVRD_EN_DMODE_BF_DEF (0x00040000)

///< When 0, DPSO bus is sampled by fbclk falling edge before sent to TX
///< PISO                         When 1, the sample is bypassed. This
///< is needed when monitoring VISA signals that are not of fbclk nor on
///< refclk domain.
#define PMA_TXPLLCFGLOADER_MSG_DFX0_DMODE_CFG_DPSO_BYP_MODE_DMODE_BF_OFF (19)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_DMODE_CFG_DPSO_BYP_MODE_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_DMODE_CFG_DPSO_BYP_MODE_DMODE_BF_MSK (0x00080000)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_DMODE_CFG_DPSO_BYP_MODE_DMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_DFX1_DMODE register description at address offset 0x2e8
  *
  * Register default value:        0x0001AAAA
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_dfx1_dmode
  * SERDES_LANE_ANA_PLL::DFX1
  */

typedef union {
  struct {
    uint32_t CFG_DPSO_MARKER_DMODE : 16;
    ///< When serializing VISA 8b bus to TX, additional 16 (upper bits) are
    ///< set according to this register which could be used as a marker
    ///< AccessType="RW" BitOffset="0" ResetValue="0xAAAA"
    uint32_t CFG_TDCPE_MODULATION_VAL_DMODE : 5;
    ///< While cfg_tdcpe_modulation_en=1 define the TDC/STDC amplitude offset
    ///< (integer) during the tdc/stdc modulation.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x1"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_dfx1_dmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_DFX1_DMODE_DEFAULT (0x0001aaaaU)
#define PMA_TXPLLCFGLOADER_MSG_DFX1_DMODE_RD_MASK (0x001fffffU)
#define PMA_TXPLLCFGLOADER_MSG_DFX1_DMODE_WR_MASK (0x001fffffU)


///< When serializing VISA 8b bus to TX, additional 16 (upper bits) are
///< set according to this register which could be used as a marker
#define PMA_TXPLLCFGLOADER_MSG_DFX1_DMODE_CFG_DPSO_MARKER_DMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_DFX1_DMODE_CFG_DPSO_MARKER_DMODE_BF_WID (16)
#define PMA_TXPLLCFGLOADER_MSG_DFX1_DMODE_CFG_DPSO_MARKER_DMODE_BF_MSK (0x0000FFFF)
#define PMA_TXPLLCFGLOADER_MSG_DFX1_DMODE_CFG_DPSO_MARKER_DMODE_BF_DEF (0x0000AAAA)

///< While cfg_tdcpe_modulation_en=1 define the TDC/STDC amplitude offset
///< (integer) during the tdc/stdc modulation.
#define PMA_TXPLLCFGLOADER_MSG_DFX1_DMODE_CFG_TDCPE_MOD_VAL_DMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_DFX1_DMODE_CFG_TDCPE_MOD_VAL_DMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_DFX1_DMODE_CFG_TDCPE_MOD_VAL_DMODE_BF_MSK (0x001F0000)
#define PMA_TXPLLCFGLOADER_MSG_DFX1_DMODE_CFG_TDCPE_MOD_VAL_DMODE_BF_DEF (0x00010000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_LDO0_DMODE register description at address offset 0x2ec
  *
  * Register default value:        0x059002E0
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_ldo0_dmode
  * SERDES_LANE_ANA_PLL::LDO0
  */

typedef union {
  struct {
    uint32_t CFG_LDOCLK_BETA_DMODE : 3;
    ///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldoclk_beta
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_LDOCLK_BYP_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldoclk_byp
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t CFG_LDOCLK_VREF_SEL_DMODE : 6;
    ///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldoclk_vref_sel
    ///< AccessType="RW" BitOffset="4" ResetValue="0x2E"
    uint32_t CFG_LDODCO_BETA_DMODE : 3;
    ///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldodco_beta
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t CFG_LDODCO_BYP_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldodco_byp
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t CFG_LDODCO_VREF_RC_DMODE : 2;
    ///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldodco_vref_rc
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t CFG_LDODCO_VREF_SEL_DMODE : 6;
    ///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldodco_vref_sel
    ///< AccessType="RW" BitOffset="16" ResetValue="0x10"
    uint32_t CFG_LDODCO_HIGH_VREF_SEL_DMODE : 6;
    ///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldodco_high_vref_sel
    ///< AccessType="RW" BitOffset="22" ResetValue="0x16"
    uint32_t CFG_LDOREFGEN_BETA_DMODE : 3;
    ///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldorefgen_beta
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t CFG_VREFGEN_BYP_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::LDO0::cfg_vrefgen_byp
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_ldo0_dmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_LDO0_DMODE_DEFAULT (0x059002e0U)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_DMODE_RD_MASK (0xffffffffU)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_DMODE_WR_MASK (0xffffffffU)


///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldoclk_beta
#define PMA_TXPLLCFGLOADER_MSG_LDO0_DMODE_CFG_LDOCLK_BETA_DMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_DMODE_CFG_LDOCLK_BETA_DMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_DMODE_CFG_LDOCLK_BETA_DMODE_BF_MSK (0x00000007)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_DMODE_CFG_LDOCLK_BETA_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldoclk_byp
#define PMA_TXPLLCFGLOADER_MSG_LDO0_DMODE_CFG_LDOCLK_BYP_DMODE_BF_OFF ( 3)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_DMODE_CFG_LDOCLK_BYP_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_DMODE_CFG_LDOCLK_BYP_DMODE_BF_MSK (0x00000008)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_DMODE_CFG_LDOCLK_BYP_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldoclk_vref_sel
#define PMA_TXPLLCFGLOADER_MSG_LDO0_DMODE_CFG_LDOCLK_VREF_SEL_DMODE_BF_OFF ( 4)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_DMODE_CFG_LDOCLK_VREF_SEL_DMODE_BF_WID ( 6)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_DMODE_CFG_LDOCLK_VREF_SEL_DMODE_BF_MSK (0x000003F0)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_DMODE_CFG_LDOCLK_VREF_SEL_DMODE_BF_DEF (0x000002E0)

///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldodco_beta
#define PMA_TXPLLCFGLOADER_MSG_LDO0_DMODE_CFG_LDODCO_BETA_DMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_DMODE_CFG_LDODCO_BETA_DMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_DMODE_CFG_LDODCO_BETA_DMODE_BF_MSK (0x00001C00)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_DMODE_CFG_LDODCO_BETA_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldodco_byp
#define PMA_TXPLLCFGLOADER_MSG_LDO0_DMODE_CFG_LDODCO_BYP_DMODE_BF_OFF (13)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_DMODE_CFG_LDODCO_BYP_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_DMODE_CFG_LDODCO_BYP_DMODE_BF_MSK (0x00002000)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_DMODE_CFG_LDODCO_BYP_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldodco_vref_rc
#define PMA_TXPLLCFGLOADER_MSG_LDO0_DMODE_CFG_LDODCO_VREF_RC_DMODE_BF_OFF (14)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_DMODE_CFG_LDODCO_VREF_RC_DMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_DMODE_CFG_LDODCO_VREF_RC_DMODE_BF_MSK (0x0000C000)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_DMODE_CFG_LDODCO_VREF_RC_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldodco_vref_sel
#define PMA_TXPLLCFGLOADER_MSG_LDO0_DMODE_CFG_LDODCO_VREF_SEL_DMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_DMODE_CFG_LDODCO_VREF_SEL_DMODE_BF_WID ( 6)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_DMODE_CFG_LDODCO_VREF_SEL_DMODE_BF_MSK (0x003F0000)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_DMODE_CFG_LDODCO_VREF_SEL_DMODE_BF_DEF (0x00100000)

///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldodco_high_vref_sel
#define PMA_TXPLLCFGLOADER_MSG_LDO0_DMODE_CFG_LDODCO_HIGH_VREF_SEL_DMODE_BF_OFF (22)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_DMODE_CFG_LDODCO_HIGH_VREF_SEL_DMODE_BF_WID ( 6)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_DMODE_CFG_LDODCO_HIGH_VREF_SEL_DMODE_BF_MSK (0x0FC00000)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_DMODE_CFG_LDODCO_HIGH_VREF_SEL_DMODE_BF_DEF (0x05800000)

///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldorefgen_beta
#define PMA_TXPLLCFGLOADER_MSG_LDO0_DMODE_CFG_LDOREFGEN_BETA_DMODE_BF_OFF (28)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_DMODE_CFG_LDOREFGEN_BETA_DMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_DMODE_CFG_LDOREFGEN_BETA_DMODE_BF_MSK (0x70000000)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_DMODE_CFG_LDOREFGEN_BETA_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO0::cfg_vrefgen_byp
#define PMA_TXPLLCFGLOADER_MSG_LDO0_DMODE_CFG_VREFGEN_BYP_DMODE_BF_OFF (31)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_DMODE_CFG_VREFGEN_BYP_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_DMODE_CFG_VREFGEN_BYP_DMODE_BF_MSK (0x80000000)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_DMODE_CFG_VREFGEN_BYP_DMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_LDO1_DMODE register description at address offset 0x2f0
  *
  * Register default value:        0x000000E0
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_ldo1_dmode
  * SERDES_LANE_ANA_PLL::LDO1
  */

typedef union {
  struct {
    uint32_t CFG_INV_VPEAK_COMB_FB_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::LDO1::cfg_inv_vpeak_comb_fb
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_LDO_BIAS_SEL_DMODE : 3;
    ///< SERDES_LANE_ANA_PLL::LDO1::cfg_ldo_bias_sel
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t CFG_LDO_BIAS_EXT_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::LDO1::cfg_ldo_bias_ext
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t CFG_LDO_PKSEN_HIGHZ_B_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::LDO1::cfg_ldo_pksen_highz_b
    ///< AccessType="RW" BitOffset="5" ResetValue="0x1"
    uint32_t CFG_LDO_CLK_HIGHZ_B_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::LDO1::cfg_ldo_clk_highz_b
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t CFG_LDO_DCO_HIGHZ_B_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::LDO1::cfg_ldo_dco_highz_b
    ///< AccessType="RW" BitOffset="7" ResetValue="0x1"
    uint32_t CFG_DCMON_SEL_DMODE : 4;
    ///< Selection pins for DFx MUXs
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CFG_DCMON1_EN_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::LDO1::cfg_dcmon1_en
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t CFG_DCMON2_EN_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::LDO1::cfg_dcmon2_en
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t  : 18;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_ldo1_dmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_LDO1_DMODE_DEFAULT (0x000000e0U)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_DMODE_RD_MASK (0x00003fffU)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_DMODE_WR_MASK (0x00003fffU)


///< SERDES_LANE_ANA_PLL::LDO1::cfg_inv_vpeak_comb_fb
#define PMA_TXPLLCFGLOADER_MSG_LDO1_DMODE_CFG_INV_VPEAK_COMB_FB_DMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_DMODE_CFG_INV_VPEAK_COMB_FB_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_DMODE_CFG_INV_VPEAK_COMB_FB_DMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_DMODE_CFG_INV_VPEAK_COMB_FB_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO1::cfg_ldo_bias_sel
#define PMA_TXPLLCFGLOADER_MSG_LDO1_DMODE_CFG_LDO_BIAS_SEL_DMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_DMODE_CFG_LDO_BIAS_SEL_DMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_DMODE_CFG_LDO_BIAS_SEL_DMODE_BF_MSK (0x0000000E)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_DMODE_CFG_LDO_BIAS_SEL_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO1::cfg_ldo_bias_ext
#define PMA_TXPLLCFGLOADER_MSG_LDO1_DMODE_CFG_LDO_BIAS_EXT_DMODE_BF_OFF ( 4)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_DMODE_CFG_LDO_BIAS_EXT_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_DMODE_CFG_LDO_BIAS_EXT_DMODE_BF_MSK (0x00000010)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_DMODE_CFG_LDO_BIAS_EXT_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO1::cfg_ldo_pksen_highz_b
#define PMA_TXPLLCFGLOADER_MSG_LDO1_DMODE_CFG_LDO_PKSEN_HIGHZ_B_DMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_DMODE_CFG_LDO_PKSEN_HIGHZ_B_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_DMODE_CFG_LDO_PKSEN_HIGHZ_B_DMODE_BF_MSK (0x00000020)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_DMODE_CFG_LDO_PKSEN_HIGHZ_B_DMODE_BF_DEF (0x00000020)

///< SERDES_LANE_ANA_PLL::LDO1::cfg_ldo_clk_highz_b
#define PMA_TXPLLCFGLOADER_MSG_LDO1_DMODE_CFG_LDO_CLK_HIGHZ_B_DMODE_BF_OFF ( 6)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_DMODE_CFG_LDO_CLK_HIGHZ_B_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_DMODE_CFG_LDO_CLK_HIGHZ_B_DMODE_BF_MSK (0x00000040)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_DMODE_CFG_LDO_CLK_HIGHZ_B_DMODE_BF_DEF (0x00000040)

///< SERDES_LANE_ANA_PLL::LDO1::cfg_ldo_dco_highz_b
#define PMA_TXPLLCFGLOADER_MSG_LDO1_DMODE_CFG_LDO_DCO_HIGHZ_B_DMODE_BF_OFF ( 7)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_DMODE_CFG_LDO_DCO_HIGHZ_B_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_DMODE_CFG_LDO_DCO_HIGHZ_B_DMODE_BF_MSK (0x00000080)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_DMODE_CFG_LDO_DCO_HIGHZ_B_DMODE_BF_DEF (0x00000080)

///< Selection pins for DFx MUXs
#define PMA_TXPLLCFGLOADER_MSG_LDO1_DMODE_CFG_DCMON_SEL_DMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_DMODE_CFG_DCMON_SEL_DMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_DMODE_CFG_DCMON_SEL_DMODE_BF_MSK (0x00000F00)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_DMODE_CFG_DCMON_SEL_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO1::cfg_dcmon1_en
#define PMA_TXPLLCFGLOADER_MSG_LDO1_DMODE_CFG_DCMON1_EN_DMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_DMODE_CFG_DCMON1_EN_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_DMODE_CFG_DCMON1_EN_DMODE_BF_MSK (0x00001000)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_DMODE_CFG_DCMON1_EN_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO1::cfg_dcmon2_en
#define PMA_TXPLLCFGLOADER_MSG_LDO1_DMODE_CFG_DCMON2_EN_DMODE_BF_OFF (13)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_DMODE_CFG_DCMON2_EN_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_DMODE_CFG_DCMON2_EN_DMODE_BF_MSK (0x00002000)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_DMODE_CFG_DCMON2_EN_DMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_KVCC0_DMODE register description at address offset 0x2f4
  *
  * Register default value:        0x080013C5
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_kvcc0_dmode
  * SERDES_LANE_ANA_PLL::KVCC0
  */

typedef union {
  struct {
    uint32_t CFG_KVCC_SETTLE_MAXCNT_DMODE : 8;
    ///< Defines number of refclk cycles from DAC change to frequency measurement
    ///< during Kvcc calibration.                         VREG LPF is in bypass
    ///< mode with constant time is ~1nsec (115ohm*8.3pF).
    ///< Use the following formula:                         Frefclk x 1.26usec
    ///< AccessType="RW" BitOffset="0" ResetValue="0xC5"
    uint32_t CFG_KVCC_MEASURE_MAXCNT_DMODE : 3;
    ///< Defines number of refclk cycles over which the DCO frequency is measured
    ///< and averaged with high accuracy.                         It is used
    ///< for both Kvcc calibration and DFT frequency measurement mode.
    ///< refclk cycles = 2^(reg+6) - 1
    ///< AccessType="RW" BitOffset="8" ResetValue="0x3"
    uint32_t CFG_KVCCCALIB_LDO_OFFSET_DMODE : 3;
    ///< Amount of offset to inject into LDO for measuring frequency delta
    ///< that is needed for calibrating Kvcc. (Need to be ~30mv)
    ///< Common: use &#38;quot;2&#38;quot; as the default register value.
    ///< Lane: used &#38;quot;1&#38;quot; as a default override.
    ///< AccessType="RW" BitOffset="11" ResetValue="0x2"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t CFG_DFT_FREQ_MEAS_ENABLE_DMODE : 1;
    ///< DFT frequency measurement is triggered when this signal transitions
    ///< from 0 to 1.                         Make sure to set cfg_dfx_disable_dft_timer_ovrd_en=1
    ///< so that HS counter would remain active and cfg_kvcc_measure_maxcnt
    ///< to define number of refclk cycles.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t CFG_NOTCH_OFFSET_DMODE : 3;
    ///< Sets how many thermo bits to turn off from the notch filter
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t CFG_FULL_RANGE_KVCC_SEL_DMODE : 1;
    ///< Limit the kvcc full bin code according to thermal control bits in
    ///< the analog. Leaving it unlimited doesn&#39;t impact functionality
    ///< but just the read out of the Kvcc calibration. For proper Kvcc debug/characterization,
    ///< set according to the PLL:                         0 - code is limited
    ///< to 191d, 11 thermal bits in analog                         1 - (default)
    ///< Full binary code range
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t CFG_KVCC_INV_POLARITY_DMODE : 1;
    ///< A chicken bit to invert Kvcc polarity.
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t CFG_2F0_FINE_RATIO_DMODE : 7;
    ///< Fractional ratio. 32 is 1/4 (frac value = reg/2^7).
    ///< AccessType="RW" BitOffset="22" ResetValue="0x20"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_kvcc0_dmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_KVCC0_DMODE_DEFAULT (0x080013c5U)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_DMODE_RD_MASK (0x1fff3fffU)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_DMODE_WR_MASK (0x1fff3fffU)


///< Defines number of refclk cycles from DAC change to frequency measurement
///< during Kvcc calibration.                         VREG LPF is in bypass
///< mode with constant time is ~1nsec (115ohm*8.3pF).
///< Use the following formula:                         Frefclk x 1.26usec
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_DMODE_CFG_KVCC_SETTLE_MAXCNT_DMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_DMODE_CFG_KVCC_SETTLE_MAXCNT_DMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_DMODE_CFG_KVCC_SETTLE_MAXCNT_DMODE_BF_MSK (0x000000FF)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_DMODE_CFG_KVCC_SETTLE_MAXCNT_DMODE_BF_DEF (0x000000C5)

///< Defines number of refclk cycles over which the DCO frequency is measured
///< and averaged with high accuracy.                         It is used
///< for both Kvcc calibration and DFT frequency measurement mode.
///< refclk cycles = 2^(reg+6) - 1
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_DMODE_CFG_KVCC_MEAS_MAXCNT_DMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_DMODE_CFG_KVCC_MEAS_MAXCNT_DMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_DMODE_CFG_KVCC_MEAS_MAXCNT_DMODE_BF_MSK (0x00000700)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_DMODE_CFG_KVCC_MEAS_MAXCNT_DMODE_BF_DEF (0x00000300)

///< Amount of offset to inject into LDO for measuring frequency delta
///< that is needed for calibrating Kvcc. (Need to be ~30mv)
///< Common: use &#38;quot;2&#38;quot; as the default register value.
///< Lane: used &#38;quot;1&#38;quot; as a default override.
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_DMODE_CFG_KVCCCALIB_LDO_OFFSET_DMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_DMODE_CFG_KVCCCALIB_LDO_OFFSET_DMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_DMODE_CFG_KVCCCALIB_LDO_OFFSET_DMODE_BF_MSK (0x00003800)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_DMODE_CFG_KVCCCALIB_LDO_OFFSET_DMODE_BF_DEF (0x00001000)

///< DFT frequency measurement is triggered when this signal transitions
///< from 0 to 1.                         Make sure to set cfg_dfx_disable_dft_timer_ovrd_en=1
///< so that HS counter would remain active and cfg_kvcc_measure_maxcnt
///< to define number of refclk cycles.
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_DMODE_CFG_DFT_FREQ_MEAS_EN_DMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_DMODE_CFG_DFT_FREQ_MEAS_EN_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_DMODE_CFG_DFT_FREQ_MEAS_EN_DMODE_BF_MSK (0x00010000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_DMODE_CFG_DFT_FREQ_MEAS_EN_DMODE_BF_DEF (0x00000000)

///< Sets how many thermo bits to turn off from the notch filter
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_DMODE_CFG_NOTCH_OFFSET_DMODE_BF_OFF (17)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_DMODE_CFG_NOTCH_OFFSET_DMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_DMODE_CFG_NOTCH_OFFSET_DMODE_BF_MSK (0x000E0000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_DMODE_CFG_NOTCH_OFFSET_DMODE_BF_DEF (0x00000000)

///< Limit the kvcc full bin code according to thermal control bits in
///< the analog. Leaving it unlimited doesn&#39;t impact functionality
///< but just the read out of the Kvcc calibration. For proper Kvcc debug/characterization,
///< set according to the PLL:                         0 - code is limited
///< to 191d, 11 thermal bits in analog                         1 - (default)
///< Full binary code range
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_DMODE_CFG_FULL_RANGE_KVCC_SEL_DMODE_BF_OFF (20)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_DMODE_CFG_FULL_RANGE_KVCC_SEL_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_DMODE_CFG_FULL_RANGE_KVCC_SEL_DMODE_BF_MSK (0x00100000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_DMODE_CFG_FULL_RANGE_KVCC_SEL_DMODE_BF_DEF (0x00000000)

///< A chicken bit to invert Kvcc polarity.
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_DMODE_CFG_KVCC_INV_POLARITY_DMODE_BF_OFF (21)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_DMODE_CFG_KVCC_INV_POLARITY_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_DMODE_CFG_KVCC_INV_POLARITY_DMODE_BF_MSK (0x00200000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_DMODE_CFG_KVCC_INV_POLARITY_DMODE_BF_DEF (0x00000000)

///< Fractional ratio. 32 is 1/4 (frac value = reg/2^7).
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_DMODE_CFG_2F0_FINE_RATIO_DMODE_BF_OFF (22)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_DMODE_CFG_2F0_FINE_RATIO_DMODE_BF_WID ( 7)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_DMODE_CFG_2F0_FINE_RATIO_DMODE_BF_MSK (0x1FC00000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_DMODE_CFG_2F0_FINE_RATIO_DMODE_BF_DEF (0x08000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_KVCC1_DMODE register description at address offset 0x2f8
  *
  * Register default value:        0x000EF200
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_kvcc1_dmode
  * SERDES_LANE_ANA_PLL::KVCC1
  */

typedef union {
  struct {
    uint32_t CFG_KVCC_CODE_OVRD_DMODE : 1;
    ///< DCO notch filter override enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_KVCC_CODE_VAL_DMODE : 9;
    ///< DCO notch filter override value (binary, before therm decoder).
    ///< AccessType="RW" BitOffset="1" ResetValue="0x100"
    uint32_t CFG_KVCC_LDO_OFFSET_EN_OVRD_DMODE : 1;
    ///< Takes control over internal Kvcc FSM for manually injecting an offset
    ///< to LDO (for letting FW calibrate Kvcc).
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t CFG_KVCC_LDO_OFFSET_EN_VAL_DMODE : 1;
    ///< When kvcc_ldo_offset_en_ovrd=1                         0 - doesn&#39;t
    ///< inject an offset to LDO                         1 - injects an offset
    ///< to LDO in magnitude as configured by kvcccalib_ldo_offset
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t CFG_KVCC_MAX_CODE_LIMIT_DMODE : 9;
    ///< While cfg_full_range_kvcc_sel = 0, define the max value for 2f0 code.
    ///< Common: 0x7F (127)                         Lane: 0x4F (79)
    ///< AccessType="RW" BitOffset="12" ResetValue="0xEF"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_kvcc1_dmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_KVCC1_DMODE_DEFAULT (0x000ef200U)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_DMODE_RD_MASK (0x001fffffU)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_DMODE_WR_MASK (0x001fffffU)


///< DCO notch filter override enable
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_DMODE_CFG_KVCC_CODE_OVRD_DMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_DMODE_CFG_KVCC_CODE_OVRD_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_DMODE_CFG_KVCC_CODE_OVRD_DMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_DMODE_CFG_KVCC_CODE_OVRD_DMODE_BF_DEF (0x00000000)

///< DCO notch filter override value (binary, before therm decoder).
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_DMODE_CFG_KVCC_CODE_VAL_DMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_DMODE_CFG_KVCC_CODE_VAL_DMODE_BF_WID ( 9)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_DMODE_CFG_KVCC_CODE_VAL_DMODE_BF_MSK (0x000003FE)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_DMODE_CFG_KVCC_CODE_VAL_DMODE_BF_DEF (0x00000200)

///< Takes control over internal Kvcc FSM for manually injecting an offset
///< to LDO (for letting FW calibrate Kvcc).
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_DMODE_CFG_KVCC_LDO_OFFSET_EN_OVRD_DMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_DMODE_CFG_KVCC_LDO_OFFSET_EN_OVRD_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_DMODE_CFG_KVCC_LDO_OFFSET_EN_OVRD_DMODE_BF_MSK (0x00000400)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_DMODE_CFG_KVCC_LDO_OFFSET_EN_OVRD_DMODE_BF_DEF (0x00000000)

///< When kvcc_ldo_offset_en_ovrd=1                         0 - doesn&#39;t
///< inject an offset to LDO                         1 - injects an offset
///< to LDO in magnitude as configured by kvcccalib_ldo_offset
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_DMODE_CFG_KVCC_LDO_OFFSET_EN_VAL_DMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_DMODE_CFG_KVCC_LDO_OFFSET_EN_VAL_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_DMODE_CFG_KVCC_LDO_OFFSET_EN_VAL_DMODE_BF_MSK (0x00000800)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_DMODE_CFG_KVCC_LDO_OFFSET_EN_VAL_DMODE_BF_DEF (0x00000000)

///< While cfg_full_range_kvcc_sel = 0, define the max value for 2f0 code.
///< Common: 0x7F (127)                         Lane: 0x4F (79)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_DMODE_CFG_KVCC_MAX_CODE_LIMIT_DMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_DMODE_CFG_KVCC_MAX_CODE_LIMIT_DMODE_BF_WID ( 9)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_DMODE_CFG_KVCC_MAX_CODE_LIMIT_DMODE_BF_MSK (0x001FF000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_DMODE_CFG_KVCC_MAX_CODE_LIMIT_DMODE_BF_DEF (0x000EF000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_KVCC2_DMODE register description at address offset 0x2fc
  *
  * Register default value:        0x000000A9
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_kvcc2_dmode
  * SERDES_LANE_ANA_PLL::KVCC2
  */

typedef union {
  struct {
    uint32_t CFG_KVCC_ADAPT_EN_DMODE : 1;
    ///< Kvcc on the fly adaptation enable.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t CFG_KVCC_ADAPT_MODE_DMODE : 2;
    ///< Defines kvcc adaptation mode.                         0(POR): full
    ///< (dithering on all 2f0 bus between current and next)
    ///< 1: single cap 0 (dithering on dedicated capacitor - 1 lsb)
    ///< 2: single cap 1 (dithering on dedicated capacitor - 2 lsb)
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t CFG_KVCC_ADAPT_THR_DMODE : 2;
    ///< Threshold for update the notch code.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x1"
    uint32_t CFG_KVCC_ADAPT_CTR_DELAY_DMODE : 3;
    ///< Sets update rate of 2f0 SD modulator (2f0 dithering) ramp code increment.
    ///< fbclk cycles = 2^reg
    ///< AccessType="RW" BitOffset="5" ResetValue="0x5"
    uint32_t CFG_KVCC_ADAPT_STEP_DMODE : 3;
    ///< Sets step size of 2f0 SD modulator (2f0 dithering) ramp code increment.
    ///< step = 2^(reg-9)                         Cycles to complete ramp =
    ///< 2^(9-adapt_step+adapt_ctr_delay)
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CFG_DFX_KVCC_ADAPT_TOGGLE_EN_DMODE : 1;
    ///< Enables a BIST to check 2f0 mechanism for temp tracking.
    ///< When enabled, 2f0 dithering SD modulator code is ramped up and down
    ///< continously.
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t CFG_DFX_KVCC_ADAPT_ENABLE_OVR_DMODE : 1;
    ///< Enables overriding code to 2f0 dithering SD modulator.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t CFG_DFX_KVCC_ADAPT_VAL_OVR_DMODE : 9;
    ///< 2f0 dithering SD modulator override value (when cfg_dfx_kvcc_adapt_enable_ovr=1)
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t CFG_DFX_KVCC_ADAPT_DIR_OVR_DMODE : 1;
    ///< In 2f0 dithering DFX modes, this bit does the following:
    ///< toggle mode (cfg_dfx_kvcc_adapt_toggle_en=1):
    ///< 0 - 2f0 would ramp down and up repeatedly
    ///< 1 - 2f0 would ramp up and down repeatedly
    ///< override mode (cfg_dfx_kvcc_adapt_enable_ovr=1):
    ///< 0 - 2f0 would dither between current code and current code -1
    ///< 1 - 2f0 would dither between current code and current code +1
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t CFG_KVCC_ADAPT_CHICKEN_BIT_DMODE : 1;
    ///< Define the polarity of the kvcc adaptation.
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t CFG_KVCC_ADAPT_BY_FW_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::KVCC2::cfg_kvcc_adapt_by_fw
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t CFG_START_2F0_STEP_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::KVCC2::cfg_start_2f0_step
    ///< AccessType="RW" BitOffset="25" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="26" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_kvcc2_dmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_DEFAULT (0x000000a9U)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_RD_MASK (0x03ffffffU)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_WR_MASK (0x03ffffffU)


///< Kvcc on the fly adaptation enable.
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_CFG_KVCC_ADAPT_EN_DMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_CFG_KVCC_ADAPT_EN_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_CFG_KVCC_ADAPT_EN_DMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_CFG_KVCC_ADAPT_EN_DMODE_BF_DEF (0x00000001)

///< Defines kvcc adaptation mode.                         0(POR): full
///< (dithering on all 2f0 bus between current and next)
///< 1: single cap 0 (dithering on dedicated capacitor - 1 lsb)
///< 2: single cap 1 (dithering on dedicated capacitor - 2 lsb)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_CFG_KVCC_ADAPT_MODE_DMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_CFG_KVCC_ADAPT_MODE_DMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_CFG_KVCC_ADAPT_MODE_DMODE_BF_MSK (0x00000006)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_CFG_KVCC_ADAPT_MODE_DMODE_BF_DEF (0x00000000)

///< Threshold for update the notch code.
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_CFG_KVCC_ADAPT_THR_DMODE_BF_OFF ( 3)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_CFG_KVCC_ADAPT_THR_DMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_CFG_KVCC_ADAPT_THR_DMODE_BF_MSK (0x00000018)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_CFG_KVCC_ADAPT_THR_DMODE_BF_DEF (0x00000008)

///< Sets update rate of 2f0 SD modulator (2f0 dithering) ramp code increment.
///< fbclk cycles = 2^reg
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_CFG_KVCC_ADAPT_CTR_DELAY_DMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_CFG_KVCC_ADAPT_CTR_DELAY_DMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_CFG_KVCC_ADAPT_CTR_DELAY_DMODE_BF_MSK (0x000000E0)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_CFG_KVCC_ADAPT_CTR_DELAY_DMODE_BF_DEF (0x000000A0)

///< Sets step size of 2f0 SD modulator (2f0 dithering) ramp code increment.
///< step = 2^(reg-9)                         Cycles to complete ramp =
///< 2^(9-adapt_step+adapt_ctr_delay)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_CFG_KVCC_ADAPT_STEP_DMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_CFG_KVCC_ADAPT_STEP_DMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_CFG_KVCC_ADAPT_STEP_DMODE_BF_MSK (0x00000700)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_CFG_KVCC_ADAPT_STEP_DMODE_BF_DEF (0x00000000)

///< Enables a BIST to check 2f0 mechanism for temp tracking.
///< When enabled, 2f0 dithering SD modulator code is ramped up and down
///< continously.
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_CFG_DFX_KVCC_ADAPT_TOGGLE_EN_DMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_CFG_DFX_KVCC_ADAPT_TOGGLE_EN_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_CFG_DFX_KVCC_ADAPT_TOGGLE_EN_DMODE_BF_MSK (0x00000800)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_CFG_DFX_KVCC_ADAPT_TOGGLE_EN_DMODE_BF_DEF (0x00000000)

///< Enables overriding code to 2f0 dithering SD modulator.
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_CFG_DFX_KVCC_ADAPT_EN_OVR_DMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_CFG_DFX_KVCC_ADAPT_EN_OVR_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_CFG_DFX_KVCC_ADAPT_EN_OVR_DMODE_BF_MSK (0x00001000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_CFG_DFX_KVCC_ADAPT_EN_OVR_DMODE_BF_DEF (0x00000000)

///< 2f0 dithering SD modulator override value (when cfg_dfx_kvcc_adapt_enable_ovr=1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_CFG_DFX_KVCC_ADAPT_VAL_OVR_DMODE_BF_OFF (13)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_CFG_DFX_KVCC_ADAPT_VAL_OVR_DMODE_BF_WID ( 9)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_CFG_DFX_KVCC_ADAPT_VAL_OVR_DMODE_BF_MSK (0x003FE000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_CFG_DFX_KVCC_ADAPT_VAL_OVR_DMODE_BF_DEF (0x00000000)

///< In 2f0 dithering DFX modes, this bit does the following:
///< toggle mode (cfg_dfx_kvcc_adapt_toggle_en=1):
///< 0 - 2f0 would ramp down and up repeatedly
///< 1 - 2f0 would ramp up and down repeatedly
///< override mode (cfg_dfx_kvcc_adapt_enable_ovr=1):
///< 0 - 2f0 would dither between current code and current code -1
///< 1 - 2f0 would dither between current code and current code +1
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_CFG_DFX_KVCC_ADAPT_DIR_OVR_DMODE_BF_OFF (22)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_CFG_DFX_KVCC_ADAPT_DIR_OVR_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_CFG_DFX_KVCC_ADAPT_DIR_OVR_DMODE_BF_MSK (0x00400000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_CFG_DFX_KVCC_ADAPT_DIR_OVR_DMODE_BF_DEF (0x00000000)

///< Define the polarity of the kvcc adaptation.
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_CFG_KVCC_ADAPT_CHICKEN_BIT_DMODE_BF_OFF (23)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_CFG_KVCC_ADAPT_CHICKEN_BIT_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_CFG_KVCC_ADAPT_CHICKEN_BIT_DMODE_BF_MSK (0x00800000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_CFG_KVCC_ADAPT_CHICKEN_BIT_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::KVCC2::cfg_kvcc_adapt_by_fw
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_CFG_KVCC_ADAPT_BY_FW_DMODE_BF_OFF (24)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_CFG_KVCC_ADAPT_BY_FW_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_CFG_KVCC_ADAPT_BY_FW_DMODE_BF_MSK (0x01000000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_CFG_KVCC_ADAPT_BY_FW_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::KVCC2::cfg_start_2f0_step
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_CFG_START_2F0_STEP_DMODE_BF_OFF (25)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_CFG_START_2F0_STEP_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_CFG_START_2F0_STEP_DMODE_BF_MSK (0x02000000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_CFG_START_2F0_STEP_DMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_SPARE0_DMODE register description at address offset 0x300
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_spare0_dmode
  * SERDES_LANE_ANA_PLL::SPARE0
  */

typedef union {
  struct {
    uint32_t CFG_SPARE_DIG2ANA_DMODE : 11;
    ///< Spare controls to analog block.                         [10:0] unused
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 21;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_spare0_dmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_SPARE0_DMODE_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_SPARE0_DMODE_RD_MASK (0x000007ffU)
#define PMA_TXPLLCFGLOADER_MSG_SPARE0_DMODE_WR_MASK (0x000007ffU)


///< Spare controls to analog block.                         [10:0] unused
#define PMA_TXPLLCFGLOADER_MSG_SPARE0_DMODE_CFG_SPARE_DIG2ANA_DMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_SPARE0_DMODE_CFG_SPARE_DIG2ANA_DMODE_BF_WID (11)
#define PMA_TXPLLCFGLOADER_MSG_SPARE0_DMODE_CFG_SPARE_DIG2ANA_DMODE_BF_MSK (0x000007FF)
#define PMA_TXPLLCFGLOADER_MSG_SPARE0_DMODE_CFG_SPARE_DIG2ANA_DMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_SPARE1_DMODE register description at address offset 0x304
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_spare1_dmode
  * SERDES_LANE_ANA_PLL::SPARE1
  */

typedef union {
  struct {
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="0" ResetValue="None"
    uint32_t CFG_SPARE_DIG2WRAP_DMODE : 20;
    ///< SERDES_LANE_ANA_PLL::SPARE1::cfg_spare_dig2wrap
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_spare1_dmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_SPARE1_DMODE_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_SPARE1_DMODE_RD_MASK (0x001ffffeU)
#define PMA_TXPLLCFGLOADER_MSG_SPARE1_DMODE_WR_MASK (0x001ffffeU)


///< SERDES_LANE_ANA_PLL::SPARE1::cfg_spare_dig2wrap
#define PMA_TXPLLCFGLOADER_MSG_SPARE1_DMODE_CFG_SPARE_DIG2WRAP_DMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_SPARE1_DMODE_CFG_SPARE_DIG2WRAP_DMODE_BF_WID (20)
#define PMA_TXPLLCFGLOADER_MSG_SPARE1_DMODE_CFG_SPARE_DIG2WRAP_DMODE_BF_MSK (0x001FFFFE)
#define PMA_TXPLLCFGLOADER_MSG_SPARE1_DMODE_CFG_SPARE_DIG2WRAP_DMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_DCO_SWING0_DMODE register description at address offset 0x308
  *
  * Register default value:        0x0022006D
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_dco_swing0_dmode
  * SERDES_LANE_ANA_PLL::DCO_SWING0
  */

typedef union {
  struct {
    uint32_t CFG_DCO_SWING_VPEAK_MODE_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_dco_swing_vpeak_mode
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t CFG_PKSEN_VREF_TARGET_DMODE : 6;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_pksen_vref_target
    ///< AccessType="RW" BitOffset="1" ResetValue="0x36"
    uint32_t CFG_SKIP_DCO_SWING_SLEEP_SEL_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_skip_dco_swing_sleep_sel
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t CFG_DCO_SWING_BY_FW_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_dco_swing_by_fw
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CFG_START_PKSEN_READ_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_start_pksen_read
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t CFG_START_LDODCO_STEP_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_start_ldodco_step
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t CFG_LDODCO_STEP_DIR_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_ldodco_step_dir
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t CFG_LDODCO_STEP_CHICKEN_BIT_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_ldodco_step_chicken_bit
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t CFG_PKSEN_SETTLE_TIMER_LIMIT_DMODE : 3;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_pksen_settle_timer_limit
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t CFG_PKSEN_COMP_OUT_CHICKEN_BIT_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_pksen_comp_out_chicken_bit
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t CFG_LDODCO_ADAPT_EN_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_ldodco_adapt_en
    ///< AccessType="RW" BitOffset="17" ResetValue="0x1"
    uint32_t CFG_PKSEN_VREF_OVRD_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_pksen_vref_ovrd
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t CFG_LDODCO_VREF_OVRD_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_ldodco_vref_ovrd
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t CFG_LDODCO_STEP_SETTLE_TIMER_LIMIT_DMODE : 2;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_ldodco_step_settle_timer_limit
    ///< AccessType="RW" BitOffset="20" ResetValue="0x2"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_dco_swing0_dmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_DEFAULT (0x0022006dU)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_RD_MASK (0x003fffffU)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_WR_MASK (0x003fffffU)


///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_dco_swing_vpeak_mode
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_DCO_SWING_VPEAK_MODE_DMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_DCO_SWING_VPEAK_MODE_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_DCO_SWING_VPEAK_MODE_DMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_DCO_SWING_VPEAK_MODE_DMODE_BF_DEF (0x00000001)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_pksen_vref_target
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_PKSEN_VREF_TARGET_DMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_PKSEN_VREF_TARGET_DMODE_BF_WID ( 6)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_PKSEN_VREF_TARGET_DMODE_BF_MSK (0x0000007E)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_PKSEN_VREF_TARGET_DMODE_BF_DEF (0x0000006C)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_skip_dco_swing_sleep_sel
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_SKIP_DCO_SWING_SLEEP_SEL_DMODE_BF_OFF ( 7)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_SKIP_DCO_SWING_SLEEP_SEL_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_SKIP_DCO_SWING_SLEEP_SEL_DMODE_BF_MSK (0x00000080)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_SKIP_DCO_SWING_SLEEP_SEL_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_dco_swing_by_fw
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_DCO_SWING_BY_FW_DMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_DCO_SWING_BY_FW_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_DCO_SWING_BY_FW_DMODE_BF_MSK (0x00000100)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_DCO_SWING_BY_FW_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_start_pksen_read
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_START_PKSEN_READ_DMODE_BF_OFF ( 9)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_START_PKSEN_READ_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_START_PKSEN_READ_DMODE_BF_MSK (0x00000200)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_START_PKSEN_READ_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_start_ldodco_step
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_START_LDODCO_STEP_DMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_START_LDODCO_STEP_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_START_LDODCO_STEP_DMODE_BF_MSK (0x00000400)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_START_LDODCO_STEP_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_ldodco_step_dir
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_LDODCO_STEP_DIR_DMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_LDODCO_STEP_DIR_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_LDODCO_STEP_DIR_DMODE_BF_MSK (0x00000800)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_LDODCO_STEP_DIR_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_ldodco_step_chicken_bit
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_LDODCO_STEP_CHICKEN_BIT_DMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_LDODCO_STEP_CHICKEN_BIT_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_LDODCO_STEP_CHICKEN_BIT_DMODE_BF_MSK (0x00001000)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_LDODCO_STEP_CHICKEN_BIT_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_pksen_settle_timer_limit
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_PKSEN_SETTLE_TIMER_LIMIT_DMODE_BF_OFF (13)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_PKSEN_SETTLE_TIMER_LIMIT_DMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_PKSEN_SETTLE_TIMER_LIMIT_DMODE_BF_MSK (0x0000E000)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_PKSEN_SETTLE_TIMER_LIMIT_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_pksen_comp_out_chicken_bit
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_PKSEN_COMP_OUT_CHICKEN_BIT_DMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_PKSEN_COMP_OUT_CHICKEN_BIT_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_PKSEN_COMP_OUT_CHICKEN_BIT_DMODE_BF_MSK (0x00010000)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_PKSEN_COMP_OUT_CHICKEN_BIT_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_ldodco_adapt_en
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_LDODCO_ADAPT_EN_DMODE_BF_OFF (17)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_LDODCO_ADAPT_EN_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_LDODCO_ADAPT_EN_DMODE_BF_MSK (0x00020000)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_LDODCO_ADAPT_EN_DMODE_BF_DEF (0x00020000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_pksen_vref_ovrd
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_PKSEN_VREF_OVRD_DMODE_BF_OFF (18)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_PKSEN_VREF_OVRD_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_PKSEN_VREF_OVRD_DMODE_BF_MSK (0x00040000)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_PKSEN_VREF_OVRD_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_ldodco_vref_ovrd
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_LDODCO_VREF_OVRD_DMODE_BF_OFF (19)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_LDODCO_VREF_OVRD_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_LDODCO_VREF_OVRD_DMODE_BF_MSK (0x00080000)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_LDODCO_VREF_OVRD_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_ldodco_step_settle_timer_limit
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_LDODCO_STEP_SETTLE_TIMER_LIMIT_DMODE_BF_OFF (20)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_LDODCO_STEP_SETTLE_TIMER_LIMIT_DMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_LDODCO_STEP_SETTLE_TIMER_LIMIT_DMODE_BF_MSK (0x00300000)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_CFG_LDODCO_STEP_SETTLE_TIMER_LIMIT_DMODE_BF_DEF (0x00200000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_DCO_SWING1_DMODE register description at address offset 0x30c
  *
  * Register default value:        0x00000005
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_dco_swing1_dmode
  * SERDES_LANE_ANA_PLL::DCO_SWING1
  */

typedef union {
  struct {
    uint32_t CFG_LDODCO_ADAPT_CTR_DELAY_DMODE : 3;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_ldodco_adapt_ctr_delay
    ///< AccessType="RW" BitOffset="0" ResetValue="0x5"
    uint32_t CFG_LDODCO_ADAPT_STEP_DMODE : 3;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_ldodco_adapt_step
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t CFG_DFX_LDODCO_ADAPT_TOGGLE_EN_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_dfx_ldodco_adapt_toggle_en
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t CFG_DFX_LDODCO_ADAPT_DIR_OVR_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_dfx_ldodco_adapt_dir_ovr
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t CFG_DFX_LDODCO_ADAPT_ENABLE_OVR_DMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_dfx_ldodco_adapt_enable_ovr
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CFG_DFX_LDODCO_ADAPT_VAL_OVR_DMODE : 9;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_dfx_ldodco_adapt_val_ovr
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_dco_swing1_dmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_DMODE_DEFAULT (0x00000005U)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_DMODE_RD_MASK (0x0003ffffU)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_DMODE_WR_MASK (0x0003ffffU)


///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_ldodco_adapt_ctr_delay
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_DMODE_CFG_LDODCO_ADAPT_CTR_DELAY_DMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_DMODE_CFG_LDODCO_ADAPT_CTR_DELAY_DMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_DMODE_CFG_LDODCO_ADAPT_CTR_DELAY_DMODE_BF_MSK (0x00000007)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_DMODE_CFG_LDODCO_ADAPT_CTR_DELAY_DMODE_BF_DEF (0x00000005)

///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_ldodco_adapt_step
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_DMODE_CFG_LDODCO_ADAPT_STEP_DMODE_BF_OFF ( 3)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_DMODE_CFG_LDODCO_ADAPT_STEP_DMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_DMODE_CFG_LDODCO_ADAPT_STEP_DMODE_BF_MSK (0x00000038)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_DMODE_CFG_LDODCO_ADAPT_STEP_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_dfx_ldodco_adapt_toggle_en
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_DMODE_CFG_DFX_LDODCO_ADAPT_TOGGLE_EN_DMODE_BF_OFF ( 6)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_DMODE_CFG_DFX_LDODCO_ADAPT_TOGGLE_EN_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_DMODE_CFG_DFX_LDODCO_ADAPT_TOGGLE_EN_DMODE_BF_MSK (0x00000040)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_DMODE_CFG_DFX_LDODCO_ADAPT_TOGGLE_EN_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_dfx_ldodco_adapt_dir_ovr
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_DMODE_CFG_DFX_LDODCO_ADAPT_DIR_OVR_DMODE_BF_OFF ( 7)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_DMODE_CFG_DFX_LDODCO_ADAPT_DIR_OVR_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_DMODE_CFG_DFX_LDODCO_ADAPT_DIR_OVR_DMODE_BF_MSK (0x00000080)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_DMODE_CFG_DFX_LDODCO_ADAPT_DIR_OVR_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_dfx_ldodco_adapt_enable_ovr
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_DMODE_CFG_DFX_LDODCO_ADAPT_EN_OVR_DMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_DMODE_CFG_DFX_LDODCO_ADAPT_EN_OVR_DMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_DMODE_CFG_DFX_LDODCO_ADAPT_EN_OVR_DMODE_BF_MSK (0x00000100)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_DMODE_CFG_DFX_LDODCO_ADAPT_EN_OVR_DMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_dfx_ldodco_adapt_val_ovr
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_DMODE_CFG_DFX_LDODCO_ADAPT_VAL_OVR_DMODE_BF_OFF ( 9)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_DMODE_CFG_DFX_LDODCO_ADAPT_VAL_OVR_DMODE_BF_WID ( 9)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_DMODE_CFG_DFX_LDODCO_ADAPT_VAL_OVR_DMODE_BF_MSK (0x0003FE00)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_DMODE_CFG_DFX_LDODCO_ADAPT_VAL_OVR_DMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_TDC4_DMODE register description at address offset 0x310
  *
  * Register default value:        0xCAB6A27C
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_tdc4_dmode
  * SERDES_LANE_ANA_PLL::TDC4
  */

typedef union {
  struct {
    uint32_t CFG_VTDC_MINUS2_THRESH_DMODE : 8;
    ///< SERDES_LANE_ANA_PLL::TDC4::cfg_vtdc_minus2_thresh
    ///< AccessType="RW" BitOffset="0" ResetValue="0x7C"
    uint32_t CFG_VTDC_MINUS1_THRESH_DMODE : 8;
    ///< SERDES_LANE_ANA_PLL::TDC4::cfg_vtdc_minus1_thresh
    ///< AccessType="RW" BitOffset="8" ResetValue="0xA2"
    uint32_t CFG_VTDC_PLUS1_THRESH_DMODE : 8;
    ///< SERDES_LANE_ANA_PLL::TDC4::cfg_vtdc_plus1_thresh
    ///< AccessType="RW" BitOffset="16" ResetValue="0xB6"
    uint32_t CFG_VTDC_PLUS2_THRESH_DMODE : 8;
    ///< SERDES_LANE_ANA_PLL::TDC4::cfg_vtdc_plus2_thresh
    ///< AccessType="RW" BitOffset="24" ResetValue="0xCA"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_tdc4_dmode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_TDC4_DMODE_DEFAULT (0xcab6a27cU)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_DMODE_RD_MASK (0xffffffffU)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_DMODE_WR_MASK (0xffffffffU)


///< SERDES_LANE_ANA_PLL::TDC4::cfg_vtdc_minus2_thresh
#define PMA_TXPLLCFGLOADER_MSG_TDC4_DMODE_CFG_VTDC_MINUS2_THRESH_DMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_DMODE_CFG_VTDC_MINUS2_THRESH_DMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_DMODE_CFG_VTDC_MINUS2_THRESH_DMODE_BF_MSK (0x000000FF)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_DMODE_CFG_VTDC_MINUS2_THRESH_DMODE_BF_DEF (0x0000007C)

///< SERDES_LANE_ANA_PLL::TDC4::cfg_vtdc_minus1_thresh
#define PMA_TXPLLCFGLOADER_MSG_TDC4_DMODE_CFG_VTDC_MINUS1_THRESH_DMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_DMODE_CFG_VTDC_MINUS1_THRESH_DMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_DMODE_CFG_VTDC_MINUS1_THRESH_DMODE_BF_MSK (0x0000FF00)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_DMODE_CFG_VTDC_MINUS1_THRESH_DMODE_BF_DEF (0x0000A200)

///< SERDES_LANE_ANA_PLL::TDC4::cfg_vtdc_plus1_thresh
#define PMA_TXPLLCFGLOADER_MSG_TDC4_DMODE_CFG_VTDC_PLUS1_THRESH_DMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_DMODE_CFG_VTDC_PLUS1_THRESH_DMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_DMODE_CFG_VTDC_PLUS1_THRESH_DMODE_BF_MSK (0x00FF0000)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_DMODE_CFG_VTDC_PLUS1_THRESH_DMODE_BF_DEF (0x00B60000)

///< SERDES_LANE_ANA_PLL::TDC4::cfg_vtdc_plus2_thresh
#define PMA_TXPLLCFGLOADER_MSG_TDC4_DMODE_CFG_VTDC_PLUS2_THRESH_DMODE_BF_OFF (24)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_DMODE_CFG_VTDC_PLUS2_THRESH_DMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_DMODE_CFG_VTDC_PLUS2_THRESH_DMODE_BF_MSK (0xFF000000)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_DMODE_CFG_VTDC_PLUS2_THRESH_DMODE_BF_DEF (0xCA000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_DIV0_EMODE register description at address offset 0x320
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_div0_emode
  * LCPLL_DIV0 Register
  */

typedef union {
  struct {
    uint32_t O_FBDIV_FRAC_EMODE : 32;
    ///< Feedback divider fractional ratio.                          Total
    ///< ratio is:                         If cfg_dcodiv2_to_fbdiv_bypass=1
    ///< : (integer+fractional/2^32)                         otherwise : (integer+fractional/2^32)
    ///< x 2
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_div0_emode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_DIV0_EMODE_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_DIV0_EMODE_RD_MASK (0xffffffffU)
#define PMA_TXPLLCFGLOADER_MSG_DIV0_EMODE_WR_MASK (0xffffffffU)


///< Feedback divider fractional ratio.                          Total
///< ratio is:                         If cfg_dcodiv2_to_fbdiv_bypass=1
///< : (integer+fractional/2^32)                         otherwise : (integer+fractional/2^32)
///< x 2
#define PMA_TXPLLCFGLOADER_MSG_DIV0_EMODE_O_FBDIV_FRAC_EMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_DIV0_EMODE_O_FBDIV_FRAC_EMODE_BF_WID (32)
#define PMA_TXPLLCFGLOADER_MSG_DIV0_EMODE_O_FBDIV_FRAC_EMODE_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLLCFGLOADER_MSG_DIV0_EMODE_O_FBDIV_FRAC_EMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_DIV1_EMODE register description at address offset 0x324
  *
  * Register default value:        0x00003050
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_div1_emode
  * LCPLL_DIV1 Register
  */

typedef union {
  struct {
    uint32_t O_FBDIV_INTGR_EMODE : 10;
    ///< Feedback divider integer ratio                         Total ratio
    ///< is:                         If cfg_dcodiv2_to_fbdiv_bypass=1 : (integer+fractional/2^32)
    ///< otherwise : (integer+fractional/2^32) x 2
    ///< Default is 80 for main common PLL (refclk 156.25MHz and Fdco 12.5GHz)
    ///< AccessType="RW" BitOffset="0" ResetValue="0x50"
    uint32_t O_FRACNEN_H_EMODE : 1;
    ///< Enables fractional ratio.                         Set this bit to
    ///< 0 if fractional ratio is 0, else to 1.                         If
    ///< this bit is 1 while fractional is 0 then fbclk to refclk phase won&#39;t
    ///< be deterministic.
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t CFG_REFCLK_CNT_LIMIT_EMODE : 3;
    ///< Defines number of refclk cycles in frequency measurement during AFC
    ///< calibration.                         Number of cycles = 2^reg
    ///< For 156MHz clock and 12.5GHz DCO clock, HS counter (@Fdco/2) samples
    ///< 40 cycles per refclk (=fbdiv_intgr).                         DTR step
    ///< size is 20MHz, so to achieve accuracy of 5MHz, HS counter should reach
    ///< 12.5G/5M=2500.                         Therefore refclk cycles = 2500/40=62.5,
    ///< so 2^6 would be appropriate.
    ///< use the following formula for other frequencies (Frefclk after prediv):
    ///< cfg_refclk_cnt_limit = round(log2(2*Frefclk/5MHz))
    ///< AccessType="RW" BitOffset="11" ResetValue="0x6"
    uint32_t CFG_FRACN_SD_STEP_EN_EMODE : 1;
    ///< Injects an impulse into fracN SD accumulator.
    ///< This inject a step in the feed-forward offset and as a result would
    ///< create a step on the PLL phase.                         This feature
    ///< can be useful in case of coupling between PLLs that run at exact same
    ///< frequency (both at fracN)
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t CFG_FRACN_SD_STEP_EMODE : 6;
    ///< Sets magnitude of step in fracN SD accumulator, which is added to
    ///< the MSB of the SD bus.                         Each LSB here would
    ///< shift PLL phase by 2xTdco/2^6
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t CFG_LF_BAND_INUSE_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DIV1::cfg_lf_band_inuse
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t CFG_LF_BAND_SEL_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DIV1::cfg_lf_band_sel
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t  : 9;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_div1_emode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_DIV1_EMODE_DEFAULT (0x00003050U)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_EMODE_RD_MASK (0x007fffffU)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_EMODE_WR_MASK (0x007fffffU)


///< Feedback divider integer ratio                         Total ratio
///< is:                         If cfg_dcodiv2_to_fbdiv_bypass=1 : (integer+fractional/2^32)
///< otherwise : (integer+fractional/2^32) x 2
///< Default is 80 for main common PLL (refclk 156.25MHz and Fdco 12.5GHz)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_EMODE_O_FBDIV_INTGR_EMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_EMODE_O_FBDIV_INTGR_EMODE_BF_WID (10)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_EMODE_O_FBDIV_INTGR_EMODE_BF_MSK (0x000003FF)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_EMODE_O_FBDIV_INTGR_EMODE_BF_DEF (0x00000050)

///< Enables fractional ratio.                         Set this bit to
///< 0 if fractional ratio is 0, else to 1.                         If
///< this bit is 1 while fractional is 0 then fbclk to refclk phase won&#39;t
///< be deterministic.
#define PMA_TXPLLCFGLOADER_MSG_DIV1_EMODE_O_FRACNEN_H_EMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_EMODE_O_FRACNEN_H_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_EMODE_O_FRACNEN_H_EMODE_BF_MSK (0x00000400)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_EMODE_O_FRACNEN_H_EMODE_BF_DEF (0x00000000)

///< Defines number of refclk cycles in frequency measurement during AFC
///< calibration.                         Number of cycles = 2^reg
///< For 156MHz clock and 12.5GHz DCO clock, HS counter (@Fdco/2) samples
///< 40 cycles per refclk (=fbdiv_intgr).                         DTR step
///< size is 20MHz, so to achieve accuracy of 5MHz, HS counter should reach
///< 12.5G/5M=2500.                         Therefore refclk cycles = 2500/40=62.5,
///< so 2^6 would be appropriate.
///< use the following formula for other frequencies (Frefclk after prediv):
///< cfg_refclk_cnt_limit = round(log2(2*Frefclk/5MHz))
#define PMA_TXPLLCFGLOADER_MSG_DIV1_EMODE_CFG_REFCLK_CNT_LIMIT_EMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_EMODE_CFG_REFCLK_CNT_LIMIT_EMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_EMODE_CFG_REFCLK_CNT_LIMIT_EMODE_BF_MSK (0x00003800)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_EMODE_CFG_REFCLK_CNT_LIMIT_EMODE_BF_DEF (0x00003000)

///< Injects an impulse into fracN SD accumulator.
///< This inject a step in the feed-forward offset and as a result would
///< create a step on the PLL phase.                         This feature
///< can be useful in case of coupling between PLLs that run at exact same
///< frequency (both at fracN)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_EMODE_CFG_FRACN_SD_STEP_EN_EMODE_BF_OFF (14)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_EMODE_CFG_FRACN_SD_STEP_EN_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_EMODE_CFG_FRACN_SD_STEP_EN_EMODE_BF_MSK (0x00004000)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_EMODE_CFG_FRACN_SD_STEP_EN_EMODE_BF_DEF (0x00000000)

///< Sets magnitude of step in fracN SD accumulator, which is added to
///< the MSB of the SD bus.                         Each LSB here would
///< shift PLL phase by 2xTdco/2^6
#define PMA_TXPLLCFGLOADER_MSG_DIV1_EMODE_CFG_FRACN_SD_STEP_EMODE_BF_OFF (15)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_EMODE_CFG_FRACN_SD_STEP_EMODE_BF_WID ( 6)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_EMODE_CFG_FRACN_SD_STEP_EMODE_BF_MSK (0x001F8000)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_EMODE_CFG_FRACN_SD_STEP_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DIV1::cfg_lf_band_inuse
#define PMA_TXPLLCFGLOADER_MSG_DIV1_EMODE_CFG_LF_BAND_INUSE_EMODE_BF_OFF (21)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_EMODE_CFG_LF_BAND_INUSE_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_EMODE_CFG_LF_BAND_INUSE_EMODE_BF_MSK (0x00200000)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_EMODE_CFG_LF_BAND_INUSE_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DIV1::cfg_lf_band_sel
#define PMA_TXPLLCFGLOADER_MSG_DIV1_EMODE_CFG_LF_BAND_SEL_EMODE_BF_OFF (22)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_EMODE_CFG_LF_BAND_SEL_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_EMODE_CFG_LF_BAND_SEL_EMODE_BF_MSK (0x00400000)
#define PMA_TXPLLCFGLOADER_MSG_DIV1_EMODE_CFG_LF_BAND_SEL_EMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_ADL0_EMODE register description at address offset 0x328
  *
  * Register default value:        0x01800007
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_adl0_emode
  * SERDES_LANE_ANA_PLL::ADL0
  */

typedef union {
  struct {
    uint32_t CFG_ADL_ENABLE_EMODE : 1;
    ///< Enable adaptive delay line in fracN mode (only when o_fracnen_h=1).
    ///< While &#39;1&#39; it is also disable feed-forward cancellation.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t CFG_ADL_RANGE_EMODE : 3;
    ///< Configs ADL range to be used. The formula (prelay results, need to
    ///< be updated):                         round((138.75 - 1.2e12/Fdco)/13.266)
    ///< [Fdco in Hz]
    ///< AccessType="RW" BitOffset="1" ResetValue="0x3"
    uint32_t CFG_ADL_POS_OFFSET_EMODE : 8;
    ///< Positive ADL INL compensation.                         Each register
    ///< bit corresponding to each cap_ctrl bus bit.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t CFG_ADL_NEG_OFFSET_EMODE : 8;
    ///< Negative ADL INL compensation.                         Each register
    ///< bit corresponding to each cap_ctrl bus bit.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t CFG_ADL_ENABLE_OVR_EN_EMODE : 1;
    ///< adl bypass/enable force (see adl_enable_ovr_val).
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t CFG_ADL_ENABLE_OVR_VAL_EMODE : 1;
    ///< While adl_enable_ovr_en= 1.                         0 - force adl
    ///< bypass.                         1 - force adl enable.
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t CFG_ADL_CAP_CTRL_OVR_EN_EMODE : 1;
    ///< Override enable for cfg_adl_cap_ctrl_ovr_val[8:0]
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t CFG_ADL_CAP_CTRL_OVR_VAL_EMODE : 9;
    ///< Override value for cap_ctrl bus to ADL.
    ///< AccessType="RW" BitOffset="23" ResetValue="0x3"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_adl0_emode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_ADL0_EMODE_DEFAULT (0x01800007U)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_EMODE_RD_MASK (0xffffffffU)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_EMODE_WR_MASK (0xffffffffU)


///< Enable adaptive delay line in fracN mode (only when o_fracnen_h=1).
///< While &#39;1&#39; it is also disable feed-forward cancellation.
#define PMA_TXPLLCFGLOADER_MSG_ADL0_EMODE_CFG_ADL_EN_EMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_EMODE_CFG_ADL_EN_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_EMODE_CFG_ADL_EN_EMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_EMODE_CFG_ADL_EN_EMODE_BF_DEF (0x00000001)

///< Configs ADL range to be used. The formula (prelay results, need to
///< be updated):                         round((138.75 - 1.2e12/Fdco)/13.266)
///< [Fdco in Hz]
#define PMA_TXPLLCFGLOADER_MSG_ADL0_EMODE_CFG_ADL_RANGE_EMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_EMODE_CFG_ADL_RANGE_EMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_EMODE_CFG_ADL_RANGE_EMODE_BF_MSK (0x0000000E)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_EMODE_CFG_ADL_RANGE_EMODE_BF_DEF (0x00000006)

///< Positive ADL INL compensation.                         Each register
///< bit corresponding to each cap_ctrl bus bit.
#define PMA_TXPLLCFGLOADER_MSG_ADL0_EMODE_CFG_ADL_POS_OFFSET_EMODE_BF_OFF ( 4)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_EMODE_CFG_ADL_POS_OFFSET_EMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_EMODE_CFG_ADL_POS_OFFSET_EMODE_BF_MSK (0x00000FF0)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_EMODE_CFG_ADL_POS_OFFSET_EMODE_BF_DEF (0x00000000)

///< Negative ADL INL compensation.                         Each register
///< bit corresponding to each cap_ctrl bus bit.
#define PMA_TXPLLCFGLOADER_MSG_ADL0_EMODE_CFG_ADL_NEG_OFFSET_EMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_EMODE_CFG_ADL_NEG_OFFSET_EMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_EMODE_CFG_ADL_NEG_OFFSET_EMODE_BF_MSK (0x000FF000)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_EMODE_CFG_ADL_NEG_OFFSET_EMODE_BF_DEF (0x00000000)

///< adl bypass/enable force (see adl_enable_ovr_val).
#define PMA_TXPLLCFGLOADER_MSG_ADL0_EMODE_CFG_ADL_EN_OVR_EN_EMODE_BF_OFF (20)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_EMODE_CFG_ADL_EN_OVR_EN_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_EMODE_CFG_ADL_EN_OVR_EN_EMODE_BF_MSK (0x00100000)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_EMODE_CFG_ADL_EN_OVR_EN_EMODE_BF_DEF (0x00000000)

///< While adl_enable_ovr_en= 1.                         0 - force adl
///< bypass.                         1 - force adl enable.
#define PMA_TXPLLCFGLOADER_MSG_ADL0_EMODE_CFG_ADL_EN_OVR_VAL_EMODE_BF_OFF (21)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_EMODE_CFG_ADL_EN_OVR_VAL_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_EMODE_CFG_ADL_EN_OVR_VAL_EMODE_BF_MSK (0x00200000)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_EMODE_CFG_ADL_EN_OVR_VAL_EMODE_BF_DEF (0x00000000)

///< Override enable for cfg_adl_cap_ctrl_ovr_val[8:0]
#define PMA_TXPLLCFGLOADER_MSG_ADL0_EMODE_CFG_ADL_CAP_CTRL_OVR_EN_EMODE_BF_OFF (22)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_EMODE_CFG_ADL_CAP_CTRL_OVR_EN_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_EMODE_CFG_ADL_CAP_CTRL_OVR_EN_EMODE_BF_MSK (0x00400000)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_EMODE_CFG_ADL_CAP_CTRL_OVR_EN_EMODE_BF_DEF (0x00000000)

///< Override value for cap_ctrl bus to ADL.
#define PMA_TXPLLCFGLOADER_MSG_ADL0_EMODE_CFG_ADL_CAP_CTRL_OVR_VAL_EMODE_BF_OFF (23)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_EMODE_CFG_ADL_CAP_CTRL_OVR_VAL_EMODE_BF_WID ( 9)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_EMODE_CFG_ADL_CAP_CTRL_OVR_VAL_EMODE_BF_MSK (0xFF800000)
#define PMA_TXPLLCFGLOADER_MSG_ADL0_EMODE_CFG_ADL_CAP_CTRL_OVR_VAL_EMODE_BF_DEF (0x01800000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_ADL1_EMODE register description at address offset 0x32c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_adl1_emode
  * SERDES_LANE_ANA_PLL::ADL1
  */

typedef union {
  struct {
    uint32_t CFG_ADL_MONITOR_OCT_SEL_EMODE : 8;
    ///< SERDES_LANE_ANA_PLL::ADL1::cfg_adl_monitor_oct_sel
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_TDC_STATUS_EN_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ADL1::cfg_tdc_status_en
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CFG_ADL_MONITOR_THR_EMODE : 5;
    ///< SERDES_LANE_ANA_PLL::ADL1::cfg_adl_monitor_thr
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t  : 18;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_adl1_emode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_ADL1_EMODE_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_EMODE_RD_MASK (0x00003fffU)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_EMODE_WR_MASK (0x00003fffU)


///< SERDES_LANE_ANA_PLL::ADL1::cfg_adl_monitor_oct_sel
#define PMA_TXPLLCFGLOADER_MSG_ADL1_EMODE_CFG_ADL_MON_OCT_SEL_EMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_EMODE_CFG_ADL_MON_OCT_SEL_EMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_EMODE_CFG_ADL_MON_OCT_SEL_EMODE_BF_MSK (0x000000FF)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_EMODE_CFG_ADL_MON_OCT_SEL_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ADL1::cfg_tdc_status_en
#define PMA_TXPLLCFGLOADER_MSG_ADL1_EMODE_CFG_TDC_STAT_EN_EMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_EMODE_CFG_TDC_STAT_EN_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_EMODE_CFG_TDC_STAT_EN_EMODE_BF_MSK (0x00000100)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_EMODE_CFG_TDC_STAT_EN_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ADL1::cfg_adl_monitor_thr
#define PMA_TXPLLCFGLOADER_MSG_ADL1_EMODE_CFG_ADL_MON_THR_EMODE_BF_OFF ( 9)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_EMODE_CFG_ADL_MON_THR_EMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_EMODE_CFG_ADL_MON_THR_EMODE_BF_MSK (0x00003E00)
#define PMA_TXPLLCFGLOADER_MSG_ADL1_EMODE_CFG_ADL_MON_THR_EMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_FRAC_LOCK0_EMODE register description at address offset 0x330
  *
  * Register default value:        0x00002D0C
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_frac_lock0_emode
  * LCPLL_FRAC_LOCK Register
  */

typedef union {
  struct {
    uint32_t O_FEEDFWRDGAIN_EMODE : 8;
    ///< Feed-forward gain for fractional mode.                         When
    ///< o_feedfwrdcal_en_h=0, this will determine the gain.
    ///< When o_feedfwrdcal_en_h=1, this will determine initial value of the
    ///< gain.                          Use the following formula:
    ///< Full rate: o_feedfwrdgain = 1/(Fdco*tdc_fine_step)
    ///< Half rate: o_feedfwrdgain = 2/(Fdco*tdc_fine_step)
    ///< For franN mode, tdc_fine_step is 6.5psec.
    ///< AccessType="RW" BitOffset="0" ResetValue="0xC"
    uint32_t O_FEEDFWRDCAL_EN_H_EMODE : 1;
    ///< Feedfward gain adaptive mode enable
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1"
    uint32_t O_FEEDFWRDCAL_PAUSE_H_EMODE : 1;
    ///< This bit is for dynamically turning on and off feed forward gain adaptive
    ///< mode.
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t O_DCODITHEREN_H_EMODE : 1;
    ///< DCO fine dithering enable signal.
    ///< AccessType="RW" BitOffset="10" ResetValue="0x1"
    uint32_t O_LOCK_CRITERIA_EMODE : 3;
    ///< Phase lock indicator criteria. Asserted high when phase error is less
    ///< than or equal to the threshold value for:
    ///< 000: 16 consecutive cycles                         001: 32 consecutive
    ///< cycles                         010: 48 consecutive cycles
    ///< 011: 64 consecutive cycles                         100: 80 consecutive
    ///< cycles                         101: 96 consecutive cycles
    ///< 110: 112 consecutive cycles                         111: 128 consecutive
    ///< cycles
    ///< AccessType="RW" BitOffset="11" ResetValue="0x5"
    uint32_t O_FBDIV_STROBE_H_EMODE : 1;
    ///< Enables sampling feedback ratio (integer+fractional) into PLL logic.
    ///< Before changing feedback ratio dynamically (while PLL is running),
    ///< one should deassert this bit until new ratio is udpated in registers.
    ///< This is to ensure safe and synchronoius update of ratio.
    ///< The feedback ratio will propagate automatically into PLL logic while
    ///< PLL is off until DCO settle state is done.
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t O_DITHER_VALUE_EMODE : 5;
    ///< DCO Dither Override Value (in case o_dither_ovrd=1).
    ///< 5 MSB of the filter fractional code (rest 4 LSBs are set to 0).
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t CFG_SIGMA_DELTA2_SEL_EMODE : 1;
    ///< 0 - Uses the first order sigma delta modulator for the feed forward
    ///< cancellation mechanism.                         1 - Uses the second
    ///< order sigma delta modulator for the feed forward cancellation mechanism.
    ///< Note that in this mode the adaptive ffgain feature doesn&#39;t work.
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t CFG_HIGH_SPEED_SD_EN_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::FRAC_LOCK0::cfg_high_speed_sd_en
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_frac_lock0_emode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_EMODE_DEFAULT (0x00002d0cU)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_EMODE_RD_MASK (0x003fffffU)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_EMODE_WR_MASK (0x003fffffU)


///< Feed-forward gain for fractional mode.                         When
///< o_feedfwrdcal_en_h=0, this will determine the gain.
///< When o_feedfwrdcal_en_h=1, this will determine initial value of the
///< gain.                          Use the following formula:
///< Full rate: o_feedfwrdgain = 1/(Fdco*tdc_fine_step)
///< Half rate: o_feedfwrdgain = 2/(Fdco*tdc_fine_step)
///< For franN mode, tdc_fine_step is 6.5psec.
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_EMODE_O_FEEDFWRDGAIN_EMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_EMODE_O_FEEDFWRDGAIN_EMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_EMODE_O_FEEDFWRDGAIN_EMODE_BF_MSK (0x000000FF)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_EMODE_O_FEEDFWRDGAIN_EMODE_BF_DEF (0x0000000C)

///< Feedfward gain adaptive mode enable
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_EMODE_O_FEEDFWRDCAL_EN_H_EMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_EMODE_O_FEEDFWRDCAL_EN_H_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_EMODE_O_FEEDFWRDCAL_EN_H_EMODE_BF_MSK (0x00000100)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_EMODE_O_FEEDFWRDCAL_EN_H_EMODE_BF_DEF (0x00000100)

///< This bit is for dynamically turning on and off feed forward gain adaptive
///< mode.
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_EMODE_O_FEEDFWRDCAL_PAUSE_H_EMODE_BF_OFF ( 9)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_EMODE_O_FEEDFWRDCAL_PAUSE_H_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_EMODE_O_FEEDFWRDCAL_PAUSE_H_EMODE_BF_MSK (0x00000200)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_EMODE_O_FEEDFWRDCAL_PAUSE_H_EMODE_BF_DEF (0x00000000)

///< DCO fine dithering enable signal.
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_EMODE_O_DCODITHEREN_H_EMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_EMODE_O_DCODITHEREN_H_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_EMODE_O_DCODITHEREN_H_EMODE_BF_MSK (0x00000400)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_EMODE_O_DCODITHEREN_H_EMODE_BF_DEF (0x00000400)

///< Phase lock indicator criteria. Asserted high when phase error is less
///< than or equal to the threshold value for:
///< 000: 16 consecutive cycles                         001: 32 consecutive
///< cycles                         010: 48 consecutive cycles
///< 011: 64 consecutive cycles                         100: 80 consecutive
///< cycles                         101: 96 consecutive cycles
///< 110: 112 consecutive cycles                         111: 128 consecutive
///< cycles
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_EMODE_O_LOCK_CRITERIA_EMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_EMODE_O_LOCK_CRITERIA_EMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_EMODE_O_LOCK_CRITERIA_EMODE_BF_MSK (0x00003800)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_EMODE_O_LOCK_CRITERIA_EMODE_BF_DEF (0x00002800)

///< Enables sampling feedback ratio (integer+fractional) into PLL logic.
///< Before changing feedback ratio dynamically (while PLL is running),
///< one should deassert this bit until new ratio is udpated in registers.
///< This is to ensure safe and synchronoius update of ratio.
///< The feedback ratio will propagate automatically into PLL logic while
///< PLL is off until DCO settle state is done.
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_EMODE_O_FBDIV_STROBE_H_EMODE_BF_OFF (14)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_EMODE_O_FBDIV_STROBE_H_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_EMODE_O_FBDIV_STROBE_H_EMODE_BF_MSK (0x00004000)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_EMODE_O_FBDIV_STROBE_H_EMODE_BF_DEF (0x00000000)

///< DCO Dither Override Value (in case o_dither_ovrd=1).
///< 5 MSB of the filter fractional code (rest 4 LSBs are set to 0).
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_EMODE_O_DITHER_VAL_EMODE_BF_OFF (15)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_EMODE_O_DITHER_VAL_EMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_EMODE_O_DITHER_VAL_EMODE_BF_MSK (0x000F8000)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_EMODE_O_DITHER_VAL_EMODE_BF_DEF (0x00000000)

///< 0 - Uses the first order sigma delta modulator for the feed forward
///< cancellation mechanism.                         1 - Uses the second
///< order sigma delta modulator for the feed forward cancellation mechanism.
///< Note that in this mode the adaptive ffgain feature doesn&#39;t work.
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_EMODE_CFG_SIGMA_DELTA2_SEL_EMODE_BF_OFF (20)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_EMODE_CFG_SIGMA_DELTA2_SEL_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_EMODE_CFG_SIGMA_DELTA2_SEL_EMODE_BF_MSK (0x00100000)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_EMODE_CFG_SIGMA_DELTA2_SEL_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::FRAC_LOCK0::cfg_high_speed_sd_en
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_EMODE_CFG_HIGH_SPEED_SD_EN_EMODE_BF_OFF (21)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_EMODE_CFG_HIGH_SPEED_SD_EN_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_EMODE_CFG_HIGH_SPEED_SD_EN_EMODE_BF_MSK (0x00200000)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_EMODE_CFG_HIGH_SPEED_SD_EN_EMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_FRAC_LOCK1_EMODE register description at address offset 0x334
  *
  * Register default value:        0x00000045
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_frac_lock1_emode
  * SERDES_LANE_ANA_PLL::FRAC_LOCK1
  */

typedef union {
  struct {
    uint32_t CFG_LOCK_THRESH_EMODE : 5;
    ///< Phase lock detect threshold.                         The PLL will
    ///< generate plllockout when the TDC phase error is within lockthresh
    ///< for a number of cycles determined by o_lock_criteria.
    ///< 0 is forbidden value.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x5"
    uint32_t CFG_FINE_FIRST_BOOST_REPEAT_EMODE : 3;
    ///< Determines the number of repetitions of the boost gain counter for
    ///< the first stage of the fine boost.                         The number
    ///< of overall repetitions is equal to cfg_fine_first_boost_repeat + 1
    ///< Set this to non-zero when PLL needs to lock on SSC&#39;ed refclk,
    ///< to allow enough time for the boost to handle fast cap-swap.
    ///< AccessType="RW" BitOffset="5" ResetValue="0x2"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_frac_lock1_emode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_EMODE_DEFAULT (0x00000045U)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_EMODE_RD_MASK (0x000000ffU)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_EMODE_WR_MASK (0x000000ffU)


///< Phase lock detect threshold.                         The PLL will
///< generate plllockout when the TDC phase error is within lockthresh
///< for a number of cycles determined by o_lock_criteria.
///< 0 is forbidden value.
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_EMODE_CFG_LOCK_THRESH_EMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_EMODE_CFG_LOCK_THRESH_EMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_EMODE_CFG_LOCK_THRESH_EMODE_BF_MSK (0x0000001F)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_EMODE_CFG_LOCK_THRESH_EMODE_BF_DEF (0x00000005)

///< Determines the number of repetitions of the boost gain counter for
///< the first stage of the fine boost.                         The number
///< of overall repetitions is equal to cfg_fine_first_boost_repeat + 1
///< Set this to non-zero when PLL needs to lock on SSC&#39;ed refclk,
///< to allow enough time for the boost to handle fast cap-swap.
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_EMODE_CFG_FINE_FIRST_BOOST_REPEAT_EMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_EMODE_CFG_FINE_FIRST_BOOST_REPEAT_EMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_EMODE_CFG_FINE_FIRST_BOOST_REPEAT_EMODE_BF_MSK (0x000000E0)
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_EMODE_CFG_FINE_FIRST_BOOST_REPEAT_EMODE_BF_DEF (0x00000040)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_TDC0_EMODE register description at address offset 0x338
  *
  * Register default value:        0x0F00033F
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_tdc0_emode
  * LCPLL_TDC0 Register
  */

typedef union {
  struct {
    uint32_t CFG_VTDC_REFCLK_CNT_LIMIT_EMODE : 4;
    ///< Number of reference clock cycles used in TDC clock calibration
    ///< AccessType="RW" BitOffset="0" ResetValue="0xF"
    uint32_t CFG_VTDC_FAST_SEL_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_fast_sel
    ///< AccessType="RW" BitOffset="4" ResetValue="0x1"
    uint32_t CFG_VTDC_OFFSET_CALIB_EN_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_offset_calib_en
    ///< AccessType="RW" BitOffset="5" ResetValue="0x1"
    uint32_t CFG_VTDC_PLUS_STDC_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_plus_stdc
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t CFG_VTDC_FINE_OFFSET_CHIKEN_BIT_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_fine_offset_chiken_bit
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t CFG_VTDC_OFFSET_TIMER_LIMIT_EMODE : 4;
    ///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_offset_timer_limit
    ///< AccessType="RW" BitOffset="8" ResetValue="0x3"
    uint32_t CFG_VTDC_FINE_OFFSET_OVRD_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_fine_offset_ovrd
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t CFG_VTDC_FINE_OFFSET_OVRD_VAL_EMODE : 5;
    ///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_fine_offset_ovrd_val
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t CFG_TDCPE_OFFSET_EMODE : 5;
    ///< Adding offset to 2&#39;s comp tdc value (integer signed)
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t CFG_TDC_BB_INPUT_SEL_EMODE : 1;
    ///< 1&#39;b0 - Uses bb TDC signal from analog
    ///< 1&#39;b1 - Uses MSB of tdceff signal as bb TDC input signal (TDC sign
    ///< bit)
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t CFG_STDC_STDDEV_INIT_EMODE : 4;
    ///< Initial value for stddev control bus before STDC calibration.
    ///< AccessType="RW" BitOffset="24" ResetValue="0xF"
    uint32_t CFG_FORCE_VTDC_OSC_EMODE : 1;
    ///< Forces VTDC to RO mode
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t CFG_VTDC_OFFSET_RANGE_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_offset_range
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_tdc0_emode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_DEFAULT (0x0f00033fU)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_RD_MASK (0x3fffffffU)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_WR_MASK (0x3fffffffU)


///< Number of reference clock cycles used in TDC clock calibration
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_CFG_VTDC_REFCLK_CNT_LIMIT_EMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_CFG_VTDC_REFCLK_CNT_LIMIT_EMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_CFG_VTDC_REFCLK_CNT_LIMIT_EMODE_BF_MSK (0x0000000F)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_CFG_VTDC_REFCLK_CNT_LIMIT_EMODE_BF_DEF (0x0000000F)

///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_fast_sel
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_CFG_VTDC_FAST_SEL_EMODE_BF_OFF ( 4)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_CFG_VTDC_FAST_SEL_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_CFG_VTDC_FAST_SEL_EMODE_BF_MSK (0x00000010)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_CFG_VTDC_FAST_SEL_EMODE_BF_DEF (0x00000010)

///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_offset_calib_en
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_CFG_VTDC_OFFSET_CALIB_EN_EMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_CFG_VTDC_OFFSET_CALIB_EN_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_CFG_VTDC_OFFSET_CALIB_EN_EMODE_BF_MSK (0x00000020)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_CFG_VTDC_OFFSET_CALIB_EN_EMODE_BF_DEF (0x00000020)

///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_plus_stdc
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_CFG_VTDC_PLUS_STDC_EMODE_BF_OFF ( 6)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_CFG_VTDC_PLUS_STDC_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_CFG_VTDC_PLUS_STDC_EMODE_BF_MSK (0x00000040)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_CFG_VTDC_PLUS_STDC_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_fine_offset_chiken_bit
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_CFG_VTDC_FINE_OFFSET_CHIKEN_BIT_EMODE_BF_OFF ( 7)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_CFG_VTDC_FINE_OFFSET_CHIKEN_BIT_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_CFG_VTDC_FINE_OFFSET_CHIKEN_BIT_EMODE_BF_MSK (0x00000080)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_CFG_VTDC_FINE_OFFSET_CHIKEN_BIT_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_offset_timer_limit
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_CFG_VTDC_OFFSET_TIMER_LIMIT_EMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_CFG_VTDC_OFFSET_TIMER_LIMIT_EMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_CFG_VTDC_OFFSET_TIMER_LIMIT_EMODE_BF_MSK (0x00000F00)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_CFG_VTDC_OFFSET_TIMER_LIMIT_EMODE_BF_DEF (0x00000300)

///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_fine_offset_ovrd
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_CFG_VTDC_FINE_OFFSET_OVRD_EMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_CFG_VTDC_FINE_OFFSET_OVRD_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_CFG_VTDC_FINE_OFFSET_OVRD_EMODE_BF_MSK (0x00001000)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_CFG_VTDC_FINE_OFFSET_OVRD_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_fine_offset_ovrd_val
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_CFG_VTDC_FINE_OFFSET_OVRD_VAL_EMODE_BF_OFF (13)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_CFG_VTDC_FINE_OFFSET_OVRD_VAL_EMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_CFG_VTDC_FINE_OFFSET_OVRD_VAL_EMODE_BF_MSK (0x0003E000)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_CFG_VTDC_FINE_OFFSET_OVRD_VAL_EMODE_BF_DEF (0x00000000)

///< Adding offset to 2&#39;s comp tdc value (integer signed)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_CFG_TDCPE_OFFSET_EMODE_BF_OFF (18)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_CFG_TDCPE_OFFSET_EMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_CFG_TDCPE_OFFSET_EMODE_BF_MSK (0x007C0000)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_CFG_TDCPE_OFFSET_EMODE_BF_DEF (0x00000000)

///< 1&#39;b0 - Uses bb TDC signal from analog
///< 1&#39;b1 - Uses MSB of tdceff signal as bb TDC input signal (TDC sign
///< bit)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_CFG_TDC_BB_INPUT_SEL_EMODE_BF_OFF (23)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_CFG_TDC_BB_INPUT_SEL_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_CFG_TDC_BB_INPUT_SEL_EMODE_BF_MSK (0x00800000)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_CFG_TDC_BB_INPUT_SEL_EMODE_BF_DEF (0x00000000)

///< Initial value for stddev control bus before STDC calibration.
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_CFG_STDC_STDDEV_INIT_EMODE_BF_OFF (24)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_CFG_STDC_STDDEV_INIT_EMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_CFG_STDC_STDDEV_INIT_EMODE_BF_MSK (0x0F000000)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_CFG_STDC_STDDEV_INIT_EMODE_BF_DEF (0x0F000000)

///< Forces VTDC to RO mode
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_CFG_FORCE_VTDC_OSC_EMODE_BF_OFF (28)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_CFG_FORCE_VTDC_OSC_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_CFG_FORCE_VTDC_OSC_EMODE_BF_MSK (0x10000000)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_CFG_FORCE_VTDC_OSC_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TDC0::cfg_vtdc_offset_range
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_CFG_VTDC_OFFSET_RANGE_EMODE_BF_OFF (29)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_CFG_VTDC_OFFSET_RANGE_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_CFG_VTDC_OFFSET_RANGE_EMODE_BF_MSK (0x20000000)
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_CFG_VTDC_OFFSET_RANGE_EMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_TDC1_EMODE register description at address offset 0x33c
  *
  * Register default value:        0x001E80AA
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_tdc1_emode
  * SERDES_LANE_ANA_PLL::TDC1
  */

typedef union {
  struct {
    uint32_t CFG_PE_DISABLE_EMODE : 1;
    ///< Force values of 0 on TDC output.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_TDC_LADDER_MAX_EMODE : 2;
    ///< Max trim ladder code value alowed during lock adquisition.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x1"
    uint32_t CFG_TDC_LADDER_MIN_EMODE : 2;
    ///< Min trim ladder code value alowed during lock adquisition.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x1"
    uint32_t CFG_SELECT_STDC_FILTER_EMODE : 1;
    ///< Select STDC output to filter.                         Will select
    ///< only after FSM enables.
    ///< AccessType="RW" BitOffset="5" ResetValue="0x1"
    uint32_t CFG_SELECT_STDC_DFX_EMODE : 1;
    ///< Select STDC output to DFX path (PE min/max, raw lock, VISA, RO reg)
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t CFG_STDC_PROP_COEFF_EMODE : 5;
    ///< Fine Kp = 2^(-reg) to be used with STDC (signed value)
    ///< AccessType="RW" BitOffset="7" ResetValue="0x1"
    uint32_t CFG_STDC_INT_COEFF_EMODE : 5;
    ///< Fine Ki = 2^(-reg) to be used with STDC
    ///< AccessType="RW" BitOffset="12" ResetValue="0x8"
    uint32_t CFG_VTDC_ANA_EN_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC1::cfg_vtdc_ana_en
    ///< AccessType="RW" BitOffset="17" ResetValue="0x1"
    uint32_t CFG_STDC_ANA_EN_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC1::cfg_stdc_ana_en
    ///< AccessType="RW" BitOffset="18" ResetValue="0x1"
    uint32_t CFG_TDC_SAMP_BYPASS_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC1::cfg_tdc_samp_bypass
    ///< AccessType="RW" BitOffset="19" ResetValue="0x1"
    uint32_t CFG_STDC_SAMP_BYPASS_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC1::cfg_stdc_samp_bypass
    ///< AccessType="RW" BitOffset="20" ResetValue="0x1"
    uint32_t CFG_TDC_STATUS_MODE_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC1::cfg_tdc_status_mode
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t CFG_TDC_HISTOGRAM_MODE_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TDC1::cfg_tdc_histogram_mode
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t CFG_TDC_HISTOGRAM_VALUE_EMODE : 6;
    ///< SERDES_LANE_ANA_PLL::TDC1::cfg_tdc_histogram_value
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_tdc1_emode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_DEFAULT (0x001e80aaU)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_RD_MASK (0x1fffffffU)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_WR_MASK (0x1fffffffU)


///< Force values of 0 on TDC output.
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_PE_DIS_EMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_PE_DIS_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_PE_DIS_EMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_PE_DIS_EMODE_BF_DEF (0x00000000)

///< Max trim ladder code value alowed during lock adquisition.
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_TDC_LADDER_MAX_EMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_TDC_LADDER_MAX_EMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_TDC_LADDER_MAX_EMODE_BF_MSK (0x00000006)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_TDC_LADDER_MAX_EMODE_BF_DEF (0x00000002)

///< Min trim ladder code value alowed during lock adquisition.
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_TDC_LADDER_MIN_EMODE_BF_OFF ( 3)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_TDC_LADDER_MIN_EMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_TDC_LADDER_MIN_EMODE_BF_MSK (0x00000018)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_TDC_LADDER_MIN_EMODE_BF_DEF (0x00000008)

///< Select STDC output to filter.                         Will select
///< only after FSM enables.
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_SEL_STDC_FILTER_EMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_SEL_STDC_FILTER_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_SEL_STDC_FILTER_EMODE_BF_MSK (0x00000020)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_SEL_STDC_FILTER_EMODE_BF_DEF (0x00000020)

///< Select STDC output to DFX path (PE min/max, raw lock, VISA, RO reg)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_SEL_STDC_DFX_EMODE_BF_OFF ( 6)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_SEL_STDC_DFX_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_SEL_STDC_DFX_EMODE_BF_MSK (0x00000040)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_SEL_STDC_DFX_EMODE_BF_DEF (0x00000000)

///< Fine Kp = 2^(-reg) to be used with STDC (signed value)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_STDC_PROP_COEFF_EMODE_BF_OFF ( 7)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_STDC_PROP_COEFF_EMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_STDC_PROP_COEFF_EMODE_BF_MSK (0x00000F80)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_STDC_PROP_COEFF_EMODE_BF_DEF (0x00000080)

///< Fine Ki = 2^(-reg) to be used with STDC
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_STDC_INT_COEFF_EMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_STDC_INT_COEFF_EMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_STDC_INT_COEFF_EMODE_BF_MSK (0x0001F000)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_STDC_INT_COEFF_EMODE_BF_DEF (0x00008000)

///< SERDES_LANE_ANA_PLL::TDC1::cfg_vtdc_ana_en
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_VTDC_ANA_EN_EMODE_BF_OFF (17)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_VTDC_ANA_EN_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_VTDC_ANA_EN_EMODE_BF_MSK (0x00020000)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_VTDC_ANA_EN_EMODE_BF_DEF (0x00020000)

///< SERDES_LANE_ANA_PLL::TDC1::cfg_stdc_ana_en
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_STDC_ANA_EN_EMODE_BF_OFF (18)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_STDC_ANA_EN_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_STDC_ANA_EN_EMODE_BF_MSK (0x00040000)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_STDC_ANA_EN_EMODE_BF_DEF (0x00040000)

///< SERDES_LANE_ANA_PLL::TDC1::cfg_tdc_samp_bypass
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_TDC_SAMP_BYP_EMODE_BF_OFF (19)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_TDC_SAMP_BYP_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_TDC_SAMP_BYP_EMODE_BF_MSK (0x00080000)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_TDC_SAMP_BYP_EMODE_BF_DEF (0x00080000)

///< SERDES_LANE_ANA_PLL::TDC1::cfg_stdc_samp_bypass
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_STDC_SAMP_BYP_EMODE_BF_OFF (20)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_STDC_SAMP_BYP_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_STDC_SAMP_BYP_EMODE_BF_MSK (0x00100000)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_STDC_SAMP_BYP_EMODE_BF_DEF (0x00100000)

///< SERDES_LANE_ANA_PLL::TDC1::cfg_tdc_status_mode
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_TDC_STAT_MODE_EMODE_BF_OFF (21)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_TDC_STAT_MODE_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_TDC_STAT_MODE_EMODE_BF_MSK (0x00200000)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_TDC_STAT_MODE_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TDC1::cfg_tdc_histogram_mode
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_TDC_HISTOGRAM_MODE_EMODE_BF_OFF (22)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_TDC_HISTOGRAM_MODE_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_TDC_HISTOGRAM_MODE_EMODE_BF_MSK (0x00400000)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_TDC_HISTOGRAM_MODE_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TDC1::cfg_tdc_histogram_value
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_TDC_HISTOGRAM_VAL_EMODE_BF_OFF (23)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_TDC_HISTOGRAM_VAL_EMODE_BF_WID ( 6)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_TDC_HISTOGRAM_VAL_EMODE_BF_MSK (0x1F800000)
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_CFG_TDC_HISTOGRAM_VAL_EMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_TDC2_EMODE register description at address offset 0x340
  *
  * Register default value:        0x002483EF
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_tdc2_emode
  * SERDES_LANE_ANA_PLL::TDC2
  */

typedef union {
  struct {
    uint32_t CFG_TDC_ADAPTIVE_WIN_IN_EMODE : 5;
    ///< TDC code threshold to switch ladder with higher resolution.
    ///< Need to be below that value during cfg_tdc_adaptive_max_count cycle
    ///< time window
    ///< AccessType="RW" BitOffset="0" ResetValue="0xF"
    uint32_t CFG_TDC_ADAPTIVE_WIN_OUT_EMODE : 5;
    ///< TDC code threshold to switch ladder with lower resolution.
    ///< AccessType="RW" BitOffset="5" ResetValue="0x1F"
    uint32_t CFG_TDC_ADAPTIVE_MAX_COUNT_EMODE : 6;
    ///< Defines the number of cycles for time window of TDC ladder adaptive
    ///< switching
    ///< AccessType="RW" BitOffset="10" ResetValue="0x20"
    uint32_t CFG_TDC_TRIM_OVRD_EMODE : 1;
    ///< tdc chain trim ovrd enable
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t CFG_TDC_TRIM_VAL_EMODE : 2;
    ///< tdc chain trim ovrd value
    ///< AccessType="RW" BitOffset="17" ResetValue="0x2"
    uint32_t CFG_KPKI_COMPENSATE_VAL_EMODE : 2;
    ///< SERDES_LANE_ANA_PLL::TDC2::cfg_kpki_compensate_val
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t CFG_STDC_BIAS_EN_EMODE : 1;
    ///< Enables internal STDC bias.
    ///< AccessType="RW" BitOffset="21" ResetValue="0x1"
    uint32_t CFG_FORCE_STDC_OSC_EMODE : 1;
    ///< Forces internal STDC oscilator to enable.
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t CFG_STDC_STDDEV_OVRD_EN_EMODE : 1;
    ///< Enables override for stddev control bus.
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t CFG_STDC_OSC_DIV4_EMODE : 1;
    ///< Enables internal STDC divider for internal oscilator output.
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t CFG_STDCPE_OFFSET_EMODE : 5;
    ///< Adding offset to 2&#39;s comp stdc value (integer signed)
    ///< AccessType="RW" BitOffset="25" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_tdc2_emode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_TDC2_EMODE_DEFAULT (0x002483efU)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_EMODE_RD_MASK (0x3fffffffU)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_EMODE_WR_MASK (0x3fffffffU)


///< TDC code threshold to switch ladder with higher resolution.
///< Need to be below that value during cfg_tdc_adaptive_max_count cycle
///< time window
#define PMA_TXPLLCFGLOADER_MSG_TDC2_EMODE_CFG_TDC_ADAPTIVE_WIN_IN_EMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_EMODE_CFG_TDC_ADAPTIVE_WIN_IN_EMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_EMODE_CFG_TDC_ADAPTIVE_WIN_IN_EMODE_BF_MSK (0x0000001F)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_EMODE_CFG_TDC_ADAPTIVE_WIN_IN_EMODE_BF_DEF (0x0000000F)

///< TDC code threshold to switch ladder with lower resolution.
#define PMA_TXPLLCFGLOADER_MSG_TDC2_EMODE_CFG_TDC_ADAPTIVE_WIN_OUT_EMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_EMODE_CFG_TDC_ADAPTIVE_WIN_OUT_EMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_EMODE_CFG_TDC_ADAPTIVE_WIN_OUT_EMODE_BF_MSK (0x000003E0)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_EMODE_CFG_TDC_ADAPTIVE_WIN_OUT_EMODE_BF_DEF (0x000003E0)

///< Defines the number of cycles for time window of TDC ladder adaptive
///< switching
#define PMA_TXPLLCFGLOADER_MSG_TDC2_EMODE_CFG_TDC_ADAPTIVE_MAX_CNT_EMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_EMODE_CFG_TDC_ADAPTIVE_MAX_CNT_EMODE_BF_WID ( 6)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_EMODE_CFG_TDC_ADAPTIVE_MAX_CNT_EMODE_BF_MSK (0x0000FC00)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_EMODE_CFG_TDC_ADAPTIVE_MAX_CNT_EMODE_BF_DEF (0x00008000)

///< tdc chain trim ovrd enable
#define PMA_TXPLLCFGLOADER_MSG_TDC2_EMODE_CFG_TDC_TRIM_OVRD_EMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_EMODE_CFG_TDC_TRIM_OVRD_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_EMODE_CFG_TDC_TRIM_OVRD_EMODE_BF_MSK (0x00010000)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_EMODE_CFG_TDC_TRIM_OVRD_EMODE_BF_DEF (0x00000000)

///< tdc chain trim ovrd value
#define PMA_TXPLLCFGLOADER_MSG_TDC2_EMODE_CFG_TDC_TRIM_VAL_EMODE_BF_OFF (17)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_EMODE_CFG_TDC_TRIM_VAL_EMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_EMODE_CFG_TDC_TRIM_VAL_EMODE_BF_MSK (0x00060000)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_EMODE_CFG_TDC_TRIM_VAL_EMODE_BF_DEF (0x00040000)

///< SERDES_LANE_ANA_PLL::TDC2::cfg_kpki_compensate_val
#define PMA_TXPLLCFGLOADER_MSG_TDC2_EMODE_CFG_KPKI_COMPENSATE_VAL_EMODE_BF_OFF (19)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_EMODE_CFG_KPKI_COMPENSATE_VAL_EMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_EMODE_CFG_KPKI_COMPENSATE_VAL_EMODE_BF_MSK (0x00180000)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_EMODE_CFG_KPKI_COMPENSATE_VAL_EMODE_BF_DEF (0x00000000)

///< Enables internal STDC bias.
#define PMA_TXPLLCFGLOADER_MSG_TDC2_EMODE_CFG_STDC_BIAS_EN_EMODE_BF_OFF (21)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_EMODE_CFG_STDC_BIAS_EN_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_EMODE_CFG_STDC_BIAS_EN_EMODE_BF_MSK (0x00200000)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_EMODE_CFG_STDC_BIAS_EN_EMODE_BF_DEF (0x00200000)

///< Forces internal STDC oscilator to enable.
#define PMA_TXPLLCFGLOADER_MSG_TDC2_EMODE_CFG_FORCE_STDC_OSC_EMODE_BF_OFF (22)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_EMODE_CFG_FORCE_STDC_OSC_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_EMODE_CFG_FORCE_STDC_OSC_EMODE_BF_MSK (0x00400000)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_EMODE_CFG_FORCE_STDC_OSC_EMODE_BF_DEF (0x00000000)

///< Enables override for stddev control bus.
#define PMA_TXPLLCFGLOADER_MSG_TDC2_EMODE_CFG_STDC_STDDEV_OVRD_EN_EMODE_BF_OFF (23)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_EMODE_CFG_STDC_STDDEV_OVRD_EN_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_EMODE_CFG_STDC_STDDEV_OVRD_EN_EMODE_BF_MSK (0x00800000)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_EMODE_CFG_STDC_STDDEV_OVRD_EN_EMODE_BF_DEF (0x00000000)

///< Enables internal STDC divider for internal oscilator output.
#define PMA_TXPLLCFGLOADER_MSG_TDC2_EMODE_CFG_STDC_OSC_DIV4_EMODE_BF_OFF (24)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_EMODE_CFG_STDC_OSC_DIV4_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_EMODE_CFG_STDC_OSC_DIV4_EMODE_BF_MSK (0x01000000)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_EMODE_CFG_STDC_OSC_DIV4_EMODE_BF_DEF (0x00000000)

///< Adding offset to 2&#39;s comp stdc value (integer signed)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_EMODE_CFG_STDCPE_OFFSET_EMODE_BF_OFF (25)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_EMODE_CFG_STDCPE_OFFSET_EMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_EMODE_CFG_STDCPE_OFFSET_EMODE_BF_MSK (0x3E000000)
#define PMA_TXPLLCFGLOADER_MSG_TDC2_EMODE_CFG_STDCPE_OFFSET_EMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_TDC3_EMODE register description at address offset 0x344
  *
  * Register default value:        0x000003A3
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_tdc3_emode
  * SERDES_LANE_ANA_PLL::TDC3
  */

typedef union {
  struct {
    uint32_t CFG_STDC_TARGET_CNT_EMODE : 8;
    ///< Calibration target for STDC oscilator during calibration.
    ///< The formula: int(2^(2 + cfg_stdc_cnt_limit)*(3e9/Frefclk))
    ///< AccessType="RW" BitOffset="0" ResetValue="0xA3"
    uint32_t CFG_STDC_CNT_LIMIT_EMODE : 2;
    ///< Number of cycles to count STDC oscilator edges during calibration.
    ///< Value = 2^(2 + reg)
    ///< AccessType="RW" BitOffset="8" ResetValue="0x3"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_tdc3_emode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_TDC3_EMODE_DEFAULT (0x000003a3U)
#define PMA_TXPLLCFGLOADER_MSG_TDC3_EMODE_RD_MASK (0x000003ffU)
#define PMA_TXPLLCFGLOADER_MSG_TDC3_EMODE_WR_MASK (0x000003ffU)


///< Calibration target for STDC oscilator during calibration.
///< The formula: int(2^(2 + cfg_stdc_cnt_limit)*(3e9/Frefclk))
#define PMA_TXPLLCFGLOADER_MSG_TDC3_EMODE_CFG_STDC_TARGET_CNT_EMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_TDC3_EMODE_CFG_STDC_TARGET_CNT_EMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_TDC3_EMODE_CFG_STDC_TARGET_CNT_EMODE_BF_MSK (0x000000FF)
#define PMA_TXPLLCFGLOADER_MSG_TDC3_EMODE_CFG_STDC_TARGET_CNT_EMODE_BF_DEF (0x000000A3)

///< Number of cycles to count STDC oscilator edges during calibration.
///< Value = 2^(2 + reg)
#define PMA_TXPLLCFGLOADER_MSG_TDC3_EMODE_CFG_STDC_CNT_LIMIT_EMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_TDC3_EMODE_CFG_STDC_CNT_LIMIT_EMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_TDC3_EMODE_CFG_STDC_CNT_LIMIT_EMODE_BF_MSK (0x00000300)
#define PMA_TXPLLCFGLOADER_MSG_TDC3_EMODE_CFG_STDC_CNT_LIMIT_EMODE_BF_DEF (0x00000300)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_TAP_OVRD_EMODE register description at address offset 0x348
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_tap_ovrd_emode
  * LCPLL_TAP_OVRD Register
  */

typedef union {
  struct {
    uint32_t CFG_PLL_ENABLE_EMODE : 1;
    ///< Replaces direct pin of PLL enable signal (in case cfg_pll_en_mode_ctrl
    ///< = 1).
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_PLL_EN_MODE_CTRL_EMODE : 1;
    ///< Effective PLL enable:                         0 - Enable signal from
    ///< PLL interface                         1 - Enable signal from PLL register
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t CFG_LDO_ENABLE_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldo_enable
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t CFG_VREFGEN_EN_OVRD_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_vrefgen_en_ovrd
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t CFG_VREFGEN_EN_OVRD_VAL_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_vrefgen_en_ovrd_val
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t CFG_LDO_BIAS_EN_OVRD_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldo_bias_en_ovrd
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t CFG_LDO_BIAS_EN_OVRD_VAL_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldo_bias_en_ovrd_val
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t CFG_LDOCLK_EN_OVRD_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldoclk_en_ovrd
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t CFG_LDOCLK_EN_OVRD_VAL_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldoclk_en_ovrd_val
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CFG_LDODCO_EN_OVRD_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldodco_en_ovrd
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t CFG_LDODCO_EN_OVRD_VAL_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldodco_en_ovrd_val
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t O_DFX_TDC_DISABLE_EMODE : 1;
    ///< Set to turn off TDC. Mainly to study impact of TDC self noise on PLL
    ///< jitter
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_tap_ovrd_emode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_RD_MASK (0x00000fffU)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_WR_MASK (0x00000fffU)


///< Replaces direct pin of PLL enable signal (in case cfg_pll_en_mode_ctrl
///< = 1).
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_CFG_PLL_EN_EMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_CFG_PLL_EN_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_CFG_PLL_EN_EMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_CFG_PLL_EN_EMODE_BF_DEF (0x00000000)

///< Effective PLL enable:                         0 - Enable signal from
///< PLL interface                         1 - Enable signal from PLL register
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_CFG_PLL_EN_MODE_CTRL_EMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_CFG_PLL_EN_MODE_CTRL_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_CFG_PLL_EN_MODE_CTRL_EMODE_BF_MSK (0x00000002)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_CFG_PLL_EN_MODE_CTRL_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldo_enable
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_CFG_LDO_EN_EMODE_BF_OFF ( 2)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_CFG_LDO_EN_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_CFG_LDO_EN_EMODE_BF_MSK (0x00000004)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_CFG_LDO_EN_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_vrefgen_en_ovrd
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_CFG_VREFGEN_EN_OVRD_EMODE_BF_OFF ( 3)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_CFG_VREFGEN_EN_OVRD_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_CFG_VREFGEN_EN_OVRD_EMODE_BF_MSK (0x00000008)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_CFG_VREFGEN_EN_OVRD_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_vrefgen_en_ovrd_val
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_CFG_VREFGEN_EN_OVRD_VAL_EMODE_BF_OFF ( 4)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_CFG_VREFGEN_EN_OVRD_VAL_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_CFG_VREFGEN_EN_OVRD_VAL_EMODE_BF_MSK (0x00000010)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_CFG_VREFGEN_EN_OVRD_VAL_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldo_bias_en_ovrd
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_CFG_LDO_BIAS_EN_OVRD_EMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_CFG_LDO_BIAS_EN_OVRD_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_CFG_LDO_BIAS_EN_OVRD_EMODE_BF_MSK (0x00000020)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_CFG_LDO_BIAS_EN_OVRD_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldo_bias_en_ovrd_val
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_CFG_LDO_BIAS_EN_OVRD_VAL_EMODE_BF_OFF ( 6)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_CFG_LDO_BIAS_EN_OVRD_VAL_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_CFG_LDO_BIAS_EN_OVRD_VAL_EMODE_BF_MSK (0x00000040)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_CFG_LDO_BIAS_EN_OVRD_VAL_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldoclk_en_ovrd
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_CFG_LDOCLK_EN_OVRD_EMODE_BF_OFF ( 7)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_CFG_LDOCLK_EN_OVRD_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_CFG_LDOCLK_EN_OVRD_EMODE_BF_MSK (0x00000080)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_CFG_LDOCLK_EN_OVRD_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldoclk_en_ovrd_val
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_CFG_LDOCLK_EN_OVRD_VAL_EMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_CFG_LDOCLK_EN_OVRD_VAL_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_CFG_LDOCLK_EN_OVRD_VAL_EMODE_BF_MSK (0x00000100)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_CFG_LDOCLK_EN_OVRD_VAL_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldodco_en_ovrd
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_CFG_LDODCO_EN_OVRD_EMODE_BF_OFF ( 9)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_CFG_LDODCO_EN_OVRD_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_CFG_LDODCO_EN_OVRD_EMODE_BF_MSK (0x00000200)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_CFG_LDODCO_EN_OVRD_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::TAP_OVRD::cfg_ldodco_en_ovrd_val
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_CFG_LDODCO_EN_OVRD_VAL_EMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_CFG_LDODCO_EN_OVRD_VAL_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_CFG_LDODCO_EN_OVRD_VAL_EMODE_BF_MSK (0x00000400)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_CFG_LDODCO_EN_OVRD_VAL_EMODE_BF_DEF (0x00000000)

///< Set to turn off TDC. Mainly to study impact of TDC self noise on PLL
///< jitter
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_O_DFX_TDC_DIS_EMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_O_DFX_TDC_DIS_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_O_DFX_TDC_DIS_EMODE_BF_MSK (0x00000800)
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_O_DFX_TDC_DIS_EMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_DFX_DCO_EMODE register description at address offset 0x34c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_dfx_dco_emode
  * LCPLL_DFX_DCO Register
  */

typedef union {
  struct {
    uint32_t O_DCOFINEDFTSEL_EMODE : 2;
    ///< DCO fine frequency and dco dither override:
    ///< 00: DCO fine tuning is set by PLL closed loop .
    ///< 01: DCO fine frequency value is set by o_dcofine and DCO dither value
    ///< is set by o_dither_value.                         10: Internal SAW
    ///< tooth pattern on fine integer code (while frac=0). Code increments
    ///< every fbclk cycle.                         11: Reserved.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t O_DCOCOARSE_OVRD_H_EMODE : 1;
    ///< DCO coarse frequency override signal:                         0: DCO
    ///< coarse tuning is set by AFC state machine
    ///< 1: DCO coarse frequency value is set by o_dcocoarse
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t O_DCOFINE_EMODE : 8;
    ///< Fine override value (when o_dcofinedftsel = 01).
    ///< Valid range 0 to 254.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t O_DCOCOARSE_EMODE : 9;
    ///< AFC override value (when o_dcocoarse_ovrd_h=1).
    ///< Valid range 0 to 319.
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t CFG_CAPTURE_FILTER_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DFX_DCO::cfg_capture_filter
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_dfx_dco_emode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_EMODE_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_EMODE_RD_MASK (0x001fffffU)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_EMODE_WR_MASK (0x001fffffU)


///< DCO fine frequency and dco dither override:
///< 00: DCO fine tuning is set by PLL closed loop .
///< 01: DCO fine frequency value is set by o_dcofine and DCO dither value
///< is set by o_dither_value.                         10: Internal SAW
///< tooth pattern on fine integer code (while frac=0). Code increments
///< every fbclk cycle.                         11: Reserved.
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_EMODE_O_DCOFINEDFTSEL_EMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_EMODE_O_DCOFINEDFTSEL_EMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_EMODE_O_DCOFINEDFTSEL_EMODE_BF_MSK (0x00000003)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_EMODE_O_DCOFINEDFTSEL_EMODE_BF_DEF (0x00000000)

///< DCO coarse frequency override signal:                         0: DCO
///< coarse tuning is set by AFC state machine
///< 1: DCO coarse frequency value is set by o_dcocoarse
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_EMODE_O_DCOCOARSE_OVRD_H_EMODE_BF_OFF ( 2)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_EMODE_O_DCOCOARSE_OVRD_H_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_EMODE_O_DCOCOARSE_OVRD_H_EMODE_BF_MSK (0x00000004)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_EMODE_O_DCOCOARSE_OVRD_H_EMODE_BF_DEF (0x00000000)

///< Fine override value (when o_dcofinedftsel = 01).
///< Valid range 0 to 254.
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_EMODE_O_DCOFINE_EMODE_BF_OFF ( 3)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_EMODE_O_DCOFINE_EMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_EMODE_O_DCOFINE_EMODE_BF_MSK (0x000007F8)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_EMODE_O_DCOFINE_EMODE_BF_DEF (0x00000000)

///< AFC override value (when o_dcocoarse_ovrd_h=1).
///< Valid range 0 to 319.
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_EMODE_O_DCOCOARSE_EMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_EMODE_O_DCOCOARSE_EMODE_BF_WID ( 9)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_EMODE_O_DCOCOARSE_EMODE_BF_MSK (0x000FF800)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_EMODE_O_DCOCOARSE_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DFX_DCO::cfg_capture_filter
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_EMODE_CFG_CAP_FILTER_EMODE_BF_OFF (20)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_EMODE_CFG_CAP_FILTER_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_EMODE_CFG_CAP_FILTER_EMODE_BF_MSK (0x00100000)
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_EMODE_CFG_CAP_FILTER_EMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_DFX_TDC_CRO_EMODE register description at address offset 0x350
  *
  * Register default value:        0x0000001C
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_dfx_tdc_cro_emode
  * LCPLL_DFX_TDC_CRO Register
  */

typedef union {
  struct {
    uint32_t CFG_DFT_CNT_RESTART_EMODE : 1;
    ///< Clears min/max measurements and restarts dft counter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_DFT_TIMER_LIMIT_EMODE : 4;
    ///< While cfg_dfx_disable_dft_timer_ovrd_val=0 define the window time
    ///< of the dft measurement. (2^6 +reg [ref_clk cycles])
    ///< AccessType="RW" BitOffset="1" ResetValue="0xE"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_dfx_tdc_cro_emode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_EMODE_DEFAULT (0x0000001cU)
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_EMODE_RD_MASK (0x0000001fU)
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_EMODE_WR_MASK (0x0000001fU)


///< Clears min/max measurements and restarts dft counter
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_EMODE_CFG_DFT_CNT_RESTART_EMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_EMODE_CFG_DFT_CNT_RESTART_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_EMODE_CFG_DFT_CNT_RESTART_EMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_EMODE_CFG_DFT_CNT_RESTART_EMODE_BF_DEF (0x00000000)

///< While cfg_dfx_disable_dft_timer_ovrd_val=0 define the window time
///< of the dft measurement. (2^6 +reg [ref_clk cycles])
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_EMODE_CFG_DFT_TIMER_LIMIT_EMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_EMODE_CFG_DFT_TIMER_LIMIT_EMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_EMODE_CFG_DFT_TIMER_LIMIT_EMODE_BF_MSK (0x0000001E)
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_EMODE_CFG_DFT_TIMER_LIMIT_EMODE_BF_DEF (0x0000001C)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_VISA_CTRL_EMODE register description at address offset 0x354
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_visa_ctrl_emode
  * LCPLL_VISA_CTRL Register
  */

typedef union {
  struct {
    uint32_t CFG_VISA_CTRL_EMODE : 32;
    ///< VISA control register                         [0] visa enable.
    ///< [3:1] prbs mode (pattern gen)
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_visa_ctrl_emode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_EMODE_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_EMODE_RD_MASK (0xffffffffU)
#define PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_EMODE_WR_MASK (0xffffffffU)


///< VISA control register                         [0] visa enable.
///< [3:1] prbs mode (pattern gen)
#define PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_EMODE_CFG_VISA_CTRL_EMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_EMODE_CFG_VISA_CTRL_EMODE_BF_WID (32)
#define PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_EMODE_CFG_VISA_CTRL_EMODE_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_EMODE_CFG_VISA_CTRL_EMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_VISA_LANE0_SEL_EMODE register description at address offset 0x358
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_visa_lane0_sel_emode
  * LCPLL_DFX_VISA_LANE0 Register
  */

typedef union {
  struct {
    uint32_t CFG_VISA_LANE0_SEL_EMODE : 32;
    ///< Parallel VISA control for lane 0                         [7:0] byte
    ///< select                         [15:8] clock select
    ///< [16] clock bypass
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_visa_lane0_sel_emode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_EMODE_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_EMODE_RD_MASK (0xffffffffU)
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_EMODE_WR_MASK (0xffffffffU)


///< Parallel VISA control for lane 0                         [7:0] byte
///< select                         [15:8] clock select
///< [16] clock bypass
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_EMODE_CFG_VISA_LANE0_SEL_EMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_EMODE_CFG_VISA_LANE0_SEL_EMODE_BF_WID (32)
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_EMODE_CFG_VISA_LANE0_SEL_EMODE_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_EMODE_CFG_VISA_LANE0_SEL_EMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_VISA_LANE1_SEL_EMODE register description at address offset 0x35c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_visa_lane1_sel_emode
  * LCPLL_DFX_VISA_LANE1 Register
  */

typedef union {
  struct {
    uint32_t CFG_VISA_LANE1_SEL_EMODE : 32;
    ///< Parallel VISA control for lane 1                         [7:0] byte
    ///< select                         [15:8] clock select
    ///< [16] clock bypass
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_visa_lane1_sel_emode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_EMODE_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_EMODE_RD_MASK (0xffffffffU)
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_EMODE_WR_MASK (0xffffffffU)


///< Parallel VISA control for lane 1                         [7:0] byte
///< select                         [15:8] clock select
///< [16] clock bypass
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_EMODE_CFG_VISA_LANE1_SEL_EMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_EMODE_CFG_VISA_LANE1_SEL_EMODE_BF_WID (32)
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_EMODE_CFG_VISA_LANE1_SEL_EMODE_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_EMODE_CFG_VISA_LANE1_SEL_EMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_CNTR_BIST_SETTINGS_EMODE register description at address offset 0x360
  *
  * Register default value:        0x00008B10
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_cntr_bist_settings_emode
  * LCPLL_CNTR_BIST_SETTINGS Register
  */

typedef union {
  struct {
    uint32_t O_PLLLOCK_SEL_EMODE : 2;
    ///< Selects mode of lock indicator:                         00: Counter
    ///< based lock                         01: Phase lock sticky high
    ///< 10: Boost done                         11: Counter based lock
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_LOCKTIMER_MAXCNT_EMODE : 14;
    ///< Counter target for counter based lock (o_plllock_sel=1,2) in refclk
    ///< cycles.                         Starts counting after VREG &#38; Kvcc
    ///< calibration completed.                         Used also to check
    ///< if raw phase lock asserted in time.                         Default
    ///< is ~25us for refclk of 156.25MHz.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x22C4"
    uint32_t CFG_PLLLOCK_STATE_SEL_EMODE : 1;
    ///< Selects when to enter &#38;quot;locked state&#38;quot; (which starts
    ///< VREG tracking loop, DTR temp tracking, feed-forward gain adaptive
    ///< loop and min/max capture):                         0: counter based
    ///< lock                         1: Phase lock sticky high
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_cntr_bist_settings_emode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_EMODE_DEFAULT (0x00008b10U)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_EMODE_RD_MASK (0x0001ffffU)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_EMODE_WR_MASK (0x0001ffffU)


///< Selects mode of lock indicator:                         00: Counter
///< based lock                         01: Phase lock sticky high
///< 10: Boost done                         11: Counter based lock
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_EMODE_O_PLLLOCK_SEL_EMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_EMODE_O_PLLLOCK_SEL_EMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_EMODE_O_PLLLOCK_SEL_EMODE_BF_MSK (0x00000003)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_EMODE_O_PLLLOCK_SEL_EMODE_BF_DEF (0x00000000)

///< Counter target for counter based lock (o_plllock_sel=1,2) in refclk
///< cycles.                         Starts counting after VREG &#38; Kvcc
///< calibration completed.                         Used also to check
///< if raw phase lock asserted in time.                         Default
///< is ~25us for refclk of 156.25MHz.
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_EMODE_CFG_LOCKTIMER_MAXCNT_EMODE_BF_OFF ( 2)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_EMODE_CFG_LOCKTIMER_MAXCNT_EMODE_BF_WID (14)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_EMODE_CFG_LOCKTIMER_MAXCNT_EMODE_BF_MSK (0x0000FFFC)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_EMODE_CFG_LOCKTIMER_MAXCNT_EMODE_BF_DEF (0x00008B10)

///< Selects when to enter &#38;quot;locked state&#38;quot; (which starts
///< VREG tracking loop, DTR temp tracking, feed-forward gain adaptive
///< loop and min/max capture):                         0: counter based
///< lock                         1: Phase lock sticky high
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_EMODE_CFG_PLLLOCK_STATE_SEL_EMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_EMODE_CFG_PLLLOCK_STATE_SEL_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_EMODE_CFG_PLLLOCK_STATE_SEL_EMODE_BF_MSK (0x00010000)
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_EMODE_CFG_PLLLOCK_STATE_SEL_EMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_CALIB0_EMODE register description at address offset 0x364
  *
  * Register default value:        0x801FDFD1
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_calib0_emode
  * LCPLL_CALIB0 Register
  */

typedef union {
  struct {
    uint32_t CFG_COARSE_LOOP_GSCALE_MAX_EMODE : 4;
    ///< Initial DTR FLL gain value (2&#39;s complement, 2^gscale).
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t CFG_COARSE_LOOP_GSCALE_MIN_EMODE : 4;
    ///< Final DTR FLL gain value (2&#39;s complement, 2^gscale).
    ///< AccessType="RW" BitOffset="4" ResetValue="0xD"
    uint32_t CFG_COARSE_LOOP_GSCALE_CNT_MAX_EMODE : 5;
    ///< Duration (in refclk cycles) of each gain in DTR FLL.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1F"
    uint32_t CFG_DCOCOARSE_OVRDEN_EMODE : 1;
    ///< DCO DTR FLL override enable. (DTR PLL would still work as usual)
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t CFG_DCOCOARSE_OVRD_EMODE : 8;
    ///< DCO DTR FLL override value when dtr_ovrden=1.
    ///< AccessType="RW" BitOffset="14" ResetValue="0x7F"
    uint32_t CFG_BOOSTGAIN_MAXCNT_EMODE : 10;
    ///< Duration (in fbclk cycles) of each gain in PLL boost, for both DTR
    ///< and fine loops.
    ///< AccessType="RW" BitOffset="22" ResetValue="0x200"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_calib0_emode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_CALIB0_EMODE_DEFAULT (0x801fdfd1U)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_EMODE_RD_MASK (0xffffffffU)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_EMODE_WR_MASK (0xffffffffU)


///< Initial DTR FLL gain value (2&#39;s complement, 2^gscale).
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_EMODE_CFG_COARSE_LOOP_GSCALE_MAX_EMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_EMODE_CFG_COARSE_LOOP_GSCALE_MAX_EMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_EMODE_CFG_COARSE_LOOP_GSCALE_MAX_EMODE_BF_MSK (0x0000000F)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_EMODE_CFG_COARSE_LOOP_GSCALE_MAX_EMODE_BF_DEF (0x00000001)

///< Final DTR FLL gain value (2&#39;s complement, 2^gscale).
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_EMODE_CFG_COARSE_LOOP_GSCALE_MIN_EMODE_BF_OFF ( 4)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_EMODE_CFG_COARSE_LOOP_GSCALE_MIN_EMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_EMODE_CFG_COARSE_LOOP_GSCALE_MIN_EMODE_BF_MSK (0x000000F0)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_EMODE_CFG_COARSE_LOOP_GSCALE_MIN_EMODE_BF_DEF (0x000000D0)

///< Duration (in refclk cycles) of each gain in DTR FLL.
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_EMODE_CFG_COARSE_LOOP_GSCALE_CNT_MAX_EMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_EMODE_CFG_COARSE_LOOP_GSCALE_CNT_MAX_EMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_EMODE_CFG_COARSE_LOOP_GSCALE_CNT_MAX_EMODE_BF_MSK (0x00001F00)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_EMODE_CFG_COARSE_LOOP_GSCALE_CNT_MAX_EMODE_BF_DEF (0x00001F00)

///< DCO DTR FLL override enable. (DTR PLL would still work as usual)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_EMODE_CFG_DCOCOARSE_OVRDEN_EMODE_BF_OFF (13)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_EMODE_CFG_DCOCOARSE_OVRDEN_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_EMODE_CFG_DCOCOARSE_OVRDEN_EMODE_BF_MSK (0x00002000)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_EMODE_CFG_DCOCOARSE_OVRDEN_EMODE_BF_DEF (0x00000000)

///< DCO DTR FLL override value when dtr_ovrden=1.
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_EMODE_CFG_DCOCOARSE_OVRD_EMODE_BF_OFF (14)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_EMODE_CFG_DCOCOARSE_OVRD_EMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_EMODE_CFG_DCOCOARSE_OVRD_EMODE_BF_MSK (0x003FC000)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_EMODE_CFG_DCOCOARSE_OVRD_EMODE_BF_DEF (0x001FC000)

///< Duration (in fbclk cycles) of each gain in PLL boost, for both DTR
///< and fine loops.
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_EMODE_CFG_BOOSTGAIN_MAXCNT_EMODE_BF_OFF (22)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_EMODE_CFG_BOOSTGAIN_MAXCNT_EMODE_BF_WID (10)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_EMODE_CFG_BOOSTGAIN_MAXCNT_EMODE_BF_MSK (0xFFC00000)
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_EMODE_CFG_BOOSTGAIN_MAXCNT_EMODE_BF_DEF (0x80000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_CALIB1_EMODE register description at address offset 0x368
  *
  * Register default value:        0x310420C7
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_calib1_emode
  * SERDES_LANE_ANA_PLL::CALIB1
  */

typedef union {
  struct {
    uint32_t CFG_FILTER_BOOSTFADE_FINE_EN_EMODE : 1;
    ///< When 1, fine PLL boost will gradually lower to zero in steps of 1.
    ///< When 0, fine PLL boost will change from initial boost to zero at once.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t CFG_FINE_PROP_COEFF_BOOST_VAL_EMODE : 4;
    ///< Fine PLL Kp boost. Unsigned value
    ///< AccessType="RW" BitOffset="1" ResetValue="0x3"
    uint32_t CFG_FINE_INT_COEFF_BOOST_VAL_EMODE : 5;
    ///< Fine PLL Ki boost. Unsigned value
    ///< AccessType="RW" BitOffset="5" ResetValue="0x6"
    uint32_t CFG_BOOST_FINE_CONST_ZETA_EMODE : 1;
    ///< Not needed. not validated                         If set to 1, FINE
    ///< Ki boost value will be twice as big as the FINE Kp boost value.
    ///< This will ensure that the zeta (damping factor) will remain constant
    ///< during the boost phase.                         This mode can only
    ///< be used in case the Kp boost is no larger than 3.
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t CFG_FULL_RANGE_AFC_SEL_EMODE : 1;
    ///< Limit AFC code.                         0 - Limit AFC code to max
    ///< value of 319.                         1 - Full range AFC code (0 -
    ///< 511).
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t CFG_SEC_AFC_CALIB_BINARY_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::CALIB1::cfg_sec_afc_calib_binary
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t CFG_FINE_PROP_COEFF_BOOST_STEP_EMODE : 4;
    ///< FINE PLL loop proportional gain boosting decrement step size during
    ///< gradual boost.
    ///< AccessType="RW" BitOffset="13" ResetValue="0x1"
    uint32_t CFG_FINE_INT_COEFF_BOOST_STEP_EMODE : 5;
    ///< FINE PLL loop integral gain boosting decrement step size during gradual
    ///< boost.
    ///< AccessType="RW" BitOffset="17" ResetValue="0x2"
    uint32_t CFG_FINE_PROP_COEFF_EMODE : 4;
    ///< Fine Kp = 2^(-reg)
    ///< AccessType="RW" BitOffset="22" ResetValue="0x4"
    uint32_t CFG_FINE_INT_COEFF_EMODE : 5;
    ///< Fine Ki = 2^(-reg)
    ///< AccessType="RW" BitOffset="26" ResetValue="0xC"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_calib1_emode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_CALIB1_EMODE_DEFAULT (0x310420c7U)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_EMODE_RD_MASK (0x7fffffffU)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_EMODE_WR_MASK (0x7fffffffU)


///< When 1, fine PLL boost will gradually lower to zero in steps of 1.
///< When 0, fine PLL boost will change from initial boost to zero at once.
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_EMODE_CFG_FILTER_BOOSTFADE_FINE_EN_EMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_EMODE_CFG_FILTER_BOOSTFADE_FINE_EN_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_EMODE_CFG_FILTER_BOOSTFADE_FINE_EN_EMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_EMODE_CFG_FILTER_BOOSTFADE_FINE_EN_EMODE_BF_DEF (0x00000001)

///< Fine PLL Kp boost. Unsigned value
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_EMODE_CFG_FINE_PROP_COEFF_BOOST_VAL_EMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_EMODE_CFG_FINE_PROP_COEFF_BOOST_VAL_EMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_EMODE_CFG_FINE_PROP_COEFF_BOOST_VAL_EMODE_BF_MSK (0x0000001E)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_EMODE_CFG_FINE_PROP_COEFF_BOOST_VAL_EMODE_BF_DEF (0x00000006)

///< Fine PLL Ki boost. Unsigned value
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_EMODE_CFG_FINE_INT_COEFF_BOOST_VAL_EMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_EMODE_CFG_FINE_INT_COEFF_BOOST_VAL_EMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_EMODE_CFG_FINE_INT_COEFF_BOOST_VAL_EMODE_BF_MSK (0x000003E0)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_EMODE_CFG_FINE_INT_COEFF_BOOST_VAL_EMODE_BF_DEF (0x000000C0)

///< Not needed. not validated                         If set to 1, FINE
///< Ki boost value will be twice as big as the FINE Kp boost value.
///< This will ensure that the zeta (damping factor) will remain constant
///< during the boost phase.                         This mode can only
///< be used in case the Kp boost is no larger than 3.
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_EMODE_CFG_BOOST_FINE_CONST_ZETA_EMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_EMODE_CFG_BOOST_FINE_CONST_ZETA_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_EMODE_CFG_BOOST_FINE_CONST_ZETA_EMODE_BF_MSK (0x00000400)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_EMODE_CFG_BOOST_FINE_CONST_ZETA_EMODE_BF_DEF (0x00000000)

///< Limit AFC code.                         0 - Limit AFC code to max
///< value of 319.                         1 - Full range AFC code (0 -
///< 511).
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_EMODE_CFG_FULL_RANGE_AFC_SEL_EMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_EMODE_CFG_FULL_RANGE_AFC_SEL_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_EMODE_CFG_FULL_RANGE_AFC_SEL_EMODE_BF_MSK (0x00000800)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_EMODE_CFG_FULL_RANGE_AFC_SEL_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::CALIB1::cfg_sec_afc_calib_binary
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_EMODE_CFG_SEC_AFC_CALIB_BINARY_EMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_EMODE_CFG_SEC_AFC_CALIB_BINARY_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_EMODE_CFG_SEC_AFC_CALIB_BINARY_EMODE_BF_MSK (0x00001000)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_EMODE_CFG_SEC_AFC_CALIB_BINARY_EMODE_BF_DEF (0x00000000)

///< FINE PLL loop proportional gain boosting decrement step size during
///< gradual boost.
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_EMODE_CFG_FINE_PROP_COEFF_BOOST_STEP_EMODE_BF_OFF (13)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_EMODE_CFG_FINE_PROP_COEFF_BOOST_STEP_EMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_EMODE_CFG_FINE_PROP_COEFF_BOOST_STEP_EMODE_BF_MSK (0x0001E000)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_EMODE_CFG_FINE_PROP_COEFF_BOOST_STEP_EMODE_BF_DEF (0x00002000)

///< FINE PLL loop integral gain boosting decrement step size during gradual
///< boost.
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_EMODE_CFG_FINE_INT_COEFF_BOOST_STEP_EMODE_BF_OFF (17)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_EMODE_CFG_FINE_INT_COEFF_BOOST_STEP_EMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_EMODE_CFG_FINE_INT_COEFF_BOOST_STEP_EMODE_BF_MSK (0x003E0000)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_EMODE_CFG_FINE_INT_COEFF_BOOST_STEP_EMODE_BF_DEF (0x00040000)

///< Fine Kp = 2^(-reg)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_EMODE_CFG_FINE_PROP_COEFF_EMODE_BF_OFF (22)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_EMODE_CFG_FINE_PROP_COEFF_EMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_EMODE_CFG_FINE_PROP_COEFF_EMODE_BF_MSK (0x03C00000)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_EMODE_CFG_FINE_PROP_COEFF_EMODE_BF_DEF (0x01000000)

///< Fine Ki = 2^(-reg)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_EMODE_CFG_FINE_INT_COEFF_EMODE_BF_OFF (26)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_EMODE_CFG_FINE_INT_COEFF_EMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_EMODE_CFG_FINE_INT_COEFF_EMODE_BF_MSK (0x7C000000)
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_EMODE_CFG_FINE_INT_COEFF_EMODE_BF_DEF (0x30000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_CALIB2_EMODE register description at address offset 0x36c
  *
  * Register default value:        0x00013812
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_calib2_emode
  * SERDES_LANE_ANA_PLL::CALIB2
  */

typedef union {
  struct {
    uint32_t CFG_TDCBBPD_EN_EMODE : 1;
    ///< Switches TDC into bang-bang mode, based on timer (cfg_tdcbbpd_cnt_limit).
    ///< If enabled, cfg_tdc_ladder_min register must be configured to 1 or
    ///< greater.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_TDCBBPD_CNT_LIMIT_EMODE : 4;
    ///< Determines the number of refclk cycles from lock timer done until
    ///< TDC turns into bang-bang mode: 2 ^ cfg_tdcbbpd_cnt_limit.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x9"
    uint32_t CFG_GAINCAL_UPDATE_RATE_EMODE : 4;
    ///< This field sets the rate of adaptive feed-forward gain.
    ///< Every time the modulated feedback divider ratio is 0.5 or more away
    ///< from the target                          ratio (with frac code), the
    ///< feed-forward gain loop checks the amount of change in
    ///< TDC effective (after feed-forward cancelation) and based on the sign
    ///< of that change                          it would increment/decrement
    ///< the feed-forward gain.                          Then this register
    ///< determines every how many adaptive-ffgain checks the gain will
    ///< actually be updated. This technique could be useful if ratio is around
    ///< 0.5, to avoid                          too frequent gain updates (which
    ///< could cause stability problems in the loop).
    ///< The adaptive ffgain loop will react every 2 ^ cfg_gaincal_update_rate
    ///< gain checks
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t CFG_REFCLK_CYCLES_PER_1US_MAXCNT_EMODE : 8;
    ///< This signal defines the number of refclk cycles that fit in 1us.
    ///< Used in VREG loop in steady-state, such that whenever DAC code is
    ///< updated, we wait some time based on this counter before start sensing
    ///< the comparator.                         Could be used potentially
    ///< in the future for other timers as well.                         Use
    ///< the following formula:                         Frefclk x 1usec
    ///< AccessType="RW" BitOffset="9" ResetValue="0x9C"
    uint32_t CFG_SCOVRDEN_EMODE : 1;
    ///< Super coarse overwrite enable.
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t CFG_SCOVRD_EMODE : 4;
    ///< Super coarse overwrite value.
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_calib2_emode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_CALIB2_EMODE_DEFAULT (0x00013812U)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_EMODE_RD_MASK (0x003fffffU)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_EMODE_WR_MASK (0x003fffffU)


///< Switches TDC into bang-bang mode, based on timer (cfg_tdcbbpd_cnt_limit).
///< If enabled, cfg_tdc_ladder_min register must be configured to 1 or
///< greater.
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_EMODE_CFG_TDCBBPD_EN_EMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_EMODE_CFG_TDCBBPD_EN_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_EMODE_CFG_TDCBBPD_EN_EMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_EMODE_CFG_TDCBBPD_EN_EMODE_BF_DEF (0x00000000)

///< Determines the number of refclk cycles from lock timer done until
///< TDC turns into bang-bang mode: 2 ^ cfg_tdcbbpd_cnt_limit.
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_EMODE_CFG_TDCBBPD_CNT_LIMIT_EMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_EMODE_CFG_TDCBBPD_CNT_LIMIT_EMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_EMODE_CFG_TDCBBPD_CNT_LIMIT_EMODE_BF_MSK (0x0000001E)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_EMODE_CFG_TDCBBPD_CNT_LIMIT_EMODE_BF_DEF (0x00000012)

///< This field sets the rate of adaptive feed-forward gain.
///< Every time the modulated feedback divider ratio is 0.5 or more away
///< from the target                          ratio (with frac code), the
///< feed-forward gain loop checks the amount of change in
///< TDC effective (after feed-forward cancelation) and based on the sign
///< of that change                          it would increment/decrement
///< the feed-forward gain.                          Then this register
///< determines every how many adaptive-ffgain checks the gain will
///< actually be updated. This technique could be useful if ratio is around
///< 0.5, to avoid                          too frequent gain updates (which
///< could cause stability problems in the loop).
///< The adaptive ffgain loop will react every 2 ^ cfg_gaincal_update_rate
///< gain checks
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_EMODE_CFG_GAINCAL_UPDATE_RATE_EMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_EMODE_CFG_GAINCAL_UPDATE_RATE_EMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_EMODE_CFG_GAINCAL_UPDATE_RATE_EMODE_BF_MSK (0x000001E0)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_EMODE_CFG_GAINCAL_UPDATE_RATE_EMODE_BF_DEF (0x00000000)

///< This signal defines the number of refclk cycles that fit in 1us.
///< Used in VREG loop in steady-state, such that whenever DAC code is
///< updated, we wait some time based on this counter before start sensing
///< the comparator.                         Could be used potentially
///< in the future for other timers as well.                         Use
///< the following formula:                         Frefclk x 1usec
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_EMODE_CFG_REFCLK_CYCLES_PER_1US_MAXCNT_EMODE_BF_OFF ( 9)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_EMODE_CFG_REFCLK_CYCLES_PER_1US_MAXCNT_EMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_EMODE_CFG_REFCLK_CYCLES_PER_1US_MAXCNT_EMODE_BF_MSK (0x0001FE00)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_EMODE_CFG_REFCLK_CYCLES_PER_1US_MAXCNT_EMODE_BF_DEF (0x00013800)

///< Super coarse overwrite enable.
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_EMODE_CFG_SCOVRDEN_EMODE_BF_OFF (17)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_EMODE_CFG_SCOVRDEN_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_EMODE_CFG_SCOVRDEN_EMODE_BF_MSK (0x00020000)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_EMODE_CFG_SCOVRDEN_EMODE_BF_DEF (0x00000000)

///< Super coarse overwrite value.
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_EMODE_CFG_SCOVRD_EMODE_BF_OFF (18)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_EMODE_CFG_SCOVRD_EMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_EMODE_CFG_SCOVRD_EMODE_BF_MSK (0x003C0000)
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_EMODE_CFG_SCOVRD_EMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_PLL_FSM_CONTROL_EMODE register description at address offset 0x370
  *
  * Register default value:        0x0000020E
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_pll_fsm_control_emode
  * SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL
  */

typedef union {
  struct {
    uint32_t CFG_DCOSETTLE_MODE_EMODE : 1;
    ///< Settling time exit mode. VREG calibration and all rest of PLL FSM
    ///< would start only after DCO has settle                         &#39;1&#39;:
    ///< fbclk detected                         &#39;0&#39;: timer
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_DCOSETTLE_TIME_EMODE : 4;
    ///< DCO settling time timer (cfg_dcosettle_mode=0).
    ///< refclk cycles = 2^reg
    ///< AccessType="RW" BitOffset="1" ResetValue="0x7"
    uint32_t CFG_SKIP_STDC_CALIB_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_stdc_calib
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t CFG_STAY_STDC_CALIB_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_stdc_calib
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t CFG_SKIP_VTDC_CALIB_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_vtdc_calib
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t CFG_STAY_VTDC_CALIB_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_vtdc_calib
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CFG_SKIP_SC_CALIB_EMODE : 1;
    ///< Skip the sc calib.
    ///< AccessType="RW" BitOffset="9" ResetValue="0x1"
    uint32_t CFG_STAY_SC_CALIB_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_sc_calib
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t CFG_SKIP_FIRST_AFC_CALIB_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_first_afc_calib
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t CFG_STAY_FIRST_AFC_CALIB_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_first_afc_calib
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t CFG_SKIP_DCO_SWING_CALIB_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_dco_swing_calib
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t CFG_STAY_DCO_SWING_CALIB_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_dco_swing_calib
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t CFG_SKIP_KVCC_CALIB_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_kvcc_calib
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t CFG_STAY_KVCC_CALIB_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_kvcc_calib
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t CFG_SKIP_SECOND_AFC_CALIB_EMODE : 1;
    ///< If set to 1, the PLL will only run one afc calibration before kvcc
    ///< calibration                         If set to 0, the PLL will run
    ///< the AFC calibration for the second time after kvcc calibration ends.
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t CFG_STAY_SECOND_AFC_CALIB_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_second_afc_calib
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t CFG_SKIP_FINE_FLL_CALIB_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_fine_fll_calib
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t CFG_STAY_FINE_FLL_CALIB_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_fine_fll_calib
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_pll_fsm_ctrl_emode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_DEFAULT (0x0000020eU)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_RD_MASK (0x001fffffU)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_WR_MASK (0x001fffffU)


///< Settling time exit mode. VREG calibration and all rest of PLL FSM
///< would start only after DCO has settle                         &#39;1&#39;:
///< fbclk detected                         &#39;0&#39;: timer
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_DCOSETTLE_MODE_EMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_DCOSETTLE_MODE_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_DCOSETTLE_MODE_EMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_DCOSETTLE_MODE_EMODE_BF_DEF (0x00000000)

///< DCO settling time timer (cfg_dcosettle_mode=0).
///< refclk cycles = 2^reg
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_DCOSETTLE_TIME_EMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_DCOSETTLE_TIME_EMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_DCOSETTLE_TIME_EMODE_BF_MSK (0x0000001E)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_DCOSETTLE_TIME_EMODE_BF_DEF (0x0000000E)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_stdc_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_SKIP_STDC_CALIB_EMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_SKIP_STDC_CALIB_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_SKIP_STDC_CALIB_EMODE_BF_MSK (0x00000020)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_SKIP_STDC_CALIB_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_stdc_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_STAY_STDC_CALIB_EMODE_BF_OFF ( 6)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_STAY_STDC_CALIB_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_STAY_STDC_CALIB_EMODE_BF_MSK (0x00000040)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_STAY_STDC_CALIB_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_vtdc_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_SKIP_VTDC_CALIB_EMODE_BF_OFF ( 7)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_SKIP_VTDC_CALIB_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_SKIP_VTDC_CALIB_EMODE_BF_MSK (0x00000080)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_SKIP_VTDC_CALIB_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_vtdc_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_STAY_VTDC_CALIB_EMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_STAY_VTDC_CALIB_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_STAY_VTDC_CALIB_EMODE_BF_MSK (0x00000100)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_STAY_VTDC_CALIB_EMODE_BF_DEF (0x00000000)

///< Skip the sc calib.
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_SKIP_SC_CALIB_EMODE_BF_OFF ( 9)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_SKIP_SC_CALIB_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_SKIP_SC_CALIB_EMODE_BF_MSK (0x00000200)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_SKIP_SC_CALIB_EMODE_BF_DEF (0x00000200)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_sc_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_STAY_SC_CALIB_EMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_STAY_SC_CALIB_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_STAY_SC_CALIB_EMODE_BF_MSK (0x00000400)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_STAY_SC_CALIB_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_first_afc_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_SKIP_FIRST_AFC_CALIB_EMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_SKIP_FIRST_AFC_CALIB_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_SKIP_FIRST_AFC_CALIB_EMODE_BF_MSK (0x00000800)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_SKIP_FIRST_AFC_CALIB_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_first_afc_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_STAY_FIRST_AFC_CALIB_EMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_STAY_FIRST_AFC_CALIB_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_STAY_FIRST_AFC_CALIB_EMODE_BF_MSK (0x00001000)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_STAY_FIRST_AFC_CALIB_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_dco_swing_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_SKIP_DCO_SWING_CALIB_EMODE_BF_OFF (13)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_SKIP_DCO_SWING_CALIB_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_SKIP_DCO_SWING_CALIB_EMODE_BF_MSK (0x00002000)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_SKIP_DCO_SWING_CALIB_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_dco_swing_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_STAY_DCO_SWING_CALIB_EMODE_BF_OFF (14)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_STAY_DCO_SWING_CALIB_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_STAY_DCO_SWING_CALIB_EMODE_BF_MSK (0x00004000)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_STAY_DCO_SWING_CALIB_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_kvcc_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_SKIP_KVCC_CALIB_EMODE_BF_OFF (15)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_SKIP_KVCC_CALIB_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_SKIP_KVCC_CALIB_EMODE_BF_MSK (0x00008000)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_SKIP_KVCC_CALIB_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_kvcc_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_STAY_KVCC_CALIB_EMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_STAY_KVCC_CALIB_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_STAY_KVCC_CALIB_EMODE_BF_MSK (0x00010000)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_STAY_KVCC_CALIB_EMODE_BF_DEF (0x00000000)

///< If set to 1, the PLL will only run one afc calibration before kvcc
///< calibration                         If set to 0, the PLL will run
///< the AFC calibration for the second time after kvcc calibration ends.
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_SKIP_SECOND_AFC_CALIB_EMODE_BF_OFF (17)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_SKIP_SECOND_AFC_CALIB_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_SKIP_SECOND_AFC_CALIB_EMODE_BF_MSK (0x00020000)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_SKIP_SECOND_AFC_CALIB_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_second_afc_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_STAY_SECOND_AFC_CALIB_EMODE_BF_OFF (18)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_STAY_SECOND_AFC_CALIB_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_STAY_SECOND_AFC_CALIB_EMODE_BF_MSK (0x00040000)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_STAY_SECOND_AFC_CALIB_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_skip_fine_fll_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_SKIP_FINE_FLL_CALIB_EMODE_BF_OFF (19)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_SKIP_FINE_FLL_CALIB_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_SKIP_FINE_FLL_CALIB_EMODE_BF_MSK (0x00080000)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_SKIP_FINE_FLL_CALIB_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::PLL_FSM_CONTROL::cfg_stay_fine_fll_calib
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_STAY_FINE_FLL_CALIB_EMODE_BF_OFF (20)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_STAY_FINE_FLL_CALIB_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_STAY_FINE_FLL_CALIB_EMODE_BF_MSK (0x00100000)
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_CFG_STAY_FINE_FLL_CALIB_EMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_TEMP_TRACKING_EMODE register description at address offset 0x374
  *
  * Register default value:        0x00000027
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_temp_tracking_emode
  * SERDES_LANE_ANA_PLL::TEMP_TRACKING
  */

typedef union {
  struct {
    uint32_t CFG_TEMP_TRACK_EN_EMODE : 1;
    ///< Enable signal for the FINE and DTR temperature tracking feature.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t CFG_FINE2DTR_RATIO_EMODE : 6;
    ///< Sets the ratio between DTR cap and fine cap. Required for DTR temp
    ///< tracking.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x13"
    uint32_t CFG_SSC_TRACK_EN_EMODE : 1;
    ///< Set this to &#39;1&#39; for SSC&#39;ed refclk to enable fast cap-swap
    ///< during boost mode.
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_temp_tracking_emode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_EMODE_DEFAULT (0x00000027U)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_EMODE_RD_MASK (0x000000ffU)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_EMODE_WR_MASK (0x000000ffU)


///< Enable signal for the FINE and DTR temperature tracking feature.
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_EMODE_CFG_TEMP_TRACK_EN_EMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_EMODE_CFG_TEMP_TRACK_EN_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_EMODE_CFG_TEMP_TRACK_EN_EMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_EMODE_CFG_TEMP_TRACK_EN_EMODE_BF_DEF (0x00000001)

///< Sets the ratio between DTR cap and fine cap. Required for DTR temp
///< tracking.
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_EMODE_CFG_FINE2DTR_RATIO_EMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_EMODE_CFG_FINE2DTR_RATIO_EMODE_BF_WID ( 6)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_EMODE_CFG_FINE2DTR_RATIO_EMODE_BF_MSK (0x0000007E)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_EMODE_CFG_FINE2DTR_RATIO_EMODE_BF_DEF (0x00000026)

///< Set this to &#39;1&#39; for SSC&#39;ed refclk to enable fast cap-swap
///< during boost mode.
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_EMODE_CFG_SSC_TRACK_EN_EMODE_BF_OFF ( 7)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_EMODE_CFG_SSC_TRACK_EN_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_EMODE_CFG_SSC_TRACK_EN_EMODE_BF_MSK (0x00000080)
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_EMODE_CFG_SSC_TRACK_EN_EMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_ANA_CONTROL1_EMODE register description at address offset 0x378
  *
  * Register default value:        0x00000452
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_ana_control1_emode
  * LCPLL_ANA_CONTROL Register
  */

typedef union {
  struct {
    uint32_t CFG_PLL_BYPASS_EMODE : 1;
    ///< When 1, the following output clocks will drive out the input refclk
    ///< (after prediv). Relevant to common PLL only.
    ///< 100MHz refclk                         156.25MHz refclk
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_SDDIV_EN_EMODE : 1;
    ///< Ungates dco/2 clock that goes into filter&#39;s SD post divider.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x1"
    uint32_t CFG_SDDIV_RATIO_EMODE : 3;
    ///< Sets Fine and DTR SD clock division ratio, from 1 to 5. Input clock
    ///< is dco/2 so possible ratios are 2,4,6,8,10.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x4"
    uint32_t CFG_SD2F0_CLK_SEL_EMODE : 1;
    ///< Sets DTR SD clock division ratio:                         0 - fine
    ///< SD clock                         1 - fine SD clock further divided
    ///< by 2
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t CFG_PREDIV_RATIO_EMODE : 4;
    ///< Refclk pre-divider ratio, from 1 to 5, relevant only to lane PLL where
    ///< refclksel pin is tied to 0.
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t CFG_REFCLK4LANEDIV_EN_EMODE : 1;
    ///< Ungates dco/2 clock that goes into refclk156div post divider.
    ///< 1 - common PLL                         0 - lane PLL
    ///< AccessType="RW" BitOffset="10" ResetValue="0x1"
    uint32_t CFG_FBDIV_ENB_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL1::cfg_fbdiv_enb
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t CFG_DCODIV2_EN_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL1::cfg_dcodiv2_en
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
    uint32_t CFG_HSMON0_SEL_EMODE : 4;
    ///< Select signal for obsmux0:                         0: vss
    ///< 1: iclk_int_refclk                         2: o_fbclk2obs_clk
    ///< 3: iclk_dco_divby2                         4: iclk_dco_divby5
    ///< 5: a2f_lv_0p9_2obs                         6: vss
    ///< 7: cbdiv56_lanediv32_clk                         8: clk_to_pcs40_clk
    ///< 9: clk_to_pcs33_34_clk                         A: o_sd_dtr_clk
    ///< B: o_sd_fine_clk                         C: ock_a2f_lv_ldo
    ///< D: otdc_calib_clk                         E: i_plllock
    ///< F: i_visa8to1_2obs
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t CFG_HSMON0_40INV_EN_EMODE : 1;
    ///< When 0, selected signal on hsmon0 is further delayed by 40 inverters.
    ///< This is to analyze thermal noise and supply noise jitter
    ///< Note that lately we found that this mode is set when this reg is set
    ///< to 0 (rather than 1 as previously thought)
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t CFG_HSMON1_SEL_EMODE : 4;
    ///< Select signal for obsmux1. Same signals as in obsmux0.
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t CFG_HSMON1_40INV_EN_EMODE : 1;
    ///< When 0, selected signal on hsmon1 is further delayed by 40 inverters.
    ///< This is to analyze thermal noise and supply noise jitter
    ///< Note that lately we found that this mode is set when this reg is set
    ///< to 0 (rather than 1 as previously thought)
    ///< AccessType="RW" BitOffset="25" ResetValue="0x0"
    uint32_t CFG_CLK2POSTDIV_DIV2_SEL_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL1::cfg_clk2postdiv_div2_sel
    ///< AccessType="RW" BitOffset="26" ResetValue="0x0"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="27" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_ana_ctrl1_emode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_DEFAULT (0x00000452U)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_RD_MASK (0x07ff1fffU)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_WR_MASK (0x07ff1fffU)


///< When 1, the following output clocks will drive out the input refclk
///< (after prediv). Relevant to common PLL only.
///< 100MHz refclk                         156.25MHz refclk
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_CFG_PLL_BYP_EMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_CFG_PLL_BYP_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_CFG_PLL_BYP_EMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_CFG_PLL_BYP_EMODE_BF_DEF (0x00000000)

///< Ungates dco/2 clock that goes into filter&#39;s SD post divider.
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_CFG_SDDIV_EN_EMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_CFG_SDDIV_EN_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_CFG_SDDIV_EN_EMODE_BF_MSK (0x00000002)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_CFG_SDDIV_EN_EMODE_BF_DEF (0x00000002)

///< Sets Fine and DTR SD clock division ratio, from 1 to 5. Input clock
///< is dco/2 so possible ratios are 2,4,6,8,10.
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_CFG_SDDIV_RATIO_EMODE_BF_OFF ( 2)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_CFG_SDDIV_RATIO_EMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_CFG_SDDIV_RATIO_EMODE_BF_MSK (0x0000001C)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_CFG_SDDIV_RATIO_EMODE_BF_DEF (0x00000010)

///< Sets DTR SD clock division ratio:                         0 - fine
///< SD clock                         1 - fine SD clock further divided
///< by 2
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_CFG_SD2F0_CLK_SEL_EMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_CFG_SD2F0_CLK_SEL_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_CFG_SD2F0_CLK_SEL_EMODE_BF_MSK (0x00000020)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_CFG_SD2F0_CLK_SEL_EMODE_BF_DEF (0x00000000)

///< Refclk pre-divider ratio, from 1 to 5, relevant only to lane PLL where
///< refclksel pin is tied to 0.
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_CFG_PREDIV_RATIO_EMODE_BF_OFF ( 6)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_CFG_PREDIV_RATIO_EMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_CFG_PREDIV_RATIO_EMODE_BF_MSK (0x000003C0)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_CFG_PREDIV_RATIO_EMODE_BF_DEF (0x00000040)

///< Ungates dco/2 clock that goes into refclk156div post divider.
///< 1 - common PLL                         0 - lane PLL
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_CFG_REFCLK4LANEDIV_EN_EMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_CFG_REFCLK4LANEDIV_EN_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_CFG_REFCLK4LANEDIV_EN_EMODE_BF_MSK (0x00000400)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_CFG_REFCLK4LANEDIV_EN_EMODE_BF_DEF (0x00000400)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL1::cfg_fbdiv_enb
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_CFG_FBDIV_ENB_EMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_CFG_FBDIV_ENB_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_CFG_FBDIV_ENB_EMODE_BF_MSK (0x00000800)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_CFG_FBDIV_ENB_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL1::cfg_dcodiv2_en
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_CFG_DCODIV2_EN_EMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_CFG_DCODIV2_EN_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_CFG_DCODIV2_EN_EMODE_BF_MSK (0x00001000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_CFG_DCODIV2_EN_EMODE_BF_DEF (0x00000000)

///< Select signal for obsmux0:                         0: vss
///< 1: iclk_int_refclk                         2: o_fbclk2obs_clk
///< 3: iclk_dco_divby2                         4: iclk_dco_divby5
///< 5: a2f_lv_0p9_2obs                         6: vss
///< 7: cbdiv56_lanediv32_clk                         8: clk_to_pcs40_clk
///< 9: clk_to_pcs33_34_clk                         A: o_sd_dtr_clk
///< B: o_sd_fine_clk                         C: ock_a2f_lv_ldo
///< D: otdc_calib_clk                         E: i_plllock
///< F: i_visa8to1_2obs
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_CFG_HSMON0_SEL_EMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_CFG_HSMON0_SEL_EMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_CFG_HSMON0_SEL_EMODE_BF_MSK (0x000F0000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_CFG_HSMON0_SEL_EMODE_BF_DEF (0x00000000)

///< When 0, selected signal on hsmon0 is further delayed by 40 inverters.
///< This is to analyze thermal noise and supply noise jitter
///< Note that lately we found that this mode is set when this reg is set
///< to 0 (rather than 1 as previously thought)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_CFG_HSMON0_40INV_EN_EMODE_BF_OFF (20)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_CFG_HSMON0_40INV_EN_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_CFG_HSMON0_40INV_EN_EMODE_BF_MSK (0x00100000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_CFG_HSMON0_40INV_EN_EMODE_BF_DEF (0x00000000)

///< Select signal for obsmux1. Same signals as in obsmux0.
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_CFG_HSMON1_SEL_EMODE_BF_OFF (21)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_CFG_HSMON1_SEL_EMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_CFG_HSMON1_SEL_EMODE_BF_MSK (0x01E00000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_CFG_HSMON1_SEL_EMODE_BF_DEF (0x00000000)

///< When 0, selected signal on hsmon1 is further delayed by 40 inverters.
///< This is to analyze thermal noise and supply noise jitter
///< Note that lately we found that this mode is set when this reg is set
///< to 0 (rather than 1 as previously thought)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_CFG_HSMON1_40INV_EN_EMODE_BF_OFF (25)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_CFG_HSMON1_40INV_EN_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_CFG_HSMON1_40INV_EN_EMODE_BF_MSK (0x02000000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_CFG_HSMON1_40INV_EN_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL1::cfg_clk2postdiv_div2_sel
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_CFG_CLK2POSTDIV_DIV2_SEL_EMODE_BF_OFF (26)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_CFG_CLK2POSTDIV_DIV2_SEL_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_CFG_CLK2POSTDIV_DIV2_SEL_EMODE_BF_MSK (0x04000000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_CFG_CLK2POSTDIV_DIV2_SEL_EMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_ANA_CONTROL2_EMODE register description at address offset 0x37c
  *
  * Register default value:        0x000080A0
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_ana_control2_emode
  * SERDES_LANE_ANA_PLL::ANA_CONTROL2
  */

typedef union {
  struct {
    uint32_t CFG_REFCLK_SEL_EMODE : 1;
    ///< Relevant only if id_pll_refclksel[2:0] (on PLL interface) is set to
    ///< 3&#39;b0.                         Selects the refclk source for the
    ///< PLL:                         3&#39;h0 : vss
    ///< 3&#39;h1 : ref_clk_1                         3&#39;h2 : ref_clk_2
    ///< 3&#39;h3 : ref_clk_3                         3&#39;h4 : ref_clk_4
    ///< 3&#39;h5 : ref_clk_5                         3&#39;h6 : vss
    ///< 3&#39;h7 : vss
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_REFCLK4LANE_DIVRATIO_EMODE : 10;
    ///< Division ratio for refclk156 post divider (input clock is dco).
    ///< AccessType="RW" BitOffset="1" ResetValue="0x50"
    uint32_t CFG_A2F_CLKREG_EN_EMODE : 1;
    ///< Enables A2F.                         A2F are used to measure internal
    ///< supply noise.
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t CFG_A2F_CLKUNREG_EN_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL2::cfg_a2f_clkunreg_en
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t CFG_A2F_LDO_DCO_EN_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL2::cfg_a2f_ldo_dco_en
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t CFG_BTI_EN_EMODE : 1;
    ///< BTI clock gate signal. By default, whenever PLL is off, BTI clock
    ///< drives DCO clock distribution to prevent assymetric Aging. Setting
    ///< this register to &#39;1&#39; will gate BTI clock.
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t CFG_DCO_ACBUF2TX_EN_EMODE : 1;
    ///< Used as LDO enable.                         Gated by pll enable.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x1"
    uint32_t CFG_HSCNTR_HSCLK_SEL_OVR_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL2::cfg_hscntr_hsclk_sel_ovr
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t CFG_HSCNTR_HSCLK_SEL_OVR_VAL_EMODE : 3;
    ///< High speed counter (hscnter) input.                         &#39;0&#39;
    ///< - input from DCO/4 (default)                         &#39;1&#39; -
    ///< A2F_ldo clock is routed to high speed counter, allowing measurement
    ///< of A2F frequency in HVM (like in IDV)                         &#39;2&#39;
    ///< - A2F_lv clock is routed to high speed counter, allowing measurement
    ///< of A2F frequency in HVM (like in IDV)                         &#39;3&#39;
    ///< - vss
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t CFG_PLL_REFCLK_HSMODE_SEL_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL2::cfg_pll_refclk_hsmode_sel
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_ana_ctrl2_emode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_EMODE_DEFAULT (0x000080a0U)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_EMODE_RD_MASK (0x001fffffU)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_EMODE_WR_MASK (0x001fffffU)


///< Relevant only if id_pll_refclksel[2:0] (on PLL interface) is set to
///< 3&#39;b0.                         Selects the refclk source for the
///< PLL:                         3&#39;h0 : vss
///< 3&#39;h1 : ref_clk_1                         3&#39;h2 : ref_clk_2
///< 3&#39;h3 : ref_clk_3                         3&#39;h4 : ref_clk_4
///< 3&#39;h5 : ref_clk_5                         3&#39;h6 : vss
///< 3&#39;h7 : vss
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_EMODE_CFG_REFCLK_SEL_EMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_EMODE_CFG_REFCLK_SEL_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_EMODE_CFG_REFCLK_SEL_EMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_EMODE_CFG_REFCLK_SEL_EMODE_BF_DEF (0x00000000)

///< Division ratio for refclk156 post divider (input clock is dco).
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_EMODE_CFG_REFCLK4LANE_DIVRATIO_EMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_EMODE_CFG_REFCLK4LANE_DIVRATIO_EMODE_BF_WID (10)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_EMODE_CFG_REFCLK4LANE_DIVRATIO_EMODE_BF_MSK (0x000007FE)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_EMODE_CFG_REFCLK4LANE_DIVRATIO_EMODE_BF_DEF (0x000000A0)

///< Enables A2F.                         A2F are used to measure internal
///< supply noise.
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_EMODE_CFG_A2F_CLKREG_EN_EMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_EMODE_CFG_A2F_CLKREG_EN_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_EMODE_CFG_A2F_CLKREG_EN_EMODE_BF_MSK (0x00000800)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_EMODE_CFG_A2F_CLKREG_EN_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL2::cfg_a2f_clkunreg_en
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_EMODE_CFG_A2F_CLKUNREG_EN_EMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_EMODE_CFG_A2F_CLKUNREG_EN_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_EMODE_CFG_A2F_CLKUNREG_EN_EMODE_BF_MSK (0x00001000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_EMODE_CFG_A2F_CLKUNREG_EN_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL2::cfg_a2f_ldo_dco_en
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_EMODE_CFG_A2F_LDO_DCO_EN_EMODE_BF_OFF (13)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_EMODE_CFG_A2F_LDO_DCO_EN_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_EMODE_CFG_A2F_LDO_DCO_EN_EMODE_BF_MSK (0x00002000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_EMODE_CFG_A2F_LDO_DCO_EN_EMODE_BF_DEF (0x00000000)

///< BTI clock gate signal. By default, whenever PLL is off, BTI clock
///< drives DCO clock distribution to prevent assymetric Aging. Setting
///< this register to &#39;1&#39; will gate BTI clock.
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_EMODE_CFG_BTI_EN_EMODE_BF_OFF (14)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_EMODE_CFG_BTI_EN_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_EMODE_CFG_BTI_EN_EMODE_BF_MSK (0x00004000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_EMODE_CFG_BTI_EN_EMODE_BF_DEF (0x00000000)

///< Used as LDO enable.                         Gated by pll enable.
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_EMODE_CFG_DCO_ACBUF2TX_EN_EMODE_BF_OFF (15)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_EMODE_CFG_DCO_ACBUF2TX_EN_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_EMODE_CFG_DCO_ACBUF2TX_EN_EMODE_BF_MSK (0x00008000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_EMODE_CFG_DCO_ACBUF2TX_EN_EMODE_BF_DEF (0x00008000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL2::cfg_hscntr_hsclk_sel_ovr
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_EMODE_CFG_HSCNTR_HSCLK_SEL_OVR_EMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_EMODE_CFG_HSCNTR_HSCLK_SEL_OVR_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_EMODE_CFG_HSCNTR_HSCLK_SEL_OVR_EMODE_BF_MSK (0x00010000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_EMODE_CFG_HSCNTR_HSCLK_SEL_OVR_EMODE_BF_DEF (0x00000000)

///< High speed counter (hscnter) input.                         &#39;0&#39;
///< - input from DCO/4 (default)                         &#39;1&#39; -
///< A2F_ldo clock is routed to high speed counter, allowing measurement
///< of A2F frequency in HVM (like in IDV)                         &#39;2&#39;
///< - A2F_lv clock is routed to high speed counter, allowing measurement
///< of A2F frequency in HVM (like in IDV)                         &#39;3&#39;
///< - vss
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_EMODE_CFG_HSCNTR_HSCLK_SEL_OVR_VAL_EMODE_BF_OFF (17)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_EMODE_CFG_HSCNTR_HSCLK_SEL_OVR_VAL_EMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_EMODE_CFG_HSCNTR_HSCLK_SEL_OVR_VAL_EMODE_BF_MSK (0x000E0000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_EMODE_CFG_HSCNTR_HSCLK_SEL_OVR_VAL_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL2::cfg_pll_refclk_hsmode_sel
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_EMODE_CFG_PLL_REFCLK_HSMODE_SEL_EMODE_BF_OFF (20)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_EMODE_CFG_PLL_REFCLK_HSMODE_SEL_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_EMODE_CFG_PLL_REFCLK_HSMODE_SEL_EMODE_BF_MSK (0x00100000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_EMODE_CFG_PLL_REFCLK_HSMODE_SEL_EMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_ANA_CONTROL3_EMODE register description at address offset 0x380
  *
  * Register default value:        0x00A00001
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_ana_control3_emode
  * SERDES_LANE_ANA_PLL::ANA_CONTROL3
  */

typedef union {
  struct {
    uint32_t CFG_PKSEN_EN_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_en
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t CFG_PKSEN_COMP_EMODE : 4;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_comp
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t CFG_PKSEN_COMP_EN_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_comp_en
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t CFG_PKSEN_COMP_INN_SEL_EMODE : 2;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_comp_inn_sel
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t CFG_PKSEN_COMP_INP_SEL_EMODE : 2;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_comp_inp_sel
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CFG_PKSEN_COMP_VREF_VAL_EMODE : 6;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_comp_vref_val
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t CFG_PKSEN_VREF_SEL_EMODE : 6;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_vref_sel
    ///< AccessType="RW" BitOffset="16" ResetValue="0x20"
    uint32_t CFG_LDO_PKSEN_BYP_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_ldo_pksen_byp
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t CFG_PKSEN_RES_BYPB_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_res_bypb
    ///< AccessType="RW" BitOffset="23" ResetValue="0x1"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_ana_ctrl3_emode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_EMODE_DEFAULT (0x00a00001U)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_EMODE_RD_MASK (0x00ffffffU)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_EMODE_WR_MASK (0x00ffffffU)


///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_en
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_EMODE_CFG_PKSEN_EN_EMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_EMODE_CFG_PKSEN_EN_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_EMODE_CFG_PKSEN_EN_EMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_EMODE_CFG_PKSEN_EN_EMODE_BF_DEF (0x00000001)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_comp
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_EMODE_CFG_PKSEN_COMP_EMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_EMODE_CFG_PKSEN_COMP_EMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_EMODE_CFG_PKSEN_COMP_EMODE_BF_MSK (0x0000001E)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_EMODE_CFG_PKSEN_COMP_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_comp_en
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_EMODE_CFG_PKSEN_COMP_EN_EMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_EMODE_CFG_PKSEN_COMP_EN_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_EMODE_CFG_PKSEN_COMP_EN_EMODE_BF_MSK (0x00000020)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_EMODE_CFG_PKSEN_COMP_EN_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_comp_inn_sel
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_EMODE_CFG_PKSEN_COMP_INN_SEL_EMODE_BF_OFF ( 6)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_EMODE_CFG_PKSEN_COMP_INN_SEL_EMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_EMODE_CFG_PKSEN_COMP_INN_SEL_EMODE_BF_MSK (0x000000C0)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_EMODE_CFG_PKSEN_COMP_INN_SEL_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_comp_inp_sel
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_EMODE_CFG_PKSEN_COMP_INP_SEL_EMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_EMODE_CFG_PKSEN_COMP_INP_SEL_EMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_EMODE_CFG_PKSEN_COMP_INP_SEL_EMODE_BF_MSK (0x00000300)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_EMODE_CFG_PKSEN_COMP_INP_SEL_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_comp_vref_val
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_EMODE_CFG_PKSEN_COMP_VREF_VAL_EMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_EMODE_CFG_PKSEN_COMP_VREF_VAL_EMODE_BF_WID ( 6)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_EMODE_CFG_PKSEN_COMP_VREF_VAL_EMODE_BF_MSK (0x0000FC00)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_EMODE_CFG_PKSEN_COMP_VREF_VAL_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_vref_sel
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_EMODE_CFG_PKSEN_VREF_SEL_EMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_EMODE_CFG_PKSEN_VREF_SEL_EMODE_BF_WID ( 6)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_EMODE_CFG_PKSEN_VREF_SEL_EMODE_BF_MSK (0x003F0000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_EMODE_CFG_PKSEN_VREF_SEL_EMODE_BF_DEF (0x00200000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_ldo_pksen_byp
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_EMODE_CFG_LDO_PKSEN_BYP_EMODE_BF_OFF (22)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_EMODE_CFG_LDO_PKSEN_BYP_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_EMODE_CFG_LDO_PKSEN_BYP_EMODE_BF_MSK (0x00400000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_EMODE_CFG_LDO_PKSEN_BYP_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::ANA_CONTROL3::cfg_pksen_res_bypb
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_EMODE_CFG_PKSEN_RES_BYPB_EMODE_BF_OFF (23)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_EMODE_CFG_PKSEN_RES_BYPB_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_EMODE_CFG_PKSEN_RES_BYPB_EMODE_BF_MSK (0x00800000)
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_EMODE_CFG_PKSEN_RES_BYPB_EMODE_BF_DEF (0x00800000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_DFX0_EMODE register description at address offset 0x384
  *
  * Register default value:        0x00040000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_dfx0_emode
  * SERDES_LANE_ANA_PLL::DFX0
  */

typedef union {
  struct {
    uint32_t CFG_FINE_MODULATION_EN_EMODE : 1;
    ///< Modulates fine code by adding an offset that toggles between values
    ///< defined by cfg_fine_modulation_sel.                          cfg_modulation_toggle_delay
    ///< sets modulation frequency.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_FINE_MODULATION_SEL_EMODE : 1;
    ///< Sets magnitude of fine modulation:                          0 - fine
    ///< offset toggles between 0 and +1.                         1 - fine
    ///< offset toggles between 0 and cfg_fine2dtr_ratio.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t CFG_TDCPE_MODULATION_EN_EMODE : 1;
    ///< Modulates TDC PE by adding an offset that toggles between 0 and 1.
    ///< cfg_modulation_toggle_delay sets modulation frequency.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t CFG_LDO_MODULATION_EN_EMODE : 1;
    ///< Modulates LDO by adding an offset that toggles between 0 and 1.
    ///< cfg_modulation_toggle_delay sets modulation frequency.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t CFG_MODULATION_TOGGLE_DELAY_EMODE : 4;
    ///< Sets modulation frequency.                         Code would toggle
    ///< every 2^reg refclk cycles.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t CFG_VISA8TO1_2OBS_SEL_EMODE : 3;
    ///< Selects which bit in VISA lane0 would be routed to high speed monitor
    ///< mux.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CFG_DFX_FEEDFWRD_OFFSET_OVR_EN_EMODE : 1;
    ///< Enables overriding feed forward offset. Useful in integer mode to
    ///< shift fbclk phase.
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t CFG_DFX_FEEDFWRDPHASE_OVR_VAL_EMODE : 5;
    ///< Sets feed forward offset override value. Useful in integer mode to
    ///< shift fbclk phase.                         The 9 integer bits, 3 fractional
    ///< bits.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t CFG_DFX_DISABLE_DFT_TIMER_OVRD_VAL_EMODE : 1;
    ///< When cfg_dfx_disable_dft_timer_ovrd_en=1, this bit will set DFT timer
    ///< mode.                          When 0, DFT measurements always run.
    ///< When 1, DFT measurements always off.                          No need
    ///< to change this reg. Just keep it at 0. (could have been removed)
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t CFG_DFX_DISABLE_DFT_TIMER_OVRD_EN_EMODE : 1;
    ///< When 0, DFT measurements would stop when minmax timer overflows.
    ///< When 1, DFT measurements run based on cfg_dfx_disable_dft_timer_ovrd_val.
    ///< AccessType="RW" BitOffset="18" ResetValue="0x1"
    uint32_t CFG_DPSO_BYPASS_MODE_EMODE : 1;
    ///< When 0, DPSO bus is sampled by fbclk falling edge before sent to TX
    ///< PISO                         When 1, the sample is bypassed. This
    ///< is needed when monitoring VISA signals that are not of fbclk nor on
    ///< refclk domain.
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_dfx0_emode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_DFX0_EMODE_DEFAULT (0x00040000U)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_EMODE_RD_MASK (0x000fffffU)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_EMODE_WR_MASK (0x000fffffU)


///< Modulates fine code by adding an offset that toggles between values
///< defined by cfg_fine_modulation_sel.                          cfg_modulation_toggle_delay
///< sets modulation frequency.
#define PMA_TXPLLCFGLOADER_MSG_DFX0_EMODE_CFG_FINE_MOD_EN_EMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_EMODE_CFG_FINE_MOD_EN_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_EMODE_CFG_FINE_MOD_EN_EMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_EMODE_CFG_FINE_MOD_EN_EMODE_BF_DEF (0x00000000)

///< Sets magnitude of fine modulation:                          0 - fine
///< offset toggles between 0 and +1.                         1 - fine
///< offset toggles between 0 and cfg_fine2dtr_ratio.
#define PMA_TXPLLCFGLOADER_MSG_DFX0_EMODE_CFG_FINE_MOD_SEL_EMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_EMODE_CFG_FINE_MOD_SEL_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_EMODE_CFG_FINE_MOD_SEL_EMODE_BF_MSK (0x00000002)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_EMODE_CFG_FINE_MOD_SEL_EMODE_BF_DEF (0x00000000)

///< Modulates TDC PE by adding an offset that toggles between 0 and 1.
///< cfg_modulation_toggle_delay sets modulation frequency.
#define PMA_TXPLLCFGLOADER_MSG_DFX0_EMODE_CFG_TDCPE_MOD_EN_EMODE_BF_OFF ( 2)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_EMODE_CFG_TDCPE_MOD_EN_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_EMODE_CFG_TDCPE_MOD_EN_EMODE_BF_MSK (0x00000004)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_EMODE_CFG_TDCPE_MOD_EN_EMODE_BF_DEF (0x00000000)

///< Modulates LDO by adding an offset that toggles between 0 and 1.
///< cfg_modulation_toggle_delay sets modulation frequency.
#define PMA_TXPLLCFGLOADER_MSG_DFX0_EMODE_CFG_LDO_MOD_EN_EMODE_BF_OFF ( 3)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_EMODE_CFG_LDO_MOD_EN_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_EMODE_CFG_LDO_MOD_EN_EMODE_BF_MSK (0x00000008)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_EMODE_CFG_LDO_MOD_EN_EMODE_BF_DEF (0x00000000)

///< Sets modulation frequency.                         Code would toggle
///< every 2^reg refclk cycles.
#define PMA_TXPLLCFGLOADER_MSG_DFX0_EMODE_CFG_MOD_TOGGLE_DELAY_EMODE_BF_OFF ( 4)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_EMODE_CFG_MOD_TOGGLE_DELAY_EMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_EMODE_CFG_MOD_TOGGLE_DELAY_EMODE_BF_MSK (0x000000F0)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_EMODE_CFG_MOD_TOGGLE_DELAY_EMODE_BF_DEF (0x00000000)

///< Selects which bit in VISA lane0 would be routed to high speed monitor
///< mux.
#define PMA_TXPLLCFGLOADER_MSG_DFX0_EMODE_CFG_VISA8TO1_2OBS_SEL_EMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_EMODE_CFG_VISA8TO1_2OBS_SEL_EMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_EMODE_CFG_VISA8TO1_2OBS_SEL_EMODE_BF_MSK (0x00000700)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_EMODE_CFG_VISA8TO1_2OBS_SEL_EMODE_BF_DEF (0x00000000)

///< Enables overriding feed forward offset. Useful in integer mode to
///< shift fbclk phase.
#define PMA_TXPLLCFGLOADER_MSG_DFX0_EMODE_CFG_DFX_FEEDFWRD_OFFSET_OVR_EN_EMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_EMODE_CFG_DFX_FEEDFWRD_OFFSET_OVR_EN_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_EMODE_CFG_DFX_FEEDFWRD_OFFSET_OVR_EN_EMODE_BF_MSK (0x00000800)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_EMODE_CFG_DFX_FEEDFWRD_OFFSET_OVR_EN_EMODE_BF_DEF (0x00000000)

///< Sets feed forward offset override value. Useful in integer mode to
///< shift fbclk phase.                         The 9 integer bits, 3 fractional
///< bits.
#define PMA_TXPLLCFGLOADER_MSG_DFX0_EMODE_CFG_DFX_FEEDFWRDPHASE_OVR_VAL_EMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_EMODE_CFG_DFX_FEEDFWRDPHASE_OVR_VAL_EMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_EMODE_CFG_DFX_FEEDFWRDPHASE_OVR_VAL_EMODE_BF_MSK (0x0001F000)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_EMODE_CFG_DFX_FEEDFWRDPHASE_OVR_VAL_EMODE_BF_DEF (0x00000000)

///< When cfg_dfx_disable_dft_timer_ovrd_en=1, this bit will set DFT timer
///< mode.                          When 0, DFT measurements always run.
///< When 1, DFT measurements always off.                          No need
///< to change this reg. Just keep it at 0. (could have been removed)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_EMODE_CFG_DFX_DIS_DFT_TIMER_OVRD_VAL_EMODE_BF_OFF (17)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_EMODE_CFG_DFX_DIS_DFT_TIMER_OVRD_VAL_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_EMODE_CFG_DFX_DIS_DFT_TIMER_OVRD_VAL_EMODE_BF_MSK (0x00020000)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_EMODE_CFG_DFX_DIS_DFT_TIMER_OVRD_VAL_EMODE_BF_DEF (0x00000000)

///< When 0, DFT measurements would stop when minmax timer overflows.
///< When 1, DFT measurements run based on cfg_dfx_disable_dft_timer_ovrd_val.
#define PMA_TXPLLCFGLOADER_MSG_DFX0_EMODE_CFG_DFX_DIS_DFT_TIMER_OVRD_EN_EMODE_BF_OFF (18)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_EMODE_CFG_DFX_DIS_DFT_TIMER_OVRD_EN_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_EMODE_CFG_DFX_DIS_DFT_TIMER_OVRD_EN_EMODE_BF_MSK (0x00040000)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_EMODE_CFG_DFX_DIS_DFT_TIMER_OVRD_EN_EMODE_BF_DEF (0x00040000)

///< When 0, DPSO bus is sampled by fbclk falling edge before sent to TX
///< PISO                         When 1, the sample is bypassed. This
///< is needed when monitoring VISA signals that are not of fbclk nor on
///< refclk domain.
#define PMA_TXPLLCFGLOADER_MSG_DFX0_EMODE_CFG_DPSO_BYP_MODE_EMODE_BF_OFF (19)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_EMODE_CFG_DPSO_BYP_MODE_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_EMODE_CFG_DPSO_BYP_MODE_EMODE_BF_MSK (0x00080000)
#define PMA_TXPLLCFGLOADER_MSG_DFX0_EMODE_CFG_DPSO_BYP_MODE_EMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_DFX1_EMODE register description at address offset 0x388
  *
  * Register default value:        0x0001AAAA
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_dfx1_emode
  * SERDES_LANE_ANA_PLL::DFX1
  */

typedef union {
  struct {
    uint32_t CFG_DPSO_MARKER_EMODE : 16;
    ///< When serializing VISA 8b bus to TX, additional 16 (upper bits) are
    ///< set according to this register which could be used as a marker
    ///< AccessType="RW" BitOffset="0" ResetValue="0xAAAA"
    uint32_t CFG_TDCPE_MODULATION_VAL_EMODE : 5;
    ///< While cfg_tdcpe_modulation_en=1 define the TDC/STDC amplitude offset
    ///< (integer) during the tdc/stdc modulation.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x1"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_dfx1_emode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_DFX1_EMODE_DEFAULT (0x0001aaaaU)
#define PMA_TXPLLCFGLOADER_MSG_DFX1_EMODE_RD_MASK (0x001fffffU)
#define PMA_TXPLLCFGLOADER_MSG_DFX1_EMODE_WR_MASK (0x001fffffU)


///< When serializing VISA 8b bus to TX, additional 16 (upper bits) are
///< set according to this register which could be used as a marker
#define PMA_TXPLLCFGLOADER_MSG_DFX1_EMODE_CFG_DPSO_MARKER_EMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_DFX1_EMODE_CFG_DPSO_MARKER_EMODE_BF_WID (16)
#define PMA_TXPLLCFGLOADER_MSG_DFX1_EMODE_CFG_DPSO_MARKER_EMODE_BF_MSK (0x0000FFFF)
#define PMA_TXPLLCFGLOADER_MSG_DFX1_EMODE_CFG_DPSO_MARKER_EMODE_BF_DEF (0x0000AAAA)

///< While cfg_tdcpe_modulation_en=1 define the TDC/STDC amplitude offset
///< (integer) during the tdc/stdc modulation.
#define PMA_TXPLLCFGLOADER_MSG_DFX1_EMODE_CFG_TDCPE_MOD_VAL_EMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_DFX1_EMODE_CFG_TDCPE_MOD_VAL_EMODE_BF_WID ( 5)
#define PMA_TXPLLCFGLOADER_MSG_DFX1_EMODE_CFG_TDCPE_MOD_VAL_EMODE_BF_MSK (0x001F0000)
#define PMA_TXPLLCFGLOADER_MSG_DFX1_EMODE_CFG_TDCPE_MOD_VAL_EMODE_BF_DEF (0x00010000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_LDO0_EMODE register description at address offset 0x38c
  *
  * Register default value:        0x059002E0
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_ldo0_emode
  * SERDES_LANE_ANA_PLL::LDO0
  */

typedef union {
  struct {
    uint32_t CFG_LDOCLK_BETA_EMODE : 3;
    ///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldoclk_beta
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_LDOCLK_BYP_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldoclk_byp
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t CFG_LDOCLK_VREF_SEL_EMODE : 6;
    ///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldoclk_vref_sel
    ///< AccessType="RW" BitOffset="4" ResetValue="0x2E"
    uint32_t CFG_LDODCO_BETA_EMODE : 3;
    ///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldodco_beta
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t CFG_LDODCO_BYP_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldodco_byp
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t CFG_LDODCO_VREF_RC_EMODE : 2;
    ///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldodco_vref_rc
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t CFG_LDODCO_VREF_SEL_EMODE : 6;
    ///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldodco_vref_sel
    ///< AccessType="RW" BitOffset="16" ResetValue="0x10"
    uint32_t CFG_LDODCO_HIGH_VREF_SEL_EMODE : 6;
    ///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldodco_high_vref_sel
    ///< AccessType="RW" BitOffset="22" ResetValue="0x16"
    uint32_t CFG_LDOREFGEN_BETA_EMODE : 3;
    ///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldorefgen_beta
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t CFG_VREFGEN_BYP_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::LDO0::cfg_vrefgen_byp
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_ldo0_emode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_LDO0_EMODE_DEFAULT (0x059002e0U)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_EMODE_RD_MASK (0xffffffffU)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_EMODE_WR_MASK (0xffffffffU)


///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldoclk_beta
#define PMA_TXPLLCFGLOADER_MSG_LDO0_EMODE_CFG_LDOCLK_BETA_EMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_EMODE_CFG_LDOCLK_BETA_EMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_EMODE_CFG_LDOCLK_BETA_EMODE_BF_MSK (0x00000007)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_EMODE_CFG_LDOCLK_BETA_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldoclk_byp
#define PMA_TXPLLCFGLOADER_MSG_LDO0_EMODE_CFG_LDOCLK_BYP_EMODE_BF_OFF ( 3)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_EMODE_CFG_LDOCLK_BYP_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_EMODE_CFG_LDOCLK_BYP_EMODE_BF_MSK (0x00000008)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_EMODE_CFG_LDOCLK_BYP_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldoclk_vref_sel
#define PMA_TXPLLCFGLOADER_MSG_LDO0_EMODE_CFG_LDOCLK_VREF_SEL_EMODE_BF_OFF ( 4)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_EMODE_CFG_LDOCLK_VREF_SEL_EMODE_BF_WID ( 6)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_EMODE_CFG_LDOCLK_VREF_SEL_EMODE_BF_MSK (0x000003F0)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_EMODE_CFG_LDOCLK_VREF_SEL_EMODE_BF_DEF (0x000002E0)

///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldodco_beta
#define PMA_TXPLLCFGLOADER_MSG_LDO0_EMODE_CFG_LDODCO_BETA_EMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_EMODE_CFG_LDODCO_BETA_EMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_EMODE_CFG_LDODCO_BETA_EMODE_BF_MSK (0x00001C00)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_EMODE_CFG_LDODCO_BETA_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldodco_byp
#define PMA_TXPLLCFGLOADER_MSG_LDO0_EMODE_CFG_LDODCO_BYP_EMODE_BF_OFF (13)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_EMODE_CFG_LDODCO_BYP_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_EMODE_CFG_LDODCO_BYP_EMODE_BF_MSK (0x00002000)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_EMODE_CFG_LDODCO_BYP_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldodco_vref_rc
#define PMA_TXPLLCFGLOADER_MSG_LDO0_EMODE_CFG_LDODCO_VREF_RC_EMODE_BF_OFF (14)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_EMODE_CFG_LDODCO_VREF_RC_EMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_EMODE_CFG_LDODCO_VREF_RC_EMODE_BF_MSK (0x0000C000)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_EMODE_CFG_LDODCO_VREF_RC_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldodco_vref_sel
#define PMA_TXPLLCFGLOADER_MSG_LDO0_EMODE_CFG_LDODCO_VREF_SEL_EMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_EMODE_CFG_LDODCO_VREF_SEL_EMODE_BF_WID ( 6)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_EMODE_CFG_LDODCO_VREF_SEL_EMODE_BF_MSK (0x003F0000)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_EMODE_CFG_LDODCO_VREF_SEL_EMODE_BF_DEF (0x00100000)

///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldodco_high_vref_sel
#define PMA_TXPLLCFGLOADER_MSG_LDO0_EMODE_CFG_LDODCO_HIGH_VREF_SEL_EMODE_BF_OFF (22)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_EMODE_CFG_LDODCO_HIGH_VREF_SEL_EMODE_BF_WID ( 6)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_EMODE_CFG_LDODCO_HIGH_VREF_SEL_EMODE_BF_MSK (0x0FC00000)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_EMODE_CFG_LDODCO_HIGH_VREF_SEL_EMODE_BF_DEF (0x05800000)

///< SERDES_LANE_ANA_PLL::LDO0::cfg_ldorefgen_beta
#define PMA_TXPLLCFGLOADER_MSG_LDO0_EMODE_CFG_LDOREFGEN_BETA_EMODE_BF_OFF (28)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_EMODE_CFG_LDOREFGEN_BETA_EMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_EMODE_CFG_LDOREFGEN_BETA_EMODE_BF_MSK (0x70000000)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_EMODE_CFG_LDOREFGEN_BETA_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO0::cfg_vrefgen_byp
#define PMA_TXPLLCFGLOADER_MSG_LDO0_EMODE_CFG_VREFGEN_BYP_EMODE_BF_OFF (31)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_EMODE_CFG_VREFGEN_BYP_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_EMODE_CFG_VREFGEN_BYP_EMODE_BF_MSK (0x80000000)
#define PMA_TXPLLCFGLOADER_MSG_LDO0_EMODE_CFG_VREFGEN_BYP_EMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_LDO1_EMODE register description at address offset 0x390
  *
  * Register default value:        0x000000E0
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_ldo1_emode
  * SERDES_LANE_ANA_PLL::LDO1
  */

typedef union {
  struct {
    uint32_t CFG_INV_VPEAK_COMB_FB_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::LDO1::cfg_inv_vpeak_comb_fb
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_LDO_BIAS_SEL_EMODE : 3;
    ///< SERDES_LANE_ANA_PLL::LDO1::cfg_ldo_bias_sel
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t CFG_LDO_BIAS_EXT_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::LDO1::cfg_ldo_bias_ext
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t CFG_LDO_PKSEN_HIGHZ_B_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::LDO1::cfg_ldo_pksen_highz_b
    ///< AccessType="RW" BitOffset="5" ResetValue="0x1"
    uint32_t CFG_LDO_CLK_HIGHZ_B_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::LDO1::cfg_ldo_clk_highz_b
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t CFG_LDO_DCO_HIGHZ_B_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::LDO1::cfg_ldo_dco_highz_b
    ///< AccessType="RW" BitOffset="7" ResetValue="0x1"
    uint32_t CFG_DCMON_SEL_EMODE : 4;
    ///< Selection pins for DFx MUXs
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CFG_DCMON1_EN_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::LDO1::cfg_dcmon1_en
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t CFG_DCMON2_EN_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::LDO1::cfg_dcmon2_en
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t  : 18;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_ldo1_emode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_LDO1_EMODE_DEFAULT (0x000000e0U)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_EMODE_RD_MASK (0x00003fffU)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_EMODE_WR_MASK (0x00003fffU)


///< SERDES_LANE_ANA_PLL::LDO1::cfg_inv_vpeak_comb_fb
#define PMA_TXPLLCFGLOADER_MSG_LDO1_EMODE_CFG_INV_VPEAK_COMB_FB_EMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_EMODE_CFG_INV_VPEAK_COMB_FB_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_EMODE_CFG_INV_VPEAK_COMB_FB_EMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_EMODE_CFG_INV_VPEAK_COMB_FB_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO1::cfg_ldo_bias_sel
#define PMA_TXPLLCFGLOADER_MSG_LDO1_EMODE_CFG_LDO_BIAS_SEL_EMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_EMODE_CFG_LDO_BIAS_SEL_EMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_EMODE_CFG_LDO_BIAS_SEL_EMODE_BF_MSK (0x0000000E)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_EMODE_CFG_LDO_BIAS_SEL_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO1::cfg_ldo_bias_ext
#define PMA_TXPLLCFGLOADER_MSG_LDO1_EMODE_CFG_LDO_BIAS_EXT_EMODE_BF_OFF ( 4)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_EMODE_CFG_LDO_BIAS_EXT_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_EMODE_CFG_LDO_BIAS_EXT_EMODE_BF_MSK (0x00000010)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_EMODE_CFG_LDO_BIAS_EXT_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO1::cfg_ldo_pksen_highz_b
#define PMA_TXPLLCFGLOADER_MSG_LDO1_EMODE_CFG_LDO_PKSEN_HIGHZ_B_EMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_EMODE_CFG_LDO_PKSEN_HIGHZ_B_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_EMODE_CFG_LDO_PKSEN_HIGHZ_B_EMODE_BF_MSK (0x00000020)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_EMODE_CFG_LDO_PKSEN_HIGHZ_B_EMODE_BF_DEF (0x00000020)

///< SERDES_LANE_ANA_PLL::LDO1::cfg_ldo_clk_highz_b
#define PMA_TXPLLCFGLOADER_MSG_LDO1_EMODE_CFG_LDO_CLK_HIGHZ_B_EMODE_BF_OFF ( 6)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_EMODE_CFG_LDO_CLK_HIGHZ_B_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_EMODE_CFG_LDO_CLK_HIGHZ_B_EMODE_BF_MSK (0x00000040)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_EMODE_CFG_LDO_CLK_HIGHZ_B_EMODE_BF_DEF (0x00000040)

///< SERDES_LANE_ANA_PLL::LDO1::cfg_ldo_dco_highz_b
#define PMA_TXPLLCFGLOADER_MSG_LDO1_EMODE_CFG_LDO_DCO_HIGHZ_B_EMODE_BF_OFF ( 7)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_EMODE_CFG_LDO_DCO_HIGHZ_B_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_EMODE_CFG_LDO_DCO_HIGHZ_B_EMODE_BF_MSK (0x00000080)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_EMODE_CFG_LDO_DCO_HIGHZ_B_EMODE_BF_DEF (0x00000080)

///< Selection pins for DFx MUXs
#define PMA_TXPLLCFGLOADER_MSG_LDO1_EMODE_CFG_DCMON_SEL_EMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_EMODE_CFG_DCMON_SEL_EMODE_BF_WID ( 4)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_EMODE_CFG_DCMON_SEL_EMODE_BF_MSK (0x00000F00)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_EMODE_CFG_DCMON_SEL_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO1::cfg_dcmon1_en
#define PMA_TXPLLCFGLOADER_MSG_LDO1_EMODE_CFG_DCMON1_EN_EMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_EMODE_CFG_DCMON1_EN_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_EMODE_CFG_DCMON1_EN_EMODE_BF_MSK (0x00001000)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_EMODE_CFG_DCMON1_EN_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::LDO1::cfg_dcmon2_en
#define PMA_TXPLLCFGLOADER_MSG_LDO1_EMODE_CFG_DCMON2_EN_EMODE_BF_OFF (13)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_EMODE_CFG_DCMON2_EN_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_EMODE_CFG_DCMON2_EN_EMODE_BF_MSK (0x00002000)
#define PMA_TXPLLCFGLOADER_MSG_LDO1_EMODE_CFG_DCMON2_EN_EMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_KVCC0_EMODE register description at address offset 0x394
  *
  * Register default value:        0x080013C5
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_kvcc0_emode
  * SERDES_LANE_ANA_PLL::KVCC0
  */

typedef union {
  struct {
    uint32_t CFG_KVCC_SETTLE_MAXCNT_EMODE : 8;
    ///< Defines number of refclk cycles from DAC change to frequency measurement
    ///< during Kvcc calibration.                         VREG LPF is in bypass
    ///< mode with constant time is ~1nsec (115ohm*8.3pF).
    ///< Use the following formula:                         Frefclk x 1.26usec
    ///< AccessType="RW" BitOffset="0" ResetValue="0xC5"
    uint32_t CFG_KVCC_MEASURE_MAXCNT_EMODE : 3;
    ///< Defines number of refclk cycles over which the DCO frequency is measured
    ///< and averaged with high accuracy.                         It is used
    ///< for both Kvcc calibration and DFT frequency measurement mode.
    ///< refclk cycles = 2^(reg+6) - 1
    ///< AccessType="RW" BitOffset="8" ResetValue="0x3"
    uint32_t CFG_KVCCCALIB_LDO_OFFSET_EMODE : 3;
    ///< Amount of offset to inject into LDO for measuring frequency delta
    ///< that is needed for calibrating Kvcc. (Need to be ~30mv)
    ///< Common: use &#38;quot;2&#38;quot; as the default register value.
    ///< Lane: used &#38;quot;1&#38;quot; as a default override.
    ///< AccessType="RW" BitOffset="11" ResetValue="0x2"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t CFG_DFT_FREQ_MEAS_ENABLE_EMODE : 1;
    ///< DFT frequency measurement is triggered when this signal transitions
    ///< from 0 to 1.                         Make sure to set cfg_dfx_disable_dft_timer_ovrd_en=1
    ///< so that HS counter would remain active and cfg_kvcc_measure_maxcnt
    ///< to define number of refclk cycles.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t CFG_NOTCH_OFFSET_EMODE : 3;
    ///< Sets how many thermo bits to turn off from the notch filter
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t CFG_FULL_RANGE_KVCC_SEL_EMODE : 1;
    ///< Limit the kvcc full bin code according to thermal control bits in
    ///< the analog. Leaving it unlimited doesn&#39;t impact functionality
    ///< but just the read out of the Kvcc calibration. For proper Kvcc debug/characterization,
    ///< set according to the PLL:                         0 - code is limited
    ///< to 191d, 11 thermal bits in analog                         1 - (default)
    ///< Full binary code range
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t CFG_KVCC_INV_POLARITY_EMODE : 1;
    ///< A chicken bit to invert Kvcc polarity.
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t CFG_2F0_FINE_RATIO_EMODE : 7;
    ///< Fractional ratio. 32 is 1/4 (frac value = reg/2^7).
    ///< AccessType="RW" BitOffset="22" ResetValue="0x20"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_kvcc0_emode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_KVCC0_EMODE_DEFAULT (0x080013c5U)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_EMODE_RD_MASK (0x1fff3fffU)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_EMODE_WR_MASK (0x1fff3fffU)


///< Defines number of refclk cycles from DAC change to frequency measurement
///< during Kvcc calibration.                         VREG LPF is in bypass
///< mode with constant time is ~1nsec (115ohm*8.3pF).
///< Use the following formula:                         Frefclk x 1.26usec
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_EMODE_CFG_KVCC_SETTLE_MAXCNT_EMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_EMODE_CFG_KVCC_SETTLE_MAXCNT_EMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_EMODE_CFG_KVCC_SETTLE_MAXCNT_EMODE_BF_MSK (0x000000FF)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_EMODE_CFG_KVCC_SETTLE_MAXCNT_EMODE_BF_DEF (0x000000C5)

///< Defines number of refclk cycles over which the DCO frequency is measured
///< and averaged with high accuracy.                         It is used
///< for both Kvcc calibration and DFT frequency measurement mode.
///< refclk cycles = 2^(reg+6) - 1
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_EMODE_CFG_KVCC_MEAS_MAXCNT_EMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_EMODE_CFG_KVCC_MEAS_MAXCNT_EMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_EMODE_CFG_KVCC_MEAS_MAXCNT_EMODE_BF_MSK (0x00000700)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_EMODE_CFG_KVCC_MEAS_MAXCNT_EMODE_BF_DEF (0x00000300)

///< Amount of offset to inject into LDO for measuring frequency delta
///< that is needed for calibrating Kvcc. (Need to be ~30mv)
///< Common: use &#38;quot;2&#38;quot; as the default register value.
///< Lane: used &#38;quot;1&#38;quot; as a default override.
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_EMODE_CFG_KVCCCALIB_LDO_OFFSET_EMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_EMODE_CFG_KVCCCALIB_LDO_OFFSET_EMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_EMODE_CFG_KVCCCALIB_LDO_OFFSET_EMODE_BF_MSK (0x00003800)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_EMODE_CFG_KVCCCALIB_LDO_OFFSET_EMODE_BF_DEF (0x00001000)

///< DFT frequency measurement is triggered when this signal transitions
///< from 0 to 1.                         Make sure to set cfg_dfx_disable_dft_timer_ovrd_en=1
///< so that HS counter would remain active and cfg_kvcc_measure_maxcnt
///< to define number of refclk cycles.
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_EMODE_CFG_DFT_FREQ_MEAS_EN_EMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_EMODE_CFG_DFT_FREQ_MEAS_EN_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_EMODE_CFG_DFT_FREQ_MEAS_EN_EMODE_BF_MSK (0x00010000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_EMODE_CFG_DFT_FREQ_MEAS_EN_EMODE_BF_DEF (0x00000000)

///< Sets how many thermo bits to turn off from the notch filter
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_EMODE_CFG_NOTCH_OFFSET_EMODE_BF_OFF (17)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_EMODE_CFG_NOTCH_OFFSET_EMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_EMODE_CFG_NOTCH_OFFSET_EMODE_BF_MSK (0x000E0000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_EMODE_CFG_NOTCH_OFFSET_EMODE_BF_DEF (0x00000000)

///< Limit the kvcc full bin code according to thermal control bits in
///< the analog. Leaving it unlimited doesn&#39;t impact functionality
///< but just the read out of the Kvcc calibration. For proper Kvcc debug/characterization,
///< set according to the PLL:                         0 - code is limited
///< to 191d, 11 thermal bits in analog                         1 - (default)
///< Full binary code range
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_EMODE_CFG_FULL_RANGE_KVCC_SEL_EMODE_BF_OFF (20)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_EMODE_CFG_FULL_RANGE_KVCC_SEL_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_EMODE_CFG_FULL_RANGE_KVCC_SEL_EMODE_BF_MSK (0x00100000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_EMODE_CFG_FULL_RANGE_KVCC_SEL_EMODE_BF_DEF (0x00000000)

///< A chicken bit to invert Kvcc polarity.
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_EMODE_CFG_KVCC_INV_POLARITY_EMODE_BF_OFF (21)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_EMODE_CFG_KVCC_INV_POLARITY_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_EMODE_CFG_KVCC_INV_POLARITY_EMODE_BF_MSK (0x00200000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_EMODE_CFG_KVCC_INV_POLARITY_EMODE_BF_DEF (0x00000000)

///< Fractional ratio. 32 is 1/4 (frac value = reg/2^7).
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_EMODE_CFG_2F0_FINE_RATIO_EMODE_BF_OFF (22)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_EMODE_CFG_2F0_FINE_RATIO_EMODE_BF_WID ( 7)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_EMODE_CFG_2F0_FINE_RATIO_EMODE_BF_MSK (0x1FC00000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_EMODE_CFG_2F0_FINE_RATIO_EMODE_BF_DEF (0x08000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_KVCC1_EMODE register description at address offset 0x398
  *
  * Register default value:        0x000EF200
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_kvcc1_emode
  * SERDES_LANE_ANA_PLL::KVCC1
  */

typedef union {
  struct {
    uint32_t CFG_KVCC_CODE_OVRD_EMODE : 1;
    ///< DCO notch filter override enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_KVCC_CODE_VAL_EMODE : 9;
    ///< DCO notch filter override value (binary, before therm decoder).
    ///< AccessType="RW" BitOffset="1" ResetValue="0x100"
    uint32_t CFG_KVCC_LDO_OFFSET_EN_OVRD_EMODE : 1;
    ///< Takes control over internal Kvcc FSM for manually injecting an offset
    ///< to LDO (for letting FW calibrate Kvcc).
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t CFG_KVCC_LDO_OFFSET_EN_VAL_EMODE : 1;
    ///< When kvcc_ldo_offset_en_ovrd=1                         0 - doesn&#39;t
    ///< inject an offset to LDO                         1 - injects an offset
    ///< to LDO in magnitude as configured by kvcccalib_ldo_offset
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t CFG_KVCC_MAX_CODE_LIMIT_EMODE : 9;
    ///< While cfg_full_range_kvcc_sel = 0, define the max value for 2f0 code.
    ///< Common: 0x7F (127)                         Lane: 0x4F (79)
    ///< AccessType="RW" BitOffset="12" ResetValue="0xEF"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_kvcc1_emode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_KVCC1_EMODE_DEFAULT (0x000ef200U)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_EMODE_RD_MASK (0x001fffffU)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_EMODE_WR_MASK (0x001fffffU)


///< DCO notch filter override enable
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_EMODE_CFG_KVCC_CODE_OVRD_EMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_EMODE_CFG_KVCC_CODE_OVRD_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_EMODE_CFG_KVCC_CODE_OVRD_EMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_EMODE_CFG_KVCC_CODE_OVRD_EMODE_BF_DEF (0x00000000)

///< DCO notch filter override value (binary, before therm decoder).
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_EMODE_CFG_KVCC_CODE_VAL_EMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_EMODE_CFG_KVCC_CODE_VAL_EMODE_BF_WID ( 9)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_EMODE_CFG_KVCC_CODE_VAL_EMODE_BF_MSK (0x000003FE)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_EMODE_CFG_KVCC_CODE_VAL_EMODE_BF_DEF (0x00000200)

///< Takes control over internal Kvcc FSM for manually injecting an offset
///< to LDO (for letting FW calibrate Kvcc).
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_EMODE_CFG_KVCC_LDO_OFFSET_EN_OVRD_EMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_EMODE_CFG_KVCC_LDO_OFFSET_EN_OVRD_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_EMODE_CFG_KVCC_LDO_OFFSET_EN_OVRD_EMODE_BF_MSK (0x00000400)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_EMODE_CFG_KVCC_LDO_OFFSET_EN_OVRD_EMODE_BF_DEF (0x00000000)

///< When kvcc_ldo_offset_en_ovrd=1                         0 - doesn&#39;t
///< inject an offset to LDO                         1 - injects an offset
///< to LDO in magnitude as configured by kvcccalib_ldo_offset
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_EMODE_CFG_KVCC_LDO_OFFSET_EN_VAL_EMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_EMODE_CFG_KVCC_LDO_OFFSET_EN_VAL_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_EMODE_CFG_KVCC_LDO_OFFSET_EN_VAL_EMODE_BF_MSK (0x00000800)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_EMODE_CFG_KVCC_LDO_OFFSET_EN_VAL_EMODE_BF_DEF (0x00000000)

///< While cfg_full_range_kvcc_sel = 0, define the max value for 2f0 code.
///< Common: 0x7F (127)                         Lane: 0x4F (79)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_EMODE_CFG_KVCC_MAX_CODE_LIMIT_EMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_EMODE_CFG_KVCC_MAX_CODE_LIMIT_EMODE_BF_WID ( 9)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_EMODE_CFG_KVCC_MAX_CODE_LIMIT_EMODE_BF_MSK (0x001FF000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_EMODE_CFG_KVCC_MAX_CODE_LIMIT_EMODE_BF_DEF (0x000EF000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_KVCC2_EMODE register description at address offset 0x39c
  *
  * Register default value:        0x000000A9
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_kvcc2_emode
  * SERDES_LANE_ANA_PLL::KVCC2
  */

typedef union {
  struct {
    uint32_t CFG_KVCC_ADAPT_EN_EMODE : 1;
    ///< Kvcc on the fly adaptation enable.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t CFG_KVCC_ADAPT_MODE_EMODE : 2;
    ///< Defines kvcc adaptation mode.                         0(POR): full
    ///< (dithering on all 2f0 bus between current and next)
    ///< 1: single cap 0 (dithering on dedicated capacitor - 1 lsb)
    ///< 2: single cap 1 (dithering on dedicated capacitor - 2 lsb)
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t CFG_KVCC_ADAPT_THR_EMODE : 2;
    ///< Threshold for update the notch code.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x1"
    uint32_t CFG_KVCC_ADAPT_CTR_DELAY_EMODE : 3;
    ///< Sets update rate of 2f0 SD modulator (2f0 dithering) ramp code increment.
    ///< fbclk cycles = 2^reg
    ///< AccessType="RW" BitOffset="5" ResetValue="0x5"
    uint32_t CFG_KVCC_ADAPT_STEP_EMODE : 3;
    ///< Sets step size of 2f0 SD modulator (2f0 dithering) ramp code increment.
    ///< step = 2^(reg-9)                         Cycles to complete ramp =
    ///< 2^(9-adapt_step+adapt_ctr_delay)
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CFG_DFX_KVCC_ADAPT_TOGGLE_EN_EMODE : 1;
    ///< Enables a BIST to check 2f0 mechanism for temp tracking.
    ///< When enabled, 2f0 dithering SD modulator code is ramped up and down
    ///< continously.
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t CFG_DFX_KVCC_ADAPT_ENABLE_OVR_EMODE : 1;
    ///< Enables overriding code to 2f0 dithering SD modulator.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t CFG_DFX_KVCC_ADAPT_VAL_OVR_EMODE : 9;
    ///< 2f0 dithering SD modulator override value (when cfg_dfx_kvcc_adapt_enable_ovr=1)
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t CFG_DFX_KVCC_ADAPT_DIR_OVR_EMODE : 1;
    ///< In 2f0 dithering DFX modes, this bit does the following:
    ///< toggle mode (cfg_dfx_kvcc_adapt_toggle_en=1):
    ///< 0 - 2f0 would ramp down and up repeatedly
    ///< 1 - 2f0 would ramp up and down repeatedly
    ///< override mode (cfg_dfx_kvcc_adapt_enable_ovr=1):
    ///< 0 - 2f0 would dither between current code and current code -1
    ///< 1 - 2f0 would dither between current code and current code +1
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t CFG_KVCC_ADAPT_CHICKEN_BIT_EMODE : 1;
    ///< Define the polarity of the kvcc adaptation.
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t CFG_KVCC_ADAPT_BY_FW_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::KVCC2::cfg_kvcc_adapt_by_fw
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t CFG_START_2F0_STEP_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::KVCC2::cfg_start_2f0_step
    ///< AccessType="RW" BitOffset="25" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="26" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_kvcc2_emode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_DEFAULT (0x000000a9U)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_RD_MASK (0x03ffffffU)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_WR_MASK (0x03ffffffU)


///< Kvcc on the fly adaptation enable.
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_CFG_KVCC_ADAPT_EN_EMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_CFG_KVCC_ADAPT_EN_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_CFG_KVCC_ADAPT_EN_EMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_CFG_KVCC_ADAPT_EN_EMODE_BF_DEF (0x00000001)

///< Defines kvcc adaptation mode.                         0(POR): full
///< (dithering on all 2f0 bus between current and next)
///< 1: single cap 0 (dithering on dedicated capacitor - 1 lsb)
///< 2: single cap 1 (dithering on dedicated capacitor - 2 lsb)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_CFG_KVCC_ADAPT_MODE_EMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_CFG_KVCC_ADAPT_MODE_EMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_CFG_KVCC_ADAPT_MODE_EMODE_BF_MSK (0x00000006)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_CFG_KVCC_ADAPT_MODE_EMODE_BF_DEF (0x00000000)

///< Threshold for update the notch code.
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_CFG_KVCC_ADAPT_THR_EMODE_BF_OFF ( 3)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_CFG_KVCC_ADAPT_THR_EMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_CFG_KVCC_ADAPT_THR_EMODE_BF_MSK (0x00000018)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_CFG_KVCC_ADAPT_THR_EMODE_BF_DEF (0x00000008)

///< Sets update rate of 2f0 SD modulator (2f0 dithering) ramp code increment.
///< fbclk cycles = 2^reg
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_CFG_KVCC_ADAPT_CTR_DELAY_EMODE_BF_OFF ( 5)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_CFG_KVCC_ADAPT_CTR_DELAY_EMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_CFG_KVCC_ADAPT_CTR_DELAY_EMODE_BF_MSK (0x000000E0)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_CFG_KVCC_ADAPT_CTR_DELAY_EMODE_BF_DEF (0x000000A0)

///< Sets step size of 2f0 SD modulator (2f0 dithering) ramp code increment.
///< step = 2^(reg-9)                         Cycles to complete ramp =
///< 2^(9-adapt_step+adapt_ctr_delay)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_CFG_KVCC_ADAPT_STEP_EMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_CFG_KVCC_ADAPT_STEP_EMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_CFG_KVCC_ADAPT_STEP_EMODE_BF_MSK (0x00000700)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_CFG_KVCC_ADAPT_STEP_EMODE_BF_DEF (0x00000000)

///< Enables a BIST to check 2f0 mechanism for temp tracking.
///< When enabled, 2f0 dithering SD modulator code is ramped up and down
///< continously.
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_CFG_DFX_KVCC_ADAPT_TOGGLE_EN_EMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_CFG_DFX_KVCC_ADAPT_TOGGLE_EN_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_CFG_DFX_KVCC_ADAPT_TOGGLE_EN_EMODE_BF_MSK (0x00000800)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_CFG_DFX_KVCC_ADAPT_TOGGLE_EN_EMODE_BF_DEF (0x00000000)

///< Enables overriding code to 2f0 dithering SD modulator.
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_CFG_DFX_KVCC_ADAPT_EN_OVR_EMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_CFG_DFX_KVCC_ADAPT_EN_OVR_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_CFG_DFX_KVCC_ADAPT_EN_OVR_EMODE_BF_MSK (0x00001000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_CFG_DFX_KVCC_ADAPT_EN_OVR_EMODE_BF_DEF (0x00000000)

///< 2f0 dithering SD modulator override value (when cfg_dfx_kvcc_adapt_enable_ovr=1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_CFG_DFX_KVCC_ADAPT_VAL_OVR_EMODE_BF_OFF (13)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_CFG_DFX_KVCC_ADAPT_VAL_OVR_EMODE_BF_WID ( 9)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_CFG_DFX_KVCC_ADAPT_VAL_OVR_EMODE_BF_MSK (0x003FE000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_CFG_DFX_KVCC_ADAPT_VAL_OVR_EMODE_BF_DEF (0x00000000)

///< In 2f0 dithering DFX modes, this bit does the following:
///< toggle mode (cfg_dfx_kvcc_adapt_toggle_en=1):
///< 0 - 2f0 would ramp down and up repeatedly
///< 1 - 2f0 would ramp up and down repeatedly
///< override mode (cfg_dfx_kvcc_adapt_enable_ovr=1):
///< 0 - 2f0 would dither between current code and current code -1
///< 1 - 2f0 would dither between current code and current code +1
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_CFG_DFX_KVCC_ADAPT_DIR_OVR_EMODE_BF_OFF (22)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_CFG_DFX_KVCC_ADAPT_DIR_OVR_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_CFG_DFX_KVCC_ADAPT_DIR_OVR_EMODE_BF_MSK (0x00400000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_CFG_DFX_KVCC_ADAPT_DIR_OVR_EMODE_BF_DEF (0x00000000)

///< Define the polarity of the kvcc adaptation.
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_CFG_KVCC_ADAPT_CHICKEN_BIT_EMODE_BF_OFF (23)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_CFG_KVCC_ADAPT_CHICKEN_BIT_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_CFG_KVCC_ADAPT_CHICKEN_BIT_EMODE_BF_MSK (0x00800000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_CFG_KVCC_ADAPT_CHICKEN_BIT_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::KVCC2::cfg_kvcc_adapt_by_fw
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_CFG_KVCC_ADAPT_BY_FW_EMODE_BF_OFF (24)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_CFG_KVCC_ADAPT_BY_FW_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_CFG_KVCC_ADAPT_BY_FW_EMODE_BF_MSK (0x01000000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_CFG_KVCC_ADAPT_BY_FW_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::KVCC2::cfg_start_2f0_step
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_CFG_START_2F0_STEP_EMODE_BF_OFF (25)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_CFG_START_2F0_STEP_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_CFG_START_2F0_STEP_EMODE_BF_MSK (0x02000000)
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_CFG_START_2F0_STEP_EMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_SPARE0_EMODE register description at address offset 0x3a0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_spare0_emode
  * SERDES_LANE_ANA_PLL::SPARE0
  */

typedef union {
  struct {
    uint32_t CFG_SPARE_DIG2ANA_EMODE : 11;
    ///< Spare controls to analog block.                         [10:0] unused
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 21;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_spare0_emode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_SPARE0_EMODE_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_SPARE0_EMODE_RD_MASK (0x000007ffU)
#define PMA_TXPLLCFGLOADER_MSG_SPARE0_EMODE_WR_MASK (0x000007ffU)


///< Spare controls to analog block.                         [10:0] unused
#define PMA_TXPLLCFGLOADER_MSG_SPARE0_EMODE_CFG_SPARE_DIG2ANA_EMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_SPARE0_EMODE_CFG_SPARE_DIG2ANA_EMODE_BF_WID (11)
#define PMA_TXPLLCFGLOADER_MSG_SPARE0_EMODE_CFG_SPARE_DIG2ANA_EMODE_BF_MSK (0x000007FF)
#define PMA_TXPLLCFGLOADER_MSG_SPARE0_EMODE_CFG_SPARE_DIG2ANA_EMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_SPARE1_EMODE register description at address offset 0x3a4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_spare1_emode
  * SERDES_LANE_ANA_PLL::SPARE1
  */

typedef union {
  struct {
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="0" ResetValue="None"
    uint32_t CFG_SPARE_DIG2WRAP_EMODE : 20;
    ///< SERDES_LANE_ANA_PLL::SPARE1::cfg_spare_dig2wrap
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_spare1_emode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_SPARE1_EMODE_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_SPARE1_EMODE_RD_MASK (0x001ffffeU)
#define PMA_TXPLLCFGLOADER_MSG_SPARE1_EMODE_WR_MASK (0x001ffffeU)


///< SERDES_LANE_ANA_PLL::SPARE1::cfg_spare_dig2wrap
#define PMA_TXPLLCFGLOADER_MSG_SPARE1_EMODE_CFG_SPARE_DIG2WRAP_EMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_SPARE1_EMODE_CFG_SPARE_DIG2WRAP_EMODE_BF_WID (20)
#define PMA_TXPLLCFGLOADER_MSG_SPARE1_EMODE_CFG_SPARE_DIG2WRAP_EMODE_BF_MSK (0x001FFFFE)
#define PMA_TXPLLCFGLOADER_MSG_SPARE1_EMODE_CFG_SPARE_DIG2WRAP_EMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_DCO_SWING0_EMODE register description at address offset 0x3a8
  *
  * Register default value:        0x0022006D
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_dco_swing0_emode
  * SERDES_LANE_ANA_PLL::DCO_SWING0
  */

typedef union {
  struct {
    uint32_t CFG_DCO_SWING_VPEAK_MODE_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_dco_swing_vpeak_mode
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t CFG_PKSEN_VREF_TARGET_EMODE : 6;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_pksen_vref_target
    ///< AccessType="RW" BitOffset="1" ResetValue="0x36"
    uint32_t CFG_SKIP_DCO_SWING_SLEEP_SEL_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_skip_dco_swing_sleep_sel
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t CFG_DCO_SWING_BY_FW_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_dco_swing_by_fw
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CFG_START_PKSEN_READ_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_start_pksen_read
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t CFG_START_LDODCO_STEP_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_start_ldodco_step
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t CFG_LDODCO_STEP_DIR_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_ldodco_step_dir
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t CFG_LDODCO_STEP_CHICKEN_BIT_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_ldodco_step_chicken_bit
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t CFG_PKSEN_SETTLE_TIMER_LIMIT_EMODE : 3;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_pksen_settle_timer_limit
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t CFG_PKSEN_COMP_OUT_CHICKEN_BIT_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_pksen_comp_out_chicken_bit
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t CFG_LDODCO_ADAPT_EN_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_ldodco_adapt_en
    ///< AccessType="RW" BitOffset="17" ResetValue="0x1"
    uint32_t CFG_PKSEN_VREF_OVRD_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_pksen_vref_ovrd
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t CFG_LDODCO_VREF_OVRD_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_ldodco_vref_ovrd
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t CFG_LDODCO_STEP_SETTLE_TIMER_LIMIT_EMODE : 2;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_ldodco_step_settle_timer_limit
    ///< AccessType="RW" BitOffset="20" ResetValue="0x2"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_dco_swing0_emode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_DEFAULT (0x0022006dU)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_RD_MASK (0x003fffffU)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_WR_MASK (0x003fffffU)


///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_dco_swing_vpeak_mode
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_DCO_SWING_VPEAK_MODE_EMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_DCO_SWING_VPEAK_MODE_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_DCO_SWING_VPEAK_MODE_EMODE_BF_MSK (0x00000001)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_DCO_SWING_VPEAK_MODE_EMODE_BF_DEF (0x00000001)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_pksen_vref_target
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_PKSEN_VREF_TARGET_EMODE_BF_OFF ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_PKSEN_VREF_TARGET_EMODE_BF_WID ( 6)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_PKSEN_VREF_TARGET_EMODE_BF_MSK (0x0000007E)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_PKSEN_VREF_TARGET_EMODE_BF_DEF (0x0000006C)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_skip_dco_swing_sleep_sel
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_SKIP_DCO_SWING_SLEEP_SEL_EMODE_BF_OFF ( 7)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_SKIP_DCO_SWING_SLEEP_SEL_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_SKIP_DCO_SWING_SLEEP_SEL_EMODE_BF_MSK (0x00000080)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_SKIP_DCO_SWING_SLEEP_SEL_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_dco_swing_by_fw
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_DCO_SWING_BY_FW_EMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_DCO_SWING_BY_FW_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_DCO_SWING_BY_FW_EMODE_BF_MSK (0x00000100)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_DCO_SWING_BY_FW_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_start_pksen_read
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_START_PKSEN_READ_EMODE_BF_OFF ( 9)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_START_PKSEN_READ_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_START_PKSEN_READ_EMODE_BF_MSK (0x00000200)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_START_PKSEN_READ_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_start_ldodco_step
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_START_LDODCO_STEP_EMODE_BF_OFF (10)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_START_LDODCO_STEP_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_START_LDODCO_STEP_EMODE_BF_MSK (0x00000400)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_START_LDODCO_STEP_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_ldodco_step_dir
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_LDODCO_STEP_DIR_EMODE_BF_OFF (11)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_LDODCO_STEP_DIR_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_LDODCO_STEP_DIR_EMODE_BF_MSK (0x00000800)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_LDODCO_STEP_DIR_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_ldodco_step_chicken_bit
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_LDODCO_STEP_CHICKEN_BIT_EMODE_BF_OFF (12)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_LDODCO_STEP_CHICKEN_BIT_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_LDODCO_STEP_CHICKEN_BIT_EMODE_BF_MSK (0x00001000)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_LDODCO_STEP_CHICKEN_BIT_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_pksen_settle_timer_limit
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_PKSEN_SETTLE_TIMER_LIMIT_EMODE_BF_OFF (13)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_PKSEN_SETTLE_TIMER_LIMIT_EMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_PKSEN_SETTLE_TIMER_LIMIT_EMODE_BF_MSK (0x0000E000)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_PKSEN_SETTLE_TIMER_LIMIT_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_pksen_comp_out_chicken_bit
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_PKSEN_COMP_OUT_CHICKEN_BIT_EMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_PKSEN_COMP_OUT_CHICKEN_BIT_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_PKSEN_COMP_OUT_CHICKEN_BIT_EMODE_BF_MSK (0x00010000)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_PKSEN_COMP_OUT_CHICKEN_BIT_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_ldodco_adapt_en
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_LDODCO_ADAPT_EN_EMODE_BF_OFF (17)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_LDODCO_ADAPT_EN_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_LDODCO_ADAPT_EN_EMODE_BF_MSK (0x00020000)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_LDODCO_ADAPT_EN_EMODE_BF_DEF (0x00020000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_pksen_vref_ovrd
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_PKSEN_VREF_OVRD_EMODE_BF_OFF (18)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_PKSEN_VREF_OVRD_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_PKSEN_VREF_OVRD_EMODE_BF_MSK (0x00040000)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_PKSEN_VREF_OVRD_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_ldodco_vref_ovrd
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_LDODCO_VREF_OVRD_EMODE_BF_OFF (19)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_LDODCO_VREF_OVRD_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_LDODCO_VREF_OVRD_EMODE_BF_MSK (0x00080000)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_LDODCO_VREF_OVRD_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING0::cfg_ldodco_step_settle_timer_limit
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_LDODCO_STEP_SETTLE_TIMER_LIMIT_EMODE_BF_OFF (20)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_LDODCO_STEP_SETTLE_TIMER_LIMIT_EMODE_BF_WID ( 2)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_LDODCO_STEP_SETTLE_TIMER_LIMIT_EMODE_BF_MSK (0x00300000)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_CFG_LDODCO_STEP_SETTLE_TIMER_LIMIT_EMODE_BF_DEF (0x00200000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_DCO_SWING1_EMODE register description at address offset 0x3ac
  *
  * Register default value:        0x00000005
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_dco_swing1_emode
  * SERDES_LANE_ANA_PLL::DCO_SWING1
  */

typedef union {
  struct {
    uint32_t CFG_LDODCO_ADAPT_CTR_DELAY_EMODE : 3;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_ldodco_adapt_ctr_delay
    ///< AccessType="RW" BitOffset="0" ResetValue="0x5"
    uint32_t CFG_LDODCO_ADAPT_STEP_EMODE : 3;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_ldodco_adapt_step
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t CFG_DFX_LDODCO_ADAPT_TOGGLE_EN_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_dfx_ldodco_adapt_toggle_en
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t CFG_DFX_LDODCO_ADAPT_DIR_OVR_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_dfx_ldodco_adapt_dir_ovr
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t CFG_DFX_LDODCO_ADAPT_ENABLE_OVR_EMODE : 1;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_dfx_ldodco_adapt_enable_ovr
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CFG_DFX_LDODCO_ADAPT_VAL_OVR_EMODE : 9;
    ///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_dfx_ldodco_adapt_val_ovr
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_dco_swing1_emode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_EMODE_DEFAULT (0x00000005U)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_EMODE_RD_MASK (0x0003ffffU)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_EMODE_WR_MASK (0x0003ffffU)


///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_ldodco_adapt_ctr_delay
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_EMODE_CFG_LDODCO_ADAPT_CTR_DELAY_EMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_EMODE_CFG_LDODCO_ADAPT_CTR_DELAY_EMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_EMODE_CFG_LDODCO_ADAPT_CTR_DELAY_EMODE_BF_MSK (0x00000007)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_EMODE_CFG_LDODCO_ADAPT_CTR_DELAY_EMODE_BF_DEF (0x00000005)

///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_ldodco_adapt_step
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_EMODE_CFG_LDODCO_ADAPT_STEP_EMODE_BF_OFF ( 3)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_EMODE_CFG_LDODCO_ADAPT_STEP_EMODE_BF_WID ( 3)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_EMODE_CFG_LDODCO_ADAPT_STEP_EMODE_BF_MSK (0x00000038)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_EMODE_CFG_LDODCO_ADAPT_STEP_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_dfx_ldodco_adapt_toggle_en
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_EMODE_CFG_DFX_LDODCO_ADAPT_TOGGLE_EN_EMODE_BF_OFF ( 6)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_EMODE_CFG_DFX_LDODCO_ADAPT_TOGGLE_EN_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_EMODE_CFG_DFX_LDODCO_ADAPT_TOGGLE_EN_EMODE_BF_MSK (0x00000040)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_EMODE_CFG_DFX_LDODCO_ADAPT_TOGGLE_EN_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_dfx_ldodco_adapt_dir_ovr
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_EMODE_CFG_DFX_LDODCO_ADAPT_DIR_OVR_EMODE_BF_OFF ( 7)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_EMODE_CFG_DFX_LDODCO_ADAPT_DIR_OVR_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_EMODE_CFG_DFX_LDODCO_ADAPT_DIR_OVR_EMODE_BF_MSK (0x00000080)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_EMODE_CFG_DFX_LDODCO_ADAPT_DIR_OVR_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_dfx_ldodco_adapt_enable_ovr
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_EMODE_CFG_DFX_LDODCO_ADAPT_EN_OVR_EMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_EMODE_CFG_DFX_LDODCO_ADAPT_EN_OVR_EMODE_BF_WID ( 1)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_EMODE_CFG_DFX_LDODCO_ADAPT_EN_OVR_EMODE_BF_MSK (0x00000100)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_EMODE_CFG_DFX_LDODCO_ADAPT_EN_OVR_EMODE_BF_DEF (0x00000000)

///< SERDES_LANE_ANA_PLL::DCO_SWING1::cfg_dfx_ldodco_adapt_val_ovr
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_EMODE_CFG_DFX_LDODCO_ADAPT_VAL_OVR_EMODE_BF_OFF ( 9)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_EMODE_CFG_DFX_LDODCO_ADAPT_VAL_OVR_EMODE_BF_WID ( 9)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_EMODE_CFG_DFX_LDODCO_ADAPT_VAL_OVR_EMODE_BF_MSK (0x0003FE00)
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_EMODE_CFG_DFX_LDODCO_ADAPT_VAL_OVR_EMODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_TDC4_EMODE register description at address offset 0x3b0
  *
  * Register default value:        0xCAB6A27C
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_tdc4_emode
  * SERDES_LANE_ANA_PLL::TDC4
  */

typedef union {
  struct {
    uint32_t CFG_VTDC_MINUS2_THRESH_EMODE : 8;
    ///< SERDES_LANE_ANA_PLL::TDC4::cfg_vtdc_minus2_thresh
    ///< AccessType="RW" BitOffset="0" ResetValue="0x7C"
    uint32_t CFG_VTDC_MINUS1_THRESH_EMODE : 8;
    ///< SERDES_LANE_ANA_PLL::TDC4::cfg_vtdc_minus1_thresh
    ///< AccessType="RW" BitOffset="8" ResetValue="0xA2"
    uint32_t CFG_VTDC_PLUS1_THRESH_EMODE : 8;
    ///< SERDES_LANE_ANA_PLL::TDC4::cfg_vtdc_plus1_thresh
    ///< AccessType="RW" BitOffset="16" ResetValue="0xB6"
    uint32_t CFG_VTDC_PLUS2_THRESH_EMODE : 8;
    ///< SERDES_LANE_ANA_PLL::TDC4::cfg_vtdc_plus2_thresh
    ///< AccessType="RW" BitOffset="24" ResetValue="0xCA"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_tdc4_emode_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_TDC4_EMODE_DEFAULT (0xcab6a27cU)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_EMODE_RD_MASK (0xffffffffU)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_EMODE_WR_MASK (0xffffffffU)


///< SERDES_LANE_ANA_PLL::TDC4::cfg_vtdc_minus2_thresh
#define PMA_TXPLLCFGLOADER_MSG_TDC4_EMODE_CFG_VTDC_MINUS2_THRESH_EMODE_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_EMODE_CFG_VTDC_MINUS2_THRESH_EMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_EMODE_CFG_VTDC_MINUS2_THRESH_EMODE_BF_MSK (0x000000FF)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_EMODE_CFG_VTDC_MINUS2_THRESH_EMODE_BF_DEF (0x0000007C)

///< SERDES_LANE_ANA_PLL::TDC4::cfg_vtdc_minus1_thresh
#define PMA_TXPLLCFGLOADER_MSG_TDC4_EMODE_CFG_VTDC_MINUS1_THRESH_EMODE_BF_OFF ( 8)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_EMODE_CFG_VTDC_MINUS1_THRESH_EMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_EMODE_CFG_VTDC_MINUS1_THRESH_EMODE_BF_MSK (0x0000FF00)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_EMODE_CFG_VTDC_MINUS1_THRESH_EMODE_BF_DEF (0x0000A200)

///< SERDES_LANE_ANA_PLL::TDC4::cfg_vtdc_plus1_thresh
#define PMA_TXPLLCFGLOADER_MSG_TDC4_EMODE_CFG_VTDC_PLUS1_THRESH_EMODE_BF_OFF (16)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_EMODE_CFG_VTDC_PLUS1_THRESH_EMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_EMODE_CFG_VTDC_PLUS1_THRESH_EMODE_BF_MSK (0x00FF0000)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_EMODE_CFG_VTDC_PLUS1_THRESH_EMODE_BF_DEF (0x00B60000)

///< SERDES_LANE_ANA_PLL::TDC4::cfg_vtdc_plus2_thresh
#define PMA_TXPLLCFGLOADER_MSG_TDC4_EMODE_CFG_VTDC_PLUS2_THRESH_EMODE_BF_OFF (24)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_EMODE_CFG_VTDC_PLUS2_THRESH_EMODE_BF_WID ( 8)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_EMODE_CFG_VTDC_PLUS2_THRESH_EMODE_BF_MSK (0xFF000000)
#define PMA_TXPLLCFGLOADER_MSG_TDC4_EMODE_CFG_VTDC_PLUS2_THRESH_EMODE_BF_DEF (0xCA000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_RW_SPARE_0 register description at address offset 0x3e8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_rw_spare_0
  * Spare RW register
  */

typedef union {
  struct {
    uint32_t PLLCFGLOADER_RW_SPARE_0 : 32;
    ///< Spare register.  Reseved for future
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_rw_spare_0_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_RW_SPARE_0_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_RW_SPARE_0_RD_MASK (0xffffffffU)
#define PMA_TXPLLCFGLOADER_MSG_RW_SPARE_0_WR_MASK (0xffffffffU)


///< Spare register.  Reseved for future
#define PMA_TXPLLCFGLOADER_MSG_RW_SPARE_0_PLLCFGLOADER_RW_SPARE_0_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_RW_SPARE_0_PLLCFGLOADER_RW_SPARE_0_BF_WID (32)
#define PMA_TXPLLCFGLOADER_MSG_RW_SPARE_0_PLLCFGLOADER_RW_SPARE_0_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLLCFGLOADER_MSG_RW_SPARE_0_PLLCFGLOADER_RW_SPARE_0_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_RW_SPARE_1 register description at address offset 0x3ec
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_rw_spare_1
  * Spare RW register
  */

typedef union {
  struct {
    uint32_t PLLCFGLOADER_RW_SPARE_1 : 32;
    ///< Spare register.  Reseved for future
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_rw_spare_1_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_RW_SPARE_1_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_RW_SPARE_1_RD_MASK (0xffffffffU)
#define PMA_TXPLLCFGLOADER_MSG_RW_SPARE_1_WR_MASK (0xffffffffU)


///< Spare register.  Reseved for future
#define PMA_TXPLLCFGLOADER_MSG_RW_SPARE_1_PLLCFGLOADER_RW_SPARE_1_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_RW_SPARE_1_PLLCFGLOADER_RW_SPARE_1_BF_WID (32)
#define PMA_TXPLLCFGLOADER_MSG_RW_SPARE_1_PLLCFGLOADER_RW_SPARE_1_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLLCFGLOADER_MSG_RW_SPARE_1_PLLCFGLOADER_RW_SPARE_1_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_RW_SPARE_2 register description at address offset 0x3f0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_rw_spare_2
  * Spare RW register
  */

typedef union {
  struct {
    uint32_t PLLCFGLOADER_RW_SPARE_2 : 32;
    ///< Spare register.  Reseved for future
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_rw_spare_2_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_RW_SPARE_2_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_RW_SPARE_2_RD_MASK (0xffffffffU)
#define PMA_TXPLLCFGLOADER_MSG_RW_SPARE_2_WR_MASK (0xffffffffU)


///< Spare register.  Reseved for future
#define PMA_TXPLLCFGLOADER_MSG_RW_SPARE_2_PLLCFGLOADER_RW_SPARE_2_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_RW_SPARE_2_PLLCFGLOADER_RW_SPARE_2_BF_WID (32)
#define PMA_TXPLLCFGLOADER_MSG_RW_SPARE_2_PLLCFGLOADER_RW_SPARE_2_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLLCFGLOADER_MSG_RW_SPARE_2_PLLCFGLOADER_RW_SPARE_2_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_RW_SPARE_3 register description at address offset 0x3f4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_rw_spare_3
  * Spare RW register
  */

typedef union {
  struct {
    uint32_t PLLCFGLOADER_RW_SPARE_3 : 32;
    ///< Spare register.  Reseved for future
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_rw_spare_3_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_RW_SPARE_3_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_RW_SPARE_3_RD_MASK (0xffffffffU)
#define PMA_TXPLLCFGLOADER_MSG_RW_SPARE_3_WR_MASK (0xffffffffU)


///< Spare register.  Reseved for future
#define PMA_TXPLLCFGLOADER_MSG_RW_SPARE_3_PLLCFGLOADER_RW_SPARE_3_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_RW_SPARE_3_PLLCFGLOADER_RW_SPARE_3_BF_WID (32)
#define PMA_TXPLLCFGLOADER_MSG_RW_SPARE_3_PLLCFGLOADER_RW_SPARE_3_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLLCFGLOADER_MSG_RW_SPARE_3_PLLCFGLOADER_RW_SPARE_3_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_RO_SPARE_0 register description at address offset 0x3f8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_ro_spare_0
  * Spare RO register
  */

typedef union {
  struct {
    uint32_t PLLCFGLOADER_RO_SPARE_0 : 32;
    ///< Spare register.  Reseved for future
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_ro_spare_0_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_RO_SPARE_0_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_RO_SPARE_0_RD_MASK (0xffffffffU)
#define PMA_TXPLLCFGLOADER_MSG_RO_SPARE_0_WR_MASK (0x00000000U)


///< Spare register.  Reseved for future
#define PMA_TXPLLCFGLOADER_MSG_RO_SPARE_0_PLLCFGLOADER_RO_SPARE_0_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_RO_SPARE_0_PLLCFGLOADER_RO_SPARE_0_BF_WID (32)
#define PMA_TXPLLCFGLOADER_MSG_RO_SPARE_0_PLLCFGLOADER_RO_SPARE_0_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLLCFGLOADER_MSG_RO_SPARE_0_PLLCFGLOADER_RO_SPARE_0_BF_DEF (0x00000000)


/** @brief PMA_TXPLLCFGLOADER_REGS_MSG_PMA_TXPLLCFGLOADER_REGS_TXPLLCFGLOADER_RO_SPARE_1 register description at address offset 0x3fc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLLCFGLOADER_regs_MSG/PMA_TXPLLCFGLOADER_regs/txpllcfgloader_ro_spare_1
  * Spare RO register
  */

typedef union {
  struct {
    uint32_t PLLCFGLOADER_RO_SPARE_1 : 32;
    ///< Spare register.  Reseved for future
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpllcfgloader_msg_ro_spare_1_reg_t;

#define PMA_TXPLLCFGLOADER_MSG_RO_SPARE_1_DEFAULT (0x00000000U)
#define PMA_TXPLLCFGLOADER_MSG_RO_SPARE_1_RD_MASK (0xffffffffU)
#define PMA_TXPLLCFGLOADER_MSG_RO_SPARE_1_WR_MASK (0x00000000U)


///< Spare register.  Reseved for future
#define PMA_TXPLLCFGLOADER_MSG_RO_SPARE_1_PLLCFGLOADER_RO_SPARE_1_BF_OFF ( 0)
#define PMA_TXPLLCFGLOADER_MSG_RO_SPARE_1_PLLCFGLOADER_RO_SPARE_1_BF_WID (32)
#define PMA_TXPLLCFGLOADER_MSG_RO_SPARE_1_PLLCFGLOADER_RO_SPARE_1_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLLCFGLOADER_MSG_RO_SPARE_1_PLLCFGLOADER_RO_SPARE_1_BF_DEF (0x00000000)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define PMA_TXPLLCFGLOADER_MSG_CFG_REG(_BASE) ((pma_txpllcfgloader_msg_cfg_reg_t*) PMA_TXPLLCFGLOADER_MSG_CFG_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_STAT_REG(_BASE) ((pma_txpllcfgloader_msg_stat_reg_t*) PMA_TXPLLCFGLOADER_MSG_STAT_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_AMODE_0_REG(_BASE) ((pma_txpllcfgloader_msg_dwmask_amode_0_reg_t*) PMA_TXPLLCFGLOADER_MSG_DWMASK_AMODE_0_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_AMODE_1_REG(_BASE) ((pma_txpllcfgloader_msg_dwmask_amode_1_reg_t*) PMA_TXPLLCFGLOADER_MSG_DWMASK_AMODE_1_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_BMODE_0_REG(_BASE) ((pma_txpllcfgloader_msg_dwmask_bmode_0_reg_t*) PMA_TXPLLCFGLOADER_MSG_DWMASK_BMODE_0_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_BMODE_1_REG(_BASE) ((pma_txpllcfgloader_msg_dwmask_bmode_1_reg_t*) PMA_TXPLLCFGLOADER_MSG_DWMASK_BMODE_1_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_CMODE_0_REG(_BASE) ((pma_txpllcfgloader_msg_dwmask_cmode_0_reg_t*) PMA_TXPLLCFGLOADER_MSG_DWMASK_CMODE_0_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_CMODE_1_REG(_BASE) ((pma_txpllcfgloader_msg_dwmask_cmode_1_reg_t*) PMA_TXPLLCFGLOADER_MSG_DWMASK_CMODE_1_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_DMODE_0_REG(_BASE) ((pma_txpllcfgloader_msg_dwmask_dmode_0_reg_t*) PMA_TXPLLCFGLOADER_MSG_DWMASK_DMODE_0_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_DMODE_1_REG(_BASE) ((pma_txpllcfgloader_msg_dwmask_dmode_1_reg_t*) PMA_TXPLLCFGLOADER_MSG_DWMASK_DMODE_1_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_EMODE_0_REG(_BASE) ((pma_txpllcfgloader_msg_dwmask_emode_0_reg_t*) PMA_TXPLLCFGLOADER_MSG_DWMASK_EMODE_0_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_DWMASK_EMODE_1_REG(_BASE) ((pma_txpllcfgloader_msg_dwmask_emode_1_reg_t*) PMA_TXPLLCFGLOADER_MSG_DWMASK_EMODE_1_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_DIV0_AMODE_REG(_BASE) ((pma_txpllcfgloader_msg_div0_amode_reg_t*) PMA_TXPLLCFGLOADER_MSG_DIV0_AMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_DIV1_AMODE_REG(_BASE) ((pma_txpllcfgloader_msg_div1_amode_reg_t*) PMA_TXPLLCFGLOADER_MSG_DIV1_AMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_ADL0_AMODE_REG(_BASE) ((pma_txpllcfgloader_msg_adl0_amode_reg_t*) PMA_TXPLLCFGLOADER_MSG_ADL0_AMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_ADL1_AMODE_REG(_BASE) ((pma_txpllcfgloader_msg_adl1_amode_reg_t*) PMA_TXPLLCFGLOADER_MSG_ADL1_AMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_AMODE_REG(_BASE) ((pma_txpllcfgloader_msg_frac_lock0_amode_reg_t*) PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_AMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_AMODE_REG(_BASE) ((pma_txpllcfgloader_msg_frac_lock1_amode_reg_t*) PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_AMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_REG(_BASE) ((pma_txpllcfgloader_msg_tdc0_amode_reg_t*) PMA_TXPLLCFGLOADER_MSG_TDC0_AMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_REG(_BASE) ((pma_txpllcfgloader_msg_tdc1_amode_reg_t*) PMA_TXPLLCFGLOADER_MSG_TDC1_AMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_TDC2_AMODE_REG(_BASE) ((pma_txpllcfgloader_msg_tdc2_amode_reg_t*) PMA_TXPLLCFGLOADER_MSG_TDC2_AMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_TDC3_AMODE_REG(_BASE) ((pma_txpllcfgloader_msg_tdc3_amode_reg_t*) PMA_TXPLLCFGLOADER_MSG_TDC3_AMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_REG(_BASE) ((pma_txpllcfgloader_msg_tap_ovrd_amode_reg_t*) PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_AMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_AMODE_REG(_BASE) ((pma_txpllcfgloader_msg_dfx_dco_amode_reg_t*) PMA_TXPLLCFGLOADER_MSG_DFX_DCO_AMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_AMODE_REG(_BASE) ((pma_txpllcfgloader_msg_dfx_tdc_cro_amode_reg_t*) PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_AMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_AMODE_REG(_BASE) ((pma_txpllcfgloader_msg_visa_ctrl_amode_reg_t*) PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_AMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_AMODE_REG(_BASE) ((pma_txpllcfgloader_msg_visa_lane0_sel_amode_reg_t*) PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_AMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_AMODE_REG(_BASE) ((pma_txpllcfgloader_msg_visa_lane1_sel_amode_reg_t*) PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_AMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_AMODE_REG(_BASE) ((pma_txpllcfgloader_msg_cntr_bist_settings_amode_reg_t*) PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_AMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_AMODE_REG(_BASE) ((pma_txpllcfgloader_msg_calib0_amode_reg_t*) PMA_TXPLLCFGLOADER_MSG_CALIB0_AMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_AMODE_REG(_BASE) ((pma_txpllcfgloader_msg_calib1_amode_reg_t*) PMA_TXPLLCFGLOADER_MSG_CALIB1_AMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_AMODE_REG(_BASE) ((pma_txpllcfgloader_msg_calib2_amode_reg_t*) PMA_TXPLLCFGLOADER_MSG_CALIB2_AMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_REG(_BASE) ((pma_txpllcfgloader_msg_pll_fsm_ctrl_amode_reg_t*) PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_AMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_AMODE_REG(_BASE) ((pma_txpllcfgloader_msg_temp_tracking_amode_reg_t*) PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_AMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_REG(_BASE) ((pma_txpllcfgloader_msg_ana_ctrl1_amode_reg_t*) PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_AMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_AMODE_REG(_BASE) ((pma_txpllcfgloader_msg_ana_ctrl2_amode_reg_t*) PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_AMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_AMODE_REG(_BASE) ((pma_txpllcfgloader_msg_ana_ctrl3_amode_reg_t*) PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_AMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_DFX0_AMODE_REG(_BASE) ((pma_txpllcfgloader_msg_dfx0_amode_reg_t*) PMA_TXPLLCFGLOADER_MSG_DFX0_AMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_DFX1_AMODE_REG(_BASE) ((pma_txpllcfgloader_msg_dfx1_amode_reg_t*) PMA_TXPLLCFGLOADER_MSG_DFX1_AMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_LDO0_AMODE_REG(_BASE) ((pma_txpllcfgloader_msg_ldo0_amode_reg_t*) PMA_TXPLLCFGLOADER_MSG_LDO0_AMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_LDO1_AMODE_REG(_BASE) ((pma_txpllcfgloader_msg_ldo1_amode_reg_t*) PMA_TXPLLCFGLOADER_MSG_LDO1_AMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_AMODE_REG(_BASE) ((pma_txpllcfgloader_msg_kvcc0_amode_reg_t*) PMA_TXPLLCFGLOADER_MSG_KVCC0_AMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_AMODE_REG(_BASE) ((pma_txpllcfgloader_msg_kvcc1_amode_reg_t*) PMA_TXPLLCFGLOADER_MSG_KVCC1_AMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_REG(_BASE) ((pma_txpllcfgloader_msg_kvcc2_amode_reg_t*) PMA_TXPLLCFGLOADER_MSG_KVCC2_AMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_SPARE0_AMODE_REG(_BASE) ((pma_txpllcfgloader_msg_spare0_amode_reg_t*) PMA_TXPLLCFGLOADER_MSG_SPARE0_AMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_SPARE1_AMODE_REG(_BASE) ((pma_txpllcfgloader_msg_spare1_amode_reg_t*) PMA_TXPLLCFGLOADER_MSG_SPARE1_AMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_REG(_BASE) ((pma_txpllcfgloader_msg_dco_swing0_amode_reg_t*) PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_AMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_AMODE_REG(_BASE) ((pma_txpllcfgloader_msg_dco_swing1_amode_reg_t*) PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_AMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_TDC4_AMODE_REG(_BASE) ((pma_txpllcfgloader_msg_tdc4_amode_reg_t*) PMA_TXPLLCFGLOADER_MSG_TDC4_AMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_DIV0_BMODE_REG(_BASE) ((pma_txpllcfgloader_msg_div0_bmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_DIV0_BMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_DIV1_BMODE_REG(_BASE) ((pma_txpllcfgloader_msg_div1_bmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_DIV1_BMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_ADL0_BMODE_REG(_BASE) ((pma_txpllcfgloader_msg_adl0_bmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_ADL0_BMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_ADL1_BMODE_REG(_BASE) ((pma_txpllcfgloader_msg_adl1_bmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_ADL1_BMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_BMODE_REG(_BASE) ((pma_txpllcfgloader_msg_frac_lock0_bmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_BMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_BMODE_REG(_BASE) ((pma_txpllcfgloader_msg_frac_lock1_bmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_BMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_REG(_BASE) ((pma_txpllcfgloader_msg_tdc0_bmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_TDC0_BMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_REG(_BASE) ((pma_txpllcfgloader_msg_tdc1_bmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_TDC1_BMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_TDC2_BMODE_REG(_BASE) ((pma_txpllcfgloader_msg_tdc2_bmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_TDC2_BMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_TDC3_BMODE_REG(_BASE) ((pma_txpllcfgloader_msg_tdc3_bmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_TDC3_BMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_REG(_BASE) ((pma_txpllcfgloader_msg_tap_ovrd_bmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_BMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_BMODE_REG(_BASE) ((pma_txpllcfgloader_msg_dfx_dco_bmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_DFX_DCO_BMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_BMODE_REG(_BASE) ((pma_txpllcfgloader_msg_dfx_tdc_cro_bmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_BMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_BMODE_REG(_BASE) ((pma_txpllcfgloader_msg_visa_ctrl_bmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_BMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_BMODE_REG(_BASE) ((pma_txpllcfgloader_msg_visa_lane0_sel_bmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_BMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_BMODE_REG(_BASE) ((pma_txpllcfgloader_msg_visa_lane1_sel_bmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_BMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_BMODE_REG(_BASE) ((pma_txpllcfgloader_msg_cntr_bist_settings_bmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_BMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_BMODE_REG(_BASE) ((pma_txpllcfgloader_msg_calib0_bmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_CALIB0_BMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_BMODE_REG(_BASE) ((pma_txpllcfgloader_msg_calib1_bmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_CALIB1_BMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_BMODE_REG(_BASE) ((pma_txpllcfgloader_msg_calib2_bmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_CALIB2_BMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_REG(_BASE) ((pma_txpllcfgloader_msg_pll_fsm_ctrl_bmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_BMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_BMODE_REG(_BASE) ((pma_txpllcfgloader_msg_temp_tracking_bmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_BMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_REG(_BASE) ((pma_txpllcfgloader_msg_ana_ctrl1_bmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_BMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_BMODE_REG(_BASE) ((pma_txpllcfgloader_msg_ana_ctrl2_bmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_BMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_BMODE_REG(_BASE) ((pma_txpllcfgloader_msg_ana_ctrl3_bmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_BMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_DFX0_BMODE_REG(_BASE) ((pma_txpllcfgloader_msg_dfx0_bmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_DFX0_BMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_DFX1_BMODE_REG(_BASE) ((pma_txpllcfgloader_msg_dfx1_bmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_DFX1_BMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_LDO0_BMODE_REG(_BASE) ((pma_txpllcfgloader_msg_ldo0_bmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_LDO0_BMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_LDO1_BMODE_REG(_BASE) ((pma_txpllcfgloader_msg_ldo1_bmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_LDO1_BMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_BMODE_REG(_BASE) ((pma_txpllcfgloader_msg_kvcc0_bmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_KVCC0_BMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_BMODE_REG(_BASE) ((pma_txpllcfgloader_msg_kvcc1_bmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_KVCC1_BMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_REG(_BASE) ((pma_txpllcfgloader_msg_kvcc2_bmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_KVCC2_BMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_SPARE0_BMODE_REG(_BASE) ((pma_txpllcfgloader_msg_spare0_bmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_SPARE0_BMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_SPARE1_BMODE_REG(_BASE) ((pma_txpllcfgloader_msg_spare1_bmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_SPARE1_BMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_REG(_BASE) ((pma_txpllcfgloader_msg_dco_swing0_bmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_BMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_BMODE_REG(_BASE) ((pma_txpllcfgloader_msg_dco_swing1_bmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_BMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_TDC4_BMODE_REG(_BASE) ((pma_txpllcfgloader_msg_tdc4_bmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_TDC4_BMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_DIV0_CMODE_REG(_BASE) ((pma_txpllcfgloader_msg_div0_cmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_DIV0_CMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_DIV1_CMODE_REG(_BASE) ((pma_txpllcfgloader_msg_div1_cmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_DIV1_CMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_ADL0_CMODE_REG(_BASE) ((pma_txpllcfgloader_msg_adl0_cmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_ADL0_CMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_ADL1_CMODE_REG(_BASE) ((pma_txpllcfgloader_msg_adl1_cmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_ADL1_CMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_CMODE_REG(_BASE) ((pma_txpllcfgloader_msg_frac_lock0_cmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_CMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_CMODE_REG(_BASE) ((pma_txpllcfgloader_msg_frac_lock1_cmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_CMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_REG(_BASE) ((pma_txpllcfgloader_msg_tdc0_cmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_TDC0_CMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_REG(_BASE) ((pma_txpllcfgloader_msg_tdc1_cmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_TDC1_CMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_TDC2_CMODE_REG(_BASE) ((pma_txpllcfgloader_msg_tdc2_cmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_TDC2_CMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_TDC3_CMODE_REG(_BASE) ((pma_txpllcfgloader_msg_tdc3_cmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_TDC3_CMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_REG(_BASE) ((pma_txpllcfgloader_msg_tap_ovrd_cmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_CMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_CMODE_REG(_BASE) ((pma_txpllcfgloader_msg_dfx_dco_cmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_DFX_DCO_CMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_CMODE_REG(_BASE) ((pma_txpllcfgloader_msg_dfx_tdc_cro_cmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_CMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_CMODE_REG(_BASE) ((pma_txpllcfgloader_msg_visa_ctrl_cmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_CMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_CMODE_REG(_BASE) ((pma_txpllcfgloader_msg_visa_lane0_sel_cmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_CMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_CMODE_REG(_BASE) ((pma_txpllcfgloader_msg_visa_lane1_sel_cmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_CMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_CMODE_REG(_BASE) ((pma_txpllcfgloader_msg_cntr_bist_settings_cmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_CMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_CMODE_REG(_BASE) ((pma_txpllcfgloader_msg_calib0_cmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_CALIB0_CMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_CMODE_REG(_BASE) ((pma_txpllcfgloader_msg_calib1_cmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_CALIB1_CMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_CMODE_REG(_BASE) ((pma_txpllcfgloader_msg_calib2_cmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_CALIB2_CMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_REG(_BASE) ((pma_txpllcfgloader_msg_pll_fsm_ctrl_cmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_CMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_CMODE_REG(_BASE) ((pma_txpllcfgloader_msg_temp_tracking_cmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_CMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_REG(_BASE) ((pma_txpllcfgloader_msg_ana_ctrl1_cmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_CMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_CMODE_REG(_BASE) ((pma_txpllcfgloader_msg_ana_ctrl2_cmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_CMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_CMODE_REG(_BASE) ((pma_txpllcfgloader_msg_ana_ctrl3_cmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_CMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_DFX0_CMODE_REG(_BASE) ((pma_txpllcfgloader_msg_dfx0_cmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_DFX0_CMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_DFX1_CMODE_REG(_BASE) ((pma_txpllcfgloader_msg_dfx1_cmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_DFX1_CMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_LDO0_CMODE_REG(_BASE) ((pma_txpllcfgloader_msg_ldo0_cmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_LDO0_CMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_LDO1_CMODE_REG(_BASE) ((pma_txpllcfgloader_msg_ldo1_cmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_LDO1_CMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_CMODE_REG(_BASE) ((pma_txpllcfgloader_msg_kvcc0_cmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_KVCC0_CMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_CMODE_REG(_BASE) ((pma_txpllcfgloader_msg_kvcc1_cmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_KVCC1_CMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_REG(_BASE) ((pma_txpllcfgloader_msg_kvcc2_cmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_KVCC2_CMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_SPARE0_CMODE_REG(_BASE) ((pma_txpllcfgloader_msg_spare0_cmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_SPARE0_CMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_SPARE1_CMODE_REG(_BASE) ((pma_txpllcfgloader_msg_spare1_cmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_SPARE1_CMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_REG(_BASE) ((pma_txpllcfgloader_msg_dco_swing0_cmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_CMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_CMODE_REG(_BASE) ((pma_txpllcfgloader_msg_dco_swing1_cmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_CMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_TDC4_CMODE_REG(_BASE) ((pma_txpllcfgloader_msg_tdc4_cmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_TDC4_CMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_DIV0_DMODE_REG(_BASE) ((pma_txpllcfgloader_msg_div0_dmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_DIV0_DMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_DIV1_DMODE_REG(_BASE) ((pma_txpllcfgloader_msg_div1_dmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_DIV1_DMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_ADL0_DMODE_REG(_BASE) ((pma_txpllcfgloader_msg_adl0_dmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_ADL0_DMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_ADL1_DMODE_REG(_BASE) ((pma_txpllcfgloader_msg_adl1_dmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_ADL1_DMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_DMODE_REG(_BASE) ((pma_txpllcfgloader_msg_frac_lock0_dmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_DMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_DMODE_REG(_BASE) ((pma_txpllcfgloader_msg_frac_lock1_dmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_DMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_REG(_BASE) ((pma_txpllcfgloader_msg_tdc0_dmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_TDC0_DMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_REG(_BASE) ((pma_txpllcfgloader_msg_tdc1_dmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_TDC1_DMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_TDC2_DMODE_REG(_BASE) ((pma_txpllcfgloader_msg_tdc2_dmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_TDC2_DMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_TDC3_DMODE_REG(_BASE) ((pma_txpllcfgloader_msg_tdc3_dmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_TDC3_DMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_REG(_BASE) ((pma_txpllcfgloader_msg_tap_ovrd_dmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_DMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_DMODE_REG(_BASE) ((pma_txpllcfgloader_msg_dfx_dco_dmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_DFX_DCO_DMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_DMODE_REG(_BASE) ((pma_txpllcfgloader_msg_dfx_tdc_cro_dmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_DMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_DMODE_REG(_BASE) ((pma_txpllcfgloader_msg_visa_ctrl_dmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_DMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_DMODE_REG(_BASE) ((pma_txpllcfgloader_msg_visa_lane0_sel_dmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_DMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_DMODE_REG(_BASE) ((pma_txpllcfgloader_msg_visa_lane1_sel_dmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_DMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_DMODE_REG(_BASE) ((pma_txpllcfgloader_msg_cntr_bist_settings_dmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_DMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_DMODE_REG(_BASE) ((pma_txpllcfgloader_msg_calib0_dmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_CALIB0_DMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_DMODE_REG(_BASE) ((pma_txpllcfgloader_msg_calib1_dmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_CALIB1_DMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_DMODE_REG(_BASE) ((pma_txpllcfgloader_msg_calib2_dmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_CALIB2_DMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_REG(_BASE) ((pma_txpllcfgloader_msg_pll_fsm_ctrl_dmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_DMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_DMODE_REG(_BASE) ((pma_txpllcfgloader_msg_temp_tracking_dmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_DMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_REG(_BASE) ((pma_txpllcfgloader_msg_ana_ctrl1_dmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_DMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_DMODE_REG(_BASE) ((pma_txpllcfgloader_msg_ana_ctrl2_dmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_DMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_DMODE_REG(_BASE) ((pma_txpllcfgloader_msg_ana_ctrl3_dmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_DMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_DFX0_DMODE_REG(_BASE) ((pma_txpllcfgloader_msg_dfx0_dmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_DFX0_DMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_DFX1_DMODE_REG(_BASE) ((pma_txpllcfgloader_msg_dfx1_dmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_DFX1_DMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_LDO0_DMODE_REG(_BASE) ((pma_txpllcfgloader_msg_ldo0_dmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_LDO0_DMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_LDO1_DMODE_REG(_BASE) ((pma_txpllcfgloader_msg_ldo1_dmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_LDO1_DMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_DMODE_REG(_BASE) ((pma_txpllcfgloader_msg_kvcc0_dmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_KVCC0_DMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_DMODE_REG(_BASE) ((pma_txpllcfgloader_msg_kvcc1_dmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_KVCC1_DMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_REG(_BASE) ((pma_txpllcfgloader_msg_kvcc2_dmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_KVCC2_DMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_SPARE0_DMODE_REG(_BASE) ((pma_txpllcfgloader_msg_spare0_dmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_SPARE0_DMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_SPARE1_DMODE_REG(_BASE) ((pma_txpllcfgloader_msg_spare1_dmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_SPARE1_DMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_REG(_BASE) ((pma_txpllcfgloader_msg_dco_swing0_dmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_DMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_DMODE_REG(_BASE) ((pma_txpllcfgloader_msg_dco_swing1_dmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_DMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_TDC4_DMODE_REG(_BASE) ((pma_txpllcfgloader_msg_tdc4_dmode_reg_t*) PMA_TXPLLCFGLOADER_MSG_TDC4_DMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_DIV0_EMODE_REG(_BASE) ((pma_txpllcfgloader_msg_div0_emode_reg_t*) PMA_TXPLLCFGLOADER_MSG_DIV0_EMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_DIV1_EMODE_REG(_BASE) ((pma_txpllcfgloader_msg_div1_emode_reg_t*) PMA_TXPLLCFGLOADER_MSG_DIV1_EMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_ADL0_EMODE_REG(_BASE) ((pma_txpllcfgloader_msg_adl0_emode_reg_t*) PMA_TXPLLCFGLOADER_MSG_ADL0_EMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_ADL1_EMODE_REG(_BASE) ((pma_txpllcfgloader_msg_adl1_emode_reg_t*) PMA_TXPLLCFGLOADER_MSG_ADL1_EMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_EMODE_REG(_BASE) ((pma_txpllcfgloader_msg_frac_lock0_emode_reg_t*) PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK0_EMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_EMODE_REG(_BASE) ((pma_txpllcfgloader_msg_frac_lock1_emode_reg_t*) PMA_TXPLLCFGLOADER_MSG_FRAC_LOCK1_EMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_REG(_BASE) ((pma_txpllcfgloader_msg_tdc0_emode_reg_t*) PMA_TXPLLCFGLOADER_MSG_TDC0_EMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_REG(_BASE) ((pma_txpllcfgloader_msg_tdc1_emode_reg_t*) PMA_TXPLLCFGLOADER_MSG_TDC1_EMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_TDC2_EMODE_REG(_BASE) ((pma_txpllcfgloader_msg_tdc2_emode_reg_t*) PMA_TXPLLCFGLOADER_MSG_TDC2_EMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_TDC3_EMODE_REG(_BASE) ((pma_txpllcfgloader_msg_tdc3_emode_reg_t*) PMA_TXPLLCFGLOADER_MSG_TDC3_EMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_REG(_BASE) ((pma_txpllcfgloader_msg_tap_ovrd_emode_reg_t*) PMA_TXPLLCFGLOADER_MSG_TAP_OVRD_EMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_DFX_DCO_EMODE_REG(_BASE) ((pma_txpllcfgloader_msg_dfx_dco_emode_reg_t*) PMA_TXPLLCFGLOADER_MSG_DFX_DCO_EMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_EMODE_REG(_BASE) ((pma_txpllcfgloader_msg_dfx_tdc_cro_emode_reg_t*) PMA_TXPLLCFGLOADER_MSG_DFX_TDC_CRO_EMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_EMODE_REG(_BASE) ((pma_txpllcfgloader_msg_visa_ctrl_emode_reg_t*) PMA_TXPLLCFGLOADER_MSG_VISA_CTRL_EMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_EMODE_REG(_BASE) ((pma_txpllcfgloader_msg_visa_lane0_sel_emode_reg_t*) PMA_TXPLLCFGLOADER_MSG_VISA_LANE0_SEL_EMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_EMODE_REG(_BASE) ((pma_txpllcfgloader_msg_visa_lane1_sel_emode_reg_t*) PMA_TXPLLCFGLOADER_MSG_VISA_LANE1_SEL_EMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_EMODE_REG(_BASE) ((pma_txpllcfgloader_msg_cntr_bist_settings_emode_reg_t*) PMA_TXPLLCFGLOADER_MSG_CNTR_BIST_SETTINGS_EMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_CALIB0_EMODE_REG(_BASE) ((pma_txpllcfgloader_msg_calib0_emode_reg_t*) PMA_TXPLLCFGLOADER_MSG_CALIB0_EMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_CALIB1_EMODE_REG(_BASE) ((pma_txpllcfgloader_msg_calib1_emode_reg_t*) PMA_TXPLLCFGLOADER_MSG_CALIB1_EMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_CALIB2_EMODE_REG(_BASE) ((pma_txpllcfgloader_msg_calib2_emode_reg_t*) PMA_TXPLLCFGLOADER_MSG_CALIB2_EMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_REG(_BASE) ((pma_txpllcfgloader_msg_pll_fsm_ctrl_emode_reg_t*) PMA_TXPLLCFGLOADER_MSG_PLL_FSM_CTRL_EMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_EMODE_REG(_BASE) ((pma_txpllcfgloader_msg_temp_tracking_emode_reg_t*) PMA_TXPLLCFGLOADER_MSG_TEMP_TRACKING_EMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_REG(_BASE) ((pma_txpllcfgloader_msg_ana_ctrl1_emode_reg_t*) PMA_TXPLLCFGLOADER_MSG_ANA_CTRL1_EMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_EMODE_REG(_BASE) ((pma_txpllcfgloader_msg_ana_ctrl2_emode_reg_t*) PMA_TXPLLCFGLOADER_MSG_ANA_CTRL2_EMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_EMODE_REG(_BASE) ((pma_txpllcfgloader_msg_ana_ctrl3_emode_reg_t*) PMA_TXPLLCFGLOADER_MSG_ANA_CTRL3_EMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_DFX0_EMODE_REG(_BASE) ((pma_txpllcfgloader_msg_dfx0_emode_reg_t*) PMA_TXPLLCFGLOADER_MSG_DFX0_EMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_DFX1_EMODE_REG(_BASE) ((pma_txpllcfgloader_msg_dfx1_emode_reg_t*) PMA_TXPLLCFGLOADER_MSG_DFX1_EMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_LDO0_EMODE_REG(_BASE) ((pma_txpllcfgloader_msg_ldo0_emode_reg_t*) PMA_TXPLLCFGLOADER_MSG_LDO0_EMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_LDO1_EMODE_REG(_BASE) ((pma_txpllcfgloader_msg_ldo1_emode_reg_t*) PMA_TXPLLCFGLOADER_MSG_LDO1_EMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_KVCC0_EMODE_REG(_BASE) ((pma_txpllcfgloader_msg_kvcc0_emode_reg_t*) PMA_TXPLLCFGLOADER_MSG_KVCC0_EMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_KVCC1_EMODE_REG(_BASE) ((pma_txpllcfgloader_msg_kvcc1_emode_reg_t*) PMA_TXPLLCFGLOADER_MSG_KVCC1_EMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_REG(_BASE) ((pma_txpllcfgloader_msg_kvcc2_emode_reg_t*) PMA_TXPLLCFGLOADER_MSG_KVCC2_EMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_SPARE0_EMODE_REG(_BASE) ((pma_txpllcfgloader_msg_spare0_emode_reg_t*) PMA_TXPLLCFGLOADER_MSG_SPARE0_EMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_SPARE1_EMODE_REG(_BASE) ((pma_txpllcfgloader_msg_spare1_emode_reg_t*) PMA_TXPLLCFGLOADER_MSG_SPARE1_EMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_REG(_BASE) ((pma_txpllcfgloader_msg_dco_swing0_emode_reg_t*) PMA_TXPLLCFGLOADER_MSG_DCO_SWING0_EMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_EMODE_REG(_BASE) ((pma_txpllcfgloader_msg_dco_swing1_emode_reg_t*) PMA_TXPLLCFGLOADER_MSG_DCO_SWING1_EMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_TDC4_EMODE_REG(_BASE) ((pma_txpllcfgloader_msg_tdc4_emode_reg_t*) PMA_TXPLLCFGLOADER_MSG_TDC4_EMODE_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_RW_SPARE_0_REG(_BASE) ((pma_txpllcfgloader_msg_rw_spare_0_reg_t*) PMA_TXPLLCFGLOADER_MSG_RW_SPARE_0_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_RW_SPARE_1_REG(_BASE) ((pma_txpllcfgloader_msg_rw_spare_1_reg_t*) PMA_TXPLLCFGLOADER_MSG_RW_SPARE_1_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_RW_SPARE_2_REG(_BASE) ((pma_txpllcfgloader_msg_rw_spare_2_reg_t*) PMA_TXPLLCFGLOADER_MSG_RW_SPARE_2_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_RW_SPARE_3_REG(_BASE) ((pma_txpllcfgloader_msg_rw_spare_3_reg_t*) PMA_TXPLLCFGLOADER_MSG_RW_SPARE_3_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_RO_SPARE_0_REG(_BASE) ((pma_txpllcfgloader_msg_ro_spare_0_reg_t*) PMA_TXPLLCFGLOADER_MSG_RO_SPARE_0_ADR(_BASE))
#define PMA_TXPLLCFGLOADER_MSG_RO_SPARE_1_REG(_BASE) ((pma_txpllcfgloader_msg_ro_spare_1_reg_t*) PMA_TXPLLCFGLOADER_MSG_RO_SPARE_1_ADR(_BASE))

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    pma_txpllcfgloader_msg_cfg_reg_t TXPLLCFGLOADER_CFG; /*< Address offset = 0x0 */
    pma_txpllcfgloader_msg_stat_reg_t TXPLLCFGLOADER_STAT; /*< Address offset = 0x4 */
    pma_txpllcfgloader_msg_dwmask_amode_0_reg_t TXPLLCFGLOADER_DWMASK_AMODE_0; /*< Address offset = 0x8 */
    pma_txpllcfgloader_msg_dwmask_amode_1_reg_t TXPLLCFGLOADER_DWMASK_AMODE_1; /*< Address offset = 0xc */
    pma_txpllcfgloader_msg_dwmask_bmode_0_reg_t TXPLLCFGLOADER_DWMASK_BMODE_0; /*< Address offset = 0x10 */
    pma_txpllcfgloader_msg_dwmask_bmode_1_reg_t TXPLLCFGLOADER_DWMASK_BMODE_1; /*< Address offset = 0x14 */
    pma_txpllcfgloader_msg_dwmask_cmode_0_reg_t TXPLLCFGLOADER_DWMASK_CMODE_0; /*< Address offset = 0x18 */
    pma_txpllcfgloader_msg_dwmask_cmode_1_reg_t TXPLLCFGLOADER_DWMASK_CMODE_1; /*< Address offset = 0x1c */
    pma_txpllcfgloader_msg_dwmask_dmode_0_reg_t TXPLLCFGLOADER_DWMASK_DMODE_0; /*< Address offset = 0x20 */
    pma_txpllcfgloader_msg_dwmask_dmode_1_reg_t TXPLLCFGLOADER_DWMASK_DMODE_1; /*< Address offset = 0x24 */
    pma_txpllcfgloader_msg_dwmask_emode_0_reg_t TXPLLCFGLOADER_DWMASK_EMODE_0; /*< Address offset = 0x28 */
    pma_txpllcfgloader_msg_dwmask_emode_1_reg_t TXPLLCFGLOADER_DWMASK_EMODE_1; /*< Address offset = 0x2c */
    const uint8_t        reservedArea0 [112]; /*< Address offset = 0x30 */
    pma_txpllcfgloader_msg_div0_amode_reg_t TXPLLCFGLOADER_DIV0_AMODE; /*< Address offset = 0xa0 */
    pma_txpllcfgloader_msg_div1_amode_reg_t TXPLLCFGLOADER_DIV1_AMODE; /*< Address offset = 0xa4 */
    pma_txpllcfgloader_msg_adl0_amode_reg_t TXPLLCFGLOADER_ADL0_AMODE; /*< Address offset = 0xa8 */
    pma_txpllcfgloader_msg_adl1_amode_reg_t TXPLLCFGLOADER_ADL1_AMODE; /*< Address offset = 0xac */
    pma_txpllcfgloader_msg_frac_lock0_amode_reg_t TXPLLCFGLOADER_FRAC_LOCK0_AMODE; /*< Address offset = 0xb0 */
    pma_txpllcfgloader_msg_frac_lock1_amode_reg_t TXPLLCFGLOADER_FRAC_LOCK1_AMODE; /*< Address offset = 0xb4 */
    pma_txpllcfgloader_msg_tdc0_amode_reg_t TXPLLCFGLOADER_TDC0_AMODE; /*< Address offset = 0xb8 */
    pma_txpllcfgloader_msg_tdc1_amode_reg_t TXPLLCFGLOADER_TDC1_AMODE; /*< Address offset = 0xbc */
    pma_txpllcfgloader_msg_tdc2_amode_reg_t TXPLLCFGLOADER_TDC2_AMODE; /*< Address offset = 0xc0 */
    pma_txpllcfgloader_msg_tdc3_amode_reg_t TXPLLCFGLOADER_TDC3_AMODE; /*< Address offset = 0xc4 */
    pma_txpllcfgloader_msg_tap_ovrd_amode_reg_t TXPLLCFGLOADER_TAP_OVRD_AMODE; /*< Address offset = 0xc8 */
    pma_txpllcfgloader_msg_dfx_dco_amode_reg_t TXPLLCFGLOADER_DFX_DCO_AMODE; /*< Address offset = 0xcc */
    pma_txpllcfgloader_msg_dfx_tdc_cro_amode_reg_t TXPLLCFGLOADER_DFX_TDC_CRO_AMODE; /*< Address offset = 0xd0 */
    pma_txpllcfgloader_msg_visa_ctrl_amode_reg_t TXPLLCFGLOADER_VISA_CTRL_AMODE; /*< Address offset = 0xd4 */
    pma_txpllcfgloader_msg_visa_lane0_sel_amode_reg_t TXPLLCFGLOADER_VISA_LANE0_SEL_AMODE; /*< Address offset = 0xd8 */
    pma_txpllcfgloader_msg_visa_lane1_sel_amode_reg_t TXPLLCFGLOADER_VISA_LANE1_SEL_AMODE; /*< Address offset = 0xdc */
    pma_txpllcfgloader_msg_cntr_bist_settings_amode_reg_t TXPLLCFGLOADER_CNTR_BIST_SETTINGS_AMODE; /*< Address offset = 0xe0 */
    pma_txpllcfgloader_msg_calib0_amode_reg_t TXPLLCFGLOADER_CALIB0_AMODE; /*< Address offset = 0xe4 */
    pma_txpllcfgloader_msg_calib1_amode_reg_t TXPLLCFGLOADER_CALIB1_AMODE; /*< Address offset = 0xe8 */
    pma_txpllcfgloader_msg_calib2_amode_reg_t TXPLLCFGLOADER_CALIB2_AMODE; /*< Address offset = 0xec */
    pma_txpllcfgloader_msg_pll_fsm_ctrl_amode_reg_t TXPLLCFGLOADER_PLL_FSM_CTRL_AMODE; /*< Address offset = 0xf0 */
    pma_txpllcfgloader_msg_temp_tracking_amode_reg_t TXPLLCFGLOADER_TEMP_TRACKING_AMODE; /*< Address offset = 0xf4 */
    pma_txpllcfgloader_msg_ana_ctrl1_amode_reg_t TXPLLCFGLOADER_ANA_CTRL1_AMODE; /*< Address offset = 0xf8 */
    pma_txpllcfgloader_msg_ana_ctrl2_amode_reg_t TXPLLCFGLOADER_ANA_CTRL2_AMODE; /*< Address offset = 0xfc */
    pma_txpllcfgloader_msg_ana_ctrl3_amode_reg_t TXPLLCFGLOADER_ANA_CTRL3_AMODE; /*< Address offset = 0x100 */
    pma_txpllcfgloader_msg_dfx0_amode_reg_t TXPLLCFGLOADER_DFX0_AMODE; /*< Address offset = 0x104 */
    pma_txpllcfgloader_msg_dfx1_amode_reg_t TXPLLCFGLOADER_DFX1_AMODE; /*< Address offset = 0x108 */
    pma_txpllcfgloader_msg_ldo0_amode_reg_t TXPLLCFGLOADER_LDO0_AMODE; /*< Address offset = 0x10c */
    pma_txpllcfgloader_msg_ldo1_amode_reg_t TXPLLCFGLOADER_LDO1_AMODE; /*< Address offset = 0x110 */
    pma_txpllcfgloader_msg_kvcc0_amode_reg_t TXPLLCFGLOADER_KVCC0_AMODE; /*< Address offset = 0x114 */
    pma_txpllcfgloader_msg_kvcc1_amode_reg_t TXPLLCFGLOADER_KVCC1_AMODE; /*< Address offset = 0x118 */
    pma_txpllcfgloader_msg_kvcc2_amode_reg_t TXPLLCFGLOADER_KVCC2_AMODE; /*< Address offset = 0x11c */
    pma_txpllcfgloader_msg_spare0_amode_reg_t TXPLLCFGLOADER_SPARE0_AMODE; /*< Address offset = 0x120 */
    pma_txpllcfgloader_msg_spare1_amode_reg_t TXPLLCFGLOADER_SPARE1_AMODE; /*< Address offset = 0x124 */
    pma_txpllcfgloader_msg_dco_swing0_amode_reg_t TXPLLCFGLOADER_DCO_SWING0_AMODE; /*< Address offset = 0x128 */
    pma_txpllcfgloader_msg_dco_swing1_amode_reg_t TXPLLCFGLOADER_DCO_SWING1_AMODE; /*< Address offset = 0x12c */
    pma_txpllcfgloader_msg_tdc4_amode_reg_t TXPLLCFGLOADER_TDC4_AMODE; /*< Address offset = 0x130 */
    const uint8_t        reservedArea1 [12];  /*< Address offset = 0x134 */
    pma_txpllcfgloader_msg_div0_bmode_reg_t TXPLLCFGLOADER_DIV0_BMODE; /*< Address offset = 0x140 */
    pma_txpllcfgloader_msg_div1_bmode_reg_t TXPLLCFGLOADER_DIV1_BMODE; /*< Address offset = 0x144 */
    pma_txpllcfgloader_msg_adl0_bmode_reg_t TXPLLCFGLOADER_ADL0_BMODE; /*< Address offset = 0x148 */
    pma_txpllcfgloader_msg_adl1_bmode_reg_t TXPLLCFGLOADER_ADL1_BMODE; /*< Address offset = 0x14c */
    pma_txpllcfgloader_msg_frac_lock0_bmode_reg_t TXPLLCFGLOADER_FRAC_LOCK0_BMODE; /*< Address offset = 0x150 */
    pma_txpllcfgloader_msg_frac_lock1_bmode_reg_t TXPLLCFGLOADER_FRAC_LOCK1_BMODE; /*< Address offset = 0x154 */
    pma_txpllcfgloader_msg_tdc0_bmode_reg_t TXPLLCFGLOADER_TDC0_BMODE; /*< Address offset = 0x158 */
    pma_txpllcfgloader_msg_tdc1_bmode_reg_t TXPLLCFGLOADER_TDC1_BMODE; /*< Address offset = 0x15c */
    pma_txpllcfgloader_msg_tdc2_bmode_reg_t TXPLLCFGLOADER_TDC2_BMODE; /*< Address offset = 0x160 */
    pma_txpllcfgloader_msg_tdc3_bmode_reg_t TXPLLCFGLOADER_TDC3_BMODE; /*< Address offset = 0x164 */
    pma_txpllcfgloader_msg_tap_ovrd_bmode_reg_t TXPLLCFGLOADER_TAP_OVRD_BMODE; /*< Address offset = 0x168 */
    pma_txpllcfgloader_msg_dfx_dco_bmode_reg_t TXPLLCFGLOADER_DFX_DCO_BMODE; /*< Address offset = 0x16c */
    pma_txpllcfgloader_msg_dfx_tdc_cro_bmode_reg_t TXPLLCFGLOADER_DFX_TDC_CRO_BMODE; /*< Address offset = 0x170 */
    pma_txpllcfgloader_msg_visa_ctrl_bmode_reg_t TXPLLCFGLOADER_VISA_CTRL_BMODE; /*< Address offset = 0x174 */
    pma_txpllcfgloader_msg_visa_lane0_sel_bmode_reg_t TXPLLCFGLOADER_VISA_LANE0_SEL_BMODE; /*< Address offset = 0x178 */
    pma_txpllcfgloader_msg_visa_lane1_sel_bmode_reg_t TXPLLCFGLOADER_VISA_LANE1_SEL_BMODE; /*< Address offset = 0x17c */
    pma_txpllcfgloader_msg_cntr_bist_settings_bmode_reg_t TXPLLCFGLOADER_CNTR_BIST_SETTINGS_BMODE; /*< Address offset = 0x180 */
    pma_txpllcfgloader_msg_calib0_bmode_reg_t TXPLLCFGLOADER_CALIB0_BMODE; /*< Address offset = 0x184 */
    pma_txpllcfgloader_msg_calib1_bmode_reg_t TXPLLCFGLOADER_CALIB1_BMODE; /*< Address offset = 0x188 */
    pma_txpllcfgloader_msg_calib2_bmode_reg_t TXPLLCFGLOADER_CALIB2_BMODE; /*< Address offset = 0x18c */
    pma_txpllcfgloader_msg_pll_fsm_ctrl_bmode_reg_t TXPLLCFGLOADER_PLL_FSM_CTRL_BMODE; /*< Address offset = 0x190 */
    pma_txpllcfgloader_msg_temp_tracking_bmode_reg_t TXPLLCFGLOADER_TEMP_TRACKING_BMODE; /*< Address offset = 0x194 */
    pma_txpllcfgloader_msg_ana_ctrl1_bmode_reg_t TXPLLCFGLOADER_ANA_CTRL1_BMODE; /*< Address offset = 0x198 */
    pma_txpllcfgloader_msg_ana_ctrl2_bmode_reg_t TXPLLCFGLOADER_ANA_CTRL2_BMODE; /*< Address offset = 0x19c */
    pma_txpllcfgloader_msg_ana_ctrl3_bmode_reg_t TXPLLCFGLOADER_ANA_CTRL3_BMODE; /*< Address offset = 0x1a0 */
    pma_txpllcfgloader_msg_dfx0_bmode_reg_t TXPLLCFGLOADER_DFX0_BMODE; /*< Address offset = 0x1a4 */
    pma_txpllcfgloader_msg_dfx1_bmode_reg_t TXPLLCFGLOADER_DFX1_BMODE; /*< Address offset = 0x1a8 */
    pma_txpllcfgloader_msg_ldo0_bmode_reg_t TXPLLCFGLOADER_LDO0_BMODE; /*< Address offset = 0x1ac */
    pma_txpllcfgloader_msg_ldo1_bmode_reg_t TXPLLCFGLOADER_LDO1_BMODE; /*< Address offset = 0x1b0 */
    pma_txpllcfgloader_msg_kvcc0_bmode_reg_t TXPLLCFGLOADER_KVCC0_BMODE; /*< Address offset = 0x1b4 */
    pma_txpllcfgloader_msg_kvcc1_bmode_reg_t TXPLLCFGLOADER_KVCC1_BMODE; /*< Address offset = 0x1b8 */
    pma_txpllcfgloader_msg_kvcc2_bmode_reg_t TXPLLCFGLOADER_KVCC2_BMODE; /*< Address offset = 0x1bc */
    pma_txpllcfgloader_msg_spare0_bmode_reg_t TXPLLCFGLOADER_SPARE0_BMODE; /*< Address offset = 0x1c0 */
    pma_txpllcfgloader_msg_spare1_bmode_reg_t TXPLLCFGLOADER_SPARE1_BMODE; /*< Address offset = 0x1c4 */
    pma_txpllcfgloader_msg_dco_swing0_bmode_reg_t TXPLLCFGLOADER_DCO_SWING0_BMODE; /*< Address offset = 0x1c8 */
    pma_txpllcfgloader_msg_dco_swing1_bmode_reg_t TXPLLCFGLOADER_DCO_SWING1_BMODE; /*< Address offset = 0x1cc */
    pma_txpllcfgloader_msg_tdc4_bmode_reg_t TXPLLCFGLOADER_TDC4_BMODE; /*< Address offset = 0x1d0 */
    const uint8_t        reservedArea2 [12];  /*< Address offset = 0x1d4 */
    pma_txpllcfgloader_msg_div0_cmode_reg_t TXPLLCFGLOADER_DIV0_CMODE; /*< Address offset = 0x1e0 */
    pma_txpllcfgloader_msg_div1_cmode_reg_t TXPLLCFGLOADER_DIV1_CMODE; /*< Address offset = 0x1e4 */
    pma_txpllcfgloader_msg_adl0_cmode_reg_t TXPLLCFGLOADER_ADL0_CMODE; /*< Address offset = 0x1e8 */
    pma_txpllcfgloader_msg_adl1_cmode_reg_t TXPLLCFGLOADER_ADL1_CMODE; /*< Address offset = 0x1ec */
    pma_txpllcfgloader_msg_frac_lock0_cmode_reg_t TXPLLCFGLOADER_FRAC_LOCK0_CMODE; /*< Address offset = 0x1f0 */
    pma_txpllcfgloader_msg_frac_lock1_cmode_reg_t TXPLLCFGLOADER_FRAC_LOCK1_CMODE; /*< Address offset = 0x1f4 */
    pma_txpllcfgloader_msg_tdc0_cmode_reg_t TXPLLCFGLOADER_TDC0_CMODE; /*< Address offset = 0x1f8 */
    pma_txpllcfgloader_msg_tdc1_cmode_reg_t TXPLLCFGLOADER_TDC1_CMODE; /*< Address offset = 0x1fc */
    pma_txpllcfgloader_msg_tdc2_cmode_reg_t TXPLLCFGLOADER_TDC2_CMODE; /*< Address offset = 0x200 */
    pma_txpllcfgloader_msg_tdc3_cmode_reg_t TXPLLCFGLOADER_TDC3_CMODE; /*< Address offset = 0x204 */
    pma_txpllcfgloader_msg_tap_ovrd_cmode_reg_t TXPLLCFGLOADER_TAP_OVRD_CMODE; /*< Address offset = 0x208 */
    pma_txpllcfgloader_msg_dfx_dco_cmode_reg_t TXPLLCFGLOADER_DFX_DCO_CMODE; /*< Address offset = 0x20c */
    pma_txpllcfgloader_msg_dfx_tdc_cro_cmode_reg_t TXPLLCFGLOADER_DFX_TDC_CRO_CMODE; /*< Address offset = 0x210 */
    pma_txpllcfgloader_msg_visa_ctrl_cmode_reg_t TXPLLCFGLOADER_VISA_CTRL_CMODE; /*< Address offset = 0x214 */
    pma_txpllcfgloader_msg_visa_lane0_sel_cmode_reg_t TXPLLCFGLOADER_VISA_LANE0_SEL_CMODE; /*< Address offset = 0x218 */
    pma_txpllcfgloader_msg_visa_lane1_sel_cmode_reg_t TXPLLCFGLOADER_VISA_LANE1_SEL_CMODE; /*< Address offset = 0x21c */
    pma_txpllcfgloader_msg_cntr_bist_settings_cmode_reg_t TXPLLCFGLOADER_CNTR_BIST_SETTINGS_CMODE; /*< Address offset = 0x220 */
    pma_txpllcfgloader_msg_calib0_cmode_reg_t TXPLLCFGLOADER_CALIB0_CMODE; /*< Address offset = 0x224 */
    pma_txpllcfgloader_msg_calib1_cmode_reg_t TXPLLCFGLOADER_CALIB1_CMODE; /*< Address offset = 0x228 */
    pma_txpllcfgloader_msg_calib2_cmode_reg_t TXPLLCFGLOADER_CALIB2_CMODE; /*< Address offset = 0x22c */
    pma_txpllcfgloader_msg_pll_fsm_ctrl_cmode_reg_t TXPLLCFGLOADER_PLL_FSM_CTRL_CMODE; /*< Address offset = 0x230 */
    pma_txpllcfgloader_msg_temp_tracking_cmode_reg_t TXPLLCFGLOADER_TEMP_TRACKING_CMODE; /*< Address offset = 0x234 */
    pma_txpllcfgloader_msg_ana_ctrl1_cmode_reg_t TXPLLCFGLOADER_ANA_CTRL1_CMODE; /*< Address offset = 0x238 */
    pma_txpllcfgloader_msg_ana_ctrl2_cmode_reg_t TXPLLCFGLOADER_ANA_CTRL2_CMODE; /*< Address offset = 0x23c */
    pma_txpllcfgloader_msg_ana_ctrl3_cmode_reg_t TXPLLCFGLOADER_ANA_CTRL3_CMODE; /*< Address offset = 0x240 */
    pma_txpllcfgloader_msg_dfx0_cmode_reg_t TXPLLCFGLOADER_DFX0_CMODE; /*< Address offset = 0x244 */
    pma_txpllcfgloader_msg_dfx1_cmode_reg_t TXPLLCFGLOADER_DFX1_CMODE; /*< Address offset = 0x248 */
    pma_txpllcfgloader_msg_ldo0_cmode_reg_t TXPLLCFGLOADER_LDO0_CMODE; /*< Address offset = 0x24c */
    pma_txpllcfgloader_msg_ldo1_cmode_reg_t TXPLLCFGLOADER_LDO1_CMODE; /*< Address offset = 0x250 */
    pma_txpllcfgloader_msg_kvcc0_cmode_reg_t TXPLLCFGLOADER_KVCC0_CMODE; /*< Address offset = 0x254 */
    pma_txpllcfgloader_msg_kvcc1_cmode_reg_t TXPLLCFGLOADER_KVCC1_CMODE; /*< Address offset = 0x258 */
    pma_txpllcfgloader_msg_kvcc2_cmode_reg_t TXPLLCFGLOADER_KVCC2_CMODE; /*< Address offset = 0x25c */
    pma_txpllcfgloader_msg_spare0_cmode_reg_t TXPLLCFGLOADER_SPARE0_CMODE; /*< Address offset = 0x260 */
    pma_txpllcfgloader_msg_spare1_cmode_reg_t TXPLLCFGLOADER_SPARE1_CMODE; /*< Address offset = 0x264 */
    pma_txpllcfgloader_msg_dco_swing0_cmode_reg_t TXPLLCFGLOADER_DCO_SWING0_CMODE; /*< Address offset = 0x268 */
    pma_txpllcfgloader_msg_dco_swing1_cmode_reg_t TXPLLCFGLOADER_DCO_SWING1_CMODE; /*< Address offset = 0x26c */
    pma_txpllcfgloader_msg_tdc4_cmode_reg_t TXPLLCFGLOADER_TDC4_CMODE; /*< Address offset = 0x270 */
    const uint8_t        reservedArea3 [12];  /*< Address offset = 0x274 */
    pma_txpllcfgloader_msg_div0_dmode_reg_t TXPLLCFGLOADER_DIV0_DMODE; /*< Address offset = 0x280 */
    pma_txpllcfgloader_msg_div1_dmode_reg_t TXPLLCFGLOADER_DIV1_DMODE; /*< Address offset = 0x284 */
    pma_txpllcfgloader_msg_adl0_dmode_reg_t TXPLLCFGLOADER_ADL0_DMODE; /*< Address offset = 0x288 */
    pma_txpllcfgloader_msg_adl1_dmode_reg_t TXPLLCFGLOADER_ADL1_DMODE; /*< Address offset = 0x28c */
    pma_txpllcfgloader_msg_frac_lock0_dmode_reg_t TXPLLCFGLOADER_FRAC_LOCK0_DMODE; /*< Address offset = 0x290 */
    pma_txpllcfgloader_msg_frac_lock1_dmode_reg_t TXPLLCFGLOADER_FRAC_LOCK1_DMODE; /*< Address offset = 0x294 */
    pma_txpllcfgloader_msg_tdc0_dmode_reg_t TXPLLCFGLOADER_TDC0_DMODE; /*< Address offset = 0x298 */
    pma_txpllcfgloader_msg_tdc1_dmode_reg_t TXPLLCFGLOADER_TDC1_DMODE; /*< Address offset = 0x29c */
    pma_txpllcfgloader_msg_tdc2_dmode_reg_t TXPLLCFGLOADER_TDC2_DMODE; /*< Address offset = 0x2a0 */
    pma_txpllcfgloader_msg_tdc3_dmode_reg_t TXPLLCFGLOADER_TDC3_DMODE; /*< Address offset = 0x2a4 */
    pma_txpllcfgloader_msg_tap_ovrd_dmode_reg_t TXPLLCFGLOADER_TAP_OVRD_DMODE; /*< Address offset = 0x2a8 */
    pma_txpllcfgloader_msg_dfx_dco_dmode_reg_t TXPLLCFGLOADER_DFX_DCO_DMODE; /*< Address offset = 0x2ac */
    pma_txpllcfgloader_msg_dfx_tdc_cro_dmode_reg_t TXPLLCFGLOADER_DFX_TDC_CRO_DMODE; /*< Address offset = 0x2b0 */
    pma_txpllcfgloader_msg_visa_ctrl_dmode_reg_t TXPLLCFGLOADER_VISA_CTRL_DMODE; /*< Address offset = 0x2b4 */
    pma_txpllcfgloader_msg_visa_lane0_sel_dmode_reg_t TXPLLCFGLOADER_VISA_LANE0_SEL_DMODE; /*< Address offset = 0x2b8 */
    pma_txpllcfgloader_msg_visa_lane1_sel_dmode_reg_t TXPLLCFGLOADER_VISA_LANE1_SEL_DMODE; /*< Address offset = 0x2bc */
    pma_txpllcfgloader_msg_cntr_bist_settings_dmode_reg_t TXPLLCFGLOADER_CNTR_BIST_SETTINGS_DMODE; /*< Address offset = 0x2c0 */
    pma_txpllcfgloader_msg_calib0_dmode_reg_t TXPLLCFGLOADER_CALIB0_DMODE; /*< Address offset = 0x2c4 */
    pma_txpllcfgloader_msg_calib1_dmode_reg_t TXPLLCFGLOADER_CALIB1_DMODE; /*< Address offset = 0x2c8 */
    pma_txpllcfgloader_msg_calib2_dmode_reg_t TXPLLCFGLOADER_CALIB2_DMODE; /*< Address offset = 0x2cc */
    pma_txpllcfgloader_msg_pll_fsm_ctrl_dmode_reg_t TXPLLCFGLOADER_PLL_FSM_CTRL_DMODE; /*< Address offset = 0x2d0 */
    pma_txpllcfgloader_msg_temp_tracking_dmode_reg_t TXPLLCFGLOADER_TEMP_TRACKING_DMODE; /*< Address offset = 0x2d4 */
    pma_txpllcfgloader_msg_ana_ctrl1_dmode_reg_t TXPLLCFGLOADER_ANA_CTRL1_DMODE; /*< Address offset = 0x2d8 */
    pma_txpllcfgloader_msg_ana_ctrl2_dmode_reg_t TXPLLCFGLOADER_ANA_CTRL2_DMODE; /*< Address offset = 0x2dc */
    pma_txpllcfgloader_msg_ana_ctrl3_dmode_reg_t TXPLLCFGLOADER_ANA_CTRL3_DMODE; /*< Address offset = 0x2e0 */
    pma_txpllcfgloader_msg_dfx0_dmode_reg_t TXPLLCFGLOADER_DFX0_DMODE; /*< Address offset = 0x2e4 */
    pma_txpllcfgloader_msg_dfx1_dmode_reg_t TXPLLCFGLOADER_DFX1_DMODE; /*< Address offset = 0x2e8 */
    pma_txpllcfgloader_msg_ldo0_dmode_reg_t TXPLLCFGLOADER_LDO0_DMODE; /*< Address offset = 0x2ec */
    pma_txpllcfgloader_msg_ldo1_dmode_reg_t TXPLLCFGLOADER_LDO1_DMODE; /*< Address offset = 0x2f0 */
    pma_txpllcfgloader_msg_kvcc0_dmode_reg_t TXPLLCFGLOADER_KVCC0_DMODE; /*< Address offset = 0x2f4 */
    pma_txpllcfgloader_msg_kvcc1_dmode_reg_t TXPLLCFGLOADER_KVCC1_DMODE; /*< Address offset = 0x2f8 */
    pma_txpllcfgloader_msg_kvcc2_dmode_reg_t TXPLLCFGLOADER_KVCC2_DMODE; /*< Address offset = 0x2fc */
    pma_txpllcfgloader_msg_spare0_dmode_reg_t TXPLLCFGLOADER_SPARE0_DMODE; /*< Address offset = 0x300 */
    pma_txpllcfgloader_msg_spare1_dmode_reg_t TXPLLCFGLOADER_SPARE1_DMODE; /*< Address offset = 0x304 */
    pma_txpllcfgloader_msg_dco_swing0_dmode_reg_t TXPLLCFGLOADER_DCO_SWING0_DMODE; /*< Address offset = 0x308 */
    pma_txpllcfgloader_msg_dco_swing1_dmode_reg_t TXPLLCFGLOADER_DCO_SWING1_DMODE; /*< Address offset = 0x30c */
    pma_txpllcfgloader_msg_tdc4_dmode_reg_t TXPLLCFGLOADER_TDC4_DMODE; /*< Address offset = 0x310 */
    const uint8_t        reservedArea4 [12];  /*< Address offset = 0x314 */
    pma_txpllcfgloader_msg_div0_emode_reg_t TXPLLCFGLOADER_DIV0_EMODE; /*< Address offset = 0x320 */
    pma_txpllcfgloader_msg_div1_emode_reg_t TXPLLCFGLOADER_DIV1_EMODE; /*< Address offset = 0x324 */
    pma_txpllcfgloader_msg_adl0_emode_reg_t TXPLLCFGLOADER_ADL0_EMODE; /*< Address offset = 0x328 */
    pma_txpllcfgloader_msg_adl1_emode_reg_t TXPLLCFGLOADER_ADL1_EMODE; /*< Address offset = 0x32c */
    pma_txpllcfgloader_msg_frac_lock0_emode_reg_t TXPLLCFGLOADER_FRAC_LOCK0_EMODE; /*< Address offset = 0x330 */
    pma_txpllcfgloader_msg_frac_lock1_emode_reg_t TXPLLCFGLOADER_FRAC_LOCK1_EMODE; /*< Address offset = 0x334 */
    pma_txpllcfgloader_msg_tdc0_emode_reg_t TXPLLCFGLOADER_TDC0_EMODE; /*< Address offset = 0x338 */
    pma_txpllcfgloader_msg_tdc1_emode_reg_t TXPLLCFGLOADER_TDC1_EMODE; /*< Address offset = 0x33c */
    pma_txpllcfgloader_msg_tdc2_emode_reg_t TXPLLCFGLOADER_TDC2_EMODE; /*< Address offset = 0x340 */
    pma_txpllcfgloader_msg_tdc3_emode_reg_t TXPLLCFGLOADER_TDC3_EMODE; /*< Address offset = 0x344 */
    pma_txpllcfgloader_msg_tap_ovrd_emode_reg_t TXPLLCFGLOADER_TAP_OVRD_EMODE; /*< Address offset = 0x348 */
    pma_txpllcfgloader_msg_dfx_dco_emode_reg_t TXPLLCFGLOADER_DFX_DCO_EMODE; /*< Address offset = 0x34c */
    pma_txpllcfgloader_msg_dfx_tdc_cro_emode_reg_t TXPLLCFGLOADER_DFX_TDC_CRO_EMODE; /*< Address offset = 0x350 */
    pma_txpllcfgloader_msg_visa_ctrl_emode_reg_t TXPLLCFGLOADER_VISA_CTRL_EMODE; /*< Address offset = 0x354 */
    pma_txpllcfgloader_msg_visa_lane0_sel_emode_reg_t TXPLLCFGLOADER_VISA_LANE0_SEL_EMODE; /*< Address offset = 0x358 */
    pma_txpllcfgloader_msg_visa_lane1_sel_emode_reg_t TXPLLCFGLOADER_VISA_LANE1_SEL_EMODE; /*< Address offset = 0x35c */
    pma_txpllcfgloader_msg_cntr_bist_settings_emode_reg_t TXPLLCFGLOADER_CNTR_BIST_SETTINGS_EMODE; /*< Address offset = 0x360 */
    pma_txpllcfgloader_msg_calib0_emode_reg_t TXPLLCFGLOADER_CALIB0_EMODE; /*< Address offset = 0x364 */
    pma_txpllcfgloader_msg_calib1_emode_reg_t TXPLLCFGLOADER_CALIB1_EMODE; /*< Address offset = 0x368 */
    pma_txpllcfgloader_msg_calib2_emode_reg_t TXPLLCFGLOADER_CALIB2_EMODE; /*< Address offset = 0x36c */
    pma_txpllcfgloader_msg_pll_fsm_ctrl_emode_reg_t TXPLLCFGLOADER_PLL_FSM_CTRL_EMODE; /*< Address offset = 0x370 */
    pma_txpllcfgloader_msg_temp_tracking_emode_reg_t TXPLLCFGLOADER_TEMP_TRACKING_EMODE; /*< Address offset = 0x374 */
    pma_txpllcfgloader_msg_ana_ctrl1_emode_reg_t TXPLLCFGLOADER_ANA_CTRL1_EMODE; /*< Address offset = 0x378 */
    pma_txpllcfgloader_msg_ana_ctrl2_emode_reg_t TXPLLCFGLOADER_ANA_CTRL2_EMODE; /*< Address offset = 0x37c */
    pma_txpllcfgloader_msg_ana_ctrl3_emode_reg_t TXPLLCFGLOADER_ANA_CTRL3_EMODE; /*< Address offset = 0x380 */
    pma_txpllcfgloader_msg_dfx0_emode_reg_t TXPLLCFGLOADER_DFX0_EMODE; /*< Address offset = 0x384 */
    pma_txpllcfgloader_msg_dfx1_emode_reg_t TXPLLCFGLOADER_DFX1_EMODE; /*< Address offset = 0x388 */
    pma_txpllcfgloader_msg_ldo0_emode_reg_t TXPLLCFGLOADER_LDO0_EMODE; /*< Address offset = 0x38c */
    pma_txpllcfgloader_msg_ldo1_emode_reg_t TXPLLCFGLOADER_LDO1_EMODE; /*< Address offset = 0x390 */
    pma_txpllcfgloader_msg_kvcc0_emode_reg_t TXPLLCFGLOADER_KVCC0_EMODE; /*< Address offset = 0x394 */
    pma_txpllcfgloader_msg_kvcc1_emode_reg_t TXPLLCFGLOADER_KVCC1_EMODE; /*< Address offset = 0x398 */
    pma_txpllcfgloader_msg_kvcc2_emode_reg_t TXPLLCFGLOADER_KVCC2_EMODE; /*< Address offset = 0x39c */
    pma_txpllcfgloader_msg_spare0_emode_reg_t TXPLLCFGLOADER_SPARE0_EMODE; /*< Address offset = 0x3a0 */
    pma_txpllcfgloader_msg_spare1_emode_reg_t TXPLLCFGLOADER_SPARE1_EMODE; /*< Address offset = 0x3a4 */
    pma_txpllcfgloader_msg_dco_swing0_emode_reg_t TXPLLCFGLOADER_DCO_SWING0_EMODE; /*< Address offset = 0x3a8 */
    pma_txpllcfgloader_msg_dco_swing1_emode_reg_t TXPLLCFGLOADER_DCO_SWING1_EMODE; /*< Address offset = 0x3ac */
    pma_txpllcfgloader_msg_tdc4_emode_reg_t TXPLLCFGLOADER_TDC4_EMODE; /*< Address offset = 0x3b0 */
    const uint8_t        reservedArea5 [52];  /*< Address offset = 0x3b4 */
    pma_txpllcfgloader_msg_rw_spare_0_reg_t TXPLLCFGLOADER_RW_SPARE_0; /*< Address offset = 0x3e8 */
    pma_txpllcfgloader_msg_rw_spare_1_reg_t TXPLLCFGLOADER_RW_SPARE_1; /*< Address offset = 0x3ec */
    pma_txpllcfgloader_msg_rw_spare_2_reg_t TXPLLCFGLOADER_RW_SPARE_2; /*< Address offset = 0x3f0 */
    pma_txpllcfgloader_msg_rw_spare_3_reg_t TXPLLCFGLOADER_RW_SPARE_3; /*< Address offset = 0x3f4 */
    pma_txpllcfgloader_msg_ro_spare_0_reg_t TXPLLCFGLOADER_RO_SPARE_0; /*< Address offset = 0x3f8 */
    pma_txpllcfgloader_msg_ro_spare_1_reg_t TXPLLCFGLOADER_RO_SPARE_1; /*< Address offset = 0x3fc */
} pma_txpllcfgloader_msg_t;     // size: 0x032c

// AddressSpace struct pointer
//
#define DLNK_JESD0_PHY_PMA0_TXPLLCFGLOADER_GLOBAL  ((pma_txpllcfgloader_msg_t*) DLNK_JESD0_PHY_PMA0_TXPLLCFGLOADER_GLOBAL_BASE)
#define DLNK_JESD0_PHY_PMA0_TXPLLCFGLOADER_Q0      ((pma_txpllcfgloader_msg_t*) DLNK_JESD0_PHY_PMA0_TXPLLCFGLOADER_Q0_BASE)
#define DLNK_JESD0_PHY_PMA0_TXPLLCFGLOADER_Q1      ((pma_txpllcfgloader_msg_t*) DLNK_JESD0_PHY_PMA0_TXPLLCFGLOADER_Q1_BASE)
#define DLNK_JESD0_PHY_PMA0_TXPLLCFGLOADER_Q2      ((pma_txpllcfgloader_msg_t*) DLNK_JESD0_PHY_PMA0_TXPLLCFGLOADER_Q2_BASE)
#define DLNK_JESD0_PHY_PMA0_TXPLLCFGLOADER_Q3      ((pma_txpllcfgloader_msg_t*) DLNK_JESD0_PHY_PMA0_TXPLLCFGLOADER_Q3_BASE)
#define DLNK_JESD1_PHY_PMA0_TXPLLCFGLOADER_GLOBAL  ((pma_txpllcfgloader_msg_t*) DLNK_JESD1_PHY_PMA0_TXPLLCFGLOADER_GLOBAL_BASE)
#define DLNK_JESD1_PHY_PMA0_TXPLLCFGLOADER_Q0      ((pma_txpllcfgloader_msg_t*) DLNK_JESD1_PHY_PMA0_TXPLLCFGLOADER_Q0_BASE)
#define DLNK_JESD1_PHY_PMA0_TXPLLCFGLOADER_Q1      ((pma_txpllcfgloader_msg_t*) DLNK_JESD1_PHY_PMA0_TXPLLCFGLOADER_Q1_BASE)
#define DLNK_JESD1_PHY_PMA0_TXPLLCFGLOADER_Q2      ((pma_txpllcfgloader_msg_t*) DLNK_JESD1_PHY_PMA0_TXPLLCFGLOADER_Q2_BASE)
#define DLNK_JESD1_PHY_PMA0_TXPLLCFGLOADER_Q3      ((pma_txpllcfgloader_msg_t*) DLNK_JESD1_PHY_PMA0_TXPLLCFGLOADER_Q3_BASE)
#define DLNK_JESD2_PHY_PMA0_TXPLLCFGLOADER_GLOBAL  ((pma_txpllcfgloader_msg_t*) DLNK_JESD2_PHY_PMA0_TXPLLCFGLOADER_GLOBAL_BASE)
#define DLNK_JESD2_PHY_PMA0_TXPLLCFGLOADER_Q0      ((pma_txpllcfgloader_msg_t*) DLNK_JESD2_PHY_PMA0_TXPLLCFGLOADER_Q0_BASE)
#define DLNK_JESD2_PHY_PMA0_TXPLLCFGLOADER_Q1      ((pma_txpllcfgloader_msg_t*) DLNK_JESD2_PHY_PMA0_TXPLLCFGLOADER_Q1_BASE)
#define DLNK_JESD2_PHY_PMA0_TXPLLCFGLOADER_Q2      ((pma_txpllcfgloader_msg_t*) DLNK_JESD2_PHY_PMA0_TXPLLCFGLOADER_Q2_BASE)
#define DLNK_JESD2_PHY_PMA0_TXPLLCFGLOADER_Q3      ((pma_txpllcfgloader_msg_t*) DLNK_JESD2_PHY_PMA0_TXPLLCFGLOADER_Q3_BASE)
#define DLNK_JESD3_PHY_PMA0_TXPLLCFGLOADER_GLOBAL  ((pma_txpllcfgloader_msg_t*) DLNK_JESD3_PHY_PMA0_TXPLLCFGLOADER_GLOBAL_BASE)
#define DLNK_JESD3_PHY_PMA0_TXPLLCFGLOADER_Q0      ((pma_txpllcfgloader_msg_t*) DLNK_JESD3_PHY_PMA0_TXPLLCFGLOADER_Q0_BASE)
#define DLNK_JESD3_PHY_PMA0_TXPLLCFGLOADER_Q1      ((pma_txpllcfgloader_msg_t*) DLNK_JESD3_PHY_PMA0_TXPLLCFGLOADER_Q1_BASE)
#define DLNK_JESD3_PHY_PMA0_TXPLLCFGLOADER_Q2      ((pma_txpllcfgloader_msg_t*) DLNK_JESD3_PHY_PMA0_TXPLLCFGLOADER_Q2_BASE)
#define DLNK_JESD3_PHY_PMA0_TXPLLCFGLOADER_Q3      ((pma_txpllcfgloader_msg_t*) DLNK_JESD3_PHY_PMA0_TXPLLCFGLOADER_Q3_BASE)

// ******************************************* /Address Space

#endif      // _PMA_TXPLLCFGLOADER_MSG_H_

