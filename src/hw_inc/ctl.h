#ifndef _CTL_H_
#define _CTL_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define TRX_ANT0_CTL_BASE     ( 0x0513f000 )
#define TRX_ANT1_CTL_BASE     ( 0x0515f000 )
#define TRX_ANT2_CTL_BASE     ( 0x0517f000 )
#define TRX_ANT3_CTL_BASE     ( 0x0519f000 )
#define TRX_ANT4_CTL_BASE     ( 0x051bf000 )
#define TRX_ANT5_CTL_BASE     ( 0x051df000 )
#define TRX_ANT6_CTL_BASE     ( 0x051ff000 )
#define TRX_ANT7_CTL_BASE     ( 0x0521f000 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define CTL_TX_ANT_RATE_OFFSET       ( 0x00000000U )
#define CTL_RX_ANT_RATE_OFFSET       ( 0x00000004U )
#define CTL_DP_INIT_OFFSET           ( 0x00000008U )
#define CTL_RX_INT_HI_SUM_OFFSET     ( 0x00000010U )
#define CTL_RX_INT_LO_SUM_OFFSET     ( 0x00000014U )
#define CTL_TX_INT_HI_SUM_OFFSET     ( 0x00000018U )
#define CTL_TX_INT_LO_SUM_OFFSET     ( 0x0000001cU )
#define CTL_BRDG_STAT_OFFSET     ( 0x00000020U )
#define CTL_LOOPBK_CTL_OFFSET        ( 0x00000024U )
#define CTL_SMON_INT_STAT_OFFSET   ( 0x00000040U )
#define CTL_SMON_INT_HI_EN_OFFSET    ( 0x00000044U )
#define CTL_SMON_INT_LO_EN_OFFSET    ( 0x00000048U )
#define CTL_SMON_INT_CLR_OFFSET    ( 0x0000004cU )
#define CTL_SMON_INT_FORCE_OFFSET    ( 0x00000050U )
#define CTL_DL_SMC_DITHER_SHDW0_OFFSET ( 0x00000100U )
#define CTL_DL_SMC_LSB_OFFSET_SHDW0_OFFSET ( 0x00000104U )
#define CTL_DL_TXM_ENA_SHDW0_OFFSET  ( 0x00000108U )
#define CTL_UL_RXM_ENA_SHDW0_OFFSET  ( 0x0000010cU )
#define CTL_UL_RXM_PS_SHDW0_OFFSET   ( 0x00000110U )
#define CTL_UL_NLEQ_ZERO_STUFF_SHDW0_OFFSET ( 0x00000114U )
#define CTL_DL_SMC_DITHER_SHDW1_OFFSET ( 0x00000118U )
#define CTL_DL_SMC_LSB_OFFSET_SHDW1_OFFSET ( 0x0000011cU )
#define CTL_DL_TXM_ENA_SHDW1_OFFSET  ( 0x00000120U )
#define CTL_UL_RXM_ENA_SHDW1_OFFSET  ( 0x00000124U )
#define CTL_UL_RXM_PS_SHDW1_OFFSET   ( 0x00000128U )
#define CTL_UL_NLEQ_ZERO_STUFF_SHDW1_OFFSET ( 0x0000012cU )
#define CTL_DL_SMC_DITHER_LIVE0_OFFSET ( 0x00000130U )
#define CTL_DL_SMC_LSB_OFFSET_LIVE0_OFFSET ( 0x00000134U )
#define CTL_DL_TXM_ENA_LIVE0_OFFSET  ( 0x00000138U )
#define CTL_UL_RXM_ENA_LIVE0_OFFSET  ( 0x0000013cU )
#define CTL_UL_RXM_PS_LIVE0_OFFSET   ( 0x00000140U )
#define CTL_UL_NLEQ_ZERO_STUFF_LIVE0_OFFSET ( 0x00000144U )
#define CTL_DL_SMC_DITHER_LIVE1_OFFSET ( 0x00000148U )
#define CTL_DL_SMC_LSB_OFFSET_LIVE1_OFFSET ( 0x0000014cU )
#define CTL_DL_TXM_ENA_LIVE1_OFFSET  ( 0x00000150U )
#define CTL_UL_RXM_ENA_LIVE1_OFFSET  ( 0x00000154U )
#define CTL_UL_RXM_PS_LIVE1_OFFSET   ( 0x00000158U )
#define CTL_UL_NLEQ_ZERO_STUFF_LIVE1_OFFSET ( 0x0000015cU )
#define CTL_ULDL_STAT_OFFSET       ( 0x00000160U )
#define CTL_SMON_R0_OFFSET  ( 0x00000200U )
#define CTL_SMON_R1_OFFSET  ( 0x00000204U )
#define CTL_SMON_R2_OFFSET  ( 0x00000208U )
#define CTL_SMON_R3_OFFSET  ( 0x0000020cU )
#define CTL_SMON_R4_OFFSET  ( 0x00000210U )
#define CTL_SMON_R5_OFFSET  ( 0x00000214U )
#define CTL_SMON_R6_OFFSET  ( 0x00000218U )
#define CTL_SMON_R7_OFFSET  ( 0x0000021cU )
#define CTL_ISYNC_CTRL_OFFSET ( 0x00000300U )
#define CTL_ISYNC_LCNT_INC_OFFSET ( 0x00000304U )
#define CTL_ISYNC_TEN_MS_CNT_OFFSET ( 0x00000308U )
#define CTL_ISYNC_INC_PRE_OFFSET ( 0x0000030cU )
#define CTL_ISYNC_CNT_ADJ_OFFSET ( 0x00000310U )
#define CTL_ISYNC_BFN_CNT_SYNC_OFFSET ( 0x00000314U )
#define CTL_ISYNC_BFN_CNT_OFFSET ( 0x00000318U )
#define CTL_BFNE_CFG0_OFFSET ( 0x00000400U )
#define CTL_BFNE_CFG1_OFFSET ( 0x00000404U )
#define CTL_BFNE_CFG2_OFFSET ( 0x00000408U )
#define CTL_BFNE_CFG3_OFFSET ( 0x0000040cU )
#define CTL_BFNE_CFG4_OFFSET ( 0x00000410U )
#define CTL_BFNE_CFG5_OFFSET ( 0x00000414U )
#define CTL_BFNE_CFG6_OFFSET ( 0x00000418U )
#define CTL_BFNE_CFG7_OFFSET ( 0x0000041cU )
#define CTL_BFNE_CFG8_OFFSET ( 0x00000420U )
#define CTL_BFNE_CFG9_OFFSET ( 0x00000424U )
#define CTL_BFNE_CFG10_OFFSET ( 0x00000428U )
#define CTL_BFNE_CFG11_OFFSET ( 0x0000042cU )
#define CTL_BFNE_CFG12_OFFSET ( 0x00000430U )
#define CTL_BFNE_INCR0_OFFSET ( 0x00000440U )
#define CTL_BFNE_INCR1_OFFSET ( 0x00000444U )
#define CTL_BFNE_INCR2_OFFSET ( 0x00000448U )
#define CTL_BFNE_INCR3_OFFSET ( 0x0000044cU )
#define CTL_BFNE_INCR4_OFFSET ( 0x00000450U )
#define CTL_BFNE_INCR5_OFFSET ( 0x00000454U )
#define CTL_BFNE_INCR6_OFFSET ( 0x00000458U )
#define CTL_BFNE_INCR7_OFFSET ( 0x0000045cU )
#define CTL_BFNE_INCR8_OFFSET ( 0x00000460U )
#define CTL_BFNE_INCR9_OFFSET ( 0x00000464U )
#define CTL_BFNE_INCR10_OFFSET ( 0x00000468U )
#define CTL_BFNE_INCR11_OFFSET ( 0x0000046cU )
#define CTL_BFNE_INCR12_OFFSET ( 0x00000470U )
#define CTL_BFNE_START0_OFFSET ( 0x00000480U )
#define CTL_BFNE_START1_OFFSET ( 0x00000484U )
#define CTL_BFNE_START2_OFFSET ( 0x00000488U )
#define CTL_BFNE_START3_OFFSET ( 0x0000048cU )
#define CTL_BFNE_START4_OFFSET ( 0x00000490U )
#define CTL_BFNE_START5_OFFSET ( 0x00000494U )
#define CTL_BFNE_START6_OFFSET ( 0x00000498U )
#define CTL_BFNE_START7_OFFSET ( 0x0000049cU )
#define CTL_BFNE_START8_OFFSET ( 0x000004a0U )
#define CTL_BFNE_START9_OFFSET ( 0x000004a4U )
#define CTL_BFNE_START10_OFFSET ( 0x000004a8U )
#define CTL_BFNE_START11_OFFSET ( 0x000004acU )
#define CTL_BFNE_START12_OFFSET ( 0x000004b0U )
#define CTL_BFNE_STAT0_OFFSET ( 0x000004c0U )
#define CTL_BFNE_STAT1_OFFSET ( 0x000004c4U )
#define CTL_BFNE_STAT2_OFFSET ( 0x000004c8U )
#define CTL_BFNE_STAT3_OFFSET ( 0x000004ccU )
#define CTL_BFNE_STAT4_OFFSET ( 0x000004d0U )
#define CTL_BFNE_STAT5_OFFSET ( 0x000004d4U )
#define CTL_BFNE_STAT6_OFFSET ( 0x000004d8U )
#define CTL_BFNE_STAT7_OFFSET ( 0x000004dcU )
#define CTL_BFNE_STAT8_OFFSET ( 0x000004e0U )
#define CTL_BFNE_STAT9_OFFSET ( 0x000004e4U )
#define CTL_BFNE_STAT10_OFFSET ( 0x000004e8U )
#define CTL_BFNE_STAT11_OFFSET ( 0x000004ecU )
#define CTL_BFNE_STAT12_OFFSET ( 0x000004f0U )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define CTL_TX_ANT_RATE_ADR(_BASE)          (( ( _BASE ) + ( CTL_TX_ANT_RATE_OFFSET ) ))
#define CTL_RX_ANT_RATE_ADR(_BASE)          (( ( _BASE ) + ( CTL_RX_ANT_RATE_OFFSET ) ))
#define CTL_DP_INIT_ADR(_BASE)              (( ( _BASE ) + ( CTL_DP_INIT_OFFSET ) ))
#define CTL_RX_INT_HI_SUM_ADR(_BASE)        (( ( _BASE ) + ( CTL_RX_INT_HI_SUM_OFFSET ) ))
#define CTL_RX_INT_LO_SUM_ADR(_BASE)        (( ( _BASE ) + ( CTL_RX_INT_LO_SUM_OFFSET ) ))
#define CTL_TX_INT_HI_SUM_ADR(_BASE)        (( ( _BASE ) + ( CTL_TX_INT_HI_SUM_OFFSET ) ))
#define CTL_TX_INT_LO_SUM_ADR(_BASE)        (( ( _BASE ) + ( CTL_TX_INT_LO_SUM_OFFSET ) ))
#define CTL_BRDG_STAT_ADR(_BASE)        (( ( _BASE ) + ( CTL_BRDG_STAT_OFFSET ) ))
#define CTL_LOOPBK_CTL_ADR(_BASE)           (( ( _BASE ) + ( CTL_LOOPBK_CTL_OFFSET ) ))
#define CTL_SMON_INT_STAT_ADR(_BASE)      (( ( _BASE ) + ( CTL_SMON_INT_STAT_OFFSET ) ))
#define CTL_SMON_INT_HI_EN_ADR(_BASE)       (( ( _BASE ) + ( CTL_SMON_INT_HI_EN_OFFSET ) ))
#define CTL_SMON_INT_LO_EN_ADR(_BASE)       (( ( _BASE ) + ( CTL_SMON_INT_LO_EN_OFFSET ) ))
#define CTL_SMON_INT_CLR_ADR(_BASE)       (( ( _BASE ) + ( CTL_SMON_INT_CLR_OFFSET ) ))
#define CTL_SMON_INT_FORCE_ADR(_BASE)       (( ( _BASE ) + ( CTL_SMON_INT_FORCE_OFFSET ) ))
#define CTL_DL_SMC_DITHER_SHDW0_ADR(_BASE)  (( ( _BASE ) + ( CTL_DL_SMC_DITHER_SHDW0_OFFSET ) ))
#define CTL_DL_SMC_LSB_OFFSET_SHDW0_ADR(_BASE) (( ( _BASE ) + ( CTL_DL_SMC_LSB_OFFSET_SHDW0_OFFSET ) ))
#define CTL_DL_TXM_ENA_SHDW0_ADR(_BASE)     (( ( _BASE ) + ( CTL_DL_TXM_ENA_SHDW0_OFFSET ) ))
#define CTL_UL_RXM_ENA_SHDW0_ADR(_BASE)     (( ( _BASE ) + ( CTL_UL_RXM_ENA_SHDW0_OFFSET ) ))
#define CTL_UL_RXM_PS_SHDW0_ADR(_BASE)      (( ( _BASE ) + ( CTL_UL_RXM_PS_SHDW0_OFFSET ) ))
#define CTL_UL_NLEQ_ZERO_STUFF_SHDW0_ADR(_BASE) (( ( _BASE ) + ( CTL_UL_NLEQ_ZERO_STUFF_SHDW0_OFFSET ) ))
#define CTL_DL_SMC_DITHER_SHDW1_ADR(_BASE)  (( ( _BASE ) + ( CTL_DL_SMC_DITHER_SHDW1_OFFSET ) ))
#define CTL_DL_SMC_LSB_OFFSET_SHDW1_ADR(_BASE) (( ( _BASE ) + ( CTL_DL_SMC_LSB_OFFSET_SHDW1_OFFSET ) ))
#define CTL_DL_TXM_ENA_SHDW1_ADR(_BASE)     (( ( _BASE ) + ( CTL_DL_TXM_ENA_SHDW1_OFFSET ) ))
#define CTL_UL_RXM_ENA_SHDW1_ADR(_BASE)     (( ( _BASE ) + ( CTL_UL_RXM_ENA_SHDW1_OFFSET ) ))
#define CTL_UL_RXM_PS_SHDW1_ADR(_BASE)      (( ( _BASE ) + ( CTL_UL_RXM_PS_SHDW1_OFFSET ) ))
#define CTL_UL_NLEQ_ZERO_STUFF_SHDW1_ADR(_BASE) (( ( _BASE ) + ( CTL_UL_NLEQ_ZERO_STUFF_SHDW1_OFFSET ) ))
#define CTL_DL_SMC_DITHER_LIVE0_ADR(_BASE)  (( ( _BASE ) + ( CTL_DL_SMC_DITHER_LIVE0_OFFSET ) ))
#define CTL_DL_SMC_LSB_OFFSET_LIVE0_ADR(_BASE) (( ( _BASE ) + ( CTL_DL_SMC_LSB_OFFSET_LIVE0_OFFSET ) ))
#define CTL_DL_TXM_ENA_LIVE0_ADR(_BASE)     (( ( _BASE ) + ( CTL_DL_TXM_ENA_LIVE0_OFFSET ) ))
#define CTL_UL_RXM_ENA_LIVE0_ADR(_BASE)     (( ( _BASE ) + ( CTL_UL_RXM_ENA_LIVE0_OFFSET ) ))
#define CTL_UL_RXM_PS_LIVE0_ADR(_BASE)      (( ( _BASE ) + ( CTL_UL_RXM_PS_LIVE0_OFFSET ) ))
#define CTL_UL_NLEQ_ZERO_STUFF_LIVE0_ADR(_BASE) (( ( _BASE ) + ( CTL_UL_NLEQ_ZERO_STUFF_LIVE0_OFFSET ) ))
#define CTL_DL_SMC_DITHER_LIVE1_ADR(_BASE)  (( ( _BASE ) + ( CTL_DL_SMC_DITHER_LIVE1_OFFSET ) ))
#define CTL_DL_SMC_LSB_OFFSET_LIVE1_ADR(_BASE) (( ( _BASE ) + ( CTL_DL_SMC_LSB_OFFSET_LIVE1_OFFSET ) ))
#define CTL_DL_TXM_ENA_LIVE1_ADR(_BASE)     (( ( _BASE ) + ( CTL_DL_TXM_ENA_LIVE1_OFFSET ) ))
#define CTL_UL_RXM_ENA_LIVE1_ADR(_BASE)     (( ( _BASE ) + ( CTL_UL_RXM_ENA_LIVE1_OFFSET ) ))
#define CTL_UL_RXM_PS_LIVE1_ADR(_BASE)      (( ( _BASE ) + ( CTL_UL_RXM_PS_LIVE1_OFFSET ) ))
#define CTL_UL_NLEQ_ZERO_STUFF_LIVE1_ADR(_BASE) (( ( _BASE ) + ( CTL_UL_NLEQ_ZERO_STUFF_LIVE1_OFFSET ) ))
#define CTL_ULDL_STAT_ADR(_BASE)          (( ( _BASE ) + ( CTL_ULDL_STAT_OFFSET ) ))
#define CTL_SMON_R0_ADR(_BASE)     (( ( _BASE ) + ( CTL_SMON_R0_OFFSET ) ))
#define CTL_SMON_R1_ADR(_BASE)     (( ( _BASE ) + ( CTL_SMON_R1_OFFSET ) ))
#define CTL_SMON_R2_ADR(_BASE)     (( ( _BASE ) + ( CTL_SMON_R2_OFFSET ) ))
#define CTL_SMON_R3_ADR(_BASE)     (( ( _BASE ) + ( CTL_SMON_R3_OFFSET ) ))
#define CTL_SMON_R4_ADR(_BASE)     (( ( _BASE ) + ( CTL_SMON_R4_OFFSET ) ))
#define CTL_SMON_R5_ADR(_BASE)     (( ( _BASE ) + ( CTL_SMON_R5_OFFSET ) ))
#define CTL_SMON_R6_ADR(_BASE)     (( ( _BASE ) + ( CTL_SMON_R6_OFFSET ) ))
#define CTL_SMON_R7_ADR(_BASE)     (( ( _BASE ) + ( CTL_SMON_R7_OFFSET ) ))
#define CTL_ISYNC_CTRL_ADR(_BASE) (( ( _BASE ) + ( CTL_ISYNC_CTRL_OFFSET ) ))
#define CTL_ISYNC_LCNT_INC_ADR(_BASE) (( ( _BASE ) + ( CTL_ISYNC_LCNT_INC_OFFSET ) ))
#define CTL_ISYNC_TEN_MS_CNT_ADR(_BASE) (( ( _BASE ) + ( CTL_ISYNC_TEN_MS_CNT_OFFSET ) ))
#define CTL_ISYNC_INC_PRE_ADR(_BASE) (( ( _BASE ) + ( CTL_ISYNC_INC_PRE_OFFSET ) ))
#define CTL_ISYNC_CNT_ADJ_ADR(_BASE) (( ( _BASE ) + ( CTL_ISYNC_CNT_ADJ_OFFSET ) ))
#define CTL_ISYNC_BFN_CNT_SYNC_ADR(_BASE) (( ( _BASE ) + ( CTL_ISYNC_BFN_CNT_SYNC_OFFSET ) ))
#define CTL_ISYNC_BFN_CNT_ADR(_BASE) (( ( _BASE ) + ( CTL_ISYNC_BFN_CNT_OFFSET ) ))
#define CTL_BFNE_CFG0_ADR(_BASE) (( ( _BASE ) + ( CTL_BFNE_CFG0_OFFSET ) ))
#define CTL_BFNE_CFG1_ADR(_BASE) (( ( _BASE ) + ( CTL_BFNE_CFG1_OFFSET ) ))
#define CTL_BFNE_CFG2_ADR(_BASE) (( ( _BASE ) + ( CTL_BFNE_CFG2_OFFSET ) ))
#define CTL_BFNE_CFG3_ADR(_BASE) (( ( _BASE ) + ( CTL_BFNE_CFG3_OFFSET ) ))
#define CTL_BFNE_CFG4_ADR(_BASE) (( ( _BASE ) + ( CTL_BFNE_CFG4_OFFSET ) ))
#define CTL_BFNE_CFG5_ADR(_BASE) (( ( _BASE ) + ( CTL_BFNE_CFG5_OFFSET ) ))
#define CTL_BFNE_CFG6_ADR(_BASE) (( ( _BASE ) + ( CTL_BFNE_CFG6_OFFSET ) ))
#define CTL_BFNE_CFG7_ADR(_BASE) (( ( _BASE ) + ( CTL_BFNE_CFG7_OFFSET ) ))
#define CTL_BFNE_CFG8_ADR(_BASE) (( ( _BASE ) + ( CTL_BFNE_CFG8_OFFSET ) ))
#define CTL_BFNE_CFG9_ADR(_BASE) (( ( _BASE ) + ( CTL_BFNE_CFG9_OFFSET ) ))
#define CTL_BFNE_CFG10_ADR(_BASE) (( ( _BASE ) + ( CTL_BFNE_CFG10_OFFSET ) ))
#define CTL_BFNE_CFG11_ADR(_BASE) (( ( _BASE ) + ( CTL_BFNE_CFG11_OFFSET ) ))
#define CTL_BFNE_CFG12_ADR(_BASE) (( ( _BASE ) + ( CTL_BFNE_CFG12_OFFSET ) ))
#define CTL_BFNE_INCR0_ADR(_BASE) (( ( _BASE ) + ( CTL_BFNE_INCR0_OFFSET ) ))
#define CTL_BFNE_INCR1_ADR(_BASE) (( ( _BASE ) + ( CTL_BFNE_INCR1_OFFSET ) ))
#define CTL_BFNE_INCR2_ADR(_BASE) (( ( _BASE ) + ( CTL_BFNE_INCR2_OFFSET ) ))
#define CTL_BFNE_INCR3_ADR(_BASE) (( ( _BASE ) + ( CTL_BFNE_INCR3_OFFSET ) ))
#define CTL_BFNE_INCR4_ADR(_BASE) (( ( _BASE ) + ( CTL_BFNE_INCR4_OFFSET ) ))
#define CTL_BFNE_INCR5_ADR(_BASE) (( ( _BASE ) + ( CTL_BFNE_INCR5_OFFSET ) ))
#define CTL_BFNE_INCR6_ADR(_BASE) (( ( _BASE ) + ( CTL_BFNE_INCR6_OFFSET ) ))
#define CTL_BFNE_INCR7_ADR(_BASE) (( ( _BASE ) + ( CTL_BFNE_INCR7_OFFSET ) ))
#define CTL_BFNE_INCR8_ADR(_BASE) (( ( _BASE ) + ( CTL_BFNE_INCR8_OFFSET ) ))
#define CTL_BFNE_INCR9_ADR(_BASE) (( ( _BASE ) + ( CTL_BFNE_INCR9_OFFSET ) ))
#define CTL_BFNE_INCR10_ADR(_BASE) (( ( _BASE ) + ( CTL_BFNE_INCR10_OFFSET ) ))
#define CTL_BFNE_INCR11_ADR(_BASE) (( ( _BASE ) + ( CTL_BFNE_INCR11_OFFSET ) ))
#define CTL_BFNE_INCR12_ADR(_BASE) (( ( _BASE ) + ( CTL_BFNE_INCR12_OFFSET ) ))
#define CTL_BFNE_START0_ADR(_BASE) (( ( _BASE ) + ( CTL_BFNE_START0_OFFSET ) ))
#define CTL_BFNE_START1_ADR(_BASE) (( ( _BASE ) + ( CTL_BFNE_START1_OFFSET ) ))
#define CTL_BFNE_START2_ADR(_BASE) (( ( _BASE ) + ( CTL_BFNE_START2_OFFSET ) ))
#define CTL_BFNE_START3_ADR(_BASE) (( ( _BASE ) + ( CTL_BFNE_START3_OFFSET ) ))
#define CTL_BFNE_START4_ADR(_BASE) (( ( _BASE ) + ( CTL_BFNE_START4_OFFSET ) ))
#define CTL_BFNE_START5_ADR(_BASE) (( ( _BASE ) + ( CTL_BFNE_START5_OFFSET ) ))
#define CTL_BFNE_START6_ADR(_BASE) (( ( _BASE ) + ( CTL_BFNE_START6_OFFSET ) ))
#define CTL_BFNE_START7_ADR(_BASE) (( ( _BASE ) + ( CTL_BFNE_START7_OFFSET ) ))
#define CTL_BFNE_START8_ADR(_BASE) (( ( _BASE ) + ( CTL_BFNE_START8_OFFSET ) ))
#define CTL_BFNE_START9_ADR(_BASE) (( ( _BASE ) + ( CTL_BFNE_START9_OFFSET ) ))
#define CTL_BFNE_START10_ADR(_BASE) (( ( _BASE ) + ( CTL_BFNE_START10_OFFSET ) ))
#define CTL_BFNE_START11_ADR(_BASE) (( ( _BASE ) + ( CTL_BFNE_START11_OFFSET ) ))
#define CTL_BFNE_START12_ADR(_BASE) (( ( _BASE ) + ( CTL_BFNE_START12_OFFSET ) ))
#define CTL_BFNE_STAT0_ADR(_BASE) (( ( _BASE ) + ( CTL_BFNE_STAT0_OFFSET ) ))
#define CTL_BFNE_STAT1_ADR(_BASE) (( ( _BASE ) + ( CTL_BFNE_STAT1_OFFSET ) ))
#define CTL_BFNE_STAT2_ADR(_BASE) (( ( _BASE ) + ( CTL_BFNE_STAT2_OFFSET ) ))
#define CTL_BFNE_STAT3_ADR(_BASE) (( ( _BASE ) + ( CTL_BFNE_STAT3_OFFSET ) ))
#define CTL_BFNE_STAT4_ADR(_BASE) (( ( _BASE ) + ( CTL_BFNE_STAT4_OFFSET ) ))
#define CTL_BFNE_STAT5_ADR(_BASE) (( ( _BASE ) + ( CTL_BFNE_STAT5_OFFSET ) ))
#define CTL_BFNE_STAT6_ADR(_BASE) (( ( _BASE ) + ( CTL_BFNE_STAT6_OFFSET ) ))
#define CTL_BFNE_STAT7_ADR(_BASE) (( ( _BASE ) + ( CTL_BFNE_STAT7_OFFSET ) ))
#define CTL_BFNE_STAT8_ADR(_BASE) (( ( _BASE ) + ( CTL_BFNE_STAT8_OFFSET ) ))
#define CTL_BFNE_STAT9_ADR(_BASE) (( ( _BASE ) + ( CTL_BFNE_STAT9_OFFSET ) ))
#define CTL_BFNE_STAT10_ADR(_BASE) (( ( _BASE ) + ( CTL_BFNE_STAT10_OFFSET ) ))
#define CTL_BFNE_STAT11_ADR(_BASE) (( ( _BASE ) + ( CTL_BFNE_STAT11_OFFSET ) ))
#define CTL_BFNE_STAT12_ADR(_BASE) (( ( _BASE ) + ( CTL_BFNE_STAT12_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief CTL_REG_TX_ANT_RATE register description at address offset 0x0
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/TX_ANT_RATE
  * TX Antenna Rate
  */

typedef union {
  struct {
    uint32_t ANT_RATE : 3;
    ///< RX Antenna Rate.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} ctl_tx_ant_rate_reg_t;

#define CTL_TX_ANT_RATE_DEFAULT (0x00000000U)
#define CTL_TX_ANT_RATE_RD_MASK (0x00000007U)
#define CTL_TX_ANT_RATE_WR_MASK (0x00000007U)


///< RX Antenna Rate.
#define CTL_TX_ANT_RATE_ANT_RATE_BF_OFF ( 0)
#define CTL_TX_ANT_RATE_ANT_RATE_BF_WID ( 3)
#define CTL_TX_ANT_RATE_ANT_RATE_BF_MSK (0x00000007)
#define CTL_TX_ANT_RATE_ANT_RATE_BF_DEF (0x00000000)


/** @brief CTL_REG_RX_ANT_RATE register description at address offset 0x4
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/RX_ANT_RATE
  * RX Antenna Rate
  */

typedef union {
  struct {
    uint32_t ANT_RATE : 3;
    ///< RX Antenna Rate.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t ALT_SEQ : 1;
    ///< Alternate ADC sequence enable.  When set, selects the alternate 8/12
    ///< Gsps (linear) pattern for NLEQ and TX loopback
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} ctl_rx_ant_rate_reg_t;

#define CTL_RX_ANT_RATE_DEFAULT (0x00000000U)
#define CTL_RX_ANT_RATE_RD_MASK (0x00000017U)
#define CTL_RX_ANT_RATE_WR_MASK (0x00000017U)


///< RX Antenna Rate.
#define CTL_RX_ANT_RATE_ANT_RATE_BF_OFF ( 0)
#define CTL_RX_ANT_RATE_ANT_RATE_BF_WID ( 3)
#define CTL_RX_ANT_RATE_ANT_RATE_BF_MSK (0x00000007)
#define CTL_RX_ANT_RATE_ANT_RATE_BF_DEF (0x00000000)

///< Alternate ADC sequence enable.  When set, selects the alternate 8/12
///< Gsps (linear) pattern for NLEQ and TX loopback
#define CTL_RX_ANT_RATE_ALT_SEQ_BF_OFF ( 4)
#define CTL_RX_ANT_RATE_ALT_SEQ_BF_WID ( 1)
#define CTL_RX_ANT_RATE_ALT_SEQ_BF_MSK (0x00000010)
#define CTL_RX_ANT_RATE_ALT_SEQ_BF_DEF (0x00000000)


/** @brief CTL_REG_DP_INIT register description at address offset 0x8
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/DP_INIT
  * Datapath Initialize
  */

typedef union {
  struct {
    uint32_t DP_INIT : 1;
    ///< Writing to one begins the initialization process for the datapath
    ///< sub-blocks.                             Initializaiton is complete
    ///< when DP_INIT_DONE is set.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 7;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
    uint32_t DP_INIT_DONE_SMC0 : 1;
    ///< Initialization of SMC0 complete
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
    uint32_t DP_INIT_DONE_SMC1 : 1;
    ///< Initialization of SMC1 complete
    ///< AccessType="RO" BitOffset="9" ResetValue="0x0"
    uint32_t DP_INIT_DONE_NLEQ0 : 1;
    ///< Initialization of NLEQ0 complete
    ///< AccessType="RO" BitOffset="10" ResetValue="0x0"
    uint32_t DP_INIT_DONE_NLEQ1 : 1;
    ///< Initialization of NLEQ1 complete
    ///< AccessType="RO" BitOffset="11" ResetValue="0x0"
    uint32_t DP_INIT_DONE_RXM0 : 1;
    ///< Initialization of RXM0 complete
    ///< AccessType="RO" BitOffset="12" ResetValue="0x0"
    uint32_t DP_INIT_DONE_RXM1 : 1;
    ///< Initialization of RXM1 complete
    ///< AccessType="RO" BitOffset="13" ResetValue="0x0"
    uint32_t DP_INIT_DONE_TXM0 : 1;
    ///< Initialization of TXM0 complete
    ///< AccessType="RO" BitOffset="14" ResetValue="0x0"
    uint32_t DP_INIT_DONE_TXM1 : 1;
    ///< Initialization of TXM1 complete
    ///< AccessType="RO" BitOffset="15" ResetValue="0x0"
    uint32_t DP_INIT_DONE_CDPD : 1;
    ///< Initialization of CDPD complete
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
    uint32_t  : 7;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
    uint32_t DP_INIT_DONE : 1;
    ///< All blocks completed initialization.  This bit will clear when DP_INIT
    ///< is cleared.
    ///< AccessType="RO" BitOffset="24" ResetValue="0x0"
    uint32_t  : 7;
    ///< Reserved
    ///< AccessType="RO" BitOffset="25" ResetValue="None"
  } ;
  uint32_t value;
} ctl_dp_init_reg_t;

#define CTL_DP_INIT_DEFAULT (0x00000000U)
#define CTL_DP_INIT_RD_MASK (0x0101ff01U)
#define CTL_DP_INIT_WR_MASK (0x00000001U)


///< Writing to one begins the initialization process for the datapath
///< sub-blocks.                             Initializaiton is complete
///< when DP_INIT_DONE is set.
#define CTL_DP_INIT_DP_INIT_BF_OFF ( 0)
#define CTL_DP_INIT_DP_INIT_BF_WID ( 1)
#define CTL_DP_INIT_DP_INIT_BF_MSK (0x00000001)
#define CTL_DP_INIT_DP_INIT_BF_DEF (0x00000000)

///< Initialization of SMC0 complete
#define CTL_DP_INIT_DP_INIT_DONE_SMC0_BF_OFF ( 8)
#define CTL_DP_INIT_DP_INIT_DONE_SMC0_BF_WID ( 1)
#define CTL_DP_INIT_DP_INIT_DONE_SMC0_BF_MSK (0x00000100)
#define CTL_DP_INIT_DP_INIT_DONE_SMC0_BF_DEF (0x00000000)

///< Initialization of SMC1 complete
#define CTL_DP_INIT_DP_INIT_DONE_SMC1_BF_OFF ( 9)
#define CTL_DP_INIT_DP_INIT_DONE_SMC1_BF_WID ( 1)
#define CTL_DP_INIT_DP_INIT_DONE_SMC1_BF_MSK (0x00000200)
#define CTL_DP_INIT_DP_INIT_DONE_SMC1_BF_DEF (0x00000000)

///< Initialization of NLEQ0 complete
#define CTL_DP_INIT_DP_INIT_DONE_NLEQ0_BF_OFF (10)
#define CTL_DP_INIT_DP_INIT_DONE_NLEQ0_BF_WID ( 1)
#define CTL_DP_INIT_DP_INIT_DONE_NLEQ0_BF_MSK (0x00000400)
#define CTL_DP_INIT_DP_INIT_DONE_NLEQ0_BF_DEF (0x00000000)

///< Initialization of NLEQ1 complete
#define CTL_DP_INIT_DP_INIT_DONE_NLEQ1_BF_OFF (11)
#define CTL_DP_INIT_DP_INIT_DONE_NLEQ1_BF_WID ( 1)
#define CTL_DP_INIT_DP_INIT_DONE_NLEQ1_BF_MSK (0x00000800)
#define CTL_DP_INIT_DP_INIT_DONE_NLEQ1_BF_DEF (0x00000000)

///< Initialization of RXM0 complete
#define CTL_DP_INIT_DP_INIT_DONE_RXM0_BF_OFF (12)
#define CTL_DP_INIT_DP_INIT_DONE_RXM0_BF_WID ( 1)
#define CTL_DP_INIT_DP_INIT_DONE_RXM0_BF_MSK (0x00001000)
#define CTL_DP_INIT_DP_INIT_DONE_RXM0_BF_DEF (0x00000000)

///< Initialization of RXM1 complete
#define CTL_DP_INIT_DP_INIT_DONE_RXM1_BF_OFF (13)
#define CTL_DP_INIT_DP_INIT_DONE_RXM1_BF_WID ( 1)
#define CTL_DP_INIT_DP_INIT_DONE_RXM1_BF_MSK (0x00002000)
#define CTL_DP_INIT_DP_INIT_DONE_RXM1_BF_DEF (0x00000000)

///< Initialization of TXM0 complete
#define CTL_DP_INIT_DP_INIT_DONE_TXM0_BF_OFF (14)
#define CTL_DP_INIT_DP_INIT_DONE_TXM0_BF_WID ( 1)
#define CTL_DP_INIT_DP_INIT_DONE_TXM0_BF_MSK (0x00004000)
#define CTL_DP_INIT_DP_INIT_DONE_TXM0_BF_DEF (0x00000000)

///< Initialization of TXM1 complete
#define CTL_DP_INIT_DP_INIT_DONE_TXM1_BF_OFF (15)
#define CTL_DP_INIT_DP_INIT_DONE_TXM1_BF_WID ( 1)
#define CTL_DP_INIT_DP_INIT_DONE_TXM1_BF_MSK (0x00008000)
#define CTL_DP_INIT_DP_INIT_DONE_TXM1_BF_DEF (0x00000000)

///< Initialization of CDPD complete
#define CTL_DP_INIT_DP_INIT_DONE_CDPD_BF_OFF (16)
#define CTL_DP_INIT_DP_INIT_DONE_CDPD_BF_WID ( 1)
#define CTL_DP_INIT_DP_INIT_DONE_CDPD_BF_MSK (0x00010000)
#define CTL_DP_INIT_DP_INIT_DONE_CDPD_BF_DEF (0x00000000)

///< All blocks completed initialization.  This bit will clear when DP_INIT
///< is cleared.
#define CTL_DP_INIT_DP_INIT_DONE_BF_OFF (24)
#define CTL_DP_INIT_DP_INIT_DONE_BF_WID ( 1)
#define CTL_DP_INIT_DP_INIT_DONE_BF_MSK (0x01000000)
#define CTL_DP_INIT_DP_INIT_DONE_BF_DEF (0x00000000)


/** @brief CTL_REG_RX_INT_HI_SUM register description at address offset 0x10
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/RX_INT_HI_SUM
  * High Priority RX path interrupt summary
  */

typedef union {
  struct {
    uint32_t NLEQ0 : 1;
    ///< NLEQ0 Interrupt Status
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t NLEQ1 : 1;
    ///< NLEQ1 Interrupt Status
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t SMON : 1;
    ///< SMON Interrupt Status
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} ctl_rx_int_hi_sum_reg_t;

#define CTL_RX_INT_HI_SUM_DEFAULT (0x00000000U)
#define CTL_RX_INT_HI_SUM_RD_MASK (0x00000007U)
#define CTL_RX_INT_HI_SUM_WR_MASK (0x00000000U)


///< NLEQ0 Interrupt Status
#define CTL_RX_INT_HI_SUM_NLEQ0_BF_OFF ( 0)
#define CTL_RX_INT_HI_SUM_NLEQ0_BF_WID ( 1)
#define CTL_RX_INT_HI_SUM_NLEQ0_BF_MSK (0x00000001)
#define CTL_RX_INT_HI_SUM_NLEQ0_BF_DEF (0x00000000)

///< NLEQ1 Interrupt Status
#define CTL_RX_INT_HI_SUM_NLEQ1_BF_OFF ( 1)
#define CTL_RX_INT_HI_SUM_NLEQ1_BF_WID ( 1)
#define CTL_RX_INT_HI_SUM_NLEQ1_BF_MSK (0x00000002)
#define CTL_RX_INT_HI_SUM_NLEQ1_BF_DEF (0x00000000)

///< SMON Interrupt Status
#define CTL_RX_INT_HI_SUM_SMON_BF_OFF ( 2)
#define CTL_RX_INT_HI_SUM_SMON_BF_WID ( 1)
#define CTL_RX_INT_HI_SUM_SMON_BF_MSK (0x00000004)
#define CTL_RX_INT_HI_SUM_SMON_BF_DEF (0x00000000)


/** @brief CTL_REG_RX_INT_LO_SUM register description at address offset 0x14
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/RX_INT_LO_SUM
  * Low Priority RX path interrupt summary
  */

typedef union {
  struct {
    uint32_t NLEQ0 : 1;
    ///< NLEQ0 Interrupt Status
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t NLEQ1 : 1;
    ///< NLEQ1 Interrupt Status
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t SMON : 1;
    ///< SMON Interrupt Status
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} ctl_rx_int_lo_sum_reg_t;

#define CTL_RX_INT_LO_SUM_DEFAULT (0x00000000U)
#define CTL_RX_INT_LO_SUM_RD_MASK (0x00000007U)
#define CTL_RX_INT_LO_SUM_WR_MASK (0x00000000U)


///< NLEQ0 Interrupt Status
#define CTL_RX_INT_LO_SUM_NLEQ0_BF_OFF ( 0)
#define CTL_RX_INT_LO_SUM_NLEQ0_BF_WID ( 1)
#define CTL_RX_INT_LO_SUM_NLEQ0_BF_MSK (0x00000001)
#define CTL_RX_INT_LO_SUM_NLEQ0_BF_DEF (0x00000000)

///< NLEQ1 Interrupt Status
#define CTL_RX_INT_LO_SUM_NLEQ1_BF_OFF ( 1)
#define CTL_RX_INT_LO_SUM_NLEQ1_BF_WID ( 1)
#define CTL_RX_INT_LO_SUM_NLEQ1_BF_MSK (0x00000002)
#define CTL_RX_INT_LO_SUM_NLEQ1_BF_DEF (0x00000000)

///< SMON Interrupt Status
#define CTL_RX_INT_LO_SUM_SMON_BF_OFF ( 2)
#define CTL_RX_INT_LO_SUM_SMON_BF_WID ( 1)
#define CTL_RX_INT_LO_SUM_SMON_BF_MSK (0x00000004)
#define CTL_RX_INT_LO_SUM_SMON_BF_DEF (0x00000000)


/** @brief CTL_REG_TX_INT_HI_SUM register description at address offset 0x18
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/TX_INT_HI_SUM
  * High Priority TX path interrupt summary
  */

typedef union {
  struct {
    uint32_t CDPD0 : 1;
    ///< CDPD0 Interrupt Status
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDPD1 : 1;
    ///< CDPD1 Interrupt Status
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t SMC0 : 1;
    ///< SMC0 Interrupt Status
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t SMC1 : 1;
    ///< SMC1 Interrupt Status
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t TXM0 : 1;
    ///< TXM0 Interrupt Status
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t TXM1 : 1;
    ///< TXM1 Interrupt Status
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} ctl_tx_int_hi_sum_reg_t;

#define CTL_TX_INT_HI_SUM_DEFAULT (0x00000000U)
#define CTL_TX_INT_HI_SUM_RD_MASK (0x0000003fU)
#define CTL_TX_INT_HI_SUM_WR_MASK (0x00000000U)


///< CDPD0 Interrupt Status
#define CTL_TX_INT_HI_SUM_CDPD0_BF_OFF ( 0)
#define CTL_TX_INT_HI_SUM_CDPD0_BF_WID ( 1)
#define CTL_TX_INT_HI_SUM_CDPD0_BF_MSK (0x00000001)
#define CTL_TX_INT_HI_SUM_CDPD0_BF_DEF (0x00000000)

///< CDPD1 Interrupt Status
#define CTL_TX_INT_HI_SUM_CDPD1_BF_OFF ( 1)
#define CTL_TX_INT_HI_SUM_CDPD1_BF_WID ( 1)
#define CTL_TX_INT_HI_SUM_CDPD1_BF_MSK (0x00000002)
#define CTL_TX_INT_HI_SUM_CDPD1_BF_DEF (0x00000000)

///< SMC0 Interrupt Status
#define CTL_TX_INT_HI_SUM_SMC0_BF_OFF ( 2)
#define CTL_TX_INT_HI_SUM_SMC0_BF_WID ( 1)
#define CTL_TX_INT_HI_SUM_SMC0_BF_MSK (0x00000004)
#define CTL_TX_INT_HI_SUM_SMC0_BF_DEF (0x00000000)

///< SMC1 Interrupt Status
#define CTL_TX_INT_HI_SUM_SMC1_BF_OFF ( 3)
#define CTL_TX_INT_HI_SUM_SMC1_BF_WID ( 1)
#define CTL_TX_INT_HI_SUM_SMC1_BF_MSK (0x00000008)
#define CTL_TX_INT_HI_SUM_SMC1_BF_DEF (0x00000000)

///< TXM0 Interrupt Status
#define CTL_TX_INT_HI_SUM_TXM0_BF_OFF ( 4)
#define CTL_TX_INT_HI_SUM_TXM0_BF_WID ( 1)
#define CTL_TX_INT_HI_SUM_TXM0_BF_MSK (0x00000010)
#define CTL_TX_INT_HI_SUM_TXM0_BF_DEF (0x00000000)

///< TXM1 Interrupt Status
#define CTL_TX_INT_HI_SUM_TXM1_BF_OFF ( 5)
#define CTL_TX_INT_HI_SUM_TXM1_BF_WID ( 1)
#define CTL_TX_INT_HI_SUM_TXM1_BF_MSK (0x00000020)
#define CTL_TX_INT_HI_SUM_TXM1_BF_DEF (0x00000000)


/** @brief CTL_REG_TX_INT_LO_SUM register description at address offset 0x1c
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/TX_INT_LO_SUM
  * Low Priority TX path interrupt summary
  */

typedef union {
  struct {
    uint32_t CDPD0 : 1;
    ///< CDPD0 Interrupt Status
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t CDPD1 : 1;
    ///< CDPD1 Interrupt Status
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t SMC0 : 1;
    ///< SMC0 Interrupt Status
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t SMC1 : 1;
    ///< SMC1 Interrupt Status
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t TXM0 : 1;
    ///< TXM0 Interrupt Status
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t TXM1 : 1;
    ///< TXM1 Interrupt Status
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} ctl_tx_int_lo_sum_reg_t;

#define CTL_TX_INT_LO_SUM_DEFAULT (0x00000000U)
#define CTL_TX_INT_LO_SUM_RD_MASK (0x0000003fU)
#define CTL_TX_INT_LO_SUM_WR_MASK (0x00000000U)


///< CDPD0 Interrupt Status
#define CTL_TX_INT_LO_SUM_CDPD0_BF_OFF ( 0)
#define CTL_TX_INT_LO_SUM_CDPD0_BF_WID ( 1)
#define CTL_TX_INT_LO_SUM_CDPD0_BF_MSK (0x00000001)
#define CTL_TX_INT_LO_SUM_CDPD0_BF_DEF (0x00000000)

///< CDPD1 Interrupt Status
#define CTL_TX_INT_LO_SUM_CDPD1_BF_OFF ( 1)
#define CTL_TX_INT_LO_SUM_CDPD1_BF_WID ( 1)
#define CTL_TX_INT_LO_SUM_CDPD1_BF_MSK (0x00000002)
#define CTL_TX_INT_LO_SUM_CDPD1_BF_DEF (0x00000000)

///< SMC0 Interrupt Status
#define CTL_TX_INT_LO_SUM_SMC0_BF_OFF ( 2)
#define CTL_TX_INT_LO_SUM_SMC0_BF_WID ( 1)
#define CTL_TX_INT_LO_SUM_SMC0_BF_MSK (0x00000004)
#define CTL_TX_INT_LO_SUM_SMC0_BF_DEF (0x00000000)

///< SMC1 Interrupt Status
#define CTL_TX_INT_LO_SUM_SMC1_BF_OFF ( 3)
#define CTL_TX_INT_LO_SUM_SMC1_BF_WID ( 1)
#define CTL_TX_INT_LO_SUM_SMC1_BF_MSK (0x00000008)
#define CTL_TX_INT_LO_SUM_SMC1_BF_DEF (0x00000000)

///< TXM0 Interrupt Status
#define CTL_TX_INT_LO_SUM_TXM0_BF_OFF ( 4)
#define CTL_TX_INT_LO_SUM_TXM0_BF_WID ( 1)
#define CTL_TX_INT_LO_SUM_TXM0_BF_MSK (0x00000010)
#define CTL_TX_INT_LO_SUM_TXM0_BF_DEF (0x00000000)

///< TXM1 Interrupt Status
#define CTL_TX_INT_LO_SUM_TXM1_BF_OFF ( 5)
#define CTL_TX_INT_LO_SUM_TXM1_BF_WID ( 1)
#define CTL_TX_INT_LO_SUM_TXM1_BF_MSK (0x00000020)
#define CTL_TX_INT_LO_SUM_TXM1_BF_DEF (0x00000000)


/** @brief CTL_REG_BRIDGE_STATUS register description at address offset 0x20
  *
  * Register default value:        0x00010000
  * Register full path in IP: Ctl/REG/BRIDGE_STATUS
  * APB Bridge Status Register
  */

typedef union {
  struct {
    uint32_t TIMEOUT_VALUE : 20;
    ///< Number of core clocks to wait before timing out an APB request
    ///< AccessType="RW/L" BitOffset="0" ResetValue="0x10000"
    uint32_t REVISION : 8;
    ///< Module Revision Number
    ///< AccessType="RO" BitOffset="20" ResetValue="0x0"
    uint32_t SW_LOCK_CTRL : 1;
    ///< Block software writes to timeout_value if set
    ///< AccessType="RW/1S/V/L" BitOffset="28" ResetValue="0x0"
    uint32_t UNSOL_ACK : 1;
    ///< An unsolicited acknowledge was received
    ///< AccessType="RW/1C/V" BitOffset="29" ResetValue="0x0"
    uint32_t ACK_ERROR : 1;
    ///< Acknowledgement had error bit set
    ///< AccessType="RW/1C/V" BitOffset="30" ResetValue="0x0"
    uint32_t TIMEOUT : 1;
    ///< An APB request has timed out
    ///< AccessType="RW/1C/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} ctl_brdg_stat_reg_t;

#define CTL_BRDG_STAT_DEFAULT (0x00010000U)
#define CTL_BRDG_STAT_RD_MASK (0xffffffffU)
#define CTL_BRDG_STAT_WR_MASK (0xf00fffffU)


///< Number of core clocks to wait before timing out an APB request
#define CTL_BRDG_STAT_TIMEOUT_VAL_BF_OFF ( 0)
#define CTL_BRDG_STAT_TIMEOUT_VAL_BF_WID (20)
#define CTL_BRDG_STAT_TIMEOUT_VAL_BF_MSK (0x000FFFFF)
#define CTL_BRDG_STAT_TIMEOUT_VAL_BF_DEF (0x00010000)

///< Module Revision Number
#define CTL_BRDG_STAT_REVISION_BF_OFF (20)
#define CTL_BRDG_STAT_REVISION_BF_WID ( 8)
#define CTL_BRDG_STAT_REVISION_BF_MSK (0x0FF00000)
#define CTL_BRDG_STAT_REVISION_BF_DEF (0x00000000)

///< Block software writes to timeout_value if set
#define CTL_BRDG_STAT_SW_LOCK_CTRL_BF_OFF (28)
#define CTL_BRDG_STAT_SW_LOCK_CTRL_BF_WID ( 1)
#define CTL_BRDG_STAT_SW_LOCK_CTRL_BF_MSK (0x10000000)
#define CTL_BRDG_STAT_SW_LOCK_CTRL_BF_DEF (0x00000000)

///< An unsolicited acknowledge was received
#define CTL_BRDG_STAT_UNSOL_ACK_BF_OFF (29)
#define CTL_BRDG_STAT_UNSOL_ACK_BF_WID ( 1)
#define CTL_BRDG_STAT_UNSOL_ACK_BF_MSK (0x20000000)
#define CTL_BRDG_STAT_UNSOL_ACK_BF_DEF (0x00000000)

///< Acknowledgement had error bit set
#define CTL_BRDG_STAT_ACK_ERR_BF_OFF (30)
#define CTL_BRDG_STAT_ACK_ERR_BF_WID ( 1)
#define CTL_BRDG_STAT_ACK_ERR_BF_MSK (0x40000000)
#define CTL_BRDG_STAT_ACK_ERR_BF_DEF (0x00000000)

///< An APB request has timed out
#define CTL_BRDG_STAT_TIMEOUT_BF_OFF (31)
#define CTL_BRDG_STAT_TIMEOUT_BF_WID ( 1)
#define CTL_BRDG_STAT_TIMEOUT_BF_MSK (0x80000000)
#define CTL_BRDG_STAT_TIMEOUT_BF_DEF (0x00000000)


/** @brief CTL_REG_LOOPBK_CTL register description at address offset 0x24
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/LOOPBK_CTL
  * Loopback Control
  */

typedef union {
  struct {
    uint32_t LOOPBK0_ENA : 1;
    ///< 0:   Normal Operation for RX Channel 0 (data sourced from ANT) 1:
    ///< Enable Loopback for RX Channel 0 (data sourced from local SMC)
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
    uint32_t LOOPBK0_SEL : 1;
    ///< Channel 0 Loopback Select 0:   RX Channel 0 loopback sourced from
    ///< TX channel 0 1:   RX Channel 0 loopback sourced from TX channel 1
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
    uint32_t LOOPBK1_ENA : 1;
    ///< 0:   Normal Operation for RX Channel 1 (data sourced from ANT) 1:
    ///< Enable Loopback for RX Channel 1  (data sourced from local SMC)
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
    uint32_t LOOPBK1_SEL : 1;
    ///< Channel 1 Loopback Select 0:   RX Channel 1 loopback sourced from
    ///< TX channel 0 1:   RX Channel 1 loopback sourced from TX channel 1
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
    uint32_t LOOPBK0_ACT : 1;
    ///< Indicates loopback data is actively flowing for Channel 0. Cleared
    ///< when LOOPBK0_ENA is low and goes high on first data looped back from
    ///< the selected SMC
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
    uint32_t LOOPBK1_ACT : 1;
    ///< Indicates loopback data is actively flowing for Channel 1. Cleared
    ///< when LOOPBK1_ENA is low and goes high on first data looped back from
    ///< the selected SMC
    ///< AccessType="RO" BitOffset="17" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} ctl_loopbk_ctl_reg_t;

#define CTL_LOOPBK_CTL_DEFAULT (0x00000000U)
#define CTL_LOOPBK_CTL_RD_MASK (0x00031111U)
#define CTL_LOOPBK_CTL_WR_MASK (0x00001111U)


///< 0:   Normal Operation for RX Channel 0 (data sourced from ANT) 1:
///< Enable Loopback for RX Channel 0 (data sourced from local SMC)
#define CTL_LOOPBK_CTL_LOOPBK0_ENA_BF_OFF ( 0)
#define CTL_LOOPBK_CTL_LOOPBK0_ENA_BF_WID ( 1)
#define CTL_LOOPBK_CTL_LOOPBK0_ENA_BF_MSK (0x00000001)
#define CTL_LOOPBK_CTL_LOOPBK0_ENA_BF_DEF (0x00000000)

///< Channel 0 Loopback Select 0:   RX Channel 0 loopback sourced from
///< TX channel 0 1:   RX Channel 0 loopback sourced from TX channel 1
#define CTL_LOOPBK_CTL_LOOPBK0_SEL_BF_OFF ( 4)
#define CTL_LOOPBK_CTL_LOOPBK0_SEL_BF_WID ( 1)
#define CTL_LOOPBK_CTL_LOOPBK0_SEL_BF_MSK (0x00000010)
#define CTL_LOOPBK_CTL_LOOPBK0_SEL_BF_DEF (0x00000000)

///< 0:   Normal Operation for RX Channel 1 (data sourced from ANT) 1:
///< Enable Loopback for RX Channel 1  (data sourced from local SMC)
#define CTL_LOOPBK_CTL_LOOPBK1_ENA_BF_OFF ( 8)
#define CTL_LOOPBK_CTL_LOOPBK1_ENA_BF_WID ( 1)
#define CTL_LOOPBK_CTL_LOOPBK1_ENA_BF_MSK (0x00000100)
#define CTL_LOOPBK_CTL_LOOPBK1_ENA_BF_DEF (0x00000000)

///< Channel 1 Loopback Select 0:   RX Channel 1 loopback sourced from
///< TX channel 0 1:   RX Channel 1 loopback sourced from TX channel 1
#define CTL_LOOPBK_CTL_LOOPBK1_SEL_BF_OFF (12)
#define CTL_LOOPBK_CTL_LOOPBK1_SEL_BF_WID ( 1)
#define CTL_LOOPBK_CTL_LOOPBK1_SEL_BF_MSK (0x00001000)
#define CTL_LOOPBK_CTL_LOOPBK1_SEL_BF_DEF (0x00000000)

///< Indicates loopback data is actively flowing for Channel 0. Cleared
///< when LOOPBK0_ENA is low and goes high on first data looped back from
///< the selected SMC
#define CTL_LOOPBK_CTL_LOOPBK0_ACT_BF_OFF (16)
#define CTL_LOOPBK_CTL_LOOPBK0_ACT_BF_WID ( 1)
#define CTL_LOOPBK_CTL_LOOPBK0_ACT_BF_MSK (0x00010000)
#define CTL_LOOPBK_CTL_LOOPBK0_ACT_BF_DEF (0x00000000)

///< Indicates loopback data is actively flowing for Channel 1. Cleared
///< when LOOPBK1_ENA is low and goes high on first data looped back from
///< the selected SMC
#define CTL_LOOPBK_CTL_LOOPBK1_ACT_BF_OFF (17)
#define CTL_LOOPBK_CTL_LOOPBK1_ACT_BF_WID ( 1)
#define CTL_LOOPBK_CTL_LOOPBK1_ACT_BF_MSK (0x00020000)
#define CTL_LOOPBK_CTL_LOOPBK1_ACT_BF_DEF (0x00000000)


/** @brief CTL_REG_SMON_INT_STATUS register description at address offset 0x40
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/SMON_INT_STATUS
  * TRX_ANT Interrupt Status Register
  */

typedef union {
  struct {
    uint32_t SMON_STAT : 1;
    ///< Indicates interrupt status for the SMON
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} ctl_smon_int_stat_reg_t;

#define CTL_SMON_INT_STAT_DEFAULT (0x00000000U)
#define CTL_SMON_INT_STAT_RD_MASK (0x00000001U)
#define CTL_SMON_INT_STAT_WR_MASK (0x00000000U)


///< Indicates interrupt status for the SMON
#define CTL_SMON_INT_STAT_SMON_STAT_BF_OFF ( 0)
#define CTL_SMON_INT_STAT_SMON_STAT_BF_WID ( 1)
#define CTL_SMON_INT_STAT_SMON_STAT_BF_MSK (0x00000001)
#define CTL_SMON_INT_STAT_SMON_STAT_BF_DEF (0x00000000)


/** @brief CTL_REG_SMON_INT_HI_EN register description at address offset 0x44
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/SMON_INT_HI_EN
  * TRX_ANT Interrupt High Enable Register
  */

typedef union {
  struct {
    uint32_t INT_HI_EN : 1;
    ///< Register error interrupt high enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} ctl_smon_int_hi_en_reg_t;

#define CTL_SMON_INT_HI_EN_DEFAULT (0x00000000U)
#define CTL_SMON_INT_HI_EN_RD_MASK (0x00000001U)
#define CTL_SMON_INT_HI_EN_WR_MASK (0x00000001U)


///< Register error interrupt high enable
#define CTL_SMON_INT_HI_EN_INT_HI_EN_BF_OFF ( 0)
#define CTL_SMON_INT_HI_EN_INT_HI_EN_BF_WID ( 1)
#define CTL_SMON_INT_HI_EN_INT_HI_EN_BF_MSK (0x00000001)
#define CTL_SMON_INT_HI_EN_INT_HI_EN_BF_DEF (0x00000000)


/** @brief CTL_REG_SMON_INT_LO_EN register description at address offset 0x48
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/SMON_INT_LO_EN
  * TRX_ANT Interrupt Low Enable Register
  */

typedef union {
  struct {
    uint32_t INT_LO_EN : 1;
    ///< Register error interrupt low enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} ctl_smon_int_lo_en_reg_t;

#define CTL_SMON_INT_LO_EN_DEFAULT (0x00000000U)
#define CTL_SMON_INT_LO_EN_RD_MASK (0x00000001U)
#define CTL_SMON_INT_LO_EN_WR_MASK (0x00000001U)


///< Register error interrupt low enable
#define CTL_SMON_INT_LO_EN_INT_LO_EN_BF_OFF ( 0)
#define CTL_SMON_INT_LO_EN_INT_LO_EN_BF_WID ( 1)
#define CTL_SMON_INT_LO_EN_INT_LO_EN_BF_MSK (0x00000001)
#define CTL_SMON_INT_LO_EN_INT_LO_EN_BF_DEF (0x00000000)


/** @brief CTL_REG_SMON_INT_CLEAR register description at address offset 0x4c
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/SMON_INT_CLEAR
  * FB SYS Interrupt Clear Register
  */

typedef union {
  struct {
    uint32_t INT_CLR : 1;
    ///< Register error interrupt clear
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} ctl_smon_int_clr_reg_t;

#define CTL_SMON_INT_CLR_DEFAULT (0x00000000U)
#define CTL_SMON_INT_CLR_RD_MASK (0x00000001U)
#define CTL_SMON_INT_CLR_WR_MASK (0x00000001U)


///< Register error interrupt clear
#define CTL_SMON_INT_CLR_INT_CLR_BF_OFF ( 0)
#define CTL_SMON_INT_CLR_INT_CLR_BF_WID ( 1)
#define CTL_SMON_INT_CLR_INT_CLR_BF_MSK (0x00000001)
#define CTL_SMON_INT_CLR_INT_CLR_BF_DEF (0x00000000)


/** @brief CTL_REG_SMON_INT_FORCE register description at address offset 0x50
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/SMON_INT_FORCE
  * TRX_ANT Interrupt Force Register
  */

typedef union {
  struct {
    uint32_t INT_FORCE : 1;
    ///< Register error interrupt force
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} ctl_smon_int_force_reg_t;

#define CTL_SMON_INT_FORCE_DEFAULT (0x00000000U)
#define CTL_SMON_INT_FORCE_RD_MASK (0x00000001U)
#define CTL_SMON_INT_FORCE_WR_MASK (0x00000001U)


///< Register error interrupt force
#define CTL_SMON_INT_FORCE_INT_FORCE_BF_OFF ( 0)
#define CTL_SMON_INT_FORCE_INT_FORCE_BF_WID ( 1)
#define CTL_SMON_INT_FORCE_INT_FORCE_BF_MSK (0x00000001)
#define CTL_SMON_INT_FORCE_INT_FORCE_BF_DEF (0x00000000)


/** @brief CTL_REG_DL_SMC_DITHER_SHDW0 register description at address offset 0x100
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/DL_SMC_DITHER_SHDW0
  * Link Event control
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 15;
    ///< Number of clock cycles after the rising transition of Uplink/Downlink
    ///< event to set the event to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FALL_DELAY : 15;
    ///< Number of clock cycles after the falling transition of Uplink/Downlink
    ///< event to set the event to FALL_VALUE.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} ctl_dl_smc_dither_shdw0_reg_t;

#define CTL_DL_SMC_DITHER_SHDW0_DEFAULT (0x00000000U)
#define CTL_DL_SMC_DITHER_SHDW0_RD_MASK (0xffffffffU)
#define CTL_DL_SMC_DITHER_SHDW0_WR_MASK (0xffffffffU)


///< Number of clock cycles after the rising transition of Uplink/Downlink
///< event to set the event to RISE_VALUE.
#define CTL_DL_SMC_DITHER_SHDW0_RISE_DELAY_BF_OFF ( 0)
#define CTL_DL_SMC_DITHER_SHDW0_RISE_DELAY_BF_WID (15)
#define CTL_DL_SMC_DITHER_SHDW0_RISE_DELAY_BF_MSK (0x00007FFF)
#define CTL_DL_SMC_DITHER_SHDW0_RISE_DELAY_BF_DEF (0x00000000)

///< Number of clock cycles after the falling transition of Uplink/Downlink
///< event to set the event to FALL_VALUE.
#define CTL_DL_SMC_DITHER_SHDW0_FALL_DELAY_BF_OFF (15)
#define CTL_DL_SMC_DITHER_SHDW0_FALL_DELAY_BF_WID (15)
#define CTL_DL_SMC_DITHER_SHDW0_FALL_DELAY_BF_MSK (0x3FFF8000)
#define CTL_DL_SMC_DITHER_SHDW0_FALL_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define CTL_DL_SMC_DITHER_SHDW0_RISE_VAL_BF_OFF (30)
#define CTL_DL_SMC_DITHER_SHDW0_RISE_VAL_BF_WID ( 1)
#define CTL_DL_SMC_DITHER_SHDW0_RISE_VAL_BF_MSK (0x40000000)
#define CTL_DL_SMC_DITHER_SHDW0_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define CTL_DL_SMC_DITHER_SHDW0_FALL_VAL_BF_OFF (31)
#define CTL_DL_SMC_DITHER_SHDW0_FALL_VAL_BF_WID ( 1)
#define CTL_DL_SMC_DITHER_SHDW0_FALL_VAL_BF_MSK (0x80000000)
#define CTL_DL_SMC_DITHER_SHDW0_FALL_VAL_BF_DEF (0x00000000)


/** @brief CTL_REG_DL_SMC_LSB_OFFSET_SHDW0 register description at address offset 0x104
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/DL_SMC_LSB_OFFSET_SHDW0
  * Link Event control
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 15;
    ///< Number of clock cycles after the rising transition of Uplink/Downlink
    ///< event to set the event to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FALL_DELAY : 15;
    ///< Number of clock cycles after the falling transition of Uplink/Downlink
    ///< event to set the event to FALL_VALUE.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} ctl_dl_smc_lsb_offset_shdw0_reg_t;

#define CTL_DL_SMC_LSB_OFFSET_SHDW0_DEFAULT (0x00000000U)
#define CTL_DL_SMC_LSB_OFFSET_SHDW0_RD_MASK (0xffffffffU)
#define CTL_DL_SMC_LSB_OFFSET_SHDW0_WR_MASK (0xffffffffU)


///< Number of clock cycles after the rising transition of Uplink/Downlink
///< event to set the event to RISE_VALUE.
#define CTL_DL_SMC_LSB_OFFSET_SHDW0_RISE_DELAY_BF_OFF ( 0)
#define CTL_DL_SMC_LSB_OFFSET_SHDW0_RISE_DELAY_BF_WID (15)
#define CTL_DL_SMC_LSB_OFFSET_SHDW0_RISE_DELAY_BF_MSK (0x00007FFF)
#define CTL_DL_SMC_LSB_OFFSET_SHDW0_RISE_DELAY_BF_DEF (0x00000000)

///< Number of clock cycles after the falling transition of Uplink/Downlink
///< event to set the event to FALL_VALUE.
#define CTL_DL_SMC_LSB_OFFSET_SHDW0_FALL_DELAY_BF_OFF (15)
#define CTL_DL_SMC_LSB_OFFSET_SHDW0_FALL_DELAY_BF_WID (15)
#define CTL_DL_SMC_LSB_OFFSET_SHDW0_FALL_DELAY_BF_MSK (0x3FFF8000)
#define CTL_DL_SMC_LSB_OFFSET_SHDW0_FALL_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define CTL_DL_SMC_LSB_OFFSET_SHDW0_RISE_VAL_BF_OFF (30)
#define CTL_DL_SMC_LSB_OFFSET_SHDW0_RISE_VAL_BF_WID ( 1)
#define CTL_DL_SMC_LSB_OFFSET_SHDW0_RISE_VAL_BF_MSK (0x40000000)
#define CTL_DL_SMC_LSB_OFFSET_SHDW0_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define CTL_DL_SMC_LSB_OFFSET_SHDW0_FALL_VAL_BF_OFF (31)
#define CTL_DL_SMC_LSB_OFFSET_SHDW0_FALL_VAL_BF_WID ( 1)
#define CTL_DL_SMC_LSB_OFFSET_SHDW0_FALL_VAL_BF_MSK (0x80000000)
#define CTL_DL_SMC_LSB_OFFSET_SHDW0_FALL_VAL_BF_DEF (0x00000000)


/** @brief CTL_REG_DL_TXM_ENA_SHDW0 register description at address offset 0x108
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/DL_TXM_ENA_SHDW0
  * Link Event control
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 15;
    ///< Number of clock cycles after the rising transition of Uplink/Downlink
    ///< event to set the event to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FALL_DELAY : 15;
    ///< Number of clock cycles after the falling transition of Uplink/Downlink
    ///< event to set the event to FALL_VALUE.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} ctl_dl_txm_ena_shdw0_reg_t;

#define CTL_DL_TXM_ENA_SHDW0_DEFAULT (0x00000000U)
#define CTL_DL_TXM_ENA_SHDW0_RD_MASK (0xffffffffU)
#define CTL_DL_TXM_ENA_SHDW0_WR_MASK (0xffffffffU)


///< Number of clock cycles after the rising transition of Uplink/Downlink
///< event to set the event to RISE_VALUE.
#define CTL_DL_TXM_ENA_SHDW0_RISE_DELAY_BF_OFF ( 0)
#define CTL_DL_TXM_ENA_SHDW0_RISE_DELAY_BF_WID (15)
#define CTL_DL_TXM_ENA_SHDW0_RISE_DELAY_BF_MSK (0x00007FFF)
#define CTL_DL_TXM_ENA_SHDW0_RISE_DELAY_BF_DEF (0x00000000)

///< Number of clock cycles after the falling transition of Uplink/Downlink
///< event to set the event to FALL_VALUE.
#define CTL_DL_TXM_ENA_SHDW0_FALL_DELAY_BF_OFF (15)
#define CTL_DL_TXM_ENA_SHDW0_FALL_DELAY_BF_WID (15)
#define CTL_DL_TXM_ENA_SHDW0_FALL_DELAY_BF_MSK (0x3FFF8000)
#define CTL_DL_TXM_ENA_SHDW0_FALL_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define CTL_DL_TXM_ENA_SHDW0_RISE_VAL_BF_OFF (30)
#define CTL_DL_TXM_ENA_SHDW0_RISE_VAL_BF_WID ( 1)
#define CTL_DL_TXM_ENA_SHDW0_RISE_VAL_BF_MSK (0x40000000)
#define CTL_DL_TXM_ENA_SHDW0_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define CTL_DL_TXM_ENA_SHDW0_FALL_VAL_BF_OFF (31)
#define CTL_DL_TXM_ENA_SHDW0_FALL_VAL_BF_WID ( 1)
#define CTL_DL_TXM_ENA_SHDW0_FALL_VAL_BF_MSK (0x80000000)
#define CTL_DL_TXM_ENA_SHDW0_FALL_VAL_BF_DEF (0x00000000)


/** @brief CTL_REG_UL_RXM_ENA_SHDW0 register description at address offset 0x10c
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/UL_RXM_ENA_SHDW0
  * Link Event control
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 15;
    ///< Number of clock cycles after the rising transition of Uplink/Downlink
    ///< event to set the event to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FALL_DELAY : 15;
    ///< Number of clock cycles after the falling transition of Uplink/Downlink
    ///< event to set the event to FALL_VALUE.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} ctl_ul_rxm_ena_shdw0_reg_t;

#define CTL_UL_RXM_ENA_SHDW0_DEFAULT (0x00000000U)
#define CTL_UL_RXM_ENA_SHDW0_RD_MASK (0xffffffffU)
#define CTL_UL_RXM_ENA_SHDW0_WR_MASK (0xffffffffU)


///< Number of clock cycles after the rising transition of Uplink/Downlink
///< event to set the event to RISE_VALUE.
#define CTL_UL_RXM_ENA_SHDW0_RISE_DELAY_BF_OFF ( 0)
#define CTL_UL_RXM_ENA_SHDW0_RISE_DELAY_BF_WID (15)
#define CTL_UL_RXM_ENA_SHDW0_RISE_DELAY_BF_MSK (0x00007FFF)
#define CTL_UL_RXM_ENA_SHDW0_RISE_DELAY_BF_DEF (0x00000000)

///< Number of clock cycles after the falling transition of Uplink/Downlink
///< event to set the event to FALL_VALUE.
#define CTL_UL_RXM_ENA_SHDW0_FALL_DELAY_BF_OFF (15)
#define CTL_UL_RXM_ENA_SHDW0_FALL_DELAY_BF_WID (15)
#define CTL_UL_RXM_ENA_SHDW0_FALL_DELAY_BF_MSK (0x3FFF8000)
#define CTL_UL_RXM_ENA_SHDW0_FALL_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define CTL_UL_RXM_ENA_SHDW0_RISE_VAL_BF_OFF (30)
#define CTL_UL_RXM_ENA_SHDW0_RISE_VAL_BF_WID ( 1)
#define CTL_UL_RXM_ENA_SHDW0_RISE_VAL_BF_MSK (0x40000000)
#define CTL_UL_RXM_ENA_SHDW0_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define CTL_UL_RXM_ENA_SHDW0_FALL_VAL_BF_OFF (31)
#define CTL_UL_RXM_ENA_SHDW0_FALL_VAL_BF_WID ( 1)
#define CTL_UL_RXM_ENA_SHDW0_FALL_VAL_BF_MSK (0x80000000)
#define CTL_UL_RXM_ENA_SHDW0_FALL_VAL_BF_DEF (0x00000000)


/** @brief CTL_REG_UL_RXM_PS_SHDW0 register description at address offset 0x110
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/UL_RXM_PS_SHDW0
  * Link Event control
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 15;
    ///< Number of clock cycles after the rising transition of Uplink/Downlink
    ///< event to set the event to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FALL_DELAY : 15;
    ///< Number of clock cycles after the falling transition of Uplink/Downlink
    ///< event to set the event to FALL_VALUE.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} ctl_ul_rxm_ps_shdw0_reg_t;

#define CTL_UL_RXM_PS_SHDW0_DEFAULT (0x00000000U)
#define CTL_UL_RXM_PS_SHDW0_RD_MASK (0xffffffffU)
#define CTL_UL_RXM_PS_SHDW0_WR_MASK (0xffffffffU)


///< Number of clock cycles after the rising transition of Uplink/Downlink
///< event to set the event to RISE_VALUE.
#define CTL_UL_RXM_PS_SHDW0_RISE_DELAY_BF_OFF ( 0)
#define CTL_UL_RXM_PS_SHDW0_RISE_DELAY_BF_WID (15)
#define CTL_UL_RXM_PS_SHDW0_RISE_DELAY_BF_MSK (0x00007FFF)
#define CTL_UL_RXM_PS_SHDW0_RISE_DELAY_BF_DEF (0x00000000)

///< Number of clock cycles after the falling transition of Uplink/Downlink
///< event to set the event to FALL_VALUE.
#define CTL_UL_RXM_PS_SHDW0_FALL_DELAY_BF_OFF (15)
#define CTL_UL_RXM_PS_SHDW0_FALL_DELAY_BF_WID (15)
#define CTL_UL_RXM_PS_SHDW0_FALL_DELAY_BF_MSK (0x3FFF8000)
#define CTL_UL_RXM_PS_SHDW0_FALL_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define CTL_UL_RXM_PS_SHDW0_RISE_VAL_BF_OFF (30)
#define CTL_UL_RXM_PS_SHDW0_RISE_VAL_BF_WID ( 1)
#define CTL_UL_RXM_PS_SHDW0_RISE_VAL_BF_MSK (0x40000000)
#define CTL_UL_RXM_PS_SHDW0_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define CTL_UL_RXM_PS_SHDW0_FALL_VAL_BF_OFF (31)
#define CTL_UL_RXM_PS_SHDW0_FALL_VAL_BF_WID ( 1)
#define CTL_UL_RXM_PS_SHDW0_FALL_VAL_BF_MSK (0x80000000)
#define CTL_UL_RXM_PS_SHDW0_FALL_VAL_BF_DEF (0x00000000)


/** @brief CTL_REG_UL_NLEQ_ZERO_STUFF_SHDW0 register description at address offset 0x114
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/UL_NLEQ_ZERO_STUFF_SHDW0
  * Link Event control
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 15;
    ///< Number of clock cycles after the rising transition of Uplink/Downlink
    ///< event to set the event to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FALL_DELAY : 15;
    ///< Number of clock cycles after the falling transition of Uplink/Downlink
    ///< event to set the event to FALL_VALUE.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} ctl_ul_nleq_zero_stuff_shdw0_reg_t;

#define CTL_UL_NLEQ_ZERO_STUFF_SHDW0_DEFAULT (0x00000000U)
#define CTL_UL_NLEQ_ZERO_STUFF_SHDW0_RD_MASK (0xffffffffU)
#define CTL_UL_NLEQ_ZERO_STUFF_SHDW0_WR_MASK (0xffffffffU)


///< Number of clock cycles after the rising transition of Uplink/Downlink
///< event to set the event to RISE_VALUE.
#define CTL_UL_NLEQ_ZERO_STUFF_SHDW0_RISE_DELAY_BF_OFF ( 0)
#define CTL_UL_NLEQ_ZERO_STUFF_SHDW0_RISE_DELAY_BF_WID (15)
#define CTL_UL_NLEQ_ZERO_STUFF_SHDW0_RISE_DELAY_BF_MSK (0x00007FFF)
#define CTL_UL_NLEQ_ZERO_STUFF_SHDW0_RISE_DELAY_BF_DEF (0x00000000)

///< Number of clock cycles after the falling transition of Uplink/Downlink
///< event to set the event to FALL_VALUE.
#define CTL_UL_NLEQ_ZERO_STUFF_SHDW0_FALL_DELAY_BF_OFF (15)
#define CTL_UL_NLEQ_ZERO_STUFF_SHDW0_FALL_DELAY_BF_WID (15)
#define CTL_UL_NLEQ_ZERO_STUFF_SHDW0_FALL_DELAY_BF_MSK (0x3FFF8000)
#define CTL_UL_NLEQ_ZERO_STUFF_SHDW0_FALL_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define CTL_UL_NLEQ_ZERO_STUFF_SHDW0_RISE_VAL_BF_OFF (30)
#define CTL_UL_NLEQ_ZERO_STUFF_SHDW0_RISE_VAL_BF_WID ( 1)
#define CTL_UL_NLEQ_ZERO_STUFF_SHDW0_RISE_VAL_BF_MSK (0x40000000)
#define CTL_UL_NLEQ_ZERO_STUFF_SHDW0_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define CTL_UL_NLEQ_ZERO_STUFF_SHDW0_FALL_VAL_BF_OFF (31)
#define CTL_UL_NLEQ_ZERO_STUFF_SHDW0_FALL_VAL_BF_WID ( 1)
#define CTL_UL_NLEQ_ZERO_STUFF_SHDW0_FALL_VAL_BF_MSK (0x80000000)
#define CTL_UL_NLEQ_ZERO_STUFF_SHDW0_FALL_VAL_BF_DEF (0x00000000)


/** @brief CTL_REG_DL_SMC_DITHER_SHDW1 register description at address offset 0x118
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/DL_SMC_DITHER_SHDW1
  * Link Event control
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 15;
    ///< Number of clock cycles after the rising transition of Uplink/Downlink
    ///< event to set the event to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FALL_DELAY : 15;
    ///< Number of clock cycles after the falling transition of Uplink/Downlink
    ///< event to set the event to FALL_VALUE.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} ctl_dl_smc_dither_shdw1_reg_t;

#define CTL_DL_SMC_DITHER_SHDW1_DEFAULT (0x00000000U)
#define CTL_DL_SMC_DITHER_SHDW1_RD_MASK (0xffffffffU)
#define CTL_DL_SMC_DITHER_SHDW1_WR_MASK (0xffffffffU)


///< Number of clock cycles after the rising transition of Uplink/Downlink
///< event to set the event to RISE_VALUE.
#define CTL_DL_SMC_DITHER_SHDW1_RISE_DELAY_BF_OFF ( 0)
#define CTL_DL_SMC_DITHER_SHDW1_RISE_DELAY_BF_WID (15)
#define CTL_DL_SMC_DITHER_SHDW1_RISE_DELAY_BF_MSK (0x00007FFF)
#define CTL_DL_SMC_DITHER_SHDW1_RISE_DELAY_BF_DEF (0x00000000)

///< Number of clock cycles after the falling transition of Uplink/Downlink
///< event to set the event to FALL_VALUE.
#define CTL_DL_SMC_DITHER_SHDW1_FALL_DELAY_BF_OFF (15)
#define CTL_DL_SMC_DITHER_SHDW1_FALL_DELAY_BF_WID (15)
#define CTL_DL_SMC_DITHER_SHDW1_FALL_DELAY_BF_MSK (0x3FFF8000)
#define CTL_DL_SMC_DITHER_SHDW1_FALL_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define CTL_DL_SMC_DITHER_SHDW1_RISE_VAL_BF_OFF (30)
#define CTL_DL_SMC_DITHER_SHDW1_RISE_VAL_BF_WID ( 1)
#define CTL_DL_SMC_DITHER_SHDW1_RISE_VAL_BF_MSK (0x40000000)
#define CTL_DL_SMC_DITHER_SHDW1_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define CTL_DL_SMC_DITHER_SHDW1_FALL_VAL_BF_OFF (31)
#define CTL_DL_SMC_DITHER_SHDW1_FALL_VAL_BF_WID ( 1)
#define CTL_DL_SMC_DITHER_SHDW1_FALL_VAL_BF_MSK (0x80000000)
#define CTL_DL_SMC_DITHER_SHDW1_FALL_VAL_BF_DEF (0x00000000)


/** @brief CTL_REG_DL_SMC_LSB_OFFSET_SHDW1 register description at address offset 0x11c
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/DL_SMC_LSB_OFFSET_SHDW1
  * Link Event control
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 15;
    ///< Number of clock cycles after the rising transition of Uplink/Downlink
    ///< event to set the event to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FALL_DELAY : 15;
    ///< Number of clock cycles after the falling transition of Uplink/Downlink
    ///< event to set the event to FALL_VALUE.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} ctl_dl_smc_lsb_offset_shdw1_reg_t;

#define CTL_DL_SMC_LSB_OFFSET_SHDW1_DEFAULT (0x00000000U)
#define CTL_DL_SMC_LSB_OFFSET_SHDW1_RD_MASK (0xffffffffU)
#define CTL_DL_SMC_LSB_OFFSET_SHDW1_WR_MASK (0xffffffffU)


///< Number of clock cycles after the rising transition of Uplink/Downlink
///< event to set the event to RISE_VALUE.
#define CTL_DL_SMC_LSB_OFFSET_SHDW1_RISE_DELAY_BF_OFF ( 0)
#define CTL_DL_SMC_LSB_OFFSET_SHDW1_RISE_DELAY_BF_WID (15)
#define CTL_DL_SMC_LSB_OFFSET_SHDW1_RISE_DELAY_BF_MSK (0x00007FFF)
#define CTL_DL_SMC_LSB_OFFSET_SHDW1_RISE_DELAY_BF_DEF (0x00000000)

///< Number of clock cycles after the falling transition of Uplink/Downlink
///< event to set the event to FALL_VALUE.
#define CTL_DL_SMC_LSB_OFFSET_SHDW1_FALL_DELAY_BF_OFF (15)
#define CTL_DL_SMC_LSB_OFFSET_SHDW1_FALL_DELAY_BF_WID (15)
#define CTL_DL_SMC_LSB_OFFSET_SHDW1_FALL_DELAY_BF_MSK (0x3FFF8000)
#define CTL_DL_SMC_LSB_OFFSET_SHDW1_FALL_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define CTL_DL_SMC_LSB_OFFSET_SHDW1_RISE_VAL_BF_OFF (30)
#define CTL_DL_SMC_LSB_OFFSET_SHDW1_RISE_VAL_BF_WID ( 1)
#define CTL_DL_SMC_LSB_OFFSET_SHDW1_RISE_VAL_BF_MSK (0x40000000)
#define CTL_DL_SMC_LSB_OFFSET_SHDW1_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define CTL_DL_SMC_LSB_OFFSET_SHDW1_FALL_VAL_BF_OFF (31)
#define CTL_DL_SMC_LSB_OFFSET_SHDW1_FALL_VAL_BF_WID ( 1)
#define CTL_DL_SMC_LSB_OFFSET_SHDW1_FALL_VAL_BF_MSK (0x80000000)
#define CTL_DL_SMC_LSB_OFFSET_SHDW1_FALL_VAL_BF_DEF (0x00000000)


/** @brief CTL_REG_DL_TXM_ENA_SHDW1 register description at address offset 0x120
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/DL_TXM_ENA_SHDW1
  * Link Event control
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 15;
    ///< Number of clock cycles after the rising transition of Uplink/Downlink
    ///< event to set the event to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FALL_DELAY : 15;
    ///< Number of clock cycles after the falling transition of Uplink/Downlink
    ///< event to set the event to FALL_VALUE.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} ctl_dl_txm_ena_shdw1_reg_t;

#define CTL_DL_TXM_ENA_SHDW1_DEFAULT (0x00000000U)
#define CTL_DL_TXM_ENA_SHDW1_RD_MASK (0xffffffffU)
#define CTL_DL_TXM_ENA_SHDW1_WR_MASK (0xffffffffU)


///< Number of clock cycles after the rising transition of Uplink/Downlink
///< event to set the event to RISE_VALUE.
#define CTL_DL_TXM_ENA_SHDW1_RISE_DELAY_BF_OFF ( 0)
#define CTL_DL_TXM_ENA_SHDW1_RISE_DELAY_BF_WID (15)
#define CTL_DL_TXM_ENA_SHDW1_RISE_DELAY_BF_MSK (0x00007FFF)
#define CTL_DL_TXM_ENA_SHDW1_RISE_DELAY_BF_DEF (0x00000000)

///< Number of clock cycles after the falling transition of Uplink/Downlink
///< event to set the event to FALL_VALUE.
#define CTL_DL_TXM_ENA_SHDW1_FALL_DELAY_BF_OFF (15)
#define CTL_DL_TXM_ENA_SHDW1_FALL_DELAY_BF_WID (15)
#define CTL_DL_TXM_ENA_SHDW1_FALL_DELAY_BF_MSK (0x3FFF8000)
#define CTL_DL_TXM_ENA_SHDW1_FALL_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define CTL_DL_TXM_ENA_SHDW1_RISE_VAL_BF_OFF (30)
#define CTL_DL_TXM_ENA_SHDW1_RISE_VAL_BF_WID ( 1)
#define CTL_DL_TXM_ENA_SHDW1_RISE_VAL_BF_MSK (0x40000000)
#define CTL_DL_TXM_ENA_SHDW1_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define CTL_DL_TXM_ENA_SHDW1_FALL_VAL_BF_OFF (31)
#define CTL_DL_TXM_ENA_SHDW1_FALL_VAL_BF_WID ( 1)
#define CTL_DL_TXM_ENA_SHDW1_FALL_VAL_BF_MSK (0x80000000)
#define CTL_DL_TXM_ENA_SHDW1_FALL_VAL_BF_DEF (0x00000000)


/** @brief CTL_REG_UL_RXM_ENA_SHDW1 register description at address offset 0x124
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/UL_RXM_ENA_SHDW1
  * Link Event control
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 15;
    ///< Number of clock cycles after the rising transition of Uplink/Downlink
    ///< event to set the event to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FALL_DELAY : 15;
    ///< Number of clock cycles after the falling transition of Uplink/Downlink
    ///< event to set the event to FALL_VALUE.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} ctl_ul_rxm_ena_shdw1_reg_t;

#define CTL_UL_RXM_ENA_SHDW1_DEFAULT (0x00000000U)
#define CTL_UL_RXM_ENA_SHDW1_RD_MASK (0xffffffffU)
#define CTL_UL_RXM_ENA_SHDW1_WR_MASK (0xffffffffU)


///< Number of clock cycles after the rising transition of Uplink/Downlink
///< event to set the event to RISE_VALUE.
#define CTL_UL_RXM_ENA_SHDW1_RISE_DELAY_BF_OFF ( 0)
#define CTL_UL_RXM_ENA_SHDW1_RISE_DELAY_BF_WID (15)
#define CTL_UL_RXM_ENA_SHDW1_RISE_DELAY_BF_MSK (0x00007FFF)
#define CTL_UL_RXM_ENA_SHDW1_RISE_DELAY_BF_DEF (0x00000000)

///< Number of clock cycles after the falling transition of Uplink/Downlink
///< event to set the event to FALL_VALUE.
#define CTL_UL_RXM_ENA_SHDW1_FALL_DELAY_BF_OFF (15)
#define CTL_UL_RXM_ENA_SHDW1_FALL_DELAY_BF_WID (15)
#define CTL_UL_RXM_ENA_SHDW1_FALL_DELAY_BF_MSK (0x3FFF8000)
#define CTL_UL_RXM_ENA_SHDW1_FALL_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define CTL_UL_RXM_ENA_SHDW1_RISE_VAL_BF_OFF (30)
#define CTL_UL_RXM_ENA_SHDW1_RISE_VAL_BF_WID ( 1)
#define CTL_UL_RXM_ENA_SHDW1_RISE_VAL_BF_MSK (0x40000000)
#define CTL_UL_RXM_ENA_SHDW1_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define CTL_UL_RXM_ENA_SHDW1_FALL_VAL_BF_OFF (31)
#define CTL_UL_RXM_ENA_SHDW1_FALL_VAL_BF_WID ( 1)
#define CTL_UL_RXM_ENA_SHDW1_FALL_VAL_BF_MSK (0x80000000)
#define CTL_UL_RXM_ENA_SHDW1_FALL_VAL_BF_DEF (0x00000000)


/** @brief CTL_REG_UL_RXM_PS_SHDW1 register description at address offset 0x128
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/UL_RXM_PS_SHDW1
  * Link Event control
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 15;
    ///< Number of clock cycles after the rising transition of Uplink/Downlink
    ///< event to set the event to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FALL_DELAY : 15;
    ///< Number of clock cycles after the falling transition of Uplink/Downlink
    ///< event to set the event to FALL_VALUE.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} ctl_ul_rxm_ps_shdw1_reg_t;

#define CTL_UL_RXM_PS_SHDW1_DEFAULT (0x00000000U)
#define CTL_UL_RXM_PS_SHDW1_RD_MASK (0xffffffffU)
#define CTL_UL_RXM_PS_SHDW1_WR_MASK (0xffffffffU)


///< Number of clock cycles after the rising transition of Uplink/Downlink
///< event to set the event to RISE_VALUE.
#define CTL_UL_RXM_PS_SHDW1_RISE_DELAY_BF_OFF ( 0)
#define CTL_UL_RXM_PS_SHDW1_RISE_DELAY_BF_WID (15)
#define CTL_UL_RXM_PS_SHDW1_RISE_DELAY_BF_MSK (0x00007FFF)
#define CTL_UL_RXM_PS_SHDW1_RISE_DELAY_BF_DEF (0x00000000)

///< Number of clock cycles after the falling transition of Uplink/Downlink
///< event to set the event to FALL_VALUE.
#define CTL_UL_RXM_PS_SHDW1_FALL_DELAY_BF_OFF (15)
#define CTL_UL_RXM_PS_SHDW1_FALL_DELAY_BF_WID (15)
#define CTL_UL_RXM_PS_SHDW1_FALL_DELAY_BF_MSK (0x3FFF8000)
#define CTL_UL_RXM_PS_SHDW1_FALL_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define CTL_UL_RXM_PS_SHDW1_RISE_VAL_BF_OFF (30)
#define CTL_UL_RXM_PS_SHDW1_RISE_VAL_BF_WID ( 1)
#define CTL_UL_RXM_PS_SHDW1_RISE_VAL_BF_MSK (0x40000000)
#define CTL_UL_RXM_PS_SHDW1_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define CTL_UL_RXM_PS_SHDW1_FALL_VAL_BF_OFF (31)
#define CTL_UL_RXM_PS_SHDW1_FALL_VAL_BF_WID ( 1)
#define CTL_UL_RXM_PS_SHDW1_FALL_VAL_BF_MSK (0x80000000)
#define CTL_UL_RXM_PS_SHDW1_FALL_VAL_BF_DEF (0x00000000)


/** @brief CTL_REG_UL_NLEQ_ZERO_STUFF_SHDW1 register description at address offset 0x12c
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/UL_NLEQ_ZERO_STUFF_SHDW1
  * Link Event control
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 15;
    ///< Number of clock cycles after the rising transition of Uplink/Downlink
    ///< event to set the event to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FALL_DELAY : 15;
    ///< Number of clock cycles after the falling transition of Uplink/Downlink
    ///< event to set the event to FALL_VALUE.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} ctl_ul_nleq_zero_stuff_shdw1_reg_t;

#define CTL_UL_NLEQ_ZERO_STUFF_SHDW1_DEFAULT (0x00000000U)
#define CTL_UL_NLEQ_ZERO_STUFF_SHDW1_RD_MASK (0xffffffffU)
#define CTL_UL_NLEQ_ZERO_STUFF_SHDW1_WR_MASK (0xffffffffU)


///< Number of clock cycles after the rising transition of Uplink/Downlink
///< event to set the event to RISE_VALUE.
#define CTL_UL_NLEQ_ZERO_STUFF_SHDW1_RISE_DELAY_BF_OFF ( 0)
#define CTL_UL_NLEQ_ZERO_STUFF_SHDW1_RISE_DELAY_BF_WID (15)
#define CTL_UL_NLEQ_ZERO_STUFF_SHDW1_RISE_DELAY_BF_MSK (0x00007FFF)
#define CTL_UL_NLEQ_ZERO_STUFF_SHDW1_RISE_DELAY_BF_DEF (0x00000000)

///< Number of clock cycles after the falling transition of Uplink/Downlink
///< event to set the event to FALL_VALUE.
#define CTL_UL_NLEQ_ZERO_STUFF_SHDW1_FALL_DELAY_BF_OFF (15)
#define CTL_UL_NLEQ_ZERO_STUFF_SHDW1_FALL_DELAY_BF_WID (15)
#define CTL_UL_NLEQ_ZERO_STUFF_SHDW1_FALL_DELAY_BF_MSK (0x3FFF8000)
#define CTL_UL_NLEQ_ZERO_STUFF_SHDW1_FALL_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define CTL_UL_NLEQ_ZERO_STUFF_SHDW1_RISE_VAL_BF_OFF (30)
#define CTL_UL_NLEQ_ZERO_STUFF_SHDW1_RISE_VAL_BF_WID ( 1)
#define CTL_UL_NLEQ_ZERO_STUFF_SHDW1_RISE_VAL_BF_MSK (0x40000000)
#define CTL_UL_NLEQ_ZERO_STUFF_SHDW1_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define CTL_UL_NLEQ_ZERO_STUFF_SHDW1_FALL_VAL_BF_OFF (31)
#define CTL_UL_NLEQ_ZERO_STUFF_SHDW1_FALL_VAL_BF_WID ( 1)
#define CTL_UL_NLEQ_ZERO_STUFF_SHDW1_FALL_VAL_BF_MSK (0x80000000)
#define CTL_UL_NLEQ_ZERO_STUFF_SHDW1_FALL_VAL_BF_DEF (0x00000000)


/** @brief CTL_REG_DL_SMC_DITHER_LIVE0 register description at address offset 0x130
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/DL_SMC_DITHER_LIVE0
  * Link Event control
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 15;
    ///< Number of clock cycles after the rising transition of Uplink/Downlink
    ///< event to set the event to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FALL_DELAY : 15;
    ///< Number of clock cycles after the falling transition of Uplink/Downlink
    ///< event to set the event to FALL_VALUE.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} ctl_dl_smc_dither_live0_reg_t;

#define CTL_DL_SMC_DITHER_LIVE0_DEFAULT (0x00000000U)
#define CTL_DL_SMC_DITHER_LIVE0_RD_MASK (0xffffffffU)
#define CTL_DL_SMC_DITHER_LIVE0_WR_MASK (0xffffffffU)


///< Number of clock cycles after the rising transition of Uplink/Downlink
///< event to set the event to RISE_VALUE.
#define CTL_DL_SMC_DITHER_LIVE0_RISE_DELAY_BF_OFF ( 0)
#define CTL_DL_SMC_DITHER_LIVE0_RISE_DELAY_BF_WID (15)
#define CTL_DL_SMC_DITHER_LIVE0_RISE_DELAY_BF_MSK (0x00007FFF)
#define CTL_DL_SMC_DITHER_LIVE0_RISE_DELAY_BF_DEF (0x00000000)

///< Number of clock cycles after the falling transition of Uplink/Downlink
///< event to set the event to FALL_VALUE.
#define CTL_DL_SMC_DITHER_LIVE0_FALL_DELAY_BF_OFF (15)
#define CTL_DL_SMC_DITHER_LIVE0_FALL_DELAY_BF_WID (15)
#define CTL_DL_SMC_DITHER_LIVE0_FALL_DELAY_BF_MSK (0x3FFF8000)
#define CTL_DL_SMC_DITHER_LIVE0_FALL_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define CTL_DL_SMC_DITHER_LIVE0_RISE_VAL_BF_OFF (30)
#define CTL_DL_SMC_DITHER_LIVE0_RISE_VAL_BF_WID ( 1)
#define CTL_DL_SMC_DITHER_LIVE0_RISE_VAL_BF_MSK (0x40000000)
#define CTL_DL_SMC_DITHER_LIVE0_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define CTL_DL_SMC_DITHER_LIVE0_FALL_VAL_BF_OFF (31)
#define CTL_DL_SMC_DITHER_LIVE0_FALL_VAL_BF_WID ( 1)
#define CTL_DL_SMC_DITHER_LIVE0_FALL_VAL_BF_MSK (0x80000000)
#define CTL_DL_SMC_DITHER_LIVE0_FALL_VAL_BF_DEF (0x00000000)


/** @brief CTL_REG_DL_SMC_LSB_OFFSET_LIVE0 register description at address offset 0x134
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/DL_SMC_LSB_OFFSET_LIVE0
  * Link Event control
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 15;
    ///< Number of clock cycles after the rising transition of Uplink/Downlink
    ///< event to set the event to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FALL_DELAY : 15;
    ///< Number of clock cycles after the falling transition of Uplink/Downlink
    ///< event to set the event to FALL_VALUE.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} ctl_dl_smc_lsb_offset_live0_reg_t;

#define CTL_DL_SMC_LSB_OFFSET_LIVE0_DEFAULT (0x00000000U)
#define CTL_DL_SMC_LSB_OFFSET_LIVE0_RD_MASK (0xffffffffU)
#define CTL_DL_SMC_LSB_OFFSET_LIVE0_WR_MASK (0xffffffffU)


///< Number of clock cycles after the rising transition of Uplink/Downlink
///< event to set the event to RISE_VALUE.
#define CTL_DL_SMC_LSB_OFFSET_LIVE0_RISE_DELAY_BF_OFF ( 0)
#define CTL_DL_SMC_LSB_OFFSET_LIVE0_RISE_DELAY_BF_WID (15)
#define CTL_DL_SMC_LSB_OFFSET_LIVE0_RISE_DELAY_BF_MSK (0x00007FFF)
#define CTL_DL_SMC_LSB_OFFSET_LIVE0_RISE_DELAY_BF_DEF (0x00000000)

///< Number of clock cycles after the falling transition of Uplink/Downlink
///< event to set the event to FALL_VALUE.
#define CTL_DL_SMC_LSB_OFFSET_LIVE0_FALL_DELAY_BF_OFF (15)
#define CTL_DL_SMC_LSB_OFFSET_LIVE0_FALL_DELAY_BF_WID (15)
#define CTL_DL_SMC_LSB_OFFSET_LIVE0_FALL_DELAY_BF_MSK (0x3FFF8000)
#define CTL_DL_SMC_LSB_OFFSET_LIVE0_FALL_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define CTL_DL_SMC_LSB_OFFSET_LIVE0_RISE_VAL_BF_OFF (30)
#define CTL_DL_SMC_LSB_OFFSET_LIVE0_RISE_VAL_BF_WID ( 1)
#define CTL_DL_SMC_LSB_OFFSET_LIVE0_RISE_VAL_BF_MSK (0x40000000)
#define CTL_DL_SMC_LSB_OFFSET_LIVE0_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define CTL_DL_SMC_LSB_OFFSET_LIVE0_FALL_VAL_BF_OFF (31)
#define CTL_DL_SMC_LSB_OFFSET_LIVE0_FALL_VAL_BF_WID ( 1)
#define CTL_DL_SMC_LSB_OFFSET_LIVE0_FALL_VAL_BF_MSK (0x80000000)
#define CTL_DL_SMC_LSB_OFFSET_LIVE0_FALL_VAL_BF_DEF (0x00000000)


/** @brief CTL_REG_DL_TXM_ENA_LIVE0 register description at address offset 0x138
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/DL_TXM_ENA_LIVE0
  * Link Event control
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 15;
    ///< Number of clock cycles after the rising transition of Uplink/Downlink
    ///< event to set the event to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FALL_DELAY : 15;
    ///< Number of clock cycles after the falling transition of Uplink/Downlink
    ///< event to set the event to FALL_VALUE.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} ctl_dl_txm_ena_live0_reg_t;

#define CTL_DL_TXM_ENA_LIVE0_DEFAULT (0x00000000U)
#define CTL_DL_TXM_ENA_LIVE0_RD_MASK (0xffffffffU)
#define CTL_DL_TXM_ENA_LIVE0_WR_MASK (0xffffffffU)


///< Number of clock cycles after the rising transition of Uplink/Downlink
///< event to set the event to RISE_VALUE.
#define CTL_DL_TXM_ENA_LIVE0_RISE_DELAY_BF_OFF ( 0)
#define CTL_DL_TXM_ENA_LIVE0_RISE_DELAY_BF_WID (15)
#define CTL_DL_TXM_ENA_LIVE0_RISE_DELAY_BF_MSK (0x00007FFF)
#define CTL_DL_TXM_ENA_LIVE0_RISE_DELAY_BF_DEF (0x00000000)

///< Number of clock cycles after the falling transition of Uplink/Downlink
///< event to set the event to FALL_VALUE.
#define CTL_DL_TXM_ENA_LIVE0_FALL_DELAY_BF_OFF (15)
#define CTL_DL_TXM_ENA_LIVE0_FALL_DELAY_BF_WID (15)
#define CTL_DL_TXM_ENA_LIVE0_FALL_DELAY_BF_MSK (0x3FFF8000)
#define CTL_DL_TXM_ENA_LIVE0_FALL_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define CTL_DL_TXM_ENA_LIVE0_RISE_VAL_BF_OFF (30)
#define CTL_DL_TXM_ENA_LIVE0_RISE_VAL_BF_WID ( 1)
#define CTL_DL_TXM_ENA_LIVE0_RISE_VAL_BF_MSK (0x40000000)
#define CTL_DL_TXM_ENA_LIVE0_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define CTL_DL_TXM_ENA_LIVE0_FALL_VAL_BF_OFF (31)
#define CTL_DL_TXM_ENA_LIVE0_FALL_VAL_BF_WID ( 1)
#define CTL_DL_TXM_ENA_LIVE0_FALL_VAL_BF_MSK (0x80000000)
#define CTL_DL_TXM_ENA_LIVE0_FALL_VAL_BF_DEF (0x00000000)


/** @brief CTL_REG_UL_RXM_ENA_LIVE0 register description at address offset 0x13c
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/UL_RXM_ENA_LIVE0
  * Link Event control
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 15;
    ///< Number of clock cycles after the rising transition of Uplink/Downlink
    ///< event to set the event to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FALL_DELAY : 15;
    ///< Number of clock cycles after the falling transition of Uplink/Downlink
    ///< event to set the event to FALL_VALUE.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} ctl_ul_rxm_ena_live0_reg_t;

#define CTL_UL_RXM_ENA_LIVE0_DEFAULT (0x00000000U)
#define CTL_UL_RXM_ENA_LIVE0_RD_MASK (0xffffffffU)
#define CTL_UL_RXM_ENA_LIVE0_WR_MASK (0xffffffffU)


///< Number of clock cycles after the rising transition of Uplink/Downlink
///< event to set the event to RISE_VALUE.
#define CTL_UL_RXM_ENA_LIVE0_RISE_DELAY_BF_OFF ( 0)
#define CTL_UL_RXM_ENA_LIVE0_RISE_DELAY_BF_WID (15)
#define CTL_UL_RXM_ENA_LIVE0_RISE_DELAY_BF_MSK (0x00007FFF)
#define CTL_UL_RXM_ENA_LIVE0_RISE_DELAY_BF_DEF (0x00000000)

///< Number of clock cycles after the falling transition of Uplink/Downlink
///< event to set the event to FALL_VALUE.
#define CTL_UL_RXM_ENA_LIVE0_FALL_DELAY_BF_OFF (15)
#define CTL_UL_RXM_ENA_LIVE0_FALL_DELAY_BF_WID (15)
#define CTL_UL_RXM_ENA_LIVE0_FALL_DELAY_BF_MSK (0x3FFF8000)
#define CTL_UL_RXM_ENA_LIVE0_FALL_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define CTL_UL_RXM_ENA_LIVE0_RISE_VAL_BF_OFF (30)
#define CTL_UL_RXM_ENA_LIVE0_RISE_VAL_BF_WID ( 1)
#define CTL_UL_RXM_ENA_LIVE0_RISE_VAL_BF_MSK (0x40000000)
#define CTL_UL_RXM_ENA_LIVE0_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define CTL_UL_RXM_ENA_LIVE0_FALL_VAL_BF_OFF (31)
#define CTL_UL_RXM_ENA_LIVE0_FALL_VAL_BF_WID ( 1)
#define CTL_UL_RXM_ENA_LIVE0_FALL_VAL_BF_MSK (0x80000000)
#define CTL_UL_RXM_ENA_LIVE0_FALL_VAL_BF_DEF (0x00000000)


/** @brief CTL_REG_UL_RXM_PS_LIVE0 register description at address offset 0x140
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/UL_RXM_PS_LIVE0
  * Link Event control
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 15;
    ///< Number of clock cycles after the rising transition of Uplink/Downlink
    ///< event to set the event to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FALL_DELAY : 15;
    ///< Number of clock cycles after the falling transition of Uplink/Downlink
    ///< event to set the event to FALL_VALUE.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} ctl_ul_rxm_ps_live0_reg_t;

#define CTL_UL_RXM_PS_LIVE0_DEFAULT (0x00000000U)
#define CTL_UL_RXM_PS_LIVE0_RD_MASK (0xffffffffU)
#define CTL_UL_RXM_PS_LIVE0_WR_MASK (0xffffffffU)


///< Number of clock cycles after the rising transition of Uplink/Downlink
///< event to set the event to RISE_VALUE.
#define CTL_UL_RXM_PS_LIVE0_RISE_DELAY_BF_OFF ( 0)
#define CTL_UL_RXM_PS_LIVE0_RISE_DELAY_BF_WID (15)
#define CTL_UL_RXM_PS_LIVE0_RISE_DELAY_BF_MSK (0x00007FFF)
#define CTL_UL_RXM_PS_LIVE0_RISE_DELAY_BF_DEF (0x00000000)

///< Number of clock cycles after the falling transition of Uplink/Downlink
///< event to set the event to FALL_VALUE.
#define CTL_UL_RXM_PS_LIVE0_FALL_DELAY_BF_OFF (15)
#define CTL_UL_RXM_PS_LIVE0_FALL_DELAY_BF_WID (15)
#define CTL_UL_RXM_PS_LIVE0_FALL_DELAY_BF_MSK (0x3FFF8000)
#define CTL_UL_RXM_PS_LIVE0_FALL_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define CTL_UL_RXM_PS_LIVE0_RISE_VAL_BF_OFF (30)
#define CTL_UL_RXM_PS_LIVE0_RISE_VAL_BF_WID ( 1)
#define CTL_UL_RXM_PS_LIVE0_RISE_VAL_BF_MSK (0x40000000)
#define CTL_UL_RXM_PS_LIVE0_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define CTL_UL_RXM_PS_LIVE0_FALL_VAL_BF_OFF (31)
#define CTL_UL_RXM_PS_LIVE0_FALL_VAL_BF_WID ( 1)
#define CTL_UL_RXM_PS_LIVE0_FALL_VAL_BF_MSK (0x80000000)
#define CTL_UL_RXM_PS_LIVE0_FALL_VAL_BF_DEF (0x00000000)


/** @brief CTL_REG_UL_NLEQ_ZERO_STUFF_LIVE0 register description at address offset 0x144
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/UL_NLEQ_ZERO_STUFF_LIVE0
  * Link Event control
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 15;
    ///< Number of clock cycles after the rising transition of Uplink/Downlink
    ///< event to set the event to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FALL_DELAY : 15;
    ///< Number of clock cycles after the falling transition of Uplink/Downlink
    ///< event to set the event to FALL_VALUE.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} ctl_ul_nleq_zero_stuff_live0_reg_t;

#define CTL_UL_NLEQ_ZERO_STUFF_LIVE0_DEFAULT (0x00000000U)
#define CTL_UL_NLEQ_ZERO_STUFF_LIVE0_RD_MASK (0xffffffffU)
#define CTL_UL_NLEQ_ZERO_STUFF_LIVE0_WR_MASK (0xffffffffU)


///< Number of clock cycles after the rising transition of Uplink/Downlink
///< event to set the event to RISE_VALUE.
#define CTL_UL_NLEQ_ZERO_STUFF_LIVE0_RISE_DELAY_BF_OFF ( 0)
#define CTL_UL_NLEQ_ZERO_STUFF_LIVE0_RISE_DELAY_BF_WID (15)
#define CTL_UL_NLEQ_ZERO_STUFF_LIVE0_RISE_DELAY_BF_MSK (0x00007FFF)
#define CTL_UL_NLEQ_ZERO_STUFF_LIVE0_RISE_DELAY_BF_DEF (0x00000000)

///< Number of clock cycles after the falling transition of Uplink/Downlink
///< event to set the event to FALL_VALUE.
#define CTL_UL_NLEQ_ZERO_STUFF_LIVE0_FALL_DELAY_BF_OFF (15)
#define CTL_UL_NLEQ_ZERO_STUFF_LIVE0_FALL_DELAY_BF_WID (15)
#define CTL_UL_NLEQ_ZERO_STUFF_LIVE0_FALL_DELAY_BF_MSK (0x3FFF8000)
#define CTL_UL_NLEQ_ZERO_STUFF_LIVE0_FALL_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define CTL_UL_NLEQ_ZERO_STUFF_LIVE0_RISE_VAL_BF_OFF (30)
#define CTL_UL_NLEQ_ZERO_STUFF_LIVE0_RISE_VAL_BF_WID ( 1)
#define CTL_UL_NLEQ_ZERO_STUFF_LIVE0_RISE_VAL_BF_MSK (0x40000000)
#define CTL_UL_NLEQ_ZERO_STUFF_LIVE0_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define CTL_UL_NLEQ_ZERO_STUFF_LIVE0_FALL_VAL_BF_OFF (31)
#define CTL_UL_NLEQ_ZERO_STUFF_LIVE0_FALL_VAL_BF_WID ( 1)
#define CTL_UL_NLEQ_ZERO_STUFF_LIVE0_FALL_VAL_BF_MSK (0x80000000)
#define CTL_UL_NLEQ_ZERO_STUFF_LIVE0_FALL_VAL_BF_DEF (0x00000000)


/** @brief CTL_REG_DL_SMC_DITHER_LIVE1 register description at address offset 0x148
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/DL_SMC_DITHER_LIVE1
  * Link Event control
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 15;
    ///< Number of clock cycles after the rising transition of Uplink/Downlink
    ///< event to set the event to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FALL_DELAY : 15;
    ///< Number of clock cycles after the falling transition of Uplink/Downlink
    ///< event to set the event to FALL_VALUE.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} ctl_dl_smc_dither_live1_reg_t;

#define CTL_DL_SMC_DITHER_LIVE1_DEFAULT (0x00000000U)
#define CTL_DL_SMC_DITHER_LIVE1_RD_MASK (0xffffffffU)
#define CTL_DL_SMC_DITHER_LIVE1_WR_MASK (0xffffffffU)


///< Number of clock cycles after the rising transition of Uplink/Downlink
///< event to set the event to RISE_VALUE.
#define CTL_DL_SMC_DITHER_LIVE1_RISE_DELAY_BF_OFF ( 0)
#define CTL_DL_SMC_DITHER_LIVE1_RISE_DELAY_BF_WID (15)
#define CTL_DL_SMC_DITHER_LIVE1_RISE_DELAY_BF_MSK (0x00007FFF)
#define CTL_DL_SMC_DITHER_LIVE1_RISE_DELAY_BF_DEF (0x00000000)

///< Number of clock cycles after the falling transition of Uplink/Downlink
///< event to set the event to FALL_VALUE.
#define CTL_DL_SMC_DITHER_LIVE1_FALL_DELAY_BF_OFF (15)
#define CTL_DL_SMC_DITHER_LIVE1_FALL_DELAY_BF_WID (15)
#define CTL_DL_SMC_DITHER_LIVE1_FALL_DELAY_BF_MSK (0x3FFF8000)
#define CTL_DL_SMC_DITHER_LIVE1_FALL_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define CTL_DL_SMC_DITHER_LIVE1_RISE_VAL_BF_OFF (30)
#define CTL_DL_SMC_DITHER_LIVE1_RISE_VAL_BF_WID ( 1)
#define CTL_DL_SMC_DITHER_LIVE1_RISE_VAL_BF_MSK (0x40000000)
#define CTL_DL_SMC_DITHER_LIVE1_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define CTL_DL_SMC_DITHER_LIVE1_FALL_VAL_BF_OFF (31)
#define CTL_DL_SMC_DITHER_LIVE1_FALL_VAL_BF_WID ( 1)
#define CTL_DL_SMC_DITHER_LIVE1_FALL_VAL_BF_MSK (0x80000000)
#define CTL_DL_SMC_DITHER_LIVE1_FALL_VAL_BF_DEF (0x00000000)


/** @brief CTL_REG_DL_SMC_LSB_OFFSET_LIVE1 register description at address offset 0x14c
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/DL_SMC_LSB_OFFSET_LIVE1
  * Link Event control
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 15;
    ///< Number of clock cycles after the rising transition of Uplink/Downlink
    ///< event to set the event to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FALL_DELAY : 15;
    ///< Number of clock cycles after the falling transition of Uplink/Downlink
    ///< event to set the event to FALL_VALUE.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} ctl_dl_smc_lsb_offset_live1_reg_t;

#define CTL_DL_SMC_LSB_OFFSET_LIVE1_DEFAULT (0x00000000U)
#define CTL_DL_SMC_LSB_OFFSET_LIVE1_RD_MASK (0xffffffffU)
#define CTL_DL_SMC_LSB_OFFSET_LIVE1_WR_MASK (0xffffffffU)


///< Number of clock cycles after the rising transition of Uplink/Downlink
///< event to set the event to RISE_VALUE.
#define CTL_DL_SMC_LSB_OFFSET_LIVE1_RISE_DELAY_BF_OFF ( 0)
#define CTL_DL_SMC_LSB_OFFSET_LIVE1_RISE_DELAY_BF_WID (15)
#define CTL_DL_SMC_LSB_OFFSET_LIVE1_RISE_DELAY_BF_MSK (0x00007FFF)
#define CTL_DL_SMC_LSB_OFFSET_LIVE1_RISE_DELAY_BF_DEF (0x00000000)

///< Number of clock cycles after the falling transition of Uplink/Downlink
///< event to set the event to FALL_VALUE.
#define CTL_DL_SMC_LSB_OFFSET_LIVE1_FALL_DELAY_BF_OFF (15)
#define CTL_DL_SMC_LSB_OFFSET_LIVE1_FALL_DELAY_BF_WID (15)
#define CTL_DL_SMC_LSB_OFFSET_LIVE1_FALL_DELAY_BF_MSK (0x3FFF8000)
#define CTL_DL_SMC_LSB_OFFSET_LIVE1_FALL_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define CTL_DL_SMC_LSB_OFFSET_LIVE1_RISE_VAL_BF_OFF (30)
#define CTL_DL_SMC_LSB_OFFSET_LIVE1_RISE_VAL_BF_WID ( 1)
#define CTL_DL_SMC_LSB_OFFSET_LIVE1_RISE_VAL_BF_MSK (0x40000000)
#define CTL_DL_SMC_LSB_OFFSET_LIVE1_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define CTL_DL_SMC_LSB_OFFSET_LIVE1_FALL_VAL_BF_OFF (31)
#define CTL_DL_SMC_LSB_OFFSET_LIVE1_FALL_VAL_BF_WID ( 1)
#define CTL_DL_SMC_LSB_OFFSET_LIVE1_FALL_VAL_BF_MSK (0x80000000)
#define CTL_DL_SMC_LSB_OFFSET_LIVE1_FALL_VAL_BF_DEF (0x00000000)


/** @brief CTL_REG_DL_TXM_ENA_LIVE1 register description at address offset 0x150
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/DL_TXM_ENA_LIVE1
  * Link Event control
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 15;
    ///< Number of clock cycles after the rising transition of Uplink/Downlink
    ///< event to set the event to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FALL_DELAY : 15;
    ///< Number of clock cycles after the falling transition of Uplink/Downlink
    ///< event to set the event to FALL_VALUE.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} ctl_dl_txm_ena_live1_reg_t;

#define CTL_DL_TXM_ENA_LIVE1_DEFAULT (0x00000000U)
#define CTL_DL_TXM_ENA_LIVE1_RD_MASK (0xffffffffU)
#define CTL_DL_TXM_ENA_LIVE1_WR_MASK (0xffffffffU)


///< Number of clock cycles after the rising transition of Uplink/Downlink
///< event to set the event to RISE_VALUE.
#define CTL_DL_TXM_ENA_LIVE1_RISE_DELAY_BF_OFF ( 0)
#define CTL_DL_TXM_ENA_LIVE1_RISE_DELAY_BF_WID (15)
#define CTL_DL_TXM_ENA_LIVE1_RISE_DELAY_BF_MSK (0x00007FFF)
#define CTL_DL_TXM_ENA_LIVE1_RISE_DELAY_BF_DEF (0x00000000)

///< Number of clock cycles after the falling transition of Uplink/Downlink
///< event to set the event to FALL_VALUE.
#define CTL_DL_TXM_ENA_LIVE1_FALL_DELAY_BF_OFF (15)
#define CTL_DL_TXM_ENA_LIVE1_FALL_DELAY_BF_WID (15)
#define CTL_DL_TXM_ENA_LIVE1_FALL_DELAY_BF_MSK (0x3FFF8000)
#define CTL_DL_TXM_ENA_LIVE1_FALL_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define CTL_DL_TXM_ENA_LIVE1_RISE_VAL_BF_OFF (30)
#define CTL_DL_TXM_ENA_LIVE1_RISE_VAL_BF_WID ( 1)
#define CTL_DL_TXM_ENA_LIVE1_RISE_VAL_BF_MSK (0x40000000)
#define CTL_DL_TXM_ENA_LIVE1_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define CTL_DL_TXM_ENA_LIVE1_FALL_VAL_BF_OFF (31)
#define CTL_DL_TXM_ENA_LIVE1_FALL_VAL_BF_WID ( 1)
#define CTL_DL_TXM_ENA_LIVE1_FALL_VAL_BF_MSK (0x80000000)
#define CTL_DL_TXM_ENA_LIVE1_FALL_VAL_BF_DEF (0x00000000)


/** @brief CTL_REG_UL_RXM_ENA_LIVE1 register description at address offset 0x154
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/UL_RXM_ENA_LIVE1
  * Link Event control
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 15;
    ///< Number of clock cycles after the rising transition of Uplink/Downlink
    ///< event to set the event to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FALL_DELAY : 15;
    ///< Number of clock cycles after the falling transition of Uplink/Downlink
    ///< event to set the event to FALL_VALUE.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} ctl_ul_rxm_ena_live1_reg_t;

#define CTL_UL_RXM_ENA_LIVE1_DEFAULT (0x00000000U)
#define CTL_UL_RXM_ENA_LIVE1_RD_MASK (0xffffffffU)
#define CTL_UL_RXM_ENA_LIVE1_WR_MASK (0xffffffffU)


///< Number of clock cycles after the rising transition of Uplink/Downlink
///< event to set the event to RISE_VALUE.
#define CTL_UL_RXM_ENA_LIVE1_RISE_DELAY_BF_OFF ( 0)
#define CTL_UL_RXM_ENA_LIVE1_RISE_DELAY_BF_WID (15)
#define CTL_UL_RXM_ENA_LIVE1_RISE_DELAY_BF_MSK (0x00007FFF)
#define CTL_UL_RXM_ENA_LIVE1_RISE_DELAY_BF_DEF (0x00000000)

///< Number of clock cycles after the falling transition of Uplink/Downlink
///< event to set the event to FALL_VALUE.
#define CTL_UL_RXM_ENA_LIVE1_FALL_DELAY_BF_OFF (15)
#define CTL_UL_RXM_ENA_LIVE1_FALL_DELAY_BF_WID (15)
#define CTL_UL_RXM_ENA_LIVE1_FALL_DELAY_BF_MSK (0x3FFF8000)
#define CTL_UL_RXM_ENA_LIVE1_FALL_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define CTL_UL_RXM_ENA_LIVE1_RISE_VAL_BF_OFF (30)
#define CTL_UL_RXM_ENA_LIVE1_RISE_VAL_BF_WID ( 1)
#define CTL_UL_RXM_ENA_LIVE1_RISE_VAL_BF_MSK (0x40000000)
#define CTL_UL_RXM_ENA_LIVE1_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define CTL_UL_RXM_ENA_LIVE1_FALL_VAL_BF_OFF (31)
#define CTL_UL_RXM_ENA_LIVE1_FALL_VAL_BF_WID ( 1)
#define CTL_UL_RXM_ENA_LIVE1_FALL_VAL_BF_MSK (0x80000000)
#define CTL_UL_RXM_ENA_LIVE1_FALL_VAL_BF_DEF (0x00000000)


/** @brief CTL_REG_UL_RXM_PS_LIVE1 register description at address offset 0x158
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/UL_RXM_PS_LIVE1
  * Link Event control
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 15;
    ///< Number of clock cycles after the rising transition of Uplink/Downlink
    ///< event to set the event to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FALL_DELAY : 15;
    ///< Number of clock cycles after the falling transition of Uplink/Downlink
    ///< event to set the event to FALL_VALUE.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} ctl_ul_rxm_ps_live1_reg_t;

#define CTL_UL_RXM_PS_LIVE1_DEFAULT (0x00000000U)
#define CTL_UL_RXM_PS_LIVE1_RD_MASK (0xffffffffU)
#define CTL_UL_RXM_PS_LIVE1_WR_MASK (0xffffffffU)


///< Number of clock cycles after the rising transition of Uplink/Downlink
///< event to set the event to RISE_VALUE.
#define CTL_UL_RXM_PS_LIVE1_RISE_DELAY_BF_OFF ( 0)
#define CTL_UL_RXM_PS_LIVE1_RISE_DELAY_BF_WID (15)
#define CTL_UL_RXM_PS_LIVE1_RISE_DELAY_BF_MSK (0x00007FFF)
#define CTL_UL_RXM_PS_LIVE1_RISE_DELAY_BF_DEF (0x00000000)

///< Number of clock cycles after the falling transition of Uplink/Downlink
///< event to set the event to FALL_VALUE.
#define CTL_UL_RXM_PS_LIVE1_FALL_DELAY_BF_OFF (15)
#define CTL_UL_RXM_PS_LIVE1_FALL_DELAY_BF_WID (15)
#define CTL_UL_RXM_PS_LIVE1_FALL_DELAY_BF_MSK (0x3FFF8000)
#define CTL_UL_RXM_PS_LIVE1_FALL_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define CTL_UL_RXM_PS_LIVE1_RISE_VAL_BF_OFF (30)
#define CTL_UL_RXM_PS_LIVE1_RISE_VAL_BF_WID ( 1)
#define CTL_UL_RXM_PS_LIVE1_RISE_VAL_BF_MSK (0x40000000)
#define CTL_UL_RXM_PS_LIVE1_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define CTL_UL_RXM_PS_LIVE1_FALL_VAL_BF_OFF (31)
#define CTL_UL_RXM_PS_LIVE1_FALL_VAL_BF_WID ( 1)
#define CTL_UL_RXM_PS_LIVE1_FALL_VAL_BF_MSK (0x80000000)
#define CTL_UL_RXM_PS_LIVE1_FALL_VAL_BF_DEF (0x00000000)


/** @brief CTL_REG_UL_NLEQ_ZERO_STUFF_LIVE1 register description at address offset 0x15c
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/UL_NLEQ_ZERO_STUFF_LIVE1
  * Link Event control
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 15;
    ///< Number of clock cycles after the rising transition of Uplink/Downlink
    ///< event to set the event to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FALL_DELAY : 15;
    ///< Number of clock cycles after the falling transition of Uplink/Downlink
    ///< event to set the event to FALL_VALUE.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} ctl_ul_nleq_zero_stuff_live1_reg_t;

#define CTL_UL_NLEQ_ZERO_STUFF_LIVE1_DEFAULT (0x00000000U)
#define CTL_UL_NLEQ_ZERO_STUFF_LIVE1_RD_MASK (0xffffffffU)
#define CTL_UL_NLEQ_ZERO_STUFF_LIVE1_WR_MASK (0xffffffffU)


///< Number of clock cycles after the rising transition of Uplink/Downlink
///< event to set the event to RISE_VALUE.
#define CTL_UL_NLEQ_ZERO_STUFF_LIVE1_RISE_DELAY_BF_OFF ( 0)
#define CTL_UL_NLEQ_ZERO_STUFF_LIVE1_RISE_DELAY_BF_WID (15)
#define CTL_UL_NLEQ_ZERO_STUFF_LIVE1_RISE_DELAY_BF_MSK (0x00007FFF)
#define CTL_UL_NLEQ_ZERO_STUFF_LIVE1_RISE_DELAY_BF_DEF (0x00000000)

///< Number of clock cycles after the falling transition of Uplink/Downlink
///< event to set the event to FALL_VALUE.
#define CTL_UL_NLEQ_ZERO_STUFF_LIVE1_FALL_DELAY_BF_OFF (15)
#define CTL_UL_NLEQ_ZERO_STUFF_LIVE1_FALL_DELAY_BF_WID (15)
#define CTL_UL_NLEQ_ZERO_STUFF_LIVE1_FALL_DELAY_BF_MSK (0x3FFF8000)
#define CTL_UL_NLEQ_ZERO_STUFF_LIVE1_FALL_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define CTL_UL_NLEQ_ZERO_STUFF_LIVE1_RISE_VAL_BF_OFF (30)
#define CTL_UL_NLEQ_ZERO_STUFF_LIVE1_RISE_VAL_BF_WID ( 1)
#define CTL_UL_NLEQ_ZERO_STUFF_LIVE1_RISE_VAL_BF_MSK (0x40000000)
#define CTL_UL_NLEQ_ZERO_STUFF_LIVE1_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define CTL_UL_NLEQ_ZERO_STUFF_LIVE1_FALL_VAL_BF_OFF (31)
#define CTL_UL_NLEQ_ZERO_STUFF_LIVE1_FALL_VAL_BF_WID ( 1)
#define CTL_UL_NLEQ_ZERO_STUFF_LIVE1_FALL_VAL_BF_MSK (0x80000000)
#define CTL_UL_NLEQ_ZERO_STUFF_LIVE1_FALL_VAL_BF_DEF (0x00000000)


/** @brief CTL_REG_ULDL_STATUS register description at address offset 0x160
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/ULDL_STATUS
  * Upink and Downlink Event Status
  */

typedef union {
  struct {
    uint32_t UL_EVENT : 2;
    ///< Indicates which UL event occurred most recently for each channel's
    ///< UL_EVENT control: 0:  UL OFF BFN event or RX_EN falling edge occurred
    ///< most recently 1:  UL ON BFN event or RX_EN rising edge occurred most
    ///< recently
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
    uint32_t RXM_ENA : 2;
    ///< Status of the RXM enable bit
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t PS_ENA : 2;
    ///< Status of the RXM's PS interface enable bit
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t ZERO_STUFF : 2;
    ///< Status of the NLEQ ZERO_STUFF control bit.
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
    uint32_t DL_EVENT : 2;
    ///< Indicates which DL event occurred most recently for each channel's
    ///< DL_EVENT control: 0:  DL OFF BFN event or falling edge of TX_EN occurred
    ///< most recently 1:  DL ON BFN event or rising edge or TX_EN occurred
    ///< most recently
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t TXM_ENA : 2;
    ///< Current status of the TXM Enable bit
    ///< AccessType="RO/V" BitOffset="18" ResetValue="0x0"
    uint32_t DITHER : 2;
    ///< Current status of the SMC DITHER enable bit
    ///< AccessType="RO/V" BitOffset="20" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t RX_EN : 2;
    ///< State of per-channel RX_EN, from syscon
    ///< AccessType="RO/V" BitOffset="28" ResetValue="0x0"
    uint32_t TX_EN : 2;
    ///< State of per-channel TX_EN, from syscon
    ///< AccessType="RO/V" BitOffset="30" ResetValue="0x0"
  } ;
  uint32_t value;
} ctl_uldl_stat_reg_t;

#define CTL_ULDL_STAT_DEFAULT (0x00000000U)
#define CTL_ULDL_STAT_RD_MASK (0xf03f03f3U)
#define CTL_ULDL_STAT_WR_MASK (0x00000000U)


///< Indicates which UL event occurred most recently for each channel's
///< UL_EVENT control: 0:  UL OFF BFN event or RX_EN falling edge occurred
///< most recently 1:  UL ON BFN event or RX_EN rising edge occurred most
///< recently
#define CTL_ULDL_STAT_UL_EVENT_BF_OFF ( 0)
#define CTL_ULDL_STAT_UL_EVENT_BF_WID ( 2)
#define CTL_ULDL_STAT_UL_EVENT_BF_MSK (0x00000003)
#define CTL_ULDL_STAT_UL_EVENT_BF_DEF (0x00000000)

///< Status of the RXM enable bit
#define CTL_ULDL_STAT_RXM_ENA_BF_OFF ( 4)
#define CTL_ULDL_STAT_RXM_ENA_BF_WID ( 2)
#define CTL_ULDL_STAT_RXM_ENA_BF_MSK (0x00000030)
#define CTL_ULDL_STAT_RXM_ENA_BF_DEF (0x00000000)

///< Status of the RXM's PS interface enable bit
#define CTL_ULDL_STAT_PS_ENA_BF_OFF ( 6)
#define CTL_ULDL_STAT_PS_ENA_BF_WID ( 2)
#define CTL_ULDL_STAT_PS_ENA_BF_MSK (0x000000C0)
#define CTL_ULDL_STAT_PS_ENA_BF_DEF (0x00000000)

///< Status of the NLEQ ZERO_STUFF control bit.
#define CTL_ULDL_STAT_ZERO_STUFF_BF_OFF ( 8)
#define CTL_ULDL_STAT_ZERO_STUFF_BF_WID ( 2)
#define CTL_ULDL_STAT_ZERO_STUFF_BF_MSK (0x00000300)
#define CTL_ULDL_STAT_ZERO_STUFF_BF_DEF (0x00000000)

///< Indicates which DL event occurred most recently for each channel's
///< DL_EVENT control: 0:  DL OFF BFN event or falling edge of TX_EN occurred
///< most recently 1:  DL ON BFN event or rising edge or TX_EN occurred
///< most recently
#define CTL_ULDL_STAT_DL_EVENT_BF_OFF (16)
#define CTL_ULDL_STAT_DL_EVENT_BF_WID ( 2)
#define CTL_ULDL_STAT_DL_EVENT_BF_MSK (0x00030000)
#define CTL_ULDL_STAT_DL_EVENT_BF_DEF (0x00000000)

///< Current status of the TXM Enable bit
#define CTL_ULDL_STAT_TXM_ENA_BF_OFF (18)
#define CTL_ULDL_STAT_TXM_ENA_BF_WID ( 2)
#define CTL_ULDL_STAT_TXM_ENA_BF_MSK (0x000C0000)
#define CTL_ULDL_STAT_TXM_ENA_BF_DEF (0x00000000)

///< Current status of the SMC DITHER enable bit
#define CTL_ULDL_STAT_DITHER_BF_OFF (20)
#define CTL_ULDL_STAT_DITHER_BF_WID ( 2)
#define CTL_ULDL_STAT_DITHER_BF_MSK (0x00300000)
#define CTL_ULDL_STAT_DITHER_BF_DEF (0x00000000)

///< State of per-channel RX_EN, from syscon
#define CTL_ULDL_STAT_RX_EN_BF_OFF (28)
#define CTL_ULDL_STAT_RX_EN_BF_WID ( 2)
#define CTL_ULDL_STAT_RX_EN_BF_MSK (0x30000000)
#define CTL_ULDL_STAT_RX_EN_BF_DEF (0x00000000)

///< State of per-channel TX_EN, from syscon
#define CTL_ULDL_STAT_TX_EN_BF_OFF (30)
#define CTL_ULDL_STAT_TX_EN_BF_WID ( 2)
#define CTL_ULDL_STAT_TX_EN_BF_MSK (0xC0000000)
#define CTL_ULDL_STAT_TX_EN_BF_DEF (0x00000000)


/** @brief CTL_REG_SMON_MAP_SMON_R0 register description at address offset 0x200
  *
  * Register default value:        0x40000000
  * Register full path in IP: Ctl/REG/SMON_MAP/SMON_r0
  * AW_smon CONTROL0 register
  */

typedef union {
  struct {
    uint32_t SMON_ENABLE : 1;
    ///< enable the SMON counters
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t RSVD0 : 3;
    ///< reserved
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t SMON0_FUNCTION : 3;
    ///< SMON0 function    3'h0 = free running function. Trigger to accumulate
    ///< the value into the engine SMON_COUNT when an event is valid.    3'h1
    ///< = free running function. Trigger to accumulate a fixed value of 1
    ///< into the engine SMON_COUNT when an event is valid.    3'h2 = max function.
    ///< Trigger to update max value when an event is valid and larger than
    ///< the current value stored in the engine SMON_COUNT.    3'h3 = Timestamp
    ///< First Mode. Capture the timer value on the first occurance of an event.
    ///< Need to write CONTROL01 to reset.    3'h4 = Timestamp Mode. Capture
    ///< the timer value on every occurance of an event.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t SMON0_FUNCTION_COMPARE : 1;
    ///< SMON0 function_compare    1'h0 = compare mode disabled    1'h1 = compare
    ///< mode enabled
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t SMON1_FUNCTION : 3;
    ///< SMON1 function    3'h0 = free running function. Trigger to accumulate
    ///< the value into the engine SMON_COUNT when an event is valid.    3'h1
    ///< = free running function. Trigger to accumulate a fixed value of 1
    ///< into the engine SMON_COUNT when an event is valid.    3'h2 = max function.
    ///< Trigger to update max value when an event is valid and larger than
    ///< the current value stored in the engine SMON_COUNT.    3'h3 = Timestamp
    ///< First Mode. Capture the timer value on the first occurance of an event.
    ///< Need to write CONTROL01 to reset.    3'h4 = Timestamp Mode. Capture
    ///< the timer value on every occurance of an event.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t SMON1_FUNCTION_COMPARE : 1;
    ///< SMON1 function_compare    1'h0 = compare mode disabled    1'h1 = compare
    ///< mode enabled
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t SMON_MODE : 4;
    ///< SMON mode     4'h0 = Independant Mode. SMON0_COUNT & SMON1_COUNT operate
    ///< independantly as their function is configured.       4'h1 = Average
    ///< Latency Mode. SMON0 trigger starts timer & SMON1 trigger stops timer.
    ///< SMON0_COUNT accumulates occurances and SMON1_COUNT accumulates timer
    ///< values. For multiple stop for a single start, accumulate  start_to_stop1,
    ///< start_to_stop1stop2 ...    4'h2 = MinMax Latency Mode,. SMON0 trigger
    ///< starts timer & SMON1 trigger stops timer. SMON0_COUNT maintains the
    ///< minimum timer value and SMON1_COUNT maintains the maximum timer value.
    ///< 4'h3 = Average Mode.   SMON0 trigger increments SMON0_COUNT and the
    ///< value is accumulated in SMON1_COUNT. SMON1 events are disabled.
    ///< 4'h4 = Average Lantecy Mode 2. same as mode01, but only accumulate
    ///< the first start_to_stop1 if there are multiple stop for each start.
    ///< 4'h5 = Average Latency Mode 3. same as mode01, but accumualte the
    ///< incremental start_to_stop1, stop1_to_stop2... if there are multiple
    ///< stop for each start.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t STOPCOUNTEROVFL : 1;
    ///< configure to stop on counter0 or counter1 overflow
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t INTCOUNTEROVFL : 1;
    ///< configure to interupt on counter0 or counter1 overflow
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t STATCOUNTER0OVFL : 1;
    ///< status for counter0 overflow. A value of '1' signifies counter0 overflow.
    ///< AccessType="RW/V" BitOffset="18" ResetValue="0x0"
    uint32_t STATCOUNTER1OVFL : 1;
    ///< status for counter1 overflow. A value of '1' signifies counter1 overflow.
    ///< AccessType="RW/V" BitOffset="19" ResetValue="0x0"
    uint32_t STOPTIMEROVFL : 1;
    ///< configure to stop on timer overflow or timer>maxvalue
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t INTTIMEROVFL : 1;
    ///< configure to interrupt on timer overflow or timer>maxvalue
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t STATTIMEROVFL : 1;
    ///< status of timer overflow. A value of '1' signifies timer overflow,
    ///< or timer>maxvalue.
    ///< AccessType="RW/V" BitOffset="22" ResetValue="0x0"
    uint32_t RSVD1 : 1;
    ///< reserved
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t TIMER_PRESCALE : 5;
    ///< timer prescale    5'h00 = mode00, increment timer every      1 clock
    ///< 5'h01 = mode01, increment timer every      2 clocks    5'h02 = mode02,
    ///< increment timer every      4 clocks    5'h03 = mode03, increment timer
    ///< every      8 clocks    5'h04 = mode04, increment timer every     16
    ///< clocks    5'h05 = mode05, increment timer every     32 clocks    5'h06
    ///< = mode06, increment timer every     64 clocks    5'h07 = mode07, increment
    ///< timer every    128 clocks    5'h08 = mode08, increment timer every
    ///< 256 clocks    5'h09 = mode09, increment timer every    512 clocks
    ///< 5'h0a = mode10, increment timer every   1024 clocks    5'h0b = mode11,
    ///< increment timer every   2048 clocks    5'h0c = mode12, increment timer
    ///< every   4096 clocks    5'h0d = mode13, increment timer every   8192
    ///< clocks    5'h0e = mode14, increment timer every  16384 clocks    5'h0f
    ///< = mode15, increment timer every  32768 clocks    5'h10 = mode16, increment
    ///< timer every  65536 clocks    5'h11 = mode17, increment timer every
    ///< 131072 clocks    5'h12 = mode18, increment timer every 262144 clocks
    ///< 5'h13 = mode19, increment timer every 524288 clocks
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t RSVD2 : 1;
    ///< reserved
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
    uint32_t VERSION : 2;
    ///< version
    ///< AccessType="RO" BitOffset="30" ResetValue="0x1"
  } ;
  uint32_t value;
} ctl_smon_r0_reg_t;

#define CTL_SMON_R0_DEFAULT (0x40000000U)
#define CTL_SMON_R0_RD_MASK (0xffffffffU)
#define CTL_SMON_R0_WR_MASK (0x3fffffffU)


///< enable the SMON counters
#define CTL_SMON_R0_SMON_EN_BF_OFF ( 0)
#define CTL_SMON_R0_SMON_EN_BF_WID ( 1)
#define CTL_SMON_R0_SMON_EN_BF_MSK (0x00000001)
#define CTL_SMON_R0_SMON_EN_BF_DEF (0x00000000)

///< reserved
#define CTL_SMON_R0_RSVD0_BF_OFF ( 1)
#define CTL_SMON_R0_RSVD0_BF_WID ( 3)
#define CTL_SMON_R0_RSVD0_BF_MSK (0x0000000E)
#define CTL_SMON_R0_RSVD0_BF_DEF (0x00000000)

///< SMON0 function    3'h0 = free running function. Trigger to accumulate
///< the value into the engine SMON_COUNT when an event is valid.    3'h1
///< = free running function. Trigger to accumulate a fixed value of 1
///< into the engine SMON_COUNT when an event is valid.    3'h2 = max function.
///< Trigger to update max value when an event is valid and larger than
///< the current value stored in the engine SMON_COUNT.    3'h3 = Timestamp
///< First Mode. Capture the timer value on the first occurance of an event.
///< Need to write CONTROL01 to reset.    3'h4 = Timestamp Mode. Capture
///< the timer value on every occurance of an event.
#define CTL_SMON_R0_SMON0_FUNCTION_BF_OFF ( 4)
#define CTL_SMON_R0_SMON0_FUNCTION_BF_WID ( 3)
#define CTL_SMON_R0_SMON0_FUNCTION_BF_MSK (0x00000070)
#define CTL_SMON_R0_SMON0_FUNCTION_BF_DEF (0x00000000)

///< SMON0 function_compare    1'h0 = compare mode disabled    1'h1 = compare
///< mode enabled
#define CTL_SMON_R0_SMON0_FUNCTION_CMP_BF_OFF ( 7)
#define CTL_SMON_R0_SMON0_FUNCTION_CMP_BF_WID ( 1)
#define CTL_SMON_R0_SMON0_FUNCTION_CMP_BF_MSK (0x00000080)
#define CTL_SMON_R0_SMON0_FUNCTION_CMP_BF_DEF (0x00000000)

///< SMON1 function    3'h0 = free running function. Trigger to accumulate
///< the value into the engine SMON_COUNT when an event is valid.    3'h1
///< = free running function. Trigger to accumulate a fixed value of 1
///< into the engine SMON_COUNT when an event is valid.    3'h2 = max function.
///< Trigger to update max value when an event is valid and larger than
///< the current value stored in the engine SMON_COUNT.    3'h3 = Timestamp
///< First Mode. Capture the timer value on the first occurance of an event.
///< Need to write CONTROL01 to reset.    3'h4 = Timestamp Mode. Capture
///< the timer value on every occurance of an event.
#define CTL_SMON_R0_SMON1_FUNCTION_BF_OFF ( 8)
#define CTL_SMON_R0_SMON1_FUNCTION_BF_WID ( 3)
#define CTL_SMON_R0_SMON1_FUNCTION_BF_MSK (0x00000700)
#define CTL_SMON_R0_SMON1_FUNCTION_BF_DEF (0x00000000)

///< SMON1 function_compare    1'h0 = compare mode disabled    1'h1 = compare
///< mode enabled
#define CTL_SMON_R0_SMON1_FUNCTION_CMP_BF_OFF (11)
#define CTL_SMON_R0_SMON1_FUNCTION_CMP_BF_WID ( 1)
#define CTL_SMON_R0_SMON1_FUNCTION_CMP_BF_MSK (0x00000800)
#define CTL_SMON_R0_SMON1_FUNCTION_CMP_BF_DEF (0x00000000)

///< SMON mode     4'h0 = Independant Mode. SMON0_COUNT & SMON1_COUNT operate
///< independantly as their function is configured.       4'h1 = Average
///< Latency Mode. SMON0 trigger starts timer & SMON1 trigger stops timer.
///< SMON0_COUNT accumulates occurances and SMON1_COUNT accumulates timer
///< values. For multiple stop for a single start, accumulate  start_to_stop1,
///< start_to_stop1stop2 ...    4'h2 = MinMax Latency Mode,. SMON0 trigger
///< starts timer & SMON1 trigger stops timer. SMON0_COUNT maintains the
///< minimum timer value and SMON1_COUNT maintains the maximum timer value.
///< 4'h3 = Average Mode.   SMON0 trigger increments SMON0_COUNT and the
///< value is accumulated in SMON1_COUNT. SMON1 events are disabled.
///< 4'h4 = Average Lantecy Mode 2. same as mode01, but only accumulate
///< the first start_to_stop1 if there are multiple stop for each start.
///< 4'h5 = Average Latency Mode 3. same as mode01, but accumualte the
///< incremental start_to_stop1, stop1_to_stop2... if there are multiple
///< stop for each start.
#define CTL_SMON_R0_SMON_MODE_BF_OFF (12)
#define CTL_SMON_R0_SMON_MODE_BF_WID ( 4)
#define CTL_SMON_R0_SMON_MODE_BF_MSK (0x0000F000)
#define CTL_SMON_R0_SMON_MODE_BF_DEF (0x00000000)

///< configure to stop on counter0 or counter1 overflow
#define CTL_SMON_R0_STOPCNTEROVFL_BF_OFF (16)
#define CTL_SMON_R0_STOPCNTEROVFL_BF_WID ( 1)
#define CTL_SMON_R0_STOPCNTEROVFL_BF_MSK (0x00010000)
#define CTL_SMON_R0_STOPCNTEROVFL_BF_DEF (0x00000000)

///< configure to interupt on counter0 or counter1 overflow
#define CTL_SMON_R0_INTCNTEROVFL_BF_OFF (17)
#define CTL_SMON_R0_INTCNTEROVFL_BF_WID ( 1)
#define CTL_SMON_R0_INTCNTEROVFL_BF_MSK (0x00020000)
#define CTL_SMON_R0_INTCNTEROVFL_BF_DEF (0x00000000)

///< status for counter0 overflow. A value of '1' signifies counter0 overflow.
#define CTL_SMON_R0_STATCNTER0OVFL_BF_OFF (18)
#define CTL_SMON_R0_STATCNTER0OVFL_BF_WID ( 1)
#define CTL_SMON_R0_STATCNTER0OVFL_BF_MSK (0x00040000)
#define CTL_SMON_R0_STATCNTER0OVFL_BF_DEF (0x00000000)

///< status for counter1 overflow. A value of '1' signifies counter1 overflow.
#define CTL_SMON_R0_STATCNTER1OVFL_BF_OFF (19)
#define CTL_SMON_R0_STATCNTER1OVFL_BF_WID ( 1)
#define CTL_SMON_R0_STATCNTER1OVFL_BF_MSK (0x00080000)
#define CTL_SMON_R0_STATCNTER1OVFL_BF_DEF (0x00000000)

///< configure to stop on timer overflow or timer>maxvalue
#define CTL_SMON_R0_STOPTIMEROVFL_BF_OFF (20)
#define CTL_SMON_R0_STOPTIMEROVFL_BF_WID ( 1)
#define CTL_SMON_R0_STOPTIMEROVFL_BF_MSK (0x00100000)
#define CTL_SMON_R0_STOPTIMEROVFL_BF_DEF (0x00000000)

///< configure to interrupt on timer overflow or timer>maxvalue
#define CTL_SMON_R0_INTTIMEROVFL_BF_OFF (21)
#define CTL_SMON_R0_INTTIMEROVFL_BF_WID ( 1)
#define CTL_SMON_R0_INTTIMEROVFL_BF_MSK (0x00200000)
#define CTL_SMON_R0_INTTIMEROVFL_BF_DEF (0x00000000)

///< status of timer overflow. A value of '1' signifies timer overflow,
///< or timer>maxvalue.
#define CTL_SMON_R0_STATTIMEROVFL_BF_OFF (22)
#define CTL_SMON_R0_STATTIMEROVFL_BF_WID ( 1)
#define CTL_SMON_R0_STATTIMEROVFL_BF_MSK (0x00400000)
#define CTL_SMON_R0_STATTIMEROVFL_BF_DEF (0x00000000)

///< reserved
#define CTL_SMON_R0_RSVD1_BF_OFF (23)
#define CTL_SMON_R0_RSVD1_BF_WID ( 1)
#define CTL_SMON_R0_RSVD1_BF_MSK (0x00800000)
#define CTL_SMON_R0_RSVD1_BF_DEF (0x00000000)

///< timer prescale    5'h00 = mode00, increment timer every      1 clock
///< 5'h01 = mode01, increment timer every      2 clocks    5'h02 = mode02,
///< increment timer every      4 clocks    5'h03 = mode03, increment timer
///< every      8 clocks    5'h04 = mode04, increment timer every     16
///< clocks    5'h05 = mode05, increment timer every     32 clocks    5'h06
///< = mode06, increment timer every     64 clocks    5'h07 = mode07, increment
///< timer every    128 clocks    5'h08 = mode08, increment timer every
///< 256 clocks    5'h09 = mode09, increment timer every    512 clocks
///< 5'h0a = mode10, increment timer every   1024 clocks    5'h0b = mode11,
///< increment timer every   2048 clocks    5'h0c = mode12, increment timer
///< every   4096 clocks    5'h0d = mode13, increment timer every   8192
///< clocks    5'h0e = mode14, increment timer every  16384 clocks    5'h0f
///< = mode15, increment timer every  32768 clocks    5'h10 = mode16, increment
///< timer every  65536 clocks    5'h11 = mode17, increment timer every
///< 131072 clocks    5'h12 = mode18, increment timer every 262144 clocks
///< 5'h13 = mode19, increment timer every 524288 clocks
#define CTL_SMON_R0_TIMER_PRESCALE_BF_OFF (24)
#define CTL_SMON_R0_TIMER_PRESCALE_BF_WID ( 5)
#define CTL_SMON_R0_TIMER_PRESCALE_BF_MSK (0x1F000000)
#define CTL_SMON_R0_TIMER_PRESCALE_BF_DEF (0x00000000)

///< reserved
#define CTL_SMON_R0_RSVD2_BF_OFF (29)
#define CTL_SMON_R0_RSVD2_BF_WID ( 1)
#define CTL_SMON_R0_RSVD2_BF_MSK (0x20000000)
#define CTL_SMON_R0_RSVD2_BF_DEF (0x00000000)

///< version
#define CTL_SMON_R0_VER_BF_OFF (30)
#define CTL_SMON_R0_VER_BF_WID ( 2)
#define CTL_SMON_R0_VER_BF_MSK (0xC0000000)
#define CTL_SMON_R0_VER_BF_DEF (0x40000000)


/** @brief CTL_REG_SMON_MAP_SMON_R1 register description at address offset 0x204
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/SMON_MAP/SMON_r1
  * AW_smon CONTROL1 register
  */

typedef union {
  struct {
    uint32_t MODE0 : 8;
    ///< select input signal for SMON0 engine. <br/> 12 modes supported:<br/>
    ///< TX Path monitors<br/>  0: CDPD0 valid input<br/>  1: CDPD1 valid input<br/>
    ///< 2: CDPD0 valid output<br/>  3: CDPD1 valid output<br/>  4: SMC0 valid
    ///< output<br/>    5: SMC1 valid output<br/>    RX Path monitors<br/>
    ///< 6: NLEQ0 valid input, Comparison=idx<br/>  7: NLEQ1 valid input, Comparison=idx<br/>
    ///< 8: NLEQ0 valid output<br/>    9: NLEQ1 valid output<br/>    Reg access
    ///< monitors  10: CTL reg core write, Comparison=offset,Value=wdata<br/>
    ///< 11: CTL reg core read, Comparison=offset,Value=wdata
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t MODE1 : 8;
    ///< select input signal for SMON1 engine. <br/> 12 modes supported:<br/>
    ///< TX Path monitors<br/>  0: CDPD0 valid input<br/>  1: CDPD1 valid input<br/>
    ///< 2: CDPD0 valid output<br/>  3: CDPD1 valid output<br/>  4: SMC0 valid
    ///< output<br/>    5: SMC1 valid output<br/>    RX Path monitors<br/>
    ///< 6: NLEQ0 valid input, Comparison=idx<br/>  7: NLEQ1 valid input, Comparison=idx<br/>
    ///< 8: NLEQ0 valid output<br/>    9: NLEQ1 valid output<br/>    Reg access
    ///< monitors  10: CTL reg core write, Comparison=offset,Value=wdata<br/>
    ///< 11: CTL reg core read, Comparison=offset,Value=wdata
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RSVD : 16;
    ///< reserved
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} ctl_smon_r1_reg_t;

#define CTL_SMON_R1_DEFAULT (0x00000000U)
#define CTL_SMON_R1_RD_MASK (0xffffffffU)
#define CTL_SMON_R1_WR_MASK (0xffffffffU)


///< select input signal for SMON0 engine. <br/> 12 modes supported:<br/>
///< TX Path monitors<br/>  0: CDPD0 valid input<br/>  1: CDPD1 valid input<br/>
///< 2: CDPD0 valid output<br/>  3: CDPD1 valid output<br/>  4: SMC0 valid
///< output<br/>    5: SMC1 valid output<br/>    RX Path monitors<br/>
///< 6: NLEQ0 valid input, Comparison=idx<br/>  7: NLEQ1 valid input, Comparison=idx<br/>
///< 8: NLEQ0 valid output<br/>    9: NLEQ1 valid output<br/>    Reg access
///< monitors  10: CTL reg core write, Comparison=offset,Value=wdata<br/>
///< 11: CTL reg core read, Comparison=offset,Value=wdata
#define CTL_SMON_R1_MODE0_BF_OFF ( 0)
#define CTL_SMON_R1_MODE0_BF_WID ( 8)
#define CTL_SMON_R1_MODE0_BF_MSK (0x000000FF)
#define CTL_SMON_R1_MODE0_BF_DEF (0x00000000)

///< select input signal for SMON1 engine. <br/> 12 modes supported:<br/>
///< TX Path monitors<br/>  0: CDPD0 valid input<br/>  1: CDPD1 valid input<br/>
///< 2: CDPD0 valid output<br/>  3: CDPD1 valid output<br/>  4: SMC0 valid
///< output<br/>    5: SMC1 valid output<br/>    RX Path monitors<br/>
///< 6: NLEQ0 valid input, Comparison=idx<br/>  7: NLEQ1 valid input, Comparison=idx<br/>
///< 8: NLEQ0 valid output<br/>    9: NLEQ1 valid output<br/>    Reg access
///< monitors  10: CTL reg core write, Comparison=offset,Value=wdata<br/>
///< 11: CTL reg core read, Comparison=offset,Value=wdata
#define CTL_SMON_R1_MODE1_BF_OFF ( 8)
#define CTL_SMON_R1_MODE1_BF_WID ( 8)
#define CTL_SMON_R1_MODE1_BF_MSK (0x0000FF00)
#define CTL_SMON_R1_MODE1_BF_DEF (0x00000000)

///< reserved
#define CTL_SMON_R1_RSVD_BF_OFF (16)
#define CTL_SMON_R1_RSVD_BF_WID (16)
#define CTL_SMON_R1_RSVD_BF_MSK (0xFFFF0000)
#define CTL_SMON_R1_RSVD_BF_DEF (0x00000000)


/** @brief CTL_REG_SMON_MAP_SMON_R2 register description at address offset 0x208
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/SMON_MAP/SMON_r2
  * AW_smon SMON0_COMPARE register
  */

typedef union {
  struct {
    uint32_t COMPARE0 : 32;
    ///< Comparison value.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} ctl_smon_r2_reg_t;

#define CTL_SMON_R2_DEFAULT (0x00000000U)
#define CTL_SMON_R2_RD_MASK (0xffffffffU)
#define CTL_SMON_R2_WR_MASK (0xffffffffU)


///< Comparison value.
#define CTL_SMON_R2_CMP0_BF_OFF ( 0)
#define CTL_SMON_R2_CMP0_BF_WID (32)
#define CTL_SMON_R2_CMP0_BF_MSK (0xFFFFFFFF)
#define CTL_SMON_R2_CMP0_BF_DEF (0x00000000)


/** @brief CTL_REG_SMON_MAP_SMON_R3 register description at address offset 0x20c
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/SMON_MAP/SMON_r3
  * AW_smon SMON1_COMPARE register
  */

typedef union {
  struct {
    uint32_t COMPARE1 : 32;
    ///< Comparison value.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} ctl_smon_r3_reg_t;

#define CTL_SMON_R3_DEFAULT (0x00000000U)
#define CTL_SMON_R3_RD_MASK (0xffffffffU)
#define CTL_SMON_R3_WR_MASK (0xffffffffU)


///< Comparison value.
#define CTL_SMON_R3_CMP1_BF_OFF ( 0)
#define CTL_SMON_R3_CMP1_BF_WID (32)
#define CTL_SMON_R3_CMP1_BF_MSK (0xFFFFFFFF)
#define CTL_SMON_R3_CMP1_BF_DEF (0x00000000)


/** @brief CTL_REG_SMON_MAP_SMON_R4 register description at address offset 0x210
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/SMON_MAP/SMON_r4
  * AW_smon SMON0_COUNT register
  */

typedef union {
  struct {
    uint32_t COUNTER0 : 32;
    ///< counter0
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} ctl_smon_r4_reg_t;

#define CTL_SMON_R4_DEFAULT (0x00000000U)
#define CTL_SMON_R4_RD_MASK (0xffffffffU)
#define CTL_SMON_R4_WR_MASK (0xffffffffU)


///< counter0
#define CTL_SMON_R4_CNTER0_BF_OFF ( 0)
#define CTL_SMON_R4_CNTER0_BF_WID (32)
#define CTL_SMON_R4_CNTER0_BF_MSK (0xFFFFFFFF)
#define CTL_SMON_R4_CNTER0_BF_DEF (0x00000000)


/** @brief CTL_REG_SMON_MAP_SMON_R5 register description at address offset 0x214
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/SMON_MAP/SMON_r5
  * AW_smon SMON1_COUNT register
  */

typedef union {
  struct {
    uint32_t COUNTER1 : 32;
    ///< counter1
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} ctl_smon_r5_reg_t;

#define CTL_SMON_R5_DEFAULT (0x00000000U)
#define CTL_SMON_R5_RD_MASK (0xffffffffU)
#define CTL_SMON_R5_WR_MASK (0xffffffffU)


///< counter1
#define CTL_SMON_R5_CNTER1_BF_OFF ( 0)
#define CTL_SMON_R5_CNTER1_BF_WID (32)
#define CTL_SMON_R5_CNTER1_BF_MSK (0xFFFFFFFF)
#define CTL_SMON_R5_CNTER1_BF_DEF (0x00000000)


/** @brief CTL_REG_SMON_MAP_SMON_R6 register description at address offset 0x218
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/SMON_MAP/SMON_r6
  * AW_smon TIMER register
  */

typedef union {
  struct {
    uint32_t TIMER : 32;
    ///< timer
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} ctl_smon_r6_reg_t;

#define CTL_SMON_R6_DEFAULT (0x00000000U)
#define CTL_SMON_R6_RD_MASK (0xffffffffU)
#define CTL_SMON_R6_WR_MASK (0xffffffffU)


///< timer
#define CTL_SMON_R6_TIMER_BF_OFF ( 0)
#define CTL_SMON_R6_TIMER_BF_WID (32)
#define CTL_SMON_R6_TIMER_BF_MSK (0xFFFFFFFF)
#define CTL_SMON_R6_TIMER_BF_DEF (0x00000000)


/** @brief CTL_REG_SMON_MAP_SMON_R7 register description at address offset 0x21c
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/SMON_MAP/SMON_r7
  * AW_smon TIMERMAXVAL register
  */

typedef union {
  struct {
    uint32_t MAXVALUE : 32;
    ///< maxvalue
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} ctl_smon_r7_reg_t;

#define CTL_SMON_R7_DEFAULT (0x00000000U)
#define CTL_SMON_R7_RD_MASK (0xffffffffU)
#define CTL_SMON_R7_WR_MASK (0xffffffffU)


///< maxvalue
#define CTL_SMON_R7_MAXVAL_BF_OFF ( 0)
#define CTL_SMON_R7_MAXVAL_BF_WID (32)
#define CTL_SMON_R7_MAXVAL_BF_MSK (0xFFFFFFFF)
#define CTL_SMON_R7_MAXVAL_BF_DEF (0x00000000)


/** @brief CTL_REG_ISYNC_MAP_ISYNC_CTRL register description at address offset 0x300
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/ISYNC_MAP/ISYNC_CTRL
  * ISYNC Control Register
  */

typedef union {
  struct {
    uint32_t TIMER_CMD : 3;
    ///< When i_isync value is 11, the command programmed in this register
    ///< is executed.  3'b000, 3'b100, 3'b110 -> bfn_lower_cnt is incremented
    ///< with the value in BFN_LOWER_CNT_INC. If the  lower count value equals
    ///< the TEN_MS_CNT value the bfn_upper_cnt value is incremented by 1.
    ///< 3'b001 -> bfn_lower_cnt and bfn_upper_cnt are preset to the value
    ///< in the TIMER_INC_PRE register.  3'b010 -> The internal registers corresponding
    ///< to BFN_LOWER_CNT_INC., TIMER_INC_PRE, TIMER_INC_ADJ  TEN_MS_CNT are
    ///< all initialized to their corresponding input values.  If the current
    ///< bfn_lower_cnt value is equal to the TEN_MS_CNT value, the bfn_upper_cnt
    ///< is incremented by 1. If not, bfn_lower_cnt is incremented by the value
    ///< in BFN_LOWER_CNT_INC.  register.  3'b011 -> Increment the bfn_lower_cnt
    ///< value with the value in the TIMER_INC_PRE register.  3'b101 -> If
    ///< bfn_lower_cnt value equals the TEN_MS_CNT value, reset the bfn_lower_cnt
    ///< to zero and  increment the bfn_upper_cnt by 1. If not, increment bfn_lower_cnt
    ///< by a value  in the BFN_LOWER_CNT_INC. register. A sync_adj_pulse is
    ///< also generated so that when the  bfn_lower_cnt value is equal to the
    ///< TEN_MS_CNT and the bfn_upper_cnt equals timer_cnt_adj  the bfn_lower_cnt
    ///< is preset to the value in TIMER_INC_PRE and the bfn_upper_cnt is
    ///< incremented by the value in TIMER_INC_PRE register.  3'b111 -> The
    ///< current value in the bfn_lower_cnt and bfn_upper_cnt is captured and
    ///< made available  in a register for the application to read.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t LOAD_READ : 1;
    ///< When 1, load BFN count into the manager counter at the first timesync
    ///< pulse, when 0, read BFN count from the Manager BFN counter at every
    ///< timesync pulse.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t BFN_CNT_SAMPLE : 1;
    ///< Write to 1 (regardless of the current value) causes the circuit to
    ///< sample the BFN_CNT and synchronize it into the register clock domain.
    ///< After waiting 3-4 BFN clock cycles plus 3-4 register clock cycles,
    ///< the sample is available to read in the ISYNC_BFN_CNT register
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t  : 9;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t SOFT_RESET : 1;
    ///< Soft Reset for the entire AW_isync. Active high.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} ctl_isync_ctrl_reg_t;

#define CTL_ISYNC_CTRL_DEFAULT (0x00000000U)
#define CTL_ISYNC_CTRL_RD_MASK (0x00008037U)
#define CTL_ISYNC_CTRL_WR_MASK (0x00008037U)


///< When i_isync value is 11, the command programmed in this register
///< is executed.  3'b000, 3'b100, 3'b110 -> bfn_lower_cnt is incremented
///< with the value in BFN_LOWER_CNT_INC. If the  lower count value equals
///< the TEN_MS_CNT value the bfn_upper_cnt value is incremented by 1.
///< 3'b001 -> bfn_lower_cnt and bfn_upper_cnt are preset to the value
///< in the TIMER_INC_PRE register.  3'b010 -> The internal registers corresponding
///< to BFN_LOWER_CNT_INC., TIMER_INC_PRE, TIMER_INC_ADJ  TEN_MS_CNT are
///< all initialized to their corresponding input values.  If the current
///< bfn_lower_cnt value is equal to the TEN_MS_CNT value, the bfn_upper_cnt
///< is incremented by 1. If not, bfn_lower_cnt is incremented by the value
///< in BFN_LOWER_CNT_INC.  register.  3'b011 -> Increment the bfn_lower_cnt
///< value with the value in the TIMER_INC_PRE register.  3'b101 -> If
///< bfn_lower_cnt value equals the TEN_MS_CNT value, reset the bfn_lower_cnt
///< to zero and  increment the bfn_upper_cnt by 1. If not, increment bfn_lower_cnt
///< by a value  in the BFN_LOWER_CNT_INC. register. A sync_adj_pulse is
///< also generated so that when the  bfn_lower_cnt value is equal to the
///< TEN_MS_CNT and the bfn_upper_cnt equals timer_cnt_adj  the bfn_lower_cnt
///< is preset to the value in TIMER_INC_PRE and the bfn_upper_cnt is
///< incremented by the value in TIMER_INC_PRE register.  3'b111 -> The
///< current value in the bfn_lower_cnt and bfn_upper_cnt is captured and
///< made available  in a register for the application to read.
#define CTL_ISYNC_CTRL_TIMER_CMD_BF_OFF ( 0)
#define CTL_ISYNC_CTRL_TIMER_CMD_BF_WID ( 3)
#define CTL_ISYNC_CTRL_TIMER_CMD_BF_MSK (0x00000007)
#define CTL_ISYNC_CTRL_TIMER_CMD_BF_DEF (0x00000000)

///< When 1, load BFN count into the manager counter at the first timesync
///< pulse, when 0, read BFN count from the Manager BFN counter at every
///< timesync pulse.
#define CTL_ISYNC_CTRL_LOAD_READ_BF_OFF ( 4)
#define CTL_ISYNC_CTRL_LOAD_READ_BF_WID ( 1)
#define CTL_ISYNC_CTRL_LOAD_READ_BF_MSK (0x00000010)
#define CTL_ISYNC_CTRL_LOAD_READ_BF_DEF (0x00000000)

///< Write to 1 (regardless of the current value) causes the circuit to
///< sample the BFN_CNT and synchronize it into the register clock domain.
///< After waiting 3-4 BFN clock cycles plus 3-4 register clock cycles,
///< the sample is available to read in the ISYNC_BFN_CNT register
#define CTL_ISYNC_CTRL_BFN_CNT_SAMPLE_BF_OFF ( 5)
#define CTL_ISYNC_CTRL_BFN_CNT_SAMPLE_BF_WID ( 1)
#define CTL_ISYNC_CTRL_BFN_CNT_SAMPLE_BF_MSK (0x00000020)
#define CTL_ISYNC_CTRL_BFN_CNT_SAMPLE_BF_DEF (0x00000000)

///< Soft Reset for the entire AW_isync. Active high.
#define CTL_ISYNC_CTRL_SOFT_RST_BF_OFF (15)
#define CTL_ISYNC_CTRL_SOFT_RST_BF_WID ( 1)
#define CTL_ISYNC_CTRL_SOFT_RST_BF_MSK (0x00008000)
#define CTL_ISYNC_CTRL_SOFT_RST_BF_DEF (0x00000000)


/** @brief CTL_REG_ISYNC_MAP_ISYNC_LCNT_INC register description at address offset 0x304
  *
  * Register default value:        0x00000001
  * Register full path in IP: Ctl/REG/ISYNC_MAP/ISYNC_LCNT_INC
  * Isync Lower Count Increment Register
  */

typedef union {
  struct {
    uint32_t BFN_LOWER_CNT_INC : 24;
    ///< Increment for the Offset Counter.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} ctl_isync_lcnt_inc_reg_t;

#define CTL_ISYNC_LCNT_INC_DEFAULT (0x00000001U)
#define CTL_ISYNC_LCNT_INC_RD_MASK (0x00ffffffU)
#define CTL_ISYNC_LCNT_INC_WR_MASK (0x00ffffffU)


///< Increment for the Offset Counter.
#define CTL_ISYNC_LCNT_INC_BFN_LOWER_CNT_INC_BF_OFF ( 0)
#define CTL_ISYNC_LCNT_INC_BFN_LOWER_CNT_INC_BF_WID (24)
#define CTL_ISYNC_LCNT_INC_BFN_LOWER_CNT_INC_BF_MSK (0x00FFFFFF)
#define CTL_ISYNC_LCNT_INC_BFN_LOWER_CNT_INC_BF_DEF (0x00000001)


/** @brief CTL_REG_ISYNC_MAP_ISYNC_TEN_MS_CNT register description at address offset 0x308
  *
  * Register default value:        0x0095FFFF
  * Register full path in IP: Ctl/REG/ISYNC_MAP/ISYNC_TEN_MS_CNT
  * Isync 10ms Counter Register
  */

typedef union {
  struct {
    uint32_t TEN_MS_CNT : 24;
    ///< Number of clock cycles in 10ms (minus 1).
    ///< AccessType="RW" BitOffset="0" ResetValue="0x95FFFF"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} ctl_isync_ten_ms_cnt_reg_t;

#define CTL_ISYNC_TEN_MS_CNT_DEFAULT (0x0095ffffU)
#define CTL_ISYNC_TEN_MS_CNT_RD_MASK (0x00ffffffU)
#define CTL_ISYNC_TEN_MS_CNT_WR_MASK (0x00ffffffU)


///< Number of clock cycles in 10ms (minus 1).
#define CTL_ISYNC_TEN_MS_CNT_TEN_MS_CNT_BF_OFF ( 0)
#define CTL_ISYNC_TEN_MS_CNT_TEN_MS_CNT_BF_WID (24)
#define CTL_ISYNC_TEN_MS_CNT_TEN_MS_CNT_BF_MSK (0x00FFFFFF)
#define CTL_ISYNC_TEN_MS_CNT_TEN_MS_CNT_BF_DEF (0x0095FFFF)


/** @brief CTL_REG_ISYNC_MAP_ISYNC_INC_PRE register description at address offset 0x30c
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/ISYNC_MAP/ISYNC_INC_PRE
  * Isync Timer Increment/Preset Register
  */

typedef union {
  struct {
    uint32_t OFFSET_INCR : 24;
    ///< Offset from nearest 10ms frame, in clock cycles.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FRAME_INCR : 8;
    ///< Bits [7:0] of the 10ms frame counter.
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} ctl_isync_inc_pre_reg_t;

#define CTL_ISYNC_INC_PRE_DEFAULT (0x00000000U)
#define CTL_ISYNC_INC_PRE_RD_MASK (0xffffffffU)
#define CTL_ISYNC_INC_PRE_WR_MASK (0xffffffffU)


///< Offset from nearest 10ms frame, in clock cycles.
#define CTL_ISYNC_INC_PRE_OFFSET_INCR_BF_OFF ( 0)
#define CTL_ISYNC_INC_PRE_OFFSET_INCR_BF_WID (24)
#define CTL_ISYNC_INC_PRE_OFFSET_INCR_BF_MSK (0x00FFFFFF)
#define CTL_ISYNC_INC_PRE_OFFSET_INCR_BF_DEF (0x00000000)

///< Bits [7:0] of the 10ms frame counter.
#define CTL_ISYNC_INC_PRE_FRAME_INCR_BF_OFF (24)
#define CTL_ISYNC_INC_PRE_FRAME_INCR_BF_WID ( 8)
#define CTL_ISYNC_INC_PRE_FRAME_INCR_BF_MSK (0xFF000000)
#define CTL_ISYNC_INC_PRE_FRAME_INCR_BF_DEF (0x00000000)


/** @brief CTL_REG_ISYNC_MAP_ISYNC_CNT_ADJ register description at address offset 0x310
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/ISYNC_MAP/ISYNC_CNT_ADJ
  * Isync Timer Count Adjustment Register
  */

typedef union {
  struct {
    uint32_t FRAME_ADJ : 8;
    ///< Bits [7:0] of the 10ms frame counter.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} ctl_isync_cnt_adj_reg_t;

#define CTL_ISYNC_CNT_ADJ_DEFAULT (0x00000000U)
#define CTL_ISYNC_CNT_ADJ_RD_MASK (0x000000ffU)
#define CTL_ISYNC_CNT_ADJ_WR_MASK (0x000000ffU)


///< Bits [7:0] of the 10ms frame counter.
#define CTL_ISYNC_CNT_ADJ_FRAME_ADJ_BF_OFF ( 0)
#define CTL_ISYNC_CNT_ADJ_FRAME_ADJ_BF_WID ( 8)
#define CTL_ISYNC_CNT_ADJ_FRAME_ADJ_BF_MSK (0x000000FF)
#define CTL_ISYNC_CNT_ADJ_FRAME_ADJ_BF_DEF (0x00000000)


/** @brief CTL_REG_ISYNC_MAP_ISYNC_BFN_CNT_SYNC register description at address offset 0x314
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/ISYNC_MAP/ISYNC_BFN_CNT_SYNC
  * BFN Count Sync
  */

typedef union {
  struct {
    uint32_t OFFSET : 24;
    ///< Offset from nearest 10ms frame, in clock cycles.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t FRAME : 8;
    ///< Bits [7:0] fo the count of 10ms frames.
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} ctl_isync_bfn_cnt_sync_reg_t;

#define CTL_ISYNC_BFN_CNT_SYNC_DEFAULT (0x00000000U)
#define CTL_ISYNC_BFN_CNT_SYNC_RD_MASK (0xffffffffU)
#define CTL_ISYNC_BFN_CNT_SYNC_WR_MASK (0x00000000U)


///< Offset from nearest 10ms frame, in clock cycles.
#define CTL_ISYNC_BFN_CNT_SYNC_OFFSET_BF_OFF ( 0)
#define CTL_ISYNC_BFN_CNT_SYNC_OFFSET_BF_WID (24)
#define CTL_ISYNC_BFN_CNT_SYNC_OFFSET_BF_MSK (0x00FFFFFF)
#define CTL_ISYNC_BFN_CNT_SYNC_OFFSET_BF_DEF (0x00000000)

///< Bits [7:0] fo the count of 10ms frames.
#define CTL_ISYNC_BFN_CNT_SYNC_FRAME_BF_OFF (24)
#define CTL_ISYNC_BFN_CNT_SYNC_FRAME_BF_WID ( 8)
#define CTL_ISYNC_BFN_CNT_SYNC_FRAME_BF_MSK (0xFF000000)
#define CTL_ISYNC_BFN_CNT_SYNC_FRAME_BF_DEF (0x00000000)


/** @brief CTL_REG_ISYNC_MAP_ISYNC_BFN_CNT register description at address offset 0x318
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/ISYNC_MAP/ISYNC_BFN_CNT
  * BFN Count
  */

typedef union {
  struct {
    uint32_t OFFSET : 24;
    ///< Offset from nearest 10ms frame, in clock cycles.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t FRAME : 8;
    ///< LSB's of Count of 10ms frames.
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} ctl_isync_bfn_cnt_reg_t;

#define CTL_ISYNC_BFN_CNT_DEFAULT (0x00000000U)
#define CTL_ISYNC_BFN_CNT_RD_MASK (0xffffffffU)
#define CTL_ISYNC_BFN_CNT_WR_MASK (0x00000000U)


///< Offset from nearest 10ms frame, in clock cycles.
#define CTL_ISYNC_BFN_CNT_OFFSET_BF_OFF ( 0)
#define CTL_ISYNC_BFN_CNT_OFFSET_BF_WID (24)
#define CTL_ISYNC_BFN_CNT_OFFSET_BF_MSK (0x00FFFFFF)
#define CTL_ISYNC_BFN_CNT_OFFSET_BF_DEF (0x00000000)

///< LSB's of Count of 10ms frames.
#define CTL_ISYNC_BFN_CNT_FRAME_BF_OFF (24)
#define CTL_ISYNC_BFN_CNT_FRAME_BF_WID ( 8)
#define CTL_ISYNC_BFN_CNT_FRAME_BF_MSK (0xFF000000)
#define CTL_ISYNC_BFN_CNT_FRAME_BF_DEF (0x00000000)


/** @brief CTL_REG_ABC_BFN_EVENTS_BFNE_CONFIG[13] register description at address offset 0x400
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/ABC_BFN_EVENTS/BFNE_CONFIG
  * BFN Event Config Register
  */

typedef union {
  struct {
    uint32_t ENABLE : 1;
    ///< Set to 1 to enable the operation of the bfn_event module. When running
    ///< in repeat mode, set this back to zero to immediately halt the operation.
    ///< NOte that this must be set to 1 for the force mechanism (See BFN_START
    ///< register) to work.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t MODE : 2;
    ///< Selects the mode of operation. Note that the force mechanism can be
    ///< triggered (see BFNE_START) regardless of which mode is selected here.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t OUTPUT_MODE : 1;
    ///< Selects whether the BFN_EVENT output toggles at each event, or produces
    ///< a single cycle pulse.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t DEBUG_MODE : 2;
    ///< Controls what appears in BFN_EVENT_STAT DEBUG field, which is 28 bits.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} ctl_bfne_cfg_reg_t;

#define CTL_BFNE_CFG_DEFAULT (0x00000000U)
#define CTL_BFNE_CFG_RD_MASK (0x0000003fU)
#define CTL_BFNE_CFG_WR_MASK (0x0000003fU)


///< Set to 1 to enable the operation of the bfn_event module. When running
///< in repeat mode, set this back to zero to immediately halt the operation.
///< NOte that this must be set to 1 for the force mechanism (See BFN_START
///< register) to work.
#define CTL_BFNE_CFG_EN_BF_OFF ( 0)
#define CTL_BFNE_CFG_EN_BF_WID ( 1)
#define CTL_BFNE_CFG_EN_BF_MSK (0x00000001)
#define CTL_BFNE_CFG_EN_BF_DEF (0x00000000)

///< Selects the mode of operation. Note that the force mechanism can be
///< triggered (see BFNE_START) regardless of which mode is selected here.
#define CTL_BFNE_CFG_MODE_BF_OFF ( 1)
#define CTL_BFNE_CFG_MODE_BF_WID ( 2)
#define CTL_BFNE_CFG_MODE_BF_MSK (0x00000006)
#define CTL_BFNE_CFG_MODE_BF_DEF (0x00000000)

///< Selects whether the BFN_EVENT output toggles at each event, or produces
///< a single cycle pulse.
#define CTL_BFNE_CFG_OUTPUT_MODE_BF_OFF ( 3)
#define CTL_BFNE_CFG_OUTPUT_MODE_BF_WID ( 1)
#define CTL_BFNE_CFG_OUTPUT_MODE_BF_MSK (0x00000008)
#define CTL_BFNE_CFG_OUTPUT_MODE_BF_DEF (0x00000000)

///< Controls what appears in BFN_EVENT_STAT DEBUG field, which is 28 bits.
#define CTL_BFNE_CFG_DBG_MODE_BF_OFF ( 4)
#define CTL_BFNE_CFG_DBG_MODE_BF_WID ( 2)
#define CTL_BFNE_CFG_DBG_MODE_BF_MSK (0x00000030)
#define CTL_BFNE_CFG_DBG_MODE_BF_DEF (0x00000000)
#define CTL_BFNE_CFG_ARR_SZ0 (13)
#define CTL_BFNE_CFG_ARRAY_STRIDE0 (0x0004)


/** @brief CTL_REG_ABC_BFN_EVENTS_BFNE_INCR[13] register description at address offset 0x440
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/ABC_BFN_EVENTS/BFNE_INCR
  * BFN Event Increment
  */

typedef union {
  struct {
    uint32_t OFFSET : 24;
    ///< Offset from nearest 10ms frame, in clock cycles.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FRAME : 8;
    ///< Count of 10ms frames.
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} ctl_bfne_incr_reg_t;

#define CTL_BFNE_INCR_DEFAULT (0x00000000U)
#define CTL_BFNE_INCR_RD_MASK (0xffffffffU)
#define CTL_BFNE_INCR_WR_MASK (0xffffffffU)


///< Offset from nearest 10ms frame, in clock cycles.
#define CTL_BFNE_INCR_OFFSET_BF_OFF ( 0)
#define CTL_BFNE_INCR_OFFSET_BF_WID (24)
#define CTL_BFNE_INCR_OFFSET_BF_MSK (0x00FFFFFF)
#define CTL_BFNE_INCR_OFFSET_BF_DEF (0x00000000)

///< Count of 10ms frames.
#define CTL_BFNE_INCR_FRAME_BF_OFF (24)
#define CTL_BFNE_INCR_FRAME_BF_WID ( 8)
#define CTL_BFNE_INCR_FRAME_BF_MSK (0xFF000000)
#define CTL_BFNE_INCR_FRAME_BF_DEF (0x00000000)
#define CTL_BFNE_INCR_ARR_SZ0 (13)
#define CTL_BFNE_INCR_ARRAY_STRIDE0 (0x0004)


/** @brief CTL_REG_ABC_BFN_EVENTS_BFNE_START[13] register description at address offset 0x480
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/ABC_BFN_EVENTS/BFNE_START
  * BFN Event Start
  */

typedef union {
  struct {
    uint32_t OFFSET : 24;
    ///< Offset from nearest 10ms frame, in clock cycles.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FRAME : 8;
    ///< Count of 10ms frames.
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} ctl_bfne_start_reg_t;

#define CTL_BFNE_START_DEFAULT (0x00000000U)
#define CTL_BFNE_START_RD_MASK (0xffffffffU)
#define CTL_BFNE_START_WR_MASK (0xffffffffU)


///< Offset from nearest 10ms frame, in clock cycles.
#define CTL_BFNE_START_OFFSET_BF_OFF ( 0)
#define CTL_BFNE_START_OFFSET_BF_WID (24)
#define CTL_BFNE_START_OFFSET_BF_MSK (0x00FFFFFF)
#define CTL_BFNE_START_OFFSET_BF_DEF (0x00000000)

///< Count of 10ms frames.
#define CTL_BFNE_START_FRAME_BF_OFF (24)
#define CTL_BFNE_START_FRAME_BF_WID ( 8)
#define CTL_BFNE_START_FRAME_BF_MSK (0xFF000000)
#define CTL_BFNE_START_FRAME_BF_DEF (0x00000000)
#define CTL_BFNE_START_ARR_SZ0 (13)
#define CTL_BFNE_START_ARRAY_STRIDE0 (0x0004)


/** @brief CTL_REG_ABC_BFN_EVENTS_BFNE_STAT[13] register description at address offset 0x4c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: Ctl/REG/ABC_BFN_EVENTS/BFNE_STAT
  * BFN Event Status Register
  */

typedef union {
  struct {
    uint32_t CURRENT_VALUE : 1;
    ///< This bit shows the current output value of the bfn_event module
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t WAITING : 1;
    ///< This bit indicates when the bfn_event module is waiting for the programmed
    ///< bfn_start time. In Repeat mode, this will only toggle low during the
    ///< single cycle of each event, so is not useful.
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t DONE : 1;
    ///< This bit indicates that the bfn_module has reached its programmed
    ///< bfn time. In Repeate mode, this will only toggle high during the single
    ///< cycle of each event, so is not usefule.
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t DEBUG : 29;
    ///< This field is different based on the DEBUG_MODE setting in the BFNE_CONFIG
    ///< register.
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
  } ;
  uint32_t value;
} ctl_bfne_stat_reg_t;

#define CTL_BFNE_STAT_DEFAULT (0x00000000U)
#define CTL_BFNE_STAT_RD_MASK (0xffffffffU)
#define CTL_BFNE_STAT_WR_MASK (0x00000000U)


///< This bit shows the current output value of the bfn_event module
#define CTL_BFNE_STAT_CURRENT_VAL_BF_OFF ( 0)
#define CTL_BFNE_STAT_CURRENT_VAL_BF_WID ( 1)
#define CTL_BFNE_STAT_CURRENT_VAL_BF_MSK (0x00000001)
#define CTL_BFNE_STAT_CURRENT_VAL_BF_DEF (0x00000000)

///< This bit indicates when the bfn_event module is waiting for the programmed
///< bfn_start time. In Repeat mode, this will only toggle low during the
///< single cycle of each event, so is not useful.
#define CTL_BFNE_STAT_WAITING_BF_OFF ( 1)
#define CTL_BFNE_STAT_WAITING_BF_WID ( 1)
#define CTL_BFNE_STAT_WAITING_BF_MSK (0x00000002)
#define CTL_BFNE_STAT_WAITING_BF_DEF (0x00000000)

///< This bit indicates that the bfn_module has reached its programmed
///< bfn time. In Repeate mode, this will only toggle high during the single
///< cycle of each event, so is not usefule.
#define CTL_BFNE_STAT_DONE_BF_OFF ( 2)
#define CTL_BFNE_STAT_DONE_BF_WID ( 1)
#define CTL_BFNE_STAT_DONE_BF_MSK (0x00000004)
#define CTL_BFNE_STAT_DONE_BF_DEF (0x00000000)

///< This field is different based on the DEBUG_MODE setting in the BFNE_CONFIG
///< register.
#define CTL_BFNE_STAT_DBG_BF_OFF ( 3)
#define CTL_BFNE_STAT_DBG_BF_WID (29)
#define CTL_BFNE_STAT_DBG_BF_MSK (0xFFFFFFF8)
#define CTL_BFNE_STAT_DBG_BF_DEF (0x00000000)
#define CTL_BFNE_STAT_ARR_SZ0 (13)
#define CTL_BFNE_STAT_ARRAY_STRIDE0 (0x0004)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define CTL_TX_ANT_RATE_REG(_BASE) ((ctl_tx_ant_rate_reg_t*) CTL_TX_ANT_RATE_ADR(_BASE))
#define CTL_RX_ANT_RATE_REG(_BASE) ((ctl_rx_ant_rate_reg_t*) CTL_RX_ANT_RATE_ADR(_BASE))
#define CTL_DP_INIT_REG(_BASE) ((ctl_dp_init_reg_t*) CTL_DP_INIT_ADR(_BASE))
#define CTL_RX_INT_HI_SUM_REG(_BASE) ((ctl_rx_int_hi_sum_reg_t*) CTL_RX_INT_HI_SUM_ADR(_BASE))
#define CTL_RX_INT_LO_SUM_REG(_BASE) ((ctl_rx_int_lo_sum_reg_t*) CTL_RX_INT_LO_SUM_ADR(_BASE))
#define CTL_TX_INT_HI_SUM_REG(_BASE) ((ctl_tx_int_hi_sum_reg_t*) CTL_TX_INT_HI_SUM_ADR(_BASE))
#define CTL_TX_INT_LO_SUM_REG(_BASE) ((ctl_tx_int_lo_sum_reg_t*) CTL_TX_INT_LO_SUM_ADR(_BASE))
#define CTL_BRDG_STAT_REG(_BASE) ((ctl_brdg_stat_reg_t*) CTL_BRDG_STAT_ADR(_BASE))
#define CTL_LOOPBK_CTL_REG(_BASE) ((ctl_loopbk_ctl_reg_t*) CTL_LOOPBK_CTL_ADR(_BASE))
#define CTL_SMON_INT_STAT_REG(_BASE) ((ctl_smon_int_stat_reg_t*) CTL_SMON_INT_STAT_ADR(_BASE))
#define CTL_SMON_INT_HI_EN_REG(_BASE) ((ctl_smon_int_hi_en_reg_t*) CTL_SMON_INT_HI_EN_ADR(_BASE))
#define CTL_SMON_INT_LO_EN_REG(_BASE) ((ctl_smon_int_lo_en_reg_t*) CTL_SMON_INT_LO_EN_ADR(_BASE))
#define CTL_SMON_INT_CLR_REG(_BASE) ((ctl_smon_int_clr_reg_t*) CTL_SMON_INT_CLR_ADR(_BASE))
#define CTL_SMON_INT_FORCE_REG(_BASE) ((ctl_smon_int_force_reg_t*) CTL_SMON_INT_FORCE_ADR(_BASE))
#define CTL_DL_SMC_DITHER_SHDW0_REG(_BASE) ((ctl_dl_smc_dither_shdw0_reg_t*) CTL_DL_SMC_DITHER_SHDW0_ADR(_BASE))
#define CTL_DL_SMC_LSB_OFFSET_SHDW0_REG(_BASE) ((ctl_dl_smc_lsb_offset_shdw0_reg_t*) CTL_DL_SMC_LSB_OFFSET_SHDW0_ADR(_BASE))
#define CTL_DL_TXM_ENA_SHDW0_REG(_BASE) ((ctl_dl_txm_ena_shdw0_reg_t*) CTL_DL_TXM_ENA_SHDW0_ADR(_BASE))
#define CTL_UL_RXM_ENA_SHDW0_REG(_BASE) ((ctl_ul_rxm_ena_shdw0_reg_t*) CTL_UL_RXM_ENA_SHDW0_ADR(_BASE))
#define CTL_UL_RXM_PS_SHDW0_REG(_BASE) ((ctl_ul_rxm_ps_shdw0_reg_t*) CTL_UL_RXM_PS_SHDW0_ADR(_BASE))
#define CTL_UL_NLEQ_ZERO_STUFF_SHDW0_REG(_BASE) ((ctl_ul_nleq_zero_stuff_shdw0_reg_t*) CTL_UL_NLEQ_ZERO_STUFF_SHDW0_ADR(_BASE))
#define CTL_DL_SMC_DITHER_SHDW1_REG(_BASE) ((ctl_dl_smc_dither_shdw1_reg_t*) CTL_DL_SMC_DITHER_SHDW1_ADR(_BASE))
#define CTL_DL_SMC_LSB_OFFSET_SHDW1_REG(_BASE) ((ctl_dl_smc_lsb_offset_shdw1_reg_t*) CTL_DL_SMC_LSB_OFFSET_SHDW1_ADR(_BASE))
#define CTL_DL_TXM_ENA_SHDW1_REG(_BASE) ((ctl_dl_txm_ena_shdw1_reg_t*) CTL_DL_TXM_ENA_SHDW1_ADR(_BASE))
#define CTL_UL_RXM_ENA_SHDW1_REG(_BASE) ((ctl_ul_rxm_ena_shdw1_reg_t*) CTL_UL_RXM_ENA_SHDW1_ADR(_BASE))
#define CTL_UL_RXM_PS_SHDW1_REG(_BASE) ((ctl_ul_rxm_ps_shdw1_reg_t*) CTL_UL_RXM_PS_SHDW1_ADR(_BASE))
#define CTL_UL_NLEQ_ZERO_STUFF_SHDW1_REG(_BASE) ((ctl_ul_nleq_zero_stuff_shdw1_reg_t*) CTL_UL_NLEQ_ZERO_STUFF_SHDW1_ADR(_BASE))
#define CTL_DL_SMC_DITHER_LIVE0_REG(_BASE) ((ctl_dl_smc_dither_live0_reg_t*) CTL_DL_SMC_DITHER_LIVE0_ADR(_BASE))
#define CTL_DL_SMC_LSB_OFFSET_LIVE0_REG(_BASE) ((ctl_dl_smc_lsb_offset_live0_reg_t*) CTL_DL_SMC_LSB_OFFSET_LIVE0_ADR(_BASE))
#define CTL_DL_TXM_ENA_LIVE0_REG(_BASE) ((ctl_dl_txm_ena_live0_reg_t*) CTL_DL_TXM_ENA_LIVE0_ADR(_BASE))
#define CTL_UL_RXM_ENA_LIVE0_REG(_BASE) ((ctl_ul_rxm_ena_live0_reg_t*) CTL_UL_RXM_ENA_LIVE0_ADR(_BASE))
#define CTL_UL_RXM_PS_LIVE0_REG(_BASE) ((ctl_ul_rxm_ps_live0_reg_t*) CTL_UL_RXM_PS_LIVE0_ADR(_BASE))
#define CTL_UL_NLEQ_ZERO_STUFF_LIVE0_REG(_BASE) ((ctl_ul_nleq_zero_stuff_live0_reg_t*) CTL_UL_NLEQ_ZERO_STUFF_LIVE0_ADR(_BASE))
#define CTL_DL_SMC_DITHER_LIVE1_REG(_BASE) ((ctl_dl_smc_dither_live1_reg_t*) CTL_DL_SMC_DITHER_LIVE1_ADR(_BASE))
#define CTL_DL_SMC_LSB_OFFSET_LIVE1_REG(_BASE) ((ctl_dl_smc_lsb_offset_live1_reg_t*) CTL_DL_SMC_LSB_OFFSET_LIVE1_ADR(_BASE))
#define CTL_DL_TXM_ENA_LIVE1_REG(_BASE) ((ctl_dl_txm_ena_live1_reg_t*) CTL_DL_TXM_ENA_LIVE1_ADR(_BASE))
#define CTL_UL_RXM_ENA_LIVE1_REG(_BASE) ((ctl_ul_rxm_ena_live1_reg_t*) CTL_UL_RXM_ENA_LIVE1_ADR(_BASE))
#define CTL_UL_RXM_PS_LIVE1_REG(_BASE) ((ctl_ul_rxm_ps_live1_reg_t*) CTL_UL_RXM_PS_LIVE1_ADR(_BASE))
#define CTL_UL_NLEQ_ZERO_STUFF_LIVE1_REG(_BASE) ((ctl_ul_nleq_zero_stuff_live1_reg_t*) CTL_UL_NLEQ_ZERO_STUFF_LIVE1_ADR(_BASE))
#define CTL_ULDL_STAT_REG(_BASE) ((ctl_uldl_stat_reg_t*) CTL_ULDL_STAT_ADR(_BASE))
#define CTL_SMON_R0_REG(_BASE) ((ctl_smon_r0_reg_t*) CTL_SMON_R0_ADR(_BASE))
#define CTL_SMON_R1_REG(_BASE) ((ctl_smon_r1_reg_t*) CTL_SMON_R1_ADR(_BASE))
#define CTL_SMON_R2_REG(_BASE) ((ctl_smon_r2_reg_t*) CTL_SMON_R2_ADR(_BASE))
#define CTL_SMON_R3_REG(_BASE) ((ctl_smon_r3_reg_t*) CTL_SMON_R3_ADR(_BASE))
#define CTL_SMON_R4_REG(_BASE) ((ctl_smon_r4_reg_t*) CTL_SMON_R4_ADR(_BASE))
#define CTL_SMON_R5_REG(_BASE) ((ctl_smon_r5_reg_t*) CTL_SMON_R5_ADR(_BASE))
#define CTL_SMON_R6_REG(_BASE) ((ctl_smon_r6_reg_t*) CTL_SMON_R6_ADR(_BASE))
#define CTL_SMON_R7_REG(_BASE) ((ctl_smon_r7_reg_t*) CTL_SMON_R7_ADR(_BASE))
#define CTL_ISYNC_CTRL_REG(_BASE) ((ctl_isync_ctrl_reg_t*) CTL_ISYNC_CTRL_ADR(_BASE))
#define CTL_ISYNC_LCNT_INC_REG(_BASE) ((ctl_isync_lcnt_inc_reg_t*) CTL_ISYNC_LCNT_INC_ADR(_BASE))
#define CTL_ISYNC_TEN_MS_CNT_REG(_BASE) ((ctl_isync_ten_ms_cnt_reg_t*) CTL_ISYNC_TEN_MS_CNT_ADR(_BASE))
#define CTL_ISYNC_INC_PRE_REG(_BASE) ((ctl_isync_inc_pre_reg_t*) CTL_ISYNC_INC_PRE_ADR(_BASE))
#define CTL_ISYNC_CNT_ADJ_REG(_BASE) ((ctl_isync_cnt_adj_reg_t*) CTL_ISYNC_CNT_ADJ_ADR(_BASE))
#define CTL_ISYNC_BFN_CNT_SYNC_REG(_BASE) ((ctl_isync_bfn_cnt_sync_reg_t*) CTL_ISYNC_BFN_CNT_SYNC_ADR(_BASE))
#define CTL_ISYNC_BFN_CNT_REG(_BASE) ((ctl_isync_bfn_cnt_reg_t*) CTL_ISYNC_BFN_CNT_ADR(_BASE))
#define CTL_BFNE_CFG0_REG(_BASE) ((ctl_bfne_cfg_reg_t*) CTL_BFNE_CFG0_ADR(_BASE))
#define CTL_BFNE_CFG1_REG(_BASE) ((ctl_bfne_cfg_reg_t*) CTL_BFNE_CFG1_ADR(_BASE))
#define CTL_BFNE_CFG2_REG(_BASE) ((ctl_bfne_cfg_reg_t*) CTL_BFNE_CFG2_ADR(_BASE))
#define CTL_BFNE_CFG3_REG(_BASE) ((ctl_bfne_cfg_reg_t*) CTL_BFNE_CFG3_ADR(_BASE))
#define CTL_BFNE_CFG4_REG(_BASE) ((ctl_bfne_cfg_reg_t*) CTL_BFNE_CFG4_ADR(_BASE))
#define CTL_BFNE_CFG5_REG(_BASE) ((ctl_bfne_cfg_reg_t*) CTL_BFNE_CFG5_ADR(_BASE))
#define CTL_BFNE_CFG6_REG(_BASE) ((ctl_bfne_cfg_reg_t*) CTL_BFNE_CFG6_ADR(_BASE))
#define CTL_BFNE_CFG7_REG(_BASE) ((ctl_bfne_cfg_reg_t*) CTL_BFNE_CFG7_ADR(_BASE))
#define CTL_BFNE_CFG8_REG(_BASE) ((ctl_bfne_cfg_reg_t*) CTL_BFNE_CFG8_ADR(_BASE))
#define CTL_BFNE_CFG9_REG(_BASE) ((ctl_bfne_cfg_reg_t*) CTL_BFNE_CFG9_ADR(_BASE))
#define CTL_BFNE_CFG10_REG(_BASE) ((ctl_bfne_cfg_reg_t*) CTL_BFNE_CFG10_ADR(_BASE))
#define CTL_BFNE_CFG11_REG(_BASE) ((ctl_bfne_cfg_reg_t*) CTL_BFNE_CFG11_ADR(_BASE))
#define CTL_BFNE_CFG12_REG(_BASE) ((ctl_bfne_cfg_reg_t*) CTL_BFNE_CFG12_ADR(_BASE))
#define CTL_BFNE_INCR0_REG(_BASE) ((ctl_bfne_incr_reg_t*) CTL_BFNE_INCR0_ADR(_BASE))
#define CTL_BFNE_INCR1_REG(_BASE) ((ctl_bfne_incr_reg_t*) CTL_BFNE_INCR1_ADR(_BASE))
#define CTL_BFNE_INCR2_REG(_BASE) ((ctl_bfne_incr_reg_t*) CTL_BFNE_INCR2_ADR(_BASE))
#define CTL_BFNE_INCR3_REG(_BASE) ((ctl_bfne_incr_reg_t*) CTL_BFNE_INCR3_ADR(_BASE))
#define CTL_BFNE_INCR4_REG(_BASE) ((ctl_bfne_incr_reg_t*) CTL_BFNE_INCR4_ADR(_BASE))
#define CTL_BFNE_INCR5_REG(_BASE) ((ctl_bfne_incr_reg_t*) CTL_BFNE_INCR5_ADR(_BASE))
#define CTL_BFNE_INCR6_REG(_BASE) ((ctl_bfne_incr_reg_t*) CTL_BFNE_INCR6_ADR(_BASE))
#define CTL_BFNE_INCR7_REG(_BASE) ((ctl_bfne_incr_reg_t*) CTL_BFNE_INCR7_ADR(_BASE))
#define CTL_BFNE_INCR8_REG(_BASE) ((ctl_bfne_incr_reg_t*) CTL_BFNE_INCR8_ADR(_BASE))
#define CTL_BFNE_INCR9_REG(_BASE) ((ctl_bfne_incr_reg_t*) CTL_BFNE_INCR9_ADR(_BASE))
#define CTL_BFNE_INCR10_REG(_BASE) ((ctl_bfne_incr_reg_t*) CTL_BFNE_INCR10_ADR(_BASE))
#define CTL_BFNE_INCR11_REG(_BASE) ((ctl_bfne_incr_reg_t*) CTL_BFNE_INCR11_ADR(_BASE))
#define CTL_BFNE_INCR12_REG(_BASE) ((ctl_bfne_incr_reg_t*) CTL_BFNE_INCR12_ADR(_BASE))
#define CTL_BFNE_START0_REG(_BASE) ((ctl_bfne_start_reg_t*) CTL_BFNE_START0_ADR(_BASE))
#define CTL_BFNE_START1_REG(_BASE) ((ctl_bfne_start_reg_t*) CTL_BFNE_START1_ADR(_BASE))
#define CTL_BFNE_START2_REG(_BASE) ((ctl_bfne_start_reg_t*) CTL_BFNE_START2_ADR(_BASE))
#define CTL_BFNE_START3_REG(_BASE) ((ctl_bfne_start_reg_t*) CTL_BFNE_START3_ADR(_BASE))
#define CTL_BFNE_START4_REG(_BASE) ((ctl_bfne_start_reg_t*) CTL_BFNE_START4_ADR(_BASE))
#define CTL_BFNE_START5_REG(_BASE) ((ctl_bfne_start_reg_t*) CTL_BFNE_START5_ADR(_BASE))
#define CTL_BFNE_START6_REG(_BASE) ((ctl_bfne_start_reg_t*) CTL_BFNE_START6_ADR(_BASE))
#define CTL_BFNE_START7_REG(_BASE) ((ctl_bfne_start_reg_t*) CTL_BFNE_START7_ADR(_BASE))
#define CTL_BFNE_START8_REG(_BASE) ((ctl_bfne_start_reg_t*) CTL_BFNE_START8_ADR(_BASE))
#define CTL_BFNE_START9_REG(_BASE) ((ctl_bfne_start_reg_t*) CTL_BFNE_START9_ADR(_BASE))
#define CTL_BFNE_START10_REG(_BASE) ((ctl_bfne_start_reg_t*) CTL_BFNE_START10_ADR(_BASE))
#define CTL_BFNE_START11_REG(_BASE) ((ctl_bfne_start_reg_t*) CTL_BFNE_START11_ADR(_BASE))
#define CTL_BFNE_START12_REG(_BASE) ((ctl_bfne_start_reg_t*) CTL_BFNE_START12_ADR(_BASE))
#define CTL_BFNE_STAT0_REG(_BASE) ((ctl_bfne_stat_reg_t*) CTL_BFNE_STAT0_ADR(_BASE))
#define CTL_BFNE_STAT1_REG(_BASE) ((ctl_bfne_stat_reg_t*) CTL_BFNE_STAT1_ADR(_BASE))
#define CTL_BFNE_STAT2_REG(_BASE) ((ctl_bfne_stat_reg_t*) CTL_BFNE_STAT2_ADR(_BASE))
#define CTL_BFNE_STAT3_REG(_BASE) ((ctl_bfne_stat_reg_t*) CTL_BFNE_STAT3_ADR(_BASE))
#define CTL_BFNE_STAT4_REG(_BASE) ((ctl_bfne_stat_reg_t*) CTL_BFNE_STAT4_ADR(_BASE))
#define CTL_BFNE_STAT5_REG(_BASE) ((ctl_bfne_stat_reg_t*) CTL_BFNE_STAT5_ADR(_BASE))
#define CTL_BFNE_STAT6_REG(_BASE) ((ctl_bfne_stat_reg_t*) CTL_BFNE_STAT6_ADR(_BASE))
#define CTL_BFNE_STAT7_REG(_BASE) ((ctl_bfne_stat_reg_t*) CTL_BFNE_STAT7_ADR(_BASE))
#define CTL_BFNE_STAT8_REG(_BASE) ((ctl_bfne_stat_reg_t*) CTL_BFNE_STAT8_ADR(_BASE))
#define CTL_BFNE_STAT9_REG(_BASE) ((ctl_bfne_stat_reg_t*) CTL_BFNE_STAT9_ADR(_BASE))
#define CTL_BFNE_STAT10_REG(_BASE) ((ctl_bfne_stat_reg_t*) CTL_BFNE_STAT10_ADR(_BASE))
#define CTL_BFNE_STAT11_REG(_BASE) ((ctl_bfne_stat_reg_t*) CTL_BFNE_STAT11_ADR(_BASE))
#define CTL_BFNE_STAT12_REG(_BASE) ((ctl_bfne_stat_reg_t*) CTL_BFNE_STAT12_ADR(_BASE))

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    ctl_tx_ant_rate_reg_t TX_ANT_RATE;     /*< Address offset = 0x0 */
    ctl_rx_ant_rate_reg_t RX_ANT_RATE;     /*< Address offset = 0x4 */
    ctl_dp_init_reg_t DP_INIT;         /*< Address offset = 0x8 */
    const uint8_t        reservedArea0 [4];   /*< Address offset = 0xc */
    ctl_rx_int_hi_sum_reg_t RX_INT_HI_SUM;   /*< Address offset = 0x10 */
    ctl_rx_int_lo_sum_reg_t RX_INT_LO_SUM;   /*< Address offset = 0x14 */
    ctl_tx_int_hi_sum_reg_t TX_INT_HI_SUM;   /*< Address offset = 0x18 */
    ctl_tx_int_lo_sum_reg_t TX_INT_LO_SUM;   /*< Address offset = 0x1c */
    ctl_brdg_stat_reg_t BRDG_STAT;   /*< Address offset = 0x20 */
    ctl_loopbk_ctl_reg_t LOOPBK_CTL;      /*< Address offset = 0x24 */
    const uint8_t        reservedArea1 [24];  /*< Address offset = 0x28 */
    ctl_smon_int_stat_reg_t SMON_INT_STAT; /*< Address offset = 0x40 */
    ctl_smon_int_hi_en_reg_t SMON_INT_HI_EN;  /*< Address offset = 0x44 */
    ctl_smon_int_lo_en_reg_t SMON_INT_LO_EN;  /*< Address offset = 0x48 */
    ctl_smon_int_clr_reg_t SMON_INT_CLR;  /*< Address offset = 0x4c */
    ctl_smon_int_force_reg_t SMON_INT_FORCE;  /*< Address offset = 0x50 */
    const uint8_t        reservedArea2 [172]; /*< Address offset = 0x54 */
    ctl_dl_smc_dither_shdw0_reg_t DL_SMC_DITHER_SHDW0; /*< Address offset = 0x100 */
    ctl_dl_smc_lsb_offset_shdw0_reg_t DL_SMC_LSB_OFFSET_SHDW0; /*< Address offset = 0x104 */
    ctl_dl_txm_ena_shdw0_reg_t DL_TXM_ENA_SHDW0; /*< Address offset = 0x108 */
    ctl_ul_rxm_ena_shdw0_reg_t UL_RXM_ENA_SHDW0; /*< Address offset = 0x10c */
    ctl_ul_rxm_ps_shdw0_reg_t UL_RXM_PS_SHDW0; /*< Address offset = 0x110 */
    ctl_ul_nleq_zero_stuff_shdw0_reg_t UL_NLEQ_ZERO_STUFF_SHDW0; /*< Address offset = 0x114 */
    ctl_dl_smc_dither_shdw1_reg_t DL_SMC_DITHER_SHDW1; /*< Address offset = 0x118 */
    ctl_dl_smc_lsb_offset_shdw1_reg_t DL_SMC_LSB_OFFSET_SHDW1; /*< Address offset = 0x11c */
    ctl_dl_txm_ena_shdw1_reg_t DL_TXM_ENA_SHDW1; /*< Address offset = 0x120 */
    ctl_ul_rxm_ena_shdw1_reg_t UL_RXM_ENA_SHDW1; /*< Address offset = 0x124 */
    ctl_ul_rxm_ps_shdw1_reg_t UL_RXM_PS_SHDW1; /*< Address offset = 0x128 */
    ctl_ul_nleq_zero_stuff_shdw1_reg_t UL_NLEQ_ZERO_STUFF_SHDW1; /*< Address offset = 0x12c */
    ctl_dl_smc_dither_live0_reg_t DL_SMC_DITHER_LIVE0; /*< Address offset = 0x130 */
    ctl_dl_smc_lsb_offset_live0_reg_t DL_SMC_LSB_OFFSET_LIVE0; /*< Address offset = 0x134 */
    ctl_dl_txm_ena_live0_reg_t DL_TXM_ENA_LIVE0; /*< Address offset = 0x138 */
    ctl_ul_rxm_ena_live0_reg_t UL_RXM_ENA_LIVE0; /*< Address offset = 0x13c */
    ctl_ul_rxm_ps_live0_reg_t UL_RXM_PS_LIVE0; /*< Address offset = 0x140 */
    ctl_ul_nleq_zero_stuff_live0_reg_t UL_NLEQ_ZERO_STUFF_LIVE0; /*< Address offset = 0x144 */
    ctl_dl_smc_dither_live1_reg_t DL_SMC_DITHER_LIVE1; /*< Address offset = 0x148 */
    ctl_dl_smc_lsb_offset_live1_reg_t DL_SMC_LSB_OFFSET_LIVE1; /*< Address offset = 0x14c */
    ctl_dl_txm_ena_live1_reg_t DL_TXM_ENA_LIVE1; /*< Address offset = 0x150 */
    ctl_ul_rxm_ena_live1_reg_t UL_RXM_ENA_LIVE1; /*< Address offset = 0x154 */
    ctl_ul_rxm_ps_live1_reg_t UL_RXM_PS_LIVE1; /*< Address offset = 0x158 */
    ctl_ul_nleq_zero_stuff_live1_reg_t UL_NLEQ_ZERO_STUFF_LIVE1; /*< Address offset = 0x15c */
    ctl_uldl_stat_reg_t ULDL_STAT;     /*< Address offset = 0x160 */
    const uint8_t        reservedArea3 [156]; /*< Address offset = 0x164 */
    ctl_smon_r0_reg_t SMON_R0; /*< Address offset = 0x200 */
    ctl_smon_r1_reg_t SMON_R1; /*< Address offset = 0x204 */
    ctl_smon_r2_reg_t SMON_R2; /*< Address offset = 0x208 */
    ctl_smon_r3_reg_t SMON_R3; /*< Address offset = 0x20c */
    ctl_smon_r4_reg_t SMON_R4; /*< Address offset = 0x210 */
    ctl_smon_r5_reg_t SMON_R5; /*< Address offset = 0x214 */
    ctl_smon_r6_reg_t SMON_R6; /*< Address offset = 0x218 */
    ctl_smon_r7_reg_t SMON_R7; /*< Address offset = 0x21c */
    const uint8_t        reservedArea4 [224]; /*< Address offset = 0x220 */
    ctl_isync_ctrl_reg_t ISYNC_CTRL; /*< Address offset = 0x300 */
    ctl_isync_lcnt_inc_reg_t ISYNC_LCNT_INC; /*< Address offset = 0x304 */
    ctl_isync_ten_ms_cnt_reg_t ISYNC_TEN_MS_CNT; /*< Address offset = 0x308 */
    ctl_isync_inc_pre_reg_t ISYNC_INC_PRE; /*< Address offset = 0x30c */
    ctl_isync_cnt_adj_reg_t ISYNC_CNT_ADJ; /*< Address offset = 0x310 */
    ctl_isync_bfn_cnt_sync_reg_t ISYNC_BFN_CNT_SYNC; /*< Address offset = 0x314 */
    ctl_isync_bfn_cnt_reg_t ISYNC_BFN_CNT; /*< Address offset = 0x318 */
    const uint8_t        reservedArea5 [228]; /*< Address offset = 0x31c */
    ctl_bfne_cfg_reg_t BFNE_CFG[13]; /*< Address offset = 0x400 */
    const uint8_t        reservedArea6 [12];  /*< Address offset = 0x434 */
    ctl_bfne_incr_reg_t BFNE_INCR[13]; /*< Address offset = 0x440 */
    const uint8_t        reservedArea7 [12];  /*< Address offset = 0x474 */
    ctl_bfne_start_reg_t BFNE_START[13]; /*< Address offset = 0x480 */
    const uint8_t        reservedArea8 [12];  /*< Address offset = 0x4b4 */
    ctl_bfne_stat_reg_t BFNE_STAT[13]; /*< Address offset = 0x4c0 */
} ctl_t;     // size: 0x00e8

// AddressSpace struct pointer
//
#define TRX_ANT0_CTL     ((ctl_t*) TRX_ANT0_CTL_BASE)
#define TRX_ANT1_CTL     ((ctl_t*) TRX_ANT1_CTL_BASE)
#define TRX_ANT2_CTL     ((ctl_t*) TRX_ANT2_CTL_BASE)
#define TRX_ANT3_CTL     ((ctl_t*) TRX_ANT3_CTL_BASE)
#define TRX_ANT4_CTL     ((ctl_t*) TRX_ANT4_CTL_BASE)
#define TRX_ANT5_CTL     ((ctl_t*) TRX_ANT5_CTL_BASE)
#define TRX_ANT6_CTL     ((ctl_t*) TRX_ANT6_CTL_BASE)
#define TRX_ANT7_CTL     ((ctl_t*) TRX_ANT7_CTL_BASE)

// ******************************************* /Address Space

#endif      // _CTL_H_

