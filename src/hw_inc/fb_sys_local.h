#ifndef _FB_SYS_LOCAL_H_
#define _FB_SYS_LOCAL_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define FB_SYS0_CTL_BASE      ( 0x0510f000 )
#define FB_SYS1_CTL_BASE      ( 0x0511f000 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define FB_SYS_LOCAL_INT_HI_SUM_OFFSET ( 0x00000000U )
#define FB_SYS_LOCAL_INT_LO_SUM_OFFSET ( 0x00000004U )
#define FB_SYS_LOCAL_BRDG_STAT_OFFSET ( 0x00000008U )
#define FB_SYS_LOCAL_DP_INIT_OFFSET  ( 0x0000000cU )
#define FB_SYS_LOCAL_TOP_INT_STAT_OFFSET ( 0x00000020U )
#define FB_SYS_LOCAL_TOP_INT_HI_EN_OFFSET ( 0x00000024U )
#define FB_SYS_LOCAL_TOP_INT_LO_EN_OFFSET ( 0x00000028U )
#define FB_SYS_LOCAL_TOP_INT_CLR_OFFSET ( 0x0000002cU )
#define FB_SYS_LOCAL_TOP_INT_FORCE_OFFSET ( 0x00000030U )
#define FB_SYS_LOCAL_SYS_RATE0_OFFSET ( 0x00000040U )
#define FB_SYS_LOCAL_SYS_RATE1_OFFSET ( 0x00000044U )
#define FB_SYS_LOCAL_SWG_MUX_OFFSET  ( 0x00000048U )
#define FB_SYS_LOCAL_SWG_TX_RISE_CH0_OFFSET ( 0x0000004cU )
#define FB_SYS_LOCAL_SWG_TX_FALL_CH0_OFFSET ( 0x00000050U )
#define FB_SYS_LOCAL_SWG_TX_RISE_CH1_OFFSET ( 0x00000054U )
#define FB_SYS_LOCAL_SWG_TX_FALL_CH1_OFFSET ( 0x00000058U )
#define FB_SYS_LOCAL_RXG_MUX_OFFSET  ( 0x0000005cU )
#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT0_OFFSET ( 0x00000060U )
#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT1_OFFSET ( 0x00000064U )
#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT2_OFFSET ( 0x00000068U )
#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT3_OFFSET ( 0x0000006cU )
#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT0_OFFSET ( 0x00000070U )
#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT1_OFFSET ( 0x00000074U )
#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT2_OFFSET ( 0x00000078U )
#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT3_OFFSET ( 0x0000007cU )
#define FB_SYS_LOCAL_ONOFF_CFG_CH0_OFFSET ( 0x00000080U )
#define FB_SYS_LOCAL_ONOFF_CFG_CH1_OFFSET ( 0x00000084U )
#define FB_SYS_LOCAL_CVA_I_DATA_0_OFFSET ( 0x00000090U )
#define FB_SYS_LOCAL_CVA_Q_DATA_0_OFFSET ( 0x00000094U )
#define FB_SYS_LOCAL_CVA_I_DATA_1_OFFSET ( 0x00000098U )
#define FB_SYS_LOCAL_CVA_Q_DATA_1_OFFSET ( 0x0000009cU )
#define FB_SYS_LOCAL_CVA_CFG_OFFSET ( 0x000000a0U )
#define FB_SYS_LOCAL_FB0_SWG_GATE_RISE_OFFSET ( 0x000000b0U )
#define FB_SYS_LOCAL_FB0_SWG_GATE_FALL_OFFSET ( 0x000000b4U )
#define FB_SYS_LOCAL_FB1_SWG_GATE_RISE_OFFSET ( 0x000000b8U )
#define FB_SYS_LOCAL_FB1_SWG_GATE_FALL_OFFSET ( 0x000000bcU )
#define FB_SYS_LOCAL_RX0_SWG_GATE_RISE_OFFSET ( 0x000000c0U )
#define FB_SYS_LOCAL_RX0_SWG_GATE_FALL_OFFSET ( 0x000000c4U )
#define FB_SYS_LOCAL_RX1_SWG_GATE_RISE_OFFSET ( 0x000000c8U )
#define FB_SYS_LOCAL_RX1_SWG_GATE_FALL_OFFSET ( 0x000000ccU )
#define FB_SYS_LOCAL_TX0_SWG_GATE_RISE_OFFSET ( 0x000000d0U )
#define FB_SYS_LOCAL_TX0_SWG_GATE_FALL_OFFSET ( 0x000000d4U )
#define FB_SYS_LOCAL_TX1_SWG_GATE_RISE_OFFSET ( 0x000000d8U )
#define FB_SYS_LOCAL_TX1_SWG_GATE_FALL_OFFSET ( 0x000000dcU )
#define FB_SYS_LOCAL_SMON_R0_OFFSET ( 0x00000100U )
#define FB_SYS_LOCAL_SMON_R1_OFFSET ( 0x00000104U )
#define FB_SYS_LOCAL_SMON_R2_OFFSET ( 0x00000108U )
#define FB_SYS_LOCAL_SMON_R3_OFFSET ( 0x0000010cU )
#define FB_SYS_LOCAL_SMON_R4_OFFSET ( 0x00000110U )
#define FB_SYS_LOCAL_SMON_R5_OFFSET ( 0x00000114U )
#define FB_SYS_LOCAL_SMON_R6_OFFSET ( 0x00000118U )
#define FB_SYS_LOCAL_SMON_R7_OFFSET ( 0x0000011cU )
#define FB_SYS_LOCAL_ISYNC_CTRL_OFFSET ( 0x00000200U )
#define FB_SYS_LOCAL_ISYNC_LCNT_INC_OFFSET ( 0x00000204U )
#define FB_SYS_LOCAL_ISYNC_TEN_MS_CNT_OFFSET ( 0x00000208U )
#define FB_SYS_LOCAL_ISYNC_INC_PRE_OFFSET ( 0x0000020cU )
#define FB_SYS_LOCAL_ISYNC_CNT_ADJ_OFFSET ( 0x00000210U )
#define FB_SYS_LOCAL_ISYNC_BFN_CNT_SYNC_OFFSET ( 0x00000214U )
#define FB_SYS_LOCAL_ISYNC_BFN_CNT_OFFSET ( 0x00000218U )
#define FB_SYS_LOCAL_BFNE_CFG0_OFFSET ( 0x00000400U )
#define FB_SYS_LOCAL_BFNE_CFG1_OFFSET ( 0x00000404U )
#define FB_SYS_LOCAL_BFNE_CFG2_OFFSET ( 0x00000408U )
#define FB_SYS_LOCAL_BFNE_CFG3_OFFSET ( 0x0000040cU )
#define FB_SYS_LOCAL_BFNE_CFG4_OFFSET ( 0x00000410U )
#define FB_SYS_LOCAL_BFNE_CFG5_OFFSET ( 0x00000414U )
#define FB_SYS_LOCAL_BFNE_CFG6_OFFSET ( 0x00000418U )
#define FB_SYS_LOCAL_BFNE_CFG7_OFFSET ( 0x0000041cU )
#define FB_SYS_LOCAL_BFNE_CFG8_OFFSET ( 0x00000420U )
#define FB_SYS_LOCAL_BFNE_CFG9_OFFSET ( 0x00000424U )
#define FB_SYS_LOCAL_BFNE_CFG10_OFFSET ( 0x00000428U )
#define FB_SYS_LOCAL_BFNE_CFG11_OFFSET ( 0x0000042cU )
#define FB_SYS_LOCAL_BFNE_CFG12_OFFSET ( 0x00000430U )
#define FB_SYS_LOCAL_BFNE_CFG13_OFFSET ( 0x00000434U )
#define FB_SYS_LOCAL_BFNE_CFG14_OFFSET ( 0x00000438U )
#define FB_SYS_LOCAL_BFNE_CFG15_OFFSET ( 0x0000043cU )
#define FB_SYS_LOCAL_BFNE_CFG16_OFFSET ( 0x00000440U )
#define FB_SYS_LOCAL_BFNE_CFG17_OFFSET ( 0x00000444U )
#define FB_SYS_LOCAL_BFNE_CFG18_OFFSET ( 0x00000448U )
#define FB_SYS_LOCAL_BFNE_CFG19_OFFSET ( 0x0000044cU )
#define FB_SYS_LOCAL_BFNE_CFG20_OFFSET ( 0x00000450U )
#define FB_SYS_LOCAL_BFNE_INCR0_OFFSET ( 0x00000480U )
#define FB_SYS_LOCAL_BFNE_INCR1_OFFSET ( 0x00000484U )
#define FB_SYS_LOCAL_BFNE_INCR2_OFFSET ( 0x00000488U )
#define FB_SYS_LOCAL_BFNE_INCR3_OFFSET ( 0x0000048cU )
#define FB_SYS_LOCAL_BFNE_INCR4_OFFSET ( 0x00000490U )
#define FB_SYS_LOCAL_BFNE_INCR5_OFFSET ( 0x00000494U )
#define FB_SYS_LOCAL_BFNE_INCR6_OFFSET ( 0x00000498U )
#define FB_SYS_LOCAL_BFNE_INCR7_OFFSET ( 0x0000049cU )
#define FB_SYS_LOCAL_BFNE_INCR8_OFFSET ( 0x000004a0U )
#define FB_SYS_LOCAL_BFNE_INCR9_OFFSET ( 0x000004a4U )
#define FB_SYS_LOCAL_BFNE_INCR10_OFFSET ( 0x000004a8U )
#define FB_SYS_LOCAL_BFNE_INCR11_OFFSET ( 0x000004acU )
#define FB_SYS_LOCAL_BFNE_INCR12_OFFSET ( 0x000004b0U )
#define FB_SYS_LOCAL_BFNE_INCR13_OFFSET ( 0x000004b4U )
#define FB_SYS_LOCAL_BFNE_INCR14_OFFSET ( 0x000004b8U )
#define FB_SYS_LOCAL_BFNE_INCR15_OFFSET ( 0x000004bcU )
#define FB_SYS_LOCAL_BFNE_INCR16_OFFSET ( 0x000004c0U )
#define FB_SYS_LOCAL_BFNE_INCR17_OFFSET ( 0x000004c4U )
#define FB_SYS_LOCAL_BFNE_INCR18_OFFSET ( 0x000004c8U )
#define FB_SYS_LOCAL_BFNE_INCR19_OFFSET ( 0x000004ccU )
#define FB_SYS_LOCAL_BFNE_INCR20_OFFSET ( 0x000004d0U )
#define FB_SYS_LOCAL_BFNE_START0_OFFSET ( 0x00000500U )
#define FB_SYS_LOCAL_BFNE_START1_OFFSET ( 0x00000504U )
#define FB_SYS_LOCAL_BFNE_START2_OFFSET ( 0x00000508U )
#define FB_SYS_LOCAL_BFNE_START3_OFFSET ( 0x0000050cU )
#define FB_SYS_LOCAL_BFNE_START4_OFFSET ( 0x00000510U )
#define FB_SYS_LOCAL_BFNE_START5_OFFSET ( 0x00000514U )
#define FB_SYS_LOCAL_BFNE_START6_OFFSET ( 0x00000518U )
#define FB_SYS_LOCAL_BFNE_START7_OFFSET ( 0x0000051cU )
#define FB_SYS_LOCAL_BFNE_START8_OFFSET ( 0x00000520U )
#define FB_SYS_LOCAL_BFNE_START9_OFFSET ( 0x00000524U )
#define FB_SYS_LOCAL_BFNE_START10_OFFSET ( 0x00000528U )
#define FB_SYS_LOCAL_BFNE_START11_OFFSET ( 0x0000052cU )
#define FB_SYS_LOCAL_BFNE_START12_OFFSET ( 0x00000530U )
#define FB_SYS_LOCAL_BFNE_START13_OFFSET ( 0x00000534U )
#define FB_SYS_LOCAL_BFNE_START14_OFFSET ( 0x00000538U )
#define FB_SYS_LOCAL_BFNE_START15_OFFSET ( 0x0000053cU )
#define FB_SYS_LOCAL_BFNE_START16_OFFSET ( 0x00000540U )
#define FB_SYS_LOCAL_BFNE_START17_OFFSET ( 0x00000544U )
#define FB_SYS_LOCAL_BFNE_START18_OFFSET ( 0x00000548U )
#define FB_SYS_LOCAL_BFNE_START19_OFFSET ( 0x0000054cU )
#define FB_SYS_LOCAL_BFNE_START20_OFFSET ( 0x00000550U )
#define FB_SYS_LOCAL_BFNE_STAT0_OFFSET ( 0x00000580U )
#define FB_SYS_LOCAL_BFNE_STAT1_OFFSET ( 0x00000584U )
#define FB_SYS_LOCAL_BFNE_STAT2_OFFSET ( 0x00000588U )
#define FB_SYS_LOCAL_BFNE_STAT3_OFFSET ( 0x0000058cU )
#define FB_SYS_LOCAL_BFNE_STAT4_OFFSET ( 0x00000590U )
#define FB_SYS_LOCAL_BFNE_STAT5_OFFSET ( 0x00000594U )
#define FB_SYS_LOCAL_BFNE_STAT6_OFFSET ( 0x00000598U )
#define FB_SYS_LOCAL_BFNE_STAT7_OFFSET ( 0x0000059cU )
#define FB_SYS_LOCAL_BFNE_STAT8_OFFSET ( 0x000005a0U )
#define FB_SYS_LOCAL_BFNE_STAT9_OFFSET ( 0x000005a4U )
#define FB_SYS_LOCAL_BFNE_STAT10_OFFSET ( 0x000005a8U )
#define FB_SYS_LOCAL_BFNE_STAT11_OFFSET ( 0x000005acU )
#define FB_SYS_LOCAL_BFNE_STAT12_OFFSET ( 0x000005b0U )
#define FB_SYS_LOCAL_BFNE_STAT13_OFFSET ( 0x000005b4U )
#define FB_SYS_LOCAL_BFNE_STAT14_OFFSET ( 0x000005b8U )
#define FB_SYS_LOCAL_BFNE_STAT15_OFFSET ( 0x000005bcU )
#define FB_SYS_LOCAL_BFNE_STAT16_OFFSET ( 0x000005c0U )
#define FB_SYS_LOCAL_BFNE_STAT17_OFFSET ( 0x000005c4U )
#define FB_SYS_LOCAL_BFNE_STAT18_OFFSET ( 0x000005c8U )
#define FB_SYS_LOCAL_BFNE_STAT19_OFFSET ( 0x000005ccU )
#define FB_SYS_LOCAL_BFNE_STAT20_OFFSET ( 0x000005d0U )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define FB_SYS_LOCAL_INT_HI_SUM_ADR(_BASE)  (( ( _BASE ) + ( FB_SYS_LOCAL_INT_HI_SUM_OFFSET ) ))
#define FB_SYS_LOCAL_INT_LO_SUM_ADR(_BASE)  (( ( _BASE ) + ( FB_SYS_LOCAL_INT_LO_SUM_OFFSET ) ))
#define FB_SYS_LOCAL_BRDG_STAT_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BRDG_STAT_OFFSET ) ))
#define FB_SYS_LOCAL_DP_INIT_ADR(_BASE)     (( ( _BASE ) + ( FB_SYS_LOCAL_DP_INIT_OFFSET ) ))
#define FB_SYS_LOCAL_TOP_INT_STAT_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_TOP_INT_STAT_OFFSET ) ))
#define FB_SYS_LOCAL_TOP_INT_HI_EN_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_TOP_INT_HI_EN_OFFSET ) ))
#define FB_SYS_LOCAL_TOP_INT_LO_EN_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_TOP_INT_LO_EN_OFFSET ) ))
#define FB_SYS_LOCAL_TOP_INT_CLR_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_TOP_INT_CLR_OFFSET ) ))
#define FB_SYS_LOCAL_TOP_INT_FORCE_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_TOP_INT_FORCE_OFFSET ) ))
#define FB_SYS_LOCAL_SYS_RATE0_ADR(_BASE)   (( ( _BASE ) + ( FB_SYS_LOCAL_SYS_RATE0_OFFSET ) ))
#define FB_SYS_LOCAL_SYS_RATE1_ADR(_BASE)   (( ( _BASE ) + ( FB_SYS_LOCAL_SYS_RATE1_OFFSET ) ))
#define FB_SYS_LOCAL_SWG_MUX_ADR(_BASE)     (( ( _BASE ) + ( FB_SYS_LOCAL_SWG_MUX_OFFSET ) ))
#define FB_SYS_LOCAL_SWG_TX_RISE_CH0_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_SWG_TX_RISE_CH0_OFFSET ) ))
#define FB_SYS_LOCAL_SWG_TX_FALL_CH0_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_SWG_TX_FALL_CH0_OFFSET ) ))
#define FB_SYS_LOCAL_SWG_TX_RISE_CH1_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_SWG_TX_RISE_CH1_OFFSET ) ))
#define FB_SYS_LOCAL_SWG_TX_FALL_CH1_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_SWG_TX_FALL_CH1_OFFSET ) ))
#define FB_SYS_LOCAL_RXG_MUX_ADR(_BASE)     (( ( _BASE ) + ( FB_SYS_LOCAL_RXG_MUX_OFFSET ) ))
#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT0_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_CAP_CFG_CH0_ANT0_OFFSET ) ))
#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT1_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_CAP_CFG_CH0_ANT1_OFFSET ) ))
#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT2_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_CAP_CFG_CH0_ANT2_OFFSET ) ))
#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT3_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_CAP_CFG_CH0_ANT3_OFFSET ) ))
#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT0_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_CAP_CFG_CH1_ANT0_OFFSET ) ))
#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT1_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_CAP_CFG_CH1_ANT1_OFFSET ) ))
#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT2_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_CAP_CFG_CH1_ANT2_OFFSET ) ))
#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT3_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_CAP_CFG_CH1_ANT3_OFFSET ) ))
#define FB_SYS_LOCAL_ONOFF_CFG_CH0_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_ONOFF_CFG_CH0_OFFSET ) ))
#define FB_SYS_LOCAL_ONOFF_CFG_CH1_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_ONOFF_CFG_CH1_OFFSET ) ))
#define FB_SYS_LOCAL_CVA_I_DATA_0_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_CVA_I_DATA_0_OFFSET ) ))
#define FB_SYS_LOCAL_CVA_Q_DATA_0_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_CVA_Q_DATA_0_OFFSET ) ))
#define FB_SYS_LOCAL_CVA_I_DATA_1_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_CVA_I_DATA_1_OFFSET ) ))
#define FB_SYS_LOCAL_CVA_Q_DATA_1_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_CVA_Q_DATA_1_OFFSET ) ))
#define FB_SYS_LOCAL_CVA_CFG_ADR(_BASE)  (( ( _BASE ) + ( FB_SYS_LOCAL_CVA_CFG_OFFSET ) ))
#define FB_SYS_LOCAL_FB0_SWG_GATE_RISE_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_FB0_SWG_GATE_RISE_OFFSET ) ))
#define FB_SYS_LOCAL_FB0_SWG_GATE_FALL_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_FB0_SWG_GATE_FALL_OFFSET ) ))
#define FB_SYS_LOCAL_FB1_SWG_GATE_RISE_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_FB1_SWG_GATE_RISE_OFFSET ) ))
#define FB_SYS_LOCAL_FB1_SWG_GATE_FALL_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_FB1_SWG_GATE_FALL_OFFSET ) ))
#define FB_SYS_LOCAL_RX0_SWG_GATE_RISE_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_RX0_SWG_GATE_RISE_OFFSET ) ))
#define FB_SYS_LOCAL_RX0_SWG_GATE_FALL_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_RX0_SWG_GATE_FALL_OFFSET ) ))
#define FB_SYS_LOCAL_RX1_SWG_GATE_RISE_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_RX1_SWG_GATE_RISE_OFFSET ) ))
#define FB_SYS_LOCAL_RX1_SWG_GATE_FALL_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_RX1_SWG_GATE_FALL_OFFSET ) ))
#define FB_SYS_LOCAL_TX0_SWG_GATE_RISE_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_TX0_SWG_GATE_RISE_OFFSET ) ))
#define FB_SYS_LOCAL_TX0_SWG_GATE_FALL_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_TX0_SWG_GATE_FALL_OFFSET ) ))
#define FB_SYS_LOCAL_TX1_SWG_GATE_RISE_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_TX1_SWG_GATE_RISE_OFFSET ) ))
#define FB_SYS_LOCAL_TX1_SWG_GATE_FALL_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_TX1_SWG_GATE_FALL_OFFSET ) ))
#define FB_SYS_LOCAL_SMON_R0_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_SMON_R0_OFFSET ) ))
#define FB_SYS_LOCAL_SMON_R1_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_SMON_R1_OFFSET ) ))
#define FB_SYS_LOCAL_SMON_R2_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_SMON_R2_OFFSET ) ))
#define FB_SYS_LOCAL_SMON_R3_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_SMON_R3_OFFSET ) ))
#define FB_SYS_LOCAL_SMON_R4_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_SMON_R4_OFFSET ) ))
#define FB_SYS_LOCAL_SMON_R5_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_SMON_R5_OFFSET ) ))
#define FB_SYS_LOCAL_SMON_R6_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_SMON_R6_OFFSET ) ))
#define FB_SYS_LOCAL_SMON_R7_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_SMON_R7_OFFSET ) ))
#define FB_SYS_LOCAL_ISYNC_CTRL_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_ISYNC_CTRL_OFFSET ) ))
#define FB_SYS_LOCAL_ISYNC_LCNT_INC_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_ISYNC_LCNT_INC_OFFSET ) ))
#define FB_SYS_LOCAL_ISYNC_TEN_MS_CNT_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_ISYNC_TEN_MS_CNT_OFFSET ) ))
#define FB_SYS_LOCAL_ISYNC_INC_PRE_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_ISYNC_INC_PRE_OFFSET ) ))
#define FB_SYS_LOCAL_ISYNC_CNT_ADJ_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_ISYNC_CNT_ADJ_OFFSET ) ))
#define FB_SYS_LOCAL_ISYNC_BFN_CNT_SYNC_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_ISYNC_BFN_CNT_SYNC_OFFSET ) ))
#define FB_SYS_LOCAL_ISYNC_BFN_CNT_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_ISYNC_BFN_CNT_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_CFG0_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_CFG0_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_CFG1_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_CFG1_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_CFG2_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_CFG2_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_CFG3_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_CFG3_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_CFG4_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_CFG4_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_CFG5_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_CFG5_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_CFG6_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_CFG6_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_CFG7_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_CFG7_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_CFG8_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_CFG8_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_CFG9_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_CFG9_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_CFG10_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_CFG10_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_CFG11_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_CFG11_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_CFG12_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_CFG12_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_CFG13_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_CFG13_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_CFG14_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_CFG14_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_CFG15_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_CFG15_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_CFG16_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_CFG16_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_CFG17_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_CFG17_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_CFG18_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_CFG18_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_CFG19_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_CFG19_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_CFG20_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_CFG20_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_INCR0_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_INCR0_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_INCR1_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_INCR1_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_INCR2_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_INCR2_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_INCR3_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_INCR3_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_INCR4_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_INCR4_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_INCR5_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_INCR5_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_INCR6_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_INCR6_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_INCR7_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_INCR7_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_INCR8_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_INCR8_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_INCR9_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_INCR9_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_INCR10_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_INCR10_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_INCR11_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_INCR11_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_INCR12_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_INCR12_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_INCR13_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_INCR13_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_INCR14_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_INCR14_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_INCR15_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_INCR15_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_INCR16_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_INCR16_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_INCR17_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_INCR17_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_INCR18_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_INCR18_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_INCR19_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_INCR19_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_INCR20_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_INCR20_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_START0_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_START0_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_START1_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_START1_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_START2_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_START2_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_START3_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_START3_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_START4_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_START4_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_START5_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_START5_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_START6_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_START6_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_START7_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_START7_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_START8_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_START8_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_START9_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_START9_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_START10_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_START10_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_START11_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_START11_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_START12_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_START12_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_START13_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_START13_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_START14_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_START14_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_START15_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_START15_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_START16_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_START16_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_START17_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_START17_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_START18_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_START18_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_START19_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_START19_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_START20_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_START20_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_STAT0_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_STAT0_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_STAT1_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_STAT1_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_STAT2_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_STAT2_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_STAT3_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_STAT3_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_STAT4_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_STAT4_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_STAT5_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_STAT5_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_STAT6_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_STAT6_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_STAT7_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_STAT7_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_STAT8_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_STAT8_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_STAT9_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_STAT9_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_STAT10_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_STAT10_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_STAT11_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_STAT11_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_STAT12_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_STAT12_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_STAT13_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_STAT13_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_STAT14_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_STAT14_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_STAT15_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_STAT15_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_STAT16_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_STAT16_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_STAT17_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_STAT17_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_STAT18_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_STAT18_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_STAT19_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_STAT19_OFFSET ) ))
#define FB_SYS_LOCAL_BFNE_STAT20_ADR(_BASE) (( ( _BASE ) + ( FB_SYS_LOCAL_BFNE_STAT20_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief FB_SYS_LOCAL_REG_INT_HI_SUM register description at address offset 0x0
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/INT_HI_SUM
  * FB_SYS Interrupt Summary Register
  */

typedef union {
  struct {
    uint32_t RXG0 : 1;
    ///< Indicates register error interrupt status
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RXG1 : 1;
    ///< Indicates register error interrupt status
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t SWG : 1;
    ///< Indicates register error interrupt status
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t FB_SYS_TOP : 1;
    ///< Indicates register error interrupt status
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} fb_sys_local_int_hi_sum_reg_t;

#define FB_SYS_LOCAL_INT_HI_SUM_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_INT_HI_SUM_RD_MASK (0x0000000fU)
#define FB_SYS_LOCAL_INT_HI_SUM_WR_MASK (0x00000000U)


///< Indicates register error interrupt status
#define FB_SYS_LOCAL_INT_HI_SUM_RXG0_BF_OFF ( 0)
#define FB_SYS_LOCAL_INT_HI_SUM_RXG0_BF_WID ( 1)
#define FB_SYS_LOCAL_INT_HI_SUM_RXG0_BF_MSK (0x00000001)
#define FB_SYS_LOCAL_INT_HI_SUM_RXG0_BF_DEF (0x00000000)

///< Indicates register error interrupt status
#define FB_SYS_LOCAL_INT_HI_SUM_RXG1_BF_OFF ( 1)
#define FB_SYS_LOCAL_INT_HI_SUM_RXG1_BF_WID ( 1)
#define FB_SYS_LOCAL_INT_HI_SUM_RXG1_BF_MSK (0x00000002)
#define FB_SYS_LOCAL_INT_HI_SUM_RXG1_BF_DEF (0x00000000)

///< Indicates register error interrupt status
#define FB_SYS_LOCAL_INT_HI_SUM_SWG_BF_OFF ( 2)
#define FB_SYS_LOCAL_INT_HI_SUM_SWG_BF_WID ( 1)
#define FB_SYS_LOCAL_INT_HI_SUM_SWG_BF_MSK (0x00000004)
#define FB_SYS_LOCAL_INT_HI_SUM_SWG_BF_DEF (0x00000000)

///< Indicates register error interrupt status
#define FB_SYS_LOCAL_INT_HI_SUM_FB_SYS_TOP_BF_OFF ( 3)
#define FB_SYS_LOCAL_INT_HI_SUM_FB_SYS_TOP_BF_WID ( 1)
#define FB_SYS_LOCAL_INT_HI_SUM_FB_SYS_TOP_BF_MSK (0x00000008)
#define FB_SYS_LOCAL_INT_HI_SUM_FB_SYS_TOP_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_INT_LO_SUM register description at address offset 0x4
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/INT_LO_SUM
  * FB_SYS Interrupt Summary Register
  */

typedef union {
  struct {
    uint32_t RXG0 : 1;
    ///< Indicates register error interrupt status
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RXG1 : 1;
    ///< Indicates register error interrupt status
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t SWG : 1;
    ///< Indicates register error interrupt status
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t FB_SYS_TOP : 1;
    ///< Indicates register error interrupt status
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} fb_sys_local_int_lo_sum_reg_t;

#define FB_SYS_LOCAL_INT_LO_SUM_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_INT_LO_SUM_RD_MASK (0x0000000fU)
#define FB_SYS_LOCAL_INT_LO_SUM_WR_MASK (0x00000000U)


///< Indicates register error interrupt status
#define FB_SYS_LOCAL_INT_LO_SUM_RXG0_BF_OFF ( 0)
#define FB_SYS_LOCAL_INT_LO_SUM_RXG0_BF_WID ( 1)
#define FB_SYS_LOCAL_INT_LO_SUM_RXG0_BF_MSK (0x00000001)
#define FB_SYS_LOCAL_INT_LO_SUM_RXG0_BF_DEF (0x00000000)

///< Indicates register error interrupt status
#define FB_SYS_LOCAL_INT_LO_SUM_RXG1_BF_OFF ( 1)
#define FB_SYS_LOCAL_INT_LO_SUM_RXG1_BF_WID ( 1)
#define FB_SYS_LOCAL_INT_LO_SUM_RXG1_BF_MSK (0x00000002)
#define FB_SYS_LOCAL_INT_LO_SUM_RXG1_BF_DEF (0x00000000)

///< Indicates register error interrupt status
#define FB_SYS_LOCAL_INT_LO_SUM_SWG_BF_OFF ( 2)
#define FB_SYS_LOCAL_INT_LO_SUM_SWG_BF_WID ( 1)
#define FB_SYS_LOCAL_INT_LO_SUM_SWG_BF_MSK (0x00000004)
#define FB_SYS_LOCAL_INT_LO_SUM_SWG_BF_DEF (0x00000000)

///< Indicates register error interrupt status
#define FB_SYS_LOCAL_INT_LO_SUM_FB_SYS_TOP_BF_OFF ( 3)
#define FB_SYS_LOCAL_INT_LO_SUM_FB_SYS_TOP_BF_WID ( 1)
#define FB_SYS_LOCAL_INT_LO_SUM_FB_SYS_TOP_BF_MSK (0x00000008)
#define FB_SYS_LOCAL_INT_LO_SUM_FB_SYS_TOP_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_BRIDGE_STATUS register description at address offset 0x8
  *
  * Register default value:        0x00010000
  * Register full path in IP: fb_sys_local/reg/BRIDGE_STATUS
  * APB Bridge Status Register
  */

typedef union {
  struct {
    uint32_t TIMEOUT_VALUE : 20;
    ///< Number of core clocks to wait before timing out an APB request
    ///< AccessType="RW/L" BitOffset="0" ResetValue="0x10000"
    uint32_t REVISION : 8;
    ///< Module Revision Number
    ///< AccessType="RO" BitOffset="20" ResetValue="0x0"
    uint32_t SW_LOCK_CTRL : 1;
    ///< Block software writes to timeout_value if set
    ///< AccessType="RW/1S/V/L" BitOffset="28" ResetValue="0x0"
    uint32_t UNSOL_ACK : 1;
    ///< An unsolicited acknowledge was received
    ///< AccessType="RW/1C/V" BitOffset="29" ResetValue="0x0"
    uint32_t ACK_ERROR : 1;
    ///< Acknowledgement had error bit set
    ///< AccessType="RW/1C/V" BitOffset="30" ResetValue="0x0"
    uint32_t TIMEOUT : 1;
    ///< An APB request has timed out
    ///< AccessType="RW/1C/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} fb_sys_local_brdg_stat_reg_t;

#define FB_SYS_LOCAL_BRDG_STAT_DEFAULT (0x00010000U)
#define FB_SYS_LOCAL_BRDG_STAT_RD_MASK (0xffffffffU)
#define FB_SYS_LOCAL_BRDG_STAT_WR_MASK (0xf00fffffU)


///< Number of core clocks to wait before timing out an APB request
#define FB_SYS_LOCAL_BRDG_STAT_TIMEOUT_VAL_BF_OFF ( 0)
#define FB_SYS_LOCAL_BRDG_STAT_TIMEOUT_VAL_BF_WID (20)
#define FB_SYS_LOCAL_BRDG_STAT_TIMEOUT_VAL_BF_MSK (0x000FFFFF)
#define FB_SYS_LOCAL_BRDG_STAT_TIMEOUT_VAL_BF_DEF (0x00010000)

///< Module Revision Number
#define FB_SYS_LOCAL_BRDG_STAT_REVISION_BF_OFF (20)
#define FB_SYS_LOCAL_BRDG_STAT_REVISION_BF_WID ( 8)
#define FB_SYS_LOCAL_BRDG_STAT_REVISION_BF_MSK (0x0FF00000)
#define FB_SYS_LOCAL_BRDG_STAT_REVISION_BF_DEF (0x00000000)

///< Block software writes to timeout_value if set
#define FB_SYS_LOCAL_BRDG_STAT_SW_LOCK_CTRL_BF_OFF (28)
#define FB_SYS_LOCAL_BRDG_STAT_SW_LOCK_CTRL_BF_WID ( 1)
#define FB_SYS_LOCAL_BRDG_STAT_SW_LOCK_CTRL_BF_MSK (0x10000000)
#define FB_SYS_LOCAL_BRDG_STAT_SW_LOCK_CTRL_BF_DEF (0x00000000)

///< An unsolicited acknowledge was received
#define FB_SYS_LOCAL_BRDG_STAT_UNSOL_ACK_BF_OFF (29)
#define FB_SYS_LOCAL_BRDG_STAT_UNSOL_ACK_BF_WID ( 1)
#define FB_SYS_LOCAL_BRDG_STAT_UNSOL_ACK_BF_MSK (0x20000000)
#define FB_SYS_LOCAL_BRDG_STAT_UNSOL_ACK_BF_DEF (0x00000000)

///< Acknowledgement had error bit set
#define FB_SYS_LOCAL_BRDG_STAT_ACK_ERR_BF_OFF (30)
#define FB_SYS_LOCAL_BRDG_STAT_ACK_ERR_BF_WID ( 1)
#define FB_SYS_LOCAL_BRDG_STAT_ACK_ERR_BF_MSK (0x40000000)
#define FB_SYS_LOCAL_BRDG_STAT_ACK_ERR_BF_DEF (0x00000000)

///< An APB request has timed out
#define FB_SYS_LOCAL_BRDG_STAT_TIMEOUT_BF_OFF (31)
#define FB_SYS_LOCAL_BRDG_STAT_TIMEOUT_BF_WID ( 1)
#define FB_SYS_LOCAL_BRDG_STAT_TIMEOUT_BF_MSK (0x80000000)
#define FB_SYS_LOCAL_BRDG_STAT_TIMEOUT_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_DP_INIT register description at address offset 0xc
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/DP_INIT
  * Datapath Initialize
  */

typedef union {
  struct {
    uint32_t DP_INIT : 2;
    ///< Writing to one begins the initialization process for the channel datapath
    ///< sub-blocks.  Initializaiton is complete when DP_INIT_DONE is set.
    ///< One DP_INIT bit per channel.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
    uint32_t DP_INIT_DONE_DDC0 : 1;
    ///< Initialization of DDC0 complete
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t DP_INIT_DONE_DDC1 : 1;
    ///< Initialization of DDC1 complete
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t DP_INIT_DONE_RXG0 : 1;
    ///< Initialization of RXG0 complete
    ///< AccessType="RO/V" BitOffset="10" ResetValue="0x0"
    uint32_t DP_INIT_DONE_RXG1 : 1;
    ///< Initialization of RXG1 complete
    ///< AccessType="RO/V" BitOffset="11" ResetValue="0x0"
    uint32_t DP_INIT_DONE_DMOD0 : 1;
    ///< Initialization of DMOD ch0 complete
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t DP_INIT_DONE_DMOD1 : 1;
    ///< Initialization of DMOD ch1 complete
    ///< AccessType="RO/V" BitOffset="13" ResetValue="0x0"
    uint32_t DP_INIT_DONE_SWG0 : 1;
    ///< Initialization of SWG quad 0 generators (SWGs 0,2,3) complete
    ///< AccessType="RO/V" BitOffset="14" ResetValue="0x0"
    uint32_t DP_INIT_DONE_SWG1 : 1;
    ///< Initialization of SWG quad 1 generators (SWGs 1,4,5) complete
    ///< AccessType="RO/V" BitOffset="15" ResetValue="0x0"
    uint32_t DP_INIT_DONE_CVA0 : 1;
    ///< Initialization of CVA ch 0
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t DP_INIT_DONE_CVA1 : 1;
    ///< Initialization of CVA ch 1
    ///< AccessType="RO/V" BitOffset="17" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
    uint32_t DP_INIT_DONE : 2;
    ///< All blocks completed initialization.  One bit per channel.  These
    ///< bits will clear when the associated DP_INIT is cleared.
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="26" ResetValue="None"
  } ;
  uint32_t value;
} fb_sys_local_dp_init_reg_t;

#define FB_SYS_LOCAL_DP_INIT_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_DP_INIT_RD_MASK (0x0303ff03U)
#define FB_SYS_LOCAL_DP_INIT_WR_MASK (0x00000003U)


///< Writing to one begins the initialization process for the channel datapath
///< sub-blocks.  Initializaiton is complete when DP_INIT_DONE is set.
///< One DP_INIT bit per channel.
#define FB_SYS_LOCAL_DP_INIT_DP_INIT_BF_OFF ( 0)
#define FB_SYS_LOCAL_DP_INIT_DP_INIT_BF_WID ( 2)
#define FB_SYS_LOCAL_DP_INIT_DP_INIT_BF_MSK (0x00000003)
#define FB_SYS_LOCAL_DP_INIT_DP_INIT_BF_DEF (0x00000000)

///< Initialization of DDC0 complete
#define FB_SYS_LOCAL_DP_INIT_DP_INIT_DONE_DDC0_BF_OFF ( 8)
#define FB_SYS_LOCAL_DP_INIT_DP_INIT_DONE_DDC0_BF_WID ( 1)
#define FB_SYS_LOCAL_DP_INIT_DP_INIT_DONE_DDC0_BF_MSK (0x00000100)
#define FB_SYS_LOCAL_DP_INIT_DP_INIT_DONE_DDC0_BF_DEF (0x00000000)

///< Initialization of DDC1 complete
#define FB_SYS_LOCAL_DP_INIT_DP_INIT_DONE_DDC1_BF_OFF ( 9)
#define FB_SYS_LOCAL_DP_INIT_DP_INIT_DONE_DDC1_BF_WID ( 1)
#define FB_SYS_LOCAL_DP_INIT_DP_INIT_DONE_DDC1_BF_MSK (0x00000200)
#define FB_SYS_LOCAL_DP_INIT_DP_INIT_DONE_DDC1_BF_DEF (0x00000000)

///< Initialization of RXG0 complete
#define FB_SYS_LOCAL_DP_INIT_DP_INIT_DONE_RXG0_BF_OFF (10)
#define FB_SYS_LOCAL_DP_INIT_DP_INIT_DONE_RXG0_BF_WID ( 1)
#define FB_SYS_LOCAL_DP_INIT_DP_INIT_DONE_RXG0_BF_MSK (0x00000400)
#define FB_SYS_LOCAL_DP_INIT_DP_INIT_DONE_RXG0_BF_DEF (0x00000000)

///< Initialization of RXG1 complete
#define FB_SYS_LOCAL_DP_INIT_DP_INIT_DONE_RXG1_BF_OFF (11)
#define FB_SYS_LOCAL_DP_INIT_DP_INIT_DONE_RXG1_BF_WID ( 1)
#define FB_SYS_LOCAL_DP_INIT_DP_INIT_DONE_RXG1_BF_MSK (0x00000800)
#define FB_SYS_LOCAL_DP_INIT_DP_INIT_DONE_RXG1_BF_DEF (0x00000000)

///< Initialization of DMOD ch0 complete
#define FB_SYS_LOCAL_DP_INIT_DP_INIT_DONE_DMOD0_BF_OFF (12)
#define FB_SYS_LOCAL_DP_INIT_DP_INIT_DONE_DMOD0_BF_WID ( 1)
#define FB_SYS_LOCAL_DP_INIT_DP_INIT_DONE_DMOD0_BF_MSK (0x00001000)
#define FB_SYS_LOCAL_DP_INIT_DP_INIT_DONE_DMOD0_BF_DEF (0x00000000)

///< Initialization of DMOD ch1 complete
#define FB_SYS_LOCAL_DP_INIT_DP_INIT_DONE_DMOD1_BF_OFF (13)
#define FB_SYS_LOCAL_DP_INIT_DP_INIT_DONE_DMOD1_BF_WID ( 1)
#define FB_SYS_LOCAL_DP_INIT_DP_INIT_DONE_DMOD1_BF_MSK (0x00002000)
#define FB_SYS_LOCAL_DP_INIT_DP_INIT_DONE_DMOD1_BF_DEF (0x00000000)

///< Initialization of SWG quad 0 generators (SWGs 0,2,3) complete
#define FB_SYS_LOCAL_DP_INIT_DP_INIT_DONE_SWG0_BF_OFF (14)
#define FB_SYS_LOCAL_DP_INIT_DP_INIT_DONE_SWG0_BF_WID ( 1)
#define FB_SYS_LOCAL_DP_INIT_DP_INIT_DONE_SWG0_BF_MSK (0x00004000)
#define FB_SYS_LOCAL_DP_INIT_DP_INIT_DONE_SWG0_BF_DEF (0x00000000)

///< Initialization of SWG quad 1 generators (SWGs 1,4,5) complete
#define FB_SYS_LOCAL_DP_INIT_DP_INIT_DONE_SWG1_BF_OFF (15)
#define FB_SYS_LOCAL_DP_INIT_DP_INIT_DONE_SWG1_BF_WID ( 1)
#define FB_SYS_LOCAL_DP_INIT_DP_INIT_DONE_SWG1_BF_MSK (0x00008000)
#define FB_SYS_LOCAL_DP_INIT_DP_INIT_DONE_SWG1_BF_DEF (0x00000000)

///< Initialization of CVA ch 0
#define FB_SYS_LOCAL_DP_INIT_DP_INIT_DONE_CVA0_BF_OFF (16)
#define FB_SYS_LOCAL_DP_INIT_DP_INIT_DONE_CVA0_BF_WID ( 1)
#define FB_SYS_LOCAL_DP_INIT_DP_INIT_DONE_CVA0_BF_MSK (0x00010000)
#define FB_SYS_LOCAL_DP_INIT_DP_INIT_DONE_CVA0_BF_DEF (0x00000000)

///< Initialization of CVA ch 1
#define FB_SYS_LOCAL_DP_INIT_DP_INIT_DONE_CVA1_BF_OFF (17)
#define FB_SYS_LOCAL_DP_INIT_DP_INIT_DONE_CVA1_BF_WID ( 1)
#define FB_SYS_LOCAL_DP_INIT_DP_INIT_DONE_CVA1_BF_MSK (0x00020000)
#define FB_SYS_LOCAL_DP_INIT_DP_INIT_DONE_CVA1_BF_DEF (0x00000000)

///< All blocks completed initialization.  One bit per channel.  These
///< bits will clear when the associated DP_INIT is cleared.
#define FB_SYS_LOCAL_DP_INIT_DP_INIT_DONE_BF_OFF (24)
#define FB_SYS_LOCAL_DP_INIT_DP_INIT_DONE_BF_WID ( 2)
#define FB_SYS_LOCAL_DP_INIT_DP_INIT_DONE_BF_MSK (0x03000000)
#define FB_SYS_LOCAL_DP_INIT_DP_INIT_DONE_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_TOP_INT_STATUS register description at address offset 0x20
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/TOP_INT_STATUS
  * FB_SYS Interrupt Status Register
  */

typedef union {
  struct {
    uint32_t ONEHOT0_STAT : 1;
    ///< Indicates error interrupt status for channel 0.  Capture logic asserted
    ///< more than one antenna ID in the same cycle
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t ONEHOT1_STAT : 1;
    ///< Indicates error interrupt status for channel 1.  Capture logic asserted
    ///< more than one antenna ID in the same cycle
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t CVA0_STAT : 1;
    ///< Indicates error interrupt status for CVA on channel 0.
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t CVA1_STAT : 1;
    ///< Indicates error interrupt status for CVA on channel 1.
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t SMON_STAT : 1;
    ///< Indicates error interrupt status from the FB_SYS SMON
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} fb_sys_local_top_int_stat_reg_t;

#define FB_SYS_LOCAL_TOP_INT_STAT_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_TOP_INT_STAT_RD_MASK (0x0000001fU)
#define FB_SYS_LOCAL_TOP_INT_STAT_WR_MASK (0x00000000U)


///< Indicates error interrupt status for channel 0.  Capture logic asserted
///< more than one antenna ID in the same cycle
#define FB_SYS_LOCAL_TOP_INT_STAT_ONEHOT0_STAT_BF_OFF ( 0)
#define FB_SYS_LOCAL_TOP_INT_STAT_ONEHOT0_STAT_BF_WID ( 1)
#define FB_SYS_LOCAL_TOP_INT_STAT_ONEHOT0_STAT_BF_MSK (0x00000001)
#define FB_SYS_LOCAL_TOP_INT_STAT_ONEHOT0_STAT_BF_DEF (0x00000000)

///< Indicates error interrupt status for channel 1.  Capture logic asserted
///< more than one antenna ID in the same cycle
#define FB_SYS_LOCAL_TOP_INT_STAT_ONEHOT1_STAT_BF_OFF ( 1)
#define FB_SYS_LOCAL_TOP_INT_STAT_ONEHOT1_STAT_BF_WID ( 1)
#define FB_SYS_LOCAL_TOP_INT_STAT_ONEHOT1_STAT_BF_MSK (0x00000002)
#define FB_SYS_LOCAL_TOP_INT_STAT_ONEHOT1_STAT_BF_DEF (0x00000000)

///< Indicates error interrupt status for CVA on channel 0.
#define FB_SYS_LOCAL_TOP_INT_STAT_CVA0_STAT_BF_OFF ( 2)
#define FB_SYS_LOCAL_TOP_INT_STAT_CVA0_STAT_BF_WID ( 1)
#define FB_SYS_LOCAL_TOP_INT_STAT_CVA0_STAT_BF_MSK (0x00000004)
#define FB_SYS_LOCAL_TOP_INT_STAT_CVA0_STAT_BF_DEF (0x00000000)

///< Indicates error interrupt status for CVA on channel 1.
#define FB_SYS_LOCAL_TOP_INT_STAT_CVA1_STAT_BF_OFF ( 3)
#define FB_SYS_LOCAL_TOP_INT_STAT_CVA1_STAT_BF_WID ( 1)
#define FB_SYS_LOCAL_TOP_INT_STAT_CVA1_STAT_BF_MSK (0x00000008)
#define FB_SYS_LOCAL_TOP_INT_STAT_CVA1_STAT_BF_DEF (0x00000000)

///< Indicates error interrupt status from the FB_SYS SMON
#define FB_SYS_LOCAL_TOP_INT_STAT_SMON_STAT_BF_OFF ( 4)
#define FB_SYS_LOCAL_TOP_INT_STAT_SMON_STAT_BF_WID ( 1)
#define FB_SYS_LOCAL_TOP_INT_STAT_SMON_STAT_BF_MSK (0x00000010)
#define FB_SYS_LOCAL_TOP_INT_STAT_SMON_STAT_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_TOP_INT_HI_EN register description at address offset 0x24
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/TOP_INT_HI_EN
  * FB_SYS Interrupt High Enable Register
  */

typedef union {
  struct {
    uint32_t INT_HI_EN : 5;
    ///< Register error interrupt high enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} fb_sys_local_top_int_hi_en_reg_t;

#define FB_SYS_LOCAL_TOP_INT_HI_EN_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_TOP_INT_HI_EN_RD_MASK (0x0000001fU)
#define FB_SYS_LOCAL_TOP_INT_HI_EN_WR_MASK (0x0000001fU)


///< Register error interrupt high enable
#define FB_SYS_LOCAL_TOP_INT_HI_EN_INT_HI_EN_BF_OFF ( 0)
#define FB_SYS_LOCAL_TOP_INT_HI_EN_INT_HI_EN_BF_WID ( 5)
#define FB_SYS_LOCAL_TOP_INT_HI_EN_INT_HI_EN_BF_MSK (0x0000001F)
#define FB_SYS_LOCAL_TOP_INT_HI_EN_INT_HI_EN_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_TOP_INT_LO_EN register description at address offset 0x28
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/TOP_INT_LO_EN
  * FB_SYS Interrupt Low Enable Register
  */

typedef union {
  struct {
    uint32_t INT_LO_EN : 5;
    ///< Register error interrupt low enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} fb_sys_local_top_int_lo_en_reg_t;

#define FB_SYS_LOCAL_TOP_INT_LO_EN_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_TOP_INT_LO_EN_RD_MASK (0x0000001fU)
#define FB_SYS_LOCAL_TOP_INT_LO_EN_WR_MASK (0x0000001fU)


///< Register error interrupt low enable
#define FB_SYS_LOCAL_TOP_INT_LO_EN_INT_LO_EN_BF_OFF ( 0)
#define FB_SYS_LOCAL_TOP_INT_LO_EN_INT_LO_EN_BF_WID ( 5)
#define FB_SYS_LOCAL_TOP_INT_LO_EN_INT_LO_EN_BF_MSK (0x0000001F)
#define FB_SYS_LOCAL_TOP_INT_LO_EN_INT_LO_EN_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_TOP_INT_CLEAR register description at address offset 0x2c
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/TOP_INT_CLEAR
  * FB SYS Interrupt Clear Register
  */

typedef union {
  struct {
    uint32_t INT_CLR : 5;
    ///< Register error interrupt clear
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} fb_sys_local_top_int_clr_reg_t;

#define FB_SYS_LOCAL_TOP_INT_CLR_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_TOP_INT_CLR_RD_MASK (0x0000001fU)
#define FB_SYS_LOCAL_TOP_INT_CLR_WR_MASK (0x0000001fU)


///< Register error interrupt clear
#define FB_SYS_LOCAL_TOP_INT_CLR_INT_CLR_BF_OFF ( 0)
#define FB_SYS_LOCAL_TOP_INT_CLR_INT_CLR_BF_WID ( 5)
#define FB_SYS_LOCAL_TOP_INT_CLR_INT_CLR_BF_MSK (0x0000001F)
#define FB_SYS_LOCAL_TOP_INT_CLR_INT_CLR_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_TOP_INT_FORCE register description at address offset 0x30
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/TOP_INT_FORCE
  * FB SYS Interrupt Force Register
  */

typedef union {
  struct {
    uint32_t INT_FORCE : 5;
    ///< Register error interrupt force
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} fb_sys_local_top_int_force_reg_t;

#define FB_SYS_LOCAL_TOP_INT_FORCE_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_TOP_INT_FORCE_RD_MASK (0x0000001fU)
#define FB_SYS_LOCAL_TOP_INT_FORCE_WR_MASK (0x0000001fU)


///< Register error interrupt force
#define FB_SYS_LOCAL_TOP_INT_FORCE_INT_FORCE_BF_OFF ( 0)
#define FB_SYS_LOCAL_TOP_INT_FORCE_INT_FORCE_BF_WID ( 5)
#define FB_SYS_LOCAL_TOP_INT_FORCE_INT_FORCE_BF_MSK (0x0000001F)
#define FB_SYS_LOCAL_TOP_INT_FORCE_INT_FORCE_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_SYS_RATE0 register description at address offset 0x40
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/SYS_RATE0
  * Channel 0 rate and drf clk freq configuration
  */

typedef union {
  struct {
    uint32_t SYS_RATE : 5;
    ///< This field controls the system sampling rate for Channel 0. This control
    ///< and DRF_CLK_RATE bit affect data pattern. The numbers of clock cycles,
    ///< N/M, are based on clock rates 983Mhz /1.474Ghz, configured by DRF_CLK_RATE
    ///< bit.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
    uint32_t ANT_RATE : 3;
    ///< RX Antenna Rate.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
    uint32_t DRF_CLK_RATE : 1;
    ///< Indicates DRF clock rate.  0=0.983GHZ. 1=1.475Ghz
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} fb_sys_local_sys_rate0_reg_t;

#define FB_SYS_LOCAL_SYS_RATE0_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_SYS_RATE0_RD_MASK (0x0001071fU)
#define FB_SYS_LOCAL_SYS_RATE0_WR_MASK (0x0001071fU)


///< This field controls the system sampling rate for Channel 0. This control
///< and DRF_CLK_RATE bit affect data pattern. The numbers of clock cycles,
///< N/M, are based on clock rates 983Mhz /1.474Ghz, configured by DRF_CLK_RATE
///< bit.
#define FB_SYS_LOCAL_SYS_RATE0_SYS_RATE_BF_OFF ( 0)
#define FB_SYS_LOCAL_SYS_RATE0_SYS_RATE_BF_WID ( 5)
#define FB_SYS_LOCAL_SYS_RATE0_SYS_RATE_BF_MSK (0x0000001F)
#define FB_SYS_LOCAL_SYS_RATE0_SYS_RATE_BF_DEF (0x00000000)

///< RX Antenna Rate.
#define FB_SYS_LOCAL_SYS_RATE0_ANT_RATE_BF_OFF ( 8)
#define FB_SYS_LOCAL_SYS_RATE0_ANT_RATE_BF_WID ( 3)
#define FB_SYS_LOCAL_SYS_RATE0_ANT_RATE_BF_MSK (0x00000700)
#define FB_SYS_LOCAL_SYS_RATE0_ANT_RATE_BF_DEF (0x00000000)

///< Indicates DRF clock rate.  0=0.983GHZ. 1=1.475Ghz
#define FB_SYS_LOCAL_SYS_RATE0_DRF_CLK_RATE_BF_OFF (16)
#define FB_SYS_LOCAL_SYS_RATE0_DRF_CLK_RATE_BF_WID ( 1)
#define FB_SYS_LOCAL_SYS_RATE0_DRF_CLK_RATE_BF_MSK (0x00010000)
#define FB_SYS_LOCAL_SYS_RATE0_DRF_CLK_RATE_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_SYS_RATE1 register description at address offset 0x44
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/SYS_RATE1
  * Channel 1 rate configuration
  */

typedef union {
  struct {
    uint32_t SYS_RATE : 5;
    ///< This field controls the system sampling rate for Channel 1. This control
    ///< and DRF_CLK_RATE bit affect data pattern. The numbers of clock cycles,
    ///< N/M, are based on clock rates 983Mhz /1.474Ghz, configured by DRF_CLK_RATE
    ///< bit.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
    uint32_t ANT_RATE : 3;
    ///< RX Antenna Rate.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 21;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
  } ;
  uint32_t value;
} fb_sys_local_sys_rate1_reg_t;

#define FB_SYS_LOCAL_SYS_RATE1_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_SYS_RATE1_RD_MASK (0x0000071fU)
#define FB_SYS_LOCAL_SYS_RATE1_WR_MASK (0x0000071fU)


///< This field controls the system sampling rate for Channel 1. This control
///< and DRF_CLK_RATE bit affect data pattern. The numbers of clock cycles,
///< N/M, are based on clock rates 983Mhz /1.474Ghz, configured by DRF_CLK_RATE
///< bit.
#define FB_SYS_LOCAL_SYS_RATE1_SYS_RATE_BF_OFF ( 0)
#define FB_SYS_LOCAL_SYS_RATE1_SYS_RATE_BF_WID ( 5)
#define FB_SYS_LOCAL_SYS_RATE1_SYS_RATE_BF_MSK (0x0000001F)
#define FB_SYS_LOCAL_SYS_RATE1_SYS_RATE_BF_DEF (0x00000000)

///< RX Antenna Rate.
#define FB_SYS_LOCAL_SYS_RATE1_ANT_RATE_BF_OFF ( 8)
#define FB_SYS_LOCAL_SYS_RATE1_ANT_RATE_BF_WID ( 3)
#define FB_SYS_LOCAL_SYS_RATE1_ANT_RATE_BF_MSK (0x00000700)
#define FB_SYS_LOCAL_SYS_RATE1_ANT_RATE_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_SWG_MUX register description at address offset 0x48
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/SWG_MUX
  * MUX controls for SWG BFNs and BFN outputs
  */

typedef union {
  struct {
    uint32_t SWG1_BFN_MUX : 1;
    ///< SWG 1 (local DMOD ch1) BFN source: 0: SWG 1 is triggered by source
    ///< selected in swg_en_ctl_1 field 1: SWG 1 is triggered by source selected
    ///< in swg_en_ctl_0 field (simultaneous with SWG 0)
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t SWG5_BFN_MUX : 1;
    ///< SWG 5 (second TX SWG) BFN source: 0: SWG 5 is triggered by BFN event
    ///< 1: SWG 5 is triggered by BFN event 2 (simultaneous with SWG 3)
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t SWG4_BFN_MUX : 1;
    ///< SWG 4 (second RX SWG) BFN source: 0: SWG 4 is triggered by source
    ///< selected in swg_en_ctl_2 field 1: SWG 4 is triggered by source selected
    ///< in swg_en_ctl_4 field (simultaneous with SWG 2)
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t SWG1_OUT_MUX : 1;
    ///< local DMOD ch1 SWG source: 0: DMOD ch1 recieves the output of SWG
    ///< 1 1: DMOD ch1 recieves the output of SWG 0 (SWG 1 unused)
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t SWG5_OUT_MUX : 1;
    ///< TX SWG source for quad 1: 0: Quad 1 recieves the output of SWG 5 for
    ///< its TX SWG. 1: Quad 1 recieves the output of SWG 3 for its TX SWG.
    ///< (SWG 5 unused).
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t SWG4_OUT_MUX : 1;
    ///< RX SWG source for quad 1: 0: Quad 1 recieves the output of SWG 4 for
    ///< its RX SWG. 1: Quad 1 recieves the output of SWG 2 for its RX SWG.
    ///< (SWG 4 unused).
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t SWG_EN_CTL_0 : 1;
    ///< Selects the SWG enable source 0 (for SWG used by local FB path DMOD
    ///< ch 0).  DMOD Ch1 may also use this source depending on the swg1_bfn_mux
    ///< field setting. 0: SWG enable is controlled by BFN 0 1: SWG enable
    ///< is controlled by external signal from ANT block
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t SWG_EN_CTL_1 : 1;
    ///< Selects the SWG enable source 1 (for SWG used by local FB path DMOD
    ///< ch 1) 0: SWG enable is controlled by BFN 1 1: SWG enable is controlled
    ///< by external signal from ANT block
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t SWG_EN_CTL_2 : 1;
    ///< Selects the SWG enable source 0 (for SWG used by RX quad 0).  RX quad
    ///< 1 may also use this source depending on the swg4_bfn_mux field setting.
    ///< 0: SWG enable is controlled by BFN 2 1: SWG enable is controlled by
    ///< external signal from ANT block
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t SWG_EN_CTL_3 : 1;
    ///< Selects the SWG enable source 0 (for SWG used by TX quad 0).  TX quad
    ///< 1 may also use this source depending on the swg5_bfn_mux field setting.
    ///< 0: SWG enable is controlled by BFN 3 1: SWG enable is controlled by
    ///< external signal from MEM_CAP block
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t SWG_EN_CTL_4 : 1;
    ///< Selects the SWG enable source 1 (for SWG used by RX quad 1) 0: SWG
    ///< enable is controlled by BFN 19 1: SWG enable is controlled by external
    ///< signal from ANT block
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t SWG_EN_CTL_5 : 1;
    ///< Selects the SWG enable source 1 (for SWG used by TX quad 1) 0: SWG
    ///< enable is controlled by BFN 20 1: SWG enable is controlled by external
    ///< signal from MEM_CAP block
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t  : 19;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
  } ;
  uint32_t value;
} fb_sys_local_swg_mux_reg_t;

#define FB_SYS_LOCAL_SWG_MUX_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_SWG_MUX_RD_MASK (0x00001ff7U)
#define FB_SYS_LOCAL_SWG_MUX_WR_MASK (0x00001ff7U)


///< SWG 1 (local DMOD ch1) BFN source: 0: SWG 1 is triggered by source
///< selected in swg_en_ctl_1 field 1: SWG 1 is triggered by source selected
///< in swg_en_ctl_0 field (simultaneous with SWG 0)
#define FB_SYS_LOCAL_SWG_MUX_SWG1_BFN_MUX_BF_OFF ( 0)
#define FB_SYS_LOCAL_SWG_MUX_SWG1_BFN_MUX_BF_WID ( 1)
#define FB_SYS_LOCAL_SWG_MUX_SWG1_BFN_MUX_BF_MSK (0x00000001)
#define FB_SYS_LOCAL_SWG_MUX_SWG1_BFN_MUX_BF_DEF (0x00000000)

///< SWG 5 (second TX SWG) BFN source: 0: SWG 5 is triggered by BFN event
///< 1: SWG 5 is triggered by BFN event 2 (simultaneous with SWG 3)
#define FB_SYS_LOCAL_SWG_MUX_SWG5_BFN_MUX_BF_OFF ( 1)
#define FB_SYS_LOCAL_SWG_MUX_SWG5_BFN_MUX_BF_WID ( 1)
#define FB_SYS_LOCAL_SWG_MUX_SWG5_BFN_MUX_BF_MSK (0x00000002)
#define FB_SYS_LOCAL_SWG_MUX_SWG5_BFN_MUX_BF_DEF (0x00000000)

///< SWG 4 (second RX SWG) BFN source: 0: SWG 4 is triggered by source
///< selected in swg_en_ctl_2 field 1: SWG 4 is triggered by source selected
///< in swg_en_ctl_4 field (simultaneous with SWG 2)
#define FB_SYS_LOCAL_SWG_MUX_SWG4_BFN_MUX_BF_OFF ( 2)
#define FB_SYS_LOCAL_SWG_MUX_SWG4_BFN_MUX_BF_WID ( 1)
#define FB_SYS_LOCAL_SWG_MUX_SWG4_BFN_MUX_BF_MSK (0x00000004)
#define FB_SYS_LOCAL_SWG_MUX_SWG4_BFN_MUX_BF_DEF (0x00000000)

///< local DMOD ch1 SWG source: 0: DMOD ch1 recieves the output of SWG
///< 1 1: DMOD ch1 recieves the output of SWG 0 (SWG 1 unused)
#define FB_SYS_LOCAL_SWG_MUX_SWG1_OUT_MUX_BF_OFF ( 4)
#define FB_SYS_LOCAL_SWG_MUX_SWG1_OUT_MUX_BF_WID ( 1)
#define FB_SYS_LOCAL_SWG_MUX_SWG1_OUT_MUX_BF_MSK (0x00000010)
#define FB_SYS_LOCAL_SWG_MUX_SWG1_OUT_MUX_BF_DEF (0x00000000)

///< TX SWG source for quad 1: 0: Quad 1 recieves the output of SWG 5 for
///< its TX SWG. 1: Quad 1 recieves the output of SWG 3 for its TX SWG.
///< (SWG 5 unused).
#define FB_SYS_LOCAL_SWG_MUX_SWG5_OUT_MUX_BF_OFF ( 5)
#define FB_SYS_LOCAL_SWG_MUX_SWG5_OUT_MUX_BF_WID ( 1)
#define FB_SYS_LOCAL_SWG_MUX_SWG5_OUT_MUX_BF_MSK (0x00000020)
#define FB_SYS_LOCAL_SWG_MUX_SWG5_OUT_MUX_BF_DEF (0x00000000)

///< RX SWG source for quad 1: 0: Quad 1 recieves the output of SWG 4 for
///< its RX SWG. 1: Quad 1 recieves the output of SWG 2 for its RX SWG.
///< (SWG 4 unused).
#define FB_SYS_LOCAL_SWG_MUX_SWG4_OUT_MUX_BF_OFF ( 6)
#define FB_SYS_LOCAL_SWG_MUX_SWG4_OUT_MUX_BF_WID ( 1)
#define FB_SYS_LOCAL_SWG_MUX_SWG4_OUT_MUX_BF_MSK (0x00000040)
#define FB_SYS_LOCAL_SWG_MUX_SWG4_OUT_MUX_BF_DEF (0x00000000)

///< Selects the SWG enable source 0 (for SWG used by local FB path DMOD
///< ch 0).  DMOD Ch1 may also use this source depending on the swg1_bfn_mux
///< field setting. 0: SWG enable is controlled by BFN 0 1: SWG enable
///< is controlled by external signal from ANT block
#define FB_SYS_LOCAL_SWG_MUX_SWG_EN_CTL_0_BF_OFF ( 7)
#define FB_SYS_LOCAL_SWG_MUX_SWG_EN_CTL_0_BF_WID ( 1)
#define FB_SYS_LOCAL_SWG_MUX_SWG_EN_CTL_0_BF_MSK (0x00000080)
#define FB_SYS_LOCAL_SWG_MUX_SWG_EN_CTL_0_BF_DEF (0x00000000)

///< Selects the SWG enable source 1 (for SWG used by local FB path DMOD
///< ch 1) 0: SWG enable is controlled by BFN 1 1: SWG enable is controlled
///< by external signal from ANT block
#define FB_SYS_LOCAL_SWG_MUX_SWG_EN_CTL_1_BF_OFF ( 8)
#define FB_SYS_LOCAL_SWG_MUX_SWG_EN_CTL_1_BF_WID ( 1)
#define FB_SYS_LOCAL_SWG_MUX_SWG_EN_CTL_1_BF_MSK (0x00000100)
#define FB_SYS_LOCAL_SWG_MUX_SWG_EN_CTL_1_BF_DEF (0x00000000)

///< Selects the SWG enable source 0 (for SWG used by RX quad 0).  RX quad
///< 1 may also use this source depending on the swg4_bfn_mux field setting.
///< 0: SWG enable is controlled by BFN 2 1: SWG enable is controlled by
///< external signal from ANT block
#define FB_SYS_LOCAL_SWG_MUX_SWG_EN_CTL_2_BF_OFF ( 9)
#define FB_SYS_LOCAL_SWG_MUX_SWG_EN_CTL_2_BF_WID ( 1)
#define FB_SYS_LOCAL_SWG_MUX_SWG_EN_CTL_2_BF_MSK (0x00000200)
#define FB_SYS_LOCAL_SWG_MUX_SWG_EN_CTL_2_BF_DEF (0x00000000)

///< Selects the SWG enable source 0 (for SWG used by TX quad 0).  TX quad
///< 1 may also use this source depending on the swg5_bfn_mux field setting.
///< 0: SWG enable is controlled by BFN 3 1: SWG enable is controlled by
///< external signal from MEM_CAP block
#define FB_SYS_LOCAL_SWG_MUX_SWG_EN_CTL_3_BF_OFF (10)
#define FB_SYS_LOCAL_SWG_MUX_SWG_EN_CTL_3_BF_WID ( 1)
#define FB_SYS_LOCAL_SWG_MUX_SWG_EN_CTL_3_BF_MSK (0x00000400)
#define FB_SYS_LOCAL_SWG_MUX_SWG_EN_CTL_3_BF_DEF (0x00000000)

///< Selects the SWG enable source 1 (for SWG used by RX quad 1) 0: SWG
///< enable is controlled by BFN 19 1: SWG enable is controlled by external
///< signal from ANT block
#define FB_SYS_LOCAL_SWG_MUX_SWG_EN_CTL_4_BF_OFF (11)
#define FB_SYS_LOCAL_SWG_MUX_SWG_EN_CTL_4_BF_WID ( 1)
#define FB_SYS_LOCAL_SWG_MUX_SWG_EN_CTL_4_BF_MSK (0x00000800)
#define FB_SYS_LOCAL_SWG_MUX_SWG_EN_CTL_4_BF_DEF (0x00000000)

///< Selects the SWG enable source 1 (for SWG used by TX quad 1) 0: SWG
///< enable is controlled by BFN 20 1: SWG enable is controlled by external
///< signal from MEM_CAP block
#define FB_SYS_LOCAL_SWG_MUX_SWG_EN_CTL_5_BF_OFF (12)
#define FB_SYS_LOCAL_SWG_MUX_SWG_EN_CTL_5_BF_WID ( 1)
#define FB_SYS_LOCAL_SWG_MUX_SWG_EN_CTL_5_BF_MSK (0x00001000)
#define FB_SYS_LOCAL_SWG_MUX_SWG_EN_CTL_5_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_SWG_TX_RISE_CH0 register description at address offset 0x4c
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/SWG_TX_RISE_CH0
  * TX SWG enable rise delay
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 18;
    ///< Number of clock cycles after the rising transition of tx SWG enable,
    ///< from MEM_CAP,to set the SWG channel's control to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of tx SWG enable. If RISE_VALUE
    ///< = FALL_VALUE then the event is set to that value immediately and the
    ///< DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of tx SWG enable. If RISE_VALUE
    ///< = FALL_VALUE then the event is set to that value immediately and the
    ///< DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} fb_sys_local_swg_tx_rise_ch0_reg_t;

#define FB_SYS_LOCAL_SWG_TX_RISE_CH0_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_SWG_TX_RISE_CH0_RD_MASK (0xc003ffffU)
#define FB_SYS_LOCAL_SWG_TX_RISE_CH0_WR_MASK (0xc003ffffU)


///< Number of clock cycles after the rising transition of tx SWG enable,
///< from MEM_CAP,to set the SWG channel's control to RISE_VALUE.
#define FB_SYS_LOCAL_SWG_TX_RISE_CH0_RISE_DELAY_BF_OFF ( 0)
#define FB_SYS_LOCAL_SWG_TX_RISE_CH0_RISE_DELAY_BF_WID (18)
#define FB_SYS_LOCAL_SWG_TX_RISE_CH0_RISE_DELAY_BF_MSK (0x0003FFFF)
#define FB_SYS_LOCAL_SWG_TX_RISE_CH0_RISE_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of tx SWG enable. If RISE_VALUE
///< = FALL_VALUE then the event is set to that value immediately and the
///< DELAY fields are ignored.
#define FB_SYS_LOCAL_SWG_TX_RISE_CH0_RISE_VAL_BF_OFF (30)
#define FB_SYS_LOCAL_SWG_TX_RISE_CH0_RISE_VAL_BF_WID ( 1)
#define FB_SYS_LOCAL_SWG_TX_RISE_CH0_RISE_VAL_BF_MSK (0x40000000)
#define FB_SYS_LOCAL_SWG_TX_RISE_CH0_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of tx SWG enable. If RISE_VALUE
///< = FALL_VALUE then the event is set to that value immediately and the
///< DELAY fields are ignored.
#define FB_SYS_LOCAL_SWG_TX_RISE_CH0_FALL_VAL_BF_OFF (31)
#define FB_SYS_LOCAL_SWG_TX_RISE_CH0_FALL_VAL_BF_WID ( 1)
#define FB_SYS_LOCAL_SWG_TX_RISE_CH0_FALL_VAL_BF_MSK (0x80000000)
#define FB_SYS_LOCAL_SWG_TX_RISE_CH0_FALL_VAL_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_SWG_TX_FALL_CH0 register description at address offset 0x50
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/SWG_TX_FALL_CH0
  * TX SWG enable fall delay
  */

typedef union {
  struct {
    uint32_t FALL_DELAY : 18;
    ///< Number of clock cycles after the falling transition of tx SWG enable,
    ///< from MEM_CAP,to set the SWG channel's control to FALL_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} fb_sys_local_swg_tx_fall_ch0_reg_t;

#define FB_SYS_LOCAL_SWG_TX_FALL_CH0_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_SWG_TX_FALL_CH0_RD_MASK (0x0003ffffU)
#define FB_SYS_LOCAL_SWG_TX_FALL_CH0_WR_MASK (0x0003ffffU)


///< Number of clock cycles after the falling transition of tx SWG enable,
///< from MEM_CAP,to set the SWG channel's control to FALL_VALUE.
#define FB_SYS_LOCAL_SWG_TX_FALL_CH0_FALL_DELAY_BF_OFF ( 0)
#define FB_SYS_LOCAL_SWG_TX_FALL_CH0_FALL_DELAY_BF_WID (18)
#define FB_SYS_LOCAL_SWG_TX_FALL_CH0_FALL_DELAY_BF_MSK (0x0003FFFF)
#define FB_SYS_LOCAL_SWG_TX_FALL_CH0_FALL_DELAY_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_SWG_TX_RISE_CH1 register description at address offset 0x54
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/SWG_TX_RISE_CH1
  * TX SWG enable rise delay
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 18;
    ///< Number of clock cycles after the rising transition of tx SWG enable,
    ///< from MEM_CAP,to set the SWG channel's control to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of tx SWG enable. If RISE_VALUE
    ///< = FALL_VALUE then the event is set to that value immediately and the
    ///< DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of tx SWG enable. If RISE_VALUE
    ///< = FALL_VALUE then the event is set to that value immediately and the
    ///< DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} fb_sys_local_swg_tx_rise_ch1_reg_t;

#define FB_SYS_LOCAL_SWG_TX_RISE_CH1_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_SWG_TX_RISE_CH1_RD_MASK (0xc003ffffU)
#define FB_SYS_LOCAL_SWG_TX_RISE_CH1_WR_MASK (0xc003ffffU)


///< Number of clock cycles after the rising transition of tx SWG enable,
///< from MEM_CAP,to set the SWG channel's control to RISE_VALUE.
#define FB_SYS_LOCAL_SWG_TX_RISE_CH1_RISE_DELAY_BF_OFF ( 0)
#define FB_SYS_LOCAL_SWG_TX_RISE_CH1_RISE_DELAY_BF_WID (18)
#define FB_SYS_LOCAL_SWG_TX_RISE_CH1_RISE_DELAY_BF_MSK (0x0003FFFF)
#define FB_SYS_LOCAL_SWG_TX_RISE_CH1_RISE_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of tx SWG enable. If RISE_VALUE
///< = FALL_VALUE then the event is set to that value immediately and the
///< DELAY fields are ignored.
#define FB_SYS_LOCAL_SWG_TX_RISE_CH1_RISE_VAL_BF_OFF (30)
#define FB_SYS_LOCAL_SWG_TX_RISE_CH1_RISE_VAL_BF_WID ( 1)
#define FB_SYS_LOCAL_SWG_TX_RISE_CH1_RISE_VAL_BF_MSK (0x40000000)
#define FB_SYS_LOCAL_SWG_TX_RISE_CH1_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of tx SWG enable. If RISE_VALUE
///< = FALL_VALUE then the event is set to that value immediately and the
///< DELAY fields are ignored.
#define FB_SYS_LOCAL_SWG_TX_RISE_CH1_FALL_VAL_BF_OFF (31)
#define FB_SYS_LOCAL_SWG_TX_RISE_CH1_FALL_VAL_BF_WID ( 1)
#define FB_SYS_LOCAL_SWG_TX_RISE_CH1_FALL_VAL_BF_MSK (0x80000000)
#define FB_SYS_LOCAL_SWG_TX_RISE_CH1_FALL_VAL_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_SWG_TX_FALL_CH1 register description at address offset 0x58
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/SWG_TX_FALL_CH1
  * TX SWG enable fall delay
  */

typedef union {
  struct {
    uint32_t FALL_DELAY : 18;
    ///< Number of clock cycles after the falling transition of tx SWG enable,
    ///< from MEM_CAP,to set the SWG channel's control to FALL_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} fb_sys_local_swg_tx_fall_ch1_reg_t;

#define FB_SYS_LOCAL_SWG_TX_FALL_CH1_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_SWG_TX_FALL_CH1_RD_MASK (0x0003ffffU)
#define FB_SYS_LOCAL_SWG_TX_FALL_CH1_WR_MASK (0x0003ffffU)


///< Number of clock cycles after the falling transition of tx SWG enable,
///< from MEM_CAP,to set the SWG channel's control to FALL_VALUE.
#define FB_SYS_LOCAL_SWG_TX_FALL_CH1_FALL_DELAY_BF_OFF ( 0)
#define FB_SYS_LOCAL_SWG_TX_FALL_CH1_FALL_DELAY_BF_WID (18)
#define FB_SYS_LOCAL_SWG_TX_FALL_CH1_FALL_DELAY_BF_MSK (0x0003FFFF)
#define FB_SYS_LOCAL_SWG_TX_FALL_CH1_FALL_DELAY_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_RXG_MUX register description at address offset 0x5c
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/RXG_MUX
  * RXG mux control for 2 capture channels
  */

typedef union {
  struct {
    uint32_t RXG_MUX0 : 2;
    ///< Capture path mux control  0: Select data from RXG 0 1: Select data
    ///< from RXG 1 2: Select incoming data (pass-through from TRX_ANT) 3:
    ///< Select incoming data (pass-through from TRX_ANT)
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
    uint32_t RXG_MUX1 : 2;
    ///< Capture path mux control  0: Select data from RXG 0 1: Select data
    ///< from RXG 1 2: Select incoming data (pass-through from TRX_ANT) 3:
    ///< Select incoming data (pass-through from TRX_ANT)
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t DMOD_TMUX0 : 1;
    ///< Capture path mux control  0: Select incoming data (pass-through from
    ///< TRX_ANT) 1: Select data from DMOD Ch 0
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t DMOD_TMUX1 : 1;
    ///< Capture path mux control  0: Select incoming data (pass-through from
    ///< TRX_ANT) 1: Select data from DMOD Ch 1
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} fb_sys_local_rxg_mux_reg_t;

#define FB_SYS_LOCAL_RXG_MUX_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_RXG_MUX_RD_MASK (0x00000333U)
#define FB_SYS_LOCAL_RXG_MUX_WR_MASK (0x00000333U)


///< Capture path mux control  0: Select data from RXG 0 1: Select data
///< from RXG 1 2: Select incoming data (pass-through from TRX_ANT) 3:
///< Select incoming data (pass-through from TRX_ANT)
#define FB_SYS_LOCAL_RXG_MUX_RXG_MUX0_BF_OFF ( 0)
#define FB_SYS_LOCAL_RXG_MUX_RXG_MUX0_BF_WID ( 2)
#define FB_SYS_LOCAL_RXG_MUX_RXG_MUX0_BF_MSK (0x00000003)
#define FB_SYS_LOCAL_RXG_MUX_RXG_MUX0_BF_DEF (0x00000000)

///< Capture path mux control  0: Select data from RXG 0 1: Select data
///< from RXG 1 2: Select incoming data (pass-through from TRX_ANT) 3:
///< Select incoming data (pass-through from TRX_ANT)
#define FB_SYS_LOCAL_RXG_MUX_RXG_MUX1_BF_OFF ( 4)
#define FB_SYS_LOCAL_RXG_MUX_RXG_MUX1_BF_WID ( 2)
#define FB_SYS_LOCAL_RXG_MUX_RXG_MUX1_BF_MSK (0x00000030)
#define FB_SYS_LOCAL_RXG_MUX_RXG_MUX1_BF_DEF (0x00000000)

///< Capture path mux control  0: Select incoming data (pass-through from
///< TRX_ANT) 1: Select data from DMOD Ch 0
#define FB_SYS_LOCAL_RXG_MUX_DMOD_TMUX0_BF_OFF ( 8)
#define FB_SYS_LOCAL_RXG_MUX_DMOD_TMUX0_BF_WID ( 1)
#define FB_SYS_LOCAL_RXG_MUX_DMOD_TMUX0_BF_MSK (0x00000100)
#define FB_SYS_LOCAL_RXG_MUX_DMOD_TMUX0_BF_DEF (0x00000000)

///< Capture path mux control  0: Select incoming data (pass-through from
///< TRX_ANT) 1: Select data from DMOD Ch 1
#define FB_SYS_LOCAL_RXG_MUX_DMOD_TMUX1_BF_OFF ( 9)
#define FB_SYS_LOCAL_RXG_MUX_DMOD_TMUX1_BF_WID ( 1)
#define FB_SYS_LOCAL_RXG_MUX_DMOD_TMUX1_BF_MSK (0x00000200)
#define FB_SYS_LOCAL_RXG_MUX_DMOD_TMUX1_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_CAP_CFG_CH0_ANT0 register description at address offset 0x60
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/CAP_CFG_CH0_ANT0
  * Capture Configuration
  */

typedef union {
  struct {
    uint32_t SAMPLE_CNT : 15;
    ///< Sample set size.  Number of samples (x8) of the associated antenna
    ///< to allow after the associated BFN event triggers 0=1(8samples), 0x7fff=32k(256ksamples)
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t ENABLE : 1;
    ///< Active high enable for sample capture on this antenna.  Cleared on
    ///< assertion of the associated dp_init bit.
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} fb_sys_local_cap_cfg_ch0_ant0_reg_t;

#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT0_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT0_RD_MASK (0x00017fffU)
#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT0_WR_MASK (0x00017fffU)


///< Sample set size.  Number of samples (x8) of the associated antenna
///< to allow after the associated BFN event triggers 0=1(8samples), 0x7fff=32k(256ksamples)
#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT0_SAMPLE_CNT_BF_OFF ( 0)
#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT0_SAMPLE_CNT_BF_WID (15)
#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT0_SAMPLE_CNT_BF_MSK (0x00007FFF)
#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT0_SAMPLE_CNT_BF_DEF (0x00000000)

///< Active high enable for sample capture on this antenna.  Cleared on
///< assertion of the associated dp_init bit.
#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT0_EN_BF_OFF (16)
#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT0_EN_BF_WID ( 1)
#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT0_EN_BF_MSK (0x00010000)
#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT0_EN_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_CAP_CFG_CH0_ANT1 register description at address offset 0x64
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/CAP_CFG_CH0_ANT1
  * Capture Configuration
  */

typedef union {
  struct {
    uint32_t SAMPLE_CNT : 15;
    ///< Sample set size.  Number of samples (x8) of the associated antenna
    ///< to allow after the associated BFN event triggers 0=1(8samples), 0x7fff=32k(256ksamples)
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t ENABLE : 1;
    ///< Active high enable for sample capture on this antenna.  Cleared on
    ///< assertion of the associated dp_init bit.
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} fb_sys_local_cap_cfg_ch0_ant1_reg_t;

#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT1_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT1_RD_MASK (0x00017fffU)
#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT1_WR_MASK (0x00017fffU)


///< Sample set size.  Number of samples (x8) of the associated antenna
///< to allow after the associated BFN event triggers 0=1(8samples), 0x7fff=32k(256ksamples)
#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT1_SAMPLE_CNT_BF_OFF ( 0)
#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT1_SAMPLE_CNT_BF_WID (15)
#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT1_SAMPLE_CNT_BF_MSK (0x00007FFF)
#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT1_SAMPLE_CNT_BF_DEF (0x00000000)

///< Active high enable for sample capture on this antenna.  Cleared on
///< assertion of the associated dp_init bit.
#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT1_EN_BF_OFF (16)
#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT1_EN_BF_WID ( 1)
#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT1_EN_BF_MSK (0x00010000)
#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT1_EN_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_CAP_CFG_CH0_ANT2 register description at address offset 0x68
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/CAP_CFG_CH0_ANT2
  * Capture Configuration
  */

typedef union {
  struct {
    uint32_t SAMPLE_CNT : 15;
    ///< Sample set size.  Number of samples (x8) of the associated antenna
    ///< to allow after the associated BFN event triggers 0=1(8samples), 0x7fff=32k(256ksamples)
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t ENABLE : 1;
    ///< Active high enable for sample capture on this antenna.  Cleared on
    ///< assertion of the associated dp_init bit.
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} fb_sys_local_cap_cfg_ch0_ant2_reg_t;

#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT2_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT2_RD_MASK (0x00017fffU)
#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT2_WR_MASK (0x00017fffU)


///< Sample set size.  Number of samples (x8) of the associated antenna
///< to allow after the associated BFN event triggers 0=1(8samples), 0x7fff=32k(256ksamples)
#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT2_SAMPLE_CNT_BF_OFF ( 0)
#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT2_SAMPLE_CNT_BF_WID (15)
#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT2_SAMPLE_CNT_BF_MSK (0x00007FFF)
#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT2_SAMPLE_CNT_BF_DEF (0x00000000)

///< Active high enable for sample capture on this antenna.  Cleared on
///< assertion of the associated dp_init bit.
#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT2_EN_BF_OFF (16)
#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT2_EN_BF_WID ( 1)
#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT2_EN_BF_MSK (0x00010000)
#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT2_EN_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_CAP_CFG_CH0_ANT3 register description at address offset 0x6c
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/CAP_CFG_CH0_ANT3
  * Capture Configuration
  */

typedef union {
  struct {
    uint32_t SAMPLE_CNT : 15;
    ///< Sample set size.  Number of samples (x8) of the associated antenna
    ///< to allow after the associated BFN event triggers 0=1(8samples), 0x7fff=32k(256ksamples)
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t ENABLE : 1;
    ///< Active high enable for sample capture on this antenna.  Cleared on
    ///< assertion of the associated dp_init bit.
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} fb_sys_local_cap_cfg_ch0_ant3_reg_t;

#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT3_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT3_RD_MASK (0x00017fffU)
#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT3_WR_MASK (0x00017fffU)


///< Sample set size.  Number of samples (x8) of the associated antenna
///< to allow after the associated BFN event triggers 0=1(8samples), 0x7fff=32k(256ksamples)
#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT3_SAMPLE_CNT_BF_OFF ( 0)
#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT3_SAMPLE_CNT_BF_WID (15)
#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT3_SAMPLE_CNT_BF_MSK (0x00007FFF)
#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT3_SAMPLE_CNT_BF_DEF (0x00000000)

///< Active high enable for sample capture on this antenna.  Cleared on
///< assertion of the associated dp_init bit.
#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT3_EN_BF_OFF (16)
#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT3_EN_BF_WID ( 1)
#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT3_EN_BF_MSK (0x00010000)
#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT3_EN_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_CAP_CFG_CH1_ANT0 register description at address offset 0x70
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/CAP_CFG_CH1_ANT0
  * Capture Configuration
  */

typedef union {
  struct {
    uint32_t SAMPLE_CNT : 15;
    ///< Sample set size.  Number of samples (x8) of the associated antenna
    ///< to allow after the associated BFN event triggers 0=1(8samples), 0x7fff=32k(256ksamples)
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t ENABLE : 1;
    ///< Active high enable for sample capture on this antenna.  Cleared on
    ///< assertion of the associated dp_init bit.
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} fb_sys_local_cap_cfg_ch1_ant0_reg_t;

#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT0_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT0_RD_MASK (0x00017fffU)
#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT0_WR_MASK (0x00017fffU)


///< Sample set size.  Number of samples (x8) of the associated antenna
///< to allow after the associated BFN event triggers 0=1(8samples), 0x7fff=32k(256ksamples)
#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT0_SAMPLE_CNT_BF_OFF ( 0)
#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT0_SAMPLE_CNT_BF_WID (15)
#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT0_SAMPLE_CNT_BF_MSK (0x00007FFF)
#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT0_SAMPLE_CNT_BF_DEF (0x00000000)

///< Active high enable for sample capture on this antenna.  Cleared on
///< assertion of the associated dp_init bit.
#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT0_EN_BF_OFF (16)
#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT0_EN_BF_WID ( 1)
#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT0_EN_BF_MSK (0x00010000)
#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT0_EN_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_CAP_CFG_CH1_ANT1 register description at address offset 0x74
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/CAP_CFG_CH1_ANT1
  * Capture Configuration
  */

typedef union {
  struct {
    uint32_t SAMPLE_CNT : 15;
    ///< Sample set size.  Number of samples (x8) of the associated antenna
    ///< to allow after the associated BFN event triggers 0=1(8samples), 0x7fff=32k(256ksamples)
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t ENABLE : 1;
    ///< Active high enable for sample capture on this antenna.  Cleared on
    ///< assertion of the associated dp_init bit.
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} fb_sys_local_cap_cfg_ch1_ant1_reg_t;

#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT1_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT1_RD_MASK (0x00017fffU)
#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT1_WR_MASK (0x00017fffU)


///< Sample set size.  Number of samples (x8) of the associated antenna
///< to allow after the associated BFN event triggers 0=1(8samples), 0x7fff=32k(256ksamples)
#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT1_SAMPLE_CNT_BF_OFF ( 0)
#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT1_SAMPLE_CNT_BF_WID (15)
#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT1_SAMPLE_CNT_BF_MSK (0x00007FFF)
#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT1_SAMPLE_CNT_BF_DEF (0x00000000)

///< Active high enable for sample capture on this antenna.  Cleared on
///< assertion of the associated dp_init bit.
#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT1_EN_BF_OFF (16)
#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT1_EN_BF_WID ( 1)
#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT1_EN_BF_MSK (0x00010000)
#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT1_EN_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_CAP_CFG_CH1_ANT2 register description at address offset 0x78
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/CAP_CFG_CH1_ANT2
  * Capture Configuration
  */

typedef union {
  struct {
    uint32_t SAMPLE_CNT : 15;
    ///< Sample set size.  Number of samples (x8) of the associated antenna
    ///< to allow after the associated BFN event triggers 0=1(8samples), 0x7fff=32k(256ksamples)
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t ENABLE : 1;
    ///< Active high enable for sample capture on this antenna.  Cleared on
    ///< assertion of the associated dp_init bit.
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} fb_sys_local_cap_cfg_ch1_ant2_reg_t;

#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT2_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT2_RD_MASK (0x00017fffU)
#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT2_WR_MASK (0x00017fffU)


///< Sample set size.  Number of samples (x8) of the associated antenna
///< to allow after the associated BFN event triggers 0=1(8samples), 0x7fff=32k(256ksamples)
#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT2_SAMPLE_CNT_BF_OFF ( 0)
#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT2_SAMPLE_CNT_BF_WID (15)
#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT2_SAMPLE_CNT_BF_MSK (0x00007FFF)
#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT2_SAMPLE_CNT_BF_DEF (0x00000000)

///< Active high enable for sample capture on this antenna.  Cleared on
///< assertion of the associated dp_init bit.
#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT2_EN_BF_OFF (16)
#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT2_EN_BF_WID ( 1)
#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT2_EN_BF_MSK (0x00010000)
#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT2_EN_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_CAP_CFG_CH1_ANT3 register description at address offset 0x7c
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/CAP_CFG_CH1_ANT3
  * Capture Configuration
  */

typedef union {
  struct {
    uint32_t SAMPLE_CNT : 15;
    ///< Sample set size.  Number of samples (x8) of the associated antenna
    ///< to allow after the associated BFN event triggers 0=1(8samples), 0x7fff=32k(256ksamples)
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t ENABLE : 1;
    ///< Active high enable for sample capture on this antenna.  Cleared on
    ///< assertion of the associated dp_init bit.
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} fb_sys_local_cap_cfg_ch1_ant3_reg_t;

#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT3_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT3_RD_MASK (0x00017fffU)
#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT3_WR_MASK (0x00017fffU)


///< Sample set size.  Number of samples (x8) of the associated antenna
///< to allow after the associated BFN event triggers 0=1(8samples), 0x7fff=32k(256ksamples)
#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT3_SAMPLE_CNT_BF_OFF ( 0)
#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT3_SAMPLE_CNT_BF_WID (15)
#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT3_SAMPLE_CNT_BF_MSK (0x00007FFF)
#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT3_SAMPLE_CNT_BF_DEF (0x00000000)

///< Active high enable for sample capture on this antenna.  Cleared on
///< assertion of the associated dp_init bit.
#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT3_EN_BF_OFF (16)
#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT3_EN_BF_WID ( 1)
#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT3_EN_BF_MSK (0x00010000)
#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT3_EN_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_ONOFF_CFG_CH0 register description at address offset 0x80
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/ONOFF_CFG_CH0
  * Sample set on_off config
  */

typedef union {
  struct {
    uint32_t ON_CNT : 10;
    ///< Number of sample sets to allow before turning off transmission. 0=1
    ///< set, 0x3ff=1k sets
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
    uint32_t OFF_CNT : 10;
    ///< Number of sample sets to block before resuming transmission. 0=1 set,
    ///< 0x3ff=1k sets
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="26" ResetValue="None"
    uint32_t CONTINUOUS_EN : 1;
    ///< Active high enable for continuous mode.  When activated,  All valid
    ///< bits are passed through and lablelled as antenna 0.  BFN events only
    ///< affect the start of this mode.  After the first BFN event, samples
    ///< are continouously transferred.    Pause/Resume is supported in this
    ///< mode but on/off is not.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t ONOFF_EN : 1;
    ///< Active high enable for on/off mode (pause/resume).  When activated
    ///< ON_CNT sample sets will be allowed and then OFF_CNT sample sets will
    ///< be blocked.   This pattern will repeat continuously while enabled.
    ///< When disabled, all sample sets will pass through.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} fb_sys_local_onoff_cfg_ch0_reg_t;

#define FB_SYS_LOCAL_ONOFF_CFG_CH0_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_ONOFF_CFG_CH0_RD_MASK (0xc3ff03ffU)
#define FB_SYS_LOCAL_ONOFF_CFG_CH0_WR_MASK (0xc3ff03ffU)


///< Number of sample sets to allow before turning off transmission. 0=1
///< set, 0x3ff=1k sets
#define FB_SYS_LOCAL_ONOFF_CFG_CH0_ON_CNT_BF_OFF ( 0)
#define FB_SYS_LOCAL_ONOFF_CFG_CH0_ON_CNT_BF_WID (10)
#define FB_SYS_LOCAL_ONOFF_CFG_CH0_ON_CNT_BF_MSK (0x000003FF)
#define FB_SYS_LOCAL_ONOFF_CFG_CH0_ON_CNT_BF_DEF (0x00000000)

///< Number of sample sets to block before resuming transmission. 0=1 set,
///< 0x3ff=1k sets
#define FB_SYS_LOCAL_ONOFF_CFG_CH0_OFF_CNT_BF_OFF (16)
#define FB_SYS_LOCAL_ONOFF_CFG_CH0_OFF_CNT_BF_WID (10)
#define FB_SYS_LOCAL_ONOFF_CFG_CH0_OFF_CNT_BF_MSK (0x03FF0000)
#define FB_SYS_LOCAL_ONOFF_CFG_CH0_OFF_CNT_BF_DEF (0x00000000)

///< Active high enable for continuous mode.  When activated,  All valid
///< bits are passed through and lablelled as antenna 0.  BFN events only
///< affect the start of this mode.  After the first BFN event, samples
///< are continouously transferred.    Pause/Resume is supported in this
///< mode but on/off is not.
#define FB_SYS_LOCAL_ONOFF_CFG_CH0_CONTINUOUS_EN_BF_OFF (30)
#define FB_SYS_LOCAL_ONOFF_CFG_CH0_CONTINUOUS_EN_BF_WID ( 1)
#define FB_SYS_LOCAL_ONOFF_CFG_CH0_CONTINUOUS_EN_BF_MSK (0x40000000)
#define FB_SYS_LOCAL_ONOFF_CFG_CH0_CONTINUOUS_EN_BF_DEF (0x00000000)

///< Active high enable for on/off mode (pause/resume).  When activated
///< ON_CNT sample sets will be allowed and then OFF_CNT sample sets will
///< be blocked.   This pattern will repeat continuously while enabled.
///< When disabled, all sample sets will pass through.
#define FB_SYS_LOCAL_ONOFF_CFG_CH0_ONOFF_EN_BF_OFF (31)
#define FB_SYS_LOCAL_ONOFF_CFG_CH0_ONOFF_EN_BF_WID ( 1)
#define FB_SYS_LOCAL_ONOFF_CFG_CH0_ONOFF_EN_BF_MSK (0x80000000)
#define FB_SYS_LOCAL_ONOFF_CFG_CH0_ONOFF_EN_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_ONOFF_CFG_CH1 register description at address offset 0x84
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/ONOFF_CFG_CH1
  * Sample set on_off config
  */

typedef union {
  struct {
    uint32_t ON_CNT : 10;
    ///< Number of sample sets to allow before turning off transmission. 0=1
    ///< set, 0x3ff=1k sets
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
    uint32_t OFF_CNT : 10;
    ///< Number of sample sets to block before resuming transmission. 0=1 set,
    ///< 0x3ff=1k sets
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="26" ResetValue="None"
    uint32_t CONTINUOUS_EN : 1;
    ///< Active high enable for continuous mode.  When activated,  All valid
    ///< bits are passed through and lablelled as antenna 0.  BFN events only
    ///< affect the start of this mode.  After the first BFN event, samples
    ///< are continouously transferred.    Pause/Resume is supported in this
    ///< mode but on/off is not.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t ONOFF_EN : 1;
    ///< Active high enable for on/off mode (pause/resume).  When activated
    ///< ON_CNT sample sets will be allowed and then OFF_CNT sample sets will
    ///< be blocked.   This pattern will repeat continuously while enabled.
    ///< When disabled, all sample sets will pass through.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} fb_sys_local_onoff_cfg_ch1_reg_t;

#define FB_SYS_LOCAL_ONOFF_CFG_CH1_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_ONOFF_CFG_CH1_RD_MASK (0xc3ff03ffU)
#define FB_SYS_LOCAL_ONOFF_CFG_CH1_WR_MASK (0xc3ff03ffU)


///< Number of sample sets to allow before turning off transmission. 0=1
///< set, 0x3ff=1k sets
#define FB_SYS_LOCAL_ONOFF_CFG_CH1_ON_CNT_BF_OFF ( 0)
#define FB_SYS_LOCAL_ONOFF_CFG_CH1_ON_CNT_BF_WID (10)
#define FB_SYS_LOCAL_ONOFF_CFG_CH1_ON_CNT_BF_MSK (0x000003FF)
#define FB_SYS_LOCAL_ONOFF_CFG_CH1_ON_CNT_BF_DEF (0x00000000)

///< Number of sample sets to block before resuming transmission. 0=1 set,
///< 0x3ff=1k sets
#define FB_SYS_LOCAL_ONOFF_CFG_CH1_OFF_CNT_BF_OFF (16)
#define FB_SYS_LOCAL_ONOFF_CFG_CH1_OFF_CNT_BF_WID (10)
#define FB_SYS_LOCAL_ONOFF_CFG_CH1_OFF_CNT_BF_MSK (0x03FF0000)
#define FB_SYS_LOCAL_ONOFF_CFG_CH1_OFF_CNT_BF_DEF (0x00000000)

///< Active high enable for continuous mode.  When activated,  All valid
///< bits are passed through and lablelled as antenna 0.  BFN events only
///< affect the start of this mode.  After the first BFN event, samples
///< are continouously transferred.    Pause/Resume is supported in this
///< mode but on/off is not.
#define FB_SYS_LOCAL_ONOFF_CFG_CH1_CONTINUOUS_EN_BF_OFF (30)
#define FB_SYS_LOCAL_ONOFF_CFG_CH1_CONTINUOUS_EN_BF_WID ( 1)
#define FB_SYS_LOCAL_ONOFF_CFG_CH1_CONTINUOUS_EN_BF_MSK (0x40000000)
#define FB_SYS_LOCAL_ONOFF_CFG_CH1_CONTINUOUS_EN_BF_DEF (0x00000000)

///< Active high enable for on/off mode (pause/resume).  When activated
///< ON_CNT sample sets will be allowed and then OFF_CNT sample sets will
///< be blocked.   This pattern will repeat continuously while enabled.
///< When disabled, all sample sets will pass through.
#define FB_SYS_LOCAL_ONOFF_CFG_CH1_ONOFF_EN_BF_OFF (31)
#define FB_SYS_LOCAL_ONOFF_CFG_CH1_ONOFF_EN_BF_WID ( 1)
#define FB_SYS_LOCAL_ONOFF_CFG_CH1_ONOFF_EN_BF_MSK (0x80000000)
#define FB_SYS_LOCAL_ONOFF_CFG_CH1_ONOFF_EN_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_CVA_I_DATA_0 register description at address offset 0x90
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/CVA_I_DATA_0
  * CVA I read data
  */

typedef union {
  struct {
    uint32_t ACCUM_DATA : 32;
    ///< CVA Accumulator in phase read data
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fb_sys_local_cva_i_data_0_reg_t;

#define FB_SYS_LOCAL_CVA_I_DATA_0_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_CVA_I_DATA_0_RD_MASK (0xffffffffU)
#define FB_SYS_LOCAL_CVA_I_DATA_0_WR_MASK (0x00000000U)


///< CVA Accumulator in phase read data
#define FB_SYS_LOCAL_CVA_I_DATA_0_ACCUM_DATA_BF_OFF ( 0)
#define FB_SYS_LOCAL_CVA_I_DATA_0_ACCUM_DATA_BF_WID (32)
#define FB_SYS_LOCAL_CVA_I_DATA_0_ACCUM_DATA_BF_MSK (0xFFFFFFFF)
#define FB_SYS_LOCAL_CVA_I_DATA_0_ACCUM_DATA_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_CVA_Q_DATA_0 register description at address offset 0x94
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/CVA_Q_DATA_0
  * CVA Q read data
  */

typedef union {
  struct {
    uint32_t ACCUM_DATA : 32;
    ///< CVA Accumulator quadrature read data
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fb_sys_local_cva_q_data_0_reg_t;

#define FB_SYS_LOCAL_CVA_Q_DATA_0_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_CVA_Q_DATA_0_RD_MASK (0xffffffffU)
#define FB_SYS_LOCAL_CVA_Q_DATA_0_WR_MASK (0x00000000U)


///< CVA Accumulator quadrature read data
#define FB_SYS_LOCAL_CVA_Q_DATA_0_ACCUM_DATA_BF_OFF ( 0)
#define FB_SYS_LOCAL_CVA_Q_DATA_0_ACCUM_DATA_BF_WID (32)
#define FB_SYS_LOCAL_CVA_Q_DATA_0_ACCUM_DATA_BF_MSK (0xFFFFFFFF)
#define FB_SYS_LOCAL_CVA_Q_DATA_0_ACCUM_DATA_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_CVA_I_DATA_1 register description at address offset 0x98
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/CVA_I_DATA_1
  * CVA I read data
  */

typedef union {
  struct {
    uint32_t ACCUM_DATA : 32;
    ///< CVA Accumulator in phase read data
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fb_sys_local_cva_i_data_1_reg_t;

#define FB_SYS_LOCAL_CVA_I_DATA_1_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_CVA_I_DATA_1_RD_MASK (0xffffffffU)
#define FB_SYS_LOCAL_CVA_I_DATA_1_WR_MASK (0x00000000U)


///< CVA Accumulator in phase read data
#define FB_SYS_LOCAL_CVA_I_DATA_1_ACCUM_DATA_BF_OFF ( 0)
#define FB_SYS_LOCAL_CVA_I_DATA_1_ACCUM_DATA_BF_WID (32)
#define FB_SYS_LOCAL_CVA_I_DATA_1_ACCUM_DATA_BF_MSK (0xFFFFFFFF)
#define FB_SYS_LOCAL_CVA_I_DATA_1_ACCUM_DATA_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_CVA_Q_DATA_1 register description at address offset 0x9c
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/CVA_Q_DATA_1
  * CVA Q read data
  */

typedef union {
  struct {
    uint32_t ACCUM_DATA : 32;
    ///< CVA Accumulator quadrature read data
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fb_sys_local_cva_q_data_1_reg_t;

#define FB_SYS_LOCAL_CVA_Q_DATA_1_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_CVA_Q_DATA_1_RD_MASK (0xffffffffU)
#define FB_SYS_LOCAL_CVA_Q_DATA_1_WR_MASK (0x00000000U)


///< CVA Accumulator quadrature read data
#define FB_SYS_LOCAL_CVA_Q_DATA_1_ACCUM_DATA_BF_OFF ( 0)
#define FB_SYS_LOCAL_CVA_Q_DATA_1_ACCUM_DATA_BF_WID (32)
#define FB_SYS_LOCAL_CVA_Q_DATA_1_ACCUM_DATA_BF_MSK (0xFFFFFFFF)
#define FB_SYS_LOCAL_CVA_Q_DATA_1_ACCUM_DATA_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_CVA_CONFIG register description at address offset 0xa0
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/CVA_CONFIG
  * CVA configuration
  */

typedef union {
  struct {
    uint32_t ACCUM_TRIG : 1;
    ///< Writing 1 triggers the CVA to begin accumulation
    ///< AccessType="WO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
    uint32_t ACM_WINDOW : 4;
    ///< Sets the CVA ACM window.  Results in window size of 2^(6+ACM_WINDOW)
    ///< samples
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} fb_sys_local_cva_cfg_reg_t;

#define FB_SYS_LOCAL_CVA_CFG_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_CVA_CFG_RD_MASK (0x000000f0U)
#define FB_SYS_LOCAL_CVA_CFG_WR_MASK (0x000000f1U)


///< Writing 1 triggers the CVA to begin accumulation
#define FB_SYS_LOCAL_CVA_CFG_ACCUM_TRIG_BF_OFF ( 0)
#define FB_SYS_LOCAL_CVA_CFG_ACCUM_TRIG_BF_WID ( 1)
#define FB_SYS_LOCAL_CVA_CFG_ACCUM_TRIG_BF_MSK (0x00000001)
#define FB_SYS_LOCAL_CVA_CFG_ACCUM_TRIG_BF_DEF (0x00000000)

///< Sets the CVA ACM window.  Results in window size of 2^(6+ACM_WINDOW)
///< samples
#define FB_SYS_LOCAL_CVA_CFG_ACM_WND_BF_OFF ( 4)
#define FB_SYS_LOCAL_CVA_CFG_ACM_WND_BF_WID ( 4)
#define FB_SYS_LOCAL_CVA_CFG_ACM_WND_BF_MSK (0x000000F0)
#define FB_SYS_LOCAL_CVA_CFG_ACM_WND_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_FB0_SWG_GATE_RISE register description at address offset 0xb0
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/FB0_SWG_GATE_RISE
  * Quad SWG gating rise delay
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 18;
    ///< Number of clock cycles after the rising transition of the relevant
    ///< fb_en/tx_en or tx_en to set gate control for SWG channel to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of the relevant fb_en/tx_en
    ///< or rx_en. If RISE_VALUE = FALL_VALUE then the event is set to that
    ///< value immediately and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of the relevant fb_en/tx_en
    ///< or rx_en. If RISE_VALUE = FALL_VALUE then the event is set to that
    ///< value immediately and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} fb_sys_local_fb0_swg_gate_rise_reg_t;

#define FB_SYS_LOCAL_FB0_SWG_GATE_RISE_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_FB0_SWG_GATE_RISE_RD_MASK (0xc003ffffU)
#define FB_SYS_LOCAL_FB0_SWG_GATE_RISE_WR_MASK (0xc003ffffU)


///< Number of clock cycles after the rising transition of the relevant
///< fb_en/tx_en or tx_en to set gate control for SWG channel to RISE_VALUE.
#define FB_SYS_LOCAL_FB0_SWG_GATE_RISE_DELAY_BF_OFF ( 0)
#define FB_SYS_LOCAL_FB0_SWG_GATE_RISE_DELAY_BF_WID (18)
#define FB_SYS_LOCAL_FB0_SWG_GATE_RISE_DELAY_BF_MSK (0x0003FFFF)
#define FB_SYS_LOCAL_FB0_SWG_GATE_RISE_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of the relevant fb_en/tx_en
///< or rx_en. If RISE_VALUE = FALL_VALUE then the event is set to that
///< value immediately and the DELAY fields are ignored.
#define FB_SYS_LOCAL_FB0_SWG_GATE_RISE_VAL_BF_OFF (30)
#define FB_SYS_LOCAL_FB0_SWG_GATE_RISE_VAL_BF_WID ( 1)
#define FB_SYS_LOCAL_FB0_SWG_GATE_RISE_VAL_BF_MSK (0x40000000)
#define FB_SYS_LOCAL_FB0_SWG_GATE_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of the relevant fb_en/tx_en
///< or rx_en. If RISE_VALUE = FALL_VALUE then the event is set to that
///< value immediately and the DELAY fields are ignored.
#define FB_SYS_LOCAL_FB0_SWG_GATE_RISE_FALL_VAL_BF_OFF (31)
#define FB_SYS_LOCAL_FB0_SWG_GATE_RISE_FALL_VAL_BF_WID ( 1)
#define FB_SYS_LOCAL_FB0_SWG_GATE_RISE_FALL_VAL_BF_MSK (0x80000000)
#define FB_SYS_LOCAL_FB0_SWG_GATE_RISE_FALL_VAL_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_FB0_SWG_GATE_FALL register description at address offset 0xb4
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/FB0_SWG_GATE_FALL
  * Quad SWG gating fall delay
  */

typedef union {
  struct {
    uint32_t FALL_DELAY : 18;
    ///< Number of clock cycles after the falling transition of of the relevant
    ///< fb_en/tx_en or tx_en to set gate control for the SWG channel to FALL_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} fb_sys_local_fb0_swg_gate_fall_reg_t;

#define FB_SYS_LOCAL_FB0_SWG_GATE_FALL_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_FB0_SWG_GATE_FALL_RD_MASK (0x0003ffffU)
#define FB_SYS_LOCAL_FB0_SWG_GATE_FALL_WR_MASK (0x0003ffffU)


///< Number of clock cycles after the falling transition of of the relevant
///< fb_en/tx_en or tx_en to set gate control for the SWG channel to FALL_VALUE.
#define FB_SYS_LOCAL_FB0_SWG_GATE_FALL_DELAY_BF_OFF ( 0)
#define FB_SYS_LOCAL_FB0_SWG_GATE_FALL_DELAY_BF_WID (18)
#define FB_SYS_LOCAL_FB0_SWG_GATE_FALL_DELAY_BF_MSK (0x0003FFFF)
#define FB_SYS_LOCAL_FB0_SWG_GATE_FALL_DELAY_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_FB1_SWG_GATE_RISE register description at address offset 0xb8
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/FB1_SWG_GATE_RISE
  * Quad SWG gating rise delay
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 18;
    ///< Number of clock cycles after the rising transition of the relevant
    ///< fb_en/tx_en or tx_en to set gate control for SWG channel to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of the relevant fb_en/tx_en
    ///< or rx_en. If RISE_VALUE = FALL_VALUE then the event is set to that
    ///< value immediately and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of the relevant fb_en/tx_en
    ///< or rx_en. If RISE_VALUE = FALL_VALUE then the event is set to that
    ///< value immediately and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} fb_sys_local_fb1_swg_gate_rise_reg_t;

#define FB_SYS_LOCAL_FB1_SWG_GATE_RISE_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_FB1_SWG_GATE_RISE_RD_MASK (0xc003ffffU)
#define FB_SYS_LOCAL_FB1_SWG_GATE_RISE_WR_MASK (0xc003ffffU)


///< Number of clock cycles after the rising transition of the relevant
///< fb_en/tx_en or tx_en to set gate control for SWG channel to RISE_VALUE.
#define FB_SYS_LOCAL_FB1_SWG_GATE_RISE_DELAY_BF_OFF ( 0)
#define FB_SYS_LOCAL_FB1_SWG_GATE_RISE_DELAY_BF_WID (18)
#define FB_SYS_LOCAL_FB1_SWG_GATE_RISE_DELAY_BF_MSK (0x0003FFFF)
#define FB_SYS_LOCAL_FB1_SWG_GATE_RISE_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of the relevant fb_en/tx_en
///< or rx_en. If RISE_VALUE = FALL_VALUE then the event is set to that
///< value immediately and the DELAY fields are ignored.
#define FB_SYS_LOCAL_FB1_SWG_GATE_RISE_VAL_BF_OFF (30)
#define FB_SYS_LOCAL_FB1_SWG_GATE_RISE_VAL_BF_WID ( 1)
#define FB_SYS_LOCAL_FB1_SWG_GATE_RISE_VAL_BF_MSK (0x40000000)
#define FB_SYS_LOCAL_FB1_SWG_GATE_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of the relevant fb_en/tx_en
///< or rx_en. If RISE_VALUE = FALL_VALUE then the event is set to that
///< value immediately and the DELAY fields are ignored.
#define FB_SYS_LOCAL_FB1_SWG_GATE_RISE_FALL_VAL_BF_OFF (31)
#define FB_SYS_LOCAL_FB1_SWG_GATE_RISE_FALL_VAL_BF_WID ( 1)
#define FB_SYS_LOCAL_FB1_SWG_GATE_RISE_FALL_VAL_BF_MSK (0x80000000)
#define FB_SYS_LOCAL_FB1_SWG_GATE_RISE_FALL_VAL_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_FB1_SWG_GATE_FALL register description at address offset 0xbc
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/FB1_SWG_GATE_FALL
  * Quad SWG gating fall delay
  */

typedef union {
  struct {
    uint32_t FALL_DELAY : 18;
    ///< Number of clock cycles after the falling transition of of the relevant
    ///< fb_en/tx_en or tx_en to set gate control for the SWG channel to FALL_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} fb_sys_local_fb1_swg_gate_fall_reg_t;

#define FB_SYS_LOCAL_FB1_SWG_GATE_FALL_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_FB1_SWG_GATE_FALL_RD_MASK (0x0003ffffU)
#define FB_SYS_LOCAL_FB1_SWG_GATE_FALL_WR_MASK (0x0003ffffU)


///< Number of clock cycles after the falling transition of of the relevant
///< fb_en/tx_en or tx_en to set gate control for the SWG channel to FALL_VALUE.
#define FB_SYS_LOCAL_FB1_SWG_GATE_FALL_DELAY_BF_OFF ( 0)
#define FB_SYS_LOCAL_FB1_SWG_GATE_FALL_DELAY_BF_WID (18)
#define FB_SYS_LOCAL_FB1_SWG_GATE_FALL_DELAY_BF_MSK (0x0003FFFF)
#define FB_SYS_LOCAL_FB1_SWG_GATE_FALL_DELAY_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_RX0_SWG_GATE_RISE register description at address offset 0xc0
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/RX0_SWG_GATE_RISE
  * Quad SWG gating rise delay
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 18;
    ///< Number of clock cycles after the rising transition of the relevant
    ///< fb_en/tx_en or tx_en to set gate control for SWG channel to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of the relevant fb_en/tx_en
    ///< or rx_en. If RISE_VALUE = FALL_VALUE then the event is set to that
    ///< value immediately and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of the relevant fb_en/tx_en
    ///< or rx_en. If RISE_VALUE = FALL_VALUE then the event is set to that
    ///< value immediately and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} fb_sys_local_rx0_swg_gate_rise_reg_t;

#define FB_SYS_LOCAL_RX0_SWG_GATE_RISE_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_RX0_SWG_GATE_RISE_RD_MASK (0xc003ffffU)
#define FB_SYS_LOCAL_RX0_SWG_GATE_RISE_WR_MASK (0xc003ffffU)


///< Number of clock cycles after the rising transition of the relevant
///< fb_en/tx_en or tx_en to set gate control for SWG channel to RISE_VALUE.
#define FB_SYS_LOCAL_RX0_SWG_GATE_RISE_DELAY_BF_OFF ( 0)
#define FB_SYS_LOCAL_RX0_SWG_GATE_RISE_DELAY_BF_WID (18)
#define FB_SYS_LOCAL_RX0_SWG_GATE_RISE_DELAY_BF_MSK (0x0003FFFF)
#define FB_SYS_LOCAL_RX0_SWG_GATE_RISE_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of the relevant fb_en/tx_en
///< or rx_en. If RISE_VALUE = FALL_VALUE then the event is set to that
///< value immediately and the DELAY fields are ignored.
#define FB_SYS_LOCAL_RX0_SWG_GATE_RISE_VAL_BF_OFF (30)
#define FB_SYS_LOCAL_RX0_SWG_GATE_RISE_VAL_BF_WID ( 1)
#define FB_SYS_LOCAL_RX0_SWG_GATE_RISE_VAL_BF_MSK (0x40000000)
#define FB_SYS_LOCAL_RX0_SWG_GATE_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of the relevant fb_en/tx_en
///< or rx_en. If RISE_VALUE = FALL_VALUE then the event is set to that
///< value immediately and the DELAY fields are ignored.
#define FB_SYS_LOCAL_RX0_SWG_GATE_RISE_FALL_VAL_BF_OFF (31)
#define FB_SYS_LOCAL_RX0_SWG_GATE_RISE_FALL_VAL_BF_WID ( 1)
#define FB_SYS_LOCAL_RX0_SWG_GATE_RISE_FALL_VAL_BF_MSK (0x80000000)
#define FB_SYS_LOCAL_RX0_SWG_GATE_RISE_FALL_VAL_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_RX0_SWG_GATE_FALL register description at address offset 0xc4
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/RX0_SWG_GATE_FALL
  * Quad SWG gating fall delay
  */

typedef union {
  struct {
    uint32_t FALL_DELAY : 18;
    ///< Number of clock cycles after the falling transition of of the relevant
    ///< fb_en/tx_en or tx_en to set gate control for the SWG channel to FALL_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} fb_sys_local_rx0_swg_gate_fall_reg_t;

#define FB_SYS_LOCAL_RX0_SWG_GATE_FALL_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_RX0_SWG_GATE_FALL_RD_MASK (0x0003ffffU)
#define FB_SYS_LOCAL_RX0_SWG_GATE_FALL_WR_MASK (0x0003ffffU)


///< Number of clock cycles after the falling transition of of the relevant
///< fb_en/tx_en or tx_en to set gate control for the SWG channel to FALL_VALUE.
#define FB_SYS_LOCAL_RX0_SWG_GATE_FALL_DELAY_BF_OFF ( 0)
#define FB_SYS_LOCAL_RX0_SWG_GATE_FALL_DELAY_BF_WID (18)
#define FB_SYS_LOCAL_RX0_SWG_GATE_FALL_DELAY_BF_MSK (0x0003FFFF)
#define FB_SYS_LOCAL_RX0_SWG_GATE_FALL_DELAY_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_RX1_SWG_GATE_RISE register description at address offset 0xc8
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/RX1_SWG_GATE_RISE
  * Quad SWG gating rise delay
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 18;
    ///< Number of clock cycles after the rising transition of the relevant
    ///< fb_en/tx_en or tx_en to set gate control for SWG channel to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of the relevant fb_en/tx_en
    ///< or rx_en. If RISE_VALUE = FALL_VALUE then the event is set to that
    ///< value immediately and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of the relevant fb_en/tx_en
    ///< or rx_en. If RISE_VALUE = FALL_VALUE then the event is set to that
    ///< value immediately and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} fb_sys_local_rx1_swg_gate_rise_reg_t;

#define FB_SYS_LOCAL_RX1_SWG_GATE_RISE_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_RX1_SWG_GATE_RISE_RD_MASK (0xc003ffffU)
#define FB_SYS_LOCAL_RX1_SWG_GATE_RISE_WR_MASK (0xc003ffffU)


///< Number of clock cycles after the rising transition of the relevant
///< fb_en/tx_en or tx_en to set gate control for SWG channel to RISE_VALUE.
#define FB_SYS_LOCAL_RX1_SWG_GATE_RISE_DELAY_BF_OFF ( 0)
#define FB_SYS_LOCAL_RX1_SWG_GATE_RISE_DELAY_BF_WID (18)
#define FB_SYS_LOCAL_RX1_SWG_GATE_RISE_DELAY_BF_MSK (0x0003FFFF)
#define FB_SYS_LOCAL_RX1_SWG_GATE_RISE_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of the relevant fb_en/tx_en
///< or rx_en. If RISE_VALUE = FALL_VALUE then the event is set to that
///< value immediately and the DELAY fields are ignored.
#define FB_SYS_LOCAL_RX1_SWG_GATE_RISE_VAL_BF_OFF (30)
#define FB_SYS_LOCAL_RX1_SWG_GATE_RISE_VAL_BF_WID ( 1)
#define FB_SYS_LOCAL_RX1_SWG_GATE_RISE_VAL_BF_MSK (0x40000000)
#define FB_SYS_LOCAL_RX1_SWG_GATE_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of the relevant fb_en/tx_en
///< or rx_en. If RISE_VALUE = FALL_VALUE then the event is set to that
///< value immediately and the DELAY fields are ignored.
#define FB_SYS_LOCAL_RX1_SWG_GATE_RISE_FALL_VAL_BF_OFF (31)
#define FB_SYS_LOCAL_RX1_SWG_GATE_RISE_FALL_VAL_BF_WID ( 1)
#define FB_SYS_LOCAL_RX1_SWG_GATE_RISE_FALL_VAL_BF_MSK (0x80000000)
#define FB_SYS_LOCAL_RX1_SWG_GATE_RISE_FALL_VAL_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_RX1_SWG_GATE_FALL register description at address offset 0xcc
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/RX1_SWG_GATE_FALL
  * Quad SWG gating fall delay
  */

typedef union {
  struct {
    uint32_t FALL_DELAY : 18;
    ///< Number of clock cycles after the falling transition of of the relevant
    ///< fb_en/tx_en or tx_en to set gate control for the SWG channel to FALL_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} fb_sys_local_rx1_swg_gate_fall_reg_t;

#define FB_SYS_LOCAL_RX1_SWG_GATE_FALL_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_RX1_SWG_GATE_FALL_RD_MASK (0x0003ffffU)
#define FB_SYS_LOCAL_RX1_SWG_GATE_FALL_WR_MASK (0x0003ffffU)


///< Number of clock cycles after the falling transition of of the relevant
///< fb_en/tx_en or tx_en to set gate control for the SWG channel to FALL_VALUE.
#define FB_SYS_LOCAL_RX1_SWG_GATE_FALL_DELAY_BF_OFF ( 0)
#define FB_SYS_LOCAL_RX1_SWG_GATE_FALL_DELAY_BF_WID (18)
#define FB_SYS_LOCAL_RX1_SWG_GATE_FALL_DELAY_BF_MSK (0x0003FFFF)
#define FB_SYS_LOCAL_RX1_SWG_GATE_FALL_DELAY_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_TX0_SWG_GATE_RISE register description at address offset 0xd0
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/TX0_SWG_GATE_RISE
  * Quad SWG gating rise delay
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 18;
    ///< Number of clock cycles after the rising transition of the relevant
    ///< fb_en/tx_en or tx_en to set gate control for SWG channel to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of the relevant fb_en/tx_en
    ///< or rx_en. If RISE_VALUE = FALL_VALUE then the event is set to that
    ///< value immediately and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of the relevant fb_en/tx_en
    ///< or rx_en. If RISE_VALUE = FALL_VALUE then the event is set to that
    ///< value immediately and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} fb_sys_local_tx0_swg_gate_rise_reg_t;

#define FB_SYS_LOCAL_TX0_SWG_GATE_RISE_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_TX0_SWG_GATE_RISE_RD_MASK (0xc003ffffU)
#define FB_SYS_LOCAL_TX0_SWG_GATE_RISE_WR_MASK (0xc003ffffU)


///< Number of clock cycles after the rising transition of the relevant
///< fb_en/tx_en or tx_en to set gate control for SWG channel to RISE_VALUE.
#define FB_SYS_LOCAL_TX0_SWG_GATE_RISE_DELAY_BF_OFF ( 0)
#define FB_SYS_LOCAL_TX0_SWG_GATE_RISE_DELAY_BF_WID (18)
#define FB_SYS_LOCAL_TX0_SWG_GATE_RISE_DELAY_BF_MSK (0x0003FFFF)
#define FB_SYS_LOCAL_TX0_SWG_GATE_RISE_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of the relevant fb_en/tx_en
///< or rx_en. If RISE_VALUE = FALL_VALUE then the event is set to that
///< value immediately and the DELAY fields are ignored.
#define FB_SYS_LOCAL_TX0_SWG_GATE_RISE_VAL_BF_OFF (30)
#define FB_SYS_LOCAL_TX0_SWG_GATE_RISE_VAL_BF_WID ( 1)
#define FB_SYS_LOCAL_TX0_SWG_GATE_RISE_VAL_BF_MSK (0x40000000)
#define FB_SYS_LOCAL_TX0_SWG_GATE_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of the relevant fb_en/tx_en
///< or rx_en. If RISE_VALUE = FALL_VALUE then the event is set to that
///< value immediately and the DELAY fields are ignored.
#define FB_SYS_LOCAL_TX0_SWG_GATE_RISE_FALL_VAL_BF_OFF (31)
#define FB_SYS_LOCAL_TX0_SWG_GATE_RISE_FALL_VAL_BF_WID ( 1)
#define FB_SYS_LOCAL_TX0_SWG_GATE_RISE_FALL_VAL_BF_MSK (0x80000000)
#define FB_SYS_LOCAL_TX0_SWG_GATE_RISE_FALL_VAL_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_TX0_SWG_GATE_FALL register description at address offset 0xd4
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/TX0_SWG_GATE_FALL
  * Quad SWG gating fall delay
  */

typedef union {
  struct {
    uint32_t FALL_DELAY : 18;
    ///< Number of clock cycles after the falling transition of of the relevant
    ///< fb_en/tx_en or tx_en to set gate control for the SWG channel to FALL_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} fb_sys_local_tx0_swg_gate_fall_reg_t;

#define FB_SYS_LOCAL_TX0_SWG_GATE_FALL_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_TX0_SWG_GATE_FALL_RD_MASK (0x0003ffffU)
#define FB_SYS_LOCAL_TX0_SWG_GATE_FALL_WR_MASK (0x0003ffffU)


///< Number of clock cycles after the falling transition of of the relevant
///< fb_en/tx_en or tx_en to set gate control for the SWG channel to FALL_VALUE.
#define FB_SYS_LOCAL_TX0_SWG_GATE_FALL_DELAY_BF_OFF ( 0)
#define FB_SYS_LOCAL_TX0_SWG_GATE_FALL_DELAY_BF_WID (18)
#define FB_SYS_LOCAL_TX0_SWG_GATE_FALL_DELAY_BF_MSK (0x0003FFFF)
#define FB_SYS_LOCAL_TX0_SWG_GATE_FALL_DELAY_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_TX1_SWG_GATE_RISE register description at address offset 0xd8
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/TX1_SWG_GATE_RISE
  * Quad SWG gating rise delay
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 18;
    ///< Number of clock cycles after the rising transition of the relevant
    ///< fb_en/tx_en or tx_en to set gate control for SWG channel to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of the relevant fb_en/tx_en
    ///< or rx_en. If RISE_VALUE = FALL_VALUE then the event is set to that
    ///< value immediately and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of the relevant fb_en/tx_en
    ///< or rx_en. If RISE_VALUE = FALL_VALUE then the event is set to that
    ///< value immediately and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} fb_sys_local_tx1_swg_gate_rise_reg_t;

#define FB_SYS_LOCAL_TX1_SWG_GATE_RISE_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_TX1_SWG_GATE_RISE_RD_MASK (0xc003ffffU)
#define FB_SYS_LOCAL_TX1_SWG_GATE_RISE_WR_MASK (0xc003ffffU)


///< Number of clock cycles after the rising transition of the relevant
///< fb_en/tx_en or tx_en to set gate control for SWG channel to RISE_VALUE.
#define FB_SYS_LOCAL_TX1_SWG_GATE_RISE_DELAY_BF_OFF ( 0)
#define FB_SYS_LOCAL_TX1_SWG_GATE_RISE_DELAY_BF_WID (18)
#define FB_SYS_LOCAL_TX1_SWG_GATE_RISE_DELAY_BF_MSK (0x0003FFFF)
#define FB_SYS_LOCAL_TX1_SWG_GATE_RISE_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of the relevant fb_en/tx_en
///< or rx_en. If RISE_VALUE = FALL_VALUE then the event is set to that
///< value immediately and the DELAY fields are ignored.
#define FB_SYS_LOCAL_TX1_SWG_GATE_RISE_VAL_BF_OFF (30)
#define FB_SYS_LOCAL_TX1_SWG_GATE_RISE_VAL_BF_WID ( 1)
#define FB_SYS_LOCAL_TX1_SWG_GATE_RISE_VAL_BF_MSK (0x40000000)
#define FB_SYS_LOCAL_TX1_SWG_GATE_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of the relevant fb_en/tx_en
///< or rx_en. If RISE_VALUE = FALL_VALUE then the event is set to that
///< value immediately and the DELAY fields are ignored.
#define FB_SYS_LOCAL_TX1_SWG_GATE_RISE_FALL_VAL_BF_OFF (31)
#define FB_SYS_LOCAL_TX1_SWG_GATE_RISE_FALL_VAL_BF_WID ( 1)
#define FB_SYS_LOCAL_TX1_SWG_GATE_RISE_FALL_VAL_BF_MSK (0x80000000)
#define FB_SYS_LOCAL_TX1_SWG_GATE_RISE_FALL_VAL_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_TX1_SWG_GATE_FALL register description at address offset 0xdc
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/TX1_SWG_GATE_FALL
  * Quad SWG gating fall delay
  */

typedef union {
  struct {
    uint32_t FALL_DELAY : 18;
    ///< Number of clock cycles after the falling transition of of the relevant
    ///< fb_en/tx_en or tx_en to set gate control for the SWG channel to FALL_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} fb_sys_local_tx1_swg_gate_fall_reg_t;

#define FB_SYS_LOCAL_TX1_SWG_GATE_FALL_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_TX1_SWG_GATE_FALL_RD_MASK (0x0003ffffU)
#define FB_SYS_LOCAL_TX1_SWG_GATE_FALL_WR_MASK (0x0003ffffU)


///< Number of clock cycles after the falling transition of of the relevant
///< fb_en/tx_en or tx_en to set gate control for the SWG channel to FALL_VALUE.
#define FB_SYS_LOCAL_TX1_SWG_GATE_FALL_DELAY_BF_OFF ( 0)
#define FB_SYS_LOCAL_TX1_SWG_GATE_FALL_DELAY_BF_WID (18)
#define FB_SYS_LOCAL_TX1_SWG_GATE_FALL_DELAY_BF_MSK (0x0003FFFF)
#define FB_SYS_LOCAL_TX1_SWG_GATE_FALL_DELAY_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_SMON_MAP_SMON_R0 register description at address offset 0x100
  *
  * Register default value:        0x40000000
  * Register full path in IP: fb_sys_local/reg/SMON_MAP/SMON_r0
  * AW_smon CONTROL0 register
  */

typedef union {
  struct {
    uint32_t SMON_ENABLE : 1;
    ///< enable the SMON counters
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t RSVD0 : 3;
    ///< reserved
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t SMON0_FUNCTION : 3;
    ///< SMON0 function    3'h0 = free running function. Trigger to accumulate
    ///< the value into the engine SMON_COUNT when an event is valid.    3'h1
    ///< = free running function. Trigger to accumulate a fixed value of 1
    ///< into the engine SMON_COUNT when an event is valid.    3'h2 = max function.
    ///< Trigger to update max value when an event is valid and larger than
    ///< the current value stored in the engine SMON_COUNT.    3'h3 = Timestamp
    ///< First Mode. Capture the timer value on the first occurance of an event.
    ///< Need to write CONTROL01 to reset.    3'h4 = Timestamp Mode. Capture
    ///< the timer value on every occurance of an event.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t SMON0_FUNCTION_COMPARE : 1;
    ///< SMON0 function_compare    1'h0 = compare mode disabled    1'h1 = compare
    ///< mode enabled
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t SMON1_FUNCTION : 3;
    ///< SMON1 function    3'h0 = free running function. Trigger to accumulate
    ///< the value into the engine SMON_COUNT when an event is valid.    3'h1
    ///< = free running function. Trigger to accumulate a fixed value of 1
    ///< into the engine SMON_COUNT when an event is valid.    3'h2 = max function.
    ///< Trigger to update max value when an event is valid and larger than
    ///< the current value stored in the engine SMON_COUNT.    3'h3 = Timestamp
    ///< First Mode. Capture the timer value on the first occurance of an event.
    ///< Need to write CONTROL01 to reset.    3'h4 = Timestamp Mode. Capture
    ///< the timer value on every occurance of an event.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t SMON1_FUNCTION_COMPARE : 1;
    ///< SMON1 function_compare    1'h0 = compare mode disabled    1'h1 = compare
    ///< mode enabled
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t SMON_MODE : 4;
    ///< SMON mode     4'h0 = Independant Mode. SMON0_COUNT & SMON1_COUNT operate
    ///< independantly as their function is configured.       4'h1 = Average
    ///< Latency Mode. SMON0 trigger starts timer & SMON1 trigger stops timer.
    ///< SMON0_COUNT accumulates occurances and SMON1_COUNT accumulates timer
    ///< values. For multiple stop for a single start, accumulate  start_to_stop1,
    ///< start_to_stop1stop2 ...    4'h2 = MinMax Latency Mode,. SMON0 trigger
    ///< starts timer & SMON1 trigger stops timer. SMON0_COUNT maintains the
    ///< minimum timer value and SMON1_COUNT maintains the maximum timer value.
    ///< 4'h3 = Average Mode.   SMON0 trigger increments SMON0_COUNT and the
    ///< value is accumulated in SMON1_COUNT. SMON1 events are disabled.
    ///< 4'h4 = Average Lantecy Mode 2. same as mode01, but only accumulate
    ///< the first start_to_stop1 if there are multiple stop for each start.
    ///< 4'h5 = Average Latency Mode 3. same as mode01, but accumualte the
    ///< incremental start_to_stop1, stop1_to_stop2... if there are multiple
    ///< stop for each start.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t STOPCOUNTEROVFL : 1;
    ///< configure to stop on counter0 or counter1 overflow
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t INTCOUNTEROVFL : 1;
    ///< configure to interupt on counter0 or counter1 overflow
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t STATCOUNTER0OVFL : 1;
    ///< status for counter0 overflow. A value of '1' signifies counter0 overflow.
    ///< AccessType="RW/V" BitOffset="18" ResetValue="0x0"
    uint32_t STATCOUNTER1OVFL : 1;
    ///< status for counter1 overflow. A value of '1' signifies counter1 overflow.
    ///< AccessType="RW/V" BitOffset="19" ResetValue="0x0"
    uint32_t STOPTIMEROVFL : 1;
    ///< configure to stop on timer overflow or timer>maxvalue
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t INTTIMEROVFL : 1;
    ///< configure to interrupt on timer overflow or timer>maxvalue
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t STATTIMEROVFL : 1;
    ///< status of timer overflow. A value of '1' signifies timer overflow,
    ///< or timer>maxvalue.
    ///< AccessType="RW/V" BitOffset="22" ResetValue="0x0"
    uint32_t RSVD1 : 1;
    ///< reserved
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t TIMER_PRESCALE : 5;
    ///< timer prescale    5'h00 = mode00, increment timer every      1 clock
    ///< 5'h01 = mode01, increment timer every      2 clocks    5'h02 = mode02,
    ///< increment timer every      4 clocks    5'h03 = mode03, increment timer
    ///< every      8 clocks    5'h04 = mode04, increment timer every     16
    ///< clocks    5'h05 = mode05, increment timer every     32 clocks    5'h06
    ///< = mode06, increment timer every     64 clocks    5'h07 = mode07, increment
    ///< timer every    128 clocks    5'h08 = mode08, increment timer every
    ///< 256 clocks    5'h09 = mode09, increment timer every    512 clocks
    ///< 5'h0a = mode10, increment timer every   1024 clocks    5'h0b = mode11,
    ///< increment timer every   2048 clocks    5'h0c = mode12, increment timer
    ///< every   4096 clocks    5'h0d = mode13, increment timer every   8192
    ///< clocks    5'h0e = mode14, increment timer every  16384 clocks    5'h0f
    ///< = mode15, increment timer every  32768 clocks    5'h10 = mode16, increment
    ///< timer every  65536 clocks    5'h11 = mode17, increment timer every
    ///< 131072 clocks    5'h12 = mode18, increment timer every 262144 clocks
    ///< 5'h13 = mode19, increment timer every 524288 clocks
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t RSVD2 : 1;
    ///< reserved
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
    uint32_t VERSION : 2;
    ///< version
    ///< AccessType="RO" BitOffset="30" ResetValue="0x1"
  } ;
  uint32_t value;
} fb_sys_local_smon_r0_reg_t;

#define FB_SYS_LOCAL_SMON_R0_DEFAULT (0x40000000U)
#define FB_SYS_LOCAL_SMON_R0_RD_MASK (0xffffffffU)
#define FB_SYS_LOCAL_SMON_R0_WR_MASK (0x3fffffffU)


///< enable the SMON counters
#define FB_SYS_LOCAL_SMON_R0_SMON_EN_BF_OFF ( 0)
#define FB_SYS_LOCAL_SMON_R0_SMON_EN_BF_WID ( 1)
#define FB_SYS_LOCAL_SMON_R0_SMON_EN_BF_MSK (0x00000001)
#define FB_SYS_LOCAL_SMON_R0_SMON_EN_BF_DEF (0x00000000)

///< reserved
#define FB_SYS_LOCAL_SMON_R0_RSVD0_BF_OFF ( 1)
#define FB_SYS_LOCAL_SMON_R0_RSVD0_BF_WID ( 3)
#define FB_SYS_LOCAL_SMON_R0_RSVD0_BF_MSK (0x0000000E)
#define FB_SYS_LOCAL_SMON_R0_RSVD0_BF_DEF (0x00000000)

///< SMON0 function    3'h0 = free running function. Trigger to accumulate
///< the value into the engine SMON_COUNT when an event is valid.    3'h1
///< = free running function. Trigger to accumulate a fixed value of 1
///< into the engine SMON_COUNT when an event is valid.    3'h2 = max function.
///< Trigger to update max value when an event is valid and larger than
///< the current value stored in the engine SMON_COUNT.    3'h3 = Timestamp
///< First Mode. Capture the timer value on the first occurance of an event.
///< Need to write CONTROL01 to reset.    3'h4 = Timestamp Mode. Capture
///< the timer value on every occurance of an event.
#define FB_SYS_LOCAL_SMON_R0_SMON0_FUNCTION_BF_OFF ( 4)
#define FB_SYS_LOCAL_SMON_R0_SMON0_FUNCTION_BF_WID ( 3)
#define FB_SYS_LOCAL_SMON_R0_SMON0_FUNCTION_BF_MSK (0x00000070)
#define FB_SYS_LOCAL_SMON_R0_SMON0_FUNCTION_BF_DEF (0x00000000)

///< SMON0 function_compare    1'h0 = compare mode disabled    1'h1 = compare
///< mode enabled
#define FB_SYS_LOCAL_SMON_R0_SMON0_FUNCTION_CMP_BF_OFF ( 7)
#define FB_SYS_LOCAL_SMON_R0_SMON0_FUNCTION_CMP_BF_WID ( 1)
#define FB_SYS_LOCAL_SMON_R0_SMON0_FUNCTION_CMP_BF_MSK (0x00000080)
#define FB_SYS_LOCAL_SMON_R0_SMON0_FUNCTION_CMP_BF_DEF (0x00000000)

///< SMON1 function    3'h0 = free running function. Trigger to accumulate
///< the value into the engine SMON_COUNT when an event is valid.    3'h1
///< = free running function. Trigger to accumulate a fixed value of 1
///< into the engine SMON_COUNT when an event is valid.    3'h2 = max function.
///< Trigger to update max value when an event is valid and larger than
///< the current value stored in the engine SMON_COUNT.    3'h3 = Timestamp
///< First Mode. Capture the timer value on the first occurance of an event.
///< Need to write CONTROL01 to reset.    3'h4 = Timestamp Mode. Capture
///< the timer value on every occurance of an event.
#define FB_SYS_LOCAL_SMON_R0_SMON1_FUNCTION_BF_OFF ( 8)
#define FB_SYS_LOCAL_SMON_R0_SMON1_FUNCTION_BF_WID ( 3)
#define FB_SYS_LOCAL_SMON_R0_SMON1_FUNCTION_BF_MSK (0x00000700)
#define FB_SYS_LOCAL_SMON_R0_SMON1_FUNCTION_BF_DEF (0x00000000)

///< SMON1 function_compare    1'h0 = compare mode disabled    1'h1 = compare
///< mode enabled
#define FB_SYS_LOCAL_SMON_R0_SMON1_FUNCTION_CMP_BF_OFF (11)
#define FB_SYS_LOCAL_SMON_R0_SMON1_FUNCTION_CMP_BF_WID ( 1)
#define FB_SYS_LOCAL_SMON_R0_SMON1_FUNCTION_CMP_BF_MSK (0x00000800)
#define FB_SYS_LOCAL_SMON_R0_SMON1_FUNCTION_CMP_BF_DEF (0x00000000)

///< SMON mode     4'h0 = Independant Mode. SMON0_COUNT & SMON1_COUNT operate
///< independantly as their function is configured.       4'h1 = Average
///< Latency Mode. SMON0 trigger starts timer & SMON1 trigger stops timer.
///< SMON0_COUNT accumulates occurances and SMON1_COUNT accumulates timer
///< values. For multiple stop for a single start, accumulate  start_to_stop1,
///< start_to_stop1stop2 ...    4'h2 = MinMax Latency Mode,. SMON0 trigger
///< starts timer & SMON1 trigger stops timer. SMON0_COUNT maintains the
///< minimum timer value and SMON1_COUNT maintains the maximum timer value.
///< 4'h3 = Average Mode.   SMON0 trigger increments SMON0_COUNT and the
///< value is accumulated in SMON1_COUNT. SMON1 events are disabled.
///< 4'h4 = Average Lantecy Mode 2. same as mode01, but only accumulate
///< the first start_to_stop1 if there are multiple stop for each start.
///< 4'h5 = Average Latency Mode 3. same as mode01, but accumualte the
///< incremental start_to_stop1, stop1_to_stop2... if there are multiple
///< stop for each start.
#define FB_SYS_LOCAL_SMON_R0_SMON_MODE_BF_OFF (12)
#define FB_SYS_LOCAL_SMON_R0_SMON_MODE_BF_WID ( 4)
#define FB_SYS_LOCAL_SMON_R0_SMON_MODE_BF_MSK (0x0000F000)
#define FB_SYS_LOCAL_SMON_R0_SMON_MODE_BF_DEF (0x00000000)

///< configure to stop on counter0 or counter1 overflow
#define FB_SYS_LOCAL_SMON_R0_STOPCNTEROVFL_BF_OFF (16)
#define FB_SYS_LOCAL_SMON_R0_STOPCNTEROVFL_BF_WID ( 1)
#define FB_SYS_LOCAL_SMON_R0_STOPCNTEROVFL_BF_MSK (0x00010000)
#define FB_SYS_LOCAL_SMON_R0_STOPCNTEROVFL_BF_DEF (0x00000000)

///< configure to interupt on counter0 or counter1 overflow
#define FB_SYS_LOCAL_SMON_R0_INTCNTEROVFL_BF_OFF (17)
#define FB_SYS_LOCAL_SMON_R0_INTCNTEROVFL_BF_WID ( 1)
#define FB_SYS_LOCAL_SMON_R0_INTCNTEROVFL_BF_MSK (0x00020000)
#define FB_SYS_LOCAL_SMON_R0_INTCNTEROVFL_BF_DEF (0x00000000)

///< status for counter0 overflow. A value of '1' signifies counter0 overflow.
#define FB_SYS_LOCAL_SMON_R0_STATCNTER0OVFL_BF_OFF (18)
#define FB_SYS_LOCAL_SMON_R0_STATCNTER0OVFL_BF_WID ( 1)
#define FB_SYS_LOCAL_SMON_R0_STATCNTER0OVFL_BF_MSK (0x00040000)
#define FB_SYS_LOCAL_SMON_R0_STATCNTER0OVFL_BF_DEF (0x00000000)

///< status for counter1 overflow. A value of '1' signifies counter1 overflow.
#define FB_SYS_LOCAL_SMON_R0_STATCNTER1OVFL_BF_OFF (19)
#define FB_SYS_LOCAL_SMON_R0_STATCNTER1OVFL_BF_WID ( 1)
#define FB_SYS_LOCAL_SMON_R0_STATCNTER1OVFL_BF_MSK (0x00080000)
#define FB_SYS_LOCAL_SMON_R0_STATCNTER1OVFL_BF_DEF (0x00000000)

///< configure to stop on timer overflow or timer>maxvalue
#define FB_SYS_LOCAL_SMON_R0_STOPTIMEROVFL_BF_OFF (20)
#define FB_SYS_LOCAL_SMON_R0_STOPTIMEROVFL_BF_WID ( 1)
#define FB_SYS_LOCAL_SMON_R0_STOPTIMEROVFL_BF_MSK (0x00100000)
#define FB_SYS_LOCAL_SMON_R0_STOPTIMEROVFL_BF_DEF (0x00000000)

///< configure to interrupt on timer overflow or timer>maxvalue
#define FB_SYS_LOCAL_SMON_R0_INTTIMEROVFL_BF_OFF (21)
#define FB_SYS_LOCAL_SMON_R0_INTTIMEROVFL_BF_WID ( 1)
#define FB_SYS_LOCAL_SMON_R0_INTTIMEROVFL_BF_MSK (0x00200000)
#define FB_SYS_LOCAL_SMON_R0_INTTIMEROVFL_BF_DEF (0x00000000)

///< status of timer overflow. A value of '1' signifies timer overflow,
///< or timer>maxvalue.
#define FB_SYS_LOCAL_SMON_R0_STATTIMEROVFL_BF_OFF (22)
#define FB_SYS_LOCAL_SMON_R0_STATTIMEROVFL_BF_WID ( 1)
#define FB_SYS_LOCAL_SMON_R0_STATTIMEROVFL_BF_MSK (0x00400000)
#define FB_SYS_LOCAL_SMON_R0_STATTIMEROVFL_BF_DEF (0x00000000)

///< reserved
#define FB_SYS_LOCAL_SMON_R0_RSVD1_BF_OFF (23)
#define FB_SYS_LOCAL_SMON_R0_RSVD1_BF_WID ( 1)
#define FB_SYS_LOCAL_SMON_R0_RSVD1_BF_MSK (0x00800000)
#define FB_SYS_LOCAL_SMON_R0_RSVD1_BF_DEF (0x00000000)

///< timer prescale    5'h00 = mode00, increment timer every      1 clock
///< 5'h01 = mode01, increment timer every      2 clocks    5'h02 = mode02,
///< increment timer every      4 clocks    5'h03 = mode03, increment timer
///< every      8 clocks    5'h04 = mode04, increment timer every     16
///< clocks    5'h05 = mode05, increment timer every     32 clocks    5'h06
///< = mode06, increment timer every     64 clocks    5'h07 = mode07, increment
///< timer every    128 clocks    5'h08 = mode08, increment timer every
///< 256 clocks    5'h09 = mode09, increment timer every    512 clocks
///< 5'h0a = mode10, increment timer every   1024 clocks    5'h0b = mode11,
///< increment timer every   2048 clocks    5'h0c = mode12, increment timer
///< every   4096 clocks    5'h0d = mode13, increment timer every   8192
///< clocks    5'h0e = mode14, increment timer every  16384 clocks    5'h0f
///< = mode15, increment timer every  32768 clocks    5'h10 = mode16, increment
///< timer every  65536 clocks    5'h11 = mode17, increment timer every
///< 131072 clocks    5'h12 = mode18, increment timer every 262144 clocks
///< 5'h13 = mode19, increment timer every 524288 clocks
#define FB_SYS_LOCAL_SMON_R0_TIMER_PRESCALE_BF_OFF (24)
#define FB_SYS_LOCAL_SMON_R0_TIMER_PRESCALE_BF_WID ( 5)
#define FB_SYS_LOCAL_SMON_R0_TIMER_PRESCALE_BF_MSK (0x1F000000)
#define FB_SYS_LOCAL_SMON_R0_TIMER_PRESCALE_BF_DEF (0x00000000)

///< reserved
#define FB_SYS_LOCAL_SMON_R0_RSVD2_BF_OFF (29)
#define FB_SYS_LOCAL_SMON_R0_RSVD2_BF_WID ( 1)
#define FB_SYS_LOCAL_SMON_R0_RSVD2_BF_MSK (0x20000000)
#define FB_SYS_LOCAL_SMON_R0_RSVD2_BF_DEF (0x00000000)

///< version
#define FB_SYS_LOCAL_SMON_R0_VER_BF_OFF (30)
#define FB_SYS_LOCAL_SMON_R0_VER_BF_WID ( 2)
#define FB_SYS_LOCAL_SMON_R0_VER_BF_MSK (0xC0000000)
#define FB_SYS_LOCAL_SMON_R0_VER_BF_DEF (0x40000000)


/** @brief FB_SYS_LOCAL_REG_SMON_MAP_SMON_R1 register description at address offset 0x104
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/SMON_MAP/SMON_r1
  * AW_smon CONTROL1 register
  */

typedef union {
  struct {
    uint32_t MODE0 : 8;
    ///< select input signal for SMON0 engine. <br/> 14 modes supported:<br/>
    ///< 0: DMOD ch0 valid input<br/>    1: DMOD ch1 valid input<br/>  2: DMOD
    ///< ch0 valid output<br/>  3: DMOD ch1 valid output<br/>  4: DDC0 valid
    ///< real output<br/>  5: DDC0 valid cplx output<br/>  6: DDC1 valid real
    ///< output<br/>  7: DDC1 valid iq output<br/>  8: RXG0 valid output<br/>
    ///< 9: RXG1 valid output<br/>  10: FB_SYS valid 0 output, post cap ctrl.
    ///< Comparision=id0<br/>  11: FB_SYS valid 1 output, post cap ctrl.  Comparison=id1<br/>
    ///< 12: CTL reg core write, Comparison=offset, Value=wdata<br/>  13: CTL
    ///< reg core read, Comparison=offset, Value=wdata
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t MODE1 : 8;
    ///< select input signal for SMON1 engine. <br/> 14 modes supported:<br/>
    ///< 0: DMOD ch0 valid input<br/>    1: DMOD ch1 valid input<br/>  2: DMOD
    ///< ch0 valid output<br/>  3: DMOD ch1 valid output<br/>  4: DDC0 valid
    ///< real output<br/>  5: DDC0 valid cplx output<br/>  6: DDC1 valid real
    ///< output<br/>  7: DDC1 valid iq output<br/>  8: RXG0 valid output<br/>
    ///< 9: RXG1 valid output<br/>  10: FB_SYS valid 0 output, post cap ctrl.
    ///< Comparision=id0<br/>  11: FB_SYS valid 1 output, post cap ctrl.  Comparison=id1<br/>
    ///< 12: CTL reg core write, Comparison=offset, Value=wdata<br/>  13: CTL
    ///< reg core read, Comparison=offset, Value=wdata
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RSVD : 16;
    ///< reserved
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} fb_sys_local_smon_r1_reg_t;

#define FB_SYS_LOCAL_SMON_R1_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_SMON_R1_RD_MASK (0xffffffffU)
#define FB_SYS_LOCAL_SMON_R1_WR_MASK (0xffffffffU)


///< select input signal for SMON0 engine. <br/> 14 modes supported:<br/>
///< 0: DMOD ch0 valid input<br/>    1: DMOD ch1 valid input<br/>  2: DMOD
///< ch0 valid output<br/>  3: DMOD ch1 valid output<br/>  4: DDC0 valid
///< real output<br/>  5: DDC0 valid cplx output<br/>  6: DDC1 valid real
///< output<br/>  7: DDC1 valid iq output<br/>  8: RXG0 valid output<br/>
///< 9: RXG1 valid output<br/>  10: FB_SYS valid 0 output, post cap ctrl.
///< Comparision=id0<br/>  11: FB_SYS valid 1 output, post cap ctrl.  Comparison=id1<br/>
///< 12: CTL reg core write, Comparison=offset, Value=wdata<br/>  13: CTL
///< reg core read, Comparison=offset, Value=wdata
#define FB_SYS_LOCAL_SMON_R1_MODE0_BF_OFF ( 0)
#define FB_SYS_LOCAL_SMON_R1_MODE0_BF_WID ( 8)
#define FB_SYS_LOCAL_SMON_R1_MODE0_BF_MSK (0x000000FF)
#define FB_SYS_LOCAL_SMON_R1_MODE0_BF_DEF (0x00000000)

///< select input signal for SMON1 engine. <br/> 14 modes supported:<br/>
///< 0: DMOD ch0 valid input<br/>    1: DMOD ch1 valid input<br/>  2: DMOD
///< ch0 valid output<br/>  3: DMOD ch1 valid output<br/>  4: DDC0 valid
///< real output<br/>  5: DDC0 valid cplx output<br/>  6: DDC1 valid real
///< output<br/>  7: DDC1 valid iq output<br/>  8: RXG0 valid output<br/>
///< 9: RXG1 valid output<br/>  10: FB_SYS valid 0 output, post cap ctrl.
///< Comparision=id0<br/>  11: FB_SYS valid 1 output, post cap ctrl.  Comparison=id1<br/>
///< 12: CTL reg core write, Comparison=offset, Value=wdata<br/>  13: CTL
///< reg core read, Comparison=offset, Value=wdata
#define FB_SYS_LOCAL_SMON_R1_MODE1_BF_OFF ( 8)
#define FB_SYS_LOCAL_SMON_R1_MODE1_BF_WID ( 8)
#define FB_SYS_LOCAL_SMON_R1_MODE1_BF_MSK (0x0000FF00)
#define FB_SYS_LOCAL_SMON_R1_MODE1_BF_DEF (0x00000000)

///< reserved
#define FB_SYS_LOCAL_SMON_R1_RSVD_BF_OFF (16)
#define FB_SYS_LOCAL_SMON_R1_RSVD_BF_WID (16)
#define FB_SYS_LOCAL_SMON_R1_RSVD_BF_MSK (0xFFFF0000)
#define FB_SYS_LOCAL_SMON_R1_RSVD_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_SMON_MAP_SMON_R2 register description at address offset 0x108
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/SMON_MAP/SMON_r2
  * AW_smon SMON0_COMPARE register
  */

typedef union {
  struct {
    uint32_t COMPARE0 : 32;
    ///< Comparison value.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fb_sys_local_smon_r2_reg_t;

#define FB_SYS_LOCAL_SMON_R2_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_SMON_R2_RD_MASK (0xffffffffU)
#define FB_SYS_LOCAL_SMON_R2_WR_MASK (0xffffffffU)


///< Comparison value.
#define FB_SYS_LOCAL_SMON_R2_CMP0_BF_OFF ( 0)
#define FB_SYS_LOCAL_SMON_R2_CMP0_BF_WID (32)
#define FB_SYS_LOCAL_SMON_R2_CMP0_BF_MSK (0xFFFFFFFF)
#define FB_SYS_LOCAL_SMON_R2_CMP0_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_SMON_MAP_SMON_R3 register description at address offset 0x10c
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/SMON_MAP/SMON_r3
  * AW_smon SMON1_COMPARE register
  */

typedef union {
  struct {
    uint32_t COMPARE1 : 32;
    ///< Comparison value.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fb_sys_local_smon_r3_reg_t;

#define FB_SYS_LOCAL_SMON_R3_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_SMON_R3_RD_MASK (0xffffffffU)
#define FB_SYS_LOCAL_SMON_R3_WR_MASK (0xffffffffU)


///< Comparison value.
#define FB_SYS_LOCAL_SMON_R3_CMP1_BF_OFF ( 0)
#define FB_SYS_LOCAL_SMON_R3_CMP1_BF_WID (32)
#define FB_SYS_LOCAL_SMON_R3_CMP1_BF_MSK (0xFFFFFFFF)
#define FB_SYS_LOCAL_SMON_R3_CMP1_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_SMON_MAP_SMON_R4 register description at address offset 0x110
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/SMON_MAP/SMON_r4
  * AW_smon SMON0_COUNT register
  */

typedef union {
  struct {
    uint32_t COUNTER0 : 32;
    ///< counter0
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fb_sys_local_smon_r4_reg_t;

#define FB_SYS_LOCAL_SMON_R4_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_SMON_R4_RD_MASK (0xffffffffU)
#define FB_SYS_LOCAL_SMON_R4_WR_MASK (0xffffffffU)


///< counter0
#define FB_SYS_LOCAL_SMON_R4_CNTER0_BF_OFF ( 0)
#define FB_SYS_LOCAL_SMON_R4_CNTER0_BF_WID (32)
#define FB_SYS_LOCAL_SMON_R4_CNTER0_BF_MSK (0xFFFFFFFF)
#define FB_SYS_LOCAL_SMON_R4_CNTER0_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_SMON_MAP_SMON_R5 register description at address offset 0x114
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/SMON_MAP/SMON_r5
  * AW_smon SMON1_COUNT register
  */

typedef union {
  struct {
    uint32_t COUNTER1 : 32;
    ///< counter1
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fb_sys_local_smon_r5_reg_t;

#define FB_SYS_LOCAL_SMON_R5_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_SMON_R5_RD_MASK (0xffffffffU)
#define FB_SYS_LOCAL_SMON_R5_WR_MASK (0xffffffffU)


///< counter1
#define FB_SYS_LOCAL_SMON_R5_CNTER1_BF_OFF ( 0)
#define FB_SYS_LOCAL_SMON_R5_CNTER1_BF_WID (32)
#define FB_SYS_LOCAL_SMON_R5_CNTER1_BF_MSK (0xFFFFFFFF)
#define FB_SYS_LOCAL_SMON_R5_CNTER1_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_SMON_MAP_SMON_R6 register description at address offset 0x118
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/SMON_MAP/SMON_r6
  * AW_smon TIMER register
  */

typedef union {
  struct {
    uint32_t TIMER : 32;
    ///< timer
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fb_sys_local_smon_r6_reg_t;

#define FB_SYS_LOCAL_SMON_R6_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_SMON_R6_RD_MASK (0xffffffffU)
#define FB_SYS_LOCAL_SMON_R6_WR_MASK (0xffffffffU)


///< timer
#define FB_SYS_LOCAL_SMON_R6_TIMER_BF_OFF ( 0)
#define FB_SYS_LOCAL_SMON_R6_TIMER_BF_WID (32)
#define FB_SYS_LOCAL_SMON_R6_TIMER_BF_MSK (0xFFFFFFFF)
#define FB_SYS_LOCAL_SMON_R6_TIMER_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_SMON_MAP_SMON_R7 register description at address offset 0x11c
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/SMON_MAP/SMON_r7
  * AW_smon TIMERMAXVAL register
  */

typedef union {
  struct {
    uint32_t MAXVALUE : 32;
    ///< maxvalue
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fb_sys_local_smon_r7_reg_t;

#define FB_SYS_LOCAL_SMON_R7_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_SMON_R7_RD_MASK (0xffffffffU)
#define FB_SYS_LOCAL_SMON_R7_WR_MASK (0xffffffffU)


///< maxvalue
#define FB_SYS_LOCAL_SMON_R7_MAXVAL_BF_OFF ( 0)
#define FB_SYS_LOCAL_SMON_R7_MAXVAL_BF_WID (32)
#define FB_SYS_LOCAL_SMON_R7_MAXVAL_BF_MSK (0xFFFFFFFF)
#define FB_SYS_LOCAL_SMON_R7_MAXVAL_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_ISYNC_MAP_ISYNC_CTRL register description at address offset 0x200
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/ISYNC_MAP/ISYNC_CTRL
  * ISYNC Control Register
  */

typedef union {
  struct {
    uint32_t TIMER_CMD : 3;
    ///< When i_isync value is 11, the command programmed in this register
    ///< is executed.  3'b000, 3'b100, 3'b110 -> bfn_lower_cnt is incremented
    ///< with the value in BFN_LOWER_CNT_INC. If the  lower count value equals
    ///< the TEN_MS_CNT value the bfn_upper_cnt value is incremented by 1.
    ///< 3'b001 -> bfn_lower_cnt and bfn_upper_cnt are preset to the value
    ///< in the TIMER_INC_PRE register.  3'b010 -> The internal registers corresponding
    ///< to BFN_LOWER_CNT_INC., TIMER_INC_PRE, TIMER_INC_ADJ  TEN_MS_CNT are
    ///< all initialized to their corresponding input values.  If the current
    ///< bfn_lower_cnt value is equal to the TEN_MS_CNT value, the bfn_upper_cnt
    ///< is incremented by 1. If not, bfn_lower_cnt is incremented by the value
    ///< in BFN_LOWER_CNT_INC.  register.  3'b011 -> Increment the bfn_lower_cnt
    ///< value with the value in the TIMER_INC_PRE register.  3'b101 -> If
    ///< bfn_lower_cnt value equals the TEN_MS_CNT value, reset the bfn_lower_cnt
    ///< to zero and  increment the bfn_upper_cnt by 1. If not, increment bfn_lower_cnt
    ///< by a value  in the BFN_LOWER_CNT_INC. register. A sync_adj_pulse is
    ///< also generated so that when the  bfn_lower_cnt value is equal to the
    ///< TEN_MS_CNT and the bfn_upper_cnt equals timer_cnt_adj  the bfn_lower_cnt
    ///< is preset to the value in TIMER_INC_PRE and the bfn_upper_cnt is
    ///< incremented by the value in TIMER_INC_PRE register.  3'b111 -> The
    ///< current value in the bfn_lower_cnt and bfn_upper_cnt is captured and
    ///< made available  in a register for the application to read.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t LOAD_READ : 1;
    ///< When 1, load BFN count into the manager counter at the first timesync
    ///< pulse, when 0, read BFN count from the Manager BFN counter at every
    ///< timesync pulse.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t BFN_CNT_SAMPLE : 1;
    ///< Write to 1 (regardless of the current value) causes the circuit to
    ///< sample the BFN_CNT and synchronize it into the register clock domain.
    ///< After waiting 3-4 BFN clock cycles plus 3-4 register clock cycles,
    ///< the sample is available to read in the ISYNC_BFN_CNT register
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t  : 9;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t SOFT_RESET : 1;
    ///< Soft Reset for the entire AW_isync. Active high.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} fb_sys_local_isync_ctrl_reg_t;

#define FB_SYS_LOCAL_ISYNC_CTRL_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_ISYNC_CTRL_RD_MASK (0x00008037U)
#define FB_SYS_LOCAL_ISYNC_CTRL_WR_MASK (0x00008037U)


///< When i_isync value is 11, the command programmed in this register
///< is executed.  3'b000, 3'b100, 3'b110 -> bfn_lower_cnt is incremented
///< with the value in BFN_LOWER_CNT_INC. If the  lower count value equals
///< the TEN_MS_CNT value the bfn_upper_cnt value is incremented by 1.
///< 3'b001 -> bfn_lower_cnt and bfn_upper_cnt are preset to the value
///< in the TIMER_INC_PRE register.  3'b010 -> The internal registers corresponding
///< to BFN_LOWER_CNT_INC., TIMER_INC_PRE, TIMER_INC_ADJ  TEN_MS_CNT are
///< all initialized to their corresponding input values.  If the current
///< bfn_lower_cnt value is equal to the TEN_MS_CNT value, the bfn_upper_cnt
///< is incremented by 1. If not, bfn_lower_cnt is incremented by the value
///< in BFN_LOWER_CNT_INC.  register.  3'b011 -> Increment the bfn_lower_cnt
///< value with the value in the TIMER_INC_PRE register.  3'b101 -> If
///< bfn_lower_cnt value equals the TEN_MS_CNT value, reset the bfn_lower_cnt
///< to zero and  increment the bfn_upper_cnt by 1. If not, increment bfn_lower_cnt
///< by a value  in the BFN_LOWER_CNT_INC. register. A sync_adj_pulse is
///< also generated so that when the  bfn_lower_cnt value is equal to the
///< TEN_MS_CNT and the bfn_upper_cnt equals timer_cnt_adj  the bfn_lower_cnt
///< is preset to the value in TIMER_INC_PRE and the bfn_upper_cnt is
///< incremented by the value in TIMER_INC_PRE register.  3'b111 -> The
///< current value in the bfn_lower_cnt and bfn_upper_cnt is captured and
///< made available  in a register for the application to read.
#define FB_SYS_LOCAL_ISYNC_CTRL_TIMER_CMD_BF_OFF ( 0)
#define FB_SYS_LOCAL_ISYNC_CTRL_TIMER_CMD_BF_WID ( 3)
#define FB_SYS_LOCAL_ISYNC_CTRL_TIMER_CMD_BF_MSK (0x00000007)
#define FB_SYS_LOCAL_ISYNC_CTRL_TIMER_CMD_BF_DEF (0x00000000)

///< When 1, load BFN count into the manager counter at the first timesync
///< pulse, when 0, read BFN count from the Manager BFN counter at every
///< timesync pulse.
#define FB_SYS_LOCAL_ISYNC_CTRL_LOAD_READ_BF_OFF ( 4)
#define FB_SYS_LOCAL_ISYNC_CTRL_LOAD_READ_BF_WID ( 1)
#define FB_SYS_LOCAL_ISYNC_CTRL_LOAD_READ_BF_MSK (0x00000010)
#define FB_SYS_LOCAL_ISYNC_CTRL_LOAD_READ_BF_DEF (0x00000000)

///< Write to 1 (regardless of the current value) causes the circuit to
///< sample the BFN_CNT and synchronize it into the register clock domain.
///< After waiting 3-4 BFN clock cycles plus 3-4 register clock cycles,
///< the sample is available to read in the ISYNC_BFN_CNT register
#define FB_SYS_LOCAL_ISYNC_CTRL_BFN_CNT_SAMPLE_BF_OFF ( 5)
#define FB_SYS_LOCAL_ISYNC_CTRL_BFN_CNT_SAMPLE_BF_WID ( 1)
#define FB_SYS_LOCAL_ISYNC_CTRL_BFN_CNT_SAMPLE_BF_MSK (0x00000020)
#define FB_SYS_LOCAL_ISYNC_CTRL_BFN_CNT_SAMPLE_BF_DEF (0x00000000)

///< Soft Reset for the entire AW_isync. Active high.
#define FB_SYS_LOCAL_ISYNC_CTRL_SOFT_RST_BF_OFF (15)
#define FB_SYS_LOCAL_ISYNC_CTRL_SOFT_RST_BF_WID ( 1)
#define FB_SYS_LOCAL_ISYNC_CTRL_SOFT_RST_BF_MSK (0x00008000)
#define FB_SYS_LOCAL_ISYNC_CTRL_SOFT_RST_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_ISYNC_MAP_ISYNC_LCNT_INC register description at address offset 0x204
  *
  * Register default value:        0x00000001
  * Register full path in IP: fb_sys_local/reg/ISYNC_MAP/ISYNC_LCNT_INC
  * Isync Lower Count Increment Register
  */

typedef union {
  struct {
    uint32_t BFN_LOWER_CNT_INC : 24;
    ///< Increment for the Offset Counter.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} fb_sys_local_isync_lcnt_inc_reg_t;

#define FB_SYS_LOCAL_ISYNC_LCNT_INC_DEFAULT (0x00000001U)
#define FB_SYS_LOCAL_ISYNC_LCNT_INC_RD_MASK (0x00ffffffU)
#define FB_SYS_LOCAL_ISYNC_LCNT_INC_WR_MASK (0x00ffffffU)


///< Increment for the Offset Counter.
#define FB_SYS_LOCAL_ISYNC_LCNT_INC_BFN_LOWER_CNT_INC_BF_OFF ( 0)
#define FB_SYS_LOCAL_ISYNC_LCNT_INC_BFN_LOWER_CNT_INC_BF_WID (24)
#define FB_SYS_LOCAL_ISYNC_LCNT_INC_BFN_LOWER_CNT_INC_BF_MSK (0x00FFFFFF)
#define FB_SYS_LOCAL_ISYNC_LCNT_INC_BFN_LOWER_CNT_INC_BF_DEF (0x00000001)


/** @brief FB_SYS_LOCAL_REG_ISYNC_MAP_ISYNC_TEN_MS_CNT register description at address offset 0x208
  *
  * Register default value:        0x0095FFFF
  * Register full path in IP: fb_sys_local/reg/ISYNC_MAP/ISYNC_TEN_MS_CNT
  * Isync 10ms Counter Register
  */

typedef union {
  struct {
    uint32_t TEN_MS_CNT : 24;
    ///< Number of clock cycles in 10ms (minus 1).
    ///< AccessType="RW" BitOffset="0" ResetValue="0x95FFFF"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} fb_sys_local_isync_ten_ms_cnt_reg_t;

#define FB_SYS_LOCAL_ISYNC_TEN_MS_CNT_DEFAULT (0x0095ffffU)
#define FB_SYS_LOCAL_ISYNC_TEN_MS_CNT_RD_MASK (0x00ffffffU)
#define FB_SYS_LOCAL_ISYNC_TEN_MS_CNT_WR_MASK (0x00ffffffU)


///< Number of clock cycles in 10ms (minus 1).
#define FB_SYS_LOCAL_ISYNC_TEN_MS_CNT_TEN_MS_CNT_BF_OFF ( 0)
#define FB_SYS_LOCAL_ISYNC_TEN_MS_CNT_TEN_MS_CNT_BF_WID (24)
#define FB_SYS_LOCAL_ISYNC_TEN_MS_CNT_TEN_MS_CNT_BF_MSK (0x00FFFFFF)
#define FB_SYS_LOCAL_ISYNC_TEN_MS_CNT_TEN_MS_CNT_BF_DEF (0x0095FFFF)


/** @brief FB_SYS_LOCAL_REG_ISYNC_MAP_ISYNC_INC_PRE register description at address offset 0x20c
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/ISYNC_MAP/ISYNC_INC_PRE
  * Isync Timer Increment/Preset Register
  */

typedef union {
  struct {
    uint32_t OFFSET_INCR : 24;
    ///< Offset from nearest 10ms frame, in clock cycles.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FRAME_INCR : 8;
    ///< Bits [7:0] of the 10ms frame counter.
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} fb_sys_local_isync_inc_pre_reg_t;

#define FB_SYS_LOCAL_ISYNC_INC_PRE_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_ISYNC_INC_PRE_RD_MASK (0xffffffffU)
#define FB_SYS_LOCAL_ISYNC_INC_PRE_WR_MASK (0xffffffffU)


///< Offset from nearest 10ms frame, in clock cycles.
#define FB_SYS_LOCAL_ISYNC_INC_PRE_OFFSET_INCR_BF_OFF ( 0)
#define FB_SYS_LOCAL_ISYNC_INC_PRE_OFFSET_INCR_BF_WID (24)
#define FB_SYS_LOCAL_ISYNC_INC_PRE_OFFSET_INCR_BF_MSK (0x00FFFFFF)
#define FB_SYS_LOCAL_ISYNC_INC_PRE_OFFSET_INCR_BF_DEF (0x00000000)

///< Bits [7:0] of the 10ms frame counter.
#define FB_SYS_LOCAL_ISYNC_INC_PRE_FRAME_INCR_BF_OFF (24)
#define FB_SYS_LOCAL_ISYNC_INC_PRE_FRAME_INCR_BF_WID ( 8)
#define FB_SYS_LOCAL_ISYNC_INC_PRE_FRAME_INCR_BF_MSK (0xFF000000)
#define FB_SYS_LOCAL_ISYNC_INC_PRE_FRAME_INCR_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_ISYNC_MAP_ISYNC_CNT_ADJ register description at address offset 0x210
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/ISYNC_MAP/ISYNC_CNT_ADJ
  * Isync Timer Count Adjustment Register
  */

typedef union {
  struct {
    uint32_t FRAME_ADJ : 8;
    ///< Bits [7:0] of the 10ms frame counter.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} fb_sys_local_isync_cnt_adj_reg_t;

#define FB_SYS_LOCAL_ISYNC_CNT_ADJ_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_ISYNC_CNT_ADJ_RD_MASK (0x000000ffU)
#define FB_SYS_LOCAL_ISYNC_CNT_ADJ_WR_MASK (0x000000ffU)


///< Bits [7:0] of the 10ms frame counter.
#define FB_SYS_LOCAL_ISYNC_CNT_ADJ_FRAME_ADJ_BF_OFF ( 0)
#define FB_SYS_LOCAL_ISYNC_CNT_ADJ_FRAME_ADJ_BF_WID ( 8)
#define FB_SYS_LOCAL_ISYNC_CNT_ADJ_FRAME_ADJ_BF_MSK (0x000000FF)
#define FB_SYS_LOCAL_ISYNC_CNT_ADJ_FRAME_ADJ_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_ISYNC_MAP_ISYNC_BFN_CNT_SYNC register description at address offset 0x214
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/ISYNC_MAP/ISYNC_BFN_CNT_SYNC
  * BFN Count Sync
  */

typedef union {
  struct {
    uint32_t OFFSET : 24;
    ///< Offset from nearest 10ms frame, in clock cycles.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t FRAME : 8;
    ///< Bits [7:0] fo the count of 10ms frames.
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} fb_sys_local_isync_bfn_cnt_sync_reg_t;

#define FB_SYS_LOCAL_ISYNC_BFN_CNT_SYNC_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_ISYNC_BFN_CNT_SYNC_RD_MASK (0xffffffffU)
#define FB_SYS_LOCAL_ISYNC_BFN_CNT_SYNC_WR_MASK (0x00000000U)


///< Offset from nearest 10ms frame, in clock cycles.
#define FB_SYS_LOCAL_ISYNC_BFN_CNT_SYNC_OFFSET_BF_OFF ( 0)
#define FB_SYS_LOCAL_ISYNC_BFN_CNT_SYNC_OFFSET_BF_WID (24)
#define FB_SYS_LOCAL_ISYNC_BFN_CNT_SYNC_OFFSET_BF_MSK (0x00FFFFFF)
#define FB_SYS_LOCAL_ISYNC_BFN_CNT_SYNC_OFFSET_BF_DEF (0x00000000)

///< Bits [7:0] fo the count of 10ms frames.
#define FB_SYS_LOCAL_ISYNC_BFN_CNT_SYNC_FRAME_BF_OFF (24)
#define FB_SYS_LOCAL_ISYNC_BFN_CNT_SYNC_FRAME_BF_WID ( 8)
#define FB_SYS_LOCAL_ISYNC_BFN_CNT_SYNC_FRAME_BF_MSK (0xFF000000)
#define FB_SYS_LOCAL_ISYNC_BFN_CNT_SYNC_FRAME_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_ISYNC_MAP_ISYNC_BFN_CNT register description at address offset 0x218
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/ISYNC_MAP/ISYNC_BFN_CNT
  * BFN Count
  */

typedef union {
  struct {
    uint32_t OFFSET : 24;
    ///< Offset from nearest 10ms frame, in clock cycles.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t FRAME : 8;
    ///< LSB's of Count of 10ms frames.
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} fb_sys_local_isync_bfn_cnt_reg_t;

#define FB_SYS_LOCAL_ISYNC_BFN_CNT_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_ISYNC_BFN_CNT_RD_MASK (0xffffffffU)
#define FB_SYS_LOCAL_ISYNC_BFN_CNT_WR_MASK (0x00000000U)


///< Offset from nearest 10ms frame, in clock cycles.
#define FB_SYS_LOCAL_ISYNC_BFN_CNT_OFFSET_BF_OFF ( 0)
#define FB_SYS_LOCAL_ISYNC_BFN_CNT_OFFSET_BF_WID (24)
#define FB_SYS_LOCAL_ISYNC_BFN_CNT_OFFSET_BF_MSK (0x00FFFFFF)
#define FB_SYS_LOCAL_ISYNC_BFN_CNT_OFFSET_BF_DEF (0x00000000)

///< LSB's of Count of 10ms frames.
#define FB_SYS_LOCAL_ISYNC_BFN_CNT_FRAME_BF_OFF (24)
#define FB_SYS_LOCAL_ISYNC_BFN_CNT_FRAME_BF_WID ( 8)
#define FB_SYS_LOCAL_ISYNC_BFN_CNT_FRAME_BF_MSK (0xFF000000)
#define FB_SYS_LOCAL_ISYNC_BFN_CNT_FRAME_BF_DEF (0x00000000)


/** @brief FB_SYS_LOCAL_REG_ABC_BFN_EVENTS_BFNE_CONFIG[21] register description at address offset 0x400
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/ABC_BFN_EVENTS/BFNE_CONFIG
  * BFN Event Config Register
  */

typedef union {
  struct {
    uint32_t ENABLE : 1;
    ///< Set to 1 to enable the operation of the bfn_event module. When running
    ///< in repeat mode, set this back to zero to immediately halt the operation.
    ///< NOte that this must be set to 1 for the force mechanism (See BFN_START
    ///< register) to work.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t MODE : 2;
    ///< Selects the mode of operation. Note that the force mechanism can be
    ///< triggered (see BFNE_START) regardless of which mode is selected here.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t OUTPUT_MODE : 1;
    ///< Selects whether the BFN_EVENT output toggles at each event, or produces
    ///< a single cycle pulse.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t DEBUG_MODE : 2;
    ///< Controls what appears in BFN_EVENT_STAT DEBUG field, which is 28 bits.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} fb_sys_local_bfne_cfg_reg_t;

#define FB_SYS_LOCAL_BFNE_CFG_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_BFNE_CFG_RD_MASK (0x0000003fU)
#define FB_SYS_LOCAL_BFNE_CFG_WR_MASK (0x0000003fU)


///< Set to 1 to enable the operation of the bfn_event module. When running
///< in repeat mode, set this back to zero to immediately halt the operation.
///< NOte that this must be set to 1 for the force mechanism (See BFN_START
///< register) to work.
#define FB_SYS_LOCAL_BFNE_CFG_EN_BF_OFF ( 0)
#define FB_SYS_LOCAL_BFNE_CFG_EN_BF_WID ( 1)
#define FB_SYS_LOCAL_BFNE_CFG_EN_BF_MSK (0x00000001)
#define FB_SYS_LOCAL_BFNE_CFG_EN_BF_DEF (0x00000000)

///< Selects the mode of operation. Note that the force mechanism can be
///< triggered (see BFNE_START) regardless of which mode is selected here.
#define FB_SYS_LOCAL_BFNE_CFG_MODE_BF_OFF ( 1)
#define FB_SYS_LOCAL_BFNE_CFG_MODE_BF_WID ( 2)
#define FB_SYS_LOCAL_BFNE_CFG_MODE_BF_MSK (0x00000006)
#define FB_SYS_LOCAL_BFNE_CFG_MODE_BF_DEF (0x00000000)

///< Selects whether the BFN_EVENT output toggles at each event, or produces
///< a single cycle pulse.
#define FB_SYS_LOCAL_BFNE_CFG_OUTPUT_MODE_BF_OFF ( 3)
#define FB_SYS_LOCAL_BFNE_CFG_OUTPUT_MODE_BF_WID ( 1)
#define FB_SYS_LOCAL_BFNE_CFG_OUTPUT_MODE_BF_MSK (0x00000008)
#define FB_SYS_LOCAL_BFNE_CFG_OUTPUT_MODE_BF_DEF (0x00000000)

///< Controls what appears in BFN_EVENT_STAT DEBUG field, which is 28 bits.
#define FB_SYS_LOCAL_BFNE_CFG_DBG_MODE_BF_OFF ( 4)
#define FB_SYS_LOCAL_BFNE_CFG_DBG_MODE_BF_WID ( 2)
#define FB_SYS_LOCAL_BFNE_CFG_DBG_MODE_BF_MSK (0x00000030)
#define FB_SYS_LOCAL_BFNE_CFG_DBG_MODE_BF_DEF (0x00000000)
#define FB_SYS_LOCAL_BFNE_CFG_ARR_SZ0 (21)
#define FB_SYS_LOCAL_BFNE_CFG_ARRAY_STRIDE0 (0x0004)


/** @brief FB_SYS_LOCAL_REG_ABC_BFN_EVENTS_BFNE_INCR[21] register description at address offset 0x480
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/ABC_BFN_EVENTS/BFNE_INCR
  * BFN Event Increment
  */

typedef union {
  struct {
    uint32_t OFFSET : 24;
    ///< Offset from nearest 10ms frame, in clock cycles.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FRAME : 8;
    ///< Count of 10ms frames.
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} fb_sys_local_bfne_incr_reg_t;

#define FB_SYS_LOCAL_BFNE_INCR_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_BFNE_INCR_RD_MASK (0xffffffffU)
#define FB_SYS_LOCAL_BFNE_INCR_WR_MASK (0xffffffffU)


///< Offset from nearest 10ms frame, in clock cycles.
#define FB_SYS_LOCAL_BFNE_INCR_OFFSET_BF_OFF ( 0)
#define FB_SYS_LOCAL_BFNE_INCR_OFFSET_BF_WID (24)
#define FB_SYS_LOCAL_BFNE_INCR_OFFSET_BF_MSK (0x00FFFFFF)
#define FB_SYS_LOCAL_BFNE_INCR_OFFSET_BF_DEF (0x00000000)

///< Count of 10ms frames.
#define FB_SYS_LOCAL_BFNE_INCR_FRAME_BF_OFF (24)
#define FB_SYS_LOCAL_BFNE_INCR_FRAME_BF_WID ( 8)
#define FB_SYS_LOCAL_BFNE_INCR_FRAME_BF_MSK (0xFF000000)
#define FB_SYS_LOCAL_BFNE_INCR_FRAME_BF_DEF (0x00000000)
#define FB_SYS_LOCAL_BFNE_INCR_ARR_SZ0 (21)
#define FB_SYS_LOCAL_BFNE_INCR_ARRAY_STRIDE0 (0x0004)


/** @brief FB_SYS_LOCAL_REG_ABC_BFN_EVENTS_BFNE_START[21] register description at address offset 0x500
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/ABC_BFN_EVENTS/BFNE_START
  * BFN Event Start
  */

typedef union {
  struct {
    uint32_t OFFSET : 24;
    ///< Offset from nearest 10ms frame, in clock cycles.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FRAME : 8;
    ///< Count of 10ms frames.
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} fb_sys_local_bfne_start_reg_t;

#define FB_SYS_LOCAL_BFNE_START_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_BFNE_START_RD_MASK (0xffffffffU)
#define FB_SYS_LOCAL_BFNE_START_WR_MASK (0xffffffffU)


///< Offset from nearest 10ms frame, in clock cycles.
#define FB_SYS_LOCAL_BFNE_START_OFFSET_BF_OFF ( 0)
#define FB_SYS_LOCAL_BFNE_START_OFFSET_BF_WID (24)
#define FB_SYS_LOCAL_BFNE_START_OFFSET_BF_MSK (0x00FFFFFF)
#define FB_SYS_LOCAL_BFNE_START_OFFSET_BF_DEF (0x00000000)

///< Count of 10ms frames.
#define FB_SYS_LOCAL_BFNE_START_FRAME_BF_OFF (24)
#define FB_SYS_LOCAL_BFNE_START_FRAME_BF_WID ( 8)
#define FB_SYS_LOCAL_BFNE_START_FRAME_BF_MSK (0xFF000000)
#define FB_SYS_LOCAL_BFNE_START_FRAME_BF_DEF (0x00000000)
#define FB_SYS_LOCAL_BFNE_START_ARR_SZ0 (21)
#define FB_SYS_LOCAL_BFNE_START_ARRAY_STRIDE0 (0x0004)


/** @brief FB_SYS_LOCAL_REG_ABC_BFN_EVENTS_BFNE_STAT[21] register description at address offset 0x580
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_sys_local/reg/ABC_BFN_EVENTS/BFNE_STAT
  * BFN Event Status Register
  */

typedef union {
  struct {
    uint32_t CURRENT_VALUE : 1;
    ///< This bit shows the current output value of the bfn_event module
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t WAITING : 1;
    ///< This bit indicates when the bfn_event module is waiting for the programmed
    ///< bfn_start time. In Repeat mode, this will only toggle low during the
    ///< single cycle of each event, so is not useful.
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t DONE : 1;
    ///< This bit indicates that the bfn_module has reached its programmed
    ///< bfn time. In Repeate mode, this will only toggle high during the single
    ///< cycle of each event, so is not usefule.
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t DEBUG : 29;
    ///< This field is different based on the DEBUG_MODE setting in the BFNE_CONFIG
    ///< register.
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
  } ;
  uint32_t value;
} fb_sys_local_bfne_stat_reg_t;

#define FB_SYS_LOCAL_BFNE_STAT_DEFAULT (0x00000000U)
#define FB_SYS_LOCAL_BFNE_STAT_RD_MASK (0xffffffffU)
#define FB_SYS_LOCAL_BFNE_STAT_WR_MASK (0x00000000U)


///< This bit shows the current output value of the bfn_event module
#define FB_SYS_LOCAL_BFNE_STAT_CURRENT_VAL_BF_OFF ( 0)
#define FB_SYS_LOCAL_BFNE_STAT_CURRENT_VAL_BF_WID ( 1)
#define FB_SYS_LOCAL_BFNE_STAT_CURRENT_VAL_BF_MSK (0x00000001)
#define FB_SYS_LOCAL_BFNE_STAT_CURRENT_VAL_BF_DEF (0x00000000)

///< This bit indicates when the bfn_event module is waiting for the programmed
///< bfn_start time. In Repeat mode, this will only toggle low during the
///< single cycle of each event, so is not useful.
#define FB_SYS_LOCAL_BFNE_STAT_WAITING_BF_OFF ( 1)
#define FB_SYS_LOCAL_BFNE_STAT_WAITING_BF_WID ( 1)
#define FB_SYS_LOCAL_BFNE_STAT_WAITING_BF_MSK (0x00000002)
#define FB_SYS_LOCAL_BFNE_STAT_WAITING_BF_DEF (0x00000000)

///< This bit indicates that the bfn_module has reached its programmed
///< bfn time. In Repeate mode, this will only toggle high during the single
///< cycle of each event, so is not usefule.
#define FB_SYS_LOCAL_BFNE_STAT_DONE_BF_OFF ( 2)
#define FB_SYS_LOCAL_BFNE_STAT_DONE_BF_WID ( 1)
#define FB_SYS_LOCAL_BFNE_STAT_DONE_BF_MSK (0x00000004)
#define FB_SYS_LOCAL_BFNE_STAT_DONE_BF_DEF (0x00000000)

///< This field is different based on the DEBUG_MODE setting in the BFNE_CONFIG
///< register.
#define FB_SYS_LOCAL_BFNE_STAT_DBG_BF_OFF ( 3)
#define FB_SYS_LOCAL_BFNE_STAT_DBG_BF_WID (29)
#define FB_SYS_LOCAL_BFNE_STAT_DBG_BF_MSK (0xFFFFFFF8)
#define FB_SYS_LOCAL_BFNE_STAT_DBG_BF_DEF (0x00000000)
#define FB_SYS_LOCAL_BFNE_STAT_ARR_SZ0 (21)
#define FB_SYS_LOCAL_BFNE_STAT_ARRAY_STRIDE0 (0x0004)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define FB_SYS_LOCAL_INT_HI_SUM_REG(_BASE) ((fb_sys_local_int_hi_sum_reg_t*) FB_SYS_LOCAL_INT_HI_SUM_ADR(_BASE))
#define FB_SYS_LOCAL_INT_LO_SUM_REG(_BASE) ((fb_sys_local_int_lo_sum_reg_t*) FB_SYS_LOCAL_INT_LO_SUM_ADR(_BASE))
#define FB_SYS_LOCAL_BRDG_STAT_REG(_BASE) ((fb_sys_local_brdg_stat_reg_t*) FB_SYS_LOCAL_BRDG_STAT_ADR(_BASE))
#define FB_SYS_LOCAL_DP_INIT_REG(_BASE) ((fb_sys_local_dp_init_reg_t*) FB_SYS_LOCAL_DP_INIT_ADR(_BASE))
#define FB_SYS_LOCAL_TOP_INT_STAT_REG(_BASE) ((fb_sys_local_top_int_stat_reg_t*) FB_SYS_LOCAL_TOP_INT_STAT_ADR(_BASE))
#define FB_SYS_LOCAL_TOP_INT_HI_EN_REG(_BASE) ((fb_sys_local_top_int_hi_en_reg_t*) FB_SYS_LOCAL_TOP_INT_HI_EN_ADR(_BASE))
#define FB_SYS_LOCAL_TOP_INT_LO_EN_REG(_BASE) ((fb_sys_local_top_int_lo_en_reg_t*) FB_SYS_LOCAL_TOP_INT_LO_EN_ADR(_BASE))
#define FB_SYS_LOCAL_TOP_INT_CLR_REG(_BASE) ((fb_sys_local_top_int_clr_reg_t*) FB_SYS_LOCAL_TOP_INT_CLR_ADR(_BASE))
#define FB_SYS_LOCAL_TOP_INT_FORCE_REG(_BASE) ((fb_sys_local_top_int_force_reg_t*) FB_SYS_LOCAL_TOP_INT_FORCE_ADR(_BASE))
#define FB_SYS_LOCAL_SYS_RATE0_REG(_BASE) ((fb_sys_local_sys_rate0_reg_t*) FB_SYS_LOCAL_SYS_RATE0_ADR(_BASE))
#define FB_SYS_LOCAL_SYS_RATE1_REG(_BASE) ((fb_sys_local_sys_rate1_reg_t*) FB_SYS_LOCAL_SYS_RATE1_ADR(_BASE))
#define FB_SYS_LOCAL_SWG_MUX_REG(_BASE) ((fb_sys_local_swg_mux_reg_t*) FB_SYS_LOCAL_SWG_MUX_ADR(_BASE))
#define FB_SYS_LOCAL_SWG_TX_RISE_CH0_REG(_BASE) ((fb_sys_local_swg_tx_rise_ch0_reg_t*) FB_SYS_LOCAL_SWG_TX_RISE_CH0_ADR(_BASE))
#define FB_SYS_LOCAL_SWG_TX_FALL_CH0_REG(_BASE) ((fb_sys_local_swg_tx_fall_ch0_reg_t*) FB_SYS_LOCAL_SWG_TX_FALL_CH0_ADR(_BASE))
#define FB_SYS_LOCAL_SWG_TX_RISE_CH1_REG(_BASE) ((fb_sys_local_swg_tx_rise_ch1_reg_t*) FB_SYS_LOCAL_SWG_TX_RISE_CH1_ADR(_BASE))
#define FB_SYS_LOCAL_SWG_TX_FALL_CH1_REG(_BASE) ((fb_sys_local_swg_tx_fall_ch1_reg_t*) FB_SYS_LOCAL_SWG_TX_FALL_CH1_ADR(_BASE))
#define FB_SYS_LOCAL_RXG_MUX_REG(_BASE) ((fb_sys_local_rxg_mux_reg_t*) FB_SYS_LOCAL_RXG_MUX_ADR(_BASE))
#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT0_REG(_BASE) ((fb_sys_local_cap_cfg_ch0_ant0_reg_t*) FB_SYS_LOCAL_CAP_CFG_CH0_ANT0_ADR(_BASE))
#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT1_REG(_BASE) ((fb_sys_local_cap_cfg_ch0_ant1_reg_t*) FB_SYS_LOCAL_CAP_CFG_CH0_ANT1_ADR(_BASE))
#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT2_REG(_BASE) ((fb_sys_local_cap_cfg_ch0_ant2_reg_t*) FB_SYS_LOCAL_CAP_CFG_CH0_ANT2_ADR(_BASE))
#define FB_SYS_LOCAL_CAP_CFG_CH0_ANT3_REG(_BASE) ((fb_sys_local_cap_cfg_ch0_ant3_reg_t*) FB_SYS_LOCAL_CAP_CFG_CH0_ANT3_ADR(_BASE))
#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT0_REG(_BASE) ((fb_sys_local_cap_cfg_ch1_ant0_reg_t*) FB_SYS_LOCAL_CAP_CFG_CH1_ANT0_ADR(_BASE))
#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT1_REG(_BASE) ((fb_sys_local_cap_cfg_ch1_ant1_reg_t*) FB_SYS_LOCAL_CAP_CFG_CH1_ANT1_ADR(_BASE))
#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT2_REG(_BASE) ((fb_sys_local_cap_cfg_ch1_ant2_reg_t*) FB_SYS_LOCAL_CAP_CFG_CH1_ANT2_ADR(_BASE))
#define FB_SYS_LOCAL_CAP_CFG_CH1_ANT3_REG(_BASE) ((fb_sys_local_cap_cfg_ch1_ant3_reg_t*) FB_SYS_LOCAL_CAP_CFG_CH1_ANT3_ADR(_BASE))
#define FB_SYS_LOCAL_ONOFF_CFG_CH0_REG(_BASE) ((fb_sys_local_onoff_cfg_ch0_reg_t*) FB_SYS_LOCAL_ONOFF_CFG_CH0_ADR(_BASE))
#define FB_SYS_LOCAL_ONOFF_CFG_CH1_REG(_BASE) ((fb_sys_local_onoff_cfg_ch1_reg_t*) FB_SYS_LOCAL_ONOFF_CFG_CH1_ADR(_BASE))
#define FB_SYS_LOCAL_CVA_I_DATA_0_REG(_BASE) ((fb_sys_local_cva_i_data_0_reg_t*) FB_SYS_LOCAL_CVA_I_DATA_0_ADR(_BASE))
#define FB_SYS_LOCAL_CVA_Q_DATA_0_REG(_BASE) ((fb_sys_local_cva_q_data_0_reg_t*) FB_SYS_LOCAL_CVA_Q_DATA_0_ADR(_BASE))
#define FB_SYS_LOCAL_CVA_I_DATA_1_REG(_BASE) ((fb_sys_local_cva_i_data_1_reg_t*) FB_SYS_LOCAL_CVA_I_DATA_1_ADR(_BASE))
#define FB_SYS_LOCAL_CVA_Q_DATA_1_REG(_BASE) ((fb_sys_local_cva_q_data_1_reg_t*) FB_SYS_LOCAL_CVA_Q_DATA_1_ADR(_BASE))
#define FB_SYS_LOCAL_CVA_CFG_REG(_BASE) ((fb_sys_local_cva_cfg_reg_t*) FB_SYS_LOCAL_CVA_CFG_ADR(_BASE))
#define FB_SYS_LOCAL_FB0_SWG_GATE_RISE_REG(_BASE) ((fb_sys_local_fb0_swg_gate_rise_reg_t*) FB_SYS_LOCAL_FB0_SWG_GATE_RISE_ADR(_BASE))
#define FB_SYS_LOCAL_FB0_SWG_GATE_FALL_REG(_BASE) ((fb_sys_local_fb0_swg_gate_fall_reg_t*) FB_SYS_LOCAL_FB0_SWG_GATE_FALL_ADR(_BASE))
#define FB_SYS_LOCAL_FB1_SWG_GATE_RISE_REG(_BASE) ((fb_sys_local_fb1_swg_gate_rise_reg_t*) FB_SYS_LOCAL_FB1_SWG_GATE_RISE_ADR(_BASE))
#define FB_SYS_LOCAL_FB1_SWG_GATE_FALL_REG(_BASE) ((fb_sys_local_fb1_swg_gate_fall_reg_t*) FB_SYS_LOCAL_FB1_SWG_GATE_FALL_ADR(_BASE))
#define FB_SYS_LOCAL_RX0_SWG_GATE_RISE_REG(_BASE) ((fb_sys_local_rx0_swg_gate_rise_reg_t*) FB_SYS_LOCAL_RX0_SWG_GATE_RISE_ADR(_BASE))
#define FB_SYS_LOCAL_RX0_SWG_GATE_FALL_REG(_BASE) ((fb_sys_local_rx0_swg_gate_fall_reg_t*) FB_SYS_LOCAL_RX0_SWG_GATE_FALL_ADR(_BASE))
#define FB_SYS_LOCAL_RX1_SWG_GATE_RISE_REG(_BASE) ((fb_sys_local_rx1_swg_gate_rise_reg_t*) FB_SYS_LOCAL_RX1_SWG_GATE_RISE_ADR(_BASE))
#define FB_SYS_LOCAL_RX1_SWG_GATE_FALL_REG(_BASE) ((fb_sys_local_rx1_swg_gate_fall_reg_t*) FB_SYS_LOCAL_RX1_SWG_GATE_FALL_ADR(_BASE))
#define FB_SYS_LOCAL_TX0_SWG_GATE_RISE_REG(_BASE) ((fb_sys_local_tx0_swg_gate_rise_reg_t*) FB_SYS_LOCAL_TX0_SWG_GATE_RISE_ADR(_BASE))
#define FB_SYS_LOCAL_TX0_SWG_GATE_FALL_REG(_BASE) ((fb_sys_local_tx0_swg_gate_fall_reg_t*) FB_SYS_LOCAL_TX0_SWG_GATE_FALL_ADR(_BASE))
#define FB_SYS_LOCAL_TX1_SWG_GATE_RISE_REG(_BASE) ((fb_sys_local_tx1_swg_gate_rise_reg_t*) FB_SYS_LOCAL_TX1_SWG_GATE_RISE_ADR(_BASE))
#define FB_SYS_LOCAL_TX1_SWG_GATE_FALL_REG(_BASE) ((fb_sys_local_tx1_swg_gate_fall_reg_t*) FB_SYS_LOCAL_TX1_SWG_GATE_FALL_ADR(_BASE))
#define FB_SYS_LOCAL_SMON_R0_REG(_BASE) ((fb_sys_local_smon_r0_reg_t*) FB_SYS_LOCAL_SMON_R0_ADR(_BASE))
#define FB_SYS_LOCAL_SMON_R1_REG(_BASE) ((fb_sys_local_smon_r1_reg_t*) FB_SYS_LOCAL_SMON_R1_ADR(_BASE))
#define FB_SYS_LOCAL_SMON_R2_REG(_BASE) ((fb_sys_local_smon_r2_reg_t*) FB_SYS_LOCAL_SMON_R2_ADR(_BASE))
#define FB_SYS_LOCAL_SMON_R3_REG(_BASE) ((fb_sys_local_smon_r3_reg_t*) FB_SYS_LOCAL_SMON_R3_ADR(_BASE))
#define FB_SYS_LOCAL_SMON_R4_REG(_BASE) ((fb_sys_local_smon_r4_reg_t*) FB_SYS_LOCAL_SMON_R4_ADR(_BASE))
#define FB_SYS_LOCAL_SMON_R5_REG(_BASE) ((fb_sys_local_smon_r5_reg_t*) FB_SYS_LOCAL_SMON_R5_ADR(_BASE))
#define FB_SYS_LOCAL_SMON_R6_REG(_BASE) ((fb_sys_local_smon_r6_reg_t*) FB_SYS_LOCAL_SMON_R6_ADR(_BASE))
#define FB_SYS_LOCAL_SMON_R7_REG(_BASE) ((fb_sys_local_smon_r7_reg_t*) FB_SYS_LOCAL_SMON_R7_ADR(_BASE))
#define FB_SYS_LOCAL_ISYNC_CTRL_REG(_BASE) ((fb_sys_local_isync_ctrl_reg_t*) FB_SYS_LOCAL_ISYNC_CTRL_ADR(_BASE))
#define FB_SYS_LOCAL_ISYNC_LCNT_INC_REG(_BASE) ((fb_sys_local_isync_lcnt_inc_reg_t*) FB_SYS_LOCAL_ISYNC_LCNT_INC_ADR(_BASE))
#define FB_SYS_LOCAL_ISYNC_TEN_MS_CNT_REG(_BASE) ((fb_sys_local_isync_ten_ms_cnt_reg_t*) FB_SYS_LOCAL_ISYNC_TEN_MS_CNT_ADR(_BASE))
#define FB_SYS_LOCAL_ISYNC_INC_PRE_REG(_BASE) ((fb_sys_local_isync_inc_pre_reg_t*) FB_SYS_LOCAL_ISYNC_INC_PRE_ADR(_BASE))
#define FB_SYS_LOCAL_ISYNC_CNT_ADJ_REG(_BASE) ((fb_sys_local_isync_cnt_adj_reg_t*) FB_SYS_LOCAL_ISYNC_CNT_ADJ_ADR(_BASE))
#define FB_SYS_LOCAL_ISYNC_BFN_CNT_SYNC_REG(_BASE) ((fb_sys_local_isync_bfn_cnt_sync_reg_t*) FB_SYS_LOCAL_ISYNC_BFN_CNT_SYNC_ADR(_BASE))
#define FB_SYS_LOCAL_ISYNC_BFN_CNT_REG(_BASE) ((fb_sys_local_isync_bfn_cnt_reg_t*) FB_SYS_LOCAL_ISYNC_BFN_CNT_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_CFG0_REG(_BASE) ((fb_sys_local_bfne_cfg_reg_t*) FB_SYS_LOCAL_BFNE_CFG0_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_CFG1_REG(_BASE) ((fb_sys_local_bfne_cfg_reg_t*) FB_SYS_LOCAL_BFNE_CFG1_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_CFG2_REG(_BASE) ((fb_sys_local_bfne_cfg_reg_t*) FB_SYS_LOCAL_BFNE_CFG2_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_CFG3_REG(_BASE) ((fb_sys_local_bfne_cfg_reg_t*) FB_SYS_LOCAL_BFNE_CFG3_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_CFG4_REG(_BASE) ((fb_sys_local_bfne_cfg_reg_t*) FB_SYS_LOCAL_BFNE_CFG4_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_CFG5_REG(_BASE) ((fb_sys_local_bfne_cfg_reg_t*) FB_SYS_LOCAL_BFNE_CFG5_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_CFG6_REG(_BASE) ((fb_sys_local_bfne_cfg_reg_t*) FB_SYS_LOCAL_BFNE_CFG6_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_CFG7_REG(_BASE) ((fb_sys_local_bfne_cfg_reg_t*) FB_SYS_LOCAL_BFNE_CFG7_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_CFG8_REG(_BASE) ((fb_sys_local_bfne_cfg_reg_t*) FB_SYS_LOCAL_BFNE_CFG8_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_CFG9_REG(_BASE) ((fb_sys_local_bfne_cfg_reg_t*) FB_SYS_LOCAL_BFNE_CFG9_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_CFG10_REG(_BASE) ((fb_sys_local_bfne_cfg_reg_t*) FB_SYS_LOCAL_BFNE_CFG10_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_CFG11_REG(_BASE) ((fb_sys_local_bfne_cfg_reg_t*) FB_SYS_LOCAL_BFNE_CFG11_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_CFG12_REG(_BASE) ((fb_sys_local_bfne_cfg_reg_t*) FB_SYS_LOCAL_BFNE_CFG12_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_CFG13_REG(_BASE) ((fb_sys_local_bfne_cfg_reg_t*) FB_SYS_LOCAL_BFNE_CFG13_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_CFG14_REG(_BASE) ((fb_sys_local_bfne_cfg_reg_t*) FB_SYS_LOCAL_BFNE_CFG14_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_CFG15_REG(_BASE) ((fb_sys_local_bfne_cfg_reg_t*) FB_SYS_LOCAL_BFNE_CFG15_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_CFG16_REG(_BASE) ((fb_sys_local_bfne_cfg_reg_t*) FB_SYS_LOCAL_BFNE_CFG16_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_CFG17_REG(_BASE) ((fb_sys_local_bfne_cfg_reg_t*) FB_SYS_LOCAL_BFNE_CFG17_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_CFG18_REG(_BASE) ((fb_sys_local_bfne_cfg_reg_t*) FB_SYS_LOCAL_BFNE_CFG18_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_CFG19_REG(_BASE) ((fb_sys_local_bfne_cfg_reg_t*) FB_SYS_LOCAL_BFNE_CFG19_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_CFG20_REG(_BASE) ((fb_sys_local_bfne_cfg_reg_t*) FB_SYS_LOCAL_BFNE_CFG20_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_INCR0_REG(_BASE) ((fb_sys_local_bfne_incr_reg_t*) FB_SYS_LOCAL_BFNE_INCR0_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_INCR1_REG(_BASE) ((fb_sys_local_bfne_incr_reg_t*) FB_SYS_LOCAL_BFNE_INCR1_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_INCR2_REG(_BASE) ((fb_sys_local_bfne_incr_reg_t*) FB_SYS_LOCAL_BFNE_INCR2_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_INCR3_REG(_BASE) ((fb_sys_local_bfne_incr_reg_t*) FB_SYS_LOCAL_BFNE_INCR3_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_INCR4_REG(_BASE) ((fb_sys_local_bfne_incr_reg_t*) FB_SYS_LOCAL_BFNE_INCR4_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_INCR5_REG(_BASE) ((fb_sys_local_bfne_incr_reg_t*) FB_SYS_LOCAL_BFNE_INCR5_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_INCR6_REG(_BASE) ((fb_sys_local_bfne_incr_reg_t*) FB_SYS_LOCAL_BFNE_INCR6_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_INCR7_REG(_BASE) ((fb_sys_local_bfne_incr_reg_t*) FB_SYS_LOCAL_BFNE_INCR7_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_INCR8_REG(_BASE) ((fb_sys_local_bfne_incr_reg_t*) FB_SYS_LOCAL_BFNE_INCR8_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_INCR9_REG(_BASE) ((fb_sys_local_bfne_incr_reg_t*) FB_SYS_LOCAL_BFNE_INCR9_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_INCR10_REG(_BASE) ((fb_sys_local_bfne_incr_reg_t*) FB_SYS_LOCAL_BFNE_INCR10_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_INCR11_REG(_BASE) ((fb_sys_local_bfne_incr_reg_t*) FB_SYS_LOCAL_BFNE_INCR11_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_INCR12_REG(_BASE) ((fb_sys_local_bfne_incr_reg_t*) FB_SYS_LOCAL_BFNE_INCR12_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_INCR13_REG(_BASE) ((fb_sys_local_bfne_incr_reg_t*) FB_SYS_LOCAL_BFNE_INCR13_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_INCR14_REG(_BASE) ((fb_sys_local_bfne_incr_reg_t*) FB_SYS_LOCAL_BFNE_INCR14_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_INCR15_REG(_BASE) ((fb_sys_local_bfne_incr_reg_t*) FB_SYS_LOCAL_BFNE_INCR15_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_INCR16_REG(_BASE) ((fb_sys_local_bfne_incr_reg_t*) FB_SYS_LOCAL_BFNE_INCR16_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_INCR17_REG(_BASE) ((fb_sys_local_bfne_incr_reg_t*) FB_SYS_LOCAL_BFNE_INCR17_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_INCR18_REG(_BASE) ((fb_sys_local_bfne_incr_reg_t*) FB_SYS_LOCAL_BFNE_INCR18_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_INCR19_REG(_BASE) ((fb_sys_local_bfne_incr_reg_t*) FB_SYS_LOCAL_BFNE_INCR19_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_INCR20_REG(_BASE) ((fb_sys_local_bfne_incr_reg_t*) FB_SYS_LOCAL_BFNE_INCR20_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_START0_REG(_BASE) ((fb_sys_local_bfne_start_reg_t*) FB_SYS_LOCAL_BFNE_START0_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_START1_REG(_BASE) ((fb_sys_local_bfne_start_reg_t*) FB_SYS_LOCAL_BFNE_START1_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_START2_REG(_BASE) ((fb_sys_local_bfne_start_reg_t*) FB_SYS_LOCAL_BFNE_START2_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_START3_REG(_BASE) ((fb_sys_local_bfne_start_reg_t*) FB_SYS_LOCAL_BFNE_START3_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_START4_REG(_BASE) ((fb_sys_local_bfne_start_reg_t*) FB_SYS_LOCAL_BFNE_START4_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_START5_REG(_BASE) ((fb_sys_local_bfne_start_reg_t*) FB_SYS_LOCAL_BFNE_START5_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_START6_REG(_BASE) ((fb_sys_local_bfne_start_reg_t*) FB_SYS_LOCAL_BFNE_START6_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_START7_REG(_BASE) ((fb_sys_local_bfne_start_reg_t*) FB_SYS_LOCAL_BFNE_START7_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_START8_REG(_BASE) ((fb_sys_local_bfne_start_reg_t*) FB_SYS_LOCAL_BFNE_START8_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_START9_REG(_BASE) ((fb_sys_local_bfne_start_reg_t*) FB_SYS_LOCAL_BFNE_START9_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_START10_REG(_BASE) ((fb_sys_local_bfne_start_reg_t*) FB_SYS_LOCAL_BFNE_START10_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_START11_REG(_BASE) ((fb_sys_local_bfne_start_reg_t*) FB_SYS_LOCAL_BFNE_START11_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_START12_REG(_BASE) ((fb_sys_local_bfne_start_reg_t*) FB_SYS_LOCAL_BFNE_START12_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_START13_REG(_BASE) ((fb_sys_local_bfne_start_reg_t*) FB_SYS_LOCAL_BFNE_START13_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_START14_REG(_BASE) ((fb_sys_local_bfne_start_reg_t*) FB_SYS_LOCAL_BFNE_START14_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_START15_REG(_BASE) ((fb_sys_local_bfne_start_reg_t*) FB_SYS_LOCAL_BFNE_START15_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_START16_REG(_BASE) ((fb_sys_local_bfne_start_reg_t*) FB_SYS_LOCAL_BFNE_START16_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_START17_REG(_BASE) ((fb_sys_local_bfne_start_reg_t*) FB_SYS_LOCAL_BFNE_START17_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_START18_REG(_BASE) ((fb_sys_local_bfne_start_reg_t*) FB_SYS_LOCAL_BFNE_START18_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_START19_REG(_BASE) ((fb_sys_local_bfne_start_reg_t*) FB_SYS_LOCAL_BFNE_START19_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_START20_REG(_BASE) ((fb_sys_local_bfne_start_reg_t*) FB_SYS_LOCAL_BFNE_START20_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_STAT0_REG(_BASE) ((fb_sys_local_bfne_stat_reg_t*) FB_SYS_LOCAL_BFNE_STAT0_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_STAT1_REG(_BASE) ((fb_sys_local_bfne_stat_reg_t*) FB_SYS_LOCAL_BFNE_STAT1_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_STAT2_REG(_BASE) ((fb_sys_local_bfne_stat_reg_t*) FB_SYS_LOCAL_BFNE_STAT2_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_STAT3_REG(_BASE) ((fb_sys_local_bfne_stat_reg_t*) FB_SYS_LOCAL_BFNE_STAT3_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_STAT4_REG(_BASE) ((fb_sys_local_bfne_stat_reg_t*) FB_SYS_LOCAL_BFNE_STAT4_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_STAT5_REG(_BASE) ((fb_sys_local_bfne_stat_reg_t*) FB_SYS_LOCAL_BFNE_STAT5_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_STAT6_REG(_BASE) ((fb_sys_local_bfne_stat_reg_t*) FB_SYS_LOCAL_BFNE_STAT6_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_STAT7_REG(_BASE) ((fb_sys_local_bfne_stat_reg_t*) FB_SYS_LOCAL_BFNE_STAT7_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_STAT8_REG(_BASE) ((fb_sys_local_bfne_stat_reg_t*) FB_SYS_LOCAL_BFNE_STAT8_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_STAT9_REG(_BASE) ((fb_sys_local_bfne_stat_reg_t*) FB_SYS_LOCAL_BFNE_STAT9_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_STAT10_REG(_BASE) ((fb_sys_local_bfne_stat_reg_t*) FB_SYS_LOCAL_BFNE_STAT10_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_STAT11_REG(_BASE) ((fb_sys_local_bfne_stat_reg_t*) FB_SYS_LOCAL_BFNE_STAT11_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_STAT12_REG(_BASE) ((fb_sys_local_bfne_stat_reg_t*) FB_SYS_LOCAL_BFNE_STAT12_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_STAT13_REG(_BASE) ((fb_sys_local_bfne_stat_reg_t*) FB_SYS_LOCAL_BFNE_STAT13_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_STAT14_REG(_BASE) ((fb_sys_local_bfne_stat_reg_t*) FB_SYS_LOCAL_BFNE_STAT14_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_STAT15_REG(_BASE) ((fb_sys_local_bfne_stat_reg_t*) FB_SYS_LOCAL_BFNE_STAT15_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_STAT16_REG(_BASE) ((fb_sys_local_bfne_stat_reg_t*) FB_SYS_LOCAL_BFNE_STAT16_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_STAT17_REG(_BASE) ((fb_sys_local_bfne_stat_reg_t*) FB_SYS_LOCAL_BFNE_STAT17_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_STAT18_REG(_BASE) ((fb_sys_local_bfne_stat_reg_t*) FB_SYS_LOCAL_BFNE_STAT18_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_STAT19_REG(_BASE) ((fb_sys_local_bfne_stat_reg_t*) FB_SYS_LOCAL_BFNE_STAT19_ADR(_BASE))
#define FB_SYS_LOCAL_BFNE_STAT20_REG(_BASE) ((fb_sys_local_bfne_stat_reg_t*) FB_SYS_LOCAL_BFNE_STAT20_ADR(_BASE))

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    fb_sys_local_int_hi_sum_reg_t INT_HI_SUM;      /*< Address offset = 0x0 */
    fb_sys_local_int_lo_sum_reg_t INT_LO_SUM;      /*< Address offset = 0x4 */
    fb_sys_local_brdg_stat_reg_t BRDG_STAT;   /*< Address offset = 0x8 */
    fb_sys_local_dp_init_reg_t DP_INIT;         /*< Address offset = 0xc */
    const uint8_t        reservedArea0 [16];  /*< Address offset = 0x10 */
    fb_sys_local_top_int_stat_reg_t TOP_INT_STAT;  /*< Address offset = 0x20 */
    fb_sys_local_top_int_hi_en_reg_t TOP_INT_HI_EN;   /*< Address offset = 0x24 */
    fb_sys_local_top_int_lo_en_reg_t TOP_INT_LO_EN;   /*< Address offset = 0x28 */
    fb_sys_local_top_int_clr_reg_t TOP_INT_CLR;   /*< Address offset = 0x2c */
    fb_sys_local_top_int_force_reg_t TOP_INT_FORCE;   /*< Address offset = 0x30 */
    const uint8_t        reservedArea1 [12];  /*< Address offset = 0x34 */
    fb_sys_local_sys_rate0_reg_t SYS_RATE0;       /*< Address offset = 0x40 */
    fb_sys_local_sys_rate1_reg_t SYS_RATE1;       /*< Address offset = 0x44 */
    fb_sys_local_swg_mux_reg_t SWG_MUX;         /*< Address offset = 0x48 */
    fb_sys_local_swg_tx_rise_ch0_reg_t SWG_TX_RISE_CH0; /*< Address offset = 0x4c */
    fb_sys_local_swg_tx_fall_ch0_reg_t SWG_TX_FALL_CH0; /*< Address offset = 0x50 */
    fb_sys_local_swg_tx_rise_ch1_reg_t SWG_TX_RISE_CH1; /*< Address offset = 0x54 */
    fb_sys_local_swg_tx_fall_ch1_reg_t SWG_TX_FALL_CH1; /*< Address offset = 0x58 */
    fb_sys_local_rxg_mux_reg_t RXG_MUX;         /*< Address offset = 0x5c */
    fb_sys_local_cap_cfg_ch0_ant0_reg_t CAP_CFG_CH0_ANT0; /*< Address offset = 0x60 */
    fb_sys_local_cap_cfg_ch0_ant1_reg_t CAP_CFG_CH0_ANT1; /*< Address offset = 0x64 */
    fb_sys_local_cap_cfg_ch0_ant2_reg_t CAP_CFG_CH0_ANT2; /*< Address offset = 0x68 */
    fb_sys_local_cap_cfg_ch0_ant3_reg_t CAP_CFG_CH0_ANT3; /*< Address offset = 0x6c */
    fb_sys_local_cap_cfg_ch1_ant0_reg_t CAP_CFG_CH1_ANT0; /*< Address offset = 0x70 */
    fb_sys_local_cap_cfg_ch1_ant1_reg_t CAP_CFG_CH1_ANT1; /*< Address offset = 0x74 */
    fb_sys_local_cap_cfg_ch1_ant2_reg_t CAP_CFG_CH1_ANT2; /*< Address offset = 0x78 */
    fb_sys_local_cap_cfg_ch1_ant3_reg_t CAP_CFG_CH1_ANT3; /*< Address offset = 0x7c */
    fb_sys_local_onoff_cfg_ch0_reg_t ONOFF_CFG_CH0;   /*< Address offset = 0x80 */
    fb_sys_local_onoff_cfg_ch1_reg_t ONOFF_CFG_CH1;   /*< Address offset = 0x84 */
    const uint8_t        reservedArea2 [8];   /*< Address offset = 0x88 */
    fb_sys_local_cva_i_data_0_reg_t CVA_I_DATA_0;    /*< Address offset = 0x90 */
    fb_sys_local_cva_q_data_0_reg_t CVA_Q_DATA_0;    /*< Address offset = 0x94 */
    fb_sys_local_cva_i_data_1_reg_t CVA_I_DATA_1;    /*< Address offset = 0x98 */
    fb_sys_local_cva_q_data_1_reg_t CVA_Q_DATA_1;    /*< Address offset = 0x9c */
    fb_sys_local_cva_cfg_reg_t CVA_CFG;      /*< Address offset = 0xa0 */
    const uint8_t        reservedArea3 [12];  /*< Address offset = 0xa4 */
    fb_sys_local_fb0_swg_gate_rise_reg_t FB0_SWG_GATE_RISE; /*< Address offset = 0xb0 */
    fb_sys_local_fb0_swg_gate_fall_reg_t FB0_SWG_GATE_FALL; /*< Address offset = 0xb4 */
    fb_sys_local_fb1_swg_gate_rise_reg_t FB1_SWG_GATE_RISE; /*< Address offset = 0xb8 */
    fb_sys_local_fb1_swg_gate_fall_reg_t FB1_SWG_GATE_FALL; /*< Address offset = 0xbc */
    fb_sys_local_rx0_swg_gate_rise_reg_t RX0_SWG_GATE_RISE; /*< Address offset = 0xc0 */
    fb_sys_local_rx0_swg_gate_fall_reg_t RX0_SWG_GATE_FALL; /*< Address offset = 0xc4 */
    fb_sys_local_rx1_swg_gate_rise_reg_t RX1_SWG_GATE_RISE; /*< Address offset = 0xc8 */
    fb_sys_local_rx1_swg_gate_fall_reg_t RX1_SWG_GATE_FALL; /*< Address offset = 0xcc */
    fb_sys_local_tx0_swg_gate_rise_reg_t TX0_SWG_GATE_RISE; /*< Address offset = 0xd0 */
    fb_sys_local_tx0_swg_gate_fall_reg_t TX0_SWG_GATE_FALL; /*< Address offset = 0xd4 */
    fb_sys_local_tx1_swg_gate_rise_reg_t TX1_SWG_GATE_RISE; /*< Address offset = 0xd8 */
    fb_sys_local_tx1_swg_gate_fall_reg_t TX1_SWG_GATE_FALL; /*< Address offset = 0xdc */
    const uint8_t        reservedArea4 [32];  /*< Address offset = 0xe0 */
    fb_sys_local_smon_r0_reg_t SMON_R0; /*< Address offset = 0x100 */
    fb_sys_local_smon_r1_reg_t SMON_R1; /*< Address offset = 0x104 */
    fb_sys_local_smon_r2_reg_t SMON_R2; /*< Address offset = 0x108 */
    fb_sys_local_smon_r3_reg_t SMON_R3; /*< Address offset = 0x10c */
    fb_sys_local_smon_r4_reg_t SMON_R4; /*< Address offset = 0x110 */
    fb_sys_local_smon_r5_reg_t SMON_R5; /*< Address offset = 0x114 */
    fb_sys_local_smon_r6_reg_t SMON_R6; /*< Address offset = 0x118 */
    fb_sys_local_smon_r7_reg_t SMON_R7; /*< Address offset = 0x11c */
    const uint8_t        reservedArea5 [224]; /*< Address offset = 0x120 */
    fb_sys_local_isync_ctrl_reg_t ISYNC_CTRL; /*< Address offset = 0x200 */
    fb_sys_local_isync_lcnt_inc_reg_t ISYNC_LCNT_INC; /*< Address offset = 0x204 */
    fb_sys_local_isync_ten_ms_cnt_reg_t ISYNC_TEN_MS_CNT; /*< Address offset = 0x208 */
    fb_sys_local_isync_inc_pre_reg_t ISYNC_INC_PRE; /*< Address offset = 0x20c */
    fb_sys_local_isync_cnt_adj_reg_t ISYNC_CNT_ADJ; /*< Address offset = 0x210 */
    fb_sys_local_isync_bfn_cnt_sync_reg_t ISYNC_BFN_CNT_SYNC; /*< Address offset = 0x214 */
    fb_sys_local_isync_bfn_cnt_reg_t ISYNC_BFN_CNT; /*< Address offset = 0x218 */
    const uint8_t        reservedArea6 [484]; /*< Address offset = 0x21c */
    fb_sys_local_bfne_cfg_reg_t BFNE_CFG[21]; /*< Address offset = 0x400 */
    const uint8_t        reservedArea7 [44];  /*< Address offset = 0x454 */
    fb_sys_local_bfne_incr_reg_t BFNE_INCR[21]; /*< Address offset = 0x480 */
    const uint8_t        reservedArea8 [44];  /*< Address offset = 0x4d4 */
    fb_sys_local_bfne_start_reg_t BFNE_START[21]; /*< Address offset = 0x500 */
    const uint8_t        reservedArea9 [44];  /*< Address offset = 0x554 */
    fb_sys_local_bfne_stat_reg_t BFNE_STAT[21]; /*< Address offset = 0x580 */
} fb_sys_local_t;     // size: 0x00fc

// AddressSpace struct pointer
//
#define FB_SYS0_CTL      ((fb_sys_local_t*) FB_SYS0_CTL_BASE)
#define FB_SYS1_CTL      ((fb_sys_local_t*) FB_SYS1_CTL_BASE)

// ******************************************* /Address Space

#endif      // _FB_SYS_LOCAL_H_

