#ifndef _TXSR_H_
#define _TXSR_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define TRX_SYS0_TXSR0_BASE   ( 0x05265000 )
#define TRX_SYS0_TXSR1_BASE   ( 0x05275000 )
#define TRX_SYS1_TXSR0_BASE   ( 0x05285000 )
#define TRX_SYS1_TXSR1_BASE   ( 0x05295000 )
#define TRX_SYS2_TXSR0_BASE   ( 0x052a5000 )
#define TRX_SYS2_TXSR1_BASE   ( 0x052b5000 )
#define TRX_SYS3_TXSR0_BASE   ( 0x052c5000 )
#define TRX_SYS3_TXSR1_BASE   ( 0x052d5000 )
#define TRX_SYS4_TXSR0_BASE   ( 0x052e5000 )
#define TRX_SYS4_TXSR1_BASE   ( 0x052f5000 )
#define TRX_SYS5_TXSR0_BASE   ( 0x05305000 )
#define TRX_SYS5_TXSR1_BASE   ( 0x05315000 )
#define TRX_SYS6_TXSR0_BASE   ( 0x05325000 )
#define TRX_SYS6_TXSR1_BASE   ( 0x05335000 )
#define TRX_SYS7_TXSR0_BASE   ( 0x05345000 )
#define TRX_SYS7_TXSR1_BASE   ( 0x05355000 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define TXSR_SCRATCH_OFFSET      ( 0x00000000U )
#define TXSR_SLEW_TRIG_TSHOLD_OFFSET ( 0x00000004U )
#define TXSR_SLEW_ALARM_CNTR_OFFSET ( 0x00000008U )
#define TXSR_SLEW_ALARM_MASK_OFFSET ( 0x0000000cU )
#define TXSR_SLEW_TIMER_CNT_OFFSET ( 0x00000010U )
#define TXSR_PRE_NORMAL_TIMER_CNT_OFFSET ( 0x00000014U )
#define TXSR_TMR_CFG_OFFSET   ( 0x00000018U )
#define TXSR_TMR_ERR_OFFSET    ( 0x0000001cU )
#define TXSR_INT_STAT_OFFSET   ( 0x00000020U )
#define TXSR_INT_HIGH_EN_OFFSET  ( 0x00000024U )
#define TXSR_INT_LOW_EN_OFFSET   ( 0x00000028U )
#define TXSR_INT_CLR_OFFSET    ( 0x0000002cU )
#define TXSR_INT_FORCE_OFFSET    ( 0x00000030U )
#define TXSR_SLEW_ALARM_FORCE_OFFSET ( 0x00000034U )
#define TXSR_SLEW_ALARM_STAT_OFFSET ( 0x00000038U )
#define TXSR_APB_BRDG_STAT_OFFSET ( 0x0000003cU )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define TXSR_SCRATCH_ADR(_BASE)         (( ( _BASE ) + ( TXSR_SCRATCH_OFFSET ) ))
#define TXSR_SLEW_TRIG_TSHOLD_ADR(_BASE) (( ( _BASE ) + ( TXSR_SLEW_TRIG_TSHOLD_OFFSET ) ))
#define TXSR_SLEW_ALARM_CNTR_ADR(_BASE) (( ( _BASE ) + ( TXSR_SLEW_ALARM_CNTR_OFFSET ) ))
#define TXSR_SLEW_ALARM_MASK_ADR(_BASE) (( ( _BASE ) + ( TXSR_SLEW_ALARM_MASK_OFFSET ) ))
#define TXSR_SLEW_TIMER_CNT_ADR(_BASE)  (( ( _BASE ) + ( TXSR_SLEW_TIMER_CNT_OFFSET ) ))
#define TXSR_PRE_NORMAL_TIMER_CNT_ADR(_BASE) (( ( _BASE ) + ( TXSR_PRE_NORMAL_TIMER_CNT_OFFSET ) ))
#define TXSR_TMR_CFG_ADR(_BASE)      (( ( _BASE ) + ( TXSR_TMR_CFG_OFFSET ) ))
#define TXSR_TMR_ERR_ADR(_BASE)       (( ( _BASE ) + ( TXSR_TMR_ERR_OFFSET ) ))
#define TXSR_INT_STAT_ADR(_BASE)      (( ( _BASE ) + ( TXSR_INT_STAT_OFFSET ) ))
#define TXSR_INT_HIGH_EN_ADR(_BASE)     (( ( _BASE ) + ( TXSR_INT_HIGH_EN_OFFSET ) ))
#define TXSR_INT_LOW_EN_ADR(_BASE)      (( ( _BASE ) + ( TXSR_INT_LOW_EN_OFFSET ) ))
#define TXSR_INT_CLR_ADR(_BASE)       (( ( _BASE ) + ( TXSR_INT_CLR_OFFSET ) ))
#define TXSR_INT_FORCE_ADR(_BASE)       (( ( _BASE ) + ( TXSR_INT_FORCE_OFFSET ) ))
#define TXSR_SLEW_ALARM_FORCE_ADR(_BASE) (( ( _BASE ) + ( TXSR_SLEW_ALARM_FORCE_OFFSET ) ))
#define TXSR_SLEW_ALARM_STAT_ADR(_BASE) (( ( _BASE ) + ( TXSR_SLEW_ALARM_STAT_OFFSET ) ))
#define TXSR_APB_BRDG_STAT_ADR(_BASE) (( ( _BASE ) + ( TXSR_APB_BRDG_STAT_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief TXSR_MAP_REG_SCRATCH register description at address offset 0x0
  *
  * Register default value:        0x00000000
  * Register full path in IP: txsr_map/reg/SCRATCH
  * Scratch Register
  */

typedef union {
  struct {
    uint32_t SCRATCHPAD : 32;
    ///< Do anything with this field
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} txsr_scratch_reg_t;

#define TXSR_SCRATCH_DEFAULT (0x00000000U)
#define TXSR_SCRATCH_RD_MASK (0xffffffffU)
#define TXSR_SCRATCH_WR_MASK (0xffffffffU)


///< Do anything with this field
#define TXSR_SCRATCH_SCRATCHPAD_BF_OFF ( 0)
#define TXSR_SCRATCH_SCRATCHPAD_BF_WID (32)
#define TXSR_SCRATCH_SCRATCHPAD_BF_MSK (0xFFFFFFFF)
#define TXSR_SCRATCH_SCRATCHPAD_BF_DEF (0x00000000)


/** @brief TXSR_MAP_REG_SLEW_TRIG_THRESHOLD register description at address offset 0x4
  *
  * Register default value:        0x00000000
  * Register full path in IP: txsr_map/reg/SLEW_TRIG_THRESHOLD
  * Slew Trigger Threshold Register
  */

typedef union {
  struct {
    uint32_t THRESHOLD : 16;
    ///< Threshold. 16b unsigned number.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} txsr_slew_trig_tshold_reg_t;

#define TXSR_SLEW_TRIG_TSHOLD_DEFAULT (0x00000000U)
#define TXSR_SLEW_TRIG_TSHOLD_RD_MASK (0x0000ffffU)
#define TXSR_SLEW_TRIG_TSHOLD_WR_MASK (0x0000ffffU)


///< Threshold. 16b unsigned number.
#define TXSR_SLEW_TRIG_TSHOLD_BF_OFF ( 0)
#define TXSR_SLEW_TRIG_TSHOLD_BF_WID (16)
#define TXSR_SLEW_TRIG_TSHOLD_BF_MSK (0x0000FFFF)
#define TXSR_SLEW_TRIG_TSHOLD_BF_DEF (0x00000000)


/** @brief TXSR_MAP_REG_SLEW_ALARM_CNTR register description at address offset 0x8
  *
  * Register default value:        0x00000000
  * Register full path in IP: txsr_map/reg/SLEW_ALARM_CNTR
  * Slew Rate Cntr Register
  */

typedef union {
  struct {
    uint32_t COUNT : 31;
    ///< Slew Rate Alarm cntr, increased by 1 everytime there is a slew rate
    ///< alarm pulse. 31 bits
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t FIFO_OVERFLOW : 1;
    ///< Overflow flag for slew alarm counter, when 1 is added to 31'h7FFF_FFFF
    ///< count value, the overflow flag will be set to 1 and the count will
    ///< restart at zero.
    ///< AccessType="RO/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} txsr_slew_alarm_cntr_reg_t;

#define TXSR_SLEW_ALARM_CNTR_DEFAULT (0x00000000U)
#define TXSR_SLEW_ALARM_CNTR_RD_MASK (0xffffffffU)
#define TXSR_SLEW_ALARM_CNTR_WR_MASK (0x00000000U)


///< Slew Rate Alarm cntr, increased by 1 everytime there is a slew rate
///< alarm pulse. 31 bits
#define TXSR_SLEW_ALARM_CNTR_CNT_BF_OFF ( 0)
#define TXSR_SLEW_ALARM_CNTR_CNT_BF_WID (31)
#define TXSR_SLEW_ALARM_CNTR_CNT_BF_MSK (0x7FFFFFFF)
#define TXSR_SLEW_ALARM_CNTR_CNT_BF_DEF (0x00000000)

///< Overflow flag for slew alarm counter, when 1 is added to 31'h7FFF_FFFF
///< count value, the overflow flag will be set to 1 and the count will
///< restart at zero.
#define TXSR_SLEW_ALARM_CNTR_OVERFLOW_BF_OFF (31)
#define TXSR_SLEW_ALARM_CNTR_OVERFLOW_BF_WID ( 1)
#define TXSR_SLEW_ALARM_CNTR_OVERFLOW_BF_MSK (0x80000000)
#define TXSR_SLEW_ALARM_CNTR_OVERFLOW_BF_DEF (0x00000000)


/** @brief TXSR_MAP_REG_SLEW_ALARM_MASK register description at address offset 0xc
  *
  * Register default value:        0x00000000
  * Register full path in IP: txsr_map/reg/SLEW_ALARM_MASK
  * Slew Rate Alarm Mask Register
  */

typedef union {
  struct {
    uint32_t MASK_E3 : 1;
    ///< Mask Bit for Slew Error Alarm going to Slew Rate Tri State State machine
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t MASK_Y3 : 1;
    ///< Mask Bit for Slew Error Alarm going to Two State Alarm State Machine
    ///< before going to RCS
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} txsr_slew_alarm_mask_reg_t;

#define TXSR_SLEW_ALARM_MASK_DEFAULT (0x00000000U)
#define TXSR_SLEW_ALARM_MASK_RD_MASK (0x00000003U)
#define TXSR_SLEW_ALARM_MASK_WR_MASK (0x00000003U)


///< Mask Bit for Slew Error Alarm going to Slew Rate Tri State State machine
#define TXSR_SLEW_ALARM_MASK_E3_BF_OFF ( 0)
#define TXSR_SLEW_ALARM_MASK_E3_BF_WID ( 1)
#define TXSR_SLEW_ALARM_MASK_E3_BF_MSK (0x00000001)
#define TXSR_SLEW_ALARM_MASK_E3_BF_DEF (0x00000000)

///< Mask Bit for Slew Error Alarm going to Two State Alarm State Machine
///< before going to RCS
#define TXSR_SLEW_ALARM_MASK_Y3_BF_OFF ( 1)
#define TXSR_SLEW_ALARM_MASK_Y3_BF_WID ( 1)
#define TXSR_SLEW_ALARM_MASK_Y3_BF_MSK (0x00000002)
#define TXSR_SLEW_ALARM_MASK_Y3_BF_DEF (0x00000000)


/** @brief TXSR_MAP_REG_SLEW_TIMER_CNT register description at address offset 0x10
  *
  * Register default value:        0x00000000
  * Register full path in IP: txsr_map/reg/SLEW_TIMER_CNT
  * Slew Trig Timer Count Register
  */

typedef union {
  struct {
    uint32_t COUNT : 16;
    ///< Slew Trig Timer Count
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} txsr_slew_timer_cnt_reg_t;

#define TXSR_SLEW_TIMER_CNT_DEFAULT (0x00000000U)
#define TXSR_SLEW_TIMER_CNT_RD_MASK (0x0000ffffU)
#define TXSR_SLEW_TIMER_CNT_WR_MASK (0x0000ffffU)


///< Slew Trig Timer Count
#define TXSR_SLEW_TIMER_CNT_BF_OFF ( 0)
#define TXSR_SLEW_TIMER_CNT_BF_WID (16)
#define TXSR_SLEW_TIMER_CNT_BF_MSK (0x0000FFFF)
#define TXSR_SLEW_TIMER_CNT_BF_DEF (0x00000000)


/** @brief TXSR_MAP_REG_PRE_NORMAL_TIMER_CNT register description at address offset 0x14
  *
  * Register default value:        0x00000000
  * Register full path in IP: txsr_map/reg/PRE_NORMAL_TIMER_CNT
  * Pre-Normal Timer Count Register
  */

typedef union {
  struct {
    uint32_t COUNT : 16;
    ///< Pre-Normal State Timer
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} txsr_pre_normal_timer_cnt_reg_t;

#define TXSR_PRE_NORMAL_TIMER_CNT_DEFAULT (0x00000000U)
#define TXSR_PRE_NORMAL_TIMER_CNT_RD_MASK (0x0000ffffU)
#define TXSR_PRE_NORMAL_TIMER_CNT_WR_MASK (0x0000ffffU)


///< Pre-Normal State Timer
#define TXSR_PRE_NORMAL_TIMER_CNT_BF_OFF ( 0)
#define TXSR_PRE_NORMAL_TIMER_CNT_BF_WID (16)
#define TXSR_PRE_NORMAL_TIMER_CNT_BF_MSK (0x0000FFFF)
#define TXSR_PRE_NORMAL_TIMER_CNT_BF_DEF (0x00000000)


/** @brief TXSR_MAP_REG_TMR_CONFIG register description at address offset 0x18
  *
  * Register default value:        0x00000000
  * Register full path in IP: txsr_map/reg/TMR_CONFIG
  * TXSR TMR Config Address Map
  */

typedef union {
  struct {
    uint32_t TEST_CTRL : 2;
    ///< TMR Test Control:  * (0) write all 3 copies (default behavior) * (1)
    ///< write copy 1 only * (2) write copy 2 only * (3) write copy 3 only
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} txsr_tmr_cfg_reg_t;

#define TXSR_TMR_CFG_DEFAULT (0x00000000U)
#define TXSR_TMR_CFG_RD_MASK (0x00000003U)
#define TXSR_TMR_CFG_WR_MASK (0x00000003U)


///< TMR Test Control:  * (0) write all 3 copies (default behavior) * (1)
///< write copy 1 only * (2) write copy 2 only * (3) write copy 3 only
#define TXSR_TMR_CFG_TEST_CTRL_BF_OFF ( 0)
#define TXSR_TMR_CFG_TEST_CTRL_BF_WID ( 2)
#define TXSR_TMR_CFG_TEST_CTRL_BF_MSK (0x00000003)
#define TXSR_TMR_CFG_TEST_CTRL_BF_DEF (0x00000000)


/** @brief TXSR_MAP_REG_TMR_ERROR register description at address offset 0x1c
  *
  * Register default value:        0x00000000
  * Register full path in IP: txsr_map/reg/TMR_ERROR
  * Triple Module Redundancy Configuration Error Register
  */

typedef union {
  struct {
    uint32_t TMR_CONFIG : 1;
    ///< TMR configuration
    ///< AccessType="RW/1C/V" BitOffset="0" ResetValue="0x0"
    uint32_t SLEW_TRIG_THRESHOLD : 1;
    ///< Slew Trig Thresh
    ///< AccessType="RW/1C/V" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} txsr_tmr_err_reg_t;

#define TXSR_TMR_ERR_DEFAULT (0x00000000U)
#define TXSR_TMR_ERR_RD_MASK (0x00000003U)
#define TXSR_TMR_ERR_WR_MASK (0x00000003U)


///< TMR configuration
#define TXSR_TMR_ERR_TMR_CFG_BF_OFF ( 0)
#define TXSR_TMR_ERR_TMR_CFG_BF_WID ( 1)
#define TXSR_TMR_ERR_TMR_CFG_BF_MSK (0x00000001)
#define TXSR_TMR_ERR_TMR_CFG_BF_DEF (0x00000000)

///< Slew Trig Thresh
#define TXSR_TMR_ERR_SLEW_TRIG_TSHOLD_BF_OFF ( 1)
#define TXSR_TMR_ERR_SLEW_TRIG_TSHOLD_BF_WID ( 1)
#define TXSR_TMR_ERR_SLEW_TRIG_TSHOLD_BF_MSK (0x00000002)
#define TXSR_TMR_ERR_SLEW_TRIG_TSHOLD_BF_DEF (0x00000000)


/** @brief TXSR_MAP_REG_INT_STATUS register description at address offset 0x20
  *
  * Register default value:        0x00000000
  * Register full path in IP: txsr_map/reg/INT_STATUS
  * Interrupt Status
  */

typedef union {
  struct {
    uint32_t TMR_ERR : 1;
    ///< TXSR Interrupt Status Reg Error (TMR_ERROR)
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} txsr_int_stat_reg_t;

#define TXSR_INT_STAT_DEFAULT (0x00000000U)
#define TXSR_INT_STAT_RD_MASK (0x00000001U)
#define TXSR_INT_STAT_WR_MASK (0x00000000U)


///< TXSR Interrupt Status Reg Error (TMR_ERROR)
#define TXSR_INT_STAT_TMR_ERR_BF_OFF ( 0)
#define TXSR_INT_STAT_TMR_ERR_BF_WID ( 1)
#define TXSR_INT_STAT_TMR_ERR_BF_MSK (0x00000001)
#define TXSR_INT_STAT_TMR_ERR_BF_DEF (0x00000000)


/** @brief TXSR_MAP_REG_INT_HIGH_EN register description at address offset 0x24
  *
  * Register default value:        0x00000000
  * Register full path in IP: txsr_map/reg/INT_HIGH_EN
  * High Prirority Interrupt
  */

typedef union {
  struct {
    uint32_t TMR_ERR : 1;
    ///< High Priority Interrupt for REG ERROR TMR ERROR
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} txsr_int_high_en_reg_t;

#define TXSR_INT_HIGH_EN_DEFAULT (0x00000000U)
#define TXSR_INT_HIGH_EN_RD_MASK (0x00000001U)
#define TXSR_INT_HIGH_EN_WR_MASK (0x00000001U)


///< High Priority Interrupt for REG ERROR TMR ERROR
#define TXSR_INT_HIGH_EN_TMR_ERR_BF_OFF ( 0)
#define TXSR_INT_HIGH_EN_TMR_ERR_BF_WID ( 1)
#define TXSR_INT_HIGH_EN_TMR_ERR_BF_MSK (0x00000001)
#define TXSR_INT_HIGH_EN_TMR_ERR_BF_DEF (0x00000000)


/** @brief TXSR_MAP_REG_INT_LOW_EN register description at address offset 0x28
  *
  * Register default value:        0x00000000
  * Register full path in IP: txsr_map/reg/INT_LOW_EN
  * TXSR Low Priority Interrupt Enable Register
  */

typedef union {
  struct {
    uint32_t TMR_ERR : 1;
    ///< Low Priority Interrupt for Reg Error  TMR_ERROR
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} txsr_int_low_en_reg_t;

#define TXSR_INT_LOW_EN_DEFAULT (0x00000000U)
#define TXSR_INT_LOW_EN_RD_MASK (0x00000001U)
#define TXSR_INT_LOW_EN_WR_MASK (0x00000001U)


///< Low Priority Interrupt for Reg Error  TMR_ERROR
#define TXSR_INT_LOW_EN_TMR_ERR_BF_OFF ( 0)
#define TXSR_INT_LOW_EN_TMR_ERR_BF_WID ( 1)
#define TXSR_INT_LOW_EN_TMR_ERR_BF_MSK (0x00000001)
#define TXSR_INT_LOW_EN_TMR_ERR_BF_DEF (0x00000000)


/** @brief TXSR_MAP_REG_INT_CLEAR register description at address offset 0x2c
  *
  * Register default value:        0x00000000
  * Register full path in IP: txsr_map/reg/INT_CLEAR
  * Interrupt Clear Register
  */

typedef union {
  struct {
    uint32_t TMR_ERR : 1;
    ///< Register Error (TMR Error) interrupt clear
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} txsr_int_clr_reg_t;

#define TXSR_INT_CLR_DEFAULT (0x00000000U)
#define TXSR_INT_CLR_RD_MASK (0x00000001U)
#define TXSR_INT_CLR_WR_MASK (0x00000001U)


///< Register Error (TMR Error) interrupt clear
#define TXSR_INT_CLR_TMR_ERR_BF_OFF ( 0)
#define TXSR_INT_CLR_TMR_ERR_BF_WID ( 1)
#define TXSR_INT_CLR_TMR_ERR_BF_MSK (0x00000001)
#define TXSR_INT_CLR_TMR_ERR_BF_DEF (0x00000000)


/** @brief TXSR_MAP_REG_INT_FORCE register description at address offset 0x30
  *
  * Register default value:        0x00000000
  * Register full path in IP: txsr_map/reg/INT_FORCE
  * Interrupt Force Register
  */

typedef union {
  struct {
    uint32_t TMR_ERR : 1;
    ///< Register Error (TMR Error) interrupt force
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} txsr_int_force_reg_t;

#define TXSR_INT_FORCE_DEFAULT (0x00000000U)
#define TXSR_INT_FORCE_RD_MASK (0x00000001U)
#define TXSR_INT_FORCE_WR_MASK (0x00000001U)


///< Register Error (TMR Error) interrupt force
#define TXSR_INT_FORCE_TMR_ERR_BF_OFF ( 0)
#define TXSR_INT_FORCE_TMR_ERR_BF_WID ( 1)
#define TXSR_INT_FORCE_TMR_ERR_BF_MSK (0x00000001)
#define TXSR_INT_FORCE_TMR_ERR_BF_DEF (0x00000000)


/** @brief TXSR_MAP_REG_SLEW_ALARM_FORCE register description at address offset 0x34
  *
  * Register default value:        0x00000000
  * Register full path in IP: txsr_map/reg/SLEW_ALARM_FORCE
  * Slew Rate Alarm Force Register
  */

typedef union {
  struct {
    uint32_t FORCE_E3 : 1;
    ///< Force Bit for Slew Error Alarm going to Two State Alarm State Machine
    ///< before going to the Slew Rate Tri State State Machine
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FORCE_Y3 : 1;
    ///< Force Bit for Slew Error Alarm going to Two State Alarm State Machine
    ///< before going to RCS
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} txsr_slew_alarm_force_reg_t;

#define TXSR_SLEW_ALARM_FORCE_DEFAULT (0x00000000U)
#define TXSR_SLEW_ALARM_FORCE_RD_MASK (0x00000003U)
#define TXSR_SLEW_ALARM_FORCE_WR_MASK (0x00000003U)


///< Force Bit for Slew Error Alarm going to Two State Alarm State Machine
///< before going to the Slew Rate Tri State State Machine
#define TXSR_SLEW_ALARM_FORCE_E3_BF_OFF ( 0)
#define TXSR_SLEW_ALARM_FORCE_E3_BF_WID ( 1)
#define TXSR_SLEW_ALARM_FORCE_E3_BF_MSK (0x00000001)
#define TXSR_SLEW_ALARM_FORCE_E3_BF_DEF (0x00000000)

///< Force Bit for Slew Error Alarm going to Two State Alarm State Machine
///< before going to RCS
#define TXSR_SLEW_ALARM_FORCE_Y3_BF_OFF ( 1)
#define TXSR_SLEW_ALARM_FORCE_Y3_BF_WID ( 1)
#define TXSR_SLEW_ALARM_FORCE_Y3_BF_MSK (0x00000002)
#define TXSR_SLEW_ALARM_FORCE_Y3_BF_DEF (0x00000000)


/** @brief TXSR_MAP_REG_SLEW_ALARM_STATUS register description at address offset 0x38
  *
  * Register default value:        0x00000000
  * Register full path in IP: txsr_map/reg/SLEW_ALARM_STATUS
  * Slew Rate Alarm Indication Register
  */

typedef union {
  struct {
    uint32_t SLEW_ALARM_STATUS : 1;
    ///< Slew Rate Alarm
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} txsr_slew_alarm_stat_reg_t;

#define TXSR_SLEW_ALARM_STAT_DEFAULT (0x00000000U)
#define TXSR_SLEW_ALARM_STAT_RD_MASK (0x00000001U)
#define TXSR_SLEW_ALARM_STAT_WR_MASK (0x00000000U)


///< Slew Rate Alarm
#define TXSR_SLEW_ALARM_STAT_SLEW_ALARM_STAT_BF_OFF ( 0)
#define TXSR_SLEW_ALARM_STAT_SLEW_ALARM_STAT_BF_WID ( 1)
#define TXSR_SLEW_ALARM_STAT_SLEW_ALARM_STAT_BF_MSK (0x00000001)
#define TXSR_SLEW_ALARM_STAT_SLEW_ALARM_STAT_BF_DEF (0x00000000)


/** @brief TXSR_MAP_REG_APB_BRIDGE_STATUS register description at address offset 0x3c
  *
  * Register default value:        0x00010000
  * Register full path in IP: txsr_map/reg/APB_BRIDGE_STATUS
  * Status of APB Bridge
  */

typedef union {
  struct {
    uint32_t TIMEOUT_VALUE : 20;
    ///< Number of core clocks to wait before timing out an APB request
    ///< AccessType="RW/L" BitOffset="0" ResetValue="0x10000"
    uint32_t REVISION : 8;
    ///< Module Revision Number
    ///< AccessType="RO" BitOffset="20" ResetValue="0x0"
    uint32_t SW_LOCK_CTRL : 1;
    ///< Block software writes to timeout_value if set
    ///< AccessType="RW/1S/V/L" BitOffset="28" ResetValue="0x0"
    uint32_t UNSOL_ACK : 1;
    ///< An unsolicited acknowledge was received
    ///< AccessType="RW/1C/V" BitOffset="29" ResetValue="0x0"
    uint32_t ACK_ERROR : 1;
    ///< Acknowledgement had error bit set
    ///< AccessType="RW/1C/V" BitOffset="30" ResetValue="0x0"
    uint32_t TIMEOUT : 1;
    ///< An APB request has timed out
    ///< AccessType="RW/1C/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} txsr_apb_brdg_stat_reg_t;

#define TXSR_APB_BRDG_STAT_DEFAULT (0x00010000U)
#define TXSR_APB_BRDG_STAT_RD_MASK (0xffffffffU)
#define TXSR_APB_BRDG_STAT_WR_MASK (0xf00fffffU)


///< Number of core clocks to wait before timing out an APB request
#define TXSR_APB_BRDG_STAT_TIMEOUT_VAL_BF_OFF ( 0)
#define TXSR_APB_BRDG_STAT_TIMEOUT_VAL_BF_WID (20)
#define TXSR_APB_BRDG_STAT_TIMEOUT_VAL_BF_MSK (0x000FFFFF)
#define TXSR_APB_BRDG_STAT_TIMEOUT_VAL_BF_DEF (0x00010000)

///< Module Revision Number
#define TXSR_APB_BRDG_STAT_REVISION_BF_OFF (20)
#define TXSR_APB_BRDG_STAT_REVISION_BF_WID ( 8)
#define TXSR_APB_BRDG_STAT_REVISION_BF_MSK (0x0FF00000)
#define TXSR_APB_BRDG_STAT_REVISION_BF_DEF (0x00000000)

///< Block software writes to timeout_value if set
#define TXSR_APB_BRDG_STAT_SW_LOCK_CTRL_BF_OFF (28)
#define TXSR_APB_BRDG_STAT_SW_LOCK_CTRL_BF_WID ( 1)
#define TXSR_APB_BRDG_STAT_SW_LOCK_CTRL_BF_MSK (0x10000000)
#define TXSR_APB_BRDG_STAT_SW_LOCK_CTRL_BF_DEF (0x00000000)

///< An unsolicited acknowledge was received
#define TXSR_APB_BRDG_STAT_UNSOL_ACK_BF_OFF (29)
#define TXSR_APB_BRDG_STAT_UNSOL_ACK_BF_WID ( 1)
#define TXSR_APB_BRDG_STAT_UNSOL_ACK_BF_MSK (0x20000000)
#define TXSR_APB_BRDG_STAT_UNSOL_ACK_BF_DEF (0x00000000)

///< Acknowledgement had error bit set
#define TXSR_APB_BRDG_STAT_ACK_ERR_BF_OFF (30)
#define TXSR_APB_BRDG_STAT_ACK_ERR_BF_WID ( 1)
#define TXSR_APB_BRDG_STAT_ACK_ERR_BF_MSK (0x40000000)
#define TXSR_APB_BRDG_STAT_ACK_ERR_BF_DEF (0x00000000)

///< An APB request has timed out
#define TXSR_APB_BRDG_STAT_TIMEOUT_BF_OFF (31)
#define TXSR_APB_BRDG_STAT_TIMEOUT_BF_WID ( 1)
#define TXSR_APB_BRDG_STAT_TIMEOUT_BF_MSK (0x80000000)
#define TXSR_APB_BRDG_STAT_TIMEOUT_BF_DEF (0x00000000)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define TXSR_SCRATCH_REG(_BASE) ((txsr_scratch_reg_t*) TXSR_SCRATCH_ADR(_BASE))
#define TXSR_SLEW_TRIG_TSHOLD_REG(_BASE) ((txsr_slew_trig_tshold_reg_t*) TXSR_SLEW_TRIG_TSHOLD_ADR(_BASE))
#define TXSR_SLEW_ALARM_CNTR_REG(_BASE) ((txsr_slew_alarm_cntr_reg_t*) TXSR_SLEW_ALARM_CNTR_ADR(_BASE))
#define TXSR_SLEW_ALARM_MASK_REG(_BASE) ((txsr_slew_alarm_mask_reg_t*) TXSR_SLEW_ALARM_MASK_ADR(_BASE))
#define TXSR_SLEW_TIMER_CNT_REG(_BASE) ((txsr_slew_timer_cnt_reg_t*) TXSR_SLEW_TIMER_CNT_ADR(_BASE))
#define TXSR_PRE_NORMAL_TIMER_CNT_REG(_BASE) ((txsr_pre_normal_timer_cnt_reg_t*) TXSR_PRE_NORMAL_TIMER_CNT_ADR(_BASE))
#define TXSR_TMR_CFG_REG(_BASE) ((txsr_tmr_cfg_reg_t*) TXSR_TMR_CFG_ADR(_BASE))
#define TXSR_TMR_ERR_REG(_BASE) ((txsr_tmr_err_reg_t*) TXSR_TMR_ERR_ADR(_BASE))
#define TXSR_INT_STAT_REG(_BASE) ((txsr_int_stat_reg_t*) TXSR_INT_STAT_ADR(_BASE))
#define TXSR_INT_HIGH_EN_REG(_BASE) ((txsr_int_high_en_reg_t*) TXSR_INT_HIGH_EN_ADR(_BASE))
#define TXSR_INT_LOW_EN_REG(_BASE) ((txsr_int_low_en_reg_t*) TXSR_INT_LOW_EN_ADR(_BASE))
#define TXSR_INT_CLR_REG(_BASE) ((txsr_int_clr_reg_t*) TXSR_INT_CLR_ADR(_BASE))
#define TXSR_INT_FORCE_REG(_BASE) ((txsr_int_force_reg_t*) TXSR_INT_FORCE_ADR(_BASE))
#define TXSR_SLEW_ALARM_FORCE_REG(_BASE) ((txsr_slew_alarm_force_reg_t*) TXSR_SLEW_ALARM_FORCE_ADR(_BASE))
#define TXSR_SLEW_ALARM_STAT_REG(_BASE) ((txsr_slew_alarm_stat_reg_t*) TXSR_SLEW_ALARM_STAT_ADR(_BASE))
#define TXSR_APB_BRDG_STAT_REG(_BASE) ((txsr_apb_brdg_stat_reg_t*) TXSR_APB_BRDG_STAT_ADR(_BASE))

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    txsr_scratch_reg_t SCRATCH;         /*< Address offset = 0x0 */
    txsr_slew_trig_tshold_reg_t SLEW_TRIG_TSHOLD; /*< Address offset = 0x4 */
    txsr_slew_alarm_cntr_reg_t SLEW_ALARM_CNTR; /*< Address offset = 0x8 */
    txsr_slew_alarm_mask_reg_t SLEW_ALARM_MASK; /*< Address offset = 0xc */
    txsr_slew_timer_cnt_reg_t SLEW_TIMER_CNT;  /*< Address offset = 0x10 */
    txsr_pre_normal_timer_cnt_reg_t PRE_NORMAL_TIMER_CNT; /*< Address offset = 0x14 */
    txsr_tmr_cfg_reg_t TMR_CFG;      /*< Address offset = 0x18 */
    txsr_tmr_err_reg_t TMR_ERR;       /*< Address offset = 0x1c */
    txsr_int_stat_reg_t INT_STAT;      /*< Address offset = 0x20 */
    txsr_int_high_en_reg_t INT_HIGH_EN;     /*< Address offset = 0x24 */
    txsr_int_low_en_reg_t INT_LOW_EN;      /*< Address offset = 0x28 */
    txsr_int_clr_reg_t INT_CLR;       /*< Address offset = 0x2c */
    txsr_int_force_reg_t INT_FORCE;       /*< Address offset = 0x30 */
    txsr_slew_alarm_force_reg_t SLEW_ALARM_FORCE; /*< Address offset = 0x34 */
    txsr_slew_alarm_stat_reg_t SLEW_ALARM_STAT; /*< Address offset = 0x38 */
    txsr_apb_brdg_stat_reg_t APB_BRDG_STAT; /*< Address offset = 0x3c */
} txsr_t;     // size: 0x0040

// AddressSpace struct pointer
//
#define TRX_SYS0_TXSR0   ((txsr_t*) TRX_SYS0_TXSR0_BASE)
#define TRX_SYS0_TXSR1   ((txsr_t*) TRX_SYS0_TXSR1_BASE)
#define TRX_SYS1_TXSR0   ((txsr_t*) TRX_SYS1_TXSR0_BASE)
#define TRX_SYS1_TXSR1   ((txsr_t*) TRX_SYS1_TXSR1_BASE)
#define TRX_SYS2_TXSR0   ((txsr_t*) TRX_SYS2_TXSR0_BASE)
#define TRX_SYS2_TXSR1   ((txsr_t*) TRX_SYS2_TXSR1_BASE)
#define TRX_SYS3_TXSR0   ((txsr_t*) TRX_SYS3_TXSR0_BASE)
#define TRX_SYS3_TXSR1   ((txsr_t*) TRX_SYS3_TXSR1_BASE)
#define TRX_SYS4_TXSR0   ((txsr_t*) TRX_SYS4_TXSR0_BASE)
#define TRX_SYS4_TXSR1   ((txsr_t*) TRX_SYS4_TXSR1_BASE)
#define TRX_SYS5_TXSR0   ((txsr_t*) TRX_SYS5_TXSR0_BASE)
#define TRX_SYS5_TXSR1   ((txsr_t*) TRX_SYS5_TXSR1_BASE)
#define TRX_SYS6_TXSR0   ((txsr_t*) TRX_SYS6_TXSR0_BASE)
#define TRX_SYS6_TXSR1   ((txsr_t*) TRX_SYS6_TXSR1_BASE)
#define TRX_SYS7_TXSR0   ((txsr_t*) TRX_SYS7_TXSR0_BASE)
#define TRX_SYS7_TXSR1   ((txsr_t*) TRX_SYS7_TXSR1_BASE)

// ******************************************* /Address Space

#endif      // _TXSR_H_

