#ifndef _DWC_PCIE_IDE_H_
#define _DWC_PCIE_IDE_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define DLNK_PCIE_DWC_IDE_HCFG_APB_BASE  ( 0x01a10000 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define PCIE_IDE_ID_IDE_CFG_IDE_CORE_VER_NUM_OFFSET ( 0x00000000U )
#define PCIE_IDE_ID_IDE_CFG_IDE_CORE_VER_TYPE_OFFSET ( 0x00000004U )
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_OFFSET ( 0x00000008U )
#define PCIE_IDE_ID_IDE_CFG_IDE_SYNC_MSG_CFG_OFFSET ( 0x0000000cU )
#define PCIE_IDE_ID_IDE_CFG_TX_LINK_TBIT_CFG_OFFSET ( 0x00000010U )
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_TBIT1_CFG_OFFSET ( 0x00000014U )
#define PCIE_IDE_ID_IDE_CFG_TX_LNK_KBIT_CFG_OFFSET ( 0x0000001cU )
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_KBIT1_CFG_OFFSET ( 0x00000020U )
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_CFG_OFFSET ( 0x00000024U )
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT1_CFG_OFFSET ( 0x00000028U )
#define PCIE_IDE_ID_IDE_CFG_KEY_THRESH_EN_OFFSET ( 0x0000002cU )
#define PCIE_IDE_ID_IDE_CFG_REKEY_REQ_STAT_OFFSET ( 0x00000030U )
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_TSHOLD_LOW_S0_OFFSET ( 0x00000040U )
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_TSHOLD_HIGH_S0_OFFSET ( 0x00000044U )
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_TSHOLD_LOW_S0_OFFSET ( 0x00000048U )
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_TSHOLD_HIGH_S0_OFFSET ( 0x0000004cU )
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_TSHOLD_LOW_S1_OFFSET ( 0x00000050U )
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_TSHOLD_HIGH_S1_OFFSET ( 0x00000054U )
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_TSHOLD_LOW_S1_OFFSET ( 0x00000058U )
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_TSHOLD_HIGH_S1_OFFSET ( 0x0000005cU )
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S0_OFFSET ( 0x00000250U )
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S1_OFFSET ( 0x00000254U )
#define PCIE_IDE_ID_IDE_CFG_IDE_CNTER_OVERFLOW_OFFSET ( 0x000002d4U )
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_OFFSET ( 0x000002d8U )
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_OFFSET ( 0x000002e0U )
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_OFFSET ( 0x000002e4U )
#define PCIE_IDE_ID_IDE_CFG_LNK_SND_STRM_INSECURE_OFFSET ( 0x000002e8U )
#define PCIE_IDE_ID_IDE_CFG_SLT_SND_STRM_INSECURE_OFFSET ( 0x000002ecU )
#define PCIE_IDE_ID_IDE_CFG_TX_LNK_KBIT_TOGGLED_OFFSET ( 0x00000308U )
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_TOGGLED_OFFSET ( 0x0000030cU )
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_CURRENT_OFFSET ( 0x00000310U )
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_KBIT_TOGGLED_OFFSET ( 0x00000314U )
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT_TOGGLED_OFFSET ( 0x00000318U )
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT_CURRENT_OFFSET ( 0x0000031cU )
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_USAGE_CNTER_LOW_S0_OFFSET ( 0x0000032cU )
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_USAGE_CNTER_HIGH_S0_OFFSET ( 0x00000330U )
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_USAGE_CNTER_LOW_S0_OFFSET ( 0x00000334U )
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_USAGE_CNTER_HIGH_S0_OFFSET ( 0x00000338U )
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_USAGE_CNTER_LOW_S1_OFFSET ( 0x0000033cU )
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_USAGE_CNTER_HIGH_S1_OFFSET ( 0x00000340U )
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_USAGE_CNTER_LOW_S1_OFFSET ( 0x00000344U )
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_USAGE_CNTER_HIGH_S1_OFFSET ( 0x00000348U )
#define PCIE_IDE_ID_IDE_CFG_IDE_TX_PCRC_ERR_MASK_OFFSET ( 0x0000042cU )
#define PCIE_IDE_ID_IDE_CFG_IDE_TX_PCRC_ERR_CNT_OFFSET ( 0x00000430U )
#define PCIE_IDE_ID_IDE_CFG_IDE_RX_PCRC_ERR_MASK_OFFSET ( 0x00000434U )
#define PCIE_IDE_ID_IDE_CFG_IDE_RX_PCRC_ERR_CNT_OFFSET ( 0x00000438U )
#define PCIE_IDE_ID_IDE_CFG_IDE_TDISP_ON_OFFSET ( 0x00000448U )
#define PCIE_IDE_ID_IDE_CFG_IDE_DISCARD_OVRD_OFFSET ( 0x0000044cU )
#define PCIE_IDE_ID_IDE_CFG_IDE_MSG_ON_SELIVE_EN_OFFSET ( 0x00000500U )
#define PCIE_IDE_ID_IDE_CAPS_IDE_EXT_CAP_HDR_OFFSET ( 0x00002000U )
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_OFFSET ( 0x00002004U )
#define PCIE_IDE_ID_IDE_CAPS_IDE_CTRL_OFFSET ( 0x00002008U )
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STRM_CTRL_0_OFFSET ( 0x0000200cU )
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STAT_0_OFFSET ( 0x00002010U )
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CAP_0_OFFSET ( 0x00002014U )
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CTRL_0_OFFSET ( 0x00002018U )
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_STAT_0_OFFSET ( 0x0000201cU )
#define PCIE_IDE_ID_IDE_CAPS_IDE_RID_ASSOS_REG1_0_OFFSET ( 0x00002020U )
#define PCIE_IDE_ID_IDE_CAPS_IDE_RID_ASSOS_REG2_0_OFFSET ( 0x00002024U )
#define PCIE_IDE_ID_IDE_CAPS_IDE_ADDR_ASSOS_REG1_0_OFFSET ( 0x00002028U )
#define PCIE_IDE_ID_IDE_CAPS_IDE_ADDR_ASSOS_REG2_0_OFFSET ( 0x0000202cU )
#define PCIE_IDE_ID_IDE_CAPS_IDE_ADDR_ASSOS_REG3_0_OFFSET ( 0x00002030U )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define PCIE_IDE_ID_IDE_CFG_IDE_CORE_VER_NUM_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CFG_IDE_CORE_VER_NUM_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CFG_IDE_CORE_VER_TYPE_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CFG_IDE_CORE_VER_TYPE_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CFG_IDE_SYNC_MSG_CFG_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CFG_IDE_SYNC_MSG_CFG_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CFG_TX_LINK_TBIT_CFG_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CFG_TX_LINK_TBIT_CFG_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_TBIT1_CFG_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CFG_TX_SLT_TBIT1_CFG_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CFG_TX_LNK_KBIT_CFG_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CFG_TX_LNK_KBIT_CFG_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_KBIT1_CFG_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CFG_TX_SLT_KBIT1_CFG_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_CFG_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_CFG_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT1_CFG_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT1_CFG_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CFG_KEY_THRESH_EN_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CFG_KEY_THRESH_EN_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CFG_REKEY_REQ_STAT_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CFG_REKEY_REQ_STAT_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_TSHOLD_LOW_S0_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CFG_TX_KEY_TSHOLD_LOW_S0_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_TSHOLD_HIGH_S0_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CFG_TX_KEY_TSHOLD_HIGH_S0_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_TSHOLD_LOW_S0_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CFG_RX_KEY_TSHOLD_LOW_S0_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_TSHOLD_HIGH_S0_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CFG_RX_KEY_TSHOLD_HIGH_S0_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_TSHOLD_LOW_S1_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CFG_TX_KEY_TSHOLD_LOW_S1_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_TSHOLD_HIGH_S1_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CFG_TX_KEY_TSHOLD_HIGH_S1_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_TSHOLD_LOW_S1_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CFG_RX_KEY_TSHOLD_LOW_S1_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_TSHOLD_HIGH_S1_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CFG_RX_KEY_TSHOLD_HIGH_S1_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S0_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S0_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S1_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S1_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CFG_IDE_CNTER_OVERFLOW_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CFG_IDE_CNTER_OVERFLOW_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CFG_LNK_SND_STRM_INSECURE_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CFG_LNK_SND_STRM_INSECURE_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CFG_SLT_SND_STRM_INSECURE_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CFG_SLT_SND_STRM_INSECURE_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CFG_TX_LNK_KBIT_TOGGLED_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CFG_TX_LNK_KBIT_TOGGLED_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_TOGGLED_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_TOGGLED_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_CURRENT_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_CURRENT_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_KBIT_TOGGLED_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CFG_TX_SLT_KBIT_TOGGLED_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT_TOGGLED_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT_TOGGLED_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT_CURRENT_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT_CURRENT_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_USAGE_CNTER_LOW_S0_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CFG_TX_KEY_USAGE_CNTER_LOW_S0_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_USAGE_CNTER_HIGH_S0_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CFG_TX_KEY_USAGE_CNTER_HIGH_S0_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_USAGE_CNTER_LOW_S0_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CFG_RX_KEY_USAGE_CNTER_LOW_S0_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_USAGE_CNTER_HIGH_S0_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CFG_RX_KEY_USAGE_CNTER_HIGH_S0_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_USAGE_CNTER_LOW_S1_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CFG_TX_KEY_USAGE_CNTER_LOW_S1_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_USAGE_CNTER_HIGH_S1_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CFG_TX_KEY_USAGE_CNTER_HIGH_S1_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_USAGE_CNTER_LOW_S1_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CFG_RX_KEY_USAGE_CNTER_LOW_S1_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_USAGE_CNTER_HIGH_S1_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CFG_RX_KEY_USAGE_CNTER_HIGH_S1_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CFG_IDE_TX_PCRC_ERR_MASK_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CFG_IDE_TX_PCRC_ERR_MASK_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CFG_IDE_TX_PCRC_ERR_CNT_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CFG_IDE_TX_PCRC_ERR_CNT_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CFG_IDE_RX_PCRC_ERR_MASK_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CFG_IDE_RX_PCRC_ERR_MASK_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CFG_IDE_RX_PCRC_ERR_CNT_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CFG_IDE_RX_PCRC_ERR_CNT_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CFG_IDE_TDISP_ON_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CFG_IDE_TDISP_ON_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CFG_IDE_DISCARD_OVRD_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CFG_IDE_DISCARD_OVRD_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CFG_IDE_MSG_ON_SELIVE_EN_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CFG_IDE_MSG_ON_SELIVE_EN_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CAPS_IDE_EXT_CAP_HDR_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CAPS_IDE_EXT_CAP_HDR_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CAPS_IDE_CAP_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CAPS_IDE_CTRL_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CAPS_IDE_CTRL_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STRM_CTRL_0_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STRM_CTRL_0_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STAT_0_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STAT_0_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CAP_0_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CAP_0_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CTRL_0_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CTRL_0_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_STAT_0_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_STAT_0_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CAPS_IDE_RID_ASSOS_REG1_0_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CAPS_IDE_RID_ASSOS_REG1_0_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CAPS_IDE_RID_ASSOS_REG2_0_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CAPS_IDE_RID_ASSOS_REG2_0_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CAPS_IDE_ADDR_ASSOS_REG1_0_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CAPS_IDE_ADDR_ASSOS_REG1_0_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CAPS_IDE_ADDR_ASSOS_REG2_0_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CAPS_IDE_ADDR_ASSOS_REG2_0_OFFSET ) ))
#define PCIE_IDE_ID_IDE_CAPS_IDE_ADDR_ASSOS_REG3_0_ADR (( ( DLNK_PCIE_DWC_IDE_HCFG_APB_BASE ) + ( PCIE_IDE_ID_IDE_CAPS_IDE_ADDR_ASSOS_REG3_0_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CFG_IDE_CORE_VER_NUM register description at address offset 0x0
  *
  * Register default value:        0x00000211
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_cfg/IDE_CORE_VER_NUM
  * IP Version Number Register.
  */

typedef union {
  struct {
    uint32_t VERSION_NUM : 16;
    ///< Indicates the coreKit release version number in BCD format. For example:
    ///< Release number 1.70a is represented as 0x0170.       Release number
    ///< 12.41a is represented as 0x1241.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x211"
    uint32_t  : 16;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_id_ide_cfg_ide_core_ver_num_reg_t;

#define PCIE_IDE_ID_IDE_CFG_IDE_CORE_VER_NUM_DEFAULT (0x00000211U)
#define PCIE_IDE_ID_IDE_CFG_IDE_CORE_VER_NUM_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_IDE_CORE_VER_NUM_WR_MASK (0x00000000U)


///< Indicates the coreKit release version number in BCD format. For example:
///< Release number 1.70a is represented as 0x0170.       Release number
///< 12.41a is represented as 0x1241.
#define PCIE_IDE_ID_IDE_CFG_IDE_CORE_VER_NUM_VER_NUM_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CFG_IDE_CORE_VER_NUM_VER_NUM_BF_WID (16)
#define PCIE_IDE_ID_IDE_CFG_IDE_CORE_VER_NUM_VER_NUM_BF_MSK (0x0000FFFF)
#define PCIE_IDE_ID_IDE_CFG_IDE_CORE_VER_NUM_VER_NUM_BF_DEF (0x00000211)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CFG_IDE_CORE_VER_NUM_RESERVED_31_16_BF_OFF (16)
#define PCIE_IDE_ID_IDE_CFG_IDE_CORE_VER_NUM_RESERVED_31_16_BF_WID (16)
#define PCIE_IDE_ID_IDE_CFG_IDE_CORE_VER_NUM_RESERVED_31_16_BF_MSK (0xFFFF0000)
#define PCIE_IDE_ID_IDE_CFG_IDE_CORE_VER_NUM_RESERVED_31_16_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CFG_IDE_CORE_VER_TYPE register description at address offset 0x4
  *
  * Register default value:        0x00000A00
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_cfg/IDE_CORE_VER_TYPE
  * IP Version Type Register.
  */

typedef union {
  struct {
    uint32_t TYPE_NUM : 8;
    ///< Indicates the coreKit release version type number in BCD format. For
    ///< example:       Release number `1.70a-lp04` is represented as 0x04.
    ///< GA releases have a value of 0.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t PKG_NUM : 4;
    ///< Indicates the alphabetical packaging number of coreKit ID. Values
    ///< 4'b1010: 'a'       4'b1011: 'b'       4'b1100: 'c'       4'b1101:
    ///< 'd'       4'b1110: 'e'       4'b1111: 'f'       4'b0000: 'g'
    ///< --------       4'b1000: 'o'       4'b1001: 'p'       NOTE: PKG_NUM
    ///< can have a value from 'a' to 'p' only.
    ///< AccessType="RO" BitOffset="8" ResetValue="0xA"
    uint32_t TYPE_ENUM : 4;
    ///< Indicates the coreKit release type. Values,       0x0 (TYPE_ENUM_GA):
    ///< GA release       0x1 (TYPE_ENUM_LCA): LCA release       0x2 (TYPE_ENUM_EA):
    ///< EA release       0x3 (TYPE_ENUM_LP): LP release       0x4 reserved
    ///< 0x5 (TYPE_ENUM_SOW): SOW release       0x6 (TYPE_ENUM_EC): EC release
    ///< Others: Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_id_ide_cfg_ide_core_ver_type_reg_t;

#define PCIE_IDE_ID_IDE_CFG_IDE_CORE_VER_TYPE_DEFAULT (0x00000a00U)
#define PCIE_IDE_ID_IDE_CFG_IDE_CORE_VER_TYPE_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_IDE_CORE_VER_TYPE_WR_MASK (0x00000000U)


///< Indicates the coreKit release version type number in BCD format. For
///< example:       Release number `1.70a-lp04` is represented as 0x04.
///< GA releases have a value of 0.
#define PCIE_IDE_ID_IDE_CFG_IDE_CORE_VER_TYPE_NUM_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CFG_IDE_CORE_VER_TYPE_NUM_BF_WID ( 8)
#define PCIE_IDE_ID_IDE_CFG_IDE_CORE_VER_TYPE_NUM_BF_MSK (0x000000FF)
#define PCIE_IDE_ID_IDE_CFG_IDE_CORE_VER_TYPE_NUM_BF_DEF (0x00000000)

///< Indicates the alphabetical packaging number of coreKit ID. Values
///< 4'b1010: 'a'       4'b1011: 'b'       4'b1100: 'c'       4'b1101:
///< 'd'       4'b1110: 'e'       4'b1111: 'f'       4'b0000: 'g'
///< --------       4'b1000: 'o'       4'b1001: 'p'       NOTE: PKG_NUM
///< can have a value from 'a' to 'p' only.
#define PCIE_IDE_ID_IDE_CFG_IDE_CORE_VER_TYPE_PKG_NUM_BF_OFF ( 8)
#define PCIE_IDE_ID_IDE_CFG_IDE_CORE_VER_TYPE_PKG_NUM_BF_WID ( 4)
#define PCIE_IDE_ID_IDE_CFG_IDE_CORE_VER_TYPE_PKG_NUM_BF_MSK (0x00000F00)
#define PCIE_IDE_ID_IDE_CFG_IDE_CORE_VER_TYPE_PKG_NUM_BF_DEF (0x00000A00)

///< Indicates the coreKit release type. Values,       0x0 (TYPE_ENUM_GA):
///< GA release       0x1 (TYPE_ENUM_LCA): LCA release       0x2 (TYPE_ENUM_EA):
///< EA release       0x3 (TYPE_ENUM_LP): LP release       0x4 reserved
///< 0x5 (TYPE_ENUM_SOW): SOW release       0x6 (TYPE_ENUM_EC): EC release
///< Others: Reserved
#define PCIE_IDE_ID_IDE_CFG_IDE_CORE_VER_TYPE_ENUM_BF_OFF (12)
#define PCIE_IDE_ID_IDE_CFG_IDE_CORE_VER_TYPE_ENUM_BF_WID ( 4)
#define PCIE_IDE_ID_IDE_CFG_IDE_CORE_VER_TYPE_ENUM_BF_MSK (0x0000F000)
#define PCIE_IDE_ID_IDE_CFG_IDE_CORE_VER_TYPE_ENUM_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CFG_IDE_CORE_VER_TYPE_RESERVED_31_16_BF_OFF (16)
#define PCIE_IDE_ID_IDE_CFG_IDE_CORE_VER_TYPE_RESERVED_31_16_BF_WID (16)
#define PCIE_IDE_ID_IDE_CFG_IDE_CORE_VER_TYPE_RESERVED_31_16_BF_MSK (0xFFFF0000)
#define PCIE_IDE_ID_IDE_CFG_IDE_CORE_VER_TYPE_RESERVED_31_16_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CFG_IDE_GLBL_CFG register description at address offset 0x8
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_cfg/IDE_GLBL_CFG
  * IDE Global Configuration Register.
  */

typedef union {
  struct {
    uint32_t IDE_TX_BYPASS_EN : 1;
    ///< Active High Enable Bypass Mode in the TX path.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
    uint32_t IDE_RX_BYPASS_EN : 1;
    ///< Active High Enable Bypass Mode in the RX path.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="3" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="4" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="5" ResetValue="0x0"
    uint32_t IDE_TBIT_SRC_SEL : 1;
    ///< T-bit source selector.                   If  T-bit Interface source
    ///< selector  is set to 0 (interface disabled), this sets the T-bit extraction
    ///< method for outbound TLPs (CPL).
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t IDE_TBIT_IF_SRC_SEL : 1;
    ///< T-bit Interface source selector.                  This sets the T-bit
    ///< extraction method, from the Controller IDE Interface (enabled) or
    ///< not (disabled). If disabled, the extraction depends if the TLP is
    ///< inbound (PR/NPR) or outbound (CPL).
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="9" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
    uint32_t  : 1;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="12" ResetValue="0x0"
    uint32_t  : 19;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="13" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_id_ide_cfg_ide_glbl_cfg_reg_t;

#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_DEFAULT (0x00000000U)
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_RD_MASK (0xfffff3ffU)
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_WR_MASK (0x000000c5U)


///< Active High Enable Bypass Mode in the TX path.
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_IDE_TX_BYP_EN_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_IDE_TX_BYP_EN_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_IDE_TX_BYP_EN_BF_MSK (0x00000001)
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_IDE_TX_BYP_EN_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_RESERVED_1_BF_OFF ( 1)
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_RESERVED_1_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_RESERVED_1_BF_MSK (0x00000002)
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_RESERVED_1_BF_DEF (0x00000000)

///< Active High Enable Bypass Mode in the RX path.
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_IDE_RX_BYP_EN_BF_OFF ( 2)
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_IDE_RX_BYP_EN_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_IDE_RX_BYP_EN_BF_MSK (0x00000004)
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_IDE_RX_BYP_EN_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_RESERVED_3_BF_OFF ( 3)
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_RESERVED_3_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_RESERVED_3_BF_MSK (0x00000008)
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_RESERVED_3_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_RESERVED_4_BF_OFF ( 4)
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_RESERVED_4_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_RESERVED_4_BF_MSK (0x00000010)
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_RESERVED_4_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_RESERVED_5_BF_OFF ( 5)
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_RESERVED_5_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_RESERVED_5_BF_MSK (0x00000020)
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_RESERVED_5_BF_DEF (0x00000000)

///< T-bit source selector.                   If  T-bit Interface source
///< selector  is set to 0 (interface disabled), this sets the T-bit extraction
///< method for outbound TLPs (CPL).
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_IDE_TBIT_SRC_SEL_BF_OFF ( 6)
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_IDE_TBIT_SRC_SEL_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_IDE_TBIT_SRC_SEL_BF_MSK (0x00000040)
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_IDE_TBIT_SRC_SEL_BF_DEF (0x00000000)

///< T-bit Interface source selector.                  This sets the T-bit
///< extraction method, from the Controller IDE Interface (enabled) or
///< not (disabled). If disabled, the extraction depends if the TLP is
///< inbound (PR/NPR) or outbound (CPL).
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_IDE_TBIT_IF_SRC_SEL_BF_OFF ( 7)
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_IDE_TBIT_IF_SRC_SEL_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_IDE_TBIT_IF_SRC_SEL_BF_MSK (0x00000080)
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_IDE_TBIT_IF_SRC_SEL_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_RESERVED_8_BF_OFF ( 8)
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_RESERVED_8_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_RESERVED_8_BF_MSK (0x00000100)
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_RESERVED_8_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_RESERVED_9_BF_OFF ( 9)
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_RESERVED_9_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_RESERVED_9_BF_MSK (0x00000200)
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_RESERVED_9_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_RESERVED_12_BF_OFF (12)
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_RESERVED_12_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_RESERVED_12_BF_MSK (0x00001000)
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_RESERVED_12_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_RESERVED_31_13_BF_OFF (13)
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_RESERVED_31_13_BF_WID (19)
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_RESERVED_31_13_BF_MSK (0xFFFFE000)
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_RESERVED_31_13_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CFG_IDE_SYNC_MSG_CFG register description at address offset 0xc
  *
  * Register default value:        0x000000EB
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_cfg/IDE_SYNC_MSG_CFG
  * IDE Sync Message Configuration Register.
  */

typedef union {
  struct {
    uint32_t IDE_SYNC_MSG_REQ_THRESHOLD : 9;
    ///< Number of TLP threshold to request Sync Message to be sent. Applicable
    ///< to all streams.
    ///< AccessType="RW" BitOffset="0" ResetValue="0xEB"
    uint32_t  : 23;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="9" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_id_ide_cfg_ide_sync_msg_cfg_reg_t;

#define PCIE_IDE_ID_IDE_CFG_IDE_SYNC_MSG_CFG_DEFAULT (0x000000ebU)
#define PCIE_IDE_ID_IDE_CFG_IDE_SYNC_MSG_CFG_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_IDE_SYNC_MSG_CFG_WR_MASK (0x000001ffU)


///< Number of TLP threshold to request Sync Message to be sent. Applicable
///< to all streams.
#define PCIE_IDE_ID_IDE_CFG_IDE_SYNC_MSG_CFG_IDE_SYNC_MSG_REQ_TSHOLD_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CFG_IDE_SYNC_MSG_CFG_IDE_SYNC_MSG_REQ_TSHOLD_BF_WID ( 9)
#define PCIE_IDE_ID_IDE_CFG_IDE_SYNC_MSG_CFG_IDE_SYNC_MSG_REQ_TSHOLD_BF_MSK (0x000001FF)
#define PCIE_IDE_ID_IDE_CFG_IDE_SYNC_MSG_CFG_IDE_SYNC_MSG_REQ_TSHOLD_BF_DEF (0x000000EB)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CFG_IDE_SYNC_MSG_CFG_RESERVED_31_9_BF_OFF ( 9)
#define PCIE_IDE_ID_IDE_CFG_IDE_SYNC_MSG_CFG_RESERVED_31_9_BF_WID (23)
#define PCIE_IDE_ID_IDE_CFG_IDE_SYNC_MSG_CFG_RESERVED_31_9_BF_MSK (0xFFFFFE00)
#define PCIE_IDE_ID_IDE_CFG_IDE_SYNC_MSG_CFG_RESERVED_31_9_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CFG_TX_LINK_TBIT_CFG register description at address offset 0x10
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_cfg/TX_LINK_TBIT_CFG
  * IDE Link stream Tbit Register.
  */

typedef union {
  struct {
    uint32_t TBIT_CFG_S0_PR : 1;
    ///< Link IDE Stream 0 Tbit to be inserted in IDE Prefix for Posted Request
    ///< substream.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TBIT_CFG_S0_NPR : 1;
    ///< Link IDE Stream 0 Tbit to be inserted in IDE Prefix for Non-Posted
    ///< Request substream.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t TBIT_CFG_S0_CPL : 1;
    ///< Link IDE Stream 0 Tbit to be inserted in IDE Prefix for Completion
    ///< substream.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="3" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_id_ide_cfg_tx_link_tbit_cfg_reg_t;

#define PCIE_IDE_ID_IDE_CFG_TX_LINK_TBIT_CFG_DEFAULT (0x00000000U)
#define PCIE_IDE_ID_IDE_CFG_TX_LINK_TBIT_CFG_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_TX_LINK_TBIT_CFG_WR_MASK (0x00000007U)


///< Link IDE Stream 0 Tbit to be inserted in IDE Prefix for Posted Request
///< substream.
#define PCIE_IDE_ID_IDE_CFG_TX_LINK_TBIT_CFG_TBIT_CFG_S0_PR_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CFG_TX_LINK_TBIT_CFG_TBIT_CFG_S0_PR_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_TX_LINK_TBIT_CFG_TBIT_CFG_S0_PR_BF_MSK (0x00000001)
#define PCIE_IDE_ID_IDE_CFG_TX_LINK_TBIT_CFG_TBIT_CFG_S0_PR_BF_DEF (0x00000000)

///< Link IDE Stream 0 Tbit to be inserted in IDE Prefix for Non-Posted
///< Request substream.
#define PCIE_IDE_ID_IDE_CFG_TX_LINK_TBIT_CFG_TBIT_CFG_S0_NPR_BF_OFF ( 1)
#define PCIE_IDE_ID_IDE_CFG_TX_LINK_TBIT_CFG_TBIT_CFG_S0_NPR_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_TX_LINK_TBIT_CFG_TBIT_CFG_S0_NPR_BF_MSK (0x00000002)
#define PCIE_IDE_ID_IDE_CFG_TX_LINK_TBIT_CFG_TBIT_CFG_S0_NPR_BF_DEF (0x00000000)

///< Link IDE Stream 0 Tbit to be inserted in IDE Prefix for Completion
///< substream.
#define PCIE_IDE_ID_IDE_CFG_TX_LINK_TBIT_CFG_TBIT_CFG_S0_CPL_BF_OFF ( 2)
#define PCIE_IDE_ID_IDE_CFG_TX_LINK_TBIT_CFG_TBIT_CFG_S0_CPL_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_TX_LINK_TBIT_CFG_TBIT_CFG_S0_CPL_BF_MSK (0x00000004)
#define PCIE_IDE_ID_IDE_CFG_TX_LINK_TBIT_CFG_TBIT_CFG_S0_CPL_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CFG_TX_LINK_TBIT_CFG_RESERVED_31_3_BF_OFF ( 3)
#define PCIE_IDE_ID_IDE_CFG_TX_LINK_TBIT_CFG_RESERVED_31_3_BF_WID (29)
#define PCIE_IDE_ID_IDE_CFG_TX_LINK_TBIT_CFG_RESERVED_31_3_BF_MSK (0xFFFFFFF8)
#define PCIE_IDE_ID_IDE_CFG_TX_LINK_TBIT_CFG_RESERVED_31_3_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CFG_TX_SLT_TBIT1_CFG register description at address offset 0x14
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_cfg/TX_SLT_TBIT1_CFG
  * IDE Selective stream Tbit1 Register.
  */

typedef union {
  struct {
    uint32_t TBIT_CFG_S0_PR : 1;
    ///< Selective IDE Stream 0 Tbit to be inserted in IDE Prefix for Posted
    ///< Request substream.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TBIT_CFG_S0_NPR : 1;
    ///< Selective IDE Stream 0 Tbit to be inserted in IDE Prefix for Non-Posted
    ///< Request substream.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t TBIT_CFG_S0_CPL : 1;
    ///< Selective IDE Stream 0 Tbit to be inserted in IDE Prefix for Completion
    ///< substream.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="3" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_id_ide_cfg_tx_slt_tbit1_cfg_reg_t;

#define PCIE_IDE_ID_IDE_CFG_TX_SLT_TBIT1_CFG_DEFAULT (0x00000000U)
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_TBIT1_CFG_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_TBIT1_CFG_WR_MASK (0x00000007U)


///< Selective IDE Stream 0 Tbit to be inserted in IDE Prefix for Posted
///< Request substream.
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_TBIT1_CFG_TBIT_CFG_S0_PR_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_TBIT1_CFG_TBIT_CFG_S0_PR_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_TBIT1_CFG_TBIT_CFG_S0_PR_BF_MSK (0x00000001)
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_TBIT1_CFG_TBIT_CFG_S0_PR_BF_DEF (0x00000000)

///< Selective IDE Stream 0 Tbit to be inserted in IDE Prefix for Non-Posted
///< Request substream.
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_TBIT1_CFG_TBIT_CFG_S0_NPR_BF_OFF ( 1)
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_TBIT1_CFG_TBIT_CFG_S0_NPR_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_TBIT1_CFG_TBIT_CFG_S0_NPR_BF_MSK (0x00000002)
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_TBIT1_CFG_TBIT_CFG_S0_NPR_BF_DEF (0x00000000)

///< Selective IDE Stream 0 Tbit to be inserted in IDE Prefix for Completion
///< substream.
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_TBIT1_CFG_TBIT_CFG_S0_CPL_BF_OFF ( 2)
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_TBIT1_CFG_TBIT_CFG_S0_CPL_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_TBIT1_CFG_TBIT_CFG_S0_CPL_BF_MSK (0x00000004)
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_TBIT1_CFG_TBIT_CFG_S0_CPL_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_TBIT1_CFG_RESERVED_31_3_BF_OFF ( 3)
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_TBIT1_CFG_RESERVED_31_3_BF_WID (29)
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_TBIT1_CFG_RESERVED_31_3_BF_MSK (0xFFFFFFF8)
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_TBIT1_CFG_RESERVED_31_3_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CFG_TX_LNK_KBIT_CFG register description at address offset 0x1c
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_cfg/TX_LNK_KBIT_CFG
  * IDE Tx Link Kbit Register.
  */

typedef union {
  struct {
    uint32_t KBIT_CFG_S0_PR : 1;
    ///< Link IDE Stream 0 Kbit to be inserted in IDE Prefix for Posted Request
    ///< substream.   Note: The application shall set the 3 bits (Posted Request-PR,
    ///< Non-Posted Request-NPR, Completion-CPL) from a specific stream, when
    ///< requesting a key swap.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t KBIT_CFG_S0_NPR : 1;
    ///< Link IDE Stream 0 Kbit to be inserted in IDE Prefix for Non-Posted
    ///< Request substream.   Note: The application shall set the 3 bits (Posted
    ///< Request-PR, Non-Posted Request-NPR, Completion-CPL) from a specific
    ///< stream, when requesting a key swap.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t KBIT_CFG_S0_CPL : 1;
    ///< Link IDE Stream 0 Kbit to be inserted in IDE Prefix for Completion
    ///< substream.   Note: The application shall set the 3 bits (Posted Request-PR,
    ///< Non-Posted Request-NPR, Completion-CPL) from a specific stream, when
    ///< requesting a key swap.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="3" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_id_ide_cfg_tx_lnk_kbit_cfg_reg_t;

#define PCIE_IDE_ID_IDE_CFG_TX_LNK_KBIT_CFG_DEFAULT (0x00000000U)
#define PCIE_IDE_ID_IDE_CFG_TX_LNK_KBIT_CFG_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_TX_LNK_KBIT_CFG_WR_MASK (0x00000007U)


///< Link IDE Stream 0 Kbit to be inserted in IDE Prefix for Posted Request
///< substream.   Note: The application shall set the 3 bits (Posted Request-PR,
///< Non-Posted Request-NPR, Completion-CPL) from a specific stream, when
///< requesting a key swap.
#define PCIE_IDE_ID_IDE_CFG_TX_LNK_KBIT_CFG_KBIT_CFG_S0_PR_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CFG_TX_LNK_KBIT_CFG_KBIT_CFG_S0_PR_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_TX_LNK_KBIT_CFG_KBIT_CFG_S0_PR_BF_MSK (0x00000001)
#define PCIE_IDE_ID_IDE_CFG_TX_LNK_KBIT_CFG_KBIT_CFG_S0_PR_BF_DEF (0x00000000)

///< Link IDE Stream 0 Kbit to be inserted in IDE Prefix for Non-Posted
///< Request substream.   Note: The application shall set the 3 bits (Posted
///< Request-PR, Non-Posted Request-NPR, Completion-CPL) from a specific
///< stream, when requesting a key swap.
#define PCIE_IDE_ID_IDE_CFG_TX_LNK_KBIT_CFG_KBIT_CFG_S0_NPR_BF_OFF ( 1)
#define PCIE_IDE_ID_IDE_CFG_TX_LNK_KBIT_CFG_KBIT_CFG_S0_NPR_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_TX_LNK_KBIT_CFG_KBIT_CFG_S0_NPR_BF_MSK (0x00000002)
#define PCIE_IDE_ID_IDE_CFG_TX_LNK_KBIT_CFG_KBIT_CFG_S0_NPR_BF_DEF (0x00000000)

///< Link IDE Stream 0 Kbit to be inserted in IDE Prefix for Completion
///< substream.   Note: The application shall set the 3 bits (Posted Request-PR,
///< Non-Posted Request-NPR, Completion-CPL) from a specific stream, when
///< requesting a key swap.
#define PCIE_IDE_ID_IDE_CFG_TX_LNK_KBIT_CFG_KBIT_CFG_S0_CPL_BF_OFF ( 2)
#define PCIE_IDE_ID_IDE_CFG_TX_LNK_KBIT_CFG_KBIT_CFG_S0_CPL_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_TX_LNK_KBIT_CFG_KBIT_CFG_S0_CPL_BF_MSK (0x00000004)
#define PCIE_IDE_ID_IDE_CFG_TX_LNK_KBIT_CFG_KBIT_CFG_S0_CPL_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CFG_TX_LNK_KBIT_CFG_RESERVED_31_3_BF_OFF ( 3)
#define PCIE_IDE_ID_IDE_CFG_TX_LNK_KBIT_CFG_RESERVED_31_3_BF_WID (29)
#define PCIE_IDE_ID_IDE_CFG_TX_LNK_KBIT_CFG_RESERVED_31_3_BF_MSK (0xFFFFFFF8)
#define PCIE_IDE_ID_IDE_CFG_TX_LNK_KBIT_CFG_RESERVED_31_3_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CFG_TX_SLT_KBIT1_CFG register description at address offset 0x20
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_cfg/TX_SLT_KBIT1_CFG
  * IDE Tx Selective Kbit1 Register
  */

typedef union {
  struct {
    uint32_t KBIT_CFG_S0_PR : 1;
    ///< Selective IDE Stream 0 Kbit to be inserted in IDE Prefix for PR substream.
    ///< Note: The application shall set the 3 bits (Posted Request-PR, Non-Posted
    ///< Request-NPR, Completion-CPL) from a specific stream, when requesting
    ///< a key swap.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t KBIT_CFG_S0_NPR : 1;
    ///< Selective IDE Stream 0 Kbit to be inserted in IDE Prefix for NPR substream.
    ///< Note: The application shall set the 3 bits (Posted Request-PR, Non-Posted
    ///< Request-NPR, Completion-CPL) from a specific stream, when requesting
    ///< a key swap.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t KBIT_CFG_S0_CPL : 1;
    ///< Selective IDE Stream 0 Kbit to be inserted in IDE Prefix for CPL substream.
    ///< Note: The application shall set the 3 bits (Posted Request-PR, Non-Posted
    ///< Request-NPR, Completion-CPL) from a specific stream, when requesting
    ///< a key swap.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="3" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_id_ide_cfg_tx_slt_kbit1_cfg_reg_t;

#define PCIE_IDE_ID_IDE_CFG_TX_SLT_KBIT1_CFG_DEFAULT (0x00000000U)
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_KBIT1_CFG_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_KBIT1_CFG_WR_MASK (0x00000007U)


///< Selective IDE Stream 0 Kbit to be inserted in IDE Prefix for PR substream.
///< Note: The application shall set the 3 bits (Posted Request-PR, Non-Posted
///< Request-NPR, Completion-CPL) from a specific stream, when requesting
///< a key swap.
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_KBIT1_CFG_KBIT_CFG_S0_PR_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_KBIT1_CFG_KBIT_CFG_S0_PR_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_KBIT1_CFG_KBIT_CFG_S0_PR_BF_MSK (0x00000001)
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_KBIT1_CFG_KBIT_CFG_S0_PR_BF_DEF (0x00000000)

///< Selective IDE Stream 0 Kbit to be inserted in IDE Prefix for NPR substream.
///< Note: The application shall set the 3 bits (Posted Request-PR, Non-Posted
///< Request-NPR, Completion-CPL) from a specific stream, when requesting
///< a key swap.
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_KBIT1_CFG_KBIT_CFG_S0_NPR_BF_OFF ( 1)
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_KBIT1_CFG_KBIT_CFG_S0_NPR_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_KBIT1_CFG_KBIT_CFG_S0_NPR_BF_MSK (0x00000002)
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_KBIT1_CFG_KBIT_CFG_S0_NPR_BF_DEF (0x00000000)

///< Selective IDE Stream 0 Kbit to be inserted in IDE Prefix for CPL substream.
///< Note: The application shall set the 3 bits (Posted Request-PR, Non-Posted
///< Request-NPR, Completion-CPL) from a specific stream, when requesting
///< a key swap.
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_KBIT1_CFG_KBIT_CFG_S0_CPL_BF_OFF ( 2)
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_KBIT1_CFG_KBIT_CFG_S0_CPL_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_KBIT1_CFG_KBIT_CFG_S0_CPL_BF_MSK (0x00000004)
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_KBIT1_CFG_KBIT_CFG_S0_CPL_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_KBIT1_CFG_RESERVED_31_3_BF_OFF ( 3)
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_KBIT1_CFG_RESERVED_31_3_BF_WID (29)
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_KBIT1_CFG_RESERVED_31_3_BF_MSK (0xFFFFFFF8)
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_KBIT1_CFG_RESERVED_31_3_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CFG_RX_LNK_KBIT_CFG register description at address offset 0x24
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_cfg/RX_LNK_KBIT_CFG
  * IDE Rx Link Kbit Register.
  */

typedef union {
  struct {
    uint32_t RX_KBIT_CFG_S0_PR : 1;
    ///< Force Link IDE Stream 0 Kbit/Key Slot usage for the PR sub-stream.
    ///< If the module has already swapped the K-bit/Key Slot to match the
    ///< written value, then no action is performed.   If the module has not
    ///< yet swapped the K-bit/Key Slot to match the written value, then it
    ///< automatically performs a Key Slot swap to match the K-bit that was
    ///< written.   Important to note that once this register is updated per
    ///< FW, it shall always be updated for every key swap.   Note: The application
    ///< shall set the 3 bits (Posted Request-PR, Non-Posted Request-NPR, Completion-CPL)
    ///< from a specific stream, when forcing a key swap.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_KBIT_CFG_S0_NPR : 1;
    ///< Force Link IDE Stream 0 Kbit/Key Slot usage for the NPR sub-stream.
    ///< If the module has already swapped the K-bit/Key Slot to match the
    ///< written value, then no action is performed.   If the module has not
    ///< yet swapped the K-bit/Key Slot to match the written value, then it
    ///< automatically performs a Key Slot swap to match the K-bit that was
    ///< written.   Important to note that once this register is updated per
    ///< FW, it shall always be updated for every key swap.   Note: The application
    ///< shall set the 3 bits (Posted Request-PR, Non-Posted Request-NPR, Completion-CPL)
    ///< from a specific stream, when forcing a key swap.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RX_KBIT_CFG_S0_CPL : 1;
    ///< Force Link IDE Stream 0 Kbit/Key Slot usage for the CPL sub-stream.
    ///< If the module has already swapped the K-bit/Key Slot to match the
    ///< written value, then no action is performed.   If the module has not
    ///< yet swapped the K-bit/Key Slot to match the written value, then it
    ///< automatically performs a Key Slot swap to match the K-bit that was
    ///< written.   Important to note that once this register is updated per
    ///< FW, it shall always be updated for every key swap.   Note: The application
    ///< shall set the 3 bits (Posted Request-PR, Non-Posted Request-NPR, Completion-CPL)
    ///< from a specific stream, when forcing a key swap.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="3" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_id_ide_cfg_rx_lnk_kbit_cfg_reg_t;

#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_CFG_DEFAULT (0x00000000U)
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_CFG_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_CFG_WR_MASK (0x00000007U)


///< Force Link IDE Stream 0 Kbit/Key Slot usage for the PR sub-stream.
///< If the module has already swapped the K-bit/Key Slot to match the
///< written value, then no action is performed.   If the module has not
///< yet swapped the K-bit/Key Slot to match the written value, then it
///< automatically performs a Key Slot swap to match the K-bit that was
///< written.   Important to note that once this register is updated per
///< FW, it shall always be updated for every key swap.   Note: The application
///< shall set the 3 bits (Posted Request-PR, Non-Posted Request-NPR, Completion-CPL)
///< from a specific stream, when forcing a key swap.
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_CFG_RX_KBIT_CFG_S0_PR_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_CFG_RX_KBIT_CFG_S0_PR_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_CFG_RX_KBIT_CFG_S0_PR_BF_MSK (0x00000001)
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_CFG_RX_KBIT_CFG_S0_PR_BF_DEF (0x00000000)

///< Force Link IDE Stream 0 Kbit/Key Slot usage for the NPR sub-stream.
///< If the module has already swapped the K-bit/Key Slot to match the
///< written value, then no action is performed.   If the module has not
///< yet swapped the K-bit/Key Slot to match the written value, then it
///< automatically performs a Key Slot swap to match the K-bit that was
///< written.   Important to note that once this register is updated per
///< FW, it shall always be updated for every key swap.   Note: The application
///< shall set the 3 bits (Posted Request-PR, Non-Posted Request-NPR, Completion-CPL)
///< from a specific stream, when forcing a key swap.
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_CFG_RX_KBIT_CFG_S0_NPR_BF_OFF ( 1)
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_CFG_RX_KBIT_CFG_S0_NPR_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_CFG_RX_KBIT_CFG_S0_NPR_BF_MSK (0x00000002)
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_CFG_RX_KBIT_CFG_S0_NPR_BF_DEF (0x00000000)

///< Force Link IDE Stream 0 Kbit/Key Slot usage for the CPL sub-stream.
///< If the module has already swapped the K-bit/Key Slot to match the
///< written value, then no action is performed.   If the module has not
///< yet swapped the K-bit/Key Slot to match the written value, then it
///< automatically performs a Key Slot swap to match the K-bit that was
///< written.   Important to note that once this register is updated per
///< FW, it shall always be updated for every key swap.   Note: The application
///< shall set the 3 bits (Posted Request-PR, Non-Posted Request-NPR, Completion-CPL)
///< from a specific stream, when forcing a key swap.
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_CFG_RX_KBIT_CFG_S0_CPL_BF_OFF ( 2)
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_CFG_RX_KBIT_CFG_S0_CPL_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_CFG_RX_KBIT_CFG_S0_CPL_BF_MSK (0x00000004)
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_CFG_RX_KBIT_CFG_S0_CPL_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_CFG_RESERVED_31_3_BF_OFF ( 3)
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_CFG_RESERVED_31_3_BF_WID (29)
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_CFG_RESERVED_31_3_BF_MSK (0xFFFFFFF8)
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_CFG_RESERVED_31_3_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CFG_RX_SLT_KBIT1_CFG register description at address offset 0x28
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_cfg/RX_SLT_KBIT1_CFG
  * IDE Rx Selective Kbit1 Register
  */

typedef union {
  struct {
    uint32_t RX_KBIT_CFG_S0_PR : 1;
    ///< Force Selective IDE Stream 0 Kbit/Key Slot usage for the PR sub-stream.
    ///< If the module has already swapped the K-bit/Key Slot to match the
    ///< written value, then no action is performed.   If the module has not
    ///< yet swapped the K-bit/Key Slot to match the written value, then it
    ///< automatically performs a Key Slot swap to match the K-bit that was
    ///< written.   Important to note that once this register is updated per
    ///< FW, it shall always be updated for every key swap.   Note: The application
    ///< shall set the 3 bits (Posted Request-PR, Non-Posted Request-NPR, Completion-CPL)
    ///< from a specific stream, when forcing a key swap.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_KBIT_CFG_S0_NPR : 1;
    ///< Force Selective IDE Stream 0 Kbit/Key Slot usage for the NPR sub-stream.
    ///< If the module has already swapped the K-bit/Key Slot to match the
    ///< written value, then no action is performed.   If the module has not
    ///< yet swapped the K-bit/Key Slot to match the written value, then it
    ///< automatically performs a Key Slot swap to match the K-bit that was
    ///< written.   Important to note that once this register is updated per
    ///< FW, it shall always be updated for every key swap.   Note: The application
    ///< shall set the 3 bits (Posted Request-PR, Non-Posted Request-NPR, Completion-CPL)
    ///< from a specific stream, when forcing a key swap.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RX_KBIT_CFG_S0_CPL : 1;
    ///< Force Selective IDE Stream 0 Kbit/Key Slot usage for the CPL sub-stream.
    ///< If the module has already swapped the K-bit/Key Slot to match the
    ///< written value, then no action is performed.   If the module has not
    ///< yet swapped the K-bit/Key Slot to match the written value, then it
    ///< automatically performs a Key Slot swap to match the K-bit that was
    ///< written.   Important to note that once this register is updated per
    ///< FW, it shall always be updated for every key swap.   Note: The application
    ///< shall set the 3 bits (Posted Request-PR, Non-Posted Request-NPR, Completion-CPL)
    ///< from a specific stream, when forcing a key swap.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="3" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_id_ide_cfg_rx_slt_kbit1_cfg_reg_t;

#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT1_CFG_DEFAULT (0x00000000U)
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT1_CFG_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT1_CFG_WR_MASK (0x00000007U)


///< Force Selective IDE Stream 0 Kbit/Key Slot usage for the PR sub-stream.
///< If the module has already swapped the K-bit/Key Slot to match the
///< written value, then no action is performed.   If the module has not
///< yet swapped the K-bit/Key Slot to match the written value, then it
///< automatically performs a Key Slot swap to match the K-bit that was
///< written.   Important to note that once this register is updated per
///< FW, it shall always be updated for every key swap.   Note: The application
///< shall set the 3 bits (Posted Request-PR, Non-Posted Request-NPR, Completion-CPL)
///< from a specific stream, when forcing a key swap.
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT1_CFG_RX_KBIT_CFG_S0_PR_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT1_CFG_RX_KBIT_CFG_S0_PR_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT1_CFG_RX_KBIT_CFG_S0_PR_BF_MSK (0x00000001)
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT1_CFG_RX_KBIT_CFG_S0_PR_BF_DEF (0x00000000)

///< Force Selective IDE Stream 0 Kbit/Key Slot usage for the NPR sub-stream.
///< If the module has already swapped the K-bit/Key Slot to match the
///< written value, then no action is performed.   If the module has not
///< yet swapped the K-bit/Key Slot to match the written value, then it
///< automatically performs a Key Slot swap to match the K-bit that was
///< written.   Important to note that once this register is updated per
///< FW, it shall always be updated for every key swap.   Note: The application
///< shall set the 3 bits (Posted Request-PR, Non-Posted Request-NPR, Completion-CPL)
///< from a specific stream, when forcing a key swap.
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT1_CFG_RX_KBIT_CFG_S0_NPR_BF_OFF ( 1)
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT1_CFG_RX_KBIT_CFG_S0_NPR_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT1_CFG_RX_KBIT_CFG_S0_NPR_BF_MSK (0x00000002)
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT1_CFG_RX_KBIT_CFG_S0_NPR_BF_DEF (0x00000000)

///< Force Selective IDE Stream 0 Kbit/Key Slot usage for the CPL sub-stream.
///< If the module has already swapped the K-bit/Key Slot to match the
///< written value, then no action is performed.   If the module has not
///< yet swapped the K-bit/Key Slot to match the written value, then it
///< automatically performs a Key Slot swap to match the K-bit that was
///< written.   Important to note that once this register is updated per
///< FW, it shall always be updated for every key swap.   Note: The application
///< shall set the 3 bits (Posted Request-PR, Non-Posted Request-NPR, Completion-CPL)
///< from a specific stream, when forcing a key swap.
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT1_CFG_RX_KBIT_CFG_S0_CPL_BF_OFF ( 2)
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT1_CFG_RX_KBIT_CFG_S0_CPL_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT1_CFG_RX_KBIT_CFG_S0_CPL_BF_MSK (0x00000004)
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT1_CFG_RX_KBIT_CFG_S0_CPL_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT1_CFG_RESERVED_31_3_BF_OFF ( 3)
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT1_CFG_RESERVED_31_3_BF_WID (29)
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT1_CFG_RESERVED_31_3_BF_MSK (0xFFFFFFF8)
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT1_CFG_RESERVED_31_3_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CFG_KEY_THRESH_EN register description at address offset 0x2c
  *
  * Register default value:        0x00000003
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_cfg/KEY_THRESH_EN
  * Key threshold enable Register.
  */

typedef union {
  struct {
    uint32_t TX_KEY_THRESH_EN : 1;
    ///< Key threshold enable bit for TX.  If ARM CCA is supported and the
    ///< register IDE_ARM_CCA_SEND_INSEC_EN is set to 1, when the key counter
    ///< reaches the specified threshold the stream will be sent to insecure.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t RX_KEY_THRESH_EN : 1;
    ///< Key threshold enable bit for RX.   Note: In the case of a 256-bit
    ///< config there are 2 AES engines on the RX datapath and they share the
    ///< same counter.   If ARM CCA is supported and the register IDE_ARM_CCA_SEND_INSEC_EN
    ///< is set to 1, when the key counter reaches the specified threshold
    ///< the stream will be sent to insecure.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x1"
    uint32_t TX_KEY_COUNTER_AUTOCLEAR_EN : 1;
    ///< Key counters auto-clear enable bit for TX.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t RX_KEY_COUNTER_AUTOCLEAR_EN : 1;
    ///< Key counters auto-clear enable bit for RX.  Note: In the case of a
    ///< 256-bit config, where there are 2 AES engines on the RX path, this
    ///< bit enables the auto-clear in both counters.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="4" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_id_ide_cfg_key_thresh_en_reg_t;

#define PCIE_IDE_ID_IDE_CFG_KEY_THRESH_EN_DEFAULT (0x00000003U)
#define PCIE_IDE_ID_IDE_CFG_KEY_THRESH_EN_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_KEY_THRESH_EN_WR_MASK (0x0000000fU)


///< Key threshold enable bit for TX.  If ARM CCA is supported and the
///< register IDE_ARM_CCA_SEND_INSEC_EN is set to 1, when the key counter
///< reaches the specified threshold the stream will be sent to insecure.
#define PCIE_IDE_ID_IDE_CFG_KEY_THRESH_EN_TX_KEY_THRESH_EN_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CFG_KEY_THRESH_EN_TX_KEY_THRESH_EN_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_KEY_THRESH_EN_TX_KEY_THRESH_EN_BF_MSK (0x00000001)
#define PCIE_IDE_ID_IDE_CFG_KEY_THRESH_EN_TX_KEY_THRESH_EN_BF_DEF (0x00000001)

///< Key threshold enable bit for RX.   Note: In the case of a 256-bit
///< config there are 2 AES engines on the RX datapath and they share the
///< same counter.   If ARM CCA is supported and the register IDE_ARM_CCA_SEND_INSEC_EN
///< is set to 1, when the key counter reaches the specified threshold
///< the stream will be sent to insecure.
#define PCIE_IDE_ID_IDE_CFG_KEY_THRESH_EN_RX_KEY_THRESH_EN_BF_OFF ( 1)
#define PCIE_IDE_ID_IDE_CFG_KEY_THRESH_EN_RX_KEY_THRESH_EN_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_KEY_THRESH_EN_RX_KEY_THRESH_EN_BF_MSK (0x00000002)
#define PCIE_IDE_ID_IDE_CFG_KEY_THRESH_EN_RX_KEY_THRESH_EN_BF_DEF (0x00000002)

///< Key counters auto-clear enable bit for TX.
#define PCIE_IDE_ID_IDE_CFG_KEY_THRESH_EN_TX_KEY_CNTER_AUTOCLR_EN_BF_OFF ( 2)
#define PCIE_IDE_ID_IDE_CFG_KEY_THRESH_EN_TX_KEY_CNTER_AUTOCLR_EN_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_KEY_THRESH_EN_TX_KEY_CNTER_AUTOCLR_EN_BF_MSK (0x00000004)
#define PCIE_IDE_ID_IDE_CFG_KEY_THRESH_EN_TX_KEY_CNTER_AUTOCLR_EN_BF_DEF (0x00000000)

///< Key counters auto-clear enable bit for RX.  Note: In the case of a
///< 256-bit config, where there are 2 AES engines on the RX path, this
///< bit enables the auto-clear in both counters.
#define PCIE_IDE_ID_IDE_CFG_KEY_THRESH_EN_RX_KEY_CNTER_AUTOCLR_EN_BF_OFF ( 3)
#define PCIE_IDE_ID_IDE_CFG_KEY_THRESH_EN_RX_KEY_CNTER_AUTOCLR_EN_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_KEY_THRESH_EN_RX_KEY_CNTER_AUTOCLR_EN_BF_MSK (0x00000008)
#define PCIE_IDE_ID_IDE_CFG_KEY_THRESH_EN_RX_KEY_CNTER_AUTOCLR_EN_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CFG_KEY_THRESH_EN_RESERVED_31_4_BF_OFF ( 4)
#define PCIE_IDE_ID_IDE_CFG_KEY_THRESH_EN_RESERVED_31_4_BF_WID (28)
#define PCIE_IDE_ID_IDE_CFG_KEY_THRESH_EN_RESERVED_31_4_BF_MSK (0xFFFFFFF0)
#define PCIE_IDE_ID_IDE_CFG_KEY_THRESH_EN_RESERVED_31_4_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CFG_REKEY_REQ_STAT register description at address offset 0x30
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_cfg/REKEY_REQ_STAT
  * Rekey request status Register. Indicates when a TLP counter from a stream hits its threshold.
  */

typedef union {
  struct {
    uint32_t TX_REKEY_REQ_STATUS_S0 : 1;
    ///< Rekey request status for TX stream 0. This bitfield needs to be cleared
    ///< by Software.
    ///< AccessType="RW/1C" BitOffset="0" ResetValue="0x0"
    uint32_t TX_REKEY_REQ_STATUS_S1 : 1;
    ///< Rekey request status for TX stream 1.  This bitfield needs to be cleared
    ///< by Software.
    ///< AccessType="RW/1C" BitOffset="1" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="2" ResetValue="0x0"
    uint32_t RX_REKEY_REQ_STATUS_S0 : 1;
    ///< Rekey request status for RX stream 0.   This bitfield needs to be
    ///< cleared by Software.  Note: In the case of a 256-bit config there
    ///< are 2 AES engines on the RX path and they share the same counter.
    ///< AccessType="RW/1C" BitOffset="16" ResetValue="0x0"
    uint32_t RX_REKEY_REQ_STATUS_S1 : 1;
    ///< Rekey request status for RX stream 1.   This bitfield needs to be
    ///< cleared by Software.  Note: In the case of a 256-bit config there
    ///< are 2 AES engines on the RX path and they share the same counter.
    ///< AccessType="RW/1C" BitOffset="17" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="18" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_id_ide_cfg_rekey_req_stat_reg_t;

#define PCIE_IDE_ID_IDE_CFG_REKEY_REQ_STAT_DEFAULT (0x00000000U)
#define PCIE_IDE_ID_IDE_CFG_REKEY_REQ_STAT_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_REKEY_REQ_STAT_WR_MASK (0x00030003U)


///< Rekey request status for TX stream 0. This bitfield needs to be cleared
///< by Software.
#define PCIE_IDE_ID_IDE_CFG_REKEY_REQ_STAT_TX_REKEY_REQ_STAT_S0_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CFG_REKEY_REQ_STAT_TX_REKEY_REQ_STAT_S0_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_REKEY_REQ_STAT_TX_REKEY_REQ_STAT_S0_BF_MSK (0x00000001)
#define PCIE_IDE_ID_IDE_CFG_REKEY_REQ_STAT_TX_REKEY_REQ_STAT_S0_BF_DEF (0x00000000)

///< Rekey request status for TX stream 1.  This bitfield needs to be cleared
///< by Software.
#define PCIE_IDE_ID_IDE_CFG_REKEY_REQ_STAT_TX_REKEY_REQ_STAT_S1_BF_OFF ( 1)
#define PCIE_IDE_ID_IDE_CFG_REKEY_REQ_STAT_TX_REKEY_REQ_STAT_S1_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_REKEY_REQ_STAT_TX_REKEY_REQ_STAT_S1_BF_MSK (0x00000002)
#define PCIE_IDE_ID_IDE_CFG_REKEY_REQ_STAT_TX_REKEY_REQ_STAT_S1_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CFG_REKEY_REQ_STAT_RESERVED_15_2_BF_OFF ( 2)
#define PCIE_IDE_ID_IDE_CFG_REKEY_REQ_STAT_RESERVED_15_2_BF_WID (14)
#define PCIE_IDE_ID_IDE_CFG_REKEY_REQ_STAT_RESERVED_15_2_BF_MSK (0x0000FFFC)
#define PCIE_IDE_ID_IDE_CFG_REKEY_REQ_STAT_RESERVED_15_2_BF_DEF (0x00000000)

///< Rekey request status for RX stream 0.   This bitfield needs to be
///< cleared by Software.  Note: In the case of a 256-bit config there
///< are 2 AES engines on the RX path and they share the same counter.
#define PCIE_IDE_ID_IDE_CFG_REKEY_REQ_STAT_RX_REKEY_REQ_STAT_S0_BF_OFF (16)
#define PCIE_IDE_ID_IDE_CFG_REKEY_REQ_STAT_RX_REKEY_REQ_STAT_S0_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_REKEY_REQ_STAT_RX_REKEY_REQ_STAT_S0_BF_MSK (0x00010000)
#define PCIE_IDE_ID_IDE_CFG_REKEY_REQ_STAT_RX_REKEY_REQ_STAT_S0_BF_DEF (0x00000000)

///< Rekey request status for RX stream 1.   This bitfield needs to be
///< cleared by Software.  Note: In the case of a 256-bit config there
///< are 2 AES engines on the RX path and they share the same counter.
#define PCIE_IDE_ID_IDE_CFG_REKEY_REQ_STAT_RX_REKEY_REQ_STAT_S1_BF_OFF (17)
#define PCIE_IDE_ID_IDE_CFG_REKEY_REQ_STAT_RX_REKEY_REQ_STAT_S1_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_REKEY_REQ_STAT_RX_REKEY_REQ_STAT_S1_BF_MSK (0x00020000)
#define PCIE_IDE_ID_IDE_CFG_REKEY_REQ_STAT_RX_REKEY_REQ_STAT_S1_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CFG_REKEY_REQ_STAT_RESERVED_31_18_BF_OFF (18)
#define PCIE_IDE_ID_IDE_CFG_REKEY_REQ_STAT_RESERVED_31_18_BF_WID (14)
#define PCIE_IDE_ID_IDE_CFG_REKEY_REQ_STAT_RESERVED_31_18_BF_MSK (0xFFFC0000)
#define PCIE_IDE_ID_IDE_CFG_REKEY_REQ_STAT_RESERVED_31_18_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CFG_TX_KEY_THRESHOLD_LOW_S0 register description at address offset 0x40
  *
  * Register default value:        0xFFFFFFFF
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_cfg/TX_KEY_THRESHOLD_LOW_S0
  * TX Key Threshold value for Stream 0 (least-significant word).
  */

typedef union {
  struct {
    uint32_t TX_KEY_THRESHOLD_LOW_S0 : 32;
    ///< Lower 32 bit of key utilization threshold for TX stream 0.   If ARM
    ///< CCA is supported and the register IDE_ARM_CCA_SEND_INSEC_EN is set
    ///< to 1, when the key counter reaches the specified threshold the stream
    ///< will be sent to insecure.
    ///< AccessType="RW" BitOffset="0" ResetValue="0xFFFFFFFF"
  } ;
  uint32_t value;
} pcie_ide_id_ide_cfg_tx_key_tshold_low_s0_reg_t;

#define PCIE_IDE_ID_IDE_CFG_TX_KEY_TSHOLD_LOW_S0_DEFAULT (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_TSHOLD_LOW_S0_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_TSHOLD_LOW_S0_WR_MASK (0xffffffffU)


///< Lower 32 bit of key utilization threshold for TX stream 0.   If ARM
///< CCA is supported and the register IDE_ARM_CCA_SEND_INSEC_EN is set
///< to 1, when the key counter reaches the specified threshold the stream
///< will be sent to insecure.
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_TSHOLD_LOW_S0_TX_KEY_TSHOLD_LOW_S0_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_TSHOLD_LOW_S0_TX_KEY_TSHOLD_LOW_S0_BF_WID (32)
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_TSHOLD_LOW_S0_TX_KEY_TSHOLD_LOW_S0_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_TSHOLD_LOW_S0_TX_KEY_TSHOLD_LOW_S0_BF_DEF (0xFFFFFFFF)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CFG_TX_KEY_THRESHOLD_HIGH_S0 register description at address offset 0x44
  *
  * Register default value:        0xFFFFFFFF
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_cfg/TX_KEY_THRESHOLD_HIGH_S0
  * TX Key Threshold value for Stream 0 (most-significant word).
  */

typedef union {
  struct {
    uint32_t TX_KEY_THRESHOLD_HIGH_S0 : 32;
    ///< Higher 32 bit of key utilization threshold for TX stream 0.   If ARM
    ///< CCA is supported and the register IDE_ARM_CCA_SEND_INSEC_EN is set
    ///< to 1, when the key counter reaches the specified threshold the stream
    ///< will be sent to insecure.
    ///< AccessType="RW" BitOffset="0" ResetValue="0xFFFFFFFF"
  } ;
  uint32_t value;
} pcie_ide_id_ide_cfg_tx_key_tshold_high_s0_reg_t;

#define PCIE_IDE_ID_IDE_CFG_TX_KEY_TSHOLD_HIGH_S0_DEFAULT (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_TSHOLD_HIGH_S0_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_TSHOLD_HIGH_S0_WR_MASK (0xffffffffU)


///< Higher 32 bit of key utilization threshold for TX stream 0.   If ARM
///< CCA is supported and the register IDE_ARM_CCA_SEND_INSEC_EN is set
///< to 1, when the key counter reaches the specified threshold the stream
///< will be sent to insecure.
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_TSHOLD_HIGH_S0_TX_KEY_TSHOLD_HIGH_S0_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_TSHOLD_HIGH_S0_TX_KEY_TSHOLD_HIGH_S0_BF_WID (32)
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_TSHOLD_HIGH_S0_TX_KEY_TSHOLD_HIGH_S0_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_TSHOLD_HIGH_S0_TX_KEY_TSHOLD_HIGH_S0_BF_DEF (0xFFFFFFFF)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CFG_RX_KEY_THRESHOLD_LOW_S0 register description at address offset 0x48
  *
  * Register default value:        0xFFFFFFFF
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_cfg/RX_KEY_THRESHOLD_LOW_S0
  * RX Key Threshold value for Stream 0 (least-significant word).
  */

typedef union {
  struct {
    uint32_t RX_KEY_THRESHOLD_LOW_S0 : 32;
    ///< Lower 32 bit of key utilization threshold for RX stream 0. Note: In
    ///< the case of a 256-bit config, where there are 2 AES engines on the
    ///< RX path, the same threshold is used for both of them, as they share
    ///< the same counter.  If ARM CCA is supported and the register IDE_ARM_CCA_SEND_INSEC_EN
    ///< is set to 1, when the key counter reaches the specified threshold
    ///< the stream will be sent to insecure.
    ///< AccessType="RW" BitOffset="0" ResetValue="0xFFFFFFFF"
  } ;
  uint32_t value;
} pcie_ide_id_ide_cfg_rx_key_tshold_low_s0_reg_t;

#define PCIE_IDE_ID_IDE_CFG_RX_KEY_TSHOLD_LOW_S0_DEFAULT (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_TSHOLD_LOW_S0_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_TSHOLD_LOW_S0_WR_MASK (0xffffffffU)


///< Lower 32 bit of key utilization threshold for RX stream 0. Note: In
///< the case of a 256-bit config, where there are 2 AES engines on the
///< RX path, the same threshold is used for both of them, as they share
///< the same counter.  If ARM CCA is supported and the register IDE_ARM_CCA_SEND_INSEC_EN
///< is set to 1, when the key counter reaches the specified threshold
///< the stream will be sent to insecure.
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_TSHOLD_LOW_S0_RX_KEY_TSHOLD_LOW_S0_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_TSHOLD_LOW_S0_RX_KEY_TSHOLD_LOW_S0_BF_WID (32)
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_TSHOLD_LOW_S0_RX_KEY_TSHOLD_LOW_S0_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_TSHOLD_LOW_S0_RX_KEY_TSHOLD_LOW_S0_BF_DEF (0xFFFFFFFF)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CFG_RX_KEY_THRESHOLD_HIGH_S0 register description at address offset 0x4c
  *
  * Register default value:        0xFFFFFFFF
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_cfg/RX_KEY_THRESHOLD_HIGH_S0
  * RX Key Threshold value for Stream 0 (most-significant word).
  */

typedef union {
  struct {
    uint32_t RX_KEY_THRESHOLD_HIGH_S0 : 32;
    ///< Higher 32 bit of key utilization threshold for RX stream 0. Note:
    ///< In the case of a 256-bit config, where there are 2 AES engines on
    ///< the RX path, the same threshold is used for both of them, as they
    ///< share the same counter.  If ARM CCA is supported and the register
    ///< IDE_ARM_CCA_SEND_INSEC_EN is set to 1, when the key counter reaches
    ///< the specified threshold the stream will be sent to insecure.
    ///< AccessType="RW" BitOffset="0" ResetValue="0xFFFFFFFF"
  } ;
  uint32_t value;
} pcie_ide_id_ide_cfg_rx_key_tshold_high_s0_reg_t;

#define PCIE_IDE_ID_IDE_CFG_RX_KEY_TSHOLD_HIGH_S0_DEFAULT (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_TSHOLD_HIGH_S0_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_TSHOLD_HIGH_S0_WR_MASK (0xffffffffU)


///< Higher 32 bit of key utilization threshold for RX stream 0. Note:
///< In the case of a 256-bit config, where there are 2 AES engines on
///< the RX path, the same threshold is used for both of them, as they
///< share the same counter.  If ARM CCA is supported and the register
///< IDE_ARM_CCA_SEND_INSEC_EN is set to 1, when the key counter reaches
///< the specified threshold the stream will be sent to insecure.
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_TSHOLD_HIGH_S0_RX_KEY_TSHOLD_HIGH_S0_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_TSHOLD_HIGH_S0_RX_KEY_TSHOLD_HIGH_S0_BF_WID (32)
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_TSHOLD_HIGH_S0_RX_KEY_TSHOLD_HIGH_S0_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_TSHOLD_HIGH_S0_RX_KEY_TSHOLD_HIGH_S0_BF_DEF (0xFFFFFFFF)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CFG_TX_KEY_THRESHOLD_LOW_S1 register description at address offset 0x50
  *
  * Register default value:        0xFFFFFFFF
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_cfg/TX_KEY_THRESHOLD_LOW_S1
  * TX Key Threshold value for Stream 1 (least-significant word).
  */

typedef union {
  struct {
    uint32_t TX_KEY_THRESHOLD_LOW_S1 : 32;
    ///< Lower 32 bit of key utilization threshold for TX stream 1.   If ARM
    ///< CCA is supported and the register IDE_ARM_CCA_SEND_INSEC_EN is set
    ///< to 1, when the key counter reaches the specified threshold the stream
    ///< will be sent to insecure.
    ///< AccessType="RW" BitOffset="0" ResetValue="0xFFFFFFFF"
  } ;
  uint32_t value;
} pcie_ide_id_ide_cfg_tx_key_tshold_low_s1_reg_t;

#define PCIE_IDE_ID_IDE_CFG_TX_KEY_TSHOLD_LOW_S1_DEFAULT (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_TSHOLD_LOW_S1_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_TSHOLD_LOW_S1_WR_MASK (0xffffffffU)


///< Lower 32 bit of key utilization threshold for TX stream 1.   If ARM
///< CCA is supported and the register IDE_ARM_CCA_SEND_INSEC_EN is set
///< to 1, when the key counter reaches the specified threshold the stream
///< will be sent to insecure.
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_TSHOLD_LOW_S1_TX_KEY_TSHOLD_LOW_S1_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_TSHOLD_LOW_S1_TX_KEY_TSHOLD_LOW_S1_BF_WID (32)
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_TSHOLD_LOW_S1_TX_KEY_TSHOLD_LOW_S1_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_TSHOLD_LOW_S1_TX_KEY_TSHOLD_LOW_S1_BF_DEF (0xFFFFFFFF)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CFG_TX_KEY_THRESHOLD_HIGH_S1 register description at address offset 0x54
  *
  * Register default value:        0xFFFFFFFF
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_cfg/TX_KEY_THRESHOLD_HIGH_S1
  * TX Key Threshold value for Stream 1 (most-significant word).
  */

typedef union {
  struct {
    uint32_t TX_KEY_THRESHOLD_HIGH_S1 : 32;
    ///< Higher 32 bit of key utilization threshold for TX stream 1.   If ARM
    ///< CCA is supported and the register IDE_ARM_CCA_SEND_INSEC_EN is set
    ///< to 1, when the key counter reaches the specified threshold the stream
    ///< will be sent to insecure.
    ///< AccessType="RW" BitOffset="0" ResetValue="0xFFFFFFFF"
  } ;
  uint32_t value;
} pcie_ide_id_ide_cfg_tx_key_tshold_high_s1_reg_t;

#define PCIE_IDE_ID_IDE_CFG_TX_KEY_TSHOLD_HIGH_S1_DEFAULT (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_TSHOLD_HIGH_S1_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_TSHOLD_HIGH_S1_WR_MASK (0xffffffffU)


///< Higher 32 bit of key utilization threshold for TX stream 1.   If ARM
///< CCA is supported and the register IDE_ARM_CCA_SEND_INSEC_EN is set
///< to 1, when the key counter reaches the specified threshold the stream
///< will be sent to insecure.
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_TSHOLD_HIGH_S1_TX_KEY_TSHOLD_HIGH_S1_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_TSHOLD_HIGH_S1_TX_KEY_TSHOLD_HIGH_S1_BF_WID (32)
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_TSHOLD_HIGH_S1_TX_KEY_TSHOLD_HIGH_S1_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_TSHOLD_HIGH_S1_TX_KEY_TSHOLD_HIGH_S1_BF_DEF (0xFFFFFFFF)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CFG_RX_KEY_THRESHOLD_LOW_S1 register description at address offset 0x58
  *
  * Register default value:        0xFFFFFFFF
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_cfg/RX_KEY_THRESHOLD_LOW_S1
  * RX Key Threshold value for Stream 1 (least-significant word).
  */

typedef union {
  struct {
    uint32_t RX_KEY_THRESHOLD_LOW_S1 : 32;
    ///< Lower 32 bit of key utilization threshold for RX stream 1. Note: In
    ///< the case of a 256-bit config, where there are 2 AES engines on the
    ///< RX path, the same threshold is used for both of them, as they share
    ///< the same counter.  If ARM CCA is supported and the register IDE_ARM_CCA_SEND_INSEC_EN
    ///< is set to 1, when the key counter reaches the specified threshold
    ///< the stream will be sent to insecure.
    ///< AccessType="RW" BitOffset="0" ResetValue="0xFFFFFFFF"
  } ;
  uint32_t value;
} pcie_ide_id_ide_cfg_rx_key_tshold_low_s1_reg_t;

#define PCIE_IDE_ID_IDE_CFG_RX_KEY_TSHOLD_LOW_S1_DEFAULT (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_TSHOLD_LOW_S1_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_TSHOLD_LOW_S1_WR_MASK (0xffffffffU)


///< Lower 32 bit of key utilization threshold for RX stream 1. Note: In
///< the case of a 256-bit config, where there are 2 AES engines on the
///< RX path, the same threshold is used for both of them, as they share
///< the same counter.  If ARM CCA is supported and the register IDE_ARM_CCA_SEND_INSEC_EN
///< is set to 1, when the key counter reaches the specified threshold
///< the stream will be sent to insecure.
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_TSHOLD_LOW_S1_RX_KEY_TSHOLD_LOW_S1_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_TSHOLD_LOW_S1_RX_KEY_TSHOLD_LOW_S1_BF_WID (32)
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_TSHOLD_LOW_S1_RX_KEY_TSHOLD_LOW_S1_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_TSHOLD_LOW_S1_RX_KEY_TSHOLD_LOW_S1_BF_DEF (0xFFFFFFFF)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CFG_RX_KEY_THRESHOLD_HIGH_S1 register description at address offset 0x5c
  *
  * Register default value:        0xFFFFFFFF
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_cfg/RX_KEY_THRESHOLD_HIGH_S1
  * RX Key Threshold value for Stream 1 (most-significant word).
  */

typedef union {
  struct {
    uint32_t RX_KEY_THRESHOLD_HIGH_S1 : 32;
    ///< Higher 32 bit of key utilization threshold for RX stream 1. Note:
    ///< In the case of a 256-bit config, where there are 2 AES engines on
    ///< the RX path, the same threshold is used for both of them, as they
    ///< share the same counter.  If ARM CCA is supported and the register
    ///< IDE_ARM_CCA_SEND_INSEC_EN is set to 1, when the key counter reaches
    ///< the specified threshold the stream will be sent to insecure.
    ///< AccessType="RW" BitOffset="0" ResetValue="0xFFFFFFFF"
  } ;
  uint32_t value;
} pcie_ide_id_ide_cfg_rx_key_tshold_high_s1_reg_t;

#define PCIE_IDE_ID_IDE_CFG_RX_KEY_TSHOLD_HIGH_S1_DEFAULT (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_TSHOLD_HIGH_S1_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_TSHOLD_HIGH_S1_WR_MASK (0xffffffffU)


///< Higher 32 bit of key utilization threshold for RX stream 1. Note:
///< In the case of a 256-bit config, where there are 2 AES engines on
///< the RX path, the same threshold is used for both of them, as they
///< share the same counter.  If ARM CCA is supported and the register
///< IDE_ARM_CCA_SEND_INSEC_EN is set to 1, when the key counter reaches
///< the specified threshold the stream will be sent to insecure.
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_TSHOLD_HIGH_S1_RX_KEY_TSHOLD_HIGH_S1_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_TSHOLD_HIGH_S1_RX_KEY_TSHOLD_HIGH_S1_BF_WID (32)
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_TSHOLD_HIGH_S1_RX_KEY_TSHOLD_HIGH_S1_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_TSHOLD_HIGH_S1_RX_KEY_TSHOLD_HIGH_S1_BF_DEF (0xFFFFFFFF)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CFG_KEY_SECURITY_STATUS_S0 register description at address offset 0x250
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_cfg/KEY_SECURITY_STATUS_S0
  * Key Security Status value for PR,NPR,CPL substreams belonging to Stream 0.
  */

typedef union {
  struct {
    uint32_t TX_KEY_SWAP_STAT_S0_PR : 1;
    ///< 0 - No key swap request without new key installed in Posted Request
    ///< substream from TX Stream 0. 1 - Key swap request without new key installed
    ///< in Posted Request substream from TX Stream 0.
    ///< AccessType="RW/1C" BitOffset="0" ResetValue="0x0"
    uint32_t TX_KEY_SWAP_STAT_S0_NPR : 1;
    ///< 0 - No key swap request without new key installed in Non-Posted Request
    ///< substream from TX Stream 0. 1 - Key swap request without new key installed
    ///< in Non-Posted Request substream from TX Stream 0.
    ///< AccessType="RW/1C" BitOffset="1" ResetValue="0x0"
    uint32_t TX_KEY_SWAP_STAT_S0_CPL : 1;
    ///< 0 - No key swap request without new key installed in Completion substream
    ///< from TX Stream 0. 1 - Key swap request without new key installed in
    ///< Completion substream from TX Stream 0.
    ///< AccessType="RW/1C" BitOffset="2" ResetValue="0x0"
    uint32_t RX_KEY_SWAP_STAT_S0_PR : 1;
    ///< 0 - No key swap request without new key installed in Posted Request
    ///< substream from RX Stream 0. 1 - Key swap request without new key installed
    ///< in Posted Request substream from RX Stream 0. Note: In the case of
    ///< a 256-bit config, where there are 2 AES engines on the RX path, this
    ///< field ORs together the errors from each AES.
    ///< AccessType="RW/1C" BitOffset="3" ResetValue="0x0"
    uint32_t RX_KEY_SWAP_STAT_S0_NPR : 1;
    ///< 0 - No key swap request without new key installed in Non-Posted Request
    ///< substream from RX Stream 0. 1 - Key swap request without new key installed
    ///< in Non-Posted Request substream from RX Stream 0.  Note: In the case
    ///< of a 256-bit config, where there are 2 AES engines on the RX path,
    ///< this field ORs together the errors from each AES.
    ///< AccessType="RW/1C" BitOffset="4" ResetValue="0x0"
    uint32_t RX_KEY_SWAP_STAT_S0_CPL : 1;
    ///< 0 - No key swap request without new key installed in Completion substream
    ///< from RX Stream 0. 1 - Key swap request without new key installed in
    ///< Completion substream from RX Stream 0.  Note: In the case of a 256-bit
    ///< config, where there are 2 AES engines on the RX path, this field ORs
    ///< together the errors from each AES.
    ///< AccessType="RW/1C" BitOffset="5" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="6" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_id_ide_cfg_key_security_stat_s0_reg_t;

#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S0_DEFAULT (0x00000000U)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S0_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S0_WR_MASK (0x0000003fU)


///< 0 - No key swap request without new key installed in Posted Request
///< substream from TX Stream 0. 1 - Key swap request without new key installed
///< in Posted Request substream from TX Stream 0.
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S0_TX_KEY_SWAP_STAT_S0_PR_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S0_TX_KEY_SWAP_STAT_S0_PR_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S0_TX_KEY_SWAP_STAT_S0_PR_BF_MSK (0x00000001)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S0_TX_KEY_SWAP_STAT_S0_PR_BF_DEF (0x00000000)

///< 0 - No key swap request without new key installed in Non-Posted Request
///< substream from TX Stream 0. 1 - Key swap request without new key installed
///< in Non-Posted Request substream from TX Stream 0.
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S0_TX_KEY_SWAP_STAT_S0_NPR_BF_OFF ( 1)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S0_TX_KEY_SWAP_STAT_S0_NPR_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S0_TX_KEY_SWAP_STAT_S0_NPR_BF_MSK (0x00000002)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S0_TX_KEY_SWAP_STAT_S0_NPR_BF_DEF (0x00000000)

///< 0 - No key swap request without new key installed in Completion substream
///< from TX Stream 0. 1 - Key swap request without new key installed in
///< Completion substream from TX Stream 0.
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S0_TX_KEY_SWAP_STAT_S0_CPL_BF_OFF ( 2)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S0_TX_KEY_SWAP_STAT_S0_CPL_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S0_TX_KEY_SWAP_STAT_S0_CPL_BF_MSK (0x00000004)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S0_TX_KEY_SWAP_STAT_S0_CPL_BF_DEF (0x00000000)

///< 0 - No key swap request without new key installed in Posted Request
///< substream from RX Stream 0. 1 - Key swap request without new key installed
///< in Posted Request substream from RX Stream 0. Note: In the case of
///< a 256-bit config, where there are 2 AES engines on the RX path, this
///< field ORs together the errors from each AES.
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S0_RX_KEY_SWAP_STAT_S0_PR_BF_OFF ( 3)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S0_RX_KEY_SWAP_STAT_S0_PR_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S0_RX_KEY_SWAP_STAT_S0_PR_BF_MSK (0x00000008)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S0_RX_KEY_SWAP_STAT_S0_PR_BF_DEF (0x00000000)

///< 0 - No key swap request without new key installed in Non-Posted Request
///< substream from RX Stream 0. 1 - Key swap request without new key installed
///< in Non-Posted Request substream from RX Stream 0.  Note: In the case
///< of a 256-bit config, where there are 2 AES engines on the RX path,
///< this field ORs together the errors from each AES.
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S0_RX_KEY_SWAP_STAT_S0_NPR_BF_OFF ( 4)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S0_RX_KEY_SWAP_STAT_S0_NPR_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S0_RX_KEY_SWAP_STAT_S0_NPR_BF_MSK (0x00000010)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S0_RX_KEY_SWAP_STAT_S0_NPR_BF_DEF (0x00000000)

///< 0 - No key swap request without new key installed in Completion substream
///< from RX Stream 0. 1 - Key swap request without new key installed in
///< Completion substream from RX Stream 0.  Note: In the case of a 256-bit
///< config, where there are 2 AES engines on the RX path, this field ORs
///< together the errors from each AES.
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S0_RX_KEY_SWAP_STAT_S0_CPL_BF_OFF ( 5)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S0_RX_KEY_SWAP_STAT_S0_CPL_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S0_RX_KEY_SWAP_STAT_S0_CPL_BF_MSK (0x00000020)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S0_RX_KEY_SWAP_STAT_S0_CPL_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S0_RESERVED_31_6_BF_OFF ( 6)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S0_RESERVED_31_6_BF_WID (26)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S0_RESERVED_31_6_BF_MSK (0xFFFFFFC0)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S0_RESERVED_31_6_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CFG_KEY_SECURITY_STATUS_S1 register description at address offset 0x254
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_cfg/KEY_SECURITY_STATUS_S1
  * Key Security Status value for PR,NPR,CPL substreams belonging to Stream 1.
  */

typedef union {
  struct {
    uint32_t TX_KEY_SWAP_STAT_S1_PR : 1;
    ///< 0 - No key swap request without new key installed in Posted Request
    ///< substream from TX Stream 1. 1 - Key swap request without new key installed
    ///< in Posted Request substream from TX Stream 1.
    ///< AccessType="RW/1C" BitOffset="0" ResetValue="0x0"
    uint32_t TX_KEY_SWAP_STAT_S1_NPR : 1;
    ///< 0 - No key swap request without new key installed in Non-Posted Request
    ///< substream from TX Stream 1. 1 - Key swap request without new key installed
    ///< in Non-Posted Request substream from TX Stream 1.
    ///< AccessType="RW/1C" BitOffset="1" ResetValue="0x0"
    uint32_t TX_KEY_SWAP_STAT_S1_CPL : 1;
    ///< 0 - No key swap request without new key installed in Completion substream
    ///< from TX Stream 1. 1 - Key swap request without new key installed in
    ///< Completion substream from TX Stream 1.
    ///< AccessType="RW/1C" BitOffset="2" ResetValue="0x0"
    uint32_t RX_KEY_SWAP_STAT_S1_PR : 1;
    ///< 0 - No key swap request without new key installed in Posted Request
    ///< substream from RX Stream 1. 1 - Key swap request without new key installed
    ///< in Posted Request substream from RX Stream 1.  Note: In the case of
    ///< a 256-bit config, where there are 2 AES engines on the RX path, this
    ///< field ORs together the errors from each AES.
    ///< AccessType="RW/1C" BitOffset="3" ResetValue="0x0"
    uint32_t RX_KEY_SWAP_STAT_S1_NPR : 1;
    ///< 0 - No key swap request without new key installed in Non-Posted Request
    ///< substream from RX Stream 1. 1 - Key swap request without new key installed
    ///< in Non-Posted Request substream from RX Stream 1.  Note: In the case
    ///< of a 256-bit config, where there are 2 AES engines on the RX path,
    ///< this field ORs together the errors from each AES.
    ///< AccessType="RW/1C" BitOffset="4" ResetValue="0x0"
    uint32_t RX_KEY_SWAP_STAT_S1_CPL : 1;
    ///< 0 - No key swap request without new key installed in Completion substream
    ///< from RX Stream 1. 1 - Key swap request without new key installed in
    ///< Completion substream from RX Stream 1.  Note: In the case of a 256-bit
    ///< config, where there are 2 AES engines on the RX path, this field ORs
    ///< together the errors from each AES.
    ///< AccessType="RW/1C" BitOffset="5" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="6" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_id_ide_cfg_key_security_stat_s1_reg_t;

#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S1_DEFAULT (0x00000000U)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S1_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S1_WR_MASK (0x0000003fU)


///< 0 - No key swap request without new key installed in Posted Request
///< substream from TX Stream 1. 1 - Key swap request without new key installed
///< in Posted Request substream from TX Stream 1.
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S1_TX_KEY_SWAP_STAT_S1_PR_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S1_TX_KEY_SWAP_STAT_S1_PR_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S1_TX_KEY_SWAP_STAT_S1_PR_BF_MSK (0x00000001)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S1_TX_KEY_SWAP_STAT_S1_PR_BF_DEF (0x00000000)

///< 0 - No key swap request without new key installed in Non-Posted Request
///< substream from TX Stream 1. 1 - Key swap request without new key installed
///< in Non-Posted Request substream from TX Stream 1.
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S1_TX_KEY_SWAP_STAT_S1_NPR_BF_OFF ( 1)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S1_TX_KEY_SWAP_STAT_S1_NPR_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S1_TX_KEY_SWAP_STAT_S1_NPR_BF_MSK (0x00000002)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S1_TX_KEY_SWAP_STAT_S1_NPR_BF_DEF (0x00000000)

///< 0 - No key swap request without new key installed in Completion substream
///< from TX Stream 1. 1 - Key swap request without new key installed in
///< Completion substream from TX Stream 1.
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S1_TX_KEY_SWAP_STAT_S1_CPL_BF_OFF ( 2)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S1_TX_KEY_SWAP_STAT_S1_CPL_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S1_TX_KEY_SWAP_STAT_S1_CPL_BF_MSK (0x00000004)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S1_TX_KEY_SWAP_STAT_S1_CPL_BF_DEF (0x00000000)

///< 0 - No key swap request without new key installed in Posted Request
///< substream from RX Stream 1. 1 - Key swap request without new key installed
///< in Posted Request substream from RX Stream 1.  Note: In the case of
///< a 256-bit config, where there are 2 AES engines on the RX path, this
///< field ORs together the errors from each AES.
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S1_RX_KEY_SWAP_STAT_S1_PR_BF_OFF ( 3)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S1_RX_KEY_SWAP_STAT_S1_PR_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S1_RX_KEY_SWAP_STAT_S1_PR_BF_MSK (0x00000008)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S1_RX_KEY_SWAP_STAT_S1_PR_BF_DEF (0x00000000)

///< 0 - No key swap request without new key installed in Non-Posted Request
///< substream from RX Stream 1. 1 - Key swap request without new key installed
///< in Non-Posted Request substream from RX Stream 1.  Note: In the case
///< of a 256-bit config, where there are 2 AES engines on the RX path,
///< this field ORs together the errors from each AES.
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S1_RX_KEY_SWAP_STAT_S1_NPR_BF_OFF ( 4)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S1_RX_KEY_SWAP_STAT_S1_NPR_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S1_RX_KEY_SWAP_STAT_S1_NPR_BF_MSK (0x00000010)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S1_RX_KEY_SWAP_STAT_S1_NPR_BF_DEF (0x00000000)

///< 0 - No key swap request without new key installed in Completion substream
///< from RX Stream 1. 1 - Key swap request without new key installed in
///< Completion substream from RX Stream 1.  Note: In the case of a 256-bit
///< config, where there are 2 AES engines on the RX path, this field ORs
///< together the errors from each AES.
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S1_RX_KEY_SWAP_STAT_S1_CPL_BF_OFF ( 5)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S1_RX_KEY_SWAP_STAT_S1_CPL_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S1_RX_KEY_SWAP_STAT_S1_CPL_BF_MSK (0x00000020)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S1_RX_KEY_SWAP_STAT_S1_CPL_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S1_RESERVED_31_6_BF_OFF ( 6)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S1_RESERVED_31_6_BF_WID (26)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S1_RESERVED_31_6_BF_MSK (0xFFFFFFC0)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S1_RESERVED_31_6_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CFG_IDE_COUNTER_OVERFLOW register description at address offset 0x2d4
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_cfg/IDE_COUNTER_OVERFLOW
  * IDE Counter Overflow register.
  */

typedef union {
  struct {
    uint32_t OVERFLOW_STATUS : 1;
    ///< IDE Counter Overflow Indication.
    ///< AccessType="RW/1C" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_id_ide_cfg_ide_cnter_overflow_reg_t;

#define PCIE_IDE_ID_IDE_CFG_IDE_CNTER_OVERFLOW_DEFAULT (0x00000000U)
#define PCIE_IDE_ID_IDE_CFG_IDE_CNTER_OVERFLOW_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_IDE_CNTER_OVERFLOW_WR_MASK (0x00000001U)


///< IDE Counter Overflow Indication.
#define PCIE_IDE_ID_IDE_CFG_IDE_CNTER_OVERFLOW_STAT_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CFG_IDE_CNTER_OVERFLOW_STAT_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_IDE_CNTER_OVERFLOW_STAT_BF_MSK (0x00000001)
#define PCIE_IDE_ID_IDE_CFG_IDE_CNTER_OVERFLOW_STAT_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CFG_IDE_CNTER_OVERFLOW_RESERVED_31_1_BF_OFF ( 1)
#define PCIE_IDE_ID_IDE_CFG_IDE_CNTER_OVERFLOW_RESERVED_31_1_BF_WID (31)
#define PCIE_IDE_ID_IDE_CFG_IDE_CNTER_OVERFLOW_RESERVED_31_1_BF_MSK (0xFFFFFFFE)
#define PCIE_IDE_ID_IDE_CFG_IDE_CNTER_OVERFLOW_RESERVED_31_1_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CFG_IDE_IRQ_EN register description at address offset 0x2d8
  *
  * Register default value:        0xFFFFF7DE
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_cfg/IDE_IRQ_EN
  * IDE Interrrupt Enable register.
  */

typedef union {
  struct {
    uint32_t  : 1;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t KEY_SECURITY_IRQ_EN_GLB : 1;
    ///< Enables Security Status IRQ global, when a key swap is requested without
    ///< a new key installed.                 Note: It is also required to
    ///< select which streams are used in the interrupt. This is done by setting
    ///< the correspondent bit in the KEY_SECURITY_IRQ register.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x1"
    uint32_t IDE_CNT_OVF_IRQ_EN_GLB : 1;
    ///< Enables IDE Counter Overflow IRQ global, indicating  when a Sync Message
    ///< isn't sent in time on TX path.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x1"
    uint32_t RX_MISROUTED_IRQ_EN_GLBL : 1;
    ///< Enables RX Misrouted IRQ global, indicating misrouted TLP errors in
    ///< the data path.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x1"
    uint32_t RX_CHECK_FAILED_IRQ_EN_GLBL : 1;
    ///< Enables RX Check Failed IRQ global, indicating the following errors
    ///< in the data path:                       - a IDE check failed causes
    ///< a Stream to transition from Secure to Insecure,
    ///< - a Received IDE Fail Message causes Stream to transition from Secure
    ///< to Insecure.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="5" ResetValue="0x0"
    uint32_t RX_PCRC_ERR_IRQ_EN_GLBL : 1;
    ///< Enables RX PCRC Error IRQ global, indicating detected PCRC errors
    ///< in any RX data path.
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t TX_KBIT_TOGGLED_IRQ_EN_GLBL : 1;
    ///< Enables TX Kbit toggled IRQ global, indicating when a Kbit toggles
    ///< in TX data path.
    ///< AccessType="RW" BitOffset="7" ResetValue="0x1"
    uint32_t RX_KBIT_TOGGLED_IRQ_EN_GLBL : 1;
    ///< Enables RX Kbit toggled IRQ global, indicating when a Kbit toggles
    ///< in RX data path.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1"
    uint32_t TX_REKEY_REQ_IRQ_EN_GLBL : 1;
    ///< Enables TX Rekey Request IRQ global, indicating when a TLP counter
    ///< from a stream hits its threshold, in the TX data path.
    ///< AccessType="RW" BitOffset="9" ResetValue="0x1"
    uint32_t RX_REKEY_REQ_IRQ_EN_GLBL : 1;
    ///< Enables RX Rekey Request IRQ global, indicating when a TLP counter
    ///< from a stream hits its threshold, in the RX data path. Note: In the
    ///< case of a 256-bit config there are 2 AES engines on the RX path and
    ///< they share the same counter.
    ///< AccessType="RW" BitOffset="10" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="11" ResetValue="0x0"
    uint32_t INSEC_STREAM_IRQ_EN_GLBL : 1;
    ///< Enables Insecure Stream IRQ global, indicating when any Stream transitions
    ///< from a Secure to Insecure state.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x1"
    uint32_t  : 18;
    ///< Reserved and read as one.
    ///< AccessType="RO" BitOffset="13" ResetValue="0x3FFFF"
    uint32_t IRQ_EN_GLBL : 1;
    ///< Enables Global interrupt.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x1"
  } ;
  uint32_t value;
} pcie_ide_id_ide_cfg_ide_irq_en_reg_t;

#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_DEFAULT (0xfffff7deU)
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_WR_MASK (0x800017deU)


///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_RESERVED_0_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_RESERVED_0_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_RESERVED_0_BF_MSK (0x00000001)
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_RESERVED_0_BF_DEF (0x00000000)

///< Enables Security Status IRQ global, when a key swap is requested without
///< a new key installed.                 Note: It is also required to
///< select which streams are used in the interrupt. This is done by setting
///< the correspondent bit in the KEY_SECURITY_IRQ register.
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_KEY_SECURITY_IRQ_EN_GLB_BF_OFF ( 1)
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_KEY_SECURITY_IRQ_EN_GLB_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_KEY_SECURITY_IRQ_EN_GLB_BF_MSK (0x00000002)
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_KEY_SECURITY_IRQ_EN_GLB_BF_DEF (0x00000002)

///< Enables IDE Counter Overflow IRQ global, indicating  when a Sync Message
///< isn't sent in time on TX path.
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_IDE_CNT_OVF_IRQ_EN_GLB_BF_OFF ( 2)
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_IDE_CNT_OVF_IRQ_EN_GLB_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_IDE_CNT_OVF_IRQ_EN_GLB_BF_MSK (0x00000004)
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_IDE_CNT_OVF_IRQ_EN_GLB_BF_DEF (0x00000004)

///< Enables RX Misrouted IRQ global, indicating misrouted TLP errors in
///< the data path.
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_RX_MISROUTED_IRQ_EN_GLBL_BF_OFF ( 3)
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_RX_MISROUTED_IRQ_EN_GLBL_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_RX_MISROUTED_IRQ_EN_GLBL_BF_MSK (0x00000008)
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_RX_MISROUTED_IRQ_EN_GLBL_BF_DEF (0x00000008)

///< Enables RX Check Failed IRQ global, indicating the following errors
///< in the data path:                       - a IDE check failed causes
///< a Stream to transition from Secure to Insecure,
///< - a Received IDE Fail Message causes Stream to transition from Secure
///< to Insecure.
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_RX_CHECK_FAILED_IRQ_EN_GLBL_BF_OFF ( 4)
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_RX_CHECK_FAILED_IRQ_EN_GLBL_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_RX_CHECK_FAILED_IRQ_EN_GLBL_BF_MSK (0x00000010)
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_RX_CHECK_FAILED_IRQ_EN_GLBL_BF_DEF (0x00000010)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_RESERVED_5_BF_OFF ( 5)
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_RESERVED_5_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_RESERVED_5_BF_MSK (0x00000020)
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_RESERVED_5_BF_DEF (0x00000000)

///< Enables RX PCRC Error IRQ global, indicating detected PCRC errors
///< in any RX data path.
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_RX_PCRC_ERR_IRQ_EN_GLBL_BF_OFF ( 6)
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_RX_PCRC_ERR_IRQ_EN_GLBL_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_RX_PCRC_ERR_IRQ_EN_GLBL_BF_MSK (0x00000040)
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_RX_PCRC_ERR_IRQ_EN_GLBL_BF_DEF (0x00000040)

///< Enables TX Kbit toggled IRQ global, indicating when a Kbit toggles
///< in TX data path.
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_TX_KBIT_TOGGLED_IRQ_EN_GLBL_BF_OFF ( 7)
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_TX_KBIT_TOGGLED_IRQ_EN_GLBL_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_TX_KBIT_TOGGLED_IRQ_EN_GLBL_BF_MSK (0x00000080)
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_TX_KBIT_TOGGLED_IRQ_EN_GLBL_BF_DEF (0x00000080)

///< Enables RX Kbit toggled IRQ global, indicating when a Kbit toggles
///< in RX data path.
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_RX_KBIT_TOGGLED_IRQ_EN_GLBL_BF_OFF ( 8)
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_RX_KBIT_TOGGLED_IRQ_EN_GLBL_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_RX_KBIT_TOGGLED_IRQ_EN_GLBL_BF_MSK (0x00000100)
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_RX_KBIT_TOGGLED_IRQ_EN_GLBL_BF_DEF (0x00000100)

///< Enables TX Rekey Request IRQ global, indicating when a TLP counter
///< from a stream hits its threshold, in the TX data path.
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_TX_REKEY_REQ_IRQ_EN_GLBL_BF_OFF ( 9)
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_TX_REKEY_REQ_IRQ_EN_GLBL_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_TX_REKEY_REQ_IRQ_EN_GLBL_BF_MSK (0x00000200)
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_TX_REKEY_REQ_IRQ_EN_GLBL_BF_DEF (0x00000200)

///< Enables RX Rekey Request IRQ global, indicating when a TLP counter
///< from a stream hits its threshold, in the RX data path. Note: In the
///< case of a 256-bit config there are 2 AES engines on the RX path and
///< they share the same counter.
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_RX_REKEY_REQ_IRQ_EN_GLBL_BF_OFF (10)
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_RX_REKEY_REQ_IRQ_EN_GLBL_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_RX_REKEY_REQ_IRQ_EN_GLBL_BF_MSK (0x00000400)
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_RX_REKEY_REQ_IRQ_EN_GLBL_BF_DEF (0x00000400)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_RESERVED_11_BF_OFF (11)
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_RESERVED_11_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_RESERVED_11_BF_MSK (0x00000800)
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_RESERVED_11_BF_DEF (0x00000000)

///< Enables Insecure Stream IRQ global, indicating when any Stream transitions
///< from a Secure to Insecure state.
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_INSEC_STRM_IRQ_EN_GLBL_BF_OFF (12)
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_INSEC_STRM_IRQ_EN_GLBL_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_INSEC_STRM_IRQ_EN_GLBL_BF_MSK (0x00001000)
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_INSEC_STRM_IRQ_EN_GLBL_BF_DEF (0x00001000)

///< Reserved and read as one.
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_RESERVED_30_13_BF_OFF (13)
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_RESERVED_30_13_BF_WID (18)
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_RESERVED_30_13_BF_MSK (0x7FFFE000)
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_RESERVED_30_13_BF_DEF (0x7FFFE000)

///< Enables Global interrupt.
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_IRQ_EN_GLBL_BF_OFF (31)
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_IRQ_EN_GLBL_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_IRQ_EN_GLBL_BF_MSK (0x80000000)
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_IRQ_EN_GLBL_BF_DEF (0x80000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CFG_KEY_SECURITY_IRQ_EN register description at address offset 0x2e0
  *
  * Register default value:        0xFFFFFFFF
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_cfg/KEY_SECURITY_IRQ_EN
  * Key Security Interrupt Enable register.
  */

typedef union {
  struct {
    uint32_t KEY_SECURITY_S0_IRQ_EN : 1;
    ///< This bit enables Security Status IRQ global when a key swap is requested
    ///< in Stream 0 without a new key installed.             Note: It is required
    ///< to set the KEY_SECURITY_IRQ_EN_GLB  bit from IDE_IRQ_EN to enable
    ///< this behaviour.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t KEY_SECURITY_S1_IRQ_EN : 1;
    ///< This bit enables Security Status IRQ global when a key swap is requested
    ///< in Stream 1 without a new key installed.             Note: It is required
    ///< to set the KEY_SECURITY_IRQ_EN_GLB  bit from IDE_IRQ_EN to enable
    ///< this behaviour.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved and read as 1.
    ///< AccessType="RO" BitOffset="2" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved and read as 1.
    ///< AccessType="RO" BitOffset="3" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved and read as 1.
    ///< AccessType="RO" BitOffset="4" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved and read as 1.
    ///< AccessType="RO" BitOffset="5" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved and read as 1.
    ///< AccessType="RO" BitOffset="6" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved and read as 1.
    ///< AccessType="RO" BitOffset="7" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved and read as 1.
    ///< AccessType="RO" BitOffset="8" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved and read as 1.
    ///< AccessType="RO" BitOffset="9" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved and read as 1.
    ///< AccessType="RO" BitOffset="10" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved and read as 1.
    ///< AccessType="RO" BitOffset="11" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved and read as 1.
    ///< AccessType="RO" BitOffset="12" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved and read as 1.
    ///< AccessType="RO" BitOffset="13" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved and read as 1.
    ///< AccessType="RO" BitOffset="14" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved and read as 1.
    ///< AccessType="RO" BitOffset="15" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved and read as 1.
    ///< AccessType="RO" BitOffset="16" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved and read as 1.
    ///< AccessType="RO" BitOffset="17" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved and read as 1.
    ///< AccessType="RO" BitOffset="18" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved and read as 1.
    ///< AccessType="RO" BitOffset="19" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved and read as 1.
    ///< AccessType="RO" BitOffset="20" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved and read as 1.
    ///< AccessType="RO" BitOffset="21" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved and read as 1.
    ///< AccessType="RO" BitOffset="22" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved and read as 1.
    ///< AccessType="RO" BitOffset="23" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved and read as 1.
    ///< AccessType="RO" BitOffset="24" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved and read as 1.
    ///< AccessType="RO" BitOffset="25" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved and read as 1.
    ///< AccessType="RO" BitOffset="26" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved and read as 1.
    ///< AccessType="RO" BitOffset="27" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved and read as 1.
    ///< AccessType="RO" BitOffset="28" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved and read as 1.
    ///< AccessType="RO" BitOffset="29" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved and read as 1.
    ///< AccessType="RO" BitOffset="30" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved and read as 1.
    ///< AccessType="RO" BitOffset="31" ResetValue="0x1"
  } ;
  uint32_t value;
} pcie_ide_id_ide_cfg_key_security_irq_en_reg_t;

#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_DEFAULT (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_WR_MASK (0x00000003U)


///< This bit enables Security Status IRQ global when a key swap is requested
///< in Stream 0 without a new key installed.             Note: It is required
///< to set the KEY_SECURITY_IRQ_EN_GLB  bit from IDE_IRQ_EN to enable
///< this behaviour.
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_KEY_SECURITY_S0_IRQ_EN_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_KEY_SECURITY_S0_IRQ_EN_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_KEY_SECURITY_S0_IRQ_EN_BF_MSK (0x00000001)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_KEY_SECURITY_S0_IRQ_EN_BF_DEF (0x00000001)

///< This bit enables Security Status IRQ global when a key swap is requested
///< in Stream 1 without a new key installed.             Note: It is required
///< to set the KEY_SECURITY_IRQ_EN_GLB  bit from IDE_IRQ_EN to enable
///< this behaviour.
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_KEY_SECURITY_S1_IRQ_EN_BF_OFF ( 1)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_KEY_SECURITY_S1_IRQ_EN_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_KEY_SECURITY_S1_IRQ_EN_BF_MSK (0x00000002)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_KEY_SECURITY_S1_IRQ_EN_BF_DEF (0x00000002)

///< Reserved and read as 1.
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_2_BF_OFF ( 2)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_2_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_2_BF_MSK (0x00000004)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_2_BF_DEF (0x00000004)

///< Reserved and read as 1.
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_3_BF_OFF ( 3)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_3_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_3_BF_MSK (0x00000008)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_3_BF_DEF (0x00000008)

///< Reserved and read as 1.
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_4_BF_OFF ( 4)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_4_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_4_BF_MSK (0x00000010)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_4_BF_DEF (0x00000010)

///< Reserved and read as 1.
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_5_BF_OFF ( 5)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_5_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_5_BF_MSK (0x00000020)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_5_BF_DEF (0x00000020)

///< Reserved and read as 1.
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_6_BF_OFF ( 6)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_6_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_6_BF_MSK (0x00000040)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_6_BF_DEF (0x00000040)

///< Reserved and read as 1.
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_7_BF_OFF ( 7)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_7_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_7_BF_MSK (0x00000080)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_7_BF_DEF (0x00000080)

///< Reserved and read as 1.
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_8_BF_OFF ( 8)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_8_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_8_BF_MSK (0x00000100)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_8_BF_DEF (0x00000100)

///< Reserved and read as 1.
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_9_BF_OFF ( 9)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_9_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_9_BF_MSK (0x00000200)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_9_BF_DEF (0x00000200)

///< Reserved and read as 1.
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_10_BF_OFF (10)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_10_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_10_BF_MSK (0x00000400)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_10_BF_DEF (0x00000400)

///< Reserved and read as 1.
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_11_BF_OFF (11)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_11_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_11_BF_MSK (0x00000800)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_11_BF_DEF (0x00000800)

///< Reserved and read as 1.
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_12_BF_OFF (12)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_12_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_12_BF_MSK (0x00001000)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_12_BF_DEF (0x00001000)

///< Reserved and read as 1.
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_13_BF_OFF (13)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_13_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_13_BF_MSK (0x00002000)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_13_BF_DEF (0x00002000)

///< Reserved and read as 1.
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_14_BF_OFF (14)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_14_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_14_BF_MSK (0x00004000)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_14_BF_DEF (0x00004000)

///< Reserved and read as 1.
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_15_BF_OFF (15)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_15_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_15_BF_MSK (0x00008000)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_15_BF_DEF (0x00008000)

///< Reserved and read as 1.
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_16_BF_OFF (16)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_16_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_16_BF_MSK (0x00010000)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_16_BF_DEF (0x00010000)

///< Reserved and read as 1.
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_17_BF_OFF (17)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_17_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_17_BF_MSK (0x00020000)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_17_BF_DEF (0x00020000)

///< Reserved and read as 1.
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_18_BF_OFF (18)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_18_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_18_BF_MSK (0x00040000)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_18_BF_DEF (0x00040000)

///< Reserved and read as 1.
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_19_BF_OFF (19)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_19_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_19_BF_MSK (0x00080000)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_19_BF_DEF (0x00080000)

///< Reserved and read as 1.
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_20_BF_OFF (20)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_20_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_20_BF_MSK (0x00100000)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_20_BF_DEF (0x00100000)

///< Reserved and read as 1.
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_21_BF_OFF (21)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_21_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_21_BF_MSK (0x00200000)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_21_BF_DEF (0x00200000)

///< Reserved and read as 1.
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_22_BF_OFF (22)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_22_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_22_BF_MSK (0x00400000)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_22_BF_DEF (0x00400000)

///< Reserved and read as 1.
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_23_BF_OFF (23)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_23_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_23_BF_MSK (0x00800000)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_23_BF_DEF (0x00800000)

///< Reserved and read as 1.
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_24_BF_OFF (24)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_24_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_24_BF_MSK (0x01000000)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_24_BF_DEF (0x01000000)

///< Reserved and read as 1.
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_25_BF_OFF (25)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_25_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_25_BF_MSK (0x02000000)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_25_BF_DEF (0x02000000)

///< Reserved and read as 1.
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_26_BF_OFF (26)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_26_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_26_BF_MSK (0x04000000)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_26_BF_DEF (0x04000000)

///< Reserved and read as 1.
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_27_BF_OFF (27)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_27_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_27_BF_MSK (0x08000000)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_27_BF_DEF (0x08000000)

///< Reserved and read as 1.
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_28_BF_OFF (28)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_28_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_28_BF_MSK (0x10000000)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_28_BF_DEF (0x10000000)

///< Reserved and read as 1.
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_29_BF_OFF (29)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_29_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_29_BF_MSK (0x20000000)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_29_BF_DEF (0x20000000)

///< Reserved and read as 1.
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_30_BF_OFF (30)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_30_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_30_BF_MSK (0x40000000)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_30_BF_DEF (0x40000000)

///< Reserved and read as 1.
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_31_BF_OFF (31)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_31_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_31_BF_MSK (0x80000000)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_RESERVED_31_BF_DEF (0x80000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CFG_IDE_IO_IRQ_STATUS register description at address offset 0x2e4
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_cfg/IDE_IO_IRQ_STATUS
  * IDE Interrrupt Status register.
  */

typedef union {
  struct {
    uint32_t RX_MISROUTED_IRQ_GLBL : 1;
    ///< RX Misrouted IRQ global. This bit is set to 1b, and the global IRQ
    ///< line asserts (if this source is enabled).
    ///< AccessType="RW/1C" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
    uint32_t RX_CHECK_FAILED_IRQ_GLBL : 1;
    ///< RX Check Failed IRQ global:                      - a IDE check failed,
    ///< on the RX datapath, causes a Stream to transition from Secure to Insecure,
    ///< - a Received IDE Fail Message, on the RX datapath, causes Stream to
    ///< transition from Secure to Insecure.  Note: This bit is set to 1b,
    ///< and the global IRQ line asserts (if this source is enabled).
    ///< AccessType="RW/1C" BitOffset="2" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="3" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="4" ResetValue="0x0"
    uint32_t RX_PCRC_ERR_IRQ_GLBL : 1;
    ///< RX PCRC Error Status bit. This bit is set to 1b, and the global IRQ
    ///< line asserts (if this source is enabled).
    ///< AccessType="RW/1C" BitOffset="5" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="6" ResetValue="0x0"
    uint32_t TX_KBIT_TOGGLED_IRQ_GLBL : 1;
    ///< TX Kbit toggled IRQ global.   This bit is set to 1b, and the global
    ///< IRQ line asserts (if this source is enabled).
    ///< AccessType="RW/1C" BitOffset="7" ResetValue="0x0"
    uint32_t RX_KBIT_TOGGLED_IRQ_GLBL : 1;
    ///< RX Kbit toggled IRQ global.   This bit is set to 1b, and the global
    ///< IRQ line asserts (if this source is enabled).
    ///< AccessType="RW/1C" BitOffset="8" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="9" ResetValue="0x0"
    uint32_t TX_REKEY_REQ_IRQ_GLBL : 1;
    ///< TX Rekey Request IRQ global.  This bit is set to 1b, and the global
    ///< IRQ line asserts (if this source is enabled).
    ///< AccessType="RW/1C" BitOffset="10" ResetValue="0x0"
    uint32_t RX_REKEY_REQ_IRQ_GLBL : 1;
    ///< RX Rekey Request IRQ global.  This bit is set to 1b, and the global
    ///< IRQ line asserts (if this source is enabled).
    ///< AccessType="RW/1C" BitOffset="11" ResetValue="0x0"
    uint32_t INSEC_STREAM_IRQ_GLBL : 1;
    ///< Insecure Stream IRQ global.   This bit is set to 1b, and the global
    ///< IRQ line is asserted (if this source is enabled).
    ///< AccessType="RW/1C" BitOffset="12" ResetValue="0x0"
    uint32_t  : 19;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="13" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_id_ide_cfg_ide_io_irq_stat_reg_t;

#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_DEFAULT (0x00000000U)
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_WR_MASK (0x00001da5U)


///< RX Misrouted IRQ global. This bit is set to 1b, and the global IRQ
///< line asserts (if this source is enabled).
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_RX_MISROUTED_IRQ_GLBL_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_RX_MISROUTED_IRQ_GLBL_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_RX_MISROUTED_IRQ_GLBL_BF_MSK (0x00000001)
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_RX_MISROUTED_IRQ_GLBL_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_RESERVED_1_BF_OFF ( 1)
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_RESERVED_1_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_RESERVED_1_BF_MSK (0x00000002)
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_RESERVED_1_BF_DEF (0x00000000)

///< RX Check Failed IRQ global:                      - a IDE check failed,
///< on the RX datapath, causes a Stream to transition from Secure to Insecure,
///< - a Received IDE Fail Message, on the RX datapath, causes Stream to
///< transition from Secure to Insecure.  Note: This bit is set to 1b,
///< and the global IRQ line asserts (if this source is enabled).
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_RX_CHECK_FAILED_IRQ_GLBL_BF_OFF ( 2)
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_RX_CHECK_FAILED_IRQ_GLBL_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_RX_CHECK_FAILED_IRQ_GLBL_BF_MSK (0x00000004)
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_RX_CHECK_FAILED_IRQ_GLBL_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_RESERVED_3_BF_OFF ( 3)
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_RESERVED_3_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_RESERVED_3_BF_MSK (0x00000008)
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_RESERVED_3_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_RESERVED_4_BF_OFF ( 4)
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_RESERVED_4_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_RESERVED_4_BF_MSK (0x00000010)
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_RESERVED_4_BF_DEF (0x00000000)

///< RX PCRC Error Status bit. This bit is set to 1b, and the global IRQ
///< line asserts (if this source is enabled).
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_RX_PCRC_ERR_IRQ_GLBL_BF_OFF ( 5)
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_RX_PCRC_ERR_IRQ_GLBL_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_RX_PCRC_ERR_IRQ_GLBL_BF_MSK (0x00000020)
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_RX_PCRC_ERR_IRQ_GLBL_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_RESERVED_6_BF_OFF ( 6)
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_RESERVED_6_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_RESERVED_6_BF_MSK (0x00000040)
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_RESERVED_6_BF_DEF (0x00000000)

///< TX Kbit toggled IRQ global.   This bit is set to 1b, and the global
///< IRQ line asserts (if this source is enabled).
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_TX_KBIT_TOGGLED_IRQ_GLBL_BF_OFF ( 7)
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_TX_KBIT_TOGGLED_IRQ_GLBL_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_TX_KBIT_TOGGLED_IRQ_GLBL_BF_MSK (0x00000080)
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_TX_KBIT_TOGGLED_IRQ_GLBL_BF_DEF (0x00000000)

///< RX Kbit toggled IRQ global.   This bit is set to 1b, and the global
///< IRQ line asserts (if this source is enabled).
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_RX_KBIT_TOGGLED_IRQ_GLBL_BF_OFF ( 8)
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_RX_KBIT_TOGGLED_IRQ_GLBL_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_RX_KBIT_TOGGLED_IRQ_GLBL_BF_MSK (0x00000100)
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_RX_KBIT_TOGGLED_IRQ_GLBL_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_RESERVED_9_BF_OFF ( 9)
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_RESERVED_9_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_RESERVED_9_BF_MSK (0x00000200)
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_RESERVED_9_BF_DEF (0x00000000)

///< TX Rekey Request IRQ global.  This bit is set to 1b, and the global
///< IRQ line asserts (if this source is enabled).
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_TX_REKEY_REQ_IRQ_GLBL_BF_OFF (10)
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_TX_REKEY_REQ_IRQ_GLBL_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_TX_REKEY_REQ_IRQ_GLBL_BF_MSK (0x00000400)
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_TX_REKEY_REQ_IRQ_GLBL_BF_DEF (0x00000000)

///< RX Rekey Request IRQ global.  This bit is set to 1b, and the global
///< IRQ line asserts (if this source is enabled).
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_RX_REKEY_REQ_IRQ_GLBL_BF_OFF (11)
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_RX_REKEY_REQ_IRQ_GLBL_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_RX_REKEY_REQ_IRQ_GLBL_BF_MSK (0x00000800)
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_RX_REKEY_REQ_IRQ_GLBL_BF_DEF (0x00000000)

///< Insecure Stream IRQ global.   This bit is set to 1b, and the global
///< IRQ line is asserted (if this source is enabled).
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_INSEC_STRM_IRQ_GLBL_BF_OFF (12)
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_INSEC_STRM_IRQ_GLBL_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_INSEC_STRM_IRQ_GLBL_BF_MSK (0x00001000)
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_INSEC_STRM_IRQ_GLBL_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_RESERVED_31_13_BF_OFF (13)
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_RESERVED_31_13_BF_WID (19)
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_RESERVED_31_13_BF_MSK (0xFFFFE000)
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_RESERVED_31_13_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CFG_LNK_SND_STREAM_INSECURE register description at address offset 0x2e8
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_cfg/LNK_SND_STREAM_INSECURE
  * Send Link Stream to Insecure.
  */

typedef union {
  struct {
    uint32_t LNK_SND_STREAM_0_INSECURE : 1;
    ///< Setting this bit to 1 sends link stream 0 to insecure mode.  This
    ///< bit auto clears.
    ///< AccessType="WS" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_id_ide_cfg_lnk_snd_strm_insecure_reg_t;

#define PCIE_IDE_ID_IDE_CFG_LNK_SND_STRM_INSECURE_DEFAULT (0x00000000U)
#define PCIE_IDE_ID_IDE_CFG_LNK_SND_STRM_INSECURE_RD_MASK (0xfffffffeU)
#define PCIE_IDE_ID_IDE_CFG_LNK_SND_STRM_INSECURE_WR_MASK (0x00000001U)


///< Setting this bit to 1 sends link stream 0 to insecure mode.  This
///< bit auto clears.
#define PCIE_IDE_ID_IDE_CFG_LNK_SND_STRM_INSECURE_LNK_SND_STRM_0_INSECURE_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CFG_LNK_SND_STRM_INSECURE_LNK_SND_STRM_0_INSECURE_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_LNK_SND_STRM_INSECURE_LNK_SND_STRM_0_INSECURE_BF_MSK (0x00000001)
#define PCIE_IDE_ID_IDE_CFG_LNK_SND_STRM_INSECURE_LNK_SND_STRM_0_INSECURE_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CFG_LNK_SND_STRM_INSECURE_RESERVED_31_1_BF_OFF ( 1)
#define PCIE_IDE_ID_IDE_CFG_LNK_SND_STRM_INSECURE_RESERVED_31_1_BF_WID (31)
#define PCIE_IDE_ID_IDE_CFG_LNK_SND_STRM_INSECURE_RESERVED_31_1_BF_MSK (0xFFFFFFFE)
#define PCIE_IDE_ID_IDE_CFG_LNK_SND_STRM_INSECURE_RESERVED_31_1_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CFG_SLT_SND_STREAM_INSECURE register description at address offset 0x2ec
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_cfg/SLT_SND_STREAM_INSECURE
  * Send Selective Stream to Insecure.
  */

typedef union {
  struct {
    uint32_t SLT_SND_STREAM_0_INSECURE : 1;
    ///< Setting this bit to 1 sends selective stream 0 to insecure mode.
    ///< This bit auto clears.
    ///< AccessType="WS" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_id_ide_cfg_slt_snd_strm_insecure_reg_t;

#define PCIE_IDE_ID_IDE_CFG_SLT_SND_STRM_INSECURE_DEFAULT (0x00000000U)
#define PCIE_IDE_ID_IDE_CFG_SLT_SND_STRM_INSECURE_RD_MASK (0xfffffffeU)
#define PCIE_IDE_ID_IDE_CFG_SLT_SND_STRM_INSECURE_WR_MASK (0x00000001U)


///< Setting this bit to 1 sends selective stream 0 to insecure mode.
///< This bit auto clears.
#define PCIE_IDE_ID_IDE_CFG_SLT_SND_STRM_INSECURE_SLT_SND_STRM_0_INSECURE_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CFG_SLT_SND_STRM_INSECURE_SLT_SND_STRM_0_INSECURE_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_SLT_SND_STRM_INSECURE_SLT_SND_STRM_0_INSECURE_BF_MSK (0x00000001)
#define PCIE_IDE_ID_IDE_CFG_SLT_SND_STRM_INSECURE_SLT_SND_STRM_0_INSECURE_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CFG_SLT_SND_STRM_INSECURE_RESERVED_31_1_BF_OFF ( 1)
#define PCIE_IDE_ID_IDE_CFG_SLT_SND_STRM_INSECURE_RESERVED_31_1_BF_WID (31)
#define PCIE_IDE_ID_IDE_CFG_SLT_SND_STRM_INSECURE_RESERVED_31_1_BF_MSK (0xFFFFFFFE)
#define PCIE_IDE_ID_IDE_CFG_SLT_SND_STRM_INSECURE_RESERVED_31_1_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CFG_TX_LNK_KBIT_TOGGLED register description at address offset 0x308
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_cfg/TX_LNK_KBIT_TOGGLED
  * TX Link stream Kbit Toggled.
  */

typedef union {
  struct {
    uint32_t TX_LNK_KBIT_TOGGLED_S0_PR : 1;
    ///< TX Kbit Toggled and packet transmitted, for Link stream 0 - Posted
    ///< Request substream.
    ///< AccessType="RW/1C" BitOffset="0" ResetValue="0x0"
    uint32_t TX_LNK_KBIT_TOGGLED_S0_NPR : 1;
    ///< TX Kbit Toggled and packet transmitted, for Link stream 0 - Non-Posted
    ///< Request substream.
    ///< AccessType="RW/1C" BitOffset="1" ResetValue="0x0"
    uint32_t TX_LNK_KBIT_TOGGLED_S0_CPL : 1;
    ///< TX Kbit Toggled and packet transmitted, for Link stream 0 - Completion
    ///< substream.
    ///< AccessType="RW/1C" BitOffset="2" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="3" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_id_ide_cfg_tx_lnk_kbit_toggled_reg_t;

#define PCIE_IDE_ID_IDE_CFG_TX_LNK_KBIT_TOGGLED_DEFAULT (0x00000000U)
#define PCIE_IDE_ID_IDE_CFG_TX_LNK_KBIT_TOGGLED_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_TX_LNK_KBIT_TOGGLED_WR_MASK (0x00000007U)


///< TX Kbit Toggled and packet transmitted, for Link stream 0 - Posted
///< Request substream.
#define PCIE_IDE_ID_IDE_CFG_TX_LNK_KBIT_TOGGLED_TX_LNK_KBIT_TOGGLED_S0_PR_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CFG_TX_LNK_KBIT_TOGGLED_TX_LNK_KBIT_TOGGLED_S0_PR_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_TX_LNK_KBIT_TOGGLED_TX_LNK_KBIT_TOGGLED_S0_PR_BF_MSK (0x00000001)
#define PCIE_IDE_ID_IDE_CFG_TX_LNK_KBIT_TOGGLED_TX_LNK_KBIT_TOGGLED_S0_PR_BF_DEF (0x00000000)

///< TX Kbit Toggled and packet transmitted, for Link stream 0 - Non-Posted
///< Request substream.
#define PCIE_IDE_ID_IDE_CFG_TX_LNK_KBIT_TOGGLED_TX_LNK_KBIT_TOGGLED_S0_NPR_BF_OFF ( 1)
#define PCIE_IDE_ID_IDE_CFG_TX_LNK_KBIT_TOGGLED_TX_LNK_KBIT_TOGGLED_S0_NPR_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_TX_LNK_KBIT_TOGGLED_TX_LNK_KBIT_TOGGLED_S0_NPR_BF_MSK (0x00000002)
#define PCIE_IDE_ID_IDE_CFG_TX_LNK_KBIT_TOGGLED_TX_LNK_KBIT_TOGGLED_S0_NPR_BF_DEF (0x00000000)

///< TX Kbit Toggled and packet transmitted, for Link stream 0 - Completion
///< substream.
#define PCIE_IDE_ID_IDE_CFG_TX_LNK_KBIT_TOGGLED_TX_LNK_KBIT_TOGGLED_S0_CPL_BF_OFF ( 2)
#define PCIE_IDE_ID_IDE_CFG_TX_LNK_KBIT_TOGGLED_TX_LNK_KBIT_TOGGLED_S0_CPL_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_TX_LNK_KBIT_TOGGLED_TX_LNK_KBIT_TOGGLED_S0_CPL_BF_MSK (0x00000004)
#define PCIE_IDE_ID_IDE_CFG_TX_LNK_KBIT_TOGGLED_TX_LNK_KBIT_TOGGLED_S0_CPL_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CFG_TX_LNK_KBIT_TOGGLED_RESERVED_31_3_BF_OFF ( 3)
#define PCIE_IDE_ID_IDE_CFG_TX_LNK_KBIT_TOGGLED_RESERVED_31_3_BF_WID (29)
#define PCIE_IDE_ID_IDE_CFG_TX_LNK_KBIT_TOGGLED_RESERVED_31_3_BF_MSK (0xFFFFFFF8)
#define PCIE_IDE_ID_IDE_CFG_TX_LNK_KBIT_TOGGLED_RESERVED_31_3_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CFG_RX_LNK_KBIT_TOGGLED register description at address offset 0x30c
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_cfg/RX_LNK_KBIT_TOGGLED
  * RX Link stream Kbit Toggled.
  */

typedef union {
  struct {
    uint32_t RX_LNK_KBIT_TOGGLED_S0_PR : 1;
    ///< RX Kbit Toggled indication. This register is updated due to reception
    ///< of a package with a K-bit toggled from the link partner, or due to
    ///< a forcing via the RX_LNK_KBIT_TOGGLED register - for Link stream 0,
    ///< Posted Request substream.
    ///< AccessType="RW/1C" BitOffset="0" ResetValue="0x0"
    uint32_t RX_LNK_KBIT_TOGGLED_S0_NPR : 1;
    ///< RX Kbit Toggled indication. This register is updated due to reception
    ///< of a package with a K-bit toggled from the link partner, or due to
    ///< a forcing via the RX_LNK_KBIT_TOGGLED register - for Link stream 0,
    ///< Non-Posted Request substream.
    ///< AccessType="RW/1C" BitOffset="1" ResetValue="0x0"
    uint32_t RX_LNK_KBIT_TOGGLED_S0_CPL : 1;
    ///< RX Kbit Toggled indication. This register is updated due to reception
    ///< of a package with a K-bit toggled from the link partner, or due to
    ///< a forcing via the RX_LNK_KBIT_TOGGLED register - for Link stream 0,
    ///< Completion substream.
    ///< AccessType="RW/1C" BitOffset="2" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="3" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_id_ide_cfg_rx_lnk_kbit_toggled_reg_t;

#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_TOGGLED_DEFAULT (0x00000000U)
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_TOGGLED_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_TOGGLED_WR_MASK (0x00000007U)


///< RX Kbit Toggled indication. This register is updated due to reception
///< of a package with a K-bit toggled from the link partner, or due to
///< a forcing via the RX_LNK_KBIT_TOGGLED register - for Link stream 0,
///< Posted Request substream.
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_TOGGLED_RX_LNK_KBIT_TOGGLED_S0_PR_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_TOGGLED_RX_LNK_KBIT_TOGGLED_S0_PR_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_TOGGLED_RX_LNK_KBIT_TOGGLED_S0_PR_BF_MSK (0x00000001)
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_TOGGLED_RX_LNK_KBIT_TOGGLED_S0_PR_BF_DEF (0x00000000)

///< RX Kbit Toggled indication. This register is updated due to reception
///< of a package with a K-bit toggled from the link partner, or due to
///< a forcing via the RX_LNK_KBIT_TOGGLED register - for Link stream 0,
///< Non-Posted Request substream.
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_TOGGLED_RX_LNK_KBIT_TOGGLED_S0_NPR_BF_OFF ( 1)
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_TOGGLED_RX_LNK_KBIT_TOGGLED_S0_NPR_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_TOGGLED_RX_LNK_KBIT_TOGGLED_S0_NPR_BF_MSK (0x00000002)
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_TOGGLED_RX_LNK_KBIT_TOGGLED_S0_NPR_BF_DEF (0x00000000)

///< RX Kbit Toggled indication. This register is updated due to reception
///< of a package with a K-bit toggled from the link partner, or due to
///< a forcing via the RX_LNK_KBIT_TOGGLED register - for Link stream 0,
///< Completion substream.
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_TOGGLED_RX_LNK_KBIT_TOGGLED_S0_CPL_BF_OFF ( 2)
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_TOGGLED_RX_LNK_KBIT_TOGGLED_S0_CPL_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_TOGGLED_RX_LNK_KBIT_TOGGLED_S0_CPL_BF_MSK (0x00000004)
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_TOGGLED_RX_LNK_KBIT_TOGGLED_S0_CPL_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_TOGGLED_RESERVED_31_3_BF_OFF ( 3)
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_TOGGLED_RESERVED_31_3_BF_WID (29)
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_TOGGLED_RESERVED_31_3_BF_MSK (0xFFFFFFF8)
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_TOGGLED_RESERVED_31_3_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CFG_RX_LNK_KBIT_CURRENT register description at address offset 0x310
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_cfg/RX_LNK_KBIT_CURRENT
  * RX Link stream Current Kbit.
  */

typedef union {
  struct {
    uint32_t RX_LNK_KBIT_CURRENT_S0_PR : 1;
    ///< RX Current Kbit for Link stream 0, Posted Request substream.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t RX_LNK_KBIT_CURRENT_S0_NPR : 1;
    ///< RX Current Kbit for Link stream 0, Non-Posted Request substream.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
    uint32_t RX_LNK_KBIT_CURRENT_S0_CPL : 1;
    ///< RX Current Kbit for Link stream 0, Completion substream.
    ///< AccessType="RO" BitOffset="2" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="3" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_id_ide_cfg_rx_lnk_kbit_current_reg_t;

#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_CURRENT_DEFAULT (0x00000000U)
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_CURRENT_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_CURRENT_WR_MASK (0x00000000U)


///< RX Current Kbit for Link stream 0, Posted Request substream.
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_CURRENT_RX_LNK_KBIT_CURRENT_S0_PR_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_CURRENT_RX_LNK_KBIT_CURRENT_S0_PR_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_CURRENT_RX_LNK_KBIT_CURRENT_S0_PR_BF_MSK (0x00000001)
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_CURRENT_RX_LNK_KBIT_CURRENT_S0_PR_BF_DEF (0x00000000)

///< RX Current Kbit for Link stream 0, Non-Posted Request substream.
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_CURRENT_RX_LNK_KBIT_CURRENT_S0_NPR_BF_OFF ( 1)
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_CURRENT_RX_LNK_KBIT_CURRENT_S0_NPR_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_CURRENT_RX_LNK_KBIT_CURRENT_S0_NPR_BF_MSK (0x00000002)
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_CURRENT_RX_LNK_KBIT_CURRENT_S0_NPR_BF_DEF (0x00000000)

///< RX Current Kbit for Link stream 0, Completion substream.
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_CURRENT_RX_LNK_KBIT_CURRENT_S0_CPL_BF_OFF ( 2)
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_CURRENT_RX_LNK_KBIT_CURRENT_S0_CPL_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_CURRENT_RX_LNK_KBIT_CURRENT_S0_CPL_BF_MSK (0x00000004)
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_CURRENT_RX_LNK_KBIT_CURRENT_S0_CPL_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_CURRENT_RESERVED_31_3_BF_OFF ( 3)
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_CURRENT_RESERVED_31_3_BF_WID (29)
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_CURRENT_RESERVED_31_3_BF_MSK (0xFFFFFFF8)
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_CURRENT_RESERVED_31_3_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CFG_TX_SLT_KBIT_TOGGLED register description at address offset 0x314
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_cfg/TX_SLT_KBIT_TOGGLED
  * TX Selective stream Kbit Toggled.
  */

typedef union {
  struct {
    uint32_t TX_SLT_KBIT_TOGGLED_S0_PR : 1;
    ///< TX Kbit Toggled and packet transmitted, for Selective stream 0 - Posted
    ///< Request substream.
    ///< AccessType="RW/1C" BitOffset="0" ResetValue="0x0"
    uint32_t TX_SLT_KBIT_TOGGLED_S0_NPR : 1;
    ///< TX Kbit Toggled and packet transmitted, for Selective stream 0 - Non-Posted
    ///< Request substream.
    ///< AccessType="RW/1C" BitOffset="1" ResetValue="0x0"
    uint32_t TX_SLT_KBIT_TOGGLED_S0_CPL : 1;
    ///< TX Kbit Toggled and packet transmitted, for Selective stream 0 - Completion
    ///< substream.
    ///< AccessType="RW/1C" BitOffset="2" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="3" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_id_ide_cfg_tx_slt_kbit_toggled_reg_t;

#define PCIE_IDE_ID_IDE_CFG_TX_SLT_KBIT_TOGGLED_DEFAULT (0x00000000U)
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_KBIT_TOGGLED_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_KBIT_TOGGLED_WR_MASK (0x00000007U)


///< TX Kbit Toggled and packet transmitted, for Selective stream 0 - Posted
///< Request substream.
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_KBIT_TOGGLED_TX_SLT_KBIT_TOGGLED_S0_PR_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_KBIT_TOGGLED_TX_SLT_KBIT_TOGGLED_S0_PR_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_KBIT_TOGGLED_TX_SLT_KBIT_TOGGLED_S0_PR_BF_MSK (0x00000001)
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_KBIT_TOGGLED_TX_SLT_KBIT_TOGGLED_S0_PR_BF_DEF (0x00000000)

///< TX Kbit Toggled and packet transmitted, for Selective stream 0 - Non-Posted
///< Request substream.
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_KBIT_TOGGLED_TX_SLT_KBIT_TOGGLED_S0_NPR_BF_OFF ( 1)
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_KBIT_TOGGLED_TX_SLT_KBIT_TOGGLED_S0_NPR_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_KBIT_TOGGLED_TX_SLT_KBIT_TOGGLED_S0_NPR_BF_MSK (0x00000002)
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_KBIT_TOGGLED_TX_SLT_KBIT_TOGGLED_S0_NPR_BF_DEF (0x00000000)

///< TX Kbit Toggled and packet transmitted, for Selective stream 0 - Completion
///< substream.
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_KBIT_TOGGLED_TX_SLT_KBIT_TOGGLED_S0_CPL_BF_OFF ( 2)
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_KBIT_TOGGLED_TX_SLT_KBIT_TOGGLED_S0_CPL_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_KBIT_TOGGLED_TX_SLT_KBIT_TOGGLED_S0_CPL_BF_MSK (0x00000004)
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_KBIT_TOGGLED_TX_SLT_KBIT_TOGGLED_S0_CPL_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_KBIT_TOGGLED_RESERVED_31_3_BF_OFF ( 3)
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_KBIT_TOGGLED_RESERVED_31_3_BF_WID (29)
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_KBIT_TOGGLED_RESERVED_31_3_BF_MSK (0xFFFFFFF8)
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_KBIT_TOGGLED_RESERVED_31_3_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CFG_RX_SLT_KBIT_TOGGLED register description at address offset 0x318
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_cfg/RX_SLT_KBIT_TOGGLED
  * RX Selective stream Kbit Toggled.
  */

typedef union {
  struct {
    uint32_t RX_SLT_KBIT_TOGGLED_S0_PR : 1;
    ///< RX Kbit Toggled indication. This register is updated due to reception
    ///< of a package with a K-bit toggled from the link partner, or due to
    ///< a forcing via the RX_SLT_KBIT_TOGGLED register - for Selective stream
    ///< 0, Posted Request substream.
    ///< AccessType="RW/1C" BitOffset="0" ResetValue="0x0"
    uint32_t RX_SLT_KBIT_TOGGLED_S0_NPR : 1;
    ///< RX Kbit Toggled indication. This register is updated due to reception
    ///< of a package with a K-bit toggled from the link partner, or due to
    ///< a forcing via the RX_SLT_KBIT_TOGGLED register - for Selective stream
    ///< 0, Non-Posted Request substream.
    ///< AccessType="RW/1C" BitOffset="1" ResetValue="0x0"
    uint32_t RX_SLT_KBIT_TOGGLED_S0_CPL : 1;
    ///< RX Kbit Toggled indication. This register is updated due to reception
    ///< of a package with a K-bit toggled from the link partner, or due to
    ///< a forcing via the RX_SLT_KBIT_TOGGLED register - for Selective stream
    ///< 0, Completion substream.
    ///< AccessType="RW/1C" BitOffset="2" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="3" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_id_ide_cfg_rx_slt_kbit_toggled_reg_t;

#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT_TOGGLED_DEFAULT (0x00000000U)
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT_TOGGLED_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT_TOGGLED_WR_MASK (0x00000007U)


///< RX Kbit Toggled indication. This register is updated due to reception
///< of a package with a K-bit toggled from the link partner, or due to
///< a forcing via the RX_SLT_KBIT_TOGGLED register - for Selective stream
///< 0, Posted Request substream.
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT_TOGGLED_RX_SLT_KBIT_TOGGLED_S0_PR_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT_TOGGLED_RX_SLT_KBIT_TOGGLED_S0_PR_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT_TOGGLED_RX_SLT_KBIT_TOGGLED_S0_PR_BF_MSK (0x00000001)
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT_TOGGLED_RX_SLT_KBIT_TOGGLED_S0_PR_BF_DEF (0x00000000)

///< RX Kbit Toggled indication. This register is updated due to reception
///< of a package with a K-bit toggled from the link partner, or due to
///< a forcing via the RX_SLT_KBIT_TOGGLED register - for Selective stream
///< 0, Non-Posted Request substream.
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT_TOGGLED_RX_SLT_KBIT_TOGGLED_S0_NPR_BF_OFF ( 1)
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT_TOGGLED_RX_SLT_KBIT_TOGGLED_S0_NPR_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT_TOGGLED_RX_SLT_KBIT_TOGGLED_S0_NPR_BF_MSK (0x00000002)
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT_TOGGLED_RX_SLT_KBIT_TOGGLED_S0_NPR_BF_DEF (0x00000000)

///< RX Kbit Toggled indication. This register is updated due to reception
///< of a package with a K-bit toggled from the link partner, or due to
///< a forcing via the RX_SLT_KBIT_TOGGLED register - for Selective stream
///< 0, Completion substream.
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT_TOGGLED_RX_SLT_KBIT_TOGGLED_S0_CPL_BF_OFF ( 2)
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT_TOGGLED_RX_SLT_KBIT_TOGGLED_S0_CPL_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT_TOGGLED_RX_SLT_KBIT_TOGGLED_S0_CPL_BF_MSK (0x00000004)
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT_TOGGLED_RX_SLT_KBIT_TOGGLED_S0_CPL_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT_TOGGLED_RESERVED_31_3_BF_OFF ( 3)
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT_TOGGLED_RESERVED_31_3_BF_WID (29)
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT_TOGGLED_RESERVED_31_3_BF_MSK (0xFFFFFFF8)
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT_TOGGLED_RESERVED_31_3_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CFG_RX_SLT_KBIT_CURRENT register description at address offset 0x31c
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_cfg/RX_SLT_KBIT_CURRENT
  * RX Selective stream Current Kbit.
  */

typedef union {
  struct {
    uint32_t RX_SLT_KBIT_CURRENT_S0_PR : 1;
    ///< RX Current Kbit for Selective stream 0, Posted Request substream.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t RX_SLT_KBIT_CURRENT_S0_NPR : 1;
    ///< RX Current Kbit for Selective stream 0, Non-Posted Request substream.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
    uint32_t RX_SLT_KBIT_CURRENT_S0_CPL : 1;
    ///< RX Current Kbit for Selective stream 0, Completion substream.
    ///< AccessType="RO" BitOffset="2" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="3" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_id_ide_cfg_rx_slt_kbit_current_reg_t;

#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT_CURRENT_DEFAULT (0x00000000U)
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT_CURRENT_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT_CURRENT_WR_MASK (0x00000000U)


///< RX Current Kbit for Selective stream 0, Posted Request substream.
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT_CURRENT_RX_SLT_KBIT_CURRENT_S0_PR_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT_CURRENT_RX_SLT_KBIT_CURRENT_S0_PR_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT_CURRENT_RX_SLT_KBIT_CURRENT_S0_PR_BF_MSK (0x00000001)
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT_CURRENT_RX_SLT_KBIT_CURRENT_S0_PR_BF_DEF (0x00000000)

///< RX Current Kbit for Selective stream 0, Non-Posted Request substream.
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT_CURRENT_RX_SLT_KBIT_CURRENT_S0_NPR_BF_OFF ( 1)
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT_CURRENT_RX_SLT_KBIT_CURRENT_S0_NPR_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT_CURRENT_RX_SLT_KBIT_CURRENT_S0_NPR_BF_MSK (0x00000002)
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT_CURRENT_RX_SLT_KBIT_CURRENT_S0_NPR_BF_DEF (0x00000000)

///< RX Current Kbit for Selective stream 0, Completion substream.
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT_CURRENT_RX_SLT_KBIT_CURRENT_S0_CPL_BF_OFF ( 2)
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT_CURRENT_RX_SLT_KBIT_CURRENT_S0_CPL_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT_CURRENT_RX_SLT_KBIT_CURRENT_S0_CPL_BF_MSK (0x00000004)
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT_CURRENT_RX_SLT_KBIT_CURRENT_S0_CPL_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT_CURRENT_RESERVED_31_3_BF_OFF ( 3)
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT_CURRENT_RESERVED_31_3_BF_WID (29)
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT_CURRENT_RESERVED_31_3_BF_MSK (0xFFFFFFF8)
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT_CURRENT_RESERVED_31_3_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CFG_TX_KEY_USAGE_COUNTER_LOW_S0 register description at address offset 0x32c
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_cfg/TX_KEY_USAGE_COUNTER_LOW_S0
  * TX Key utilization counter value for Stream 0 (least-significant word).
  */

typedef union {
  struct {
    uint32_t TX_KEY_USAGE_COUNTER_LOW_S0 : 32;
    ///< Lower 32 bit of key utilization counter for TX stream 0.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_id_ide_cfg_tx_key_usage_cnter_low_s0_reg_t;

#define PCIE_IDE_ID_IDE_CFG_TX_KEY_USAGE_CNTER_LOW_S0_DEFAULT (0x00000000U)
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_USAGE_CNTER_LOW_S0_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_USAGE_CNTER_LOW_S0_WR_MASK (0x00000000U)


///< Lower 32 bit of key utilization counter for TX stream 0.
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_USAGE_CNTER_LOW_S0_TX_KEY_USAGE_CNTER_LOW_S0_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_USAGE_CNTER_LOW_S0_TX_KEY_USAGE_CNTER_LOW_S0_BF_WID (32)
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_USAGE_CNTER_LOW_S0_TX_KEY_USAGE_CNTER_LOW_S0_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_USAGE_CNTER_LOW_S0_TX_KEY_USAGE_CNTER_LOW_S0_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CFG_TX_KEY_USAGE_COUNTER_HIGH_S0 register description at address offset 0x330
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_cfg/TX_KEY_USAGE_COUNTER_HIGH_S0
  * TX Key utilization counter value for Stream 0 (most-significant word).
  */

typedef union {
  struct {
    uint32_t TX_KEY_USAGE_COUNTER_HIGH_S0 : 32;
    ///< Higher 32 bit of key utilization counter for TX stream 0.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_id_ide_cfg_tx_key_usage_cnter_high_s0_reg_t;

#define PCIE_IDE_ID_IDE_CFG_TX_KEY_USAGE_CNTER_HIGH_S0_DEFAULT (0x00000000U)
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_USAGE_CNTER_HIGH_S0_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_USAGE_CNTER_HIGH_S0_WR_MASK (0x00000000U)


///< Higher 32 bit of key utilization counter for TX stream 0.
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_USAGE_CNTER_HIGH_S0_TX_KEY_USAGE_CNTER_HIGH_S0_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_USAGE_CNTER_HIGH_S0_TX_KEY_USAGE_CNTER_HIGH_S0_BF_WID (32)
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_USAGE_CNTER_HIGH_S0_TX_KEY_USAGE_CNTER_HIGH_S0_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_USAGE_CNTER_HIGH_S0_TX_KEY_USAGE_CNTER_HIGH_S0_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CFG_RX_KEY_USAGE_COUNTER_LOW_S0 register description at address offset 0x334
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_cfg/RX_KEY_USAGE_COUNTER_LOW_S0
  * RX Key utilization counter value for Stream 0 (least-significant word).
  */

typedef union {
  struct {
    uint32_t RX_KEY_USAGE_COUNTER_LOW_S0 : 32;
    ///< Lower 32 bit of key utilization counter for RX stream 0. Note: In
    ///< the case of a 256-bit config, where there are 2 AES engines on the
    ///< RX path, the same counter is shared between them.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_id_ide_cfg_rx_key_usage_cnter_low_s0_reg_t;

#define PCIE_IDE_ID_IDE_CFG_RX_KEY_USAGE_CNTER_LOW_S0_DEFAULT (0x00000000U)
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_USAGE_CNTER_LOW_S0_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_USAGE_CNTER_LOW_S0_WR_MASK (0x00000000U)


///< Lower 32 bit of key utilization counter for RX stream 0. Note: In
///< the case of a 256-bit config, where there are 2 AES engines on the
///< RX path, the same counter is shared between them.
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_USAGE_CNTER_LOW_S0_RX_KEY_USAGE_CNTER_LOW_S0_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_USAGE_CNTER_LOW_S0_RX_KEY_USAGE_CNTER_LOW_S0_BF_WID (32)
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_USAGE_CNTER_LOW_S0_RX_KEY_USAGE_CNTER_LOW_S0_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_USAGE_CNTER_LOW_S0_RX_KEY_USAGE_CNTER_LOW_S0_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CFG_RX_KEY_USAGE_COUNTER_HIGH_S0 register description at address offset 0x338
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_cfg/RX_KEY_USAGE_COUNTER_HIGH_S0
  * RX Key utilization counter value for Stream 0 (most-significant word).
  */

typedef union {
  struct {
    uint32_t RX_KEY_USAGE_COUNTER_HIGH_S0 : 32;
    ///< Higher 32 bit of key utilization counter for RX stream 0. Note: In
    ///< the case of a 256-bit config, where there are 2 AES engines on the
    ///< RX path, the same counter is shared between them.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_id_ide_cfg_rx_key_usage_cnter_high_s0_reg_t;

#define PCIE_IDE_ID_IDE_CFG_RX_KEY_USAGE_CNTER_HIGH_S0_DEFAULT (0x00000000U)
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_USAGE_CNTER_HIGH_S0_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_USAGE_CNTER_HIGH_S0_WR_MASK (0x00000000U)


///< Higher 32 bit of key utilization counter for RX stream 0. Note: In
///< the case of a 256-bit config, where there are 2 AES engines on the
///< RX path, the same counter is shared between them.
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_USAGE_CNTER_HIGH_S0_RX_KEY_USAGE_CNTER_HIGH_S0_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_USAGE_CNTER_HIGH_S0_RX_KEY_USAGE_CNTER_HIGH_S0_BF_WID (32)
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_USAGE_CNTER_HIGH_S0_RX_KEY_USAGE_CNTER_HIGH_S0_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_USAGE_CNTER_HIGH_S0_RX_KEY_USAGE_CNTER_HIGH_S0_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CFG_TX_KEY_USAGE_COUNTER_LOW_S1 register description at address offset 0x33c
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_cfg/TX_KEY_USAGE_COUNTER_LOW_S1
  * TX Key utilization counter value for Stream 1 (least-significant word).
  */

typedef union {
  struct {
    uint32_t TX_KEY_USAGE_COUNTER_LOW_S1 : 32;
    ///< Lower 32 bit of key utilization counter for TX stream 1.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_id_ide_cfg_tx_key_usage_cnter_low_s1_reg_t;

#define PCIE_IDE_ID_IDE_CFG_TX_KEY_USAGE_CNTER_LOW_S1_DEFAULT (0x00000000U)
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_USAGE_CNTER_LOW_S1_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_USAGE_CNTER_LOW_S1_WR_MASK (0x00000000U)


///< Lower 32 bit of key utilization counter for TX stream 1.
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_USAGE_CNTER_LOW_S1_TX_KEY_USAGE_CNTER_LOW_S1_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_USAGE_CNTER_LOW_S1_TX_KEY_USAGE_CNTER_LOW_S1_BF_WID (32)
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_USAGE_CNTER_LOW_S1_TX_KEY_USAGE_CNTER_LOW_S1_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_USAGE_CNTER_LOW_S1_TX_KEY_USAGE_CNTER_LOW_S1_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CFG_TX_KEY_USAGE_COUNTER_HIGH_S1 register description at address offset 0x340
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_cfg/TX_KEY_USAGE_COUNTER_HIGH_S1
  * TX Key utilization counter value for Stream 1 (most-significant word).
  */

typedef union {
  struct {
    uint32_t TX_KEY_USAGE_COUNTER_HIGH_S1 : 32;
    ///< Higher 32 bit of key utilization counter for TX stream 1.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_id_ide_cfg_tx_key_usage_cnter_high_s1_reg_t;

#define PCIE_IDE_ID_IDE_CFG_TX_KEY_USAGE_CNTER_HIGH_S1_DEFAULT (0x00000000U)
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_USAGE_CNTER_HIGH_S1_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_USAGE_CNTER_HIGH_S1_WR_MASK (0x00000000U)


///< Higher 32 bit of key utilization counter for TX stream 1.
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_USAGE_CNTER_HIGH_S1_TX_KEY_USAGE_CNTER_HIGH_S1_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_USAGE_CNTER_HIGH_S1_TX_KEY_USAGE_CNTER_HIGH_S1_BF_WID (32)
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_USAGE_CNTER_HIGH_S1_TX_KEY_USAGE_CNTER_HIGH_S1_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_USAGE_CNTER_HIGH_S1_TX_KEY_USAGE_CNTER_HIGH_S1_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CFG_RX_KEY_USAGE_COUNTER_LOW_S1 register description at address offset 0x344
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_cfg/RX_KEY_USAGE_COUNTER_LOW_S1
  * RX Key utilization counter value for Stream 1 (least-significant word).
  */

typedef union {
  struct {
    uint32_t RX_KEY_USAGE_COUNTER_LOW_S1 : 32;
    ///< Lower 32 bit of key utilization counter for RX stream 1. Note: In
    ///< the case of a 256-bit config, where there are 2 AES engines on the
    ///< RX path, the same counter is shared between them.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_id_ide_cfg_rx_key_usage_cnter_low_s1_reg_t;

#define PCIE_IDE_ID_IDE_CFG_RX_KEY_USAGE_CNTER_LOW_S1_DEFAULT (0x00000000U)
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_USAGE_CNTER_LOW_S1_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_USAGE_CNTER_LOW_S1_WR_MASK (0x00000000U)


///< Lower 32 bit of key utilization counter for RX stream 1. Note: In
///< the case of a 256-bit config, where there are 2 AES engines on the
///< RX path, the same counter is shared between them.
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_USAGE_CNTER_LOW_S1_RX_KEY_USAGE_CNTER_LOW_S1_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_USAGE_CNTER_LOW_S1_RX_KEY_USAGE_CNTER_LOW_S1_BF_WID (32)
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_USAGE_CNTER_LOW_S1_RX_KEY_USAGE_CNTER_LOW_S1_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_USAGE_CNTER_LOW_S1_RX_KEY_USAGE_CNTER_LOW_S1_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CFG_RX_KEY_USAGE_COUNTER_HIGH_S1 register description at address offset 0x348
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_cfg/RX_KEY_USAGE_COUNTER_HIGH_S1
  * RX Key utilization counter value for Stream 1 (most-significant word).
  */

typedef union {
  struct {
    uint32_t RX_KEY_USAGE_COUNTER_HIGH_S1 : 32;
    ///< Higher 32 bit of key utilization counter for RX stream 1. Note: In
    ///< the case of a 256-bit config, where there are 2 AES engines on the
    ///< RX path, the same counter is shared between them.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_id_ide_cfg_rx_key_usage_cnter_high_s1_reg_t;

#define PCIE_IDE_ID_IDE_CFG_RX_KEY_USAGE_CNTER_HIGH_S1_DEFAULT (0x00000000U)
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_USAGE_CNTER_HIGH_S1_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_USAGE_CNTER_HIGH_S1_WR_MASK (0x00000000U)


///< Higher 32 bit of key utilization counter for RX stream 1. Note: In
///< the case of a 256-bit config, where there are 2 AES engines on the
///< RX path, the same counter is shared between them.
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_USAGE_CNTER_HIGH_S1_RX_KEY_USAGE_CNTER_HIGH_S1_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_USAGE_CNTER_HIGH_S1_RX_KEY_USAGE_CNTER_HIGH_S1_BF_WID (32)
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_USAGE_CNTER_HIGH_S1_RX_KEY_USAGE_CNTER_HIGH_S1_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_USAGE_CNTER_HIGH_S1_RX_KEY_USAGE_CNTER_HIGH_S1_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CFG_IDE_TX_PCRC_ERR_MASK register description at address offset 0x42c
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_cfg/IDE_TX_PCRC_ERR_MASK
  * IDE TX PCRC Error Mask.
  */

typedef union {
  struct {
    uint32_t TX_PCRC_ERROR_MASK : 32;
    ///< 32-bit PCRC error mask value.       This value flips the respective
    ///< bits of the initial PCRC value     - Default value --> 0 error
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_id_ide_cfg_ide_tx_pcrc_err_mask_reg_t;

#define PCIE_IDE_ID_IDE_CFG_IDE_TX_PCRC_ERR_MASK_DEFAULT (0x00000000U)
#define PCIE_IDE_ID_IDE_CFG_IDE_TX_PCRC_ERR_MASK_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_IDE_TX_PCRC_ERR_MASK_WR_MASK (0xffffffffU)


///< 32-bit PCRC error mask value.       This value flips the respective
///< bits of the initial PCRC value     - Default value --> 0 error
#define PCIE_IDE_ID_IDE_CFG_IDE_TX_PCRC_ERR_MASK_TX_PCRC_ERR_MASK_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CFG_IDE_TX_PCRC_ERR_MASK_TX_PCRC_ERR_MASK_BF_WID (32)
#define PCIE_IDE_ID_IDE_CFG_IDE_TX_PCRC_ERR_MASK_TX_PCRC_ERR_MASK_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_ID_IDE_CFG_IDE_TX_PCRC_ERR_MASK_TX_PCRC_ERR_MASK_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CFG_IDE_TX_PCRC_ERR_CNT register description at address offset 0x430
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_cfg/IDE_TX_PCRC_ERR_CNT
  * IDE TX PCRC Error Count.
  */

typedef union {
  struct {
    uint32_t TX_PCRC_ERROR_CNT : 8;
    ///< Number of PCRC errors to be injected. Configuring this field with
    ///< a value > 0 enables PCRC error injection.                   This value
    ///< is self_decremented after a PCRC error is injected.         When this
    ///< value is zero no PCRC error is injected.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_id_ide_cfg_ide_tx_pcrc_err_cnt_reg_t;

#define PCIE_IDE_ID_IDE_CFG_IDE_TX_PCRC_ERR_CNT_DEFAULT (0x00000000U)
#define PCIE_IDE_ID_IDE_CFG_IDE_TX_PCRC_ERR_CNT_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_IDE_TX_PCRC_ERR_CNT_WR_MASK (0x000000ffU)


///< Number of PCRC errors to be injected. Configuring this field with
///< a value > 0 enables PCRC error injection.                   This value
///< is self_decremented after a PCRC error is injected.         When this
///< value is zero no PCRC error is injected.
#define PCIE_IDE_ID_IDE_CFG_IDE_TX_PCRC_ERR_CNT_TX_PCRC_ERR_CNT_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CFG_IDE_TX_PCRC_ERR_CNT_TX_PCRC_ERR_CNT_BF_WID ( 8)
#define PCIE_IDE_ID_IDE_CFG_IDE_TX_PCRC_ERR_CNT_TX_PCRC_ERR_CNT_BF_MSK (0x000000FF)
#define PCIE_IDE_ID_IDE_CFG_IDE_TX_PCRC_ERR_CNT_TX_PCRC_ERR_CNT_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CFG_IDE_TX_PCRC_ERR_CNT_RESERVED_31_8_BF_OFF ( 8)
#define PCIE_IDE_ID_IDE_CFG_IDE_TX_PCRC_ERR_CNT_RESERVED_31_8_BF_WID (24)
#define PCIE_IDE_ID_IDE_CFG_IDE_TX_PCRC_ERR_CNT_RESERVED_31_8_BF_MSK (0xFFFFFF00)
#define PCIE_IDE_ID_IDE_CFG_IDE_TX_PCRC_ERR_CNT_RESERVED_31_8_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CFG_IDE_RX_PCRC_ERR_MASK register description at address offset 0x434
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_cfg/IDE_RX_PCRC_ERR_MASK
  * IDE RX PCRC Error Mask.
  */

typedef union {
  struct {
    uint32_t RX_PCRC_ERROR_MASK : 32;
    ///< 32b PCRC error mask value.        This value flips the respective
    ///< bits of the initial PCRC value     - Default value --> 0 error
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_id_ide_cfg_ide_rx_pcrc_err_mask_reg_t;

#define PCIE_IDE_ID_IDE_CFG_IDE_RX_PCRC_ERR_MASK_DEFAULT (0x00000000U)
#define PCIE_IDE_ID_IDE_CFG_IDE_RX_PCRC_ERR_MASK_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_IDE_RX_PCRC_ERR_MASK_WR_MASK (0xffffffffU)


///< 32b PCRC error mask value.        This value flips the respective
///< bits of the initial PCRC value     - Default value --> 0 error
#define PCIE_IDE_ID_IDE_CFG_IDE_RX_PCRC_ERR_MASK_RX_PCRC_ERR_MASK_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CFG_IDE_RX_PCRC_ERR_MASK_RX_PCRC_ERR_MASK_BF_WID (32)
#define PCIE_IDE_ID_IDE_CFG_IDE_RX_PCRC_ERR_MASK_RX_PCRC_ERR_MASK_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_ID_IDE_CFG_IDE_RX_PCRC_ERR_MASK_RX_PCRC_ERR_MASK_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CFG_IDE_RX_PCRC_ERR_CNT register description at address offset 0x438
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_cfg/IDE_RX_PCRC_ERR_CNT
  * IDE RX PCRC Error Count.
  */

typedef union {
  struct {
    uint32_t RX_PCRC_ERROR_CNT : 8;
    ///< Number of PCRC errors to be injected. Configuring this field with
    ///< a value > 0 enables PCRC error injection.                   This value
    ///< is self_decremented after a PCRC error is injected.         When this
    ///< value is zero no PCRC error is injected.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_id_ide_cfg_ide_rx_pcrc_err_cnt_reg_t;

#define PCIE_IDE_ID_IDE_CFG_IDE_RX_PCRC_ERR_CNT_DEFAULT (0x00000000U)
#define PCIE_IDE_ID_IDE_CFG_IDE_RX_PCRC_ERR_CNT_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_IDE_RX_PCRC_ERR_CNT_WR_MASK (0x000000ffU)


///< Number of PCRC errors to be injected. Configuring this field with
///< a value > 0 enables PCRC error injection.                   This value
///< is self_decremented after a PCRC error is injected.         When this
///< value is zero no PCRC error is injected.
#define PCIE_IDE_ID_IDE_CFG_IDE_RX_PCRC_ERR_CNT_RX_PCRC_ERR_CNT_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CFG_IDE_RX_PCRC_ERR_CNT_RX_PCRC_ERR_CNT_BF_WID ( 8)
#define PCIE_IDE_ID_IDE_CFG_IDE_RX_PCRC_ERR_CNT_RX_PCRC_ERR_CNT_BF_MSK (0x000000FF)
#define PCIE_IDE_ID_IDE_CFG_IDE_RX_PCRC_ERR_CNT_RX_PCRC_ERR_CNT_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CFG_IDE_RX_PCRC_ERR_CNT_RESERVED_31_8_BF_OFF ( 8)
#define PCIE_IDE_ID_IDE_CFG_IDE_RX_PCRC_ERR_CNT_RESERVED_31_8_BF_WID (24)
#define PCIE_IDE_ID_IDE_CFG_IDE_RX_PCRC_ERR_CNT_RESERVED_31_8_BF_MSK (0xFFFFFF00)
#define PCIE_IDE_ID_IDE_CFG_IDE_RX_PCRC_ERR_CNT_RESERVED_31_8_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CFG_IDE_TDISP_ON register description at address offset 0x448
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_cfg/IDE_TDISP_ON
  * IDE TDISP ON.
  */

typedef union {
  struct {
    uint32_t LINK_0_TDISP_ON : 1;
    ///< If the bit is Set for Link Stream 0, then the changes to the IDE protocol
    ///< described in the TDISP ECN and the TDISP-specific rules apply. If
    ///< the bit is Clear, then the IDE rules as defined in the IDE ECN RevA
    ///< apply for Link Stream 0. Can only be configurable via APB interface.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
    uint32_t SLCT_0_TDISP_ON : 1;
    ///< If a bit is Set for a Selective stream 0, then the changes to the
    ///< IDE protocol  described in the TDISP ECN and the TDISP-specific rules.
    ///< If the bit is Clear, then the IDE rules as defined in the IDE ECN
    ///< RevA apply for Selective Stream 0. Can only be configurable via APB
    ///< interface.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="17" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_id_ide_cfg_ide_tdisp_on_reg_t;

#define PCIE_IDE_ID_IDE_CFG_IDE_TDISP_ON_DEFAULT (0x00000000U)
#define PCIE_IDE_ID_IDE_CFG_IDE_TDISP_ON_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_IDE_TDISP_ON_WR_MASK (0x00010001U)


///< If the bit is Set for Link Stream 0, then the changes to the IDE protocol
///< described in the TDISP ECN and the TDISP-specific rules apply. If
///< the bit is Clear, then the IDE rules as defined in the IDE ECN RevA
///< apply for Link Stream 0. Can only be configurable via APB interface.
#define PCIE_IDE_ID_IDE_CFG_IDE_TDISP_ON_LINK_0_TDISP_ON_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CFG_IDE_TDISP_ON_LINK_0_TDISP_ON_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_IDE_TDISP_ON_LINK_0_TDISP_ON_BF_MSK (0x00000001)
#define PCIE_IDE_ID_IDE_CFG_IDE_TDISP_ON_LINK_0_TDISP_ON_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CFG_IDE_TDISP_ON_RESERVED_15_1_BF_OFF ( 1)
#define PCIE_IDE_ID_IDE_CFG_IDE_TDISP_ON_RESERVED_15_1_BF_WID (15)
#define PCIE_IDE_ID_IDE_CFG_IDE_TDISP_ON_RESERVED_15_1_BF_MSK (0x0000FFFE)
#define PCIE_IDE_ID_IDE_CFG_IDE_TDISP_ON_RESERVED_15_1_BF_DEF (0x00000000)

///< If a bit is Set for a Selective stream 0, then the changes to the
///< IDE protocol  described in the TDISP ECN and the TDISP-specific rules.
///< If the bit is Clear, then the IDE rules as defined in the IDE ECN
///< RevA apply for Selective Stream 0. Can only be configurable via APB
///< interface.
#define PCIE_IDE_ID_IDE_CFG_IDE_TDISP_ON_SLCT_0_TDISP_ON_BF_OFF (16)
#define PCIE_IDE_ID_IDE_CFG_IDE_TDISP_ON_SLCT_0_TDISP_ON_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_IDE_TDISP_ON_SLCT_0_TDISP_ON_BF_MSK (0x00010000)
#define PCIE_IDE_ID_IDE_CFG_IDE_TDISP_ON_SLCT_0_TDISP_ON_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CFG_IDE_TDISP_ON_RESERVED_31_17_BF_OFF (17)
#define PCIE_IDE_ID_IDE_CFG_IDE_TDISP_ON_RESERVED_31_17_BF_WID (15)
#define PCIE_IDE_ID_IDE_CFG_IDE_TDISP_ON_RESERVED_31_17_BF_MSK (0xFFFE0000)
#define PCIE_IDE_ID_IDE_CFG_IDE_TDISP_ON_RESERVED_31_17_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CFG_IDE_DISCARD_OVERRIDE register description at address offset 0x44c
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_cfg/IDE_DISCARD_OVERRIDE
  * IDE DISCARD OVERRIDE.
  */

typedef union {
  struct {
    uint32_t DISCARD_OVERRIDE : 1;
    ///< This register is used to enhance the check for outbound TLPs with
    ///< T-bit=1 in case no stream is matched. For an outbound TLP with T-bit
    ///< Set that does not match any Link or Selective Stream, the following
    ///< rules apply: If IDE_DISCARD_OVERRIDE is 0: the TLP is transmitted
    ///< as plaintext. If IDE_DISCARD_OVERRIDE is 1: the TLP is discarded,
    ///< instead of being transmitted as plaintext, as it was meant to be secured
    ///< but no Stream has been matched.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_id_ide_cfg_ide_discard_ovrd_reg_t;

#define PCIE_IDE_ID_IDE_CFG_IDE_DISCARD_OVRD_DEFAULT (0x00000000U)
#define PCIE_IDE_ID_IDE_CFG_IDE_DISCARD_OVRD_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_IDE_DISCARD_OVRD_WR_MASK (0x00000001U)


///< This register is used to enhance the check for outbound TLPs with
///< T-bit=1 in case no stream is matched. For an outbound TLP with T-bit
///< Set that does not match any Link or Selective Stream, the following
///< rules apply: If IDE_DISCARD_OVERRIDE is 0: the TLP is transmitted
///< as plaintext. If IDE_DISCARD_OVERRIDE is 1: the TLP is discarded,
///< instead of being transmitted as plaintext, as it was meant to be secured
///< but no Stream has been matched.
#define PCIE_IDE_ID_IDE_CFG_IDE_DISCARD_OVRD_DISCARD_OVRD_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CFG_IDE_DISCARD_OVRD_DISCARD_OVRD_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_IDE_DISCARD_OVRD_DISCARD_OVRD_BF_MSK (0x00000001)
#define PCIE_IDE_ID_IDE_CFG_IDE_DISCARD_OVRD_DISCARD_OVRD_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CFG_IDE_DISCARD_OVRD_RESERVED_31_1_BF_OFF ( 1)
#define PCIE_IDE_ID_IDE_CFG_IDE_DISCARD_OVRD_RESERVED_31_1_BF_WID (31)
#define PCIE_IDE_ID_IDE_CFG_IDE_DISCARD_OVRD_RESERVED_31_1_BF_MSK (0xFFFFFFFE)
#define PCIE_IDE_ID_IDE_CFG_IDE_DISCARD_OVRD_RESERVED_31_1_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CFG_IDE_MSG_ON_SELECTIVE_EN register description at address offset 0x500
  *
  * Register default value:        0x00000001
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_cfg/IDE_MSG_ON_SELECTIVE_EN
  * IDE MESSAGE ON SELECTIVE STREAM EN.
  */

typedef union {
  struct {
    uint32_t IDE_MSG_ON_SELECTIVE_EN : 1;
    ///< When set, this bit enables messages routed to root complex and routed
    ///< by Address to be sent on selective streams.       When clear the message
    ///< request is sent on a Link Stream, or as plain text if no suitable
    ///< Link Stream is available.     - Default value --> 0 error
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t  : 31;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_id_ide_cfg_ide_msg_on_selive_en_reg_t;

#define PCIE_IDE_ID_IDE_CFG_IDE_MSG_ON_SELIVE_EN_DEFAULT (0x00000001U)
#define PCIE_IDE_ID_IDE_CFG_IDE_MSG_ON_SELIVE_EN_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CFG_IDE_MSG_ON_SELIVE_EN_WR_MASK (0x00000001U)


///< When set, this bit enables messages routed to root complex and routed
///< by Address to be sent on selective streams.       When clear the message
///< request is sent on a Link Stream, or as plain text if no suitable
///< Link Stream is available.     - Default value --> 0 error
#define PCIE_IDE_ID_IDE_CFG_IDE_MSG_ON_SELIVE_EN_IDE_MSG_ON_SELIVE_EN_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CFG_IDE_MSG_ON_SELIVE_EN_IDE_MSG_ON_SELIVE_EN_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CFG_IDE_MSG_ON_SELIVE_EN_IDE_MSG_ON_SELIVE_EN_BF_MSK (0x00000001)
#define PCIE_IDE_ID_IDE_CFG_IDE_MSG_ON_SELIVE_EN_IDE_MSG_ON_SELIVE_EN_BF_DEF (0x00000001)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CFG_IDE_MSG_ON_SELIVE_EN_RESERVED_31_1_BF_OFF ( 1)
#define PCIE_IDE_ID_IDE_CFG_IDE_MSG_ON_SELIVE_EN_RESERVED_31_1_BF_WID (31)
#define PCIE_IDE_ID_IDE_CFG_IDE_MSG_ON_SELIVE_EN_RESERVED_31_1_BF_MSK (0xFFFFFFFE)
#define PCIE_IDE_ID_IDE_CFG_IDE_MSG_ON_SELIVE_EN_RESERVED_31_1_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CAPS_IDE_EXT_CAP_HDR register description at address offset 0x2000
  *
  * Register default value:        0xD8010030
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_caps/IDE_EXT_CAP_HDR
  * IDE Extended Capability Header register.
  */

typedef union {
  struct {
    uint32_t CAP_ID : 16;
    ///< PCI Express Extended Capability ID. This field is a PCI-SIG defined
    ///< ID number that indicates the nature and format of the extended capability.
    ///< Note: The access attributes of this field are as follows: -> Wire:
    ///< HwInit -> Backdoor (APB or Caps Reg): R/W else R Value After Reset:
    ///< PCIe_IDE_ECAP_ID
    ///< AccessType="RW" BitOffset="0" ResetValue="0x30"
    uint32_t CAP_VER : 4;
    ///< Capability Version. This field is a PCI-SIG defined version number
    ///< that indicates the version of the capability structure present. Note:
    ///< The access attributes of this field are as follows: -> Wire: HwInit
    ///< -> Backdoor (APB or Caps Reg): R/W else R Value After Reset: PCIe_IDE_ECAP_VER
    ///< AccessType="RW" BitOffset="16" ResetValue="0x1"
    uint32_t NEXT_CAP_OFFSET : 12;
    ///< PCI Express Extended Capability ID. This field contains the offset
    ///< to the next PCI Express Extended Capability structure or 000h if no
    ///< other items exist in the linked list of capabilities. Note: The access
    ///< attributes of this field are as follows: -> Wire: HwInit -> Backdoor
    ///< (APB or Caps Reg): R/W else R Value After Reset: DWC_IDE_NEXT_PTR
    ///< AccessType="RW" BitOffset="20" ResetValue="0xD80"
  } ;
  uint32_t value;
} pcie_ide_id_ide_caps_ide_ext_cap_hdr_reg_t;

#define PCIE_IDE_ID_IDE_CAPS_IDE_EXT_CAP_HDR_DEFAULT (0xd8010030U)
#define PCIE_IDE_ID_IDE_CAPS_IDE_EXT_CAP_HDR_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CAPS_IDE_EXT_CAP_HDR_WR_MASK (0xffffffffU)


///< PCI Express Extended Capability ID. This field is a PCI-SIG defined
///< ID number that indicates the nature and format of the extended capability.
///< Note: The access attributes of this field are as follows: -> Wire:
///< HwInit -> Backdoor (APB or Caps Reg): R/W else R Value After Reset:
///< PCIe_IDE_ECAP_ID
#define PCIE_IDE_ID_IDE_CAPS_IDE_EXT_CAP_HDR_CAP_ID_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CAPS_IDE_EXT_CAP_HDR_CAP_ID_BF_WID (16)
#define PCIE_IDE_ID_IDE_CAPS_IDE_EXT_CAP_HDR_CAP_ID_BF_MSK (0x0000FFFF)
#define PCIE_IDE_ID_IDE_CAPS_IDE_EXT_CAP_HDR_CAP_ID_BF_DEF (0x00000030)

///< Capability Version. This field is a PCI-SIG defined version number
///< that indicates the version of the capability structure present. Note:
///< The access attributes of this field are as follows: -> Wire: HwInit
///< -> Backdoor (APB or Caps Reg): R/W else R Value After Reset: PCIe_IDE_ECAP_VER
#define PCIE_IDE_ID_IDE_CAPS_IDE_EXT_CAP_HDR_CAP_VER_BF_OFF (16)
#define PCIE_IDE_ID_IDE_CAPS_IDE_EXT_CAP_HDR_CAP_VER_BF_WID ( 4)
#define PCIE_IDE_ID_IDE_CAPS_IDE_EXT_CAP_HDR_CAP_VER_BF_MSK (0x000F0000)
#define PCIE_IDE_ID_IDE_CAPS_IDE_EXT_CAP_HDR_CAP_VER_BF_DEF (0x00010000)

///< PCI Express Extended Capability ID. This field contains the offset
///< to the next PCI Express Extended Capability structure or 000h if no
///< other items exist in the linked list of capabilities. Note: The access
///< attributes of this field are as follows: -> Wire: HwInit -> Backdoor
///< (APB or Caps Reg): R/W else R Value After Reset: DWC_IDE_NEXT_PTR
#define PCIE_IDE_ID_IDE_CAPS_IDE_EXT_CAP_HDR_NEXT_CAP_OFFSET_BF_OFF (20)
#define PCIE_IDE_ID_IDE_CAPS_IDE_EXT_CAP_HDR_NEXT_CAP_OFFSET_BF_WID (12)
#define PCIE_IDE_ID_IDE_CAPS_IDE_EXT_CAP_HDR_NEXT_CAP_OFFSET_BF_MSK (0xFFF00000)
#define PCIE_IDE_ID_IDE_CAPS_IDE_EXT_CAP_HDR_NEXT_CAP_OFFSET_BF_DEF (0xD8000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CAPS_IDE_CAP register description at address offset 0x2004
  *
  * Register default value:        0x010000E3
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_caps/IDE_CAP
  * IDE Capability register.
  */

typedef union {
  struct {
    uint32_t LINK_IDE_STREAM_SUPPORTED : 1;
    ///< When Set, indicates that the Port support Link IDE Streams, and that
    ///< one or more Link IDE Stream Registers block(s) immediately follow
    ///< the IDE Status Register, per the value in the Number of TCs Supported
    ///< for Link IDE field. Value After Reset: CX_IDE_LINK_IDE_STREAM_SUPPORTED
    ///< AccessType="RO" BitOffset="0" ResetValue="0x1"
    uint32_t SLCT_IDE_STREAM_SUPPORTED : 1;
    ///< When Set, indicates that the Port support Selective IDE Streams, and
    ///< that one or more Selective IDE Stream Registers block(s) are implemented,
    ///< per the value in the Number of Selective IDE Streams Supported field.
    ///< Value After Reset: CX_IDE_SELECTIVE_IDE_STREAM_SUPPORTED
    ///< AccessType="RO" BitOffset="1" ResetValue="0x1"
    uint32_t FLOWTHROUGH_IDE_STREAM_SUPPORTED : 1;
    ///< Flow-Through IDE Stream Supported - For a Switch or Root Port, when
    ///< Set indicates support for passing Selective IDE Streams to all other
    ///< Switch or Root Ports. If this bit is Set and both Link IDE Stream
    ///< Supported and Selective IDE Streams Supported are Clear, then no Link
    ///< IDE register blocks or Selective IDE register blocks are required.
    ///< Reserved for Endpoints. Value After Reset: CX_IDE_FLOW_THROUGH_IDE_STREAM_SUPPORTED
    ///< AccessType="RO" BitOffset="2" ResetValue="0x0"
    uint32_t IDE_PARTIAL_HEADER_ENCRYPTION_SUPPORTED : 1;
    ///< IDE Partial Header Encryption - If LINK_IDE_STREAM_SUPPORTED or SLCT_IDE_STREAM_SUPPORTED
    ///< are Set,                 then this bit, when set, indicates the Port
    ///< supports partial header encryption. Value After Reset: CX_IDE_PARTIAL_HEADER_ENCRYPTION_SUPPORTED
    ///< AccessType="RO" BitOffset="3" ResetValue="0x0"
    uint32_t AGGREGATION_SUPPORTED : 1;
    ///< Aggregation Supported - If Link IDE Stream Supported or Selective
    ///< IDE Streams Supported are Set, then this bit, when Set, indicates
    ///< the Port supports aggregation. Undefined if Link IDE Stream Supported
    ///< and Selective IDE Streams Supported are both Clear. Value After Reset:
    ///< CX_IDE_AGGREGATION_SUPPORTED
    ///< AccessType="RO" BitOffset="4" ResetValue="0x0"
    uint32_t PCRC_SUPPORTED : 1;
    ///< When Set, indicates that the Port supports the generation and checking
    ///< of PCRC. Value After Reset: CX_IDE_PCRC_SUPPORTED
    ///< AccessType="RO" BitOffset="5" ResetValue="0x1"
    uint32_t IDE_KM_PROTOCOL_SUPPORTED : 1;
    ///< For an Upstream Port, when Set, indicates that the Port supports the
    ///< IDE_KM protocol defined in Section 6.99.1. Reserved for Downstream
    ///< Ports. Value After Reset: CX_IDE_KEY_PROGRAMMING_PROTOCOL _SUPPORTED
    ///< AccessType="RO" BitOffset="6" ResetValue="0x1"
    uint32_t SLCT_IDE_CONF_REQ_SUPPORTED : 1;
    ///< Selective IDE for Configuration Requests Supported - If Selective
    ///< IDE Streams Supported is Set, then this bit, if Set, indicates that
    ///< the Port supports the association of Configuration Requests with Selective
    ///< IDE Streams. If Selective IDE Streams Supported is Clear, this bit
    ///< is Reserved.  Value After Reset: CX_IDE_SELECTIVE_IDE_FOR_CONFIGURATION_REQUEST_SUPPORTED
    ///< AccessType="RO" BitOffset="7" ResetValue="0x1"
    uint32_t SUPPORTED_ALGORITHM : 5;
    ///< Indicates the supported algorithms for securing IDE TLPs, encoded
    ///< as: 0 0000b - AES-GCM 256 key size, 96b MAC Others - Reserved Value
    ///< After Reset: CX_IDE_SUPPORTED_ALGORITHM
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
    uint32_t NUM_TC_SUPPORTED_FOR_LINK_IDE : 3;
    ///< Number of TCs Supported for Link IDE (i) - If Link IDE Stream Supported
    ///< is Set, indicates the number of TCs supported for Link IDE Streams
    ///< encoded as: 000b - 1 TC  supported 001b - 2 TCs supported 010b - 3
    ///< TCs supported 011b - 4 TCs supported 100b - 5 TCs supported 101b -
    ///< 6 TCs supported 110b - 7 TCs supported 111b - 8 TCs supported If Link
    ///< IDE Stream Supported is Clear, this field is undefined. Value After
    ///< Reset: CX_IDE_NUM_TC_SUPPORTED_FOR_LINK_IDE
    ///< AccessType="RO" BitOffset="13" ResetValue="0x0"
    uint32_t NUM_SLCT_IDE_STREAMS_SUPPORTED : 8;
    ///< Number of Selective IDE Streams Supported  (j) - If Selective IDE
    ///< Streams Supported is Set, indicates the number of Selective IDE Streams
    ///< supported, encoded as: 0000b - 1 Selective IDE Stream supported 0001b
    ///< - 2 Selective IDE Streams supported 0010b - 3 Selective IDE Streams
    ///< supported 0011b - 4 Selective IDE Streams supported 0100b - 5 Selective
    ///< IDE Streams supported 0101b - 6 Selective IDE Streams supported 0110b
    ///< - 7 Selective IDE Streams supported 0111b - 8 Selective IDE Streams
    ///< supported 1000b - 9 Selective IDE Stream supported 1001b - 10 Selective
    ///< IDE Streams supported 1010b - 11 Selective IDE Streams supported 1011b
    ///< - 12 Selective IDE Streams supported 1100b - 13 Selective IDE Streams
    ///< supported 1101b - 14 Selective IDE Streams supported 1110b - 15 Selective
    ///< IDE Streams supported 1111b - 16 Selective IDE Streams supported A
    ///< corresponding number of Selective IDE Stream Register blocks must
    ///< be implemented. If Link IDE Stream Supported is Clear, then these
    ///< blocks must immediately follow the IDE Status Register. If Link IDE
    ///< Stream Supported is Set, then these blocks must immediately follow
    ///< the Link IDE Stream Control and Status Registers. If Selective IDE
    ///< Streams Supported is Clear, this field is undefined. Value After Reset:
    ///< CX_IDE_NUM_SELECTIVE_IDE_STREAMS_SUPPORTED
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
    uint32_t TEE_LIMITED_STREAM_SUPPORTED : 1;
    ///< When Set, indicates that the TEE-Limited Stream control mechanism
    ///< is supported. If Selective IDE Streams Supported is Clear, then this
    ///< bit is reserved.
    ///< AccessType="RO" BitOffset="24" ResetValue="0x1"
    uint32_t  : 7;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="25" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_id_ide_caps_ide_cap_reg_t;

#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_DEFAULT (0x010000e3U)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_WR_MASK (0x00000000U)


///< When Set, indicates that the Port support Link IDE Streams, and that
///< one or more Link IDE Stream Registers block(s) immediately follow
///< the IDE Status Register, per the value in the Number of TCs Supported
///< for Link IDE field. Value After Reset: CX_IDE_LINK_IDE_STREAM_SUPPORTED
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_LINK_IDE_STRM_SUPPORTED_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_LINK_IDE_STRM_SUPPORTED_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_LINK_IDE_STRM_SUPPORTED_BF_MSK (0x00000001)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_LINK_IDE_STRM_SUPPORTED_BF_DEF (0x00000001)

///< When Set, indicates that the Port support Selective IDE Streams, and
///< that one or more Selective IDE Stream Registers block(s) are implemented,
///< per the value in the Number of Selective IDE Streams Supported field.
///< Value After Reset: CX_IDE_SELECTIVE_IDE_STREAM_SUPPORTED
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_SLCT_IDE_STRM_SUPPORTED_BF_OFF ( 1)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_SLCT_IDE_STRM_SUPPORTED_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_SLCT_IDE_STRM_SUPPORTED_BF_MSK (0x00000002)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_SLCT_IDE_STRM_SUPPORTED_BF_DEF (0x00000002)

///< Flow-Through IDE Stream Supported - For a Switch or Root Port, when
///< Set indicates support for passing Selective IDE Streams to all other
///< Switch or Root Ports. If this bit is Set and both Link IDE Stream
///< Supported and Selective IDE Streams Supported are Clear, then no Link
///< IDE register blocks or Selective IDE register blocks are required.
///< Reserved for Endpoints. Value After Reset: CX_IDE_FLOW_THROUGH_IDE_STREAM_SUPPORTED
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_FLOWTHROUGH_IDE_STRM_SUPPORTED_BF_OFF ( 2)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_FLOWTHROUGH_IDE_STRM_SUPPORTED_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_FLOWTHROUGH_IDE_STRM_SUPPORTED_BF_MSK (0x00000004)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_FLOWTHROUGH_IDE_STRM_SUPPORTED_BF_DEF (0x00000000)

///< IDE Partial Header Encryption - If LINK_IDE_STREAM_SUPPORTED or SLCT_IDE_STREAM_SUPPORTED
///< are Set,                 then this bit, when set, indicates the Port
///< supports partial header encryption. Value After Reset: CX_IDE_PARTIAL_HEADER_ENCRYPTION_SUPPORTED
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_IDE_PARTIAL_HEADER_ENCRYPTION_SUPPORTED_BF_OFF ( 3)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_IDE_PARTIAL_HEADER_ENCRYPTION_SUPPORTED_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_IDE_PARTIAL_HEADER_ENCRYPTION_SUPPORTED_BF_MSK (0x00000008)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_IDE_PARTIAL_HEADER_ENCRYPTION_SUPPORTED_BF_DEF (0x00000000)

///< Aggregation Supported - If Link IDE Stream Supported or Selective
///< IDE Streams Supported are Set, then this bit, when Set, indicates
///< the Port supports aggregation. Undefined if Link IDE Stream Supported
///< and Selective IDE Streams Supported are both Clear. Value After Reset:
///< CX_IDE_AGGREGATION_SUPPORTED
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_AGGREGATION_SUPPORTED_BF_OFF ( 4)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_AGGREGATION_SUPPORTED_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_AGGREGATION_SUPPORTED_BF_MSK (0x00000010)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_AGGREGATION_SUPPORTED_BF_DEF (0x00000000)

///< When Set, indicates that the Port supports the generation and checking
///< of PCRC. Value After Reset: CX_IDE_PCRC_SUPPORTED
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_PCRC_SUPPORTED_BF_OFF ( 5)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_PCRC_SUPPORTED_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_PCRC_SUPPORTED_BF_MSK (0x00000020)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_PCRC_SUPPORTED_BF_DEF (0x00000020)

///< For an Upstream Port, when Set, indicates that the Port supports the
///< IDE_KM protocol defined in Section 6.99.1. Reserved for Downstream
///< Ports. Value After Reset: CX_IDE_KEY_PROGRAMMING_PROTOCOL _SUPPORTED
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_IDE_KM_PROTOCOL_SUPPORTED_BF_OFF ( 6)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_IDE_KM_PROTOCOL_SUPPORTED_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_IDE_KM_PROTOCOL_SUPPORTED_BF_MSK (0x00000040)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_IDE_KM_PROTOCOL_SUPPORTED_BF_DEF (0x00000040)

///< Selective IDE for Configuration Requests Supported - If Selective
///< IDE Streams Supported is Set, then this bit, if Set, indicates that
///< the Port supports the association of Configuration Requests with Selective
///< IDE Streams. If Selective IDE Streams Supported is Clear, this bit
///< is Reserved.  Value After Reset: CX_IDE_SELECTIVE_IDE_FOR_CONFIGURATION_REQUEST_SUPPORTED
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_SLCT_IDE_CONF_REQ_SUPPORTED_BF_OFF ( 7)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_SLCT_IDE_CONF_REQ_SUPPORTED_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_SLCT_IDE_CONF_REQ_SUPPORTED_BF_MSK (0x00000080)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_SLCT_IDE_CONF_REQ_SUPPORTED_BF_DEF (0x00000080)

///< Indicates the supported algorithms for securing IDE TLPs, encoded
///< as: 0 0000b - AES-GCM 256 key size, 96b MAC Others - Reserved Value
///< After Reset: CX_IDE_SUPPORTED_ALGORITHM
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_SUPPORTED_ALGORITHM_BF_OFF ( 8)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_SUPPORTED_ALGORITHM_BF_WID ( 5)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_SUPPORTED_ALGORITHM_BF_MSK (0x00001F00)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_SUPPORTED_ALGORITHM_BF_DEF (0x00000000)

///< Number of TCs Supported for Link IDE (i) - If Link IDE Stream Supported
///< is Set, indicates the number of TCs supported for Link IDE Streams
///< encoded as: 000b - 1 TC  supported 001b - 2 TCs supported 010b - 3
///< TCs supported 011b - 4 TCs supported 100b - 5 TCs supported 101b -
///< 6 TCs supported 110b - 7 TCs supported 111b - 8 TCs supported If Link
///< IDE Stream Supported is Clear, this field is undefined. Value After
///< Reset: CX_IDE_NUM_TC_SUPPORTED_FOR_LINK_IDE
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_NUM_TC_SUPPORTED_FOR_LINK_IDE_BF_OFF (13)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_NUM_TC_SUPPORTED_FOR_LINK_IDE_BF_WID ( 3)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_NUM_TC_SUPPORTED_FOR_LINK_IDE_BF_MSK (0x0000E000)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_NUM_TC_SUPPORTED_FOR_LINK_IDE_BF_DEF (0x00000000)

///< Number of Selective IDE Streams Supported  (j) - If Selective IDE
///< Streams Supported is Set, indicates the number of Selective IDE Streams
///< supported, encoded as: 0000b - 1 Selective IDE Stream supported 0001b
///< - 2 Selective IDE Streams supported 0010b - 3 Selective IDE Streams
///< supported 0011b - 4 Selective IDE Streams supported 0100b - 5 Selective
///< IDE Streams supported 0101b - 6 Selective IDE Streams supported 0110b
///< - 7 Selective IDE Streams supported 0111b - 8 Selective IDE Streams
///< supported 1000b - 9 Selective IDE Stream supported 1001b - 10 Selective
///< IDE Streams supported 1010b - 11 Selective IDE Streams supported 1011b
///< - 12 Selective IDE Streams supported 1100b - 13 Selective IDE Streams
///< supported 1101b - 14 Selective IDE Streams supported 1110b - 15 Selective
///< IDE Streams supported 1111b - 16 Selective IDE Streams supported A
///< corresponding number of Selective IDE Stream Register blocks must
///< be implemented. If Link IDE Stream Supported is Clear, then these
///< blocks must immediately follow the IDE Status Register. If Link IDE
///< Stream Supported is Set, then these blocks must immediately follow
///< the Link IDE Stream Control and Status Registers. If Selective IDE
///< Streams Supported is Clear, this field is undefined. Value After Reset:
///< CX_IDE_NUM_SELECTIVE_IDE_STREAMS_SUPPORTED
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_NUM_SLCT_IDE_STRMS_SUPPORTED_BF_OFF (16)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_NUM_SLCT_IDE_STRMS_SUPPORTED_BF_WID ( 8)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_NUM_SLCT_IDE_STRMS_SUPPORTED_BF_MSK (0x00FF0000)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_NUM_SLCT_IDE_STRMS_SUPPORTED_BF_DEF (0x00000000)

///< When Set, indicates that the TEE-Limited Stream control mechanism
///< is supported. If Selective IDE Streams Supported is Clear, then this
///< bit is reserved.
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_TEE_LIMITED_STRM_SUPPORTED_BF_OFF (24)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_TEE_LIMITED_STRM_SUPPORTED_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_TEE_LIMITED_STRM_SUPPORTED_BF_MSK (0x01000000)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_TEE_LIMITED_STRM_SUPPORTED_BF_DEF (0x01000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_RESERVED_31_25_BF_OFF (25)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_RESERVED_31_25_BF_WID ( 7)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_RESERVED_31_25_BF_MSK (0xFE000000)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_RESERVED_31_25_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CAPS_IDE_CTRL register description at address offset 0x2008
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_caps/IDE_CTRL
  * IDE Control register.
  */

typedef union {
  struct {
    uint32_t  : 2;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t FLOWTHROUGH_IDE_STREAM_ENABLED : 1;
    ///< For Switch Ports and Root Ports, Enables the Port for flow-through
    ///< operation of IDE Stream. Feature currently not supported on the product.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="3" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_id_ide_caps_ide_ctrl_reg_t;

#define PCIE_IDE_ID_IDE_CAPS_IDE_CTRL_DEFAULT (0x00000000U)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CTRL_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CTRL_WR_MASK (0x00000004U)


///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CAPS_IDE_CTRL_RESERVED_1_0_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CTRL_RESERVED_1_0_BF_WID ( 2)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CTRL_RESERVED_1_0_BF_MSK (0x00000003)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CTRL_RESERVED_1_0_BF_DEF (0x00000000)

///< For Switch Ports and Root Ports, Enables the Port for flow-through
///< operation of IDE Stream. Feature currently not supported on the product.
#define PCIE_IDE_ID_IDE_CAPS_IDE_CTRL_FLOWTHROUGH_IDE_STRM_END_BF_OFF ( 2)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CTRL_FLOWTHROUGH_IDE_STRM_END_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CTRL_FLOWTHROUGH_IDE_STRM_END_BF_MSK (0x00000004)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CTRL_FLOWTHROUGH_IDE_STRM_END_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CAPS_IDE_CTRL_RESERVED_31_3_BF_OFF ( 3)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CTRL_RESERVED_31_3_BF_WID (29)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CTRL_RESERVED_31_3_BF_MSK (0xFFFFFFF8)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CTRL_RESERVED_31_3_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CAPS_IDE_LINK_STREAM_CTRL_0 register description at address offset 0x200c
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_caps/IDE_LINK_STREAM_CTRL_0
  * IDE Link Stream 0 Control Register.
  */

typedef union {
  struct {
    uint32_t LINK_IDE_STREAM_ENABLED : 1;
    ///< When Set, enables Link IDE Stream such that IDE operation starts when
    ///< triggered by means of the IDE_KM protocol (see Section 6.99.3). When
    ///< Cleared, must immediately transition the Stream to Insecure.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="2" ResetValue="0x0"
    uint32_t PCRC_ENABLE : 1;
    ///< When Set, Transmitted IDE TLPs associated with this Stream must include
    ///< PCRC, and Received TLPs must be checked for PRCR failure. Reserved
    ///< if PCRC Supported is Clear.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="9" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
    uint32_t SELECTED_ALGORITHM : 5;
    ///< Selects the algorithm to be used for securing IDE TLPs for this IDE
    ///< Stream. Must be programmed to the same value in both the Upstream
    ///< and Downstream Ports. Must be configured while Link IDE Stream Enable
    ///< is Clear. When Link IDE Stream Enable is Set, the setting is sampled,
    ///< and this field becomes RO with reads returning the sampled value.
    ///< 0 0000b - AES-GCM 256 key size, 96b MAC Others - Reserved
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t TC : 3;
    ///< System firmware/software must program this field to indicate the TC
    ///< associated with this Link IDE Register block
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="22" ResetValue="0x0"
    uint32_t STREAM_ID : 8;
    ///< Indicates the Stream ID associated with this Link IDE Stream. Software
    ///< must program the same Stream ID into both Ports associated with a
    ///< given Link IDE Stream
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_id_ide_caps_ide_link_strm_ctrl_0_reg_t;

#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STRM_CTRL_0_DEFAULT (0x00000000U)
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STRM_CTRL_0_RD_MASK (0xffffc3ffU)
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STRM_CTRL_0_WR_MASK (0xff3fc101U)


///< When Set, enables Link IDE Stream such that IDE operation starts when
///< triggered by means of the IDE_KM protocol (see Section 6.99.3). When
///< Cleared, must immediately transition the Stream to Insecure.
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STRM_CTRL_0_LINK_IDE_STRM_END_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STRM_CTRL_0_LINK_IDE_STRM_END_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STRM_CTRL_0_LINK_IDE_STRM_END_BF_MSK (0x00000001)
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STRM_CTRL_0_LINK_IDE_STRM_END_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STRM_CTRL_0_RESERVED_1_BF_OFF ( 1)
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STRM_CTRL_0_RESERVED_1_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STRM_CTRL_0_RESERVED_1_BF_MSK (0x00000002)
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STRM_CTRL_0_RESERVED_1_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STRM_CTRL_0_RESERVED_7_2_BF_OFF ( 2)
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STRM_CTRL_0_RESERVED_7_2_BF_WID ( 6)
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STRM_CTRL_0_RESERVED_7_2_BF_MSK (0x000000FC)
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STRM_CTRL_0_RESERVED_7_2_BF_DEF (0x00000000)

///< When Set, Transmitted IDE TLPs associated with this Stream must include
///< PCRC, and Received TLPs must be checked for PRCR failure. Reserved
///< if PCRC Supported is Clear.
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STRM_CTRL_0_PCRC_EN_BF_OFF ( 8)
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STRM_CTRL_0_PCRC_EN_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STRM_CTRL_0_PCRC_EN_BF_MSK (0x00000100)
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STRM_CTRL_0_PCRC_EN_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STRM_CTRL_0_RESERVED_9_BF_OFF ( 9)
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STRM_CTRL_0_RESERVED_9_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STRM_CTRL_0_RESERVED_9_BF_MSK (0x00000200)
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STRM_CTRL_0_RESERVED_9_BF_DEF (0x00000000)

///< Selects the algorithm to be used for securing IDE TLPs for this IDE
///< Stream. Must be programmed to the same value in both the Upstream
///< and Downstream Ports. Must be configured while Link IDE Stream Enable
///< is Clear. When Link IDE Stream Enable is Set, the setting is sampled,
///< and this field becomes RO with reads returning the sampled value.
///< 0 0000b - AES-GCM 256 key size, 96b MAC Others - Reserved
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STRM_CTRL_0_SELED_ALGORITHM_BF_OFF (14)
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STRM_CTRL_0_SELED_ALGORITHM_BF_WID ( 5)
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STRM_CTRL_0_SELED_ALGORITHM_BF_MSK (0x0007C000)
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STRM_CTRL_0_SELED_ALGORITHM_BF_DEF (0x00000000)

///< System firmware/software must program this field to indicate the TC
///< associated with this Link IDE Register block
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STRM_CTRL_0_TC_BF_OFF (19)
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STRM_CTRL_0_TC_BF_WID ( 3)
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STRM_CTRL_0_TC_BF_MSK (0x00380000)
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STRM_CTRL_0_TC_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STRM_CTRL_0_RESERVED_23_22_BF_OFF (22)
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STRM_CTRL_0_RESERVED_23_22_BF_WID ( 2)
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STRM_CTRL_0_RESERVED_23_22_BF_MSK (0x00C00000)
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STRM_CTRL_0_RESERVED_23_22_BF_DEF (0x00000000)

///< Indicates the Stream ID associated with this Link IDE Stream. Software
///< must program the same Stream ID into both Ports associated with a
///< given Link IDE Stream
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STRM_CTRL_0_STRM_ID_BF_OFF (24)
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STRM_CTRL_0_STRM_ID_BF_WID ( 8)
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STRM_CTRL_0_STRM_ID_BF_MSK (0xFF000000)
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STRM_CTRL_0_STRM_ID_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CAPS_IDE_LINK_STATUS_0 register description at address offset 0x2010
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_caps/IDE_LINK_STATUS_0
  * IDE Link Stream 0 Status Register.
  */

typedef union {
  struct {
    uint32_t LINK_IDE_STREAM_STATE : 4;
    ///< When Link IDE Stream Enable is Set, this field indicates the state
    ///< of the Port. Encodings:   0000b - Start / UnknownInsecure   0010b
    ///< - Secure   Others - Reserved - Software must handle reserved values
    ///< as indicating unknown state   When Link IDE Stream Enable is Clear,
    ///< the value of this field must be 0000b.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="4" ResetValue="0x0"
    uint32_t RECEIVED_INTEGRITY_CHECK_FAIL_MSG : 1;
    ///< When Set, indicates that one or more Integrity Check Fail Message(s)
    ///< have been Received for this Stream.
    ///< AccessType="RW/1C" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_id_ide_caps_ide_link_stat_0_reg_t;

#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STAT_0_DEFAULT (0x00000000U)
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STAT_0_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STAT_0_WR_MASK (0x80000000U)


///< When Link IDE Stream Enable is Set, this field indicates the state
///< of the Port. Encodings:   0000b - Start / UnknownInsecure   0010b
///< - Secure   Others - Reserved - Software must handle reserved values
///< as indicating unknown state   When Link IDE Stream Enable is Clear,
///< the value of this field must be 0000b.
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STAT_0_LINK_IDE_STRM_STATE_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STAT_0_LINK_IDE_STRM_STATE_BF_WID ( 4)
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STAT_0_LINK_IDE_STRM_STATE_BF_MSK (0x0000000F)
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STAT_0_LINK_IDE_STRM_STATE_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STAT_0_RESERVED_30_4_BF_OFF ( 4)
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STAT_0_RESERVED_30_4_BF_WID (27)
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STAT_0_RESERVED_30_4_BF_MSK (0x7FFFFFF0)
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STAT_0_RESERVED_30_4_BF_DEF (0x00000000)

///< When Set, indicates that one or more Integrity Check Fail Message(s)
///< have been Received for this Stream.
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STAT_0_RECEIVED_INTEGRITY_CHECK_FAIL_MSG_BF_OFF (31)
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STAT_0_RECEIVED_INTEGRITY_CHECK_FAIL_MSG_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STAT_0_RECEIVED_INTEGRITY_CHECK_FAIL_MSG_BF_MSK (0x80000000)
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STAT_0_RECEIVED_INTEGRITY_CHECK_FAIL_MSG_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CAPS_IDE_SLCT_IDE_STREAM_CAP_0 register description at address offset 0x2014
  *
  * Register default value:        0x00000001
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_caps/IDE_SLCT_IDE_STREAM_CAP_0
  * IDE Selective Stream 0 IDE Capability Register.
  */

typedef union {
  struct {
    uint32_t NUM_ADDR_ASSOS_REG_BLOCKS : 4;
    ///< Indicates the number of Selective IDE Address Association register
    ///< blocks for this Selective IDE Stream (k). The number of Selective
    ///< IDE Address Association register blocks for a given IDE Stream is
    ///< hardware implementation-specific, and is permitted to be any number
    ///< between 0 and 15
    ///< AccessType="RO" BitOffset="0" ResetValue="0x1"
    uint32_t  : 28;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="4" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_id_ide_caps_ide_slct_ide_strm_cap_0_reg_t;

#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CAP_0_DEFAULT (0x00000001U)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CAP_0_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CAP_0_WR_MASK (0x00000000U)


///< Indicates the number of Selective IDE Address Association register
///< blocks for this Selective IDE Stream (k). The number of Selective
///< IDE Address Association register blocks for a given IDE Stream is
///< hardware implementation-specific, and is permitted to be any number
///< between 0 and 15
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CAP_0_NUM_ADDR_ASSOS_BLKS_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CAP_0_NUM_ADDR_ASSOS_BLKS_BF_WID ( 4)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CAP_0_NUM_ADDR_ASSOS_BLKS_BF_MSK (0x0000000F)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CAP_0_NUM_ADDR_ASSOS_BLKS_BF_DEF (0x00000001)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CAP_0_RESERVED_31_4_BF_OFF ( 4)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CAP_0_RESERVED_31_4_BF_WID (28)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CAP_0_RESERVED_31_4_BF_MSK (0xFFFFFFF0)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CAP_0_RESERVED_31_4_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CAPS_IDE_SLCT_IDE_STREAM_CTRL_0 register description at address offset 0x2018
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_caps/IDE_SLCT_IDE_STREAM_CTRL_0
  * IDE Selective Stream 0 IDE Control Register.
  */

typedef union {
  struct {
    uint32_t SLCT_IDE_STREAM_ENABLED : 1;
    ///< When Set, enables this IDE Stream such that IDE operation starts when
    ///< triggered by means of the IDE_KM protocol (see Section 6.99.3). When
    ///< Cleared, must immediately transition the Stream to Insecure. The following
    ///< must be programmed before this bit is Set:   Selected Algorithm (below)
    ///< Requester ID Limit in IDE RID Association Register 1   Requester ID
    ///< Base in IDE RID Association Register 2   V bit in IDE RID Association
    ///< Register 2   If this bit is Set when the V bit is Clear, the IDE Stream
    ///< must transition to Insecure state.   When Cleared, must immediately
    ///< transition the Stream to Insecure.   It is strongly recommended that
    ///< the IDE Address Association Registers, and the Default Stream bit
    ///< (if applicable), also be programmed prior to Setting this bit.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="2" ResetValue="0x0"
    uint32_t PCRC_ENABLE : 1;
    ///< When Set, Transmitted IDE TLPs associated with this Stream must include
    ///< PCRC, and Received TLPs must be checked for PRCR failure.   Reserved
    ///< if PCRC Supported is Clear.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t SLCR_IDE_CFG_REQ_ENABLE : 1;
    ///< Selective IDE for Configuration Requests Enable - For Root Ports,
    ///< if Selective IDE for Configuration Requests Supported is Set, then
    ///< this bit, when Set, indicates that the Port supports the association
    ///< of Configuration Requests with Selective IDE Streams.   For Ports
    ///< other than Root Ports, this bit is Reserved.   If Selective IDE for
    ///< Configuration Requests Supported is Clear, this bit is Reserved.
    ///< AccessType="RW/V" BitOffset="9" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
    uint32_t SELECTED_ALGORITHM : 5;
    ///< Selects the algorithm to be used for securing IDE TLPs for this IDE
    ///< Stream. Must be programmed to the same value in both the Upstream
    ///< and Downstream Ports. Must be configured while Selective IDE Stream
    ///< Enable is Clear. When Link IDE Stream Enable is Set, the setting is
    ///< sampled, and this field becomes RO with reads returning the sampled
    ///< value.   0 0000b - AES-GCM 256 key size, 96b MAC Others - Reserved
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t TC : 3;
    ///< System firmware/software must program this field to indicate the TC
    ///< associated with this Link IDE Register block
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t DEFAULT_STREAM : 1;
    ///< When Set, ATS and Memory Request/Completion TLPs using the Traffic
    ///< Class indicated in the TC field are associated with this Stream, unless
    ///< the TLP matches some other Stream for the indicated TC.   It is not
    ///< permitted to configure more than one Default Stream to be associated
    ///< with the same TC. If this is done, hardware must select one of the
    ///< Streams to be associated with the TC - the selection is implementation-specific.
    ///< Applicable for Endpoint Upstream Ports only. Reserved for other Port
    ///< types.
    ///< AccessType="RW/V" BitOffset="22" ResetValue="0x0"
    uint32_t TEE_LIMITED_STREAM : 1;
    ///< When Set, requires that, for Requests, only those that have the T
    ///< bit Set are permitted to be associated with this Stream.   Must be
    ///< configured while Selective IDE Stream Enable is Clear during which
    ///< time this bit is RW. When Selective IDE Stream Enable is Set to 1,
    ///< the setting is sampled, and this   field bit becomes RO with reads
    ///< returning the sampled value during the time when Selective IDE Stream
    ///< Enable remains Set.   Reserved if TEE-Limited Stream Supported is
    ///< Clear.
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t STREAM_ID : 8;
    ///< Indicates the Stream ID associated with this Link IDE Stream. Software
    ///< must program the same Stream ID into both Ports associated with a
    ///< given Link IDE Stream
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_id_ide_caps_ide_slct_ide_strm_ctrl_0_reg_t;

#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CTRL_0_DEFAULT (0x00000000U)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CTRL_0_RD_MASK (0xffffc3ffU)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CTRL_0_WR_MASK (0xffffc301U)


///< When Set, enables this IDE Stream such that IDE operation starts when
///< triggered by means of the IDE_KM protocol (see Section 6.99.3). When
///< Cleared, must immediately transition the Stream to Insecure. The following
///< must be programmed before this bit is Set:   Selected Algorithm (below)
///< Requester ID Limit in IDE RID Association Register 1   Requester ID
///< Base in IDE RID Association Register 2   V bit in IDE RID Association
///< Register 2   If this bit is Set when the V bit is Clear, the IDE Stream
///< must transition to Insecure state.   When Cleared, must immediately
///< transition the Stream to Insecure.   It is strongly recommended that
///< the IDE Address Association Registers, and the Default Stream bit
///< (if applicable), also be programmed prior to Setting this bit.
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CTRL_0_SLCT_IDE_STRM_END_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CTRL_0_SLCT_IDE_STRM_END_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CTRL_0_SLCT_IDE_STRM_END_BF_MSK (0x00000001)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CTRL_0_SLCT_IDE_STRM_END_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CTRL_0_RESERVED_1_BF_OFF ( 1)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CTRL_0_RESERVED_1_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CTRL_0_RESERVED_1_BF_MSK (0x00000002)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CTRL_0_RESERVED_1_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CTRL_0_RESERVED_7_2_BF_OFF ( 2)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CTRL_0_RESERVED_7_2_BF_WID ( 6)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CTRL_0_RESERVED_7_2_BF_MSK (0x000000FC)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CTRL_0_RESERVED_7_2_BF_DEF (0x00000000)

///< When Set, Transmitted IDE TLPs associated with this Stream must include
///< PCRC, and Received TLPs must be checked for PRCR failure.   Reserved
///< if PCRC Supported is Clear.
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CTRL_0_PCRC_EN_BF_OFF ( 8)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CTRL_0_PCRC_EN_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CTRL_0_PCRC_EN_BF_MSK (0x00000100)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CTRL_0_PCRC_EN_BF_DEF (0x00000000)

///< Selective IDE for Configuration Requests Enable - For Root Ports,
///< if Selective IDE for Configuration Requests Supported is Set, then
///< this bit, when Set, indicates that the Port supports the association
///< of Configuration Requests with Selective IDE Streams.   For Ports
///< other than Root Ports, this bit is Reserved.   If Selective IDE for
///< Configuration Requests Supported is Clear, this bit is Reserved.
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CTRL_0_SLCR_IDE_CFG_REQ_EN_BF_OFF ( 9)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CTRL_0_SLCR_IDE_CFG_REQ_EN_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CTRL_0_SLCR_IDE_CFG_REQ_EN_BF_MSK (0x00000200)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CTRL_0_SLCR_IDE_CFG_REQ_EN_BF_DEF (0x00000000)

///< Selects the algorithm to be used for securing IDE TLPs for this IDE
///< Stream. Must be programmed to the same value in both the Upstream
///< and Downstream Ports. Must be configured while Selective IDE Stream
///< Enable is Clear. When Link IDE Stream Enable is Set, the setting is
///< sampled, and this field becomes RO with reads returning the sampled
///< value.   0 0000b - AES-GCM 256 key size, 96b MAC Others - Reserved
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CTRL_0_SELED_ALGORITHM_BF_OFF (14)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CTRL_0_SELED_ALGORITHM_BF_WID ( 5)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CTRL_0_SELED_ALGORITHM_BF_MSK (0x0007C000)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CTRL_0_SELED_ALGORITHM_BF_DEF (0x00000000)

///< System firmware/software must program this field to indicate the TC
///< associated with this Link IDE Register block
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CTRL_0_TC_BF_OFF (19)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CTRL_0_TC_BF_WID ( 3)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CTRL_0_TC_BF_MSK (0x00380000)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CTRL_0_TC_BF_DEF (0x00000000)

///< When Set, ATS and Memory Request/Completion TLPs using the Traffic
///< Class indicated in the TC field are associated with this Stream, unless
///< the TLP matches some other Stream for the indicated TC.   It is not
///< permitted to configure more than one Default Stream to be associated
///< with the same TC. If this is done, hardware must select one of the
///< Streams to be associated with the TC - the selection is implementation-specific.
///< Applicable for Endpoint Upstream Ports only. Reserved for other Port
///< types.
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CTRL_0_DEFAULT_STRM_BF_OFF (22)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CTRL_0_DEFAULT_STRM_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CTRL_0_DEFAULT_STRM_BF_MSK (0x00400000)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CTRL_0_DEFAULT_STRM_BF_DEF (0x00000000)

///< When Set, requires that, for Requests, only those that have the T
///< bit Set are permitted to be associated with this Stream.   Must be
///< configured while Selective IDE Stream Enable is Clear during which
///< time this bit is RW. When Selective IDE Stream Enable is Set to 1,
///< the setting is sampled, and this   field bit becomes RO with reads
///< returning the sampled value during the time when Selective IDE Stream
///< Enable remains Set.   Reserved if TEE-Limited Stream Supported is
///< Clear.
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CTRL_0_TEE_LIMITED_STRM_BF_OFF (23)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CTRL_0_TEE_LIMITED_STRM_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CTRL_0_TEE_LIMITED_STRM_BF_MSK (0x00800000)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CTRL_0_TEE_LIMITED_STRM_BF_DEF (0x00000000)

///< Indicates the Stream ID associated with this Link IDE Stream. Software
///< must program the same Stream ID into both Ports associated with a
///< given Link IDE Stream
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CTRL_0_STRM_ID_BF_OFF (24)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CTRL_0_STRM_ID_BF_WID ( 8)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CTRL_0_STRM_ID_BF_MSK (0xFF000000)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CTRL_0_STRM_ID_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CAPS_IDE_SLCT_IDE_STREAM_STATUS_0 register description at address offset 0x201c
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_caps/IDE_SLCT_IDE_STREAM_STATUS_0
  * IDE Selective Stream 0 IDE Status Register.
  */

typedef union {
  struct {
    uint32_t SLCT_IDE_STREAM_STATE : 4;
    ///< When Selective IDE Stream Enable is Set, this field indicates the
    ///< state of the Selective IDE Stream at this Port. Encodings:   0000b
    ///< - Start / UnknownInsecure   0010b - Secure   Others - Reserved - Software
    ///< must handle reserved values as indicating unknown state   When Selective
    ///< IDE Stream Enable is Clear, the value of this field must be 0000b
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="4" ResetValue="0x0"
    uint32_t RECEIVED_INTEGRITY_CHECK_FAIL_MSG : 1;
    ///< When Set, indicates that one or more Integrity Check Fail Message(s)
    ///< have been Received for this Stream
    ///< AccessType="RW/1C" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_id_ide_caps_ide_slct_ide_strm_stat_0_reg_t;

#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_STAT_0_DEFAULT (0x00000000U)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_STAT_0_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_STAT_0_WR_MASK (0x80000000U)


///< When Selective IDE Stream Enable is Set, this field indicates the
///< state of the Selective IDE Stream at this Port. Encodings:   0000b
///< - Start / UnknownInsecure   0010b - Secure   Others - Reserved - Software
///< must handle reserved values as indicating unknown state   When Selective
///< IDE Stream Enable is Clear, the value of this field must be 0000b
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_STAT_0_SLCT_IDE_STRM_STATE_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_STAT_0_SLCT_IDE_STRM_STATE_BF_WID ( 4)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_STAT_0_SLCT_IDE_STRM_STATE_BF_MSK (0x0000000F)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_STAT_0_SLCT_IDE_STRM_STATE_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_STAT_0_RESERVED_31_4_BF_OFF ( 4)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_STAT_0_RESERVED_31_4_BF_WID (27)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_STAT_0_RESERVED_31_4_BF_MSK (0x7FFFFFF0)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_STAT_0_RESERVED_31_4_BF_DEF (0x00000000)

///< When Set, indicates that one or more Integrity Check Fail Message(s)
///< have been Received for this Stream
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_STAT_0_RECEIVED_INTEGRITY_CHECK_FAIL_MSG_BF_OFF (31)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_STAT_0_RECEIVED_INTEGRITY_CHECK_FAIL_MSG_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_STAT_0_RECEIVED_INTEGRITY_CHECK_FAIL_MSG_BF_MSK (0x80000000)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_STAT_0_RECEIVED_INTEGRITY_CHECK_FAIL_MSG_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CAPS_IDE_RID_ASSOS_REG1_0 register description at address offset 0x2020
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_caps/IDE_RID_ASSOS_REG1_0
  * IDE RID Association Register 1 of Selective Stream 0.
  */

typedef union {
  struct {
    uint32_t  : 8;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t RID_LIMIT : 16;
    ///< Indicates the highest value RID in the range associated with this
    ///< Stream ID at the IDE Partner Port.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_id_ide_caps_ide_rid_assos_reg1_0_reg_t;

#define PCIE_IDE_ID_IDE_CAPS_IDE_RID_ASSOS_REG1_0_DEFAULT (0x00000000U)
#define PCIE_IDE_ID_IDE_CAPS_IDE_RID_ASSOS_REG1_0_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CAPS_IDE_RID_ASSOS_REG1_0_WR_MASK (0x00ffff00U)


///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CAPS_IDE_RID_ASSOS_REG1_0_RESERVED_7_0_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CAPS_IDE_RID_ASSOS_REG1_0_RESERVED_7_0_BF_WID ( 8)
#define PCIE_IDE_ID_IDE_CAPS_IDE_RID_ASSOS_REG1_0_RESERVED_7_0_BF_MSK (0x000000FF)
#define PCIE_IDE_ID_IDE_CAPS_IDE_RID_ASSOS_REG1_0_RESERVED_7_0_BF_DEF (0x00000000)

///< Indicates the highest value RID in the range associated with this
///< Stream ID at the IDE Partner Port.
#define PCIE_IDE_ID_IDE_CAPS_IDE_RID_ASSOS_REG1_0_RID_LIMIT_BF_OFF ( 8)
#define PCIE_IDE_ID_IDE_CAPS_IDE_RID_ASSOS_REG1_0_RID_LIMIT_BF_WID (16)
#define PCIE_IDE_ID_IDE_CAPS_IDE_RID_ASSOS_REG1_0_RID_LIMIT_BF_MSK (0x00FFFF00)
#define PCIE_IDE_ID_IDE_CAPS_IDE_RID_ASSOS_REG1_0_RID_LIMIT_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CAPS_IDE_RID_ASSOS_REG1_0_RESERVED_31_24_BF_OFF (24)
#define PCIE_IDE_ID_IDE_CAPS_IDE_RID_ASSOS_REG1_0_RESERVED_31_24_BF_WID ( 8)
#define PCIE_IDE_ID_IDE_CAPS_IDE_RID_ASSOS_REG1_0_RESERVED_31_24_BF_MSK (0xFF000000)
#define PCIE_IDE_ID_IDE_CAPS_IDE_RID_ASSOS_REG1_0_RESERVED_31_24_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CAPS_IDE_RID_ASSOS_REG2_0 register description at address offset 0x2024
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_caps/IDE_RID_ASSOS_REG2_0
  * IDE RID Association Register 2 of Selective Stream 0.
  */

typedef union {
  struct {
    uint32_t RID_VALID : 1;
    ///< When Set, indicates the RID Base and RID Limit fields have been programmed.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 7;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
    uint32_t RID_BASE : 16;
    ///< Indicates the lowest value RID in the range associated with this Stream
    ///< ID at the IDE Partner Port.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pcie_ide_id_ide_caps_ide_rid_assos_reg2_0_reg_t;

#define PCIE_IDE_ID_IDE_CAPS_IDE_RID_ASSOS_REG2_0_DEFAULT (0x00000000U)
#define PCIE_IDE_ID_IDE_CAPS_IDE_RID_ASSOS_REG2_0_RD_MASK (0x00ffffffU)
#define PCIE_IDE_ID_IDE_CAPS_IDE_RID_ASSOS_REG2_0_WR_MASK (0x00ffff01U)


///< When Set, indicates the RID Base and RID Limit fields have been programmed.
#define PCIE_IDE_ID_IDE_CAPS_IDE_RID_ASSOS_REG2_0_RID_VALID_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CAPS_IDE_RID_ASSOS_REG2_0_RID_VALID_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CAPS_IDE_RID_ASSOS_REG2_0_RID_VALID_BF_MSK (0x00000001)
#define PCIE_IDE_ID_IDE_CAPS_IDE_RID_ASSOS_REG2_0_RID_VALID_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CAPS_IDE_RID_ASSOS_REG2_0_RESERVED_7_1_BF_OFF ( 1)
#define PCIE_IDE_ID_IDE_CAPS_IDE_RID_ASSOS_REG2_0_RESERVED_7_1_BF_WID ( 7)
#define PCIE_IDE_ID_IDE_CAPS_IDE_RID_ASSOS_REG2_0_RESERVED_7_1_BF_MSK (0x000000FE)
#define PCIE_IDE_ID_IDE_CAPS_IDE_RID_ASSOS_REG2_0_RESERVED_7_1_BF_DEF (0x00000000)

///< Indicates the lowest value RID in the range associated with this Stream
///< ID at the IDE Partner Port.
#define PCIE_IDE_ID_IDE_CAPS_IDE_RID_ASSOS_REG2_0_RID_BASE_BF_OFF ( 8)
#define PCIE_IDE_ID_IDE_CAPS_IDE_RID_ASSOS_REG2_0_RID_BASE_BF_WID (16)
#define PCIE_IDE_ID_IDE_CAPS_IDE_RID_ASSOS_REG2_0_RID_BASE_BF_MSK (0x00FFFF00)
#define PCIE_IDE_ID_IDE_CAPS_IDE_RID_ASSOS_REG2_0_RID_BASE_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CAPS_IDE_ADDR_ASSOS_REG1_0_0 register description at address offset 0x2028
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_caps/IDE_ADDR_ASSOS_REG1_0_0
  * IDE Address Association Register 1 of Register Block 0 for Selective IDE Stream 0.
  */

typedef union {
  struct {
    uint32_t ASSOC_BLOCK_VALID : 1;
    ///< When Set, indicates this IDE Stream Association Block is valid, that
    ///< the address range defined by Memory Base and Memory Limit corresponding
    ///< to a range of memory addresses assigned to the IDE Partner Port, and
    ///< that all Transmitted Address Routed TLPs within this address range
    ///< must be associated with this IDE Stream. Hardware behavior is undefined
    ///< if overlapping address ranges are assigned for different IDE Streams.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 7;
    ///< Reserved and read as zero.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
    uint32_t MEM_BASE_LOWER : 12;
    ///< Lower Memory Base. Corresponds to Address bits [31:20]. Address[19:0]
    ///< bits are implicitly 0_0000h.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t MEM_LIMIT_LOWER : 12;
    ///< Lower Memory Limit. Corresponds to Address bits [31:20]. Address bits
    ///< [19:0] are implicitly F_FFFFh.
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_id_ide_caps_ide_addr_assos_reg1_0_reg_t;

#define PCIE_IDE_ID_IDE_CAPS_IDE_ADDR_ASSOS_REG1_0_DEFAULT (0x00000000U)
#define PCIE_IDE_ID_IDE_CAPS_IDE_ADDR_ASSOS_REG1_0_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CAPS_IDE_ADDR_ASSOS_REG1_0_WR_MASK (0xffffff01U)


///< When Set, indicates this IDE Stream Association Block is valid, that
///< the address range defined by Memory Base and Memory Limit corresponding
///< to a range of memory addresses assigned to the IDE Partner Port, and
///< that all Transmitted Address Routed TLPs within this address range
///< must be associated with this IDE Stream. Hardware behavior is undefined
///< if overlapping address ranges are assigned for different IDE Streams.
#define PCIE_IDE_ID_IDE_CAPS_IDE_ADDR_ASSOS_REG1_0_ASSOC_VALID_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CAPS_IDE_ADDR_ASSOS_REG1_0_ASSOC_VALID_BF_WID ( 1)
#define PCIE_IDE_ID_IDE_CAPS_IDE_ADDR_ASSOS_REG1_0_ASSOC_VALID_BF_MSK (0x00000001)
#define PCIE_IDE_ID_IDE_CAPS_IDE_ADDR_ASSOS_REG1_0_ASSOC_VALID_BF_DEF (0x00000000)

///< Reserved and read as zero.
#define PCIE_IDE_ID_IDE_CAPS_IDE_ADDR_ASSOS_REG1_0_RESERVED_7_1_BF_OFF ( 1)
#define PCIE_IDE_ID_IDE_CAPS_IDE_ADDR_ASSOS_REG1_0_RESERVED_7_1_BF_WID ( 7)
#define PCIE_IDE_ID_IDE_CAPS_IDE_ADDR_ASSOS_REG1_0_RESERVED_7_1_BF_MSK (0x000000FE)
#define PCIE_IDE_ID_IDE_CAPS_IDE_ADDR_ASSOS_REG1_0_RESERVED_7_1_BF_DEF (0x00000000)

///< Lower Memory Base. Corresponds to Address bits [31:20]. Address[19:0]
///< bits are implicitly 0_0000h.
#define PCIE_IDE_ID_IDE_CAPS_IDE_ADDR_ASSOS_REG1_0_MEM_BASE_LOWER_BF_OFF ( 8)
#define PCIE_IDE_ID_IDE_CAPS_IDE_ADDR_ASSOS_REG1_0_MEM_BASE_LOWER_BF_WID (12)
#define PCIE_IDE_ID_IDE_CAPS_IDE_ADDR_ASSOS_REG1_0_MEM_BASE_LOWER_BF_MSK (0x000FFF00)
#define PCIE_IDE_ID_IDE_CAPS_IDE_ADDR_ASSOS_REG1_0_MEM_BASE_LOWER_BF_DEF (0x00000000)

///< Lower Memory Limit. Corresponds to Address bits [31:20]. Address bits
///< [19:0] are implicitly F_FFFFh.
#define PCIE_IDE_ID_IDE_CAPS_IDE_ADDR_ASSOS_REG1_0_MEM_LIMIT_LOWER_BF_OFF (20)
#define PCIE_IDE_ID_IDE_CAPS_IDE_ADDR_ASSOS_REG1_0_MEM_LIMIT_LOWER_BF_WID (12)
#define PCIE_IDE_ID_IDE_CAPS_IDE_ADDR_ASSOS_REG1_0_MEM_LIMIT_LOWER_BF_MSK (0xFFF00000)
#define PCIE_IDE_ID_IDE_CAPS_IDE_ADDR_ASSOS_REG1_0_MEM_LIMIT_LOWER_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CAPS_IDE_ADDR_ASSOS_REG2_0_0 register description at address offset 0x202c
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_caps/IDE_ADDR_ASSOS_REG2_0_0
  * IDE Address Association Register 2 of Register Block 0 for Selective IDE Stream 0.
  */

typedef union {
  struct {
    uint32_t MEM_LIMIT_UPPER : 32;
    ///< Upper Memomry Limit. Corresponds to Address bits [63:32]
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_id_ide_caps_ide_addr_assos_reg2_0_reg_t;

#define PCIE_IDE_ID_IDE_CAPS_IDE_ADDR_ASSOS_REG2_0_DEFAULT (0x00000000U)
#define PCIE_IDE_ID_IDE_CAPS_IDE_ADDR_ASSOS_REG2_0_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CAPS_IDE_ADDR_ASSOS_REG2_0_WR_MASK (0xffffffffU)


///< Upper Memomry Limit. Corresponds to Address bits [63:32]
#define PCIE_IDE_ID_IDE_CAPS_IDE_ADDR_ASSOS_REG2_0_MEM_LIMIT_UPPER_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CAPS_IDE_ADDR_ASSOS_REG2_0_MEM_LIMIT_UPPER_BF_WID (32)
#define PCIE_IDE_ID_IDE_CAPS_IDE_ADDR_ASSOS_REG2_0_MEM_LIMIT_UPPER_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_ID_IDE_CAPS_IDE_ADDR_ASSOS_REG2_0_MEM_LIMIT_UPPER_BF_DEF (0x00000000)


/** @brief ABC_DWC_PCIE_IDE_DWC_PCIE_IDE_APB_ID_IDE_CAPS_IDE_ADDR_ASSOS_REG3_0_0 register description at address offset 0x2030
  *
  * Register default value:        0x00000000
  * Register full path in IP: abc_DWC_pcie_ide/DWC_pcie_ide_apb/id_ide_caps/IDE_ADDR_ASSOS_REG3_0_0
  * IDE Address Association Register 3 of Register Block 0 for Selective IDE Stream 0.
  */

typedef union {
  struct {
    uint32_t MEM_BASE_UPPER : 32;
    ///< Upper Memory Base. Corresponds to Address bits [63:32]
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_ide_id_ide_caps_ide_addr_assos_reg3_0_reg_t;

#define PCIE_IDE_ID_IDE_CAPS_IDE_ADDR_ASSOS_REG3_0_DEFAULT (0x00000000U)
#define PCIE_IDE_ID_IDE_CAPS_IDE_ADDR_ASSOS_REG3_0_RD_MASK (0xffffffffU)
#define PCIE_IDE_ID_IDE_CAPS_IDE_ADDR_ASSOS_REG3_0_WR_MASK (0xffffffffU)


///< Upper Memory Base. Corresponds to Address bits [63:32]
#define PCIE_IDE_ID_IDE_CAPS_IDE_ADDR_ASSOS_REG3_0_MEM_BASE_UPPER_BF_OFF ( 0)
#define PCIE_IDE_ID_IDE_CAPS_IDE_ADDR_ASSOS_REG3_0_MEM_BASE_UPPER_BF_WID (32)
#define PCIE_IDE_ID_IDE_CAPS_IDE_ADDR_ASSOS_REG3_0_MEM_BASE_UPPER_BF_MSK (0xFFFFFFFF)
#define PCIE_IDE_ID_IDE_CAPS_IDE_ADDR_ASSOS_REG3_0_MEM_BASE_UPPER_BF_DEF (0x00000000)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define PCIE_IDE_ID_IDE_CFG_IDE_CORE_VER_NUM_REG ((pcie_ide_id_ide_cfg_ide_core_ver_num_reg_t*) PCIE_IDE_ID_IDE_CFG_IDE_CORE_VER_NUM_ADR)
#define PCIE_IDE_ID_IDE_CFG_IDE_CORE_VER_TYPE_REG ((pcie_ide_id_ide_cfg_ide_core_ver_type_reg_t*) PCIE_IDE_ID_IDE_CFG_IDE_CORE_VER_TYPE_ADR)
#define PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_REG ((pcie_ide_id_ide_cfg_ide_glbl_cfg_reg_t*) PCIE_IDE_ID_IDE_CFG_IDE_GLBL_CFG_ADR)
#define PCIE_IDE_ID_IDE_CFG_IDE_SYNC_MSG_CFG_REG ((pcie_ide_id_ide_cfg_ide_sync_msg_cfg_reg_t*) PCIE_IDE_ID_IDE_CFG_IDE_SYNC_MSG_CFG_ADR)
#define PCIE_IDE_ID_IDE_CFG_TX_LINK_TBIT_CFG_REG ((pcie_ide_id_ide_cfg_tx_link_tbit_cfg_reg_t*) PCIE_IDE_ID_IDE_CFG_TX_LINK_TBIT_CFG_ADR)
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_TBIT1_CFG_REG ((pcie_ide_id_ide_cfg_tx_slt_tbit1_cfg_reg_t*) PCIE_IDE_ID_IDE_CFG_TX_SLT_TBIT1_CFG_ADR)
#define PCIE_IDE_ID_IDE_CFG_TX_LNK_KBIT_CFG_REG ((pcie_ide_id_ide_cfg_tx_lnk_kbit_cfg_reg_t*) PCIE_IDE_ID_IDE_CFG_TX_LNK_KBIT_CFG_ADR)
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_KBIT1_CFG_REG ((pcie_ide_id_ide_cfg_tx_slt_kbit1_cfg_reg_t*) PCIE_IDE_ID_IDE_CFG_TX_SLT_KBIT1_CFG_ADR)
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_CFG_REG ((pcie_ide_id_ide_cfg_rx_lnk_kbit_cfg_reg_t*) PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_CFG_ADR)
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT1_CFG_REG ((pcie_ide_id_ide_cfg_rx_slt_kbit1_cfg_reg_t*) PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT1_CFG_ADR)
#define PCIE_IDE_ID_IDE_CFG_KEY_THRESH_EN_REG ((pcie_ide_id_ide_cfg_key_thresh_en_reg_t*) PCIE_IDE_ID_IDE_CFG_KEY_THRESH_EN_ADR)
#define PCIE_IDE_ID_IDE_CFG_REKEY_REQ_STAT_REG ((pcie_ide_id_ide_cfg_rekey_req_stat_reg_t*) PCIE_IDE_ID_IDE_CFG_REKEY_REQ_STAT_ADR)
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_TSHOLD_LOW_S0_REG ((pcie_ide_id_ide_cfg_tx_key_tshold_low_s0_reg_t*) PCIE_IDE_ID_IDE_CFG_TX_KEY_TSHOLD_LOW_S0_ADR)
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_TSHOLD_HIGH_S0_REG ((pcie_ide_id_ide_cfg_tx_key_tshold_high_s0_reg_t*) PCIE_IDE_ID_IDE_CFG_TX_KEY_TSHOLD_HIGH_S0_ADR)
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_TSHOLD_LOW_S0_REG ((pcie_ide_id_ide_cfg_rx_key_tshold_low_s0_reg_t*) PCIE_IDE_ID_IDE_CFG_RX_KEY_TSHOLD_LOW_S0_ADR)
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_TSHOLD_HIGH_S0_REG ((pcie_ide_id_ide_cfg_rx_key_tshold_high_s0_reg_t*) PCIE_IDE_ID_IDE_CFG_RX_KEY_TSHOLD_HIGH_S0_ADR)
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_TSHOLD_LOW_S1_REG ((pcie_ide_id_ide_cfg_tx_key_tshold_low_s1_reg_t*) PCIE_IDE_ID_IDE_CFG_TX_KEY_TSHOLD_LOW_S1_ADR)
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_TSHOLD_HIGH_S1_REG ((pcie_ide_id_ide_cfg_tx_key_tshold_high_s1_reg_t*) PCIE_IDE_ID_IDE_CFG_TX_KEY_TSHOLD_HIGH_S1_ADR)
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_TSHOLD_LOW_S1_REG ((pcie_ide_id_ide_cfg_rx_key_tshold_low_s1_reg_t*) PCIE_IDE_ID_IDE_CFG_RX_KEY_TSHOLD_LOW_S1_ADR)
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_TSHOLD_HIGH_S1_REG ((pcie_ide_id_ide_cfg_rx_key_tshold_high_s1_reg_t*) PCIE_IDE_ID_IDE_CFG_RX_KEY_TSHOLD_HIGH_S1_ADR)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S0_REG ((pcie_ide_id_ide_cfg_key_security_stat_s0_reg_t*) PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S0_ADR)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S1_REG ((pcie_ide_id_ide_cfg_key_security_stat_s1_reg_t*) PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_STAT_S1_ADR)
#define PCIE_IDE_ID_IDE_CFG_IDE_CNTER_OVERFLOW_REG ((pcie_ide_id_ide_cfg_ide_cnter_overflow_reg_t*) PCIE_IDE_ID_IDE_CFG_IDE_CNTER_OVERFLOW_ADR)
#define PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_REG ((pcie_ide_id_ide_cfg_ide_irq_en_reg_t*) PCIE_IDE_ID_IDE_CFG_IDE_IRQ_EN_ADR)
#define PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_REG ((pcie_ide_id_ide_cfg_key_security_irq_en_reg_t*) PCIE_IDE_ID_IDE_CFG_KEY_SECURITY_IRQ_EN_ADR)
#define PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_REG ((pcie_ide_id_ide_cfg_ide_io_irq_stat_reg_t*) PCIE_IDE_ID_IDE_CFG_IDE_IO_IRQ_STAT_ADR)
#define PCIE_IDE_ID_IDE_CFG_LNK_SND_STRM_INSECURE_REG ((pcie_ide_id_ide_cfg_lnk_snd_strm_insecure_reg_t*) PCIE_IDE_ID_IDE_CFG_LNK_SND_STRM_INSECURE_ADR)
#define PCIE_IDE_ID_IDE_CFG_SLT_SND_STRM_INSECURE_REG ((pcie_ide_id_ide_cfg_slt_snd_strm_insecure_reg_t*) PCIE_IDE_ID_IDE_CFG_SLT_SND_STRM_INSECURE_ADR)
#define PCIE_IDE_ID_IDE_CFG_TX_LNK_KBIT_TOGGLED_REG ((pcie_ide_id_ide_cfg_tx_lnk_kbit_toggled_reg_t*) PCIE_IDE_ID_IDE_CFG_TX_LNK_KBIT_TOGGLED_ADR)
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_TOGGLED_REG ((pcie_ide_id_ide_cfg_rx_lnk_kbit_toggled_reg_t*) PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_TOGGLED_ADR)
#define PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_CURRENT_REG ((pcie_ide_id_ide_cfg_rx_lnk_kbit_current_reg_t*) PCIE_IDE_ID_IDE_CFG_RX_LNK_KBIT_CURRENT_ADR)
#define PCIE_IDE_ID_IDE_CFG_TX_SLT_KBIT_TOGGLED_REG ((pcie_ide_id_ide_cfg_tx_slt_kbit_toggled_reg_t*) PCIE_IDE_ID_IDE_CFG_TX_SLT_KBIT_TOGGLED_ADR)
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT_TOGGLED_REG ((pcie_ide_id_ide_cfg_rx_slt_kbit_toggled_reg_t*) PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT_TOGGLED_ADR)
#define PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT_CURRENT_REG ((pcie_ide_id_ide_cfg_rx_slt_kbit_current_reg_t*) PCIE_IDE_ID_IDE_CFG_RX_SLT_KBIT_CURRENT_ADR)
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_USAGE_CNTER_LOW_S0_REG ((pcie_ide_id_ide_cfg_tx_key_usage_cnter_low_s0_reg_t*) PCIE_IDE_ID_IDE_CFG_TX_KEY_USAGE_CNTER_LOW_S0_ADR)
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_USAGE_CNTER_HIGH_S0_REG ((pcie_ide_id_ide_cfg_tx_key_usage_cnter_high_s0_reg_t*) PCIE_IDE_ID_IDE_CFG_TX_KEY_USAGE_CNTER_HIGH_S0_ADR)
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_USAGE_CNTER_LOW_S0_REG ((pcie_ide_id_ide_cfg_rx_key_usage_cnter_low_s0_reg_t*) PCIE_IDE_ID_IDE_CFG_RX_KEY_USAGE_CNTER_LOW_S0_ADR)
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_USAGE_CNTER_HIGH_S0_REG ((pcie_ide_id_ide_cfg_rx_key_usage_cnter_high_s0_reg_t*) PCIE_IDE_ID_IDE_CFG_RX_KEY_USAGE_CNTER_HIGH_S0_ADR)
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_USAGE_CNTER_LOW_S1_REG ((pcie_ide_id_ide_cfg_tx_key_usage_cnter_low_s1_reg_t*) PCIE_IDE_ID_IDE_CFG_TX_KEY_USAGE_CNTER_LOW_S1_ADR)
#define PCIE_IDE_ID_IDE_CFG_TX_KEY_USAGE_CNTER_HIGH_S1_REG ((pcie_ide_id_ide_cfg_tx_key_usage_cnter_high_s1_reg_t*) PCIE_IDE_ID_IDE_CFG_TX_KEY_USAGE_CNTER_HIGH_S1_ADR)
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_USAGE_CNTER_LOW_S1_REG ((pcie_ide_id_ide_cfg_rx_key_usage_cnter_low_s1_reg_t*) PCIE_IDE_ID_IDE_CFG_RX_KEY_USAGE_CNTER_LOW_S1_ADR)
#define PCIE_IDE_ID_IDE_CFG_RX_KEY_USAGE_CNTER_HIGH_S1_REG ((pcie_ide_id_ide_cfg_rx_key_usage_cnter_high_s1_reg_t*) PCIE_IDE_ID_IDE_CFG_RX_KEY_USAGE_CNTER_HIGH_S1_ADR)
#define PCIE_IDE_ID_IDE_CFG_IDE_TX_PCRC_ERR_MASK_REG ((pcie_ide_id_ide_cfg_ide_tx_pcrc_err_mask_reg_t*) PCIE_IDE_ID_IDE_CFG_IDE_TX_PCRC_ERR_MASK_ADR)
#define PCIE_IDE_ID_IDE_CFG_IDE_TX_PCRC_ERR_CNT_REG ((pcie_ide_id_ide_cfg_ide_tx_pcrc_err_cnt_reg_t*) PCIE_IDE_ID_IDE_CFG_IDE_TX_PCRC_ERR_CNT_ADR)
#define PCIE_IDE_ID_IDE_CFG_IDE_RX_PCRC_ERR_MASK_REG ((pcie_ide_id_ide_cfg_ide_rx_pcrc_err_mask_reg_t*) PCIE_IDE_ID_IDE_CFG_IDE_RX_PCRC_ERR_MASK_ADR)
#define PCIE_IDE_ID_IDE_CFG_IDE_RX_PCRC_ERR_CNT_REG ((pcie_ide_id_ide_cfg_ide_rx_pcrc_err_cnt_reg_t*) PCIE_IDE_ID_IDE_CFG_IDE_RX_PCRC_ERR_CNT_ADR)
#define PCIE_IDE_ID_IDE_CFG_IDE_TDISP_ON_REG ((pcie_ide_id_ide_cfg_ide_tdisp_on_reg_t*) PCIE_IDE_ID_IDE_CFG_IDE_TDISP_ON_ADR)
#define PCIE_IDE_ID_IDE_CFG_IDE_DISCARD_OVRD_REG ((pcie_ide_id_ide_cfg_ide_discard_ovrd_reg_t*) PCIE_IDE_ID_IDE_CFG_IDE_DISCARD_OVRD_ADR)
#define PCIE_IDE_ID_IDE_CFG_IDE_MSG_ON_SELIVE_EN_REG ((pcie_ide_id_ide_cfg_ide_msg_on_selive_en_reg_t*) PCIE_IDE_ID_IDE_CFG_IDE_MSG_ON_SELIVE_EN_ADR)
#define PCIE_IDE_ID_IDE_CAPS_IDE_EXT_CAP_HDR_REG ((pcie_ide_id_ide_caps_ide_ext_cap_hdr_reg_t*) PCIE_IDE_ID_IDE_CAPS_IDE_EXT_CAP_HDR_ADR)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CAP_REG ((pcie_ide_id_ide_caps_ide_cap_reg_t*) PCIE_IDE_ID_IDE_CAPS_IDE_CAP_ADR)
#define PCIE_IDE_ID_IDE_CAPS_IDE_CTRL_REG ((pcie_ide_id_ide_caps_ide_ctrl_reg_t*) PCIE_IDE_ID_IDE_CAPS_IDE_CTRL_ADR)
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STRM_CTRL_0_REG ((pcie_ide_id_ide_caps_ide_link_strm_ctrl_0_reg_t*) PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STRM_CTRL_0_ADR)
#define PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STAT_0_REG ((pcie_ide_id_ide_caps_ide_link_stat_0_reg_t*) PCIE_IDE_ID_IDE_CAPS_IDE_LINK_STAT_0_ADR)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CAP_0_REG ((pcie_ide_id_ide_caps_ide_slct_ide_strm_cap_0_reg_t*) PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CAP_0_ADR)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CTRL_0_REG ((pcie_ide_id_ide_caps_ide_slct_ide_strm_ctrl_0_reg_t*) PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CTRL_0_ADR)
#define PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_STAT_0_REG ((pcie_ide_id_ide_caps_ide_slct_ide_strm_stat_0_reg_t*) PCIE_IDE_ID_IDE_CAPS_IDE_SLCT_IDE_STRM_STAT_0_ADR)
#define PCIE_IDE_ID_IDE_CAPS_IDE_RID_ASSOS_REG1_0_REG ((pcie_ide_id_ide_caps_ide_rid_assos_reg1_0_reg_t*) PCIE_IDE_ID_IDE_CAPS_IDE_RID_ASSOS_REG1_0_ADR)
#define PCIE_IDE_ID_IDE_CAPS_IDE_RID_ASSOS_REG2_0_REG ((pcie_ide_id_ide_caps_ide_rid_assos_reg2_0_reg_t*) PCIE_IDE_ID_IDE_CAPS_IDE_RID_ASSOS_REG2_0_ADR)
#define PCIE_IDE_ID_IDE_CAPS_IDE_ADDR_ASSOS_REG1_0_REG ((pcie_ide_id_ide_caps_ide_addr_assos_reg1_0_reg_t*) PCIE_IDE_ID_IDE_CAPS_IDE_ADDR_ASSOS_REG1_0_ADR)
#define PCIE_IDE_ID_IDE_CAPS_IDE_ADDR_ASSOS_REG2_0_REG ((pcie_ide_id_ide_caps_ide_addr_assos_reg2_0_reg_t*) PCIE_IDE_ID_IDE_CAPS_IDE_ADDR_ASSOS_REG2_0_ADR)
#define PCIE_IDE_ID_IDE_CAPS_IDE_ADDR_ASSOS_REG3_0_REG ((pcie_ide_id_ide_caps_ide_addr_assos_reg3_0_reg_t*) PCIE_IDE_ID_IDE_CAPS_IDE_ADDR_ASSOS_REG3_0_ADR)

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    pcie_ide_id_ide_cfg_ide_core_ver_num_reg_t ID_IDE_CFG_IDE_CORE_VER_NUM; /*< Address offset = 0x0 */
    pcie_ide_id_ide_cfg_ide_core_ver_type_reg_t ID_IDE_CFG_IDE_CORE_VER_TYPE; /*< Address offset = 0x4 */
    pcie_ide_id_ide_cfg_ide_glbl_cfg_reg_t ID_IDE_CFG_IDE_GLBL_CFG; /*< Address offset = 0x8 */
    pcie_ide_id_ide_cfg_ide_sync_msg_cfg_reg_t ID_IDE_CFG_IDE_SYNC_MSG_CFG; /*< Address offset = 0xc */
    pcie_ide_id_ide_cfg_tx_link_tbit_cfg_reg_t ID_IDE_CFG_TX_LINK_TBIT_CFG; /*< Address offset = 0x10 */
    pcie_ide_id_ide_cfg_tx_slt_tbit1_cfg_reg_t ID_IDE_CFG_TX_SLT_TBIT1_CFG; /*< Address offset = 0x14 */
    const uint8_t        reservedArea0 [4];   /*< Address offset = 0x18 */
    pcie_ide_id_ide_cfg_tx_lnk_kbit_cfg_reg_t ID_IDE_CFG_TX_LNK_KBIT_CFG; /*< Address offset = 0x1c */
    pcie_ide_id_ide_cfg_tx_slt_kbit1_cfg_reg_t ID_IDE_CFG_TX_SLT_KBIT1_CFG; /*< Address offset = 0x20 */
    pcie_ide_id_ide_cfg_rx_lnk_kbit_cfg_reg_t ID_IDE_CFG_RX_LNK_KBIT_CFG; /*< Address offset = 0x24 */
    pcie_ide_id_ide_cfg_rx_slt_kbit1_cfg_reg_t ID_IDE_CFG_RX_SLT_KBIT1_CFG; /*< Address offset = 0x28 */
    pcie_ide_id_ide_cfg_key_thresh_en_reg_t ID_IDE_CFG_KEY_THRESH_EN; /*< Address offset = 0x2c */
    pcie_ide_id_ide_cfg_rekey_req_stat_reg_t ID_IDE_CFG_REKEY_REQ_STAT; /*< Address offset = 0x30 */
    const uint8_t        reservedArea1 [12];  /*< Address offset = 0x34 */
    pcie_ide_id_ide_cfg_tx_key_tshold_low_s0_reg_t ID_IDE_CFG_TX_KEY_TSHOLD_LOW_S0; /*< Address offset = 0x40 */
    pcie_ide_id_ide_cfg_tx_key_tshold_high_s0_reg_t ID_IDE_CFG_TX_KEY_TSHOLD_HIGH_S0; /*< Address offset = 0x44 */
    pcie_ide_id_ide_cfg_rx_key_tshold_low_s0_reg_t ID_IDE_CFG_RX_KEY_TSHOLD_LOW_S0; /*< Address offset = 0x48 */
    pcie_ide_id_ide_cfg_rx_key_tshold_high_s0_reg_t ID_IDE_CFG_RX_KEY_TSHOLD_HIGH_S0; /*< Address offset = 0x4c */
    pcie_ide_id_ide_cfg_tx_key_tshold_low_s1_reg_t ID_IDE_CFG_TX_KEY_TSHOLD_LOW_S1; /*< Address offset = 0x50 */
    pcie_ide_id_ide_cfg_tx_key_tshold_high_s1_reg_t ID_IDE_CFG_TX_KEY_TSHOLD_HIGH_S1; /*< Address offset = 0x54 */
    pcie_ide_id_ide_cfg_rx_key_tshold_low_s1_reg_t ID_IDE_CFG_RX_KEY_TSHOLD_LOW_S1; /*< Address offset = 0x58 */
    pcie_ide_id_ide_cfg_rx_key_tshold_high_s1_reg_t ID_IDE_CFG_RX_KEY_TSHOLD_HIGH_S1; /*< Address offset = 0x5c */
    const uint8_t        reservedArea2 [496]; /*< Address offset = 0x60 */
    pcie_ide_id_ide_cfg_key_security_stat_s0_reg_t ID_IDE_CFG_KEY_SECURITY_STAT_S0; /*< Address offset = 0x250 */
    pcie_ide_id_ide_cfg_key_security_stat_s1_reg_t ID_IDE_CFG_KEY_SECURITY_STAT_S1; /*< Address offset = 0x254 */
    const uint8_t        reservedArea3 [124]; /*< Address offset = 0x258 */
    pcie_ide_id_ide_cfg_ide_cnter_overflow_reg_t ID_IDE_CFG_IDE_CNTER_OVERFLOW; /*< Address offset = 0x2d4 */
    pcie_ide_id_ide_cfg_ide_irq_en_reg_t ID_IDE_CFG_IDE_IRQ_EN; /*< Address offset = 0x2d8 */
    const uint8_t        reservedArea4 [4];   /*< Address offset = 0x2dc */
    pcie_ide_id_ide_cfg_key_security_irq_en_reg_t ID_IDE_CFG_KEY_SECURITY_IRQ_EN; /*< Address offset = 0x2e0 */
    pcie_ide_id_ide_cfg_ide_io_irq_stat_reg_t ID_IDE_CFG_IDE_IO_IRQ_STAT; /*< Address offset = 0x2e4 */
    pcie_ide_id_ide_cfg_lnk_snd_strm_insecure_reg_t ID_IDE_CFG_LNK_SND_STRM_INSECURE; /*< Address offset = 0x2e8 */
    pcie_ide_id_ide_cfg_slt_snd_strm_insecure_reg_t ID_IDE_CFG_SLT_SND_STRM_INSECURE; /*< Address offset = 0x2ec */
    const uint8_t        reservedArea5 [24];  /*< Address offset = 0x2f0 */
    pcie_ide_id_ide_cfg_tx_lnk_kbit_toggled_reg_t ID_IDE_CFG_TX_LNK_KBIT_TOGGLED; /*< Address offset = 0x308 */
    pcie_ide_id_ide_cfg_rx_lnk_kbit_toggled_reg_t ID_IDE_CFG_RX_LNK_KBIT_TOGGLED; /*< Address offset = 0x30c */
    pcie_ide_id_ide_cfg_rx_lnk_kbit_current_reg_t ID_IDE_CFG_RX_LNK_KBIT_CURRENT; /*< Address offset = 0x310 */
    pcie_ide_id_ide_cfg_tx_slt_kbit_toggled_reg_t ID_IDE_CFG_TX_SLT_KBIT_TOGGLED; /*< Address offset = 0x314 */
    pcie_ide_id_ide_cfg_rx_slt_kbit_toggled_reg_t ID_IDE_CFG_RX_SLT_KBIT_TOGGLED; /*< Address offset = 0x318 */
    pcie_ide_id_ide_cfg_rx_slt_kbit_current_reg_t ID_IDE_CFG_RX_SLT_KBIT_CURRENT; /*< Address offset = 0x31c */
    const uint8_t        reservedArea6 [12];  /*< Address offset = 0x320 */
    pcie_ide_id_ide_cfg_tx_key_usage_cnter_low_s0_reg_t ID_IDE_CFG_TX_KEY_USAGE_CNTER_LOW_S0; /*< Address offset = 0x32c */
    pcie_ide_id_ide_cfg_tx_key_usage_cnter_high_s0_reg_t ID_IDE_CFG_TX_KEY_USAGE_CNTER_HIGH_S0; /*< Address offset = 0x330 */
    pcie_ide_id_ide_cfg_rx_key_usage_cnter_low_s0_reg_t ID_IDE_CFG_RX_KEY_USAGE_CNTER_LOW_S0; /*< Address offset = 0x334 */
    pcie_ide_id_ide_cfg_rx_key_usage_cnter_high_s0_reg_t ID_IDE_CFG_RX_KEY_USAGE_CNTER_HIGH_S0; /*< Address offset = 0x338 */
    pcie_ide_id_ide_cfg_tx_key_usage_cnter_low_s1_reg_t ID_IDE_CFG_TX_KEY_USAGE_CNTER_LOW_S1; /*< Address offset = 0x33c */
    pcie_ide_id_ide_cfg_tx_key_usage_cnter_high_s1_reg_t ID_IDE_CFG_TX_KEY_USAGE_CNTER_HIGH_S1; /*< Address offset = 0x340 */
    pcie_ide_id_ide_cfg_rx_key_usage_cnter_low_s1_reg_t ID_IDE_CFG_RX_KEY_USAGE_CNTER_LOW_S1; /*< Address offset = 0x344 */
    pcie_ide_id_ide_cfg_rx_key_usage_cnter_high_s1_reg_t ID_IDE_CFG_RX_KEY_USAGE_CNTER_HIGH_S1; /*< Address offset = 0x348 */
    const uint8_t        reservedArea7 [224]; /*< Address offset = 0x34c */
    pcie_ide_id_ide_cfg_ide_tx_pcrc_err_mask_reg_t ID_IDE_CFG_IDE_TX_PCRC_ERR_MASK; /*< Address offset = 0x42c */
    pcie_ide_id_ide_cfg_ide_tx_pcrc_err_cnt_reg_t ID_IDE_CFG_IDE_TX_PCRC_ERR_CNT; /*< Address offset = 0x430 */
    pcie_ide_id_ide_cfg_ide_rx_pcrc_err_mask_reg_t ID_IDE_CFG_IDE_RX_PCRC_ERR_MASK; /*< Address offset = 0x434 */
    pcie_ide_id_ide_cfg_ide_rx_pcrc_err_cnt_reg_t ID_IDE_CFG_IDE_RX_PCRC_ERR_CNT; /*< Address offset = 0x438 */
    const uint8_t        reservedArea8 [12];  /*< Address offset = 0x43c */
    pcie_ide_id_ide_cfg_ide_tdisp_on_reg_t ID_IDE_CFG_IDE_TDISP_ON; /*< Address offset = 0x448 */
    pcie_ide_id_ide_cfg_ide_discard_ovrd_reg_t ID_IDE_CFG_IDE_DISCARD_OVRD; /*< Address offset = 0x44c */
    const uint8_t        reservedArea9 [176]; /*< Address offset = 0x450 */
    pcie_ide_id_ide_cfg_ide_msg_on_selive_en_reg_t ID_IDE_CFG_IDE_MSG_ON_SELIVE_EN; /*< Address offset = 0x500 */
    const uint8_t        reservedArea10 [6908]; /*< Address offset = 0x504 */
    pcie_ide_id_ide_caps_ide_ext_cap_hdr_reg_t ID_IDE_CAPS_IDE_EXT_CAP_HDR; /*< Address offset = 0x2000 */
    pcie_ide_id_ide_caps_ide_cap_reg_t ID_IDE_CAPS_IDE_CAP; /*< Address offset = 0x2004 */
    pcie_ide_id_ide_caps_ide_ctrl_reg_t ID_IDE_CAPS_IDE_CTRL; /*< Address offset = 0x2008 */
    pcie_ide_id_ide_caps_ide_link_strm_ctrl_0_reg_t ID_IDE_CAPS_IDE_LINK_STRM_CTRL_0; /*< Address offset = 0x200c */
    pcie_ide_id_ide_caps_ide_link_stat_0_reg_t ID_IDE_CAPS_IDE_LINK_STAT_0; /*< Address offset = 0x2010 */
    pcie_ide_id_ide_caps_ide_slct_ide_strm_cap_0_reg_t ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CAP_0; /*< Address offset = 0x2014 */
    pcie_ide_id_ide_caps_ide_slct_ide_strm_ctrl_0_reg_t ID_IDE_CAPS_IDE_SLCT_IDE_STRM_CTRL_0; /*< Address offset = 0x2018 */
    pcie_ide_id_ide_caps_ide_slct_ide_strm_stat_0_reg_t ID_IDE_CAPS_IDE_SLCT_IDE_STRM_STAT_0; /*< Address offset = 0x201c */
    pcie_ide_id_ide_caps_ide_rid_assos_reg1_0_reg_t ID_IDE_CAPS_IDE_RID_ASSOS_REG1_0; /*< Address offset = 0x2020 */
    pcie_ide_id_ide_caps_ide_rid_assos_reg2_0_reg_t ID_IDE_CAPS_IDE_RID_ASSOS_REG2_0; /*< Address offset = 0x2024 */
    pcie_ide_id_ide_caps_ide_addr_assos_reg1_0_reg_t ID_IDE_CAPS_IDE_ADDR_ASSOS_REG1_0_0; /*< Address offset = 0x2028 */
    pcie_ide_id_ide_caps_ide_addr_assos_reg2_0_reg_t ID_IDE_CAPS_IDE_ADDR_ASSOS_REG2_0_0; /*< Address offset = 0x202c */
    pcie_ide_id_ide_caps_ide_addr_assos_reg3_0_reg_t ID_IDE_CAPS_IDE_ADDR_ASSOS_REG3_0_0; /*< Address offset = 0x2030 */
} dwc_pcie_ide_t;     // size: 0x00f8

// AddressSpace struct pointer
//
#define DLNK_PCIE_DWC_IDE_HCFG_APB  ((dwc_pcie_ide_t*) DLNK_PCIE_DWC_IDE_HCFG_APB_BASE)

// ******************************************* /Address Space

#endif      // _DWC_PCIE_IDE_H_

