#ifndef _TRX_SYS_CSR_H_
#define _TRX_SYS_CSR_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define TRX_SYS0_CSR_BASE     ( 0x0527f000 )
#define TRX_SYS1_CSR_BASE     ( 0x0529f000 )
#define TRX_SYS2_CSR_BASE     ( 0x052bf000 )
#define TRX_SYS3_CSR_BASE     ( 0x052df000 )
#define TRX_SYS4_CSR_BASE     ( 0x052ff000 )
#define TRX_SYS5_CSR_BASE     ( 0x0531f000 )
#define TRX_SYS6_CSR_BASE     ( 0x0533f000 )
#define TRX_SYS7_CSR_BASE     ( 0x0535f000 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define TRX_SYS_CSR_TRX_RATE_CFG_OFFSET ( 0x00000000U )
#define TRX_SYS_CSR_TX_INT_HI_AGGR_OFFSET ( 0x00000004U )
#define TRX_SYS_CSR_TX_INT_LO_AGGR_OFFSET ( 0x00000008U )
#define TRX_SYS_CSR_RX_CAPMUX_SEL_OFFSET ( 0x00000014U )
#define TRX_SYS_CSR_RX_INT_HI_AGGR_OFFSET ( 0x00000018U )
#define TRX_SYS_CSR_RX_INT_LO_AGGR_OFFSET ( 0x0000001cU )
#define TRX_SYS_CSR_TX_INSERT0_SRC0_OFFSET ( 0x00000020U )
#define TRX_SYS_CSR_TX_INSERT0_SRC1_OFFSET ( 0x00000024U )
#define TRX_SYS_CSR_TX_INSERT1_SRC0_OFFSET ( 0x00000028U )
#define TRX_SYS_CSR_TX_INSERT1_SRC1_OFFSET ( 0x0000002cU )
#define TRX_SYS_CSR_TX_INSERT_VALSRC_OFFSET ( 0x00000030U )
#define TRX_SYS_CSR_TX_INSERT0_CFG_OFFSET ( 0x00000034U )
#define TRX_SYS_CSR_TX_INSERT1_CFG_OFFSET ( 0x00000038U )
#define TRX_SYS_CSR_TX_ALARM0_FORCE_OFFSET ( 0x00000040U )
#define TRX_SYS_CSR_TX_ALARM0_MASK_OFFSET ( 0x00000044U )
#define TRX_SYS_CSR_TX_ALARM0_STAT_OFFSET ( 0x00000048U )
#define TRX_SYS_CSR_TX_ALARM0_STICKY_OFFSET ( 0x0000004cU )
#define TRX_SYS_CSR_TX_ALARM0_ETIMER_OFFSET ( 0x00000050U )
#define TRX_SYS_CSR_TX_ALARM0_PNTIMER_OFFSET ( 0x00000054U )
#define TRX_SYS_CSR_TX_ALARM1_FORCE_OFFSET ( 0x00000058U )
#define TRX_SYS_CSR_TX_ALARM1_MASK_OFFSET ( 0x0000005cU )
#define TRX_SYS_CSR_TX_ALARM1_STAT_OFFSET ( 0x00000060U )
#define TRX_SYS_CSR_TX_ALARM1_STICKY_OFFSET ( 0x00000064U )
#define TRX_SYS_CSR_TX_ALARM1_ETIMER_OFFSET ( 0x00000068U )
#define TRX_SYS_CSR_TX_ALARM1_PNTIMER_OFFSET ( 0x0000006cU )
#define TRX_SYS_CSR_CVA_CS0_I_OFFSET ( 0x00000070U )
#define TRX_SYS_CSR_CVA_CS0_Q_OFFSET ( 0x00000074U )
#define TRX_SYS_CSR_CVA_CS1_I_OFFSET ( 0x00000078U )
#define TRX_SYS_CSR_CVA_CS1_Q_OFFSET ( 0x0000007cU )
#define TRX_SYS_CSR_CVA_ERR_OFFSET ( 0x00000080U )
#define TRX_SYS_CSR_CVA_CFG_OFFSET ( 0x00000084U )
#define TRX_SYS_CSR_MOD_AC_CAL_ENA_OFFSET ( 0x00000088U )
#define TRX_SYS_CSR_MOD_CAPMUX_SEL_OFFSET ( 0x0000008cU )
#define TRX_SYS_CSR_DMOD_AC_CAL_ENA_OFFSET ( 0x00000090U )
#define TRX_SYS_CSR_TX_ALARM0_CNTER_OFFSET ( 0x00000094U )
#define TRX_SYS_CSR_TX_ALARM1_CNTER_OFFSET ( 0x00000098U )
#define TRX_SYS_CSR_DP_INIT_ENB_OFFSET ( 0x0000009cU )
#define TRX_SYS_CSR_DP_DONE_STAT_OFFSET ( 0x000000a0U )
#define TRX_SYS_CSR_TRX_INT_STAT_OFFSET ( 0x000000c0U )
#define TRX_SYS_CSR_TRX_INT_HI_EN_OFFSET ( 0x000000c4U )
#define TRX_SYS_CSR_TRX_INT_LO_EN_OFFSET ( 0x000000c8U )
#define TRX_SYS_CSR_TRX_INT_CLR_OFFSET ( 0x000000ccU )
#define TRX_SYS_CSR_TRX_INT_FORCE_OFFSET ( 0x000000d0U )
#define TRX_SYS_CSR_SMON_R0_OFFSET ( 0x000001e0U )
#define TRX_SYS_CSR_SMON_R1_OFFSET ( 0x000001e4U )
#define TRX_SYS_CSR_SMON_R2_OFFSET ( 0x000001e8U )
#define TRX_SYS_CSR_SMON_R3_OFFSET ( 0x000001ecU )
#define TRX_SYS_CSR_SMON_R4_OFFSET ( 0x000001f0U )
#define TRX_SYS_CSR_SMON_R5_OFFSET ( 0x000001f4U )
#define TRX_SYS_CSR_SMON_R6_OFFSET ( 0x000001f8U )
#define TRX_SYS_CSR_SMON_R7_OFFSET ( 0x000001fcU )
#define TRX_SYS_CSR_APB_BRDG_STAT_OFFSET ( 0x00000200U )
#define TRX_SYS_CSR_ISYNC_CTRL_OFFSET ( 0x00000300U )
#define TRX_SYS_CSR_ISYNC_LCNT_INC_OFFSET ( 0x00000304U )
#define TRX_SYS_CSR_ISYNC_TEN_MS_CNT_OFFSET ( 0x00000308U )
#define TRX_SYS_CSR_ISYNC_INC_PRE_OFFSET ( 0x0000030cU )
#define TRX_SYS_CSR_ISYNC_CNT_ADJ_OFFSET ( 0x00000310U )
#define TRX_SYS_CSR_ISYNC_BFN_CNT_SYNC_OFFSET ( 0x00000314U )
#define TRX_SYS_CSR_ISYNC_BFN_CNT_OFFSET ( 0x00000318U )
#define TRX_SYS_CSR_BFNE_CFG0_OFFSET ( 0x00000400U )
#define TRX_SYS_CSR_BFNE_CFG1_OFFSET ( 0x00000404U )
#define TRX_SYS_CSR_BFNE_CFG2_OFFSET ( 0x00000408U )
#define TRX_SYS_CSR_BFNE_CFG3_OFFSET ( 0x0000040cU )
#define TRX_SYS_CSR_BFNE_CFG4_OFFSET ( 0x00000410U )
#define TRX_SYS_CSR_BFNE_CFG5_OFFSET ( 0x00000414U )
#define TRX_SYS_CSR_BFNE_CFG6_OFFSET ( 0x00000418U )
#define TRX_SYS_CSR_BFNE_CFG7_OFFSET ( 0x0000041cU )
#define TRX_SYS_CSR_BFNE_CFG8_OFFSET ( 0x00000420U )
#define TRX_SYS_CSR_BFNE_CFG9_OFFSET ( 0x00000424U )
#define TRX_SYS_CSR_BFNE_CFG10_OFFSET ( 0x00000428U )
#define TRX_SYS_CSR_BFNE_INCR0_OFFSET ( 0x00000440U )
#define TRX_SYS_CSR_BFNE_INCR1_OFFSET ( 0x00000444U )
#define TRX_SYS_CSR_BFNE_INCR2_OFFSET ( 0x00000448U )
#define TRX_SYS_CSR_BFNE_INCR3_OFFSET ( 0x0000044cU )
#define TRX_SYS_CSR_BFNE_INCR4_OFFSET ( 0x00000450U )
#define TRX_SYS_CSR_BFNE_INCR5_OFFSET ( 0x00000454U )
#define TRX_SYS_CSR_BFNE_INCR6_OFFSET ( 0x00000458U )
#define TRX_SYS_CSR_BFNE_INCR7_OFFSET ( 0x0000045cU )
#define TRX_SYS_CSR_BFNE_INCR8_OFFSET ( 0x00000460U )
#define TRX_SYS_CSR_BFNE_INCR9_OFFSET ( 0x00000464U )
#define TRX_SYS_CSR_BFNE_INCR10_OFFSET ( 0x00000468U )
#define TRX_SYS_CSR_BFNE_START0_OFFSET ( 0x00000480U )
#define TRX_SYS_CSR_BFNE_START1_OFFSET ( 0x00000484U )
#define TRX_SYS_CSR_BFNE_START2_OFFSET ( 0x00000488U )
#define TRX_SYS_CSR_BFNE_START3_OFFSET ( 0x0000048cU )
#define TRX_SYS_CSR_BFNE_START4_OFFSET ( 0x00000490U )
#define TRX_SYS_CSR_BFNE_START5_OFFSET ( 0x00000494U )
#define TRX_SYS_CSR_BFNE_START6_OFFSET ( 0x00000498U )
#define TRX_SYS_CSR_BFNE_START7_OFFSET ( 0x0000049cU )
#define TRX_SYS_CSR_BFNE_START8_OFFSET ( 0x000004a0U )
#define TRX_SYS_CSR_BFNE_START9_OFFSET ( 0x000004a4U )
#define TRX_SYS_CSR_BFNE_START10_OFFSET ( 0x000004a8U )
#define TRX_SYS_CSR_BFNE_STAT0_OFFSET ( 0x000004c0U )
#define TRX_SYS_CSR_BFNE_STAT1_OFFSET ( 0x000004c4U )
#define TRX_SYS_CSR_BFNE_STAT2_OFFSET ( 0x000004c8U )
#define TRX_SYS_CSR_BFNE_STAT3_OFFSET ( 0x000004ccU )
#define TRX_SYS_CSR_BFNE_STAT4_OFFSET ( 0x000004d0U )
#define TRX_SYS_CSR_BFNE_STAT5_OFFSET ( 0x000004d4U )
#define TRX_SYS_CSR_BFNE_STAT6_OFFSET ( 0x000004d8U )
#define TRX_SYS_CSR_BFNE_STAT7_OFFSET ( 0x000004dcU )
#define TRX_SYS_CSR_BFNE_STAT8_OFFSET ( 0x000004e0U )
#define TRX_SYS_CSR_BFNE_STAT9_OFFSET ( 0x000004e4U )
#define TRX_SYS_CSR_BFNE_STAT10_OFFSET ( 0x000004e8U )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define TRX_SYS_CSR_TRX_RATE_CFG_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_TRX_RATE_CFG_OFFSET ) ))
#define TRX_SYS_CSR_TX_INT_HI_AGGR_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_TX_INT_HI_AGGR_OFFSET ) ))
#define TRX_SYS_CSR_TX_INT_LO_AGGR_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_TX_INT_LO_AGGR_OFFSET ) ))
#define TRX_SYS_CSR_RX_CAPMUX_SEL_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_RX_CAPMUX_SEL_OFFSET ) ))
#define TRX_SYS_CSR_RX_INT_HI_AGGR_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_RX_INT_HI_AGGR_OFFSET ) ))
#define TRX_SYS_CSR_RX_INT_LO_AGGR_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_RX_INT_LO_AGGR_OFFSET ) ))
#define TRX_SYS_CSR_TX_INSERT0_SRC0_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_TX_INSERT0_SRC0_OFFSET ) ))
#define TRX_SYS_CSR_TX_INSERT0_SRC1_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_TX_INSERT0_SRC1_OFFSET ) ))
#define TRX_SYS_CSR_TX_INSERT1_SRC0_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_TX_INSERT1_SRC0_OFFSET ) ))
#define TRX_SYS_CSR_TX_INSERT1_SRC1_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_TX_INSERT1_SRC1_OFFSET ) ))
#define TRX_SYS_CSR_TX_INSERT_VALSRC_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_TX_INSERT_VALSRC_OFFSET ) ))
#define TRX_SYS_CSR_TX_INSERT0_CFG_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_TX_INSERT0_CFG_OFFSET ) ))
#define TRX_SYS_CSR_TX_INSERT1_CFG_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_TX_INSERT1_CFG_OFFSET ) ))
#define TRX_SYS_CSR_TX_ALARM0_FORCE_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_TX_ALARM0_FORCE_OFFSET ) ))
#define TRX_SYS_CSR_TX_ALARM0_MASK_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_TX_ALARM0_MASK_OFFSET ) ))
#define TRX_SYS_CSR_TX_ALARM0_STAT_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_TX_ALARM0_STAT_OFFSET ) ))
#define TRX_SYS_CSR_TX_ALARM0_STICKY_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_TX_ALARM0_STICKY_OFFSET ) ))
#define TRX_SYS_CSR_TX_ALARM0_ETIMER_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_TX_ALARM0_ETIMER_OFFSET ) ))
#define TRX_SYS_CSR_TX_ALARM0_PNTIMER_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_TX_ALARM0_PNTIMER_OFFSET ) ))
#define TRX_SYS_CSR_TX_ALARM1_FORCE_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_TX_ALARM1_FORCE_OFFSET ) ))
#define TRX_SYS_CSR_TX_ALARM1_MASK_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_TX_ALARM1_MASK_OFFSET ) ))
#define TRX_SYS_CSR_TX_ALARM1_STAT_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_TX_ALARM1_STAT_OFFSET ) ))
#define TRX_SYS_CSR_TX_ALARM1_STICKY_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_TX_ALARM1_STICKY_OFFSET ) ))
#define TRX_SYS_CSR_TX_ALARM1_ETIMER_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_TX_ALARM1_ETIMER_OFFSET ) ))
#define TRX_SYS_CSR_TX_ALARM1_PNTIMER_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_TX_ALARM1_PNTIMER_OFFSET ) ))
#define TRX_SYS_CSR_CVA_CS0_I_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_CVA_CS0_I_OFFSET ) ))
#define TRX_SYS_CSR_CVA_CS0_Q_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_CVA_CS0_Q_OFFSET ) ))
#define TRX_SYS_CSR_CVA_CS1_I_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_CVA_CS1_I_OFFSET ) ))
#define TRX_SYS_CSR_CVA_CS1_Q_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_CVA_CS1_Q_OFFSET ) ))
#define TRX_SYS_CSR_CVA_ERR_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_CVA_ERR_OFFSET ) ))
#define TRX_SYS_CSR_CVA_CFG_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_CVA_CFG_OFFSET ) ))
#define TRX_SYS_CSR_MOD_AC_CAL_ENA_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_MOD_AC_CAL_ENA_OFFSET ) ))
#define TRX_SYS_CSR_MOD_CAPMUX_SEL_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_MOD_CAPMUX_SEL_OFFSET ) ))
#define TRX_SYS_CSR_DMOD_AC_CAL_ENA_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_DMOD_AC_CAL_ENA_OFFSET ) ))
#define TRX_SYS_CSR_TX_ALARM0_CNTER_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_TX_ALARM0_CNTER_OFFSET ) ))
#define TRX_SYS_CSR_TX_ALARM1_CNTER_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_TX_ALARM1_CNTER_OFFSET ) ))
#define TRX_SYS_CSR_DP_INIT_ENB_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_DP_INIT_ENB_OFFSET ) ))
#define TRX_SYS_CSR_DP_DONE_STAT_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_DP_DONE_STAT_OFFSET ) ))
#define TRX_SYS_CSR_TRX_INT_STAT_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_TRX_INT_STAT_OFFSET ) ))
#define TRX_SYS_CSR_TRX_INT_HI_EN_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_TRX_INT_HI_EN_OFFSET ) ))
#define TRX_SYS_CSR_TRX_INT_LO_EN_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_TRX_INT_LO_EN_OFFSET ) ))
#define TRX_SYS_CSR_TRX_INT_CLR_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_TRX_INT_CLR_OFFSET ) ))
#define TRX_SYS_CSR_TRX_INT_FORCE_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_TRX_INT_FORCE_OFFSET ) ))
#define TRX_SYS_CSR_SMON_R0_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_SMON_R0_OFFSET ) ))
#define TRX_SYS_CSR_SMON_R1_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_SMON_R1_OFFSET ) ))
#define TRX_SYS_CSR_SMON_R2_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_SMON_R2_OFFSET ) ))
#define TRX_SYS_CSR_SMON_R3_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_SMON_R3_OFFSET ) ))
#define TRX_SYS_CSR_SMON_R4_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_SMON_R4_OFFSET ) ))
#define TRX_SYS_CSR_SMON_R5_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_SMON_R5_OFFSET ) ))
#define TRX_SYS_CSR_SMON_R6_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_SMON_R6_OFFSET ) ))
#define TRX_SYS_CSR_SMON_R7_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_SMON_R7_OFFSET ) ))
#define TRX_SYS_CSR_APB_BRDG_STAT_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_APB_BRDG_STAT_OFFSET ) ))
#define TRX_SYS_CSR_ISYNC_CTRL_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_ISYNC_CTRL_OFFSET ) ))
#define TRX_SYS_CSR_ISYNC_LCNT_INC_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_ISYNC_LCNT_INC_OFFSET ) ))
#define TRX_SYS_CSR_ISYNC_TEN_MS_CNT_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_ISYNC_TEN_MS_CNT_OFFSET ) ))
#define TRX_SYS_CSR_ISYNC_INC_PRE_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_ISYNC_INC_PRE_OFFSET ) ))
#define TRX_SYS_CSR_ISYNC_CNT_ADJ_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_ISYNC_CNT_ADJ_OFFSET ) ))
#define TRX_SYS_CSR_ISYNC_BFN_CNT_SYNC_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_ISYNC_BFN_CNT_SYNC_OFFSET ) ))
#define TRX_SYS_CSR_ISYNC_BFN_CNT_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_ISYNC_BFN_CNT_OFFSET ) ))
#define TRX_SYS_CSR_BFNE_CFG0_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_BFNE_CFG0_OFFSET ) ))
#define TRX_SYS_CSR_BFNE_CFG1_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_BFNE_CFG1_OFFSET ) ))
#define TRX_SYS_CSR_BFNE_CFG2_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_BFNE_CFG2_OFFSET ) ))
#define TRX_SYS_CSR_BFNE_CFG3_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_BFNE_CFG3_OFFSET ) ))
#define TRX_SYS_CSR_BFNE_CFG4_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_BFNE_CFG4_OFFSET ) ))
#define TRX_SYS_CSR_BFNE_CFG5_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_BFNE_CFG5_OFFSET ) ))
#define TRX_SYS_CSR_BFNE_CFG6_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_BFNE_CFG6_OFFSET ) ))
#define TRX_SYS_CSR_BFNE_CFG7_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_BFNE_CFG7_OFFSET ) ))
#define TRX_SYS_CSR_BFNE_CFG8_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_BFNE_CFG8_OFFSET ) ))
#define TRX_SYS_CSR_BFNE_CFG9_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_BFNE_CFG9_OFFSET ) ))
#define TRX_SYS_CSR_BFNE_CFG10_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_BFNE_CFG10_OFFSET ) ))
#define TRX_SYS_CSR_BFNE_INCR0_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_BFNE_INCR0_OFFSET ) ))
#define TRX_SYS_CSR_BFNE_INCR1_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_BFNE_INCR1_OFFSET ) ))
#define TRX_SYS_CSR_BFNE_INCR2_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_BFNE_INCR2_OFFSET ) ))
#define TRX_SYS_CSR_BFNE_INCR3_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_BFNE_INCR3_OFFSET ) ))
#define TRX_SYS_CSR_BFNE_INCR4_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_BFNE_INCR4_OFFSET ) ))
#define TRX_SYS_CSR_BFNE_INCR5_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_BFNE_INCR5_OFFSET ) ))
#define TRX_SYS_CSR_BFNE_INCR6_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_BFNE_INCR6_OFFSET ) ))
#define TRX_SYS_CSR_BFNE_INCR7_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_BFNE_INCR7_OFFSET ) ))
#define TRX_SYS_CSR_BFNE_INCR8_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_BFNE_INCR8_OFFSET ) ))
#define TRX_SYS_CSR_BFNE_INCR9_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_BFNE_INCR9_OFFSET ) ))
#define TRX_SYS_CSR_BFNE_INCR10_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_BFNE_INCR10_OFFSET ) ))
#define TRX_SYS_CSR_BFNE_START0_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_BFNE_START0_OFFSET ) ))
#define TRX_SYS_CSR_BFNE_START1_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_BFNE_START1_OFFSET ) ))
#define TRX_SYS_CSR_BFNE_START2_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_BFNE_START2_OFFSET ) ))
#define TRX_SYS_CSR_BFNE_START3_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_BFNE_START3_OFFSET ) ))
#define TRX_SYS_CSR_BFNE_START4_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_BFNE_START4_OFFSET ) ))
#define TRX_SYS_CSR_BFNE_START5_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_BFNE_START5_OFFSET ) ))
#define TRX_SYS_CSR_BFNE_START6_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_BFNE_START6_OFFSET ) ))
#define TRX_SYS_CSR_BFNE_START7_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_BFNE_START7_OFFSET ) ))
#define TRX_SYS_CSR_BFNE_START8_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_BFNE_START8_OFFSET ) ))
#define TRX_SYS_CSR_BFNE_START9_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_BFNE_START9_OFFSET ) ))
#define TRX_SYS_CSR_BFNE_START10_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_BFNE_START10_OFFSET ) ))
#define TRX_SYS_CSR_BFNE_STAT0_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_BFNE_STAT0_OFFSET ) ))
#define TRX_SYS_CSR_BFNE_STAT1_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_BFNE_STAT1_OFFSET ) ))
#define TRX_SYS_CSR_BFNE_STAT2_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_BFNE_STAT2_OFFSET ) ))
#define TRX_SYS_CSR_BFNE_STAT3_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_BFNE_STAT3_OFFSET ) ))
#define TRX_SYS_CSR_BFNE_STAT4_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_BFNE_STAT4_OFFSET ) ))
#define TRX_SYS_CSR_BFNE_STAT5_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_BFNE_STAT5_OFFSET ) ))
#define TRX_SYS_CSR_BFNE_STAT6_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_BFNE_STAT6_OFFSET ) ))
#define TRX_SYS_CSR_BFNE_STAT7_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_BFNE_STAT7_OFFSET ) ))
#define TRX_SYS_CSR_BFNE_STAT8_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_BFNE_STAT8_OFFSET ) ))
#define TRX_SYS_CSR_BFNE_STAT9_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_BFNE_STAT9_OFFSET ) ))
#define TRX_SYS_CSR_BFNE_STAT10_ADR(_BASE) (( ( _BASE ) + ( TRX_SYS_CSR_BFNE_STAT10_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief TRX_SYS_CSR_CSR_MAP_TRX_RATE_CONFIG register description at address offset 0x0
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/TRX_RATE_CONFIG
  * TRX Rate Configuration
  */

typedef union {
  struct {
    uint32_t DRF_CLK_RATE : 1;
    ///< DRF Subsystem Clock Frequency Select. 0: DRF Subsystem core clock
    ///< frequency is set to 983M  clock rate - Default 1: DRF Subsystem core
    ///< clock frequency is set to 1.474G clock rate DRF Clock Rate is consumed
    ///< by TRX_SYS RX and TX channel IP's and TX Insert Zero Feed
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
    uint32_t RX_SYS_RATE : 5;
    ///< This field controls the system sampling rate for RX Channel. This
    ///< control and DRF_CLK_RATE bit affect data pattern on RX Sample Interface.
    ///< The numbers of clock cycles, N/M, are based on clock rates 983Mhz
    ///< /1.474Ghz, configured by DRF_CLK_RATE bit.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RX_ANT_RATE : 3;
    ///< RX Antenna Rate.
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t TX_SYS_RATE : 5;
    ///< This field controls the system sampling rate for TX Channel. This
    ///< control and DRF_CLK_RATE bit affects data pattern on TX Sample Interface.
    ///< The numbers of clock cycles, N/M, are based on clock rates 983Mhz
    ///< /1.474Ghz, configured by DRF_CLK_RATE bit.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t TX_ANT_RATE : 3;
    ///< RX Antenna Rate.
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} trx_sys_csr_trx_rate_cfg_reg_t;

#define TRX_SYS_CSR_TRX_RATE_CFG_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_TRX_RATE_CFG_RD_MASK (0x000ffff1U)
#define TRX_SYS_CSR_TRX_RATE_CFG_WR_MASK (0x000ffff1U)


///< DRF Subsystem Clock Frequency Select. 0: DRF Subsystem core clock
///< frequency is set to 983M  clock rate - Default 1: DRF Subsystem core
///< clock frequency is set to 1.474G clock rate DRF Clock Rate is consumed
///< by TRX_SYS RX and TX channel IP's and TX Insert Zero Feed
#define TRX_SYS_CSR_TRX_RATE_CFG_DRF_CLK_RATE_BF_OFF ( 0)
#define TRX_SYS_CSR_TRX_RATE_CFG_DRF_CLK_RATE_BF_WID ( 1)
#define TRX_SYS_CSR_TRX_RATE_CFG_DRF_CLK_RATE_BF_MSK (0x00000001)
#define TRX_SYS_CSR_TRX_RATE_CFG_DRF_CLK_RATE_BF_DEF (0x00000000)

///< This field controls the system sampling rate for RX Channel. This
///< control and DRF_CLK_RATE bit affect data pattern on RX Sample Interface.
///< The numbers of clock cycles, N/M, are based on clock rates 983Mhz
///< /1.474Ghz, configured by DRF_CLK_RATE bit.
#define TRX_SYS_CSR_TRX_RATE_CFG_RX_SYS_RATE_BF_OFF ( 4)
#define TRX_SYS_CSR_TRX_RATE_CFG_RX_SYS_RATE_BF_WID ( 5)
#define TRX_SYS_CSR_TRX_RATE_CFG_RX_SYS_RATE_BF_MSK (0x000001F0)
#define TRX_SYS_CSR_TRX_RATE_CFG_RX_SYS_RATE_BF_DEF (0x00000000)

///< RX Antenna Rate.
#define TRX_SYS_CSR_TRX_RATE_CFG_RX_ANT_RATE_BF_OFF ( 9)
#define TRX_SYS_CSR_TRX_RATE_CFG_RX_ANT_RATE_BF_WID ( 3)
#define TRX_SYS_CSR_TRX_RATE_CFG_RX_ANT_RATE_BF_MSK (0x00000E00)
#define TRX_SYS_CSR_TRX_RATE_CFG_RX_ANT_RATE_BF_DEF (0x00000000)

///< This field controls the system sampling rate for TX Channel. This
///< control and DRF_CLK_RATE bit affects data pattern on TX Sample Interface.
///< The numbers of clock cycles, N/M, are based on clock rates 983Mhz
///< /1.474Ghz, configured by DRF_CLK_RATE bit.
#define TRX_SYS_CSR_TRX_RATE_CFG_TX_SYS_RATE_BF_OFF (12)
#define TRX_SYS_CSR_TRX_RATE_CFG_TX_SYS_RATE_BF_WID ( 5)
#define TRX_SYS_CSR_TRX_RATE_CFG_TX_SYS_RATE_BF_MSK (0x0001F000)
#define TRX_SYS_CSR_TRX_RATE_CFG_TX_SYS_RATE_BF_DEF (0x00000000)

///< RX Antenna Rate.
#define TRX_SYS_CSR_TRX_RATE_CFG_TX_ANT_RATE_BF_OFF (17)
#define TRX_SYS_CSR_TRX_RATE_CFG_TX_ANT_RATE_BF_WID ( 3)
#define TRX_SYS_CSR_TRX_RATE_CFG_TX_ANT_RATE_BF_MSK (0x000E0000)
#define TRX_SYS_CSR_TRX_RATE_CFG_TX_ANT_RATE_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_TX_INT_HI_AGGR register description at address offset 0x4
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/TX_INT_HI_AGGR
  * TX HI Interrupt Aggregation
  */

typedef union {
  struct {
    uint32_t TXG0_INT : 1;
    ///< TXG0 High Interrupt.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t TXG1_INT : 1;
    ///< TXG1 High Interrupt.
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t TXSR0_INT : 1;
    ///< TXSR0 High Interrupt.
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t TXSR1_INT : 1;
    ///< TXSR1 High Interrupt.
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} trx_sys_csr_tx_int_hi_aggr_reg_t;

#define TRX_SYS_CSR_TX_INT_HI_AGGR_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_TX_INT_HI_AGGR_RD_MASK (0x0000000fU)
#define TRX_SYS_CSR_TX_INT_HI_AGGR_WR_MASK (0x00000000U)


///< TXG0 High Interrupt.
#define TRX_SYS_CSR_TX_INT_HI_AGGR_TXG0_INT_BF_OFF ( 0)
#define TRX_SYS_CSR_TX_INT_HI_AGGR_TXG0_INT_BF_WID ( 1)
#define TRX_SYS_CSR_TX_INT_HI_AGGR_TXG0_INT_BF_MSK (0x00000001)
#define TRX_SYS_CSR_TX_INT_HI_AGGR_TXG0_INT_BF_DEF (0x00000000)

///< TXG1 High Interrupt.
#define TRX_SYS_CSR_TX_INT_HI_AGGR_TXG1_INT_BF_OFF ( 1)
#define TRX_SYS_CSR_TX_INT_HI_AGGR_TXG1_INT_BF_WID ( 1)
#define TRX_SYS_CSR_TX_INT_HI_AGGR_TXG1_INT_BF_MSK (0x00000002)
#define TRX_SYS_CSR_TX_INT_HI_AGGR_TXG1_INT_BF_DEF (0x00000000)

///< TXSR0 High Interrupt.
#define TRX_SYS_CSR_TX_INT_HI_AGGR_TXSR0_INT_BF_OFF ( 2)
#define TRX_SYS_CSR_TX_INT_HI_AGGR_TXSR0_INT_BF_WID ( 1)
#define TRX_SYS_CSR_TX_INT_HI_AGGR_TXSR0_INT_BF_MSK (0x00000004)
#define TRX_SYS_CSR_TX_INT_HI_AGGR_TXSR0_INT_BF_DEF (0x00000000)

///< TXSR1 High Interrupt.
#define TRX_SYS_CSR_TX_INT_HI_AGGR_TXSR1_INT_BF_OFF ( 3)
#define TRX_SYS_CSR_TX_INT_HI_AGGR_TXSR1_INT_BF_WID ( 1)
#define TRX_SYS_CSR_TX_INT_HI_AGGR_TXSR1_INT_BF_MSK (0x00000008)
#define TRX_SYS_CSR_TX_INT_HI_AGGR_TXSR1_INT_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_TX_INT_LO_AGGR register description at address offset 0x8
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/TX_INT_LO_AGGR
  * TX LO Interrupt Aggregation
  */

typedef union {
  struct {
    uint32_t TXG0_INT : 1;
    ///< TXG0 Low Interrupt.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t TXG1_INT : 1;
    ///< TXG1 Low Interrupt.
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t TXSR0_INT : 1;
    ///< TXSR0 Low Interrupt.
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t TXSR1_INT : 1;
    ///< TXSR1 Low Interrupt.
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} trx_sys_csr_tx_int_lo_aggr_reg_t;

#define TRX_SYS_CSR_TX_INT_LO_AGGR_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_TX_INT_LO_AGGR_RD_MASK (0x0000000fU)
#define TRX_SYS_CSR_TX_INT_LO_AGGR_WR_MASK (0x00000000U)


///< TXG0 Low Interrupt.
#define TRX_SYS_CSR_TX_INT_LO_AGGR_TXG0_INT_BF_OFF ( 0)
#define TRX_SYS_CSR_TX_INT_LO_AGGR_TXG0_INT_BF_WID ( 1)
#define TRX_SYS_CSR_TX_INT_LO_AGGR_TXG0_INT_BF_MSK (0x00000001)
#define TRX_SYS_CSR_TX_INT_LO_AGGR_TXG0_INT_BF_DEF (0x00000000)

///< TXG1 Low Interrupt.
#define TRX_SYS_CSR_TX_INT_LO_AGGR_TXG1_INT_BF_OFF ( 1)
#define TRX_SYS_CSR_TX_INT_LO_AGGR_TXG1_INT_BF_WID ( 1)
#define TRX_SYS_CSR_TX_INT_LO_AGGR_TXG1_INT_BF_MSK (0x00000002)
#define TRX_SYS_CSR_TX_INT_LO_AGGR_TXG1_INT_BF_DEF (0x00000000)

///< TXSR0 Low Interrupt.
#define TRX_SYS_CSR_TX_INT_LO_AGGR_TXSR0_INT_BF_OFF ( 2)
#define TRX_SYS_CSR_TX_INT_LO_AGGR_TXSR0_INT_BF_WID ( 1)
#define TRX_SYS_CSR_TX_INT_LO_AGGR_TXSR0_INT_BF_MSK (0x00000004)
#define TRX_SYS_CSR_TX_INT_LO_AGGR_TXSR0_INT_BF_DEF (0x00000000)

///< TXSR1 Low Interrupt.
#define TRX_SYS_CSR_TX_INT_LO_AGGR_TXSR1_INT_BF_OFF ( 3)
#define TRX_SYS_CSR_TX_INT_LO_AGGR_TXSR1_INT_BF_WID ( 1)
#define TRX_SYS_CSR_TX_INT_LO_AGGR_TXSR1_INT_BF_MSK (0x00000008)
#define TRX_SYS_CSR_TX_INT_LO_AGGR_TXSR1_INT_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_RX_CAPMUX_SELECT register description at address offset 0x14
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/RX_CAPMUX_SELECT
  * RX Capture Mux Select
  */

typedef union {
  struct {
    uint32_t RX_CAPMUX0 : 2;
    ///< RX Capture Mux #0 Source Select. 0: Select data from RXG0 1: Select
    ///< data from RXG1 2: Select pass-through rx capture data from test_mux
    ///< input 0 3: Select all-zero data and valid
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
    uint32_t RX_CAPMUX1 : 2;
    ///< RX Capture Mux #1 Source Select. 0: Select data from RXG 0 1: Select
    ///< data from RXG 1 2: Select pass-through rx capture data from test_mux
    ///< input 1 3: Select all-zero data and valid
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} trx_sys_csr_rx_capmux_sel_reg_t;

#define TRX_SYS_CSR_RX_CAPMUX_SEL_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_RX_CAPMUX_SEL_RD_MASK (0x00000033U)
#define TRX_SYS_CSR_RX_CAPMUX_SEL_WR_MASK (0x00000033U)


///< RX Capture Mux #0 Source Select. 0: Select data from RXG0 1: Select
///< data from RXG1 2: Select pass-through rx capture data from test_mux
///< input 0 3: Select all-zero data and valid
#define TRX_SYS_CSR_RX_CAPMUX_SEL_RX_CAPMUX0_BF_OFF ( 0)
#define TRX_SYS_CSR_RX_CAPMUX_SEL_RX_CAPMUX0_BF_WID ( 2)
#define TRX_SYS_CSR_RX_CAPMUX_SEL_RX_CAPMUX0_BF_MSK (0x00000003)
#define TRX_SYS_CSR_RX_CAPMUX_SEL_RX_CAPMUX0_BF_DEF (0x00000000)

///< RX Capture Mux #1 Source Select. 0: Select data from RXG 0 1: Select
///< data from RXG 1 2: Select pass-through rx capture data from test_mux
///< input 1 3: Select all-zero data and valid
#define TRX_SYS_CSR_RX_CAPMUX_SEL_RX_CAPMUX1_BF_OFF ( 4)
#define TRX_SYS_CSR_RX_CAPMUX_SEL_RX_CAPMUX1_BF_WID ( 2)
#define TRX_SYS_CSR_RX_CAPMUX_SEL_RX_CAPMUX1_BF_MSK (0x00000030)
#define TRX_SYS_CSR_RX_CAPMUX_SEL_RX_CAPMUX1_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_RX_INT_HI_AGGR register description at address offset 0x18
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/RX_INT_HI_AGGR
  * RX HI Interrupt Aggregation
  */

typedef union {
  struct {
    uint32_t RXG0_INT : 1;
    ///< RXG0 High Interrupt.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RXG1_INT : 1;
    ///< RXG1 High Interrupt.
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} trx_sys_csr_rx_int_hi_aggr_reg_t;

#define TRX_SYS_CSR_RX_INT_HI_AGGR_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_RX_INT_HI_AGGR_RD_MASK (0x00000003U)
#define TRX_SYS_CSR_RX_INT_HI_AGGR_WR_MASK (0x00000000U)


///< RXG0 High Interrupt.
#define TRX_SYS_CSR_RX_INT_HI_AGGR_RXG0_INT_BF_OFF ( 0)
#define TRX_SYS_CSR_RX_INT_HI_AGGR_RXG0_INT_BF_WID ( 1)
#define TRX_SYS_CSR_RX_INT_HI_AGGR_RXG0_INT_BF_MSK (0x00000001)
#define TRX_SYS_CSR_RX_INT_HI_AGGR_RXG0_INT_BF_DEF (0x00000000)

///< RXG1 High Interrupt.
#define TRX_SYS_CSR_RX_INT_HI_AGGR_RXG1_INT_BF_OFF ( 1)
#define TRX_SYS_CSR_RX_INT_HI_AGGR_RXG1_INT_BF_WID ( 1)
#define TRX_SYS_CSR_RX_INT_HI_AGGR_RXG1_INT_BF_MSK (0x00000002)
#define TRX_SYS_CSR_RX_INT_HI_AGGR_RXG1_INT_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_RX_INT_LO_AGGR register description at address offset 0x1c
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/RX_INT_LO_AGGR
  * RX LO Interrupt Aggregation
  */

typedef union {
  struct {
    uint32_t RXG0_INT : 1;
    ///< RXG0 Low Interrupt.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RXG1_INT : 1;
    ///< RXG1 Low Interrupt.
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} trx_sys_csr_rx_int_lo_aggr_reg_t;

#define TRX_SYS_CSR_RX_INT_LO_AGGR_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_RX_INT_LO_AGGR_RD_MASK (0x00000003U)
#define TRX_SYS_CSR_RX_INT_LO_AGGR_WR_MASK (0x00000000U)


///< RXG0 Low Interrupt.
#define TRX_SYS_CSR_RX_INT_LO_AGGR_RXG0_INT_BF_OFF ( 0)
#define TRX_SYS_CSR_RX_INT_LO_AGGR_RXG0_INT_BF_WID ( 1)
#define TRX_SYS_CSR_RX_INT_LO_AGGR_RXG0_INT_BF_MSK (0x00000001)
#define TRX_SYS_CSR_RX_INT_LO_AGGR_RXG0_INT_BF_DEF (0x00000000)

///< RXG1 Low Interrupt.
#define TRX_SYS_CSR_RX_INT_LO_AGGR_RXG1_INT_BF_OFF ( 1)
#define TRX_SYS_CSR_RX_INT_LO_AGGR_RXG1_INT_BF_WID ( 1)
#define TRX_SYS_CSR_RX_INT_LO_AGGR_RXG1_INT_BF_MSK (0x00000002)
#define TRX_SYS_CSR_RX_INT_LO_AGGR_RXG1_INT_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_TX_INSERT0_SRC0 register description at address offset 0x20
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/TX_INSERT0_SRC0
  * TX Insert Mux 0 Select Data Source 0
  */

typedef union {
  struct {
    uint32_t SOURCE_SELECT : 2;
    ///< TX Insert Mux Source Select. 0: Select data from V2D to DUC0 input
    ///< 1: Select pass-through tx insert data from test_tx_ins  input  2:
    ///< Select pass-through tx insert data from mem_tx_ins_0 input 3: Select
    ///< pass-through tx insert data from mem_tx_ins_1 input
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} trx_sys_csr_tx_insert0_src0_reg_t;

#define TRX_SYS_CSR_TX_INSERT0_SRC0_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_TX_INSERT0_SRC0_RD_MASK (0x00000003U)
#define TRX_SYS_CSR_TX_INSERT0_SRC0_WR_MASK (0x00000003U)


///< TX Insert Mux Source Select. 0: Select data from V2D to DUC0 input
///< 1: Select pass-through tx insert data from test_tx_ins  input  2:
///< Select pass-through tx insert data from mem_tx_ins_0 input 3: Select
///< pass-through tx insert data from mem_tx_ins_1 input
#define TRX_SYS_CSR_TX_INSERT0_SRC0_SOURCE_SEL_BF_OFF ( 0)
#define TRX_SYS_CSR_TX_INSERT0_SRC0_SOURCE_SEL_BF_WID ( 2)
#define TRX_SYS_CSR_TX_INSERT0_SRC0_SOURCE_SEL_BF_MSK (0x00000003)
#define TRX_SYS_CSR_TX_INSERT0_SRC0_SOURCE_SEL_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_TX_INSERT0_SRC1 register description at address offset 0x24
  *
  * Register default value:        0x00000001
  * Register full path in IP: trx_sys_csr/CSR_MAP/TX_INSERT0_SRC1
  * TX Insert Mux 0 Select Data Source 1
  */

typedef union {
  struct {
    uint32_t SOURCE_SELECT : 2;
    ///< TX Insert Mux Source Select. 0: Select data from V2D to DUC0 input
    ///< 1: Select pass-through tx insert data from test_tx_ins  input  2:
    ///< Select pass-through tx insert data from mem_tx_ins_0 input 3: Select
    ///< pass-through tx insert data from mem_tx_ins_1 input
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} trx_sys_csr_tx_insert0_src1_reg_t;

#define TRX_SYS_CSR_TX_INSERT0_SRC1_DEFAULT (0x00000001U)
#define TRX_SYS_CSR_TX_INSERT0_SRC1_RD_MASK (0x00000003U)
#define TRX_SYS_CSR_TX_INSERT0_SRC1_WR_MASK (0x00000003U)


///< TX Insert Mux Source Select. 0: Select data from V2D to DUC0 input
///< 1: Select pass-through tx insert data from test_tx_ins  input  2:
///< Select pass-through tx insert data from mem_tx_ins_0 input 3: Select
///< pass-through tx insert data from mem_tx_ins_1 input
#define TRX_SYS_CSR_TX_INSERT0_SRC1_SOURCE_SEL_BF_OFF ( 0)
#define TRX_SYS_CSR_TX_INSERT0_SRC1_SOURCE_SEL_BF_WID ( 2)
#define TRX_SYS_CSR_TX_INSERT0_SRC1_SOURCE_SEL_BF_MSK (0x00000003)
#define TRX_SYS_CSR_TX_INSERT0_SRC1_SOURCE_SEL_BF_DEF (0x00000001)


/** @brief TRX_SYS_CSR_CSR_MAP_TX_INSERT1_SRC0 register description at address offset 0x28
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/TX_INSERT1_SRC0
  * TX Insert Mux 1 Select Data Source 0
  */

typedef union {
  struct {
    uint32_t SOURCE_SELECT : 2;
    ///< TX Insert Mux Source Select. 0: Select data from V2D to DUC1 input
    ///< 1: Select pass-through tx insert data from test_tx_ins  input  2:
    ///< Select pass-through tx insert data from mem_tx_ins_0 input 3: Select
    ///< pass-through tx insert data from mem_tx_ins_1 input
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} trx_sys_csr_tx_insert1_src0_reg_t;

#define TRX_SYS_CSR_TX_INSERT1_SRC0_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_TX_INSERT1_SRC0_RD_MASK (0x00000003U)
#define TRX_SYS_CSR_TX_INSERT1_SRC0_WR_MASK (0x00000003U)


///< TX Insert Mux Source Select. 0: Select data from V2D to DUC1 input
///< 1: Select pass-through tx insert data from test_tx_ins  input  2:
///< Select pass-through tx insert data from mem_tx_ins_0 input 3: Select
///< pass-through tx insert data from mem_tx_ins_1 input
#define TRX_SYS_CSR_TX_INSERT1_SRC0_SOURCE_SEL_BF_OFF ( 0)
#define TRX_SYS_CSR_TX_INSERT1_SRC0_SOURCE_SEL_BF_WID ( 2)
#define TRX_SYS_CSR_TX_INSERT1_SRC0_SOURCE_SEL_BF_MSK (0x00000003)
#define TRX_SYS_CSR_TX_INSERT1_SRC0_SOURCE_SEL_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_TX_INSERT1_SRC1 register description at address offset 0x2c
  *
  * Register default value:        0x00000001
  * Register full path in IP: trx_sys_csr/CSR_MAP/TX_INSERT1_SRC1
  * TX Insert Mux 1 Select Data Source 1
  */

typedef union {
  struct {
    uint32_t SOURCE_SELECT : 2;
    ///< TX Insert Mux Source Select. 0: Select data from V2D to DUC1 input
    ///< 1: Select pass-through tx insert data from test_tx_ins  input  2:
    ///< Select pass-through tx insert data from mem_tx_ins_0 input 3: Select
    ///< pass-through tx insert data from mem_tx_ins_1 input
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} trx_sys_csr_tx_insert1_src1_reg_t;

#define TRX_SYS_CSR_TX_INSERT1_SRC1_DEFAULT (0x00000001U)
#define TRX_SYS_CSR_TX_INSERT1_SRC1_RD_MASK (0x00000003U)
#define TRX_SYS_CSR_TX_INSERT1_SRC1_WR_MASK (0x00000003U)


///< TX Insert Mux Source Select. 0: Select data from V2D to DUC1 input
///< 1: Select pass-through tx insert data from test_tx_ins  input  2:
///< Select pass-through tx insert data from mem_tx_ins_0 input 3: Select
///< pass-through tx insert data from mem_tx_ins_1 input
#define TRX_SYS_CSR_TX_INSERT1_SRC1_SOURCE_SEL_BF_OFF ( 0)
#define TRX_SYS_CSR_TX_INSERT1_SRC1_SOURCE_SEL_BF_WID ( 2)
#define TRX_SYS_CSR_TX_INSERT1_SRC1_SOURCE_SEL_BF_MSK (0x00000003)
#define TRX_SYS_CSR_TX_INSERT1_SRC1_SOURCE_SEL_BF_DEF (0x00000001)


/** @brief TRX_SYS_CSR_CSR_MAP_TX_INSERT_VALSRC register description at address offset 0x30
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/TX_INSERT_VALSRC
  * TX Insert Select Valid Source
  */

typedef union {
  struct {
    uint32_t SOURCE_SELECT : 1;
    ///< TX Insert Select Valid Source Select.
    ///< Controls Valid source for both TX channels 0: Select TX Insert Valid
    ///< from V2D Sample Source - Default 1: Select TX Insert Valid from Zero
    ///< Feed Sample Source
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} trx_sys_csr_tx_insert_valsrc_reg_t;

#define TRX_SYS_CSR_TX_INSERT_VALSRC_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_TX_INSERT_VALSRC_RD_MASK (0x00000001U)
#define TRX_SYS_CSR_TX_INSERT_VALSRC_WR_MASK (0x00000001U)


///< TX Insert Select Valid Source Select.
///< Controls Valid source for both TX channels 0: Select TX Insert Valid
///< from V2D Sample Source - Default 1: Select TX Insert Valid from Zero
///< Feed Sample Source
#define TRX_SYS_CSR_TX_INSERT_VALSRC_SOURCE_SEL_BF_OFF ( 0)
#define TRX_SYS_CSR_TX_INSERT_VALSRC_SOURCE_SEL_BF_WID ( 1)
#define TRX_SYS_CSR_TX_INSERT_VALSRC_SOURCE_SEL_BF_MSK (0x00000001)
#define TRX_SYS_CSR_TX_INSERT_VALSRC_SOURCE_SEL_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_TX_INSERT0_CONFIG register description at address offset 0x34
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/TX_INSERT0_CONFIG
  * TX Insert Mux 0 Configuration
  */

typedef union {
  struct {
    uint32_t TX_INS_EN : 1;
    ///< TX Insert Feature Enable. V2D/ZF,TTSG,MEM0,MEM1 for V2D DigRF Non
    ///< Standalone Mode via BFN 0: TX Insert Feature Disabled - V2D/ZF Samples
    ///< in normal functional mode - Default 1: TX Insert Feature Enabled
    ///< - TX insert source selection via BFN enabled
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
    uint32_t TX_INS_MODE : 2;
    ///< TX Insert Mode Select.  0: TX Insert V2D DigRF Non Standalone Mode
    ///< via BFN - Default 1: TX Insert TTSG DigRF Standalone Mode non BFN
    ///< - Legacy Support 2: TX Insert MEM0 DigRF Standalone Mode non BFN -
    ///< Legacy Support 3: TX Insert MEM1 DigRF Standalone Mode non BFN - Legacy
    ///< Support
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} trx_sys_csr_tx_insert0_cfg_reg_t;

#define TRX_SYS_CSR_TX_INSERT0_CFG_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_TX_INSERT0_CFG_RD_MASK (0x00000031U)
#define TRX_SYS_CSR_TX_INSERT0_CFG_WR_MASK (0x00000031U)


///< TX Insert Feature Enable. V2D/ZF,TTSG,MEM0,MEM1 for V2D DigRF Non
///< Standalone Mode via BFN 0: TX Insert Feature Disabled - V2D/ZF Samples
///< in normal functional mode - Default 1: TX Insert Feature Enabled
///< - TX insert source selection via BFN enabled
#define TRX_SYS_CSR_TX_INSERT0_CFG_TX_INS_EN_BF_OFF ( 0)
#define TRX_SYS_CSR_TX_INSERT0_CFG_TX_INS_EN_BF_WID ( 1)
#define TRX_SYS_CSR_TX_INSERT0_CFG_TX_INS_EN_BF_MSK (0x00000001)
#define TRX_SYS_CSR_TX_INSERT0_CFG_TX_INS_EN_BF_DEF (0x00000000)

///< TX Insert Mode Select.  0: TX Insert V2D DigRF Non Standalone Mode
///< via BFN - Default 1: TX Insert TTSG DigRF Standalone Mode non BFN
///< - Legacy Support 2: TX Insert MEM0 DigRF Standalone Mode non BFN -
///< Legacy Support 3: TX Insert MEM1 DigRF Standalone Mode non BFN - Legacy
///< Support
#define TRX_SYS_CSR_TX_INSERT0_CFG_TX_INS_MODE_BF_OFF ( 4)
#define TRX_SYS_CSR_TX_INSERT0_CFG_TX_INS_MODE_BF_WID ( 2)
#define TRX_SYS_CSR_TX_INSERT0_CFG_TX_INS_MODE_BF_MSK (0x00000030)
#define TRX_SYS_CSR_TX_INSERT0_CFG_TX_INS_MODE_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_TX_INSERT1_CONFIG register description at address offset 0x38
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/TX_INSERT1_CONFIG
  * TX Insert Mux 1 Configuration
  */

typedef union {
  struct {
    uint32_t TX_INS_EN : 1;
    ///< TX Insert Feature Enable. V2D/ZF,TTSG,MEM0,MEM1 for V2D DigRF Non
    ///< Standalone Mode via BFN 0: TX Insert Feature Disabled - V2D/ZF Samples
    ///< in normal functional mode - Default 1: TX Insert Feature Enabled
    ///< - TX insert source selection via BFN enabled
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
    uint32_t TX_INS_MODE : 2;
    ///< TX Insert Mode Select.  0: TX Insert V2D DigRF Non Standalone Mode
    ///< via BFN - Default 1: TX Insert TTSG DigRF Standalone Mode non BFN
    ///< - Legacy Support 2: TX Insert MEM0 DigRF Standalone Mode non BFN -
    ///< Legacy Support 3: TX Insert MEM1 DigRF Standalone Mode non BFN - Legacy
    ///< Support
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} trx_sys_csr_tx_insert1_cfg_reg_t;

#define TRX_SYS_CSR_TX_INSERT1_CFG_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_TX_INSERT1_CFG_RD_MASK (0x00000031U)
#define TRX_SYS_CSR_TX_INSERT1_CFG_WR_MASK (0x00000031U)


///< TX Insert Feature Enable. V2D/ZF,TTSG,MEM0,MEM1 for V2D DigRF Non
///< Standalone Mode via BFN 0: TX Insert Feature Disabled - V2D/ZF Samples
///< in normal functional mode - Default 1: TX Insert Feature Enabled
///< - TX insert source selection via BFN enabled
#define TRX_SYS_CSR_TX_INSERT1_CFG_TX_INS_EN_BF_OFF ( 0)
#define TRX_SYS_CSR_TX_INSERT1_CFG_TX_INS_EN_BF_WID ( 1)
#define TRX_SYS_CSR_TX_INSERT1_CFG_TX_INS_EN_BF_MSK (0x00000001)
#define TRX_SYS_CSR_TX_INSERT1_CFG_TX_INS_EN_BF_DEF (0x00000000)

///< TX Insert Mode Select.  0: TX Insert V2D DigRF Non Standalone Mode
///< via BFN - Default 1: TX Insert TTSG DigRF Standalone Mode non BFN
///< - Legacy Support 2: TX Insert MEM0 DigRF Standalone Mode non BFN -
///< Legacy Support 3: TX Insert MEM1 DigRF Standalone Mode non BFN - Legacy
///< Support
#define TRX_SYS_CSR_TX_INSERT1_CFG_TX_INS_MODE_BF_OFF ( 4)
#define TRX_SYS_CSR_TX_INSERT1_CFG_TX_INS_MODE_BF_WID ( 2)
#define TRX_SYS_CSR_TX_INSERT1_CFG_TX_INS_MODE_BF_MSK (0x00000030)
#define TRX_SYS_CSR_TX_INSERT1_CFG_TX_INS_MODE_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_TX_ALARM0_FORCE register description at address offset 0x40
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/TX_ALARM0_FORCE
  * SOC TX Alarm Force Antenna 0 Configuration
  */

typedef union {
  struct {
    uint32_t FORCE_E1 : 1;
    ///< Force Merged SOC Alarm E1 to the Tri-State Merge Alarm State Machine
    ///< in TXG
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FORCE_Y1 : 1;
    ///< Force Merged SOC Alarm Y1 to the Bi-State Merge Alarm State Machine
    ///< before RCS
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
    uint32_t FORCE_V2D : 1;
    ///< Force SOC Alarm triggered by V2D
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t FORCE_VHA : 1;
    ///< Force SOC Alarm triggered by VHA
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t FORCE_VEXA : 1;
    ///< Force SOC Alarm triggered by VEX Array
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t FORCE_JESD : 1;
    ///< Force SOC Alarm triggered by JESD
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t FORCE_RPC : 1;
    ///< Force SOC Alarm triggered by RCS GPIO RPC Fatal
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t FORCE_RCS : 2;
    ///< Force SOC Alarm triggered by RCS/GPIO
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t FORCE_EVCC : 2;
    ///< Force SOC Alarm triggered by Syscon EVCC 2-bits
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t FORCE_SYSCON : 1;
    ///< Force SOC Alarm triggered by Syscon Controller/watchdog/PLL Lock
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t FORCE_SPARE : 3;
    ///< Force SOC Alarm triggered by Spare
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} trx_sys_csr_tx_alarm0_force_reg_t;

#define TRX_SYS_CSR_TX_ALARM0_FORCE_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_TX_ALARM0_FORCE_RD_MASK (0x0001fff3U)
#define TRX_SYS_CSR_TX_ALARM0_FORCE_WR_MASK (0x0001fff3U)


///< Force Merged SOC Alarm E1 to the Tri-State Merge Alarm State Machine
///< in TXG
#define TRX_SYS_CSR_TX_ALARM0_FORCE_E1_BF_OFF ( 0)
#define TRX_SYS_CSR_TX_ALARM0_FORCE_E1_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM0_FORCE_E1_BF_MSK (0x00000001)
#define TRX_SYS_CSR_TX_ALARM0_FORCE_E1_BF_DEF (0x00000000)

///< Force Merged SOC Alarm Y1 to the Bi-State Merge Alarm State Machine
///< before RCS
#define TRX_SYS_CSR_TX_ALARM0_FORCE_Y1_BF_OFF ( 1)
#define TRX_SYS_CSR_TX_ALARM0_FORCE_Y1_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM0_FORCE_Y1_BF_MSK (0x00000002)
#define TRX_SYS_CSR_TX_ALARM0_FORCE_Y1_BF_DEF (0x00000000)

///< Force SOC Alarm triggered by V2D
#define TRX_SYS_CSR_TX_ALARM0_FORCE_V2D_BF_OFF ( 4)
#define TRX_SYS_CSR_TX_ALARM0_FORCE_V2D_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM0_FORCE_V2D_BF_MSK (0x00000010)
#define TRX_SYS_CSR_TX_ALARM0_FORCE_V2D_BF_DEF (0x00000000)

///< Force SOC Alarm triggered by VHA
#define TRX_SYS_CSR_TX_ALARM0_FORCE_VHA_BF_OFF ( 5)
#define TRX_SYS_CSR_TX_ALARM0_FORCE_VHA_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM0_FORCE_VHA_BF_MSK (0x00000020)
#define TRX_SYS_CSR_TX_ALARM0_FORCE_VHA_BF_DEF (0x00000000)

///< Force SOC Alarm triggered by VEX Array
#define TRX_SYS_CSR_TX_ALARM0_FORCE_VEXA_BF_OFF ( 6)
#define TRX_SYS_CSR_TX_ALARM0_FORCE_VEXA_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM0_FORCE_VEXA_BF_MSK (0x00000040)
#define TRX_SYS_CSR_TX_ALARM0_FORCE_VEXA_BF_DEF (0x00000000)

///< Force SOC Alarm triggered by JESD
#define TRX_SYS_CSR_TX_ALARM0_FORCE_JESD_BF_OFF ( 7)
#define TRX_SYS_CSR_TX_ALARM0_FORCE_JESD_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM0_FORCE_JESD_BF_MSK (0x00000080)
#define TRX_SYS_CSR_TX_ALARM0_FORCE_JESD_BF_DEF (0x00000000)

///< Force SOC Alarm triggered by RCS GPIO RPC Fatal
#define TRX_SYS_CSR_TX_ALARM0_FORCE_RPC_BF_OFF ( 8)
#define TRX_SYS_CSR_TX_ALARM0_FORCE_RPC_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM0_FORCE_RPC_BF_MSK (0x00000100)
#define TRX_SYS_CSR_TX_ALARM0_FORCE_RPC_BF_DEF (0x00000000)

///< Force SOC Alarm triggered by RCS/GPIO
#define TRX_SYS_CSR_TX_ALARM0_FORCE_RCS_BF_OFF ( 9)
#define TRX_SYS_CSR_TX_ALARM0_FORCE_RCS_BF_WID ( 2)
#define TRX_SYS_CSR_TX_ALARM0_FORCE_RCS_BF_MSK (0x00000600)
#define TRX_SYS_CSR_TX_ALARM0_FORCE_RCS_BF_DEF (0x00000000)

///< Force SOC Alarm triggered by Syscon EVCC 2-bits
#define TRX_SYS_CSR_TX_ALARM0_FORCE_EVCC_BF_OFF (11)
#define TRX_SYS_CSR_TX_ALARM0_FORCE_EVCC_BF_WID ( 2)
#define TRX_SYS_CSR_TX_ALARM0_FORCE_EVCC_BF_MSK (0x00001800)
#define TRX_SYS_CSR_TX_ALARM0_FORCE_EVCC_BF_DEF (0x00000000)

///< Force SOC Alarm triggered by Syscon Controller/watchdog/PLL Lock
#define TRX_SYS_CSR_TX_ALARM0_FORCE_SYSCON_BF_OFF (13)
#define TRX_SYS_CSR_TX_ALARM0_FORCE_SYSCON_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM0_FORCE_SYSCON_BF_MSK (0x00002000)
#define TRX_SYS_CSR_TX_ALARM0_FORCE_SYSCON_BF_DEF (0x00000000)

///< Force SOC Alarm triggered by Spare
#define TRX_SYS_CSR_TX_ALARM0_FORCE_SPARE_BF_OFF (14)
#define TRX_SYS_CSR_TX_ALARM0_FORCE_SPARE_BF_WID ( 3)
#define TRX_SYS_CSR_TX_ALARM0_FORCE_SPARE_BF_MSK (0x0001C000)
#define TRX_SYS_CSR_TX_ALARM0_FORCE_SPARE_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_TX_ALARM0_MASK register description at address offset 0x44
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/TX_ALARM0_MASK
  * SOC TX Alarm Mask  Antenna 0 Configuration
  */

typedef union {
  struct {
    uint32_t MASK_E1 : 1;
    ///< Mask Merged SOC Alarm E1 to the Tri-State Merge Alarm State Machine
    ///< in TXG.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t MASK_Y1 : 1;
    ///< Mask Merged SOC Alarm Y1 to the Bi-State Merge Alarm State Machine
    ///< before RCS.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
    uint32_t MASK_V2D : 1;
    ///< Mask SOC Alarm triggered by V2D
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t MASK_VHA : 1;
    ///< Mask SOC Alarm triggered by VHA
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t MASK_VEXA : 1;
    ///< Mask SOC Alarm triggered by VEX Array
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t MASK_JESD : 1;
    ///< Mask SOC Alarm triggered by JESD
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t MASK_RPC : 1;
    ///< Mask SOC Alarm triggered by RCS RPC Fatal
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t MASK_RCS : 2;
    ///< Mask SOC Alarm triggered by RCS/GPIO
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t MASK_EVCC : 2;
    ///< Mask SOC Alarm triggered by Syscon EVCC 2-bits
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t MASK_SYSCON : 1;
    ///< Mask SOC Alarm triggered by Syscon Controller/Watchdog/PLL Lock
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t MASK_SPARE : 3;
    ///< Mask SOC Alarm triggered by Spare
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} trx_sys_csr_tx_alarm0_mask_reg_t;

#define TRX_SYS_CSR_TX_ALARM0_MASK_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_TX_ALARM0_MASK_RD_MASK (0x0001fff3U)
#define TRX_SYS_CSR_TX_ALARM0_MASK_WR_MASK (0x0001fff3U)


///< Mask Merged SOC Alarm E1 to the Tri-State Merge Alarm State Machine
///< in TXG.
#define TRX_SYS_CSR_TX_ALARM0_MASK_E1_BF_OFF ( 0)
#define TRX_SYS_CSR_TX_ALARM0_MASK_E1_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM0_MASK_E1_BF_MSK (0x00000001)
#define TRX_SYS_CSR_TX_ALARM0_MASK_E1_BF_DEF (0x00000000)

///< Mask Merged SOC Alarm Y1 to the Bi-State Merge Alarm State Machine
///< before RCS.
#define TRX_SYS_CSR_TX_ALARM0_MASK_Y1_BF_OFF ( 1)
#define TRX_SYS_CSR_TX_ALARM0_MASK_Y1_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM0_MASK_Y1_BF_MSK (0x00000002)
#define TRX_SYS_CSR_TX_ALARM0_MASK_Y1_BF_DEF (0x00000000)

///< Mask SOC Alarm triggered by V2D
#define TRX_SYS_CSR_TX_ALARM0_MASK_V2D_BF_OFF ( 4)
#define TRX_SYS_CSR_TX_ALARM0_MASK_V2D_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM0_MASK_V2D_BF_MSK (0x00000010)
#define TRX_SYS_CSR_TX_ALARM0_MASK_V2D_BF_DEF (0x00000000)

///< Mask SOC Alarm triggered by VHA
#define TRX_SYS_CSR_TX_ALARM0_MASK_VHA_BF_OFF ( 5)
#define TRX_SYS_CSR_TX_ALARM0_MASK_VHA_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM0_MASK_VHA_BF_MSK (0x00000020)
#define TRX_SYS_CSR_TX_ALARM0_MASK_VHA_BF_DEF (0x00000000)

///< Mask SOC Alarm triggered by VEX Array
#define TRX_SYS_CSR_TX_ALARM0_MASK_VEXA_BF_OFF ( 6)
#define TRX_SYS_CSR_TX_ALARM0_MASK_VEXA_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM0_MASK_VEXA_BF_MSK (0x00000040)
#define TRX_SYS_CSR_TX_ALARM0_MASK_VEXA_BF_DEF (0x00000000)

///< Mask SOC Alarm triggered by JESD
#define TRX_SYS_CSR_TX_ALARM0_MASK_JESD_BF_OFF ( 7)
#define TRX_SYS_CSR_TX_ALARM0_MASK_JESD_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM0_MASK_JESD_BF_MSK (0x00000080)
#define TRX_SYS_CSR_TX_ALARM0_MASK_JESD_BF_DEF (0x00000000)

///< Mask SOC Alarm triggered by RCS RPC Fatal
#define TRX_SYS_CSR_TX_ALARM0_MASK_RPC_BF_OFF ( 8)
#define TRX_SYS_CSR_TX_ALARM0_MASK_RPC_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM0_MASK_RPC_BF_MSK (0x00000100)
#define TRX_SYS_CSR_TX_ALARM0_MASK_RPC_BF_DEF (0x00000000)

///< Mask SOC Alarm triggered by RCS/GPIO
#define TRX_SYS_CSR_TX_ALARM0_MASK_RCS_BF_OFF ( 9)
#define TRX_SYS_CSR_TX_ALARM0_MASK_RCS_BF_WID ( 2)
#define TRX_SYS_CSR_TX_ALARM0_MASK_RCS_BF_MSK (0x00000600)
#define TRX_SYS_CSR_TX_ALARM0_MASK_RCS_BF_DEF (0x00000000)

///< Mask SOC Alarm triggered by Syscon EVCC 2-bits
#define TRX_SYS_CSR_TX_ALARM0_MASK_EVCC_BF_OFF (11)
#define TRX_SYS_CSR_TX_ALARM0_MASK_EVCC_BF_WID ( 2)
#define TRX_SYS_CSR_TX_ALARM0_MASK_EVCC_BF_MSK (0x00001800)
#define TRX_SYS_CSR_TX_ALARM0_MASK_EVCC_BF_DEF (0x00000000)

///< Mask SOC Alarm triggered by Syscon Controller/Watchdog/PLL Lock
#define TRX_SYS_CSR_TX_ALARM0_MASK_SYSCON_BF_OFF (13)
#define TRX_SYS_CSR_TX_ALARM0_MASK_SYSCON_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM0_MASK_SYSCON_BF_MSK (0x00002000)
#define TRX_SYS_CSR_TX_ALARM0_MASK_SYSCON_BF_DEF (0x00000000)

///< Mask SOC Alarm triggered by Spare
#define TRX_SYS_CSR_TX_ALARM0_MASK_SPARE_BF_OFF (14)
#define TRX_SYS_CSR_TX_ALARM0_MASK_SPARE_BF_WID ( 3)
#define TRX_SYS_CSR_TX_ALARM0_MASK_SPARE_BF_MSK (0x0001C000)
#define TRX_SYS_CSR_TX_ALARM0_MASK_SPARE_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_TX_ALARM0_STATUS register description at address offset 0x48
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/TX_ALARM0_STATUS
  * SOC TX Alarm Trap  Antenna 0 Status
  */

typedef union {
  struct {
    uint32_t STATUS_E1 : 1;
    ///< Merged SOC Error Alarm E1 Status to TXG.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t STATUS_Y1 : 1;
    ///< Merged SOC Error Alarm Y1 Status to RCS.
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t STATUS_TXCPM : 1;
    ///< TXCPM TX Alarm Raw Status.
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t STATUS_TXSR : 1;
    ///< TXSR TX Alarm Raw Status.
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t STATUS_V2D : 1;
    ///< SOC Alarm triggered by V2D Status.
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t STATUS_VHA : 1;
    ///< SOC Alarm triggered by VHA Status.
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t STATUS_VEXA : 1;
    ///< SOC Alarm triggered by VEX Array Status.
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t STATUS_JESD : 1;
    ///< SOC Alarm triggered by JESD Status.
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t STATUS_RPC : 1;
    ///< SOC Alarm triggered by RCS RPC Fatal Status.
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t STATUS_RCS : 2;
    ///< SOC Alarm triggered by RCS/GPIO Status.
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t STATUS_EVCC : 2;
    ///< SOC Alarm triggered by Syscon EVCC 2-bits Status.
    ///< AccessType="RO/V" BitOffset="11" ResetValue="0x0"
    uint32_t STATUS_SYSCON : 1;
    ///< SOC Alarm triggered by Syscon Controller/Watchdog/PLL Lock Status.
    ///< AccessType="RO/V" BitOffset="13" ResetValue="0x0"
    uint32_t STATUS_SPARE : 3;
    ///< SOC Alarm triggered by Spare Status
    ///< AccessType="RO/V" BitOffset="14" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} trx_sys_csr_tx_alarm0_stat_reg_t;

#define TRX_SYS_CSR_TX_ALARM0_STAT_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_TX_ALARM0_STAT_RD_MASK (0x0001ffffU)
#define TRX_SYS_CSR_TX_ALARM0_STAT_WR_MASK (0x00000000U)


///< Merged SOC Error Alarm E1 Status to TXG.
#define TRX_SYS_CSR_TX_ALARM0_STAT_E1_BF_OFF ( 0)
#define TRX_SYS_CSR_TX_ALARM0_STAT_E1_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM0_STAT_E1_BF_MSK (0x00000001)
#define TRX_SYS_CSR_TX_ALARM0_STAT_E1_BF_DEF (0x00000000)

///< Merged SOC Error Alarm Y1 Status to RCS.
#define TRX_SYS_CSR_TX_ALARM0_STAT_Y1_BF_OFF ( 1)
#define TRX_SYS_CSR_TX_ALARM0_STAT_Y1_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM0_STAT_Y1_BF_MSK (0x00000002)
#define TRX_SYS_CSR_TX_ALARM0_STAT_Y1_BF_DEF (0x00000000)

///< TXCPM TX Alarm Raw Status.
#define TRX_SYS_CSR_TX_ALARM0_STAT_TXCPM_BF_OFF ( 2)
#define TRX_SYS_CSR_TX_ALARM0_STAT_TXCPM_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM0_STAT_TXCPM_BF_MSK (0x00000004)
#define TRX_SYS_CSR_TX_ALARM0_STAT_TXCPM_BF_DEF (0x00000000)

///< TXSR TX Alarm Raw Status.
#define TRX_SYS_CSR_TX_ALARM0_STAT_TXSR_BF_OFF ( 3)
#define TRX_SYS_CSR_TX_ALARM0_STAT_TXSR_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM0_STAT_TXSR_BF_MSK (0x00000008)
#define TRX_SYS_CSR_TX_ALARM0_STAT_TXSR_BF_DEF (0x00000000)

///< SOC Alarm triggered by V2D Status.
#define TRX_SYS_CSR_TX_ALARM0_STAT_V2D_BF_OFF ( 4)
#define TRX_SYS_CSR_TX_ALARM0_STAT_V2D_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM0_STAT_V2D_BF_MSK (0x00000010)
#define TRX_SYS_CSR_TX_ALARM0_STAT_V2D_BF_DEF (0x00000000)

///< SOC Alarm triggered by VHA Status.
#define TRX_SYS_CSR_TX_ALARM0_STAT_VHA_BF_OFF ( 5)
#define TRX_SYS_CSR_TX_ALARM0_STAT_VHA_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM0_STAT_VHA_BF_MSK (0x00000020)
#define TRX_SYS_CSR_TX_ALARM0_STAT_VHA_BF_DEF (0x00000000)

///< SOC Alarm triggered by VEX Array Status.
#define TRX_SYS_CSR_TX_ALARM0_STAT_VEXA_BF_OFF ( 6)
#define TRX_SYS_CSR_TX_ALARM0_STAT_VEXA_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM0_STAT_VEXA_BF_MSK (0x00000040)
#define TRX_SYS_CSR_TX_ALARM0_STAT_VEXA_BF_DEF (0x00000000)

///< SOC Alarm triggered by JESD Status.
#define TRX_SYS_CSR_TX_ALARM0_STAT_JESD_BF_OFF ( 7)
#define TRX_SYS_CSR_TX_ALARM0_STAT_JESD_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM0_STAT_JESD_BF_MSK (0x00000080)
#define TRX_SYS_CSR_TX_ALARM0_STAT_JESD_BF_DEF (0x00000000)

///< SOC Alarm triggered by RCS RPC Fatal Status.
#define TRX_SYS_CSR_TX_ALARM0_STAT_RPC_BF_OFF ( 8)
#define TRX_SYS_CSR_TX_ALARM0_STAT_RPC_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM0_STAT_RPC_BF_MSK (0x00000100)
#define TRX_SYS_CSR_TX_ALARM0_STAT_RPC_BF_DEF (0x00000000)

///< SOC Alarm triggered by RCS/GPIO Status.
#define TRX_SYS_CSR_TX_ALARM0_STAT_RCS_BF_OFF ( 9)
#define TRX_SYS_CSR_TX_ALARM0_STAT_RCS_BF_WID ( 2)
#define TRX_SYS_CSR_TX_ALARM0_STAT_RCS_BF_MSK (0x00000600)
#define TRX_SYS_CSR_TX_ALARM0_STAT_RCS_BF_DEF (0x00000000)

///< SOC Alarm triggered by Syscon EVCC 2-bits Status.
#define TRX_SYS_CSR_TX_ALARM0_STAT_EVCC_BF_OFF (11)
#define TRX_SYS_CSR_TX_ALARM0_STAT_EVCC_BF_WID ( 2)
#define TRX_SYS_CSR_TX_ALARM0_STAT_EVCC_BF_MSK (0x00001800)
#define TRX_SYS_CSR_TX_ALARM0_STAT_EVCC_BF_DEF (0x00000000)

///< SOC Alarm triggered by Syscon Controller/Watchdog/PLL Lock Status.
#define TRX_SYS_CSR_TX_ALARM0_STAT_SYSCON_BF_OFF (13)
#define TRX_SYS_CSR_TX_ALARM0_STAT_SYSCON_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM0_STAT_SYSCON_BF_MSK (0x00002000)
#define TRX_SYS_CSR_TX_ALARM0_STAT_SYSCON_BF_DEF (0x00000000)

///< SOC Alarm triggered by Spare Status
#define TRX_SYS_CSR_TX_ALARM0_STAT_SPARE_BF_OFF (14)
#define TRX_SYS_CSR_TX_ALARM0_STAT_SPARE_BF_WID ( 3)
#define TRX_SYS_CSR_TX_ALARM0_STAT_SPARE_BF_MSK (0x0001C000)
#define TRX_SYS_CSR_TX_ALARM0_STAT_SPARE_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_TX_ALARM0_STICKY register description at address offset 0x4c
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/TX_ALARM0_STICKY
  * SOC TX Alarm Trap  Antenna 0 Sticky
  */

typedef union {
  struct {
    uint32_t STICKY_E1 : 1;
    ///< Merged SOC Error Alarm E1 Sticky Status to TXG.
    ///< AccessType="RO/C/V" BitOffset="0" ResetValue="0x0"
    uint32_t STICKY_Y1 : 1;
    ///< Merged SOC Error Alarm Y1 Sticky Status to RCS.
    ///< AccessType="RO/C/V" BitOffset="1" ResetValue="0x0"
    uint32_t STICKY_TXCPM : 1;
    ///< TXCPM TX Alarm Raw Sticky Status.
    ///< AccessType="RO/C/V" BitOffset="2" ResetValue="0x0"
    uint32_t STICKY_TXSR : 1;
    ///< TXSR TX Alarm Raw Sticky Status.
    ///< AccessType="RO/C/V" BitOffset="3" ResetValue="0x0"
    uint32_t STICKY_V2D : 1;
    ///< SOC Alarm triggered by V2D Sticky Status.
    ///< AccessType="RO/C/V" BitOffset="4" ResetValue="0x0"
    uint32_t STICKY_VHA : 1;
    ///< SOC Alarm triggered by VHA Sticky Status.
    ///< AccessType="RO/C/V" BitOffset="5" ResetValue="0x0"
    uint32_t STICKY_VEXA : 1;
    ///< SOC Alarm triggered by VEX Array Sticky Status.
    ///< AccessType="RO/C/V" BitOffset="6" ResetValue="0x0"
    uint32_t STICKY_JESD : 1;
    ///< SOC Alarm triggered by JESD Sticky Status.
    ///< AccessType="RO/C/V" BitOffset="7" ResetValue="0x0"
    uint32_t STICKY_RPC : 1;
    ///< SOC Alarm triggered by RCS RPC Fatal Sticky Status.
    ///< AccessType="RO/C/V" BitOffset="8" ResetValue="0x0"
    uint32_t STICKY_RCS : 2;
    ///< SOC Alarm triggered by RCS/GPIO Sticky Status.
    ///< AccessType="RO/C/V" BitOffset="9" ResetValue="0x0"
    uint32_t STICKY_EVCC : 2;
    ///< SOC Alarm triggered by Syscon EVCC 2-bits Sticky Status.
    ///< AccessType="RO/C/V" BitOffset="11" ResetValue="0x0"
    uint32_t STICKY_SYSCON : 1;
    ///< SOC Alarm triggered by Syscon Controller/Watchdog/PLL Lock Sticky
    ///< Status.
    ///< AccessType="RO/C/V" BitOffset="13" ResetValue="0x0"
    uint32_t STICKY_SPARE : 3;
    ///< SOC Alarm triggered by Spare Sticky Status
    ///< AccessType="RO/C/V" BitOffset="14" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} trx_sys_csr_tx_alarm0_sticky_reg_t;

#define TRX_SYS_CSR_TX_ALARM0_STICKY_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_TX_ALARM0_STICKY_RD_MASK (0x0001ffffU)
#define TRX_SYS_CSR_TX_ALARM0_STICKY_WR_MASK (0x00000000U)


///< Merged SOC Error Alarm E1 Sticky Status to TXG.
#define TRX_SYS_CSR_TX_ALARM0_STICKY_E1_BF_OFF ( 0)
#define TRX_SYS_CSR_TX_ALARM0_STICKY_E1_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM0_STICKY_E1_BF_MSK (0x00000001)
#define TRX_SYS_CSR_TX_ALARM0_STICKY_E1_BF_DEF (0x00000000)

///< Merged SOC Error Alarm Y1 Sticky Status to RCS.
#define TRX_SYS_CSR_TX_ALARM0_STICKY_Y1_BF_OFF ( 1)
#define TRX_SYS_CSR_TX_ALARM0_STICKY_Y1_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM0_STICKY_Y1_BF_MSK (0x00000002)
#define TRX_SYS_CSR_TX_ALARM0_STICKY_Y1_BF_DEF (0x00000000)

///< TXCPM TX Alarm Raw Sticky Status.
#define TRX_SYS_CSR_TX_ALARM0_STICKY_TXCPM_BF_OFF ( 2)
#define TRX_SYS_CSR_TX_ALARM0_STICKY_TXCPM_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM0_STICKY_TXCPM_BF_MSK (0x00000004)
#define TRX_SYS_CSR_TX_ALARM0_STICKY_TXCPM_BF_DEF (0x00000000)

///< TXSR TX Alarm Raw Sticky Status.
#define TRX_SYS_CSR_TX_ALARM0_STICKY_TXSR_BF_OFF ( 3)
#define TRX_SYS_CSR_TX_ALARM0_STICKY_TXSR_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM0_STICKY_TXSR_BF_MSK (0x00000008)
#define TRX_SYS_CSR_TX_ALARM0_STICKY_TXSR_BF_DEF (0x00000000)

///< SOC Alarm triggered by V2D Sticky Status.
#define TRX_SYS_CSR_TX_ALARM0_STICKY_V2D_BF_OFF ( 4)
#define TRX_SYS_CSR_TX_ALARM0_STICKY_V2D_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM0_STICKY_V2D_BF_MSK (0x00000010)
#define TRX_SYS_CSR_TX_ALARM0_STICKY_V2D_BF_DEF (0x00000000)

///< SOC Alarm triggered by VHA Sticky Status.
#define TRX_SYS_CSR_TX_ALARM0_STICKY_VHA_BF_OFF ( 5)
#define TRX_SYS_CSR_TX_ALARM0_STICKY_VHA_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM0_STICKY_VHA_BF_MSK (0x00000020)
#define TRX_SYS_CSR_TX_ALARM0_STICKY_VHA_BF_DEF (0x00000000)

///< SOC Alarm triggered by VEX Array Sticky Status.
#define TRX_SYS_CSR_TX_ALARM0_STICKY_VEXA_BF_OFF ( 6)
#define TRX_SYS_CSR_TX_ALARM0_STICKY_VEXA_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM0_STICKY_VEXA_BF_MSK (0x00000040)
#define TRX_SYS_CSR_TX_ALARM0_STICKY_VEXA_BF_DEF (0x00000000)

///< SOC Alarm triggered by JESD Sticky Status.
#define TRX_SYS_CSR_TX_ALARM0_STICKY_JESD_BF_OFF ( 7)
#define TRX_SYS_CSR_TX_ALARM0_STICKY_JESD_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM0_STICKY_JESD_BF_MSK (0x00000080)
#define TRX_SYS_CSR_TX_ALARM0_STICKY_JESD_BF_DEF (0x00000000)

///< SOC Alarm triggered by RCS RPC Fatal Sticky Status.
#define TRX_SYS_CSR_TX_ALARM0_STICKY_RPC_BF_OFF ( 8)
#define TRX_SYS_CSR_TX_ALARM0_STICKY_RPC_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM0_STICKY_RPC_BF_MSK (0x00000100)
#define TRX_SYS_CSR_TX_ALARM0_STICKY_RPC_BF_DEF (0x00000000)

///< SOC Alarm triggered by RCS/GPIO Sticky Status.
#define TRX_SYS_CSR_TX_ALARM0_STICKY_RCS_BF_OFF ( 9)
#define TRX_SYS_CSR_TX_ALARM0_STICKY_RCS_BF_WID ( 2)
#define TRX_SYS_CSR_TX_ALARM0_STICKY_RCS_BF_MSK (0x00000600)
#define TRX_SYS_CSR_TX_ALARM0_STICKY_RCS_BF_DEF (0x00000000)

///< SOC Alarm triggered by Syscon EVCC 2-bits Sticky Status.
#define TRX_SYS_CSR_TX_ALARM0_STICKY_EVCC_BF_OFF (11)
#define TRX_SYS_CSR_TX_ALARM0_STICKY_EVCC_BF_WID ( 2)
#define TRX_SYS_CSR_TX_ALARM0_STICKY_EVCC_BF_MSK (0x00001800)
#define TRX_SYS_CSR_TX_ALARM0_STICKY_EVCC_BF_DEF (0x00000000)

///< SOC Alarm triggered by Syscon Controller/Watchdog/PLL Lock Sticky
///< Status.
#define TRX_SYS_CSR_TX_ALARM0_STICKY_SYSCON_BF_OFF (13)
#define TRX_SYS_CSR_TX_ALARM0_STICKY_SYSCON_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM0_STICKY_SYSCON_BF_MSK (0x00002000)
#define TRX_SYS_CSR_TX_ALARM0_STICKY_SYSCON_BF_DEF (0x00000000)

///< SOC Alarm triggered by Spare Sticky Status
#define TRX_SYS_CSR_TX_ALARM0_STICKY_SPARE_BF_OFF (14)
#define TRX_SYS_CSR_TX_ALARM0_STICKY_SPARE_BF_WID ( 3)
#define TRX_SYS_CSR_TX_ALARM0_STICKY_SPARE_BF_MSK (0x0001C000)
#define TRX_SYS_CSR_TX_ALARM0_STICKY_SPARE_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_TX_ALARM0_ETIMER register description at address offset 0x50
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/TX_ALARM0_ETIMER
  * SOC TX Alarm Error Timer Count Antenna 0 Config
  */

typedef union {
  struct {
    uint32_t COUNT_VALUE : 16;
    ///< TX Alarm Error Timer Count Configuration sets the SOC Alarm Merge
    ///< Error Tri-state machine timer count value. The 16=bit value is the
    ///< number of 983.04MHz/1.475 GHz clocks to wait for in a TX Alarm event
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} trx_sys_csr_tx_alarm0_etimer_reg_t;

#define TRX_SYS_CSR_TX_ALARM0_ETIMER_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_TX_ALARM0_ETIMER_RD_MASK (0x0000ffffU)
#define TRX_SYS_CSR_TX_ALARM0_ETIMER_WR_MASK (0x0000ffffU)


///< TX Alarm Error Timer Count Configuration sets the SOC Alarm Merge
///< Error Tri-state machine timer count value. The 16=bit value is the
///< number of 983.04MHz/1.475 GHz clocks to wait for in a TX Alarm event
#define TRX_SYS_CSR_TX_ALARM0_ETIMER_CNT_VAL_BF_OFF ( 0)
#define TRX_SYS_CSR_TX_ALARM0_ETIMER_CNT_VAL_BF_WID (16)
#define TRX_SYS_CSR_TX_ALARM0_ETIMER_CNT_VAL_BF_MSK (0x0000FFFF)
#define TRX_SYS_CSR_TX_ALARM0_ETIMER_CNT_VAL_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_TX_ALARM0_PNTIMER register description at address offset 0x54
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/TX_ALARM0_PNTIMER
  * SOC TX Alarm Pre Normal Timer Count Antenna 0 Config
  */

typedef union {
  struct {
    uint32_t COUNT_VALUE : 16;
    ///< TX Alarm Pre Normal Timer Count Configuration sets the SOC Alarm Merge
    ///< Error Tri-state machine timer count value for the Pre-Normal State.
    ///< The 16-bit value specifies the number of 983.04MHz/1.474 GHz clocks
    ///< to allow for recovery.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} trx_sys_csr_tx_alarm0_pntimer_reg_t;

#define TRX_SYS_CSR_TX_ALARM0_PNTIMER_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_TX_ALARM0_PNTIMER_RD_MASK (0x0000ffffU)
#define TRX_SYS_CSR_TX_ALARM0_PNTIMER_WR_MASK (0x0000ffffU)


///< TX Alarm Pre Normal Timer Count Configuration sets the SOC Alarm Merge
///< Error Tri-state machine timer count value for the Pre-Normal State.
///< The 16-bit value specifies the number of 983.04MHz/1.474 GHz clocks
///< to allow for recovery.
#define TRX_SYS_CSR_TX_ALARM0_PNTIMER_CNT_VAL_BF_OFF ( 0)
#define TRX_SYS_CSR_TX_ALARM0_PNTIMER_CNT_VAL_BF_WID (16)
#define TRX_SYS_CSR_TX_ALARM0_PNTIMER_CNT_VAL_BF_MSK (0x0000FFFF)
#define TRX_SYS_CSR_TX_ALARM0_PNTIMER_CNT_VAL_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_TX_ALARM1_FORCE register description at address offset 0x58
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/TX_ALARM1_FORCE
  * SOC TX Alarm Force Antenna 1 Configuration
  */

typedef union {
  struct {
    uint32_t FORCE_E1 : 1;
    ///< Force Merged SOC Alarm E1 to the Tri-State Merge Alarm State Machine
    ///< in TXG
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FORCE_Y1 : 1;
    ///< Force Merged SOC Alarm Y1 to the Bi-State Merge Alarm State Machine
    ///< before RCS
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
    uint32_t FORCE_V2D : 1;
    ///< Force SOC Alarm triggered by V2D
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t FORCE_VHA : 1;
    ///< Force SOC Alarm triggered by VHA
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t FORCE_VEXA : 1;
    ///< Force SOC Alarm triggered by VEX Array
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t FORCE_JESD : 1;
    ///< Force SOC Alarm triggered by JESD
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t FORCE_RPC : 1;
    ///< Force SOC Alarm triggered by RCS RPC Fatal
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t FORCE_RCS : 2;
    ///< Force SOC Alarm triggered by RCS/GPIO
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t FORCE_EVCC : 2;
    ///< Force SOC Alarm triggered by Syscon EVCC 2-bits
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t FORCE_SYSCON : 1;
    ///< Force SOC Alarm triggered by Syscon Controller/Watchdog/PLL Lock
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t FORCE_SPARE : 3;
    ///< Force SOC Alarm triggered by Spare
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} trx_sys_csr_tx_alarm1_force_reg_t;

#define TRX_SYS_CSR_TX_ALARM1_FORCE_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_TX_ALARM1_FORCE_RD_MASK (0x0001fff3U)
#define TRX_SYS_CSR_TX_ALARM1_FORCE_WR_MASK (0x0001fff3U)


///< Force Merged SOC Alarm E1 to the Tri-State Merge Alarm State Machine
///< in TXG
#define TRX_SYS_CSR_TX_ALARM1_FORCE_E1_BF_OFF ( 0)
#define TRX_SYS_CSR_TX_ALARM1_FORCE_E1_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM1_FORCE_E1_BF_MSK (0x00000001)
#define TRX_SYS_CSR_TX_ALARM1_FORCE_E1_BF_DEF (0x00000000)

///< Force Merged SOC Alarm Y1 to the Bi-State Merge Alarm State Machine
///< before RCS
#define TRX_SYS_CSR_TX_ALARM1_FORCE_Y1_BF_OFF ( 1)
#define TRX_SYS_CSR_TX_ALARM1_FORCE_Y1_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM1_FORCE_Y1_BF_MSK (0x00000002)
#define TRX_SYS_CSR_TX_ALARM1_FORCE_Y1_BF_DEF (0x00000000)

///< Force SOC Alarm triggered by V2D
#define TRX_SYS_CSR_TX_ALARM1_FORCE_V2D_BF_OFF ( 4)
#define TRX_SYS_CSR_TX_ALARM1_FORCE_V2D_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM1_FORCE_V2D_BF_MSK (0x00000010)
#define TRX_SYS_CSR_TX_ALARM1_FORCE_V2D_BF_DEF (0x00000000)

///< Force SOC Alarm triggered by VHA
#define TRX_SYS_CSR_TX_ALARM1_FORCE_VHA_BF_OFF ( 5)
#define TRX_SYS_CSR_TX_ALARM1_FORCE_VHA_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM1_FORCE_VHA_BF_MSK (0x00000020)
#define TRX_SYS_CSR_TX_ALARM1_FORCE_VHA_BF_DEF (0x00000000)

///< Force SOC Alarm triggered by VEX Array
#define TRX_SYS_CSR_TX_ALARM1_FORCE_VEXA_BF_OFF ( 6)
#define TRX_SYS_CSR_TX_ALARM1_FORCE_VEXA_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM1_FORCE_VEXA_BF_MSK (0x00000040)
#define TRX_SYS_CSR_TX_ALARM1_FORCE_VEXA_BF_DEF (0x00000000)

///< Force SOC Alarm triggered by JESD
#define TRX_SYS_CSR_TX_ALARM1_FORCE_JESD_BF_OFF ( 7)
#define TRX_SYS_CSR_TX_ALARM1_FORCE_JESD_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM1_FORCE_JESD_BF_MSK (0x00000080)
#define TRX_SYS_CSR_TX_ALARM1_FORCE_JESD_BF_DEF (0x00000000)

///< Force SOC Alarm triggered by RCS RPC Fatal
#define TRX_SYS_CSR_TX_ALARM1_FORCE_RPC_BF_OFF ( 8)
#define TRX_SYS_CSR_TX_ALARM1_FORCE_RPC_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM1_FORCE_RPC_BF_MSK (0x00000100)
#define TRX_SYS_CSR_TX_ALARM1_FORCE_RPC_BF_DEF (0x00000000)

///< Force SOC Alarm triggered by RCS/GPIO
#define TRX_SYS_CSR_TX_ALARM1_FORCE_RCS_BF_OFF ( 9)
#define TRX_SYS_CSR_TX_ALARM1_FORCE_RCS_BF_WID ( 2)
#define TRX_SYS_CSR_TX_ALARM1_FORCE_RCS_BF_MSK (0x00000600)
#define TRX_SYS_CSR_TX_ALARM1_FORCE_RCS_BF_DEF (0x00000000)

///< Force SOC Alarm triggered by Syscon EVCC 2-bits
#define TRX_SYS_CSR_TX_ALARM1_FORCE_EVCC_BF_OFF (11)
#define TRX_SYS_CSR_TX_ALARM1_FORCE_EVCC_BF_WID ( 2)
#define TRX_SYS_CSR_TX_ALARM1_FORCE_EVCC_BF_MSK (0x00001800)
#define TRX_SYS_CSR_TX_ALARM1_FORCE_EVCC_BF_DEF (0x00000000)

///< Force SOC Alarm triggered by Syscon Controller/Watchdog/PLL Lock
#define TRX_SYS_CSR_TX_ALARM1_FORCE_SYSCON_BF_OFF (13)
#define TRX_SYS_CSR_TX_ALARM1_FORCE_SYSCON_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM1_FORCE_SYSCON_BF_MSK (0x00002000)
#define TRX_SYS_CSR_TX_ALARM1_FORCE_SYSCON_BF_DEF (0x00000000)

///< Force SOC Alarm triggered by Spare
#define TRX_SYS_CSR_TX_ALARM1_FORCE_SPARE_BF_OFF (14)
#define TRX_SYS_CSR_TX_ALARM1_FORCE_SPARE_BF_WID ( 3)
#define TRX_SYS_CSR_TX_ALARM1_FORCE_SPARE_BF_MSK (0x0001C000)
#define TRX_SYS_CSR_TX_ALARM1_FORCE_SPARE_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_TX_ALARM1_MASK register description at address offset 0x5c
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/TX_ALARM1_MASK
  * SOC TX Alarm Mask  Antenna 1 Configuration
  */

typedef union {
  struct {
    uint32_t MASK_E1 : 1;
    ///< Mask Merged SOC Alarm E1 to the Tri-State Merge Alarm State Machine
    ///< in TXG.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t MASK_Y1 : 1;
    ///< Mask Merged SOC Alarm Y1 to the Bi-State Merge Alarm State Machine
    ///< before RCS.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
    uint32_t MASK_V2D : 1;
    ///< Mask SOC Alarm triggered by V2D
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t MASK_VHA : 1;
    ///< Mask SOC Alarm triggered by VHA
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t MASK_VEXA : 1;
    ///< Mask SOC Alarm triggered by VEX Array
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t MASK_JESD : 1;
    ///< Mask SOC Alarm triggered by JESD
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t MASK_RPC : 1;
    ///< Mask SOC Alarm triggered by RCS RPC Fatal
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t MASK_RCS : 2;
    ///< Mask SOC Alarm triggered by RCS/GPIO
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t MASK_EVCC : 2;
    ///< Mask SOC Alarm triggered by Syscon EVCC 2-bits
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t MASK_SYSCON : 1;
    ///< Mask SOC Alarm triggered by Syscon Controller/Watchdog/PLL Lock
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t MASK_SPARE : 3;
    ///< Mask SOC Alarm triggered by Spare
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} trx_sys_csr_tx_alarm1_mask_reg_t;

#define TRX_SYS_CSR_TX_ALARM1_MASK_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_TX_ALARM1_MASK_RD_MASK (0x0001fff3U)
#define TRX_SYS_CSR_TX_ALARM1_MASK_WR_MASK (0x0001fff3U)


///< Mask Merged SOC Alarm E1 to the Tri-State Merge Alarm State Machine
///< in TXG.
#define TRX_SYS_CSR_TX_ALARM1_MASK_E1_BF_OFF ( 0)
#define TRX_SYS_CSR_TX_ALARM1_MASK_E1_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM1_MASK_E1_BF_MSK (0x00000001)
#define TRX_SYS_CSR_TX_ALARM1_MASK_E1_BF_DEF (0x00000000)

///< Mask Merged SOC Alarm Y1 to the Bi-State Merge Alarm State Machine
///< before RCS.
#define TRX_SYS_CSR_TX_ALARM1_MASK_Y1_BF_OFF ( 1)
#define TRX_SYS_CSR_TX_ALARM1_MASK_Y1_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM1_MASK_Y1_BF_MSK (0x00000002)
#define TRX_SYS_CSR_TX_ALARM1_MASK_Y1_BF_DEF (0x00000000)

///< Mask SOC Alarm triggered by V2D
#define TRX_SYS_CSR_TX_ALARM1_MASK_V2D_BF_OFF ( 4)
#define TRX_SYS_CSR_TX_ALARM1_MASK_V2D_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM1_MASK_V2D_BF_MSK (0x00000010)
#define TRX_SYS_CSR_TX_ALARM1_MASK_V2D_BF_DEF (0x00000000)

///< Mask SOC Alarm triggered by VHA
#define TRX_SYS_CSR_TX_ALARM1_MASK_VHA_BF_OFF ( 5)
#define TRX_SYS_CSR_TX_ALARM1_MASK_VHA_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM1_MASK_VHA_BF_MSK (0x00000020)
#define TRX_SYS_CSR_TX_ALARM1_MASK_VHA_BF_DEF (0x00000000)

///< Mask SOC Alarm triggered by VEX Array
#define TRX_SYS_CSR_TX_ALARM1_MASK_VEXA_BF_OFF ( 6)
#define TRX_SYS_CSR_TX_ALARM1_MASK_VEXA_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM1_MASK_VEXA_BF_MSK (0x00000040)
#define TRX_SYS_CSR_TX_ALARM1_MASK_VEXA_BF_DEF (0x00000000)

///< Mask SOC Alarm triggered by JESD
#define TRX_SYS_CSR_TX_ALARM1_MASK_JESD_BF_OFF ( 7)
#define TRX_SYS_CSR_TX_ALARM1_MASK_JESD_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM1_MASK_JESD_BF_MSK (0x00000080)
#define TRX_SYS_CSR_TX_ALARM1_MASK_JESD_BF_DEF (0x00000000)

///< Mask SOC Alarm triggered by RCS RPC Fatal
#define TRX_SYS_CSR_TX_ALARM1_MASK_RPC_BF_OFF ( 8)
#define TRX_SYS_CSR_TX_ALARM1_MASK_RPC_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM1_MASK_RPC_BF_MSK (0x00000100)
#define TRX_SYS_CSR_TX_ALARM1_MASK_RPC_BF_DEF (0x00000000)

///< Mask SOC Alarm triggered by RCS/GPIO
#define TRX_SYS_CSR_TX_ALARM1_MASK_RCS_BF_OFF ( 9)
#define TRX_SYS_CSR_TX_ALARM1_MASK_RCS_BF_WID ( 2)
#define TRX_SYS_CSR_TX_ALARM1_MASK_RCS_BF_MSK (0x00000600)
#define TRX_SYS_CSR_TX_ALARM1_MASK_RCS_BF_DEF (0x00000000)

///< Mask SOC Alarm triggered by Syscon EVCC 2-bits
#define TRX_SYS_CSR_TX_ALARM1_MASK_EVCC_BF_OFF (11)
#define TRX_SYS_CSR_TX_ALARM1_MASK_EVCC_BF_WID ( 2)
#define TRX_SYS_CSR_TX_ALARM1_MASK_EVCC_BF_MSK (0x00001800)
#define TRX_SYS_CSR_TX_ALARM1_MASK_EVCC_BF_DEF (0x00000000)

///< Mask SOC Alarm triggered by Syscon Controller/Watchdog/PLL Lock
#define TRX_SYS_CSR_TX_ALARM1_MASK_SYSCON_BF_OFF (13)
#define TRX_SYS_CSR_TX_ALARM1_MASK_SYSCON_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM1_MASK_SYSCON_BF_MSK (0x00002000)
#define TRX_SYS_CSR_TX_ALARM1_MASK_SYSCON_BF_DEF (0x00000000)

///< Mask SOC Alarm triggered by Spare
#define TRX_SYS_CSR_TX_ALARM1_MASK_SPARE_BF_OFF (14)
#define TRX_SYS_CSR_TX_ALARM1_MASK_SPARE_BF_WID ( 3)
#define TRX_SYS_CSR_TX_ALARM1_MASK_SPARE_BF_MSK (0x0001C000)
#define TRX_SYS_CSR_TX_ALARM1_MASK_SPARE_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_TX_ALARM1_STATUS register description at address offset 0x60
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/TX_ALARM1_STATUS
  * SOC TX Alarm Trap  Antenna 1 Status
  */

typedef union {
  struct {
    uint32_t STATUS_E1 : 1;
    ///< Merged SOC Error Alarm E1 Status to TXG .
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t STATUS_Y1 : 1;
    ///< Merged SOC Error Alarm Y1 Status to RCS.
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t STATUS_TXCPM : 1;
    ///< TXCPM TX Alarm Raw Status.
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t STATUS_TXSR : 1;
    ///< TXSR TX Alarm Raw Status.
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t STATUS_V2D : 1;
    ///< SOC Alarm triggered by V2D Status.
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t STATUS_VHA : 1;
    ///< SOC Alarm triggered by VHA Status.
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t STATUS_VEXA : 1;
    ///< SOC Alarm triggered by VEX Array Status.
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t STATUS_JESD : 1;
    ///< SOC Alarm triggered by JESD Status.
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t STATUS_RPC : 1;
    ///< SOC Alarm triggered by RCS RPC Fatal Status.
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t STATUS_RCS : 2;
    ///< SOC Alarm triggered by RCS/GPIO Status.
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t STATUS_EVCC : 2;
    ///< SOC Alarm triggered by Syscon EVCC 2-bits Status.
    ///< AccessType="RO/V" BitOffset="11" ResetValue="0x0"
    uint32_t STATUS_SYSCON : 1;
    ///< SOC Alarm triggered by Syscon Controller/Watchdog/PLL Lock Status.
    ///< AccessType="RO/V" BitOffset="13" ResetValue="0x0"
    uint32_t STATUS_SPARE : 3;
    ///< SOC Alarm triggered by Spare Status
    ///< AccessType="RO/V" BitOffset="14" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} trx_sys_csr_tx_alarm1_stat_reg_t;

#define TRX_SYS_CSR_TX_ALARM1_STAT_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_TX_ALARM1_STAT_RD_MASK (0x0001ffffU)
#define TRX_SYS_CSR_TX_ALARM1_STAT_WR_MASK (0x00000000U)


///< Merged SOC Error Alarm E1 Status to TXG .
#define TRX_SYS_CSR_TX_ALARM1_STAT_E1_BF_OFF ( 0)
#define TRX_SYS_CSR_TX_ALARM1_STAT_E1_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM1_STAT_E1_BF_MSK (0x00000001)
#define TRX_SYS_CSR_TX_ALARM1_STAT_E1_BF_DEF (0x00000000)

///< Merged SOC Error Alarm Y1 Status to RCS.
#define TRX_SYS_CSR_TX_ALARM1_STAT_Y1_BF_OFF ( 1)
#define TRX_SYS_CSR_TX_ALARM1_STAT_Y1_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM1_STAT_Y1_BF_MSK (0x00000002)
#define TRX_SYS_CSR_TX_ALARM1_STAT_Y1_BF_DEF (0x00000000)

///< TXCPM TX Alarm Raw Status.
#define TRX_SYS_CSR_TX_ALARM1_STAT_TXCPM_BF_OFF ( 2)
#define TRX_SYS_CSR_TX_ALARM1_STAT_TXCPM_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM1_STAT_TXCPM_BF_MSK (0x00000004)
#define TRX_SYS_CSR_TX_ALARM1_STAT_TXCPM_BF_DEF (0x00000000)

///< TXSR TX Alarm Raw Status.
#define TRX_SYS_CSR_TX_ALARM1_STAT_TXSR_BF_OFF ( 3)
#define TRX_SYS_CSR_TX_ALARM1_STAT_TXSR_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM1_STAT_TXSR_BF_MSK (0x00000008)
#define TRX_SYS_CSR_TX_ALARM1_STAT_TXSR_BF_DEF (0x00000000)

///< SOC Alarm triggered by V2D Status.
#define TRX_SYS_CSR_TX_ALARM1_STAT_V2D_BF_OFF ( 4)
#define TRX_SYS_CSR_TX_ALARM1_STAT_V2D_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM1_STAT_V2D_BF_MSK (0x00000010)
#define TRX_SYS_CSR_TX_ALARM1_STAT_V2D_BF_DEF (0x00000000)

///< SOC Alarm triggered by VHA Status.
#define TRX_SYS_CSR_TX_ALARM1_STAT_VHA_BF_OFF ( 5)
#define TRX_SYS_CSR_TX_ALARM1_STAT_VHA_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM1_STAT_VHA_BF_MSK (0x00000020)
#define TRX_SYS_CSR_TX_ALARM1_STAT_VHA_BF_DEF (0x00000000)

///< SOC Alarm triggered by VEX Array Status.
#define TRX_SYS_CSR_TX_ALARM1_STAT_VEXA_BF_OFF ( 6)
#define TRX_SYS_CSR_TX_ALARM1_STAT_VEXA_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM1_STAT_VEXA_BF_MSK (0x00000040)
#define TRX_SYS_CSR_TX_ALARM1_STAT_VEXA_BF_DEF (0x00000000)

///< SOC Alarm triggered by JESD Status.
#define TRX_SYS_CSR_TX_ALARM1_STAT_JESD_BF_OFF ( 7)
#define TRX_SYS_CSR_TX_ALARM1_STAT_JESD_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM1_STAT_JESD_BF_MSK (0x00000080)
#define TRX_SYS_CSR_TX_ALARM1_STAT_JESD_BF_DEF (0x00000000)

///< SOC Alarm triggered by RCS RPC Fatal Status.
#define TRX_SYS_CSR_TX_ALARM1_STAT_RPC_BF_OFF ( 8)
#define TRX_SYS_CSR_TX_ALARM1_STAT_RPC_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM1_STAT_RPC_BF_MSK (0x00000100)
#define TRX_SYS_CSR_TX_ALARM1_STAT_RPC_BF_DEF (0x00000000)

///< SOC Alarm triggered by RCS/GPIO Status.
#define TRX_SYS_CSR_TX_ALARM1_STAT_RCS_BF_OFF ( 9)
#define TRX_SYS_CSR_TX_ALARM1_STAT_RCS_BF_WID ( 2)
#define TRX_SYS_CSR_TX_ALARM1_STAT_RCS_BF_MSK (0x00000600)
#define TRX_SYS_CSR_TX_ALARM1_STAT_RCS_BF_DEF (0x00000000)

///< SOC Alarm triggered by Syscon EVCC 2-bits Status.
#define TRX_SYS_CSR_TX_ALARM1_STAT_EVCC_BF_OFF (11)
#define TRX_SYS_CSR_TX_ALARM1_STAT_EVCC_BF_WID ( 2)
#define TRX_SYS_CSR_TX_ALARM1_STAT_EVCC_BF_MSK (0x00001800)
#define TRX_SYS_CSR_TX_ALARM1_STAT_EVCC_BF_DEF (0x00000000)

///< SOC Alarm triggered by Syscon Controller/Watchdog/PLL Lock Status.
#define TRX_SYS_CSR_TX_ALARM1_STAT_SYSCON_BF_OFF (13)
#define TRX_SYS_CSR_TX_ALARM1_STAT_SYSCON_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM1_STAT_SYSCON_BF_MSK (0x00002000)
#define TRX_SYS_CSR_TX_ALARM1_STAT_SYSCON_BF_DEF (0x00000000)

///< SOC Alarm triggered by Spare Status
#define TRX_SYS_CSR_TX_ALARM1_STAT_SPARE_BF_OFF (14)
#define TRX_SYS_CSR_TX_ALARM1_STAT_SPARE_BF_WID ( 3)
#define TRX_SYS_CSR_TX_ALARM1_STAT_SPARE_BF_MSK (0x0001C000)
#define TRX_SYS_CSR_TX_ALARM1_STAT_SPARE_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_TX_ALARM1_STICKY register description at address offset 0x64
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/TX_ALARM1_STICKY
  * SOC TX Alarm Trap  Antenna 1 Sticky
  */

typedef union {
  struct {
    uint32_t STICKY_E1 : 1;
    ///< Merged SOC Error Alarm E1 Sticky Status to TXG.
    ///< AccessType="RO/C/V" BitOffset="0" ResetValue="0x0"
    uint32_t STICKY_Y1 : 1;
    ///< Merged SOC Error Alarm Y1 Sticky Status to RCS.
    ///< AccessType="RO/C/V" BitOffset="1" ResetValue="0x0"
    uint32_t STICKY_TXCPM : 1;
    ///< TXCPM TX Alarm Raw Status.
    ///< AccessType="RO/C/V" BitOffset="2" ResetValue="0x0"
    uint32_t STICKY_TXSR : 1;
    ///< TXSR TX Alarm Raw Status.
    ///< AccessType="RO/C/V" BitOffset="3" ResetValue="0x0"
    uint32_t STICKY_V2D : 1;
    ///< SOC Alarm triggered by V2D Sticky Status.
    ///< AccessType="RO/C/V" BitOffset="4" ResetValue="0x0"
    uint32_t STICKY_VHA : 1;
    ///< SOC Alarm triggered by VHA Sticky Status.
    ///< AccessType="RO/C/V" BitOffset="5" ResetValue="0x0"
    uint32_t STICKY_VEXA : 1;
    ///< SOC Alarm triggered by VEX Array Sticky Status.
    ///< AccessType="RO/C/V" BitOffset="6" ResetValue="0x0"
    uint32_t STICKY_JESD : 1;
    ///< SOC Alarm triggered by JESD Sticky Status.
    ///< AccessType="RO/C/V" BitOffset="7" ResetValue="0x0"
    uint32_t STICKY_RPC : 1;
    ///< SOC Alarm triggered by RCS RPC Fatal Sticky Status.
    ///< AccessType="RO/C/V" BitOffset="8" ResetValue="0x0"
    uint32_t STICKY_RCS : 2;
    ///< SOC Alarm triggered by RCS/GPIO Sticky Status.
    ///< AccessType="RO/C/V" BitOffset="9" ResetValue="0x0"
    uint32_t STICKY_EVCC : 2;
    ///< SOC Alarm triggered by Syscon EVCC 2-bits Sticky Status.
    ///< AccessType="RO/C/V" BitOffset="11" ResetValue="0x0"
    uint32_t STICKY_SYSCON : 1;
    ///< SOC Alarm triggered by Syscon Controller/Watchdog/PLL Lock Sticky
    ///< Status.
    ///< AccessType="RO/C/V" BitOffset="13" ResetValue="0x0"
    uint32_t STICKY_SPARE : 3;
    ///< SOC Alarm triggered by Spare Sticky Status
    ///< AccessType="RO/C/V" BitOffset="14" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} trx_sys_csr_tx_alarm1_sticky_reg_t;

#define TRX_SYS_CSR_TX_ALARM1_STICKY_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_TX_ALARM1_STICKY_RD_MASK (0x0001ffffU)
#define TRX_SYS_CSR_TX_ALARM1_STICKY_WR_MASK (0x00000000U)


///< Merged SOC Error Alarm E1 Sticky Status to TXG.
#define TRX_SYS_CSR_TX_ALARM1_STICKY_E1_BF_OFF ( 0)
#define TRX_SYS_CSR_TX_ALARM1_STICKY_E1_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM1_STICKY_E1_BF_MSK (0x00000001)
#define TRX_SYS_CSR_TX_ALARM1_STICKY_E1_BF_DEF (0x00000000)

///< Merged SOC Error Alarm Y1 Sticky Status to RCS.
#define TRX_SYS_CSR_TX_ALARM1_STICKY_Y1_BF_OFF ( 1)
#define TRX_SYS_CSR_TX_ALARM1_STICKY_Y1_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM1_STICKY_Y1_BF_MSK (0x00000002)
#define TRX_SYS_CSR_TX_ALARM1_STICKY_Y1_BF_DEF (0x00000000)

///< TXCPM TX Alarm Raw Status.
#define TRX_SYS_CSR_TX_ALARM1_STICKY_TXCPM_BF_OFF ( 2)
#define TRX_SYS_CSR_TX_ALARM1_STICKY_TXCPM_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM1_STICKY_TXCPM_BF_MSK (0x00000004)
#define TRX_SYS_CSR_TX_ALARM1_STICKY_TXCPM_BF_DEF (0x00000000)

///< TXSR TX Alarm Raw Status.
#define TRX_SYS_CSR_TX_ALARM1_STICKY_TXSR_BF_OFF ( 3)
#define TRX_SYS_CSR_TX_ALARM1_STICKY_TXSR_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM1_STICKY_TXSR_BF_MSK (0x00000008)
#define TRX_SYS_CSR_TX_ALARM1_STICKY_TXSR_BF_DEF (0x00000000)

///< SOC Alarm triggered by V2D Sticky Status.
#define TRX_SYS_CSR_TX_ALARM1_STICKY_V2D_BF_OFF ( 4)
#define TRX_SYS_CSR_TX_ALARM1_STICKY_V2D_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM1_STICKY_V2D_BF_MSK (0x00000010)
#define TRX_SYS_CSR_TX_ALARM1_STICKY_V2D_BF_DEF (0x00000000)

///< SOC Alarm triggered by VHA Sticky Status.
#define TRX_SYS_CSR_TX_ALARM1_STICKY_VHA_BF_OFF ( 5)
#define TRX_SYS_CSR_TX_ALARM1_STICKY_VHA_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM1_STICKY_VHA_BF_MSK (0x00000020)
#define TRX_SYS_CSR_TX_ALARM1_STICKY_VHA_BF_DEF (0x00000000)

///< SOC Alarm triggered by VEX Array Sticky Status.
#define TRX_SYS_CSR_TX_ALARM1_STICKY_VEXA_BF_OFF ( 6)
#define TRX_SYS_CSR_TX_ALARM1_STICKY_VEXA_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM1_STICKY_VEXA_BF_MSK (0x00000040)
#define TRX_SYS_CSR_TX_ALARM1_STICKY_VEXA_BF_DEF (0x00000000)

///< SOC Alarm triggered by JESD Sticky Status.
#define TRX_SYS_CSR_TX_ALARM1_STICKY_JESD_BF_OFF ( 7)
#define TRX_SYS_CSR_TX_ALARM1_STICKY_JESD_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM1_STICKY_JESD_BF_MSK (0x00000080)
#define TRX_SYS_CSR_TX_ALARM1_STICKY_JESD_BF_DEF (0x00000000)

///< SOC Alarm triggered by RCS RPC Fatal Sticky Status.
#define TRX_SYS_CSR_TX_ALARM1_STICKY_RPC_BF_OFF ( 8)
#define TRX_SYS_CSR_TX_ALARM1_STICKY_RPC_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM1_STICKY_RPC_BF_MSK (0x00000100)
#define TRX_SYS_CSR_TX_ALARM1_STICKY_RPC_BF_DEF (0x00000000)

///< SOC Alarm triggered by RCS/GPIO Sticky Status.
#define TRX_SYS_CSR_TX_ALARM1_STICKY_RCS_BF_OFF ( 9)
#define TRX_SYS_CSR_TX_ALARM1_STICKY_RCS_BF_WID ( 2)
#define TRX_SYS_CSR_TX_ALARM1_STICKY_RCS_BF_MSK (0x00000600)
#define TRX_SYS_CSR_TX_ALARM1_STICKY_RCS_BF_DEF (0x00000000)

///< SOC Alarm triggered by Syscon EVCC 2-bits Sticky Status.
#define TRX_SYS_CSR_TX_ALARM1_STICKY_EVCC_BF_OFF (11)
#define TRX_SYS_CSR_TX_ALARM1_STICKY_EVCC_BF_WID ( 2)
#define TRX_SYS_CSR_TX_ALARM1_STICKY_EVCC_BF_MSK (0x00001800)
#define TRX_SYS_CSR_TX_ALARM1_STICKY_EVCC_BF_DEF (0x00000000)

///< SOC Alarm triggered by Syscon Controller/Watchdog/PLL Lock Sticky
///< Status.
#define TRX_SYS_CSR_TX_ALARM1_STICKY_SYSCON_BF_OFF (13)
#define TRX_SYS_CSR_TX_ALARM1_STICKY_SYSCON_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM1_STICKY_SYSCON_BF_MSK (0x00002000)
#define TRX_SYS_CSR_TX_ALARM1_STICKY_SYSCON_BF_DEF (0x00000000)

///< SOC Alarm triggered by Spare Sticky Status
#define TRX_SYS_CSR_TX_ALARM1_STICKY_SPARE_BF_OFF (14)
#define TRX_SYS_CSR_TX_ALARM1_STICKY_SPARE_BF_WID ( 3)
#define TRX_SYS_CSR_TX_ALARM1_STICKY_SPARE_BF_MSK (0x0001C000)
#define TRX_SYS_CSR_TX_ALARM1_STICKY_SPARE_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_TX_ALARM1_ETIMER register description at address offset 0x68
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/TX_ALARM1_ETIMER
  * SOC TX Alarm Error Timer Count Antenna 1 Config
  */

typedef union {
  struct {
    uint32_t COUNT_VALUE : 16;
    ///< TX Alarm Error Timer Count Configuration sets the SOC Alarm Merge
    ///< Error Tri-state machine timer count value. The 16=bit value is the
    ///< number of 983.04MHz/1.475 GHz clocks to wait for in a TX Alarm event
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} trx_sys_csr_tx_alarm1_etimer_reg_t;

#define TRX_SYS_CSR_TX_ALARM1_ETIMER_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_TX_ALARM1_ETIMER_RD_MASK (0x0000ffffU)
#define TRX_SYS_CSR_TX_ALARM1_ETIMER_WR_MASK (0x0000ffffU)


///< TX Alarm Error Timer Count Configuration sets the SOC Alarm Merge
///< Error Tri-state machine timer count value. The 16=bit value is the
///< number of 983.04MHz/1.475 GHz clocks to wait for in a TX Alarm event
#define TRX_SYS_CSR_TX_ALARM1_ETIMER_CNT_VAL_BF_OFF ( 0)
#define TRX_SYS_CSR_TX_ALARM1_ETIMER_CNT_VAL_BF_WID (16)
#define TRX_SYS_CSR_TX_ALARM1_ETIMER_CNT_VAL_BF_MSK (0x0000FFFF)
#define TRX_SYS_CSR_TX_ALARM1_ETIMER_CNT_VAL_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_TX_ALARM1_PNTIMER register description at address offset 0x6c
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/TX_ALARM1_PNTIMER
  * SOC TX Alarm Pre Normal Timer Count Antenna 1 Config
  */

typedef union {
  struct {
    uint32_t COUNT_VALUE : 16;
    ///< TX Alarm Pre Normal Timer Count Configuration sets the SOC Alarm Merge
    ///< Error Tri-state machine timer count value for the Pre-Normal State.
    ///< The 16-bit value specifies the number of 983.04MHz/1.474 GHz clocks
    ///< to allow for recovery.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} trx_sys_csr_tx_alarm1_pntimer_reg_t;

#define TRX_SYS_CSR_TX_ALARM1_PNTIMER_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_TX_ALARM1_PNTIMER_RD_MASK (0x0000ffffU)
#define TRX_SYS_CSR_TX_ALARM1_PNTIMER_WR_MASK (0x0000ffffU)


///< TX Alarm Pre Normal Timer Count Configuration sets the SOC Alarm Merge
///< Error Tri-state machine timer count value for the Pre-Normal State.
///< The 16-bit value specifies the number of 983.04MHz/1.474 GHz clocks
///< to allow for recovery.
#define TRX_SYS_CSR_TX_ALARM1_PNTIMER_CNT_VAL_BF_OFF ( 0)
#define TRX_SYS_CSR_TX_ALARM1_PNTIMER_CNT_VAL_BF_WID (16)
#define TRX_SYS_CSR_TX_ALARM1_PNTIMER_CNT_VAL_BF_MSK (0x0000FFFF)
#define TRX_SYS_CSR_TX_ALARM1_PNTIMER_CNT_VAL_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_CVA_CS0_I register description at address offset 0x70
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/CVA_CS0_I
  * CVA Real Data Sample 0
  */

typedef union {
  struct {
    uint32_t ACCUM_DATA : 32;
    ///< CVA Real(I) Complex Sample Data
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} trx_sys_csr_cva_cs0_i_reg_t;

#define TRX_SYS_CSR_CVA_CS0_I_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_CVA_CS0_I_RD_MASK (0xffffffffU)
#define TRX_SYS_CSR_CVA_CS0_I_WR_MASK (0x00000000U)


///< CVA Real(I) Complex Sample Data
#define TRX_SYS_CSR_CVA_CS0_I_ACCUM_DATA_BF_OFF ( 0)
#define TRX_SYS_CSR_CVA_CS0_I_ACCUM_DATA_BF_WID (32)
#define TRX_SYS_CSR_CVA_CS0_I_ACCUM_DATA_BF_MSK (0xFFFFFFFF)
#define TRX_SYS_CSR_CVA_CS0_I_ACCUM_DATA_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_CVA_CS0_Q register description at address offset 0x74
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/CVA_CS0_Q
  * CVA Imaginary Data Sample 0
  */

typedef union {
  struct {
    uint32_t ACCUM_DATA : 32;
    ///< CVA Imaginary(Q) Complex Sample Data
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} trx_sys_csr_cva_cs0_q_reg_t;

#define TRX_SYS_CSR_CVA_CS0_Q_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_CVA_CS0_Q_RD_MASK (0xffffffffU)
#define TRX_SYS_CSR_CVA_CS0_Q_WR_MASK (0x00000000U)


///< CVA Imaginary(Q) Complex Sample Data
#define TRX_SYS_CSR_CVA_CS0_Q_ACCUM_DATA_BF_OFF ( 0)
#define TRX_SYS_CSR_CVA_CS0_Q_ACCUM_DATA_BF_WID (32)
#define TRX_SYS_CSR_CVA_CS0_Q_ACCUM_DATA_BF_MSK (0xFFFFFFFF)
#define TRX_SYS_CSR_CVA_CS0_Q_ACCUM_DATA_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_CVA_CS1_I register description at address offset 0x78
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/CVA_CS1_I
  * CVA Real Data Sample 1
  */

typedef union {
  struct {
    uint32_t ACCUM_DATA : 32;
    ///< CVA Real(I) Complex Sample Data
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} trx_sys_csr_cva_cs1_i_reg_t;

#define TRX_SYS_CSR_CVA_CS1_I_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_CVA_CS1_I_RD_MASK (0xffffffffU)
#define TRX_SYS_CSR_CVA_CS1_I_WR_MASK (0x00000000U)


///< CVA Real(I) Complex Sample Data
#define TRX_SYS_CSR_CVA_CS1_I_ACCUM_DATA_BF_OFF ( 0)
#define TRX_SYS_CSR_CVA_CS1_I_ACCUM_DATA_BF_WID (32)
#define TRX_SYS_CSR_CVA_CS1_I_ACCUM_DATA_BF_MSK (0xFFFFFFFF)
#define TRX_SYS_CSR_CVA_CS1_I_ACCUM_DATA_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_CVA_CS1_Q register description at address offset 0x7c
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/CVA_CS1_Q
  * CVA Imaginary Data Sample 1
  */

typedef union {
  struct {
    uint32_t ACCUM_DATA : 32;
    ///< CVA Imaginary(Q) Complex Sample Data
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} trx_sys_csr_cva_cs1_q_reg_t;

#define TRX_SYS_CSR_CVA_CS1_Q_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_CVA_CS1_Q_RD_MASK (0xffffffffU)
#define TRX_SYS_CSR_CVA_CS1_Q_WR_MASK (0x00000000U)


///< CVA Imaginary(Q) Complex Sample Data
#define TRX_SYS_CSR_CVA_CS1_Q_ACCUM_DATA_BF_OFF ( 0)
#define TRX_SYS_CSR_CVA_CS1_Q_ACCUM_DATA_BF_WID (32)
#define TRX_SYS_CSR_CVA_CS1_Q_ACCUM_DATA_BF_MSK (0xFFFFFFFF)
#define TRX_SYS_CSR_CVA_CS1_Q_ACCUM_DATA_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_CVA_ERROR register description at address offset 0x80
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/CVA_ERROR
  * CVA Error Status 0 and 1
  */

typedef union {
  struct {
    uint32_t CVA_ERROR_0 : 1;
    ///< CVA Error Status for Channel 0
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t CVA_ERROR_1 : 1;
    ///< CVA Error Status for Channel 1
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} trx_sys_csr_cva_err_reg_t;

#define TRX_SYS_CSR_CVA_ERR_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_CVA_ERR_RD_MASK (0x00000003U)
#define TRX_SYS_CSR_CVA_ERR_WR_MASK (0x00000000U)


///< CVA Error Status for Channel 0
#define TRX_SYS_CSR_CVA_ERR_CVA_ERR_0_BF_OFF ( 0)
#define TRX_SYS_CSR_CVA_ERR_CVA_ERR_0_BF_WID ( 1)
#define TRX_SYS_CSR_CVA_ERR_CVA_ERR_0_BF_MSK (0x00000001)
#define TRX_SYS_CSR_CVA_ERR_CVA_ERR_0_BF_DEF (0x00000000)

///< CVA Error Status for Channel 1
#define TRX_SYS_CSR_CVA_ERR_CVA_ERR_1_BF_OFF ( 1)
#define TRX_SYS_CSR_CVA_ERR_CVA_ERR_1_BF_WID ( 1)
#define TRX_SYS_CSR_CVA_ERR_CVA_ERR_1_BF_MSK (0x00000002)
#define TRX_SYS_CSR_CVA_ERR_CVA_ERR_1_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_CVA_CONFIG register description at address offset 0x84
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/CVA_CONFIG
  * CVA Configuration
  */

typedef union {
  struct {
    uint32_t ACCUM_REG_TRIG : 1;
    ///< CVA Register Trigger to begin accumulation. Write Only 1
    ///< AccessType="WO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
    uint32_t ACCUM_WINDOW : 4;
    ///< Set CVA Accumulation Window size of 2^(6+ACCUM_WINDOW) samples
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} trx_sys_csr_cva_cfg_reg_t;

#define TRX_SYS_CSR_CVA_CFG_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_CVA_CFG_RD_MASK (0x000000f0U)
#define TRX_SYS_CSR_CVA_CFG_WR_MASK (0x000000f1U)


///< CVA Register Trigger to begin accumulation. Write Only 1
#define TRX_SYS_CSR_CVA_CFG_ACCUM_TRIG_BF_OFF ( 0)
#define TRX_SYS_CSR_CVA_CFG_ACCUM_TRIG_BF_WID ( 1)
#define TRX_SYS_CSR_CVA_CFG_ACCUM_TRIG_BF_MSK (0x00000001)
#define TRX_SYS_CSR_CVA_CFG_ACCUM_TRIG_BF_DEF (0x00000000)

///< Set CVA Accumulation Window size of 2^(6+ACCUM_WINDOW) samples
#define TRX_SYS_CSR_CVA_CFG_ACCUM_WND_BF_OFF ( 4)
#define TRX_SYS_CSR_CVA_CFG_ACCUM_WND_BF_WID ( 4)
#define TRX_SYS_CSR_CVA_CFG_ACCUM_WND_BF_MSK (0x000000F0)
#define TRX_SYS_CSR_CVA_CFG_ACCUM_WND_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_MOD_AC_CAL_ENA register description at address offset 0x88
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/MOD_AC_CAL_ENA
  * MDM MOD Antenna Calibration Enable
  */

typedef union {
  struct {
    uint32_t MOD0_AC_ENA : 1;
    ///< 0,  // Antenna 0 Calibration Disable      1,  //  Antenna 0 Calibration
    ///< Enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
    uint32_t MOD1_AC_ENA : 1;
    ///< 0,  // Antenna 1 Calibration Disable     1,  //  Antenna 1 Calibration
    ///< Enable
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} trx_sys_csr_mod_ac_cal_ena_reg_t;

#define TRX_SYS_CSR_MOD_AC_CAL_ENA_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_MOD_AC_CAL_ENA_RD_MASK (0x00000011U)
#define TRX_SYS_CSR_MOD_AC_CAL_ENA_WR_MASK (0x00000011U)


///< 0,  // Antenna 0 Calibration Disable      1,  //  Antenna 0 Calibration
///< Enable
#define TRX_SYS_CSR_MOD_AC_CAL_ENA_MOD0_AC_ENA_BF_OFF ( 0)
#define TRX_SYS_CSR_MOD_AC_CAL_ENA_MOD0_AC_ENA_BF_WID ( 1)
#define TRX_SYS_CSR_MOD_AC_CAL_ENA_MOD0_AC_ENA_BF_MSK (0x00000001)
#define TRX_SYS_CSR_MOD_AC_CAL_ENA_MOD0_AC_ENA_BF_DEF (0x00000000)

///< 0,  // Antenna 1 Calibration Disable     1,  //  Antenna 1 Calibration
///< Enable
#define TRX_SYS_CSR_MOD_AC_CAL_ENA_MOD1_AC_ENA_BF_OFF ( 4)
#define TRX_SYS_CSR_MOD_AC_CAL_ENA_MOD1_AC_ENA_BF_WID ( 1)
#define TRX_SYS_CSR_MOD_AC_CAL_ENA_MOD1_AC_ENA_BF_MSK (0x00000010)
#define TRX_SYS_CSR_MOD_AC_CAL_ENA_MOD1_AC_ENA_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_MOD_CAPMUX_SEL register description at address offset 0x8c
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/MOD_CAPMUX_SEL
  * MDM MOD Out Capture Mux Select
  */

typedef union {
  struct {
    uint32_t MOD0_CAPMUX_SEL : 2;
    ///< 00,  //  pass through selects i_test_mux_in_0     01,  //  selects
    ///< local o_mod0_out data from antenna 0 channel     10,  //  selects
    ///< local o_mod1_out data from antenna 1 channel     11,  //  selects
    ///< local dmod nleq bist capture out data from antenna 0 channel
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t MOD1_CAPMUX_SEL : 2;
    ///< 00,  //  pass through, selects i_test_mux_in_1     01,  //  selects
    ///< local o_mod0_out data from antenna 0 channel     10,  //  selects
    ///< local o_mod1_out data from antenna 1 channel     11,  //  selects
    ///< local dmod nleq bist capture out data from antenna 1 channel
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} trx_sys_csr_mod_capmux_sel_reg_t;

#define TRX_SYS_CSR_MOD_CAPMUX_SEL_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_MOD_CAPMUX_SEL_RD_MASK (0x0000000fU)
#define TRX_SYS_CSR_MOD_CAPMUX_SEL_WR_MASK (0x0000000fU)


///< 00,  //  pass through selects i_test_mux_in_0     01,  //  selects
///< local o_mod0_out data from antenna 0 channel     10,  //  selects
///< local o_mod1_out data from antenna 1 channel     11,  //  selects
///< local dmod nleq bist capture out data from antenna 0 channel
#define TRX_SYS_CSR_MOD_CAPMUX_SEL_MOD0_CAPMUX_SEL_BF_OFF ( 0)
#define TRX_SYS_CSR_MOD_CAPMUX_SEL_MOD0_CAPMUX_SEL_BF_WID ( 2)
#define TRX_SYS_CSR_MOD_CAPMUX_SEL_MOD0_CAPMUX_SEL_BF_MSK (0x00000003)
#define TRX_SYS_CSR_MOD_CAPMUX_SEL_MOD0_CAPMUX_SEL_BF_DEF (0x00000000)

///< 00,  //  pass through, selects i_test_mux_in_1     01,  //  selects
///< local o_mod0_out data from antenna 0 channel     10,  //  selects
///< local o_mod1_out data from antenna 1 channel     11,  //  selects
///< local dmod nleq bist capture out data from antenna 1 channel
#define TRX_SYS_CSR_MOD_CAPMUX_SEL_MOD1_CAPMUX_SEL_BF_OFF ( 2)
#define TRX_SYS_CSR_MOD_CAPMUX_SEL_MOD1_CAPMUX_SEL_BF_WID ( 2)
#define TRX_SYS_CSR_MOD_CAPMUX_SEL_MOD1_CAPMUX_SEL_BF_MSK (0x0000000C)
#define TRX_SYS_CSR_MOD_CAPMUX_SEL_MOD1_CAPMUX_SEL_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_DMOD_AC_CAL_ENA register description at address offset 0x90
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/DMOD_AC_CAL_ENA
  * MDM DMOD Antenna Calibration Enable
  */

typedef union {
  struct {
    uint32_t DMOD0_AC_ENA : 1;
    ///< 0,  // Antenna 0 Calibration Disable      1,  //  Antenna 0 Calibration
    ///< Enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
    uint32_t DMOD1_AC_ENA : 1;
    ///< 0,  // Antenna 1 Calibration Disable     1,  //  Antenna 1 Calibration
    ///< Enable
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} trx_sys_csr_dmod_ac_cal_ena_reg_t;

#define TRX_SYS_CSR_DMOD_AC_CAL_ENA_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_DMOD_AC_CAL_ENA_RD_MASK (0x00000011U)
#define TRX_SYS_CSR_DMOD_AC_CAL_ENA_WR_MASK (0x00000011U)


///< 0,  // Antenna 0 Calibration Disable      1,  //  Antenna 0 Calibration
///< Enable
#define TRX_SYS_CSR_DMOD_AC_CAL_ENA_DMOD0_AC_ENA_BF_OFF ( 0)
#define TRX_SYS_CSR_DMOD_AC_CAL_ENA_DMOD0_AC_ENA_BF_WID ( 1)
#define TRX_SYS_CSR_DMOD_AC_CAL_ENA_DMOD0_AC_ENA_BF_MSK (0x00000001)
#define TRX_SYS_CSR_DMOD_AC_CAL_ENA_DMOD0_AC_ENA_BF_DEF (0x00000000)

///< 0,  // Antenna 1 Calibration Disable     1,  //  Antenna 1 Calibration
///< Enable
#define TRX_SYS_CSR_DMOD_AC_CAL_ENA_DMOD1_AC_ENA_BF_OFF ( 4)
#define TRX_SYS_CSR_DMOD_AC_CAL_ENA_DMOD1_AC_ENA_BF_WID ( 1)
#define TRX_SYS_CSR_DMOD_AC_CAL_ENA_DMOD1_AC_ENA_BF_MSK (0x00000010)
#define TRX_SYS_CSR_DMOD_AC_CAL_ENA_DMOD1_AC_ENA_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_TX_ALARM0_COUNTER register description at address offset 0x94
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/TX_ALARM0_COUNTER
  * SOC TX Alarm Counter/Overflow Antenna 0
  */

typedef union {
  struct {
    uint32_t COUNT : 31;
    ///< Merged SOC Error TX Alarm counter increments each time Merged SOC
    ///< TX Alarm (E1/Y1) is triggered. Supports 31 bit count value.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t FIFO_OVERFLOW : 1;
    ///< Overflow flag for Merged SOC Error TX Alarm counter. Overflow flag
    ///< bit is set to 1 when 31-bit counter rolls over and count restarts
    ///< from 0.
    ///< AccessType="RO/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} trx_sys_csr_tx_alarm0_cnter_reg_t;

#define TRX_SYS_CSR_TX_ALARM0_CNTER_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_TX_ALARM0_CNTER_RD_MASK (0xffffffffU)
#define TRX_SYS_CSR_TX_ALARM0_CNTER_WR_MASK (0x00000000U)


///< Merged SOC Error TX Alarm counter increments each time Merged SOC
///< TX Alarm (E1/Y1) is triggered. Supports 31 bit count value.
#define TRX_SYS_CSR_TX_ALARM0_CNTER_CNT_BF_OFF ( 0)
#define TRX_SYS_CSR_TX_ALARM0_CNTER_CNT_BF_WID (31)
#define TRX_SYS_CSR_TX_ALARM0_CNTER_CNT_BF_MSK (0x7FFFFFFF)
#define TRX_SYS_CSR_TX_ALARM0_CNTER_CNT_BF_DEF (0x00000000)

///< Overflow flag for Merged SOC Error TX Alarm counter. Overflow flag
///< bit is set to 1 when 31-bit counter rolls over and count restarts
///< from 0.
#define TRX_SYS_CSR_TX_ALARM0_CNTER_OVERFLOW_BF_OFF (31)
#define TRX_SYS_CSR_TX_ALARM0_CNTER_OVERFLOW_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM0_CNTER_OVERFLOW_BF_MSK (0x80000000)
#define TRX_SYS_CSR_TX_ALARM0_CNTER_OVERFLOW_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_TX_ALARM1_COUNTER register description at address offset 0x98
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/TX_ALARM1_COUNTER
  * SOC TX Alarm Counter/Overflow Antenna 1
  */

typedef union {
  struct {
    uint32_t COUNT : 31;
    ///< Merged SOC Error TX Alarm counter increments each time Merged SOC
    ///< TX Alarm (E1/Y1) is triggered. Supports 31 bit count value.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t FIFO_OVERFLOW : 1;
    ///< Overflow flag for Merged SOC Error TX Alarm counter. Overflow flag
    ///< bit is set to 1 when 31-bit counter rolls over and count restarts
    ///< from 0.
    ///< AccessType="RO/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} trx_sys_csr_tx_alarm1_cnter_reg_t;

#define TRX_SYS_CSR_TX_ALARM1_CNTER_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_TX_ALARM1_CNTER_RD_MASK (0xffffffffU)
#define TRX_SYS_CSR_TX_ALARM1_CNTER_WR_MASK (0x00000000U)


///< Merged SOC Error TX Alarm counter increments each time Merged SOC
///< TX Alarm (E1/Y1) is triggered. Supports 31 bit count value.
#define TRX_SYS_CSR_TX_ALARM1_CNTER_CNT_BF_OFF ( 0)
#define TRX_SYS_CSR_TX_ALARM1_CNTER_CNT_BF_WID (31)
#define TRX_SYS_CSR_TX_ALARM1_CNTER_CNT_BF_MSK (0x7FFFFFFF)
#define TRX_SYS_CSR_TX_ALARM1_CNTER_CNT_BF_DEF (0x00000000)

///< Overflow flag for Merged SOC Error TX Alarm counter. Overflow flag
///< bit is set to 1 when 31-bit counter rolls over and count restarts
///< from 0.
#define TRX_SYS_CSR_TX_ALARM1_CNTER_OVERFLOW_BF_OFF (31)
#define TRX_SYS_CSR_TX_ALARM1_CNTER_OVERFLOW_BF_WID ( 1)
#define TRX_SYS_CSR_TX_ALARM1_CNTER_OVERFLOW_BF_MSK (0x80000000)
#define TRX_SYS_CSR_TX_ALARM1_CNTER_OVERFLOW_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_DP_INIT_ENB register description at address offset 0x9c
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/DP_INIT_ENB
  * DP_INIT Datapath Initialization Enable Configuration
  */

typedef union {
  struct {
    uint32_t DP_INIT : 1;
    ///< Datapath Initialization Trigger Enable.
    ///< When set, it is broadcast to RX and TX channel IP blocks to trigger
    ///< datapath initialization.                                         Also
    ///< consumed by TX Insert and TX Alarm logic at TRX_SYS subsystem level
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} trx_sys_csr_dp_init_enb_reg_t;

#define TRX_SYS_CSR_DP_INIT_ENB_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_DP_INIT_ENB_RD_MASK (0x00000001U)
#define TRX_SYS_CSR_DP_INIT_ENB_WR_MASK (0x00000001U)


///< Datapath Initialization Trigger Enable.
///< When set, it is broadcast to RX and TX channel IP blocks to trigger
///< datapath initialization.                                         Also
///< consumed by TX Insert and TX Alarm logic at TRX_SYS subsystem level
#define TRX_SYS_CSR_DP_INIT_ENB_DP_INIT_BF_OFF ( 0)
#define TRX_SYS_CSR_DP_INIT_ENB_DP_INIT_BF_WID ( 1)
#define TRX_SYS_CSR_DP_INIT_ENB_DP_INIT_BF_MSK (0x00000001)
#define TRX_SYS_CSR_DP_INIT_ENB_DP_INIT_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_DP_DONE_STATUS register description at address offset 0xa0
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/DP_DONE_STATUS
  * DP_INIT_DONE Datapath Initialization Done Status
  */

typedef union {
  struct {
    uint32_t DP_INIT_DONE : 1;
    ///< Datapath Initialization Done Status - Aggregated across all IP blocks
    ///< dp_init_done and trx_sys subsystem level dp_init_done
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t DONE_CVA : 2;
    ///< CVA Antenna Channel 0 and 1 Datapath Initialization Done Status.
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t DONE_DMOD : 1;
    ///< DMOD Antenna Channel 0 and 1 Datapath Initialization Done Status.
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t DONE_MOD : 1;
    ///< MOD Antenna Channel 0 and 1 Datapath Initialization Done Status.
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t DONE_RXG0 : 1;
    ///< RXG Antenna Channel 0 Datapath Initialization Done Status.
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t DONE_RXG1 : 1;
    ///< RXG Antenna Channel 1 Datapath Initialization Done Status.
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t DONE_DDC0 : 1;
    ///< DDC Antenna Channel 0 Datapath Initialization Done Status.
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t DONE_DDC1 : 1;
    ///< DDC Antenna Channel 1 Datapath Initialization Done Status.
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t DONE_DUC0 : 1;
    ///< DUC Antenna Channel 0 Datapath Initialization Done Status.
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t DONE_DUC1 : 1;
    ///< DUC Antenna Channel 1 Datapath Initialization Done Status.
    ///< AccessType="RO/V" BitOffset="10" ResetValue="0x0"
    uint32_t DONE_TXG0 : 1;
    ///< TXG Antenna Channel 0 Datapath Initialization Done Status.
    ///< AccessType="RO/V" BitOffset="11" ResetValue="0x0"
    uint32_t DONE_TXG1 : 1;
    ///< TXG Antenna Channel 1 Datapath Initialization Done Status.
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t DONE_TXSR0 : 1;
    ///< TXSR Antenna Channel 0 Datapath Initialization Done Status.
    ///< AccessType="RO/V" BitOffset="13" ResetValue="0x0"
    uint32_t DONE_TXSR1 : 1;
    ///< TXSR Antenna Channel 1 Datapath Initialization Done Status.
    ///< AccessType="RO/V" BitOffset="14" ResetValue="0x0"
    uint32_t DONE_TXCPM0 : 1;
    ///< TXCPM Antenna Channel 0 Datapath Initialization Done Status.
    ///< AccessType="RO/V" BitOffset="15" ResetValue="0x0"
    uint32_t DONE_TXCPM1 : 1;
    ///< TXCPM Antenna Channel 1 Datapath Initialization Done Status.
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t DONE_TRX : 1;
    ///< TRX_SYS Antenna Channel 0 and 1 Datapath Initialization Done Status.
    ///< AccessType="RO/V" BitOffset="17" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} trx_sys_csr_dp_done_stat_reg_t;

#define TRX_SYS_CSR_DP_DONE_STAT_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_DP_DONE_STAT_RD_MASK (0x0003ffffU)
#define TRX_SYS_CSR_DP_DONE_STAT_WR_MASK (0x00000000U)


///< Datapath Initialization Done Status - Aggregated across all IP blocks
///< dp_init_done and trx_sys subsystem level dp_init_done
#define TRX_SYS_CSR_DP_DONE_STAT_DP_INIT_DONE_BF_OFF ( 0)
#define TRX_SYS_CSR_DP_DONE_STAT_DP_INIT_DONE_BF_WID ( 1)
#define TRX_SYS_CSR_DP_DONE_STAT_DP_INIT_DONE_BF_MSK (0x00000001)
#define TRX_SYS_CSR_DP_DONE_STAT_DP_INIT_DONE_BF_DEF (0x00000000)

///< CVA Antenna Channel 0 and 1 Datapath Initialization Done Status.
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_CVA_BF_OFF ( 1)
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_CVA_BF_WID ( 2)
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_CVA_BF_MSK (0x00000006)
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_CVA_BF_DEF (0x00000000)

///< DMOD Antenna Channel 0 and 1 Datapath Initialization Done Status.
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_DMOD_BF_OFF ( 3)
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_DMOD_BF_WID ( 1)
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_DMOD_BF_MSK (0x00000008)
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_DMOD_BF_DEF (0x00000000)

///< MOD Antenna Channel 0 and 1 Datapath Initialization Done Status.
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_MOD_BF_OFF ( 4)
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_MOD_BF_WID ( 1)
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_MOD_BF_MSK (0x00000010)
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_MOD_BF_DEF (0x00000000)

///< RXG Antenna Channel 0 Datapath Initialization Done Status.
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_RXG0_BF_OFF ( 5)
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_RXG0_BF_WID ( 1)
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_RXG0_BF_MSK (0x00000020)
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_RXG0_BF_DEF (0x00000000)

///< RXG Antenna Channel 1 Datapath Initialization Done Status.
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_RXG1_BF_OFF ( 6)
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_RXG1_BF_WID ( 1)
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_RXG1_BF_MSK (0x00000040)
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_RXG1_BF_DEF (0x00000000)

///< DDC Antenna Channel 0 Datapath Initialization Done Status.
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_DDC0_BF_OFF ( 7)
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_DDC0_BF_WID ( 1)
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_DDC0_BF_MSK (0x00000080)
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_DDC0_BF_DEF (0x00000000)

///< DDC Antenna Channel 1 Datapath Initialization Done Status.
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_DDC1_BF_OFF ( 8)
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_DDC1_BF_WID ( 1)
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_DDC1_BF_MSK (0x00000100)
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_DDC1_BF_DEF (0x00000000)

///< DUC Antenna Channel 0 Datapath Initialization Done Status.
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_DUC0_BF_OFF ( 9)
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_DUC0_BF_WID ( 1)
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_DUC0_BF_MSK (0x00000200)
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_DUC0_BF_DEF (0x00000000)

///< DUC Antenna Channel 1 Datapath Initialization Done Status.
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_DUC1_BF_OFF (10)
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_DUC1_BF_WID ( 1)
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_DUC1_BF_MSK (0x00000400)
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_DUC1_BF_DEF (0x00000000)

///< TXG Antenna Channel 0 Datapath Initialization Done Status.
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_TXG0_BF_OFF (11)
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_TXG0_BF_WID ( 1)
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_TXG0_BF_MSK (0x00000800)
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_TXG0_BF_DEF (0x00000000)

///< TXG Antenna Channel 1 Datapath Initialization Done Status.
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_TXG1_BF_OFF (12)
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_TXG1_BF_WID ( 1)
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_TXG1_BF_MSK (0x00001000)
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_TXG1_BF_DEF (0x00000000)

///< TXSR Antenna Channel 0 Datapath Initialization Done Status.
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_TXSR0_BF_OFF (13)
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_TXSR0_BF_WID ( 1)
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_TXSR0_BF_MSK (0x00002000)
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_TXSR0_BF_DEF (0x00000000)

///< TXSR Antenna Channel 1 Datapath Initialization Done Status.
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_TXSR1_BF_OFF (14)
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_TXSR1_BF_WID ( 1)
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_TXSR1_BF_MSK (0x00004000)
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_TXSR1_BF_DEF (0x00000000)

///< TXCPM Antenna Channel 0 Datapath Initialization Done Status.
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_TXCPM0_BF_OFF (15)
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_TXCPM0_BF_WID ( 1)
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_TXCPM0_BF_MSK (0x00008000)
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_TXCPM0_BF_DEF (0x00000000)

///< TXCPM Antenna Channel 1 Datapath Initialization Done Status.
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_TXCPM1_BF_OFF (16)
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_TXCPM1_BF_WID ( 1)
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_TXCPM1_BF_MSK (0x00010000)
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_TXCPM1_BF_DEF (0x00000000)

///< TRX_SYS Antenna Channel 0 and 1 Datapath Initialization Done Status.
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_TRX_BF_OFF (17)
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_TRX_BF_WID ( 1)
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_TRX_BF_MSK (0x00020000)
#define TRX_SYS_CSR_DP_DONE_STAT_DONE_TRX_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_TRX_INT_STATUS register description at address offset 0xc0
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/TRX_INT_STATUS
  * TRX_SYS Interrupt Status
  */

typedef union {
  struct {
    uint32_t CVA_ERROR_0 : 1;
    ///< CVA Error Interrupt Status for Channel 0.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t CVA_ERROR_1 : 1;
    ///< CVA Error Interrupt Status for Channel 1.
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t SMON_INT : 1;
    ///< SMON error interrupt status
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} trx_sys_csr_trx_int_stat_reg_t;

#define TRX_SYS_CSR_TRX_INT_STAT_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_TRX_INT_STAT_RD_MASK (0x00000007U)
#define TRX_SYS_CSR_TRX_INT_STAT_WR_MASK (0x00000000U)


///< CVA Error Interrupt Status for Channel 0.
#define TRX_SYS_CSR_TRX_INT_STAT_CVA_ERR_0_BF_OFF ( 0)
#define TRX_SYS_CSR_TRX_INT_STAT_CVA_ERR_0_BF_WID ( 1)
#define TRX_SYS_CSR_TRX_INT_STAT_CVA_ERR_0_BF_MSK (0x00000001)
#define TRX_SYS_CSR_TRX_INT_STAT_CVA_ERR_0_BF_DEF (0x00000000)

///< CVA Error Interrupt Status for Channel 1.
#define TRX_SYS_CSR_TRX_INT_STAT_CVA_ERR_1_BF_OFF ( 1)
#define TRX_SYS_CSR_TRX_INT_STAT_CVA_ERR_1_BF_WID ( 1)
#define TRX_SYS_CSR_TRX_INT_STAT_CVA_ERR_1_BF_MSK (0x00000002)
#define TRX_SYS_CSR_TRX_INT_STAT_CVA_ERR_1_BF_DEF (0x00000000)

///< SMON error interrupt status
#define TRX_SYS_CSR_TRX_INT_STAT_SMON_INT_BF_OFF ( 2)
#define TRX_SYS_CSR_TRX_INT_STAT_SMON_INT_BF_WID ( 1)
#define TRX_SYS_CSR_TRX_INT_STAT_SMON_INT_BF_MSK (0x00000004)
#define TRX_SYS_CSR_TRX_INT_STAT_SMON_INT_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_TRX_INT_HI_EN register description at address offset 0xc4
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/TRX_INT_HI_EN
  * TRX_SYS Interrupt HI Enable
  */

typedef union {
  struct {
    uint32_t INT_HI_EN : 3;
    ///< Enable Interrupt High
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} trx_sys_csr_trx_int_hi_en_reg_t;

#define TRX_SYS_CSR_TRX_INT_HI_EN_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_TRX_INT_HI_EN_RD_MASK (0x00000007U)
#define TRX_SYS_CSR_TRX_INT_HI_EN_WR_MASK (0x00000007U)


///< Enable Interrupt High
#define TRX_SYS_CSR_TRX_INT_HI_EN_INT_HI_EN_BF_OFF ( 0)
#define TRX_SYS_CSR_TRX_INT_HI_EN_INT_HI_EN_BF_WID ( 3)
#define TRX_SYS_CSR_TRX_INT_HI_EN_INT_HI_EN_BF_MSK (0x00000007)
#define TRX_SYS_CSR_TRX_INT_HI_EN_INT_HI_EN_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_TRX_INT_LO_EN register description at address offset 0xc8
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/TRX_INT_LO_EN
  * TRX_SYS Interrupt LO Enable
  */

typedef union {
  struct {
    uint32_t INT_LO_EN : 3;
    ///< Enable Interrupt Low
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} trx_sys_csr_trx_int_lo_en_reg_t;

#define TRX_SYS_CSR_TRX_INT_LO_EN_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_TRX_INT_LO_EN_RD_MASK (0x00000007U)
#define TRX_SYS_CSR_TRX_INT_LO_EN_WR_MASK (0x00000007U)


///< Enable Interrupt Low
#define TRX_SYS_CSR_TRX_INT_LO_EN_INT_LO_EN_BF_OFF ( 0)
#define TRX_SYS_CSR_TRX_INT_LO_EN_INT_LO_EN_BF_WID ( 3)
#define TRX_SYS_CSR_TRX_INT_LO_EN_INT_LO_EN_BF_MSK (0x00000007)
#define TRX_SYS_CSR_TRX_INT_LO_EN_INT_LO_EN_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_TRX_INT_CLEAR register description at address offset 0xcc
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/TRX_INT_CLEAR
  * TRX_SYS Interrupt Clear
  */

typedef union {
  struct {
    uint32_t INT_CLR : 3;
    ///< Interrupt source clear
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} trx_sys_csr_trx_int_clr_reg_t;

#define TRX_SYS_CSR_TRX_INT_CLR_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_TRX_INT_CLR_RD_MASK (0x00000007U)
#define TRX_SYS_CSR_TRX_INT_CLR_WR_MASK (0x00000007U)


///< Interrupt source clear
#define TRX_SYS_CSR_TRX_INT_CLR_INT_CLR_BF_OFF ( 0)
#define TRX_SYS_CSR_TRX_INT_CLR_INT_CLR_BF_WID ( 3)
#define TRX_SYS_CSR_TRX_INT_CLR_INT_CLR_BF_MSK (0x00000007)
#define TRX_SYS_CSR_TRX_INT_CLR_INT_CLR_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_TRX_INT_FORCE register description at address offset 0xd0
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/TRX_INT_FORCE
  * TRX_SYS Interrupt Force
  */

typedef union {
  struct {
    uint32_t INT_FORCE : 3;
    ///< Interrupt source force
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} trx_sys_csr_trx_int_force_reg_t;

#define TRX_SYS_CSR_TRX_INT_FORCE_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_TRX_INT_FORCE_RD_MASK (0x00000007U)
#define TRX_SYS_CSR_TRX_INT_FORCE_WR_MASK (0x00000007U)


///< Interrupt source force
#define TRX_SYS_CSR_TRX_INT_FORCE_INT_FORCE_BF_OFF ( 0)
#define TRX_SYS_CSR_TRX_INT_FORCE_INT_FORCE_BF_WID ( 3)
#define TRX_SYS_CSR_TRX_INT_FORCE_INT_FORCE_BF_MSK (0x00000007)
#define TRX_SYS_CSR_TRX_INT_FORCE_INT_FORCE_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_SMON_MAP_SMON_R0 register description at address offset 0x1e0
  *
  * Register default value:        0x40000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/SMON_MAP/SMON_r0
  * AW_smon CONTROL0 register
  */

typedef union {
  struct {
    uint32_t SMON_ENABLE : 1;
    ///< enable the SMON counters
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t RSVD0 : 3;
    ///< reserved
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t SMON0_FUNCTION : 3;
    ///< SMON0 function    3'h0 = free running function. Trigger to accumulate
    ///< the value into the engine SMON_COUNT when an event is valid.    3'h1
    ///< = free running function. Trigger to accumulate a fixed value of 1
    ///< into the engine SMON_COUNT when an event is valid.    3'h2 = max function.
    ///< Trigger to update max value when an event is valid and larger than
    ///< the current value stored in the engine SMON_COUNT.    3'h3 = Timestamp
    ///< First Mode. Capture the timer value on the first occurance of an event.
    ///< Need to write CONTROL01 to reset.    3'h4 = Timestamp Mode. Capture
    ///< the timer value on every occurance of an event.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t SMON0_FUNCTION_COMPARE : 1;
    ///< SMON0 function_compare    1'h0 = compare mode disabled    1'h1 = compare
    ///< mode enabled
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t SMON1_FUNCTION : 3;
    ///< SMON1 function    3'h0 = free running function. Trigger to accumulate
    ///< the value into the engine SMON_COUNT when an event is valid.    3'h1
    ///< = free running function. Trigger to accumulate a fixed value of 1
    ///< into the engine SMON_COUNT when an event is valid.    3'h2 = max function.
    ///< Trigger to update max value when an event is valid and larger than
    ///< the current value stored in the engine SMON_COUNT.    3'h3 = Timestamp
    ///< First Mode. Capture the timer value on the first occurance of an event.
    ///< Need to write CONTROL01 to reset.    3'h4 = Timestamp Mode. Capture
    ///< the timer value on every occurance of an event.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t SMON1_FUNCTION_COMPARE : 1;
    ///< SMON1 function_compare    1'h0 = compare mode disabled    1'h1 = compare
    ///< mode enabled
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t SMON_MODE : 4;
    ///< SMON mode     4'h0 = Independant Mode. SMON0_COUNT & SMON1_COUNT operate
    ///< independantly as their function is configured.       4'h1 = Average
    ///< Latency Mode. SMON0 trigger starts timer & SMON1 trigger stops timer.
    ///< SMON0_COUNT accumulates occurances and SMON1_COUNT accumulates timer
    ///< values. For multiple stop for a single start, accumulate  start_to_stop1,
    ///< start_to_stop1stop2 ...    4'h2 = MinMax Latency Mode,. SMON0 trigger
    ///< starts timer & SMON1 trigger stops timer. SMON0_COUNT maintains the
    ///< minimum timer value and SMON1_COUNT maintains the maximum timer value.
    ///< 4'h3 = Average Mode.   SMON0 trigger increments SMON0_COUNT and the
    ///< value is accumulated in SMON1_COUNT. SMON1 events are disabled.
    ///< 4'h4 = Average Lantecy Mode 2. same as mode01, but only accumulate
    ///< the first start_to_stop1 if there are multiple stop for each start.
    ///< 4'h5 = Average Latency Mode 3. same as mode01, but accumualte the
    ///< incremental start_to_stop1, stop1_to_stop2... if there are multiple
    ///< stop for each start.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t STOPCOUNTEROVFL : 1;
    ///< configure to stop on counter0 or counter1 overflow
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t INTCOUNTEROVFL : 1;
    ///< configure to interupt on counter0 or counter1 overflow
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t STATCOUNTER0OVFL : 1;
    ///< status for counter0 overflow. A value of '1' signifies counter0 overflow.
    ///< AccessType="RW/V" BitOffset="18" ResetValue="0x0"
    uint32_t STATCOUNTER1OVFL : 1;
    ///< status for counter1 overflow. A value of '1' signifies counter1 overflow.
    ///< AccessType="RW/V" BitOffset="19" ResetValue="0x0"
    uint32_t STOPTIMEROVFL : 1;
    ///< configure to stop on timer overflow or timer>maxvalue
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t INTTIMEROVFL : 1;
    ///< configure to interrupt on timer overflow or timer>maxvalue
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t STATTIMEROVFL : 1;
    ///< status of timer overflow. A value of '1' signifies timer overflow,
    ///< or timer>maxvalue.
    ///< AccessType="RW/V" BitOffset="22" ResetValue="0x0"
    uint32_t RSVD1 : 1;
    ///< reserved
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t TIMER_PRESCALE : 5;
    ///< timer prescale    5'h00 = mode00, increment timer every      1 clock
    ///< 5'h01 = mode01, increment timer every      2 clocks    5'h02 = mode02,
    ///< increment timer every      4 clocks    5'h03 = mode03, increment timer
    ///< every      8 clocks    5'h04 = mode04, increment timer every     16
    ///< clocks    5'h05 = mode05, increment timer every     32 clocks    5'h06
    ///< = mode06, increment timer every     64 clocks    5'h07 = mode07, increment
    ///< timer every    128 clocks    5'h08 = mode08, increment timer every
    ///< 256 clocks    5'h09 = mode09, increment timer every    512 clocks
    ///< 5'h0a = mode10, increment timer every   1024 clocks    5'h0b = mode11,
    ///< increment timer every   2048 clocks    5'h0c = mode12, increment timer
    ///< every   4096 clocks    5'h0d = mode13, increment timer every   8192
    ///< clocks    5'h0e = mode14, increment timer every  16384 clocks    5'h0f
    ///< = mode15, increment timer every  32768 clocks    5'h10 = mode16, increment
    ///< timer every  65536 clocks    5'h11 = mode17, increment timer every
    ///< 131072 clocks    5'h12 = mode18, increment timer every 262144 clocks
    ///< 5'h13 = mode19, increment timer every 524288 clocks
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t RSVD2 : 1;
    ///< reserved
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
    uint32_t VERSION : 2;
    ///< version
    ///< AccessType="RO" BitOffset="30" ResetValue="0x1"
  } ;
  uint32_t value;
} trx_sys_csr_smon_r0_reg_t;

#define TRX_SYS_CSR_SMON_R0_DEFAULT (0x40000000U)
#define TRX_SYS_CSR_SMON_R0_RD_MASK (0xffffffffU)
#define TRX_SYS_CSR_SMON_R0_WR_MASK (0x3fffffffU)


///< enable the SMON counters
#define TRX_SYS_CSR_SMON_R0_SMON_EN_BF_OFF ( 0)
#define TRX_SYS_CSR_SMON_R0_SMON_EN_BF_WID ( 1)
#define TRX_SYS_CSR_SMON_R0_SMON_EN_BF_MSK (0x00000001)
#define TRX_SYS_CSR_SMON_R0_SMON_EN_BF_DEF (0x00000000)

///< reserved
#define TRX_SYS_CSR_SMON_R0_RSVD0_BF_OFF ( 1)
#define TRX_SYS_CSR_SMON_R0_RSVD0_BF_WID ( 3)
#define TRX_SYS_CSR_SMON_R0_RSVD0_BF_MSK (0x0000000E)
#define TRX_SYS_CSR_SMON_R0_RSVD0_BF_DEF (0x00000000)

///< SMON0 function    3'h0 = free running function. Trigger to accumulate
///< the value into the engine SMON_COUNT when an event is valid.    3'h1
///< = free running function. Trigger to accumulate a fixed value of 1
///< into the engine SMON_COUNT when an event is valid.    3'h2 = max function.
///< Trigger to update max value when an event is valid and larger than
///< the current value stored in the engine SMON_COUNT.    3'h3 = Timestamp
///< First Mode. Capture the timer value on the first occurance of an event.
///< Need to write CONTROL01 to reset.    3'h4 = Timestamp Mode. Capture
///< the timer value on every occurance of an event.
#define TRX_SYS_CSR_SMON_R0_SMON0_FUNCTION_BF_OFF ( 4)
#define TRX_SYS_CSR_SMON_R0_SMON0_FUNCTION_BF_WID ( 3)
#define TRX_SYS_CSR_SMON_R0_SMON0_FUNCTION_BF_MSK (0x00000070)
#define TRX_SYS_CSR_SMON_R0_SMON0_FUNCTION_BF_DEF (0x00000000)

///< SMON0 function_compare    1'h0 = compare mode disabled    1'h1 = compare
///< mode enabled
#define TRX_SYS_CSR_SMON_R0_SMON0_FUNCTION_CMP_BF_OFF ( 7)
#define TRX_SYS_CSR_SMON_R0_SMON0_FUNCTION_CMP_BF_WID ( 1)
#define TRX_SYS_CSR_SMON_R0_SMON0_FUNCTION_CMP_BF_MSK (0x00000080)
#define TRX_SYS_CSR_SMON_R0_SMON0_FUNCTION_CMP_BF_DEF (0x00000000)

///< SMON1 function    3'h0 = free running function. Trigger to accumulate
///< the value into the engine SMON_COUNT when an event is valid.    3'h1
///< = free running function. Trigger to accumulate a fixed value of 1
///< into the engine SMON_COUNT when an event is valid.    3'h2 = max function.
///< Trigger to update max value when an event is valid and larger than
///< the current value stored in the engine SMON_COUNT.    3'h3 = Timestamp
///< First Mode. Capture the timer value on the first occurance of an event.
///< Need to write CONTROL01 to reset.    3'h4 = Timestamp Mode. Capture
///< the timer value on every occurance of an event.
#define TRX_SYS_CSR_SMON_R0_SMON1_FUNCTION_BF_OFF ( 8)
#define TRX_SYS_CSR_SMON_R0_SMON1_FUNCTION_BF_WID ( 3)
#define TRX_SYS_CSR_SMON_R0_SMON1_FUNCTION_BF_MSK (0x00000700)
#define TRX_SYS_CSR_SMON_R0_SMON1_FUNCTION_BF_DEF (0x00000000)

///< SMON1 function_compare    1'h0 = compare mode disabled    1'h1 = compare
///< mode enabled
#define TRX_SYS_CSR_SMON_R0_SMON1_FUNCTION_CMP_BF_OFF (11)
#define TRX_SYS_CSR_SMON_R0_SMON1_FUNCTION_CMP_BF_WID ( 1)
#define TRX_SYS_CSR_SMON_R0_SMON1_FUNCTION_CMP_BF_MSK (0x00000800)
#define TRX_SYS_CSR_SMON_R0_SMON1_FUNCTION_CMP_BF_DEF (0x00000000)

///< SMON mode     4'h0 = Independant Mode. SMON0_COUNT & SMON1_COUNT operate
///< independantly as their function is configured.       4'h1 = Average
///< Latency Mode. SMON0 trigger starts timer & SMON1 trigger stops timer.
///< SMON0_COUNT accumulates occurances and SMON1_COUNT accumulates timer
///< values. For multiple stop for a single start, accumulate  start_to_stop1,
///< start_to_stop1stop2 ...    4'h2 = MinMax Latency Mode,. SMON0 trigger
///< starts timer & SMON1 trigger stops timer. SMON0_COUNT maintains the
///< minimum timer value and SMON1_COUNT maintains the maximum timer value.
///< 4'h3 = Average Mode.   SMON0 trigger increments SMON0_COUNT and the
///< value is accumulated in SMON1_COUNT. SMON1 events are disabled.
///< 4'h4 = Average Lantecy Mode 2. same as mode01, but only accumulate
///< the first start_to_stop1 if there are multiple stop for each start.
///< 4'h5 = Average Latency Mode 3. same as mode01, but accumualte the
///< incremental start_to_stop1, stop1_to_stop2... if there are multiple
///< stop for each start.
#define TRX_SYS_CSR_SMON_R0_SMON_MODE_BF_OFF (12)
#define TRX_SYS_CSR_SMON_R0_SMON_MODE_BF_WID ( 4)
#define TRX_SYS_CSR_SMON_R0_SMON_MODE_BF_MSK (0x0000F000)
#define TRX_SYS_CSR_SMON_R0_SMON_MODE_BF_DEF (0x00000000)

///< configure to stop on counter0 or counter1 overflow
#define TRX_SYS_CSR_SMON_R0_STOPCNTEROVFL_BF_OFF (16)
#define TRX_SYS_CSR_SMON_R0_STOPCNTEROVFL_BF_WID ( 1)
#define TRX_SYS_CSR_SMON_R0_STOPCNTEROVFL_BF_MSK (0x00010000)
#define TRX_SYS_CSR_SMON_R0_STOPCNTEROVFL_BF_DEF (0x00000000)

///< configure to interupt on counter0 or counter1 overflow
#define TRX_SYS_CSR_SMON_R0_INTCNTEROVFL_BF_OFF (17)
#define TRX_SYS_CSR_SMON_R0_INTCNTEROVFL_BF_WID ( 1)
#define TRX_SYS_CSR_SMON_R0_INTCNTEROVFL_BF_MSK (0x00020000)
#define TRX_SYS_CSR_SMON_R0_INTCNTEROVFL_BF_DEF (0x00000000)

///< status for counter0 overflow. A value of '1' signifies counter0 overflow.
#define TRX_SYS_CSR_SMON_R0_STATCNTER0OVFL_BF_OFF (18)
#define TRX_SYS_CSR_SMON_R0_STATCNTER0OVFL_BF_WID ( 1)
#define TRX_SYS_CSR_SMON_R0_STATCNTER0OVFL_BF_MSK (0x00040000)
#define TRX_SYS_CSR_SMON_R0_STATCNTER0OVFL_BF_DEF (0x00000000)

///< status for counter1 overflow. A value of '1' signifies counter1 overflow.
#define TRX_SYS_CSR_SMON_R0_STATCNTER1OVFL_BF_OFF (19)
#define TRX_SYS_CSR_SMON_R0_STATCNTER1OVFL_BF_WID ( 1)
#define TRX_SYS_CSR_SMON_R0_STATCNTER1OVFL_BF_MSK (0x00080000)
#define TRX_SYS_CSR_SMON_R0_STATCNTER1OVFL_BF_DEF (0x00000000)

///< configure to stop on timer overflow or timer>maxvalue
#define TRX_SYS_CSR_SMON_R0_STOPTIMEROVFL_BF_OFF (20)
#define TRX_SYS_CSR_SMON_R0_STOPTIMEROVFL_BF_WID ( 1)
#define TRX_SYS_CSR_SMON_R0_STOPTIMEROVFL_BF_MSK (0x00100000)
#define TRX_SYS_CSR_SMON_R0_STOPTIMEROVFL_BF_DEF (0x00000000)

///< configure to interrupt on timer overflow or timer>maxvalue
#define TRX_SYS_CSR_SMON_R0_INTTIMEROVFL_BF_OFF (21)
#define TRX_SYS_CSR_SMON_R0_INTTIMEROVFL_BF_WID ( 1)
#define TRX_SYS_CSR_SMON_R0_INTTIMEROVFL_BF_MSK (0x00200000)
#define TRX_SYS_CSR_SMON_R0_INTTIMEROVFL_BF_DEF (0x00000000)

///< status of timer overflow. A value of '1' signifies timer overflow,
///< or timer>maxvalue.
#define TRX_SYS_CSR_SMON_R0_STATTIMEROVFL_BF_OFF (22)
#define TRX_SYS_CSR_SMON_R0_STATTIMEROVFL_BF_WID ( 1)
#define TRX_SYS_CSR_SMON_R0_STATTIMEROVFL_BF_MSK (0x00400000)
#define TRX_SYS_CSR_SMON_R0_STATTIMEROVFL_BF_DEF (0x00000000)

///< reserved
#define TRX_SYS_CSR_SMON_R0_RSVD1_BF_OFF (23)
#define TRX_SYS_CSR_SMON_R0_RSVD1_BF_WID ( 1)
#define TRX_SYS_CSR_SMON_R0_RSVD1_BF_MSK (0x00800000)
#define TRX_SYS_CSR_SMON_R0_RSVD1_BF_DEF (0x00000000)

///< timer prescale    5'h00 = mode00, increment timer every      1 clock
///< 5'h01 = mode01, increment timer every      2 clocks    5'h02 = mode02,
///< increment timer every      4 clocks    5'h03 = mode03, increment timer
///< every      8 clocks    5'h04 = mode04, increment timer every     16
///< clocks    5'h05 = mode05, increment timer every     32 clocks    5'h06
///< = mode06, increment timer every     64 clocks    5'h07 = mode07, increment
///< timer every    128 clocks    5'h08 = mode08, increment timer every
///< 256 clocks    5'h09 = mode09, increment timer every    512 clocks
///< 5'h0a = mode10, increment timer every   1024 clocks    5'h0b = mode11,
///< increment timer every   2048 clocks    5'h0c = mode12, increment timer
///< every   4096 clocks    5'h0d = mode13, increment timer every   8192
///< clocks    5'h0e = mode14, increment timer every  16384 clocks    5'h0f
///< = mode15, increment timer every  32768 clocks    5'h10 = mode16, increment
///< timer every  65536 clocks    5'h11 = mode17, increment timer every
///< 131072 clocks    5'h12 = mode18, increment timer every 262144 clocks
///< 5'h13 = mode19, increment timer every 524288 clocks
#define TRX_SYS_CSR_SMON_R0_TIMER_PRESCALE_BF_OFF (24)
#define TRX_SYS_CSR_SMON_R0_TIMER_PRESCALE_BF_WID ( 5)
#define TRX_SYS_CSR_SMON_R0_TIMER_PRESCALE_BF_MSK (0x1F000000)
#define TRX_SYS_CSR_SMON_R0_TIMER_PRESCALE_BF_DEF (0x00000000)

///< reserved
#define TRX_SYS_CSR_SMON_R0_RSVD2_BF_OFF (29)
#define TRX_SYS_CSR_SMON_R0_RSVD2_BF_WID ( 1)
#define TRX_SYS_CSR_SMON_R0_RSVD2_BF_MSK (0x20000000)
#define TRX_SYS_CSR_SMON_R0_RSVD2_BF_DEF (0x00000000)

///< version
#define TRX_SYS_CSR_SMON_R0_VER_BF_OFF (30)
#define TRX_SYS_CSR_SMON_R0_VER_BF_WID ( 2)
#define TRX_SYS_CSR_SMON_R0_VER_BF_MSK (0xC0000000)
#define TRX_SYS_CSR_SMON_R0_VER_BF_DEF (0x40000000)


/** @brief TRX_SYS_CSR_CSR_MAP_SMON_MAP_SMON_R1 register description at address offset 0x1e4
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/SMON_MAP/SMON_r1
  * AW_smon CONTROL1 register
  */

typedef union {
  struct {
    uint32_t MODE0 : 8;
    ///< select input signal for SMON0 engine. <br/> SMON mode ID = Name of
    ///< SMON Input Signal.<br/>
    ///< [0]  = TRX_SYS APB Config Write <br/>
    ///< [1]  = TRX_SYS APB Config Read  <br/>
    ///< [2]  = RX DMOD Ch 0 input Valid <br/>
    ///< [3]  = RX DMOD Ch 1 input Valid <br/>
    ///< [4]  = RX DMOD SWG input Valid <br/>
    ///< [5]  = RX DMOD NCO input Valid <br/>
    ///< [6]  = RX DMOD Ch 0 output Valid <br/>
    ///< [7]  = RX DMOD Ch 1 output Valid <br/>
    ///< [8]  = RX DDC0 Complex output Valid <br/>
    ///< [9]  = RX DDC0 Real output Valid <br/>
    ///< [10] = RX DDC1 Complex output Valid <br/>
    ///< [11] = RX DDC1 Real output Valid <br/>
    ///< [12] = RX RXG0 iqr2vex output Valid <br/>
    ///< [13] = RX RXG1 iqr2vex output Valid <br/>
    ///< [14] = RX RX Capture Test Mux 0 input Valid <br/>
    ///< [15] = RX RX Capture Test Mux 1 input Valid <br/>
    ///< [16] = RX RX Capture Test Mux 0 output Valid <br/>
    ///< [17] = RX RX Capture Test Mux 1 output Valid <br/>
    ///< [18] = RX CVA Error Ch 0 <br/>
    ///< [19] = RX CVA Error Ch 1 <br/>
    ///< [20] = TX insert V2D Ch0 input valid <br/>
    ///< [21] = TX insert V2D Ch1 input valid <br/>
    ///< [22] = TX insert TTSG Ch0/Ch1 input valid <br/>
    ///< [23] = TX insert Mem0 Ch0/Ch1 input valid <br/>
    ///< [24] = TX insert Mem1 Ch0/Ch1 input valid <br/>
    ///< [25] = TX vex2iqr Ch0 Complex output valid DUC0 <br/>
    ///< [26] = TX vex2iqr Ch0 Real output valid DUC0 <br/>
    ///< [27] = TX vex2iqr Ch1 Complex output valid DUC1 <br/>
    ///< [28] = TX vex2iqr Ch1 Real output valid DUC1 <br/>
    ///< [29] = TX DUC0 output valid <br/>
    ///< [30] = TX DUC1 output valid <br/>
    ///< [31] = TX TXG0 output valid <br/>
    ///< [32] = TX TXG1 output valid <br/>
    ///< [33] = TX MOD Ch0 output valid <br/>
    ///< [34] = TX MOD Ch1 output valid <br/>
    ///< [35] = TX MOD SWG input valid <br/>
    ///< [36] = TX MOD NCO input valid  <br/>
    ///< [37] = TX TXG0/1 Fuse Disable <br/>
    ///< [38] = TX Alarm Ch 0 SOC Error Force M1  <br/>
    ///< [39] = TX Alarm Ch 0 SOC Error Y1  <br/>
    ///< [40] = TX Alarm Ch 0 SOC Error T1 <br/>
    ///< [41] = TX Alarm Ch 0 TXCPM Force M2 <br/>
    ///< [42] = TX Alarm Ch 0 TXCPM Y2  <br/>
    ///< [43] = TX Alarm Ch 0 TXCPM T2 <br/>
    ///< [44] = TX Alarm Ch 0 TXSR Force M3 <br/>
    ///< [45] = TX Alarm Ch 0 TXSR Y3  <br/>
    ///< [46] = TX Alarm Ch 0 TXSR T3 <br/>
    ///< [47] = TX Alarm Ch 0 RCS Output Alarm <br/>
    ///< [48] = TX Alarm Ch 1 SOC Error Force M1  <br/>
    ///< [49] = TX Alarm Ch 1 SOC Error Y1  <br/>
    ///< [50] = TX Alarm Ch 1 SOC Error T1 <br/>
    ///< [51] = TX Alarm Ch 1 TXCPM Force M2 <br/>
    ///< [52] = TX Alarm Ch 1 TXCPM Y2  <br/>
    ///< [53] = TX Alarm Ch 1 TXCPM T2 <br/>
    ///< [54] = TX Alarm Ch 1 TXSR Force M3 <br/>
    ///< [55] = TX Alarm Ch 1 TXSR Y3  <br/>
    ///< [56] = TX Alarm Ch 1 TXSR T3 <br/>
    ///< [57] = TX Alarm Ch 1 RCS Output Alarm
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t MODE1 : 8;
    ///< select input signal for SMON1 engine. <br/> SMON mode ID = Name of
    ///< SMON Input Signal.<br/>
    ///< [0]  = TRX_SYS APB Config Write <br/>
    ///< [1]  = TRX_SYS APB Config Read  <br/>
    ///< [2]  = RX DMOD Ch 0 input Valid <br/>
    ///< [3]  = RX DMOD Ch 1 input Valid <br/>
    ///< [4]  = RX DMOD SWG input Valid <br/>
    ///< [5]  = RX DMOD NCO input Valid <br/>
    ///< [6]  = RX DMOD Ch 0 output Valid <br/>
    ///< [7]  = RX DMOD Ch 1 output Valid <br/>
    ///< [8]  = RX DDC0 Complex output Valid <br/>
    ///< [9]  = RX DDC0 Real output Valid <br/>
    ///< [10] = RX DDC1 Complex output Valid <br/>
    ///< [11] = RX DDC1 Real output Valid <br/>
    ///< [12] = RX RXG0 iqr2vex output Valid <br/>
    ///< [13] = RX RXG1 iqr2vex output Valid <br/>
    ///< [14] = RX RX Capture Test Mux 0 input Valid <br/>
    ///< [15] = RX RX Capture Test Mux 1 input Valid <br/>
    ///< [16] = RX RX Capture Test Mux 0 output Valid <br/>
    ///< [17] = RX RX Capture Test Mux 1 output Valid <br/>
    ///< [18] = RX CVA Error Ch 0 <br/>
    ///< [19] = RX CVA Error Ch 1 <br/>
    ///< [20] = TX insert V2D Ch0 input valid <br/>
    ///< [21] = TX insert V2D Ch1 input valid <br/>
    ///< [22] = TX insert TTSG Ch0/Ch1 input valid <br/>
    ///< [23] = TX insert Mem0 Ch0/Ch1 input valid <br/>
    ///< [24] = TX insert Mem1 Ch0/Ch1 input valid <br/>
    ///< [25] = TX vex2iqr Ch0 Complex output valid DUC0 <br/>
    ///< [26] = TX vex2iqr Ch0 Real output valid DUC0 <br/>
    ///< [27] = TX vex2iqr Ch1 Complex output valid DUC1 <br/>
    ///< [28] = TX vex2iqr Ch1 Real output valid DUC1 <br/>
    ///< [29] = TX DUC0 output valid <br/>
    ///< [30] = TX DUC1 output valid <br/>
    ///< [31] = TX TXG0 output valid <br/>
    ///< [32] = TX TXG1 output valid <br/>
    ///< [33] = TX MOD Ch0 output valid <br/>
    ///< [34] = TX MOD Ch1 output valid <br/>
    ///< [35] = TX MOD SWG input valid <br/>
    ///< [36] = TX MOD NCO input valid  <br/>
    ///< [37] = TX TXG0/1 Fuse Disable <br/>
    ///< [38] = TX Alarm Ch 0 SOC Error Force M1  <br/>
    ///< [39] = TX Alarm Ch 0 SOC Error Y1  <br/>
    ///< [40] = TX Alarm Ch 0 SOC Error T1 <br/>
    ///< [41] = TX Alarm Ch 0 TXCPM Force M2 <br/>
    ///< [42] = TX Alarm Ch 0 TXCPM Y2  <br/>
    ///< [43] = TX Alarm Ch 0 TXCPM T2 <br/>
    ///< [44] = TX Alarm Ch 0 TXSR Force M3 <br/>
    ///< [45] = TX Alarm Ch 0 TXSR Y3  <br/>
    ///< [46] = TX Alarm Ch 0 TXSR T3 <br/>
    ///< [47] = TX Alarm Ch 0 RCS Output Alarm <br/>
    ///< [48] = TX Alarm Ch 1 SOC Error Force M1  <br/>
    ///< [49] = TX Alarm Ch 1 SOC Error Y1  <br/>
    ///< [50] = TX Alarm Ch 1 SOC Error T1 <br/>
    ///< [51] = TX Alarm Ch 1 TXCPM Force M2 <br/>
    ///< [52] = TX Alarm Ch 1 TXCPM Y2  <br/>
    ///< [53] = TX Alarm Ch 1 TXCPM T2 <br/>
    ///< [54] = TX Alarm Ch 1 TXSR Force M3 <br/>
    ///< [55] = TX Alarm Ch 1 TXSR Y3  <br/>
    ///< [56] = TX Alarm Ch 1 TXSR T3 <br/>
    ///< [57] = TX Alarm Ch 1 RCS Output Alarm
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RSVD : 16;
    ///< reserved
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} trx_sys_csr_smon_r1_reg_t;

#define TRX_SYS_CSR_SMON_R1_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_SMON_R1_RD_MASK (0xffffffffU)
#define TRX_SYS_CSR_SMON_R1_WR_MASK (0xffffffffU)


///< select input signal for SMON0 engine. <br/> SMON mode ID = Name of
///< SMON Input Signal.<br/>
///< [0]  = TRX_SYS APB Config Write <br/>
///< [1]  = TRX_SYS APB Config Read  <br/>
///< [2]  = RX DMOD Ch 0 input Valid <br/>
///< [3]  = RX DMOD Ch 1 input Valid <br/>
///< [4]  = RX DMOD SWG input Valid <br/>
///< [5]  = RX DMOD NCO input Valid <br/>
///< [6]  = RX DMOD Ch 0 output Valid <br/>
///< [7]  = RX DMOD Ch 1 output Valid <br/>
///< [8]  = RX DDC0 Complex output Valid <br/>
///< [9]  = RX DDC0 Real output Valid <br/>
///< [10] = RX DDC1 Complex output Valid <br/>
///< [11] = RX DDC1 Real output Valid <br/>
///< [12] = RX RXG0 iqr2vex output Valid <br/>
///< [13] = RX RXG1 iqr2vex output Valid <br/>
///< [14] = RX RX Capture Test Mux 0 input Valid <br/>
///< [15] = RX RX Capture Test Mux 1 input Valid <br/>
///< [16] = RX RX Capture Test Mux 0 output Valid <br/>
///< [17] = RX RX Capture Test Mux 1 output Valid <br/>
///< [18] = RX CVA Error Ch 0 <br/>
///< [19] = RX CVA Error Ch 1 <br/>
///< [20] = TX insert V2D Ch0 input valid <br/>
///< [21] = TX insert V2D Ch1 input valid <br/>
///< [22] = TX insert TTSG Ch0/Ch1 input valid <br/>
///< [23] = TX insert Mem0 Ch0/Ch1 input valid <br/>
///< [24] = TX insert Mem1 Ch0/Ch1 input valid <br/>
///< [25] = TX vex2iqr Ch0 Complex output valid DUC0 <br/>
///< [26] = TX vex2iqr Ch0 Real output valid DUC0 <br/>
///< [27] = TX vex2iqr Ch1 Complex output valid DUC1 <br/>
///< [28] = TX vex2iqr Ch1 Real output valid DUC1 <br/>
///< [29] = TX DUC0 output valid <br/>
///< [30] = TX DUC1 output valid <br/>
///< [31] = TX TXG0 output valid <br/>
///< [32] = TX TXG1 output valid <br/>
///< [33] = TX MOD Ch0 output valid <br/>
///< [34] = TX MOD Ch1 output valid <br/>
///< [35] = TX MOD SWG input valid <br/>
///< [36] = TX MOD NCO input valid  <br/>
///< [37] = TX TXG0/1 Fuse Disable <br/>
///< [38] = TX Alarm Ch 0 SOC Error Force M1  <br/>
///< [39] = TX Alarm Ch 0 SOC Error Y1  <br/>
///< [40] = TX Alarm Ch 0 SOC Error T1 <br/>
///< [41] = TX Alarm Ch 0 TXCPM Force M2 <br/>
///< [42] = TX Alarm Ch 0 TXCPM Y2  <br/>
///< [43] = TX Alarm Ch 0 TXCPM T2 <br/>
///< [44] = TX Alarm Ch 0 TXSR Force M3 <br/>
///< [45] = TX Alarm Ch 0 TXSR Y3  <br/>
///< [46] = TX Alarm Ch 0 TXSR T3 <br/>
///< [47] = TX Alarm Ch 0 RCS Output Alarm <br/>
///< [48] = TX Alarm Ch 1 SOC Error Force M1  <br/>
///< [49] = TX Alarm Ch 1 SOC Error Y1  <br/>
///< [50] = TX Alarm Ch 1 SOC Error T1 <br/>
///< [51] = TX Alarm Ch 1 TXCPM Force M2 <br/>
///< [52] = TX Alarm Ch 1 TXCPM Y2  <br/>
///< [53] = TX Alarm Ch 1 TXCPM T2 <br/>
///< [54] = TX Alarm Ch 1 TXSR Force M3 <br/>
///< [55] = TX Alarm Ch 1 TXSR Y3  <br/>
///< [56] = TX Alarm Ch 1 TXSR T3 <br/>
///< [57] = TX Alarm Ch 1 RCS Output Alarm
#define TRX_SYS_CSR_SMON_R1_MODE0_BF_OFF ( 0)
#define TRX_SYS_CSR_SMON_R1_MODE0_BF_WID ( 8)
#define TRX_SYS_CSR_SMON_R1_MODE0_BF_MSK (0x000000FF)
#define TRX_SYS_CSR_SMON_R1_MODE0_BF_DEF (0x00000000)

///< select input signal for SMON1 engine. <br/> SMON mode ID = Name of
///< SMON Input Signal.<br/>
///< [0]  = TRX_SYS APB Config Write <br/>
///< [1]  = TRX_SYS APB Config Read  <br/>
///< [2]  = RX DMOD Ch 0 input Valid <br/>
///< [3]  = RX DMOD Ch 1 input Valid <br/>
///< [4]  = RX DMOD SWG input Valid <br/>
///< [5]  = RX DMOD NCO input Valid <br/>
///< [6]  = RX DMOD Ch 0 output Valid <br/>
///< [7]  = RX DMOD Ch 1 output Valid <br/>
///< [8]  = RX DDC0 Complex output Valid <br/>
///< [9]  = RX DDC0 Real output Valid <br/>
///< [10] = RX DDC1 Complex output Valid <br/>
///< [11] = RX DDC1 Real output Valid <br/>
///< [12] = RX RXG0 iqr2vex output Valid <br/>
///< [13] = RX RXG1 iqr2vex output Valid <br/>
///< [14] = RX RX Capture Test Mux 0 input Valid <br/>
///< [15] = RX RX Capture Test Mux 1 input Valid <br/>
///< [16] = RX RX Capture Test Mux 0 output Valid <br/>
///< [17] = RX RX Capture Test Mux 1 output Valid <br/>
///< [18] = RX CVA Error Ch 0 <br/>
///< [19] = RX CVA Error Ch 1 <br/>
///< [20] = TX insert V2D Ch0 input valid <br/>
///< [21] = TX insert V2D Ch1 input valid <br/>
///< [22] = TX insert TTSG Ch0/Ch1 input valid <br/>
///< [23] = TX insert Mem0 Ch0/Ch1 input valid <br/>
///< [24] = TX insert Mem1 Ch0/Ch1 input valid <br/>
///< [25] = TX vex2iqr Ch0 Complex output valid DUC0 <br/>
///< [26] = TX vex2iqr Ch0 Real output valid DUC0 <br/>
///< [27] = TX vex2iqr Ch1 Complex output valid DUC1 <br/>
///< [28] = TX vex2iqr Ch1 Real output valid DUC1 <br/>
///< [29] = TX DUC0 output valid <br/>
///< [30] = TX DUC1 output valid <br/>
///< [31] = TX TXG0 output valid <br/>
///< [32] = TX TXG1 output valid <br/>
///< [33] = TX MOD Ch0 output valid <br/>
///< [34] = TX MOD Ch1 output valid <br/>
///< [35] = TX MOD SWG input valid <br/>
///< [36] = TX MOD NCO input valid  <br/>
///< [37] = TX TXG0/1 Fuse Disable <br/>
///< [38] = TX Alarm Ch 0 SOC Error Force M1  <br/>
///< [39] = TX Alarm Ch 0 SOC Error Y1  <br/>
///< [40] = TX Alarm Ch 0 SOC Error T1 <br/>
///< [41] = TX Alarm Ch 0 TXCPM Force M2 <br/>
///< [42] = TX Alarm Ch 0 TXCPM Y2  <br/>
///< [43] = TX Alarm Ch 0 TXCPM T2 <br/>
///< [44] = TX Alarm Ch 0 TXSR Force M3 <br/>
///< [45] = TX Alarm Ch 0 TXSR Y3  <br/>
///< [46] = TX Alarm Ch 0 TXSR T3 <br/>
///< [47] = TX Alarm Ch 0 RCS Output Alarm <br/>
///< [48] = TX Alarm Ch 1 SOC Error Force M1  <br/>
///< [49] = TX Alarm Ch 1 SOC Error Y1  <br/>
///< [50] = TX Alarm Ch 1 SOC Error T1 <br/>
///< [51] = TX Alarm Ch 1 TXCPM Force M2 <br/>
///< [52] = TX Alarm Ch 1 TXCPM Y2  <br/>
///< [53] = TX Alarm Ch 1 TXCPM T2 <br/>
///< [54] = TX Alarm Ch 1 TXSR Force M3 <br/>
///< [55] = TX Alarm Ch 1 TXSR Y3  <br/>
///< [56] = TX Alarm Ch 1 TXSR T3 <br/>
///< [57] = TX Alarm Ch 1 RCS Output Alarm
#define TRX_SYS_CSR_SMON_R1_MODE1_BF_OFF ( 8)
#define TRX_SYS_CSR_SMON_R1_MODE1_BF_WID ( 8)
#define TRX_SYS_CSR_SMON_R1_MODE1_BF_MSK (0x0000FF00)
#define TRX_SYS_CSR_SMON_R1_MODE1_BF_DEF (0x00000000)

///< reserved
#define TRX_SYS_CSR_SMON_R1_RSVD_BF_OFF (16)
#define TRX_SYS_CSR_SMON_R1_RSVD_BF_WID (16)
#define TRX_SYS_CSR_SMON_R1_RSVD_BF_MSK (0xFFFF0000)
#define TRX_SYS_CSR_SMON_R1_RSVD_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_SMON_MAP_SMON_R2 register description at address offset 0x1e8
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/SMON_MAP/SMON_r2
  * AW_smon SMON0_COMPARE register
  */

typedef union {
  struct {
    uint32_t COMPARE0 : 32;
    ///< Comparison value.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} trx_sys_csr_smon_r2_reg_t;

#define TRX_SYS_CSR_SMON_R2_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_SMON_R2_RD_MASK (0xffffffffU)
#define TRX_SYS_CSR_SMON_R2_WR_MASK (0xffffffffU)


///< Comparison value.
#define TRX_SYS_CSR_SMON_R2_CMP0_BF_OFF ( 0)
#define TRX_SYS_CSR_SMON_R2_CMP0_BF_WID (32)
#define TRX_SYS_CSR_SMON_R2_CMP0_BF_MSK (0xFFFFFFFF)
#define TRX_SYS_CSR_SMON_R2_CMP0_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_SMON_MAP_SMON_R3 register description at address offset 0x1ec
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/SMON_MAP/SMON_r3
  * AW_smon SMON1_COMPARE register
  */

typedef union {
  struct {
    uint32_t COMPARE1 : 32;
    ///< Comparison value.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} trx_sys_csr_smon_r3_reg_t;

#define TRX_SYS_CSR_SMON_R3_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_SMON_R3_RD_MASK (0xffffffffU)
#define TRX_SYS_CSR_SMON_R3_WR_MASK (0xffffffffU)


///< Comparison value.
#define TRX_SYS_CSR_SMON_R3_CMP1_BF_OFF ( 0)
#define TRX_SYS_CSR_SMON_R3_CMP1_BF_WID (32)
#define TRX_SYS_CSR_SMON_R3_CMP1_BF_MSK (0xFFFFFFFF)
#define TRX_SYS_CSR_SMON_R3_CMP1_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_SMON_MAP_SMON_R4 register description at address offset 0x1f0
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/SMON_MAP/SMON_r4
  * AW_smon SMON0_COUNT register
  */

typedef union {
  struct {
    uint32_t COUNTER0 : 32;
    ///< counter0
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} trx_sys_csr_smon_r4_reg_t;

#define TRX_SYS_CSR_SMON_R4_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_SMON_R4_RD_MASK (0xffffffffU)
#define TRX_SYS_CSR_SMON_R4_WR_MASK (0xffffffffU)


///< counter0
#define TRX_SYS_CSR_SMON_R4_CNTER0_BF_OFF ( 0)
#define TRX_SYS_CSR_SMON_R4_CNTER0_BF_WID (32)
#define TRX_SYS_CSR_SMON_R4_CNTER0_BF_MSK (0xFFFFFFFF)
#define TRX_SYS_CSR_SMON_R4_CNTER0_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_SMON_MAP_SMON_R5 register description at address offset 0x1f4
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/SMON_MAP/SMON_r5
  * AW_smon SMON1_COUNT register
  */

typedef union {
  struct {
    uint32_t COUNTER1 : 32;
    ///< counter1
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} trx_sys_csr_smon_r5_reg_t;

#define TRX_SYS_CSR_SMON_R5_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_SMON_R5_RD_MASK (0xffffffffU)
#define TRX_SYS_CSR_SMON_R5_WR_MASK (0xffffffffU)


///< counter1
#define TRX_SYS_CSR_SMON_R5_CNTER1_BF_OFF ( 0)
#define TRX_SYS_CSR_SMON_R5_CNTER1_BF_WID (32)
#define TRX_SYS_CSR_SMON_R5_CNTER1_BF_MSK (0xFFFFFFFF)
#define TRX_SYS_CSR_SMON_R5_CNTER1_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_SMON_MAP_SMON_R6 register description at address offset 0x1f8
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/SMON_MAP/SMON_r6
  * AW_smon TIMER register
  */

typedef union {
  struct {
    uint32_t TIMER : 32;
    ///< timer
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} trx_sys_csr_smon_r6_reg_t;

#define TRX_SYS_CSR_SMON_R6_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_SMON_R6_RD_MASK (0xffffffffU)
#define TRX_SYS_CSR_SMON_R6_WR_MASK (0xffffffffU)


///< timer
#define TRX_SYS_CSR_SMON_R6_TIMER_BF_OFF ( 0)
#define TRX_SYS_CSR_SMON_R6_TIMER_BF_WID (32)
#define TRX_SYS_CSR_SMON_R6_TIMER_BF_MSK (0xFFFFFFFF)
#define TRX_SYS_CSR_SMON_R6_TIMER_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_SMON_MAP_SMON_R7 register description at address offset 0x1fc
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/SMON_MAP/SMON_r7
  * AW_smon TIMERMAXVAL register
  */

typedef union {
  struct {
    uint32_t MAXVALUE : 32;
    ///< maxvalue
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} trx_sys_csr_smon_r7_reg_t;

#define TRX_SYS_CSR_SMON_R7_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_SMON_R7_RD_MASK (0xffffffffU)
#define TRX_SYS_CSR_SMON_R7_WR_MASK (0xffffffffU)


///< maxvalue
#define TRX_SYS_CSR_SMON_R7_MAXVAL_BF_OFF ( 0)
#define TRX_SYS_CSR_SMON_R7_MAXVAL_BF_WID (32)
#define TRX_SYS_CSR_SMON_R7_MAXVAL_BF_MSK (0xFFFFFFFF)
#define TRX_SYS_CSR_SMON_R7_MAXVAL_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_APB_BRIDGE_STATUS register description at address offset 0x200
  *
  * Register default value:        0x00010000
  * Register full path in IP: trx_sys_csr/CSR_MAP/APB_BRIDGE_STATUS
  * APB Bridge Status
  */

typedef union {
  struct {
    uint32_t TIMEOUT_VALUE : 20;
    ///< Number of core clocks to wait before timing out an APB request
    ///< AccessType="RW/L" BitOffset="0" ResetValue="0x10000"
    uint32_t REVISION : 8;
    ///< Module Revision Number
    ///< AccessType="RO" BitOffset="20" ResetValue="0x0"
    uint32_t SW_LOCK_CTRL : 1;
    ///< Block software writes to timeout_value if set
    ///< AccessType="RW/1S/V/L" BitOffset="28" ResetValue="0x0"
    uint32_t UNSOL_ACK : 1;
    ///< An unsolicited acknowledge was received
    ///< AccessType="RW/1C/V" BitOffset="29" ResetValue="0x0"
    uint32_t ACK_ERROR : 1;
    ///< Acknowledgement had error bit set
    ///< AccessType="RW/1C/V" BitOffset="30" ResetValue="0x0"
    uint32_t TIMEOUT : 1;
    ///< An APB request has timed out
    ///< AccessType="RW/1C/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} trx_sys_csr_apb_brdg_stat_reg_t;

#define TRX_SYS_CSR_APB_BRDG_STAT_DEFAULT (0x00010000U)
#define TRX_SYS_CSR_APB_BRDG_STAT_RD_MASK (0xffffffffU)
#define TRX_SYS_CSR_APB_BRDG_STAT_WR_MASK (0xf00fffffU)


///< Number of core clocks to wait before timing out an APB request
#define TRX_SYS_CSR_APB_BRDG_STAT_TIMEOUT_VAL_BF_OFF ( 0)
#define TRX_SYS_CSR_APB_BRDG_STAT_TIMEOUT_VAL_BF_WID (20)
#define TRX_SYS_CSR_APB_BRDG_STAT_TIMEOUT_VAL_BF_MSK (0x000FFFFF)
#define TRX_SYS_CSR_APB_BRDG_STAT_TIMEOUT_VAL_BF_DEF (0x00010000)

///< Module Revision Number
#define TRX_SYS_CSR_APB_BRDG_STAT_REVISION_BF_OFF (20)
#define TRX_SYS_CSR_APB_BRDG_STAT_REVISION_BF_WID ( 8)
#define TRX_SYS_CSR_APB_BRDG_STAT_REVISION_BF_MSK (0x0FF00000)
#define TRX_SYS_CSR_APB_BRDG_STAT_REVISION_BF_DEF (0x00000000)

///< Block software writes to timeout_value if set
#define TRX_SYS_CSR_APB_BRDG_STAT_SW_LOCK_CTRL_BF_OFF (28)
#define TRX_SYS_CSR_APB_BRDG_STAT_SW_LOCK_CTRL_BF_WID ( 1)
#define TRX_SYS_CSR_APB_BRDG_STAT_SW_LOCK_CTRL_BF_MSK (0x10000000)
#define TRX_SYS_CSR_APB_BRDG_STAT_SW_LOCK_CTRL_BF_DEF (0x00000000)

///< An unsolicited acknowledge was received
#define TRX_SYS_CSR_APB_BRDG_STAT_UNSOL_ACK_BF_OFF (29)
#define TRX_SYS_CSR_APB_BRDG_STAT_UNSOL_ACK_BF_WID ( 1)
#define TRX_SYS_CSR_APB_BRDG_STAT_UNSOL_ACK_BF_MSK (0x20000000)
#define TRX_SYS_CSR_APB_BRDG_STAT_UNSOL_ACK_BF_DEF (0x00000000)

///< Acknowledgement had error bit set
#define TRX_SYS_CSR_APB_BRDG_STAT_ACK_ERR_BF_OFF (30)
#define TRX_SYS_CSR_APB_BRDG_STAT_ACK_ERR_BF_WID ( 1)
#define TRX_SYS_CSR_APB_BRDG_STAT_ACK_ERR_BF_MSK (0x40000000)
#define TRX_SYS_CSR_APB_BRDG_STAT_ACK_ERR_BF_DEF (0x00000000)

///< An APB request has timed out
#define TRX_SYS_CSR_APB_BRDG_STAT_TIMEOUT_BF_OFF (31)
#define TRX_SYS_CSR_APB_BRDG_STAT_TIMEOUT_BF_WID ( 1)
#define TRX_SYS_CSR_APB_BRDG_STAT_TIMEOUT_BF_MSK (0x80000000)
#define TRX_SYS_CSR_APB_BRDG_STAT_TIMEOUT_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_ISYNC_MAP_ISYNC_CTRL register description at address offset 0x300
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/ISYNC_MAP/ISYNC_CTRL
  * ISYNC Control Register
  */

typedef union {
  struct {
    uint32_t TIMER_CMD : 3;
    ///< When i_isync value is 11, the command programmed in this register
    ///< is executed.  3'b000, 3'b100, 3'b110 -> bfn_lower_cnt is incremented
    ///< with the value in BFN_LOWER_CNT_INC. If the  lower count value equals
    ///< the TEN_MS_CNT value the bfn_upper_cnt value is incremented by 1.
    ///< 3'b001 -> bfn_lower_cnt and bfn_upper_cnt are preset to the value
    ///< in the TIMER_INC_PRE register.  3'b010 -> The internal registers corresponding
    ///< to BFN_LOWER_CNT_INC., TIMER_INC_PRE, TIMER_INC_ADJ  TEN_MS_CNT are
    ///< all initialized to their corresponding input values.  If the current
    ///< bfn_lower_cnt value is equal to the TEN_MS_CNT value, the bfn_upper_cnt
    ///< is incremented by 1. If not, bfn_lower_cnt is incremented by the value
    ///< in BFN_LOWER_CNT_INC.  register.  3'b011 -> Increment the bfn_lower_cnt
    ///< value with the value in the TIMER_INC_PRE register.  3'b101 -> If
    ///< bfn_lower_cnt value equals the TEN_MS_CNT value, reset the bfn_lower_cnt
    ///< to zero and  increment the bfn_upper_cnt by 1. If not, increment bfn_lower_cnt
    ///< by a value  in the BFN_LOWER_CNT_INC. register. A sync_adj_pulse is
    ///< also generated so that when the  bfn_lower_cnt value is equal to the
    ///< TEN_MS_CNT and the bfn_upper_cnt equals timer_cnt_adj  the bfn_lower_cnt
    ///< is preset to the value in TIMER_INC_PRE and the bfn_upper_cnt is
    ///< incremented by the value in TIMER_INC_PRE register.  3'b111 -> The
    ///< current value in the bfn_lower_cnt and bfn_upper_cnt is captured and
    ///< made available  in a register for the application to read.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t LOAD_READ : 1;
    ///< When 1, load BFN count into the manager counter at the first timesync
    ///< pulse, when 0, read BFN count from the Manager BFN counter at every
    ///< timesync pulse.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t BFN_CNT_SAMPLE : 1;
    ///< Write to 1 (regardless of the current value) causes the circuit to
    ///< sample the BFN_CNT and synchronize it into the register clock domain.
    ///< After waiting 3-4 BFN clock cycles plus 3-4 register clock cycles,
    ///< the sample is available to read in the ISYNC_BFN_CNT register
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t  : 9;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t SOFT_RESET : 1;
    ///< Soft Reset for the entire AW_isync. Active high.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} trx_sys_csr_isync_ctrl_reg_t;

#define TRX_SYS_CSR_ISYNC_CTRL_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_ISYNC_CTRL_RD_MASK (0x00008037U)
#define TRX_SYS_CSR_ISYNC_CTRL_WR_MASK (0x00008037U)


///< When i_isync value is 11, the command programmed in this register
///< is executed.  3'b000, 3'b100, 3'b110 -> bfn_lower_cnt is incremented
///< with the value in BFN_LOWER_CNT_INC. If the  lower count value equals
///< the TEN_MS_CNT value the bfn_upper_cnt value is incremented by 1.
///< 3'b001 -> bfn_lower_cnt and bfn_upper_cnt are preset to the value
///< in the TIMER_INC_PRE register.  3'b010 -> The internal registers corresponding
///< to BFN_LOWER_CNT_INC., TIMER_INC_PRE, TIMER_INC_ADJ  TEN_MS_CNT are
///< all initialized to their corresponding input values.  If the current
///< bfn_lower_cnt value is equal to the TEN_MS_CNT value, the bfn_upper_cnt
///< is incremented by 1. If not, bfn_lower_cnt is incremented by the value
///< in BFN_LOWER_CNT_INC.  register.  3'b011 -> Increment the bfn_lower_cnt
///< value with the value in the TIMER_INC_PRE register.  3'b101 -> If
///< bfn_lower_cnt value equals the TEN_MS_CNT value, reset the bfn_lower_cnt
///< to zero and  increment the bfn_upper_cnt by 1. If not, increment bfn_lower_cnt
///< by a value  in the BFN_LOWER_CNT_INC. register. A sync_adj_pulse is
///< also generated so that when the  bfn_lower_cnt value is equal to the
///< TEN_MS_CNT and the bfn_upper_cnt equals timer_cnt_adj  the bfn_lower_cnt
///< is preset to the value in TIMER_INC_PRE and the bfn_upper_cnt is
///< incremented by the value in TIMER_INC_PRE register.  3'b111 -> The
///< current value in the bfn_lower_cnt and bfn_upper_cnt is captured and
///< made available  in a register for the application to read.
#define TRX_SYS_CSR_ISYNC_CTRL_TIMER_CMD_BF_OFF ( 0)
#define TRX_SYS_CSR_ISYNC_CTRL_TIMER_CMD_BF_WID ( 3)
#define TRX_SYS_CSR_ISYNC_CTRL_TIMER_CMD_BF_MSK (0x00000007)
#define TRX_SYS_CSR_ISYNC_CTRL_TIMER_CMD_BF_DEF (0x00000000)

///< When 1, load BFN count into the manager counter at the first timesync
///< pulse, when 0, read BFN count from the Manager BFN counter at every
///< timesync pulse.
#define TRX_SYS_CSR_ISYNC_CTRL_LOAD_READ_BF_OFF ( 4)
#define TRX_SYS_CSR_ISYNC_CTRL_LOAD_READ_BF_WID ( 1)
#define TRX_SYS_CSR_ISYNC_CTRL_LOAD_READ_BF_MSK (0x00000010)
#define TRX_SYS_CSR_ISYNC_CTRL_LOAD_READ_BF_DEF (0x00000000)

///< Write to 1 (regardless of the current value) causes the circuit to
///< sample the BFN_CNT and synchronize it into the register clock domain.
///< After waiting 3-4 BFN clock cycles plus 3-4 register clock cycles,
///< the sample is available to read in the ISYNC_BFN_CNT register
#define TRX_SYS_CSR_ISYNC_CTRL_BFN_CNT_SAMPLE_BF_OFF ( 5)
#define TRX_SYS_CSR_ISYNC_CTRL_BFN_CNT_SAMPLE_BF_WID ( 1)
#define TRX_SYS_CSR_ISYNC_CTRL_BFN_CNT_SAMPLE_BF_MSK (0x00000020)
#define TRX_SYS_CSR_ISYNC_CTRL_BFN_CNT_SAMPLE_BF_DEF (0x00000000)

///< Soft Reset for the entire AW_isync. Active high.
#define TRX_SYS_CSR_ISYNC_CTRL_SOFT_RST_BF_OFF (15)
#define TRX_SYS_CSR_ISYNC_CTRL_SOFT_RST_BF_WID ( 1)
#define TRX_SYS_CSR_ISYNC_CTRL_SOFT_RST_BF_MSK (0x00008000)
#define TRX_SYS_CSR_ISYNC_CTRL_SOFT_RST_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_ISYNC_MAP_ISYNC_LCNT_INC register description at address offset 0x304
  *
  * Register default value:        0x00000001
  * Register full path in IP: trx_sys_csr/CSR_MAP/ISYNC_MAP/ISYNC_LCNT_INC
  * Isync Lower Count Increment Register
  */

typedef union {
  struct {
    uint32_t BFN_LOWER_CNT_INC : 24;
    ///< Increment for the Offset Counter.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} trx_sys_csr_isync_lcnt_inc_reg_t;

#define TRX_SYS_CSR_ISYNC_LCNT_INC_DEFAULT (0x00000001U)
#define TRX_SYS_CSR_ISYNC_LCNT_INC_RD_MASK (0x00ffffffU)
#define TRX_SYS_CSR_ISYNC_LCNT_INC_WR_MASK (0x00ffffffU)


///< Increment for the Offset Counter.
#define TRX_SYS_CSR_ISYNC_LCNT_INC_BFN_LOWER_CNT_INC_BF_OFF ( 0)
#define TRX_SYS_CSR_ISYNC_LCNT_INC_BFN_LOWER_CNT_INC_BF_WID (24)
#define TRX_SYS_CSR_ISYNC_LCNT_INC_BFN_LOWER_CNT_INC_BF_MSK (0x00FFFFFF)
#define TRX_SYS_CSR_ISYNC_LCNT_INC_BFN_LOWER_CNT_INC_BF_DEF (0x00000001)


/** @brief TRX_SYS_CSR_CSR_MAP_ISYNC_MAP_ISYNC_TEN_MS_CNT register description at address offset 0x308
  *
  * Register default value:        0x0095FFFF
  * Register full path in IP: trx_sys_csr/CSR_MAP/ISYNC_MAP/ISYNC_TEN_MS_CNT
  * Isync 10ms Counter Register
  */

typedef union {
  struct {
    uint32_t TEN_MS_CNT : 24;
    ///< Number of clock cycles in 10ms (minus 1).
    ///< AccessType="RW" BitOffset="0" ResetValue="0x95FFFF"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} trx_sys_csr_isync_ten_ms_cnt_reg_t;

#define TRX_SYS_CSR_ISYNC_TEN_MS_CNT_DEFAULT (0x0095ffffU)
#define TRX_SYS_CSR_ISYNC_TEN_MS_CNT_RD_MASK (0x00ffffffU)
#define TRX_SYS_CSR_ISYNC_TEN_MS_CNT_WR_MASK (0x00ffffffU)


///< Number of clock cycles in 10ms (minus 1).
#define TRX_SYS_CSR_ISYNC_TEN_MS_CNT_TEN_MS_CNT_BF_OFF ( 0)
#define TRX_SYS_CSR_ISYNC_TEN_MS_CNT_TEN_MS_CNT_BF_WID (24)
#define TRX_SYS_CSR_ISYNC_TEN_MS_CNT_TEN_MS_CNT_BF_MSK (0x00FFFFFF)
#define TRX_SYS_CSR_ISYNC_TEN_MS_CNT_TEN_MS_CNT_BF_DEF (0x0095FFFF)


/** @brief TRX_SYS_CSR_CSR_MAP_ISYNC_MAP_ISYNC_INC_PRE register description at address offset 0x30c
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/ISYNC_MAP/ISYNC_INC_PRE
  * Isync Timer Increment/Preset Register
  */

typedef union {
  struct {
    uint32_t OFFSET_INCR : 24;
    ///< Offset from nearest 10ms frame, in clock cycles.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FRAME_INCR : 8;
    ///< Bits [7:0] of the 10ms frame counter.
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} trx_sys_csr_isync_inc_pre_reg_t;

#define TRX_SYS_CSR_ISYNC_INC_PRE_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_ISYNC_INC_PRE_RD_MASK (0xffffffffU)
#define TRX_SYS_CSR_ISYNC_INC_PRE_WR_MASK (0xffffffffU)


///< Offset from nearest 10ms frame, in clock cycles.
#define TRX_SYS_CSR_ISYNC_INC_PRE_OFFSET_INCR_BF_OFF ( 0)
#define TRX_SYS_CSR_ISYNC_INC_PRE_OFFSET_INCR_BF_WID (24)
#define TRX_SYS_CSR_ISYNC_INC_PRE_OFFSET_INCR_BF_MSK (0x00FFFFFF)
#define TRX_SYS_CSR_ISYNC_INC_PRE_OFFSET_INCR_BF_DEF (0x00000000)

///< Bits [7:0] of the 10ms frame counter.
#define TRX_SYS_CSR_ISYNC_INC_PRE_FRAME_INCR_BF_OFF (24)
#define TRX_SYS_CSR_ISYNC_INC_PRE_FRAME_INCR_BF_WID ( 8)
#define TRX_SYS_CSR_ISYNC_INC_PRE_FRAME_INCR_BF_MSK (0xFF000000)
#define TRX_SYS_CSR_ISYNC_INC_PRE_FRAME_INCR_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_ISYNC_MAP_ISYNC_CNT_ADJ register description at address offset 0x310
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/ISYNC_MAP/ISYNC_CNT_ADJ
  * Isync Timer Count Adjustment Register
  */

typedef union {
  struct {
    uint32_t FRAME_ADJ : 8;
    ///< Bits [7:0] of the 10ms frame counter.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} trx_sys_csr_isync_cnt_adj_reg_t;

#define TRX_SYS_CSR_ISYNC_CNT_ADJ_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_ISYNC_CNT_ADJ_RD_MASK (0x000000ffU)
#define TRX_SYS_CSR_ISYNC_CNT_ADJ_WR_MASK (0x000000ffU)


///< Bits [7:0] of the 10ms frame counter.
#define TRX_SYS_CSR_ISYNC_CNT_ADJ_FRAME_ADJ_BF_OFF ( 0)
#define TRX_SYS_CSR_ISYNC_CNT_ADJ_FRAME_ADJ_BF_WID ( 8)
#define TRX_SYS_CSR_ISYNC_CNT_ADJ_FRAME_ADJ_BF_MSK (0x000000FF)
#define TRX_SYS_CSR_ISYNC_CNT_ADJ_FRAME_ADJ_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_ISYNC_MAP_ISYNC_BFN_CNT_SYNC register description at address offset 0x314
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/ISYNC_MAP/ISYNC_BFN_CNT_SYNC
  * BFN Count Sync
  */

typedef union {
  struct {
    uint32_t OFFSET : 24;
    ///< Offset from nearest 10ms frame, in clock cycles.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t FRAME : 8;
    ///< Bits [7:0] fo the count of 10ms frames.
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} trx_sys_csr_isync_bfn_cnt_sync_reg_t;

#define TRX_SYS_CSR_ISYNC_BFN_CNT_SYNC_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_ISYNC_BFN_CNT_SYNC_RD_MASK (0xffffffffU)
#define TRX_SYS_CSR_ISYNC_BFN_CNT_SYNC_WR_MASK (0x00000000U)


///< Offset from nearest 10ms frame, in clock cycles.
#define TRX_SYS_CSR_ISYNC_BFN_CNT_SYNC_OFFSET_BF_OFF ( 0)
#define TRX_SYS_CSR_ISYNC_BFN_CNT_SYNC_OFFSET_BF_WID (24)
#define TRX_SYS_CSR_ISYNC_BFN_CNT_SYNC_OFFSET_BF_MSK (0x00FFFFFF)
#define TRX_SYS_CSR_ISYNC_BFN_CNT_SYNC_OFFSET_BF_DEF (0x00000000)

///< Bits [7:0] fo the count of 10ms frames.
#define TRX_SYS_CSR_ISYNC_BFN_CNT_SYNC_FRAME_BF_OFF (24)
#define TRX_SYS_CSR_ISYNC_BFN_CNT_SYNC_FRAME_BF_WID ( 8)
#define TRX_SYS_CSR_ISYNC_BFN_CNT_SYNC_FRAME_BF_MSK (0xFF000000)
#define TRX_SYS_CSR_ISYNC_BFN_CNT_SYNC_FRAME_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_ISYNC_MAP_ISYNC_BFN_CNT register description at address offset 0x318
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/ISYNC_MAP/ISYNC_BFN_CNT
  * BFN Count
  */

typedef union {
  struct {
    uint32_t OFFSET : 24;
    ///< Offset from nearest 10ms frame, in clock cycles.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t FRAME : 8;
    ///< LSB's of Count of 10ms frames.
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} trx_sys_csr_isync_bfn_cnt_reg_t;

#define TRX_SYS_CSR_ISYNC_BFN_CNT_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_ISYNC_BFN_CNT_RD_MASK (0xffffffffU)
#define TRX_SYS_CSR_ISYNC_BFN_CNT_WR_MASK (0x00000000U)


///< Offset from nearest 10ms frame, in clock cycles.
#define TRX_SYS_CSR_ISYNC_BFN_CNT_OFFSET_BF_OFF ( 0)
#define TRX_SYS_CSR_ISYNC_BFN_CNT_OFFSET_BF_WID (24)
#define TRX_SYS_CSR_ISYNC_BFN_CNT_OFFSET_BF_MSK (0x00FFFFFF)
#define TRX_SYS_CSR_ISYNC_BFN_CNT_OFFSET_BF_DEF (0x00000000)

///< LSB's of Count of 10ms frames.
#define TRX_SYS_CSR_ISYNC_BFN_CNT_FRAME_BF_OFF (24)
#define TRX_SYS_CSR_ISYNC_BFN_CNT_FRAME_BF_WID ( 8)
#define TRX_SYS_CSR_ISYNC_BFN_CNT_FRAME_BF_MSK (0xFF000000)
#define TRX_SYS_CSR_ISYNC_BFN_CNT_FRAME_BF_DEF (0x00000000)


/** @brief TRX_SYS_CSR_CSR_MAP_ABC_BFN_EVENTS_BFNE_CONFIG[11] register description at address offset 0x400
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/ABC_BFN_EVENTS/BFNE_CONFIG
  * BFN Event Config Register
  */

typedef union {
  struct {
    uint32_t ENABLE : 1;
    ///< Set to 1 to enable the operation of the bfn_event module. When running
    ///< in repeat mode, set this back to zero to immediately halt the operation.
    ///< NOte that this must be set to 1 for the force mechanism (See BFN_START
    ///< register) to work.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t MODE : 2;
    ///< Selects the mode of operation. Note that the force mechanism can be
    ///< triggered (see BFNE_START) regardless of which mode is selected here.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t OUTPUT_MODE : 1;
    ///< Selects whether the BFN_EVENT output toggles at each event, or produces
    ///< a single cycle pulse.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t DEBUG_MODE : 2;
    ///< Controls what appears in BFN_EVENT_STAT DEBUG field, which is 28 bits.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} trx_sys_csr_bfne_cfg_reg_t;

#define TRX_SYS_CSR_BFNE_CFG_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_BFNE_CFG_RD_MASK (0x0000003fU)
#define TRX_SYS_CSR_BFNE_CFG_WR_MASK (0x0000003fU)


///< Set to 1 to enable the operation of the bfn_event module. When running
///< in repeat mode, set this back to zero to immediately halt the operation.
///< NOte that this must be set to 1 for the force mechanism (See BFN_START
///< register) to work.
#define TRX_SYS_CSR_BFNE_CFG_EN_BF_OFF ( 0)
#define TRX_SYS_CSR_BFNE_CFG_EN_BF_WID ( 1)
#define TRX_SYS_CSR_BFNE_CFG_EN_BF_MSK (0x00000001)
#define TRX_SYS_CSR_BFNE_CFG_EN_BF_DEF (0x00000000)

///< Selects the mode of operation. Note that the force mechanism can be
///< triggered (see BFNE_START) regardless of which mode is selected here.
#define TRX_SYS_CSR_BFNE_CFG_MODE_BF_OFF ( 1)
#define TRX_SYS_CSR_BFNE_CFG_MODE_BF_WID ( 2)
#define TRX_SYS_CSR_BFNE_CFG_MODE_BF_MSK (0x00000006)
#define TRX_SYS_CSR_BFNE_CFG_MODE_BF_DEF (0x00000000)

///< Selects whether the BFN_EVENT output toggles at each event, or produces
///< a single cycle pulse.
#define TRX_SYS_CSR_BFNE_CFG_OUTPUT_MODE_BF_OFF ( 3)
#define TRX_SYS_CSR_BFNE_CFG_OUTPUT_MODE_BF_WID ( 1)
#define TRX_SYS_CSR_BFNE_CFG_OUTPUT_MODE_BF_MSK (0x00000008)
#define TRX_SYS_CSR_BFNE_CFG_OUTPUT_MODE_BF_DEF (0x00000000)

///< Controls what appears in BFN_EVENT_STAT DEBUG field, which is 28 bits.
#define TRX_SYS_CSR_BFNE_CFG_DBG_MODE_BF_OFF ( 4)
#define TRX_SYS_CSR_BFNE_CFG_DBG_MODE_BF_WID ( 2)
#define TRX_SYS_CSR_BFNE_CFG_DBG_MODE_BF_MSK (0x00000030)
#define TRX_SYS_CSR_BFNE_CFG_DBG_MODE_BF_DEF (0x00000000)
#define TRX_SYS_CSR_BFNE_CFG_ARR_SZ0 (11)
#define TRX_SYS_CSR_BFNE_CFG_ARRAY_STRIDE0 (0x0004)


/** @brief TRX_SYS_CSR_CSR_MAP_ABC_BFN_EVENTS_BFNE_INCR[11] register description at address offset 0x440
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/ABC_BFN_EVENTS/BFNE_INCR
  * BFN Event Increment
  */

typedef union {
  struct {
    uint32_t OFFSET : 24;
    ///< Offset from nearest 10ms frame, in clock cycles.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FRAME : 8;
    ///< Count of 10ms frames.
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} trx_sys_csr_bfne_incr_reg_t;

#define TRX_SYS_CSR_BFNE_INCR_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_BFNE_INCR_RD_MASK (0xffffffffU)
#define TRX_SYS_CSR_BFNE_INCR_WR_MASK (0xffffffffU)


///< Offset from nearest 10ms frame, in clock cycles.
#define TRX_SYS_CSR_BFNE_INCR_OFFSET_BF_OFF ( 0)
#define TRX_SYS_CSR_BFNE_INCR_OFFSET_BF_WID (24)
#define TRX_SYS_CSR_BFNE_INCR_OFFSET_BF_MSK (0x00FFFFFF)
#define TRX_SYS_CSR_BFNE_INCR_OFFSET_BF_DEF (0x00000000)

///< Count of 10ms frames.
#define TRX_SYS_CSR_BFNE_INCR_FRAME_BF_OFF (24)
#define TRX_SYS_CSR_BFNE_INCR_FRAME_BF_WID ( 8)
#define TRX_SYS_CSR_BFNE_INCR_FRAME_BF_MSK (0xFF000000)
#define TRX_SYS_CSR_BFNE_INCR_FRAME_BF_DEF (0x00000000)
#define TRX_SYS_CSR_BFNE_INCR_ARR_SZ0 (11)
#define TRX_SYS_CSR_BFNE_INCR_ARRAY_STRIDE0 (0x0004)


/** @brief TRX_SYS_CSR_CSR_MAP_ABC_BFN_EVENTS_BFNE_START[11] register description at address offset 0x480
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/ABC_BFN_EVENTS/BFNE_START
  * BFN Event Start
  */

typedef union {
  struct {
    uint32_t OFFSET : 24;
    ///< Offset from nearest 10ms frame, in clock cycles.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FRAME : 8;
    ///< Count of 10ms frames.
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} trx_sys_csr_bfne_start_reg_t;

#define TRX_SYS_CSR_BFNE_START_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_BFNE_START_RD_MASK (0xffffffffU)
#define TRX_SYS_CSR_BFNE_START_WR_MASK (0xffffffffU)


///< Offset from nearest 10ms frame, in clock cycles.
#define TRX_SYS_CSR_BFNE_START_OFFSET_BF_OFF ( 0)
#define TRX_SYS_CSR_BFNE_START_OFFSET_BF_WID (24)
#define TRX_SYS_CSR_BFNE_START_OFFSET_BF_MSK (0x00FFFFFF)
#define TRX_SYS_CSR_BFNE_START_OFFSET_BF_DEF (0x00000000)

///< Count of 10ms frames.
#define TRX_SYS_CSR_BFNE_START_FRAME_BF_OFF (24)
#define TRX_SYS_CSR_BFNE_START_FRAME_BF_WID ( 8)
#define TRX_SYS_CSR_BFNE_START_FRAME_BF_MSK (0xFF000000)
#define TRX_SYS_CSR_BFNE_START_FRAME_BF_DEF (0x00000000)
#define TRX_SYS_CSR_BFNE_START_ARR_SZ0 (11)
#define TRX_SYS_CSR_BFNE_START_ARRAY_STRIDE0 (0x0004)


/** @brief TRX_SYS_CSR_CSR_MAP_ABC_BFN_EVENTS_BFNE_STAT[11] register description at address offset 0x4c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: trx_sys_csr/CSR_MAP/ABC_BFN_EVENTS/BFNE_STAT
  * BFN Event Status Register
  */

typedef union {
  struct {
    uint32_t CURRENT_VALUE : 1;
    ///< This bit shows the current output value of the bfn_event module
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t WAITING : 1;
    ///< This bit indicates when the bfn_event module is waiting for the programmed
    ///< bfn_start time. In Repeat mode, this will only toggle low during the
    ///< single cycle of each event, so is not useful.
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t DONE : 1;
    ///< This bit indicates that the bfn_module has reached its programmed
    ///< bfn time. In Repeate mode, this will only toggle high during the single
    ///< cycle of each event, so is not usefule.
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t DEBUG : 29;
    ///< This field is different based on the DEBUG_MODE setting in the BFNE_CONFIG
    ///< register.
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
  } ;
  uint32_t value;
} trx_sys_csr_bfne_stat_reg_t;

#define TRX_SYS_CSR_BFNE_STAT_DEFAULT (0x00000000U)
#define TRX_SYS_CSR_BFNE_STAT_RD_MASK (0xffffffffU)
#define TRX_SYS_CSR_BFNE_STAT_WR_MASK (0x00000000U)


///< This bit shows the current output value of the bfn_event module
#define TRX_SYS_CSR_BFNE_STAT_CURRENT_VAL_BF_OFF ( 0)
#define TRX_SYS_CSR_BFNE_STAT_CURRENT_VAL_BF_WID ( 1)
#define TRX_SYS_CSR_BFNE_STAT_CURRENT_VAL_BF_MSK (0x00000001)
#define TRX_SYS_CSR_BFNE_STAT_CURRENT_VAL_BF_DEF (0x00000000)

///< This bit indicates when the bfn_event module is waiting for the programmed
///< bfn_start time. In Repeat mode, this will only toggle low during the
///< single cycle of each event, so is not useful.
#define TRX_SYS_CSR_BFNE_STAT_WAITING_BF_OFF ( 1)
#define TRX_SYS_CSR_BFNE_STAT_WAITING_BF_WID ( 1)
#define TRX_SYS_CSR_BFNE_STAT_WAITING_BF_MSK (0x00000002)
#define TRX_SYS_CSR_BFNE_STAT_WAITING_BF_DEF (0x00000000)

///< This bit indicates that the bfn_module has reached its programmed
///< bfn time. In Repeate mode, this will only toggle high during the single
///< cycle of each event, so is not usefule.
#define TRX_SYS_CSR_BFNE_STAT_DONE_BF_OFF ( 2)
#define TRX_SYS_CSR_BFNE_STAT_DONE_BF_WID ( 1)
#define TRX_SYS_CSR_BFNE_STAT_DONE_BF_MSK (0x00000004)
#define TRX_SYS_CSR_BFNE_STAT_DONE_BF_DEF (0x00000000)

///< This field is different based on the DEBUG_MODE setting in the BFNE_CONFIG
///< register.
#define TRX_SYS_CSR_BFNE_STAT_DBG_BF_OFF ( 3)
#define TRX_SYS_CSR_BFNE_STAT_DBG_BF_WID (29)
#define TRX_SYS_CSR_BFNE_STAT_DBG_BF_MSK (0xFFFFFFF8)
#define TRX_SYS_CSR_BFNE_STAT_DBG_BF_DEF (0x00000000)
#define TRX_SYS_CSR_BFNE_STAT_ARR_SZ0 (11)
#define TRX_SYS_CSR_BFNE_STAT_ARRAY_STRIDE0 (0x0004)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define TRX_SYS_CSR_TRX_RATE_CFG_REG(_BASE) ((trx_sys_csr_trx_rate_cfg_reg_t*) TRX_SYS_CSR_TRX_RATE_CFG_ADR(_BASE))
#define TRX_SYS_CSR_TX_INT_HI_AGGR_REG(_BASE) ((trx_sys_csr_tx_int_hi_aggr_reg_t*) TRX_SYS_CSR_TX_INT_HI_AGGR_ADR(_BASE))
#define TRX_SYS_CSR_TX_INT_LO_AGGR_REG(_BASE) ((trx_sys_csr_tx_int_lo_aggr_reg_t*) TRX_SYS_CSR_TX_INT_LO_AGGR_ADR(_BASE))
#define TRX_SYS_CSR_RX_CAPMUX_SEL_REG(_BASE) ((trx_sys_csr_rx_capmux_sel_reg_t*) TRX_SYS_CSR_RX_CAPMUX_SEL_ADR(_BASE))
#define TRX_SYS_CSR_RX_INT_HI_AGGR_REG(_BASE) ((trx_sys_csr_rx_int_hi_aggr_reg_t*) TRX_SYS_CSR_RX_INT_HI_AGGR_ADR(_BASE))
#define TRX_SYS_CSR_RX_INT_LO_AGGR_REG(_BASE) ((trx_sys_csr_rx_int_lo_aggr_reg_t*) TRX_SYS_CSR_RX_INT_LO_AGGR_ADR(_BASE))
#define TRX_SYS_CSR_TX_INSERT0_SRC0_REG(_BASE) ((trx_sys_csr_tx_insert0_src0_reg_t*) TRX_SYS_CSR_TX_INSERT0_SRC0_ADR(_BASE))
#define TRX_SYS_CSR_TX_INSERT0_SRC1_REG(_BASE) ((trx_sys_csr_tx_insert0_src1_reg_t*) TRX_SYS_CSR_TX_INSERT0_SRC1_ADR(_BASE))
#define TRX_SYS_CSR_TX_INSERT1_SRC0_REG(_BASE) ((trx_sys_csr_tx_insert1_src0_reg_t*) TRX_SYS_CSR_TX_INSERT1_SRC0_ADR(_BASE))
#define TRX_SYS_CSR_TX_INSERT1_SRC1_REG(_BASE) ((trx_sys_csr_tx_insert1_src1_reg_t*) TRX_SYS_CSR_TX_INSERT1_SRC1_ADR(_BASE))
#define TRX_SYS_CSR_TX_INSERT_VALSRC_REG(_BASE) ((trx_sys_csr_tx_insert_valsrc_reg_t*) TRX_SYS_CSR_TX_INSERT_VALSRC_ADR(_BASE))
#define TRX_SYS_CSR_TX_INSERT0_CFG_REG(_BASE) ((trx_sys_csr_tx_insert0_cfg_reg_t*) TRX_SYS_CSR_TX_INSERT0_CFG_ADR(_BASE))
#define TRX_SYS_CSR_TX_INSERT1_CFG_REG(_BASE) ((trx_sys_csr_tx_insert1_cfg_reg_t*) TRX_SYS_CSR_TX_INSERT1_CFG_ADR(_BASE))
#define TRX_SYS_CSR_TX_ALARM0_FORCE_REG(_BASE) ((trx_sys_csr_tx_alarm0_force_reg_t*) TRX_SYS_CSR_TX_ALARM0_FORCE_ADR(_BASE))
#define TRX_SYS_CSR_TX_ALARM0_MASK_REG(_BASE) ((trx_sys_csr_tx_alarm0_mask_reg_t*) TRX_SYS_CSR_TX_ALARM0_MASK_ADR(_BASE))
#define TRX_SYS_CSR_TX_ALARM0_STAT_REG(_BASE) ((trx_sys_csr_tx_alarm0_stat_reg_t*) TRX_SYS_CSR_TX_ALARM0_STAT_ADR(_BASE))
#define TRX_SYS_CSR_TX_ALARM0_STICKY_REG(_BASE) ((trx_sys_csr_tx_alarm0_sticky_reg_t*) TRX_SYS_CSR_TX_ALARM0_STICKY_ADR(_BASE))
#define TRX_SYS_CSR_TX_ALARM0_ETIMER_REG(_BASE) ((trx_sys_csr_tx_alarm0_etimer_reg_t*) TRX_SYS_CSR_TX_ALARM0_ETIMER_ADR(_BASE))
#define TRX_SYS_CSR_TX_ALARM0_PNTIMER_REG(_BASE) ((trx_sys_csr_tx_alarm0_pntimer_reg_t*) TRX_SYS_CSR_TX_ALARM0_PNTIMER_ADR(_BASE))
#define TRX_SYS_CSR_TX_ALARM1_FORCE_REG(_BASE) ((trx_sys_csr_tx_alarm1_force_reg_t*) TRX_SYS_CSR_TX_ALARM1_FORCE_ADR(_BASE))
#define TRX_SYS_CSR_TX_ALARM1_MASK_REG(_BASE) ((trx_sys_csr_tx_alarm1_mask_reg_t*) TRX_SYS_CSR_TX_ALARM1_MASK_ADR(_BASE))
#define TRX_SYS_CSR_TX_ALARM1_STAT_REG(_BASE) ((trx_sys_csr_tx_alarm1_stat_reg_t*) TRX_SYS_CSR_TX_ALARM1_STAT_ADR(_BASE))
#define TRX_SYS_CSR_TX_ALARM1_STICKY_REG(_BASE) ((trx_sys_csr_tx_alarm1_sticky_reg_t*) TRX_SYS_CSR_TX_ALARM1_STICKY_ADR(_BASE))
#define TRX_SYS_CSR_TX_ALARM1_ETIMER_REG(_BASE) ((trx_sys_csr_tx_alarm1_etimer_reg_t*) TRX_SYS_CSR_TX_ALARM1_ETIMER_ADR(_BASE))
#define TRX_SYS_CSR_TX_ALARM1_PNTIMER_REG(_BASE) ((trx_sys_csr_tx_alarm1_pntimer_reg_t*) TRX_SYS_CSR_TX_ALARM1_PNTIMER_ADR(_BASE))
#define TRX_SYS_CSR_CVA_CS0_I_REG(_BASE) ((trx_sys_csr_cva_cs0_i_reg_t*) TRX_SYS_CSR_CVA_CS0_I_ADR(_BASE))
#define TRX_SYS_CSR_CVA_CS0_Q_REG(_BASE) ((trx_sys_csr_cva_cs0_q_reg_t*) TRX_SYS_CSR_CVA_CS0_Q_ADR(_BASE))
#define TRX_SYS_CSR_CVA_CS1_I_REG(_BASE) ((trx_sys_csr_cva_cs1_i_reg_t*) TRX_SYS_CSR_CVA_CS1_I_ADR(_BASE))
#define TRX_SYS_CSR_CVA_CS1_Q_REG(_BASE) ((trx_sys_csr_cva_cs1_q_reg_t*) TRX_SYS_CSR_CVA_CS1_Q_ADR(_BASE))
#define TRX_SYS_CSR_CVA_ERR_REG(_BASE) ((trx_sys_csr_cva_err_reg_t*) TRX_SYS_CSR_CVA_ERR_ADR(_BASE))
#define TRX_SYS_CSR_CVA_CFG_REG(_BASE) ((trx_sys_csr_cva_cfg_reg_t*) TRX_SYS_CSR_CVA_CFG_ADR(_BASE))
#define TRX_SYS_CSR_MOD_AC_CAL_ENA_REG(_BASE) ((trx_sys_csr_mod_ac_cal_ena_reg_t*) TRX_SYS_CSR_MOD_AC_CAL_ENA_ADR(_BASE))
#define TRX_SYS_CSR_MOD_CAPMUX_SEL_REG(_BASE) ((trx_sys_csr_mod_capmux_sel_reg_t*) TRX_SYS_CSR_MOD_CAPMUX_SEL_ADR(_BASE))
#define TRX_SYS_CSR_DMOD_AC_CAL_ENA_REG(_BASE) ((trx_sys_csr_dmod_ac_cal_ena_reg_t*) TRX_SYS_CSR_DMOD_AC_CAL_ENA_ADR(_BASE))
#define TRX_SYS_CSR_TX_ALARM0_CNTER_REG(_BASE) ((trx_sys_csr_tx_alarm0_cnter_reg_t*) TRX_SYS_CSR_TX_ALARM0_CNTER_ADR(_BASE))
#define TRX_SYS_CSR_TX_ALARM1_CNTER_REG(_BASE) ((trx_sys_csr_tx_alarm1_cnter_reg_t*) TRX_SYS_CSR_TX_ALARM1_CNTER_ADR(_BASE))
#define TRX_SYS_CSR_DP_INIT_ENB_REG(_BASE) ((trx_sys_csr_dp_init_enb_reg_t*) TRX_SYS_CSR_DP_INIT_ENB_ADR(_BASE))
#define TRX_SYS_CSR_DP_DONE_STAT_REG(_BASE) ((trx_sys_csr_dp_done_stat_reg_t*) TRX_SYS_CSR_DP_DONE_STAT_ADR(_BASE))
#define TRX_SYS_CSR_TRX_INT_STAT_REG(_BASE) ((trx_sys_csr_trx_int_stat_reg_t*) TRX_SYS_CSR_TRX_INT_STAT_ADR(_BASE))
#define TRX_SYS_CSR_TRX_INT_HI_EN_REG(_BASE) ((trx_sys_csr_trx_int_hi_en_reg_t*) TRX_SYS_CSR_TRX_INT_HI_EN_ADR(_BASE))
#define TRX_SYS_CSR_TRX_INT_LO_EN_REG(_BASE) ((trx_sys_csr_trx_int_lo_en_reg_t*) TRX_SYS_CSR_TRX_INT_LO_EN_ADR(_BASE))
#define TRX_SYS_CSR_TRX_INT_CLR_REG(_BASE) ((trx_sys_csr_trx_int_clr_reg_t*) TRX_SYS_CSR_TRX_INT_CLR_ADR(_BASE))
#define TRX_SYS_CSR_TRX_INT_FORCE_REG(_BASE) ((trx_sys_csr_trx_int_force_reg_t*) TRX_SYS_CSR_TRX_INT_FORCE_ADR(_BASE))
#define TRX_SYS_CSR_SMON_R0_REG(_BASE) ((trx_sys_csr_smon_r0_reg_t*) TRX_SYS_CSR_SMON_R0_ADR(_BASE))
#define TRX_SYS_CSR_SMON_R1_REG(_BASE) ((trx_sys_csr_smon_r1_reg_t*) TRX_SYS_CSR_SMON_R1_ADR(_BASE))
#define TRX_SYS_CSR_SMON_R2_REG(_BASE) ((trx_sys_csr_smon_r2_reg_t*) TRX_SYS_CSR_SMON_R2_ADR(_BASE))
#define TRX_SYS_CSR_SMON_R3_REG(_BASE) ((trx_sys_csr_smon_r3_reg_t*) TRX_SYS_CSR_SMON_R3_ADR(_BASE))
#define TRX_SYS_CSR_SMON_R4_REG(_BASE) ((trx_sys_csr_smon_r4_reg_t*) TRX_SYS_CSR_SMON_R4_ADR(_BASE))
#define TRX_SYS_CSR_SMON_R5_REG(_BASE) ((trx_sys_csr_smon_r5_reg_t*) TRX_SYS_CSR_SMON_R5_ADR(_BASE))
#define TRX_SYS_CSR_SMON_R6_REG(_BASE) ((trx_sys_csr_smon_r6_reg_t*) TRX_SYS_CSR_SMON_R6_ADR(_BASE))
#define TRX_SYS_CSR_SMON_R7_REG(_BASE) ((trx_sys_csr_smon_r7_reg_t*) TRX_SYS_CSR_SMON_R7_ADR(_BASE))
#define TRX_SYS_CSR_APB_BRDG_STAT_REG(_BASE) ((trx_sys_csr_apb_brdg_stat_reg_t*) TRX_SYS_CSR_APB_BRDG_STAT_ADR(_BASE))
#define TRX_SYS_CSR_ISYNC_CTRL_REG(_BASE) ((trx_sys_csr_isync_ctrl_reg_t*) TRX_SYS_CSR_ISYNC_CTRL_ADR(_BASE))
#define TRX_SYS_CSR_ISYNC_LCNT_INC_REG(_BASE) ((trx_sys_csr_isync_lcnt_inc_reg_t*) TRX_SYS_CSR_ISYNC_LCNT_INC_ADR(_BASE))
#define TRX_SYS_CSR_ISYNC_TEN_MS_CNT_REG(_BASE) ((trx_sys_csr_isync_ten_ms_cnt_reg_t*) TRX_SYS_CSR_ISYNC_TEN_MS_CNT_ADR(_BASE))
#define TRX_SYS_CSR_ISYNC_INC_PRE_REG(_BASE) ((trx_sys_csr_isync_inc_pre_reg_t*) TRX_SYS_CSR_ISYNC_INC_PRE_ADR(_BASE))
#define TRX_SYS_CSR_ISYNC_CNT_ADJ_REG(_BASE) ((trx_sys_csr_isync_cnt_adj_reg_t*) TRX_SYS_CSR_ISYNC_CNT_ADJ_ADR(_BASE))
#define TRX_SYS_CSR_ISYNC_BFN_CNT_SYNC_REG(_BASE) ((trx_sys_csr_isync_bfn_cnt_sync_reg_t*) TRX_SYS_CSR_ISYNC_BFN_CNT_SYNC_ADR(_BASE))
#define TRX_SYS_CSR_ISYNC_BFN_CNT_REG(_BASE) ((trx_sys_csr_isync_bfn_cnt_reg_t*) TRX_SYS_CSR_ISYNC_BFN_CNT_ADR(_BASE))
#define TRX_SYS_CSR_BFNE_CFG0_REG(_BASE) ((trx_sys_csr_bfne_cfg_reg_t*) TRX_SYS_CSR_BFNE_CFG0_ADR(_BASE))
#define TRX_SYS_CSR_BFNE_CFG1_REG(_BASE) ((trx_sys_csr_bfne_cfg_reg_t*) TRX_SYS_CSR_BFNE_CFG1_ADR(_BASE))
#define TRX_SYS_CSR_BFNE_CFG2_REG(_BASE) ((trx_sys_csr_bfne_cfg_reg_t*) TRX_SYS_CSR_BFNE_CFG2_ADR(_BASE))
#define TRX_SYS_CSR_BFNE_CFG3_REG(_BASE) ((trx_sys_csr_bfne_cfg_reg_t*) TRX_SYS_CSR_BFNE_CFG3_ADR(_BASE))
#define TRX_SYS_CSR_BFNE_CFG4_REG(_BASE) ((trx_sys_csr_bfne_cfg_reg_t*) TRX_SYS_CSR_BFNE_CFG4_ADR(_BASE))
#define TRX_SYS_CSR_BFNE_CFG5_REG(_BASE) ((trx_sys_csr_bfne_cfg_reg_t*) TRX_SYS_CSR_BFNE_CFG5_ADR(_BASE))
#define TRX_SYS_CSR_BFNE_CFG6_REG(_BASE) ((trx_sys_csr_bfne_cfg_reg_t*) TRX_SYS_CSR_BFNE_CFG6_ADR(_BASE))
#define TRX_SYS_CSR_BFNE_CFG7_REG(_BASE) ((trx_sys_csr_bfne_cfg_reg_t*) TRX_SYS_CSR_BFNE_CFG7_ADR(_BASE))
#define TRX_SYS_CSR_BFNE_CFG8_REG(_BASE) ((trx_sys_csr_bfne_cfg_reg_t*) TRX_SYS_CSR_BFNE_CFG8_ADR(_BASE))
#define TRX_SYS_CSR_BFNE_CFG9_REG(_BASE) ((trx_sys_csr_bfne_cfg_reg_t*) TRX_SYS_CSR_BFNE_CFG9_ADR(_BASE))
#define TRX_SYS_CSR_BFNE_CFG10_REG(_BASE) ((trx_sys_csr_bfne_cfg_reg_t*) TRX_SYS_CSR_BFNE_CFG10_ADR(_BASE))
#define TRX_SYS_CSR_BFNE_INCR0_REG(_BASE) ((trx_sys_csr_bfne_incr_reg_t*) TRX_SYS_CSR_BFNE_INCR0_ADR(_BASE))
#define TRX_SYS_CSR_BFNE_INCR1_REG(_BASE) ((trx_sys_csr_bfne_incr_reg_t*) TRX_SYS_CSR_BFNE_INCR1_ADR(_BASE))
#define TRX_SYS_CSR_BFNE_INCR2_REG(_BASE) ((trx_sys_csr_bfne_incr_reg_t*) TRX_SYS_CSR_BFNE_INCR2_ADR(_BASE))
#define TRX_SYS_CSR_BFNE_INCR3_REG(_BASE) ((trx_sys_csr_bfne_incr_reg_t*) TRX_SYS_CSR_BFNE_INCR3_ADR(_BASE))
#define TRX_SYS_CSR_BFNE_INCR4_REG(_BASE) ((trx_sys_csr_bfne_incr_reg_t*) TRX_SYS_CSR_BFNE_INCR4_ADR(_BASE))
#define TRX_SYS_CSR_BFNE_INCR5_REG(_BASE) ((trx_sys_csr_bfne_incr_reg_t*) TRX_SYS_CSR_BFNE_INCR5_ADR(_BASE))
#define TRX_SYS_CSR_BFNE_INCR6_REG(_BASE) ((trx_sys_csr_bfne_incr_reg_t*) TRX_SYS_CSR_BFNE_INCR6_ADR(_BASE))
#define TRX_SYS_CSR_BFNE_INCR7_REG(_BASE) ((trx_sys_csr_bfne_incr_reg_t*) TRX_SYS_CSR_BFNE_INCR7_ADR(_BASE))
#define TRX_SYS_CSR_BFNE_INCR8_REG(_BASE) ((trx_sys_csr_bfne_incr_reg_t*) TRX_SYS_CSR_BFNE_INCR8_ADR(_BASE))
#define TRX_SYS_CSR_BFNE_INCR9_REG(_BASE) ((trx_sys_csr_bfne_incr_reg_t*) TRX_SYS_CSR_BFNE_INCR9_ADR(_BASE))
#define TRX_SYS_CSR_BFNE_INCR10_REG(_BASE) ((trx_sys_csr_bfne_incr_reg_t*) TRX_SYS_CSR_BFNE_INCR10_ADR(_BASE))
#define TRX_SYS_CSR_BFNE_START0_REG(_BASE) ((trx_sys_csr_bfne_start_reg_t*) TRX_SYS_CSR_BFNE_START0_ADR(_BASE))
#define TRX_SYS_CSR_BFNE_START1_REG(_BASE) ((trx_sys_csr_bfne_start_reg_t*) TRX_SYS_CSR_BFNE_START1_ADR(_BASE))
#define TRX_SYS_CSR_BFNE_START2_REG(_BASE) ((trx_sys_csr_bfne_start_reg_t*) TRX_SYS_CSR_BFNE_START2_ADR(_BASE))
#define TRX_SYS_CSR_BFNE_START3_REG(_BASE) ((trx_sys_csr_bfne_start_reg_t*) TRX_SYS_CSR_BFNE_START3_ADR(_BASE))
#define TRX_SYS_CSR_BFNE_START4_REG(_BASE) ((trx_sys_csr_bfne_start_reg_t*) TRX_SYS_CSR_BFNE_START4_ADR(_BASE))
#define TRX_SYS_CSR_BFNE_START5_REG(_BASE) ((trx_sys_csr_bfne_start_reg_t*) TRX_SYS_CSR_BFNE_START5_ADR(_BASE))
#define TRX_SYS_CSR_BFNE_START6_REG(_BASE) ((trx_sys_csr_bfne_start_reg_t*) TRX_SYS_CSR_BFNE_START6_ADR(_BASE))
#define TRX_SYS_CSR_BFNE_START7_REG(_BASE) ((trx_sys_csr_bfne_start_reg_t*) TRX_SYS_CSR_BFNE_START7_ADR(_BASE))
#define TRX_SYS_CSR_BFNE_START8_REG(_BASE) ((trx_sys_csr_bfne_start_reg_t*) TRX_SYS_CSR_BFNE_START8_ADR(_BASE))
#define TRX_SYS_CSR_BFNE_START9_REG(_BASE) ((trx_sys_csr_bfne_start_reg_t*) TRX_SYS_CSR_BFNE_START9_ADR(_BASE))
#define TRX_SYS_CSR_BFNE_START10_REG(_BASE) ((trx_sys_csr_bfne_start_reg_t*) TRX_SYS_CSR_BFNE_START10_ADR(_BASE))
#define TRX_SYS_CSR_BFNE_STAT0_REG(_BASE) ((trx_sys_csr_bfne_stat_reg_t*) TRX_SYS_CSR_BFNE_STAT0_ADR(_BASE))
#define TRX_SYS_CSR_BFNE_STAT1_REG(_BASE) ((trx_sys_csr_bfne_stat_reg_t*) TRX_SYS_CSR_BFNE_STAT1_ADR(_BASE))
#define TRX_SYS_CSR_BFNE_STAT2_REG(_BASE) ((trx_sys_csr_bfne_stat_reg_t*) TRX_SYS_CSR_BFNE_STAT2_ADR(_BASE))
#define TRX_SYS_CSR_BFNE_STAT3_REG(_BASE) ((trx_sys_csr_bfne_stat_reg_t*) TRX_SYS_CSR_BFNE_STAT3_ADR(_BASE))
#define TRX_SYS_CSR_BFNE_STAT4_REG(_BASE) ((trx_sys_csr_bfne_stat_reg_t*) TRX_SYS_CSR_BFNE_STAT4_ADR(_BASE))
#define TRX_SYS_CSR_BFNE_STAT5_REG(_BASE) ((trx_sys_csr_bfne_stat_reg_t*) TRX_SYS_CSR_BFNE_STAT5_ADR(_BASE))
#define TRX_SYS_CSR_BFNE_STAT6_REG(_BASE) ((trx_sys_csr_bfne_stat_reg_t*) TRX_SYS_CSR_BFNE_STAT6_ADR(_BASE))
#define TRX_SYS_CSR_BFNE_STAT7_REG(_BASE) ((trx_sys_csr_bfne_stat_reg_t*) TRX_SYS_CSR_BFNE_STAT7_ADR(_BASE))
#define TRX_SYS_CSR_BFNE_STAT8_REG(_BASE) ((trx_sys_csr_bfne_stat_reg_t*) TRX_SYS_CSR_BFNE_STAT8_ADR(_BASE))
#define TRX_SYS_CSR_BFNE_STAT9_REG(_BASE) ((trx_sys_csr_bfne_stat_reg_t*) TRX_SYS_CSR_BFNE_STAT9_ADR(_BASE))
#define TRX_SYS_CSR_BFNE_STAT10_REG(_BASE) ((trx_sys_csr_bfne_stat_reg_t*) TRX_SYS_CSR_BFNE_STAT10_ADR(_BASE))

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    trx_sys_csr_trx_rate_cfg_reg_t TRX_RATE_CFG; /*< Address offset = 0x0 */
    trx_sys_csr_tx_int_hi_aggr_reg_t TX_INT_HI_AGGR; /*< Address offset = 0x4 */
    trx_sys_csr_tx_int_lo_aggr_reg_t TX_INT_LO_AGGR; /*< Address offset = 0x8 */
    const uint8_t        reservedArea0 [8];   /*< Address offset = 0xc */
    trx_sys_csr_rx_capmux_sel_reg_t RX_CAPMUX_SEL; /*< Address offset = 0x14 */
    trx_sys_csr_rx_int_hi_aggr_reg_t RX_INT_HI_AGGR; /*< Address offset = 0x18 */
    trx_sys_csr_rx_int_lo_aggr_reg_t RX_INT_LO_AGGR; /*< Address offset = 0x1c */
    trx_sys_csr_tx_insert0_src0_reg_t TX_INSERT0_SRC0; /*< Address offset = 0x20 */
    trx_sys_csr_tx_insert0_src1_reg_t TX_INSERT0_SRC1; /*< Address offset = 0x24 */
    trx_sys_csr_tx_insert1_src0_reg_t TX_INSERT1_SRC0; /*< Address offset = 0x28 */
    trx_sys_csr_tx_insert1_src1_reg_t TX_INSERT1_SRC1; /*< Address offset = 0x2c */
    trx_sys_csr_tx_insert_valsrc_reg_t TX_INSERT_VALSRC; /*< Address offset = 0x30 */
    trx_sys_csr_tx_insert0_cfg_reg_t TX_INSERT0_CFG; /*< Address offset = 0x34 */
    trx_sys_csr_tx_insert1_cfg_reg_t TX_INSERT1_CFG; /*< Address offset = 0x38 */
    const uint8_t        reservedArea1 [4];   /*< Address offset = 0x3c */
    trx_sys_csr_tx_alarm0_force_reg_t TX_ALARM0_FORCE; /*< Address offset = 0x40 */
    trx_sys_csr_tx_alarm0_mask_reg_t TX_ALARM0_MASK; /*< Address offset = 0x44 */
    trx_sys_csr_tx_alarm0_stat_reg_t TX_ALARM0_STAT; /*< Address offset = 0x48 */
    trx_sys_csr_tx_alarm0_sticky_reg_t TX_ALARM0_STICKY; /*< Address offset = 0x4c */
    trx_sys_csr_tx_alarm0_etimer_reg_t TX_ALARM0_ETIMER; /*< Address offset = 0x50 */
    trx_sys_csr_tx_alarm0_pntimer_reg_t TX_ALARM0_PNTIMER; /*< Address offset = 0x54 */
    trx_sys_csr_tx_alarm1_force_reg_t TX_ALARM1_FORCE; /*< Address offset = 0x58 */
    trx_sys_csr_tx_alarm1_mask_reg_t TX_ALARM1_MASK; /*< Address offset = 0x5c */
    trx_sys_csr_tx_alarm1_stat_reg_t TX_ALARM1_STAT; /*< Address offset = 0x60 */
    trx_sys_csr_tx_alarm1_sticky_reg_t TX_ALARM1_STICKY; /*< Address offset = 0x64 */
    trx_sys_csr_tx_alarm1_etimer_reg_t TX_ALARM1_ETIMER; /*< Address offset = 0x68 */
    trx_sys_csr_tx_alarm1_pntimer_reg_t TX_ALARM1_PNTIMER; /*< Address offset = 0x6c */
    trx_sys_csr_cva_cs0_i_reg_t CVA_CS0_I;   /*< Address offset = 0x70 */
    trx_sys_csr_cva_cs0_q_reg_t CVA_CS0_Q;   /*< Address offset = 0x74 */
    trx_sys_csr_cva_cs1_i_reg_t CVA_CS1_I;   /*< Address offset = 0x78 */
    trx_sys_csr_cva_cs1_q_reg_t CVA_CS1_Q;   /*< Address offset = 0x7c */
    trx_sys_csr_cva_err_reg_t CVA_ERR;   /*< Address offset = 0x80 */
    trx_sys_csr_cva_cfg_reg_t CVA_CFG;  /*< Address offset = 0x84 */
    trx_sys_csr_mod_ac_cal_ena_reg_t MOD_AC_CAL_ENA; /*< Address offset = 0x88 */
    trx_sys_csr_mod_capmux_sel_reg_t MOD_CAPMUX_SEL; /*< Address offset = 0x8c */
    trx_sys_csr_dmod_ac_cal_ena_reg_t DMOD_AC_CAL_ENA; /*< Address offset = 0x90 */
    trx_sys_csr_tx_alarm0_cnter_reg_t TX_ALARM0_CNTER; /*< Address offset = 0x94 */
    trx_sys_csr_tx_alarm1_cnter_reg_t TX_ALARM1_CNTER; /*< Address offset = 0x98 */
    trx_sys_csr_dp_init_enb_reg_t DP_INIT_ENB; /*< Address offset = 0x9c */
    trx_sys_csr_dp_done_stat_reg_t DP_DONE_STAT; /*< Address offset = 0xa0 */
    const uint8_t        reservedArea2 [28];  /*< Address offset = 0xa4 */
    trx_sys_csr_trx_int_stat_reg_t TRX_INT_STAT; /*< Address offset = 0xc0 */
    trx_sys_csr_trx_int_hi_en_reg_t TRX_INT_HI_EN; /*< Address offset = 0xc4 */
    trx_sys_csr_trx_int_lo_en_reg_t TRX_INT_LO_EN; /*< Address offset = 0xc8 */
    trx_sys_csr_trx_int_clr_reg_t TRX_INT_CLR; /*< Address offset = 0xcc */
    trx_sys_csr_trx_int_force_reg_t TRX_INT_FORCE; /*< Address offset = 0xd0 */
    const uint8_t        reservedArea3 [268]; /*< Address offset = 0xd4 */
    trx_sys_csr_smon_r0_reg_t SMON_R0; /*< Address offset = 0x1e0 */
    trx_sys_csr_smon_r1_reg_t SMON_R1; /*< Address offset = 0x1e4 */
    trx_sys_csr_smon_r2_reg_t SMON_R2; /*< Address offset = 0x1e8 */
    trx_sys_csr_smon_r3_reg_t SMON_R3; /*< Address offset = 0x1ec */
    trx_sys_csr_smon_r4_reg_t SMON_R4; /*< Address offset = 0x1f0 */
    trx_sys_csr_smon_r5_reg_t SMON_R5; /*< Address offset = 0x1f4 */
    trx_sys_csr_smon_r6_reg_t SMON_R6; /*< Address offset = 0x1f8 */
    trx_sys_csr_smon_r7_reg_t SMON_R7; /*< Address offset = 0x1fc */
    trx_sys_csr_apb_brdg_stat_reg_t APB_BRDG_STAT; /*< Address offset = 0x200 */
    const uint8_t        reservedArea4 [252]; /*< Address offset = 0x204 */
    trx_sys_csr_isync_ctrl_reg_t ISYNC_CTRL; /*< Address offset = 0x300 */
    trx_sys_csr_isync_lcnt_inc_reg_t ISYNC_LCNT_INC; /*< Address offset = 0x304 */
    trx_sys_csr_isync_ten_ms_cnt_reg_t ISYNC_TEN_MS_CNT; /*< Address offset = 0x308 */
    trx_sys_csr_isync_inc_pre_reg_t ISYNC_INC_PRE; /*< Address offset = 0x30c */
    trx_sys_csr_isync_cnt_adj_reg_t ISYNC_CNT_ADJ; /*< Address offset = 0x310 */
    trx_sys_csr_isync_bfn_cnt_sync_reg_t ISYNC_BFN_CNT_SYNC; /*< Address offset = 0x314 */
    trx_sys_csr_isync_bfn_cnt_reg_t ISYNC_BFN_CNT; /*< Address offset = 0x318 */
    const uint8_t        reservedArea5 [228]; /*< Address offset = 0x31c */
    trx_sys_csr_bfne_cfg_reg_t BFNE_CFG[11]; /*< Address offset = 0x400 */
    const uint8_t        reservedArea6 [20];  /*< Address offset = 0x42c */
    trx_sys_csr_bfne_incr_reg_t BFNE_INCR[11]; /*< Address offset = 0x440 */
    const uint8_t        reservedArea7 [20];  /*< Address offset = 0x46c */
    trx_sys_csr_bfne_start_reg_t BFNE_START[11]; /*< Address offset = 0x480 */
    const uint8_t        reservedArea8 [20];  /*< Address offset = 0x4ac */
    trx_sys_csr_bfne_stat_reg_t BFNE_STAT[11]; /*< Address offset = 0x4c0 */
} trx_sys_csr_t;     // size: 0x00fc

// AddressSpace struct pointer
//
#define TRX_SYS0_CSR     ((trx_sys_csr_t*) TRX_SYS0_CSR_BASE)
#define TRX_SYS1_CSR     ((trx_sys_csr_t*) TRX_SYS1_CSR_BASE)
#define TRX_SYS2_CSR     ((trx_sys_csr_t*) TRX_SYS2_CSR_BASE)
#define TRX_SYS3_CSR     ((trx_sys_csr_t*) TRX_SYS3_CSR_BASE)
#define TRX_SYS4_CSR     ((trx_sys_csr_t*) TRX_SYS4_CSR_BASE)
#define TRX_SYS5_CSR     ((trx_sys_csr_t*) TRX_SYS5_CSR_BASE)
#define TRX_SYS6_CSR     ((trx_sys_csr_t*) TRX_SYS6_CSR_BASE)
#define TRX_SYS7_CSR     ((trx_sys_csr_t*) TRX_SYS7_CSR_BASE)

// ******************************************* /Address Space

#endif      // _TRX_SYS_CSR_H_

