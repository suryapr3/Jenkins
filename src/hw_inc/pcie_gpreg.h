#ifndef _PCIE_GPREG_H_
#define _PCIE_GPREG_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define DLNK_PCIE_GPREG_BASE  ( 0x01a00000 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define PCIE_AXI_GPREG_SCRATCH0_OFFSET ( 0x00000000U )
#define PCIE_AXI_GPREG_SCRATCH1_OFFSET ( 0x00000004U )
#define PCIE_AXI_GPREG_BRDG_OFFSET ( 0x00000008U )
#define PCIE_AXI_GPREG_ECC_FORCE_TYPE_S_OFFSET ( 0x00000100U )
#define PCIE_AXI_GPREG_ECC_FORCE_ERR_S_OFFSET ( 0x00000104U )
#define PCIE_AXI_GPREG_ECC_CLR_S_OFFSET ( 0x00000108U )
#define PCIE_AXI_GPREG_ECC_CNT_CLR_S_OFFSET ( 0x0000010cU )
#define PCIE_AXI_GPREG_ECC_CHK_DIS_S_OFFSET ( 0x00000110U )
#define PCIE_AXI_GPREG_ECC_GEN_DIS_S_OFFSET ( 0x00000114U )
#define PCIE_AXI_GPREG_MEM_INIT_CTRL_S_OFFSET ( 0x00000118U )
#define PCIE_AXI_GPREG_SMON_CLT_0_OFFSET ( 0x0000011cU )
#define PCIE_AXI_GPREG_SMON_CLT_1_OFFSET ( 0x00000120U )
#define PCIE_AXI_GPREG_RO_0_OFFSET ( 0x00000200U )
#define PCIE_AXI_GPREG_SMON_0_OFFSET ( 0x00000204U )
#define PCIE_AXI_GPREG_SMON_1_OFFSET ( 0x00000208U )
#define PCIE_AXI_GPREG_SMON_2_OFFSET ( 0x0000020cU )
#define PCIE_AXI_GPREG_SMON_3_OFFSET ( 0x00000210U )
#define PCIE_AXI_GPREG_SMON_4_OFFSET ( 0x00000214U )
#define PCIE_AXI_GPREG_SMON_5_OFFSET ( 0x00000218U )
#define PCIE_AXI_GPREG_SMON_6_OFFSET ( 0x0000021cU )
#define PCIE_AXI_GPREG_SMON_7_OFFSET ( 0x00000220U )
#define PCIE_AXI_GPREG_ECC_SBE_OFFSET ( 0x00000224U )
#define PCIE_AXI_GPREG_ECC_DBE_OFFSET ( 0x00000228U )
#define PCIE_AXI_GPREG_ECC_SBE_CNT_OVFL_OFFSET ( 0x0000022cU )
#define PCIE_AXI_GPREG_ECC_ERR_ADDR_0_OFFSET ( 0x00000230U )
#define PCIE_AXI_GPREG_ECC_ERR_ADDR_1_OFFSET ( 0x00000234U )
#define PCIE_AXI_GPREG_ECC_ERR_SYNDROME_0_OFFSET ( 0x00000238U )
#define PCIE_AXI_GPREG_ECC_ERR_SYNDROME_1_OFFSET ( 0x0000023cU )
#define PCIE_AXI_GPREG_INTR0_STAT_OFFSET ( 0x00000400U )
#define PCIE_AXI_GPREG_INTR0_HIGH_EN_OFFSET ( 0x00000404U )
#define PCIE_AXI_GPREG_INTR0_LOW_EN_OFFSET ( 0x00000408U )
#define PCIE_AXI_GPREG_INTR0_CLR_OFFSET ( 0x0000040cU )
#define PCIE_AXI_GPREG_INTR0_FORCE_OFFSET ( 0x00000410U )
#define PCIE_AXI_GPREG_INTR1_STAT_S_OFFSET ( 0x00000420U )
#define PCIE_AXI_GPREG_INTR1_HIGH_EN_S_OFFSET ( 0x00000424U )
#define PCIE_AXI_GPREG_INTR1_LOW_EN_S_OFFSET ( 0x00000428U )
#define PCIE_AXI_GPREG_INTR1_CLR_S_OFFSET ( 0x0000042cU )
#define PCIE_AXI_GPREG_INTR1_FORCE_S_OFFSET ( 0x00000430U )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define PCIE_AXI_GPREG_SCRATCH0_ADR (( ( DLNK_PCIE_GPREG_BASE ) + ( PCIE_AXI_GPREG_SCRATCH0_OFFSET ) ))
#define PCIE_AXI_GPREG_SCRATCH1_ADR (( ( DLNK_PCIE_GPREG_BASE ) + ( PCIE_AXI_GPREG_SCRATCH1_OFFSET ) ))
#define PCIE_AXI_GPREG_BRDG_ADR (( ( DLNK_PCIE_GPREG_BASE ) + ( PCIE_AXI_GPREG_BRDG_OFFSET ) ))
#define PCIE_AXI_GPREG_ECC_FORCE_TYPE_S_ADR (( ( DLNK_PCIE_GPREG_BASE ) + ( PCIE_AXI_GPREG_ECC_FORCE_TYPE_S_OFFSET ) ))
#define PCIE_AXI_GPREG_ECC_FORCE_ERR_S_ADR (( ( DLNK_PCIE_GPREG_BASE ) + ( PCIE_AXI_GPREG_ECC_FORCE_ERR_S_OFFSET ) ))
#define PCIE_AXI_GPREG_ECC_CLR_S_ADR (( ( DLNK_PCIE_GPREG_BASE ) + ( PCIE_AXI_GPREG_ECC_CLR_S_OFFSET ) ))
#define PCIE_AXI_GPREG_ECC_CNT_CLR_S_ADR (( ( DLNK_PCIE_GPREG_BASE ) + ( PCIE_AXI_GPREG_ECC_CNT_CLR_S_OFFSET ) ))
#define PCIE_AXI_GPREG_ECC_CHK_DIS_S_ADR (( ( DLNK_PCIE_GPREG_BASE ) + ( PCIE_AXI_GPREG_ECC_CHK_DIS_S_OFFSET ) ))
#define PCIE_AXI_GPREG_ECC_GEN_DIS_S_ADR (( ( DLNK_PCIE_GPREG_BASE ) + ( PCIE_AXI_GPREG_ECC_GEN_DIS_S_OFFSET ) ))
#define PCIE_AXI_GPREG_MEM_INIT_CTRL_S_ADR (( ( DLNK_PCIE_GPREG_BASE ) + ( PCIE_AXI_GPREG_MEM_INIT_CTRL_S_OFFSET ) ))
#define PCIE_AXI_GPREG_SMON_CLT_0_ADR (( ( DLNK_PCIE_GPREG_BASE ) + ( PCIE_AXI_GPREG_SMON_CLT_0_OFFSET ) ))
#define PCIE_AXI_GPREG_SMON_CLT_1_ADR (( ( DLNK_PCIE_GPREG_BASE ) + ( PCIE_AXI_GPREG_SMON_CLT_1_OFFSET ) ))
#define PCIE_AXI_GPREG_RO_0_ADR (( ( DLNK_PCIE_GPREG_BASE ) + ( PCIE_AXI_GPREG_RO_0_OFFSET ) ))
#define PCIE_AXI_GPREG_SMON_0_ADR (( ( DLNK_PCIE_GPREG_BASE ) + ( PCIE_AXI_GPREG_SMON_0_OFFSET ) ))
#define PCIE_AXI_GPREG_SMON_1_ADR (( ( DLNK_PCIE_GPREG_BASE ) + ( PCIE_AXI_GPREG_SMON_1_OFFSET ) ))
#define PCIE_AXI_GPREG_SMON_2_ADR (( ( DLNK_PCIE_GPREG_BASE ) + ( PCIE_AXI_GPREG_SMON_2_OFFSET ) ))
#define PCIE_AXI_GPREG_SMON_3_ADR (( ( DLNK_PCIE_GPREG_BASE ) + ( PCIE_AXI_GPREG_SMON_3_OFFSET ) ))
#define PCIE_AXI_GPREG_SMON_4_ADR (( ( DLNK_PCIE_GPREG_BASE ) + ( PCIE_AXI_GPREG_SMON_4_OFFSET ) ))
#define PCIE_AXI_GPREG_SMON_5_ADR (( ( DLNK_PCIE_GPREG_BASE ) + ( PCIE_AXI_GPREG_SMON_5_OFFSET ) ))
#define PCIE_AXI_GPREG_SMON_6_ADR (( ( DLNK_PCIE_GPREG_BASE ) + ( PCIE_AXI_GPREG_SMON_6_OFFSET ) ))
#define PCIE_AXI_GPREG_SMON_7_ADR (( ( DLNK_PCIE_GPREG_BASE ) + ( PCIE_AXI_GPREG_SMON_7_OFFSET ) ))
#define PCIE_AXI_GPREG_ECC_SBE_ADR (( ( DLNK_PCIE_GPREG_BASE ) + ( PCIE_AXI_GPREG_ECC_SBE_OFFSET ) ))
#define PCIE_AXI_GPREG_ECC_DBE_ADR (( ( DLNK_PCIE_GPREG_BASE ) + ( PCIE_AXI_GPREG_ECC_DBE_OFFSET ) ))
#define PCIE_AXI_GPREG_ECC_SBE_CNT_OVFL_ADR (( ( DLNK_PCIE_GPREG_BASE ) + ( PCIE_AXI_GPREG_ECC_SBE_CNT_OVFL_OFFSET ) ))
#define PCIE_AXI_GPREG_ECC_ERR_ADDR_0_ADR (( ( DLNK_PCIE_GPREG_BASE ) + ( PCIE_AXI_GPREG_ECC_ERR_ADDR_0_OFFSET ) ))
#define PCIE_AXI_GPREG_ECC_ERR_ADDR_1_ADR (( ( DLNK_PCIE_GPREG_BASE ) + ( PCIE_AXI_GPREG_ECC_ERR_ADDR_1_OFFSET ) ))
#define PCIE_AXI_GPREG_ECC_ERR_SYNDROME_0_ADR (( ( DLNK_PCIE_GPREG_BASE ) + ( PCIE_AXI_GPREG_ECC_ERR_SYNDROME_0_OFFSET ) ))
#define PCIE_AXI_GPREG_ECC_ERR_SYNDROME_1_ADR (( ( DLNK_PCIE_GPREG_BASE ) + ( PCIE_AXI_GPREG_ECC_ERR_SYNDROME_1_OFFSET ) ))
#define PCIE_AXI_GPREG_INTR0_STAT_ADR (( ( DLNK_PCIE_GPREG_BASE ) + ( PCIE_AXI_GPREG_INTR0_STAT_OFFSET ) ))
#define PCIE_AXI_GPREG_INTR0_HIGH_EN_ADR (( ( DLNK_PCIE_GPREG_BASE ) + ( PCIE_AXI_GPREG_INTR0_HIGH_EN_OFFSET ) ))
#define PCIE_AXI_GPREG_INTR0_LOW_EN_ADR (( ( DLNK_PCIE_GPREG_BASE ) + ( PCIE_AXI_GPREG_INTR0_LOW_EN_OFFSET ) ))
#define PCIE_AXI_GPREG_INTR0_CLR_ADR (( ( DLNK_PCIE_GPREG_BASE ) + ( PCIE_AXI_GPREG_INTR0_CLR_OFFSET ) ))
#define PCIE_AXI_GPREG_INTR0_FORCE_ADR (( ( DLNK_PCIE_GPREG_BASE ) + ( PCIE_AXI_GPREG_INTR0_FORCE_OFFSET ) ))
#define PCIE_AXI_GPREG_INTR1_STAT_S_ADR (( ( DLNK_PCIE_GPREG_BASE ) + ( PCIE_AXI_GPREG_INTR1_STAT_S_OFFSET ) ))
#define PCIE_AXI_GPREG_INTR1_HIGH_EN_S_ADR (( ( DLNK_PCIE_GPREG_BASE ) + ( PCIE_AXI_GPREG_INTR1_HIGH_EN_S_OFFSET ) ))
#define PCIE_AXI_GPREG_INTR1_LOW_EN_S_ADR (( ( DLNK_PCIE_GPREG_BASE ) + ( PCIE_AXI_GPREG_INTR1_LOW_EN_S_OFFSET ) ))
#define PCIE_AXI_GPREG_INTR1_CLR_S_ADR (( ( DLNK_PCIE_GPREG_BASE ) + ( PCIE_AXI_GPREG_INTR1_CLR_S_OFFSET ) ))
#define PCIE_AXI_GPREG_INTR1_FORCE_S_ADR (( ( DLNK_PCIE_GPREG_BASE ) + ( PCIE_AXI_GPREG_INTR1_FORCE_S_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief PCIE_AXI_GPREG_MAP_MEM_PCIE_AXI_GPREG_MAP_PCIE_AXI_SCRATCH0 register description at address offset 0x0
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_axi_gpreg_map_MEM/pcie_axi_gpreg_map/pcie_axi_scratch0
  * Scratch Register
  */

typedef union {
  struct {
    uint32_t SCRATCH : 32;
    ///< Scratch Regiser - Has no functionality in RTL
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_axi_gpreg_scratch0_reg_t;

#define PCIE_AXI_GPREG_SCRATCH0_DEFAULT (0x00000000U)
#define PCIE_AXI_GPREG_SCRATCH0_RD_MASK (0xffffffffU)
#define PCIE_AXI_GPREG_SCRATCH0_WR_MASK (0xffffffffU)


///< Scratch Regiser - Has no functionality in RTL
#define PCIE_AXI_GPREG_SCRATCH0_SCRATCH_BF_OFF ( 0)
#define PCIE_AXI_GPREG_SCRATCH0_SCRATCH_BF_WID (32)
#define PCIE_AXI_GPREG_SCRATCH0_SCRATCH_BF_MSK (0xFFFFFFFF)
#define PCIE_AXI_GPREG_SCRATCH0_SCRATCH_BF_DEF (0x00000000)


/** @brief PCIE_AXI_GPREG_MAP_MEM_PCIE_AXI_GPREG_MAP_PCIE_AXI_SCRATCH1 register description at address offset 0x4
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_axi_gpreg_map_MEM/pcie_axi_gpreg_map/pcie_axi_scratch1
  * Scratch Register
  */

typedef union {
  struct {
    uint32_t SCRATCH : 32;
    ///< Scratch Regiser - Has no functionality in RTL
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_axi_gpreg_scratch1_reg_t;

#define PCIE_AXI_GPREG_SCRATCH1_DEFAULT (0x00000000U)
#define PCIE_AXI_GPREG_SCRATCH1_RD_MASK (0xffffffffU)
#define PCIE_AXI_GPREG_SCRATCH1_WR_MASK (0xffffffffU)


///< Scratch Regiser - Has no functionality in RTL
#define PCIE_AXI_GPREG_SCRATCH1_SCRATCH_BF_OFF ( 0)
#define PCIE_AXI_GPREG_SCRATCH1_SCRATCH_BF_WID (32)
#define PCIE_AXI_GPREG_SCRATCH1_SCRATCH_BF_MSK (0xFFFFFFFF)
#define PCIE_AXI_GPREG_SCRATCH1_SCRATCH_BF_DEF (0x00000000)


/** @brief PCIE_AXI_GPREG_MAP_MEM_PCIE_AXI_GPREG_MAP_PCIE_AXI_BRIDGE register description at address offset 0x8
  *
  * Register default value:        0x00A10000
  * Register full path in IP: pcie_axi_gpreg_map_MEM/pcie_axi_gpreg_map/pcie_axi_bridge
  * PCIE PHY Bridge Status Register
  */

typedef union {
  struct {
    uint32_t TIMEOUT_VALUE : 20;
    ///< Timeout value in core_clk cycles
    ///< AccessType="RW/L" BitOffset="0" ResetValue="0x10000"
    uint32_t REVISION : 8;
    ///< Module Revision Number[27:20] = SERID Value[0-5]
    ///< AccessType="RO" BitOffset="20" ResetValue="0xA"
    uint32_t SW_LOCK_CTRL : 1;
    ///< Lock control bit that will prevent writes to the timeout value when
    ///< set(1'b1). The lock bit is clear on reset and once it has been set
    ///< it can only be cleared by a block reset.
    ///< AccessType="RW/1S/V/L" BitOffset="28" ResetValue="0x0"
    uint32_t APB_ACK_UNSOL : 1;
    ///< Received an unsolicited acknowledge
    ///< AccessType="RW/1C/V" BitOffset="29" ResetValue="0x0"
    uint32_t APB_ACK_ERR : 1;
    ///< Request acknowledge had error bit set
    ///< AccessType="RW/1C/V" BitOffset="30" ResetValue="0x0"
    uint32_t APB_ACK_TIMEOUT : 1;
    ///< Request timeout occurred
    ///< AccessType="RW/1C/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_axi_gpreg_brdg_reg_t;

#define PCIE_AXI_GPREG_BRDG_DEFAULT (0x00a10000U)
#define PCIE_AXI_GPREG_BRDG_RD_MASK (0xffffffffU)
#define PCIE_AXI_GPREG_BRDG_WR_MASK (0xf00fffffU)


///< Timeout value in core_clk cycles
#define PCIE_AXI_GPREG_BRDG_TIMEOUT_VAL_BF_OFF ( 0)
#define PCIE_AXI_GPREG_BRDG_TIMEOUT_VAL_BF_WID (20)
#define PCIE_AXI_GPREG_BRDG_TIMEOUT_VAL_BF_MSK (0x000FFFFF)
#define PCIE_AXI_GPREG_BRDG_TIMEOUT_VAL_BF_DEF (0x00010000)

///< Module Revision Number[27:20] = SERID Value[0-5]
#define PCIE_AXI_GPREG_BRDG_REVISION_BF_OFF (20)
#define PCIE_AXI_GPREG_BRDG_REVISION_BF_WID ( 8)
#define PCIE_AXI_GPREG_BRDG_REVISION_BF_MSK (0x0FF00000)
#define PCIE_AXI_GPREG_BRDG_REVISION_BF_DEF (0x00A00000)

///< Lock control bit that will prevent writes to the timeout value when
///< set(1'b1). The lock bit is clear on reset and once it has been set
///< it can only be cleared by a block reset.
#define PCIE_AXI_GPREG_BRDG_SW_LOCK_CTRL_BF_OFF (28)
#define PCIE_AXI_GPREG_BRDG_SW_LOCK_CTRL_BF_WID ( 1)
#define PCIE_AXI_GPREG_BRDG_SW_LOCK_CTRL_BF_MSK (0x10000000)
#define PCIE_AXI_GPREG_BRDG_SW_LOCK_CTRL_BF_DEF (0x00000000)

///< Received an unsolicited acknowledge
#define PCIE_AXI_GPREG_BRDG_APB_ACK_UNSOL_BF_OFF (29)
#define PCIE_AXI_GPREG_BRDG_APB_ACK_UNSOL_BF_WID ( 1)
#define PCIE_AXI_GPREG_BRDG_APB_ACK_UNSOL_BF_MSK (0x20000000)
#define PCIE_AXI_GPREG_BRDG_APB_ACK_UNSOL_BF_DEF (0x00000000)

///< Request acknowledge had error bit set
#define PCIE_AXI_GPREG_BRDG_APB_ACK_ERR_BF_OFF (30)
#define PCIE_AXI_GPREG_BRDG_APB_ACK_ERR_BF_WID ( 1)
#define PCIE_AXI_GPREG_BRDG_APB_ACK_ERR_BF_MSK (0x40000000)
#define PCIE_AXI_GPREG_BRDG_APB_ACK_ERR_BF_DEF (0x00000000)

///< Request timeout occurred
#define PCIE_AXI_GPREG_BRDG_APB_ACK_TIMEOUT_BF_OFF (31)
#define PCIE_AXI_GPREG_BRDG_APB_ACK_TIMEOUT_BF_WID ( 1)
#define PCIE_AXI_GPREG_BRDG_APB_ACK_TIMEOUT_BF_MSK (0x80000000)
#define PCIE_AXI_GPREG_BRDG_APB_ACK_TIMEOUT_BF_DEF (0x00000000)


/** @brief PCIE_AXI_GPREG_MAP_MEM_PCIE_AXI_GPREG_MAP_PCIE_AXI_ECC_FORCE_TYPE_S register description at address offset 0x100
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_axi_gpreg_map_MEM/pcie_axi_gpreg_map/pcie_axi_ecc_force_type_S
  * Memory ECC Force Error Type Register
  */

typedef union {
  struct {
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="0" ResetValue="None"
    uint32_t ECC_FORCE_TYPE_M3T5 : 3;
    ///< Force Error Type. This bit indicates the type of ECC errors forced
    ///< to be inserted. 1=Double Bit Error(DBE), 0=Single Bit Error(SBE).
    ///< - Mem Instance # - Memory Name                   - 3 - u_ib_rreq_c2a_cdc_ram
    ///< - 4 - u_ib_wreq_c2a_cdc_ram                   - 5 - u_ob_ccmp_data_ram
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ECC_FORCE_TYPE_M7 : 1;
    ///< Force Error Type. This bit indicates the type of ECC errors forced
    ///< to be inserted. 1=Double Bit Error(DBE), 0=Single Bit Error(SBE).
    ///< - Mem Instance # - Memory Name                   - 7 - u_slv_npw_sab_ram
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} pcie_axi_gpreg_ecc_force_type_s_reg_t;

#define PCIE_AXI_GPREG_ECC_FORCE_TYPE_S_DEFAULT (0x00000000U)
#define PCIE_AXI_GPREG_ECC_FORCE_TYPE_S_RD_MASK (0x000000b8U)
#define PCIE_AXI_GPREG_ECC_FORCE_TYPE_S_WR_MASK (0x000000b8U)


///< Force Error Type. This bit indicates the type of ECC errors forced
///< to be inserted. 1=Double Bit Error(DBE), 0=Single Bit Error(SBE).
///< - Mem Instance # - Memory Name                   - 3 - u_ib_rreq_c2a_cdc_ram
///< - 4 - u_ib_wreq_c2a_cdc_ram                   - 5 - u_ob_ccmp_data_ram
#define PCIE_AXI_GPREG_ECC_FORCE_TYPE_S_ECC_FORCE_TYPE_M3T5_BF_OFF ( 3)
#define PCIE_AXI_GPREG_ECC_FORCE_TYPE_S_ECC_FORCE_TYPE_M3T5_BF_WID ( 3)
#define PCIE_AXI_GPREG_ECC_FORCE_TYPE_S_ECC_FORCE_TYPE_M3T5_BF_MSK (0x00000038)
#define PCIE_AXI_GPREG_ECC_FORCE_TYPE_S_ECC_FORCE_TYPE_M3T5_BF_DEF (0x00000000)

///< Force Error Type. This bit indicates the type of ECC errors forced
///< to be inserted. 1=Double Bit Error(DBE), 0=Single Bit Error(SBE).
///< - Mem Instance # - Memory Name                   - 7 - u_slv_npw_sab_ram
#define PCIE_AXI_GPREG_ECC_FORCE_TYPE_S_ECC_FORCE_TYPE_M7_BF_OFF ( 7)
#define PCIE_AXI_GPREG_ECC_FORCE_TYPE_S_ECC_FORCE_TYPE_M7_BF_WID ( 1)
#define PCIE_AXI_GPREG_ECC_FORCE_TYPE_S_ECC_FORCE_TYPE_M7_BF_MSK (0x00000080)
#define PCIE_AXI_GPREG_ECC_FORCE_TYPE_S_ECC_FORCE_TYPE_M7_BF_DEF (0x00000000)


/** @brief PCIE_AXI_GPREG_MAP_MEM_PCIE_AXI_GPREG_MAP_PCIE_AXI_ECC_FORCE_ERR_S register description at address offset 0x104
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_axi_gpreg_map_MEM/pcie_axi_gpreg_map/pcie_axi_ecc_force_err_S
  * Memory ECC Force Error Register
  */

typedef union {
  struct {
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="0" ResetValue="None"
    uint32_t ECC_FORCE_ERR_M3T5 : 3;
    ///< Force Error. When set to 1, this bit enables to insert one ECC error
    ///< determined by FORCE_TYPE. SW write this bit to zero and then write
    ///< it to a one to generate another error.                  - Mem Instance
    ///< # - Memory Name                   - 3 - u_ib_rreq_c2a_cdc_ram
    ///< - 4 - u_ib_wreq_c2a_cdc_ram                   - 5 - u_ob_ccmp_data_ram
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ECC_FORCE_ERR_M7 : 1;
    ///< Force Error. When set to 1, this bit enables to insert one ECC error
    ///< determined by FORCE_TYPE. SW write this bit to zero and then write
    ///< it to a one to generate another error.                  - Mem Instance
    ///< # - Memory Name                   - 7 - u_slv_npw_sab_ram
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} pcie_axi_gpreg_ecc_force_err_s_reg_t;

#define PCIE_AXI_GPREG_ECC_FORCE_ERR_S_DEFAULT (0x00000000U)
#define PCIE_AXI_GPREG_ECC_FORCE_ERR_S_RD_MASK (0x000000b8U)
#define PCIE_AXI_GPREG_ECC_FORCE_ERR_S_WR_MASK (0x000000b8U)


///< Force Error. When set to 1, this bit enables to insert one ECC error
///< determined by FORCE_TYPE. SW write this bit to zero and then write
///< it to a one to generate another error.                  - Mem Instance
///< # - Memory Name                   - 3 - u_ib_rreq_c2a_cdc_ram
///< - 4 - u_ib_wreq_c2a_cdc_ram                   - 5 - u_ob_ccmp_data_ram
#define PCIE_AXI_GPREG_ECC_FORCE_ERR_S_ECC_FORCE_ERR_M3T5_BF_OFF ( 3)
#define PCIE_AXI_GPREG_ECC_FORCE_ERR_S_ECC_FORCE_ERR_M3T5_BF_WID ( 3)
#define PCIE_AXI_GPREG_ECC_FORCE_ERR_S_ECC_FORCE_ERR_M3T5_BF_MSK (0x00000038)
#define PCIE_AXI_GPREG_ECC_FORCE_ERR_S_ECC_FORCE_ERR_M3T5_BF_DEF (0x00000000)

///< Force Error. When set to 1, this bit enables to insert one ECC error
///< determined by FORCE_TYPE. SW write this bit to zero and then write
///< it to a one to generate another error.                  - Mem Instance
///< # - Memory Name                   - 7 - u_slv_npw_sab_ram
#define PCIE_AXI_GPREG_ECC_FORCE_ERR_S_ECC_FORCE_ERR_M7_BF_OFF ( 7)
#define PCIE_AXI_GPREG_ECC_FORCE_ERR_S_ECC_FORCE_ERR_M7_BF_WID ( 1)
#define PCIE_AXI_GPREG_ECC_FORCE_ERR_S_ECC_FORCE_ERR_M7_BF_MSK (0x00000080)
#define PCIE_AXI_GPREG_ECC_FORCE_ERR_S_ECC_FORCE_ERR_M7_BF_DEF (0x00000000)


/** @brief PCIE_AXI_GPREG_MAP_MEM_PCIE_AXI_GPREG_MAP_PCIE_AXI_ECC_ECC_CLR_S register description at address offset 0x108
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_axi_gpreg_map_MEM/pcie_axi_gpreg_map/pcie_axi_ecc_ecc_clr_S
  * Memory ECC Error Clear Register
  */

typedef union {
  struct {
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="0" ResetValue="None"
    uint32_t ECC_ERR_CLR_M3T5 : 3;
    ///< Error Clear. Writing this bit to 1 clears SBE, DBE, ERR_ADDR and ERR_SYNDROME
    ///< status and information of the correponding memory slice. This bit
    ///< retains the last written value.                  - 3 - u_ib_rreq_c2a_cdc_ram
    ///< - 4 - u_ib_wreq_c2a_cdc_ram                   - 5 - u_ob_ccmp_data_ram
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ECC_ERR_CLR_M7 : 1;
    ///< Error Clear. Writing this bit to 1 clears SBE, DBE, ERR_ADDR and ERR_SYNDROME
    ///< status and information of the correponding memory slice. This bit
    ///< retains the last written value.                  - 7 - u_slv_npw_sab_ram
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} pcie_axi_gpreg_ecc_clr_s_reg_t;

#define PCIE_AXI_GPREG_ECC_CLR_S_DEFAULT (0x00000000U)
#define PCIE_AXI_GPREG_ECC_CLR_S_RD_MASK (0x000000b8U)
#define PCIE_AXI_GPREG_ECC_CLR_S_WR_MASK (0x000000b8U)


///< Error Clear. Writing this bit to 1 clears SBE, DBE, ERR_ADDR and ERR_SYNDROME
///< status and information of the correponding memory slice. This bit
///< retains the last written value.                  - 3 - u_ib_rreq_c2a_cdc_ram
///< - 4 - u_ib_wreq_c2a_cdc_ram                   - 5 - u_ob_ccmp_data_ram
#define PCIE_AXI_GPREG_ECC_CLR_S_ECC_ERR_CLR_M3T5_BF_OFF ( 3)
#define PCIE_AXI_GPREG_ECC_CLR_S_ECC_ERR_CLR_M3T5_BF_WID ( 3)
#define PCIE_AXI_GPREG_ECC_CLR_S_ECC_ERR_CLR_M3T5_BF_MSK (0x00000038)
#define PCIE_AXI_GPREG_ECC_CLR_S_ECC_ERR_CLR_M3T5_BF_DEF (0x00000000)

///< Error Clear. Writing this bit to 1 clears SBE, DBE, ERR_ADDR and ERR_SYNDROME
///< status and information of the correponding memory slice. This bit
///< retains the last written value.                  - 7 - u_slv_npw_sab_ram
#define PCIE_AXI_GPREG_ECC_CLR_S_ECC_ERR_CLR_M7_BF_OFF ( 7)
#define PCIE_AXI_GPREG_ECC_CLR_S_ECC_ERR_CLR_M7_BF_WID ( 1)
#define PCIE_AXI_GPREG_ECC_CLR_S_ECC_ERR_CLR_M7_BF_MSK (0x00000080)
#define PCIE_AXI_GPREG_ECC_CLR_S_ECC_ERR_CLR_M7_BF_DEF (0x00000000)


/** @brief PCIE_AXI_GPREG_MAP_MEM_PCIE_AXI_GPREG_MAP_PCIE_AXI_ECC_CNT_CLR_S register description at address offset 0x10c
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_axi_gpreg_map_MEM/pcie_axi_gpreg_map/pcie_axi_ecc_cnt_clr_S
  * Memory ECC Error Clear Register
  */

typedef union {
  struct {
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="0" ResetValue="None"
    uint32_t ECC_CNT_CLR_M3T5 : 3;
    ///< Count Clear. Writing this bit to 1 clears SBE_COUNT and SBE_CNT_OVFL
    ///< status and information of the corresponding memory slice. This bit
    ///< retains the last written value.                  - 3 - u_ib_rreq_c2a_cdc_ram
    ///< - 4 - u_ib_wreq_c2a_cdc_ram                   - 5 - u_ob_ccmp_data_ram
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ECC_CNT_CLR_M7 : 1;
    ///< Count Clear. Writing this bit to 1 clears SBE_COUNT and SBE_CNT_OVFL
    ///< status and information of the corresponding memory slice. This bit
    ///< retains the last written value.                  - 7 - u_slv_npw_sab_ram
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} pcie_axi_gpreg_ecc_cnt_clr_s_reg_t;

#define PCIE_AXI_GPREG_ECC_CNT_CLR_S_DEFAULT (0x00000000U)
#define PCIE_AXI_GPREG_ECC_CNT_CLR_S_RD_MASK (0x000000b8U)
#define PCIE_AXI_GPREG_ECC_CNT_CLR_S_WR_MASK (0x000000b8U)


///< Count Clear. Writing this bit to 1 clears SBE_COUNT and SBE_CNT_OVFL
///< status and information of the corresponding memory slice. This bit
///< retains the last written value.                  - 3 - u_ib_rreq_c2a_cdc_ram
///< - 4 - u_ib_wreq_c2a_cdc_ram                   - 5 - u_ob_ccmp_data_ram
#define PCIE_AXI_GPREG_ECC_CNT_CLR_S_ECC_CNT_CLR_M3T5_BF_OFF ( 3)
#define PCIE_AXI_GPREG_ECC_CNT_CLR_S_ECC_CNT_CLR_M3T5_BF_WID ( 3)
#define PCIE_AXI_GPREG_ECC_CNT_CLR_S_ECC_CNT_CLR_M3T5_BF_MSK (0x00000038)
#define PCIE_AXI_GPREG_ECC_CNT_CLR_S_ECC_CNT_CLR_M3T5_BF_DEF (0x00000000)

///< Count Clear. Writing this bit to 1 clears SBE_COUNT and SBE_CNT_OVFL
///< status and information of the corresponding memory slice. This bit
///< retains the last written value.                  - 7 - u_slv_npw_sab_ram
#define PCIE_AXI_GPREG_ECC_CNT_CLR_S_ECC_CNT_CLR_M7_BF_OFF ( 7)
#define PCIE_AXI_GPREG_ECC_CNT_CLR_S_ECC_CNT_CLR_M7_BF_WID ( 1)
#define PCIE_AXI_GPREG_ECC_CNT_CLR_S_ECC_CNT_CLR_M7_BF_MSK (0x00000080)
#define PCIE_AXI_GPREG_ECC_CNT_CLR_S_ECC_CNT_CLR_M7_BF_DEF (0x00000000)


/** @brief PCIE_AXI_GPREG_MAP_MEM_PCIE_AXI_GPREG_MAP_PCIE_AXI_ECC_CHK_DIS_S register description at address offset 0x110
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_axi_gpreg_map_MEM/pcie_axi_gpreg_map/pcie_axi_ecc_chk_dis_S
  * Memory ECC Check Disable Register
  */

typedef union {
  struct {
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="0" ResetValue="None"
    uint32_t ECC_CHK_DIS_M3T5 : 3;
    ///< Check and Correction Disable. When set, this bit disables ECC checking
    ///< and correction for the corresponding memory slice. It's used for debug
    ///< and testing purpose.                  - 3 - u_ib_rreq_c2a_cdc_ram
    ///< - 4 - u_ib_wreq_c2a_cdc_ram                   - 5 - u_ob_ccmp_data_ram
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ECC_CHK_DIS_M7 : 1;
    ///< Check and Correction Disable. When set, this bit disables ECC checking
    ///< and correction for the corresponding memory slice. It's used for debug
    ///< and testing purpose.                  - 7 - u_slv_npw_sab_ram
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} pcie_axi_gpreg_ecc_chk_dis_s_reg_t;

#define PCIE_AXI_GPREG_ECC_CHK_DIS_S_DEFAULT (0x00000000U)
#define PCIE_AXI_GPREG_ECC_CHK_DIS_S_RD_MASK (0x000000b8U)
#define PCIE_AXI_GPREG_ECC_CHK_DIS_S_WR_MASK (0x000000b8U)


///< Check and Correction Disable. When set, this bit disables ECC checking
///< and correction for the corresponding memory slice. It's used for debug
///< and testing purpose.                  - 3 - u_ib_rreq_c2a_cdc_ram
///< - 4 - u_ib_wreq_c2a_cdc_ram                   - 5 - u_ob_ccmp_data_ram
#define PCIE_AXI_GPREG_ECC_CHK_DIS_S_ECC_CHK_DIS_M3T5_BF_OFF ( 3)
#define PCIE_AXI_GPREG_ECC_CHK_DIS_S_ECC_CHK_DIS_M3T5_BF_WID ( 3)
#define PCIE_AXI_GPREG_ECC_CHK_DIS_S_ECC_CHK_DIS_M3T5_BF_MSK (0x00000038)
#define PCIE_AXI_GPREG_ECC_CHK_DIS_S_ECC_CHK_DIS_M3T5_BF_DEF (0x00000000)

///< Check and Correction Disable. When set, this bit disables ECC checking
///< and correction for the corresponding memory slice. It's used for debug
///< and testing purpose.                  - 7 - u_slv_npw_sab_ram
#define PCIE_AXI_GPREG_ECC_CHK_DIS_S_ECC_CHK_DIS_M7_BF_OFF ( 7)
#define PCIE_AXI_GPREG_ECC_CHK_DIS_S_ECC_CHK_DIS_M7_BF_WID ( 1)
#define PCIE_AXI_GPREG_ECC_CHK_DIS_S_ECC_CHK_DIS_M7_BF_MSK (0x00000080)
#define PCIE_AXI_GPREG_ECC_CHK_DIS_S_ECC_CHK_DIS_M7_BF_DEF (0x00000000)


/** @brief PCIE_AXI_GPREG_MAP_MEM_PCIE_AXI_GPREG_MAP_PCIE_AXI_ECC_GEN_DIS_S register description at address offset 0x114
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_axi_gpreg_map_MEM/pcie_axi_gpreg_map/pcie_axi_ecc_gen_dis_S
  * Memory ECC Generation Disable Register
  */

typedef union {
  struct {
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="0" ResetValue="None"
    uint32_t ECC_GEN_DIS_M3T5 : 3;
    ///< Generation Disable. When set, this bit disables ECC generation for
    ///< the corresponding memory slice. It's used for debug and testing purpose
    ///< - 3 - u_ib_rreq_c2a_cdc_ram                   - 4 - u_ib_wreq_c2a_cdc_ram
    ///< - 5 - u_ob_ccmp_data_ram
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ECC_GEN_DIS_M7 : 1;
    ///< Generation Disable. When set, this bit disables ECC generation for
    ///< the corresponding memory slice. It's used for debug and testing purpose
    ///< - 7 - u_slv_npw_sab_ram
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} pcie_axi_gpreg_ecc_gen_dis_s_reg_t;

#define PCIE_AXI_GPREG_ECC_GEN_DIS_S_DEFAULT (0x00000000U)
#define PCIE_AXI_GPREG_ECC_GEN_DIS_S_RD_MASK (0x000000b8U)
#define PCIE_AXI_GPREG_ECC_GEN_DIS_S_WR_MASK (0x000000b8U)


///< Generation Disable. When set, this bit disables ECC generation for
///< the corresponding memory slice. It's used for debug and testing purpose
///< - 3 - u_ib_rreq_c2a_cdc_ram                   - 4 - u_ib_wreq_c2a_cdc_ram
///< - 5 - u_ob_ccmp_data_ram
#define PCIE_AXI_GPREG_ECC_GEN_DIS_S_ECC_GEN_DIS_M3T5_BF_OFF ( 3)
#define PCIE_AXI_GPREG_ECC_GEN_DIS_S_ECC_GEN_DIS_M3T5_BF_WID ( 3)
#define PCIE_AXI_GPREG_ECC_GEN_DIS_S_ECC_GEN_DIS_M3T5_BF_MSK (0x00000038)
#define PCIE_AXI_GPREG_ECC_GEN_DIS_S_ECC_GEN_DIS_M3T5_BF_DEF (0x00000000)

///< Generation Disable. When set, this bit disables ECC generation for
///< the corresponding memory slice. It's used for debug and testing purpose
///< - 7 - u_slv_npw_sab_ram
#define PCIE_AXI_GPREG_ECC_GEN_DIS_S_ECC_GEN_DIS_M7_BF_OFF ( 7)
#define PCIE_AXI_GPREG_ECC_GEN_DIS_S_ECC_GEN_DIS_M7_BF_WID ( 1)
#define PCIE_AXI_GPREG_ECC_GEN_DIS_S_ECC_GEN_DIS_M7_BF_MSK (0x00000080)
#define PCIE_AXI_GPREG_ECC_GEN_DIS_S_ECC_GEN_DIS_M7_BF_DEF (0x00000000)


/** @brief PCIE_AXI_GPREG_MAP_MEM_PCIE_AXI_GPREG_MAP_PCIE_AXI_MEM_INIT_CTRL_S register description at address offset 0x118
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_axi_gpreg_map_MEM/pcie_axi_gpreg_map/pcie_axi_mem_init_ctrl_S
  * Memory Init Control
  */

typedef union {
  struct {
    uint32_t MEM_INIT_START : 1;
    ///< ECC Memory Init Start Control Value
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t MEM_INIT_VALUE : 1;
    ///< ECC Memory Init Value
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RESERVED2 : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="0x0"
    uint32_t AWCACHE_OVERRIDE : 1;
    ///< PCIE Controller MSTR_AWCACHE override control: 0=Programmable value;
    ///< 1=PCIe Controller Value
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t ARCACHE_OVERRIDE : 1;
    ///< PCIE Controller MSTR_ARCACHE override control: 0=Programmable value;
    ///< 1=PCIe Controller Value
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t RESERVED6 : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="0x0"
    uint32_t AWCACHE_OVERRIDE_VALUE : 4;
    ///< PCIE Controller MSTR_AWCACHE Programmable value
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t ARCACHE_OVERRIDE_VALUE : 4;
    ///< PCIE Controller MSTR_ARCACHE Programmable value
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t RESERVED16 : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_axi_gpreg_mem_init_ctrl_s_reg_t;

#define PCIE_AXI_GPREG_MEM_INIT_CTRL_S_DEFAULT (0x00000000U)
#define PCIE_AXI_GPREG_MEM_INIT_CTRL_S_RD_MASK (0xffffffffU)
#define PCIE_AXI_GPREG_MEM_INIT_CTRL_S_WR_MASK (0x0000ff33U)


///< ECC Memory Init Start Control Value
#define PCIE_AXI_GPREG_MEM_INIT_CTRL_S_MEM_INIT_START_BF_OFF ( 0)
#define PCIE_AXI_GPREG_MEM_INIT_CTRL_S_MEM_INIT_START_BF_WID ( 1)
#define PCIE_AXI_GPREG_MEM_INIT_CTRL_S_MEM_INIT_START_BF_MSK (0x00000001)
#define PCIE_AXI_GPREG_MEM_INIT_CTRL_S_MEM_INIT_START_BF_DEF (0x00000000)

///< ECC Memory Init Value
#define PCIE_AXI_GPREG_MEM_INIT_CTRL_S_MEM_INIT_VAL_BF_OFF ( 1)
#define PCIE_AXI_GPREG_MEM_INIT_CTRL_S_MEM_INIT_VAL_BF_WID ( 1)
#define PCIE_AXI_GPREG_MEM_INIT_CTRL_S_MEM_INIT_VAL_BF_MSK (0x00000002)
#define PCIE_AXI_GPREG_MEM_INIT_CTRL_S_MEM_INIT_VAL_BF_DEF (0x00000000)

///< Reserved
#define PCIE_AXI_GPREG_MEM_INIT_CTRL_S_RESERVED2_BF_OFF ( 2)
#define PCIE_AXI_GPREG_MEM_INIT_CTRL_S_RESERVED2_BF_WID ( 2)
#define PCIE_AXI_GPREG_MEM_INIT_CTRL_S_RESERVED2_BF_MSK (0x0000000C)
#define PCIE_AXI_GPREG_MEM_INIT_CTRL_S_RESERVED2_BF_DEF (0x00000000)

///< PCIE Controller MSTR_AWCACHE override control: 0=Programmable value;
///< 1=PCIe Controller Value
#define PCIE_AXI_GPREG_MEM_INIT_CTRL_S_AWCACHE_OVRD_BF_OFF ( 4)
#define PCIE_AXI_GPREG_MEM_INIT_CTRL_S_AWCACHE_OVRD_BF_WID ( 1)
#define PCIE_AXI_GPREG_MEM_INIT_CTRL_S_AWCACHE_OVRD_BF_MSK (0x00000010)
#define PCIE_AXI_GPREG_MEM_INIT_CTRL_S_AWCACHE_OVRD_BF_DEF (0x00000000)

///< PCIE Controller MSTR_ARCACHE override control: 0=Programmable value;
///< 1=PCIe Controller Value
#define PCIE_AXI_GPREG_MEM_INIT_CTRL_S_ARCACHE_OVRD_BF_OFF ( 5)
#define PCIE_AXI_GPREG_MEM_INIT_CTRL_S_ARCACHE_OVRD_BF_WID ( 1)
#define PCIE_AXI_GPREG_MEM_INIT_CTRL_S_ARCACHE_OVRD_BF_MSK (0x00000020)
#define PCIE_AXI_GPREG_MEM_INIT_CTRL_S_ARCACHE_OVRD_BF_DEF (0x00000000)

///< Reserved
#define PCIE_AXI_GPREG_MEM_INIT_CTRL_S_RESERVED6_BF_OFF ( 6)
#define PCIE_AXI_GPREG_MEM_INIT_CTRL_S_RESERVED6_BF_WID ( 2)
#define PCIE_AXI_GPREG_MEM_INIT_CTRL_S_RESERVED6_BF_MSK (0x000000C0)
#define PCIE_AXI_GPREG_MEM_INIT_CTRL_S_RESERVED6_BF_DEF (0x00000000)

///< PCIE Controller MSTR_AWCACHE Programmable value
#define PCIE_AXI_GPREG_MEM_INIT_CTRL_S_AWCACHE_OVRD_VAL_BF_OFF ( 8)
#define PCIE_AXI_GPREG_MEM_INIT_CTRL_S_AWCACHE_OVRD_VAL_BF_WID ( 4)
#define PCIE_AXI_GPREG_MEM_INIT_CTRL_S_AWCACHE_OVRD_VAL_BF_MSK (0x00000F00)
#define PCIE_AXI_GPREG_MEM_INIT_CTRL_S_AWCACHE_OVRD_VAL_BF_DEF (0x00000000)

///< PCIE Controller MSTR_ARCACHE Programmable value
#define PCIE_AXI_GPREG_MEM_INIT_CTRL_S_ARCACHE_OVRD_VAL_BF_OFF (12)
#define PCIE_AXI_GPREG_MEM_INIT_CTRL_S_ARCACHE_OVRD_VAL_BF_WID ( 4)
#define PCIE_AXI_GPREG_MEM_INIT_CTRL_S_ARCACHE_OVRD_VAL_BF_MSK (0x0000F000)
#define PCIE_AXI_GPREG_MEM_INIT_CTRL_S_ARCACHE_OVRD_VAL_BF_DEF (0x00000000)

///< Reserved
#define PCIE_AXI_GPREG_MEM_INIT_CTRL_S_RESERVED16_BF_OFF (16)
#define PCIE_AXI_GPREG_MEM_INIT_CTRL_S_RESERVED16_BF_WID (16)
#define PCIE_AXI_GPREG_MEM_INIT_CTRL_S_RESERVED16_BF_MSK (0xFFFF0000)
#define PCIE_AXI_GPREG_MEM_INIT_CTRL_S_RESERVED16_BF_DEF (0x00000000)


/** @brief PCIE_AXI_GPREG_MAP_MEM_PCIE_AXI_GPREG_MAP_PCIE_AXI_SMON_CLT_0 register description at address offset 0x11c
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_axi_gpreg_map_MEM/pcie_axi_gpreg_map/pcie_axi_smon_clt_0
  * SMON Control 0
  */

typedef union {
  struct {
    uint32_t SMON_EXTRA_CONTROL_0 : 32;
    ///< SMON Control 0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_axi_gpreg_smon_clt_0_reg_t;

#define PCIE_AXI_GPREG_SMON_CLT_0_DEFAULT (0x00000000U)
#define PCIE_AXI_GPREG_SMON_CLT_0_RD_MASK (0xffffffffU)
#define PCIE_AXI_GPREG_SMON_CLT_0_WR_MASK (0xffffffffU)


///< SMON Control 0
#define PCIE_AXI_GPREG_SMON_CLT_0_SMON_EXTRA_CTRL_0_BF_OFF ( 0)
#define PCIE_AXI_GPREG_SMON_CLT_0_SMON_EXTRA_CTRL_0_BF_WID (32)
#define PCIE_AXI_GPREG_SMON_CLT_0_SMON_EXTRA_CTRL_0_BF_MSK (0xFFFFFFFF)
#define PCIE_AXI_GPREG_SMON_CLT_0_SMON_EXTRA_CTRL_0_BF_DEF (0x00000000)


/** @brief PCIE_AXI_GPREG_MAP_MEM_PCIE_AXI_GPREG_MAP_PCIE_AXI_SMON_CLT_1 register description at address offset 0x120
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_axi_gpreg_map_MEM/pcie_axi_gpreg_map/pcie_axi_smon_clt_1
  * SMON Control 1
  */

typedef union {
  struct {
    uint32_t SMON_EXTRA_CONTROL_1 : 32;
    ///< SMON Control 1
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_axi_gpreg_smon_clt_1_reg_t;

#define PCIE_AXI_GPREG_SMON_CLT_1_DEFAULT (0x00000000U)
#define PCIE_AXI_GPREG_SMON_CLT_1_RD_MASK (0xffffffffU)
#define PCIE_AXI_GPREG_SMON_CLT_1_WR_MASK (0xffffffffU)


///< SMON Control 1
#define PCIE_AXI_GPREG_SMON_CLT_1_SMON_EXTRA_CTRL_1_BF_OFF ( 0)
#define PCIE_AXI_GPREG_SMON_CLT_1_SMON_EXTRA_CTRL_1_BF_WID (32)
#define PCIE_AXI_GPREG_SMON_CLT_1_SMON_EXTRA_CTRL_1_BF_MSK (0xFFFFFFFF)
#define PCIE_AXI_GPREG_SMON_CLT_1_SMON_EXTRA_CTRL_1_BF_DEF (0x00000000)


/** @brief PCIE_AXI_GPREG_MAP_MEM_PCIE_AXI_GPREG_MAP_PCIE_AXI_RO_0 register description at address offset 0x200
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_axi_gpreg_map_MEM/pcie_axi_gpreg_map/pcie_axi_ro_0
  * AXI Monitor Register
  */

typedef union {
  struct {
    uint32_t SMON_ENABLED : 1;
    ///< SMON Enabled
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
    uint32_t MEM_INIT_DONE : 1;
    ///< Memory Init Done = 1
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} pcie_axi_gpreg_ro_0_reg_t;

#define PCIE_AXI_GPREG_RO_0_DEFAULT (0x00000000U)
#define PCIE_AXI_GPREG_RO_0_RD_MASK (0x00000011U)
#define PCIE_AXI_GPREG_RO_0_WR_MASK (0x00000000U)


///< SMON Enabled
#define PCIE_AXI_GPREG_RO_0_SMON_END_BF_OFF ( 0)
#define PCIE_AXI_GPREG_RO_0_SMON_END_BF_WID ( 1)
#define PCIE_AXI_GPREG_RO_0_SMON_END_BF_MSK (0x00000001)
#define PCIE_AXI_GPREG_RO_0_SMON_END_BF_DEF (0x00000000)

///< Memory Init Done = 1
#define PCIE_AXI_GPREG_RO_0_MEM_INIT_DONE_BF_OFF ( 4)
#define PCIE_AXI_GPREG_RO_0_MEM_INIT_DONE_BF_WID ( 1)
#define PCIE_AXI_GPREG_RO_0_MEM_INIT_DONE_BF_MSK (0x00000010)
#define PCIE_AXI_GPREG_RO_0_MEM_INIT_DONE_BF_DEF (0x00000000)


/** @brief PCIE_AXI_GPREG_MAP_MEM_PCIE_AXI_GPREG_MAP_PCIE_AXI_SMON_0 register description at address offset 0x204
  *
  * Register default value:        0x40000000
  * Register full path in IP: pcie_axi_gpreg_map_MEM/pcie_axi_gpreg_map/pcie_axi_smon_0
  * AXI AW_SMON00 Register
  */

typedef union {
  struct {
    uint32_t SMON_ENABLE : 1;
    ///< enable the SMON counters
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
    uint32_t SMON0_FUNCTION : 3;
    ///< SMON0 function (enum_smon_function)
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t SMON0_FUNCTION_COMPARE : 1;
    ///< SMON0 function_compare (enum_smon_function_compare)
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t SMON1_FUNCTION : 3;
    ///< SMON1 function (enum_smon_function)
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t SMON1_FUNCTION_COMPARE : 1;
    ///< SMON1 function_compare (enum_smon_function_compare)
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t SMON_MODE : 4;
    ///< SMON mode (enum_smon_mode)
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t STOPCOUNTEROVFL : 1;
    ///< configure to stop on counter0 or counter1 overflow
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t INTCOUNTEROVFL : 1;
    ///< configure to interupt on counter0 or counter1 overflow
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t STATCOUNTER0OVFL : 1;
    ///< status for counter0 overflow. A value of '1' signifies counter0 overflow.
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t STATCOUNTER1OVFL : 1;
    ///< status for counter1 overflow. A value of '1' signifies counter1 overflow.
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t STOPTIMEROVFL : 1;
    ///< configure to stop on timer overflow or timer>maxvalue
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t INTTIMEROVFL : 1;
    ///< configure to interrupt on timer overflow or timer>maxvalue
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t STATTIMEROVFL : 1;
    ///< status of timer overflow. A value of '1' signifies timer overflow,
    ///< or timer>maxvalue.
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
    uint32_t TIMER_PRESCALE : 5;
    ///< timer prescale (enum_smon_prescale)
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
    uint32_t VERSION : 2;
    ///< version
    ///< AccessType="RO/V" BitOffset="30" ResetValue="0x1"
  } ;
  uint32_t value;
} pcie_axi_gpreg_smon_0_reg_t;

#define PCIE_AXI_GPREG_SMON_0_DEFAULT (0x40000000U)
#define PCIE_AXI_GPREG_SMON_0_RD_MASK (0xdf7ffff1U)
#define PCIE_AXI_GPREG_SMON_0_WR_MASK (0x1f7ffff1U)


///< enable the SMON counters
#define PCIE_AXI_GPREG_SMON_0_SMON_EN_BF_OFF ( 0)
#define PCIE_AXI_GPREG_SMON_0_SMON_EN_BF_WID ( 1)
#define PCIE_AXI_GPREG_SMON_0_SMON_EN_BF_MSK (0x00000001)
#define PCIE_AXI_GPREG_SMON_0_SMON_EN_BF_DEF (0x00000000)

///< SMON0 function (enum_smon_function)
#define PCIE_AXI_GPREG_SMON_0_SMON0_FUNCTION_BF_OFF ( 4)
#define PCIE_AXI_GPREG_SMON_0_SMON0_FUNCTION_BF_WID ( 3)
#define PCIE_AXI_GPREG_SMON_0_SMON0_FUNCTION_BF_MSK (0x00000070)
#define PCIE_AXI_GPREG_SMON_0_SMON0_FUNCTION_BF_DEF (0x00000000)

///< SMON0 function_compare (enum_smon_function_compare)
#define PCIE_AXI_GPREG_SMON_0_SMON0_FUNCTION_CMP_BF_OFF ( 7)
#define PCIE_AXI_GPREG_SMON_0_SMON0_FUNCTION_CMP_BF_WID ( 1)
#define PCIE_AXI_GPREG_SMON_0_SMON0_FUNCTION_CMP_BF_MSK (0x00000080)
#define PCIE_AXI_GPREG_SMON_0_SMON0_FUNCTION_CMP_BF_DEF (0x00000000)

///< SMON1 function (enum_smon_function)
#define PCIE_AXI_GPREG_SMON_0_SMON1_FUNCTION_BF_OFF ( 8)
#define PCIE_AXI_GPREG_SMON_0_SMON1_FUNCTION_BF_WID ( 3)
#define PCIE_AXI_GPREG_SMON_0_SMON1_FUNCTION_BF_MSK (0x00000700)
#define PCIE_AXI_GPREG_SMON_0_SMON1_FUNCTION_BF_DEF (0x00000000)

///< SMON1 function_compare (enum_smon_function_compare)
#define PCIE_AXI_GPREG_SMON_0_SMON1_FUNCTION_CMP_BF_OFF (11)
#define PCIE_AXI_GPREG_SMON_0_SMON1_FUNCTION_CMP_BF_WID ( 1)
#define PCIE_AXI_GPREG_SMON_0_SMON1_FUNCTION_CMP_BF_MSK (0x00000800)
#define PCIE_AXI_GPREG_SMON_0_SMON1_FUNCTION_CMP_BF_DEF (0x00000000)

///< SMON mode (enum_smon_mode)
#define PCIE_AXI_GPREG_SMON_0_SMON_MODE_BF_OFF (12)
#define PCIE_AXI_GPREG_SMON_0_SMON_MODE_BF_WID ( 4)
#define PCIE_AXI_GPREG_SMON_0_SMON_MODE_BF_MSK (0x0000F000)
#define PCIE_AXI_GPREG_SMON_0_SMON_MODE_BF_DEF (0x00000000)

///< configure to stop on counter0 or counter1 overflow
#define PCIE_AXI_GPREG_SMON_0_STOPCNTEROVFL_BF_OFF (16)
#define PCIE_AXI_GPREG_SMON_0_STOPCNTEROVFL_BF_WID ( 1)
#define PCIE_AXI_GPREG_SMON_0_STOPCNTEROVFL_BF_MSK (0x00010000)
#define PCIE_AXI_GPREG_SMON_0_STOPCNTEROVFL_BF_DEF (0x00000000)

///< configure to interupt on counter0 or counter1 overflow
#define PCIE_AXI_GPREG_SMON_0_INTCNTEROVFL_BF_OFF (17)
#define PCIE_AXI_GPREG_SMON_0_INTCNTEROVFL_BF_WID ( 1)
#define PCIE_AXI_GPREG_SMON_0_INTCNTEROVFL_BF_MSK (0x00020000)
#define PCIE_AXI_GPREG_SMON_0_INTCNTEROVFL_BF_DEF (0x00000000)

///< status for counter0 overflow. A value of '1' signifies counter0 overflow.
#define PCIE_AXI_GPREG_SMON_0_STATCNTER0OVFL_BF_OFF (18)
#define PCIE_AXI_GPREG_SMON_0_STATCNTER0OVFL_BF_WID ( 1)
#define PCIE_AXI_GPREG_SMON_0_STATCNTER0OVFL_BF_MSK (0x00040000)
#define PCIE_AXI_GPREG_SMON_0_STATCNTER0OVFL_BF_DEF (0x00000000)

///< status for counter1 overflow. A value of '1' signifies counter1 overflow.
#define PCIE_AXI_GPREG_SMON_0_STATCNTER1OVFL_BF_OFF (19)
#define PCIE_AXI_GPREG_SMON_0_STATCNTER1OVFL_BF_WID ( 1)
#define PCIE_AXI_GPREG_SMON_0_STATCNTER1OVFL_BF_MSK (0x00080000)
#define PCIE_AXI_GPREG_SMON_0_STATCNTER1OVFL_BF_DEF (0x00000000)

///< configure to stop on timer overflow or timer>maxvalue
#define PCIE_AXI_GPREG_SMON_0_STOPTIMEROVFL_BF_OFF (20)
#define PCIE_AXI_GPREG_SMON_0_STOPTIMEROVFL_BF_WID ( 1)
#define PCIE_AXI_GPREG_SMON_0_STOPTIMEROVFL_BF_MSK (0x00100000)
#define PCIE_AXI_GPREG_SMON_0_STOPTIMEROVFL_BF_DEF (0x00000000)

///< configure to interrupt on timer overflow or timer>maxvalue
#define PCIE_AXI_GPREG_SMON_0_INTTIMEROVFL_BF_OFF (21)
#define PCIE_AXI_GPREG_SMON_0_INTTIMEROVFL_BF_WID ( 1)
#define PCIE_AXI_GPREG_SMON_0_INTTIMEROVFL_BF_MSK (0x00200000)
#define PCIE_AXI_GPREG_SMON_0_INTTIMEROVFL_BF_DEF (0x00000000)

///< status of timer overflow. A value of '1' signifies timer overflow,
///< or timer>maxvalue.
#define PCIE_AXI_GPREG_SMON_0_STATTIMEROVFL_BF_OFF (22)
#define PCIE_AXI_GPREG_SMON_0_STATTIMEROVFL_BF_WID ( 1)
#define PCIE_AXI_GPREG_SMON_0_STATTIMEROVFL_BF_MSK (0x00400000)
#define PCIE_AXI_GPREG_SMON_0_STATTIMEROVFL_BF_DEF (0x00000000)

///< timer prescale (enum_smon_prescale)
#define PCIE_AXI_GPREG_SMON_0_TIMER_PRESCALE_BF_OFF (24)
#define PCIE_AXI_GPREG_SMON_0_TIMER_PRESCALE_BF_WID ( 5)
#define PCIE_AXI_GPREG_SMON_0_TIMER_PRESCALE_BF_MSK (0x1F000000)
#define PCIE_AXI_GPREG_SMON_0_TIMER_PRESCALE_BF_DEF (0x00000000)

///< version
#define PCIE_AXI_GPREG_SMON_0_VER_BF_OFF (30)
#define PCIE_AXI_GPREG_SMON_0_VER_BF_WID ( 2)
#define PCIE_AXI_GPREG_SMON_0_VER_BF_MSK (0xC0000000)
#define PCIE_AXI_GPREG_SMON_0_VER_BF_DEF (0x40000000)


/** @brief PCIE_AXI_GPREG_MAP_MEM_PCIE_AXI_GPREG_MAP_PCIE_AXI_SMON_1 register description at address offset 0x208
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_axi_gpreg_map_MEM/pcie_axi_gpreg_map/pcie_axi_smon_1
  * AXI AW_SMON01 Register
  */

typedef union {
  struct {
    uint32_t MODE0 : 8;
    ///< select input signal for SMON0 engine (PERIPH_SMON0_enum_smon_select)
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t MODE1 : 8;
    ///< select input signal for SMON1 engine (PERIPH_SMON0_enum_smon_select)
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RESERVED16 : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_axi_gpreg_smon_1_reg_t;

#define PCIE_AXI_GPREG_SMON_1_DEFAULT (0x00000000U)
#define PCIE_AXI_GPREG_SMON_1_RD_MASK (0xffffffffU)
#define PCIE_AXI_GPREG_SMON_1_WR_MASK (0x0000ffffU)


///< select input signal for SMON0 engine (PERIPH_SMON0_enum_smon_select)
#define PCIE_AXI_GPREG_SMON_1_MODE0_BF_OFF ( 0)
#define PCIE_AXI_GPREG_SMON_1_MODE0_BF_WID ( 8)
#define PCIE_AXI_GPREG_SMON_1_MODE0_BF_MSK (0x000000FF)
#define PCIE_AXI_GPREG_SMON_1_MODE0_BF_DEF (0x00000000)

///< select input signal for SMON1 engine (PERIPH_SMON0_enum_smon_select)
#define PCIE_AXI_GPREG_SMON_1_MODE1_BF_OFF ( 8)
#define PCIE_AXI_GPREG_SMON_1_MODE1_BF_WID ( 8)
#define PCIE_AXI_GPREG_SMON_1_MODE1_BF_MSK (0x0000FF00)
#define PCIE_AXI_GPREG_SMON_1_MODE1_BF_DEF (0x00000000)

///< Reserved
#define PCIE_AXI_GPREG_SMON_1_RESERVED16_BF_OFF (16)
#define PCIE_AXI_GPREG_SMON_1_RESERVED16_BF_WID (16)
#define PCIE_AXI_GPREG_SMON_1_RESERVED16_BF_MSK (0xFFFF0000)
#define PCIE_AXI_GPREG_SMON_1_RESERVED16_BF_DEF (0x00000000)


/** @brief PCIE_AXI_GPREG_MAP_MEM_PCIE_AXI_GPREG_MAP_PCIE_AXI_SMON_2 register description at address offset 0x20c
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_axi_gpreg_map_MEM/pcie_axi_gpreg_map/pcie_axi_smon_2
  * AXI AW_SMON02 Register
  */

typedef union {
  struct {
    uint32_t COMPARE0 : 32;
    ///< counter0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_axi_gpreg_smon_2_reg_t;

#define PCIE_AXI_GPREG_SMON_2_DEFAULT (0x00000000U)
#define PCIE_AXI_GPREG_SMON_2_RD_MASK (0xffffffffU)
#define PCIE_AXI_GPREG_SMON_2_WR_MASK (0xffffffffU)


///< counter0
#define PCIE_AXI_GPREG_SMON_2_CMP0_BF_OFF ( 0)
#define PCIE_AXI_GPREG_SMON_2_CMP0_BF_WID (32)
#define PCIE_AXI_GPREG_SMON_2_CMP0_BF_MSK (0xFFFFFFFF)
#define PCIE_AXI_GPREG_SMON_2_CMP0_BF_DEF (0x00000000)


/** @brief PCIE_AXI_GPREG_MAP_MEM_PCIE_AXI_GPREG_MAP_PCIE_AXI_SMON_3 register description at address offset 0x210
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_axi_gpreg_map_MEM/pcie_axi_gpreg_map/pcie_axi_smon_3
  * AXI AW_SMON03 Register
  */

typedef union {
  struct {
    uint32_t COMPARE1 : 32;
    ///< counter0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_axi_gpreg_smon_3_reg_t;

#define PCIE_AXI_GPREG_SMON_3_DEFAULT (0x00000000U)
#define PCIE_AXI_GPREG_SMON_3_RD_MASK (0xffffffffU)
#define PCIE_AXI_GPREG_SMON_3_WR_MASK (0xffffffffU)


///< counter0
#define PCIE_AXI_GPREG_SMON_3_CMP1_BF_OFF ( 0)
#define PCIE_AXI_GPREG_SMON_3_CMP1_BF_WID (32)
#define PCIE_AXI_GPREG_SMON_3_CMP1_BF_MSK (0xFFFFFFFF)
#define PCIE_AXI_GPREG_SMON_3_CMP1_BF_DEF (0x00000000)


/** @brief PCIE_AXI_GPREG_MAP_MEM_PCIE_AXI_GPREG_MAP_PCIE_AXI_SMON_4 register description at address offset 0x214
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_axi_gpreg_map_MEM/pcie_axi_gpreg_map/pcie_axi_smon_4
  * AXI AW_SMON04 Register
  */

typedef union {
  struct {
    uint32_t COUNTER0 : 32;
    ///< counter0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_axi_gpreg_smon_4_reg_t;

#define PCIE_AXI_GPREG_SMON_4_DEFAULT (0x00000000U)
#define PCIE_AXI_GPREG_SMON_4_RD_MASK (0xffffffffU)
#define PCIE_AXI_GPREG_SMON_4_WR_MASK (0xffffffffU)


///< counter0
#define PCIE_AXI_GPREG_SMON_4_CNTER0_BF_OFF ( 0)
#define PCIE_AXI_GPREG_SMON_4_CNTER0_BF_WID (32)
#define PCIE_AXI_GPREG_SMON_4_CNTER0_BF_MSK (0xFFFFFFFF)
#define PCIE_AXI_GPREG_SMON_4_CNTER0_BF_DEF (0x00000000)


/** @brief PCIE_AXI_GPREG_MAP_MEM_PCIE_AXI_GPREG_MAP_PCIE_AXI_SMON_5 register description at address offset 0x218
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_axi_gpreg_map_MEM/pcie_axi_gpreg_map/pcie_axi_smon_5
  * AXI AW_SMON05 Register
  */

typedef union {
  struct {
    uint32_t COUNTER1 : 32;
    ///< counter1
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_axi_gpreg_smon_5_reg_t;

#define PCIE_AXI_GPREG_SMON_5_DEFAULT (0x00000000U)
#define PCIE_AXI_GPREG_SMON_5_RD_MASK (0xffffffffU)
#define PCIE_AXI_GPREG_SMON_5_WR_MASK (0xffffffffU)


///< counter1
#define PCIE_AXI_GPREG_SMON_5_CNTER1_BF_OFF ( 0)
#define PCIE_AXI_GPREG_SMON_5_CNTER1_BF_WID (32)
#define PCIE_AXI_GPREG_SMON_5_CNTER1_BF_MSK (0xFFFFFFFF)
#define PCIE_AXI_GPREG_SMON_5_CNTER1_BF_DEF (0x00000000)


/** @brief PCIE_AXI_GPREG_MAP_MEM_PCIE_AXI_GPREG_MAP_PCIE_AXI_SMON_6 register description at address offset 0x21c
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_axi_gpreg_map_MEM/pcie_axi_gpreg_map/pcie_axi_smon_6
  * AXI AW_SMON06 Register
  */

typedef union {
  struct {
    uint32_t TIMER : 32;
    ///< timer
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_axi_gpreg_smon_6_reg_t;

#define PCIE_AXI_GPREG_SMON_6_DEFAULT (0x00000000U)
#define PCIE_AXI_GPREG_SMON_6_RD_MASK (0xffffffffU)
#define PCIE_AXI_GPREG_SMON_6_WR_MASK (0xffffffffU)


///< timer
#define PCIE_AXI_GPREG_SMON_6_TIMER_BF_OFF ( 0)
#define PCIE_AXI_GPREG_SMON_6_TIMER_BF_WID (32)
#define PCIE_AXI_GPREG_SMON_6_TIMER_BF_MSK (0xFFFFFFFF)
#define PCIE_AXI_GPREG_SMON_6_TIMER_BF_DEF (0x00000000)


/** @brief PCIE_AXI_GPREG_MAP_MEM_PCIE_AXI_GPREG_MAP_PCIE_AXI_SMON_7 register description at address offset 0x220
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_axi_gpreg_map_MEM/pcie_axi_gpreg_map/pcie_axi_smon_7
  * AXI AW_SMON07 Register
  */

typedef union {
  struct {
    uint32_t MAXVALUE : 32;
    ///< maxvalue
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_axi_gpreg_smon_7_reg_t;

#define PCIE_AXI_GPREG_SMON_7_DEFAULT (0x00000000U)
#define PCIE_AXI_GPREG_SMON_7_RD_MASK (0xffffffffU)
#define PCIE_AXI_GPREG_SMON_7_WR_MASK (0xffffffffU)


///< maxvalue
#define PCIE_AXI_GPREG_SMON_7_MAXVAL_BF_OFF ( 0)
#define PCIE_AXI_GPREG_SMON_7_MAXVAL_BF_WID (32)
#define PCIE_AXI_GPREG_SMON_7_MAXVAL_BF_MSK (0xFFFFFFFF)
#define PCIE_AXI_GPREG_SMON_7_MAXVAL_BF_DEF (0x00000000)


/** @brief PCIE_AXI_GPREG_MAP_MEM_PCIE_AXI_GPREG_MAP_PCIE_AXI_ECC_SBE register description at address offset 0x224
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_axi_gpreg_map_MEM/pcie_axi_gpreg_map/pcie_axi_ecc_sbe
  * Memory ECC Single Bit Error - SBE
  */

typedef union {
  struct {
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="0" ResetValue="None"
    uint32_t ECC_SBE_M3T5 : 3;
    ///< ECC Single Bit Error. Each bit is for an ECC protected memory slice
    ///< in a TPCIe Controller, and when high, indicates an ECC single bit
    ///< error was detected, and can be cleared by the associated ERR_CLR bit.
    ///< - 3 - u_ib_rreq_c2a_cdc_ram                   - 4 - u_ib_wreq_c2a_cdc_ram
    ///< - 5 - u_ob_ccmp_data_ram
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ECC_SBE_M7 : 1;
    ///< ECC Single Bit Error. Each bit is for an ECC protected memory slice
    ///< in a TPCIe Controller, and when high, indicates an ECC single bit
    ///< error was detected, and can be cleared by the associated ERR_CLR bit.
    ///< - 7 - u_slv_npw_sab_ram
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} pcie_axi_gpreg_ecc_sbe_reg_t;

#define PCIE_AXI_GPREG_ECC_SBE_DEFAULT (0x00000000U)
#define PCIE_AXI_GPREG_ECC_SBE_RD_MASK (0x000000b8U)
#define PCIE_AXI_GPREG_ECC_SBE_WR_MASK (0x00000000U)


///< ECC Single Bit Error. Each bit is for an ECC protected memory slice
///< in a TPCIe Controller, and when high, indicates an ECC single bit
///< error was detected, and can be cleared by the associated ERR_CLR bit.
///< - 3 - u_ib_rreq_c2a_cdc_ram                   - 4 - u_ib_wreq_c2a_cdc_ram
///< - 5 - u_ob_ccmp_data_ram
#define PCIE_AXI_GPREG_ECC_SBE_ECC_SBE_M3T5_BF_OFF ( 3)
#define PCIE_AXI_GPREG_ECC_SBE_ECC_SBE_M3T5_BF_WID ( 3)
#define PCIE_AXI_GPREG_ECC_SBE_ECC_SBE_M3T5_BF_MSK (0x00000038)
#define PCIE_AXI_GPREG_ECC_SBE_ECC_SBE_M3T5_BF_DEF (0x00000000)

///< ECC Single Bit Error. Each bit is for an ECC protected memory slice
///< in a TPCIe Controller, and when high, indicates an ECC single bit
///< error was detected, and can be cleared by the associated ERR_CLR bit.
///< - 7 - u_slv_npw_sab_ram
#define PCIE_AXI_GPREG_ECC_SBE_ECC_SBE_M7_BF_OFF ( 7)
#define PCIE_AXI_GPREG_ECC_SBE_ECC_SBE_M7_BF_WID ( 1)
#define PCIE_AXI_GPREG_ECC_SBE_ECC_SBE_M7_BF_MSK (0x00000080)
#define PCIE_AXI_GPREG_ECC_SBE_ECC_SBE_M7_BF_DEF (0x00000000)


/** @brief PCIE_AXI_GPREG_MAP_MEM_PCIE_AXI_GPREG_MAP_PCIE_AXI_ECC_DBE register description at address offset 0x228
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_axi_gpreg_map_MEM/pcie_axi_gpreg_map/pcie_axi_ecc_dbe
  * Memory ECC Double Bit Error - DBE
  */

typedef union {
  struct {
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="0" ResetValue="None"
    uint32_t ECC_DBE_M3T5 : 3;
    ///< ECC Double Bit Error. Each bit is for an ECC protected memory slice
    ///< in a TPCIe Controller, and when high, indicates an ECC double bit
    ///< error was detected, and can be cleared by the associated ERR_CLR bit.
    ///< - 3 - u_ib_rreq_c2a_cdc_ram                   - 4 - u_ib_wreq_c2a_cdc_ram
    ///< - 5 - u_ob_ccmp_data_ram
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ECC_DBE_M7 : 1;
    ///< ECC Double Bit Error. Each bit is for an ECC protected memory slice
    ///< in a TPCIe Controller, and when high, indicates an ECC double bit
    ///< error was detected, and can be cleared by the associated ERR_CLR bit.
    ///< - 7 - u_slv_npw_sab_ram
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} pcie_axi_gpreg_ecc_dbe_reg_t;

#define PCIE_AXI_GPREG_ECC_DBE_DEFAULT (0x00000000U)
#define PCIE_AXI_GPREG_ECC_DBE_RD_MASK (0x000000b8U)
#define PCIE_AXI_GPREG_ECC_DBE_WR_MASK (0x00000000U)


///< ECC Double Bit Error. Each bit is for an ECC protected memory slice
///< in a TPCIe Controller, and when high, indicates an ECC double bit
///< error was detected, and can be cleared by the associated ERR_CLR bit.
///< - 3 - u_ib_rreq_c2a_cdc_ram                   - 4 - u_ib_wreq_c2a_cdc_ram
///< - 5 - u_ob_ccmp_data_ram
#define PCIE_AXI_GPREG_ECC_DBE_ECC_DBE_M3T5_BF_OFF ( 3)
#define PCIE_AXI_GPREG_ECC_DBE_ECC_DBE_M3T5_BF_WID ( 3)
#define PCIE_AXI_GPREG_ECC_DBE_ECC_DBE_M3T5_BF_MSK (0x00000038)
#define PCIE_AXI_GPREG_ECC_DBE_ECC_DBE_M3T5_BF_DEF (0x00000000)

///< ECC Double Bit Error. Each bit is for an ECC protected memory slice
///< in a TPCIe Controller, and when high, indicates an ECC double bit
///< error was detected, and can be cleared by the associated ERR_CLR bit.
///< - 7 - u_slv_npw_sab_ram
#define PCIE_AXI_GPREG_ECC_DBE_ECC_DBE_M7_BF_OFF ( 7)
#define PCIE_AXI_GPREG_ECC_DBE_ECC_DBE_M7_BF_WID ( 1)
#define PCIE_AXI_GPREG_ECC_DBE_ECC_DBE_M7_BF_MSK (0x00000080)
#define PCIE_AXI_GPREG_ECC_DBE_ECC_DBE_M7_BF_DEF (0x00000000)


/** @brief PCIE_AXI_GPREG_MAP_MEM_PCIE_AXI_GPREG_MAP_PCIE_AXI_ECC_SBE_CNT_OVFL register description at address offset 0x22c
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_axi_gpreg_map_MEM/pcie_axi_gpreg_map/pcie_axi_ecc_sbe_cnt_ovfl
  * Memory ECC Single Bit Error Count Overflow - SBE
  */

typedef union {
  struct {
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="0" ResetValue="None"
    uint32_t ECC_SBE_CNT_OVFL_M3T5 : 3;
    ///< SBE Count Overflow. Each bit is for an ECC protected memory, and when
    ///< high, indicates the SBE_COUNT[3:0] is overflowed. It can be cleared
    ///< by CNT_CLR bit.                  - 3 - u_ib_rreq_c2a_cdc_ram
    ///< - 4 - u_ib_wreq_c2a_cdc_ram                   - 5 - u_ob_ccmp_data_ram
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ECC_SBE_CNT_OVFL_M7 : 1;
    ///< SBE Count Overflow. Each bit is for an ECC protected memory, and when
    ///< high, indicates the SBE_COUNT[3:0] is overflowed. It can be cleared
    ///< by CNT_CLR bit.                  - 7 - u_slv_npw_sab_ram
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} pcie_axi_gpreg_ecc_sbe_cnt_ovfl_reg_t;

#define PCIE_AXI_GPREG_ECC_SBE_CNT_OVFL_DEFAULT (0x00000000U)
#define PCIE_AXI_GPREG_ECC_SBE_CNT_OVFL_RD_MASK (0x000000b8U)
#define PCIE_AXI_GPREG_ECC_SBE_CNT_OVFL_WR_MASK (0x00000000U)


///< SBE Count Overflow. Each bit is for an ECC protected memory, and when
///< high, indicates the SBE_COUNT[3:0] is overflowed. It can be cleared
///< by CNT_CLR bit.                  - 3 - u_ib_rreq_c2a_cdc_ram
///< - 4 - u_ib_wreq_c2a_cdc_ram                   - 5 - u_ob_ccmp_data_ram
#define PCIE_AXI_GPREG_ECC_SBE_CNT_OVFL_ECC_SBE_CNT_OVFL_M3T5_BF_OFF ( 3)
#define PCIE_AXI_GPREG_ECC_SBE_CNT_OVFL_ECC_SBE_CNT_OVFL_M3T5_BF_WID ( 3)
#define PCIE_AXI_GPREG_ECC_SBE_CNT_OVFL_ECC_SBE_CNT_OVFL_M3T5_BF_MSK (0x00000038)
#define PCIE_AXI_GPREG_ECC_SBE_CNT_OVFL_ECC_SBE_CNT_OVFL_M3T5_BF_DEF (0x00000000)

///< SBE Count Overflow. Each bit is for an ECC protected memory, and when
///< high, indicates the SBE_COUNT[3:0] is overflowed. It can be cleared
///< by CNT_CLR bit.                  - 7 - u_slv_npw_sab_ram
#define PCIE_AXI_GPREG_ECC_SBE_CNT_OVFL_ECC_SBE_CNT_OVFL_M7_BF_OFF ( 7)
#define PCIE_AXI_GPREG_ECC_SBE_CNT_OVFL_ECC_SBE_CNT_OVFL_M7_BF_WID ( 1)
#define PCIE_AXI_GPREG_ECC_SBE_CNT_OVFL_ECC_SBE_CNT_OVFL_M7_BF_MSK (0x00000080)
#define PCIE_AXI_GPREG_ECC_SBE_CNT_OVFL_ECC_SBE_CNT_OVFL_M7_BF_DEF (0x00000000)


/** @brief PCIE_AXI_GPREG_MAP_MEM_PCIE_AXI_GPREG_MAP_PCIE_AXI_ECC_ERR_ADDR_0 register description at address offset 0x230
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_axi_gpreg_map_MEM/pcie_axi_gpreg_map/pcie_axi_ecc_err_addr_0
  * Memory ECC Error Address
  */

typedef union {
  struct {
    uint32_t ECC_ERR_ADDR_3 : 11;
    ///< ECC Error Address.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
    uint32_t ECC_ERR_ADDR_4 : 11;
    ///< ECC Error Address.
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="27" ResetValue="None"
  } ;
  uint32_t value;
} pcie_axi_gpreg_ecc_err_addr_0_reg_t;

#define PCIE_AXI_GPREG_ECC_ERR_ADDR_0_DEFAULT (0x00000000U)
#define PCIE_AXI_GPREG_ECC_ERR_ADDR_0_RD_MASK (0x07ff07ffU)
#define PCIE_AXI_GPREG_ECC_ERR_ADDR_0_WR_MASK (0x00000000U)


///< ECC Error Address.
#define PCIE_AXI_GPREG_ECC_ERR_ADDR_0_ECC_ERR_ADDR_3_BF_OFF ( 0)
#define PCIE_AXI_GPREG_ECC_ERR_ADDR_0_ECC_ERR_ADDR_3_BF_WID (11)
#define PCIE_AXI_GPREG_ECC_ERR_ADDR_0_ECC_ERR_ADDR_3_BF_MSK (0x000007FF)
#define PCIE_AXI_GPREG_ECC_ERR_ADDR_0_ECC_ERR_ADDR_3_BF_DEF (0x00000000)

///< ECC Error Address.
#define PCIE_AXI_GPREG_ECC_ERR_ADDR_0_ECC_ERR_ADDR_4_BF_OFF (16)
#define PCIE_AXI_GPREG_ECC_ERR_ADDR_0_ECC_ERR_ADDR_4_BF_WID (11)
#define PCIE_AXI_GPREG_ECC_ERR_ADDR_0_ECC_ERR_ADDR_4_BF_MSK (0x07FF0000)
#define PCIE_AXI_GPREG_ECC_ERR_ADDR_0_ECC_ERR_ADDR_4_BF_DEF (0x00000000)


/** @brief PCIE_AXI_GPREG_MAP_MEM_PCIE_AXI_GPREG_MAP_PCIE_AXI_ECC_ERR_ADDR_1 register description at address offset 0x234
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_axi_gpreg_map_MEM/pcie_axi_gpreg_map/pcie_axi_ecc_err_addr_1
  * Memory ECC Error Address
  */

typedef union {
  struct {
    uint32_t ECC_ERR_ADDR_5 : 11;
    ///< ECC Error Address.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
    uint32_t ECC_ERR_ADDR_7 : 11;
    ///< ECC Error Address.
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="27" ResetValue="None"
  } ;
  uint32_t value;
} pcie_axi_gpreg_ecc_err_addr_1_reg_t;

#define PCIE_AXI_GPREG_ECC_ERR_ADDR_1_DEFAULT (0x00000000U)
#define PCIE_AXI_GPREG_ECC_ERR_ADDR_1_RD_MASK (0x07ff07ffU)
#define PCIE_AXI_GPREG_ECC_ERR_ADDR_1_WR_MASK (0x00000000U)


///< ECC Error Address.
#define PCIE_AXI_GPREG_ECC_ERR_ADDR_1_ECC_ERR_ADDR_5_BF_OFF ( 0)
#define PCIE_AXI_GPREG_ECC_ERR_ADDR_1_ECC_ERR_ADDR_5_BF_WID (11)
#define PCIE_AXI_GPREG_ECC_ERR_ADDR_1_ECC_ERR_ADDR_5_BF_MSK (0x000007FF)
#define PCIE_AXI_GPREG_ECC_ERR_ADDR_1_ECC_ERR_ADDR_5_BF_DEF (0x00000000)

///< ECC Error Address.
#define PCIE_AXI_GPREG_ECC_ERR_ADDR_1_ECC_ERR_ADDR_7_BF_OFF (16)
#define PCIE_AXI_GPREG_ECC_ERR_ADDR_1_ECC_ERR_ADDR_7_BF_WID (11)
#define PCIE_AXI_GPREG_ECC_ERR_ADDR_1_ECC_ERR_ADDR_7_BF_MSK (0x07FF0000)
#define PCIE_AXI_GPREG_ECC_ERR_ADDR_1_ECC_ERR_ADDR_7_BF_DEF (0x00000000)


/** @brief PCIE_AXI_GPREG_MAP_MEM_PCIE_AXI_GPREG_MAP_PCIE_AXI_ECC_ERR_SYNDROME_0 register description at address offset 0x238
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_axi_gpreg_map_MEM/pcie_axi_gpreg_map/pcie_axi_ecc_err_syndrome_0
  * Memory ECC Error Syndrome
  */

typedef union {
  struct {
    uint32_t ECC_ERR_SYNDROME_3 : 10;
    ///< ECC Error Syndrome
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
    uint32_t ECC_ERR_SYNDROME_4 : 10;
    ///< ECC Error Syndrome
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="26" ResetValue="None"
  } ;
  uint32_t value;
} pcie_axi_gpreg_ecc_err_syndrome_0_reg_t;

#define PCIE_AXI_GPREG_ECC_ERR_SYNDROME_0_DEFAULT (0x00000000U)
#define PCIE_AXI_GPREG_ECC_ERR_SYNDROME_0_RD_MASK (0x03ff03ffU)
#define PCIE_AXI_GPREG_ECC_ERR_SYNDROME_0_WR_MASK (0x00000000U)


///< ECC Error Syndrome
#define PCIE_AXI_GPREG_ECC_ERR_SYNDROME_0_ECC_ERR_SYNDROME_3_BF_OFF ( 0)
#define PCIE_AXI_GPREG_ECC_ERR_SYNDROME_0_ECC_ERR_SYNDROME_3_BF_WID (10)
#define PCIE_AXI_GPREG_ECC_ERR_SYNDROME_0_ECC_ERR_SYNDROME_3_BF_MSK (0x000003FF)
#define PCIE_AXI_GPREG_ECC_ERR_SYNDROME_0_ECC_ERR_SYNDROME_3_BF_DEF (0x00000000)

///< ECC Error Syndrome
#define PCIE_AXI_GPREG_ECC_ERR_SYNDROME_0_ECC_ERR_SYNDROME_4_BF_OFF (16)
#define PCIE_AXI_GPREG_ECC_ERR_SYNDROME_0_ECC_ERR_SYNDROME_4_BF_WID (10)
#define PCIE_AXI_GPREG_ECC_ERR_SYNDROME_0_ECC_ERR_SYNDROME_4_BF_MSK (0x03FF0000)
#define PCIE_AXI_GPREG_ECC_ERR_SYNDROME_0_ECC_ERR_SYNDROME_4_BF_DEF (0x00000000)


/** @brief PCIE_AXI_GPREG_MAP_MEM_PCIE_AXI_GPREG_MAP_PCIE_AXI_ECC_ERR_SYNDROME_1 register description at address offset 0x23c
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_axi_gpreg_map_MEM/pcie_axi_gpreg_map/pcie_axi_ecc_err_syndrome_1
  * Memory ECC Error Syndrome
  */

typedef union {
  struct {
    uint32_t ECC_ERR_SYNDROME_3 : 10;
    ///< ECC Error Syndrome
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
    uint32_t ECC_ERR_SYNDROME_4 : 10;
    ///< ECC Error Syndrome
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="26" ResetValue="None"
  } ;
  uint32_t value;
} pcie_axi_gpreg_ecc_err_syndrome_1_reg_t;

#define PCIE_AXI_GPREG_ECC_ERR_SYNDROME_1_DEFAULT (0x00000000U)
#define PCIE_AXI_GPREG_ECC_ERR_SYNDROME_1_RD_MASK (0x03ff03ffU)
#define PCIE_AXI_GPREG_ECC_ERR_SYNDROME_1_WR_MASK (0x00000000U)


///< ECC Error Syndrome
#define PCIE_AXI_GPREG_ECC_ERR_SYNDROME_1_ECC_ERR_SYNDROME_3_BF_OFF ( 0)
#define PCIE_AXI_GPREG_ECC_ERR_SYNDROME_1_ECC_ERR_SYNDROME_3_BF_WID (10)
#define PCIE_AXI_GPREG_ECC_ERR_SYNDROME_1_ECC_ERR_SYNDROME_3_BF_MSK (0x000003FF)
#define PCIE_AXI_GPREG_ECC_ERR_SYNDROME_1_ECC_ERR_SYNDROME_3_BF_DEF (0x00000000)

///< ECC Error Syndrome
#define PCIE_AXI_GPREG_ECC_ERR_SYNDROME_1_ECC_ERR_SYNDROME_4_BF_OFF (16)
#define PCIE_AXI_GPREG_ECC_ERR_SYNDROME_1_ECC_ERR_SYNDROME_4_BF_WID (10)
#define PCIE_AXI_GPREG_ECC_ERR_SYNDROME_1_ECC_ERR_SYNDROME_4_BF_MSK (0x03FF0000)
#define PCIE_AXI_GPREG_ECC_ERR_SYNDROME_1_ECC_ERR_SYNDROME_4_BF_DEF (0x00000000)


/** @brief PCIE_AXI_GPREG_MAP_MEM_PCIE_AXI_GPREG_MAP_PCIE_AXI_INTR0_STATUS register description at address offset 0x400
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_axi_gpreg_map_MEM/pcie_axi_gpreg_map/pcie_axi_intr0_status
  * AXI Interrupt Status 0
  */

typedef union {
  struct {
    uint32_t MEM_ECC_SBE : 1;
    ///< SBE Error - ORing of [7],[5:3] SBE errors from pcie_axi_ecc_sbe register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t MEM_ECC_DBE : 1;
    ///< DBE Error - ORing of [7],[5:3] DBE errors from pcie_axi_ecc_dbe register.
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t MEM_ECC_SBE_CNT_OVFL : 1;
    ///< SBE Counter Overflow Error - ORing of [7],[5:3] SBE Counter overflow
    ///< from pcie_axi_ecc_cnt_ovfl register.
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t SMON_INTERRUPT : 1;
    ///< Smon Interrupt
    ///< AccessType="RO/V" BitOffset="30" ResetValue="0x0"
    uint32_t MSTR_ARMISC_INFO_ZEROREAD : 1;
    ///< Zero Byte Read Occured
    ///< AccessType="RO/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_axi_gpreg_intr0_stat_reg_t;

#define PCIE_AXI_GPREG_INTR0_STAT_DEFAULT (0x00000000U)
#define PCIE_AXI_GPREG_INTR0_STAT_RD_MASK (0xc0000007U)
#define PCIE_AXI_GPREG_INTR0_STAT_WR_MASK (0x00000000U)


///< SBE Error - ORing of [7],[5:3] SBE errors from pcie_axi_ecc_sbe register.
#define PCIE_AXI_GPREG_INTR0_STAT_MEM_ECC_SBE_BF_OFF ( 0)
#define PCIE_AXI_GPREG_INTR0_STAT_MEM_ECC_SBE_BF_WID ( 1)
#define PCIE_AXI_GPREG_INTR0_STAT_MEM_ECC_SBE_BF_MSK (0x00000001)
#define PCIE_AXI_GPREG_INTR0_STAT_MEM_ECC_SBE_BF_DEF (0x00000000)

///< DBE Error - ORing of [7],[5:3] DBE errors from pcie_axi_ecc_dbe register.
#define PCIE_AXI_GPREG_INTR0_STAT_MEM_ECC_DBE_BF_OFF ( 1)
#define PCIE_AXI_GPREG_INTR0_STAT_MEM_ECC_DBE_BF_WID ( 1)
#define PCIE_AXI_GPREG_INTR0_STAT_MEM_ECC_DBE_BF_MSK (0x00000002)
#define PCIE_AXI_GPREG_INTR0_STAT_MEM_ECC_DBE_BF_DEF (0x00000000)

///< SBE Counter Overflow Error - ORing of [7],[5:3] SBE Counter overflow
///< from pcie_axi_ecc_cnt_ovfl register.
#define PCIE_AXI_GPREG_INTR0_STAT_MEM_ECC_SBE_CNT_OVFL_BF_OFF ( 2)
#define PCIE_AXI_GPREG_INTR0_STAT_MEM_ECC_SBE_CNT_OVFL_BF_WID ( 1)
#define PCIE_AXI_GPREG_INTR0_STAT_MEM_ECC_SBE_CNT_OVFL_BF_MSK (0x00000004)
#define PCIE_AXI_GPREG_INTR0_STAT_MEM_ECC_SBE_CNT_OVFL_BF_DEF (0x00000000)

///< Smon Interrupt
#define PCIE_AXI_GPREG_INTR0_STAT_SMON_INTR_BF_OFF (30)
#define PCIE_AXI_GPREG_INTR0_STAT_SMON_INTR_BF_WID ( 1)
#define PCIE_AXI_GPREG_INTR0_STAT_SMON_INTR_BF_MSK (0x40000000)
#define PCIE_AXI_GPREG_INTR0_STAT_SMON_INTR_BF_DEF (0x00000000)

///< Zero Byte Read Occured
#define PCIE_AXI_GPREG_INTR0_STAT_MSTR_ARMISC_INFO_ZEROREAD_BF_OFF (31)
#define PCIE_AXI_GPREG_INTR0_STAT_MSTR_ARMISC_INFO_ZEROREAD_BF_WID ( 1)
#define PCIE_AXI_GPREG_INTR0_STAT_MSTR_ARMISC_INFO_ZEROREAD_BF_MSK (0x80000000)
#define PCIE_AXI_GPREG_INTR0_STAT_MSTR_ARMISC_INFO_ZEROREAD_BF_DEF (0x00000000)


/** @brief PCIE_AXI_GPREG_MAP_MEM_PCIE_AXI_GPREG_MAP_PCIE_AXI_INTR0_HIGH_EN register description at address offset 0x404
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_axi_gpreg_map_MEM/pcie_axi_gpreg_map/pcie_axi_intr0_high_en
  * AXI Interrupt High EN 0
  */

typedef union {
  struct {
    uint32_t INTR_HIGH_EN_0T2 : 3;
    ///< High Interrupt Enable for Status Bits
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t INTR_HIGH_EN_30 : 1;
    ///< High Interrupt Enable for Status Bits
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t INTR_HIGH_EN_31 : 1;
    ///< High Interrupt Enable for Status Bits
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_axi_gpreg_intr0_high_en_reg_t;

#define PCIE_AXI_GPREG_INTR0_HIGH_EN_DEFAULT (0x00000000U)
#define PCIE_AXI_GPREG_INTR0_HIGH_EN_RD_MASK (0xc0000007U)
#define PCIE_AXI_GPREG_INTR0_HIGH_EN_WR_MASK (0xc0000007U)


///< High Interrupt Enable for Status Bits
#define PCIE_AXI_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_0T2_BF_OFF ( 0)
#define PCIE_AXI_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_0T2_BF_WID ( 3)
#define PCIE_AXI_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_0T2_BF_MSK (0x00000007)
#define PCIE_AXI_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_0T2_BF_DEF (0x00000000)

///< High Interrupt Enable for Status Bits
#define PCIE_AXI_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_30_BF_OFF (30)
#define PCIE_AXI_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_30_BF_WID ( 1)
#define PCIE_AXI_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_30_BF_MSK (0x40000000)
#define PCIE_AXI_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_30_BF_DEF (0x00000000)

///< High Interrupt Enable for Status Bits
#define PCIE_AXI_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_31_BF_OFF (31)
#define PCIE_AXI_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_31_BF_WID ( 1)
#define PCIE_AXI_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_31_BF_MSK (0x80000000)
#define PCIE_AXI_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_31_BF_DEF (0x00000000)


/** @brief PCIE_AXI_GPREG_MAP_MEM_PCIE_AXI_GPREG_MAP_PCIE_AXI_INTR0_LOW_EN register description at address offset 0x408
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_axi_gpreg_map_MEM/pcie_axi_gpreg_map/pcie_axi_intr0_low_en
  * AXI Interrupt Low EN 0
  */

typedef union {
  struct {
    uint32_t INTR_LOW_EN_0T2 : 3;
    ///< Low Interrupt Enable for Status Bits
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t INTR_LOW_EN_30 : 1;
    ///< Low Interrupt Enable for Status Bits
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t INTR_LOW_EN_31 : 1;
    ///< Low Interrupt Enable for Status Bits
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_axi_gpreg_intr0_low_en_reg_t;

#define PCIE_AXI_GPREG_INTR0_LOW_EN_DEFAULT (0x00000000U)
#define PCIE_AXI_GPREG_INTR0_LOW_EN_RD_MASK (0xc0000007U)
#define PCIE_AXI_GPREG_INTR0_LOW_EN_WR_MASK (0xc0000007U)


///< Low Interrupt Enable for Status Bits
#define PCIE_AXI_GPREG_INTR0_LOW_EN_INTR_LOW_EN_0T2_BF_OFF ( 0)
#define PCIE_AXI_GPREG_INTR0_LOW_EN_INTR_LOW_EN_0T2_BF_WID ( 3)
#define PCIE_AXI_GPREG_INTR0_LOW_EN_INTR_LOW_EN_0T2_BF_MSK (0x00000007)
#define PCIE_AXI_GPREG_INTR0_LOW_EN_INTR_LOW_EN_0T2_BF_DEF (0x00000000)

///< Low Interrupt Enable for Status Bits
#define PCIE_AXI_GPREG_INTR0_LOW_EN_INTR_LOW_EN_30_BF_OFF (30)
#define PCIE_AXI_GPREG_INTR0_LOW_EN_INTR_LOW_EN_30_BF_WID ( 1)
#define PCIE_AXI_GPREG_INTR0_LOW_EN_INTR_LOW_EN_30_BF_MSK (0x40000000)
#define PCIE_AXI_GPREG_INTR0_LOW_EN_INTR_LOW_EN_30_BF_DEF (0x00000000)

///< Low Interrupt Enable for Status Bits
#define PCIE_AXI_GPREG_INTR0_LOW_EN_INTR_LOW_EN_31_BF_OFF (31)
#define PCIE_AXI_GPREG_INTR0_LOW_EN_INTR_LOW_EN_31_BF_WID ( 1)
#define PCIE_AXI_GPREG_INTR0_LOW_EN_INTR_LOW_EN_31_BF_MSK (0x80000000)
#define PCIE_AXI_GPREG_INTR0_LOW_EN_INTR_LOW_EN_31_BF_DEF (0x00000000)


/** @brief PCIE_AXI_GPREG_MAP_MEM_PCIE_AXI_GPREG_MAP_PCIE_AXI_INTR0_CLEAR register description at address offset 0x40c
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_axi_gpreg_map_MEM/pcie_axi_gpreg_map/pcie_axi_intr0_clear
  * AXI Interrupt Clear 0
  */

typedef union {
  struct {
    uint32_t INTR_CLEAR_0T2 : 3;
    ///< Clear Interrupt Enable for Status Bits
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t INTR_CLEAR_30 : 1;
    ///< Clear Interrupt Enable for Status Bits
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t INTR_CLEAR_31 : 1;
    ///< Clear Interrupt Enable for Status Bits
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_axi_gpreg_intr0_clr_reg_t;

#define PCIE_AXI_GPREG_INTR0_CLR_DEFAULT (0x00000000U)
#define PCIE_AXI_GPREG_INTR0_CLR_RD_MASK (0xc0000007U)
#define PCIE_AXI_GPREG_INTR0_CLR_WR_MASK (0xc0000007U)


///< Clear Interrupt Enable for Status Bits
#define PCIE_AXI_GPREG_INTR0_CLR_INTR_CLR_0T2_BF_OFF ( 0)
#define PCIE_AXI_GPREG_INTR0_CLR_INTR_CLR_0T2_BF_WID ( 3)
#define PCIE_AXI_GPREG_INTR0_CLR_INTR_CLR_0T2_BF_MSK (0x00000007)
#define PCIE_AXI_GPREG_INTR0_CLR_INTR_CLR_0T2_BF_DEF (0x00000000)

///< Clear Interrupt Enable for Status Bits
#define PCIE_AXI_GPREG_INTR0_CLR_INTR_CLR_30_BF_OFF (30)
#define PCIE_AXI_GPREG_INTR0_CLR_INTR_CLR_30_BF_WID ( 1)
#define PCIE_AXI_GPREG_INTR0_CLR_INTR_CLR_30_BF_MSK (0x40000000)
#define PCIE_AXI_GPREG_INTR0_CLR_INTR_CLR_30_BF_DEF (0x00000000)

///< Clear Interrupt Enable for Status Bits
#define PCIE_AXI_GPREG_INTR0_CLR_INTR_CLR_31_BF_OFF (31)
#define PCIE_AXI_GPREG_INTR0_CLR_INTR_CLR_31_BF_WID ( 1)
#define PCIE_AXI_GPREG_INTR0_CLR_INTR_CLR_31_BF_MSK (0x80000000)
#define PCIE_AXI_GPREG_INTR0_CLR_INTR_CLR_31_BF_DEF (0x00000000)


/** @brief PCIE_AXI_GPREG_MAP_MEM_PCIE_AXI_GPREG_MAP_PCIE_AXI_INTR0_FORCE register description at address offset 0x410
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_axi_gpreg_map_MEM/pcie_axi_gpreg_map/pcie_axi_intr0_force
  * AXI Interrupt Force 0
  */

typedef union {
  struct {
    uint32_t INTR_FORCE_0T2 : 3;
    ///< Force Interrupt for Status Bits
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t INTR_FORCE_30 : 1;
    ///< Force Interrupt for Status Bits
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t INTR_FORCE_31 : 1;
    ///< Force Interrupt for Status Bits
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_axi_gpreg_intr0_force_reg_t;

#define PCIE_AXI_GPREG_INTR0_FORCE_DEFAULT (0x00000000U)
#define PCIE_AXI_GPREG_INTR0_FORCE_RD_MASK (0xc0000007U)
#define PCIE_AXI_GPREG_INTR0_FORCE_WR_MASK (0xc0000007U)


///< Force Interrupt for Status Bits
#define PCIE_AXI_GPREG_INTR0_FORCE_INTR_FORCE_0T2_BF_OFF ( 0)
#define PCIE_AXI_GPREG_INTR0_FORCE_INTR_FORCE_0T2_BF_WID ( 3)
#define PCIE_AXI_GPREG_INTR0_FORCE_INTR_FORCE_0T2_BF_MSK (0x00000007)
#define PCIE_AXI_GPREG_INTR0_FORCE_INTR_FORCE_0T2_BF_DEF (0x00000000)

///< Force Interrupt for Status Bits
#define PCIE_AXI_GPREG_INTR0_FORCE_INTR_FORCE_30_BF_OFF (30)
#define PCIE_AXI_GPREG_INTR0_FORCE_INTR_FORCE_30_BF_WID ( 1)
#define PCIE_AXI_GPREG_INTR0_FORCE_INTR_FORCE_30_BF_MSK (0x40000000)
#define PCIE_AXI_GPREG_INTR0_FORCE_INTR_FORCE_30_BF_DEF (0x00000000)

///< Force Interrupt for Status Bits
#define PCIE_AXI_GPREG_INTR0_FORCE_INTR_FORCE_31_BF_OFF (31)
#define PCIE_AXI_GPREG_INTR0_FORCE_INTR_FORCE_31_BF_WID ( 1)
#define PCIE_AXI_GPREG_INTR0_FORCE_INTR_FORCE_31_BF_MSK (0x80000000)
#define PCIE_AXI_GPREG_INTR0_FORCE_INTR_FORCE_31_BF_DEF (0x00000000)


/** @brief PCIE_AXI_GPREG_MAP_MEM_PCIE_AXI_GPREG_MAP_PCIE_AXI_INTR1_STATUS_S register description at address offset 0x420
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_axi_gpreg_map_MEM/pcie_axi_gpreg_map/pcie_axi_intr1_status_S
  * AXI Interrupt Status 1
  */

typedef union {
  struct {
    uint32_t AXI_TC_RD_DETECT_STATUS : 8;
    ///< Associated Traffic Class (TC) READ TLP detected from wire.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t AXI_TC_WR_DETECT_STATUS : 8;
    ///< Associated Traffic Class (TC) WRITE TLP detected from wire.
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} pcie_axi_gpreg_intr1_stat_s_reg_t;

#define PCIE_AXI_GPREG_INTR1_STAT_S_DEFAULT (0x00000000U)
#define PCIE_AXI_GPREG_INTR1_STAT_S_RD_MASK (0x0000ffffU)
#define PCIE_AXI_GPREG_INTR1_STAT_S_WR_MASK (0x00000000U)


///< Associated Traffic Class (TC) READ TLP detected from wire.
#define PCIE_AXI_GPREG_INTR1_STAT_S_AXI_TC_RD_DETECT_STAT_BF_OFF ( 0)
#define PCIE_AXI_GPREG_INTR1_STAT_S_AXI_TC_RD_DETECT_STAT_BF_WID ( 8)
#define PCIE_AXI_GPREG_INTR1_STAT_S_AXI_TC_RD_DETECT_STAT_BF_MSK (0x000000FF)
#define PCIE_AXI_GPREG_INTR1_STAT_S_AXI_TC_RD_DETECT_STAT_BF_DEF (0x00000000)

///< Associated Traffic Class (TC) WRITE TLP detected from wire.
#define PCIE_AXI_GPREG_INTR1_STAT_S_AXI_TC_WR_DETECT_STAT_BF_OFF ( 8)
#define PCIE_AXI_GPREG_INTR1_STAT_S_AXI_TC_WR_DETECT_STAT_BF_WID ( 8)
#define PCIE_AXI_GPREG_INTR1_STAT_S_AXI_TC_WR_DETECT_STAT_BF_MSK (0x0000FF00)
#define PCIE_AXI_GPREG_INTR1_STAT_S_AXI_TC_WR_DETECT_STAT_BF_DEF (0x00000000)


/** @brief PCIE_AXI_GPREG_MAP_MEM_PCIE_AXI_GPREG_MAP_PCIE_AXI_INTR1_HIGH_EN_S register description at address offset 0x424
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_axi_gpreg_map_MEM/pcie_axi_gpreg_map/pcie_axi_intr1_high_en_S
  * AXI Interrupt High EN 1
  */

typedef union {
  struct {
    uint32_t AXI_TC_RD_DETECT_STATUS_HIGH_EN : 8;
    ///< High Interrupt Enable for Status Bits
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t AXI_TC_WR_DETECT_STATUS_HIGH_EN : 8;
    ///< High Interrupt Enable for Status Bits
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} pcie_axi_gpreg_intr1_high_en_s_reg_t;

#define PCIE_AXI_GPREG_INTR1_HIGH_EN_S_DEFAULT (0x00000000U)
#define PCIE_AXI_GPREG_INTR1_HIGH_EN_S_RD_MASK (0x0000ffffU)
#define PCIE_AXI_GPREG_INTR1_HIGH_EN_S_WR_MASK (0x0000ffffU)


///< High Interrupt Enable for Status Bits
#define PCIE_AXI_GPREG_INTR1_HIGH_EN_S_AXI_TC_RD_DETECT_STAT_HIGH_EN_BF_OFF ( 0)
#define PCIE_AXI_GPREG_INTR1_HIGH_EN_S_AXI_TC_RD_DETECT_STAT_HIGH_EN_BF_WID ( 8)
#define PCIE_AXI_GPREG_INTR1_HIGH_EN_S_AXI_TC_RD_DETECT_STAT_HIGH_EN_BF_MSK (0x000000FF)
#define PCIE_AXI_GPREG_INTR1_HIGH_EN_S_AXI_TC_RD_DETECT_STAT_HIGH_EN_BF_DEF (0x00000000)

///< High Interrupt Enable for Status Bits
#define PCIE_AXI_GPREG_INTR1_HIGH_EN_S_AXI_TC_WR_DETECT_STAT_HIGH_EN_BF_OFF ( 8)
#define PCIE_AXI_GPREG_INTR1_HIGH_EN_S_AXI_TC_WR_DETECT_STAT_HIGH_EN_BF_WID ( 8)
#define PCIE_AXI_GPREG_INTR1_HIGH_EN_S_AXI_TC_WR_DETECT_STAT_HIGH_EN_BF_MSK (0x0000FF00)
#define PCIE_AXI_GPREG_INTR1_HIGH_EN_S_AXI_TC_WR_DETECT_STAT_HIGH_EN_BF_DEF (0x00000000)


/** @brief PCIE_AXI_GPREG_MAP_MEM_PCIE_AXI_GPREG_MAP_PCIE_AXI_INTR1_LOW_EN_S register description at address offset 0x428
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_axi_gpreg_map_MEM/pcie_axi_gpreg_map/pcie_axi_intr1_low_en_S
  * AXI Interrupt Low EN 1
  */

typedef union {
  struct {
    uint32_t AXI_TC_RD_DETECT_STATUS_LOW_EN : 8;
    ///< Low Interrupt Enable for Status Bits
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t AXI_TC_WR_DETECT_STATUS_LOW_EN : 8;
    ///< low Interrupt Enable for Status Bits
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} pcie_axi_gpreg_intr1_low_en_s_reg_t;

#define PCIE_AXI_GPREG_INTR1_LOW_EN_S_DEFAULT (0x00000000U)
#define PCIE_AXI_GPREG_INTR1_LOW_EN_S_RD_MASK (0x0000ffffU)
#define PCIE_AXI_GPREG_INTR1_LOW_EN_S_WR_MASK (0x0000ffffU)


///< Low Interrupt Enable for Status Bits
#define PCIE_AXI_GPREG_INTR1_LOW_EN_S_AXI_TC_RD_DETECT_STAT_LOW_EN_BF_OFF ( 0)
#define PCIE_AXI_GPREG_INTR1_LOW_EN_S_AXI_TC_RD_DETECT_STAT_LOW_EN_BF_WID ( 8)
#define PCIE_AXI_GPREG_INTR1_LOW_EN_S_AXI_TC_RD_DETECT_STAT_LOW_EN_BF_MSK (0x000000FF)
#define PCIE_AXI_GPREG_INTR1_LOW_EN_S_AXI_TC_RD_DETECT_STAT_LOW_EN_BF_DEF (0x00000000)

///< low Interrupt Enable for Status Bits
#define PCIE_AXI_GPREG_INTR1_LOW_EN_S_AXI_TC_WR_DETECT_STAT_LOW_EN_BF_OFF ( 8)
#define PCIE_AXI_GPREG_INTR1_LOW_EN_S_AXI_TC_WR_DETECT_STAT_LOW_EN_BF_WID ( 8)
#define PCIE_AXI_GPREG_INTR1_LOW_EN_S_AXI_TC_WR_DETECT_STAT_LOW_EN_BF_MSK (0x0000FF00)
#define PCIE_AXI_GPREG_INTR1_LOW_EN_S_AXI_TC_WR_DETECT_STAT_LOW_EN_BF_DEF (0x00000000)


/** @brief PCIE_AXI_GPREG_MAP_MEM_PCIE_AXI_GPREG_MAP_PCIE_AXI_INTR1_CLEAR_S register description at address offset 0x42c
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_axi_gpreg_map_MEM/pcie_axi_gpreg_map/pcie_axi_intr1_clear_S
  * AXI Interrupt Clear 1
  */

typedef union {
  struct {
    uint32_t AXI_TC_RD_DETECT_STATUS_CLR : 8;
    ///< Clear Interrupt Enable for Status Bits
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t AXI_TC_WR_DETECT_STATUS_CLR : 8;
    ///< Clear Interrupt Enable for Status Bits
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} pcie_axi_gpreg_intr1_clr_s_reg_t;

#define PCIE_AXI_GPREG_INTR1_CLR_S_DEFAULT (0x00000000U)
#define PCIE_AXI_GPREG_INTR1_CLR_S_RD_MASK (0x0000ffffU)
#define PCIE_AXI_GPREG_INTR1_CLR_S_WR_MASK (0x0000ffffU)


///< Clear Interrupt Enable for Status Bits
#define PCIE_AXI_GPREG_INTR1_CLR_S_AXI_TC_RD_DETECT_STAT_CLR_BF_OFF ( 0)
#define PCIE_AXI_GPREG_INTR1_CLR_S_AXI_TC_RD_DETECT_STAT_CLR_BF_WID ( 8)
#define PCIE_AXI_GPREG_INTR1_CLR_S_AXI_TC_RD_DETECT_STAT_CLR_BF_MSK (0x000000FF)
#define PCIE_AXI_GPREG_INTR1_CLR_S_AXI_TC_RD_DETECT_STAT_CLR_BF_DEF (0x00000000)

///< Clear Interrupt Enable for Status Bits
#define PCIE_AXI_GPREG_INTR1_CLR_S_AXI_TC_WR_DETECT_STAT_CLR_BF_OFF ( 8)
#define PCIE_AXI_GPREG_INTR1_CLR_S_AXI_TC_WR_DETECT_STAT_CLR_BF_WID ( 8)
#define PCIE_AXI_GPREG_INTR1_CLR_S_AXI_TC_WR_DETECT_STAT_CLR_BF_MSK (0x0000FF00)
#define PCIE_AXI_GPREG_INTR1_CLR_S_AXI_TC_WR_DETECT_STAT_CLR_BF_DEF (0x00000000)


/** @brief PCIE_AXI_GPREG_MAP_MEM_PCIE_AXI_GPREG_MAP_PCIE_AXI_INTR1_FORCE_S register description at address offset 0x430
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_axi_gpreg_map_MEM/pcie_axi_gpreg_map/pcie_axi_intr1_force_S
  * AXI Interrupt Force 1
  */

typedef union {
  struct {
    uint32_t AXI_TC_RD_DETECT_STATUS_FRC : 8;
    ///< Force Interrupt Enable for Status Bits
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t AXI_TC_WR_DETECT_STATUS_FRC : 8;
    ///< Force Interrupt Enable for Status Bits
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} pcie_axi_gpreg_intr1_force_s_reg_t;

#define PCIE_AXI_GPREG_INTR1_FORCE_S_DEFAULT (0x00000000U)
#define PCIE_AXI_GPREG_INTR1_FORCE_S_RD_MASK (0x0000ffffU)
#define PCIE_AXI_GPREG_INTR1_FORCE_S_WR_MASK (0x0000ffffU)


///< Force Interrupt Enable for Status Bits
#define PCIE_AXI_GPREG_INTR1_FORCE_S_AXI_TC_RD_DETECT_STAT_FRC_BF_OFF ( 0)
#define PCIE_AXI_GPREG_INTR1_FORCE_S_AXI_TC_RD_DETECT_STAT_FRC_BF_WID ( 8)
#define PCIE_AXI_GPREG_INTR1_FORCE_S_AXI_TC_RD_DETECT_STAT_FRC_BF_MSK (0x000000FF)
#define PCIE_AXI_GPREG_INTR1_FORCE_S_AXI_TC_RD_DETECT_STAT_FRC_BF_DEF (0x00000000)

///< Force Interrupt Enable for Status Bits
#define PCIE_AXI_GPREG_INTR1_FORCE_S_AXI_TC_WR_DETECT_STAT_FRC_BF_OFF ( 8)
#define PCIE_AXI_GPREG_INTR1_FORCE_S_AXI_TC_WR_DETECT_STAT_FRC_BF_WID ( 8)
#define PCIE_AXI_GPREG_INTR1_FORCE_S_AXI_TC_WR_DETECT_STAT_FRC_BF_MSK (0x0000FF00)
#define PCIE_AXI_GPREG_INTR1_FORCE_S_AXI_TC_WR_DETECT_STAT_FRC_BF_DEF (0x00000000)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define PCIE_AXI_GPREG_SCRATCH0_REG ((pcie_axi_gpreg_scratch0_reg_t*) PCIE_AXI_GPREG_SCRATCH0_ADR)
#define PCIE_AXI_GPREG_SCRATCH1_REG ((pcie_axi_gpreg_scratch1_reg_t*) PCIE_AXI_GPREG_SCRATCH1_ADR)
#define PCIE_AXI_GPREG_BRDG_REG ((pcie_axi_gpreg_brdg_reg_t*) PCIE_AXI_GPREG_BRDG_ADR)
#define PCIE_AXI_GPREG_ECC_FORCE_TYPE_S_REG ((pcie_axi_gpreg_ecc_force_type_s_reg_t*) PCIE_AXI_GPREG_ECC_FORCE_TYPE_S_ADR)
#define PCIE_AXI_GPREG_ECC_FORCE_ERR_S_REG ((pcie_axi_gpreg_ecc_force_err_s_reg_t*) PCIE_AXI_GPREG_ECC_FORCE_ERR_S_ADR)
#define PCIE_AXI_GPREG_ECC_CLR_S_REG ((pcie_axi_gpreg_ecc_clr_s_reg_t*) PCIE_AXI_GPREG_ECC_CLR_S_ADR)
#define PCIE_AXI_GPREG_ECC_CNT_CLR_S_REG ((pcie_axi_gpreg_ecc_cnt_clr_s_reg_t*) PCIE_AXI_GPREG_ECC_CNT_CLR_S_ADR)
#define PCIE_AXI_GPREG_ECC_CHK_DIS_S_REG ((pcie_axi_gpreg_ecc_chk_dis_s_reg_t*) PCIE_AXI_GPREG_ECC_CHK_DIS_S_ADR)
#define PCIE_AXI_GPREG_ECC_GEN_DIS_S_REG ((pcie_axi_gpreg_ecc_gen_dis_s_reg_t*) PCIE_AXI_GPREG_ECC_GEN_DIS_S_ADR)
#define PCIE_AXI_GPREG_MEM_INIT_CTRL_S_REG ((pcie_axi_gpreg_mem_init_ctrl_s_reg_t*) PCIE_AXI_GPREG_MEM_INIT_CTRL_S_ADR)
#define PCIE_AXI_GPREG_SMON_CLT_0_REG ((pcie_axi_gpreg_smon_clt_0_reg_t*) PCIE_AXI_GPREG_SMON_CLT_0_ADR)
#define PCIE_AXI_GPREG_SMON_CLT_1_REG ((pcie_axi_gpreg_smon_clt_1_reg_t*) PCIE_AXI_GPREG_SMON_CLT_1_ADR)
#define PCIE_AXI_GPREG_RO_0_REG ((pcie_axi_gpreg_ro_0_reg_t*) PCIE_AXI_GPREG_RO_0_ADR)
#define PCIE_AXI_GPREG_SMON_0_REG ((pcie_axi_gpreg_smon_0_reg_t*) PCIE_AXI_GPREG_SMON_0_ADR)
#define PCIE_AXI_GPREG_SMON_1_REG ((pcie_axi_gpreg_smon_1_reg_t*) PCIE_AXI_GPREG_SMON_1_ADR)
#define PCIE_AXI_GPREG_SMON_2_REG ((pcie_axi_gpreg_smon_2_reg_t*) PCIE_AXI_GPREG_SMON_2_ADR)
#define PCIE_AXI_GPREG_SMON_3_REG ((pcie_axi_gpreg_smon_3_reg_t*) PCIE_AXI_GPREG_SMON_3_ADR)
#define PCIE_AXI_GPREG_SMON_4_REG ((pcie_axi_gpreg_smon_4_reg_t*) PCIE_AXI_GPREG_SMON_4_ADR)
#define PCIE_AXI_GPREG_SMON_5_REG ((pcie_axi_gpreg_smon_5_reg_t*) PCIE_AXI_GPREG_SMON_5_ADR)
#define PCIE_AXI_GPREG_SMON_6_REG ((pcie_axi_gpreg_smon_6_reg_t*) PCIE_AXI_GPREG_SMON_6_ADR)
#define PCIE_AXI_GPREG_SMON_7_REG ((pcie_axi_gpreg_smon_7_reg_t*) PCIE_AXI_GPREG_SMON_7_ADR)
#define PCIE_AXI_GPREG_ECC_SBE_REG ((pcie_axi_gpreg_ecc_sbe_reg_t*) PCIE_AXI_GPREG_ECC_SBE_ADR)
#define PCIE_AXI_GPREG_ECC_DBE_REG ((pcie_axi_gpreg_ecc_dbe_reg_t*) PCIE_AXI_GPREG_ECC_DBE_ADR)
#define PCIE_AXI_GPREG_ECC_SBE_CNT_OVFL_REG ((pcie_axi_gpreg_ecc_sbe_cnt_ovfl_reg_t*) PCIE_AXI_GPREG_ECC_SBE_CNT_OVFL_ADR)
#define PCIE_AXI_GPREG_ECC_ERR_ADDR_0_REG ((pcie_axi_gpreg_ecc_err_addr_0_reg_t*) PCIE_AXI_GPREG_ECC_ERR_ADDR_0_ADR)
#define PCIE_AXI_GPREG_ECC_ERR_ADDR_1_REG ((pcie_axi_gpreg_ecc_err_addr_1_reg_t*) PCIE_AXI_GPREG_ECC_ERR_ADDR_1_ADR)
#define PCIE_AXI_GPREG_ECC_ERR_SYNDROME_0_REG ((pcie_axi_gpreg_ecc_err_syndrome_0_reg_t*) PCIE_AXI_GPREG_ECC_ERR_SYNDROME_0_ADR)
#define PCIE_AXI_GPREG_ECC_ERR_SYNDROME_1_REG ((pcie_axi_gpreg_ecc_err_syndrome_1_reg_t*) PCIE_AXI_GPREG_ECC_ERR_SYNDROME_1_ADR)
#define PCIE_AXI_GPREG_INTR0_STAT_REG ((pcie_axi_gpreg_intr0_stat_reg_t*) PCIE_AXI_GPREG_INTR0_STAT_ADR)
#define PCIE_AXI_GPREG_INTR0_HIGH_EN_REG ((pcie_axi_gpreg_intr0_high_en_reg_t*) PCIE_AXI_GPREG_INTR0_HIGH_EN_ADR)
#define PCIE_AXI_GPREG_INTR0_LOW_EN_REG ((pcie_axi_gpreg_intr0_low_en_reg_t*) PCIE_AXI_GPREG_INTR0_LOW_EN_ADR)
#define PCIE_AXI_GPREG_INTR0_CLR_REG ((pcie_axi_gpreg_intr0_clr_reg_t*) PCIE_AXI_GPREG_INTR0_CLR_ADR)
#define PCIE_AXI_GPREG_INTR0_FORCE_REG ((pcie_axi_gpreg_intr0_force_reg_t*) PCIE_AXI_GPREG_INTR0_FORCE_ADR)
#define PCIE_AXI_GPREG_INTR1_STAT_S_REG ((pcie_axi_gpreg_intr1_stat_s_reg_t*) PCIE_AXI_GPREG_INTR1_STAT_S_ADR)
#define PCIE_AXI_GPREG_INTR1_HIGH_EN_S_REG ((pcie_axi_gpreg_intr1_high_en_s_reg_t*) PCIE_AXI_GPREG_INTR1_HIGH_EN_S_ADR)
#define PCIE_AXI_GPREG_INTR1_LOW_EN_S_REG ((pcie_axi_gpreg_intr1_low_en_s_reg_t*) PCIE_AXI_GPREG_INTR1_LOW_EN_S_ADR)
#define PCIE_AXI_GPREG_INTR1_CLR_S_REG ((pcie_axi_gpreg_intr1_clr_s_reg_t*) PCIE_AXI_GPREG_INTR1_CLR_S_ADR)
#define PCIE_AXI_GPREG_INTR1_FORCE_S_REG ((pcie_axi_gpreg_intr1_force_s_reg_t*) PCIE_AXI_GPREG_INTR1_FORCE_S_ADR)

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    pcie_axi_gpreg_scratch0_reg_t PCIE_AXI_SCRATCH0; /*< Address offset = 0x0 */
    pcie_axi_gpreg_scratch1_reg_t PCIE_AXI_SCRATCH1; /*< Address offset = 0x4 */
    pcie_axi_gpreg_brdg_reg_t PCIE_AXI_BRDG; /*< Address offset = 0x8 */
    const uint8_t        reservedArea0 [244]; /*< Address offset = 0xc */
    pcie_axi_gpreg_ecc_force_type_s_reg_t PCIE_AXI_ECC_FORCE_TYPE_S; /*< Address offset = 0x100 */
    pcie_axi_gpreg_ecc_force_err_s_reg_t PCIE_AXI_ECC_FORCE_ERR_S; /*< Address offset = 0x104 */
    pcie_axi_gpreg_ecc_clr_s_reg_t PCIE_AXI_ECC_CLR_S; /*< Address offset = 0x108 */
    pcie_axi_gpreg_ecc_cnt_clr_s_reg_t PCIE_AXI_ECC_CNT_CLR_S; /*< Address offset = 0x10c */
    pcie_axi_gpreg_ecc_chk_dis_s_reg_t PCIE_AXI_ECC_CHK_DIS_S; /*< Address offset = 0x110 */
    pcie_axi_gpreg_ecc_gen_dis_s_reg_t PCIE_AXI_ECC_GEN_DIS_S; /*< Address offset = 0x114 */
    pcie_axi_gpreg_mem_init_ctrl_s_reg_t PCIE_AXI_MEM_INIT_CTRL_S; /*< Address offset = 0x118 */
    pcie_axi_gpreg_smon_clt_0_reg_t PCIE_AXI_SMON_CLT_0; /*< Address offset = 0x11c */
    pcie_axi_gpreg_smon_clt_1_reg_t PCIE_AXI_SMON_CLT_1; /*< Address offset = 0x120 */
    const uint8_t        reservedArea1 [220]; /*< Address offset = 0x124 */
    pcie_axi_gpreg_ro_0_reg_t PCIE_AXI_RO_0; /*< Address offset = 0x200 */
    pcie_axi_gpreg_smon_0_reg_t PCIE_AXI_SMON_0; /*< Address offset = 0x204 */
    pcie_axi_gpreg_smon_1_reg_t PCIE_AXI_SMON_1; /*< Address offset = 0x208 */
    pcie_axi_gpreg_smon_2_reg_t PCIE_AXI_SMON_2; /*< Address offset = 0x20c */
    pcie_axi_gpreg_smon_3_reg_t PCIE_AXI_SMON_3; /*< Address offset = 0x210 */
    pcie_axi_gpreg_smon_4_reg_t PCIE_AXI_SMON_4; /*< Address offset = 0x214 */
    pcie_axi_gpreg_smon_5_reg_t PCIE_AXI_SMON_5; /*< Address offset = 0x218 */
    pcie_axi_gpreg_smon_6_reg_t PCIE_AXI_SMON_6; /*< Address offset = 0x21c */
    pcie_axi_gpreg_smon_7_reg_t PCIE_AXI_SMON_7; /*< Address offset = 0x220 */
    pcie_axi_gpreg_ecc_sbe_reg_t PCIE_AXI_ECC_SBE; /*< Address offset = 0x224 */
    pcie_axi_gpreg_ecc_dbe_reg_t PCIE_AXI_ECC_DBE; /*< Address offset = 0x228 */
    pcie_axi_gpreg_ecc_sbe_cnt_ovfl_reg_t PCIE_AXI_ECC_SBE_CNT_OVFL; /*< Address offset = 0x22c */
    pcie_axi_gpreg_ecc_err_addr_0_reg_t PCIE_AXI_ECC_ERR_ADDR_0; /*< Address offset = 0x230 */
    pcie_axi_gpreg_ecc_err_addr_1_reg_t PCIE_AXI_ECC_ERR_ADDR_1; /*< Address offset = 0x234 */
    pcie_axi_gpreg_ecc_err_syndrome_0_reg_t PCIE_AXI_ECC_ERR_SYNDROME_0; /*< Address offset = 0x238 */
    pcie_axi_gpreg_ecc_err_syndrome_1_reg_t PCIE_AXI_ECC_ERR_SYNDROME_1; /*< Address offset = 0x23c */
    const uint8_t        reservedArea2 [448]; /*< Address offset = 0x240 */
    pcie_axi_gpreg_intr0_stat_reg_t PCIE_AXI_INTR0_STAT; /*< Address offset = 0x400 */
    pcie_axi_gpreg_intr0_high_en_reg_t PCIE_AXI_INTR0_HIGH_EN; /*< Address offset = 0x404 */
    pcie_axi_gpreg_intr0_low_en_reg_t PCIE_AXI_INTR0_LOW_EN; /*< Address offset = 0x408 */
    pcie_axi_gpreg_intr0_clr_reg_t PCIE_AXI_INTR0_CLR; /*< Address offset = 0x40c */
    pcie_axi_gpreg_intr0_force_reg_t PCIE_AXI_INTR0_FORCE; /*< Address offset = 0x410 */
    const uint8_t        reservedArea3 [12];  /*< Address offset = 0x414 */
    pcie_axi_gpreg_intr1_stat_s_reg_t PCIE_AXI_INTR1_STAT_S; /*< Address offset = 0x420 */
    pcie_axi_gpreg_intr1_high_en_s_reg_t PCIE_AXI_INTR1_HIGH_EN_S; /*< Address offset = 0x424 */
    pcie_axi_gpreg_intr1_low_en_s_reg_t PCIE_AXI_INTR1_LOW_EN_S; /*< Address offset = 0x428 */
    pcie_axi_gpreg_intr1_clr_s_reg_t PCIE_AXI_INTR1_CLR_S; /*< Address offset = 0x42c */
    pcie_axi_gpreg_intr1_force_s_reg_t PCIE_AXI_INTR1_FORCE_S; /*< Address offset = 0x430 */
} pcie_gpreg_t;     // size: 0x0098

// AddressSpace struct pointer
//
#define DLNK_PCIE_GPREG  ((pcie_gpreg_t*) DLNK_PCIE_GPREG_BASE)

// ******************************************* /Address Space

#endif      // _PCIE_GPREG_H_

