#ifndef _RCS_TIMESTAMP_H_
#define _RCS_TIMESTAMP_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define RCS_TIMER_TIMESTAMP_BASE  ( 0x00269000 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define RCS_TIMESTAMP_EC_GPIO_SEL0_OFFSET ( 0x00000000U )
#define RCS_TIMESTAMP_EC_GPIO_SEL1_OFFSET ( 0x00000004U )
#define RCS_TIMESTAMP_EC_GPIO_SEL2_OFFSET ( 0x00000008U )
#define RCS_TIMESTAMP_EC_GPIO_SEL3_OFFSET ( 0x0000000cU )
#define RCS_TIMESTAMP_EC_GPIO_SEL4_OFFSET ( 0x00000010U )
#define RCS_TIMESTAMP_EC_GPIO_SEL5_OFFSET ( 0x00000014U )
#define RCS_TIMESTAMP_EC_GPIO_SEL6_OFFSET ( 0x00000018U )
#define RCS_TIMESTAMP_EC_GPIO_SEL7_OFFSET ( 0x0000001cU )
#define RCS_TIMESTAMP_EC_GPIO_SEL8_OFFSET ( 0x00000020U )
#define RCS_TIMESTAMP_EC_GPIO_SEL9_OFFSET ( 0x00000024U )
#define RCS_TIMESTAMP_EC_GPIO_SEL10_OFFSET ( 0x00000028U )
#define RCS_TIMESTAMP_EC_GPIO_SEL11_OFFSET ( 0x0000002cU )
#define RCS_TIMESTAMP_EC_GPIO_SEL12_OFFSET ( 0x00000030U )
#define RCS_TIMESTAMP_EC_GPIO_SEL13_OFFSET ( 0x00000034U )
#define RCS_TIMESTAMP_EC_GPIO_SEL14_OFFSET ( 0x00000038U )
#define RCS_TIMESTAMP_EC_GPIO_SEL15_OFFSET ( 0x0000003cU )
#define RCS_TIMESTAMP_EC_GRP_SEL_OFFSET ( 0x00000040U )
#define RCS_TIMESTAMP_EC_EN_OFFSET ( 0x00000044U )
#define RCS_TIMESTAMP_WND_START_OFFSET ( 0x00000048U )
#define RCS_TIMESTAMP_SETUP_OFFSET ( 0x0000004cU )
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_7_0_OFFSET ( 0x00000050U )
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_15_8_OFFSET ( 0x00000054U )
#define RCS_TIMESTAMP_EC_OV_ERR_MASK_R_OFFSET ( 0x00000058U )
#define RCS_TIMESTAMP_EC_OV_ERR_STAT_R_OFFSET ( 0x0000005cU )
#define RCS_TIMESTAMP_STAT_R_OFFSET ( 0x00000060U )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define RCS_TIMESTAMP_EC_GPIO_SEL0_ADR (( ( RCS_TIMER_TIMESTAMP_BASE ) + ( RCS_TIMESTAMP_EC_GPIO_SEL0_OFFSET ) ))
#define RCS_TIMESTAMP_EC_GPIO_SEL1_ADR (( ( RCS_TIMER_TIMESTAMP_BASE ) + ( RCS_TIMESTAMP_EC_GPIO_SEL1_OFFSET ) ))
#define RCS_TIMESTAMP_EC_GPIO_SEL2_ADR (( ( RCS_TIMER_TIMESTAMP_BASE ) + ( RCS_TIMESTAMP_EC_GPIO_SEL2_OFFSET ) ))
#define RCS_TIMESTAMP_EC_GPIO_SEL3_ADR (( ( RCS_TIMER_TIMESTAMP_BASE ) + ( RCS_TIMESTAMP_EC_GPIO_SEL3_OFFSET ) ))
#define RCS_TIMESTAMP_EC_GPIO_SEL4_ADR (( ( RCS_TIMER_TIMESTAMP_BASE ) + ( RCS_TIMESTAMP_EC_GPIO_SEL4_OFFSET ) ))
#define RCS_TIMESTAMP_EC_GPIO_SEL5_ADR (( ( RCS_TIMER_TIMESTAMP_BASE ) + ( RCS_TIMESTAMP_EC_GPIO_SEL5_OFFSET ) ))
#define RCS_TIMESTAMP_EC_GPIO_SEL6_ADR (( ( RCS_TIMER_TIMESTAMP_BASE ) + ( RCS_TIMESTAMP_EC_GPIO_SEL6_OFFSET ) ))
#define RCS_TIMESTAMP_EC_GPIO_SEL7_ADR (( ( RCS_TIMER_TIMESTAMP_BASE ) + ( RCS_TIMESTAMP_EC_GPIO_SEL7_OFFSET ) ))
#define RCS_TIMESTAMP_EC_GPIO_SEL8_ADR (( ( RCS_TIMER_TIMESTAMP_BASE ) + ( RCS_TIMESTAMP_EC_GPIO_SEL8_OFFSET ) ))
#define RCS_TIMESTAMP_EC_GPIO_SEL9_ADR (( ( RCS_TIMER_TIMESTAMP_BASE ) + ( RCS_TIMESTAMP_EC_GPIO_SEL9_OFFSET ) ))
#define RCS_TIMESTAMP_EC_GPIO_SEL10_ADR (( ( RCS_TIMER_TIMESTAMP_BASE ) + ( RCS_TIMESTAMP_EC_GPIO_SEL10_OFFSET ) ))
#define RCS_TIMESTAMP_EC_GPIO_SEL11_ADR (( ( RCS_TIMER_TIMESTAMP_BASE ) + ( RCS_TIMESTAMP_EC_GPIO_SEL11_OFFSET ) ))
#define RCS_TIMESTAMP_EC_GPIO_SEL12_ADR (( ( RCS_TIMER_TIMESTAMP_BASE ) + ( RCS_TIMESTAMP_EC_GPIO_SEL12_OFFSET ) ))
#define RCS_TIMESTAMP_EC_GPIO_SEL13_ADR (( ( RCS_TIMER_TIMESTAMP_BASE ) + ( RCS_TIMESTAMP_EC_GPIO_SEL13_OFFSET ) ))
#define RCS_TIMESTAMP_EC_GPIO_SEL14_ADR (( ( RCS_TIMER_TIMESTAMP_BASE ) + ( RCS_TIMESTAMP_EC_GPIO_SEL14_OFFSET ) ))
#define RCS_TIMESTAMP_EC_GPIO_SEL15_ADR (( ( RCS_TIMER_TIMESTAMP_BASE ) + ( RCS_TIMESTAMP_EC_GPIO_SEL15_OFFSET ) ))
#define RCS_TIMESTAMP_EC_GRP_SEL_ADR (( ( RCS_TIMER_TIMESTAMP_BASE ) + ( RCS_TIMESTAMP_EC_GRP_SEL_OFFSET ) ))
#define RCS_TIMESTAMP_EC_EN_ADR (( ( RCS_TIMER_TIMESTAMP_BASE ) + ( RCS_TIMESTAMP_EC_EN_OFFSET ) ))
#define RCS_TIMESTAMP_WND_START_ADR (( ( RCS_TIMER_TIMESTAMP_BASE ) + ( RCS_TIMESTAMP_WND_START_OFFSET ) ))
#define RCS_TIMESTAMP_SETUP_ADR (( ( RCS_TIMER_TIMESTAMP_BASE ) + ( RCS_TIMESTAMP_SETUP_OFFSET ) ))
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_7_0_ADR (( ( RCS_TIMER_TIMESTAMP_BASE ) + ( RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_7_0_OFFSET ) ))
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_15_8_ADR (( ( RCS_TIMER_TIMESTAMP_BASE ) + ( RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_15_8_OFFSET ) ))
#define RCS_TIMESTAMP_EC_OV_ERR_MASK_R_ADR (( ( RCS_TIMER_TIMESTAMP_BASE ) + ( RCS_TIMESTAMP_EC_OV_ERR_MASK_R_OFFSET ) ))
#define RCS_TIMESTAMP_EC_OV_ERR_STAT_R_ADR (( ( RCS_TIMER_TIMESTAMP_BASE ) + ( RCS_TIMESTAMP_EC_OV_ERR_STAT_R_OFFSET ) ))
#define RCS_TIMESTAMP_STAT_R_ADR (( ( RCS_TIMER_TIMESTAMP_BASE ) + ( RCS_TIMESTAMP_STAT_R_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief RCS_TIMESTAMP_COM_REG_EC_GPIO_SELECT[16] register description at address offset 0x0
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_timestamp_com/reg/ec_gpio_select
  * Event Channel Select
  */

typedef union {
  struct {
    uint32_t EC_GPIO_SELECT : 32;
    ///< Configures which of the 32 GPIO selected by EC_GROUP_SELECT contributes
    ///< to the Event Channel. A maximum of 8 bits in this register can be
    ///< configured, and thus a maximum of 8 GPIO can be assigned to an Event
    ///< Channel. Set to 1 to enable the specified GPIO bit to contribute to
    ///< the Event Channel.  Internally the value will only be updated either
    ///< before the first window starts or at the start of a new window.  Thus,
    ///< this value is constant across a timestamp window.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_timestamp_ec_gpio_sel_reg_t;

#define RCS_TIMESTAMP_EC_GPIO_SEL_DEFAULT (0x00000000U)
#define RCS_TIMESTAMP_EC_GPIO_SEL_RD_MASK (0xffffffffU)
#define RCS_TIMESTAMP_EC_GPIO_SEL_WR_MASK (0xffffffffU)


///< Configures which of the 32 GPIO selected by EC_GROUP_SELECT contributes
///< to the Event Channel. A maximum of 8 bits in this register can be
///< configured, and thus a maximum of 8 GPIO can be assigned to an Event
///< Channel. Set to 1 to enable the specified GPIO bit to contribute to
///< the Event Channel.  Internally the value will only be updated either
///< before the first window starts or at the start of a new window.  Thus,
///< this value is constant across a timestamp window.
#define RCS_TIMESTAMP_EC_GPIO_SEL_EC_GPIO_SEL_BF_OFF ( 0)
#define RCS_TIMESTAMP_EC_GPIO_SEL_EC_GPIO_SEL_BF_WID (32)
#define RCS_TIMESTAMP_EC_GPIO_SEL_EC_GPIO_SEL_BF_MSK (0xFFFFFFFF)
#define RCS_TIMESTAMP_EC_GPIO_SEL_EC_GPIO_SEL_BF_DEF (0x00000000)
#define RCS_TIMESTAMP_EC_GPIO_SEL_ARR_SZ0 (16)
#define RCS_TIMESTAMP_EC_GPIO_SEL_ARRAY_STRIDE0 (0x0004)


/** @brief RCS_TIMESTAMP_COM_REG_EC_GROUP_SELECT register description at address offset 0x40
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_timestamp_com/reg/ec_group_select
  * Event Channel Group Select
  */

typedef union {
  struct {
    uint32_t EC_GROUP_SELECT : 16;
    ///< Configures which group of GPIO an Event Channel can use to select
    ///< its contributors. Each bit corresponds to an Event Channel. Set to
    ///< 0 to allow the Event Channel to select from GPIO group#0. Set to 1
    ///< to allow the Event Channel to select from GPIO group#1.  Internally
    ///< the value will only be updated either before the first window starts
    ///< or at the start of a new window.  Thus, this value is constant across
    ///< a timestamp window.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} rcs_timestamp_ec_grp_sel_reg_t;

#define RCS_TIMESTAMP_EC_GRP_SEL_DEFAULT (0x00000000U)
#define RCS_TIMESTAMP_EC_GRP_SEL_RD_MASK (0x0000ffffU)
#define RCS_TIMESTAMP_EC_GRP_SEL_WR_MASK (0x0000ffffU)


///< Configures which group of GPIO an Event Channel can use to select
///< its contributors. Each bit corresponds to an Event Channel. Set to
///< 0 to allow the Event Channel to select from GPIO group#0. Set to 1
///< to allow the Event Channel to select from GPIO group#1.  Internally
///< the value will only be updated either before the first window starts
///< or at the start of a new window.  Thus, this value is constant across
///< a timestamp window.
#define RCS_TIMESTAMP_EC_GRP_SEL_EC_GRP_SEL_BF_OFF ( 0)
#define RCS_TIMESTAMP_EC_GRP_SEL_EC_GRP_SEL_BF_WID (16)
#define RCS_TIMESTAMP_EC_GRP_SEL_EC_GRP_SEL_BF_MSK (0x0000FFFF)
#define RCS_TIMESTAMP_EC_GRP_SEL_EC_GRP_SEL_BF_DEF (0x00000000)


/** @brief RCS_TIMESTAMP_COM_REG_EC_ENABLE register description at address offset 0x44
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_timestamp_com/reg/ec_enable
  * Event Channel Enable
  */

typedef union {
  struct {
    uint32_t EC_ENABLE : 16;
    ///< Enable an Event Channel. After configuration of the EC_GPIO_SELECT
    ///< and EC_GROUP_SELECT registers, the Event Channel needs to be enabled.
    ///< Each bit in this register corresponds to an Event Channel, with a
    ///< value of 1 enabling the specific Channel.  Internally the value will
    ///< only be updated either before the first window starts or at the start
    ///< of a new window.  Thus, this value is constant across a timestamp
    ///< window.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} rcs_timestamp_ec_en_reg_t;

#define RCS_TIMESTAMP_EC_EN_DEFAULT (0x00000000U)
#define RCS_TIMESTAMP_EC_EN_RD_MASK (0x0000ffffU)
#define RCS_TIMESTAMP_EC_EN_WR_MASK (0x0000ffffU)


///< Enable an Event Channel. After configuration of the EC_GPIO_SELECT
///< and EC_GROUP_SELECT registers, the Event Channel needs to be enabled.
///< Each bit in this register corresponds to an Event Channel, with a
///< value of 1 enabling the specific Channel.  Internally the value will
///< only be updated either before the first window starts or at the start
///< of a new window.  Thus, this value is constant across a timestamp
///< window.
#define RCS_TIMESTAMP_EC_EN_EC_EN_BF_OFF ( 0)
#define RCS_TIMESTAMP_EC_EN_EC_EN_BF_WID (16)
#define RCS_TIMESTAMP_EC_EN_EC_EN_BF_MSK (0x0000FFFF)
#define RCS_TIMESTAMP_EC_EN_EC_EN_BF_DEF (0x00000000)


/** @brief RCS_TIMESTAMP_COM_REG_WINDOW_START register description at address offset 0x48
  *
  * Register default value:        0xFFFFFFFF
  * Register full path in IP: rcs_timestamp_com/reg/window_start
  * Capture Window Start Time
  */

typedef union {
  struct {
    uint32_t TS_WINDOW : 32;
    ///< Time of the first processing window specified in BFN time units.
    ///< AccessType="RW" BitOffset="0" ResetValue="0xFFFFFFFF"
  } ;
  uint32_t value;
} rcs_timestamp_wnd_start_reg_t;

#define RCS_TIMESTAMP_WND_START_DEFAULT (0xffffffffU)
#define RCS_TIMESTAMP_WND_START_RD_MASK (0xffffffffU)
#define RCS_TIMESTAMP_WND_START_WR_MASK (0xffffffffU)


///< Time of the first processing window specified in BFN time units.
#define RCS_TIMESTAMP_WND_START_TS_WND_BF_OFF ( 0)
#define RCS_TIMESTAMP_WND_START_TS_WND_BF_WID (32)
#define RCS_TIMESTAMP_WND_START_TS_WND_BF_MSK (0xFFFFFFFF)
#define RCS_TIMESTAMP_WND_START_TS_WND_BF_DEF (0xFFFFFFFF)


/** @brief RCS_TIMESTAMP_COM_REG_TIMESTAMP_SETUP register description at address offset 0x4c
  *
  * Register default value:        0x000001EC
  * Register full path in IP: rcs_timestamp_com/reg/timestamp_setup
  * Timestamp Seutp
  */

typedef union {
  struct {
    uint32_t DURATION : 12;
    ///< Duration of the processing window.  The value should be set to the
    ///< number of BFN clocks (983Mhz) for the window to last.  Ideally this
    ///< should be set to be either 0.25us, 0.5us or 1us in duration.  Internally
    ///< the value will only be updated either before the first window starts
    ///< or at the start of a new window.  Thus, this value is constant across
    ///< a timestamp window.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1EC"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
    uint32_t RESTART : 1;
    ///< If this bit is set, then the timestamp will finish with the current
    ///< window, and send out its results.  It will then stop capturing event
    ///< channel events.  It will wait until the next time the 32 LSB of the
    ///< BFN counter match the value stored in WINDOW_START register.  This
    ///< bit only takes effect if the GLOBAL_DISABLE bit is set.  When the
    ///< timestamp restarts, the SEQ_NUM counter will reset to 0.
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t GLOBAL_DISABLE : 1;
    ///< This bit will globally disable the entire timestamp opperation and
    ///< overrides the individual EC_ENABLE bits.  It will only take effect
    ///< at the end of the current window (if active).  While globally disabled
    ///< if the RESTART bit is set when it finishes the current window then
    ///< the event channel operation will not restart until both the GLOBAL_DISABLE
    ///< is 0 and the BFN counter matches the value in WINDOW_START.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} rcs_timestamp_setup_reg_t;

#define RCS_TIMESTAMP_SETUP_DEFAULT (0x000001ecU)
#define RCS_TIMESTAMP_SETUP_RD_MASK (0x0000cfffU)
#define RCS_TIMESTAMP_SETUP_WR_MASK (0x0000cfffU)


///< Duration of the processing window.  The value should be set to the
///< number of BFN clocks (983Mhz) for the window to last.  Ideally this
///< should be set to be either 0.25us, 0.5us or 1us in duration.  Internally
///< the value will only be updated either before the first window starts
///< or at the start of a new window.  Thus, this value is constant across
///< a timestamp window.
#define RCS_TIMESTAMP_SETUP_DURATION_BF_OFF ( 0)
#define RCS_TIMESTAMP_SETUP_DURATION_BF_WID (12)
#define RCS_TIMESTAMP_SETUP_DURATION_BF_MSK (0x00000FFF)
#define RCS_TIMESTAMP_SETUP_DURATION_BF_DEF (0x000001EC)

///< If this bit is set, then the timestamp will finish with the current
///< window, and send out its results.  It will then stop capturing event
///< channel events.  It will wait until the next time the 32 LSB of the
///< BFN counter match the value stored in WINDOW_START register.  This
///< bit only takes effect if the GLOBAL_DISABLE bit is set.  When the
///< timestamp restarts, the SEQ_NUM counter will reset to 0.
#define RCS_TIMESTAMP_SETUP_RESTART_BF_OFF (14)
#define RCS_TIMESTAMP_SETUP_RESTART_BF_WID ( 1)
#define RCS_TIMESTAMP_SETUP_RESTART_BF_MSK (0x00004000)
#define RCS_TIMESTAMP_SETUP_RESTART_BF_DEF (0x00000000)

///< This bit will globally disable the entire timestamp opperation and
///< overrides the individual EC_ENABLE bits.  It will only take effect
///< at the end of the current window (if active).  While globally disabled
///< if the RESTART bit is set when it finishes the current window then
///< the event channel operation will not restart until both the GLOBAL_DISABLE
///< is 0 and the BFN counter matches the value in WINDOW_START.
#define RCS_TIMESTAMP_SETUP_GLOBAL_DIS_BF_OFF (15)
#define RCS_TIMESTAMP_SETUP_GLOBAL_DIS_BF_WID ( 1)
#define RCS_TIMESTAMP_SETUP_GLOBAL_DIS_BF_MSK (0x00008000)
#define RCS_TIMESTAMP_SETUP_GLOBAL_DIS_BF_DEF (0x00000000)


/** @brief RCS_TIMESTAMP_COM_REG_GPIOGRP_DEBOUNCE_7_0 register description at address offset 0x50
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_timestamp_com/reg/gpiogrp_debounce_7_0
  * EC GPIO Group Debounce
  */

typedef union {
  struct {
    uint32_t GRP_DBNCE_0 : 3;
    ///< 0 - Change is immediate. 1 - Change stable for 2 cycles. 2 - Change
    ///< stable for 4 cycles. 3 - Change stable for 8 cycles. 4 - Change stable
    ///< for 16 cycles.  5 - Change stable for 32 cycles, 6-7 - reserved.
    ///< Internally the value will only be updated either before the first
    ///< window starts or at the start of a new window.  Thus, this value is
    ///< constant across a timestamp window.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t GRP_DBNCE_1 : 3;
    ///< 0 - Change is immediate. 1 - Change stable for 2 cycles. 2 - Change
    ///< stable for 4 cycles. 3 - Change stable for 8 cycles. 4 - Change stable
    ///< for 16 cycles.  5 - Change stable for 32 cycles, 6-7 - reserved.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t GRP_DBNCE_2 : 3;
    ///< 0 - Change is immediate. 1 - Change stable for 2 cycles. 2 - Change
    ///< stable for 4 cycles. 3 - Change stable for 8 cycles. 4 - Change stable
    ///< for 16 cycles.  5 - Change stable for 32 cycles, 6-7 - reserved.
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t GRP_DBNCE_3 : 3;
    ///< 0 - Change is immediate. 1 - Change stable for 2 cycles. 2 - Change
    ///< stable for 4 cycles. 3 - Change stable for 8 cycles. 4 - Change stable
    ///< for 16 cycles.  5 - Change stable for 32 cycles, 6-7 - reserved.
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t GRP_DBNCE_4 : 3;
    ///< 0 - Change is immediate. 1 - Change stable for 2 cycles. 2 - Change
    ///< stable for 4 cycles. 3 - Change stable for 8 cycles. 4 - Change stable
    ///< for 16 cycles.  5 - Change stable for 32 cycles, 6-7 - reserved.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t GRP_DBNCE_5 : 3;
    ///< 0 - Change is immediate. 1 - Change stable for 2 cycles. 2 - Change
    ///< stable for 4 cycles. 3 - Change stable for 8 cycles. 4 - Change stable
    ///< for 16 cycles.  5 - Change stable for 32 cycles, 6-7 - reserved.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t GRP_DBNCE_6 : 3;
    ///< 0 - Change is immediate. 1 - Change stable for 2 cycles. 2 - Change
    ///< stable for 4 cycles. 3 - Change stable for 8 cycles. 4 - Change stable
    ///< for 16 cycles.  5 - Change stable for 32 cycles, 6-7 - reserved.
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t GRP_DBNCE_7 : 3;
    ///< 0 - Change is immediate. 1 - Change stable for 2 cycles. 2 - Change
    ///< stable for 4 cycles. 3 - Change stable for 8 cycles. 4 - Change stable
    ///< for 16 cycles.  5 - Change stable for 32 cycles, 6-7 - reserved.
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} rcs_timestamp_gpiogrp_debounce_7_0_reg_t;

#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_7_0_DEFAULT (0x00000000U)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_7_0_RD_MASK (0x00ffffffU)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_7_0_WR_MASK (0x00ffffffU)


///< 0 - Change is immediate. 1 - Change stable for 2 cycles. 2 - Change
///< stable for 4 cycles. 3 - Change stable for 8 cycles. 4 - Change stable
///< for 16 cycles.  5 - Change stable for 32 cycles, 6-7 - reserved.
///< Internally the value will only be updated either before the first
///< window starts or at the start of a new window.  Thus, this value is
///< constant across a timestamp window.
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_7_0_GRP_DBNCE_0_BF_OFF ( 0)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_7_0_GRP_DBNCE_0_BF_WID ( 3)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_7_0_GRP_DBNCE_0_BF_MSK (0x00000007)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_7_0_GRP_DBNCE_0_BF_DEF (0x00000000)

///< 0 - Change is immediate. 1 - Change stable for 2 cycles. 2 - Change
///< stable for 4 cycles. 3 - Change stable for 8 cycles. 4 - Change stable
///< for 16 cycles.  5 - Change stable for 32 cycles, 6-7 - reserved.
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_7_0_GRP_DBNCE_1_BF_OFF ( 3)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_7_0_GRP_DBNCE_1_BF_WID ( 3)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_7_0_GRP_DBNCE_1_BF_MSK (0x00000038)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_7_0_GRP_DBNCE_1_BF_DEF (0x00000000)

///< 0 - Change is immediate. 1 - Change stable for 2 cycles. 2 - Change
///< stable for 4 cycles. 3 - Change stable for 8 cycles. 4 - Change stable
///< for 16 cycles.  5 - Change stable for 32 cycles, 6-7 - reserved.
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_7_0_GRP_DBNCE_2_BF_OFF ( 6)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_7_0_GRP_DBNCE_2_BF_WID ( 3)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_7_0_GRP_DBNCE_2_BF_MSK (0x000001C0)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_7_0_GRP_DBNCE_2_BF_DEF (0x00000000)

///< 0 - Change is immediate. 1 - Change stable for 2 cycles. 2 - Change
///< stable for 4 cycles. 3 - Change stable for 8 cycles. 4 - Change stable
///< for 16 cycles.  5 - Change stable for 32 cycles, 6-7 - reserved.
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_7_0_GRP_DBNCE_3_BF_OFF ( 9)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_7_0_GRP_DBNCE_3_BF_WID ( 3)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_7_0_GRP_DBNCE_3_BF_MSK (0x00000E00)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_7_0_GRP_DBNCE_3_BF_DEF (0x00000000)

///< 0 - Change is immediate. 1 - Change stable for 2 cycles. 2 - Change
///< stable for 4 cycles. 3 - Change stable for 8 cycles. 4 - Change stable
///< for 16 cycles.  5 - Change stable for 32 cycles, 6-7 - reserved.
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_7_0_GRP_DBNCE_4_BF_OFF (12)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_7_0_GRP_DBNCE_4_BF_WID ( 3)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_7_0_GRP_DBNCE_4_BF_MSK (0x00007000)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_7_0_GRP_DBNCE_4_BF_DEF (0x00000000)

///< 0 - Change is immediate. 1 - Change stable for 2 cycles. 2 - Change
///< stable for 4 cycles. 3 - Change stable for 8 cycles. 4 - Change stable
///< for 16 cycles.  5 - Change stable for 32 cycles, 6-7 - reserved.
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_7_0_GRP_DBNCE_5_BF_OFF (15)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_7_0_GRP_DBNCE_5_BF_WID ( 3)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_7_0_GRP_DBNCE_5_BF_MSK (0x00038000)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_7_0_GRP_DBNCE_5_BF_DEF (0x00000000)

///< 0 - Change is immediate. 1 - Change stable for 2 cycles. 2 - Change
///< stable for 4 cycles. 3 - Change stable for 8 cycles. 4 - Change stable
///< for 16 cycles.  5 - Change stable for 32 cycles, 6-7 - reserved.
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_7_0_GRP_DBNCE_6_BF_OFF (18)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_7_0_GRP_DBNCE_6_BF_WID ( 3)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_7_0_GRP_DBNCE_6_BF_MSK (0x001C0000)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_7_0_GRP_DBNCE_6_BF_DEF (0x00000000)

///< 0 - Change is immediate. 1 - Change stable for 2 cycles. 2 - Change
///< stable for 4 cycles. 3 - Change stable for 8 cycles. 4 - Change stable
///< for 16 cycles.  5 - Change stable for 32 cycles, 6-7 - reserved.
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_7_0_GRP_DBNCE_7_BF_OFF (21)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_7_0_GRP_DBNCE_7_BF_WID ( 3)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_7_0_GRP_DBNCE_7_BF_MSK (0x00E00000)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_7_0_GRP_DBNCE_7_BF_DEF (0x00000000)


/** @brief RCS_TIMESTAMP_COM_REG_GPIOGRP_DEBOUNCE_15_8 register description at address offset 0x54
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_timestamp_com/reg/gpiogrp_debounce_15_8
  * EC GPIO Group Debounce
  */

typedef union {
  struct {
    uint32_t GRP_DBNCE_0 : 3;
    ///< 0 - Change is immediate. 1 - Change stable for 2 cycles. 2 - Change
    ///< stable for 4 cycles. 3 - Change stable for 8 cycles. 4 - Change stable
    ///< for 16 cycles.  5 - Change stable for 32 cycles, 6-7 - reserved.
    ///< Internally the value will only be updated either before the first
    ///< window starts or at the start of a new window.  Thus, this value is
    ///< constant across a timestamp window.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t GRP_DBNCE_1 : 3;
    ///< 0 - Change is immediate. 1 - Change stable for 2 cycles. 2 - Change
    ///< stable for 4 cycles. 3 - Change stable for 8 cycles. 4 - Change stable
    ///< for 16 cycles.  5 - Change stable for 32 cycles, 6-7 - reserved.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t GRP_DBNCE_2 : 3;
    ///< 0 - Change is immediate. 1 - Change stable for 2 cycles. 2 - Change
    ///< stable for 4 cycles. 3 - Change stable for 8 cycles. 4 - Change stable
    ///< for 16 cycles.  5 - Change stable for 32 cycles, 6-7 - reserved.
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t GRP_DBNCE_3 : 3;
    ///< 0 - Change is immediate. 1 - Change stable for 2 cycles. 2 - Change
    ///< stable for 4 cycles. 3 - Change stable for 8 cycles. 4 - Change stable
    ///< for 16 cycles.  5 - Change stable for 32 cycles, 6-7 - reserved.
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t GRP_DBNCE_4 : 3;
    ///< 0 - Change is immediate. 1 - Change stable for 2 cycles. 2 - Change
    ///< stable for 4 cycles. 3 - Change stable for 8 cycles. 4 - Change stable
    ///< for 16 cycles.  5 - Change stable for 32 cycles, 6-7 - reserved.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t GRP_DBNCE_5 : 3;
    ///< 0 - Change is immediate. 1 - Change stable for 2 cycles. 2 - Change
    ///< stable for 4 cycles. 3 - Change stable for 8 cycles. 4 - Change stable
    ///< for 16 cycles.  5 - Change stable for 32 cycles, 6-7 - reserved.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t GRP_DBNCE_6 : 3;
    ///< 0 - Change is immediate. 1 - Change stable for 2 cycles. 2 - Change
    ///< stable for 4 cycles. 3 - Change stable for 8 cycles. 4 - Change stable
    ///< for 16 cycles.  5 - Change stable for 32 cycles, 6-7 - reserved.
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t GRP_DBNCE_7 : 3;
    ///< 0 - Change is immediate. 1 - Change stable for 2 cycles. 2 - Change
    ///< stable for 4 cycles. 3 - Change stable for 8 cycles. 4 - Change stable
    ///< for 16 cycles.  5 - Change stable for 32 cycles, 6-7 - reserved.
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} rcs_timestamp_gpiogrp_debounce_15_8_reg_t;

#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_15_8_DEFAULT (0x00000000U)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_15_8_RD_MASK (0x00ffffffU)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_15_8_WR_MASK (0x00ffffffU)


///< 0 - Change is immediate. 1 - Change stable for 2 cycles. 2 - Change
///< stable for 4 cycles. 3 - Change stable for 8 cycles. 4 - Change stable
///< for 16 cycles.  5 - Change stable for 32 cycles, 6-7 - reserved.
///< Internally the value will only be updated either before the first
///< window starts or at the start of a new window.  Thus, this value is
///< constant across a timestamp window.
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_15_8_GRP_DBNCE_0_BF_OFF ( 0)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_15_8_GRP_DBNCE_0_BF_WID ( 3)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_15_8_GRP_DBNCE_0_BF_MSK (0x00000007)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_15_8_GRP_DBNCE_0_BF_DEF (0x00000000)

///< 0 - Change is immediate. 1 - Change stable for 2 cycles. 2 - Change
///< stable for 4 cycles. 3 - Change stable for 8 cycles. 4 - Change stable
///< for 16 cycles.  5 - Change stable for 32 cycles, 6-7 - reserved.
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_15_8_GRP_DBNCE_1_BF_OFF ( 3)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_15_8_GRP_DBNCE_1_BF_WID ( 3)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_15_8_GRP_DBNCE_1_BF_MSK (0x00000038)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_15_8_GRP_DBNCE_1_BF_DEF (0x00000000)

///< 0 - Change is immediate. 1 - Change stable for 2 cycles. 2 - Change
///< stable for 4 cycles. 3 - Change stable for 8 cycles. 4 - Change stable
///< for 16 cycles.  5 - Change stable for 32 cycles, 6-7 - reserved.
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_15_8_GRP_DBNCE_2_BF_OFF ( 6)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_15_8_GRP_DBNCE_2_BF_WID ( 3)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_15_8_GRP_DBNCE_2_BF_MSK (0x000001C0)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_15_8_GRP_DBNCE_2_BF_DEF (0x00000000)

///< 0 - Change is immediate. 1 - Change stable for 2 cycles. 2 - Change
///< stable for 4 cycles. 3 - Change stable for 8 cycles. 4 - Change stable
///< for 16 cycles.  5 - Change stable for 32 cycles, 6-7 - reserved.
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_15_8_GRP_DBNCE_3_BF_OFF ( 9)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_15_8_GRP_DBNCE_3_BF_WID ( 3)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_15_8_GRP_DBNCE_3_BF_MSK (0x00000E00)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_15_8_GRP_DBNCE_3_BF_DEF (0x00000000)

///< 0 - Change is immediate. 1 - Change stable for 2 cycles. 2 - Change
///< stable for 4 cycles. 3 - Change stable for 8 cycles. 4 - Change stable
///< for 16 cycles.  5 - Change stable for 32 cycles, 6-7 - reserved.
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_15_8_GRP_DBNCE_4_BF_OFF (12)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_15_8_GRP_DBNCE_4_BF_WID ( 3)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_15_8_GRP_DBNCE_4_BF_MSK (0x00007000)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_15_8_GRP_DBNCE_4_BF_DEF (0x00000000)

///< 0 - Change is immediate. 1 - Change stable for 2 cycles. 2 - Change
///< stable for 4 cycles. 3 - Change stable for 8 cycles. 4 - Change stable
///< for 16 cycles.  5 - Change stable for 32 cycles, 6-7 - reserved.
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_15_8_GRP_DBNCE_5_BF_OFF (15)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_15_8_GRP_DBNCE_5_BF_WID ( 3)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_15_8_GRP_DBNCE_5_BF_MSK (0x00038000)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_15_8_GRP_DBNCE_5_BF_DEF (0x00000000)

///< 0 - Change is immediate. 1 - Change stable for 2 cycles. 2 - Change
///< stable for 4 cycles. 3 - Change stable for 8 cycles. 4 - Change stable
///< for 16 cycles.  5 - Change stable for 32 cycles, 6-7 - reserved.
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_15_8_GRP_DBNCE_6_BF_OFF (18)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_15_8_GRP_DBNCE_6_BF_WID ( 3)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_15_8_GRP_DBNCE_6_BF_MSK (0x001C0000)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_15_8_GRP_DBNCE_6_BF_DEF (0x00000000)

///< 0 - Change is immediate. 1 - Change stable for 2 cycles. 2 - Change
///< stable for 4 cycles. 3 - Change stable for 8 cycles. 4 - Change stable
///< for 16 cycles.  5 - Change stable for 32 cycles, 6-7 - reserved.
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_15_8_GRP_DBNCE_7_BF_OFF (21)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_15_8_GRP_DBNCE_7_BF_WID ( 3)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_15_8_GRP_DBNCE_7_BF_MSK (0x00E00000)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_15_8_GRP_DBNCE_7_BF_DEF (0x00000000)


/** @brief RCS_TIMESTAMP_COM_REG_EC_OV_ERR_MASK_R register description at address offset 0x58
  *
  * Register default value:        0x0000FFFF
  * Register full path in IP: rcs_timestamp_com/reg/ec_ov_err_mask_r
  * Mask for EC event overflow error
  */

typedef union {
  struct {
    uint32_t EC_OV_ERR_MASK : 16;
    ///< Mask an Event Channel. Each bit in this register corresponds to an
    ///< Event Channel, with a value of 1 masking event overflow error interrupt
    ///< for the specific Channel.
    ///< AccessType="RW" BitOffset="0" ResetValue="0xFFFF"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} rcs_timestamp_ec_ov_err_mask_r_reg_t;

#define RCS_TIMESTAMP_EC_OV_ERR_MASK_R_DEFAULT (0x0000ffffU)
#define RCS_TIMESTAMP_EC_OV_ERR_MASK_R_RD_MASK (0x0000ffffU)
#define RCS_TIMESTAMP_EC_OV_ERR_MASK_R_WR_MASK (0x0000ffffU)


///< Mask an Event Channel. Each bit in this register corresponds to an
///< Event Channel, with a value of 1 masking event overflow error interrupt
///< for the specific Channel.
#define RCS_TIMESTAMP_EC_OV_ERR_MASK_R_EC_OV_ERR_MASK_BF_OFF ( 0)
#define RCS_TIMESTAMP_EC_OV_ERR_MASK_R_EC_OV_ERR_MASK_BF_WID (16)
#define RCS_TIMESTAMP_EC_OV_ERR_MASK_R_EC_OV_ERR_MASK_BF_MSK (0x0000FFFF)
#define RCS_TIMESTAMP_EC_OV_ERR_MASK_R_EC_OV_ERR_MASK_BF_DEF (0x0000FFFF)


/** @brief RCS_TIMESTAMP_COM_REG_EC_OV_ERR_STATUS_R register description at address offset 0x5c
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_timestamp_com/reg/ec_ov_err_status_r
  * Status for EC event overflow error
  */

typedef union {
  struct {
    uint32_t EC_OV_ERR_STATUS : 16;
    ///< Overflow status of an Event Channel. Each bit in this register corresponds
    ///< to an Event Channel, with a value of 1 indicating an event overflow
    ///< error occured for that channel (more then 15 events occurend during
    ///< the window).  This is a clear on read register.
    ///< AccessType="RO/C/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} rcs_timestamp_ec_ov_err_stat_r_reg_t;

#define RCS_TIMESTAMP_EC_OV_ERR_STAT_R_DEFAULT (0x00000000U)
#define RCS_TIMESTAMP_EC_OV_ERR_STAT_R_RD_MASK (0x0000ffffU)
#define RCS_TIMESTAMP_EC_OV_ERR_STAT_R_WR_MASK (0x00000000U)


///< Overflow status of an Event Channel. Each bit in this register corresponds
///< to an Event Channel, with a value of 1 indicating an event overflow
///< error occured for that channel (more then 15 events occurend during
///< the window).  This is a clear on read register.
#define RCS_TIMESTAMP_EC_OV_ERR_STAT_R_EC_OV_ERR_STAT_BF_OFF ( 0)
#define RCS_TIMESTAMP_EC_OV_ERR_STAT_R_EC_OV_ERR_STAT_BF_WID (16)
#define RCS_TIMESTAMP_EC_OV_ERR_STAT_R_EC_OV_ERR_STAT_BF_MSK (0x0000FFFF)
#define RCS_TIMESTAMP_EC_OV_ERR_STAT_R_EC_OV_ERR_STAT_BF_DEF (0x00000000)


/** @brief RCS_TIMESTAMP_COM_REG_TIMESTAMP_STATUS_R register description at address offset 0x60
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_timestamp_com/reg/timestamp_status_r
  * Timestamp Status
  */

typedef union {
  struct {
    uint32_t INDEX : 16;
    ///< Current Index count for current window. This value will never be larger
    ///< than DURATION
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t SEQ_NUM : 8;
    ///< Current window number.
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t TIMESTAMP_FSM : 3;
    ///< Current value of timestamp FSM
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="27" ResetValue="None"
  } ;
  uint32_t value;
} rcs_timestamp_stat_r_reg_t;

#define RCS_TIMESTAMP_STAT_R_DEFAULT (0x00000000U)
#define RCS_TIMESTAMP_STAT_R_RD_MASK (0x07ffffffU)
#define RCS_TIMESTAMP_STAT_R_WR_MASK (0x00000000U)


///< Current Index count for current window. This value will never be larger
///< than DURATION
#define RCS_TIMESTAMP_STAT_R_INDEX_BF_OFF ( 0)
#define RCS_TIMESTAMP_STAT_R_INDEX_BF_WID (16)
#define RCS_TIMESTAMP_STAT_R_INDEX_BF_MSK (0x0000FFFF)
#define RCS_TIMESTAMP_STAT_R_INDEX_BF_DEF (0x00000000)

///< Current window number.
#define RCS_TIMESTAMP_STAT_R_SEQ_NUM_BF_OFF (16)
#define RCS_TIMESTAMP_STAT_R_SEQ_NUM_BF_WID ( 8)
#define RCS_TIMESTAMP_STAT_R_SEQ_NUM_BF_MSK (0x00FF0000)
#define RCS_TIMESTAMP_STAT_R_SEQ_NUM_BF_DEF (0x00000000)

///< Current value of timestamp FSM
#define RCS_TIMESTAMP_STAT_R_TIMESTAMP_FSM_BF_OFF (24)
#define RCS_TIMESTAMP_STAT_R_TIMESTAMP_FSM_BF_WID ( 3)
#define RCS_TIMESTAMP_STAT_R_TIMESTAMP_FSM_BF_MSK (0x07000000)
#define RCS_TIMESTAMP_STAT_R_TIMESTAMP_FSM_BF_DEF (0x00000000)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define RCS_TIMESTAMP_EC_GPIO_SEL0_REG ((rcs_timestamp_ec_gpio_sel_reg_t*) RCS_TIMESTAMP_EC_GPIO_SEL0_ADR)
#define RCS_TIMESTAMP_EC_GPIO_SEL1_REG ((rcs_timestamp_ec_gpio_sel_reg_t*) RCS_TIMESTAMP_EC_GPIO_SEL1_ADR)
#define RCS_TIMESTAMP_EC_GPIO_SEL2_REG ((rcs_timestamp_ec_gpio_sel_reg_t*) RCS_TIMESTAMP_EC_GPIO_SEL2_ADR)
#define RCS_TIMESTAMP_EC_GPIO_SEL3_REG ((rcs_timestamp_ec_gpio_sel_reg_t*) RCS_TIMESTAMP_EC_GPIO_SEL3_ADR)
#define RCS_TIMESTAMP_EC_GPIO_SEL4_REG ((rcs_timestamp_ec_gpio_sel_reg_t*) RCS_TIMESTAMP_EC_GPIO_SEL4_ADR)
#define RCS_TIMESTAMP_EC_GPIO_SEL5_REG ((rcs_timestamp_ec_gpio_sel_reg_t*) RCS_TIMESTAMP_EC_GPIO_SEL5_ADR)
#define RCS_TIMESTAMP_EC_GPIO_SEL6_REG ((rcs_timestamp_ec_gpio_sel_reg_t*) RCS_TIMESTAMP_EC_GPIO_SEL6_ADR)
#define RCS_TIMESTAMP_EC_GPIO_SEL7_REG ((rcs_timestamp_ec_gpio_sel_reg_t*) RCS_TIMESTAMP_EC_GPIO_SEL7_ADR)
#define RCS_TIMESTAMP_EC_GPIO_SEL8_REG ((rcs_timestamp_ec_gpio_sel_reg_t*) RCS_TIMESTAMP_EC_GPIO_SEL8_ADR)
#define RCS_TIMESTAMP_EC_GPIO_SEL9_REG ((rcs_timestamp_ec_gpio_sel_reg_t*) RCS_TIMESTAMP_EC_GPIO_SEL9_ADR)
#define RCS_TIMESTAMP_EC_GPIO_SEL10_REG ((rcs_timestamp_ec_gpio_sel_reg_t*) RCS_TIMESTAMP_EC_GPIO_SEL10_ADR)
#define RCS_TIMESTAMP_EC_GPIO_SEL11_REG ((rcs_timestamp_ec_gpio_sel_reg_t*) RCS_TIMESTAMP_EC_GPIO_SEL11_ADR)
#define RCS_TIMESTAMP_EC_GPIO_SEL12_REG ((rcs_timestamp_ec_gpio_sel_reg_t*) RCS_TIMESTAMP_EC_GPIO_SEL12_ADR)
#define RCS_TIMESTAMP_EC_GPIO_SEL13_REG ((rcs_timestamp_ec_gpio_sel_reg_t*) RCS_TIMESTAMP_EC_GPIO_SEL13_ADR)
#define RCS_TIMESTAMP_EC_GPIO_SEL14_REG ((rcs_timestamp_ec_gpio_sel_reg_t*) RCS_TIMESTAMP_EC_GPIO_SEL14_ADR)
#define RCS_TIMESTAMP_EC_GPIO_SEL15_REG ((rcs_timestamp_ec_gpio_sel_reg_t*) RCS_TIMESTAMP_EC_GPIO_SEL15_ADR)
#define RCS_TIMESTAMP_EC_GRP_SEL_REG ((rcs_timestamp_ec_grp_sel_reg_t*) RCS_TIMESTAMP_EC_GRP_SEL_ADR)
#define RCS_TIMESTAMP_EC_EN_REG ((rcs_timestamp_ec_en_reg_t*) RCS_TIMESTAMP_EC_EN_ADR)
#define RCS_TIMESTAMP_WND_START_REG ((rcs_timestamp_wnd_start_reg_t*) RCS_TIMESTAMP_WND_START_ADR)
#define RCS_TIMESTAMP_SETUP_REG ((rcs_timestamp_setup_reg_t*) RCS_TIMESTAMP_SETUP_ADR)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_7_0_REG ((rcs_timestamp_gpiogrp_debounce_7_0_reg_t*) RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_7_0_ADR)
#define RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_15_8_REG ((rcs_timestamp_gpiogrp_debounce_15_8_reg_t*) RCS_TIMESTAMP_GPIOGRP_DEBOUNCE_15_8_ADR)
#define RCS_TIMESTAMP_EC_OV_ERR_MASK_R_REG ((rcs_timestamp_ec_ov_err_mask_r_reg_t*) RCS_TIMESTAMP_EC_OV_ERR_MASK_R_ADR)
#define RCS_TIMESTAMP_EC_OV_ERR_STAT_R_REG ((rcs_timestamp_ec_ov_err_stat_r_reg_t*) RCS_TIMESTAMP_EC_OV_ERR_STAT_R_ADR)
#define RCS_TIMESTAMP_STAT_R_REG ((rcs_timestamp_stat_r_reg_t*) RCS_TIMESTAMP_STAT_R_ADR)

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    rcs_timestamp_ec_gpio_sel_reg_t EC_GPIO_SEL[16]; /*< Address offset = 0x0 */
    rcs_timestamp_ec_grp_sel_reg_t EC_GRP_SEL; /*< Address offset = 0x40 */
    rcs_timestamp_ec_en_reg_t EC_EN;       /*< Address offset = 0x44 */
    rcs_timestamp_wnd_start_reg_t WND_START;    /*< Address offset = 0x48 */
    rcs_timestamp_setup_reg_t TIMESTAMP_SETUP; /*< Address offset = 0x4c */
    rcs_timestamp_gpiogrp_debounce_7_0_reg_t GPIOGRP_DEBOUNCE_7_0; /*< Address offset = 0x50 */
    rcs_timestamp_gpiogrp_debounce_15_8_reg_t GPIOGRP_DEBOUNCE_15_8; /*< Address offset = 0x54 */
    rcs_timestamp_ec_ov_err_mask_r_reg_t EC_OV_ERR_MASK_R; /*< Address offset = 0x58 */
    rcs_timestamp_ec_ov_err_stat_r_reg_t EC_OV_ERR_STAT_R; /*< Address offset = 0x5c */
    rcs_timestamp_stat_r_reg_t TIMESTAMP_STAT_R; /*< Address offset = 0x60 */
} rcs_timestamp_t;     // size: 0x0028

// AddressSpace struct pointer
//
#define RCS_TIMER_TIMESTAMP  ((rcs_timestamp_t*) RCS_TIMER_TIMESTAMP_BASE)

// ******************************************* /Address Space

#endif      // _RCS_TIMESTAMP_H_

